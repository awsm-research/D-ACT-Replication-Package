<START_MOD>public final void onSuccess(final T result) { if (screen.isAttached()) { prepare(result); screen.display(); } }<END_MOD>
@java.lang.Override public int run() throws java.lang.Exception { com.google.gerrit.pgm.util.ErrorLogFile.errorOnlyConsole(); <START_MOD>final<END_MOD> java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> plugins = com.google.gerrit.pgm.init.InitPlugins.listPlugins(); <START_MOD>com.google.gerrit.pgm.util.ConsoleUI ui = com.google.gerrit.pgm.util.ConsoleUI.getInstance(false); verifyInstallPluginList(ui, plugins); if (listPlugins) { <END_MOD>ui.message( plugins are: for (com.google.gerrit.pgm.init.InitPlugins.PluginData plugin : plugins) { ui.message( * %s plugin.name); } if (plugins.isEmpty()) { ui.message( plugins found. } return 0; } final com.google.gerrit.pgm.Init.SiteInit init = createSiteInit(); init.flags.autoStart = (!(noAutoStart)) && (init.site.isNew); final com.google.gerrit.pgm.Init.SiteRun run; try { init.initializer.run(); init.flags.deleteOnFailure = false; run = createSiteRun(init); run.upgradeSchema(); } catch (java.lang.Exception failure) { if (init.flags.deleteOnFailure) { com.google.gerrit.pgm.Init.recursiveDelete(getSitePath()); } throw failure; } catch (java.lang.Error failure) { if (init.flags.deleteOnFailure) { com.google.gerrit.pgm.Init.recursiveDelete(getSitePath()); } throw failure; } java.lang.System.err.println((   + (getSitePath().getCanonicalPath()))); run.start(); return 0; }
public void doChangeMergedHook(final com.google.gerrit.reviewdb.Change change, final com.google.gerrit.reviewdb.Account account, final com.google.gerrit.reviewdb.PatchSet patchSet) { final com.google.gerrit.<START_MOD>common<END_MOD>.ChangeMergedEvent event = new com.google.gerrit.<START_MOD>common<END_MOD>.ChangeMergedEvent(); event.change = eventFactory.asChangeAttribute(change); event.submitter = eventFactory.asAccountAttribute(account); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); fireEvent(change, event); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(changeMergedHook.getAbsolutePath()); args.add("--change"); args.add(event.change.id); args.add("--change-url"); args.add(event.change.url); args.add("--project"); args.add(event.change.project); args.add("--branch"); args.add(event.change.branch); args.add("--submitter"); args.add(getDisplayName(account)); args.add("--commit"); args.add(event.patchSet.revision); runHook(getRepo(change), args); }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gwtorm.server.OrmException { try { <START_MOD>com.google.gerrit.server.account.CreateGroupArgs args = new com.google.gerrit.server.account.CreateGroupArgs(); args.setGroupName(groupName); args.groupDescription = groupDescription; args.visibleToAll = visibleToAll; args.ownerGroupId = ownerGroupId; args.initialMembers = initialMembers; args.initialGroups = initialGroups; <END_MOD>performCreateGroupFactory.create(<START_MOD>args<END_MOD>).createGroup(); } catch (com.google.gerrit.common.errors.PermissionDeniedException e) { throw die(e); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw die(e); } }
@java.lang.Override public void setStatus(java.lang.String status) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>StatusInput<END_MOD> in = new com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>StatusInput<END_MOD>(status); try { putStatus.apply(account, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException( set status e); } }
<START_MOD>@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.ReviewerResource> list() throws com.google.gerrit.extensions.restapi.AuthException { throw new java.lang.UnsupportedOperationException(); }<END_MOD>
<START_MOD>@com.google.gerrit.server.query.account.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.account.AccountState> name(java.lang.String name) { return new com.google.gerrit.server.query.account.EqualsNamePredicate(name); }<END_MOD>
@org.junit.Test public void applyDeltaToNullWithNoNewMetaId() <START_MOD>throws java.lang.Exception <END_MOD>{ com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.server.notedb.NoteDbChangeStateTest.newChange(); assertThat(c.getNoteDbState()).isNull(); com.google.gerrit.server.notedb.NoteDbChangeState.applyDelta(c, com.google.gerrit.server.notedb.NoteDbChangeState.Delta.create(c.getId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.noMetaId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.noDrafts())<START_MOD>, nowTs()<END_MOD>); assertThat(c.getNoteDbState()).isNull(); com.google.gerrit.server.notedb.NoteDbChangeState.applyDelta(c, com.google.gerrit.server.notedb.NoteDbChangeState.Delta.create(c.getId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.noMetaId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.drafts(new com.google.gerrit.reviewdb.client.Account.Id(1001), zeroId()))<START_MOD>, nowTs()<END_MOD>); assertThat(c.getNoteDbState()).isNull(); }
<START_MOD>private void secure(final java.io.File path) throws java.io.IOException { if ((!(path.exists())) && (!(path.createNewFile()))) { throw new java.io.IOException(("Cannot create " + path)); } path.setWritable(false, false); path.setReadable(false, false); path.setExecutable(false, false); path.setWritable(true, true); path.setReadable(true, true); }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gitiles.GitilesAccess forRequest(javax.servlet.http.HttpServletRequest req) { return new com.google.gitiles.GitilesAccess() { @java.lang.Override public java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> listRepositories(java.util.Set<java.lang.String> branches) { return java.util.Collections.emptyMap(); } @java.lang.Override public java.lang.Object getUserKey() { return null; } @java.lang.Override public java.lang.String getRepositoryName() { return docRepo.getName(); } @java.lang.Override public com.google.gitiles.RepositoryDescription getRepositoryDescription() { com.google.gitiles.RepositoryDescription d = new com.google.gitiles.RepositoryDescription(); d.name = getRepositoryName(); return d; } @java.lang.Override public org.eclipse.jgit.lib.Config getConfig() { return cfg; } }; }<END_MOD>
<START_MOD>public void setGroups(com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.server.notedb.ChangeUpdate update, java.lang.Iterable<java.lang.String> groups) { ps.setGroups(groups); update.setGroups(groups); }<END_MOD>
public void unstarAll(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.BatchRefUpdate batchUpdate = repo.getRefDatabase().newBatchUpdate(); batchUpdate.setAllowNonFastForwards(true); batchUpdate.setRefLogIdent(serverIdent); batchUpdate.setRefLogMessage(( change   + (changeId.get())), true); for (com.google.gerrit.reviewdb.client.Account.Id accountId : byChangeFromIndex(changeId)) { java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsStarredChanges(accountId, changeId); org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().getRef(refName); batchUpdate.addCommand(new org.eclipse.jgit.transport.ReceiveCommand(ref.getObjectId(), org.eclipse.jgit.lib.ObjectId.zeroId(), refName)); } batchUpdate.execute(rw, NullProgressMonitor.INSTANCE); for (org.eclipse.jgit.transport.ReceiveCommand command : batchUpdate.getCommands()) { if ((command.getResult()) != (ReceiveCommand.Result.OK)) { throw new java.io.IOException(java.lang.String.format( change %d failed, ref %s could not be deleted: %s changeId.get(), command.getRefName(), command.getResult())); } } indexer.index(dbProvider.get(), project, changeId); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format( change %d failed changeId.get()), e); } }
@org.junit.Test public void selfRevokedKey() throws java.lang.Exception { assertProblems(com.google.gerrit.gpg.testutil.TestKeys.<START_MOD>selfRevokedKey<END_MOD>(),   is revoked }
<START_MOD>private java.lang.String getUrl(final com.google.gerrit.reviewdb.Patch p, java.lang.String style) { java.lang.StringBuffer url = new java.lang.StringBuffer(); url.append(Window.Location.getPath()); url.append("#"); url.append(style); if ((diffBaseId) != null) { url.append(DiffPatchScreen.URL_PARAMETER_MARK_START); url.append(DiffPatchScreen.URL_PARAMETER_KEY_OF_PATCHSET_TO_DIFF_WITH); url.append(DiffPatchScreen.URL_PARAMETER_MARK_BETWWEN_KEY_AND_VALUE); url.append(diffBaseId.toString()); } return url.toString(); }<END_MOD>
@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws java.lang.Exception { <START_MOD>if ((addedCCs) != null) { emailCCs(rsrc.getChange(), addedCCs); } if ((addedReviewers) != null) { <END_MOD>emailReviewers(rsrc.getChange(), <START_MOD>addedReviewers<END_MOD>); if (!(<START_MOD>addedReviewers<END_MOD>.isEmpty())) { for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : <START_MOD>addedReviewers<END_MOD>) { com.google.gerrit.reviewdb.client.Account account = accountCache.get(psa.getAccountId()).getAccount(); reviewerAdded.fire(rsrc.getChange(), patchSet, account); } } }<START_MOD> }<END_MOD>
static void call(final com.google.gwt.user.client.ui.Button b, final <START_MOD>com.google.gerrit.reviewdb.client.Project.NameKey<END_MOD> project) { b.setEnabled(false); com.google.gerrit.client.changes.ChangeApi.createChange(project<START_MOD>.get()<END_MOD>, RefNames.REFS_CONFIG, null, AdminConstants.I.editConfigMessage(), null, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(new com.google.gerrit.reviewdb.client.PatchSet.Id(result.legacyId(), 1), <START_MOD>project, <END_MOD>"project.config")); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { b.setEnabled(true); super.onFailure(caught); } }); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.<START_MOD>ResourceConflictException, com.google.gerrit.extensions.restapi.<END_MOD>ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException {<START_MOD> rsrc.getProjectState().checkStatePermitsRead();<END_MOD> return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }
<START_MOD>protected void prepareHeaderWidgets(com.google.gerrit.common.data.PatchScript script, com.google.gerrit.common.data.PatchSetDetail detail) { initPatchSetListForTableHeader(); psListOfHeaderA.display(detail, script, patchKey, idSideA, idSideB); psListOfHeaderB.display(detail, script, patchKey, idSideA, idSideB); }<END_MOD>
<START_MOD>public static java.lang.String createCommit(com.google.gerrit.acceptance.SshSession s, org.eclipse.jgit.api.Git git, java.lang.String msg) throws java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { return com.google.gerrit.acceptance.git.ssh.GitUtil.createCommit(s, git, msg, true); }<END_MOD>
<START_MOD>public static com.google.gerrit.metrics.Field<java.lang.String> ofString(java.lang.String name) { return new com.google.gerrit.metrics.Field<>(name, java.lang.String.class); }<END_MOD>
private void checkComments(java.util.Map<com.google.gerrit.reviewdb.client.RevId, com.google.gerrit.server.notedb.RevisionNote> existingNotes, java.util.Map<com.google.gerrit.reviewdb.client.RevId, com.google.gerrit.server.notedb.RevisionNoteBuilder> toUpdate) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Comment.Key> existing = new java.util.HashSet<>(); for (com.google.gerrit.server.notedb.RevisionNote rn : existingNotes.values()) { for (com.google.gerrit.reviewdb.client.Comment c : rn.<START_MOD>getComments()<END_MOD>) { existing.add(c.key); if ((draftUpdate) != null) { draftUpdate.deleteComment(c.revId, c.key); } } } for (com.google.gerrit.server.notedb.RevisionNoteBuilder b : toUpdate.values()) { for (com.google.gerrit.reviewdb.client.Comment c : b.put.values()) { if (existing.contains(c.key)) { throw new com.google.gwtorm.server.OrmException(( update existing published comment:   + c)); } } } }
void display(com.google.gerrit.client.projects.ConfigInfo result) { descTxt.setText(result.description()); setBool(contributorAgreements, result.use_contributor_agreements()); setBool(signedOffBy, result.use_signed_off_by()); setBool(contentMerge, result.use_content_merge()); setBool(<START_MOD>autoBase, result.use_auto_base()); setBool(<END_MOD>requireChangeID, result.require_change_id()); setSubmitType(result.submit_type()); setState(result.state()); maxObjectSizeLimit.setText(result.max_object_size_limit().configured_value()); if ((result.max_object_size_limit().inherited_value()) != null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setText(Util.M.effectiveMaxObjectSizeLimit(result.max_object_size_limit().value())); effectiveMaxObjectSizeLimit.setTitle(Util.M.globalMaxObjectSizeLimit(result.max_object_size_limit().inherited_value())); } else { effectiveMaxObjectSizeLimit.setVisible(false); } saveProject.setEnabled(false); initPluginOptions(result); initProjectActions(result); }
private void assertBadRequest(com.google.gerrit.extensions.api.projects.ProjectApi.ListRefsRequest<com.google.gerrit.extensions.api.projects.BranchInfo> req) throws java.lang.Exception { try { req.get(); <START_MOD>assert_().<END_MOD>fail( BadRequestException } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }
<START_MOD>public static boolean includedInOne(final org.eclipse.jgit.lib.Repository repo, final org.eclipse.jgit.revwalk.RevWalk rw, final org.eclipse.jgit.revwalk.RevCommit commit, final java.util.Set<org.eclipse.jgit.lib.Ref> tipRefs) throws java.io.IOException { return !(com.google.gerrit.server.change.IncludedInResolver.includedIn(repo, rw, commit, tipRefs, 1).isEmpty()); }<END_MOD>
void schedule(final com.google.gerrit.reviewdb.client.Project.NameKey project, final java.lang.String ref, final org.eclipse.jgit.transport.URIish uri, com.googlesource.gerrit.plugins.replication.ReplicationState state) { com.googlesource.gerrit.plugins.replication.Destination.repLog.info( replication {}:{} => {} project, ref, uri); if (!(isVisible(project, state))) { return; } if (!(config.replicatePermissions())) { com.googlesource.gerrit.plugins.replication.PushOne e; synchronized(stateLock) { e = pending.get(uri); } if (e == null) { try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(project)) { try { org.eclipse.jgit.lib.Ref head = git.exactRef(Constants.HEAD); if (((head != null) && (head.isSymbolic())) && (RefNames.REFS_CONFIG.equals(head.getLeaf().getName()))) { return; } } catch (java.io.IOException err) { stateLog.error(java.lang.String.format( check type of project %s project), err, state); return; } } catch (java.io.IOException err) { stateLog.error(java.lang.String.format( project %s not available project), err, state); return; } } } synchronized(stateLock) { com.googlesource.gerrit.plugins.replication.PushOne e = pending.get(uri); if (e == null) { e = opFactory.create(project, uri); <START_MOD>e.addRef(ref); scheduleTask<END_MOD>(e, config.getDelay(), java.util.concurrent.TimeUnit.SECONDS); pending.put(uri, e); } <START_MOD>else if (!(e.getRefs().contains(ref))) { <END_MOD>e.addRef(ref);<START_MOD> postEvent(e, ref); }<END_MOD> state.increasePushTaskCount(project.get(), ref); e.addState(ref, state); com.googlesource.gerrit.plugins.replication.Destination.repLog.info( {}:{} => {} to run after {}s project, ref, e, config.getDelay()); } }
<START_MOD>public void setLastLoginExternalIdKey(com.google.gerrit.reviewdb.client.AccountExternalId.Key externalIdKey) { lastLoginExternalIdPropertyKey = com.google.gerrit.server.CurrentUser.PropertyKey.create(); put(lastLoginExternalIdPropertyKey, externalIdKey); }<END_MOD>
<START_MOD>public boolean isMutedBy(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { return byChange(change.getId(), (((com.google.gerrit.server.StarredChangesUtil.MUTE_LABEL) + "/") + (change.currentPatchSetId().get()))).contains(accountId); }<END_MOD>
@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo> m) { files.set((base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, base._number()) : null), new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, rev._number()), style, editMessage, <START_MOD>review<END_MOD>, ((edit) != null)); files.setValue(m, myLastReply, comments.get(0), drafts.get(0), fileTableMode); }
public void onSuccess(com.google.gerrit.client.extensions.TopMenuList result) { java.util.List<com.google.gerrit.client.extensions.TopMenu> topMenuExtensions = com.google.gerrit.client.rpc.Natives.asList(result); for (com.google.gerrit.client.extensions.TopMenu menu : topMenuExtensions) { <START_MOD>java.lang.String name = menu.getName(); <END_MOD>com.google.gerrit.client.ui.LinkMenuBar existingBar = com.google.gerrit.client.Gerrit.menuBars.get(<START_MOD>name); com.google.gerrit.client.ui.LinkMenuBar bar = (existingBar != null) ? existingBar : new com.google.gerrit.client.ui.LinkMenuBar(); if (GerritTopMenu.PROJECTS.menuName.equals(name)) { for (com.google.gerrit.client.extensions.TopMenuItem item : com.google.gerrit.client.rpc.Natives.asList(<END_MOD>menu.<START_MOD>getItems())) { java.lang.String url = item.getUrl(); if ((url.startsWith("http://")) || (url.startsWith("https://"))) { com.google.gerrit.client.Gerrit.addExtensionLink(bar, item); } else { addProjectLink(bar, item.<END_MOD>getName()<START_MOD>, url); } } } else { for (com.google.gerrit.client.extensions.TopMenuItem item : com.google.gerrit.client.rpc.Natives.asList(menu.getItems())) { com.google.gerrit.client.Gerrit.addExtensionLink(bar, item); } } if<END_MOD> (existingBar <START_MOD>==<END_MOD> null) { com.google.gerrit.client.Gerrit.<START_MOD>menuBars.put(name, bar);<END_MOD> com.google.gerrit.client.Gerrit.menuLeft.add(bar, <START_MOD>name); } } }<END_MOD>
<START_MOD>private com.googlesource.gerrit.plugins.manager.gson.SmartJson fetchArtifactJson(com.googlesource.gerrit.plugins.manager.gson.SmartJson buildExecution, com.google.gson.JsonArray artifacts, java.lang.String artifactSuffix) throws java.io.IOException { java.util.Optional<com.googlesource.gerrit.plugins.manager.gson.SmartJson> verArtifactJson = findArtifact(artifacts, artifactSuffix); if (verArtifactJson.isPresent()) { return new com.googlesource.gerrit.plugins.manager.gson.SmartGson().get(java.lang.String.format("%s/artifact/%s", buildExecution.getString("url"), verArtifactJson.get().getString("relativePath"))); } return com.googlesource.gerrit.plugins.manager.gson.SmartJson.NULL; }<END_MOD>
public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision()) != null ? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences())<START_MOD>, com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences())<END_MOD>); }
<START_MOD>@org.junit.Test public void administratorCanSetUserChangePrivate() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> userRepo = cloneProject(project, user); com.google.gerrit.acceptance.PushOneCommit.Result result = pushFactory.create(db, user.getIdent(), userRepo).to("refs/for/master"); java.lang.String changeId = result.getChangeId(); assertThat(gApi.changes().id(changeId).get().isPrivate).isNull(); gApi.changes().id(changeId).addReviewer(admin.username); gApi.changes().id(changeId).setPrivate(true, null); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(changeId).get(); assertThat(info.isPrivate).isTrue(); }<END_MOD>
void start()<START_MOD> { try<END_MOD> { oracle.requestSuggestions(request, this); }<START_MOD> catch (java.lang.Exception e) { query = null; } }<END_MOD>
<START_MOD>@java.lang.Override public boolean handles(java.io.File srcFile) { for (com.google.gerrit.server.plugins.ServerPluginProvider scriptingFactory : serverPluginProviders) { if (scriptingFactory.handles(srcFile)) { return true; } } return false; }<END_MOD>
@org.junit.Test public void deleteEdit() throws java.lang.Exception { assertEquals(RefUpdate.Result.NEW, modifier.createEdit(change, ps)); assertEquals(RefUpdate.Result.FORCED, modifier.modifyFile(editUtil.byChange(change).get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.<START_MOD>RestSession.newRawInput(com.google.gerrit.acceptance.<END_MOD>edit.ChangeEditIT.CONTENT_NEW<START_MOD>)<END_MOD>)); editUtil.delete(editUtil.byChange(change).get()); assertFalse(editUtil.byChange(change).isPresent()); }
private static com.google.gerrit.server.query.change.ChangeData change(java.lang.String... files) { java.util.Arrays.sort(files); com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData(null, null, null, <START_MOD>null, null, null, <END_MOD>new com.google.gerrit.reviewdb.client.Change.Id(1)); cd.setCurrentFilePaths(java.util.Arrays.asList(files)); return cd; }
public void run() { if (cm.hasActiveLine()) { cm.removeLineClass(cm.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); cm.removeLineClass(cm.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } if (other.hasActiveLine()) { other.removeLineClass(other.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); other.removeLineClass(other.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } int line = <START_MOD>getCursorLine(cm); net.codemirror.lib.CodeMirror.LineHandle handle = cm.getLineHandle(line); cm.setActiveLine(handle); if (cm.somethingSelected()) { return; } cm.addLineClass(line, LineClassWhere.WRAP, diffTable.style.activeLine()); cm.addLineClass(line, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo info = mapper.lineOnOther((cm == (cmA) ? com.google.gerrit.common.changes.Side.PARENT : com.google.gerrit.common.changes.Side.REVISION), line); int oLine = info<END_MOD>.getLine(); <START_MOD>if (info.isAligned()) { other.setActiveLine(other<END_MOD>.getLineHandle(<START_MOD>oLine)); other<END_MOD>.addLineClass(<START_MOD>oLine<END_MOD>, LineClassWhere.WRAP, diffTable.style.activeLine()); <START_MOD>other<END_MOD>.addLineClass(<START_MOD>oLine<END_MOD>, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); <START_MOD>} }<END_MOD>
private void parseDelete(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canDelete()) { batch.addCommand(cmd); } else { if (GitRepositoryManager.REF_CONFIG.equals(ctl.getRefName())) { reject(cmd<START_MOD>);<END_MOD> } else { errors.put(com.google.gerrit.server.git.ReceiveCommits.Error.DELETE, ctl.getRefName()); reject(cmd<START_MOD>);<END_MOD> } } }
<START_MOD>@java.lang.Override public int hashCode() { return ((((fp[4]) << 24) & ((fp[5]) << 16)) & ((fp[6]) << 8)) & (fp[7]); }<END_MOD>
public boolean doTransition(java.lang.String issueKey, java.lang.String transition) throws com.googlesource.gerrit.plugins.its.base.its.InvalidTransitionException<START_MOD>, com.googlesource.gerrit.plugins.its.jira.JiraRestException { com.googlesource.gerrit.plugins.its.jira.JiraClient.log.debug( transition to {} for {} transition, issueKey); com.googlesource.gerrit.plugins.its.jira.JiraTransition.Item<END_MOD> t = getTransitionByName(getTransitions(issueKey), transition); if (t == null) { throw new com.googlesource.gerrit.plugins.its.base.its.InvalidTransitionException((((   + transition) +   not executable on issue   + issueKey)); } com.<START_MOD>googlesource.gerrit.plugins.its.jira.JiraClient.log.debug( issue {} to '{}' ({}) issueKey, transition, t.getId()); doPost((("/rest/api/2/issue/" + issueKey) + "/transitions"), gson.toJson(<END_MOD>new com.<START_MOD>googlesource.gerrit.plugins.its.jira.JiraTransition(t))<END_MOD>); return true; }
private void addSubmitRecordLabels(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.labels) != null) && (!(submitRecord.labels.isEmpty()))) { sa.labels = new java.util.ArrayList(); for (SubmitRecord.Label lbl : submitRecord.labels) { com.google.gerrit.server.data.SubmitLabelAttribute la = new com.google.gerrit.server.data.SubmitLabelAttribute(); la.label = lbl.label; la.status = lbl.status.name(); if ((lbl.appliedBy) != null) { com.google.gerrit.server.account.AccountState accountState = accountCache.<START_MOD>getEvenIfMissing<END_MOD>(lbl.appliedBy); la.by = asAccountAttribute(accountState); } sa.labels.add(la); } } }
private void serveGwtUi() { <START_MOD>serveRegex<END_MOD>(<START_MOD>"^/gerrit_ui/(?!rpc/).*"<END_MOD>).with(com.google.inject.Key.get(javax.servlet.http.HttpServlet.class, com.google.inject.name.Names.named(com.google.gerrit.httpd.raw.StaticModule.GWT_UI_SERVLET))); if ((warFs) == null) { filter("/").through(new com.google.gerrit.httpd.raw.RecompileGwtUiFilter(buckOut, unpackedWar)); } }
private void initPluginOptions(com.google.gerrit.client.projects.ConfigInfo info) { pluginOptionsPanel.clear(); pluginConfigWidgets = new java.util.HashMap(); for (java.lang.String pluginName : info.pluginConfig().keySet()) { java.util.Map<java.lang.String, com.google.gwt.user.client.ui.FocusWidget> widgetMap = new java.util.HashMap<>(); pluginConfigWidgets.put(pluginName, widgetMap); com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid g = new com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid(); g.addHeader(new com.google.gerrit.client.ui.SmallHeading(Util.M.pluginProjectOptionsTitle(pluginName))); pluginOptionsPanel.add(g); com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo> pluginConfig = info.pluginConfig(pluginName); pluginConfig.copyKeysIntoChildren("name"); for (com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo param : com.google.gerrit.client.rpc.Natives.asList(pluginConfig.values())) { com.google.gwt.user.client.ui.FocusWidget w; if ("STRING".equals(param.type())) { w = renderTextBox(g, param, false); } else if (("INT".equals(param.type())) || ("LONG".equals(param.type()))) { w = renderTextBox(g, param, true); } else if ("BOOLEAN".equals(param.type())) { w = renderCheckBox(g, param); } else if (("LIST".equals(param.type())) && ((param.permittedValues()) != null)) { w = renderListBox(g, param); } else <START_MOD>if ("MULTIPLE".equals(param.type())) { w = renderTextArea(g, param); } else <END_MOD>{ continue; } if (param.editable()) { widgetMap.put(param.name(), w); } else { w.setEnabled(false); } } } enableForm(); }
@org.junit.Test public void testGetJGroupsCluster() throws java.lang.Exception { <START_MOD>globalPluginConfig<END_MOD>.<START_MOD>setString<END_MOD>(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUSTER_NAME_KEY<START_MOD>, <END_MOD>"foo"); assertThat(<START_MOD>getConfiguration()<END_MOD>.jgroups().clusterName()).isEqualTo("foo"); }
<START_MOD>static com.google.gerrit.extensions.common.GpgKeyInfo toJson(org.bouncycastle.openpgp.PGPPublicKey key) throws java.io.IOException { com.google.gerrit.extensions.common.GpgKeyInfo info = new com.google.gerrit.extensions.common.GpgKeyInfo(); info.id = com.google.gerrit.server.git.gpg.PublicKeyStore.keyIdToString(key.getKeyID()); info.fingerprint = com.google.gerrit.server.git.gpg.PublicKeyStore.fingerprintToString(key.getFingerprint()); @java.lang.SuppressWarnings("unchecked") java.util.Iterator<java.lang.String> userIds = key.getUserIDs(); info.userIds = com.google.common.collect.ImmutableList.copyOf(userIds); try (java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(4096);org.bouncycastle.bcpg.ArmoredOutputStream aout = new org.bouncycastle.bcpg.ArmoredOutputStream(out)) { key.encode(aout); info.key = new java.lang.String(out.toByteArray(), java.nio.charset.StandardCharsets.UTF_8); } return info; }<END_MOD>
private <T> T execute(com.google.gerrit.server.update.RetryHelper.<START_MOD>ChangeAction<END_MOD><T> <START_MOD>changeAction<END_MOD>, com.<START_MOD>github<END_MOD>.<START_MOD>rholder<END_MOD>.<START_MOD>retry<END_MOD>.<START_MOD>Retryer<END_MOD><<START_MOD>T<END_MOD>> <START_MOD>retryer<END_MOD>) throws java.lang.Throwable { <START_MOD>try { return retryer<END_MOD>.<START_MOD>call(() -> changeAction<END_MOD>.<START_MOD>call<END_MOD>(<START_MOD>updateFactory)<END_MOD>); <START_MOD>}<END_MOD> <START_MOD>catch (java.util.concurrent.ExecutionException |<END_MOD> com.github.rholder.retry.<START_MOD>RetryException<END_MOD> <START_MOD>e)<END_MOD> <START_MOD>{<END_MOD> <START_MOD>if <END_MOD>(<START_MOD>e<END_MOD> <START_MOD>instanceof com.github.rholder.retry.RetryException<END_MOD>) <START_MOD>{ metrics<END_MOD>.<START_MOD>timeoutCount.increment<END_MOD>(); } <START_MOD>if ((e.getCause()) != null)<END_MOD> { <START_MOD>throw e<END_MOD>.<START_MOD>getCause<END_MOD>(); } <START_MOD>throw e; <END_MOD>}<START_MOD> }<END_MOD>
<START_MOD>private boolean isEditeable(com.google.gerrit.client.diff.FileInfo info) { java.lang.String status = info.status(); return (status == null) || (!(ChangeType.DELETED.matches(status))); }<END_MOD>
@java.lang.Override public synchronized void onGitReferenceUpdated(com.googlesource.gerrit.plugins.supermanifest.Event event) { if (event.getProjectName().equals(allProjectsName.get())) { if (event.getRefName().equals("refs/meta/config")) { updateConfiguration(); } return; } for (com.googlesource.gerrit.plugins.supermanifest.<START_MOD>ConfigEntry c : config) { if (!(c.srcRepoKey.get().equals(event.getProjectName()))) { continue; } if (!((c.destBranch.equals("*")) || (c.srcRef.equals(event.getRefName())))) { continue; } if ((c.destBranch.equals("*")) && (!(event.getRefName().startsWith(com.googlesource.gerrit.plugins.supermanifest.REFS_HEADS)))) { continue; } try { com.googlesource.gerrit.plugins.supermanifest.SubModuleUpdater subModuleUpdater = c.getSubModuleUpdater(serverIdent, canonicalWebUrl); try (com.googlesource.gerrit.plugins.supermanifest.<END_MOD>SuperManifestRefUpdatedListener.<START_MOD>GerritRemoteReader reader = new com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader()) { subModuleUpdater.update(reader, c, <END_MOD>event.getRefName())<START_MOD>; }<END_MOD> } catch (java.<START_MOD>lang.Exception<END_MOD> e) { java.lang.StackTraceElement here = java.lang.Thread.currentThread().getStackTrace()[1]; e.setStackTrace(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.trimStack(e.getStackTrace(), here)); <START_MOD>java.io.StringWriter sw = new java.io.StringWriter(); java.io.PrintWriter pw = new java.io.PrintWriter(sw); e.printStackTrace(pw); <END_MOD>error( for %s (ref %s) failed: %s c.toString(), event.getRefName(), <START_MOD>sw); } } }<END_MOD>
<START_MOD>public void testMultipleIndexPredicates() throws java.lang.Exception { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> f1 = new com.google.gerrit.server.query.change.IndexRewriteTest.FieldPredicate("f1"); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> o2 = new com.google.gerrit.server.query.change.IndexRewriteTest.OpPredicate("o2", "o2"); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> f3 = new com.google.gerrit.server.query.change.IndexRewriteTest.FieldPredicate("f3"); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> o4 = new com.google.gerrit.server.query.change.IndexRewriteTest.OpPredicate("o4", "o4"); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> in = com.google.gerrit.server.query.Predicate.and(f1, o2, f3, o4); assertEquals(4, in.getChildCount()); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> out = rewrite.rewrite(in); assertSame(com.google.gerrit.server.query.AndPredicate.class, out.getClass()); assertEquals(com.google.common.collect.ImmutableList.of(o2, o4, wrap(com.google.gerrit.server.query.Predicate.and(f1, f3))), out.getChildren()); }<END_MOD>
public void merge(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser caller, boolean checkSubmitRules) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { this.caller = caller; updateSubmissionId(change); this.db = db; logDebug( integration of {} change); try { com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.completeChangeSet(db, change); com.google.gerrit.server.git.MergeOp.reloadChanges(cs); logDebug( to merge {} cs); if (checkSubmitRules) { logDebug( submit rules and state checkSubmitRulesAndState(cs); failFast(cs); } <START_MOD>else { bypassSubmitRules(cs); } <END_MOD>try { integrateIntoHistory(cs); } catch (com.google.gerrit.server.git.IntegrationException e) { logError( Conflict e); throw new com.google.gerrit.extensions.restapi.ResourceConflictException( Conflict e); } } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } }
@java.lang.Override protected void configure() { install(new com.google.gerrit.server.rules.PrologModule.EnvironmentModule()); bind(PrologEnvironment.Args.class); <START_MOD>factory(PrologRuleEvaluator.Factory.class); <END_MOD>}
@org.junit.Test public void setParent() throws java.lang.Exception { java.lang.String parent = "parent"; com.google.gerrit.acceptance.GitUtil.createProject(sshSession, parent, null, true); com.google.gerrit.acceptance.RestResponse r = adminSession.put((("/projects/" + (project.get())) + "/parent"), newParentInput(parent)); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); r.consume(); r = adminSession.get((("/projects/" + (project.get())) + "/parent")); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); java.lang.String newParent = newGson().fromJson(r.getReader(), java.lang.String.class); assertThat(newParent).isEqualTo(parent); r.consume(); <START_MOD>r = adminSession.put((("/projects/" + (project.get())) + "/parent"), newParentInput(null)); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); r.consume(); r = adminSession.get((("/projects/" + (project.get())) + "/parent")); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); newParent = newGson().fromJson(r.getReader(), java.lang.String.class); assertThat(newParent).isEqualTo("All-Projects"); r.consume(); <END_MOD>}
<START_MOD>@java.lang.Override protected void configure() { persist(com.googlesource.gerrit.plugins.xdocs.XDocLoader.Module.X_DOC_RESOURCES, com.googlesource.gerrit.plugins.xdocs.XDocResourceKey.class, com.google.gerrit.httpd.resources.Resource.class).maximumWeight((2 << 20)).weigher(com.googlesource.gerrit.plugins.xdocs.XDocLoader.XDocResourceWeigher.class).loader(com.googlesource.gerrit.plugins.xdocs.XDocLoader.class); }<END_MOD>
public <START_MOD>java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>List<END_MOD><com.google.gerrit.extensions.common.WebLinkInfo> getFileHistoryLinks(java.lang.String project, java.lang.String revision, java.lang.String file) { return filterLinks(fileHistoryLinks, ( webLink) -> webLink.getFileHistoryWebLink(project, revision, file)); }
<START_MOD>@org.junit.Test public void rebaseNotAllowedForOwnerWithoutPushPermission() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); testRepo.reset("HEAD~1"); com.google.gerrit.acceptance.PushOneCommit.Result r2 = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); revision.review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); revision.submit(); block(Permission.PUSH, com.google.gerrit.acceptance.api.change.REGISTERED_USERS, "refs/for/*").setForce(true); java.lang.String changeId = r2.getChangeId(); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage("rebase not permitted"); gApi.changes().id(changeId).rebase(); }<END_MOD>
public void run() throws java.lang.Exception { ui.header( Daemon java.lang.String hostname = "*"; int port = 29418; java.lang.String listenAddress = sshd.get("listenAddress"); if (com.google.gerrit.pgm.init.InitSshd.isOff(listenAddress)) { hostname = "off"; } else if ((listenAddress != null) && (!(listenAddress.isEmpty()))) { final java.net.InetSocketAddress addr = com.google.gerrit.server.util.SocketUtil.parse(listenAddress, port); hostname = com.google.gerrit.server.util.SocketUtil.hostname(addr); port = addr.getPort(); } hostname = ui.readString(hostname,   on address if (com.google.gerrit.pgm.init.InitSshd.isOff(hostname)) { sshd.set("listenAddress", "off"); return; } port = ui.readInt(port,   on port sshd.set("listenAddress", com.google.gerrit.server.util.SocketUtil.format(hostname, port)); if ((site.ssh_rsa.exists()) || (site.ssh_dsa.exists())) { libraries.bouncyCastle.downloadRequired(); <START_MOD>libraries.bouncyCastleSSL.downloadRequired(); <END_MOD>} else if (!(site.ssh_key.exists())) { libraries.bouncyCastle.downloadOptional(); <START_MOD>libraries.bouncyCastleSSL.downloadOptional(); <END_MOD>} generateSshHostKeys(); }
@org.junit.Test public void testValidPathSeparator() { for (char c : com.google.gerrit.httpd.<START_MOD>GitwebConfigTest<END_MOD>.VALID_CHARACTERS.toCharArray()) { assertTrue(( character rejected:   + c), com.google.gerrit.httpd.<START_MOD>GitwebConfig<END_MOD>.isValidPathSeparator(c)); } }
@java.lang.Override public void onRemoval(java.lang.String pluginName, java.lang.String cacheName, com.google.common.cache.RemovalNotification<K, V> notification) { if (((!(com.ericsson.gerrit.plugins.<START_MOD>highavailability.forwarder<END_MOD>.Context.isForwardedEvent())) && (!(notification.wasEvicted()))) && (isSynchronized(cacheName))) { executor.execute(new EvictCacheTask(cacheName, notification.getKey())); } }
@java.lang.Override public void visibleProjects(final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.<START_MOD>common<END_MOD>.<START_MOD>data.VisibleProjectsInfo<END_MOD>> callback) { visibleProjectsFactory.create().to(callback); }
private java.<START_MOD>nio<END_MOD>.<START_MOD>file.Path<END_MOD> <START_MOD>resolvePath<END_MOD>(javax.servlet.http.HttpServletRequest req) { return <START_MOD>sitePaths<END_MOD>.<START_MOD>resolve<END_MOD>(((req.getServletPath()) + (req.getPathInfo()))); }
<START_MOD>com.google.gwt.core.client.JsArray<com.google.gerrit.client.rpc.NativeString> getValues() { com.google.gwt.core.client.JsArray<com.google.gerrit.client.rpc.NativeString> values = com.google.gwt.core.client.JsArray.createArray().cast(); return values; }<END_MOD>
@java.lang.Override public void onSuccess(com.google.<START_MOD>gwt<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>client.JsArray<com.google.gerrit.client.account.ProjectWatchInfo><END_MOD> <START_MOD>watchedProjects<END_MOD>) { remove(ids); }
<START_MOD>@java.lang.Override public void onPreReceive(org.eclipse.jgit.transport.ReceivePack rp, java.util.Collection<org.eclipse.jgit.transport.ReceiveCommand> commands) { try (java.io.Writer msgOut = new java.io.OutputStreamWriter(rp.getMessageOutputStream())) { org.eclipse.jgit.transport.PushCertificate cert = rp.getPushCertificate(); if (cert == null) { return; } if ((cert.getNonceStatus()) != (org.eclipse.jgit.transport.PushCertificate.NonceStatus.OK)) { msgOut.write("Invalid nonce\n"); com.google.gerrit.server.git.gpg.SignedPushPreReceiveHook.rejectInvalid(commands); return; } org.bouncycastle.openpgp.PGPSignature sig = readSignature(cert); if (sig == null) { msgOut.write("Invalid signature format\n"); com.google.gerrit.server.git.gpg.SignedPushPreReceiveHook.rejectInvalid(commands); return; } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);com.google.gerrit.server.git.gpg.PublicKeyStore store = new com.google.gerrit.server.git.gpg.PublicKeyStore(repo)) { java.lang.String err = verifySignature(sig, cert, readKeys(sig.getKeyID())); if (err != null) { msgOut.write(err); com.google.gerrit.server.git.gpg.SignedPushPreReceiveHook.rejectInvalid(commands); } } } catch (org.bouncycastle.openpgp.PGPException | java.io.IOException e) { com.google.gerrit.server.git.gpg.SignedPushPreReceiveHook.log.error("Error verifying push certificate", e); com.google.gerrit.server.git.gpg.SignedPushPreReceiveHook.reject(commands, "push cert error"); } }<END_MOD>
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutUsername.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException( allowed to set username } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException( does not allow editing username } if (input == null) { input = new com.google.gerrit.server.account.PutUsername.Input(); } try { changeUserNameFactory.create(db.get(), rsrc.getUser(), input.username).call(); } catch (java.lang.IllegalStateException e) { if (ChangeUserName.USERNAME_CANNOT_BE_CHANGED.equals(e.getMessage())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(e.getMessage()); } throw e; } catch (com.google.gerrit.server.account.InvalidUserNameException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException( username } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException( already used } return input.username; }
<START_MOD>private void exportInitJs() { try { if (scanner.getEntry(com.google.gerrit.server.plugins.AutoRegisterModules.STATIC_INIT_JS).isPresent()) { httpGen.export(com.google.gerrit.server.plugins.AutoRegisterModules.INIT_JS); } } catch (java.io.IOException e) { com.google.gerrit.server.plugins.AutoRegisterModules.log.warn(java.lang.String.format("Cannot access %s from plugin %s: JavaScript auto-discovered plugin will not be registered", com.google.gerrit.server.plugins.AutoRegisterModules.STATIC_INIT_JS, pluginName), e); } }<END_MOD>
void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> removals, java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(( edit global capabilities for projects other than   + (allProjects.get()))); }<START_MOD> } if (section.getName().startsWith(RefNames.REFS_GROUPS)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format( on %s is managed by Gerrit and cannot be modified RefNames.REFS_GROUPS));<END_MOD> } } for (com.google.gerrit.common.data.AccessSection section : additions) { java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException( section name } com.google.gerrit.server.project.RefPattern.validate(name); } else { for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((( add non-global capability   + (p.getName())) +   to global capabilities } } } } }
com.google.gerrit.reviewdb.client.PatchLineComment export() { com.google.gerrit.reviewdb.client.PatchLineComment plc = new com.google.gerrit.reviewdb.client.PatchLineComment(key.export(), lineNbr, author.export(), parentUuid, writtenOn); plc.setSide(side); plc.setMessage(message); if ((range) != null) { plc.setRange(range.export()); } plc.setTag(tag); plc.setRevId(new com.google.gerrit.reviewdb.client.RevId(revId)); return plc; }
public <T extends com.google.gwt.core.client.JavaScriptObject> void get(com.google.gwt.user.client.rpc.AsyncCallback<T> cb) { send(com.google.gerrit.client.rpc.GET, cb<START_MOD>, false<END_MOD>); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated<START_MOD>, boolean ignoreRebaseEmptyPatchSet<END_MOD>) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(ignore); when(mockPluginConfig.getBoolean("publish-on-patch-set-created", true)).thenReturn(publishOnPatchSetCreated); <START_MOD>when(mockPluginConfig.getBoolean("ignore-rebase-empty-patch-set", true)).thenReturn(ignoreRebaseEmptyPatchSet); <END_MOD>return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = com.google.common.collect.Lists.newLinkedList(); try { <START_MOD>com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); <END_MOD>for (final com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } if (audit != null) { audit.removed(me, com.google.gerrit.common.TimeUtil.nowTs()); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups( log delete groups from group event performed by user me, removed, e); } }
<START_MOD>@org.junit.Test public void getCommit_Forbidden() throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = adminSession.get(((("/projects/" + (project.get())) + "/branches/") + (com.google.gerrit.extensions.restapi.IdString.fromDecoded("refs/meta/config").encoded()))); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); com.google.gerrit.server.project.ListBranches.BranchInfo branchInfo = newGson().fromJson(r.getReader(), com.google.gerrit.server.project.ListBranches.BranchInfo.class); r.consume(); r = userSession.get(((("/projects/" + (project.get())) + "/commits/") + (branchInfo.revision))); assertEquals(HttpStatus.SC_FORBIDDEN, r.getStatusCode()); }<END_MOD>
<START_MOD>public void removeUnregisteredCc(com.google.gerrit.server.mail.Address cc) { unregisteredCcs.put(cc, UnregisteredCcState.REMOVED); }<END_MOD>
protected void <START_MOD>setTitleWest<END_MOD>(final com.google.gwt.user.client.ui.Widget w) { header.<START_MOD>setWidget<END_MOD>(<START_MOD>0<END_MOD>, <START_MOD>com.google.gerrit.client.ui.Screen.Cols.West.num, w<END_MOD>); }
<START_MOD>@java.lang.Override public int compare(com.google.gerrit.extensions.common.TagInfo a, com.google.gerrit.extensions.common.TagInfo b) { return a.getRef().compareTo(b.getRef()); }<END_MOD>
@org.junit.Test public void <START_MOD>deleteNewChange<END_MOD>() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result <START_MOD>changeResult<END_MOD> = createChange(); <START_MOD>java.lang.String changeId = changeResult<END_MOD>.getChangeId(); gApi.changes().id(<START_MOD>changeId<END_MOD>).delete(); assertThat(query(<START_MOD>changeId<END_MOD>)).isEmpty(); }
private com.google.gerrit.<START_MOD>server<END_MOD>.<START_MOD>change<END_MOD>.<START_MOD>PostReviewers<END_MOD>.<START_MOD>Addition<END_MOD> putAccount(java.lang.String reviewer, com.google.gerrit.server.change.ReviewerResource rsrc, boolean cc) { com.google.gerrit.reviewdb.client.Account member = rsrc.getReviewerUser().getAccount(); com.google.gerrit.server.project.ChangeControl control = rsrc.getReviewerControl(); if (isValidReviewer(member, control)) { <START_MOD>return new com.google.gerrit.server.change.PostReviewers.Addition<END_MOD>(<START_MOD>reviewer, <END_MOD>rsrc.getChangeResource(), com.google.common.collect.ImmutableMap.of(member.getId(), control), cc); } return <START_MOD>new com.google.gerrit.server.change.PostReviewers.Addition(reviewer)<END_MOD>; }
<START_MOD>java.lang.String notMergable();<END_MOD>
<START_MOD>@java.lang.Override public com.google.gerrit.server.index.Schema<com.google.gerrit.server.query.change.ChangeData> getSchema() { return null; }<END_MOD>
void appendRow(final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m, final com.google.gerrit.client.reviewdb.Patch p) { m.openTr(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_ICON_CELL); m.addStyleName("LeftMostCell"); m.nbsp(); m.closeTd(); m.openTd(); m.setStyleName("ChangeTypeCell"); m.append(p.getChangeType().getCode()); m.closeTd(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_DATA_CELL); m.addStyleName("FilePathCell"); m.closeTd(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_DATA_CELL); m.addStyleName("CommentCell"); appendCommentCount(m, p); m.closeTd(); switch (p.getPatchType()) { case UNIFIED : openlink(m, 2); m.closeTd(); break; case BINARY : { java.lang.String base = com.google.gwt.core.client.GWT.getHostPageBaseURL(); base += "cat/" + (com.google.gwtorm.client.KeyUtil.encode(p.getKey().toString())); switch (p.getChangeType()) { case DELETED : case MODIFIED : <START_MOD>directUrlLeft = createLink(m, base, "^1"); break; default : emptycell(m, 1); break; } switch (p.getChangeType()) { case MODIFIED : case ADDED : directUrlRight = createLink(m, base, "^0"); break; default : emptycell(m, 1); break; } break; } default : emptycell(m, 2); break; } <END_MOD>openlink(m, 1); m.<START_MOD>closeTd(); m.closeTr()<END_MOD>; }
<START_MOD>public void fireEvent(final com.google.gerrit.server.events.Event event, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException;<END_MOD>
private java.util.List<java.io.File> scanJarsInPluginsDirectory() { if (((pluginsDir) == null) || (!(pluginsDir.exists()))) { return java.util.Collections.emptyList(); } java.io.File[] matches = pluginsDir.listFiles(new java.io.FileFilter() { @java.lang.Override public boolean accept(java.io.File pathname) { return (<START_MOD>(<END_MOD>pathname.getName().endsWith(".jar")) <START_MOD>|| (pathname.getName().endsWith(".jar.disabled"))) <END_MOD>&& (pathname.isFile()); } }); if (matches == null) { com.google.gerrit.server.plugins.PluginLoader.log.error(( list   + (pluginsDir.getAbsolutePath()))); return java.util.Collections.emptyList(); } return java.util.Arrays.asList(matches); }
@java.lang.Override public void evict(com.google.gerrit.reviewdb.client.Project p)<START_MOD> throws java.io.IOException<END_MOD> { if (p != null) { byName.invalidate(p.getNameKey().get()); } <START_MOD>indexer.get().index(p.getNameKey()); <END_MOD>}
public void run() { com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); commentManager.saveAllDrafts(group); group.done(); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { java.lang.String b = ((base) != null) ? base.getId() : null; java.lang.String rev = revision.getId(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, b, rev), new com.google.gerrit.client.change.ChangeScreen2(changeId, b, rev, openReplyBox<START_MOD>, false<END_MOD>)); } }); }
<START_MOD>private void setPolyGerritCookie(javax.servlet.http.HttpServletResponse res, boolean polygerrit) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(com.google.gerrit.httpd.raw.StaticModule.POLYGERRIT_UI_COOKIE, ""); res.addCookie(cookie); cookie.setPath("/"); cookie.setValue(java.lang.Boolean.TRUE.toString()); cookie.setMaxAge((polygerrit ? -1 : 0)); res.addCookie(cookie); }<END_MOD>
<START_MOD>private void parseChangeMessage(org.eclipse.jgit.revwalk.RevCommit commit) { final byte[] raw = commit.getRawBuffer(); final int size = raw.length; final java.nio.charset.Charset enc = org.eclipse.jgit.util.RawParseUtils.parseEncoding(raw); final int headerStart = org.eclipse.jgit.util.RawParseUtils.commitMessage(raw, 0); if (headerStart < 0) return; int headerEnd = org.eclipse.jgit.util.RawParseUtils.endOfParagraph(raw, headerStart); if (headerEnd == size) return; int changeMsgStart = headerEnd + 2; int changeMsgEnd = org.eclipse.jgit.util.RawParseUtils.endOfParagraph(raw, changeMsgStart); if (changeMsgEnd == size) return; java.lang.String str = org.eclipse.jgit.util.RawParseUtils.decode(enc, raw, changeMsgStart, changeMsgEnd); changeMessages.add(str); }<END_MOD>
<START_MOD>public com.google.gerrit.server.change.IncludedIn.IncludedInInfo apply(com.google.gerrit.reviewdb.client.Project.NameKey project, <END_MOD>java.lang.<START_MOD>String objectId<END_MOD>) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { <START_MOD>try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(<END_MOD>project<START_MOD>);org.eclipse.jgit.revwalk.RevWalk rw<END_MOD> = <START_MOD>new org.eclipse.jgit.revwalk.RevWalk(r)) { rw.setRetainBody(false); org.eclipse.jgit.revwalk.RevCommit rev; try { rev<END_MOD> = <START_MOD>rw.parseCommit<END_MOD>(org.eclipse.jgit.lib.ObjectId.fromString(<START_MOD>objectId<END_MOD>)); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException err) { throw new com.google.gerrit.extensions.restapi.BadRequestException(err.getMessage()); } catch (org.eclipse.jgit.errors.MissingObjectException err) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(err.getMessage()); } com.google.gerrit.server.change.IncludedInResolver.Result d = com.google.gerrit.server.change.IncludedInResolver.resolve(r, rw, rev); com.google.common.collect.Multimap<java.lang.String, java.lang.String> external = com.google.common.collect.ArrayListMultimap.create(); for (com.google.gerrit.extensions.config.ExternalIncludedIn ext : <START_MOD>externalIncludedIn<END_MOD>) { external.putAll(ext.getIncludedIn(project.get(), rev.name(), d.getTags(), d.getBranches())); } return new com.google.gerrit.server.change.IncludedIn.IncludedInInfo(d, (!(external.isEmpty()) ? external.asMap() : null)); } }
public <START_MOD>java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo><END_MOD> display(<START_MOD>@com.google.gerrit.common.Nullable <END_MOD>java.io.PrintWriter stdout) { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> output = new java.util.TreeMap<>(); java.util.List<com.google.gerrit.server.plugins.Plugin> plugins = com.google.common.collect.Lists.newArrayList(pluginLoader.getPlugins(all)); java.util.Collections.sort(plugins, new java.util.Comparator<com.google.gerrit.server.plugins.Plugin>() { @java.lang.Override public int compare(com.google.gerrit.server.plugins.Plugin a, com.google.gerrit.server.plugins.Plugin b) { return a.getName().compareTo(b.getName()); } }); if (!(format.isJson())) { stdout.format( %-10s %-8s %s "Name", "Version", "Status", "File"); stdout.print("-------------------------------------------------------------------------------\n"); } for (com.google.gerrit.server.plugins.Plugin p : plugins) { com.google.gerrit.extensions.common.PluginInfo info = com.google.gerrit.server.plugins.ListPlugins.toPluginInfo(p); if (format.isJson()) { output.put(p.getName(), info); } else { stdout.format( %-10s %-8s %s p.getName(), com.google.common.base.Strings.nullToEmpty(info.version), (p.isDisabled() ? "DISABLED" : "ENABLED"), p.getSrcFile().getFileName()); } } if (stdout == null) { return <START_MOD>output; } else if (format.isJson()) { format<END_MOD>.newGson().<START_MOD>toJson<END_MOD>(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, <START_MOD>com.google.gerrit.extensions.common.PluginInfo<END_MOD>>>() {}.getType(), stdout); stdout.print('\n'); } stdout.flush(); return null; }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException<START_MOD>,<END_MOD> com.google.gerrit.<START_MOD>server<END_MOD>.<START_MOD>permissions<END_MOD>.<START_MOD>PermissionBackendException { permissionBackend.user<END_MOD>(<START_MOD>user).<END_MOD>project<START_MOD>(rsrc.getNameKey()).check(ProjectPermission.WRITE_ACCESS);<END_MOD> return apply(rsrc.getProjectState(), input); }
void render(int context, com.google.gerrit.client.diff.DiffInfo diff)<START_MOD> { if ((host.diffScreenType) == (com.google.gerrit.extensions.client.GeneralPreferencesInfo.DiffView.SIDE_BY_SIDE)) { renderSideBySide(context, diff)<END_MOD>;<START_MOD> } else { renderUnified(context, diff); } }<END_MOD>
<START_MOD>java.lang.String[] sshAllows() { return sshAllows; }<END_MOD>
void onDelete(int idx) { java.lang.String path = list.get(idx).path(); com.google.gerrit.client.changes.ChangeEditApi.delete(curr.getParentKey().get(<START_MOD>), Project.NameKey.asStringOrNull(project<END_MOD>), path, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(curr.getParentKey()<START_MOD>, project<END_MOD>)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }
@org.junit.Test public void atLeastOnePageIn() throws java.lang.Exception { java.util.List<org.eclipse.jgit.revwalk.RevCommit> commits = linearCommits(10); walk.markStart(commits.get(9)); com.google.gitiles.Paginator p = new com.google.gitiles.Paginator(walk, 3, commits.get(7)<START_MOD>, com.google.gitiles.PaginatorFilters.everything()<END_MOD>); assertEquals(com.google.common.collect.ImmutableList.of(commits.get(7), commits.get(6), commits.get(5)), com.google.common.collect.ImmutableList.copyOf(p)); assertEquals(commits.get(9), p.getPreviousStart()); assertEquals(commits.get(4), p.getNextStart()); }
public java.lang.String password(final java.lang.String username, final java.lang.String password) { final java.lang.String ov = getSecure(password); java.lang.String user = flags.sec.getString(section, subsection, username); if (user == null) { user = get(username); } if (user == null) { flags.sec.unset(section, subsection, password); return null; } if (ov != null) { if ((ui.isBatch()) || (!(ui.yesno(false,   %s password user)))) { return ov; } } final java.lang.String nv = ui.password( password user); if (!(com.google.gerrit.pgm.init.<START_MOD>util.<END_MOD>Section.eq(ov, nv))) { setSecure(password, nv); } return nv; }
<START_MOD>private void index(com.google.gerrit.reviewdb.client.Project.NameKey project) { com.google.common.collect.ListMultimap<org.eclipse.jgit.lib.ObjectId, com.google.gerrit.server.query.change.ChangeData> byId = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(com.google.gerrit.sshd.commands.ALL); for (com.google.gerrit.server.notedb.ChangeNotes cn : notesFactory.scan(repo, db, project)) { org.eclipse.jgit.lib.Ref r = refs.get(cn.getChange().currentPatchSetId().toRefName()); if (r != null) { byId.put(r.getObjectId(), changeDataFactory.create(db, cn)); } } java.util.Set<com.google.gerrit.reviewdb.client.Change.Id> alreadyPresentOnIndex = fromIndex(project); java.util.Set<com.google.gerrit.reviewdb.client.Change.Id> toReIndex = byId.values().stream().map(( cd) -> cd.getId()).collect(java.util.stream.Collectors.toSet()); java.util.Set<com.google.gerrit.reviewdb.client.Change.Id> toDeleteFormIndex = com.google.common.collect.Sets.difference(alreadyPresentOnIndex, toReIndex); index(repo, byId); deleteFromIndex(toDeleteFormIndex); } catch (java.lang.Exception e) { writeError("error", java.lang.String.format("Unable to index %s: %s", project.get(), e.getMessage())); } }<END_MOD>
@org.junit.Test public void missingRepo() throws java.lang.Exception { assumeNoteDbDisabled(); com.google.gerrit.server.<START_MOD>notedb<END_MOD>.<START_MOD>ChangeNotes<END_MOD> <START_MOD>notes<END_MOD> = insertChange(); com.google.gerrit.reviewdb.client.Project.NameKey name = <START_MOD>notes<END_MOD>.<START_MOD>getProjectName<END_MOD>(); ((com.google.gerrit.testutil.InMemoryRepositoryManager) (repoManager)).deleteRepository(name); assertProblems(<START_MOD>notes<END_MOD>, null, com.google.gerrit.acceptance.server.change.ConsistencyCheckerIT.problem(( repository not found:   + name))); }
public boolean matches(com.google.gerrit.<START_MOD>reviewdb<END_MOD>.<START_MOD>client<END_MOD>.<START_MOD>AccountExternalId<END_MOD> <START_MOD>id<END_MOD>) { return matches(<START_MOD>id<END_MOD>.<START_MOD>getExternalId<END_MOD>()); }
public void doDraftPublishedHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.PatchSet patchSet, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.DraftPublishedEvent event = new com.google.gerrit.server.events.DraftPublishedEvent(); final com.google.gerrit.server.account.AccountState uploader = accountCache.get(patchSet.getUploader()); event.change = eventFactory.asChangeAttribute(change); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); event.uploader = eventFactory.asAccountAttribute(uploader.getAccount()); fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, "--change", event.change.id); addArg(args, "--change-url", event.change.url); addArg(args, "--project", event.change.project); addArg(args, "--branch", event.change.branch); addArg(args, "--topic", event.change.topic); addArg(args, <START_MOD>"--ref", event.patchSet.ref); addArg(args, <END_MOD>"--uploader", getDisplayName(uploader.getAccount())); addArg(args, "--commit", event.patchSet.revision); addArg(args, "--patchset", event.patchSet.number); runHook(change.getProject(), draftPublishedHook, args); }
public void ensureLoaded(final com.google.gerrit.common.data.PatchSetDetail detail) { <START_MOD>loadedInfoTable<END_MOD>(detail); <START_MOD>loadedActionPanel<END_MOD>(<START_MOD>detail<END_MOD>); <START_MOD>loadedPatchTable<END_MOD>(detail); }
<START_MOD>private void attach(java.util.Map<java.lang.Class<?>, com.google.gerrit.extensions.registration.DynamicSet<?>> sets, @javax.annotation.Nullable com.google.inject.Injector src, com.google.gerrit.server.plugins.Plugin plugin) { if (((src != null) && (sets != null)) && (!(sets.isEmpty()))) { for (java.util.Map.Entry<java.lang.Class<?>, com.google.gerrit.extensions.registration.DynamicSet<?>> e : sets.entrySet()) { @java.lang.SuppressWarnings("unchecked") com.google.gerrit.extensions.registration.DynamicSet<java.lang.Object> set = ((com.google.gerrit.extensions.registration.DynamicSet<java.lang.Object>) (e.getValue())); for (com.google.inject.Binding<?> b : com.google.gerrit.server.plugins.PluginGuiceEnvironment.bindings(src, e.getKey())) { plugin.add(set.add(b.getKey(), b.getProvider().get())); } } } }<END_MOD>
@com.google.gwtorm.client.Query( open = true AND sortKey < ? ORDER BY <START_MOD>sortKeyDesc<END_MOD> LIMIT ? com.google.gwtorm.client.ResultSet<com.google.gerrit.reviewdb.Change> allOpenNext(java.lang.String sortKey, int limit) throws com.google.gwtorm.client.OrmException;
public java.util.<START_MOD>Collection<END_MOD><com.googlesource.gerrit.plugins.manager.repository.PluginInfo> availablePlugins() throws java.io.IOException { return repository.list(com.<START_MOD>googlesource<END_MOD>.gerrit.<START_MOD>plugins<END_MOD>.<START_MOD>manager<END_MOD>.<START_MOD>PluginsCentralLoader.GERRIT_VERSION<END_MOD>); }
<START_MOD>@java.lang.Override public java.util.EnumSet<com.google.gerrit.server.query.change.ChangeData.NeededData> getNeededData() { return java.util.EnumSet.of(NeededData.APPROVALS, NeededData.CHANGE); }<END_MOD>
@java.lang.Override public void init(javax.servlet.FilterConfig filterConfig) throws javax.servlet.ServletException { <START_MOD>javax.servlet.ServletContext servletContext = filterConfig.getServletContext(); servletContext.setAttribute(DaggerContext.INJECTOR_NAME, dagger); <END_MOD>showGitBlitBanner(<START_MOD>); gerritGitblitContext.init(servletContext<END_MOD>); try { super.init(new com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.CustomFilterConfig(filterConfig)); } catch (java.lang.Exception e) { throw new javax.servlet.ServletException(e); } }
<START_MOD>private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> toActionMap(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> out = new java.util.LinkedHashMap<>(); if (userProvider.get().isIdentifiedUser()) { com.google.gerrit.server.project.ChangeControl ctl = cd.changeControl().forUser(userProvider.get()); for (com.google.gerrit.extensions.webui.UiAction.Description d : com.google.gerrit.server.extensions.webui.UiActions.from(changeViews, new com.google.gerrit.server.change.ChangeResource(ctl), userProvider)) { out.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } } return out; }<END_MOD>
<START_MOD>protected <K, V> com.google.gerrit.server.cache.NamedCacheBinding<K, V> core(final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<K, V>> type, final java.lang.String name, java.lang.Class<K> keyClass, java.lang.Class<V> valueClass) { final com.google.gerrit.server.cache.CacheProvider<K, V> b = new com.google.gerrit.server.cache.CacheProvider<K, V>(false, this); b.name(name); b.keyClass(keyClass); b.valueClass(valueClass); bind(com.google.inject.Key.get(type, com.google.inject.name.Names.named(name))).toProvider(b).in(Scopes.SINGLETON); return b; }<END_MOD>
@org.junit.Test public void testWithSectionToOtherServer() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p1 = createProject("a"); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText((((("" + ((   +   = a +   = ssh: + (p1.get())) + "\n") +   = . java.lang.String thisServer = com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey("project"), "master"); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> res = new com.google.gerrit.server.util.SubmoduleSectionParser(cfg, thisServer, targetBranch).parseAllSections(); assertThat(res).isEmpty(); }
@java.lang.Override public void onSuccess(final com.google.gerrit.client.info.ChangeInfo info) { info.init();<START_MOD> if ((project) == null) { project = info.projectNameKey(); }<END_MOD> initCurrentRevision(info); final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); loadCommit(rev, group); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { if ((base.isBase()) && (rev.isMerge())) { base = com.google.gerrit.client.DiffObject.parse(info.legacyId(), com.google.gerrit.client.Gerrit.getUserPreferences().defaultBaseForMerges().getBase()); } loadConfigInfo(info, base); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> mAr = info.messages(); for (int i = 0; i < (mAr.length()); i++) { if ((mAr.get(i).tag()) != null) { hideTaggedComments.setVisible(true); break; } } } }); group.done(); }
<START_MOD>com.google.gitiles.CommitJsonData.Commit toJsonData(javax.servlet.http.HttpServletRequest req, org.eclipse.jgit.revwalk.RevCommit c, java.util.Set<com.google.gitiles.CommitData.Field> fs, org.eclipse.jgit.util.GitDateFormatter df) throws java.io.IOException { com.google.gitiles.CommitData.Builder cdb = new com.google.gitiles.CommitData.Builder(); if ((walk) != null) { cdb.setRevWalk(walk); } com.google.gitiles.CommitData cd = cdb.build(req, c, fs); com.google.gitiles.CommitJsonData.Commit result = new com.google.gitiles.CommitJsonData.Commit(); if ((cd.sha) != null) { result.commit = cd.sha.name(); } if ((cd.parents) != null) { result.parents = com.google.common.collect.Lists.newArrayListWithCapacity(cd.parents.size()); for (org.eclipse.jgit.revwalk.RevCommit parent : cd.parents) { result.parents.add(parent.name()); } } if ((cd.author) != null) { result.author = com.google.gitiles.CommitJsonData.toJsonData(cd.author, df); } if ((cd.committer) != null) { result.committer = com.google.gitiles.CommitJsonData.toJsonData(cd.committer, df); } if ((cd.message) != null) { result.message = cd.message; } if ((cd.diffEntries) != null) { result.treeDiff = com.google.gitiles.CommitJsonData.toJsonData(cd.diffEntries); } return result; }<END_MOD>
public com.google.gerrit.server.git.CodeReviewCommit getFirstFastForward(final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final org.eclipse.jgit.revwalk.RevWalk rw, final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.<START_MOD>IntegrateException<END_MOD> { for (final java.util.Iterator<com.google.gerrit.server.git.CodeReviewCommit> i = toMerge.iterator(); i.hasNext();) { try { final com.google.gerrit.server.git.CodeReviewCommit n = i.next(); if ((mergeTip == null) || (rw.isMergedInto(mergeTip, n))) { i.remove(); return n; } } catch (java.io.IOException e) { throw new com.google.gerrit.server.git.<START_MOD>IntegrateException<END_MOD>( fast-forward test during merge e); } } return mergeTip; }
private void write(final java.io.OutputStream out, final <START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gerrit<END_MOD>.<START_MOD>server<END_MOD>.<START_MOD>patch.GwtOrmBaseEdit<END_MOD> e) throws java.io.IOException { writeVarInt32(out, e.getBeginA()); writeVarInt32(out, e.getEndA()); writeVarInt32(out, e.getBeginB()); writeVarInt32(out, e.getEndB()); }
<START_MOD>@java.lang.Override public void onSuccess(com.google.gwtjsonrpc.client.VoidResult result) { }<END_MOD>
<START_MOD>public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.ChangeJson changeJson = changeJsonFactory.create(ChangeJson.NO_OPTIONS); com.google.gerrit.extensions.common.ChangeInfo changeInfo = changeJson.format(change); com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), change); com.google.gerrit.server.project.ChangeControl ctl = cd.changeControl(); com.google.gerrit.extensions.common.RevisionInfo revisionInfo = changeJson.toRevisionInfo(ctl, ps); fire(changeInfo, revisionInfo); }<END_MOD>
@java.lang.Override public void onSuccess(final com.google.gerrit.common.data.HostPageData result) { com.google.gwt.dom.client.Document.get().getElementById("gerrit_hostpagedata").removeFromParent(); com.google.gerrit.client.Gerrit.myConfig = result.config; com.google.gerrit.client.Gerrit.myTheme = result.theme; <START_MOD>com.google.gerrit.client.Gerrit.actions = result.actions; <END_MOD>if ((result.account) != null) { com.google.gerrit.client.Gerrit.myAccount = result.account; com.google.gerrit.client.Gerrit.authorization = result.authorization; } if ((result.accountDiffPref) != null) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref; com.google.gerrit.client.Gerrit.applyUserPreferences(); } onModuleLoad2(result); }
@java.lang.Override public java.lang.Void call() throws java.io.IOException { for (com.google.gerrit.server.index.change.ChangeIndex i : getWriteIndexes()) { i.delete(id); } <START_MOD>com.google.gerrit.server.index.change.ChangeIndexer.log.info(java.lang.String.format( change %d from index. id.get())); <END_MOD>fireChangeDeletedFromIndexEvent(id.get()); return null; }
private void executeRemoteSsh(org.eclipse.jgit.transport.CredentialsProvider <START_MOD>credsProvier<END_MOD>, org.eclipse.jgit.transport.URIish uri, java.lang.String cmd, java.io.OutputStream errStream) throws java.io.IOException { <START_MOD>com<END_MOD>.<START_MOD>googlesource<END_MOD>.<START_MOD>gerrit<END_MOD>.<START_MOD>plugins<END_MOD>.<START_MOD>replication.SshHelper.executeRemoteSsh(credsProvier,<END_MOD> <START_MOD>sshSessionFactory<END_MOD>, uri, <START_MOD>cmd<END_MOD>, errStream); }
static java.util.Set<java.lang.String> extractTags(java.util.Set<java.lang.String> input) throws <START_MOD>com.google.gerrit.server.change.HashtagsUtil.InvalidHashtagsException<END_MOD> { if (input == null) { return java.util.Collections.emptySet(); } java.util.HashSet<java.lang.String> result = new java.util.HashSet<>(); for (java.lang.String hashtag : input) { if (hashtag.contains(",")) { throw <START_MOD>com.google.gerrit.server.change.HashtagsUtil.InvalidHashtagsException.hashtagsMayNotContainCommas();<END_MOD> } hashtag = com.google.gerrit.server.change.HashtagsUtil.cleanupHashtag(hashtag); if (!(hashtag.isEmpty())) { result.add(hashtag); } } return result; }
<START_MOD>public com.google.gerrit.reviewdb.AccountGeneralPreferences.DownloadUrl getDownloadUrl() { return downloadUrl; }<END_MOD>
public void setReviewedByCurrentUser(boolean reviewed) { if ((fileList) != null) { fileList.updateReviewedStatus(patchKey, reviewed); } <START_MOD>com.google.gerrit.client.patches.ReviewedPanels.MarkReviewedInput in = com.google.gerrit.client.patches.ReviewedPanels.MarkReviewedInput.create(); in.reviewed(reviewed); com.google.gerrit.reviewdb.client.PatchSet.Id ps = <END_MOD>patchKey<START_MOD>.getParentKey(); new com.google.gerrit.client.rpc.RestApi("/changes/").id(ps.getParentKey().get()).view("revisions").id(ps.get()).view("files").id(patchKey.getFileName()).view("reviewed").post(in<END_MOD>, new com.google.<START_MOD>gwt.user.client.rpc<END_MOD>.AsyncCallback<com.google.<START_MOD>gerrit.client<END_MOD>.VoidResult>() { @java.lang.Override public void onFailure(java.lang.Throwable arg0) { } @java.lang.Override public void onSuccess(com.google.<START_MOD>gerrit.client<END_MOD>.VoidResult result) { } }); }
private void getImpl(final com.google.gerrit.reviewdb.client.Project.NameKey name, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry> cb) { com.google.gerrit.client.projects.ConfigInfoCache.Entry e = cache.get(name.get()); if (e != null) { cb.onSuccess(e); return; } com.google.gerrit.client.projects.ProjectApi.<START_MOD>getConfig(name, <END_MOD>new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.projects.ConfigInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfo result) { com.google.gerrit.client.projects.ConfigInfoCache.Entry e = new com.google.gerrit.client.projects.ConfigInfoCache.Entry(result); cache.put(name.get(), e); cb.onSuccess(e); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { cb.onFailure(caught); } }); }
@org.junit.Test public void testChildrenUnmodifiable() { final com.google.gerrit.server.query.OrPredicateTest.TestPredicate a = com.google.gerrit.server.query.OrPredicateTest.f("author", "alice"); final com.google.gerrit.server.query.OrPredicateTest.TestPredicate b = com.google.gerrit.server.query.OrPredicateTest.f("author", "bob"); final com.google.gerrit.server.query.Predicate<java.lang.String> n = com.google.gerrit.server.query.Predicate.or(a, b); <START_MOD>exception.expect(java.lang.RuntimeException.class);<END_MOD> n.getChildren().clear(); <START_MOD>com.google.gerrit.server.query.OrPredicateTest.assertChildren("clear", n, of(a, b)); exception.expect(java.lang.RuntimeException.class); n.getChildren().remove(0); com.google.gerrit.server.query.OrPredicateTest.assertChildren("remove(0)", n, of(a, b)); exception.expect(java.lang.RuntimeException.class); n.getChildren().iterator().remove(); com.google.gerrit.server.query.OrPredicateTest.assertChildren("remove(0)", n, of(a, b)); <END_MOD>}
<START_MOD>@java.lang.Override protected void onRequestSuggestions(com.google.gerrit.client.ui.Request request, com.google.gerrit.client.ui.Callback done) { java.util.LinkedList<com.google.gerrit.client.ui.RebaseDialog.ChangeSuggestion> suggestions = new java.util.LinkedList<com.google.gerrit.client.ui.RebaseDialog.ChangeSuggestion>(); for (final com.google.gerrit.client.changes.ChangeInfo ci : changes) { java.lang.String id = java.lang.String.valueOf(ci.legacy_id()); if (id.contains(request.getQuery())) { suggestions.add(new com.google.gerrit.client.ui.RebaseDialog.ChangeSuggestion(ci)); } } done.onSuggestionsReady(request, new com.google.gerrit.client.ui.Response(suggestions)); }<END_MOD>
<START_MOD>public java.util.List<com.google.gerrit.common.data.PermissionRule> getRules(java.lang.String permission) { return relevant.getPermission(permission); }<END_MOD>
<START_MOD>private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo, java.lang.String commitMessage) throws java.io.IOException { return createCommit(repo, commitMessage, null); }<END_MOD>
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), <START_MOD>permissionBackend, <END_MOD>capabilityControlFactory, changeControlGenericFactory, notesFactory, changeDataFactory, fillArgs, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, listChildProjects, submitDryRun, conflictsCache, trackingFooters, index, indexConfig, listMembers, starredChangesUtil, accountCache, allowsDrafts); }
@java.lang.Override public synchronized void init(javax.servlet.FilterConfig config) throws javax.servlet.ServletException { super.init(config); setDefaultFields(config); for (com.google.gitiles.GitilesView.Type type : GitilesView.Type.values()) { if (!(servlets.containsKey(type))) { servlets.put(type, getDefaultHandler(type)); } } javax.servlet.Filter repositoryFilter = new <START_MOD>com.google.gitiles.RepositoryFilter(accessFactory, resolver); javax.servlet.Filter viewFilter = new com.google.gitiles.ViewFilter(accessFactory, urls, visibilityCache); javax.servlet.Filter dispatchFilter = new com.google.gitiles.GitilesFilter.DispatchFilter(filters, servlets); <END_MOD>org.eclipse.jgit.http.server.<START_MOD>glue.ServletBinder root = serveRegex(com.google.gitiles.GitilesFilter.ROOT_REGEX).through(<END_MOD>viewFilter<START_MOD>); if ((gitwebRedirect) != null) { root.through(gitwebRedirect); } root.through(<END_MOD>dispatchFilter<START_MOD>); serveRegex(<END_MOD>com.google.gitiles.GitilesFilter.<START_MOD>REPO_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter);<END_MOD> serveRegex(com.google.gitiles.GitilesFilter.<START_MOD>REPO_PATH_REGEX).through(repositoryFilter<END_MOD>).through(viewFilter)<START_MOD>.through(dispatchFilter); initialized = true<END_MOD>; }
<START_MOD>public final native int start_ch();<END_MOD>
<START_MOD>private static com.google.gerrit.extensions.client.AccountGeneralPreferencesInfo nullify(com.google.gerrit.extensions.client.AccountGeneralPreferencesInfo p) { p.showSiteHeader = com.google.gerrit.server.account.GetPreferences.b(p.showSiteHeader); p.useFlashClipboard = com.google.gerrit.server.account.GetPreferences.b(p.useFlashClipboard); p.copySelfOnEmail = com.google.gerrit.server.account.GetPreferences.b(p.copySelfOnEmail); p.relativeDateInChangeTable = com.google.gerrit.server.account.GetPreferences.b(p.relativeDateInChangeTable); p.legacycidInChangeTable = com.google.gerrit.server.account.GetPreferences.b(p.legacycidInChangeTable); p.muteCommonPathPrefixes = com.google.gerrit.server.account.GetPreferences.b(p.muteCommonPathPrefixes); return p; }<END_MOD>
<START_MOD>public<END_MOD> com.google.gerrit.client.ui.PatchLink createLink(int index, com.google.gerrit.client.patches.PatchScreen.Type patchType, com.google.gwtexpui.safehtml.client.SafeHtml before, com.google.gwtexpui.safehtml.client.SafeHtml after) { com.google.gerrit.reviewdb.client.Patch patch = patchList.get(index); <START_MOD>com.google.gerrit.reviewdb.client.Patch.Key thisKey = patch.getKey(); com.google.gerrit.client.ui.PatchLink link; <END_MOD>if ((<START_MOD>patchType == (PatchScreen.Type.SIDE_BY_SIDE<END_MOD>)) && (<START_MOD>(<END_MOD>patch.<START_MOD>getPatchType()) == (com.google.gerrit.reviewdb.client.Patch.PatchType.UNIFIED))) { link = new com.google.gerrit.client.ui.PatchLink.SideBySide("", base, thisKey, index, detail, this); } else { link = new com.google.gerrit.client.ui.PatchLink.Unified("", base, thisKey, index, detail, this); } com.google.gwtexpui.safehtml.client.SafeHtmlBuilder text = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); text.append(before); text.append(com.google.gerrit.client.changes.PatchTable.getFileNameOnly<END_MOD>(patch<START_MOD>)); text.append(after); com.google.gwtexpui.safehtml.client.SafeHtml.set(link, text);<END_MOD> return <START_MOD>link<END_MOD>; }
private java.util.<START_MOD>List<END_MOD><com.google.gerrit.reviewdb.RefRight> getLocalRights() { return filter(projectControl.getProjectState().getLocalRights()); }
@java.lang.Override public java.lang.Boolean call() { try (com.google.gerrit.reviewdb.server.ReviewDb db = com.google.gerrit.<START_MOD>reviewdb<END_MOD>.<START_MOD>server<END_MOD>.<START_MOD>ReviewDbUtil.unwrapDb<END_MOD>(schemaFactory.open())) { return rebuilder.rebuildProject(db, changesByProject, project, allUsersRepo); } catch (java.lang.Exception e) { com.google.gerrit.pgm.RebuildNoteDb.log.error(( rebuilding project   + project), e); return false; } }
<START_MOD>public void onPreMergeCommit(final com.google.gerrit.server.git.CodeReviewCommit commit, final com.google.gerrit.server.project.ProjectState destProject, final com.google.gerrit.reviewdb.client.Branch.NameKey destBranch) throws com.google.gerrit.server.git.validators.MergeCommitValidationException;<END_MOD>
@org.junit.Test public void submitWithCherryPickIfFastForwardPossible() throws java.lang.Exception {<START_MOD> org.eclipse.jgit.revwalk.RevCommit initialHead = getRemoteHead();<END_MOD> com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); assertCherryPick(testRepo, false); <START_MOD>org.eclipse.jgit.revwalk.RevCommit newHead = <END_MOD>getRemoteHead()<START_MOD>; assertThat(newHead<END_MOD>.getParent(0)).isEqualTo(change.getCommit().getParent(0)); <START_MOD>assertRefUpdatedEvents(initialHead, newHead); assertChangeMergedEvents(1); <END_MOD>}
@org.junit.Test public void readPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = <START_MOD>tr<END_MOD>.commit(<START_MOD>).add<END_MOD>("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers))<START_MOD>.add<END_MOD>("project.config", ((("" + (   +   =   + (developers.toConfigValue())) + "\n"))<START_MOD>.create(<END_MOD>); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig("somePlugin"); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(developers); }
private void <START_MOD>grantAllCapabilitiesExceptAdministrateServerAndPriority<END_MOD>() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(allProjects); md.setMessage( super user com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection s = config.getAccessSection(AccessSection.GLOBAL_CAPABILITIES); for (java.lang.String c : com.google.gerrit.common.data.GlobalCapability.getAllNames()) { if (<START_MOD>(<END_MOD>com.google.gerrit.acceptance.rest.account.ADMINISTRATE_SERVER.equals(c)) <START_MOD>|| (com.google.gerrit.acceptance.rest.account.PRIORITY.equals(c))) <END_MOD>{ continue; } com.google.gerrit.common.data.Permission p = s.getPermission(c, true); <START_MOD>com.google.gerrit.common.data.PermissionRule rule = new com.google.gerrit.common.data.PermissionRule(config.resolve(com.google.gerrit.server.group.SystemGroupBackend.getGroup(SystemGroupBackend.REGISTERED_USERS))); if (com.google.gerrit.common.data.GlobalCapability.hasRange(c)) { com.google.gerrit.common.data.PermissionRange.WithDefaults range = com.google.gerrit.common.data.GlobalCapability.getRange(c); if (range != null) { rule.setRange(range.getDefaultMin(), range.getDefaultMax()); } } <END_MOD>p.add(<START_MOD>rule); } <END_MOD>config.<START_MOD>commit(md); projectCache.evict(config.getProject(<END_MOD>)); }
<START_MOD>java.lang.String filterLabel();<END_MOD>
<START_MOD>@com.google.gwt.uibinder.client.UiHandler("viewport") void onMouseDown(com.google.gwt.event.dom.client.MouseDownEvent e) { if ((cmB) != null) { dragging = true; ratio = ratio(cmB.getScrollInfo()); startY = e.getY(); com.google.gwt.user.client.DOM.setCapture(viewport.getElement()); } }<END_MOD>
private void addMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.server.notedb.ChangeUpdate update) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder msg = new java.lang.StringBuilder(); appendHashtagMessage(msg, "added", toAdd); appendHashtagMessage(msg, "removed", toRemove); com.google.gerrit.reviewdb.client.ChangeMessage cmsg = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx, msg.toString()<START_MOD>, ChangeMessagesUtil.SET_HASHTAGS_OP<END_MOD>); cmUtil.addChangeMessage(ctx.getDb(), update, cmsg); }
public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gerrit.<START_MOD>client.rpc.BaseServiceImplementation<END_MOD>.Failure, com.google.gwtorm.client.OrmException { final com.google.gerrit.client.reviewdb.PatchLineComment comment = db.patchComments().get(commentKey); if (comment == null) { throw new com.google.gerrit.<START_MOD>client.rpc.BaseServiceImplementation<END_MOD>.Failure(new com.google.gerrit.client.rpc.NoSuchEntityException()); } if (!(com.google.gerrit.client.rpc.Common.getAccountId().equals(comment.getAuthor()))) { throw new com.google.gerrit.<START_MOD>client.rpc.BaseServiceImplementation<END_MOD>.Failure(new com.google.gerrit.client.rpc.NoSuchEntityException()); } if ((comment.getStatus()) != (PatchLineComment.Status.DRAFT)) { throw new com.google.gerrit.<START_MOD>client.rpc.BaseServiceImplementation<END_MOD>.Failure(new java.lang.IllegalStateException( published } db.patchComments().delete(java.util.Collections.singleton(comment)); return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }
public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.Account.Id, com.google.gerrit.server.account.AccountState>> byIdType = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.Account.Id, com.google.gerrit.server.account.AccountState>>() {}; core(byIdType, com.google.gerrit.server.account.AccountCacheImpl.BYID_NAME).populateWith(com.google.gerrit.server.account.AccountCacheImpl.ByIdLoader.class); final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<<START_MOD>com.google.gerrit.reviewdb.Account.Name<END_MOD>, com.google.gerrit.reviewdb.Account.Id>> byUsernameType = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<<START_MOD>com.google.gerrit.reviewdb.Account.Name<END_MOD>, com.google.gerrit.reviewdb.Account.Id>>() {}; core(byUsernameType, com.google.gerrit.server.account.AccountCacheImpl.BYUSER_NAME).populateWith(com.google.gerrit.server.account.AccountCacheImpl.ByNameLoader.class); bind(com.google.gerrit.server.account.AccountCacheImpl.class); bind(com.google.gerrit.server.account.AccountCache.class).to(com.google.gerrit.server.account.AccountCacheImpl.class); } }; }
<START_MOD>private static boolean isCoreScheme(java.lang.String s) { try { java.lang.reflect.Field f = com.google.gerrit.reviewdb.client.CoreDownloadSchemes.class.getField(s.toUpperCase()); int m = ((java.lang.reflect.Modifier.PUBLIC) | (java.lang.reflect.Modifier.STATIC)) | (java.lang.reflect.Modifier.FINAL); return (((f.getModifiers()) & m) != 0) && (f.getType().equals(java.lang.String.class)); } catch (java.lang.NoSuchFieldException | java.lang.SecurityException e) { return false; } }<END_MOD>
@java.lang.Override protected void onLoad(com.google.gerrit.server.notedb.LoadHandle handle) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = handle.id(); if (rev == null) { loadDefaults(); return; } com.google.gerrit.server.notedb.<START_MOD>ChangeNoteCache.Value<END_MOD> <START_MOD>v<END_MOD> = <START_MOD>args.cache.get().get(getProjectName(),<END_MOD> <START_MOD>getChangeId<END_MOD>(), rev, handle.walk()); state = <START_MOD>v<END_MOD>.<START_MOD>state<END_MOD>(); state.copyColumnsTo(change); revisionNoteMap = <START_MOD>v<END_MOD>.<START_MOD>revisionNoteMap<END_MOD>(); }
com.google.gerrit.server.api.projects.CommitApiImpl create(com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.CommitResource r);
<START_MOD>@org.junit.Test public void get() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); java.lang.String triplet = "p~master~" + (r.getChangeId()); com.google.gerrit.extensions.api.changes.ChangeDescription c = gApi.changes().id(triplet).get(java.util.EnumSet.noneOf(com.google.gerrit.extensions.common.ListChangesOption.class)); assertEquals(triplet, c.id); assertEquals("p", c.project); assertEquals("master", c.branch); assertEquals(ChangeStatus.NEW, c.status); assertEquals("test commit", c.subject); assertEquals(true, c.mergeable); assertEquals(r.getChangeId(), c.changeId); assertEquals(c.created, c.updated); }<END_MOD>
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.<START_MOD>Account.Id<END_MOD>> <START_MOD>addedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId<END_MOD>, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, <START_MOD>addedAccounts, groupId<END_MOD>, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error( to log add accounts to group event e); } } }
<START_MOD>@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.Project.NameKey> getWatchedProjects() { if ((watchedProjects) == null) { if ((dbProvider) == null) { throw new com.google.inject.OutOfScopeException("Not in request scoped user"); } final java.util.Set<com.google.gerrit.reviewdb.Project.NameKey> h = new java.util.HashSet<com.google.gerrit.reviewdb.Project.NameKey>(); try { for (com.google.gerrit.reviewdb.AccountProjectWatch projectWatch : dbProvider.get().accountProjectWatches().byAccount(getAccountId()).toList()) { h.add(projectWatch.getProjectNameKey()); } } catch (com.google.inject.ProvisionException e) { com.google.gerrit.server.IdentifiedUser.log.warn("Cannot query project watches of a user", e); } catch (com.google.gwtorm.client.OrmException e) { com.google.gerrit.server.IdentifiedUser.log.warn("Cannot query project watches of a user", e); } watchedProjects = java.util.Collections.unmodifiableSet(h); } return watchedProjects; }<END_MOD>
<START_MOD>@org.junit.Test public void wrongProjectInProjectChangeIdReturnsNotFound() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); exception.expectMessage(("Not found: unknown/ /" + (changeInfo._number))); gApi.changes().id("unknown", changeInfo._number); }<END_MOD>
<START_MOD>private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extIdKey.sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); if (expectedAccountId != null) { checkState(expectedAccountId.equals(extId.accountId()), ("external id %s should be removed for account %s," + " but external id belongs to account %s"), extIdKey.get(), expectedAccountId.get(), extId.accountId().get()); } noteMap.remove(noteId); return extId; }<END_MOD>
<START_MOD>static com.google.gerrit.acceptance.rest.project.CheckAccessIT.TestCase newTestInput(java.lang.String mail, java.lang.String project, java.lang.String ref, int want) { com.google.gerrit.acceptance.rest.project.CheckAccessIT.TestCase tc = new com.google.gerrit.acceptance.rest.project.CheckAccessIT.TestCase(); tc.input = new com.google.gerrit.extensions.api.config.AccessCheckInput(mail, ref); tc.project = project; tc.want = want; return tc; }<END_MOD>
<START_MOD>public<END_MOD> java.lang.String getChangeMessageThreadId() { <START_MOD>return<END_MOD> <START_MOD>velocify(("<gerrit.${change.createdOn.time}.$change.key.get()"<END_MOD> <START_MOD>+<END_MOD> <START_MOD>"@$email.gerritHost>"<END_MOD>)); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return <START_MOD>childProjectLister.<END_MOD>recursiveChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); }
<START_MOD>private static java.util.Map<java.lang.Integer, com.google.gerrit.reviewdb.client.PatchSet> getPatchSets(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { java.util.Collection<com.google.gerrit.reviewdb.client.PatchSet> patchSets = cd.patches(); java.util.Map<java.lang.Integer, com.google.gerrit.reviewdb.client.PatchSet> result = com.google.common.collect.Maps.newHashMapWithExpectedSize(patchSets.size()); for (com.google.gerrit.reviewdb.client.PatchSet ps : patchSets) { result.put(ps.getId().get(), ps); } return result; }<END_MOD>
<START_MOD>void doSave(com.googlesource.gerrit.plugins.reviewers.client.Action action, com.googlesource.gerrit.plugins.reviewers.client.AddReviewersScreen.ReviewerEntry entry) { com.googlesource.gerrit.plugins.reviewers.client.Input in = com.googlesource.gerrit.plugins.reviewers.client.Input.create(); in.setAction(action); in.setFilter(entry.filter); in.setReviewer(entry.reviewer); reset(); new com.google.gerrit.plugin.client.rpc.RestApi("projects").id(this.projectName).view("reviewers").put(in, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArray<com.googlesource.gerrit.plugins.reviewers.client.ReviewerFilterSection>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.googlesource.gerrit.plugins.reviewers.client.ReviewerFilterSection> result) { display(result); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }<END_MOD>
<START_MOD>@org.junit.Test public void indexingUpdatesTheIndex() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); java.lang.String preferredEmail = "foo@example.com"; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.index(accountId); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccountSates = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccountSates).hasSize(1); assertThat(matchedAccountSates.get(0).getAccount().getId()).isEqualTo(accountId); }<END_MOD>
<START_MOD>public<END_MOD> <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.<START_MOD>Exception { try { return executeWithAttempCount(actionType, action, opts, exceptionPredicate); } catch (java.lang.<END_MOD>Throwable<START_MOD> t)<END_MOD> { com.google.<START_MOD>common<END_MOD>.<START_MOD>base<END_MOD>.<START_MOD>Throwables<END_MOD>.<START_MOD>throwIfUnchecked(t);<END_MOD> com.google.<START_MOD>common<END_MOD>.<START_MOD>base<END_MOD>.<START_MOD>Throwables<END_MOD>.<START_MOD>throwIfInstanceOf(t, java<END_MOD>.<START_MOD>lang.Exception.class<END_MOD>); <START_MOD>throw<END_MOD> <START_MOD>new<END_MOD> <START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>IllegalStateException<END_MOD>(<START_MOD>t<END_MOD>); } }
<START_MOD>public java.lang.String myUrl() { throw new java.lang.UnsupportedOperationException("peerInfo.jgroups.myUrl not supported"); }<END_MOD>
private void loadConfigInfo(final com.google.gerrit.client.changes.ChangeInfo info<START_MOD>, final int base<END_MOD>) { info.revisions().copyKeysIntoChildren("name"); final com.google.gerrit.client.changes.ChangeInfo.RevisionInfo rev = resolveRevisionToDisplay(info); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); loadDiff(rev, com.google.gerrit.client.change.ChangeScreen2.myLastReply(info), group<START_MOD>, base<END_MOD>); loadCommit(rev, group); com.google.gerrit.client.changes.RevisionInfoCache.add(changeId, rev); com.google.gerrit.client.projects.ConfigInfoCache.add(info); com.google.gerrit.client.projects.ConfigInfoCache.get(info.project_name_key(), group.<START_MOD>addFinal<END_MOD>(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry>(this) { @java.lang.Override protected void preDisplay(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { commentLinkProcessor = result.getCommentLinkProcessor(); setTheme(result.getTheme()); <START_MOD>if (!(loaded)) { <END_MOD>renderChangeInfo(info); } <START_MOD>loaded = true; <END_MOD>} }<START_MOD>)); }<END_MOD>
public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> validateForGerritCommits(<START_MOD>com.google.gerrit.server.events.<END_MOD>CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationListener> validators = new java.util.LinkedList<>(); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl)); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent)); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl)); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl)); if (<START_MOD>shouldValidateChangeId<END_MOD>(receiveEvent)) { validators.add(new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo)); } validators.add(new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers)); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(commitValidationListeners)); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = new java.util.LinkedList<>(); try { for (com.google.gerrit.server.git.validators.CommitValidationListener commitValidator : validators) { messages.addAll(commitValidator.onCommitReceived(receiveEvent)); } } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { messages.addAll(e.getMessages()); throw new com.google.gerrit.server.git.validators.CommitValidationException(e.getMessage(), messages); } return messages; }
@org.junit.Before public final void beforeTest() throws java.lang.Exception { server = com.google.gerrit.acceptance.GerritServer.start(<START_MOD>getBaseConfig()<END_MOD>); server.getTestInjector().injectMembers(this); }
@java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.AccountCacheImpl.BYID_NAME, <START_MOD>com.google.gerrit.reviewdb.client.<END_MOD>Account.Id.class, com.google.gerrit.server.account.AccountState.class).loader(com.google.gerrit.server.account.AccountCacheImpl.ByIdLoader.class); cache(com.google.gerrit.server.account.AccountCacheImpl.BYUSER_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id>>() {}).loader(<START_MOD>(useReviewdb ? com.google.gerrit.server.account.AccountCacheImpl.ByNameReviewDbLoader.class : <END_MOD>com.google.gerrit.server.account.AccountCacheImpl.ByNameLoader.class)<START_MOD>)<END_MOD>; bind(com.google.gerrit.server.account.AccountCacheImpl.class); bind(com.google.gerrit.server.account.AccountCache.class).to(com.google.gerrit.server.account.AccountCacheImpl.class); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.RebaseChangeEdit.Rebase.Input in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getChange()); if (!(edit.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format( edit exists for change %s rsrc.getChange().getChangeId())); } com.google.gerrit.reviewdb.client.PatchSet current = <START_MOD>psUtil.latest(<END_MOD>db.get()<START_MOD>, rsrc.getNotes<END_MOD>()); if (current.getId().equals(edit.get().getBasePatchSet().getId())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format( for change %s is already on latest patch set: %s rsrc.getChange().getChangeId(), current.getId())); } editModifier.rebaseEdit(edit.get(), current); return com.google.gerrit.extensions.restapi.Response.none(); }
private java.lang.Runnable maybeNextVimSearch(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { @java.lang.Override public void run() { if (cm.hasVimSearchHighlight()) { net.codemirror.lib.CodeMirror.handleVimKey(cm, "n"); } else { diffChunkNav(cm, <START_MOD>com.google.gerrit.client.diff.SideBySide2.Direction.NEXT<END_MOD>).run(); } } }; }
<START_MOD>java.lang.String newParentProjectFor(java.lang.String project);<END_MOD>
<START_MOD>@java.lang.Override public void update(com.google.gerrit.server.query.change.ChangeData cd) throws java.io.IOException { writer.updateDocument(intTerm(com.google.gerrit.lucene.FIELD_CHANGE, cd.getId().get()), toDocument(cd)); commit(); }<END_MOD>
<START_MOD>@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException, javax.servlet.ServletException { rsp.setContentType("text/plain"); rsp.setCharacterEncoding("UTF-8"); java.lang.String path = req.getPathInfo(); java.lang.String accountGroupId = path.substring(((path.lastIndexOf('/')) + 1)); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.parse(accountGroupId); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); index(uuid); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServlet.sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServlet.logger.error("Unable to update account index", e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }<END_MOD>
public com.google.gerrit.rules.PrologEnvironment newPrologEnvironment() throws com.googlecode.prolog_cafe.compiler.CompileException { com.google.gerrit.rules.PrologEnvironment env<START_MOD>; if ((urlLoader) != null) { env<END_MOD> = envFactory.create(<START_MOD>urlLoader); return env; } else { env = envFactory.create(<END_MOD>getClass().getClassLoader());<START_MOD> }<END_MOD> java.lang.String rules = getConfig().getPrologRules(); if (rules != null) { java.io.PushbackReader in = new java.io.PushbackReader(new java.io.StringReader(rules), com.googlecode.prolog_cafe.lang.Prolog.PUSHBACK_SIZE); com.googlecode.prolog_cafe.lang.JavaObjectTerm streamObject = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(in); if (!(env.execute(Prolog.BUILTIN, "consult_stream", com.googlecode.prolog_cafe.lang.SymbolTerm.intern("rules.pl"), streamObject))) { throw new com.googlecode.prolog_cafe.compiler.CompileException(((( consult rules.pl   + (getProject().getName())) +     + (getConfig().getRevision()))); } } return env; }
<START_MOD>public void onDelete() { if ((popup) != null) { popup.hide(); return; } if ((deleteBox) == null) { deleteBox = new com.google.gerrit.client.change.DeleteFileBox(changeId, revision); } deleteBox.clearPath(); final com.google.gwtexpui.user.client.PluginSafePopupPanel p = new com.google.gwtexpui.user.client.PluginSafePopupPanel(true); p.setStyleName(style.replyBox()); p.addAutoHidePartner(deleteButton.getElement()); p.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { if ((popup) == p) { popup = null; } } }); p.add(deleteBox); p.showRelativeTo(deleteButton); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(p); deleteBox.setFocus(true); popup = p; }<END_MOD>
<START_MOD>@org.junit.Test public void testSimpleInlineComments() { com.google.gerrit.server.mail.receive.MailMessage.Builder b = newMailMessageBuilder(); b.htmlContent(newHtmlBody("Looks good to me", "I have a comment on this.", null, "Also have a comment here.", null, null, null)); java.util.List<com.google.gerrit.reviewdb.client.Comment> comments = defaultComments(); java.util.List<com.google.gerrit.server.mail.receive.MailComment> parsedComments = com.google.gerrit.server.mail.receive.HtmlParser.parse(b.build(), comments, changeURL); assertThat(parsedComments).hasSize(3); assertChangeMessage("Looks good to me", parsedComments.get(0)); assertInlineComment("I have a comment on this.", parsedComments.get(1), comments.get(1)); assertInlineComment("Also have a comment here.", parsedComments.get(2), comments.get(3)); }<END_MOD>
@com.google.common.annotations.VisibleForTesting public void start() throws java.io.IOException { if ((dbInjector) == null) { dbInjector = createDbInjector(true, com.google.gerrit.pgm.MULTI_USER); } cfgInjector = createCfgInjector(); config = cfgInjector.getInstance(com.google.inject.Key.get(org.eclipse.jgit.lib.Config.class, com.google.gerrit.server.config.GerritServerConfig.class)); if (!(slave)) { initIndexType(); } sysInjector = createSysInjector(); sysInjector.getInstance(com.google.gerrit.server.plugins.PluginGuiceEnvironment.class).setDbCfgInjector(dbInjector, cfgInjector); manager.add(dbInjector, cfgInjector, sysInjector); if (!(consoleLog)) { manager.add(com.google.gerrit.pgm.util.ErrorLogFile.start(getSitePath(), config)); } sshd &= !(sshdOff()); if (sshd) { initSshd(); } if (com.google.common.base.MoreObjects.firstNonNull(httpd, true)) { initHttpd(); } manager.start(); <START_MOD>sysInjector.getInstance(com.google.gerrit.server.StartupChecks.class).check(); }<END_MOD>
private java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Branch.NameKey> visibleChangesByScan() { com.google.gerrit.reviewdb.client.Project.NameKey project = projectCtl.getProject().getNameKey(); try { java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Branch.NameKey> visibleChanges = new java.util.HashMap<>(); <START_MOD>com.google.gerrit.server.notedb.ChangeNotesIterator it = changeNotesFactory.scan(git, db.get(), project); while (it.hasNext()) { com.google.gerrit.server.notedb.ChangeNotes cn = it.next(); if (permissionBackend.user(user).change(cn).database(db).test(ChangePermission.READ)) { visibleChanges.put(cn.getChangeId(), cn.getChange().getDest()); } } return visibleChanges; } catch (java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.VisibleRefFilter.log.error((( load changes <END_MOD>for project<START_MOD>   + project) +   assuming no changes are visible e);<END_MOD> return java.util.Collections.emptyMap(); } }
@java.lang.Override public boolean isEmpty() { return (((((((((((((((((((((<START_MOD>(<END_MOD>commitSubject) == null) && (approvals.isEmpty())) && ((changeMessage) == null)) && (comments.isEmpty())) && (reviewers.isEmpty())) && ((changeId) == null)) && ((branch) == null)) && ((status) == null)) && ((submissionId) == null)) && ((submitRecords) == null)) && ((assignee) == null)) && ((hashtags) == null)) && ((topic) == null)) && ((commit) == null)) && ((psState) == null)) && ((groups) == null)) && ((tag) == null)) && ((psDescription) == null)) && (!(currentPatchSet))) && ((readOnlyUntil) == null)) && ((isPrivate) == null)<START_MOD>) && ((wip) == null)<END_MOD>; }
@org.junit.Test public void noRescheduleOnSuccess() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, <START_MOD>remote, <END_MOD>com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.OK_RESULT); task.run(); verifyZeroInteractions(executor); }
static com.google.gerrit.server.notedb.RevisionNoteMap parse(com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil, com.google.gerrit.reviewdb.client.Change.Id changeId, org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.reviewdb.client.PatchLineComment.Status status) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Map<com.google.gerrit.reviewdb.client.RevId, com.google.gerrit.server.notedb.<START_MOD>ChangeRevisionNote<END_MOD>> result = new java.util.HashMap<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.server.notedb.<START_MOD>ChangeRevisionNote<END_MOD> rn = new com.google.gerrit.server.notedb.<START_MOD>ChangeRevisionNote<END_MOD>(noteUtil, changeId, reader, note.getData(), status); <START_MOD>rn.parse(); <END_MOD>result.put(new com.google.gerrit.reviewdb.client.RevId(note.name()), rn); } return new com.google.gerrit.server.notedb.RevisionNoteMap(noteMap, com.google.common.collect.ImmutableMap.copyOf(result)); }
<START_MOD>com.google.common.base.Optional<com.googlesource.gerrit.plugins.lfs.locks.LfsLock> getLock(java.lang.String lockId) { return com.google.common.base.Optional.fromNullable(locks.getIfPresent(lockId)); }<END_MOD>
<START_MOD>public java.lang.String getContentType(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String revstr, java.lang.String path) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project); try { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(repo.resolve(revstr)); org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(rw.getObjectReader(), path, commit.getTree().getId()); if (tw == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return registry.getMimeType(path, com.google.gerrit.server.patch.Text.asByteArray(repo.open(tw.getObjectId(0)))).toString(); } finally { rw.release(); } } finally { repo.close(); } }<END_MOD>
@org.junit.Test public void addOtherUsersGpgKey_Conflict() throws java.lang.Exception { addExternalIdEmail(admin, "test5@example.com"); <START_MOD>com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key("foo:myId")); db.accountExternalIds()<END_MOD>.insert(<START_MOD>java.util.Collections.singleton(extId)); accountCache.evict(user.getId()); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); addGpgKey(key.getPublicKeyArmored()); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage( key already associated with another <END_MOD>account addGpgKey(key.getPublicKeyArmored()); }
@org.junit.Test(expected = com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException.class) public void throwSQLExceptionIfNotOnline() throws com.ericsson.gerrit.plugins.eventslog.<START_MOD>EventsLogException<END_MOD>, java.sql.SQLException { com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent mockEvent = new com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent(); setUpClientMock(); eventsDb.createDBIfNotCreated(); expectLastCall().andThrow(new java.sql.SQLException(new java.net.ConnectException())).once(); eventsDb.queryOne(); expectLastCall().andThrow(new java.sql.SQLException()); easyMock.replayAll(); store = new com.ericsson.gerrit.plugins.eventslog.SQLStore(pcFactoryMock, userProviderMock, cfgMock, eventsDb, localEventsDb, poolMock); store.start(); store.storeEvent(mockEvent); store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); easyMock.verifyAll(); }
<START_MOD>public int getEndB() { return endB; }<END_MOD>
public void onSuccess(final com.google.gerrit.common.auth.userpass.LoginResult result) { if (result.success) { java.lang.String to = token; if (!(to.startsWith("/"))) { to = "/" + to; } if ((result.isNew) && (!(token.startsWith(((com.google.gerrit.common.PageLinks.REGISTER) + "/"))))) { to = (com.google.gerrit.common.PageLinks.REGISTER) + to; } com.google.gwt.user.client.Window.Location.replace((((com.google.gwt.user.client.Window.Location.getPath()) + "login") + to)); } else { <START_MOD>final java.lang.String message; switch (result.getError()) { case LDAP_SERVER_UNAVAILABLE : message = Util.C.ldapServerUnavailable(); break; case INVALID_LOGIN : default : message = Util.C.invalidLogin(); } <END_MOD>showError(<START_MOD>message<END_MOD>); enable(true); password.selectAll(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { password.setFocus(true); } }); } }
@java.lang.Override protected void configureServlets() { install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(AbandonChangeHandler.Factory.class); factory(<START_MOD>EditCommitMessageHandler.Factory.class); factory(<END_MOD>AlterTopicHandler.Factory.class); factory(RestoreChangeHandler.Factory.class); factory(RevertChange.Factory.class); factory(RebaseChangeHandler.Factory.class); factory(ChangeDetailFactory.Factory.class); factory(IncludedInDetailFactory.Factory.class); factory(PatchSetDetailFactory.Factory.class); factory(PatchSetPublishDetailFactory.Factory.class); factory(SubmitAction.Factory.class); factory(PublishAction.Factory.class); factory(DeleteDraftChange.Factory.class); } }); rpc(com.google.gerrit.httpd.rpc.changedetail.ChangeDetailServiceImpl.class); rpc(com.google.gerrit.httpd.rpc.changedetail.ChangeManageServiceImpl.class); }
<START_MOD>public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.ExternalIdCacheImpl.CACHE_NAME, com.google.gerrit.server.account.ExternalIdCacheImpl.ListKey.class, new com.google.inject.TypeLiteral<com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.reviewdb.client.AccountExternalId>>() {}).maximumWeight(1).loader(com.google.gerrit.server.account.ExternalIdCacheImpl.Loader.class); bind(com.google.gerrit.server.account.ExternalIdCacheImpl.class); bind(com.google.gerrit.server.account.ExternalIdCache.class).to(com.google.gerrit.server.account.ExternalIdCacheImpl.class); } }; }<END_MOD>
<START_MOD>@org.junit.Test public void multipleSameHashtag() { java.lang.String commitMessage = "#Subject\n\n#Hashtag1\n\n#Hashtag2\n\n#Hashtag1"; assertThat(com.google.gerrit.server.change.HashtagsUtil.extractTags(commitMessage)).containsExactlyElementsIn(com.google.common.collect.Sets.newHashSet("#Subject", "#Hashtag1", "#Hashtag2")); }<END_MOD>
public static com.google.gerrit.server.group.db.GroupConfig loadForGroupSnapshot(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, org.eclipse.jgit.lib.ObjectId commitId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupUuid<START_MOD>, repository<END_MOD>); groupConfig.load(repository, commitId); return groupConfig; }
@java.lang.SuppressWarnings({ "unchecked" }) private static <K, V> com.google.common.cache.CacheBuilder<K, V> newCacheBuilder() { return ((com.google.common.cache.CacheBuilder<K, V>) (com.google.common.cache.CacheBuilder.newBuilder())); }
public static void main(java.lang.String[] argv) throws com.googlecode.prolog_cafe.<START_MOD>lang<END_MOD>.CompileException, java.io.IOException { int i = 0; BuckPrologCompiler.tmpdir = new File(argv[(i++)]); File out = new File(argv[(i++)]); File java = BuckPrologCompiler.tmpdir("java"); for (; i < (argv.length); i++) { new java.lang.Compiler().prologToJavaSource(argv[i], java.getPath()); } BuckPrologCompiler.jar(out, java); }
<START_MOD>public void setDownloadProtocol(final com.google.gerrit.reviewdb.AccountGeneralPreferences.DownloadUrl p) { downloadUrl = p; }<END_MOD>
private void writeEvents() { int processed = 0; while (processed < (com.google.gerrit.sshd.commands.StreamEvents.BATCH_SIZE)) { if ((java.lang.Thread.interrupted()) || (stdout.checkError())) { <START_MOD>source<END_MOD>.removeChangeListener(listener); flush(); onExit(0); return; } if (dropped) { write(droppedOutputEvent); dropped = false; } final com.google.gerrit.server.events.Event event = poll(); if (event == null) { break; } write(event); processed++; } flush(); if ((com.google.gerrit.sshd.commands.StreamEvents.BATCH_SIZE) <= processed) { synchronized(taskLock) { task = pool.submit(writer); } } }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.<START_MOD>gerrit.server.permissions.PermissionBackendException, com.google.<END_MOD>gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeFinder.find(id.encoded(), user.get()); if (ctls.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((ctls.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(( changes found for   + id)); } com.google.gerrit.server.project.ChangeControl ctl = ctls.get(0); if (!(<START_MOD>permissionBackend.user(user).change(<END_MOD>ctl.<START_MOD>getNotes()).database<END_MOD>(db<START_MOD>).test(ChangePermission.READ<END_MOD>))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(ctl); }
<START_MOD>private static com.google.gerrit.sshd.commands.UnloggedFailure error(final java.lang.String msg) { return new com.google.gerrit.sshd.commands.UnloggedFailure(1, msg); }<END_MOD>
<START_MOD>private static java.lang.Iterable<byte[]> storedSubmitRecords(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.project.SubmitRuleOptions opts) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(cd.submitRecords(opts)).transform(( r) -> com.google.gerrit.server.index.change.ChangeField.GSON.toJson(new com.google.gerrit.server.index.change.StoredSubmitRecord(r)).getBytes(java.nio.charset.StandardCharsets.UTF_8)); }<END_MOD>
private void submit(com.google.gerrit.server.project.ChangeControl changeCtl, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.Submit submit = submitProvider.get(); com.google.gerrit.server.change.RevisionResource rsrc = new com.google.gerrit.server.change.RevisionResource(changes.parse(changeCtl), ps); java.util.List<com.google.gerrit.reviewdb.client.Change> changes; try { changes = submit.submit(rsrc, currentUser, true); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new java.io.IOException(e); } addMessage(""); <START_MOD>try { integrationProvider.get().create(com.google.gerrit.server.git.ChangeSet.create(changes)).merge(); } catch (com.google.gerrit.server.git.MergeException | com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } <END_MOD>for (com.google.gerrit.reviewdb.client.Change c : changes) { c = db.changes().get(c.getId()); switch (c.getStatus()) { case SUBMITTED : addMessage(((   + (c.getChangeId())) +   submitted. break; case MERGED : addMessage(((   + (c.getChangeId())) +   merged. break; case NEW : com.google.gerrit.reviewdb.client.ChangeMessage msg = submit.getConflictMessage(rsrc); if (msg != null) { addMessage((((   + (c.getChangeId())) +     + (msg.getMessage()))); break; } default : addMessage((((   + (c.getChangeId())) +   is   + (c.getStatus().name().toLowerCase()))); } } }
<START_MOD>@com.google.gwt.uibinder.client.UiHandler("submit") void onSubmit(com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.changes.ChangeApi.edit(changeId.get(), revision, message.getText().trim(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject msg) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(changeId)); hide(); } }); }<END_MOD>
public void abandonInactiveOpenChanges() { if ((cfg.getAbandonAfter()) <= 0) { return; } try { java.lang.String query = ( age: + (java.util.concurrent.TimeUnit.MILLISECONDS.toMinutes(cfg.getAbandonAfter()))) + "m"; if (!(cfg.getAbandonIfMergeable())) { query +=   -is:mergeable } java.util.List<com.google.gerrit.server.query.change.ChangeData> changesToAbandon = queryProcessor.enforceVisibility(false).queryChanges(queryBuilder.parse(query)).changes(); int count = 0; for (com.google.gerrit.server.query.change.ChangeData cd : changesToAbandon) { try { <START_MOD>if (noNeedToAbandon(cd, query)) { com.google.gerrit.server.change.AbandonUtil.log.debug(( data   does not satisfy the query   any +   more, and hence skip it in clean up cd, query); continue; } <END_MOD>abandon.abandon(changeControl(cd), cfg.getAbandonMessage(), null); count++; } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { } catch (java.lang.Throwable e) { com.google.gerrit.server.change.AbandonUtil.log.error(java.lang.String.format( to auto-abandon inactive open change %d. cd.getId().get()), e); } } com.google.gerrit.server.change.AbandonUtil.log.info(java.lang.String.format( %d of %d changes. count, changesToAbandon.size())); } catch (com.google.gerrit.server.query.QueryParseException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.AbandonUtil.log.error( to query inactive open changes for auto-abandoning. e); } }
<START_MOD>private boolean inProject(final com.google.gerrit.reviewdb.Change change) { if ((projectControl) == null) { return true; } return projectControl.getProject().getNameKey().equals(change.getProject()); }<END_MOD>
public static com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.PatchSet.Id psId, com.google.gerrit.server.CurrentUser user, java.sql.Timestamp when, java.lang.String body<START_MOD>, java.lang.String tag<END_MOD>) throws com.google.gwtorm.server.OrmException { checkNotNull(psId); com.google.gerrit.reviewdb.client.Account.Id accountId = (user.isInternalUser()) ? null : user.getAccountId(); com.google.gerrit.reviewdb.client.ChangeMessage m = new com.google.gerrit.reviewdb.client.ChangeMessage(new com.google.gerrit.reviewdb.client.ChangeMessage.Key(psId.getParentKey(), com.google.gerrit.server.ChangeUtil.messageUUID(db)), accountId, when, psId); m.setMessage(body<START_MOD>); m.setTag(tag<END_MOD>); user.updateRealAccountId(m::setRealAuthor); return m; }
<START_MOD>public static AccountGeneralPreferencesInfo<END_MOD> loadFromAllUsers(<START_MOD>AccountGeneralPreferencesInfo r, <END_MOD>com.google.gerrit.server.account.VersionedAccountPreferences v, org.eclipse.jgit.lib.Repository allUsers) { <START_MOD>r.<END_MOD>my = <START_MOD>com.google.gerrit.server.account.GetPreferences.<END_MOD>my(v); if ((<START_MOD>r.<END_MOD>my.isEmpty()) && (!(v.isDefaults()))) { try { com.google.gerrit.server.account.VersionedAccountPreferences d = com.google.gerrit.server.account.VersionedAccountPreferences.forDefault(); d.load(allUsers); <START_MOD>r.<END_MOD>my = <START_MOD>com.google.gerrit.server.account.GetPreferences.<END_MOD>my(d); } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e) { com.google.gerrit.server.account.GetPreferences.log.warn( read default preferences e); } } if (<START_MOD>r.<END_MOD>my.isEmpty()) { <START_MOD>r.<END_MOD>my.add(new com.google.gerrit.extensions.client.MenuItem("Changes", "#/dashboard/self", null)); <START_MOD>r.<END_MOD>my.add(new com.google.gerrit.extensions.client.MenuItem("Drafts", "#/q/owner:self+is:draft", null)); <START_MOD>r.<END_MOD>my.add(new com.google.gerrit.extensions.client.MenuItem( Comments "#/q/has:draft", null)); <START_MOD>r.<END_MOD>my.add(new com.google.gerrit.extensions.client.MenuItem("Edits", "#/q/has:edit", null)); <START_MOD>r.<END_MOD>my.add(new com.google.gerrit.extensions.client.MenuItem( Changes "#/q/is:watched+is:open", null)); <START_MOD>r.<END_MOD>my.add(new com.google.gerrit.extensions.client.MenuItem( Changes "#/q/is:starred", null)); <START_MOD>r.<END_MOD>my.add(new com.google.gerrit.extensions.client.MenuItem("Groups", "#/groups/self", null)); } <START_MOD>r.<END_MOD>urlAliases = com.google.gerrit.server.account.GetPreferences.urlAliases(v); <START_MOD>return r; <END_MOD>}
private <START_MOD>com.google.gerrit.common.data.AccessSection.Rule<END_MOD> <START_MOD>rule<END_MOD>(<START_MOD>com.google.gerrit.server.git.ProjectConfig config,<END_MOD> com.google.gerrit.reviewdb.<START_MOD>AccountGroup<END_MOD> <START_MOD>group<END_MOD>) { <START_MOD>return<END_MOD> new com.google.gerrit.<START_MOD>common<END_MOD>.<START_MOD>data.AccessSection.Rule<END_MOD>(<START_MOD>config<END_MOD>.<START_MOD>resolve<END_MOD>(<START_MOD>group<END_MOD>)); }
<START_MOD>private static final void post(com.google.gerrit.client.rpc.RestApi api, com.google.gwt.core.client.JavaScriptObject in, final com.google.gwt.core.client.JavaScriptObject cb) { api.post(in, com.google.gerrit.client.api.ActionContext.wrap(cb)); }<END_MOD>
public com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.IntraLineDiff.Status getStatus() { return status; }
@java.lang.Override protected void onLoad() { super.onLoad(); com.google.gerrit.client.account.AccountApi.getAgreements("self", new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.AgreementInfo>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.AgreementInfo> result) { if (isAttached()) { mySigned = new java.util.HashSet<>(); for (com.google.gerrit.client.account.AgreementInfo info : com.google.gerrit.client.rpc.Natives.asList(result)) { mySigned.add(info.name()); } postRPC(); } } }); <START_MOD>com.google.gerrit.client.config.ConfigServerApi.serverInfo<END_MOD>(new com.google.gerrit.client.rpc.GerritCallback<<START_MOD>com.google.gerrit.client.info.ServerInfo<END_MOD>>() { @java.lang.Override public void onSuccess(<START_MOD>com.google.gerrit.client.info.ServerInfo<END_MOD> result) { if (isAttached()) { available = result<START_MOD>.auth().contributorAgrements()<END_MOD>; postRPC(); } } }); }
<START_MOD>@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Mark as Reviewed").setTitle("Mark the change as reviewed to unhighlight it in the dashboard").setVisible((!(isReviewed(rsrc)))); }<END_MOD>
public java.util.Collection<com.google.gerrit.reviewdb.client.SubmoduleSubscription> superProjectSubscriptionsForSubmoduleBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch, com.google.gerrit.server.git.MergeOpRepoManager orm) throws java.io.IOException { logDebug(( possible superprojects for   + branch)); java.util.Collection<com.google.gerrit.reviewdb.client.SubmoduleSubscription> ret = new java.util.ArrayList<>(); com.google.gerrit.reviewdb.client.Project.NameKey project = branch.getParentKey(); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.get(project).getConfig(); for (com.google.gerrit.common.data.SubscribeSection s : projectStateFactory.create(cfg).getSubscribeSections(branch)) { <START_MOD>logDebug(( subscribe section   + s)); <END_MOD>java.util.Collection<com.google.gerrit.reviewdb.client.Branch.NameKey> branches = getDestinationBranches(branch, s, orm); for (com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch : branches) { com.google.gerrit.server.git.GitModules m = gitmodulesFactory.create(targetBranch, updateId, orm); m.load(); for (com.google.gerrit.reviewdb.client.SubmoduleSubscription ss : m.subscribedTo(branch)) { <START_MOD>logDebug(( SubmoduleSubscription   + ss)); <END_MOD>if ((projectCache.get(ss.getSubmodule().getParentKey())) != null) { <START_MOD>logDebug(( SubmoduleSubscription   + ss)); <END_MOD>ret.add(ss); } } } } logDebug(((( superprojects for   + branch) +   are   + ret)); return ret; }
<START_MOD>static java.lang.String getShortProjectName(java.lang.String projectName) { int lastIndexSlash = projectName.lastIndexOf("/"); if (lastIndexSlash == 0) { return projectName.substring(1); } return "..." + (projectName.substring((lastIndexSlash + 1))); }<END_MOD>
<START_MOD>public void start(com.google.gerrit.server.plugins.PluginEnvironment env) throws java.lang.Exception { java.lang.Module sysmod = ((sysModule) != null) ? sysModule.newInstance() : null; java.lang.Module sshmod = ((sshModule) != null) ? sshModule.newInstance() : null; manager = new com.google.gerrit.lifecycle.LifecycleManager(); if (sysmod != null) { sysInjector = env.getSysInjector().createChildInjector(sysmod); manager.add(sysInjector); } if ((sshmod != null) && ((env.getSshInjector()) != null)) { sshInjector = env.getSshInjector().createChildInjector(sshmod); manager.add(sshInjector); } manager.start(); }<END_MOD>
@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws com.google.gwtorm.server.OrmException { if (sendMail) { try { com.google.gerrit.server.mail.ReplacePatchSetSender cm = replacePatchSetFactory.create(change.getId()); cm.setFrom(ctx.getUser().getAccountId()); cm.setPatchSet(patchSet, patchSetInfo); cm.setChangeMessage(changeMessage); cm.addReviewers(oldReviewers.get(ReviewerState.REVIEWER)); cm.addExtraCC(oldReviewers.get(ReviewerState.CC)); cm.send(); } catch (java.lang.Exception err) { com.google.gerrit.server.change.PatchSetInserter.log.error(( send email for new patch set on change   + (change.getId())), err); } } if (runHooks) { revisionCreated.fire(change, patchSet, ctx.getUser().getAccountId()); <START_MOD>} }<END_MOD>
@org.junit.Test public void addReviewerToReviewableChangeInNoteDbNotifyOwnerReviewers() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); forAll(( adder) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create("added", "added@example.com", "added"); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.OWNER_REVIEWERS); assertThat(sender).sent("newchange", sc).to(reviewer).cc(sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).<START_MOD>noOneElse<END_MOD>(); }); }
private <T extends com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput> void checkComments(com.google.gerrit.server.change.RevisionResource revision, java.util.Map<java.lang.String, java.util.List<T>> commentsPerPath) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { ensureCommentsAreAddable(revision, commentsPerPath); <START_MOD>for (java.util.Map.Entry<java.lang.String, java.util.List<T>> e : commentsPerPath.entrySet()) { for (T comment : e.getValue()) { ensureRangeIsValid(e.getKey(), comment.range); <END_MOD>}<START_MOD> } }<END_MOD>
@org.junit.Test public void testGroupOptions() throws java.io.IOException { com.google.gerrit.reviewdb.client.AccountGroup.NameKey adminGroupName = new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("Administrators"); com.google.gerrit.reviewdb.client.AccountGroup adminGroup = groupCache.get(adminGroupName); java.lang.String url = ("/groups/" + (adminGroup.getGroupUUID().get())) + "/options"; com.google.gerrit.acceptance.RestResponse r = session.get(url); com.google.gerrit.<START_MOD>server.group.GroupOptionsInfo options = newGson().fromJson(r.getReader(), com.google.gerrit.server.group.GroupOptionsInfo.class); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); assertEquals(adminGroup.isVisibleToAll(), com.google.gerrit.<END_MOD>acceptance.rest.group.<START_MOD>GroupAssert.toBoolean(options.visibleToAll)); r.consume(); com.google.gerrit.acceptance.rest.group.GroupPropertiesIT.GroupOptionsInput in = new com.google.gerrit.acceptance.rest.group.GroupPropertiesIT.GroupOptionsInput(); in.visible_to_all = !(adminGroup.isVisibleToAll()); r = session.put(url, in); com.google.gerrit.server.group.<END_MOD>GroupOptionsInfo <START_MOD>newOptions = newGson<END_MOD>().fromJson(r.getReader(), <START_MOD>com.google.gerrit.server.group.GroupOptionsInfo.class); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); assertEquals(in.visible_to_all, <END_MOD>com.google.gerrit.acceptance.rest.group.<START_MOD>GroupAssert.toBoolean(newOptions.visibleToAll)); adminGroup = groupCache.get(adminGroupName); assertEquals(in.visible_to_all, adminGroup.isVisibleToAll()); r.consume(); <END_MOD>}
private Change.Id insertPatchSet(org.eclipse.jgit.lib.Repository git, org.eclipse.jgit.revwalk.RevWalk revWalk, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, org.eclipse.jgit.revwalk.RevCommit cherryPickCommit, com.google.gerrit.server.project.RefControl refControl) throws com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { patchSetInserterFactory.create(git, revWalk, change, cherryPickCommit).setRefControl(refControl).setMessage(buildChangeMessage(patchSetId, change)).insert(); return change.getId(); }
@java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { <START_MOD>focusHint<END_MOD>(); <START_MOD>isFocused = true; <END_MOD>}
<START_MOD>private<END_MOD> void addReviewerToReviewableChangeInNoteDbByOwnerCcingSelfNotifyOwner(<START_MOD>com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Adder adder<END_MOD>) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create("added", "added@example.com", "added"); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.CC_ON_OWN_COMMENTS, com.google.gerrit.acceptance.server.mail.OWNER); assertThat(sender).notSent(); }
private com.google.gerrit.client.diff.<START_MOD>CommentBoxManager<END_MOD>.LineWidgetElementPair addPaddingWidget(net.codemirror.lib.CodeMirror cm, java.lang.String style, int line, int height, com.google.gwt.dom.client.Style.Unit unit<START_MOD>, java.lang.Integer index<END_MOD>) { com.google.gwt.dom.client.Element div = com.google.gwt.user.client.DOM.createDiv(); div.setClassName(style); div.getStyle().setHeight(height, unit); net.codemirror.lib.Configuration config = net.codemirror.lib.Configuration.create().set("coverGutter", true).set("above", (line == (-1))); <START_MOD>if (index != null) { config = config.set("insertAt", index); } <END_MOD>net.codemirror.lib.LineWidget widget = cm.addLineWidget((line == (-1) ?   : line), div, config); return new com.google.gerrit.client.diff.<START_MOD>CommentBoxManager<END_MOD>.LineWidgetElementPair(widget, div); }
<START_MOD>public void testMergeabilityOfChangesbyBranch() { try { java.util.List<com.google.gerrit.reviewdb.Change> changes = schema.changes().byProject(destBranch.getParentKey()).toList(); for (com.google.gerrit.reviewdb.Change change : changes) { if ((destBranch.equals(change.getDest())) && ((change.getStatus()) == (Change.Status.NEW))) { testMergeQueue.addToQueue(change); } } testMergeQueue.consumesQueue(); } catch (com.google.gwtorm.client.OrmException e) { com.google.gerrit.server.git.MergeOp.log.error((("Test merge attempt for branch: " + (destBranch.get())) + " failed: Not able to query database"), e); } }<END_MOD>
@java.lang.Override public void deleteVote(java.lang.String label) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteVote.apply(new com.google.gerrit.server.change.VoteResource(reviewer, label), null); } catch (<START_MOD>java.lang.Exception e) { <END_MOD>com.google.gerrit.server.<START_MOD>api<END_MOD>.<START_MOD>changes<END_MOD>.<START_MOD>RevisionReviewerApiImpl<END_MOD>.<START_MOD>throwRestApiException<END_MOD>( delete vote e); } }
@java.lang.Override public void onSuccess(final com.google.gerrit.client.info.ChangeInfo info) { info.init(); addExtensionPoints(info, initCurrentRevision(info)); final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); loadCommit(rev, group); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { if ((base<START_MOD>.isBaseOrAutoMerge()<END_MOD>) && (rev.<START_MOD>isMerge()<END_MOD>)) { base = com.google.gerrit.client.<START_MOD>DiffObject.parse(info.legacyId(), com.google.gerrit.client.<END_MOD>Gerrit.getUserPreferences().defaultBaseForMerges().getBase()<START_MOD>)<END_MOD>; } loadConfigInfo(info, base); } }); group.done(); }
@java.lang.Override public com.google.gerrit.reviewdb.com.google.gwtorm<?>[] members() { return new com.google.gwtorm.client.Key<?>[]{ projectName<START_MOD>, fileMatchRegex<END_MOD> }; }
<START_MOD>@java.lang.Override public com.google.gerrit.extensions.common.RobotCommentInfo apply(com.google.gerrit.server.change.RobotCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().format(rsrc.getComment()); }<END_MOD>
<START_MOD>public static void get(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String path, boolean base, com.google.gerrit.client.rpc.HttpCallback<com.google.gerrit.client.rpc.NativeString> cb) { com.google.gerrit.client.rpc.RestApi api; if ((id.get()) != 0) { api = com.google.gerrit.client.changes.ChangeApi.revision(id).view("files").id(path).view("content"); } else if (Patch.COMMIT_MSG.equals(path)) { api = com.google.gerrit.client.changes.ChangeEditApi.editMessage(id.getParentKey().get()); } else { api = com.google.gerrit.client.changes.ChangeEditApi.editFile(id.getParentKey().get(), path); } api.addParameter("base", base).get(cb); }<END_MOD>
protected com.google.gerrit.server.notedb.ChangeNotes newNotes(com.google.gerrit.reviewdb.client.Change c) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes(<START_MOD>null, <END_MOD>repoManager, com.google.gerrit.server.notedb.AbstractChangeNotesTest.MIGRATION, allUsers, c).load(); }
@java.lang.Override public void onTimeout(org.eclipse.jetty.continuation.Continuation self) { <START_MOD>end<END_MOD>(); }
private void parse(org.eclipse.jgit.revwalk.RevCommit commit) throws org.eclipse.jgit.errors.ConfigInvalidException { if ((<START_MOD>lastUpdatedOn) == null) { lastUpdatedOn = com.google.gerrit.server.notedb.ChangeNotesParser.getCommitTime(commit); } createdOn = com.google.gerrit.server.notedb.ChangeNotesParser.getCommitTime(commit); if ((<END_MOD>status) == null) { status = parseStatus(commit); } com.google.gerrit.reviewdb.client.PatchSet.Id psId = parsePatchSetId(commit); com.google.gerrit.reviewdb.client.Account.Id accountId = parseIdent(commit); parseChangeMessage(psId, accountId, commit); if ((topic) == null) { topic = parseTopic(commit); } parseHashtags(commit); if (submitRecords.isEmpty()) { parseSubmitRecords(commit.getFooterLines(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_SUBMITTED_WITH)); } for (java.lang.String line : commit.getFooterLines(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_LABEL)) { parseApproval(psId, accountId, commit, line); } for (com.google.gerrit.server.notedb.ReviewerStateInternal state : com.google.gerrit.server.notedb.ReviewerStateInternal.values()) { for (java.lang.String line : commit.getFooterLines(state.getFooterKey())) { parseReviewer(state, line); } } }
<START_MOD>@org.junit.Test public void reviewAndStartReview() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createWorkInProgressChange(); r.assertOkStatus(); assertThat(r.getChange().change().isWorkInProgress()).isTrue(); com.google.gerrit.extensions.api.changes.ReviewInput in = com.google.gerrit.extensions.api.changes.ReviewInput.noScore().setWorkInProgress(false); in.ready = true; gApi.changes().id(r.getChangeId()).revision("current").review(in); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(r.getChangeId()).get(); assertThat(info.workInProgress).isNull(); }<END_MOD>
private com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.ComparisonType getComparisonType(org.eclipse.jgit.revwalk.RevObject a, org.eclipse.jgit.revwalk.RevCommit b) { for (int i = 0; i < (b.getParentCount()); i++) { if (b.getParent(i).equals(a)) { return com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.ComparisonType.againstParent((i + 1)); } } if (((key.getOldId()) == null) && ((b.getParentCount()) > 0)) { return com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.ComparisonType.againstAutoMerge(); } return com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.ComparisonType.againstOtherPatchSet(); }
<START_MOD>private java.util.Map<java.lang.String, java.lang.String> getSubmodules(com.googlesource.gerrit.plugins.repositoryuse.RefUpdate event, com.google.gerrit.server.project.ProjectResource project) throws java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { java.util.HashMap<java.lang.String, java.lang.String> submodules = new java.util.HashMap<>(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project.getNameKey())) { try (org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.submodule.SubmoduleWalk sw = new org.eclipse.jgit.submodule.SubmoduleWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = walk.parseCommit(repo.resolve(event.getNewObjectId())); sw.setTree(commit.getTree()); sw.setRootTree(commit.getTree()); while (sw.next()) { submodules.putIfAbsent(normalizePath(project.getName(), sw.getModulesUrl(), false), sw.getObjectId().name()); } } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { com.googlesource.gerrit.plugins.repositoryuse.RefUpdateHandlerImpl.log.warn(("Invalid .gitmodules configuration while parsing " + (project.getName()))); } } return submodules; }<END_MOD>
<START_MOD>public java.util.List<com.google.gerrit.server.project.ChangeControl> findChanges(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().setRequestedFields(com.google.common.collect.ImmutableSet.<java.lang.String>of()); return asChangeControls(query.byLegacyChangeId(id)); }<END_MOD>
private java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> query() throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { if (imp.isDisabled()) { throw new com.google.gerrit.server.query.QueryParseException( disabled } if (((queries) == null) || (queries.isEmpty())) { queries = java.util.Collections.singletonList("status:open"); } else if ((queries.size()) > 10) { throw new com.google.gerrit.server.query.QueryParseException( of 10 queries } int cnt = queries.size(); java.util.List<com.google.gerrit.server.query.QueryResult<com.google.gerrit.server.query.change.ChangeData>> results = imp.query(qb.parse(queries)); <START_MOD>com.google.gerrit.server.change.ChangeJson cjson = json.create(options); cjson.setPluginDefinedAttributesFactory(this.imp); <END_MOD>java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> res = <START_MOD>cjson<END_MOD>.formatQueryResults(results); for (int n = 0; n < cnt; n++) { java.util.List<com.google.gerrit.extensions.common.ChangeInfo> info = res.get(n); if (results.get(n).more()) { info.get(((info.size()) - 1))._moreChanges = true; } } return res; }
private void assertEmptyCommit(java.lang.String projectName, java.lang.String... refs) throws java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName)); <START_MOD>try (<END_MOD>org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.treewalk.TreeWalk tw = new org.eclipse.jgit.treewalk.TreeWalk(repo)<START_MOD>)<END_MOD> { for (java.lang.String ref : refs) { org.eclipse.jgit.revwalk.RevCommit commit = rw.lookupCommit(repo.getRef(ref).getObjectId()); rw.parseBody(commit); tw.addTree(commit.getTree()); assertThat(tw.next()).isFalse(); tw.reset(); } } }
public static void submit(int id<START_MOD>, @com.google.gerrit.common.Nullable java.lang.String project<END_MOD>, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.SubmitInfo> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.call(id, <START_MOD>project, <END_MOD>commit, "submit").post(in, cb); }
@java.lang.Override public com.google.gerrit.server.patch.IntraLineDiff load(<START_MOD>final <END_MOD>com.google.gerrit.server.patch.IntraLineDiffKey key) throws java.lang.Exception { <START_MOD>java.util.concurrent.Future<com.google.gerrit.server.patch.IntraLineDiff> result<END_MOD> = <START_MOD>diffExecutor.submit(new java.util.concurrent.Callable<com.google.gerrit.server.patch.IntraLineDiff>() { @java.lang.Override public com.google.gerrit.server.patch.IntraLineDiff call() throws java.lang.Exception { return com.google.gerrit.server.patch.IntraLineLoader.compute(key); } }); com.google.gerrit.server.patch.IntraLineDiff intraLineDiff; try { intraLineDiff<END_MOD> = <START_MOD>result.get(timeoutMillis<END_MOD>, <START_MOD>java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.InterruptedException | java.util.concurrent.TimeoutException e) { com.google.gerrit.server.patch.IntraLineLoader.log.warn(((((((((((((<END_MOD>timeoutMillis)<START_MOD> +   ms timeout reached for IntraLineDiff +   in project   + (key.getProject().get())) +   on commit   + (key.getCommit().name())) +   for path   + (key.getPath())) +   comparing   + (key.getBlobA().name())) + "..") + (key.getBlobB().name()))); result.cancel(true); return new com.google.gerrit.server.patch.IntraLineDiff(IntraLineDiff.Status.TIMEOUT); } catch (java.util.concurrent.ExecutionException e) { java.lang.Throwable cause = e.getCause()<END_MOD>; if (<START_MOD>cause instanceof java.lang.Exception) { throw ((java.lang.Exception) (cause)); } else { throw new java.lang.Exception(e.getMessage(), cause); } }<END_MOD> return <START_MOD>intraLineDiff; }<END_MOD>
private static org.eclipse.jgit.diff.RawTextComparator comparatorFor(com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace ws) { switch (ws) { case <START_MOD>IGNORE_ALL<END_MOD> : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_ALL; case <START_MOD>IGNORE_AT_LINE_END<END_MOD> : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_TRAILING; case <START_MOD>IGNORE_LEADING_AND_END<END_MOD> : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_CHANGE; case IGNORE_NONE : default : return org.eclipse.jgit.diff.RawTextComparator.DEFAULT; } }
public java.lang.String getNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.<START_MOD>getEvenIfMissing<END_MOD>(accountId); java.lang.String name = who.getAccount().getFullName(); java.lang.String email = who.getAccount().getPreferredEmail(); if ((name != null) && (email != null)) { return ((name +   < + email) + ">"; } else if (name != null) { return name; } else if (email != null) { return email; } else { return ((args.anonymousCowardName) +     + accountId; } }
@org.junit.Test public void listNoChildren() throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = GET((("/projects/" + (allProjects.get())) + "/children/")); <START_MOD>assertThat<END_MOD>(r.getStatusCode()<START_MOD>).isEqualTo(HttpStatus.SC_OK<END_MOD>); java.util.List<com.google.gerrit.extensions.common.ProjectInfo> projectInfoList = com.google.gerrit.acceptance.rest.project.ListChildProjectsIT.toProjectInfoList(r); <START_MOD>assertThat<END_MOD>(projectInfoList.size())<START_MOD>.isEqualTo(<END_MOD>2); }
@java.lang.Override public org.eclipse.jgit.transport.ReceivePack create(javax.servlet.http.HttpServletRequest req, org.eclipse.jgit.lib.Repository db) throws org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException { final com.google.gerrit.server.project.ProjectControl pc = ((com.google.gerrit.server.project.ProjectControl) (req.getAttribute(com.google.gerrit.httpd.GitOverHttpServlet.ATT_CONTROL))); if (!((pc.getCurrentUser()) instanceof com.google.gerrit.server.IdentifiedUser)) { throw new org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException(); } final com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (pc.getCurrentUser())); final com.google.gerrit.server.git.ReceiveCommits rc = factory.create(pc, db); <START_MOD>final org.eclipse.jgit.transport.ReceivePack rp = ((org.eclipse.jgit.transport.ReceivePack) (<END_MOD>rc.<START_MOD>getReceiveSession())); rp<END_MOD>.setRefLogIdent(user.newRefLogIdent()); req.setAttribute(com.google.gerrit.httpd.GitOverHttpServlet.ATT_RC, rc); session.get().setAccessPath(AccessPath.GIT); return <START_MOD>rp<END_MOD>; }
public com.google.<START_MOD>gerrit.client.reviewdb.Account<END_MOD> run(com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.<START_MOD>gerrit.server.Failure, com.google.<END_MOD>gwtorm.client.OrmException { final com.google.gerrit.client.reviewdb.Account me = db.accounts().get(com.google.gerrit.client.rpc.Common.getAccountId()); me.setFullName(fullName); me.setPreferredEmail(emailAddr); <START_MOD>if ((com.google.gerrit.client.reviewdb.ContactInformation.hasAddress<END_MOD>(info)<START_MOD>) || ((me.isContactFiled()) && (com.google.gerrit.client.reviewdb.ContactInformation.hasData(info)))) { me.setContactFiled(); } if (com.google.gerrit.client.reviewdb.ContactInformation.hasData(info)) { try { com.google.gerrit.server.ContactInformationStore.store(me, info); } catch (ContactInformationStoreException e) { throw new com.google.gerrit.server.Failure(e); } }<END_MOD> db.accounts().update(java.util.Collections.singleton(me)); com.google.gerrit.client.rpc.Common.getAccountCache().invalidate(me.getId()); return <START_MOD>me; }<END_MOD>
@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.server.config.EXTERNAL_CAPABILITY_KIND); bind(com.google.gerrit.server.config.EXTERNAL_CAPABILITY_KIND).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(<START_MOD>"printHello"<END_MOD>)).toInstance(new com.google.gerrit.extensions.config.CapabilityDefinition() { @java.lang.Override public java.lang.String getName() { return <START_MOD>"printHello"<END_MOD>; } @java.lang.Override public java.lang.String getDescription() { return   <START_MOD>Hello<END_MOD> } }); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.StarredChange rsrc, com.google.gerrit.server.account.StarredChanges.EmptyInput in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if ((self.get()) != (rsrc.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException( allowed remove starred change } dbProvider.get().starredChanges().delete(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.StarredChange(new com.google.gerrit.reviewdb.client.StarredChange.Key(rsrc.getUser().getAccountId(), rsrc.getChange().getId())))); <START_MOD>rsrc.getUser().clearStarredChanges(); <END_MOD>return com.google.gerrit.extensions.restapi.Response.none(); }
public java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> draftByChange(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { return com.google.gerrit.server.PatchLineCommentsUtil.sort(com.google.gerrit.server.PatchLineCommentsUtil.byCommentStatus(db.patchComments().byChange(notes.getChangeId()), Status.DRAFT)); } java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(); java.lang.Iterable<<START_MOD>org.eclipse.jgit.lib.Ref<END_MOD>> filtered = getDraftRefs(notes.getChangeId()); for (<START_MOD>org.eclipse.jgit.lib.Ref ref<END_MOD> : filtered) { com.google.gerrit.reviewdb.client.Account.Id account = Account.Id.fromRefPart(<START_MOD>ref.getName()<END_MOD>); if (account != null) { comments.addAll(draftByChangeAuthor(db, notes, account)); } } return com.google.gerrit.server.PatchLineCommentsUtil.sort(comments); }
public com.google.gerrit.testutil.InMemoryDatabase create() throws com.google.gwtorm.client.OrmException { if (!(created)) { created = true; final com.google.gerrit.reviewdb.ReviewDb c = open(); try { <START_MOD>try { <END_MOD>new com.google.gerrit.server.schema.SchemaCreator(new java.io.File("."), schemaVersion<START_MOD>, null<END_MOD>).create(c); } <START_MOD>catch (java.io.IOException e) { throw new com.google.gwtorm.client.OrmException( create in-memory database e); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.client.OrmException( create in-memory database e); } } <END_MOD>finally { c.close(); } } return this; }
<START_MOD>@com.google.gwt.uibinder.client.UiHandler("followUp") void onFollowUp(com.google.gwt.event.dom.client.ClickEvent e) { if ((followUpAction) == null) { followUpAction = new com.google.gerrit.client.change.FollowUpAction(followUp, project, branch, key, changeId); } followUpAction.show(); }<END_MOD>
@java.lang.Override protected void configure() { bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginName.class).toInstance(pluginName); <START_MOD>bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginCanonicalWebUrl.class).toInstance(pluginUrl); <END_MOD>}
<START_MOD>protected<END_MOD> <START_MOD>abstract<END_MOD> <START_MOD>java.util.List<?<END_MOD> <START_MOD>extends com.google.gerrit.reviewdb.client.Comment> parse<END_MOD>(byte[] raw, int offset) <START_MOD>throws<END_MOD> <START_MOD>java.io.IOException,<END_MOD> <START_MOD>org.eclipse.jgit.errors.ConfigInvalidException<END_MOD>;
<START_MOD>@java.lang.Override public com.google.gerrit.reviewdb.client.Change.Id apply(java.lang.String changeId) { return Change.Id.parse(changeId); }<END_MOD>
static void postSignIn(final boolean success) { final com.google.gerrit.client.SignInDialog d = com.google.gerrit.client.SignInDialog.current; assert d != null; if (success) { com.google.gerrit.client.Gerrit.postSignIn(); d.hide(); if ((d.callback) != null) { <START_MOD>com.google.gwt.user.client.DeferredCommand.addCommand(new com.google.gwt.user.client.Command() { public void execute() { <END_MOD>d.callback.onSuccess(null<START_MOD>); } }<END_MOD>); } } else { d.hide(); } }
@java.lang.Override public void onGitReferenceUpdated(final com.googlesource.gerrit.plugins.refprotection.Event event) { if (isRelevantRef(event)) { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(event.getProjectName()); try { com.google.gerrit.server.project.ProjectResource project = new com.google.gerrit.server.project.ProjectResource(projectControl.controlFor(nameKey, user)); if ((isRefDeleted(event)) || (isNonFastForwardUpdate(event, project))) { <START_MOD>backupBranch.createBackup<END_MOD>(event, project); } } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.googlesource.gerrit.plugins.refprotection.RefUpdateListener.log.error(e.getMessage(), e); } } }
boolean isSingleProjectMatch() { boolean ret = (projects.length) == 1; if (ret) { java.lang.String projectMatch = projects[0]; if ((com.googlesource.gerrit.plugins.replication.<START_MOD>ReplicationFilter<END_MOD>.isRE(projectMatch)) || (com.googlesource.gerrit.plugins.replication.<START_MOD>ReplicationFilter<END_MOD>.isWildcard(projectMatch))) { ret = false; } } return ret; }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.EditPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException( must be provided } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); <START_MOD>accountsUpdateProvider.get<END_MOD>().update( Diff Preferences via API id, ( u) -> u.setEditPreferences(input)); return accountCache.get(id).getEditPreferences(); }
@org.junit.Test public void treeDiffLog() throws java.lang.Exception { java.lang.String contents1 = "foo\n"; java.lang.String contents2 = "foo\ncontents\n"; org.eclipse.jgit.revwalk.RevCommit c1 = repo.update("master", repo.commit().add("foo", contents1)); org.eclipse.jgit.revwalk.RevCommit c2 = repo.update("master", repo.commit().parent(c1).add("foo", contents2)); repo.getRevWalk().parseBody(c1); repo.getRevWalk().parseBody(c2); Log log = buildJson("/repo/+log/master", com.google.gitiles.LogServletTest.LOG, "&name-status=1"); assertThat(log.log).hasSize(2); Commit jc2 = log.log.get(0); verifyJsonCommit(jc2, c2); assertThat(jc2.treeDiff).hasSize(1); assertThat(jc2.treeDiff.get(0).type).isEqualTo("modify"); assertThat(jc2.treeDiff.get(0).oldPath).isEqualTo("foo"); assertThat(jc2.treeDiff.get(0).newPath).isEqualTo("foo"); Commit jc1 = log.log.get(1); verifyJsonCommit(jc1, c1); assertThat(jc1.treeDiff).hasSize(1); assertThat(jc1.treeDiff.get(0).type).isEqualTo("add"); assertThat(jc1.treeDiff.get(0).oldPath).isEqualTo("/dev/null"); assertThat(jc1.treeDiff.get(0).newPath).isEqualTo("foo"); }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, <START_MOD>childProjectLister<END_MOD>, submitDryRun, conflictsCache, index, indexConfig, listMembers, starredChangesUtil, accountCache, allowsDrafts, notesMigration); }
static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { protected void configure() { persist(com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.REPO_SIZE_CACHE, Project.NameKey.class, java.util.concurrent.atomic.AtomicLong.class).loader(com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.Loader.class).expireAfterWrite(1, java.util.concurrent.TimeUnit.DAYS); <START_MOD>persist(com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.PUSH_COUNT_CACHE, Project.NameKey.class, java.util.concurrent.atomic.AtomicLong.class); persist(com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.FETCH_COUNT_CACHE, Project.NameKey.class, java.util.concurrent.atomic.AtomicLong.class); <END_MOD>} }; }
com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo lineOnOther(com.google.gerrit.client.diff.DisplaySide side, int line) { return getChunkManager().<START_MOD>mapper<END_MOD>.lineOnOther(side, line); }
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = getRevision(); if (rev == null) { loadDefaults(); return; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(reader); try (com.google.gerrit.server.notedb.ChangeNotesParser parser = new com.google.gerrit.server.notedb.ChangeNotesParser(change, rev, walk, repoManager)) { parser.parseAll(); if ((parser.status) != null) { change.setStatus(parser.status); } approvals = parser.buildApprovals(); changeMessages = parser.buildMessages(); commentsForBase = com.google.common.collect.ImmutableListMultimap.copyOf(parser.commentsForBase); commentsForPS = com.google.common.collect.ImmutableListMultimap.copyOf(parser.commentsForPs); noteMap = parser.commentNoteMap; <START_MOD>if ((parser.hashtags) != null) { hashtags = com.google.common.collect.ImmutableSet.copyOf(parser.hashtags); } <END_MOD>ImmutableSetMultimap.Builder<com.google.gerrit.server.notedb.ReviewerState, com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.ImmutableSetMultimap.builder(); for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.notedb.ReviewerState> e : parser.reviewers.entrySet()) { reviewers.put(e.getValue(), e.getKey()); } this.reviewers = reviewers.build(); this.allPastReviewers = com.google.common.collect.ImmutableList.copyOf(parser.allPastReviewers); submitRecords = com.google.common.collect.ImmutableList.copyOf(parser.submitRecords); } catch (java.text.ParseException e1) { throw new java.io.IOException(e1); } finally { walk.release(); } }
<START_MOD>@java.lang.Override public com.google.gerrit.extensions.accounts.AccountApi id(java.lang.String id) throws com.google.gerrit.extensions.restapi.RestApiException { try { return api.create(accounts.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id))); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot parse change", e); } }<END_MOD>
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "suggest.maxSuggestedReviewers", value = "2") public void suggestReviewersMaxNbrSuggestions() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.SuggestedReviewerInfo> reviewers = suggestReviewers(changeId, "user", 5); assertEquals(2, reviewers.size()); }
com.google.common.util.concurrent.CheckedFuture<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.server.git.InsertException> insertPatchSet() throws java.io.IOException { rp.getRevWalk().parseBody(newCommit); final java.lang.Thread caller = java.lang.Thread.currentThread(); com.google.common.util.concurrent.ListenableFuture<com.google.gerrit.reviewdb.client.PatchSet.Id> future = changeUpdateExector.submit(requestScopePropagator.wrap(new java.util.concurrent.Callable<com.google.gerrit.reviewdb.client.PatchSet.Id>() { @java.lang.Override public PatchSet.Id call() throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { try { if (<START_MOD>(<END_MOD>caller == (java.lang.Thread.currentThread())) <START_MOD>|| (magicBranch.edit)) <END_MOD>{ return<START_MOD> magicBranch.edit ? upsertEdit() :<END_MOD> insertPatchSet(db); } else { com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open(); try { return insertPatchSet(db); } finally { db.close(); } } } finally { synchronized(replaceProgress) { replaceProgress.update(1); } } } })); return com.google.common.util.concurrent.Futures.makeChecked(future, com.google.gerrit.server.git.ReceiveCommits.INSERT_EXCEPTION); }
<START_MOD>public void changesCreatedBy(final java.lang.String userName, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.data.SingleListChangeInfo> callback) { run(callback, new com.google.gerrit.client.changes.ChangeListServiceImpl.UserNameAction(userName) { @java.lang.Override void process(com.google.gerrit.client.reviewdb.ReviewDb db, com.google.gerrit.client.data.AccountInfoCacheFactory ac, com.google.gerrit.client.reviewdb.Account account, java.util.Map<com.google.gerrit.client.reviewdb.Change.Id, com.google.gerrit.client.reviewdb.Change> resultChanges) throws com.google.gwtorm.client.OrmException { final java.util.Set<com.google.gerrit.client.reviewdb.Change> changes = com.google.gerrit.client.changes.ChangeListServiceImpl.createdBy(db, account.getId()); ac.want(account.getId()); for (com.google.gerrit.client.reviewdb.Change change : changes) { resultChanges.put(change.getId(), change); } } }); }<END_MOD>
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { if (((addedReviewers) != null) || ((addedCCs) != null)) { <START_MOD>emailReviewers(rsrc.getChange(), com.google.common.collect.Lists.transform(<END_MOD>((addedReviewers) == null<START_MOD> ? com.google.common.collect.ImmutableList.of() : addedReviewers), ( r) -> r.getAccountId()),<END_MOD> ((addedCCs) == null<START_MOD> ? com.google.common.collect.ImmutableList.of() :<END_MOD> addedCCs<START_MOD>), reviewersByEmail, ((addedCCsByEmail) == null ? com.google.common.collect.ImmutableList.of() : addedCCsByEmail)<END_MOD>, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) { java.util.List<com.google.gerrit.reviewdb.client.Account> reviewers = com.google.common.collect.Lists.transform(addedReviewers, ( psa) -> com.google.gerrit.server.change.accountCache.get(psa.getAccountId()).getAccount()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } } }
<START_MOD>private static void addFooter(java.lang.StringBuilder sb, org.eclipse.jgit.revwalk.FooterKey footer, java.lang.Object key, java.lang.Object value) { sb.append(footer.getName()).append(": ").append(key).append('=').append(value).append('\n'); }<END_MOD>
private<START_MOD> static<END_MOD> java.util.jar.Manifest getPluginManifest(com.google.gerrit.server.plugins.PluginScanner scanner) throws com.google.gerrit.server.plugins.InvalidPluginException { try { return scanner.getManifest(); } catch (java.io.IOException e) { throw new com.google.gerrit.server.plugins.InvalidPluginException( get plugin manifest e); } }
private boolean matchCriteria(com.google.gerrit.server.config.PluginConfig config, java.lang.String criteria,<START_MOD> @com.google.gerrit.common.Nullable<END_MOD> java.lang.String value, boolean allowRegex, boolean refMatcher) { boolean match = true; for (java.lang.String s : config.getStringList(criteria)) {<START_MOD> if (value == null) { return false; }<END_MOD> if ((allowRegex && (com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig.match(value, s, refMatcher))) || ((!allowRegex) && (s.equals(value)))) { return true; } match = false; } return match; }
@org.junit.Test public void noConflictingChanges() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(git, true); createChange(git, false); java.util.Set<java.lang.String> changes = queryConflictingChanges(change); <START_MOD>assertThat<END_MOD>(changes<START_MOD>)<END_MOD>.<START_MOD>isEmpty<END_MOD>(); }
@java.lang.Override public boolean deleteChangeFromIndex(final int changeId) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request(<START_MOD> from index<END_MOD> change   changeId) { @java.lang.Override com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult send() throws java.io.IOException { return httpSession.delete(buildIndexEndpoint(changeId)); } }.execute(); }
<START_MOD>private void savePluginSections(org.eclipse.jgit.lib.Config rc) { java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, com.google.common.collect.LinkedListMultimap<java.lang.String, java.lang.String>> e : pluginConfigs.entrySet()) { java.lang.String plugin = e.getKey(); com.google.common.collect.LinkedListMultimap<java.lang.String, java.lang.String> pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.keySet()) { rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, pluginConfig.get(name)); } } }<END_MOD>
@java.lang.Override public java.lang.String[] getList(java.lang.String section, java.lang.String subsection, java.lang.String name) { return <START_MOD>com.google.common.collect.FluentIterable.from(<END_MOD>java.util.Arrays.<START_MOD>asList<END_MOD>(sec.getStringList(section, subsection, name))<START_MOD>)<END_MOD>.<START_MOD>transform<END_MOD>(decode).toArray(java.lang.String<START_MOD>.class<END_MOD>); }
void createNotes(java.util.<START_MOD>Collection<END_MOD><com.google.gerrit.reviewdb.client.Change> changes, org.eclipse.jgit.lib.ProgressMonitor monitor) throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(git)) { if (monitor == null) { monitor = org.eclipse.jgit.lib.NullProgressMonitor.INSTANCE; } for (com.google.gerrit.reviewdb.client.Change c : changes) { monitor.update(1); com.google.gerrit.reviewdb.client.PatchSet ps = reviewDb.patchSets().get(c.currentPatchSetId()); org.eclipse.jgit.lib.ObjectId commitId = org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()); org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(commitId); getNotes().set(commitId, createNoteContent(ps)); getMessage().append( ").append(commit.getShortMessage()).append(" } } }
@java.lang.Override public com.google.gerrit.<START_MOD>extensions.common.ChangeInfo apply(com.google.gerrit.<END_MOD>server.change.<START_MOD>ChangeResource rsrc) { java.util.List<com.google.gerrit.extensions.api.changes.ProblemInfo> problems = checkerProvider.get().check(rsrc.getChange()); com.google.gerrit.extensions.common.ChangeInfo result; try { result = json.format(rsrc); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.extensions.api.changes.ProblemInfo p = new com.google.gerrit.extensions.api.changes.ProblemInfo(); p.message =   rendering final ChangeInfo <END_MOD>com.google.gerrit.server.change.<START_MOD>Check.log.warn(p.message, e); problems.add(p); result =<END_MOD> com.google.gerrit.server.change.<START_MOD>Check.basicChangeInfo<END_MOD>(rsrc.getChange()); } <START_MOD>result.problems = problems; return result<END_MOD>; }
public static com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> create(<START_MOD>com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments args, <END_MOD>java.lang.String label, com.google.gerrit.common.data.SubmitRecord.Label.Status status, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts) { java.lang.String lowerLabel = label.toLowerCase(); if ((accounts == null) || (accounts.isEmpty())) { return new com.google.gerrit.server.query.change.SubmitRecordPredicate(<START_MOD>args, <END_MOD>(((status.name()) + ',') + lowerLabel)); } return com.google.gerrit.server.query.Predicate.or(accounts.stream().map(( a) -> new com.google.gerrit.server.query.change.SubmitRecordPredicate(<START_MOD>args, <END_MOD>(((((status.name()) + ',') + lowerLabel) + ',') + (a.get())))).collect(java.util.stream.Collectors.toList())); }
<START_MOD>private static void checkCommitMessageForBlockedKeywords(com.google.common.collect.ImmutableCollection<java.util.regex.Pattern> blockedKeywordPatterns, java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages, java.lang.String commitMessage) { int line = 0; for (java.lang.String l : commitMessage.split("[\r\n]+")) { line++; com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.checkLineForBlockedKeywords(blockedKeywordPatterns, messages, "commit message", line, l); } }<END_MOD>
@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { final com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, username); final com.google.gerrit.reviewdb.client.AccountExternalId user = db.accountExternalIds().get(key); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } final java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.reviewdb.client.AccountSshKey k : <START_MOD>readSshKeys<END_MOD>(db, <START_MOD>user.getAccountId())) { if (k.isValid()) { add(db, <END_MOD>kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); } }
<START_MOD>@java.lang.Override public com.google.gerrit.extensions.api.projects.ProjectApi create(com.google.gerrit.extensions.api.projects.ProjectInput in) { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); }<END_MOD>
@java.lang.Override public com.google.gerrit.extensions.common.WebLinkInfo getProjectWeblink(java.lang.String projectName) { return<START_MOD> noWebLinks ? null :<END_MOD> new com.google.gerrit.extensions.common.WebLinkInfo(name, null, java.lang.String.format("%s/%s", baseUrl, projectName), target); }
private void checkLabels(com.google.gerrit.server.change.RevisionResource rsrc, java.util.Map<java.lang.String, java.lang.Short> labels) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.common.data.LabelTypes types = rsrc.getControl().getLabelTypes(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions(); java.util.Iterator<java.util.Map.Entry<java.lang.String, java.lang.Short>> itr = labels.entrySet().iterator(); while (itr.hasNext()) { java.util.Map.Entry<java.lang.String, java.lang.Short> ent = itr.next(); com.google.gerrit.common.data.LabelType lt = types.byLabel(ent.getKey()); if (lt == null) { <START_MOD>throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(   is not a configured label ent.getKey())); } <END_MOD>if (<START_MOD>((ent.getValue()) == null) || ((ent.getValue()) == 0)) {<END_MOD> continue; } if ((<START_MOD>lt<END_MOD>.getValue(<START_MOD>ent.getValue()<END_MOD>)) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(   %d is not a valid value ent.getKey(), ent.getValue())); } short val = ent.getValue(); try { perm.check(new com.google.gerrit.server.permissions.LabelPermission.WithValue(lt, val)); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format( label   %d is restricted lt.getName(), val)); } <START_MOD>} }<END_MOD>
com.googlesource.gerrit.plugins.webhooks.PostTask create(com.<START_MOD>googlesource<END_MOD>.<START_MOD>gerrit<END_MOD>.<START_MOD>plugins<END_MOD>.<START_MOD>webhooks.RemoteConfig<END_MOD> <START_MOD>remote<END_MOD>, com.googlesource.gerrit.plugins.webhooks.EventProcessor processor);
<START_MOD>com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage getPrimaryStorage() { return primaryStorage; }<END_MOD>
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.index.ChangeIndexer.class).to(com.google.gerrit.server.index.ChangeIndexerImpl.class); bind(com.google.gerrit.server.query.change.IndexRewrite.class).to(com.google.gerrit.server.query.change.IndexRewriteImpl.class); bind(com.google.gerrit.server.index.<START_MOD>IndexCollection<END_MOD>.<START_MOD>class); listener<END_MOD>().<START_MOD>to<END_MOD>(com.google.gerrit.server.index.<START_MOD>IndexCollection<END_MOD>.class); }
public static <START_MOD>com.google.gerrit.reviewdb.client.RevId getRevId<END_MOD>(com.google.gerrit.reviewdb.client.PatchLineComment c, com.google.gerrit.server.patch.PatchListCache cache, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { if ((c.getRevId()) <START_MOD>==<END_MOD> null) { <START_MOD>try { com.google.gerrit.server.patch.PatchList patchList = cache.get(change, ps); c.setRevId(((c.getSide()) == ((short) (0)) ? new com.google.gerrit.reviewdb.client.RevId(org.eclipse.jgit.lib.ObjectId.toString(patchList.getOldId())) : new com.google.gerrit.reviewdb.client.RevId(org.eclipse.jgit.lib.ObjectId.toString(patchList.getNewId())))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { throw new com.google.gwtorm.server.OrmException(e); } } <END_MOD>return<START_MOD> c.getRevId(); }<END_MOD>
public com.google.gerrit.common.data.AccountProjectWatchInfo run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.Project.NameKey nameKey = new com.google.gerrit.reviewdb.Project.NameKey(projectName); final com.google.gerrit.server.project.ProjectControl ctl = projectControlFactory.validateFor(nameKey); final com.google.gerrit.reviewdb.AccountProjectWatch watch = new com.google.gerrit.reviewdb.AccountProjectWatch(new com.google.gerrit.reviewdb.AccountProjectWatch.Key(((com.google.gerrit.server.IdentifiedUser) (ctl.getCurrentUser())).getAccountId(), nameKey<START_MOD>, fileMatch<END_MOD>)); db.accountProjectWatches().insert(java.util.Collections.singleton(watch)); return new com.google.gerrit.common.data.AccountProjectWatchInfo(watch, ctl.getProject()); }
<START_MOD>private void listen(com.google.gerrit.server.plugins.AutoRegisterModules.ClassData def) throws com.google.gerrit.server.plugins.InvalidPluginException { java.lang.Class<?> clazz; try { clazz = java.lang.Class.forName(def.className, false, classLoader); } catch (java.lang.ClassNotFoundException err) { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format("Cannot load %s with @Listen", def.className), err); } com.google.gerrit.extensions.annotations.Listen listen = clazz.getAnnotation(com.google.gerrit.extensions.annotations.Listen.class); if (listen == null) { PluginLoader.log.warn(java.lang.String.format("In plugin %s asm incorrectly parsed %s with @Listen", pluginName, clazz.getName())); return; } listen(clazz, clazz); }<END_MOD>
<START_MOD>private java.io.File url2file(final java.lang.String urlString) throws java.io.IOException { java.io.File f; final java.net.URL url = new java.net.URL(urlString); try { f = new java.io.File(url.toURI()); } catch (java.net.URISyntaxException e) { f = new java.io.File(url.getPath()); } return f; }<END_MOD>
<START_MOD>private static void addAvatar(com.google.gerrit.server.avatar.AvatarProvider provider, com.google.gerrit.extensions.common.AccountInfo info, com.google.gerrit.server.IdentifiedUser user, int size) { java.lang.String url = provider.getUrl(user, size); if (url != null) { com.google.gerrit.extensions.common.AvatarInfo a = new com.google.gerrit.extensions.common.AvatarInfo(); a.url = url; a.height = size; info.avatars.add(a); } }<END_MOD>
java.lang.Runnable maybeNextVimSearch(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { @java.lang.Override public void run() { if (cm.vim().hasSearchHighlight()) { cm.vim().handleKey(<START_MOD>"N"<END_MOD>); } else { getChunkManager().diffChunkNav(cm, Direction.NEXT).run(); } } }; }
@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteBranch.apply(resource(), new com.google.gerrit.server.project.DeleteBranch.Input()); } catch (com.google.gwtorm.server.OrmException | java.io.IOException <START_MOD>| com.google.gerrit.server.permissions.PermissionBackendException <END_MOD>e) { throw new com.google.gerrit.extensions.restapi.RestApiException( delete branch e); } }
<START_MOD>private com.google.gerrit.server.events.CommitReceivedEvent newCommitReceivedEvent(org.eclipse.jgit.transport.ReceiveCommand command, com.google.gerrit.reviewdb.client.Project project, java.lang.String refName, org.eclipse.jgit.revwalk.RevCommit commit, com.googlesource.gerrit.plugins.its.base.validation.IdentifiedUser user) { com.google.gerrit.server.events.CommitReceivedEvent event = createMock(com.google.gerrit.server.events.CommitReceivedEvent.class); event.command = command; event.project = project; event.refName = refName; event.commit = commit; event.user = user; expect(event.getProjectNameKey()).andReturn(project.getNameKey()).anyTimes(); expect(event.getRefName()).andReturn(null).anyTimes(); return event; }<END_MOD>
<START_MOD>protected com.google.gerrit.acceptance.GerritServer startServer() throws java.lang.Exception { return com.google.gerrit.acceptance.GerritServer.start(serverDesc, baseConfig, sitePaths.site_path); }<END_MOD>
private static <START_MOD><T> void diffColumnsExcluding(java.util.List<<END_MOD>java.lang.String<START_MOD>> diffs, java.lang.Class<T> clazz, java.lang.String desc, com.google.gerrit.server.notedb.ChangeBundle bundleA, T a, com.google.gerrit.server.notedb.ChangeBundle bundleB, T b, java.lang.String... exclude) { java.util.Set<java.lang.String> toExclude = com.google.common.collect.Sets.newLinkedHashSet(java.util.Arrays.asList(exclude)); for (java.lang.reflect.Field f<END_MOD> : <START_MOD>clazz.getDeclaredFields()) { com.google.gwtorm.client.Column col = f.getAnnotation(com.google.gwtorm.client.Column.class); if (col == null) { continue; } else if (toExclude.remove(f.getName())) { continue; } f.setAccessible(true); try { if (java.sql.Timestamp.class.isAssignableFrom(f.getType())) { com.google.gerrit.server.notedb.ChangeBundle.diffTimestamps(diffs, desc, bundleA, a, bundleB, b, f.getName()); } else { com.google.gerrit.server.notedb.ChangeBundle.diffValues(diffs, desc, f.get(a), f.get(b), f.getName()); } } catch (java.lang.IllegalAccessException e) { throw new java.lang.IllegalArgumentException(e); } } checkArgument(toExclude.isEmpty(),   columns to exclude were not present in %s: %s clazz.getSimpleName(), toExclude); }<END_MOD>
void setSyntaxHighlighting(boolean b) { net.codemirror.mode.ModeInfo modeInfo = net.codemirror.mode.ModeInfo.findMode(content.getContentType(), path); final java.lang.String mode = (modeInfo != null) ? modeInfo.mode() : null; if ((b && (mode != null)) && (!(mode.isEmpty()))) { injectMode(mode, new com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { <START_MOD>cmOrig.setOption("mode", mode); cmEdit<END_MOD>.setOption("mode", mode); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { prefs.syntaxHighlighting(false); } }); } else { <START_MOD>cmOrig<END_MOD>.setOption("mode", ((java.lang.String) (null))); <START_MOD>cmEdit.setOption("mode", ((java.lang.String) (null))); } }<END_MOD>
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { setOpen((!(isOpen()))); <START_MOD>fireEvent(new com.google.gerrit.client.ui.CommentPanel.CommentHighlightEvent(isOpen())); <END_MOD>}
private void initUI() { addStyleName("gerrit-ChangeScreen"); descriptionBlock = new com.google.gerrit.client.changes.ChangeDescriptionBlock(); add(descriptionBlock); dependencies = new com.google.gerrit.client.changes.ChangeTable(); dependsOn = new com.google.gerrit.client.changes.ChangeTable.Section(Util.C.changeScreenDependsOn()); neededBy = new com.google.gerrit.client.changes.ChangeTable.Section(Util.C.changeScreenNeededBy()); dependencies.addSection(dependsOn); dependencies.addSection(neededBy); dependenciesPanel = new com.google.gwt.user.client.ui.DisclosurePanel(Util.C.changeScreenDependencies()); dependenciesPanel.setContent(dependencies); dependenciesPanel.setWidth("95%"); add(dependenciesPanel); approvals = new com.google.gerrit.client.changes.ApprovalTable(<START_MOD>changeId<END_MOD>); approvalsPanel = new com.google.gwt.user.client.ui.DisclosurePanel(Util.C.changeScreenApprovals()); approvalsPanel.setContent(com.google.gerrit.client.changes.ChangeScreen.wrap(approvals)); dependenciesPanel.setWidth("95%"); add(approvalsPanel); patchSetPanels = new com.google.gwt.user.client.ui.FlowPanel(); add(patchSetPanels); messagesContent = new com.google.gwt.user.client.ui.FlowPanel(); messagesContent.setStyleName("gerrit-ChangeMessages"); messagesPanel = new com.google.gwt.user.client.ui.DisclosurePanel(Util.C.changeScreenMessages()); messagesPanel.setContent(messagesContent); add(messagesPanel); }
<START_MOD>@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.listfilter.mode", value = "BLACKLIST") @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.listfilter.patterns", values = { ".+@example\\.com", "a@b\\.com" }) public void listFilterBlacklistFiltersListedUser() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo changeInfo = createChangeAndReplyByEmail(); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeInfo.id).get().messages; assertThat(messages).hasSize(2); }<END_MOD>
public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = com.google.gerrit.server.account.AccountManager.id(who); com.google.gerrit.reviewdb.client.AccountExternalId extId = getAccountExternalId(key); if (extId != null) { if (!(extId.getAccountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException(((   + (key.get())) +   in use by another account } db.accountExternalIds().delete(java.util.Collections.singleton(extId)); <START_MOD>externalIdCache.remove(extId); <END_MOD>if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(from); if (((a.getPreferredEmail()) != null) && (a.getPreferredEmail().equals(who.getEmailAddress()))) { a.setPreferredEmail(null); db.accounts().update(java.util.Collections.singleton(a)); } byEmailCache.evict(who.getEmailAddress()); byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException(((   + (key.get())) +   not found } return new com.google.gerrit.server.account.AuthResult(from, key, false); } }
<START_MOD>protected java.lang.String computeAssetPrefix() { try { java.net.URI uri = new java.net.URI(urlProvider.get()); return uri.getPath().replaceAll("/$", ""); } catch (java.net.URISyntaxException e) { return ""; } }<END_MOD>
@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey> lookupGroups(java.lang.String name) { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey> out; final java.util.Map<java.lang.String, java.lang.String> params = java.util.Collections.<java.lang.String, java.lang.String>emptyMap(); out = new java.util.HashSet<com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey>(); try { final javax.naming.directory.DirContext ctx = helper.open(); try { final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema = helper.getSchema(ctx); final com.google.gerrit.common.data.<START_MOD>ParametrizedString<END_MOD> filter = com.google.gerrit.common.data.<START_MOD>ParametrizedString<END_MOD>.asis(schema.groupPattern.replace(com.google.gerrit.server.auth.ldap.LdapRealm.GROUPNAME, name).toString()); for (java.lang.String groupBase : schema.groupBases) { final com.google.gerrit.server.auth.ldap.LdapQuery query = new com.google.gerrit.server.auth.ldap.LdapQuery(groupBase, schema.groupScope, filter, java.util.Collections.<java.lang.String>emptySet()); for (com.google.gerrit.server.auth.ldap.LdapQuery.Result res : query.query(ctx, params)) { out.add(new com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey(res.getDN())); } } } finally { try { ctx.close(); } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.warn( close LDAP query handle e); } } } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.warn( query LDAP for groups matching requested name e); } return out; }
public static java.lang.String toPatch(java.lang.String type, com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.Patch.Key id<START_MOD>, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project<END_MOD>) { return com.google.gerrit.client.Dispatcher.toPatch(type, diffBase, id.getParentKey(), <START_MOD>project, <END_MOD>id.get(), null, 0); }
<START_MOD>private<END_MOD> void addReviewerToReviewableChangeInNoteDbNotifyOwnerReviewers(<START_MOD>com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Adder adder<END_MOD>) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create("added", "added@example.com", "added"); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.OWNER_REVIEWERS); assertThat(sender).sent("newchange", sc).to(reviewer).cc(sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).noOneElse(); }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error( to log delete groups from <START_MOD>account<END_MOD> event e); } } }
public com.google.gerrit.reviewdb.client.AccountSshKey addKey(java.lang.String pub) { checkState(((keys) != null),   keys not loaded yet <START_MOD>for (com.google.common.base.Optional<com.google.gerrit.reviewdb.client.AccountSshKey> key : keys.values()) { if ((key.isPresent()) && (key.get().getSshPublicKey().trim().equals(pub.trim()))) { return key.get(); } } <END_MOD>int seq = (keys.isEmpty()) ? 1 : (keys.lastKey()) + 1; com.google.gerrit.reviewdb.client.AccountSshKey key = new com.google.gerrit.reviewdb.client.AccountSshKey(new com.google.gerrit.reviewdb.client.AccountSshKey.Id(accountId, seq), pub); keys.put(seq, com.google.common.base.Optional.of(key)); return key; }
private void insertChange(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.PatchSet ps = ins.getPatchSet(); final com.google.gerrit.reviewdb.client.Account.Id me = currentUser.getAccountId(); final java.util.List<org.eclipse.jgit.revwalk.FooterLine> footerLines = commit.getFooterLines(); final com.google.gerrit.server.mail.MailUtil.MailRecipients recipients = new com.google.gerrit.server.mail.MailUtil.MailRecipients(); if ((magicBranch) != null) { recipients.add(magicBranch.getMailRecipients()); } recipients.add(getRecipientsFromFooters(accountResolver, ps, footerLines)); recipients.remove(me); ins.setReviewers(recipients.getReviewers()).<START_MOD>setExtraCC(recipients.getCcOnly()).<END_MOD>insert(); created = true; <START_MOD>if (((magicBranch) != null) && (magicBranch.isSubmit())) { <END_MOD>submit(<START_MOD>projectControl.controlFor<END_MOD>(change)<START_MOD>, <END_MOD>ps); } }
<START_MOD>public void setReportBugText(java.lang.String u) { reportBugText = u; }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupName> iterateAllEntities() throws com.google.gwtorm.server.OrmException { return delegate.iterateAllEntities(); }<END_MOD>
@java.lang.Override public <START_MOD>AccountGroup<END_MOD>.<START_MOD>Id<END_MOD> createEntry(final com.google.gerrit.reviewdb.client.AccountGroup.<START_MOD>NameKey<END_MOD> <START_MOD>key<END_MOD>) throws java.lang.Exception {<START_MOD> final com.google.gerrit.reviewdb.client.AccountGroupName r;<END_MOD> final com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); try { r = db.<START_MOD>accountGroupNames<END_MOD>().<START_MOD>get<END_MOD>(<START_MOD>key<END_MOD>); if (r <START_MOD>!=<END_MOD> <START_MOD>null<END_MOD>) { return r.<START_MOD>getId<END_MOD>(); } else { return null; } } finally { db.close(); } }
<START_MOD>public static boolean isLabel(java.lang.String varName) { return (varName.startsWith(com.google.gerrit.common.data.AccessSection.Permission.LABEL)) && ((com.google.gerrit.common.data.AccessSection.Permission.LABEL.length()) < (varName.length())); }<END_MOD>
public static void replyError(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, int statusCode, java.lang.String msg, com.google.gerrit.extensions.restapi.CacheControl c, @com.google.gerrit.common.Nullable java.lang.Throwable err) throws java.io.IOException { if (err != null) { com.google.gerrit.util.http.RequestUtil.setErrorTraceAttribute(req, err); } com.google.gerrit.httpd.restapi.RestApiServlet.configureCaching(req, res, null, null, c); res.setStatus(statusCode); com.google.gerrit.httpd.restapi.RestApiServlet.replyText(req, res, msg); <START_MOD>com.google.gerrit.httpd.RequestContextFilter.RequestMetrics m = ((com.google.gerrit.httpd.RequestContextFilter.RequestMetrics) (req.getAttribute(RequestUtil.ATTRIBUTE_METRICS))); m.failures.increment(java.lang.String.valueOf(statusCode)); <END_MOD>}
<START_MOD>@java.lang.Override public void close() { super.close(); repo.close(); }<END_MOD>
<START_MOD>@java.lang.Override protected void doGetJson(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { java.util.Map<java.lang.String, ?> json_data = buildData(req); renderJson(req, res, json_data, json_data.getClass()); }<END_MOD>
<START_MOD>public java.util.List<java.util.Map<java.lang.String, java.lang.String>> replace(java.lang.String input) { java.util.List<java.util.Map<java.lang.String, java.lang.String>> parsed = com.google.common.collect.Lists.newArrayList(); java.util.regex.Matcher m = pattern.matcher(input); int last = 0; while (m.find()) { com.google.gitiles.CommentLinkInfo.addText(parsed, input.substring(last, m.start())); com.google.gitiles.CommentLinkInfo.addLink(parsed, m.group(0), m.group(0)); last = m.end(); } com.google.gitiles.CommentLinkInfo.addText(parsed, input.substring(last)); return parsed; }<END_MOD>
private void parseUpdate(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canUpdate()) { if ((com.google.gerrit.server.git.ReceiveCommits.isHead(cmd)) && (!(isCommit(cmd)))) { return; } validateNewCommits(ctl, cmd); } else { <START_MOD>if (GitRepositoryManager.REF_CONFIG.equals(ctl.getRefName())) { rp.sendMessage(( are not allowed to perform this operation. + ( changes can only be pushed by project owners +   also have 'Push' rights } else { rp.sendMessage((( are not allowed to perform this operation. +   push into this reference you need 'Push' rights. + (<END_MOD>com.google.gerrit.server.git.ReceiveCommits.<START_MOD>MESSAGE_FOOTER))); } com.google.gerrit.server.git.ReceiveCommits.<END_MOD>reject(cmd, <START_MOD>(( user   + (ctl.getCurrentUser().getUserName())) +   can<END_MOD> not update the reference as a fast forward } }
<START_MOD>private java.lang.String shortenSubject(java.lang.String subject) { if ((subject.length()) < 73) { return subject; } else { return (subject.substring(0, 69)) + "..."; } }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gerrit.server.project.ProjectState next() { com.google.gerrit.server.project.ProjectState n = next; if (n == null) { throw new java.util.NoSuchElementException(); } next = null; com.google.gerrit.reviewdb.client.Project.NameKey parentName = n.getProject().getParent(); if ((parentName != null) && (seen.add(parentName))) { com.google.gerrit.server.project.ProjectState p = cache.get(parentName); if (p != null) { next = p; return n; } } if (seen.add(allProjectsName)) { next = cache.get(allProjectsName); } return n; }<END_MOD>
protected void add(final com.google.gerrit.extensions.api.changes.RecipientType rt, final com.google.gerrit.reviewdb.client.UserIdentity who) { add(rt, who<START_MOD>, false<END_MOD>); }
@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); <START_MOD>cfgInjector = createCfgInjector(); <END_MOD>limitThreads(); if ((version) == null) { version = com.google.gerrit.server.index.ChangeSchemas.getLatest().getVersion(); } com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); index = sysInjector.getInstance(com.google.gerrit.server.index.IndexCollection.class).getSearchIndex(); index.markReady(false); index.deleteAll(); int result = indexAll(); index.markReady(true); sysManager.stop(); dbManager.stop(); return result; }
@org.junit.Test public void byLabelGroup() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); createAccount("user2"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo"); java.lang.String g1 = createGroup("group1", "Administrators"); java.lang.String g2 = createGroup("group2", "Administrators"); gApi.groups().id(g1).addMembers("user1"); gApi.groups().id(g2).addMembers("user2"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo), user1); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change1.getId().get()).current().review(new com.google.gerrit.extensions.api.changes.ReviewInput().label("Code-Review", 1)); requestContext.setContext(newRequestContext(userId)); assertQuery("label:Code-Review=+1,group1", change1); assertQuery(<START_MOD>"label:Code-Review=+1,account=group1"<END_MOD>, change1); assertQuery("label:Code-Review=+1,user=user1", change1); assertQuery("label:Code-Review=+1,user=user2"); assertQuery(<START_MOD>"label:Code-Review=+1,account=group2"<END_MOD>); }
boolean canPerform(com.google.gerrit.reviewdb.ApprovalCategory.Id actionId, short level) { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> groups = getCurrentUser().getEffectiveGroups(); int val = java.lang.Integer.MIN_VALUE; java.util.List<com.google.gerrit.reviewdb.RefRight> allRights = new java.util.ArrayList<com.google.gerrit.reviewdb.RefRight>(); allRights.addAll(getLocalRights(actionId)); if (actionId.canInheritFromWildProject()) { allRights.addAll(getInheritedRights(actionId)); } java.util.<START_MOD>SortedMap<java.lang.String, com.google.gerrit.server.project.RefControl.RefRightsForPattern> perPatternRights = com.google.gerrit.server.project.RefControl.sortedRightsByPattern<END_MOD>(allRights<START_MOD>); for (java.lang.String pattern : perPatternRights.keySet()) { val = java.lang.Math.max(val<END_MOD>, <START_MOD>perPatternRights.get(pattern).allowedValueForRef(groups)); if ((val >= level) || (perPatternRights.get(pattern).containsExclusive()<END_MOD>)) { <START_MOD>return val >= level<END_MOD>; } } <START_MOD>return val >= level; <END_MOD>}
@org.junit.Test public void testInalidPathSeparator() { for (char c : com.google.gerrit.httpd.<START_MOD>GitwebConfigTest<END_MOD>.SOME_INVALID_CHARACTERS.toCharArray()) { assertFalse(( character accepted:   + c), com.google.gerrit.httpd.<START_MOD>GitwebConfig<END_MOD>.isValidPathSeparator(c)); } }
<START_MOD>@java.lang.Override public void record(F1 field1, long value, java.util.concurrent.TimeUnit unit) { total.record(value, unit); forceCreate(field1).record(value, unit); }<END_MOD>
private com.google.gerrit.reviewdb.client.PatchLineComment newComment() { com.google.gerrit.reviewdb.client.PatchLineComment newComment = new com.google.gerrit.reviewdb.client.PatchLineComment(new com.google.gerrit.reviewdb.client.PatchLineComment.Key(comment.getKey().getParentKey(), null), comment.getLine(), com.google.gerrit.client.Gerrit.getUserAccount().getId(), comment.getKey().get()<START_MOD>, com.google.gerrit.server.util.TimeUtil.nowTs()<END_MOD>); newComment.setSide(comment.getSide()); return newComment; }
private static void checkConfig(org.eclipse.jgit.lib.Config cfg) { java.util.Set<java.lang.String> keys = new java.util.HashSet<>(); for (com.google.gerrit.server.notedb.NoteDbTable t : com.google.gerrit.server.notedb.NoteDbTable.values()) { keys.add(t.key()); } for (java.lang.String t : cfg.getSubsections(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB)) { checkArgument(keys.contains(t.toLowerCase()),   NoteDb table: %s t); for (java.lang.String key : cfg.getNames(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB, t)) { java.lang.String lk = key.toLowerCase(); checkArgument(((lk.equals(com.google.gerrit.server.notedb.ConfigNotesMigration.WRITE)) || (lk.equals(com.google.gerrit.server.notedb.ConfigNotesMigration.READ))),   NoteDb key: %s.%s t, key); } boolean write = cfg.getBoolean(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB, t, com.google.gerrit.server.notedb.ConfigNotesMigration.WRITE, false); boolean read = cfg.getBoolean(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB, t, com.google.gerrit.server.notedb.ConfigNotesMigration.READ, false); <START_MOD>boolean readOnly = cfg.getBoolean(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB, t, com.google.gerrit.server.notedb.ConfigNotesMigration.READ, false); if (read) { <END_MOD>checkArgument(write,   have write enabled when read enabled: %s t); } <START_MOD>if (readOnly) { checkArgument((read && write),   have read & write enabled when readOnly set: %s t); <END_MOD>}<START_MOD> } }<END_MOD>
<START_MOD>com.google.gerrit.extensions.auth.oauth.OAuthUserInfo login(java.lang.String username, java.lang.String secret) throws com.google.gerrit.server.account.AccountException;<END_MOD>
<START_MOD>@java.lang.Override protected java.util.List<? extends com.google.gerrit.reviewdb.client.Comment> parse(byte[] raw, int offset) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.util.MutableInteger p = new org.eclipse.jgit.util.MutableInteger(); p.value = offset; if (com.google.gerrit.server.notedb.ChangeRevisionNote.isJson(raw, p.value)) { com.google.gerrit.server.notedb.RevisionNoteData data = parseJson(noteUtil, raw, p.value); if ((status) == (PatchLineComment.Status.PUBLISHED)) { pushCert = data.pushCert; } else { pushCert = null; } return data.comments; } if ((status) == (PatchLineComment.Status.PUBLISHED)) { pushCert = com.google.gerrit.server.notedb.ChangeRevisionNote.parsePushCert(changeId, raw, p); trimLeadingEmptyLines(raw, p); } else { pushCert = null; } return noteUtil.parseNote(raw, p, changeId); }<END_MOD>
@org.junit.Test public void GetDiffPreferences() throws java.lang.Exception { com.google.gerrit.extensions.client.DiffPreferencesInfo result = <START_MOD>gApi.config().server().getDefaultDiffPreferences<END_MOD>(); assertPrefsEqual(result, com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()); }
<START_MOD>private boolean shouldPost(com.google.gerrit.server.events.ProjectEvent projectEvent, java.lang.String[] wantedEvents) { if ((wantedEvents.length) == 0) { return true; } for (java.lang.String type : wantedEvents) { if (com.google.common.base.Strings.isNullOrEmpty(type)) { continue; } if (type.equals(projectEvent.getType())) { return true; } } return false; }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gerrit.reviewdb.client.Change update(com.google.gerrit.reviewdb.client.Change c) { if ((c.getStatus().isOpen()) && (ps.getId().equals(c.currentPatchSetId()))) { c.setMergeable(mergeable); c.setLastSha1MergeTested(com.google.gerrit.server.change.Mergeable.toRevId(ref)); } return null; }<END_MOD>
private void displayReadOnly(com.google.gerrit.common.data.ProjectAccess access) { this.access = access; <START_MOD>java.util.Map<java.lang.String, java.lang.String> allCapabilities = new java.util.HashMap<java.lang.String, java.lang.String>(); for (final com.google.gerrit.client.config.CapabilityInfo c : com.google.gerrit.client.rpc.Natives.asList(capabilityMap.values())) { allCapabilities.put(c.id(), c.name()); } this.access.setCapabilities(allCapabilities); <END_MOD>accessEditor.setEditing(false); com.google.gwt.user.client.ui.UIObject.setVisible(editTools, ((!(access.getOwnerOf().isEmpty())) || (access.canUpload()))); edit.setEnabled(((!(access.getOwnerOf().isEmpty())) || (access.canUpload()))); cancel1.setVisible(false); com.google.gwt.user.client.ui.UIObject.setVisible(commitTools, false); driver.edit(access); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.restapi.BinaryResult> apply(com.google.gerrit.server.change.ChangeEditResource rsrc) throws java.io.IOException { try { com.google.gerrit.server.edit.ChangeEdit edit = rsrc.getChangeEdit(); return com.google.gerrit.extensions.restapi.Response.ok(fileContentUtil.getContent(rsrc.getControl().getProjectControl().getProjectState(), (base ? org.eclipse.jgit.lib.ObjectId.fromString(edit.getBasePatchSet().getRevision().get()) : edit.getEditCommit()), rsrc.getPath()<START_MOD>, null<END_MOD>)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException rnfe) { return com.google.gerrit.extensions.restapi.Response.none(); } }
<START_MOD>public static com.google.gwt.safehtml.shared.SafeUri getAddonScriptUri(java.lang.String mode) { return net.codemirror.addon.AddonInjector.addonUris.get(mode); }<END_MOD>
@org.junit.Test public void <START_MOD>lookUpByEmail<END_MOD>() throws java.lang.Exception { assertEmail(<START_MOD>accounts<END_MOD>.<START_MOD>byEmail<END_MOD>(admin.email), admin); java.lang.String email = "foo.bar@example.com"; externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(ExternalId.Key.parse("foo:bar"), admin.id, email)); assertEmail(<START_MOD>accounts<END_MOD>.<START_MOD>byEmail<END_MOD>(email), admin); assertThat(<START_MOD>accounts<END_MOD>.<START_MOD>byEmail<END_MOD>(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(<START_MOD>accounts<END_MOD>.<START_MOD>byEmail<END_MOD>(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(<START_MOD>accounts<END_MOD>.<START_MOD>byEmail<END_MOD>("non-existing@example.com")).isEmpty(); }
public com.google.gerrit.server.notedb.ChangeNotes create(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.<START_MOD>Project.NameKey project, com.google.gerrit.reviewdb.client.<END_MOD>Change<START_MOD>.Id<END_MOD> <START_MOD>changeId<END_MOD>) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes(db, repoManager, migration, allUsersProvider, <START_MOD>project, changeId<END_MOD>).load(); }
private void preDisplay(final com.google.gerrit.common.data.PatchSetPublishDetail pubDetail, final com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.PatchSetPublishDetail> origCb) { <START_MOD>Gerrit<END_MOD>.<START_MOD>projectConfigInfoCache<END_MOD>.<START_MOD>get<END_MOD>(pubDetail.getChange().getProject()<START_MOD>, <END_MOD>new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.projects.<START_MOD>ConfigInfoCache.Value<END_MOD>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.projects.<START_MOD>ConfigInfoCache.Value<END_MOD> result) { commentLinkProcessor = result.<START_MOD>getCommentLinkProcessor<END_MOD>(); display(pubDetail); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { origCb.onFailure(caught); } }); }
<START_MOD>public boolean hasAnyAccount() throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { for (org.eclipse.jgit.lib.Ref ref : repo.getRefDatabase().getRefs(RefNames.REFS_USERS).values()) { if (RefNames.REFS_USERS_DEFAULT.equals(ref.getName())) { continue; } return true; } return false; } }<END_MOD>
@java.lang.Override protected void onLoad() { super.onLoad(); if ((patchSetDetail) == null) { Util.DETAIL_SVC.patchSetDetail(idSideB, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.data.PatchSetDetail>() { @java.lang.Override public void onSuccess(com.google.gerrit.common.data.PatchSetDetail result) { patchSetDetail = result; if ((fileList) == null) { fileList = new com.google.gerrit.client.changes.PatchTable(); fileList.<START_MOD>setSkipDeleted(settingsPanel.skipDeleted.getValue()); fileList.setSkipUncommented(settingsPanel.skipUncommented.getValue()); fileList.<END_MOD>display(result); patchIndex = fileList.indexOf(patchKey); } refresh(true); } }); } else { refresh(true); } }
public void <START_MOD>setEmailingOptionsStrategy<END_MOD>(<START_MOD>com.google.gerrit.reviewdb.client.AccountGeneralPreferences.EmailingOptionsStrategy<END_MOD> <START_MOD>strategy<END_MOD>) { <START_MOD>this.emailingOptionsStrategy<END_MOD> = <START_MOD>strategy.name()<END_MOD>; }
@com.google.gwtorm.client.Relation<START_MOD>(id = 0)<END_MOD> com.google.gwtorm.data.PersonAccess people();
<START_MOD>private <IN extends com.google.gerrit.reviewdb.client.Comment, OUT extends com.google.gerrit.extensions.common.CommentInfo> java.util.Map<java.lang.String, java.util.List<OUT>> format(java.lang.Iterable<IN> l, java.lang.Class<OUT> clazz) throws com.google.gwtorm.server.OrmException { java.util.Map<java.lang.String, java.util.List<OUT>> out = new java.util.TreeMap<>(); com.google.gerrit.server.account.AccountLoader accountLoader = (fillAccounts) ? accountLoaderFactory.create(true) : null; for (IN c : l) { OUT o = toCommentInfo(c, clazz, accountLoader); java.util.List<OUT> list = out.get(o.path); if (list == null) { list = new java.util.ArrayList<>(); out.put(o.path, list); } o.path = null; list.add(o); } for (java.util.List<OUT> list : out.values()) { java.util.Collections.sort(list, com.google.gerrit.server.CommentsUtil.COMMENT_INFO_ORDER); } if (accountLoader != null) { accountLoader.fill(); } return out; }<END_MOD>
@com.google.gwt.uibinder.client.UiHandler("deleteRevision") void onDeleteRevision(@java.lang.SuppressWarnings("unused") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteDraftRevision())) { com.google.gerrit.client.change.ChangeActions.delete(changeId, <START_MOD>project, <END_MOD>revision, publish, deleteRevision); } }
@java.lang.Override public java.util.List<com.google.gerrit.reviewdb.client.Change> setValue(java.util.<START_MOD>Collection<END_MOD><com.google.gerrit.reviewdb.client.Change> value) { throw new java.lang.UnsupportedOperationException(); }
public static java.util.<START_MOD>SortedMap<java.lang.String, com.google.gerrit.server.project.RefControl.RefRightsForPattern> sortedRightsByPattern(java.util.<END_MOD>List<com.google.gerrit.reviewdb.RefRight> <START_MOD>actionRights) { java.util.SortedMap<java.lang.String, com.google.gerrit.server.project.RefControl.RefRightsForPattern> rights = new java.util.TreeMap<java.lang.String, com.google.gerrit.server.project.RefControl.RefRightsForPattern>(com.google.gerrit.server.project.RefControl.DESCENDING_SORT); for (<END_MOD>com.google.gerrit.reviewdb.RefRight<START_MOD> right :<END_MOD> actionRights) { <START_MOD>if (rights.containsKey(right.getRefPattern())) { rights.get(right.getRefPattern()).addRight(right); } else { com.google.gerrit.server.project.RefControl.RefRightsForPattern patternRights<END_MOD> = new <START_MOD>com.google.gerrit.server.project.RefControl.RefRightsForPattern(); patternRights.addRight(right); rights.put(right<END_MOD>.getRefPattern()<START_MOD>, patternRights);<END_MOD> } } return <START_MOD>rights; }<END_MOD>
public final org.eclipse.jgit.notes.NoteMap commitNewNotes(org.eclipse.jgit.notes.NoteMap notes, java.lang.String notesBranch, org.eclipse.jgit.lib.PersonIdent commitAuthor, java.lang.String commitMessage) throws <START_MOD>com.google.gerrit.server.git.LockFailureException, <END_MOD>java.io.IOException { this.overwrite = false; commitNotes(notes, notesBranch, commitAuthor, commitMessage); org.eclipse.jgit.notes.NoteMap newlyCreated = org.eclipse.jgit.notes.NoteMap.newEmptyMap(); for (org.eclipse.jgit.notes.Note n : notes) { if (((base) == null) || (!(base.contains(n)))) { newlyCreated.set(n, n.getData()); } } return newlyCreated; }
<START_MOD>public boolean isEmpty() { return (size()) == 0; }<END_MOD>
<START_MOD>@org.junit.Test public void pushAccountConfigToUserBranchIsRejected() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, ((com.google.gerrit.reviewdb.client.RefNames.refsUsers(admin.id)) + ":userRef")); allUsersRepo.reset("userRef"); org.eclipse.jgit.lib.Config ac = new org.eclipse.jgit.lib.Config(); try (org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(allUsersRepo.getRepository(), AccountConfig.ACCOUNT_CONFIG, getHead(allUsersRepo.getRepository()).getTree())) { assertThat(tw).isNotNull(); ac.fromText(new java.lang.String(allUsersRepo.getRevWalk().getObjectReader().open(tw.getObjectId(0), com.google.gerrit.acceptance.api.accounts.OBJ_BLOB).getBytes(), java.nio.charset.StandardCharsets.UTF_8)); } ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_STATUS, "OOO"); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo, "Update account config", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(RefNames.REFS_USERS_SELF); r.assertErrorStatus("account update not allowed"); }<END_MOD>
@java.lang.Override public com.google.gerrit.server.patch.PatchList get(com.google.gerrit.server.patch.PatchListKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.patch.PatchListNotAvailableException { try { return fileCache.get(key, fileLoaderFactory.create(key, project)); } catch (java.util.concurrent.ExecutionException <START_MOD>e) { PatchListLoader.log.warn(( computing   + key), e); throw new com.google.gerrit.server.patch.PatchListNotAvailableException(e); } catch (com.google.common.util.concurrent.UncheckedExecutionException e) { PatchListLoader.log.warn(( computing   + key), e); if ((e.getCause()) instanceof<END_MOD> org.eclipse.jgit.errors.LargeObjectException<START_MOD>) {<END_MOD> throw new com.google.gerrit.server.patch.PatchListNotAvailableException(e<START_MOD>); } throw e; } }<END_MOD>
<START_MOD>private void init_sendemail(final org.eclipse.jgit.lib.FileBasedConfig cfg, final org.eclipse.jgit.lib.FileBasedConfig sec) { header("Email Delivery"); final java.lang.String D = "sendemail"; java.lang.String def_port = "(default)"; java.lang.String smtpserver = askdefault("localhost", "SMTP server hostname"); java.lang.String port = askdefault(def_port, "SMTP server port"); com.google.gerrit.server.mail.SmtpEmailSender.Encryption enc = askdefault(Encryption.NONE, "SMTP encryption"); java.lang.String username = askdefault(null, "Application username"); java.lang.String password = (username != null) ? password("%s's password", username) : null; set(cfg, D, "smtpServer", smtpserver); set(cfg, D, "smtpServerPort", (port != def_port ? port : null)); set(cfg, D, "smtpEncryption", enc, Encryption.NONE); set(cfg, D, "smtpUser", username); set(sec, D, "smtpPass", password); }<END_MOD>
<START_MOD>private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean notifyOnCommentAdded) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("notify-on-comment-added", true)).thenReturn(notifyOnCommentAdded); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); }<END_MOD>
protected <START_MOD>com.google.gerrit.reviewdb.client.<END_MOD>Project.NameKey createProject(java.lang.String nameSuffix) throws com.google.gerrit.extensions.restapi.RestApiException { return createProject(nameSuffix, null); }
@org.junit.Test public void testNestedQuotes1() { java.lang.String comment =   > > prior >   > next java.util.List<com.google.gerrit.server.mail.send.CommentFormatter.Block> result = com.google.gerrit.server.mail.send.CommentFormatter.parse(comment); assertThat(result).hasSize(1); <START_MOD>assertQuoteBlock<END_MOD>(result, 0, <START_MOD>2); assertQuoteBlock(result.get(0).blocks, 0, 1); assertBlock(result.get(0).blocks.get(0).blocks, 0, <END_MOD>BlockType.<START_MOD>PARAGRAPH<END_MOD>, <START_MOD>"prior");<END_MOD> <START_MOD>assertBlock(result.get(0).blocks,<END_MOD> <START_MOD>1, BlockType.PARAGRAPH, "next\n");<END_MOD> }
public static java.lang.String nameEmail(com.google.gerrit.client.account.AccountInfo info) { java.lang.String name = info.name(); if ((name == null) || (name.trim().isEmpty())) { name = com.google.gerrit.client.Gerrit.<START_MOD>getServerInfo<END_MOD>().<START_MOD>user().anonymousCowardName<END_MOD>(); } java.lang.StringBuilder b = new java.lang.StringBuilder().append(name); if ((info.email()) != null) { b.append( <").append(info.email()).append("> } else if ((info._account_id()) > 0) { b.append( (").append(info._account_id()).append(") } return b.toString(); }
@java.lang.Override public com.google.gerrit.server.config.CacheResource parse(com.google.gerrit.server.config.ConfigResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.<START_MOD>AuthException, com.google.gerrit.extensions.restapi.<END_MOD>ResourceNotFoundException { <START_MOD>final com.google.gerrit.server.CurrentUser user = self.get(); if (user instanceof com.google.gerrit.server.AnonymousUser) { <END_MOD>throw new com.google.gerrit.extensions.restapi.<START_MOD>AuthException( required } else if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.<END_MOD>ResourceNotFoundException(<START_MOD>); } if (!(((com.google.gerrit.server.IdentifiedUser) (user)).getCapabilities().canViewCaches())) { throw new com.google.gerrit.extensions.restapi.AuthException( allowed to view caches } java.lang.String cacheName = <END_MOD>id<START_MOD>.get(); java.lang.String pluginName = "gerrit"; int i = cacheName.indexOf('.'); if (i != (-1)) { pluginName = cacheName.substring(0, i); cacheName = ((cacheName.length()) > (i + 1)) ? cacheName.substring((i + 1)) : ""; } com.google.inject.Provider<com.google.common.cache.Cache<?, ?>> cacheProvider = cacheMap.byPlugin(pluginName).get(cacheName); if (cacheProvider == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.config.CacheResource(pluginName, cacheName, cacheProvider); }<END_MOD>
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.CommitsCollection.log.error(((( look up change for commit   + (commit.name())) +   in   + project), e); } return isReachableFrom(state, repo, commit, repo.getAllRefs()); }
@java.lang.Override public org.eclipse.jgit.lib.Ref getRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.getRef(name); if (ref == null) { return null; } <START_MOD>try { <END_MOD>return <START_MOD>perm<END_MOD>.filter(com.google.common.collect.ImmutableMap.of(ref.getName(), ref), <START_MOD>git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()<END_MOD>).get(ref.getName()); }<START_MOD> catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } }<END_MOD>
@org.junit.Before public void setup() { when(<START_MOD>remote<END_MOD>.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(<START_MOD>remote<END_MOD>.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES<START_MOD>); when(remote.getUrl()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL<END_MOD>); when(processor.process()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.CONTENT); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, <START_MOD>remote<END_MOD>, processor); }
@java.lang.Override public com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>restapi<END_MOD>.<START_MOD>Response<?><END_MOD> <START_MOD>apply<END_MOD>(com.google.gerrit.<START_MOD>server<END_MOD>.<START_MOD>change<END_MOD>.<START_MOD>ChangeResource<END_MOD> <START_MOD>rsrc, com.google.gerrit.server.change.PublishDraftPatchSet.Input input<END_MOD>)<START_MOD> throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException<END_MOD> { return <START_MOD>publish.apply(rsrc.getControl().getCurrentUser(),<END_MOD> <START_MOD>rsrc.getChange(),<END_MOD> <START_MOD>rsrc.getChange().currentPatchSetId(), null<END_MOD>); }
@java.lang.Override protected void configure() { install(new com.googlesource.gerrit.plugins.xdocs.XDocLoader.Module()); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.ProjectWebLink.class).to(com.googlesource.gerrit.plugins.xdocs.XDocWebLink.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.BranchWebLink.class).to(com.googlesource.gerrit.plugins.xdocs.XDocWebLink.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.<START_MOD>PatchWebLink.class).to(com.googlesource.gerrit.plugins.xdocs.XDocPatchWebLink.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.<END_MOD>TopMenu.class).toInstance(new com.google.gerrit.extensions.webui.TopMenu() { @java.lang.Override public java.util.List<com.googlesource.gerrit.plugins.xdocs.MenuEntry> getEntries() { java.lang.StringBuilder url = new java.lang.StringBuilder(); url.append("/plugins/"); url.append(pluginName); url.append(XDocServlet.PATH_PREFIX); url.append("${projectName}/README.md"); return com.google.common.collect.Lists.newArrayList(new com.googlesource.gerrit.plugins.xdocs.MenuEntry(com.google.gerrit.extensions.webui.GerritTopMenu.PROJECTS, com.google.common.collect.Lists.newArrayList(new com.googlesource.gerrit.plugins.xdocs.MenuItem("Readme", url.toString())))); } }); }
@org.junit.Test public void preconditionsFail() throws java.lang.Exception { java.util.List<com.google.gerrit.reviewdb.client.Change.Id> cs = com.google.common.collect.ImmutableList.of(new com.google.gerrit.reviewdb.client.Change.Id(1)); java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> ps = com.google.common.collect.ImmutableList.of(new com.google.gerrit.reviewdb.client.Project.NameKey("p")); assertMigrationException( rebuild without noteDb.changes.write=true ( b) -> b, NoteDbMigrator::rebuild); assertMigrationException( set both changes and projects ( b) -> b.setChanges(cs).setProjects(ps), ( m) -> { }); assertMigrationException( set changes or projects during auto-migration ( b) -> b.setChanges(cs), NoteDbMigrator::migrate); assertMigrationException( set changes or projects during auto-migration ( b) -> b.setProjects(ps), NoteDbMigrator::migrate); <START_MOD>assertMigrationException( gap must be non-negative ( b) -> b.setSequenceGap((-1)), ( m) -> { }); <END_MOD>setNotesMigrationState(<START_MOD>com.google.gerrit.acceptance.server.notedb<END_MOD>.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY); assertMigrationException( has already progressed past the endpoint of the   mode state ( b) -> b.setTrialMode(true), NoteDbMigrator::migrate); setNotesMigrationState(<START_MOD>com.google.gerrit.acceptance.server.notedb<END_MOD>.READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY); assertMigrationException( force rebuild changes; NoteDb is already the primary storage for some changes ( b) -> b.setForceRebuild(true), NoteDbMigrator::migrate); }
@java.lang.Override public com.google.gerrit.<START_MOD>extensions.client.AccountGeneralPreferencesInfo apply(com.google.gerrit.<END_MOD>server.account.<START_MOD>AccountResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException( to administrator } com.google.gerrit.reviewdb.client.Account.Id accountId = rsrc.getUser().getAccountId(); return readFromGit ? com.google.gerrit.server.account.<END_MOD>GetPreferences.<START_MOD>readFromGit(accountId, gitMgr, allUsersName, null) : readFromDb(accountId);<END_MOD> }
final org.eclipse.jgit.lib.ObjectId apply(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.lib.ObjectId curr) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (isEmpty()) { return null; } org.eclipse.jgit.lib.ObjectId z = org.eclipse.jgit.lib.ObjectId.zeroId(); org.eclipse.jgit.lib.CommitBuilder cb = applyImpl(rw, ins, curr); if (cb == null) { result = z; return z; } <START_MOD>else if (cb == (NO_OP_UPDATE)) { return null; } <END_MOD>cb.setAuthor(authorIdent); cb.setCommitter(new org.eclipse.jgit.lib.PersonIdent(serverIdent, when)); if (!(curr.equals(z))) { cb.setParentId(curr); } else { cb.setParentIds(); } if ((cb.getTreeId()) == null) { if (curr.equals(z)) { cb.setTreeId(com.google.gerrit.server.notedb.AbstractChangeUpdate.emptyTree(ins)); } else { org.eclipse.jgit.revwalk.RevCommit p = rw.parseCommit(curr); cb.setTreeId(p.getTree()); } } result = ins.insert(cb); return result; }
<START_MOD>@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { if ((regex) == null) { regex = "^*.*$"; } printAll(); }<END_MOD>
<START_MOD>public <END_MOD>com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListKey toPatchListKey() { return new com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListKey(oldId, parentNum, newId, whitespace, PatchListKey.Algorithm.OPTIMIZED_DIFF); }
@java.lang.Override protected void onLoad() { super.onLoad(); <START_MOD>com.google.gerrit.client.rpc.CallbackGroup cbs = new com.google.gerrit.client.rpc.CallbackGroup(); com.google.gerrit.client.config.ConfigServerApi.capabilities().get(cbs.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.config.CapabilityMap>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.config.CapabilityMap result) { capabilityMap = result; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); <END_MOD>Util.PROJECT_SVC.projectAccess(getProjectKey(), <START_MOD>cbs.addGwtjsonrpc(<END_MOD>new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.ProjectAccess>(this) { @java.lang.Override public void preDisplay(com.google.gerrit.common.data.ProjectAccess access) { displayReadOnly(access); } })<START_MOD>)<END_MOD>; savedPanel = ACCESS; }
<START_MOD>static byte[] toByteArray(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String name, @com.google.gerrit.common.Nullable org.eclipse.jgit.lib.ObjectId id) { byte[] a = ((((project.toString()) + ':') + name) + ':').getBytes(java.nio.charset.StandardCharsets.UTF_8); byte[] b = new byte[(a.length) + (org.eclipse.jgit.lib.Constants.OBJECT_ID_STRING_LENGTH)]; java.lang.System.arraycopy(a, 0, b, 0, a.length); firstNonNull(id, org.eclipse.jgit.lib.ObjectId.zeroId()).copyTo(b, a.length); return b; }<END_MOD>
<START_MOD>@org.junit.Test public void pushWithPrivateByDefaultEnabled() throws java.lang.Exception { assume().that(isPrivateByDefault()).isTrue(); assertThat(createChange().getChange().change().isPrivate()).isEqualTo(true); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.google.gerrit.reviewdb.server.ReviewDb db = sysInjector.getInstance(com.google.gerrit.reviewdb.server.ReviewDb.class); com.google.gerrit.server.git.GitRepositoryManager mgr = sysInjector.getInstance(com.google.gerrit.server.git.GitRepositoryManager.class); repo = mgr.openRepository(project); try { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().all()) { org.eclipse.jgit.lib.Ref r = refs.get(c.currentPatchSetId().toRefName()); if (r != null) { byId.put(r.getObjectId(), new com.google.gerrit.server.query.change.ChangeData(c)); } } walk(); } finally { repo.close(); org.eclipse.jgit.lib.RepositoryCache.close(repo); } return null; }<END_MOD>
@java.lang.Override public void onSuccess(com.google.gerrit.client.projects.<START_MOD>ConfigInfoCache.Value<END_MOD> result) { commentLinkProcessor = result.<START_MOD>getCommentLinkProcessor<END_MOD>(); contentTable.setCommentLinkProcessor(commentLinkProcessor); }
<START_MOD>private void renderRow(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, com.google.gerrit.client.change.RelatedChanges.ChangeAndCommit info) { sb.openSpan().setStyleName(FileTable.R.css().pointer()).closeSpan(); sb.openSpan().addStyleName(Gerrit.RESOURCES.css().relatedChangesSubject()); java.lang.String url = url(info); if (url != null) { sb.openAnchor().setAttribute("href", url); if (url.startsWith("#")) { sb.setAttribute("onclick", ((((com.google.gerrit.client.change.RelatedChangesTab.OPEN) + "(event,\"") + (url.substring(1))) + "\")")); } if (showBranches) { sb.append(info.branch()).append(": "); } sb.append(info.commit().subject()); sb.closeAnchor(); } else { sb.append(info.commit().subject()); } sb.closeSpan(); sb.openSpan(); com.google.gerrit.client.GitwebLink gw = com.google.gerrit.client.Gerrit.getGitwebLink(); if ((gw != null) && ((!(info.has_change_number())) || (!(info.has_revision_number())))) { sb.addStyleName(Gerrit.RESOURCES.css().relatedChangesGitweb()); sb.setAttribute("title", gw.getLinkName()); sb.append('\u25cf'); } else if (((connected) != null) && (!(connected.contains(info.commit().commit())))) { sb.addStyleName(Gerrit.RESOURCES.css().relatedChangesIndirect()); sb.setAttribute("title", Resources.C.indirectAncestor()); sb.append('~'); } else if (((info.has_current_revision_number()) && (info.has_revision_number())) && ((info._current_revision_number()) != (info._revision_number()))) { sb.addStyleName(Gerrit.RESOURCES.css().relatedChangesNotCurrent()); sb.setAttribute("title", Util.C.notCurrent()); sb.append('\u25cf'); } sb.closeSpan(); }<END_MOD>
<START_MOD>private static void checkNothingHappens(com.google.gerrit.common.data.LabelFunction function) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.MAY); assertThat(myLabel.appliedBy).isNull(); }<END_MOD>
@java.lang.Override public void create() throws com.google.gerrit.extensions.restapi.RestApiException { try { changeEditsPost.apply(changeResource, null); } catch (java.io.IOException | com.google.gwtorm.server.OrmException <START_MOD>| com.google.gerrit.server.permissions.PermissionBackendException <END_MOD>e) { throw new com.google.gerrit.extensions.restapi.RestApiException( create change edit e); } }
public java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> formatList2(java.util.List<java.util.List<com.google.gerrit.server.query.change.ChangeData>> in) throws com.google.gwtorm.server.OrmException<START_MOD>, java.io.IOException<END_MOD> { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> all = com.google.common.collect.Iterables.concat(in); com.google.gerrit.server.query.change.ChangeData.ensureChangeLoaded(db, all); if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { com.google.gerrit.server.query.change.ChangeData.ensureAllPatchSetsLoaded(db, all); } else { com.google.gerrit.server.query.change.ChangeData.ensureCurrentPatchSetLoaded(db, all); } if (has(com.google.gerrit.server.change.REVIEWED)) { ensureReviewedLoaded(all); } com.google.gerrit.server.query.change.ChangeData.ensureCurrentApprovalsLoaded(db, all); java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> res = com.google.common.collect.Lists.newArrayListWithCapacity(in.size()); java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.change.ChangeJson.ChangeInfo> out = com.google.common.collect.Maps.newHashMap(); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> changes : in) { res.add(toChangeInfo(out, changes)); } accountLoader.fill(); return res; }
private void startPoller() { if ((com.google.gerrit.client.Gerrit.isSignedIn()) && ( < (com.google.gerrit.client.Gerrit.<START_MOD>getServerInfo<END_MOD>().<START_MOD>change().updateDelay<END_MOD>()))) { updateCheck = new com.google.gerrit.client.change.UpdateCheckTimer(this); updateCheck.schedule(); handlers.add(com.google.gerrit.client.ui.UserActivityMonitor.addValueChangeHandler(updateCheck)); } }
private static java.util.List<java.util.Map<java.lang.String, java.lang.Object>> getRefsSoyData(org.eclipse.jgit.lib.RefDatabase refdb, com.google.gitiles.GitilesView view, java.lang.String prefix, com.google.common.collect.Ordering<org.eclipse.jgit.lib.Ref> ordering, @javax.annotation.Nullable org.eclipse.jgit.lib.Ref headLeaf, int limit) throws java.io.IOException { java.util.Collection<org.eclipse.jgit.lib.Ref> refs = refdb.getRefs(prefix).values(); refs = ordering.leastOf(refs, (limit >   ? com.google.common.primitives.Ints.saturatedCast((limit + 1L)) : refs.size())); java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = com.google.common.collect.Lists.newArrayListWithCapacity(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs) { java.lang.String name = ref.getName().substring(prefix.length()); org.eclipse.jgit.lib.Ref refForName = refdb.<START_MOD>findRef<END_MOD>(name); if (refForName != null) { boolean needPrefix = !(ref.getName().equals(refForName.getName())); java.util.Map<java.lang.String, java.lang.Object> value = com.google.common.collect.Maps.newHashMapWithExpectedSize(3); value.put("url", com.google.gitiles.GitilesView.revision().copyFrom(view).setRevision(com.google.gitiles.Revision.unpeeled((needPrefix ? ref.getName() : name), ref.getObjectId())).toUrl()); value.put("name", name); if (headLeaf != null) { value.put("isHead", headLeaf.equals(ref)); } result.add(value); } } return result; }
public void doChangeRestoredHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.Account account, final java.lang.String reason, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.ChangeRestoredEvent event = new com.google.gerrit.server.events.ChangeRestoredEvent(); event.change = eventFactory.asChangeAttribute(change); event.restorer = eventFactory.asAccountAttribute(account); event.reason = reason; fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, "--change", event.change.id); addArg(args, "--change-url", event.change.url); addArg(args, "--project", event.change.project); addArg(args, "--branch", event.change.branch); addArg(args, "--topic", event.change.topic); addArg(args, <START_MOD>"--ref", event.patchSet.ref); addArg(args, <END_MOD>"--restorer", getDisplayName(account)); addArg(args, "--reason", (reason == null ? "" : reason)); runHook(change.getProject(), changeRestoredHook, args); }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error( to log add accounts to <START_MOD>account<END_MOD> event e); } } }
<START_MOD>@java.lang.Override public boolean markReviewed(com.google.gerrit.reviewdb.client.PatchSet.Id psId, com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.String path) throws com.google.gwtorm.server.OrmException { try (java.sql.Connection con = java.sql.DriverManager.getConnection(url);java.sql.PreparedStatement stmt = con.prepareStatement(("INSERT INTO ACCOUNT_PATCH_REVIEWS " + ("(ACCOUNT_ID, CHANGE_ID, PATCH_SET_ID, FILE_NAME) VALUES " + "(?, ?, ?, ?)")))) { stmt.setInt(1, accountId.get()); stmt.setInt(2, psId.getParentKey().get()); stmt.setInt(3, psId.get()); stmt.setString(4, path); stmt.executeUpdate(); return true; } catch (java.sql.SQLException e) { com.google.gwtorm.server.OrmException ormException = com.google.gerrit.server.change.H2AccountPatchReviewStore.convertError("insert", e); if (ormException instanceof com.google.gwtorm.server.OrmDuplicateKeyException) { return false; } throw ormException; } }<END_MOD>
void appendHeader(final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m) { m.openTr(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_ICON_HEADER); m.addStyleName("LeftMostCell"); m.nbsp(); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_ICON_HEADER); m.nbsp(); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_DATA_HEADER); m.append(Util.C.patchTableColumnName()); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_DATA_HEADER); m.append(Util.C.patchTableColumnComments()); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_DATA_HEADER); m.setAttribute("colspan", 3); m.append(Util.C.patchTableColumnDiff()); m.closeTd(); m.<START_MOD>openTd(); m.setStyleName(com.google.gerrit.client.changes.S_ICON_HEADER); m.append(Util.C.reviewed()); m.closeTd(); m.<END_MOD>closeTr(); }
private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> toActionMap(com.google.gerrit.server.change.RevisionResource rsrc) { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> out = new java.util.LinkedHashMap<>(); if (<START_MOD>!(<END_MOD>rsrc.getControl().getCurrentUser().isIdentifiedUser())<START_MOD>) { return out; } if (!(rsrc.getPatchSet().getId().equals(rsrc.getChange().currentPatchSetId()))) { return out; }<END_MOD> com.google.inject.Provider<com.google.gerrit.server.CurrentUser> userProvider = com.google.inject.util.Providers.of(rsrc.getControl().getCurrentUser()); for (com.google.gerrit.extensions.webui.UiAction.Description d : com.google.gerrit.server.extensions.webui.UiActions.from(revisions, rsrc, userProvider)) { out.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } return out; }
private com.google.gerrit.server.account.AccountSshKey createSshKey(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String keyFile) throws java.io.IOException { java.nio.file.Path p = java.nio.file.Paths.get(keyFile); if (!(java.nio.file.Files.exists(p))) { throw new java.io.IOException(java.lang.String.format( add public SSH key: %s is not a file keyFile)); } java.lang.String content = new java.lang.String(java.nio.file.Files.readAllBytes(p), java.nio.charset.StandardCharsets.UTF_8); return <START_MOD>com.google.gerrit.server.account.AccountSshKey.create(<END_MOD>new com.google.gerrit.server.account.AccountSshKey.Id(id, 1), content); }
@java.lang.Override public void updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx) throws java.lang.Exception { changeKind = changeKindCache.getChangeKind(projectControl.getProjectState(), ctx.getRepository(), priorCommit, commit); if (checkMergedInto) { org.eclipse.jgit.lib.Ref mergedInto = findMergedInto(ctx, dest.get(), commit); if (mergedInto != null) { mergedByPushOp = mergedByPushOpFactory.create(requestScopePropagator, patchSetId, mergedInto.getName()); } } <START_MOD>if (updateRef) { if ((updateRefCommand) == null) { ctx.addRefUpdate(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commit, patchSetId.toRefName())); } else { ctx.addRefUpdate(updateRefCommand); } } }<END_MOD>
private com.google.gerrit.server.git.BatchUpdate.ChangeContext newChangeContext(com.google.gerrit.reviewdb.client.Change.Id id) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChanges.get(id); if (c == null) { c = db.changes().get(id); } com.google.gerrit.server.notedb.ChangeNotes notes = changeNotesFactory.createForNew(<START_MOD>db, <END_MOD>c); com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx = new com.google.gerrit.server.git.BatchUpdate.ChangeContext(changeControlFactory.controlFor(notes, user), new com.google.gerrit.server.git.BatchUpdateReviewDb(db)); if (notesMigration.readChanges()) { ctx.getNotes().load(); } return ctx; }
@com.google.gwtorm.client.Relation<START_MOD>(id = 19)<END_MOD> com.google.gerrit.reviewdb.ChangeAccess changes();
public boolean canCherryPick(final com.google.gerrit.server.git.MergeSorter mergeSorter, final org.eclipse.jgit.lib.Repository repo, final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final org.eclipse.jgit.revwalk.RevWalk rw, final com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.MergeException { if (mergeTip == null) { return true; } if ((toMerge.getParentCount()) == 0) { return false; } if ((toMerge.getParentCount()) == 1) { try { org.eclipse.jgit.merge.ThreeWayMerger m = newThreeWayMerger(repo, createDryRunInserter(repo)); m.setBase(toMerge.getParent(0)); return m.merge(<START_MOD>false, <END_MOD>mergeTip, toMerge); } catch (java.io.IOException e) { throw new com.google.gerrit.server.git.MergeException(( merge   + (toMerge.name())), e); } } return (canFastForward(mergeSorter, mergeTip, rw, toMerge)) || (canMerge(mergeSorter, repo, mergeTip, toMerge)); }
@java.lang.Override protected void preDisplay(java.lang.String content) { <START_MOD>setShowTabs(prefs.showTabs()); <END_MOD>initEditor(content); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.<START_MOD>restapi.<END_MOD>group.MemberResource resource, com.google.gerrit.server.<START_MOD>restapi.<END_MOD>group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.<START_MOD>restapi.<END_MOD>group.AddMembers.Input in = new com.google.gerrit.server.<START_MOD>restapi.<END_MOD>group.AddMembers.Input(); in._oneMember = resource.getMember().getAccountId().toString(); return delete.get().apply(resource, in); }
<START_MOD>@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo get() { return CommentInfoMapper.INSTANCE.apply(getDraft.apply(draft)); }<END_MOD>
<START_MOD>private void cleanUpReferences(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.reviewdb.client.Change.Id id, java.util.List<com.google.gerrit.reviewdb.client.PatchSet> patchSets) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { for (com.google.gerrit.reviewdb.client.PatchSet ps : patchSets) { accountPatchReviewStore.get().clearReviewed(ps.getId()); } starredChangesUtil.unstarAll(ctx.getChange().getProject(), id); }<END_MOD>
<START_MOD>public static java.util.Map<java.lang.String, java.lang.String> getUserUrlAliases() { return com.google.gerrit.client.Gerrit.myUrlAliases; }<END_MOD>
<START_MOD>private com.google.gerrit.common.data.SubmitTypeRecord typeError(java.lang.String err, java.lang.Exception e) { if (logErrors) { com.google.gerrit.server.project.SubmitRuleEvaluator.log.error(err, e); return com.google.gerrit.server.project.SubmitRuleEvaluator.defaultTypeError(); } else { return com.google.gerrit.server.project.SubmitRuleEvaluator.createTypeError(err); } }<END_MOD>
private static java.util.Map<java.lang.String, java.lang.String> getParameters(javax.servlet.http.HttpServletRequest req) { final java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<>(); for (java.lang.String pair : <START_MOD>com.google.common.base.Splitter.on(com.google.gerrit.httpd.gitweb.GitwebServlet.QUERY_SPLIT_PATTERN).split(<END_MOD>req.getQueryString())) { final int eq = pair.indexOf('='); if ( < eq) { java.lang.String name = pair.substring(0, eq); java.lang.String value = pair.substring((eq + 1)); name = com.google.gerrit.extensions.restapi.Url.decode(name); value = com.google.gerrit.extensions.restapi.Url.decode(value); params.put(name, value); } } return params; }
<START_MOD>public void deleteComment(com.google.gerrit.reviewdb.client.PatchLineComment c) { verifyComment(c); com.google.common.collect.Table<com.google.gerrit.reviewdb.client.PatchSet.Id, java.lang.String, com.google.gerrit.reviewdb.client.PatchLineComment> draftsForSide = ((c.getSide()) == ((short) (0))) ? draftNotes.getDraftBaseComments() : draftNotes.getDraftPsComments(); boolean draftExisted = draftsForSide.containsColumn(c.getKey().get()); if (draftExisted) { deleteComments.add(c); } }<END_MOD>
<START_MOD>@org.junit.Test public void deleteAbandonedChange() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result changeResult = createChange(); java.lang.String changeId = changeResult.getChangeId(); gApi.changes().id(changeId).abandon(); gApi.changes().id(changeId).delete(); assertThat(query(changeId)).isEmpty(); }<END_MOD>
<START_MOD>private java.lang.String readAbandonMessage(org.eclipse.jgit.lib.Config cfg) { java.lang.String abandonMessage = cfg.getString(com.google.gerrit.server.config.ChangeCleanupConfig.SECTION, null, com.google.gerrit.server.config.ChangeCleanupConfig.KEY_ABANDON_MESSAGE); if (com.google.common.base.Strings.isNullOrEmpty(abandonMessage)) { return com.google.gerrit.server.config.ChangeCleanupConfig.DEFAULT_ABANDON_MESSAGE; } return abandonMessage; }<END_MOD>
<START_MOD>void visibleProjects(com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.common.data.VisibleProjectsInfo> callback);<END_MOD>
<START_MOD>public java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getGroups() { return groups; }<END_MOD>
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server<START_MOD>.restapi<END_MOD>.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list.get(); }
private void deliverToMembers(com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List matching, com.google.gerrit.reviewdb.client.AccountGroup.UUID startUUID) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = args.db.get(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen = new java.util.HashSet<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> q = new java.util.ArrayList<>(); seen.add(startUUID); q.add(startUUID); while (!(q.isEmpty())) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = q.remove(((q.size()) - 1)); com.google.gerrit.common.data.GroupDescription.Basic group = args.groupBackend.get(uuid); if (!(com.google.common.base.Strings.isNullOrEmpty(group.getEmailAddress()))) { matching.emails.add(new com.google.gerrit.server.mail.Address(group.getEmailAddress())); continue; } com.google.gerrit.reviewdb.client.AccountGroup ig = com.google.gerrit.common.data.GroupDescriptions.toAccountGroup(group); if (ig == null) { continue; } args.groups.getMembers(db, ig.<START_MOD>getGroupUUID<END_MOD>()).forEachOrdered(matching.accounts::add); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID m : args.groupIncludes.subgroupsOf(uuid)) { if (seen.add(m)) { q.add(m); } } } }
<START_MOD>public com.google.gerrit.server.git.WorkQueue.Executor createQueue(int poolsize, java.lang.String prefix, int threadPriority) { final com.google.gerrit.server.git.WorkQueue.Executor r = new com.google.gerrit.server.git.WorkQueue.Executor(poolsize, prefix); if (threadPriority != (java.lang.Thread.NORM_PRIORITY)) { final java.util.concurrent.ThreadFactory parent = r.getThreadFactory(); r.setThreadFactory(( task) -> { final java.lang.Thread t = parent.newThread(task); t.setPriority(java.lang.Thread.MIN_PRIORITY); return t; }); } r.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); r.setExecuteExistingDelayedTasksAfterShutdownPolicy(true); queues.add(r); return r; }<END_MOD>
public final void addLineClass(net.codemirror.lib.CodeMirror.LineHandle line, net.codemirror.lib.CodeMirror.LineClassWhere where, java.lang.String className) { addLineClassNative(line, where.<START_MOD>value<END_MOD>, className); }
<START_MOD>@java.lang.Override public com.google.gerrit.common.data.ProjectAccess call() throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { pc = open(); com.google.gerrit.server.git.ProjectConfig config = new com.google.gerrit.server.git.ProjectConfig(); com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName); try { config.load(md); if (config.updateGroupNames(groupCache)) { md.setMessage("Update group names\n"); if (config.commit(md)) { projectCache.evict(config.getProject()); pc = open(); } } else if (((config.getRevision()) != null) && (!(config.getRevision().equals(pc.getProjectState().getConfig().getRevision())))) { projectCache.evict(config.getProject()); pc = open(); } } finally { md.close(); } java.util.List<com.google.gerrit.common.data.AccessSection> local = new java.util.ArrayList<com.google.gerrit.common.data.AccessSection>(); java.util.Set<java.lang.String> ownerOf = new java.util.HashSet<java.lang.String>(); for (com.google.gerrit.common.data.AccessSection section : config.getAccessSections()) { com.google.gerrit.server.project.RefControl rc = pc.controlForRef(section.getRefPattern()); if (rc.isOwner()) { local.add(section); ownerOf.add(section.getRefPattern()); } else if (rc.isVisible()) { local.add(section); } } final com.google.gerrit.common.data.ProjectAccess detail = new com.google.gerrit.common.data.ProjectAccess(); detail.setRevision(config.getRevision().name()); detail.setLocal(local); detail.setInherited(java.util.Collections.<com.google.gerrit.common.data.AccessSection>emptyList()); detail.setOwnerOf(ownerOf); return detail; }<END_MOD>
protected <START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gerrit<END_MOD>.<START_MOD>client.diff.CommentBoxManager<END_MOD> <START_MOD>getWidgetManager<END_MOD>() { return <START_MOD>widgetManager<END_MOD>; }
public static com.google.gerrit.extensions.events.LifecycleListener start(java.nio.file.Path sitePath) throws java.<START_MOD>nio.file.NoSuchFileException<END_MOD> { java.nio.file.Path logdir = com.google.gerrit.common.FileUtil.mkdirsOrDie(new com.google.gerrit.server.config.SitePaths(sitePath).logs_dir,   create log directory if (com.google.gerrit.server.util.SystemLog.shouldConfigure()) { com.google.gerrit.pgm.util.GarbageCollectionLogFile.initLogSystem(logdir); } return new com.google.gerrit.extensions.events.LifecycleListener() { @java.lang.Override public void start() { } @java.lang.Override public void stop() { org.apache.log4j.LogManager.getLogger(GarbageCollection.LOG_NAME).removeAllAppenders(); } }; }
public final com.google.gerrit.<START_MOD>extensions<END_MOD>.client.<START_MOD>AccountGeneralPreferencesInfo<END_MOD>.TimeFormat timeFormat() { java.lang.String s = timeFormatRaw(); return s != null ? com.google.gerrit.<START_MOD>extensions<END_MOD>.client.<START_MOD>AccountGeneralPreferencesInfo<END_MOD>.TimeFormat.valueOf(s) : null; }
private void assertPushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String groupRefName, java.lang.String expectedErrorOnUpdate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, RefNames.REFS_GROUPNAMES, Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + ":groupRef")); repo.reset("groupRef"); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo,   <START_MOD>account<END_MOD> config GroupConfig.GROUP_CONFIG_FILE,   content if (expectedErrorOnUpdate != null) { r.assertErrorStatus(expectedErrorOnUpdate); } else { r.assertOkStatus(); } }
public com.google.gerrit.server.project.ChangeControl controlFor(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.server.project.NoSuchChangeException<START_MOD>, com.google.gwtorm.server.OrmException<END_MOD> { try { return projectControl.controlFor(notes.getProjectName(), user).controlFor(notes); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new com.google.gerrit.server.project.NoSuchChangeException(notes.getChangeId(), e); } }
public void testUnblockRange() { <START_MOD>com.google.gerrit.server.project.Util.grantLabel<END_MOD>(local, ((LABEL) + "Code-Review"), (-1), (+1), <START_MOD>com.google.gerrit.server.project.Util.ANONYMOUS<END_MOD>, "refs/heads/*").setBlock(); <START_MOD>com.google.gerrit.server.project.Util.grantLabel<END_MOD>(local, ((LABEL) + "Code-Review"), (-2), (+2), <START_MOD>com.google.gerrit.server.project.Util.DEVS<END_MOD>, "refs/heads/*"); com.google.gerrit.server.project.ProjectControl u = <START_MOD>util.<END_MOD>user(<START_MOD>local, com.google.gerrit.server.project.Util.DEVS<END_MOD>); com.google.gerrit.common.data.PermissionRange range = u.controlForRef("refs/heads/master").getRange(((LABEL) + "Code-Review")); assertTrue( can vote -2 range.contains((-2))); assertTrue( can vote +2 range.contains(2)); }
@com.google.inject.Provides @com.google.inject.Singleton com.google.gerrit.httpd.raw.FontsServlet getFontsServlet(@com.google.inject.name.Named(com.google.gerrit.httpd.raw.StaticModule.CACHE) com.google.common.cache.Cache<java.nio.file.Path, com.google.gerrit.httpd.raw.ResourceServlet.Resource> cache) throws java.io.IOException { return new com.google.gerrit.httpd.raw.FontsServlet(cache, getPaths().<START_MOD>builder<END_MOD>); }
@java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec(com.googlecode.prolog_cafe.lang.Prolog engine) throws com.googlecode.prolog_cafe.exceptions.PrologException { engine.cont = cont; engine.setB0(); com.googlecode.prolog_cafe.lang.Term a1 = arg1.dereference(); if (a1 instanceof com.googlecode.prolog_cafe.lang.VariableTerm) { throw new com.googlecode.prolog_cafe.exceptions.PInstantiationException(this, 1); } if (!(a1 instanceof com.googlecode.prolog_cafe.lang.SymbolTerm)) { throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException(this, 1, "symbol", a1); } java.util.regex.Pattern regex = java.util.regex.Pattern.compile(a1.name()); engine.r1 = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(regex); engine.r2 = arg2; engine.r3 = arg3; engine.r4 = arg4; com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchList pl = StoredValues.PATCH_LIST.get(engine); java.util.Iterator<com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListEntry> iter = pl.getPatches().iterator(); engine.r5 = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(iter); return engine.jtry5(gerrit.PRED_commit_delta_4.commit_delta_check, gerrit.PRED_commit_delta_4.commit_delta_next); }
<START_MOD>public java.lang.Long getSizeDelta() { return sizeDelta; }<END_MOD>
<START_MOD>@com.google.common.annotations.VisibleForTesting static com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefState> parseStates(java.lang.Iterable<byte[]> states) { com.google.gerrit.server.index.change.StalenessChecker.RefState.check((states != null), null); com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefState> result = com.google.common.collect.HashMultimap.create(); for (byte[] b : states) { com.google.gerrit.server.index.change.StalenessChecker.RefState.check((b != null), null); java.lang.String s = new java.lang.String(b, java.nio.charset.StandardCharsets.UTF_8); java.util.List<java.lang.String> parts = com.google.common.base.Splitter.on(':').splitToList(s); com.google.gerrit.server.index.change.StalenessChecker.RefState.check(((((parts.size()) == 3) && (!(parts.get(0).isEmpty()))) && (!(parts.get(1).isEmpty()))), s); result.put(new com.google.gerrit.reviewdb.client.Project.NameKey(parts.get(0)), com.google.gerrit.server.index.change.StalenessChecker.RefState.create(parts.get(1), parts.get(2))); } return result; }<END_MOD>
protected void setApiHeaders(javax.servlet.http.<START_MOD>HttpServletRequest req, javax.servlet.http.<END_MOD>HttpServletResponse res, java.lang.String contentType) <START_MOD>throws java.io.IOException <END_MOD>{ if (!(com.google.common.base.Strings.isNullOrEmpty(contentType))) { res.setContentType(contentType); } res.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); res.setHeader(HttpHeaders.CONTENT_DISPOSITION, "attachment"); <START_MOD>com.google.gitiles.GitilesAccess access = getAccess(req); java.lang.String[] allowOrigin = access.getConfig().getStringList("gitiles", null, "allowOriginRegex"); if ((allowOrigin.length) > 0) { java.lang.String origin = req.getHeader(HttpHeaders.ORIGIN); java.util.regex.Pattern allowOriginPattern = java.util.regex.Pattern.compile(com.google.common.base.Joiner.on("|").skipNulls().join(allowOrigin)); if ((!((origin == null) || (origin.isEmpty()))) && (allowOriginPattern.matcher(origin).matches())) { <END_MOD>res.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, <START_MOD>origin); } } else { res.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, <END_MOD>"*"); <START_MOD>} <END_MOD>setCacheHeaders(res); }
public void setHintText(java.lang.String text) { if (text == null) { if ((hintText) == null) { return; } hintFocusHandler.removeHandler(); hintFocusHandler = null; hintBlurHandler.removeHandler(); hintBlurHandler<START_MOD> = null; keyPressHandler.removeHandler(); keyPressHandler<END_MOD> = null; hintText = null; focusHint(); return; } if ((hintText) == null) { hintText = text; hintFocusHandler = addFocusHandler(new com.google.gwt.event.dom.client.FocusHandler() { @java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { <START_MOD>focusHint(); isFocused = <END_MOD>true; } }); hintBlurHandler = addBlurHandler(new com.google.gwt.event.dom.client.BlurHandler() { @java.lang.Override public void onBlur(com.google.gwt.event.dom.client.BlurEvent event) { <START_MOD>blurHint(); isFocused = false; } }); keyPressHandler = addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(final com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getCharCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE)) { <END_MOD>setFocus(false); } }<START_MOD> }<END_MOD>); } else { focusHint(); hintText = text; } if (!(isFocused)) { blurHint(); } }
@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId()<START_MOD>, project<END_MOD>)); }
@org.junit.Test public void reindexPermissions() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount groupOwner = accountCreator.user2(); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name("group"); in.members = java.util.Collections.singleton(groupOwner).stream().map(( u) -> u.id.toString()).collect(java.util.stream.Collectors.toList()); in.visibleToAll = true; com.google.gerrit.extensions.common.GroupInfo group = gApi.groups().create(in).get(); setApiUser(admin); gApi.groups().id(group.id).index(); setApiUser(groupOwner); gApi.groups().id(group.id).index(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage( allowed to index <START_MOD>account<END_MOD> gApi.groups().id(group.id).index(); }
<START_MOD>@java.lang.Override public java.util.Optional<com.google.gerrit.extensions.restapi.BinaryResult> getFile(java.lang.String filePath) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); }<END_MOD>
public static com.google.gerrit.server.project.SubmitRuleOptions.Builder builder() { return com.google.gerrit.server.project.<START_MOD>SubmitRuleOptions<END_MOD>.<START_MOD>DEFAULT_OPTIONS.toBuilder<END_MOD>(); }
public void onFailure(java.lang.Throwable caught) { <START_MOD>enableOnFailure<END_MOD>.setEnabled(true); }
public com.google.gerrit.server.git.PluginProjectConfig getPluginConfig(java.lang.String pluginName) { com.google.common.collect.LinkedListMultimap<java.lang.String, java.lang.String> pluginConfig = pluginConfigs.get(pluginName); if (pluginConfig == null) { pluginConfig = com.google.common.collect.LinkedListMultimap.create(); pluginConfigs.put(pluginName, pluginConfig); } return new com.google.gerrit.server.git.PluginProjectConfig(pluginName, <START_MOD>this, <END_MOD>pluginConfig); }
@java.lang.Override protected void onInitUI() { super.onInitUI(); setPageTitle(Util.C.projectListTitle()); createProjectLinkPanel = new com.google.gwt.user.client.ui.VerticalPanel(); createProjectLinkPanel.setStyleName(Gerrit.RESOURCES.css().createProjectLink()); createProjectLinkPanel.add(new com.google.gerrit.client.ui.Hyperlink(Util.C.headingCreateProject(), com.google.gerrit.common.PageLinks.ADMIN_CREATE_PROJECT)); add(createProjectLinkPanel); projects = new com.google.gerrit.client.ui.ProjectsTable() { @java.lang.Override protected void onOpenRow(final int row) { com.google.gwt.user.client.History.newItem(link(getRowItem(row))); } private java.lang.String link(final com.google.gerrit.<START_MOD>client.projects.ProjectInfo<END_MOD> item) { return com.google.gerrit.client.Dispatcher.toProjectAdmin(item.getNameKey(), ProjectScreen.INFO); } @java.lang.Override protected void populate(final int row, final com.google.gerrit.<START_MOD>client.projects.ProjectInfo<END_MOD> k) { table.setWidget(row, 1, new com.google.gerrit.client.ui.Hyperlink(k.getName(), link(k))); table.setText(row, 2, k.getDescription()); setRowItem(row, k); } }; projects.setSavePointerId(PageLinks.ADMIN_PROJECTS); add(projects); }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { try { com.google.gerrit.server.config.PluginConfig cfg = cfgFactory.getFromProjectConfig(receiveEvent.project.getNameKey(), pluginName); <START_MOD>if (!(com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.doCheckSubmodules(<END_MOD>cfg<START_MOD>))<END_MOD>) { return java.util.Collections.emptyList(); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(receiveEvent.project.getNameKey())) { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.performValidation(repo, receiveEvent.commit); if (!(messages.isEmpty())) { throw new com.google.gerrit.server.git.validators.CommitValidationException( submodules messages); } } } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new com.google.gerrit.server.git.validators.CommitValidationException( to check on submodules e); } return java.util.Collections.emptyList(); }
<START_MOD>private void assertGroupOwnerPermissions(java.lang.String groupUuid, java.lang.String expectedOwnerUuid) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.access.PermissionInfo newPermissionInfo = new com.google.gerrit.extensions.api.access.PermissionInfo(null, null); newPermissionInfo.rules = com.google.common.collect.ImmutableMap.of(expectedOwnerUuid, new com.google.gerrit.extensions.api.access.PermissionRuleInfo(com.google.gerrit.extensions.api.access.PermissionRuleInfo.Action.ALLOW, false)); ProjectAccessInfo access = gApi.projects().name(allUsersName.get()).access(); java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsGroups(AccountGroup.UUID.parse(groupUuid)); assertThat(access.local).containsKey(groupRef); assertThat(access.local.get(groupRef).permissions).containsExactly(Permission.PUSH, newPermissionInfo, Permission.READ, newPermissionInfo); }<END_MOD>
<START_MOD>private com.google.gerrit.reviewdb.client.Account parse(org.eclipse.jgit.lib.Config cfg) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, registeredOn); account.setActive(cfg.getBoolean(com.google.gerrit.server.account.AccountConfig.ACCOUNT, null, com.google.gerrit.server.account.AccountConfig.KEY_ACTIVE, true)); account.setFullName(cfg.getString(com.google.gerrit.server.account.AccountConfig.ACCOUNT, null, com.google.gerrit.server.account.AccountConfig.KEY_FULL_NAME)); java.lang.String preferredEmail = cfg.getString(com.google.gerrit.server.account.AccountConfig.ACCOUNT, null, com.google.gerrit.server.account.AccountConfig.KEY_PREFERRED_EMAIL); account.setPreferredEmail(preferredEmail); if (((emailValidator) != null) && (!(emailValidator.isValid(preferredEmail)))) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG, java.lang.String.format("Invalid preferred email: %s", preferredEmail))); } account.setStatus(cfg.getString(com.google.gerrit.server.account.AccountConfig.ACCOUNT, null, com.google.gerrit.server.account.AccountConfig.KEY_STATUS)); return account; }<END_MOD>
<START_MOD>@org.junit.Test public void numericChangeIdReturnsChange() throws java.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi = gApi.changes().id(changeInfo._number); assertThat(cApi.get().changeId).isEqualTo(changeInfo.changeId); }<END_MOD>
private static com.google.gerrit.common.data.PermissionRule deny(<START_MOD>com.google.gerrit.reviewdb.client.Project.NameKey project, <END_MOD>com.google.gerrit.common.data.GroupReference group) { com.google.gerrit.common.data.PermissionRule rule = com.google.gerrit.server.schema.Schema_53.rule(<START_MOD>project, <END_MOD>group); rule.setDeny(); return rule; }
private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gwtorm.server.OrmException { referenceUpdated.fire(project.getNameKey(), cmd); com.google.gerrit.reviewdb.client.Branch.NameKey branchKey = new com.google.gerrit.reviewdb.client.Branch.NameKey(project.getNameKey(), cmd.getRefName()); com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.SubmoduleSubscription> submoduleSubscriptions = dbProvider.get().submoduleSubscriptions().bySuperProject(branchKey); dbProvider.get().submoduleSubscriptions().delete(submoduleSubscriptions); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo update(com.google.gerrit.extensions.api.changes.DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putDraft.apply(draft, in).value(); } catch (<START_MOD>java.lang.Exception e) { <END_MOD>com.google.gerrit.server.<START_MOD>api<END_MOD>.<START_MOD>changes<END_MOD>.<START_MOD>DraftApiImpl<END_MOD>.<START_MOD>throwIfPossible(<END_MOD>e)<START_MOD>;<END_MOD> throw new com.google.gerrit.extensions.restapi.RestApiException( update draft e); } }
@com.google.gwtorm.client.Query( name != ? AND age > ? ORDER BY name DESC com.google.gwtorm.client.ResultSet<com.google.gwtorm.data.<START_MOD>Person<END_MOD>> notPerson(com.google.gwtorm.data.<START_MOD>Person<END_MOD>.Key key, int age) throws com.google.gwtorm.client.OrmException;
@java.lang.Override public com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.CommitResource parse(com.google.gerrit.server<START_MOD>.restapi<END_MOD>.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { org.eclipse.jgit.lib.ObjectId objectId; try { objectId = org.eclipse.jgit.lib.ObjectId.fromString(id.get()); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(parent.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(objectId); rw.parseBody(commit); if (!(canRead(parent.getProjectState(), repo, commit))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseBody(rw.parseCommit(commit.getParent(i))); } return new com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.CommitResource(parent, commit); } catch (org.eclipse.jgit.errors.MissingObjectException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
<START_MOD>public static org.eclipse.jgit.lib.ObjectId writeLabels(org.eclipse.jgit.lib.Repository repo, java.util.SortedSet<java.lang.String> labels) throws java.io.IOException { try (org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId id = oi.insert(Constants.OBJ_BLOB, com.google.common.base.Joiner.on("\n").join(labels).getBytes(java.nio.charset.StandardCharsets.UTF_8)); oi.flush(); return id; } }<END_MOD>
<START_MOD>public static boolean hasNonTrivialSortKeyAfter(com.google.gerrit.server.index.Schema<com.google.gerrit.server.query.change.ChangeData> schema, com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) { com.google.gerrit.server.query.change.SortKeyPredicate after = ((com.google.gerrit.server.query.change.SortKeyPredicate) (find(p, com.google.gerrit.server.query.change.SortKeyPredicate.class, "sortkey_after"))); return (after != null) && ((after.getMaxValue(schema)) > 0); }<END_MOD>
<START_MOD>static void simple(com.google.gerrit.client.changes.ChangeInfo change, com.google.gerrit.client.changes.ChangeInfo.ActionInfo action, com.google.gerrit.client.rpc.RestApi api) { final com.google.gerrit.reviewdb.client.Change.Id id = change.legacy_id(); com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb = new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject msg) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(id)); } }; if ("PUT".equalsIgnoreCase(action.method())) { api.put(com.google.gwt.core.client.JavaScriptObject.createObject(), cb); } else if ("DELETE".equalsIgnoreCase(action.method())) { api.delete(cb); } else { api.post(com.google.gwt.core.client.JavaScriptObject.createObject(), cb); } }<END_MOD>
<START_MOD>private void assertCommitMessageUpdatedMessage(com.google.gerrit.reviewdb.client.Change change) throws java.lang.Exception { assertChangeMessage(change, "Commit message was updated"); }<END_MOD>
@java.lang.Override public void onAddMembers(com.google.gerrit.server.audit.group.GroupMemberAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.<START_MOD>DbGroupAuditListener<END_MOD>.toAccountGroupMemberAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForMembersEvent( log add accounts to group event performed by user event, e); } }
<START_MOD>@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> projects(java.lang.String name) throws com.google.gerrit.server.query.QueryParseException { if (!(com.google.gerrit.server.query.change.ChangeQueryBuilder.schema(args.indexes).hasField(ChangeField.PROJECTS))) { throw new com.google.gerrit.server.query.QueryParseException("Unsupported operator: projects"); } return new com.google.gerrit.server.query.change.ProjectPrefixPredicate(name); }<END_MOD>
private static com.google.gerrit.common.data.PermissionRule rule(<START_MOD>com.google.gerrit.reviewdb.client.Project.NameKey project, <END_MOD>com.google.gerrit.common.data.GroupReference group) { return new com.google.gerrit.common.data.PermissionRule(<START_MOD>project, <END_MOD>group); }
public com.google.gerrit.server.project.ChangeControl forUser(final com.google.gerrit.server.CurrentUser who) { if (getCurrentUser().equals(who)) { return this; } return new com.google.gerrit.server.project.ChangeControl(<START_MOD>gerritServerConfig, <END_MOD>changeDataFactory, getRefControl().forUser(who), notes); }
<START_MOD>@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.change.CommentResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, java.lang.Exception { com.google.gerrit.server.account.AccountInfo.Loader accountLoader = accountLoaderFactory.create(true); com.google.gerrit.server.change.CommentInfo ci = new com.google.gerrit.server.change.CommentInfo(rsrc.getComment(), accountLoader); accountLoader.fill(); return ci; }<END_MOD>
<START_MOD>@java.lang.Override protected void configure() { boolean configEnableSignedPush = cfg.getBoolean("receive", null, "enableSignedPush", false); boolean havePgp = com.google.gerrit.server.util.BouncyCastleUtil.havePGP(); boolean enableSignedPush = configEnableSignedPush && havePgp; bindConstant().annotatedWith(com.google.gerrit.server.EnableSignedPush.class).to(enableSignedPush); if (configEnableSignedPush && (!havePgp)) { com.google.gerrit.gpg.GpgModule.log.info(("Bouncy Castle PGP not installed; signed push verification is" + " disabled")); } if (!enableSignedPush) { bind(com.google.gerrit.server.api.accounts.GpgApiAdapter.class).to(com.google.gerrit.gpg.GpgModule.NoGpgApi.class); return; } install(new com.google.gerrit.gpg.SignedPushModule()); bind(com.google.gerrit.server.api.accounts.GpgApiAdapter.class).to(com.google.gerrit.gpg.api.GpgApiAdapterImpl.class); factory(GpgKeyApiImpl.Factory.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.gpg.GPG_KEY_KIND); child(com.google.gerrit.gpg.ACCOUNT_KIND, "gpgkeys").to(com.google.gerrit.gpg.server.GpgKeys.class); post(com.google.gerrit.gpg.ACCOUNT_KIND, "gpgkeys").to(com.google.gerrit.gpg.server.PostGpgKeys.class); get(com.google.gerrit.gpg.GPG_KEY_KIND).to(GpgKeys.Get.class); delete(com.google.gerrit.gpg.GPG_KEY_KIND).to(com.google.gerrit.gpg.server.DeleteGpgKey.class); }<END_MOD>
private java.lang.String getStorageDir() { final java.nio.file.Path tmp = java.nio.file.Paths.get(java.lang.System.getProperty("java.io.tmpdir")).resolve(com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } <START_MOD>java.nio.file.Path storageDir = java.util.Optional.ofNullable(cfg.getString(com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.STORAGE_DIR)).map(( path) -> { <END_MOD>if (<START_MOD>path == null) { return defaultDataDir; } return java.nio.file.Paths.get(path); }).get(); if (<END_MOD>!(java.nio.file.Files.isDirectory(<START_MOD>storageDir<END_MOD>))) { try { java.nio.file.Files.createDirectories(<START_MOD>storageDir<END_MOD>); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.log.error( of javamelody data dir [{}] failed. <START_MOD>storageDir<END_MOD>, e); throw new java.lang.RuntimeException(e); } } return <START_MOD>storageDir<END_MOD>.toString(); }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = gcConfig.getScheduleConfig(); java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unused") java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(gcRunner, schedule.get().initialDelay(), schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } }
@org.junit.Test public void remoteUrlUndefinedEventsNotPosted() { eventHandler.onEvent(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_CREATED); verifyZeroInteractions(<START_MOD>processor); verifyZeroInteractions(<END_MOD>postTask); }
<START_MOD>com.google.gerrit.server.change.PostReviewersOp create(com.google.gerrit.server.change.ChangeResource rsrc, java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.project.ChangeControl> reviewers, java.util.Collection<com.google.gerrit.server.mail.Address> reviewersByEmail, com.google.gerrit.extensions.client.ReviewerState state, com.google.gerrit.extensions.api.changes.NotifyHandling notify, com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify);<END_MOD>
<START_MOD>@com.google.inject.Provides @com.google.gerrit.server.GerritPersonIdent org.eclipse.jgit.lib.PersonIdent getServerIdent() { return serverIdent; }<END_MOD>
protected com.google.gerrit.reviewdb.client.Change newChange() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.testutil.TestChanges.newChange(project, changeOwner.getAccountId(<START_MOD>)); db.changes().insert(java.util.Arrays.asList(c<END_MOD>)); com.google.gerrit.server.notedb.ChangeUpdate u = newUpdate(c, changeOwner); u.setChangeId(c.getKey().get()); u.setBranch(c.getDest().get()); u.commit(); return c; }
<START_MOD>public void setStartCh(int sc) { startCh = sc; }<END_MOD>
@java.lang.Override void send(java.lang.String message) { com.google.gerrit.client.changes.ChangeApi.createChange(project, branch, topic, message, base, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId()<START_MOD>, result.projectNameKey()<END_MOD>)); hide(); } }); }
public void begin(<START_MOD>final <END_MOD>java.util.concurrent.Future<?> workerFuture) throws java.util.concurrent.ExecutionException { <START_MOD>begin<END_MOD>(<START_MOD>workerFuture<END_MOD>, <START_MOD>0, null<END_MOD>); }
<START_MOD>static void convertLegacyConfig(org.eclipse.jgit.lib.Config cfg) { for (java.lang.String subsection : cfg.getSubsections(com.google.gerrit.lucene.GerritIndexConfig.SECTION)) { java.lang.Integer v = com.google.common.primitives.Ints.tryParse(subsection); if (v != null) { java.lang.String ready = cfg.getString(com.google.gerrit.lucene.GerritIndexConfig.SECTION, subsection, com.google.gerrit.lucene.GerritIndexConfig.KEY_READY); if (ready != null) { cfg.unset(com.google.gerrit.lucene.GerritIndexConfig.SECTION, subsection, com.google.gerrit.lucene.GerritIndexConfig.KEY_READY); cfg.set(com.google.gerrit.lucene.GerritIndexConfig.indexDirName(ChangeSchemaDefinitions.NAME, v)); } } } }<END_MOD>
<START_MOD>@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse resp) throws java.io.IOException, javax.servlet.ServletException { com.googlesource.gerrit.plugins.lfs.locks.LfsLocksServlet.Action action = new com.googlesource.gerrit.plugins.lfs.locks.LfsLocksServlet.Action(req, resp); java.util.regex.Matcher matcher = com.googlesource.gerrit.plugins.lfs.locks.LfsLocksServlet.LFS_LOCKS_URL.matcher(action.path); if (matcher.matches()) { java.lang.String project = matcher.group(1); java.lang.String lockId = matcher.group(2); if (com.google.common.base.Strings.isNullOrEmpty(lockId)) { createLock(project, action); } else { deleteLock(project, lockId, action); } return; } matcher = com.googlesource.gerrit.plugins.lfs.locks.LfsLocksServlet.LFS_VERIFICATION_URL.matcher(action.path); if (matcher.matches()) { verifyLocks(matcher.group(1), action); } else { action.sendError(com.googlesource.gerrit.plugins.lfs.locks.SC_INTERNAL_SERVER_ERROR, java.lang.String.format("Unsupported path %s was provided", action.path)); } }<END_MOD>
<START_MOD>public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator.Builder setSequenceGap(java.lang.Integer sequenceGap) { this.sequenceGap = sequenceGap; return this; }<END_MOD>
@org.junit.Test public void create() throws java.lang.Exception { for (com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType : com.google.gerrit.acceptance.rest.project.PushTagIT.TagType.values()) { pushTagForExistingCommit(tagType, Status.REJECTED_OTHER_REASON); allowTagCreation(tagType); pushTagForExistingCommit(tagType, Status.OK); pushTagForNewCommit(tagType, Status.REJECTED_OTHER_REASON); } <START_MOD>allowPushOnRefsTags<END_MOD>(); for (com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType : com.google.gerrit.acceptance.rest.project.PushTagIT.TagType.values()) { pushTagForNewCommit(tagType, Status.OK); } }
<START_MOD>void populateBanner(java.util.Map<java.lang.String, java.lang.Object> data, org.pegdown.ast.RootNode nav) { data.put("siteTitle", null); data.put("logoUrl", null); data.put("homeUrl", null); for (java.util.Iterator<org.pegdown.ast.Node> i = nav.getChildren().iterator(); i.hasNext();) { org.pegdown.ast.Node n = i.next(); if (n instanceof org.pegdown.ast.HeaderNode) { org.pegdown.ast.HeaderNode h = ((org.pegdown.ast.HeaderNode) (n)); if ((h.getLevel()) == 1) { data.put("siteTitle", com.google.gitiles.doc.TocSerializer.getText(h)); i.remove(); break; } } } for (org.pegdown.ast.ReferenceNode r : nav.getReferences()) { java.lang.String key = com.google.gitiles.doc.TocSerializer.getText(r); java.lang.String url = r.getUrl(); if ("logo".equalsIgnoreCase(key)) { data.put("logoUrl", url); } else if ("home".equalsIgnoreCase(key)) { if (links.isMarkdown(url)) { url = links.getMarkdownUrl(url); } data.put("homeUrl", url); } } }<END_MOD>
<START_MOD>@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig(); long interval = scheduleConfig.getInterval(); long delay = scheduleConfig.getInitialDelay(); if ((delay == (MISSING_CONFIG)) && (interval == (MISSING_CONFIG))) { com.google.gerrit.server.change.ChangeCleanupRunner.log.info("Ignoring missing changeCleanup schedule configuration"); } else if ((delay < 0) || (interval <= 0)) { com.google.gerrit.server.change.ChangeCleanupRunner.log.warn("Ignoring invalid changeCleanup schedule configuration"); } else { queue.getDefaultQueue().scheduleAtFixedRate(runner, delay, interval, java.util.concurrent.TimeUnit.MILLISECONDS); } }<END_MOD>
protected <START_MOD>com.google.gerrit.reviewdb.client.<END_MOD>Project.NameKey createProject(java.lang.String nameSuffix, com.google.gerrit.reviewdb.client.Project.NameKey parent, com.google.gerrit.extensions.client.SubmitType submitType) throws com.google.gerrit.extensions.restapi.RestApiException { return createProject(nameSuffix, parent, true, submitType); }
<START_MOD>@org.junit.Test public void addReviewerByEmailToReviewableChangeInReviewDbBatch() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isFalse(); addReviewerByEmailToReviewableChangeInReviewDb(batch()); }<END_MOD>
<START_MOD>@org.junit.Test public void blameJson() throws java.lang.Exception { java.lang.String contents1 = "foo\n"; java.lang.String contents2 = "foo\ncontents\n"; org.eclipse.jgit.revwalk.RevCommit c1 = repo.update("master", repo.commit().add("foo", contents1)); org.eclipse.jgit.revwalk.RevCommit c2 = repo.update("master", repo.commit().tick(10).parent(c1).add("foo", contents2)); java.util.Map<java.lang.String, java.util.List<com.google.gitiles.blame.BlameServletTest.RegionJsonData>> result = getBlameJson((("/test/+blame/" + (c2.name())) + "/foo")); assertEquals("regions", com.google.common.collect.Iterables.getOnlyElement(result.keySet())); java.util.List<com.google.gitiles.blame.BlameServletTest.RegionJsonData> regions = result.get("regions"); assertEquals(2, regions.size()); com.google.gitiles.blame.BlameServletTest.RegionJsonData r1 = regions.get(0); assertEquals(1, r1.start); assertEquals(2, r1.end); assertEquals("foo", r1.path); assertEquals(c1.name(), r1.commit); assertEquals("J. Author", r1.author.name); assertEquals("jauthor@example.com", r1.author.email); assertEquals("2009-03-13 17:29:48 -0330", r1.author.time); com.google.gitiles.blame.BlameServletTest.RegionJsonData r2 = regions.get(1); assertEquals(2, r2.start); assertEquals(3, r2.end); assertEquals("foo", r2.path); assertEquals(c2.name(), r2.commit); assertEquals("J. Author", r2.author.name); assertEquals("jauthor@example.com", r2.author.email); assertEquals("2009-03-13 17:29:58 -0330", r2.author.time); }<END_MOD>
<START_MOD>public void testOneColumn() { final com.google.gerrit.sshd.commands.ColumnFormatterTest.PrintWriterComparator comparator = new com.google.gerrit.sshd.commands.ColumnFormatterTest.PrintWriterComparator(); final com.google.gerrit.sshd.commands.ColumnFormatter formatter = new com.google.gerrit.sshd.commands.ColumnFormatter(comparator.getPrintWriter(), "\t"); formatter.addColumn("foo"); formatter.nextLine(); formatter.finish(); comparator.assertEquals("foo\n"); }<END_MOD>
private com.google.gerrit.server.plugins.Plugin runPlugin(java.lang.String name, java.io.File jar, com.google.gerrit.server.plugins.Plugin oldPlugin) throws com.google.gerrit.server.plugins.PluginInstallException { org.eclipse.jgit.storage.file.FileSnapshot snapshot = org.eclipse.jgit.storage.file.FileSnapshot.save(jar); try { com.google.gerrit.server.plugins.Plugin newPlugin = loadPlugin(name, jar, snapshot); boolean reload = ((oldPlugin != null) && (oldPlugin.canReload())) && (newPlugin.canReload()); if ((!reload) && (oldPlugin != null)) { oldPlugin.stop(); running.remove(name); } if (!(newPlugin.isDisabled())) { newPlugin.start(env<START_MOD>, staticDir<END_MOD>); } if (reload) { env.onReloadPlugin(oldPlugin, newPlugin); oldPlugin.stop(); } else if (!(newPlugin.isDisabled())) { env.onStartPlugin(newPlugin); } if (!(newPlugin.isDisabled())) { running.put(name, newPlugin); } else { disabled.put(name, newPlugin); } <START_MOD>if (newPlugin.hasWebUiPlugin()) { com.google.gerrit.common.data.RegisteredWebUiPlugin registerdPlugin = new com.google.gerrit.common.data.RegisteredWebUiPlugin(name, newPlugin.getWebUiPlugin()); registeredWebUiPlugins.add(registerdPlugin); } <END_MOD>broken.remove(name); return newPlugin; } catch (java.lang.Throwable err) { broken.put(name, snapshot); throw new com.google.gerrit.server.plugins.PluginInstallException(err); } }
private com.googlesource.gerrit.plugins.quota.Publisher.<START_MOD>RepoEvent<END_MOD> <START_MOD>createRepoSizeEvent<END_MOD>() throws java.util.concurrent.ExecutionException { com.googlesource.gerrit.plugins.quota.Publisher.<START_MOD>RepoEvent<END_MOD> event = new com.googlesource.gerrit.plugins.quota.Publisher.<START_MOD>RepoEvent<END_MOD>(<START_MOD>com.googlesource.gerrit.plugins.quota.Publisher.REPO_SIZE<END_MOD>); for (com.google.gerrit.reviewdb.client.Project.NameKey p : projectCache.all()) { long size = repoSizeCache.get(p).get(); event.addData(size, p.get()); } return event; }
@org.junit.Test public void testOwnerGroupsForStarFilter() { java.<START_MOD>util.List<java.<END_MOD>lang.String<START_MOD>><END_MOD> ownerGroups = java.<START_MOD>util<END_MOD>.<START_MOD>Arrays.asList(<END_MOD>"group1", "group2"<START_MOD>)<END_MOD>; configureOwnerGroups("*", ownerGroups); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey("someProject"))).<START_MOD>containsExactlyElementsIn<END_MOD>(ownerGroups); }
<START_MOD>private void reportGroupsAdded(java.lang.String groupName, java.util.List<com.google.gerrit.server.group.GroupJson.GroupInfo> groupInfoList) throws java.io.IOException, java.io.UnsupportedEncodingException { out.write(java.lang.String.format("Groups added to group %s: %s\n", groupName, com.google.common.base.Joiner.on(",").join(com.google.common.collect.Iterables.transform(groupInfoList, new com.google.common.base.Function<com.google.gerrit.server.group.GroupJson.GroupInfo, java.lang.String>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupJson.GroupInfo groupInfo) { return groupInfo.name; } }))).getBytes(com.google.gerrit.sshd.commands.ENC)); }<END_MOD>
<START_MOD>public com.google.gerrit.server.change.ChangeJson create(com.google.gerrit.extensions.client.ListChangesOption... options) { return create(com.google.common.collect.Sets.newEnumSet(java.util.Arrays.asList(options), com.google.gerrit.extensions.client.ListChangesOption.class)); }<END_MOD>
<START_MOD>private void threadSummary() { java.util.List<java.lang.String> prefixes = com.google.common.collect.Lists.newArrayList("HTTP", "IntraLineDiff", "ReceiveCommits", "SSH git-receive-pack", "SSH git-upload-pack", "SSH-Interactive-Worker", "SSH-Stream-Worker", "SshCommandStart"); java.lang.Runtime r = java.lang.Runtime.getRuntime(); java.lang.management.ThreadMXBean threadMXBean = java.lang.management.ManagementFactory.getThreadMXBean(); stdout.format("Threads: %d cpus available, %d threads\n", r.availableProcessors(), threadMXBean.getThreadCount()); com.google.common.collect.Table<java.lang.String, java.lang.Thread.State, java.lang.Integer> count = com.google.common.collect.HashBasedTable.create(); for (long id : threadMXBean.getAllThreadIds()) { java.lang.management.ThreadInfo info = threadMXBean.getThreadInfo(id); if (info == null) { continue; } java.lang.String name = info.getThreadName(); for (java.lang.String p : prefixes) { if (name.startsWith(p)) { java.lang.Thread.State state = info.getThreadState(); java.lang.Integer c = count.get(p, state); count.put(p, info.getThreadState(), (c != null ? c++ : 1)); } } } stdout.print(java.lang.String.format(" %22s", "")); for (java.lang.Thread.State s : java.lang.Thread.State.values()) { stdout.print(java.lang.String.format(" %14s", s.name())); } stdout.print('\n'); for (java.lang.String p : prefixes) { stdout.print(java.lang.String.format(" %-22s", p)); for (java.lang.Thread.State s : java.lang.Thread.State.values()) { stdout.print(java.lang.String.format(" %14d", com.google.gerrit.sshd.commands.ShowCaches.nullToZero(count.get(p, s)))); } stdout.print('\n'); } stdout.print('\n'); }<END_MOD>
<START_MOD>@org.junit.Test public void testDenyOwnerProject() { allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, "refs/*"); deny(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, "refs/*"); assertAdminsAreOwnersAndDevsAreNot(); }<END_MOD>
public void testReplaceToLowerCase() { final com.google.gerrit.common.data.<START_MOD>ParametrizedString<END_MOD> p = new com.google.gerrit.common.data.<START_MOD>ParametrizedString<END_MOD>("${a.toLowerCase}"); assertEquals(1, p.getParameterNames().size()); assertTrue(p.getParameterNames().contains("a")); final java.util.Map<java.lang.String, java.lang.String> a = new java.util.HashMap<java.lang.String, java.lang.String>(); a.put("a", "foo"); assertNotNull(p.bind(a)); assertEquals(1, p.bind(a).length); assertEquals("foo", p.bind(a)[0]); assertEquals("foo", p.replace(a)); a.put("a", "FOO"); assertNotNull(p.bind(a)); assertEquals(1, p.bind(a).length); assertEquals("foo", p.bind(a)[0]); assertEquals("foo", p.replace(a)); }
private static com.google.gerrit.client.ui.Screen mine(final java.lang.String token) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { return new com.google.gerrit.client.changes.AccountDashboardScreen(com.google.gerrit.client.Gerrit.getUserAccount().getId()); } else { final com.google.gerrit.client.ui.Screen r = new com.google.gerrit.client.changes.AccountDashboardScreen(null); r.setRequiresSignIn(true); return r; } }
<START_MOD>public java.util.Optional<com.google.gerrit.reviewdb.client.Comment> getPublished(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.Comment.Key key) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { return java.util.Optional.ofNullable(db.patchComments().get(PatchLineComment.Key.from(notes.getChangeId(), key))).map(( plc) -> plc.asComment(serverId)); } return publishedByChange(db, notes).stream().filter(( c) -> key.equals(c.key)).findFirst(); }<END_MOD>
<START_MOD>@java.lang.Override public <T> java.util.concurrent.Callable<T> wrap(java.util.concurrent.Callable<T> callable) { java.util.Map<com.google.inject.Key<?>, java.lang.Object> seedMap = com.google.common.collect.Maps.newHashMap(); java.lang.String url = urlProvider.get(); seedMap.put(com.google.inject.Key.get(typeOfProvider(java.lang.String.class), com.google.gerrit.server.config.CanonicalWebUrl.class), com.google.inject.util.Providers.of(url)); seedMap.put(com.google.inject.Key.get(java.lang.String.class, com.google.gerrit.server.config.CanonicalWebUrl.class), url); java.net.SocketAddress addr = socketAddressProvider.get(); seedMap.put(com.google.inject.Key.get(typeOfProvider(java.net.SocketAddress.class), com.google.gerrit.server.RemotePeer.class), com.google.inject.util.Providers.of(addr)); seedMap.put(com.google.inject.Key.get(java.net.SocketAddress.class, com.google.gerrit.server.RemotePeer.class), addr); com.google.gerrit.server.CurrentUser user = currentUserProvider.get(); seedMap.put(com.google.inject.Key.get(typeOfProvider(com.google.gerrit.server.CurrentUser.class)), com.google.inject.util.Providers.of(user)); seedMap.put(com.google.inject.Key.get(com.google.gerrit.server.CurrentUser.class), user); return com.google.inject.servlet.ServletScopes.continueRequest(callable, seedMap); }<END_MOD>
<START_MOD>public com.googlesource.gerrit.plugins.supermanifest.Import[] getImports() { return imports; }<END_MOD>
<START_MOD>@java.lang.Override public void onChangeRestored(com.google.gerrit.extensions.events.ChangeRestoredListener.Event ev) { try { ch.doChangeRestoredHook(getChange(ev.getChange()), getAccount(ev.getRestorer()), getPatchSet(ev.getRevision()), ev.getReason(), db.get()); } catch (com.google.gwtorm.server.OrmException e) { } }<END_MOD>
public static void updateDraft(com.google.gerrit.reviewdb.client.PatchSet.Id id<START_MOD>, @com.google.gerrit.common.Nullable java.lang.String project<END_MOD>, java.lang.String draftId, com.google.gerrit.client.changes.CommentInfo content, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.CommentInfo> cb) { CommentApi.revision(id, <START_MOD>project, <END_MOD>"drafts").id(draftId).put(content, cb); }
void setShowTabs(boolean show) { <START_MOD>cmOrig.extras().showTabs(show); cmEdit<END_MOD>.extras().showTabs(show); }
public void execute() { com.google.gerrit.client.<START_MOD>Gerrit<END_MOD>.<START_MOD>doSignIn<END_MOD>(<START_MOD>PageLinks<END_MOD>.REGISTER); }
<START_MOD>@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { boolean checked = ((com.google.gwt.user.client.ui.CheckBox) (event.getSource())).getValue(); if (checked) { final com.google.gwt.user.client.ui.FlowPanel mwrap = ((com.google.gwt.user.client.ui.FlowPanel) (cb.getParent())); cb.setVisible(false); com.google.gerrit.client.changes.ChangeList.next((((("project:" + project) + " AND branch:") + branch) + " AND NOT age:90d"), 0, 1000, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeList>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { changes = com.google.gerrit.client.rpc.Natives.asList(result); base.setVisible(true); } }); } }<END_MOD>
private com.google.gerrit.reviewdb.client.ChangeMessage message(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.git.strategy.CommitMergeStatus s) { <START_MOD>checkNotNull(s,   s may not be null <END_MOD>java.lang.String txt = s.getMessage(); if (s == (CommitMergeStatus.CLEAN_MERGE)) { return message(ctx, commit.getPatchsetId(), (txt + (getByAccountName()))); } else if ((s == (CommitMergeStatus.CLEAN_REBASE)) || (s == (CommitMergeStatus.CLEAN_PICK))) { return message(ctx, commit.getPatchsetId(), (((txt +   as   + (commit.name())) + (getByAccountName()))); } else if (s == (CommitMergeStatus.SKIPPED_IDENTICAL_TREE)) { return message(ctx, commit.getPatchsetId(), txt); } else if (s == (CommitMergeStatus.ALREADY_MERGED)) { switch (args.submitType) { case FAST_FORWARD_ONLY : case MERGE_ALWAYS : case MERGE_IF_NECESSARY : return message(ctx, commit, CommitMergeStatus.CLEAN_MERGE); case CHERRY_PICK : return message(ctx, commit, CommitMergeStatus.CLEAN_PICK); case REBASE_IF_NECESSARY : return message(ctx, commit, CommitMergeStatus.CLEAN_REBASE); default : <START_MOD>throw new java.lang.IllegalStateException(((( submit type   + (args.submitType.toString())) +   for change   + (commit.change().getId()))<END_MOD>); } } else { throw new java.lang.IllegalStateException((((( status   + s) +   for change   + (commit.change().getId())) +   expected to previously fail fast } }
public com.google.gerrit.acceptance.TestAccount admin() throws com.google.gwtorm.server.OrmException, com.jcraft.jsch.JSchException, java.io.<START_MOD>IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException<END_MOD> { return create("admin", "admin@example.com", "Administrator", "Administrators"); }
com.googlesource.gerrit.plugins.findowners.OwnersDb get(<START_MOD>com.google.gerrit.server.account.AccountByEmailCache accountByEmailCache, com.google.gerrit.server.account.AccountCache accountCache, <END_MOD>org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.query.change.ChangeData changeData, int patchset) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Project.NameKey project = changeData.change().getProject(); java.lang.String branch = changeData.change().getDest().get(); java.lang.String dbKey = com.googlesource.gerrit.plugins.findowners.Cache.makeKey(changeData.getId().get(), patchset, branch); return get(<START_MOD>accountByEmailCache, accountCache, <END_MOD>dbKey, repository, project, branch, changeData.currentFilePaths()); }
<START_MOD>@java.lang.Override public synchronized void startup(com.google.gerrit.server.git.WorkQueue workQueue) { this.workQueue = workQueue; currentConfig.startup(workQueue); }<END_MOD>
@java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject in) { com.google.gerrit.client.api.DefaultActions.UiResult result = asUiResult(in); if (<START_MOD>result == null) { com.google.gerrit.client.Gerrit.display(target); } if (<END_MOD>(result.alert()) != null) { com.google.gwt.user.client.Window.alert(result.alert()); } if (((result.redirectUrl()) != null) && (result.openWindow())) { com.google.gwt.user.client.Window.open(result.redirectUrl(), "_blank", null); } else if ((result.redirectUrl()) != null) { com.google.gwt.user.client.Window.Location.assign(result.redirectUrl()); } else { com.google.gerrit.client.Gerrit.display(target); } }
@org.junit.Test public void noCopyMinScoreOnRework() throws java.lang.Exception { java.lang.String subject =   commit java.lang.String file = "a.txt"; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), subject, file,   contents com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, "refs/for/master"); <START_MOD>revision(r).reject(); assertApproval<END_MOD>(r, (-2)); <START_MOD>push = pushFactory.create(db, user.getIdent(), subject, file,   contents r.getChangeId()); r = push.to(git, "refs/for/master"); <END_MOD>assertApproval(r, 0); }
protected void assertRebase(org.eclipse.jgit.junit.TestRepository<?> testRepo, boolean contentMerge) throws java.lang.Exception { org.eclipse.jgit.lib.Repository repo = testRepo.getRepository(); org.eclipse.jgit.revwalk.RevCommit localHead = getHead(repo); org.eclipse.jgit.revwalk.RevCommit remoteHead = getRemoteHead(); <START_MOD>assertWithMessage<END_MOD>(java.lang.String.format( not equal %s localHead.name(), remoteHead.name())).that(localHead.getId()).isNotEqualTo(remoteHead.getId()); assertThat(remoteHead.getParentCount()).isEqualTo(1); if (!contentMerge) { assertThat(getLatestRemoteDiff()).isEqualTo(getLatestDiff(repo)); } assertThat(remoteHead.getShortMessage()).isEqualTo(localHead.getShortMessage()); }
<START_MOD>private void checkImplicitMerges(java.util.Set<org.eclipse.jgit.revwalk.RevCommit> mergedParents) throws java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { if (!(mergedParents.isEmpty())) { org.eclipse.jgit.lib.Ref targetRef = allRefs.get(magicBranch.ctl.getRefName()); if (targetRef != null) { org.eclipse.jgit.revwalk.RevWalk rw = rp.getRevWalk(); boolean containsImplicitMerges = true; org.eclipse.jgit.revwalk.RevCommit tip = rw.parseCommit(targetRef.getObjectId()); for (org.eclipse.jgit.revwalk.RevCommit p : mergedParents) { containsImplicitMerges &= !(rw.isMergedInto(p, tip)); } if (containsImplicitMerges) { rw.reset(); for (org.eclipse.jgit.revwalk.RevCommit p : mergedParents) { rw.markStart(p); } rw.markUninteresting(tip); org.eclipse.jgit.revwalk.RevCommit c; while ((c = rw.next()) != null) { rw.parseBody(c); messages.add(new com.google.gerrit.server.git.validators.CommitValidationMessage(((("WARNING: Implicit Merge of " + (c.abbreviate(7).name())) + " ") + (c.getShortMessage())), false)); } } } } }<END_MOD>
private com.google.gerrit.server.git.MergeTip preMerge(com.google.gerrit.server.git.strategy.SubmitStrategy strategy, java.util.List<com.google.gerrit.server.query.change.ChangeData> submitted, com.google.gerrit.server.git.CodeReviewCommit branchTip) throws com.google.gerrit.server.git.<START_MOD>IntegrateException<END_MOD>, com.google.gwtorm.server.OrmException { logDebug( submit strategy {} for {} commits {} strategy.getClass().getSimpleName(), submitted.size(), submitted); java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge = new java.util.ArrayList(submitted.size()); for (com.google.gerrit.server.query.change.ChangeData cd : submitted) { com.google.gerrit.server.git.CodeReviewCommit commit = commits.get(cd.change().getId()); checkState((commit != null),   for %s not found by validateChangeList cd.change().getId()); toMerge.add(commit); } com.google.gerrit.server.git.MergeTip mergeTip = strategy.run(branchTip, toMerge); refLogIdent = strategy.getRefLogIdent(); logDebug( {} new commits strategy.getNewCommits().size()); commits.putAll(strategy.getNewCommits()); return mergeTip; }
private void initProjectActions(com.google.gerrit.client.projects.ConfigInfo info) {<START_MOD> actionsGrid.clear();<END_MOD> com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.actions.ActionInfo> actions = info.actions(); if ((actions == null) || (actions.isEmpty())) { return; } actions.copyKeysIntoChildren("id"); actionsGrid.addHeader(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingProjectCommands())); com.google.gwt.user.client.ui.FlowPanel actionsPanel = new com.google.gwt.user.client.ui.FlowPanel(); actionsPanel.setStyleName(Gerrit.RESOURCES.css().projectActions()); actionsPanel.setVisible(true); actionsGrid.add(Util.C.headingCommands(), actionsPanel); for (java.lang.String id : actions.keySet()) { actionsPanel.add(new com.google.gerrit.client.actions.ActionButton(getProjectKey(), actions.get(id))); } }
private void doPerformAction(final java.lang.String issueKey, final java.lang.String actionName) throws <START_MOD>com<END_MOD>.<START_MOD>googlesource<END_MOD>.<START_MOD>gerrit.plugins.its.base.its.InvalidTransitionException, com.googlesource.gerrit.plugins.its.jira.JiraRestException<END_MOD> { log.debug(((( to perform action:   + actionName) +   on issue   + issueKey)); boolean ret = client().doTransition(issueKey, actionName); if (ret) { log.debug((((   + actionName) +   successful on Issue   + issueKey)); } else { log.debug( {} on Issue {} not possible actionName, issueKey); } }
<START_MOD>@java.lang.Override public java.util.List<com.google.gerrit.reviewdb.Project> call() throws java.lang.Exception { return retrieveParentCandidates.getParentCandidates(); }<END_MOD>
@java.lang.<START_MOD>Override<END_MOD> public <START_MOD>boolean<END_MOD> reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) <START_MOD>throws java.io.IOException <END_MOD>{ <START_MOD>try { return reindexIfStaleAsync(id).get(); } catch (<END_MOD>java.util.concurrent.<START_MOD>ExecutionException | <END_MOD>java.lang.<START_MOD>InterruptedException<END_MOD> <START_MOD>e<END_MOD>) { <START_MOD>com.google.gerrit.server.<END_MOD>index<START_MOD>.account.AccountIndexerImpl.log.warn<END_MOD>(<START_MOD> of possibly stale account {} failed <END_MOD>id<START_MOD>.get()<END_MOD>); com.google.common.<START_MOD>base<END_MOD>.<START_MOD>Throwables<END_MOD>.<START_MOD>throwIfInstanceOf(e<END_MOD>.<START_MOD>getCause<END_MOD>(), <START_MOD>java<END_MOD>.<START_MOD>io.IOException.class); throw new java.io.IOException(e<END_MOD>); }<START_MOD> }<END_MOD>
<START_MOD>private java.lang.String getPath(javax.servlet.http.HttpServletRequest req) { java.lang.String path = req.getRequestURI(); java.lang.String prefix = "/plugins/" + (pluginName); if (path.startsWith(prefix)) { path = path.substring(prefix.length()); } return path; }<END_MOD>
<START_MOD>@org.junit.Test public void checkTrustChainWithoutSpecifyingExpectedKey() throws java.lang.Exception { com.google.gerrit.gpg.testutil.TestKey keyA = add(keyA(), user); com.google.gerrit.gpg.testutil.TestKey keyB = add(keyB(), addUser("userB")); com.google.gerrit.gpg.testutil.TestKey keyC = add(keyC(), addUser("userC")); com.google.gerrit.gpg.testutil.TestKey keyD = add(keyD(), addUser("userD")); com.google.gerrit.gpg.testutil.TestKey keyE = add(keyE(), addUser("userE")); com.google.gerrit.gpg.GerritPublicKeyChecker checker = checkerFactory.create(); assertNoProblems(checker.check(keyA.getPublicKey(), store)); assertProblems(checker.check(keyB.getPublicKey(), store), "Key is expired"); assertNoProblems(checker.check(keyC.getPublicKey(), store)); assertNoProblems(checker.check(keyD.getPublicKey(), store)); assertProblems(checker.check(keyE.getPublicKey(), store), "Key is expired", "No path to a trusted key"); }<END_MOD>
<START_MOD>private boolean canOverrideUploadValidation() { com.google.gerrit.server.account.CapabilityControl ctl = userProvider.get().getCapabilities(); return ctl.canPerform((((pluginName) + "-") + (com.googlesource.gerrit.plugins.uploadvalidator.OverrideUploadValidation.OVERRIDE_UPLOAD_VALIDATION))); }<END_MOD>
@java.lang.Override public void start() { queue.start(); if (((srvInfo.getState()) == (ServerInformation.State.STARTUP)) && (queue.replicateAllOnPluginStart)) { <START_MOD>com.googlesource.gerrit.plugins.replication.ReplicationState state = new com.googlesource.gerrit.plugins.replication.ReplicationState(ReplicationType.START_UP); <END_MOD>pushAllFuture.set(pushAll.create(null<START_MOD>, state<END_MOD>).schedule(30, java.util.concurrent.TimeUnit.SECONDS)); } }
<START_MOD>@java.lang.SuppressWarnings("unchecked") @java.lang.Override public <T> java.util.Enumeration<T> resources(java.lang.Class<? extends T> resourceClass) { return ((java.util.Enumeration<T>) (isJarResource(resourceClass) ? ((java.util.Enumeration<T>) (jarFile.entries())) : java.util.Collections.emptyEnumeration())); }<END_MOD>
<START_MOD>boolean shouldDiscardMessage(com.google.gerrit.server.mail.receive.MailMessage message);<END_MOD>
@org.junit.Test public void branchAlreadyExists_Conflict() throws java.lang.Exception { assertCreateSucceeds(<START_MOD>branch<END_MOD>); assertCreateFails(<START_MOD>branch, <END_MOD>com.google.gerrit.extensions.restapi.ResourceConflictException.class); }
public boolean <START_MOD>isFileOrCommitMessae<END_MOD>() { return !((((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.A)) && ( >= (script.getA().size()))) || (((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.B)) && ( >= (script.getB().size())))); }
<START_MOD>@java.lang.Override @java.lang.SuppressWarnings("unchecked") public void init() throws javax.servlet.ServletException { super.init(); handlerByName.put("ping", com.googlesource.gerrit.plugins.github.notification.PingHandler.class); com.googlesource.gerrit.plugins.github.notification.WebhookServlet.logger.info("Loaded PingHandler"); for (org.kohsuke.github.GHEvent event : org.kohsuke.github.GHEvent.values()) { java.lang.String name = com.googlesource.gerrit.plugins.github.notification.WebhookServlet.getControllerClassName(event); java.lang.Class<? extends com.googlesource.gerrit.plugins.github.notification.EventHandler<?>> clazz; try { clazz = ((java.lang.Class<? extends com.googlesource.gerrit.plugins.github.notification.EventHandler<?>>) (java.lang.Class.forName(name))); } catch (java.lang.ClassNotFoundException e) { com.googlesource.gerrit.plugins.github.notification.WebhookServlet.logger.debug("Handler \"{}\" not found. Skipping", name); continue; } com.googlesource.gerrit.plugins.github.notification.WebhookServlet.logger.info("Loaded {}", clazz.getName()); handlerByName.put(event.name().toLowerCase(), clazz); } }<END_MOD>
private static boolean isUnreasonableName(java.lang.String name) { return ((((name.contains("\\")) || (name.startsWith("../"))) || (name.contains("/../"))) || (name.contains("/./"))) || (name.contains("//")); }
<START_MOD>@java.lang.Override protected void configure() { listener().to(com.google.gerrit.pgm.http.jetty.JettyServer.class); }<END_MOD>
<START_MOD>protected void createWidgets(final java.lang.String popupText, final java.lang.String currentPageLink) { projectsTab = new com.google.gerrit.client.ui.ProjectsTable() { @java.lang.Override protected void movePointerTo(final int row, final boolean scroll) { super.movePointerTo(row, scroll); handlerManager.fireEvent(new com.google.gerrit.client.ui.ProjectListPopupOnMovePointerEvent(popingUp, getRowItem(row).getName())); } @java.lang.Override protected void onOpenRow(final int row) { super.onOpenRow(row); handlerManager.fireEvent(new com.google.gerrit.client.ui.ProjectListPopupOnOpenRowEvent(getRowItem(row).getName())); } }; projectsTab.setSavePointerId(currentPageLink); close = new com.google.gwt.user.client.ui.Button(Util.C.projectsClose()); close.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { closePopup(); handlerManager.fireEvent(new com.google.gerrit.client.ui.ProjectListPopupOnCloseEvent()); } }); popup = new com.google.gwtexpui.user.client.PluginSafeDialogBox(); popup.setModal(false); popup.setText(popupText); }<END_MOD>
<START_MOD>public void configureProject(org.eclipse.jgit.lib.ProgressMonitor progress) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(getProjectNameKey()); try { config = com.google.gerrit.server.git.ProjectConfig.read(md); progress.beginTask("Configure Gerrit project", 2); setProjectSettings(); progress.update(1); setProjectPermissions(); progress.update(1); md.setMessage(("Imported from " + (sourceUri))); config.commit(md); } finally { md.close(); progress.endTask(); } }<END_MOD>
<START_MOD>@java.lang.Override public void setPredicate(java.lang.String pkg, java.lang.String functor, com.googlecode.prolog_cafe.lang.Term... args) { init(); try { super.setPredicate(pkg, functor, args); } catch (com.googlecode.prolog_cafe.lang.ExistenceException err) { if (!(pkg.startsWith("com.google.gerrit.rules."))) { try { pkg = "com.google.gerrit.rules.common"; setPredicate(pkg, ("default_" + functor), args); } catch (com.googlecode.prolog_cafe.lang.ExistenceException err2) { throw err; } } else { throw err; } } }<END_MOD>
public <START_MOD>void addComment(java.lang.String issueKey, <END_MOD>com.atlassian.jira.<START_MOD>rest<END_MOD>.client.<START_MOD>domain.Comment comment) throws java.io.IOException { try { <END_MOD>com.googlesource.gerrit.plugins.its.jira.<START_MOD>JiraClient.log.debug(( to add comment for issue   + issueKey)); com.atlassian.jira.rest.client.domain.Issue issue = getIssue(issueKey); java.net.URI issueUri = new java.net.URI(((issue.getSelf().toString()) + "/comment/")); com.atlassian.jira.rest.client.IssueRestClient issueClient = client.getIssueClient(); com.atlassian.util.concurrent.Promise<java.lang.Void> promise = issueClient.addComment(issueUri<END_MOD>, <START_MOD>comment); promise.claim(); com.googlesource.gerrit.plugins.its.jira.JiraClient.log.debug(( added to issue   + issueKey)); } catch (<END_MOD>java.lang.<START_MOD>Exception e)<END_MOD> { <START_MOD>com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error(( not add comment to issue   + issueKey)); throw new java.io.IOException((( Comment to issue   + issueKey) +   failed e<END_MOD>); }<START_MOD> }<END_MOD>
private java.lang.Runnable maybeNextVimSearch(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { @java.lang.Override public void run() { if (cm.hasVimSearchHighlight()) { net.codemirror.lib.CodeMirror.handleVimKey(cm, "n"); } else { <START_MOD>coloringManager.<END_MOD>diffChunkNav(cm, com.google.gerrit.client.diff.SideBySide2.Direction.NEXT).run(); } } }; }
<START_MOD>@org.junit.Test public void testOwnerGroupsWhenNotConfigured() { assertArrayEquals(new java.lang.String[]{ }, repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey("someProject"))); }<END_MOD>
@java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gerrit.client.ui.RemoteSuggestBox> event) { <START_MOD>if (((path.getText()) != null) && ((path.getText().length()) > 0)) { open(path.getText()); } <END_MOD>hide(); }
public void reset() { if ((com.google.gerrit.client.Gerrit.isSignedIn()) && ((com.google.gerrit.client.Gerrit.<START_MOD>getDiffPreferences<END_MOD>()) != null)) { set(com.google.gerrit.client.Gerrit.<START_MOD>getDiffPreferences<END_MOD>()); } else { set(<START_MOD>new <END_MOD>com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>DiffPreferencesInfo<END_MOD>()); } }
<START_MOD>public final native boolean trusted();<END_MOD>
@org.junit.Test public void testWithSymlink() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommitWithSymlink(); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = com.googlesource.gerrit.plugins.uploadvalidator.SymlinkValidator.performValidation(repo, c); <START_MOD>assertThat(m).hasSize<END_MOD>(2); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> expected = new java.util.ArrayList<>(); expected.add(new com.<START_MOD>googlesource.gerrit.plugins.uploadvalidator.ComparableCommitValidationMessage<END_MOD>( links are not allowed: <START_MOD>foo.txt<END_MOD> true)); expected.add(new com.<START_MOD>googlesource.gerrit.plugins.uploadvalidator.ComparableCommitValidationMessage<END_MOD>( links are not allowed: <START_MOD>symbolicFolder<END_MOD> true)); <START_MOD>assertThat<END_MOD>(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.<START_MOD>transformMessages<END_MOD>(m<START_MOD>)).containsAnyIn(expected<END_MOD>); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> file(java.lang.String file) throws com.google.gerrit.server.query.QueryParseException { if (<START_MOD>allowFileRegex) { if (file.startsWith("^")) { return new com.google.gerrit.server.query.change.RegexFilePredicate(args.dbProvider, args.patchListCache, file); } else { throw new java.lang.IllegalArgumentException(); } } else { if (<END_MOD>!(<START_MOD>file.startsWith("^"))) { return new com.google.gerrit.server.index.PredicateWrapper(args.index, new com.google.gerrit.server.query.change.EqualsFilePredicate(args.dbProvider, args.patchListCache, file)); } else<END_MOD> { throw error((<START_MOD> expression<END_MOD> not permitted here: file: + file)); } <START_MOD>} }<END_MOD>
private static java.lang.String randSuffix() {<START_MOD> @java.lang.SuppressWarnings("deprecation")<END_MOD> com.google.common.hash.Hasher h = com.google.common.hash.Hashing.md5().newHasher(); byte[] buf = new byte[8]; org.eclipse.jgit.util.NB.encodeInt64(buf, 0, com.google.gerrit.common.TimeUtil.nowMs()); h.putBytes(buf); com.google.gerrit.server.change.FileContentUtil.rng.nextBytes(buf); h.putBytes(buf); return h.hash().toString(); }
@java.lang.Override public void onShowView() { super.onShowView(); com.google.gwt.user.client.Window.enableScrolling(false); if (prefs.hideTopMenu()) { com.google.gerrit.client.Gerrit.setHeaderVisible(false); } resizeHandler = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent event) { resizeCodeMirror(); } }); final int height = getCodeMirrorHeight(); operation(new java.lang.Runnable() { @java.lang.Override public void run() { cmA.setHeight(height); cmB.setHeight(height); cmA.refresh(); cmB.refresh(); } }); diffTable.sidePanel.adjustGutters(cmB); if (((startSide) <START_MOD>== null) && ((diff.meta_b()) != null)) { com.google.gerrit.client.diff.DiffChunkInfo d = coloringManager.getFirstDiffChunk(); if (d != null) { startSide = d.getSide(); startLine = (d.getStart()) + 1; } } if (((startSide) <END_MOD>!= null) && ((startLine) > 0)) { int line = (startLine) - 1; net.codemirror.lib.CodeMirror cm = getCmFromSide(startSide); if ((cm.lineAtHeight((height - 20))) < line) { cm.scrollToY(((cm.heightAtLine(line, "local")) - (0.5 * height))); } cm.setCursor(net.codemirror.lib.LineCharacter.create(line)); cm.focus(); } else <START_MOD>{ cmA.setCursor(net.codemirror.lib.LineCharacter.create(0)); cmA.focus(); } <END_MOD>if ((com.google.gerrit.client.Gerrit.isSignedIn()) && (prefs.autoReview())) { header.autoReview(); } prefetchNextFile(); }
<START_MOD>public void onProjectCreated(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException;<END_MOD>
@java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { java.lang.String idString = req.getPathInfo(); if (idString.endsWith("/")) { idString = idString.substring(0, ((idString.length()) - 1)); } com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(idString); com.google.gerrit.httpd.UrlModule.toGerrit(com.google.gerrit.common.PageLinks.toChange(id<START_MOD>, null<END_MOD>), req, rsp); } catch (java.lang.IllegalArgumentException err) { rsp.sendError(HttpServletResponse.SC_NOT_FOUND); } }
public void run() { defer(new java.lang.Runnable() { @java.lang.Override public void run() { net.codemirror.lib.CodeMirror.LineHandle handle = cm.getLineHandleVisualStart(cm.getCursor("end").getLine()); if ((cm.hasActiveLine()) && (cm.getActiveLine().equals(handle))) { return; } clearActiveLine(cm); clearActiveLine(other); cm.setActiveLine(handle); cm.addLineClass(handle, LineClassWhere.WRAP, DiffTable.style.activeLine()); com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo info = lineOnOther(getSideFromCm(cm), cm.getLineNumber(handle)); if (info.isAligned()) { net.codemirror.lib.CodeMirror.LineHandle oLineHandle = other.getLineHandle(info.getLine()); other.setActiveLine(oLineHandle); other.addLineClass(oLineHandle, LineClassWhere.WRAP, DiffTable.style.activeLine()); } } }); }
<START_MOD>@java.lang.Override protected void configure() { bindConstant().annotatedWith(com.google.inject.name.Names.named("HEADLESS")).to(headless); }<END_MOD>
<START_MOD>@java.lang.Override public void replace(com.google.gerrit.server.project.ProjectState projectState) throws java.io.IOException { try { replace(com.google.gerrit.lucene.LuceneProjectIndex.idTerm(projectState), toDocument(projectState, null)).get(); } catch (java.util.concurrent.ExecutionException | java.lang.InterruptedException e) { throw new java.io.IOException(e); } }<END_MOD>
<START_MOD>public void start() { new java.lang.Thread() { @java.lang.Override public void run() { reindex(); } }.start(); }<END_MOD>
@org.junit.Test public void ownersFile1Test() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result c1 = createChange( OWNERS "OWNERS", "x@x\na@a\n"); assertThat(getOwnersResponse(c1)).contains( files:[ OWNERS ] com.google.gerrit.acceptance.PushOneCommit.Result c2 = createChange( t.c "t.c", "##"); assertThat(getOwnersResponse(c2)).contains( files:[ t.c ] approveSubmit(c1); <START_MOD>java.lang.String ownerA =   email:a@a, weights:[ 1, 0,   ] } java.lang.String ownerB =   email:b@b, weights:[ 1, 0,   ] } java.lang.String ownerC =   email:c@c, weights:[ 1, 0,   ] } java.lang.String ownerX =   email:x@x, weights:[ 1, 0,   ] } java.lang.String ownersAX = (((   + ownerA) +     + ownerX) +   ] <END_MOD>assertThat(getOwnersResponse(c2)).contains(<START_MOD>(ownersAX +  <END_MOD> files:[ t.c ] assertThat(getOwnersResponse(c1)).contains(<START_MOD>(ownersAX +  <END_MOD> files:[ OWNERS ] java.lang.String expectedTail = <START_MOD>((<END_MOD> ./:<START_MOD>[ a@a, x@x ]<END_MOD> }, owner2paths:{ a@a:<START_MOD>[ <END_MOD>./<START_MOD> ], x@x:[ <END_MOD>./ <START_MOD>] } } +  <END_MOD> file2owners:{ ./t.c:<START_MOD>[ a@a, x@x ]<END_MOD> }, reviewers:[], <START_MOD>  + ownersAX) +  <END_MOD> files:[ t.c ] } assertThat(getOwnersDebugResponse(c2)).contains(expectedTail); }
<START_MOD>protected com.google.gwtjsonrpc.server.MethodHandle lookupMethod(final java.lang.String methodName) { return super.lookupMethod(methodName); }<END_MOD>
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if (((replyAction) != null) && (replyAction.isVisible())) { replyAction.quickApprove(input); } else { com.google.gerrit.client.changes.ChangeApi.revision(changeId.get(), <START_MOD>project.get(), <END_MOD>revision).view("review").post(input, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ReviewInput>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ReviewInput result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId<START_MOD>, project<END_MOD>)); } }); } }
void setLineLength(int length) { <START_MOD>cmOrig.extras().lineLength((Patch.COMMIT_MSG.equals(path) ? 72 : length)); cmEdit<END_MOD>.extras().lineLength((Patch.COMMIT_MSG.equals(path) ? 72 : length)); }
private void checkRequiresCapability(<START_MOD>java.lang.String baseName, <END_MOD>org.apache.sshd.server.Command cmd) throws com.google.gerrit.sshd.UnloggedFailure { com.google.gerrit.extensions.annotations.RequiresCapability rc = cmd.getClass().getAnnotation(com.google.gerrit.extensions.annotations.RequiresCapability.class); if (rc != null) { com.google.gerrit.server.CurrentUser user = currentUser.get(); com.google.gerrit.server.account.CapabilityControl ctl = user.getCapabilities(); <START_MOD>java.lang.String value = (baseName.startsWith("gerrit")) ? rc.value() : java.lang.String.format("%s-%s", baseName, rc.value()); <END_MOD>if ((!(ctl.canPerform(<START_MOD>value<END_MOD>))) && (!(ctl.canAdministrateServer()))) { java.lang.String msg = java.lang.String.format( %s does not have   capability. user.getUserName(), <START_MOD>value<END_MOD>); throw new com.google.gerrit.sshd.UnloggedFailure(BaseCommand.STATUS_NOT_ADMIN, msg); } } }
<START_MOD>public int compare(com.google.gerrit.reviewdb.client.PatchLineComment c1, com.google.gerrit.reviewdb.client.PatchLineComment c2) { java.lang.String filename1 = c1.getKey().getParentKey().get(); java.lang.String filename2 = c2.getKey().getParentKey().get(); int nameCmp = filename1.compareTo(filename2); if (nameCmp != 0) { return nameCmp; } int rangeCmp = c1.getRange().compareTo(c2.getRange()); if (rangeCmp != 0) { return rangeCmp; } int timeCmp = c1.getWrittenOn().compareTo(c2.getWrittenOn()); if (timeCmp != 0) { return timeCmp; } return 0; }<END_MOD>
@java.lang.Override public void run() { <START_MOD>(<END_MOD>header.prev<START_MOD>.isVisible() ? header.prev : header.up)<END_MOD>.go(); }
@org.junit.Test public void deleteBranchesNotFoundContinue() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput(); java.util.List<java.lang.String> branches = com.google.common.collect.Lists.newArrayList("refs/heads/does-not-exist"); branches.addAll(com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES); input.branches = branches; try { project().deleteBranches(input); <START_MOD>assert_().<END_MOD>fail( ResourceConflictException } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForBranches(com.google.common.collect.ImmutableList.of("refs/heads/does-not-exist"))); } assertBranchesDeleted(); }
<START_MOD>public int getEndCh() { return endCh; }<END_MOD>
private static com.google.inject.Injector createTestInjector(com.google.gerrit.pgm.Daemon daemon) throws java.lang.Exception { com.google.inject.Injector sysInjector = com.google.gerrit.acceptance.GerritServer.get(daemon, "sysInjector"); java.lang.Module module = new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.acceptance.AccountCreator.class); factory(PushOneCommit.Factory.class); factory(SubmoduleOp.Factory.class); <START_MOD>factory(SubmoduleSectionParser.Factory.class); <END_MOD>install(com.google.gerrit.acceptance.InProcessProtocol.module()); install(new com.google.gerrit.server.ssh.NoSshModule()); install(new com.google.gerrit.server.git.AsyncReceiveCommits.Module()); } }; return sysInjector.createChildInjector(module); }
@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent e) { e.stopPropagation(); if ((((e.getCharCode()) == '\n') || ((e.getCharCode()) == (KEY_ENTER))) && (<START_MOD>(<END_MOD>e.isControlKeyDown(<START_MOD>)) || (e.isMetaKeyDown()<END_MOD>))) { e.preventDefault(); if (post.isEnabled()) { onPost(null); } } }
<START_MOD>private <T extends com.google.gwt.event.shared.EventHandler> void fireEvent(com.google.gwtjsonrpc.client.BaseRpcEvent<T> e) { e.service = ((com.google.gwtjsonrpc.client.RemoteJsonService) (proxy)); com.google.gwtjsonrpc.client.JsonUtil.fireEvent(e); }<END_MOD>
private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(com.google.gerrit.server.schema.SchemaVersionCheck.module()); modules.add(new com.google.gerrit.pgm.util.LogFileCompressor.Module()); modules.add(new com.google.gerrit.server.git.WorkQueue.Module()); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); modules.add(new com.google.gerrit.server.<START_MOD>cache.EhcachePoolImpl.Module()); modules.add(new com.google.gerrit.server.<END_MOD>mail.SmtpEmailSender.Module()); modules.add(new com.google.gerrit.server.git.PushReplication.Module()); if (httpd) { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); } else { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.server.config.CanonicalWebUrlProvider.class; } }); } if (!(slave)) { modules.add(new com.google.gerrit.server.config.MasterNodeStartup()); } return cfgInjector.createChildInjector(modules); }
private boolean isSubmittable(com.google.gerrit.client.changes.ChangeInfo info) { boolean canSubmit = <START_MOD>((<END_MOD>info.status().isOpen()<START_MOD>) && ((revision) == (info.current_revision()))) && (!(info.revision(revision).draft()))<END_MOD>; if (canSubmit && ((info.status()) == (com.google.gerrit.reviewdb.client.Change.Status.NEW))) { for (java.lang.String name : info.labels()) { com.google.gerrit.client.changes.ChangeInfo.LabelInfo label = info.label(name); switch (label.status()) { case NEED : statusText.setInnerText((   + name)); canSubmit = false; break; case REJECT : case IMPOSSIBLE : if (label.blocking()) { statusText.setInnerText((   + name)); canSubmit = false; } break; default : break; } } } return canSubmit; }
public com.google.gerrit.reviewdb.client.PatchLineComment get(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchLineComment.Key key) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return db.patchComments().get(key); } for (com.google.gerrit.reviewdb.client.PatchLineComment c : <START_MOD>publishedByChange<END_MOD>(db, notes)) { if (key.equals(c.getKey())) { return c; } } return null; }
<START_MOD>@java.lang.Override public java.util.List<com.google.gerrit.server.account.GetSshKeys.SshKeyInfo> apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.account.GetSshKeys.SshKeyInfo> sshKeys = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.reviewdb.client.AccountSshKey sshKey : dbProvider.get().accountSshKeys().byAccount(rsrc.getUser().getAccountId()).toList()) { com.google.gerrit.server.account.GetSshKeys.SshKeyInfo info = new com.google.gerrit.server.account.GetSshKeys.SshKeyInfo(); info.id = sshKey.getKey().get(); info.sshPublicKey = sshKey.getSshPublicKey(); info.encodedKey = sshKey.getEncodedKey(); info.algorithm = sshKey.getAlgorithm(); info.comment = com.google.common.base.Strings.emptyToNull(sshKey.getComment()); info.valid = sshKey.isValid(); sshKeys.add(info); } return sshKeys; }<END_MOD>
@java.lang.Override public void onLoad() { if ((diffTable) == null) { initUI(); } super.onLoad(); PatchUtil.DETAIL_SVC.unifiedPatchDetail(patchId, new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.data.UnifiedPatchDetail>(<START_MOD>this<END_MOD>) { <START_MOD>@java.lang.Override protected<END_MOD> void <START_MOD>prepare<END_MOD>(final com.google.gerrit.client.data.UnifiedPatchDetail r) { display(r); } }); }
private void add(org.apache.lucene.document.Document doc, com.google.gerrit.server.index.FieldDef<com.google.gerrit.server.query.change.ChangeData, ?> f, java.lang.Iterable<?> values) throws com.google.gwtorm.server.OrmException { java.lang.String name = f.getName(); org.apache.lucene.document.Field.Store store = com.google.gerrit.lucene.LuceneChangeIndex.store(f); if ((f.getType()) == (com.google.gerrit.server.index.FieldType.INTEGER)) { for (java.lang.Object value : values) { doc.add(new org.apache.lucene.document.IntField(name, ((java.lang.Integer) (value)), store)); } } else if ((f.getType()) == (com.google.gerrit.server.index.FieldType.<START_MOD>LONG)) { for (java.lang.Object value : values) { doc.add(new org.apache.lucene.document.LongField(name, ((java.lang.Long) (value)), store)); } } else if ((f.getType()) == (com.google.gerrit.server.index.FieldType.<END_MOD>TIMESTAMP)) { for (java.lang.Object v : values) { doc.add(new org.apache.lucene.document.IntField(name, com.google.gerrit.lucene.LuceneChangeIndex.toIndexTime(((java.sql.Timestamp) (v))), store)); } } else if ((f.getType()) == (com.google.gerrit.server.index.FieldType.EXACT)) { for (java.lang.Object value : values) { doc.add(new org.apache.lucene.document.StringField(name, ((java.lang.String) (value)), store)); } } else { throw com.google.gerrit.lucene.LuceneChangeIndex.badFieldType(f.getType()); } }
@java.lang.Override public void <START_MOD>onEvent(com.google.gerrit.server.events.Event event) { com.google.gerrit.server.events.RefUpdatedEvent refUpdate = ((com.google.gerrit.server.events.RefUpdatedEvent) (event)); if (refUpdate != null) { if (isRelevantRef(refUpdate)) { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = refUpdate.getProjectNameKey(); try { com.google.gerrit.server.project.ProjectResource project = new com.google.gerrit.server.project.ProjectResource(projectControl.controlFor(nameKey, user)); boolean protectDeleted = cfg.getFromGerritConfig(RefProtectionModule.NAME).getBoolean("protectDeleted", true); boolean protectFastForward = cfg.getFromGerritConfig(RefProtectionModule.NAME).getBoolean("protectFastForward", true); if ((protectDeleted && (isRefDeleted(refUpdate))) || (protectFastForward && (isNonFastForwardUpdate(refUpdate, project)))) { backupBranch.createBackup(refUpdate, project); } } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) {<END_MOD> com.googlesource.gerrit.plugins.refprotection.<START_MOD>RefUpdateListener.log.error(<END_MOD>e<START_MOD>.getMessage(), <END_MOD>e<START_MOD>); } } } }<END_MOD>
private void submit(java.lang.String changeId, int expectedStatus<START_MOD>, java.lang.String msg<END_MOD>) throws java.lang.Exception { approve(changeId); com.google.gerrit.extensions.api.changes.SubmitInput subm = new com.google.gerrit.extensions.api.changes.SubmitInput(); com.google.gerrit.acceptance.RestResponse r = adminSession.post((("/changes/" + changeId) + "/submit"), subm); assertThat(r.getStatusCode()).isEqualTo(expectedStatus); if (expectedStatus == (org.apache.http.HttpStatus.SC_OK)) { com.google.gerrit.extensions.common.ChangeInfo change = newGson().fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<com.google.gerrit.extensions.common.ChangeInfo>() {}.getType()); assertThat(change.status).isEqualTo(ChangeStatus.MERGED); checkMergeResult(change); } <START_MOD>else { assertThat(r.getEntityContent()).contains(msg); } <END_MOD>r.consume(); }
<START_MOD>public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.defaults(), exceptionPredicate); try { return retryerBuilder.build().call(() -> action.call()); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { java.lang.Throwable t = e; if ((e.getCause()) != null) { t = e.getCause(); } com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(t); } }<END_MOD>
private void afterTest(<START_MOD>boolean hasCustomConfig<END_MOD>) throws java.lang.Exception { db.close(); sshSession.close(); <START_MOD>if (hasCustomConfig) { <END_MOD>server.stop(); <START_MOD>} else { server<END_MOD>.<START_MOD>clearAllData<END_MOD>(); }<START_MOD> }<END_MOD>
<START_MOD>private static java.lang.Class findClass(java.lang.String klazzname) { try { return java.lang.Class.forName(klazzname); } catch (java.lang.ClassNotFoundException e) { throw com.google.gerrit.pgm.shell.JythonShell.noShell((("Class " + klazzname) + " not found"), e); } }<END_MOD>
public com.google.gerrit.server.account.AuthRequest authenticate(final com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException { final java.lang.String <START_MOD>authUsername = who.getLocalUser(); final java.lang.String authPassword = who.getPassword(); if ((this.<END_MOD>username<START_MOD>) == null) { this.username<END_MOD> = <START_MOD>authUsername; this.password = authPassword; }<END_MOD> try { final javax.naming.directory.DirContext ctx = open(); try { final com.google.gerrit.server.auth.ldap.LdapQuery.Result m = findAccount(ctx, <START_MOD>authUsername<END_MOD>); if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.AuthType.LDAP)) { authenticate(m.getDN(), <START_MOD>authPassword<END_MOD>); } who.setDisplayName(com.google.gerrit.server.auth.ldap.LdapRealm.apply(accountFullName, m)); who.setUserName(com.google.gerrit.server.auth.ldap.LdapRealm.apply(accountSshUserName, m)); if ((accountEmailAddress) != null) { who.setEmailAddress(com.google.gerrit.server.auth.ldap.LdapRealm.apply(accountEmailAddress, m)); } else if (emailExpander.canExpand(<START_MOD>authUsername<END_MOD>)) { who.setEmailAddress(emailExpander.expand(<START_MOD>authUsername<END_MOD>)); } membershipCache.put(<START_MOD>authUsername<END_MOD>, queryForGroups(ctx, <START_MOD>authUsername<END_MOD>, m)); return who; } finally { try { ctx.close(); } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.warn( close LDAP query handle e); } } } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.error( query LDAP to autenticate user e); throw new com.google.gerrit.server.account.AccountException( query LDAP for account e); } }
<START_MOD>@java.lang.Override public com.googlesource.gerrit.plugins.lfs.LfsBackendConfig apply(java.lang.String input) { return new com.googlesource.gerrit.plugins.lfs.LfsBackendConfig(input, type); }<END_MOD>
private static boolean notModified(javax.servlet.http.HttpServletRequest req, com.google.gerrit.extensions.restapi.RestResource rsrc<START_MOD>, com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.extensions.restapi.RestResource> view<END_MOD>) { if (!(com.google.gerrit.httpd.restapi.RestApiServlet.isGetOrHead(req))) { return false; } if (<START_MOD>view<END_MOD> instanceof com.google.gerrit.extensions.restapi.<START_MOD>ETagView) { java.lang.String have = req.getHeader(HttpHeaders.IF_NONE_MATCH); if (have != null) { return have.equals(((com.google.gerrit.extensions.restapi.ETagView) (view)).getETag(rsrc)); } } if (rsrc instanceof com.google.gerrit.extensions.restapi.<END_MOD>RestResource.HasETag) { java.lang.String have = req.getHeader(HttpHeaders.IF_NONE_MATCH); if (have != null) { return have.equals(((com.google.gerrit.extensions.restapi.RestResource.HasETag) (rsrc)).getETag()); } } if (rsrc instanceof com.google.gerrit.extensions.restapi.RestResource.HasLastModified) { java.sql.Timestamp m = ((com.google.gerrit.extensions.restapi.RestResource.HasLastModified) (rsrc)).getLastModified(); long d = req.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE); return (d / 1000L) == ((m.getTime()) / 1000L); } return false; }
private void setPaddingHeight(int height) { <START_MOD>com.google.gerrit.client.diff.SideBySide2.setHeightInPx(<END_MOD>padding.element, <START_MOD>height<END_MOD>); padding.widget.changed(); }
private com.google.gerrit.client.ui.Screen selectProject() { if (com.google.gerrit.client.Dispatcher.matchPrefix("/admin/projects/", token)) { java.lang.String rest = com.google.gerrit.client.Dispatcher.skip(token); int c = rest.lastIndexOf(','); if (c < 0) { return new com.google.gerrit.client.admin.ProjectInfoScreen(Project.NameKey.parse(rest)); } else if (c == 0) { return new com.google.gerrit.client.NotFoundScreen(); } com.google.gerrit.reviewdb.client.Project.NameKey k = Project.NameKey.parse(rest.substring(0, c)); java.lang.String panel = rest.substring((c + 1)); if (ProjectScreen.INFO.equals(panel)) { return new com.google.gerrit.client.admin.ProjectInfoScreen(k); } if (ProjectScreen.BRANCH.equals(panel)) { return new com.google.gerrit.client.admin.ProjectBranchesScreen(k); } if (ProjectScreen.ACCESS.equals(panel)) { return new com.google.gerrit.client.admin.ProjectAccessScreen(k); } <START_MOD>if (ProjectScreen.DASHES.equals(panel)) { return new com.google.gerrit.client.admin.ProjectDashesScreen(k); } <END_MOD>} return new com.google.gerrit.client.NotFoundScreen(); }
<START_MOD>public void setMem(long value, long total) { mem = com.google.gerrit.server.config.ListCaches.HitRationInfo.percent(value, total); }<END_MOD>
<START_MOD>public static java.lang.String getUrl(SitePaths sitePaths) { return "jdbc:h2:" + (sitePaths.db_dir.resolve("account_patch_reviews")); }<END_MOD>
<START_MOD>@java.lang.Override public void run() { tryingAgain = false; for (com.google.gerrit.reviewdb.Project.NameKey projectName : projectCache.all()) { if (!(projectCache.get(projectName).getConfig().hasGroup(uuid))) { continue; } try { com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName); try { rename(md); } finally { md.close(); } } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noProject) { continue; } catch (org.eclipse.jgit.errors.ConfigInvalidException err) { com.google.gerrit.server.git.RenameGroupOp.log.error(((("Cannot rename group " + (oldName)) + " in ") + projectName), err); } catch (java.io.IOException err) { com.google.gerrit.server.git.RenameGroupOp.log.error(((("Cannot rename group " + (oldName)) + " in ") + projectName), err); } } }<END_MOD>
@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server<START_MOD>.restapi<END_MOD>.project.ChildProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((recursive) || (rsrc.isDirectChild())) { return json.format(rsrc.getChild().getProject()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getChild().getName()); }
<START_MOD>@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if (((rows) != null) && ((selectedRow) < (rows.size()))) { movePointerTo(((selectedRow) + 1)); } }<END_MOD>
<START_MOD>@org.junit.Test public void isPureRevertReturnsTrueForPureRevert() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); approve(r.getChangeId()); gApi.changes().id(r.getChangeId()).current().submit(); java.lang.String revertId = gApi.changes().id(r.getChangeId()).revert().get().id; assertThat(gApi.changes().id(revertId).isPureRevert()).isTrue(); }<END_MOD>
@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(new com.google.gerrit.reviewdb.client.PatchSet.Id(result.legacyId(), 1), <START_MOD>project, <END_MOD>"project.config")); }
@java.lang.Override protected void configureServlets() { java.lang.Class<? extends javax.servlet.Filter> authFilter; if (authConfig.isTrustContainerAuth()) { authFilter = com.google.gerrit.httpd.ContainerAuthFilter.class; } else if (authConfig.isGitBasicAuth()) { if ((authConfig.getAuthType()) == (OAUTH)) { authFilter = com.google.gerrit.httpd.ProjectOAuthFilter.class; } else { authFilter = com.google.gerrit.httpd.ProjectBasicAuthFilter.class; } } else { authFilter = com.google.gerrit.httpd.ProjectDigestFilter.class; } if (isHttpEnabled()) { java.lang.String git = GitOverHttpServlet.URL_REGEX; filterRegex(git).through(authFilter); serveRegex(git).with(com.google.gerrit.httpd.GitOverHttpServlet.class); } <START_MOD>filterRegex(com.google.gerrit.httpd.GitOverHttpModule.LFS_URL_REGEX).through(com.google.gerrit.httpd.ProjectBasicAuthFilter.class); <END_MOD>filter("/a/*").through(authFilter); }
<START_MOD>public com.google.gerrit.server.cache.PersistentCache.DiskStats diskStats();<END_MOD>
private void verifyJsonCommit(com.google.gitiles.CommitJsonData.Commit jsonCommit, org.eclipse.jgit.revwalk.RevCommit commit<START_MOD>) throws java.lang.Exception { com.google.gitiles.GitilesAccess access = new com.google.gitiles.TestGitilesAccess(repo.getRepository()).forRequest(null); com.google.gitiles.DateFormatter df = new com.google.gitiles.DateFormatter(access<END_MOD>, com.google.gitiles.DateFormatter<START_MOD>.Format.DEFAULT);<END_MOD> assertThat(jsonCommit.commit).isEqualTo(commit.name()); assertThat(jsonCommit.tree).isEqualTo(commit.getTree().name()); java.util.ArrayList<java.lang.String> expectedParents = new java.util.ArrayList<>(); for (int i = 0; i < (commit.getParentCount()); i++) { expectedParents.add(commit.getParent(i).name()); } assertThat(jsonCommit.parents).containsExactlyElementsIn(expectedParents); assertThat(jsonCommit.author.name).isEqualTo(commit.getAuthorIdent().getName()); assertThat(jsonCommit.author.email).isEqualTo(commit.getAuthorIdent().getEmailAddress()); assertThat(jsonCommit.author.time).isEqualTo(df.format(commit.getAuthorIdent())); assertThat(jsonCommit.committer.name).isEqualTo(commit.getCommitterIdent().getName()); assertThat(jsonCommit.committer.email).isEqualTo(commit.getCommitterIdent().getEmailAddress()); assertThat(jsonCommit.committer.time).isEqualTo(df.format(commit.getCommitterIdent())); assertThat(jsonCommit.message).isEqualTo(commit.getFullMessage()); }
@java.lang.Override protected void onLoad() { super.onLoad(); <START_MOD>refreshBranches<END_MOD>(); savedPanel = BRANCH; }
@org.junit.Test public void copyAllScoresOnTrivialRebase() throws java.lang.Exception { java.lang.String subject =   commit java.lang.String file = "a.txt"; java.lang.String contents = "contents"; codeReview.setCopyAllScoresOnTrivialRebase(true); saveLabelConfig(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent()); com.google.gerrit.acceptance.PushOneCommit.Result r1 = push.to(git, "refs/for/master"); merge(r1); push = pushFactory.create(db, user.getIdent(), "non-conflicting", "b.txt",   contents com.google.gerrit.acceptance.PushOneCommit.Result r2 = push.to(git, "refs/for/master"); merge(r2); git.checkout().setName(r1.getCommit().name()).call(); push = pushFactory.create(db, user.getIdent(), subject, file, contents); com.google.gerrit.acceptance.PushOneCommit.Result r3 = push.to(git, "refs/for/master"); <START_MOD>revision(r3).like(); assertApproval<END_MOD>(r3, 1); <START_MOD>rebase(r3); <END_MOD>assertApproval(r3, 1); }
<START_MOD>private static boolean isEmptyPath(java.lang.String path) { return (path.isEmpty()) || (path.equals("/")); }<END_MOD>
@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); threads = com.google.gerrit.pgm.util.ThreadLimiter.limitThreads(dbInjector, threads); checkNotSlaveMode(); disableLuceneAutomaticCommit(); <START_MOD>disableChangeCache(); <END_MOD>if ((version) == null) { version = com.google.gerrit.server.index.ChangeSchemas.getLatest().getVersion(); } com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); <START_MOD>globalConfig = dbInjector.getInstance(com.google.inject.Key.get(org.eclipse.jgit.lib.Config.class, com.google.gerrit.server.config.GerritServerConfig.class)); <END_MOD>index = sysInjector.getInstance(com.google.gerrit.server.index.IndexCollection.class).getSearchIndex(); int result = 0; try { index.markReady(false); index.deleteAll(); result = indexAll(); index.markReady(true); } catch (java.lang.Exception e) { throw die(e.getMessage(), e); } sysManager.stop(); dbManager.stop(); return result; }
<START_MOD>@java.lang.Override public void run() throws java.lang.Exception { if (!(currentUser.getCapabilities().canAdministrateServer())) { java.lang.String msg = java.lang.String.format("fatal: %s does not have \"Administrator\" capability.", currentUser.getUserName()); throw new com.google.gerrit.sshd.commands.UnloggedFailure(1, msg); } parseCommandLine(); if ((active) && (inactive)) { throw new com.google.gerrit.sshd.commands.UnloggedFailure(1, "You can't use both --active and --inactive"); } setAccount(); }<END_MOD>
private java.util.List<com.google.gerrit.extensions.webui.TopMenu.MenuItem> my(com.google.gerrit.server.account.VersionedAccountPreferences v, org.eclipse.jgit.lib.Repository allUsers) { java.util.List<com.google.gerrit.extensions.webui.TopMenu.MenuItem> my = my(v); if ((my.isEmpty()) && (!(v.isDefaults()))) { try { com.google.gerrit.server.account.VersionedAccountPreferences d = com.google.gerrit.server.account.VersionedAccountPreferences.forDefault(); d.load(allUsers); my = my(d); } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e) { com.google.gerrit.server.account.GetPreferences.log.warn( read default preferences e); } } if (my.isEmpty()) { my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem("Changes", "#/dashboard/self", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem("Drafts", "#/q/owner:self+is:draft", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem( Comments "#/q/has:draft", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem( <START_MOD>Edits "#/q/has:edit", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem( <END_MOD>Changes "#/q/is:watched+is:open", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem( Changes "#/q/is:starred", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem("Groups", "#/groups/self", null)); } return my; }
<START_MOD>private void registerCmEvents(net.codemirror.lib.CodeMirror cm) { cm.on("cursorActivity", updateActiveLine(cm)); cm.on("scroll", doScroll(otherCM(cm))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on("'j'", moveCursorDown(cm, 1))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on("'k'", moveCursorDown(cm, (-1)))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on("'o'", toggleOpenBox(cm))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on("Enter", toggleOpenBox(cm))); if (com.google.gerrit.client.Gerrit.isSignedIn()) { cm.addKeyMap(net.codemirror.lib.KeyMap.create().on("'c'", insertNewDraft(cm))); } }<END_MOD>
@java.lang.Override public void run() { int line = (cm.extras().hasActiveLine()) ? cm.getLineNumber(cm.extras().activeLine()) : 0; int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.DiffChunkInfo(cm.side(), line, 0, false), getDiffChunkComparator()); diffChunkNavHelper(chunks, <START_MOD>host<END_MOD>, res, dir); }
public org.eclipse.jgit.<START_MOD>lib<END_MOD>.<START_MOD>ObjectId<END_MOD> commit() throws<START_MOD> com.google.gwtorm.server.OrmException,<END_MOD> java.io.IOException { com.google.gerrit.server.notedb.<START_MOD>NoteDbUpdateManager<END_MOD> <START_MOD>updateManager<END_MOD> = <START_MOD>updateManagerProvider.get<END_MOD>(); <START_MOD>updateManager.add<END_MOD>(<START_MOD>this<END_MOD>); <START_MOD>updateManager<END_MOD>.<START_MOD>execute<END_MOD>(); return <START_MOD>getResult<END_MOD>(); }
<START_MOD>public com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> byChange(final com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { return com.google.common.collect.FluentIterable.from(dbProvider.get().starredChanges().byChange(changeId)).transform(new com.google.common.base.Function<com.google.gerrit.reviewdb.client.StarredChange, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public com.google.gerrit.reviewdb.client.Change.Id apply(com.google.gerrit.reviewdb.client.StarredChange in) { return in.getAccountId(); } }).toSet(); } return com.google.common.collect.FluentIterable.from(getRefNames(RefNames.REFS_STARRED_CHANGES)).filter(new com.google.common.base.Predicate<java.lang.String>() { @java.lang.Override public boolean apply(java.lang.String refPart) { return refPart.endsWith(("-" + (changeId.get()))); } }).transform(new com.google.common.base.Function<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public com.google.gerrit.reviewdb.client.Change.Id apply(java.lang.String refPart) { return Account.Id.fromRefPart(refPart); } }).toSet(); }<END_MOD>
<START_MOD>@java.lang.Override protected void onLoad() { super.onLoad(); com.google.gerrit.client.changes.ChangeApi.detail(changeId.get(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeInfo info) { loadConfigInfo(info); } }); }<END_MOD>
<START_MOD>private void processManifestChange(com.amd.gerrit.plugins.manifestsubscription.Event event, java.lang.String projectName, java.lang.String branchName) { com.amd.gerrit.plugins.manifestsubscription.VersionedManifests versionedManifests; try { versionedManifests = parseManifests(event); if (versionedManifests != null) { com.amd.gerrit.plugins.manifestsubscription.CanonicalManifest cManifest = new com.amd.gerrit.plugins.manifestsubscription.CanonicalManifest(versionedManifests); java.util.Map<java.lang.String, com.amd.gerrit.plugins.manifestsubscription.manifest.Manifest> manifests = versionedManifests.getManifests(); com.amd.gerrit.plugins.manifestsubscription.manifest.Manifest manifest; java.lang.String store = enabledManifestRepos.get(projectName).getStore(); com.google.common.collect.Table<java.lang.String, java.lang.String, java.lang.String> lookup = com.google.common.collect.HashBasedTable.create(); for (java.lang.String path : manifests.keySet()) { java.lang.String bp = (branchName + "/") + path; try { manifest = cManifest.getCanonicalManifest(path); watchCanonicalManifest(manifest, store, bp); com.amd.gerrit.plugins.manifestsubscription.VersionedManifests.affixManifest(gitRepoManager, manifest, lookup); updateManifest(store, ((com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.STORE_BRANCH_PREFIX) + bp), manifest); } catch (com.amd.gerrit.plugins.manifestsubscription.ManifestReadException e) { e.printStackTrace(); } } } } catch (javax.xml.bind.JAXBException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { e.printStackTrace(); } }<END_MOD>
public java.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException( change found } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError(( looking up change   + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } <START_MOD>return prologRule.evaluate(cd<END_MOD>, <START_MOD>opts); }<END_MOD>
protected com.google.gitiles.FakeHttpServletResponse buildResponse(java.lang.String path, java.lang.String queryString, int expectedStatus) throws java.lang.Exception { com.google.gitiles.FakeHttpServletRequest req = com.google.gitiles.FakeHttpServletRequest.newRequest(<START_MOD>); req.setHeader(HttpHeaders.ORIGIN, "http://localhost"<END_MOD>); req.setPathInfo(path); if (queryString != null) { req.setQueryString(queryString); } com.google.gitiles.FakeHttpServletResponse res = new com.google.gitiles.FakeHttpServletResponse(); servlet.service(req, res); assertThat(res.getStatus()).isEqualTo(expectedStatus); return res; }
com.google.gerrit.server.git.AbandonOp create(@com.google.inject.assistedinject.Assisted @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account, @com.google.inject.assistedinject.Assisted @com.google.gerrit.common.Nullable java.lang.String msgTxt, @com.google.inject.assistedinject.Assisted com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling<START_MOD>, @com.google.inject.assistedinject.Assisted @com.google.gerrit.common.Nullable com.google.common.collect.Multimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify<END_MOD>);
<START_MOD>public boolean testOrFalse(com.google.gerrit.server.permissions.ChangePermissionOrLabel perm) { try { return test(perm); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { return false; } }<END_MOD>
@org.junit.Test public void nameOfNewGroupMustNotBeNull() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage( of the <START_MOD>account<END_MOD> users-XYZ groupConfig.commit(metaDataUpdate); } }
<START_MOD>public <T extends com.google.gwt.core.client.JavaScriptObject> void put(com.google.gwtjsonrpc.common.AsyncCallback<T> cb) { send(RequestBuilder.PUT, cb); }<END_MOD>
<START_MOD>com.google.gerrit.server.change.Optional<com.google.gerrit.server.edit.ChangeEdit> getEdit() { return edit; }<END_MOD>
<START_MOD>private void processProjectConfigChange(com.amd.gerrit.plugins.manifestsubscription.Event event) { com.google.gerrit.reviewdb.client.Project.NameKey p = new com.google.gerrit.reviewdb.client.Project.NameKey(event.getProjectName()); try { com.google.gerrit.server.git.ProjectConfig oldCfg = parseConfig(p, event.getOldObjectId()); com.google.gerrit.server.git.ProjectConfig newCfg = parseConfig(p, event.getNewObjectId()); if (oldCfg != null) { java.lang.String oldStore = oldCfg.getPluginConfig(pluginName).getString(com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.KEY_STORE); if ((oldStore != null) && (!(oldStore.isEmpty()))) { stores.remove(oldStore); enabledManifestRepos.remove(event.getProjectName()); java.util.Iterator<Table.Cell<com.amd.gerrit.plugins.manifestsubscription.ProjectBranchKey, java.lang.String, java.util.Set<java.lang.String>>> iter = subscribedRepos.cellSet().iterator(); while (iter.hasNext()) { if (oldStore.equals(iter.next().getColumnKey())) { iter.remove(); } } } } if (newCfg != null) { loadStoreFromProjectConfig(event.getProjectName(), newCfg); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { e.printStackTrace(); } }<END_MOD>
public com.google.gerrit.extensions.common.RevisionInfo getRevisionInfo(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet in) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.<START_MOD>gerrit.server.permissions.PermissionBackendException, com.google.<END_MOD>gwtorm.server.OrmException, java.io.IOException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { com.google.gerrit.extensions.common.RevisionInfo rev = toRevisionInfo(cd, in, repo, rw, true, null); accountLoader.fill(); return rev; } }
<START_MOD>public static com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage of(@com.google.gerrit.common.Nullable com.google.gerrit.server.notedb.NoteDbChangeState state) { return state != null ? state.getPrimaryStorage() : com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage.REVIEW_DB; }<END_MOD>
@java.lang.Override protected void onLoad() { file.set(id, content); file.setText(fileName); file.setEnabled(fileName.isEmpty()); content.setText(fileContent); save.setEnabled(false); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { <START_MOD>if (com.google.common.base.Strings.isNullOrEmpty(fileName)) { <END_MOD>file.setFocus(true); } <START_MOD>else { content.setFocus(true); } } <END_MOD>}); }
<START_MOD>public void assertCanDelete(com.google.gerrit.server.project.ProjectResource rsrc) throws com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException { if (!(cfgFactory.getFromGerritConfig(pluginName).getBoolean("allowDeletionOfReposWithTags", true))) { assertHasNoTags(rsrc); } }<END_MOD>
void set(com.google.gerrit.client.ui.CommentLinkProcessor commentLinkProcessor, com.google.gerrit.client.changes.ChangeInfo change, java.lang.String revision) { com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revInfo = change.revision(revision); com.google.gerrit.client.changes.ChangeInfo.CommitInfo commit = revInfo.commit(); commitName.setText(revision); idText.setText((   + (change.change_id()))); idText.setPreviewText(change.change_id()); com.google.gerrit.client.change.CommitBox.formatLink(commit.author(), authorPanel, authorNameEmail, authorDate, change); com.google.gerrit.client.change.CommitBox.formatLink(commit.committer(), committerPanel, committerNameEmail, committerDate, change); text.setHTML(commentLinkProcessor.apply(new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(commit.message()).linkify())); setWebLinks(change, revision, revInfo); if ((revInfo.commit().parents().length()) > 1) { mergeCommit.setVisible(true); } setParents(change.project(), revInfo.commit().parents()); <START_MOD>setParentNotCurrent(<END_MOD>false); }
private org.eclipse.jetty.util.thread.ThreadPool threadPool(org.eclipse.jgit.lib.Config cfg) { int maxThreads = cfg.getInt("httpd", null, "maxthreads", 25); int minThreads = cfg.getInt("httpd", null, "minthreads", 5); int <START_MOD>maxQueued = cfg.getInt("httpd", null, "maxqueued", 50); int idleTimeout = ((int) (java.util.concurrent.TimeUnit.MILLISECONDS.convert(60, java.util.concurrent.TimeUnit.SECONDS))); int <END_MOD>maxCapacity = <START_MOD>(maxQueued == 0) ? java.lang.Integer.MAX_VALUE : maxQueued<END_MOD>; org.eclipse.jetty.util.thread.QueuedThreadPool pool = new org.eclipse.jetty.util.thread.QueuedThreadPool(maxThreads, minThreads, idleTimeout, new org.eclipse.jetty.util.BlockingArrayQueue<java.lang.Runnable>(minThreads, minThreads, maxCapacity)); pool.setName("HTTP"); return pool; }
<START_MOD>@java.lang.Override public com.google.gerrit.common.data.ExtGroup get(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return requireBackend(uuid).get(uuid); }<END_MOD>
private static void checkMutuallyExclusiveLabels(java.util.Set<java.lang.String> labels) throws com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException { if (labels.containsAll(com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.StarredChangesUtil.DEFAULT_LABEL, com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL))) { throw new com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException(com.google.gerrit.server.StarredChangesUtil.DEFAULT_LABEL, com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL); } <START_MOD>if ((labels.stream().filter(( l) -> l.startsWith(com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL)).findAny().isPresent()) && (labels.stream().filter(( l) -> l.startsWith(com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL)).findAny().isPresent())) { throw new com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException(com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL, com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL); <END_MOD>}<START_MOD> }<END_MOD>
@org.junit.Test public void applyDeltaToNoteDbPrimaryIsNoOp()<START_MOD> throws java.lang.Exception<END_MOD> { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.server.notedb.NoteDbChangeStateTest.newChange(); c.setNoteDbState("N"); com.google.gerrit.server.notedb.NoteDbChangeState.applyDelta(c, com.google.gerrit.server.notedb.NoteDbChangeState.Delta.create(c.getId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.metaId(SHA1), com.google.gerrit.server.notedb.NoteDbChangeStateTest.drafts(new com.google.gerrit.reviewdb.client.Account.Id(1001), SHA2))<START_MOD>, com.google.gerrit.common.TimeUtil.nowTs()<END_MOD>); assertThat(c.getNoteDbState()).isEqualTo("N"); }
private boolean add(com.google.gerrit.server.mail.ProjectWatch.Watchers matching, com.google.gerrit.reviewdb.client.<START_MOD>Account.Id accountId, com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key, java.util.Collection<com.google.gerrit.reviewdb.client.<END_MOD>AccountProjectWatch<START_MOD>.NotifyType> watchedTypes<END_MOD>, com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = args.identifiedUserFactory.create(<START_MOD>accountId<END_MOD>); try { if (filterMatch(user, <START_MOD>key.filter<END_MOD>())) { if (<START_MOD>watchedTypes.contains<END_MOD>(type)) { matching.bcc.accounts.add(<START_MOD>accountId<END_MOD>); } return true; } } catch (com.google.gerrit.server.query.QueryParseException e) { } return false; }
public static synchronized java.io.File createTempDirectory() throws java.io.IOException { java.io.File tmp = java.io.File.createTempFile("gerrit_test_", ""<START_MOD>); tmp = tmp.getCanonicalFile(<END_MOD>); if ((!(tmp.delete())) || (!(tmp.mkdir()))) { throw new java.io.IOException(( create   + (tmp.getPath()))); } com.google.gerrit.acceptance.TempFileUtil.allDirsCreated.add(tmp); return tmp; }
private static java.nio.file.Path getOrCreateDataDir(com.googlesource.gerrit.plugins.lfs.LfsConfig config, java.nio.file.Path defaultDataDir) throws java.io.IOException { java.lang.String dataDir = config.<START_MOD>getGlobalConfig<END_MOD>().getString(LfsBackend.FS.name(), null, "directory"); if (com.google.common.base.Strings.isNullOrEmpty(dataDir)) { return defaultDataDir; } java.nio.file.Path ensured = java.nio.file.Files.createDirectories(java.nio.file.Paths.get(dataDir)); if (!(java.nio.file.Files.isReadable(ensured))) { throw new java.io.IOException(((   + (ensured.toAbsolutePath())) +   cannot be accessed } return ensured; }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.config.SitePaths.class); bind(com.google.gerrit.pgm.init.api.InitFlags.class); bind(com.google.gerrit.pgm.init.Libraries.class); bind(com.google.gerrit.pgm.init.LibraryDownloader.class); factory(Section.Factory.class); step().to(com.google.gerrit.pgm.init.UpgradeFrom2_0_x.class); step().to(com.google.gerrit.pgm.init.InitGitManager.class); if (initDb) { step().to(com.google.gerrit.pgm.init.InitDatabase.class); } step().to(com.google.gerrit.pgm.init.InitIndex.class); step().to(com.google.gerrit.pgm.init.InitAuth.class); step().to(com.google.gerrit.pgm.init.InitLabels.class); step().to(com.google.gerrit.pgm.init.InitSendEmail.class); if (standalone) { step().to(com.google.gerrit.pgm.init.InitContainer.class); } step().to(com.google.gerrit.pgm.init.InitSshd.class); step().to(com.google.gerrit.pgm.init.InitHttpd.class); step().to(com.google.gerrit.pgm.init.InitCache.class); step().to(com.google.gerrit.pgm.init.<START_MOD>InitAdminUser.class); step().to(com.google.gerrit.pgm.init.<END_MOD>InitPlugins.class); }
<START_MOD>@org.junit.Test public void addedRobotCommentsCanBeRetrievedByChange() throws java.lang.Exception { assume().that(notesMigration.enabled()).isTrue(); com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput in = createRobotCommentInput(); addRobotComment(changeId, in); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.RobotCommentInfo>> out = gApi.changes().id(changeId).robotComments(); assertThat(out).hasSize(1); com.google.gerrit.extensions.common.RobotCommentInfo comment = com.google.common.collect.Iterables.getOnlyElement(out.get(in.path)); assertRobotComment(comment, in, false); }<END_MOD>
@java.lang.Override protected <START_MOD>java<END_MOD>.<START_MOD>util<END_MOD>.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size()) != 3) { return <START_MOD>java<END_MOD>.<START_MOD>util<END_MOD>.Optional.<START_MOD>empty<END_MOD>(); } return <START_MOD>java<END_MOD>.<START_MOD>util<END_MOD>.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2))); }
static java.lang.String toJson(java.lang.String cacheName, java.lang.Object key) { com.google.gson.Gson gson = new com.google.gson.GsonBuilder().create(); java.lang.String json; switch (cacheName) { case com.ericsson.gerrit.plugins.<START_MOD>highavailability.cache.CacheContants<END_MOD>.ACCOUNTS : json = gson.toJson(key, Account.Id.class); break; case com.ericsson.gerrit.plugins.<START_MOD>highavailability.cache.CacheContants<END_MOD>.GROUPS : json = gson.toJson(key, AccountGroup.Id.class); break; case com.ericsson.gerrit.plugins.<START_MOD>highavailability.cache.CacheContants<END_MOD>.GROUPS_BYINCLUDE : case com.ericsson.gerrit.plugins.<START_MOD>highavailability.cache.CacheContants<END_MOD>.GROUPS_MEMBERS : json = gson.toJson(key, AccountGroup.UUID.class); break; case com.ericsson.gerrit.plugins.<START_MOD>highavailability.cache.CacheContants<END_MOD>.PROJECT_LIST : default : json = gson.toJson(key); } return json; }
@java.lang.Override protected com.google.gerrit.server.git.CodeReviewCommit _run(com.google.gerrit.server.git.CodeReviewCommit mergeTip, java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.MergeException { args.mergeUtil.reduceToMinimalMerge(args.mergeSorter, toMerge); if (mergeTip == null) { mergeTip = toMerge.remove(0); } mergeTip = args.mergeUtil.getFirstFastForward(mergeTip, args.rw, toMerge); while (!(toMerge.isEmpty())) { mergeTip = args.mergeUtil.mergeOneCommit(args.myIdent<START_MOD>.get()<END_MOD>, args.repo, args.rw, args.inserter, args.canMergeFlag, args.destBranch, mergeTip, toMerge.remove(0)); } final com.google.gerrit.reviewdb.client.PatchSetApproval submitApproval = args.mergeUtil.markCleanMerges(args.rw, args.canMergeFlag, mergeTip, args.alreadyAccepted); setRefLogIdent(submitApproval); return mergeTip; }
private void display(com.google.gerrit.client.account.Preferences p) { showSiteHeader.setValue(p.showSiteHeader()); copySelfOnEmails.setValue(p.copySelfOnEmail()); setListBox(maximumPageSize, com.google.gerrit.client.account.DEFAULT_PAGESIZE, p.changesPerPage()); setListBox(dateFormat, AccountGeneralPreferences.DateFormat.STD, p.dateFormat()); setListBox(timeFormat, AccountGeneralPreferences.TimeFormat.HHMM_12, p.timeFormat()); relativeDateInChangeTable.setValue(p.relativeDateInChangeTable()); sizeBarInChangeTable.setValue(p.sizeBarInChangeTable()); legacycidInChangeTable.setValue(p.legacycidInChangeTable()); muteCommonPathPrefixes.setValue(p.muteCommonPathPrefixes()); setListBox(reviewCategoryStrategy, AccountGeneralPreferences.ReviewCategoryStrategy.NONE, p.reviewCategoryStrategy()); setListBox(diffView, AccountGeneralPreferences.DiffView.SIDE_BY_SIDE, p.diffView()); display(p.my()); }
@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { if ((args.projectCache) != null) { projectState = args.projectCache.get(change.getProject()); } else { projectState = null; } if ((patchSet) == null) { try { patchSet = changeData.currentPatchSet(); } catch (com.google.gwtorm.server.OrmException err) { patchSet = null; } } if ((patchSet) != null) { setHeader("X-Gerrit-PatchSet", ((patchSet.getPatchSetId()) + "")); if ((patchSetInfo) == null) { try { patchSetInfo = args.patchSetInfoFactory.get(args.db.get(), changeData.notes(), patchSet.getId()); } catch (com.google.gerrit.server.patch.PatchSetInfoNotAvailableException | com.google.gwtorm.server.OrmException err) { patchSetInfo = null; } } } authors = getAuthors(); super.init(); if ((timestamp) != null) { setHeader("Date", new java.util.Date(timestamp.getTime())); } setChangeSubjectHeader(); setHeader("X-Gerrit-Change-Id", ("" + (change.getKey().get()))); <START_MOD>setHeader("X-Gerrit-Numeric-Change-Id", ("" + (change.getChangeId()))); <END_MOD>setChangeUrlHeader(); setCommitIdHeader(); }
java.util.List<org.eclipse.jgit.transport.URIish> getURIs(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String urlMatch) { java.util.List<org.eclipse.jgit.transport.URIish> r = com.google.common.collect.Lists.newArrayListWithCapacity(remote.getURIs().size()); <START_MOD>if ((!(replicatesSingleProject())) || (getProject().equals(project))) { <END_MOD>for (org.eclipse.jgit.transport.URIish uri : remote.getURIs()) { if (com.googlesource.gerrit.plugins.replication.Destination.matches(uri, urlMatch)) { java.lang.String name = project.get(); if (com.googlesource.gerrit.plugins.replication.Destination.needsUrlEncoding(uri)) { name = com.googlesource.gerrit.plugins.replication.Destination.encode(name); } if (remoteNameStyle.equals("dash")) { name = name.replace("/", "-"); } else if (remoteNameStyle.equals("underscore")) { name = name.replace("/", "_"); } else if (!(remoteNameStyle.equals("slash"))) { ReplicationQueue.log.debug(java.lang.String.format( remoteNameStyle: %s, falling back to slash remoteNameStyle)); } java.lang.String replacedPath = com.googlesource.gerrit.plugins.replication.ReplicationQueue.replaceName(uri.getPath(), name<START_MOD>, replicatesSingleProject()<END_MOD>); if (replacedPath != null) { uri = uri.setPath(replacedPath); r.add(uri); } } } <START_MOD>} <END_MOD>return r; }
<START_MOD>public java.util.List<com.google.gerrit.reviewdb.RefRight> getAllRights(final com.google.gerrit.reviewdb.ApprovalCategory.Id id) { java.util.List<com.google.gerrit.reviewdb.RefRight> l = new java.util.ArrayList<com.google.gerrit.reviewdb.RefRight>(); l.addAll(getLocalRights(id)); l.addAll(getInheritedRights(id)); java.util.Collections.sort(l, RefRight.REF_PATTERN_ORDER); l = java.util.Collections.unmodifiableList(com.google.gerrit.server.project.RefControl.filterMostSpecific(l)); return l; }<END_MOD>
<START_MOD>public static <S extends com.google.common.truth.Subject<S, E>, E> com.google.gerrit.acceptance.ListSubject<S, E> assertThat(java.util.List<E> list, java.util.function.Function<E, S> elementAssertThatFunction) { return ((com.google.gerrit.acceptance.ListSubject<S, E>) (assertAbout(new com.google.gerrit.acceptance.ListSubject.ListSubjectFactory(elementAssertThatFunction)).that(list))); }<END_MOD>
public boolean canReadCommit(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit) { try { <START_MOD>try (<END_MOD>org.eclipse.jgit.lib.Repository repo = openRepository()<START_MOD>)<END_MOD> { return isMergedIntoVisibleRef(repo, db, rw, commit, repo.getAllRefs().values()); } } catch (java.io.IOException e) { java.lang.String msg = java.lang.String.format( verify permissions to commit object %s in repository %s commit.name(), getProject().getNameKey()); com.google.gerrit.server.project.ProjectControl.log.error(msg, e); return false; } }
private boolean canRegisterNewEmail() { return com.google.gerrit.client.Gerrit.<START_MOD>getInfo().auth<END_MOD>().canEdit(Account.FieldName.REGISTER_NEW_EMAIL); }
<START_MOD>private com.google.gerrit.server.change.PostReviewers.Addition fail(java.lang.String reviewer, boolean confirm, java.lang.String error) { com.google.gerrit.server.change.PostReviewers.Addition addition = new com.google.gerrit.server.change.PostReviewers.Addition(reviewer); addition.result.needsConfirmation = (confirm) ? true : null; addition.result.error = error; return addition; }<END_MOD>
<START_MOD>@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "accounts.visibility", value = "SAME_GROUP") public void suggestReviewersSameGroupVisibility() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo> reviewers; reviewers = suggestReviewers(changeId, "user2", 2); assertEquals("User2", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user1), changeId, "user2", 2); assertTrue(reviewers.isEmpty()); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user2), changeId, "user2", 2); assertEquals("User2", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user3), changeId, "user2", 2); assertEquals("User2", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); }<END_MOD>
private void fireCommentAddedEvent(com.google.gerrit.server.update.Context ctx) throws com.google.gwtorm.server.OrmException<START_MOD>, java.io.IOException<END_MOD> { if (approvals.isEmpty()) { return; } <START_MOD>java.util.List<<END_MOD>com.google.gerrit.<START_MOD>common.data.LabelType> labels<END_MOD> = <START_MOD>projectCache.checkedGet(ctx.getProject()).getLabelTypes(<END_MOD>notes<START_MOD>, ctx.getUser()).getLabelTypes(); java.util.Map<java.lang.String, java.lang.Short> allApprovals = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Short> oldApprovals = new java.util.HashMap<>(); for (com.google.gerrit.common.data.LabelType lt : labels) { allApprovals.put(lt.getName(), ((short) (0))); oldApprovals.put(lt.getName(), null); } for (java.util.Map.Entry<java.lang.String, java.lang.Short> entry : approvals.entrySet()) { if ((entry.getValue()) != 0) { allApprovals.put(entry.getKey(), entry.getValue()); oldApprovals.put(entry.getKey(), ((short) (0))); } } commentAdded.fire(notes<END_MOD>.getChange(), <START_MOD>newPatchSet, ctx.getAccount(), null,<END_MOD> allApprovals<START_MOD>,<END_MOD> oldApprovals, ctx.getWhen()); }
protected org.eclipse.jgit.revwalk.RevCommit getRemoteHead(<START_MOD>com.google.gerrit.reviewdb.client.Project... projects<END_MOD>) throws java.io.IOException {<START_MOD> assertThat(projects.length).isLessThan(2); com.google.gerrit.reviewdb.client.Project.NameKey project = this.project; if ((projects.length) > 0) { project = projects[0]; }<END_MOD> try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { return getHead(repo, "refs/heads/master"); } }
<START_MOD>public java.util.List<com.google.gerrit.extensions.common.AccountInfo> getDirectMembers(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> directMembers = com.google.gerrit.server.group.ListMembers.getDirectMemberIds(group, groupControl); return toAccountInfos(directMembers); }<END_MOD>
private void executeUpdateRepo() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { try { com.google.gerrit.server.git.BatchUpdate.RepoContext ctx = new com.google.gerrit.server.git.BatchUpdate.RepoContext(); for (com.google.gerrit.server.git.BatchUpdate.Op op : ops.values()) { op.updateRepo(ctx); } if ((inserter) != null) { inserter.flush(); } } catch (java.lang.Exception e) { com.google.common.base.Throwables.<START_MOD>throwIfInstanceOf<END_MOD>(e, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.git.UpdateException(e); } }
@java.lang.Override <START_MOD>protected<END_MOD> void <START_MOD>preDisplay<END_MOD>(java.lang.<START_MOD>Void<END_MOD> result) { <START_MOD>setShowTabs(prefs.showTabs()); initEditor(content.text()); content<END_MOD> = <START_MOD>null<END_MOD>; }
private com.google.gerrit.pgm.Init.SiteInit createSiteInit() { final com.google.gerrit.pgm.util.ConsoleUI ui = com.google.gerrit.pgm.util.ConsoleUI.getInstance(batchMode); final java.io.File sitePath = getSitePath(); final java.util.List<java.lang.Module> m = new java.util.ArrayList<java.lang.Module>(); m.add(new com.google.gerrit.pgm.init.InitModule()); m.add(new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.pgm.util.ConsoleUI.class).toInstance(ui); bind(java.io.File.class).annotatedWith(com.google.gerrit.server.config.SitePath.class).toInstance(sitePath); bind(com.google.gerrit.pgm.init.ReloadSiteLibrary.class).toInstance(new com.google.gerrit.pgm.init.ReloadSiteLibrary() { @java.lang.Override public void reload() { com.google.gerrit.pgm.Init.super.loadSiteLib(); } }); } }); try { return com.google.inject.Guice.createInjector(com.google.gerrit.pgm.PRODUCTION, m).getInstance(com.google.gerrit.pgm.Init.SiteInit.class); } catch (com.google.inject.CreationException ce) { final com.google.inject.spi.Message first = ce.getErrorMessages().iterator().next(); java.lang.Throwable why = first.getCause(); if (why instanceof com.google.gerrit.pgm.util.Die) { throw ((com.google.gerrit.pgm.util.Die) (why)); } final java.lang.StringBuilder buf = new java.lang.StringBuilder(<START_MOD>ce.getLocalizedMessage()<END_MOD>); while (why != null) { buf.append(why.getMessage()); why = why.getCause(); if (why != null) { buf.append( caused by   } } throw die(buf.toString(), new java.lang.RuntimeException( failed ce)); } }
private void initSubmitType() { submitTypePanel = new com.google.gwt.user.client.ui.VerticalPanel(); submitTypePanel.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingSubmitType())); submitType = new com.google.gwt.user.client.ui.ListBox(); for (final com.google.gerrit.reviewdb.Project.SubmitType type : Project.SubmitType.values()) { submitType.addItem(com.google.gerrit.client.admin.Util.toLongString(type), type.name()); } <START_MOD>saveEnabler.listenTo(<END_MOD>submitType); submitTypePanel.add(submitType); add(submitTypePanel); }
@java.lang.Override public final void updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx) throws java.lang.Exception { logDebug( for change {} getClass().getSimpleName(), toMerge.change().getId()); com.google.gerrit.server.git.CodeReviewCommit tipBefore = args.mergeTip.getCurrentTip(); alreadyMerged = getAlreadyMergedCommit(ctx); if ((alreadyMerged) == null) { updateRepoImpl(ctx); } else { logDebug( merged as {} alreadyMerged.name()); } com.google.gerrit.server.git.CodeReviewCommit tipAfter = args.mergeTip.getCurrentTip(); if (java.util.Objects.equals(tipBefore, tipAfter)) { logDebug( not move tip getClass().getSimpleName()); return; } else if (tipAfter == null) { logDebug( merge tip, no update to perform return; } logDebug( tip from {} to {} tipBefore, tipAfter); checkProjectConfig(ctx, tipAfter); command = new org.eclipse.jgit.transport.ReceiveCommand(firstNonNull(tipBefore, org.eclipse.jgit.lib.ObjectId.zeroId()), tipAfter, getDest().get()); <START_MOD>validateRefUpdate(ctx, tipBefore, tipAfter); <END_MOD>ctx.addRefUpdate(command); args.submoduleOp.addBranchTip(getDest(), tipAfter); }
<START_MOD>@java.lang.Override public com.google.gerrit.reviewdb.AccountDiffPreference run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.account.Failure, com.google.gerrit.server.account.NoSuchGroupException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.client.OrmException { return db.accountDiffPreferences().get(currentUser.get().getAccountId()); }<END_MOD>
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { ui.message( Superproject subscriptions table to submodule ACLs try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery((   + ((((   +     +     +     +   submodule_subscriptions { while (rs.next()) { com.google.gerrit.reviewdb.client.Project.NameKey superproject = new com.google.gerrit.reviewdb.client.Project.NameKey(rs.getString(1)); com.google.gerrit.reviewdb.client.Branch.NameKey superbranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(superproject, rs.getString(2)); com.google.gerrit.reviewdb.client.Project.NameKey submodule = new com.google.gerrit.reviewdb.client.Project.NameKey(rs.getString(4)); com.google.gerrit.reviewdb.client.Branch.NameKey subbranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(submodule, rs.getString(5)); allowSubmoduleSubscription(subbranch, superbranch); } } }
private void loadFileContent() { com.google.gerrit.client.changes.<START_MOD>ChangeEditApi<END_MOD>.<START_MOD>get<END_MOD>(id, getText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.<START_MOD>ChangeEditApi<END_MOD>.FileContent>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.<START_MOD>ChangeEditApi<END_MOD>.FileContent result) { textArea.setText(result.text()); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if (com.google.gerrit.client.rpc.RestApi.isNotFound(caught)) { } else { super.onFailure(caught); } } }); }
<START_MOD>protected static <T> java.util.List<T> decodeProtos(com.google.gson.JsonObject doc, java.lang.String fieldName, com.google.gwtorm.protobuf.ProtobufCodec<T> codec) { return com.google.common.collect.FluentIterable.from(doc.getAsJsonArray(fieldName)).transform(( i) -> codec.decode(org.apache.commons.codec.binary.Base64.decodeBase64(i.toString()))).toList(); }<END_MOD>
public static com.google.gitiles.BaseServlet notFoundServlet() { return new com.google.gitiles.BaseServlet(<START_MOD>null, <END_MOD>null, null) { private static final long serialVersionUID = 1L; @java.lang.Override public void service(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) { res.setStatus(com.google.gitiles.SC_NOT_FOUND); } }; }
<START_MOD>private com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection newReviewerFilterSection(java.lang.String filter) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> b = com.google.common.collect.ImmutableSet.builder(); for (java.lang.String reviewer : cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER)) { b.add(reviewer); } return new com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection(filter, b.build()); }<END_MOD>
<START_MOD>@org.junit.Test public void createBranch() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.extensions.api.projects.ProjectApi pApi = gApi.projects().forName(project.get()); com.google.gerrit.extensions.api.projects.BranchInput in = new com.google.gerrit.extensions.api.projects.BranchInput(); in.ref = "foo"; pApi.createBranch(in); }<END_MOD>
private static com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> callback(final java.lang.String target) { return new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject in) { com.google.gerrit.client.api.DefaultActions.UiResult result = asUiResult(in); if (<START_MOD>result == null) { com.google.gerrit.client.Gerrit.display(target); } if (<END_MOD>(result.alert()) != null) { com.google.gwt.user.client.Window.alert(result.alert()); } if (((result.redirectUrl()) != null) && (result.openWindow())) { com.google.gwt.user.client.Window.open(result.redirectUrl(), "_blank", null); } else if ((result.redirectUrl()) != null) { com.google.gwt.user.client.Window.Location.assign(result.redirectUrl()); } else { com.google.gerrit.client.Gerrit.display(target); } } private com.google.gerrit.client.api.DefaultActions.UiResult asUiResult(com.google.gwt.core.client.JavaScriptObject in) { if (com.google.gerrit.client.rpc.NativeString.is(in)) { java.lang.String str = ((com.google.gerrit.client.rpc.NativeString) (in)).asString(); return str.isEmpty() ? com.google.gerrit.client.api.DefaultActions.UiResult.none() : com.google.gerrit.client.api.DefaultActions.UiResult.alert(str); } return in.cast(); } }; }
<START_MOD>@org.junit.Test public void submitWholeTopicMultipleBranchesOnSameProject() throws java.lang.Exception { assume().that(isSubmitWholeTopicEnabled()).isTrue(); java.lang.String topic = "test-topic"; org.eclipse.jgit.junit.TestRepository<?> repoA = createProjectWithPush("project-a", null, getSubmitType()); com.google.gerrit.extensions.api.projects.BranchInput in = new com.google.gerrit.extensions.api.projects.BranchInput(); gApi.projects().name(name("project-a")).branch("dev").create(in); com.google.gerrit.acceptance.PushOneCommit.Result change1 = createChange(repoA, "master", "Change 1", "a.txt", "content", topic); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(repoA, "master", "Change 2", "b.txt", "content", topic); com.google.gerrit.acceptance.PushOneCommit.Result change3 = createChange(repoA, "dev", "Change 3", "a.txt", "content", topic); com.google.gerrit.acceptance.PushOneCommit.Result change4 = createChange(repoA, "dev", "Change 4", "b.txt", "content", topic); approve(change1.getChangeId()); approve(change2.getChangeId()); approve(change3.getChangeId()); approve(change4.getChangeId()); submit(change4.getChangeId()); java.lang.String expectedTopic = name(topic); change1.assertChange(Change.Status.MERGED, expectedTopic, admin); change2.assertChange(Change.Status.MERGED, expectedTopic, admin); change3.assertChange(Change.Status.MERGED, expectedTopic, admin); change4.assertChange(Change.Status.MERGED, expectedTopic, admin); }<END_MOD>
@com.google.gwt.uibinder.client.UiHandler("add") void onAdd(com.google.gwt.event.dom.client.ClickEvent e) { java.lang.String hashtag = hashtagTextBox.getText(); <START_MOD>while (hashtag.startsWith("#")) { hashtag = hashtag.substring(1); } <END_MOD>if (!(hashtag.isEmpty())) { addHashtag(hashtag); } }
public void remove(com.google.gerrit.common.data.AccessSection section) { if (section != null) { <START_MOD>com.google.gerrit.common.data.AccessSection a = <END_MOD>accessSections.<START_MOD>get<END_MOD>(section.getName()); <START_MOD>if (!(a.hasMoreConfig())) { accessSections.remove(a); } else { a.setPermissions(new java.util.ArrayList<com.google.gerrit.common.data.Permission>()); <END_MOD>} }<START_MOD> }<END_MOD>
@org.junit.Test public void testPushForMasterWithNotify() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount user2 = accounts.user2(); java.lang.String pushSpec = ((("refs/for/master" + "%reviewer=") + (user.email)) + ",cc=") + (user2.email); sender.clear(); com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo(((pushSpec + ",notify=") + (com.google.gerrit.extensions.api.changes.<START_MOD>ReviewNotification<END_MOD>.NONE))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(0); sender.clear(); r = pushTo(((pushSpec + ",notify=") + (com.google.gerrit.extensions.api.changes.<START_MOD>ReviewNotification<END_MOD>.OWNER))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(0); sender.clear(); r = pushTo(((pushSpec + ",notify=") + (com.google.gerrit.extensions.api.changes.<START_MOD>ReviewNotification<END_MOD>.OWNER_REVIEWERS))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(1); com.google.gerrit.testutil.FakeEmailSender.Message m = sender.getMessages().get(0); assertThat(m.rcpt()).containsExactly(user.emailAddress); sender.clear(); r = pushTo(((pushSpec + ",notify=") + (com.google.gerrit.extensions.api.changes.<START_MOD>ReviewNotification<END_MOD>.ALL))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(1); m = sender.getMessages().get(0); assertThat(m.rcpt()).containsExactly(user.emailAddress, user2.emailAddress); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.server.change.DeleteDraftPatchSet.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet patchSet = rsrc.getPatchSet(); com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId = patchSet.getId(); com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(patchSet.isDraft())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException( set is not a draft } if (!(allowDrafts)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException( workflow is disabled. } if (!(rsrc.getControl().canDeleteDraft(dbProvider.get()))) { throw new com.google.gerrit.extensions.restapi.AuthException( permitted to delete this draft patch set } deleteDraftPatchSet(patchSet, change); deleteOrUpdateDraftChange(patchSetId, change); return com.google.gerrit.extensions.restapi.Response.none(); }
<START_MOD>@java.lang.Override protected<END_MOD> void <START_MOD>prepare<END_MOD>(final com.google.gerrit.client.data.AccountDashboardInfo r) { display(r); }
public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = <START_MOD>changeFinder<END_MOD>.findChanges(id, user.get()); if (ctls.isEmpty()) { try { changeIndexer.delete(id); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id).get(), e); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } if ((ctls.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(( changes found for   + id)); } com.google.gerrit.server.project.ChangeControl ctl = ctls.get(0); if (!(ctl.isVisible(db.get()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } return new com.google.gerrit.server.change.ChangeResource(ctl); }
<START_MOD>@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> editby(java.lang.String who) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { return editby(parseAccount(who)); }<END_MOD>
public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create("revision", patchSetAttribute.revision)); properties.add(propertyFactory.create("patch-set-number", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(<START_MOD>"patchSetNumber", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(<END_MOD>"ref", patchSetAttribute.ref)); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(<START_MOD>"createdOn", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(<END_MOD>"parents", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create("deletions", java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create("insertions", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.add(propertyFactory.create("is-draft", java.lang.Boolean.toString(patchSetAttribute.isDraft))); properties.addAll(extractFrom(patchSetAttribute.uploader, "uploader")); properties.addAll(extractFrom(patchSetAttribute.author, "author")); return properties; }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.ProjectEvent)) { return; } com.google.gerrit.server.events.ProjectEvent projectEvent = ((com.google.gerrit.server.events.ProjectEvent) (event)); org.eclipse.jgit.lib.Config cfg; try { cfg = configFactory.getProjectPluginConfigWithInheritance(projectEvent.getProjectNameKey(), pluginName); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn( event for a non-existing project {}, {} projectEvent.getProjectNameKey().get(), projectEvent); return; } for (java.lang.String name : cfg.getSubsections(com.googlesource.gerrit.plugins.webhooks.<START_MOD>RemoteConfig<END_MOD>.REMOTE)) { <START_MOD>com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote<END_MOD> = <START_MOD>remoteFactory.create(<END_MOD>cfg, name); if (com.google.common.base.Strings.isNullOrEmpty(<START_MOD>remote.getUrl()<END_MOD>)) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn( not defined, skipping this remote name); continue; } com.googlesource.gerrit.plugins.webhooks.EventProcessor processor = processorFactory.create(projectEvent, <START_MOD>remote<END_MOD>); if (processor.shouldProcess()) { post(<START_MOD>remote<END_MOD>, processor); } } }
<START_MOD>@java.lang.Override public java.util.List<com.google.gerrit.server.query.change.ChangeData> call() throws java.io.IOException { return doRead(); }<END_MOD>
com.google.gerrit.reviewdb.client.PatchLineComment export(<START_MOD>com.google.gerrit.reviewdb.client.Change.Id changeId<END_MOD>) { com.google.gerrit.reviewdb.client.PatchLineComment plc = new com.google.gerrit.reviewdb.client.PatchLineComment(key.export(<START_MOD>changeId<END_MOD>), lineNbr, author.export(), parentUuid, writtenOn); plc.setSide(side); plc.setMessage(message); if ((range) != null) { plc.setRange(range.export()); } plc.setTag(tag); plc.setRevId(new com.google.gerrit.reviewdb.client.RevId(revId)); return plc; }
<START_MOD>private org.eclipse.jgit.lib.ObjectId writeAndGetId(org.eclipse.jgit.dircache.DirCache tree, org.eclipse.jgit.lib.Repository repository) throws java.io.IOException { try (org.eclipse.jgit.lib.ObjectInserter objectInserter = repository.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId treeId = tree.writeTree(objectInserter); objectInserter.flush(); return treeId; } }<END_MOD>
@org.junit.Test public void mergeOnPushToBranch() throws java.lang.Exception { grant(Permission.PUSH, project, "refs/heads/master"); com.google.gerrit.acceptance.PushOneCommit.Result r = push("refs/for/master", PushOneCommit.SUBJECT, "a.txt",   content r.assertOkStatus(); git().push().setRefSpecs(new org.eclipse.jgit.transport.RefSpec(((r.getCommit().name()) + ":refs/heads/master"))).call(); assertCommit(project, "refs/heads/master"); <START_MOD>com.google.gerrit.server.query.change.ChangeData cd = com.google.common.collect.Iterables.getOnlyElement(queryProvider.get().byKey(new com.google.gerrit.reviewdb.client.Change.Key(r.getChangeId()))); org.eclipse.jgit.revwalk.RevCommit c = r.getCommit(); com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd.currentPatchSet().getId(); assertThat(psId.get()).isEqualTo(1); assertThat(cd.change().getStatus()).isEqualTo(Change.Status.MERGED); assertCommit(project, "refs/heads/master"); <END_MOD>assertSubmitApproval(<START_MOD>psId); assertThat(cd.patchSets()).hasSize(1); assertThat(cd.patchSet(psId).getRevision().get()).isEqualTo(<END_MOD>c<START_MOD>.name()<END_MOD>); }
<START_MOD>static com.google.gerrit.server.group.db.GroupConfig loadforGroup(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId id, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupUuid); groupConfig.load(rw, id); return groupConfig; }<END_MOD>
<START_MOD>public<END_MOD> static <START_MOD>void refreshUserPreferences() { if (<END_MOD>com.google.gerrit.client.<START_MOD>Gerrit<END_MOD>.<START_MOD>isSignedIn<END_MOD>(<START_MOD>)<END_MOD>) { <START_MOD>com.google.gerrit.client.account.AccountApi.self().view("preferences").get(<END_MOD>new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountPreferencesInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountPreferencesInfo prefs) { com.google.gerrit.client.Gerrit.<START_MOD>setUserPreferences<END_MOD>(prefs); } <START_MOD>});<END_MOD> <START_MOD>}<END_MOD> <START_MOD>else<END_MOD> { com.google.gerrit.client.Gerrit.<START_MOD>setUserPreferences<END_MOD>(com.google.gerrit.client.Gerrit.<START_MOD>getDefaultUserPreferences())<END_MOD>; } }
public org.eclipse.jgit.lib.ObjectId sha1() { <START_MOD>@java.lang.SuppressWarnings("deprecation")<END_MOD> <START_MOD>byte[] h = <END_MOD>com.google.common.hash.Hashing.sha1().hashString(get(), java.nio.charset.StandardCharsets.UTF_8).asBytes()<START_MOD>; return org.eclipse.jgit.lib.ObjectId.fromRaw(h<END_MOD>); }
public static void onAction(com.google.gerrit.client.info.ChangeInfo change, com.google.gerrit.client.info.ActionInfo action, com.google.gerrit.client.actions.ActionButton button) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.change(change.legacyId().get()<START_MOD>, change.project()<END_MOD>).view(action.id()); com.google.gwt.core.client.JavaScriptObject f = com.google.gerrit.client.api.ChangeGlue.get(action.id()); if (f != null) { com.google.gerrit.client.api.ActionContext c = com.google.gerrit.client.api.ActionContext.create(api); c.set(action); c.set(change); c.button(button); com.google.gerrit.client.api.ApiGlue.invoke(f, c); } else { com.google.gerrit.client.api.DefaultActions.invoke(change, action, api); } }
<START_MOD>private com.google.gerrit.reviewdb.client.PatchSet getPatchSet(com.google.gerrit.reviewdb.client.PatchSet.Id id) throws com.google.gwtorm.server.OrmException { return unwrap(db.get()).patchSets().get(id); }<END_MOD>
@java.lang.Override public void <START_MOD>updateChangeImpl<END_MOD>(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { if ((newCommit) == null) { return; } ctx.getChangeUpdate().setPatchSetId(psId); com.google.gerrit.reviewdb.client.PatchSet ps = new com.google.gerrit.reviewdb.client.PatchSet(psId); ps.setCreatedOn(ctx.getWhen()); ps.setUploader(args.caller.getAccountId()); ps.setRevision(new com.google.gerrit.reviewdb.client.RevId(newCommit.getId().getName())); com.google.gerrit.reviewdb.client.Change c = <START_MOD>ctx.getChange<END_MOD>(); ps.setGroups(com.google.gerrit.server.git.GroupCollector.getCurrentGroups(args.db, c)); args.db.patchSets().insert(java.util.Collections.singleton(ps)); c.setCurrentPatchSet(patchSetInfo); args.db.changes().update(java.util.Collections.singletonList(c)); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.reviewdb.client.PatchSetApproval a : args.approvalsUtil.byPatchSet(args.db, <START_MOD>ctx.getChangeControl(), <END_MOD>toMerge.getPatchsetId())) { approvals.add(new com.google.gerrit.reviewdb.client.PatchSetApproval(ps.getId(), a)); ctx.getChangeUpdate().putApproval(a.getLabel(), a.getValue()); } args.db.patchSetApprovals().insert(approvals); newCommit.<START_MOD>setControl(ctx.getChangeControl()<END_MOD>); newCommit.<START_MOD>setPatchsetId(c.currentPatchSetId()<END_MOD>); }
<START_MOD>@java.lang.SuppressWarnings("deprecation") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id, boolean deleted) { java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(id, deleted)) { index(id); return true; } return false; }; return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task)), IndexUtils.MAPPER); }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gerrit.server.permissions.PermissionBackend.ForChange user(com.google.gerrit.server.CurrentUser user) { return getUser().equals(user) ? this : forUser(user).asForChangeWithoutData(); }<END_MOD>
void <START_MOD>save<END_MOD>() { java.lang.String message = editArea.getValue().trim(); if ((message.length()) == 0) { return; } com.google.gerrit.client.changes.CommentInfo original = comment; com.google.gerrit.client.changes.CommentInput input = com.google.gerrit.client.changes.CommentInput.create(original); input.setMessage(message); enableEdit(false); com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo> cb = new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { enableEdit(true); set(result); setEdit(false); if (autoClosed) { setOpen(false); } } @java.lang.Override public void onFailure(java.lang.Throwable e) { enableEdit(true); super.onFailure(e); } }; if ((original.id()) == null) { com.google.gerrit.client.changes.CommentApi.createDraft(psId, input, cb); } else { com.google.gerrit.client.changes.CommentApi.updateDraft(psId, original.id(), input, cb); } getCm().focus(); }
<START_MOD>@java.lang.Override public void onFailure(java.lang.Throwable caught) { loadConfigInfo(info, rev); }<END_MOD>
@java.lang.Override public com.google.gerrit.server.change.ChangeKind load(com.google.gerrit.server.change.ChangeKindCacheImpl.Key key) throws java.io.IOException { if (java.util.Objects.equals(key.prior, key.next)) { return ChangeKind.NO_CODE_CHANGE; } try (org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(key.repo)) { org.eclipse.jgit.revwalk.RevCommit prior = walk.parseCommit(key.prior); walk.parseBody(prior); org.eclipse.jgit.revwalk.RevCommit next = walk.parseCommit(key.next); walk.parseBody(next); if (!(next.getFullMessage().equals(prior.getFullMessage()))) { if (com.google.gerrit.server.change.ChangeKindCacheImpl.Loader.isSameDeltaAndTree(prior, next)) { return ChangeKind.NO_CODE_CHANGE; } else { return ChangeKind.REWORK; } } if (com.google.gerrit.server.change.ChangeKindCacheImpl.Loader.isSameDeltaAndTree(prior, next)) { return ChangeKind.NO_CHANGE; } if (((prior.getParentCount()) != 1) || ((next.getParentCount()) != 1)) { return ChangeKind.REWORK; } org.eclipse.jgit.merge.ThreeWayMerger merger = com.google.gerrit.server.git.MergeUtil.newThreeWayMerger(key.repo, com.google.gerrit.server.git.MergeUtil.createDryRunInserter(key.repo), key.strategyName); merger.setBase(prior.getParent(0)); <START_MOD>try { <END_MOD>if ((merger.merge(next.getParent(0), prior)) && (merger.getResultTreeId().equals(next.getTree()))) { return ChangeKind.TRIVIAL_REBASE; } <START_MOD>} catch (com.google.gerrit.server.change.LargeObjectException e) { }<END_MOD> return ChangeKind.REWORK; } finally { key.repo = null; } }
public com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> byChange(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser user) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = gitManager.openRepository(change.getProject())) { java.lang.String editRefPrefix = com.google.gerrit.<START_MOD>reviewdb.client.RefNames<END_MOD>.editRefPrefix(user.getAccountId(), change.getId()); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(editRefPrefix); if (refs.isEmpty()) { return com.google.common.base.Optional.absent(); } org.eclipse.jgit.lib.Ref ref = com.google.common.collect.Iterables.getOnlyElement(refs.values()); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(ref.getObjectId()); com.google.gerrit.reviewdb.client.PatchSet basePs = getBasePatchSet(change, ref); return com.google.common.base.Optional.of(new com.google.gerrit.server.edit.ChangeEdit(user, change, ref, commit, basePs)); } } }
public com.google.gerrit.server.notedb.rebuild.<START_MOD>NoteDbMigrator<END_MOD> setTrialMode(boolean trial) { this.trial = trial; return this; }
@java.lang.Override protected void onInitUI() { super.onInitUI(); table = new com.google.gerrit.client.changes.ChangeTable2(); table.addStyleName(Gerrit.RESOURCES.css().accountDashboard()); outgoing = new com.google.gerrit.client.changes.ChangeTable2.Section(); incoming = new com.google.gerrit.client.changes.ChangeTable2.Section(); closed = new com.google.gerrit.client.changes.ChangeTable2.Section(); outgoing.setTitleText(Util.C.outgoingReviews()); incoming.setTitleText(Util.C.incomingReviews()); <START_MOD>incoming.initHighlightUnreviewed(true, ownerId); <END_MOD>closed.setTitleText(Util.C.recentlyClosed()); table.addSection(outgoing); table.addSection(incoming); table.addSection(closed); add(table); table.setSavePointerId(("owner:" + (ownerId))); }
<START_MOD>private static java.lang.StackTraceElement[] trimStack(java.lang.StackTraceElement[] boom, java.lang.StackTraceElement ref) { java.lang.String key = ((ref.getClassName()) + "#") + (ref.getMethodName()); java.util.List<java.lang.StackTraceElement> trimmed = new java.util.ArrayList<>(); for (java.lang.StackTraceElement e : boom) { java.lang.String boomKey = ((e.getClassName()) + "#") + (e.getMethodName()); if (boomKey.equals(key)) { break; } trimmed.add(e); } return trimmed.toArray(new java.lang.StackTraceElement[trimmed.size()]); }<END_MOD>
public void publish(com.google.gerrit.server.edit.ChangeEdit edit) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.Change change = edit.getChange(); org.eclipse.jgit.lib.Repository repo = gitManager.openRepository(change.getProject()); try { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo); org.eclipse.jgit.lib.ObjectInserter inserter = repo.newObjectInserter(); try { com.google.gerrit.reviewdb.client.PatchSet basePatchSet = edit.getBasePatchSet(); if (!(basePatchSet.getId().equals(change.currentPatchSetId()))) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException( edit for current patch set can be published } insertPatchSet(edit, change, repo, rw, basePatchSet, squashEdit(repo, rw, inserter, edit.getEditCommit(), basePatchSet)); } finally { inserter.release(); rw.release(); } com.google.gerrit.server.edit.<START_MOD>ChangeEditModifier<END_MOD>.deleteRef(repo, edit); } finally { repo.close(); } }
<START_MOD>java.lang.String deselected();<END_MOD>
private void renderHeader(java.lang.String header) throws java.io.IOException { int lf = header.indexOf('\n'); java.lang.String first; java.lang.String rest; if ( <= lf) { first = header.substring(0, lf); rest = header.substring((lf + 1)); } else { first = header; rest = ""; } <START_MOD>java.util.List<java.util.Map<java.lang.String, java.lang.String>> parts = com.google.common.collect.Lists.newArrayListWithCapacity(4); for (java.lang.String part : com.google.gitiles.HtmlDiffFormatter.SPACE.split(first)) { if (part.startsWith("a/")) { parts.add(com.google.common.collect.ImmutableMap.of("text", part, "url", revisionUrl(view.getOldRevision(), part.substring(2)))); } else if (part.startsWith("b/")) { parts.add(com.google.common.collect.ImmutableMap.of("text", part, "url", revisionUrl(view.getRevision(), part.substring(2)))); } else { parts.add(com.google.common.collect.ImmutableMap.of("text", part)); } } <END_MOD>getOutputStream().write(renderer.newRenderer("gitiles.diffHeader").setData(com.google.common.collect.ImmutableMap.of(<START_MOD>"firstParts", parts<END_MOD>, "rest", rest, "fileIndex", fileIndex)).render().getBytes(Charsets.UTF_8)); }
<START_MOD>private int changeMessage() { int key = (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.K) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.str(20)); return (((((((((((com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.O) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.P)) + key) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.P)) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.K)) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.P)) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.T)) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.str(64))) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.P)) + (patchSetId())) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.P)) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.P); }<END_MOD>
<START_MOD>@java.lang.Override public boolean dryRun(final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.MergeException { return com.google.gerrit.server.git.MergeUtil.canMerge(mergeSorter, repo, useContentMerge, mergeTip, toMerge); }<END_MOD>
private void parseCreate(final org.eclipse.jgit.transport.ReceiveCommand cmd) { org.eclipse.jgit.revwalk.RevObject obj; try { obj = rp.getRevWalk().parseAny(cmd.getNewId()); } catch (java.io.IOException err) { com.google.gerrit.server.git.ReceiveCommits.log.error((((( object   + (cmd.getNewId().name())) +   for   + (cmd.getRefName())) +   creation err); reject(cmd,   object return; } if ((com.google.gerrit.server.git.ReceiveCommits.isHead(cmd)) && (!(isCommit(cmd)))) { return; } com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canCreate(rp.<START_MOD>getRepository(), rp.<END_MOD>getRevWalk(), obj)) { validateNewCommits(ctl, cmd); batch.addCommand(cmd); } else { reject(cmd); } }
private org.eclipse.jgit.treewalk.AbstractTreeIterator getTreeIterator(org.eclipse.jgit.lib.Repository repo, java.lang.String name) throws java.io.IOException { org.eclipse.jgit.treewalk.CanonicalTreeParser p = new org.eclipse.jgit.treewalk.CanonicalTreeParser(); <START_MOD>try (final <END_MOD>org.eclipse.jgit.lib.ObjectReader or = repo.newObjectReader()<START_MOD>)<END_MOD> { p.reset(or, new org.eclipse.jgit.revwalk.RevWalk(repo).parseTree(repo.resolve(name))); return p; } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { opResult = com.google.gerrit.server.restapi.change.PostReviewersOp.Result.builder().setAddedReviewers(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).setAddedCCs(com.google.common.collect.ImmutableList.copyOf(addedCCs)).build(); emailReviewers(rsrc.getChange(), com.google.common.collect.Lists.transform(addedReviewers, ( r) -> r.getAccountId()), ((addedCCs) == null ? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) { java.util.List<com.google.gerrit.server.account.AccountState> reviewers = addedReviewers.stream().map(( r) -> accountCache.<START_MOD>getEvenIfMissing<END_MOD>(r.getAccountId())).collect(java.util.stream.Collectors.toList()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } }
@java.lang.Override public com.google.gerrit.server.CurrentUser getCurrentUser() { <START_MOD>throw<END_MOD> <START_MOD>new com.google.inject.OutOfScopeException( user on merge thread<END_MOD> }
public com.google.gerrit.server.IdentifiedUser create(java.net.SocketAddress remotePeer, com.google.gerrit.reviewdb.client.Account.Id id) { return new com.google.gerrit.server.IdentifiedUser(capabilityControlFactory, <START_MOD>null, <END_MOD>authConfig, realm, anonymousCowardName, canonicalUrl, accountCache, groupBackend, disableReverseDnsLookup, com.google.inject.util.Providers.of(remotePeer), null, id, null); }
<START_MOD>@org.junit.Test public void testKeyToString() throws java.lang.Exception { org.bouncycastle.openpgp.PGPPublicKey key = TestKey.KEY1.getPublicKey(); assertThat(com.google.gerrit.server.git.gpg.PublicKeyStore.keyToString(key)).isEqualTo(("46328A8C Testuser One <test1@example.com>" + " (04AE A7ED 2F82 1133 E5B1 28D1 ED06 25DC 4632 8A8C)")); }<END_MOD>
@org.junit.Test public void testUpsertTwoBothExistsing() throws com.google.gwtorm.client.OrmException, java.sql.SQLException { stubExecuteBatchOK(com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE, 1, 1); createClassUnderTest().upsert(<START_MOD>twoRows<END_MOD>); }
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return   was already destroyed } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] <START_MOD>trimmedArgs<END_MOD> = dcmd.<START_MOD>getTrimmedArguments<END_MOD>();<START_MOD> if (trimmedArgs != null) {<END_MOD> for (int i = 1; i < (<START_MOD>trimmedArgs<END_MOD>.length); i++) { commandName.append(".").append(<START_MOD>trimmedArgs<END_MOD>[i]);<START_MOD> }<END_MOD> } return commandName.toString(); }
<START_MOD>private java.lang.String evaluate(com.google.gerrit.common.data.ParameterizedString parameterizedRef, java.lang.String userName) { return parameterizedRef.replace(java.util.Collections.singletonMap("username", userName)); }<END_MOD>
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.<START_MOD>HttpPasswordInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } if (input == null) { input = new com.google.gerrit.server.account.HttpPasswordInput(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { newPassword = com.google.gerrit.server.account.<END_MOD>PutHttpPassword.<START_MOD>generate(); } else<END_MOD> if ((<START_MOD>input.httpPassword) == null) { newPassword = null; } else { permissionBackend.user(<END_MOD>self<START_MOD>).check(GlobalPermission.ADMINISTRATE_SERVER); newPassword = input.httpPassword; } return apply<END_MOD>(rsrc.getUser()<START_MOD>, newPassword); }<END_MOD>
<START_MOD>public final native boolean submittable();<END_MOD>
public static com.google.gerrit.client.account.DiffPreferences create(com.google.gerrit.extensions.client.DiffPreferencesInfo in) { com.google.gerrit.client.account.DiffPreferences p = createObject().cast(); p.ignoreWhitespace(in.ignoreWhitespace); p.tabSize(in.tabSize); p.lineLength(in.lineLength); p.cursorBlinkRate(in.cursorBlinkRate); p.context(in.context); p.intralineDifference(in.intralineDifference); p.showLineEndings(in.showLineEndings); p.showTabs(in.showTabs); p.showWhitespaceErrors(in.showWhitespaceErrors); p.syntaxHighlighting(in.syntaxHighlighting); p.hideTopMenu(in.hideTopMenu); p.autoHideDiffTableHeader(in.autoHideDiffTableHeader); p.hideLineNumbers(in.hideLineNumbers); p.expandAllComments(in.expandAllComments); p.manualReview(in.manualReview); p.renderEntireFile(in.renderEntireFile); p.theme(in.theme); p.hideEmptyPane(in.hideEmptyPane); <START_MOD>p.matchBrackets(in.matchBrackets); <END_MOD>return p; }
@org.junit.Test public void testBlockedExtensions() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.performValidation(repo, c<START_MOD>, new org.eclipse.jgit.revwalk.RevWalk(repo)<END_MOD>, com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC); java.util.List<java.lang.String> expected = new java.util.ArrayList<>(); for (java.lang.String extension : com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC) { expected.add(( blocked file: foo. + extension)); } assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }
@org.junit.Test public void accountEvictionFromAccountCreatorIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.acceptance.AccountCreator accountCreator = org.easymock.EasyMock.createNiceMock(com.google.gerrit.acceptance.AccountCreator.class); accountCreator.evict(com.google.common.collect.ImmutableSet.of(accountId)); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCreator); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(accountCreator, null, null<START_MOD>, null<END_MOD>).reset(project).reset(allUsers).build()) { createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCreator); }
<START_MOD>@org.junit.Before public void setUp() throws java.lang.Exception { com.google.inject.AbstractModule mod = new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.server.config.EXTERNAL_CAPABILITY_KIND); bind(com.google.gerrit.server.config.EXTERNAL_CAPABILITY_KIND).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named("startreplication")).toInstance(new com.google.gerrit.extensions.config.CapabilityDefinition() { @java.lang.Override public java.lang.String getName() { return "startReplication"; } @java.lang.Override public java.lang.String getDescription() { return "Start Replication"; } }); } }; injector = com.google.inject.Guice.createInjector(mod); }<END_MOD>
public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> getMembersAudit(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException<START_MOD>, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException<END_MOD> { if (readFromNoteDb) { <START_MOD>return auditLogReader.getMembersAudit(groupUuid);<END_MOD> } java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = com.google.gerrit.server.group.db.Groups.getGroupFromReviewDb(db, groupUuid); if (!(group.isPresent())) { return com.google.common.collect.ImmutableList.of(); } return db.accountGroupMembersAudit().byGroup(group.get().getId()).toList(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.List<com.google.gerrit.extensions.common.AccountInfo>> apply(com.google.gerrit.server<START_MOD>.restapi<END_MOD>.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees = rsrc.getNotes().load().getPastAssignees(); if (pastAssignees == null) { return com.google.gerrit.extensions.restapi.Response.ok(java.util.Collections.emptyList()); } com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true); java.util.List<com.google.gerrit.extensions.common.AccountInfo> infos = pastAssignees.stream().map(accountLoader::get).collect(java.util.stream.Collectors.toList()); accountLoader.fill(); return com.google.gerrit.extensions.restapi.Response.ok(infos); }
<START_MOD>static com.google.gerrit.client.reviewdb.AccountExternalId getInstance(int rawOldAccountId, java.lang.String rawExternalId) { return new com.google.gerrit.client.reviewdb.AccountExternalId(new com.google.gerrit.client.reviewdb.Account.Id(rawOldAccountId), new com.google.gerrit.client.reviewdb.AccountExternalId.Key(rawExternalId)); }<END_MOD>
public void execute() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { try { executeRefUpdates(); executeChangeOps(); reindexChanges(); if ((batchRefUpdate) != null) { gitRefUpdated.fire(project, batchRefUpdate<START_MOD>, user.getAccountId()<END_MOD>); } executePostOps(); } catch (com.google.gerrit.server.git.UpdateException | com.google.gerrit.extensions.restapi.RestApiException e) { throw e; } catch (java.lang.Exception e) { com.google.common.base.Throwables.propagateIfPossible(e); throw new com.google.gerrit.server.git.UpdateException(e); } }
private void executeUpdateRepo() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { logDebug( updateRepo on {} ops ops.size()); com.google.gerrit.server.update.NoteDbBatchUpdate.RepoContextImpl ctx = new com.google.gerrit.server.update.NoteDbBatchUpdate.RepoContextImpl(); for (com.google.gerrit.server.update.BatchUpdateOp op : ops.values()) { op.updateRepo(ctx); } logDebug( updateRepo on {} RepoOnlyOps repoOnlyOps.size()); for (com.google.gerrit.server.update.RepoOnlyOp op : repoOnlyOps) { op.updateRepo(ctx); } if (((onSubmitValidators) != null) && (<START_MOD>!(getRefUpdates().isEmpty()))) { onSubmitValidators.validate(project, new com.google.gerrit.server.update.ReadOnlyRepository(getRepository()), ctx.getInserter().newReader(), getRefUpdates()); } if ((repoView<END_MOD>) != null)<START_MOD> { logDebug( inserter repoView.getInserter().flush(); } else { logDebug( objects to flush } } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.extensions.restapi.RestApiException.class); throw<END_MOD> new com.google.gerrit.server.update.<START_MOD>UpdateException(<END_MOD>e)<START_MOD>; } }<END_MOD>
public static com.google.gerrit.index.query.Predicate<com.google.gerrit.server.group.InternalGroup> name(java.lang.String name) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate(com.google.gerrit.server.index.group.GroupField.NAME, GroupQueryBuilder.FIELD_NAME, name); }
public boolean login(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope... scopes) throws java.io.IOException { if (isLoggedIn()) { return true; } com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.LOG.debug((   + (this))); if (com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.isOAuthFinal(request)) { <START_MOD>log.debug((   + (this))); com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.AccessToken loginAccessToken = oauth.loginPhase2(request, response); if ((loginAccessToken != null) && (!(loginAccessToken.isError()))) { login(loginAccessToken); } if (isLoggedIn()) { <END_MOD>com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.LOG.debug((   + (this))); <START_MOD>response.sendRedirect(com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.getTargetUrl(request)); return true; } else { response.sendError(HttpStatus.SC_UNAUTHORIZED); return false; } } else { this.loginScopes = getScopes(getScopesKey(request, response), scopes);<END_MOD> com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.LOG.debug((   + (this))); <START_MOD>oauth.loginPhase1(request, response, loginScopes<END_MOD>); return false; } }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.access.ListAccess.ProjectAccessInfo> apply(com.google.gerrit.extensions.restapi.TopLevelResource resource) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.server.access.ListAccess.ProjectAccessInfo> access = com.google.common.collect.Maps.newTreeMap(); for (java.lang.String p : projects) { com.google.gerrit.reviewdb.client.Project.NameKey projectName = new com.google.gerrit.reviewdb.client.Project.NameKey(p); com.google.gerrit.server.project.ProjectControl pc = open(projectName); com.google.gerrit.server.git.ProjectConfig config; try <START_MOD>(<END_MOD>com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)<START_MOD>)<END_MOD> { config = com.google.gerrit.server.git.ProjectConfig.read(md); if (config.updateGroupNames(groupBackend)) { md.setMessage( group names config.commit(md); projectCache.evict(config.getProject()); pc = open(projectName); } else if (((config.getRevision()) != null) && (!(config.getRevision().equals(pc.getProjectState().getConfig().getRevision())))) { projectCache.evict(config.getProject()); pc = open(projectName); } access.put(p, new com.google.gerrit.server.access.ListAccess.ProjectAccessInfo(pc, config)); } <START_MOD>catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(p); } } <END_MOD>return access; }
<START_MOD>public com.google.gerrit.reviewdb.client.PatchLineComment get(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchLineComment.Key key) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return db.patchComments().get(key); } java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(byChange(db, notes)); for (com.google.gerrit.reviewdb.client.PatchLineComment c : comments) { if (key.equals(c.getKey())) { return c; } } return null; }<END_MOD>
<START_MOD>@java.lang.Override public final int parseArguments(final org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { final java.lang.String token = params.getParameter(0); final java.lang.String[] tokens = token.split(","); if ((tokens.length) != 3) { throw new org.kohsuke.args4j.CmdLineException(owner, ("change should be specified as " + "<project>,<branch>,<change-id>")); } com.google.gerrit.reviewdb.client.Change.Key key; try { key = Change.Key.parse(tokens[2]); for (com.google.gerrit.reviewdb.client.Change change : db.changes().byKeyRange(key, key.max())) { if ((change.getProject().get().equals(tokens[0])) && (change.getDest().getShortName().equals(tokens[1]))) { setter.addValue(change.getId()); return 1; } throw new org.kohsuke.args4j.CmdLineException(owner, (((change.getDest().get()) + " ") + (change.getProject().get()))); } } catch (java.lang.IllegalArgumentException e) { throw new org.kohsuke.args4j.CmdLineException(owner, "Change-Id is not valid"); } catch (com.google.gwtorm.server.OrmException e) { throw new org.kohsuke.args4j.CmdLineException(owner, ("Database error: " + (e.getMessage()))); } throw new org.kohsuke.args4j.CmdLineException(owner, (("\"" + token) + "\": change not found")); }<END_MOD>
<START_MOD>public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> reviewerByState(java.lang.String who, com.google.gerrit.server.notedb.ReviewerStateInternal state) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> reviewerByEmailPredicate = null; try { reviewerByEmailPredicate = com.google.gerrit.server.query.change.ReviewerByEmailPredicate.forState(args, com.google.gerrit.server.mail.Address.parse(who), state); } catch (java.lang.IllegalArgumentException e) { } com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> reviewerPredicate = null; try { reviewerPredicate = com.google.gerrit.server.query.Predicate.or(parseAccount(who).stream().map(( id) -> com.google.gerrit.server.query.change.ReviewerPredicate.forState(args, id, state)).collect(java.util.stream.Collectors.toList())); } catch (com.google.gerrit.server.query.QueryParseException e) { if (reviewerByEmailPredicate == null) throw e; } if ((reviewerPredicate != null) && (reviewerByEmailPredicate != null)) { return com.google.gerrit.server.query.Predicate.or(reviewerPredicate, reviewerByEmailPredicate); } else if (reviewerPredicate != null) { return reviewerPredicate; } else { return reviewerByEmailPredicate; } }<END_MOD>
<START_MOD>public final native com.google.gerrit.client.groups.GroupInfo autoVerifyGroup();<END_MOD>
@java.lang.Override protected void configure() { factory(AddBranch.Factory.class); factory(ChangeProjectAccess.Factory.class); factory(CreateProjectHandler.Factory.class); factory(ChangeProjectSettings.Factory.class); factory(DeleteBranches.Factory.class); factory(ListBranches.Factory.class); factory(VisibleProjects.Factory.class); factory(ProjectAccessFactory.Factory.class); factory(ProjectDetailFactory.Factory.class); <START_MOD>factory(RetrieveParentCandidatesHandler.Factory.class); <END_MOD>}
public final void removeLineClass(net.codemirror.lib.CodeMirror.LineHandle line, net.codemirror.lib.CodeMirror.LineClassWhere where, java.lang.String className) { removeLineClassNative(line, where.<START_MOD>value<END_MOD>, className); }
<START_MOD>private void checkRequiresCapability() throws java.lang.RuntimeException { com.google.gerrit.extensions.annotations.RequiresCapability rc = getClass().getAnnotation(com.google.gerrit.extensions.annotations.RequiresCapability.class); if (rc != null) { com.google.gerrit.server.CurrentUser user = currentUser.get(); com.google.gerrit.server.account.CapabilityControl ctl = user.getCapabilities(); if ((!(ctl.canPerform(rc.value()))) && (!(ctl.canAdministrateServer()))) { java.lang.String msg = java.lang.String.format("fatal: %s does not have \"%s\" capability.", user.getUserName(), rc.value()); throw new java.lang.RuntimeException(msg); } } }<END_MOD>
<START_MOD>@java.lang.Override protected void onRequestSuggestions(com.google.gerrit.client.ui.Request request, com.google.gerrit.client.ui.Callback done) { java.util.LinkedList<com.google.gerrit.client.ui.CreateChangeDialog.BranchSuggestion> suggestions = new java.util.LinkedList<>(); for (final com.google.gerrit.client.projects.BranchInfo b : branches) { if (b.ref().contains(request.getQuery())) { suggestions.add(new com.google.gerrit.client.ui.CreateChangeDialog.BranchSuggestion(b)); } } done.onSuggestionsReady(request, new com.google.gerrit.client.ui.Response(suggestions)); }<END_MOD>
@org.junit.Test public void testUpdateOne() throws com.google.gwtorm.client.OrmException, java.sql.SQLException { stubExecuteBatchOK(com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE, 1); createClassUnderTest().update(<START_MOD>oneRow<END_MOD>); }
private void assertChanges(java.util.Set<java.lang.String> actualChanges, com.google.gerrit.acceptance.PushOneCommit... expectedChanges) { <START_MOD>assertThat(actualChanges).hasSize<END_MOD>(expectedChanges.length); for (com.google.gerrit.acceptance.PushOneCommit.Result c : expectedChanges) { <START_MOD>assertThat<END_MOD>(actualChanges.contains(id(c)))<START_MOD>.isTrue()<END_MOD>; } }
@org.junit.Test public void submitWithMergedAncestorsOnOtherBranch() throws java.lang.Exception { <START_MOD>org.eclipse.jgit.revwalk.RevCommit initialHead = getRemoteHead(); <END_MOD>com.google.gerrit.acceptance.PushOneCommit.Result change1 = createChange(testRepo, "master",   commit "a.txt", "1", ""); submit(change1.getChangeId()); <START_MOD>org.eclipse.jgit.revwalk.RevCommit headAfterFirstSubmit = getRemoteHead(); <END_MOD>gApi.projects().name(project.get()).branch("branch").create(new com.google.gerrit.extensions.api.projects.BranchInput()); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(testRepo, "master",   want to commit this to master first "a.txt", "2", ""); submit(change2.getChangeId()); org.eclipse.jgit.revwalk.RevCommit <START_MOD>headAfterSecondSubmit<END_MOD> = getRemoteLog(project, "master").get(0); assertThat(<START_MOD>headAfterSecondSubmit<END_MOD>.getShortMessage()).isEqualTo(change2.getCommit().getShortMessage()); org.eclipse.jgit.revwalk.RevCommit tip2 = getRemoteLog(project, "branch").get(0); assertThat(tip2.getShortMessage()).isEqualTo(change1.getCommit().getShortMessage()); com.google.gerrit.acceptance.PushOneCommit.Result change3 = createChange(testRepo, "branch", ( commit is based on master, which includes change2,   +   is targeted at branch, which doesn include it. "a.txt", "3", ""); submit(change3.getChangeId()); java.util.List<org.eclipse.jgit.revwalk.RevCommit> log3 = getRemoteLog(project, "branch"); assertThat(log3.get(0).getShortMessage()).isEqualTo(change3.getCommit().getShortMessage()); assertThat(log3.get(1).getShortMessage()).isEqualTo(change2.getCommit().getShortMessage()); <START_MOD>assertRefUpdatedEvents(initialHead, headAfterFirstSubmit, headAfterFirstSubmit, headAfterSecondSubmit); assertChangeMergedEvents(2); <END_MOD>}
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())<START_MOD>, com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())<END_MOD>); }
<START_MOD>@org.junit.Test public void testCreateGroupWithoutCapability() throws com.google.gwtorm.server.OrmException, com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.TestAccount user = accounts.create("user", "user@example.com", "User"); com.google.gerrit.acceptance.RestResponse r = new com.google.gerrit.acceptance.RestSession(user).put("/groups/newGroup"); assertEquals(HttpStatus.SC_FORBIDDEN, r.getStatusCode()); }<END_MOD>
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); index = new com.google.gerrit.server.<START_MOD>index<END_MOD>.IndexRewriteTest.DummyIndex(); queryBuilder = new com.google.gerrit.server.<START_MOD>index<END_MOD>.IndexRewriteTest.QueryBuilder(); rewrite = new com.google.gerrit.server.<START_MOD>index<END_MOD>.IndexRewriteImpl(index<START_MOD>, new com.google.gerrit.server.index.IndexRewriteImpl.BasicRewritesImpl(null)<END_MOD>); }
@java.lang.Override public java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.common.TestSubmitRuleInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.extensions.common.TestSubmitRuleInput(); } if (((input.rule) != null) && (!(rules.isProjectRulesEnabled()))) { throw new com.google.gerrit.extensions.restapi.AuthException( rules are disabled } input.filters = com.google.common.base.MoreObjects.firstNonNull(input.filters, filters); com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.google.gerrit.server.project.SubmitRuleEvaluator(<START_MOD>accountByEmailCache, <END_MOD>accountCache, changeDataFactory.create(db.get(), rsrc.getControl())); java.util.List<com.google.gerrit.common.data.SubmitRecord> records = evaluator.setPatchSet(rsrc.getPatchSet()).setLogErrors(false).setSkipSubmitFilters(((input.filters) == (com.google.gerrit.extensions.common.TestSubmitRuleInput.Filters.SKIP))).setRule(input.rule).evaluate(); java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> out = com.google.common.collect.Lists.newArrayListWithCapacity(records.size()); com.google.gerrit.server.account.AccountLoader accounts = accountInfoFactory.create(true); for (com.google.gerrit.common.data.SubmitRecord r : records) { out.add(new com.google.gerrit.server.change.TestSubmitRule.Record(r, accounts)); } if (!(out.isEmpty())) { out.get(0).prologReductionCount = evaluator.getReductionsConsumed(); } accounts.fill(); return out; }
@org.junit.Test public void inalidPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { <START_MOD>assertThat<END_MOD>(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c))<START_MOD>.isFalse()<END_MOD>; } }
<START_MOD>@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get()) { return java.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key((((com.google.gerrit.server.account.ExternalId.SCHEME_USERNAME) + ":") + username)))).map(AccountExternalId::getAccountId); } }<END_MOD>
<START_MOD>@java.lang.Override public void postEvent(com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.events.Event event) { }<END_MOD>
public java.lang.String toProject(final com.google.gerrit.reviewdb.Project.NameKey project) { com.google.gerrit.common.data.<START_MOD>ParametrizedString<END_MOD> pattern = new com.google.gerrit.common.data.<START_MOD>ParametrizedString<END_MOD>(type.getProject()); final java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<java.lang.String, java.lang.String>(); p.put("project", com.google.gwt.http.client.URL.encodeQueryString(project.get())); return (baseUrl) + (pattern.replace(p)); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource, ?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { <START_MOD>parent.getProjectState().checkStatePermitsRead(); <END_MOD>if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public java.util.<START_MOD>List<END_MOD><com.google.gerrit.reviewdb.RefRight> get() { return this.get(wildProject).getLocalRights(); }
@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { final java.lang.String senderName; if (fromId != null) { final com.google.gerrit.reviewdb.client.Account account = accountCache.<START_MOD>getEvenIfMissing<END_MOD>(fromId).getAccount(); java.lang.String fullName = account.getFullName(); if ((fullName == null) || ("".equals(fullName))) { fullName = anonymousCowardName; } senderName = namePattern.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
public static com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, java.lang.String body<START_MOD>, java.lang.String tag<END_MOD>) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx.getDb(), ctx.getChange().currentPatchSetId(), ctx.getUser(), ctx.getWhen(), body<START_MOD>, tag<END_MOD>); }
public void BROKEN_testIsEnabledUnknownEvent() { com.google.gerrit.server.events.<START_MOD>ChangeEvent<END_MOD> event = <START_MOD>createMock(<END_MOD>com.google.gerrit.server.events.<START_MOD>ChangeEvent.class<END_MOD>); com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig(); replayMocks(); assertFalse(itsConfig.isEnabled(event)); assertLogMessageContains( recognised and ignored }
private void removeUI() { if ((replyToBox) != null) { replyToBox.unregisterReplyBox(); } parent.removeDraft(this, comment.side(), ((comment.line()) - 1)); removeFromParent(); <START_MOD>resizePaddingWidget(); <END_MOD>getSelfWidget().clear(); com.google.gerrit.client.diff.PaddingManager manager = getPaddingManager(); manager.remove(this); manager.resizePaddingWidget(); cm.focus(); }
public static void publishEdit(int id<START_MOD>, @com.google.gerrit.common.Nullable java.lang.String project<END_MOD>, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.change(id<START_MOD>, project<END_MOD>).view("edit:publish").post(in, cb); }
<START_MOD>@java.lang.Override protected<END_MOD> com.google.gerrit.acceptance.server.mail.StagedChange stageWipChange() throws java.lang.Exception { return stageChange(<START_MOD>() -> super.<END_MOD>stageWipChange<START_MOD>()<END_MOD>); }
private void columnPath(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, com.google.gerrit.client.info.FileInfo info) { sb.openTd().setStyleName(com.google.gerrit.client.change.FileTable.R.css().pathColumn()).openAnchor(); java.lang.String path = info.path(); if (((mode) == (com.google.gerrit.client.change.FileTable.Mode.EDIT)) && (!(isEditable(info)))) { sb.setAttribute("onclick", ((((com.google.gerrit.client.change.FileTable.RESTORE) + "(event,") + (info._row())) + ")")); } else { sb.setAttribute("href", ("#" + (url(info)))).setAttribute("onclick", ((((com.google.gerrit.client.change.FileTable.OPEN) + "(event,") + (info._row())) + ")")); } if (Patch.COMMIT_MSG.equals(path)) { sb.append(Util.C.commitMessage()); } else if (<START_MOD>Patch.MERGE_LIST.equals(path)) { sb.append(Util.C.mergeList()); } else if (<END_MOD>com.google.gerrit.client.Gerrit.getUserPreferences().muteCommonPathPrefixes()) { int commonPrefixLen = commonPrefix(path); if (commonPrefixLen > 0) { sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().commonPrefix()).append(path.substring(0, commonPrefixLen)).closeSpan(); } sb.append(path.substring(commonPrefixLen)); lastPath = path; } else { sb.append(path); } sb.closeAnchor(); if ((info.oldPath()) != null) { sb.br(); sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().renameCopySource()).append(info.oldPath()).closeSpan(); } sb.closeTd(); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfigs({ @com.google.gerrit.acceptance.GerritConfig(name = <START_MOD>"plugin.high-availability.url"<END_MOD>, value = <START_MOD>"http://localhost:18888"<END_MOD>), @com.google.gerrit.acceptance.GerritConfig(name = <START_MOD>"plugin.high-availability.user"<END_MOD>, value = "admin") }) public void flushAndSendPost() throws java.lang.Exception { final java.lang.String flushRequest = <START_MOD>"/plugins/high-availability/cache/"<END_MOD> + (<START_MOD>com.ericsson.gerrit.plugins.highavailability.cache.CacheContants<END_MOD>.PROJECT_LIST); wireMockRule.addMockServiceRequestListener(new com.github.tomakehurst.wiremock.http.RequestListener() { @java.lang.Override public void requestReceived(com.github.tomakehurst.wiremock.http.Request request, com.github.tomakehurst.wiremock.http.Response response) { if (request.getAbsoluteUrl().contains(flushRequest)) { synchronized(flushRequest) { flushRequest.notify(); } } } }); givenThat(post(urlEqualTo(flushRequest)).willReturn(aResponse().withStatus(HttpStatus.SC_OK))); adminSshSession.exec(( flush-caches --cache   + (<START_MOD>com.ericsson.gerrit.plugins.highavailability.cache.CacheContants<END_MOD>.PROJECT_LIST))); synchronized(flushRequest) { flushRequest.wait(java.util.concurrent.TimeUnit.SECONDS.toMillis(<START_MOD>5<END_MOD>)); } verify(postRequestedFor(urlEqualTo(flushRequest))); }
@org.junit.Test public void parseAndPersistChangeMessage() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); java.lang.String ts = MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(comments.get(0).updated.toInstant(), java.time.ZoneId.of("UTC"))); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields(); java.lang.String txt = newPlaintextBody(((((canonicalWebUrl.get()) + "#/c/") + (changeInfo._number)) + "/1"),   Message null, null, null); b.textContent((txt + (textFooterForChange(changeId, ts)))); mailProcessor.process(b.build()); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeId).get().messages; assertThat(messages).hasSize(3); assertThat(com.google.common.collect.Iterables.getLast(messages).message).isEqualTo( Set 1: Message assertThat(com.google.common.collect.Iterables.getLast(messages).tag).isEqualTo( id }
public static AccountGroup.UUID make(java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent creator) { java.security.MessageDigest md = org.eclipse.jgit.lib.Constants.newMessageDigest(); md.update(org.eclipse.jgit.lib.Constants.encode(((   + groupName) + "\n"))); md.update(org.eclipse.jgit.lib.Constants.encode(((   + (creator.toExternalString())) + "\n"))); md.update(org.eclipse.jgit.lib.Constants.encode(java.lang.String.valueOf(java.lang.Math.random()))); return new com.google.gerrit.reviewdb.client.AccountGroup.UUID(org.eclipse.jgit.lib.ObjectId.fromRaw(md.digest()).name()); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())<START_MOD>, com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())<END_MOD>); }
<START_MOD>private<END_MOD> void addReviewerByEmailToReviewableChangeInReviewDb(<START_MOD>com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Adder adder<END_MOD>) throws java.lang.Exception { java.lang.String email = "addedbyemail@example.com"; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); addReviewer(adder, sc.changeId, sc.owner, email); assertThat(sender).notSent(); }
public com.google.gerrit.server.change.ChangeJson.ChangeInfo format(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException<START_MOD>, java.io.IOException<END_MOD> { return format(new com.google.gerrit.server.query.change.ChangeData(rsrc.getControl())); }
private net.codemirror.lib.CodeMirror.BeforeSelectionChangeHandler onSelectionChange(final net.codemirror.lib.CodeMirror cm) { return new net.codemirror.lib.CodeMirror.BeforeSelectionChangeHandler() { private com.google.gerrit.client.diff.InsertCommentBubble bubble; @java.lang.Override public void handle(net.codemirror.lib.CodeMirror cm, net.codemirror.lib.<START_MOD>Pos anchor, net.codemirror.lib.Pos<END_MOD> head) { if ((anchor == head) || (((anchor.<START_MOD>line<END_MOD>()) == (head.<START_MOD>line<END_MOD>())) && ((anchor.<START_MOD>ch<END_MOD>()) == (head.<START_MOD>ch<END_MOD>())))) { if ((bubble) != null) { bubble.setVisible(false); } return; } else if ((bubble) == null) { init(anchor); } else { bubble.setVisible(true); } bubble.position(cm.charCoords(head, "local")); } private void init(net.codemirror.lib.<START_MOD>Pos<END_MOD> anchor) { bubble = new com.google.gerrit.client.diff.InsertCommentBubble(commentManager, cm); add(bubble); cm.addWidget(anchor, bubble.getElement()<START_MOD>); } }; }<END_MOD>
@java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { java.lang.String query = com.google.common.base.CharMatcher.is('/').trimTrailingFrom(req.getPathInfo()); java.util.List<com.google.gerrit.extensions.common.ChangeInfo> results; try { results = changes.query(query).withLimit(2).get(); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { com.google.gerrit.httpd.DirectChangeByCommit.log.warn(( process query by URL: /r/ + query), e); results = com.google.common.collect.ImmutableList.of(); } java.lang.String token; if ((results.size()) == 1) { <START_MOD>com.google.gerrit.extensions.common.ChangeInfo ci = results.iterator().next(); <END_MOD>token = com.google.gerrit.common.PageLinks.toChange(new com.google.gerrit.reviewdb.client.Change.Id(<START_MOD>ci<END_MOD>._number)<START_MOD>, new com.google.gerrit.reviewdb.client.Project.NameKey(ci.project)<END_MOD>); } else { token = com.google.gerrit.common.PageLinks.toChangeQuery(query); } com.google.gerrit.httpd.UrlModule.toGerrit(token, req, rsp); }
public void start(final org.apache.sshd.server.Environment env) throws java.io.IOException { com.google.gerrit.sshd.SshScope.Context old = com.google.gerrit.sshd.SshScope.set(context); java.lang.String message; try { message = messageFactory.get().getMessage(); } finally { com.google.gerrit.sshd.SshScope.set(old); } err.write(message.toString()<START_MOD>.getBytes(<END_MOD>)); err.flush(); in.close(); out.close(); err.close(); exit.onExit(127); }
<START_MOD>public org.eclipse.jgit.lib.ObjectId getMetaId() { return metaId; }<END_MOD>
private void insertChange(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account.Id me = currentUser.getAccountId(); final java.util.List<org.eclipse.jgit.revwalk.FooterLine> footerLines = commit.getFooterLines(); final com.google.gerrit.server.mail.MailUtil.MailRecipients recipients = new com.google.gerrit.server.mail.MailUtil.MailRecipients(); if ((magicBranch) != null) { recipients.add(magicBranch.getMailRecipients()); } recipients.add(getRecipientsFromFooters(accountResolver, ps, footerLines)); recipients.remove(me); <START_MOD>changeInserter.insertChange(<END_MOD>db<START_MOD>, <END_MOD>change<START_MOD>, ps, commit, footerLines, info, recipients.getReviewers()); created = true; workQueue.getDefaultQueue().submit(requestScopePropagator.wrap(new java.lang.Runnable() { @java.lang.Override public void run() { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory.create(change); cm.setFrom(me); cm.setPatchSet(ps, info); cm.addReviewers(recipients.getReviewers()); cm.addExtraCC(recipients.getCcOnly()); cm.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.ReceiveCommits.log.error(( send email for new change   + (change<END_MOD>.getId())<START_MOD>), e); } } @<END_MOD>java.lang.<START_MOD>Override public <END_MOD>java.lang.String toString() { return   newchange } })); }
<START_MOD>private void insertNoneRow(final int row) { insertRow(row); table.setText(row, 0, Util.C.docTableNone()); final com.google.gwt.user.client.ui.FlexTable.FlexCellFormatter fmt = table.getFlexCellFormatter(); fmt.setColSpan(row, 0, columns); fmt.setStyleName(row, 0, Gerrit.RESOURCES.css().emptySection()); }<END_MOD>
@org.junit.Test public void putDraft() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); java.lang.String changeId = r.getChangeId(); java.lang.String revId = r.getCommit().getName(); com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput comment = newCommentInfo("file1", Side.REVISION,   1 addDraft(changeId, revId, comment); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = getDraftComments(changeId, revId); com.google.gerrit.extensions.common.CommentInfo actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); java.lang.String uuid = actual.id; comment.message =   comment 1 updateDraft(changeId, revId, comment, uuid); result = getDraftComments(changeId, revId); actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); }
private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.<START_MOD>ResourceConflictException, com.google.gerrit.extensions.restapi.<END_MOD>ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
private com.google.gerrit.server.git.BatchUpdate.ChangeContext newChangeContext(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Change.Id id) throws <START_MOD>com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException<END_MOD> { com.google.gerrit.reviewdb.client.Change c = newChanges.get(id); if (c == null) { c = com.google.gerrit.server.notedb.ChangeNotes.readOneReviewDbChange(db, id); <START_MOD>com.google.gerrit.server.notedb.NoteDbChangeState.checkNotReadOnly(c, skewMs); <END_MOD>} com.google.gerrit.server.notedb.ChangeNotes notes = changeNotesFactory.createForBatchUpdate(c); com.google.gerrit.server.project.ChangeControl ctl = changeControlFactory.controlFor(notes, user); return new com.google.gerrit.server.git.BatchUpdate.ChangeContext(ctl, new com.google.gerrit.server.git.BatchUpdateReviewDb(db), repo, rw); }
<START_MOD>@com.google.gerrit.common.Nullable public synchronized <T> T get(com.google.gerrit.server.IdentifiedUser.PropertyKey<T> key) { if ((properties) != null) { @java.lang.SuppressWarnings("unchecked") T value = ((T) (properties.get(key))); if (value != null) { return value; } } return state().get(key); }<END_MOD>
<START_MOD>private com.google.gerrit.client.change.RelatedChangesTab getTab() { if ((conflictingChangesTab) == null) { conflictingChangesTab = createTab(Resources.C.conflictingChanges(), Resources.C.conflictingChangesTooltip()); conflictingChangesTab.registerKeys(); } return conflictingChangesTab; }<END_MOD>
protected void checkUpdate(com.google.gerrit.server.notedb.AbstractChangeUpdate update) { checkState(java.util.Objects.equals(update.getPatchSetId(), psId),   apply event for %s to update for %s update.getPatchSetId(), psId); checkState((((when.getTime()) - (update.getWhen().getTime())) <= (com.google.gerrit.server.notedb.rebuild.ChangeRebuilderImpl.MAX_WINDOW_MS)),   at %s outside update window starting at %s when, update.getWhen()); checkState(java.util.Objects.equals(update.getNullableAccountId(), <START_MOD>effectiveUser<END_MOD>),   apply event by %s to update by %s <START_MOD>effectiveUser<END_MOD>, update.getNullableAccountId()); }
@org.junit.Test public void exactlyOnePage() throws java.lang.Exception { java.util.List<org.eclipse.jgit.revwalk.RevCommit> commits = linearCommits(3); walk.markStart(commits.get(2)); com.google.gitiles.Paginator p = new com.google.gitiles.Paginator(walk, 3, null<START_MOD>, com.google.gitiles.PaginatorFilters.everything()<END_MOD>); assertEquals(com.google.common.collect.ImmutableList.of(commits.get(2), commits.get(1), commits.get(0)), com.google.common.collect.ImmutableList.copyOf(p)); assertNull(p.getPreviousStart()); assertNull(p.getNextStart()); }
<START_MOD>private java.util.List<java.lang.String> getUsernames(com.google.gerrit.server.CurrentUser user) { java.util.List<java.lang.String> r; if (user.isIdentifiedUser()) { java.util.Set<java.lang.String> emails = user.asIdentifiedUser().getEmailAddresses(); r = new java.util.ArrayList<>(((emails.size()) + 1)); r.addAll(emails); } else { r = new java.util.ArrayList<>(1); } if ((user.getUserName()) != null) { r.add(user.getUserName()); } return r; }<END_MOD>
<START_MOD>@java.lang.Override protected int getLines(com.google.gerrit.server.query.change.ChangeData.ChangedLines cl) { return (cl.insertions) + (cl.deletions); }<END_MOD>
void set(com.google.gerrit.client.changes.ChangeInfo info, final java.lang.String revision) { if (info.status().isClosed()) { setVisible(false); return; } project = info.project(); com.google.gerrit.client.changes.ChangeApi.revision(info.legacy_id().get(), revision).view("related").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.change.RelatedChanges.RelatedInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.change.RelatedChanges.RelatedInfo result) { <START_MOD>tabPanel.getTabBar().setTabText(0, Resources.M.relatedChanges(result.changes().length())); <END_MOD>render(revision, result.changes()); } @java.lang.Override public void onFailure(java.lang.Throwable err) { <START_MOD>tabPanel.getTabBar().setTabText(0, Resources.M.relatedChanges("na")); <END_MOD>progress.setVisible(false); scroll.setVisible(false); com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText(err.getMessage()); } }); }
<START_MOD>public com.google.gerrit.acceptance.AbstractNotificationTest.NotificationsSubject reviewersByEmail(@com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.RecipientType type) { if (!(actual().participants.supportReviewersByEmail)) { return this; } return receives(actual().participants.reviewerByEmail, type); }<END_MOD>
protected void onInitUI() { final com.google.gwt.user.client.ui.FlowPanel me = ((com.google.gwt.user.client.ui.FlowPanel) (getWidget())); me.add((header = new com.google.gwt.user.client.ui.<START_MOD>Grid(1, com.google.gerrit.client.ui.Screen.Cols.values().length<END_MOD>))); me.add((body = new com.google.gwt.user.client.ui.FlowPanel())); <START_MOD>com.google.gwt.user.client.ui.FlowPanel title = new com.google.gwt.user.client.ui.FlowPanel(); title.add((headerText = new com.google.gwt.user.client.ui.InlineLabel())); title<END_MOD>.setStyleName(Gerrit.RESOURCES.css().screenHeader()); header.<START_MOD>setWidget(0, com.google.gerrit.client.ui.Screen.Cols.Title.num, title); header.setStyleName(Gerrit.RESOURCES.css().screenHeader()); header.getCellFormatter().setHorizontalAlignment(0, com.google.gerrit.client.ui.Screen.Cols.FarEast.num, HasHorizontalAlignment.ALIGN_RIGHT); header.getCellFormatter().setWidth(0, com.google.gerrit.client.ui.Screen.Cols.FarEast.num, "99%"<END_MOD>); }
@java.lang.Override public com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.DashboardResource parse(com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
private com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListKey getKey(org.eclipse.jgit.lib.ObjectId revisionIdA, org.eclipse.jgit.lib.ObjectId revisionIdB) { return com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListKey.againstCommit(revisionIdA, revisionIdB, Whitespace.IGNORE_NONE); }
com.google.gerrit.extensions.restapi.Response<com.google.gerrit.server.change.ChangeJson.ChangeInfo> apply(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException<START_MOD>, java.io.IOException<END_MOD> { return cache(json.format(rsrc)); }
@java.lang.Override protected void onLoad() { super.onLoad(); Util.ACCOUNT_SVC.myAccount(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.reviewdb.Account>() { public void onSuccess(final com.google.gerrit.reviewdb.Account result) { display(result.getGeneralPreferences()); <START_MOD>display<END_MOD>(); } }); }
private void checkRequiresCapability(org.apache.sshd.server.Command cmd) throws com.google.gerrit.sshd.UnloggedFailure { java.lang.String <START_MOD>pluginName<END_MOD> = <START_MOD>null<END_MOD>; if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { pluginName = ((com.google.gerrit.sshd.BaseCommand) (cmd)).getPluginName(); <START_MOD>}<END_MOD> <START_MOD>try { com.google.gerrit.extensions.config.CapabilityUtils.checkRequiresCapability<END_MOD>(<START_MOD>currentUser, <END_MOD>pluginName<START_MOD>,<END_MOD> <START_MOD>cmd<END_MOD>.<START_MOD>getClass<END_MOD>())<START_MOD>;<END_MOD> <START_MOD>} catch<END_MOD> (com.google.gerrit.extensions.<START_MOD>restapi<END_MOD>.<START_MOD>AuthException<END_MOD> <START_MOD>e<END_MOD>) { throw new com.google.gerrit.sshd.UnloggedFailure(BaseCommand.STATUS_NOT_ADMIN,   cannot check capability } }
<START_MOD>@java.lang.Override public void evict(com.google.gerrit.reviewdb.AccountExternalId id) { byKey.remove(id.getKey()); byAccountId.remove(id.getAccountId()); byAccountEmail.remove(new com.google.gerrit.server.account.AccountExternalIdCacheImpl.AccountIdAndEmail(id.getAccountId(), id.getEmailAddress())); byEmail.remove(new com.google.gerrit.server.account.AccountExternalIdCacheImpl.EmailWrapper(id.getEmailAddress())); }<END_MOD>
@java.lang.Override public java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> byName(final java.lang.String pfx) { final java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> src; try { src = list.get(com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL).tailSet(new com.google.gerrit.reviewdb.client.Project.NameKey(pfx)); } catch (java.util.concurrent.ExecutionException e) { return java.util.Collections.emptyList(); } return new java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey>() { @java.lang.Override public java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> iterator() { return new java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey>() { private java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> itr = src.iterator(); private <START_MOD>com.google.gerrit.reviewdb.client.<END_MOD>Project.NameKey next; @java.lang.Override public boolean hasNext() { if ((next) != null) { return true; } if (!(itr.hasNext())) { return false; } com.google.gerrit.reviewdb.client.Project.NameKey r = itr.next(); if (r.get().startsWith(pfx)) { next = r; return true; } else { itr = java.util.Collections.<com.google.gerrit.reviewdb.client.Project.NameKey>emptyList().iterator(); return false; } } @java.lang.Override public <START_MOD>com.google.gerrit.reviewdb.client.<END_MOD>Project.NameKey next() { if (!(hasNext())) { throw new java.util.NoSuchElementException(); } com.google.gerrit.reviewdb.client.Project.NameKey r = next; next = null; return r; } @java.lang.Override public void remove() { throw new java.lang.UnsupportedOperationException(); } }; } }; }
<START_MOD>@java.lang.Override public <V> java.util.Collection<V> readField(com.google.gerrit.index.FieldDef<T, V> field) throws com.google.gwtorm.server.OrmException { return source.readField(field); }<END_MOD>
private org.eclipse.jgit.lib.Repository openRepository(java.nio.file.Path path, com.google.gerrit.reviewdb.client.Project.NameKey name) throws org.eclipse.jgit.errors.RepositoryNotFoundException { if (isUnreasonableName(name)) { throw new org.eclipse.jgit.errors.RepositoryNotFoundException(( name:   + name)); } <START_MOD>final org.eclipse.jgit.lib.RepositoryCache.FileKey loc = org.eclipse.jgit.lib.RepositoryCache.FileKey.lenient(path.resolve(name.get()).toFile(), FS.DETECTED); try { return org.eclipse.jgit.lib.RepositoryCache.open(loc); } catch (<END_MOD>java.io.<START_MOD>IOException e1) { final org.eclipse.jgit.errors.RepositoryNotFoundException e2; e2<END_MOD> = <START_MOD>new org.eclipse.jgit.errors.RepositoryNotFoundException(( open repository   + name)); e2.initCause(e1);<END_MOD> throw <START_MOD>e2; } }<END_MOD>
@org.junit.Test public void submitWithFastForward() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(change.getCommitId()); assertThat(head.getParent(0)).isEqualTo(oldHead); assertSubmitter(change.getChangeId(), 1); <START_MOD>assertAuthor(head, admin.getIdent()); assertCommitter(head, admin.getIdent()); <END_MOD>}
<START_MOD>private void initIncludedInAction(com.google.gerrit.client.changes.ChangeInfo info) { if (info.status().isClosed()) { includedInAction = new com.google.gerrit.client.change.IncludedInAction(info.legacy_id(), style, headerLine, includedIn); includedIn.setVisible(true); } }<END_MOD>
<START_MOD>private java.lang.String password(java.lang.String fmt, java.lang.Object... args) { if ((console) == null) { console = java.lang.System.console(); } if ((console) == null) { return null; } final java.lang.String prompt = java.lang.String.format(fmt, args); char[] r = console.readPassword("%-30s : ", prompt); if (r == null) { throw die("aborted by user"); } java.lang.String s = new java.lang.String(r).trim(); return !(s.isEmpty()) ? s : null; }<END_MOD>
@org.junit.Test public void <START_MOD>shouldNotCallProcessWhenWebhookTypeIsMisconfigured<END_MOD>() { <START_MOD>mockConfig(); when(provider.getFactory(eq(<END_MOD>config<START_MOD>), eq<END_MOD>(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.<START_MOD>FOO)))<END_MOD>.<START_MOD>thenReturn(java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>Optional<END_MOD>.<START_MOD>empty(<END_MOD>)); eventHandler.onEvent(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_CREATED); <START_MOD>verifyZeroInteractions(processor); verifyZeroInteractions<END_MOD>(postTask); }
<START_MOD>@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.config.ListCaches.CacheInfo> apply(com.google.gerrit.server.config.ConfigResource rsrc) { java.util.Map<java.lang.String, com.google.gerrit.server.config.ListCaches.CacheInfo> cacheInfos = new java.util.TreeMap<>(); for (java.util.Map.Entry<java.lang.String, com.google.common.cache.Cache<?, ?>> entry : getCaches().entrySet()) { cacheInfos.put(entry.getKey(), new com.google.gerrit.server.config.ListCaches.CacheInfo(entry.getValue())); } return cacheInfos; }<END_MOD>
@java.lang.Override public org.eclipse.jgit.lib.ObjectId getOldId(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.lang.Integer parentNum) throws com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListNotAvailableException { return get(change, patchSet, parentNum).getOldId(); }
private void setSubmitType(com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>ProjectSubmitType<END_MOD> submitType) throws java.io.IOException { com.google.gerrit.server.project.PutConfig.Input in = new com.google.gerrit.server.project.PutConfig.Input(); in.submitType = submitType; in.useContentMerge = com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.InheritableBoolean.FALSE; com.google.gerrit.acceptance.RestResponse r = adminSession.put((("/projects/" + (project.get())) + "/config"), in); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); r.consume(); }
private boolean applyRightFloor(com.google.gerrit.server.<START_MOD>notedb.ChangeNotes notes<END_MOD>, com.google.gerrit.common.data.LabelType lt, com.google.gerrit.reviewdb.client.PatchSetApproval a) <START_MOD>throws com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.permissions.PermissionBackend.ForChange forChange<END_MOD> = <START_MOD>permissionBackend.user(userFactory.create(a.getAccountId())).database(db).change(notes); try { forChange.check(new com.google.gerrit.server.permissions.LabelPermission(lt.getName())); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } short value = a.getValue(); while (value != 0) { try { forChange.check(new com.google.gerrit.server.permissions.LabelPermission.WithValue(lt.getName()<END_MOD>, <START_MOD>value)); break; } catch (com.google.gerrit.extensions.restapi.AuthException e) { if (value > 0) { value--; } else if (value < 0) { value++; } } }<END_MOD> a.<START_MOD>setValue(value);<END_MOD> return true; }
private java.util.List<com.google.gerrit.server.query.change.ChangeData> getChangesByTopic(java.lang.String topic) { try { <START_MOD>java.util.List<com.google.gerrit.server.query.change.ChangeData> ret = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.server.query.change.ChangeData c :<END_MOD> queryProvider.get().byTopicOpen(topic)<START_MOD>) { if (topic.equals(c.change().getTopic())) { ret.add(c); } } return ret<END_MOD>; } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmRuntimeException(e); } }
@java.lang.Override public void doProjectCreatedHook(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String headName) {<START_MOD> if (!(projectCreatedHook.isPresent())) { return; }<END_MOD> com.google.gerrit.server.events.ProjectCreatedEvent event = new com.google.gerrit.server.events.ProjectCreatedEvent(); event.projectName = project.get(); event.headName = headName; fireEvent(project, event); java.util.List<java.lang.String> args = new java.util.ArrayList<>(); addArg(args, "--project", project.get()); addArg(args, "--head", headName); runHook(project, projectCreatedHook, args); }
<START_MOD>@net.codemirror.mode.Source("idl.dl") @com.google.gwt.resources.client.DataResource.DoNotEmbed com.google.gwt.resources.client.DataResource idl();<END_MOD>
@java.lang.Override public com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.FileResource parse(com.google.gerrit.server<START_MOD>.restapi<END_MOD>.project.BranchResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.FileResource.create(repoManager, parent.getProjectState(), org.eclipse.jgit.lib.ObjectId.fromString(parent.getRevision()), id.get()); }
<START_MOD>@java.lang.Override public void modifyFile(java.lang.String filePath, com.google.gerrit.extensions.restapi.RawInput newContent) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); }<END_MOD>
<START_MOD>void setMarker(net.codemirror.lib.TextMarker marker, int length) { this.marker = marker; numSkipLines = length; skipNum.setText(java.lang.Integer.toString(length)); if (!(checkAndUpdateArrows())) { upArrow.setHTML(PatchUtil.M.expandBefore(com.google.gerrit.client.diff.SkipBar.NUM_ROWS_TO_EXPAND)); downArrow.setHTML(PatchUtil.M.expandAfter(com.google.gerrit.client.diff.SkipBar.NUM_ROWS_TO_EXPAND)); } }<END_MOD>
<START_MOD>private boolean canForcePerform(java.lang.String permissionName) { java.util.List<com.google.gerrit.common.data.PermissionRule> access = access(permissionName); java.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> allows = com.google.common.collect.Sets.newHashSet(); java.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> blocks = com.google.common.collect.Sets.newHashSet(); for (com.google.gerrit.common.data.PermissionRule rule : access) { if (rule.isBlock()) { blocks.add(rule.getProject()); } else if (rule.getForce()) { allows.add(rule.getProject()); } } blocks.removeAll(allows); return (blocks.isEmpty()) && (!(allows.isEmpty())); }<END_MOD>
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { <START_MOD>java.util<END_MOD>.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc != null) { return userFactory.create(acc); } } } } return anonymous.get(); }
<START_MOD>private static native void init0(com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JavaScriptObject> changes, com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JavaScriptObject> revisions);<END_MOD>
<START_MOD>private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> toByIdAuditEntriesById(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> byIdAudits) { return byIdAudits.stream().flatMap(com.google.gerrit.server.group.db.GroupBundle::toAuditEntries).collect(com.google.common.collect.Multimaps.toMultimap(com.google.gerrit.server.group.db.GroupBundle.AuditEntry::getTarget, java.util.function.Function.identity(), com.google.common.collect.MultimapBuilder.hashKeys().treeSetValues(com.google.gerrit.server.group.db.GroupBundle.AUDIT_ENTRY_COMPARATOR)::build)); }<END_MOD>
<START_MOD>@java.lang.Override public boolean isRepeatable() { return true; }<END_MOD>
<START_MOD>com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> getMembers();<END_MOD>
<START_MOD>@org.junit.Test public void testSimpleChangeMessage() { com.google.gerrit.server.mail.receive.MailMessage.Builder b = newMailMessageBuilder(); b.htmlContent(newHtmlBody("Looks good to me", null, null, null, null, null, null)); java.util.List<com.google.gerrit.reviewdb.client.Comment> comments = defaultComments(); java.util.List<com.google.gerrit.server.mail.receive.MailComment> parsedComments = com.google.gerrit.server.mail.receive.HtmlParser.parse(b.build(), comments, ""); assertThat(parsedComments).hasSize(1); assertChangeMessage("Looks good to me", parsedComments.get(0)); }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gerrit.extensions.api.changes.ChangeApi id(java.lang.String project, int id) throws com.google.gerrit.extensions.restapi.RestApiException { return id(((project + "/+/") + id)); }<END_MOD>
<START_MOD>@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { onOpenRow(selectedRow); }<END_MOD>
<START_MOD>@java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeList> wrapped = com.google.gwt.core.client.JsArray.createArray(1).cast(); wrapped.push(result); callback.onSuccess(wrapped); }<END_MOD>
private void submit(com.google.gerrit.server.project.ChangeControl changeCtl, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.Submit submit = submitProvider.get(); com.google.gerrit.server.change.RevisionResource rsrc = new com.google.gerrit.server.change.RevisionResource(changes.parse(changeCtl), ps); java.util.List<com.google.gerrit.reviewdb.client.Change> changes; try { changes = submit.submit(rsrc, currentUser, true); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new java.io.IOException(e); } addMessage(""); try { integrationProvider.get().create(com.google.gerrit.server.git.ChangeSet.create(changes<START_MOD>, ((com.google.gerrit.server.IdentifiedUser) (changeCtl.getCurrentUser())))).integrate(false<END_MOD>); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } for (com.google.gerrit.reviewdb.client.Change c : changes) { c = db.changes().get(c.getId()); switch (c.getStatus()) { case SUBMITTED : addMessage(((   + (c.getChangeId())) +   submitted. break; case MERGED : addMessage(((   + (c.getChangeId())) +   merged. break; case NEW : com.google.gerrit.reviewdb.client.ChangeMessage msg = submit.getConflictMessage(rsrc); if (msg != null) { addMessage((((   + (c.getChangeId())) +     + (msg.getMessage()))); break; } default : addMessage((((   + (c.getChangeId())) +   is   + (c.getStatus().name().toLowerCase()))); } } }
<START_MOD>public java.lang.String getLinkName();<END_MOD>
private org.eclipse.jgit.revwalk.RevCommit getHead(org.eclipse.jgit.lib.Repository repo<START_MOD>, java.lang.String name<END_MOD>) throws java.<START_MOD>lang<END_MOD>.<START_MOD>Exception { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo))<END_MOD> { return <START_MOD>rw.parseCommit<END_MOD>(repo<START_MOD>.exactRef(name).getObjectId()<END_MOD>); }<START_MOD> }<END_MOD>
void setHeaderVisible(boolean show) { headerVisible =<START_MOD> (!(autoHideHeader)) ||<END_MOD> show; com.google.gwt.user.client.ui.UIObject.setVisible(patchSetNavRow, <START_MOD>headerVisible<END_MOD>); com.google.gwt.user.client.ui.UIObject.setVisible(diffHeaderRow, (<START_MOD>(headerVisible)<END_MOD> && (header))); if (<START_MOD>headerVisible<END_MOD>) { parent.header.removeStyleName(com.google.gerrit.client.diff.DiffTable.style.fullscreen()); } else { parent.header.addStyleName(com.google.gerrit.client.diff.DiffTable.style.fullscreen()); } parent.resizeCodeMirror(); }
private org.eclipse.jgit.revwalk.RevCommit updateRef(org.eclipse.jgit.lib.AnyObjectId oldId, org.eclipse.jgit.lib.AnyObjectId newId, java.lang.String refName) throws java.io.IOException { org.eclipse.jgit.lib.BatchRefUpdate bru = update.getBatch(); if (bru != null) { bru.addCommand(new org.eclipse.jgit.transport.ReceiveCommand(oldId.toObjectId(), newId.toObjectId(), refName)); inserter.flush(); revision = rw.parseCommit(newId); return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(refName); ru.setExpectedOldObjectId(oldId); ru.setNewObjectId(src); ru.<START_MOD>setRefLogIdent(update.getCommitBuilder().getAuthor()); ru.setRefLogMessage( data update true<END_MOD>); inserter.flush(); org.eclipse.jgit.lib.RefUpdate.Result result = ru.update(); switch (result) { case NEW : case FAST_FORWARD : revision = rw.parseCommit(ru.getNewObjectId()); update.fireGitRefUpdatedEvent(ru); return revision; default : throw new java.io.IOException(((((( update   + (ru.getName())) +   in   + (db.getDirectory())) +     + (ru.getResult()))); } }
<START_MOD>private boolean inBranch(final com.google.gerrit.reviewdb.client.Change change) { if ((branch) == null) { return true; } return change.getDest().toString().equals(branch); }<END_MOD>
<START_MOD>@java.lang.Override public int compare(com.google.gerrit.server.group.MembersCollection.MemberInfo a, com.google.gerrit.server.group.MembersCollection.MemberInfo b) { int cmp = nullToEmpty(a.fullName).compareTo(nullToEmpty(b.fullName)); if (cmp != 0) { return cmp; } cmp = nullToEmpty(a.preferredEmail).compareTo(nullToEmpty(b.preferredEmail)); if (cmp != 0) { return cmp; } return nullToEmpty(a.id).compareTo(nullToEmpty(b.id)); }<END_MOD>
<START_MOD>@java.lang.Override public void start() { com.google.gerrit.server.git.ProjectConfig config; for (com.google.gerrit.reviewdb.client.Project.NameKey p : projectCache.all()) { try { config = com.google.gerrit.server.git.ProjectConfig.read(metaDataUpdateFactory.create(p)); loadStoreFromProjectConfig(p.toString(), config); com.amd.gerrit.plugins.manifestsubscription.PluginProjectConfig ppc = enabledManifestRepos.get(p.toString()); if (ppc != null) { com.google.gerrit.reviewdb.client.Project.NameKey store = new com.google.gerrit.reviewdb.client.Project.NameKey(ppc.getStore()); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> branches = gitRepoManager.openRepository(store).getRefDatabase().getRefs(com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.STORE_BRANCH_PREFIX); for (java.lang.String branchPath : branches.keySet()) { try { com.amd.gerrit.plugins.manifestsubscription.VersionedManifests manifests = parseManifests(store, ((com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.STORE_BRANCH_PREFIX) + branchPath)); watchCanonicalManifest(manifests.getManifests().get("default.xml"), store.toString(), branchPath); } catch (java.lang.Exception e) { com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.log.error(e.toString()); e.printStackTrace(); } } } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.log.error(e.toString()); e.printStackTrace(); } } }<END_MOD>
<START_MOD>public <END_MOD>static void replyText(@javax.annotation.Nullable javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, java.lang.String text) throws java.io.IOException { if (((req == null) || ("GET".equals(req.getMethod()))) && (com.google.gerrit.httpd.restapi.RestApiServlet.isMaybeHTML(text))) { com.google.gerrit.httpd.restapi.RestApiServlet.replyJson(req, res, com.google.common.collect.ImmutableMultimap.of("pp", "0"), new com.google.gson.JsonPrimitive(text)); } else { if (!(text.endsWith("\n"))) { text += "\n"; } com.google.gerrit.httpd.restapi.RestApiServlet.replyBinaryResult(req, res, com.google.gerrit.extensions.restapi.BinaryResult.create(text).setContentType("text/plain")); } }
<START_MOD>@java.lang.Override public void onKeyPress(final com.google.gwt.event.dom.client.KeyPressEvent event) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(revision.getParentKey(), java.lang.String.valueOf(revision))); }<END_MOD>
<START_MOD>private java.util.List<org.eclipse.jgit.diff.DiffEntry> computeDiffEntries(org.eclipse.jgit.lib.Repository repo, com.google.gitiles.GitilesView view, org.eclipse.jgit.revwalk.RevCommit commit) throws java.io.IOException { org.eclipse.jgit.treewalk.AbstractTreeIterator oldTree; switch (commit.getParentCount()) { case 0 : oldTree = new org.eclipse.jgit.treewalk.EmptyTreeIterator(); break; case 1 : oldTree = getTreeIterator(commit.getParent(0)); break; default : return com.google.common.collect.ImmutableList.of(); } org.eclipse.jgit.treewalk.AbstractTreeIterator newTree = getTreeIterator(commit); org.eclipse.jgit.diff.DiffFormatter diff = new org.eclipse.jgit.diff.DiffFormatter(org.eclipse.jgit.util.io.NullOutputStream.INSTANCE); try { diff.setRepository(repo); diff.setDetectRenames(true); return diff.scan(oldTree, newTree); } finally { diff.release(); } }<END_MOD>
public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account merger, java.lang.String newRevisionId, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeMerged.Event event = new com.google.gerrit.server.extensions.events.ChangeMerged.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(merger), newRevisionId, when); for (com.google.gerrit.extensions.events.ChangeMergedListener l : listeners) { try { l.onChangeMerged(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException <START_MOD>| com.google.gerrit.server.permissions.PermissionBackendException <END_MOD>e) { com.google.gerrit.server.extensions.events.ChangeMerged.log.error( fire event e); } }
public com.google.gerrit.server.ssh.Command createCommand(final java.lang.String commandLine)<START_MOD> { return new com.google.gerrit.server.ssh.BaseCommand() { @java.lang.Override public void start() throws java.io.IOException<END_MOD> { final int sp1 = commandLine.indexOf(   java.lang.String cmd; java.lang.String args; if ( < sp1) { cmd = commandLine.substring(0, sp1); args = commandLine.substring((sp1 + 1)); } else { cmd = commandLine; args = ""; } if (("git".equals(cmd)) || ("gerrit".equals(cmd))) { cmd += "-"; final int sp2 = args.indexOf(   if ( < sp2) { cmd += args.substring(0, sp2); args = args.substring((sp2 + 1)); } else { cmd += args; args = ""; } } final com.google.<START_MOD>inject.Provider<com.google.<END_MOD>gerrit.server.ssh.Command<START_MOD>> p = commands.get(cmd); if (p != null) { final com.google.gerrit.server.ssh.SshScopes.Context old = SshScopes.current.get(); try { SshScopes.current.set(new com.google.gerrit.server.ssh.SshScopes.Context(session)); final com.google.gerrit.server.ssh.Command<END_MOD> c = <START_MOD>p.get(<END_MOD>); if (c instanceof com.google.gerrit.server.ssh.AbstractCommand) { ((com.google.gerrit.server.ssh.AbstractCommand) (c)).setCommandLine(cmd, args); } c<START_MOD>.start(); } finally { SshScopes.current.set(old); } } else { final java.lang.String msg = (   + cmd) +   not found err.write(msg.getBytes("UTF-8")); err.flush(); exit.onExit(127); } } }; }<END_MOD>
<START_MOD>public static com.google.gerrit.client.rpc.RestApi capabilities() { return new com.google.gerrit.client.rpc.RestApi("/config/server/capabilities/"); }<END_MOD>
@java.lang.Override public int getBegin(com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.EditTransformer.ContextAwareEdit edit) { return edit.getBeginA(); }
private void rename(com.google.gerrit.server.git.MetaDataUpdate md) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean success = false; for (int attempts = 0; (!success) && (attempts < (com.google.gerrit.server.git.RenameGroupOp.MAX_TRIES)); attempts++) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { projectCache.evict(config.getProject()); return; } ref.setName(newName); md.getCommitBuilder().setAuthor(author); md.setMessage((((( group   + (oldName)) +   to   + (newName)) + "\n")); <START_MOD>try { <END_MOD>config.commit(md)<START_MOD>;<END_MOD> projectCache.evict(config.getProject()); success = true; } <START_MOD>catch (java.io.IOException e)<END_MOD> { try { java.lang.Thread.sleep(25); } catch (java.lang.InterruptedException wakeUp) { continue; } } } if (!success) { if (tryingAgain) { com.google.gerrit.server.git.RenameGroupOp.log.warn(((((( not rename group   + (oldName)) +   to   + (newName)) +   in   + (md.getProjectName().get()))); } else { retryOn.add(md.getProjectName()); } } }
@java.lang.Override public void onReplaceByKeys(<START_MOD>org.eclipse.jgit.lib.ObjectId oldNotesRev, <END_MOD>org.eclipse.jgit.lib.ObjectId newNotesRev, com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toRemove, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws java.io.IOException { com.google.gerrit.server.account.externalids.ExternalIdsUpdate.checkSameAccount(toAdd, accountId); updateCache(<START_MOD>oldNotesRev, <END_MOD>newNotesRev, ( m) -> { com.google.common.collect.Collections2.transform(m.get(accountId), ( e) -> e.key()).removeAll(toRemove); for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { m.put(extId.accountId(), extId); } }); }
<START_MOD>private boolean addSuggestion(java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.extensions.common.AccountInfo> map, com.google.gerrit.reviewdb.client.Account.Id id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(id); return addSuggestion(map, a); }<END_MOD>
public void onSuccess(final com.google.gerrit.common.auth.userpass.LoginResult result) { if (result.success) { java.lang.String to = token; if ((result.isNew) && (!(to.startsWith(((com.google.gerrit.common.PageLinks.REGISTER) + <START_MOD>"/"<END_MOD>))))) { to = ((com.google.gerrit.common.PageLinks.REGISTER) + ",") + to; } com.google.gwt.user.client.Window.Location.replace((((com.google.gwt.user.client.Window.Location.getPath()) + "login/") + to)); } else { showError(Util.C.invalidLogin()); enable(true); password.selectAll(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { password.setFocus(true); } }); } }
private void matchChange(java.util.Set<com.google.gerrit.reviewdb.Change.Id> matched, com.google.gerrit.reviewdb.Change change) { try { if (((change != null) && (inProject(change))) && (changeControlFactory.controlFor(change).isVisible(<START_MOD>db<END_MOD>))) { matched.add(change.getId()); } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { } <START_MOD>catch (com.google.gwtorm.client.OrmException e) { com.google.gerrit.sshd.commands.ModifyReviewersCommand.log.warn(( reading change   + (change.getId())), e); <END_MOD>}<START_MOD> }<END_MOD>
<START_MOD>@java.lang.Override public boolean isRepeatable() { return false; }<END_MOD>
void onAuthFail(final com.google.gerrit.sshd.SshSession sd) { final org.apache.log4j.spi.LoggingEvent event = new org.apache.log4j.spi.LoggingEvent(org.apache.log4j.Logger.class.getName(), null, java.lang.System.currentTimeMillis(), org.apache.log4j.Level.INFO, ( FAILURE FROM   + (sd.getRemoteAddressAsString())), "SSHD", null, null, null, null); event.setProperty(com.google.gerrit.sshd.SshLog.P_SESSION, com.google.gerrit.sshd.SshLog.id(sd.getSessionId())); event.setProperty(com.google.gerrit.sshd.SshLog.P_USER_NAME, sd.getUsername()); final java.lang.String error = sd.getAuthenticationError(); if (error != null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, error); } async.append(event); <START_MOD>audit("FAIL", "AUTH", java.util.Arrays.asList(sd.getRemoteAddressAsString())); <END_MOD>}
<START_MOD>@com.google.gerrit.common.Nullable com.google.gerrit.extensions.common.AccountInfo getWho();<END_MOD>
<START_MOD>@com.google.gerrit.server.query.account.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.account.AccountState> username(java.lang.String username) { return new com.google.gerrit.server.query.account.UsernamePredicate(username); }<END_MOD>
public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gerrit.<START_MOD>client.rpc.BaseServiceImplementation<END_MOD>.Failure, com.google.gwtorm.client.OrmException { final com.google.gerrit.server.patch.PatchDetailServiceImpl.PublishResult r; r = db.run(new com.google.gwtorm.client.OrmRunnable<com.google.gerrit.server.patch.PatchDetailServiceImpl.PublishResult, com.google.gerrit.client.reviewdb.ReviewDb>() { public com.google.gerrit.server.patch.PatchDetailServiceImpl.PublishResult run(com.google.gerrit.client.reviewdb.ReviewDb db, com.google.gwtorm.client.Transaction txn, boolean retry) throws com.google.gwtorm.client.OrmException { return doPublishComments(psid, message, approvals, db, txn); } }); try { final com.google.gerrit.server.ChangeMail cm = new com.google.gerrit.server.ChangeMail(server, r.change); cm.setFrom(com.google.gerrit.client.rpc.Common.getAccountId()); cm.setPatchSet(r.patchSet, r.info); cm.setChangeMessage(r.message); cm.setPatchLineComments(r.comments); cm.setReviewDb(db); cm.setHttpServletRequest(com.google.gerrit.server.GerritJsonServlet.getCurrentCall().getHttpServletRequest()); cm.sendComment(); } catch (MessagingException e) { log.error(( send comments by email for patch set   + psid), e); throw new com.google.gerrit.<START_MOD>client.rpc.BaseServiceImplementation<END_MOD>.Failure(e); } return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }
void setUpPatchSetNav(com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> list, com.google.gerrit.client.diff.DiffInfo.FileMeta meta) { com.google.gerrit.client.ui.InlineHyperlink baseLink = null; com.google.gerrit.client.ui.InlineHyperlink selectedLink = null; if (sideA) { baseLink = createLink(PatchUtil.C.patchBase(), null); linkPanel.add(baseLink); } for (int i = 0; i < (list.length()); i++) { com.google.gerrit.client.changes.ChangeInfo.RevisionInfo r = list.get(i); com.google.gerrit.client.ui.InlineHyperlink link = createLink(<START_MOD>r.id(), new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, <END_MOD>r._number()<START_MOD>, r.edit<END_MOD>())); linkPanel.add(link); if (((revision) != null) && (<START_MOD>r.id().equals<END_MOD>(revision.<START_MOD>getId<END_MOD>()))) { selectedLink = link; } } if (selectedLink != null) { selectedLink.setStyleName(style.selected()); } else if (sideA) { baseLink.setStyleName(style.selected()); } if ((meta != null) && (!(Patch.COMMIT_MSG.equals(path)))) { linkPanel.add(createDownloadLink()); } }
public void delete(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeUpdate update, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { ensurePatchSetMatches(ps.getId(), update); checkArgument(ps.isDraft(),   delete non-draft patch set %s ps.getId()); update.setPatchSetState(PatchSetState.DELETED); <START_MOD>if (com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage.of(update.getChange()).writeToReviewDb()) { <END_MOD>db.patchSets().delete(java.util.Collections.singleton(ps)); }<START_MOD> }<END_MOD>
public java.util.List<com.google.gerrit.extensions.common.SshKeyInfo> apply(com.google.gerrit.server.IdentifiedUser user) throws com.google.gwtorm.server.OrmException<START_MOD>, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException<END_MOD> { java.util.List<com.google.gerrit.<START_MOD>reviewdb.client.AccountSshKey> keys = (readFromGit) ? readFromGit(user.getAccountId()) : com.google.gerrit.server.account.GetSshKeys.readFromDb(dbProvider.get(), user.getAccountId()); return com.google.common.collect.Lists.transform(keys, new com.google.common.base.Function<com.google.gerrit.reviewdb.client.AccountSshKey, com.google.gerrit.<END_MOD>extensions.common.SshKeyInfo><START_MOD>() { @java.lang.Override public com.google.gerrit.extensions.common.SshKeyInfo apply(com.google.gerrit.reviewdb.client.AccountSshKey key) { return com.google.gerrit.server.account.GetSshKeys.newSshKeyInfo(key<END_MOD>); <START_MOD>} }<END_MOD>); }
<START_MOD>@java.lang.Override public int hashCode() { return (31 * (filter.hashCode())) * (reviewer.hashCode()); }<END_MOD>
@java.lang.Override protected void configure() {<START_MOD> bind(com.google.gerrit.server.securestore.SecureStore.class).toProvider(com.google.gerrit.pgm.util.SecureStoreProvider.class);<END_MOD> install(copyConfigModule); install(cm); install(sm); }
<START_MOD>@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupName get(com.google.gerrit.reviewdb.client.AccountGroup.NameKey name) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); }<END_MOD>
private void setWebLinks(com.google.gerrit.client.changes.ChangeInfo change, java.lang.String revision, com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revInfo) { com.google.gerrit.client.<START_MOD>config.GitWebInfo<END_MOD> gw = com.google.gerrit.client.Gerrit.<START_MOD>getServerInfo().gitWeb<END_MOD>(); if ((gw != null) && (gw.canLink(revInfo))) { toAnchor(gw.toRevision(change.project(), revision), gw.getLinkName()); } com.google.gwt.core.client.JsArray<com.google.gerrit.client.WebLinkInfo> links = revInfo.commit().web_links(); if (links != null) { for (com.google.gerrit.client.WebLinkInfo link : com.google.gerrit.client.rpc.Natives.asList(links)) { webLinkPanel.add(link.toAnchor()); } } }
private void initProviderJce() { setKeyExchangeFactories(java.util.Arrays.<org.apache.sshd.common.NamedFactory<org.apache.sshd.common<START_MOD>.kex<END_MOD>.KeyExchange>>asList(new org.apache.sshd.server.kex.DHG1.Factory())); setRandomFactory(new org.apache.sshd.common.random.SingletonRandomFactory(new org.apache.sshd.common.random.JceRandom.Factory())); }
<START_MOD>public java.lang.Class<?> findClass(java.lang.String name) throws java.lang.ClassNotFoundException { java.lang.String path = (name.replace('.', '/')) + ".class"; java.io.InputStream resource = target.getResourceAsStream(path); if (resource != null) { try { byte[] bytes = com.google.gerrit.server.plugins.DelegatingClassLoader.getBytes(resource); return defineClass(name, bytes, 0, bytes.length); } catch (java.io.IOException e) { } } throw new java.lang.ClassNotFoundException(name); }<END_MOD>
<START_MOD>private java.util.Map<java.lang.String, java.lang.Object> toRenameSoyData(org.eclipse.jgit.diff.DiffEntry entry) { if (entry == null) { return null; } org.eclipse.jgit.diff.DiffEntry.ChangeType type = entry.getChangeType(); if ((type != (org.eclipse.jgit.diff.DiffEntry.ChangeType.RENAME)) && (type != (org.eclipse.jgit.diff.DiffEntry.ChangeType.COPY))) { return null; } return com.google.common.collect.ImmutableMap.<java.lang.String, java.lang.Object>of("changeType", entry.getChangeType().toString(), "oldPath", entry.getOldPath(), "newPath", entry.getNewPath(), "score", entry.getScore()); }<END_MOD>
<START_MOD>private static boolean toBoolean(java.lang.String v) { if (com.google.common.base.Strings.isNullOrEmpty(v)) { return false; } return v.equalsIgnoreCase("Y"); }<END_MOD>
@java.lang.Override public java.lang.Iterable<com.google.gerrit.extensions.common.CommentInfo> getComments(int changeId, java.lang.String rev) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { try { <START_MOD>java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result<END_MOD> = <START_MOD>gApi.<END_MOD>changes<START_MOD>().id(java.lang.String.valueOf(changeId)).revision(rev).comments(); for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> e : result.entrySet()) { for (com.google.gerrit.extensions.common.CommentInfo i : e.getValue()) { i.path = e.getKey(); } } return com.google.common.collect.Iterables.concat(result.values()); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw <END_MOD>new com.google.gerrit.<START_MOD>extensions.restapi.BadRequestException(e.getMessage(<END_MOD>)); <START_MOD>} }<END_MOD>
@java.lang.Override public void onChangeMerged(com.google.gerrit.server.Event event) { if ((!(allProjects.get().equals(event.getChange().project))) || (!(RefNames.REFS_CONFIG.equals(event.getChange().branch)))) { return; } try { syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.CreateGroupPermissionSyncer.log.error( sync create <START_MOD>account<END_MOD> permissions e); } }
static com.google.gerrit.server.patch.PatchListEntry empty(final java.lang.String fileName) { return new com.google.gerrit.server.patch.PatchListEntry(com.google.gerrit.reviewdb.Patch.ChangeType.MODIFIED, com.google.gerrit.reviewdb.Patch.PatchType.UNIFIED, null, fileName, com.google.gerrit.server.patch.PatchListEntry.EMPTY_HEADER, java.util.Collections.<<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gerrit<END_MOD>.<START_MOD>server<END_MOD>.<START_MOD>patch.GwtOrmBaseEdit<END_MOD>>emptyList()); }
@java.lang.SuppressWarnings("unused") @java.lang.Override public <V> com.google.gerrit.metrics.CallbackMetric<V> newCallbackMetric(java.lang.String name, java.lang.Class<V> valueClass, com.google.gerrit.metrics.Description desc) { <START_MOD>define<END_MOD>(name, desc); return new com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker.CallbackMetricImpl<V>(name, valueClass); }
@org.kohsuke.args4j.Option(name = "-o", usage =   options void addOption(<START_MOD>java.lang.String option) { for (com.google.gerrit.extensions.client.ListChangesOption o : com.google.gerrit.extensions.client.ListChangesOption.values()) { if (o.name().equals(option)) { jsonOpt.add(o); break; } } for (<END_MOD>com.google.gerrit.extensions.api.changes.SubmittedTogetherOption o<START_MOD> : com.google.gerrit.extensions.api.changes.SubmittedTogetherOption.values()) { if (o.name().equals(option)<END_MOD>) { options.add(o); <START_MOD>break; } } throw new java.lang.IllegalArgumentException(( not recognized   + option)); }<END_MOD>
<START_MOD>@org.junit.Test <END_MOD>public void testUpgradeSchema() throws com.google.gwtorm.client.OrmException, java.sql.SQLException { final com.google.gwtorm.data.PhoneBookDb p = phoneBook.open(); try { p.updateSchema(executor); execute( SEQUENCE cnt execute( TABLE foo (cnt INT) execute( TABLE people ADD COLUMN fake_name VARCHAR(20) execute( TABLE people DROP COLUMN registered execute( TABLE addresses execute( SEQUENCE address_id java.util.Set<java.lang.String> sequences; java.util.Set<java.lang.String> tables; p.updateSchema(executor); sequences = dialect.listSequences(db); tables = dialect.listTables(db); assertTrue(sequences.contains("cnt")); assertTrue(tables.contains("foo")); assertTrue(sequences.contains("address_id")); assertTrue(tables.contains("addresses")); p.pruneSchema(executor); sequences = dialect.listSequences(db); tables = dialect.listTables(db); assertFalse(sequences.contains("cnt")); assertFalse(tables.contains("foo")); final com.google.gwtorm.data.<START_MOD>Person<END_MOD>.Key pk = new com.google.gwtorm.data.<START_MOD>Person<END_MOD>.Key("Bob"); final com.google.gwtorm.data.<START_MOD>Person<END_MOD> bob = new com.google.gwtorm.data.<START_MOD>Person<END_MOD>(pk, p.nextAddressId()); p.people().insert(java.util.Collections.singleton(bob)); final com.google.gwtorm.data.<START_MOD>Address<END_MOD> addr = new com.google.gwtorm.data.<START_MOD>Address<END_MOD>(new com.google.gwtorm.data.<START_MOD>Address<END_MOD>.Key(pk, "home"),   place p.addresses().insert(java.util.Collections.singleton(addr)); } finally { p.close(); } final com.google.gwtorm.data.PhoneBookDb2 p2 = phoneBook2.open(); try { ((com.google.gwtorm.jdbc.JdbcSchema) (p2)).renameField(executor, "people", "registered", "isRegistered"); } finally { p2.close(); } }
<START_MOD>public static void suggest(java.lang.String query, int limit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.AccountInfo>> cb) { new com.google.gerrit.client.rpc.RestApi("/accounts/").addParameter("q", query).addParameter("n", limit).get(cb); }<END_MOD>
<START_MOD>java.util.Map<java.lang.String, java.lang.Short> getCustomLabels() { return customLabels; }<END_MOD>
<START_MOD>@org.junit.Test public void testSubmoduleCommitMessage() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<?> superRepo = createProjectWithPush("super-project"); org.eclipse.jgit.junit.TestRepository<?> subRepo = createProjectWithPush("subscribed-to-project"); pushChangeTo(subRepo, "master"); createSubscription(superRepo, "master", "subscribed-to-project", "master"); org.eclipse.jgit.lib.ObjectId subHEAD = pushChangeTo(subRepo, "master"); org.eclipse.jgit.revwalk.RevWalk rw = subRepo.getRevWalk(); org.eclipse.jgit.revwalk.RevCommit subCommitMsg = rw.parseCommit(subHEAD); expectToHaveCommitMessage(superRepo, "master", ((((((("Updated git submodules\n\n" + "Project: ") + (name("subscribed-to-project"))) + " ") + (subHEAD.name())) + "\n\n") + (subCommitMsg.getFullMessage())) + "\n")); }<END_MOD>
public void display(com.google.gerrit.reviewdb.client.Change chg, java.lang.Boolean starred, com.google.gerrit.reviewdb.client.PatchSetInfo info, final com.google.gerrit.common.data.AccountInfoCache acc, com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord) { infoBlock.display(chg, acc, submitTypeRecord); messageBlock.display(chg.getId(), <START_MOD>chg.currentPatchSetId(), <END_MOD>starred, info.getMessage()); }
<START_MOD>@java.lang.Override public int compareTo(com.google.gerrit.client.diff.DiffChunkInfo o) { if ((side) == (o.side)) { return (start) - (o.start); } else if ((side) == (<END_MOD>com.google.gerrit.client.diff.DisplaySide<START_MOD>.A)<END_MOD>) { <START_MOD>int comp = (otherStart) - (o.start); <END_MOD>return <START_MOD>comp ==   ? -1 : comp<END_MOD>; }<START_MOD> else { int comp = (start) - (o.otherStart); return comp ==   ? 1 : comp; } }<END_MOD>
@org.junit.Test public void updateMessage() throws java.lang.Exception { assertEquals(RefUpdate.Result.NEW, modifier.createEdit(change, ps)); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); try { modifier.modifyMessage(edit.get(), edit.get().getEditCommit().getFullMessage()); fail( expected } catch (<START_MOD>java.lang.Exception e) { assertTrue((e instanceof <END_MOD>com.google.gerrit.server.project.InvalidChangeOperationException<START_MOD>));<END_MOD> assertEquals(<START_MOD>e<END_MOD>.getMessage(),   commit message cannot be same as existing commit message } java.lang.String msg = java.lang.String.format( commit message %s change.getKey()); assertEquals(RefUpdate.Result.FORCED, modifier.modifyMessage(edit.get(), msg)); edit = editUtil.byChange(change); assertEquals(msg, edit.get().getEditCommit().getFullMessage()); editUtil.delete(edit.get()); edit = editUtil.byChange(change); assertFalse(edit.isPresent()); }
private void initChannels() { setChannelFactories(java.util.Arrays.<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.<START_MOD>channel.<END_MOD>Channel>>asList(new org.apache.sshd.server.channel.ChannelSession.Factory(), new org.apache.sshd.<START_MOD>server<END_MOD>.forward.TcpipServerChannel.DirectTcpipFactory())); }
@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData <START_MOD>cd<END_MOD>) throws com.google.gwtorm.server.OrmException { <START_MOD>java.util.Set<<END_MOD>com.google.gerrit.reviewdb.client.<START_MOD>Account.Id><END_MOD> <START_MOD>reviewedBy<END_MOD> = <START_MOD>cd<END_MOD>.<START_MOD>reviewedBy<END_MOD>(); <START_MOD>return !(reviewedBy.isEmpty()) ? reviewedBy.contains(id) :<END_MOD> (<START_MOD>id)<END_MOD> == null; }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException( in use by another account } update(db, who, extId); } else { <START_MOD>extId = com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress()); db.accountExternalIds<END_MOD>().insert(<START_MOD>java.util.Collections.singleton(extId.asAccountExternalId())); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress()) != null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, <END_MOD>who.getExternalIdKey(), false); } }
<START_MOD>private static com.google.gerrit.reviewdb.client.AccountGroupMemberAudit toAccountGroupMemberAudit(com.google.gerrit.reviewdb.client.Account.Id id, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.Account.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(id, groupId, ts), me); }<END_MOD>
com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.IntraLineDiff getIntraLineDiff(com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.IntraLineDiffKey key, com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.IntraLineDiffArgs args);
public static com.google.gerrit.reviewdb.client.Change.Id parse(final java.lang.String str) { final com.google.gerrit.reviewdb.client.Change.Id r = new com.google.gerrit.reviewdb.client.Change.Id(); <START_MOD>java.lang.String preparedStr = str; if (preparedStr.endsWith("/")) { preparedStr = preparedStr.substring(0, ((preparedStr.length()) - 1)); } <END_MOD>r.fromString(<START_MOD>preparedStr<END_MOD>); return r; }
<START_MOD>@org.junit.Test public void create() throws java.lang.Exception { TestAccount foo = accounts.create("foo"); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.id.get()).get(); assertThat(info.username).isEqualTo("foo"); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(foo.getId())); assertThat(ref).isNotNull(); org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); assertThat(c.getCommitTime()).isEqualTo(((accountCache.get(foo.getId()).getAccount().getRegisteredOn().getTime()) / 1000)); } }<END_MOD>
public com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>DiffPreferencesInfo<END_MOD> getDiffPrefs() { return diffPrefs; }
<START_MOD>public static void suggestParentCandidates(com.google.gwtjsonrpc.common.AsyncCallback<com.google.gerrit.client.projects.ProjectMap> callback) { new com.google.gerrit.client.rpc.RestApi("/projects/").addParameterRaw("type", "SUGGEST_PARENT_CANDIDATES").addParameterTrue("all").addParameterTrue("d").send(com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren(callback)); }<END_MOD>
private void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException<START_MOD>, com.google.gerrit.server.permissions.PermissionBackendException<END_MOD>, com.google.gwtorm.server.OrmException, java.io.IOException { if (email.equals("ALL")) { java.util.List<com.google.gerrit.extensions.common.EmailInfo> emails = getEmails.apply(rsrc); for (com.google.gerrit.extensions.common.EmailInfo e : emails) { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, e.email), new com.google.gerrit.server.account.DeleteEmail.Input()); } } else { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), new com.google.gerrit.server.account.DeleteEmail.Input()); } }
private boolean suggestGroupAsReviewer(final com.google.gerrit.reviewdb.Project.NameKey project, final com.google.gerrit.common.data.GroupReference group) throws com.google.gwtorm.client.OrmException { if (!(com.google.gerrit.server.patch.AddReviewer.isLegalReviewerGroup(group.getUUID()))) { return false; } try { final <START_MOD>com.google.gerrit.server.account.PerformGroupMembers groupMembers = groupMembersFactory.create(); groupMembers.setProject(project); final <END_MOD>java.util.Set<com.google.gerrit.reviewdb.Account> members = <START_MOD>groupMembers.listAccounts(<END_MOD>group.getUUID()); if (members.isEmpty()) { return false; } final int maxAllowed = cfg.getInt("addreviewer", "maxAllowed", AddReviewer.DEFAULT_MAX_REVIEWERS); if ((maxAllowed > 0) && ((members.size()) > maxAllowed)) { return false; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { return false; } catch (com.google.gerrit.server.project.NoSuchProjectException e) { return false; } return true; }
<START_MOD>@org.junit.Test public void withSecondaryEmails() throws java.lang.Exception { com.google.gerrit.extensions.common.AccountInfo user1 = newAccount("myuser", "My User", "my.user@example.com", true); java.lang.String[] secondaryEmails = new java.lang.String[]{ "foo@example.com", "bar@example.com" }; addEmails(user1, secondaryEmails); java.util.List<com.google.gerrit.extensions.common.AccountInfo> result = assertQuery(user1.username, user1); assertThat(result.get(0).secondaryEmails).isNull(); result = assertQuery(newQuery(user1.username).withOption(ListAccountsOption.DETAILS), user1); assertThat(result.get(0).secondaryEmails).isNull(); result = assertQuery(newQuery(user1.username).withOption(ListAccountsOption.ALL_EMAILS), user1); assertThat(result.get(0).secondaryEmails).containsAllIn(java.util.Arrays.asList(secondaryEmails)); result = assertQuery(newQuery(user1.username).withOptions(ListAccountsOption.DETAILS, ListAccountsOption.ALL_EMAILS), user1); assertThat(result.get(0).secondaryEmails).containsAllIn(java.util.Arrays.asList(secondaryEmails)); }<END_MOD>
<START_MOD>@java.lang.Override public void onTopicEdited(com.google.gerrit.extensions.events.TopicEditedListener.Event ev) { try { ch.doTopicChangedHook(getChange(ev.getChange()), getAccount(ev.getEditor()), ev.getOldTopic(), db.get()); } catch (com.google.gwtorm.server.OrmException e) { } }<END_MOD>
public Account.Id <START_MOD>getEffectiveAccountId<END_MOD>() { checkState(((<START_MOD>effectiveAccountId<END_MOD>) != null),   identity for %s is not from an IdentifiedUser: %s getClass().getSimpleName(), authorIdent.toExternalString()); return <START_MOD>effectiveAccountId<END_MOD>; }
<START_MOD>private static native <T extends com.google.gwt.core.client.JavaScriptObject> T parse(com.google.gwt.core.client.JavaScriptObject p, java.lang.String d);<END_MOD>
<START_MOD>public com.google.gerrit.client.rpc.RestApi id(int id, java.lang.String project) { return idRaw((((com.google.gwt.http.client.URL.encodePathSegment(project)) + "~") + id)); }<END_MOD>
static com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListEntry readFrom(java.io.InputStream in) throws java.io.IOException { com.google.gerrit.reviewdb.client.Patch.ChangeType changeType = readEnum(in, com.google.gerrit.reviewdb.client.Patch.ChangeType.values()); com.google.gerrit.reviewdb.client.PatchType patchType = readEnum(in, com.google.gerrit.reviewdb.client.PatchType.values()); java.lang.String oldName = readString(in); java.lang.String newName = readString(in); byte[] hdr = readBytes(in); int ins = readVarInt32(in); int del = readVarInt32(in); long size = readFixInt64(in); long sizeDelta = readFixInt64(in); org.eclipse.jgit.diff.Edit[] editArray = com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListEntry.readEditArray(in); org.eclipse.jgit.diff.Edit[] editsDueToRebase = com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListEntry.readEditArray(in); return new com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListEntry(changeType, patchType, oldName, newName, hdr, com.google.common.collect.ImmutableList.copyOf(editArray), com.google.common.collect.ImmutableSet.copyOf(editsDueToRebase), ins, del, size, sizeDelta); }
<START_MOD>public com.google.gwt.dom.client.DivElement getCmB() { return cmB; }<END_MOD>
public void run() { synchronized(cleanup) {<START_MOD> run = true;<END_MOD> for (final java.util.Iterator<java.lang.Runnable> i = cleanup.iterator(); i.hasNext();) { try { i.next().run(); } catch (java.lang.Throwable err) { com.google.gerrit.server.RequestCleanup.log.error( to execute per-request cleanup err); } i.remove(); } } }
private com.google.gerrit.server.account.AccountState makeUser(final java.lang.String name, final java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account, java.util.Collections.<START_MOD><com.google.gerrit.reviewdb.client.AccountGroup.UUID><END_MOD>emptySet(), java.util.Collections.<START_MOD><com.google.gerrit.reviewdb.client.AccountExternalId><END_MOD>emptySet(), new java.util.HashMap<START_MOD><com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>><END_MOD>()); }
<START_MOD>@java.lang.Override public synchronized <F1> com.google.gerrit.metrics.Timer1<F1> newTimer(java.lang.String name, com.google.gerrit.metrics.Description desc, com.google.gerrit.metrics.Field<F1> field1) { checkArgument((!(desc.isGauge())), "timer must not be a gauge"); checkArgument((!(desc.isRate())), "timer must not be a rate"); checkArgument(desc.isCumulative(), "timer must be cumulative"); checkArgument(((desc.getTimeUnit()) != null), "timer must have a unit"); com.google.gerrit.metrics.dropwizard.TimerImpl1<F1> m = new com.google.gerrit.metrics.dropwizard.TimerImpl1(this, name, field1); define(name, desc); bucketed.put(name, m); return m; }<END_MOD>
public static <T> void itemOf(com.google.inject.Binder binder, com.google.inject.TypeLiteral<T> member) { com.google.gerrit.extensions.registration.DynamicItem.<START_MOD>itemOf(binder<END_MOD>, member, <START_MOD>false<END_MOD>); }
<START_MOD>public com.google.gerrit.server.change.CheckResult check(com.google.gerrit.reviewdb.client.Change c) { reset(); change = c; try { checkImpl(); com.google.gerrit.server.change.CheckResult result = new com.google.gerrit.server.change.CheckResult(); result.messages = messages; return result; } finally { if ((rw) != null) { rw.release(); } if ((repo) != null) { repo.close(); } } }<END_MOD>
@org.junit.Test public void nullAsDefault() throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); <START_MOD>java.lang.Long<END_MOD> t; t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank",     t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); }
@java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doSave(<START_MOD>info.enableImageServer()<END_MOD>); }
@org.junit.Test public void banCommit() throws java.lang.Exception { com.google.gerrit.acceptance.GitUtil.add(git, "a.txt",   content com.google.gerrit.acceptance.GitUtil.Commit c = com.google.gerrit.acceptance.GitUtil.createCommit(git, admin.getIdent(), "subject"); com.google.gerrit.acceptance.RestResponse r = adminSession.put((("/projects/" + (project.get())) + "/ban/"), BanCommit.Input.fromCommits(c.getCommit().getName())); <START_MOD>assertThat(r.getStatusCode()).isEqualTo<END_MOD>(HttpStatus.SC_OK<START_MOD>); com.google.gerrit.server.project.BanCommit.BanResultInfo info = newGson().fromJson(<END_MOD>r.<START_MOD>getReader(),<END_MOD> com.google.gerrit.server.project.BanCommit.BanResultInfo<START_MOD>.class); assertThat(com.google.common.collect.Iterables.getOnlyElement(<END_MOD>info<START_MOD>.newlyBanned)).isEqualTo(c.getCommit().getName()); assertThat(info.alreadyBanned).isNull(); assertThat(info.ignored).isNull(); org.eclipse.jgit.transport.PushResult pushResult<END_MOD> = <START_MOD>com.google.gerrit.acceptance.GitUtil.pushHead(git, "refs/heads/master", false); assertThat(<END_MOD>pushResult<START_MOD>.getRemoteUpdate(<END_MOD>"refs/heads/master").getMessage().startsWith( banned commit }
com.googlesource.gerrit.plugins.lfs.locks.LfsGetLocksResponse listLocks(java.lang.String project) { com.googlesource.gerrit.plugins.lfs.locks.LfsLocksHandler.log.debug( locks for {} project project); return new com.googlesource.gerrit.plugins.lfs.locks.LfsGetLocksResponse(projects.getUnchecked(project).<START_MOD>getLocks<END_MOD>(), null); }
private static void inline(org.commonmark.node.HtmlInline curr) { java.lang.String html = curr.getLiteral(); java.util.regex.Matcher m = com.google.gitiles.doc.GitilesHtmlExtension.BREAK.matcher(html); if (m.matches()) { switch (m.group(1).toLowerCase()) { case "br" : curr.insertAfter(new org.commonmark.node.HardLineBreak()); curr.unlink(); return; case "hr" : curr.insertAfter(new org.commonmark.node.ThematicBreak()); curr.unlink(); return; } } m = com.google.gitiles.doc.GitilesHtmlExtension.ANCHOR_OPEN.matcher(html); if (m.matches()) { java.lang.String name = m.group(2); org.commonmark.node.Node next = curr.getNext(); if (com.google.gitiles.doc.GitilesHtmlExtension.isAnchorClose(next)) { next.unlink(); curr.getNext(); com.google.gitiles.doc.NamedAnchor anchor = new com.google.gitiles.doc.NamedAnchor(); anchor.setName(name); curr.insertAfter(anchor); curr.unlink(); com.google.gitiles.doc.MarkdownUtil.trimPreviousWhitespace(anchor); return; } } curr.unlink(); }
<START_MOD>@java.lang.Override public com.google.gerrit.extensions.common.WebLinkInfo getProjectWeblink(java.lang.String projectName) { return new com.google.gerrit.extensions.common.WebLinkInfo(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.name, null, java.lang.String.format("%s/%s", com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.baseUrl, projectName), Target.BLANK); }<END_MOD>
<START_MOD>public java.lang.String generateToken(java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id) { if (key.isPresent()) { try { byte[] initVector = new byte[com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.IV_LENGTH]; rndm.nextBytes(initVector); javax.crypto.Cipher cipher = cipher(initVector, javax.crypto.Cipher.ENCRYPT_MODE); return org.eclipse.jgit.util.Base64.encodeBytes(com.google.common.primitives.Bytes.concat(initVector, cipher.doFinal(java.lang.String.format("%s-%s-%s", operation, id.name(), timeout()).getBytes(java.nio.charset.StandardCharsets.UTF_8)))); } catch (java.security.GeneralSecurityException e) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.log.error("Token generation failed with error", e); } } return "not:required"; }<END_MOD>
private com.google.gerrit.<START_MOD>extensions.common.ProjectSubmitType getSubmitType(final com.google.gerrit.<END_MOD>reviewdb.client.<START_MOD>Change change, <END_MOD>final com.google.gerrit.reviewdb.client.<START_MOD>PatchSet ps) { try {<END_MOD> final com.google.gerrit.<START_MOD>common.data.SubmitTypeRecord r = changeControlFactory.controlFor(change, identifiedUserFactory.create(change.getOwner())).getSubmitTypeRecord(db,<END_MOD> ps)<START_MOD>; if ((r.status) != (<END_MOD>SubmitTypeRecord<START_MOD>.Status.OK)) { com.google.gerrit.server.git.MergeOp.log.error(( to get submit type for   + (change.getKey()))); return null; } return<END_MOD> r<START_MOD>.type; } catch (<END_MOD>com.google.gerrit.server.<START_MOD>project.NoSuchChangeException e) { com.google.gerrit.server.<END_MOD>git.MergeOp.log.error(( to get submit type for   + (change.getKey()))<START_MOD>, e<END_MOD>); return null; } <START_MOD>}<END_MOD>
@org.junit.Before public void setUpInjector() throws java.lang.Exception { <START_MOD>config.setInt("index", null, "maxPages", 10); <END_MOD>lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); com.google.inject.Injector injector = createInjector(); lifecycle.add(injector); injector.injectMembers(this); lifecycle.start(); db = schemaFactory.open(); schemaCreator.create(db); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId(); com.google.gerrit.reviewdb.client.Account userAccount = db.accounts().get(userId); userAccount.setPreferredEmail("user@example.com"); db.accounts().update(com.google.common.collect.ImmutableList.of(userAccount)); user = userFactory.create(com.google.inject.util.Providers.of(db), userId); requestContext.setContext(newRequestContext(userAccount.getId())); }
private boolean isJiraConnectSuccessful() { ui.message( Jira connectivity ...   try { new com.googlesource.gerrit.plugins.its.jira.JiraClient(jiraUrl<START_MOD>,<END_MOD> jiraUsername, jiraPassword).<START_MOD>sysInfo<END_MOD>(<START_MOD>).getVersion(<END_MOD>); ui.message("[OK]\n"); return true; } catch (java.<START_MOD>net<END_MOD>.<START_MOD>URISyntaxException | java.io.IOException<END_MOD> e) { ui.message( (%s) e.toString()); return false; } }
<START_MOD>public static org.bouncycastle.openpgp.PGPPublicKey getSigner(java.lang.Iterable<org.bouncycastle.openpgp.PGPPublicKeyRing> keyRings, org.bouncycastle.openpgp.PGPSignature sig, org.bouncycastle.openpgp.PGPPublicKey onKey) throws org.bouncycastle.openpgp.PGPException { for (org.bouncycastle.openpgp.PGPPublicKeyRing kr : keyRings) { org.bouncycastle.openpgp.PGPPublicKey k = kr.getPublicKey(); sig.init(new org.bouncycastle.openpgp.operator.bc.BcPGPContentVerifierBuilderProvider(), k); if (sig.verifyCertification(onKey)) { return k; } } return null; }<END_MOD>
<START_MOD>@org.junit.Test public void listProjects() throws com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey someProject = new com.google.gerrit.reviewdb.client.Project.NameKey("some-project"); com.google.gerrit.acceptance.GitUtil.createProject(sshSession, someProject.get()); com.google.gerrit.acceptance.RestResponse r = GET("/projects/"); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ProjectInfo> result = com.google.gerrit.acceptance.rest.project.ListProjectsIT.toProjectInfoMap(r); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjects(java.util.Arrays.asList(allUsers, someProject, existingProject), result.values()); }<END_MOD>
private void findParameters(final java.util.List<com.google.gwtorm.schema.ColumnModel> r, final org.antlr.runtime.tree.Tree node) { switch (node.getType()) { case QueryParser.WHERE<START_MOD> : case QueryParser.LIMIT<END_MOD> : extractParameters(r, node); break; default : for (int i = 0; i < (node.getChildCount()); i++) { findParameters(r, node.getChild(i)); } break; } }
@org.junit.Test public void testVerifyAgainstDifferentOperation() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId(), <START_MOD>java.time.Instant.now(), <END_MOD>1); assertThat(auth.verifyAuthInfo(info.authToken, "p", zeroId())).isFalse(); }
@java.lang.Override protected void onLoad() { super.onLoad(); <START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gerrit.client.projects.ProjectList.all<END_MOD>(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.<START_MOD>client<END_MOD>.<START_MOD>projects<END_MOD>.ProjectList>(this) { @java.lang.Override protected void preDisplay(final com.google.gerrit.<START_MOD>client<END_MOD>.<START_MOD>projects<END_MOD>.ProjectList result) { createProjectLinkPanel.setVisible(result.canCreateProject()); projects.display(result); projects.finishDisplay(); } }); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change.Status status = rsrc.getChange().getStatus(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions().database(db); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Delete").setTitle(( change   + (rsrc.getId()))).setVisible(and(<START_MOD>isChangeDeletable<END_MOD>(status), perm.testCond(ChangePermission.DELETE))); }
<START_MOD>private java.lang.String getAccessTokenAttribute(java.lang.String tokenResponse) throws com.googlesource.gerrit.plugins.cfoauth.UAAClientException { if (com.google.common.base.Strings.isNullOrEmpty(tokenResponse)) { throw new com.googlesource.gerrit.plugins.cfoauth.UAAClientException("Can't extract a token from an empty string"); } com.google.gson.JsonObject json = getAsJsonObject(tokenResponse); java.lang.String accessToken = getAttribute(json, com.googlesource.gerrit.plugins.cfoauth.UAAClient.ACCESS_TOKEN_ATTRIBUTE); if (accessToken == null) { throw new com.googlesource.gerrit.plugins.cfoauth.UAAClientException("Can't extract a token: missing or invalid 'access_token' attribute"); } return accessToken; }<END_MOD>
public static com.google.gerrit.server.edit.tree.ChangeFileContentModificationSubject assertThat(com.google.gerrit.server.edit.tree.ChangeFileContentModification modification) { return assertAbout(com.google.gerrit.server.edit.tree.MODIFICATION_SUBJECT_FACTORY).that(modification); }
<START_MOD>public native final com.google.gerrit.client.config.SuggestInfo suggest();<END_MOD>
<START_MOD>void tryOnce() throws com.ericsson.gerrit.plugins.highavailability.forwarder.rest.ForwardingException { try { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult result = send(); if (!(result.isSuccessful())) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.log.error(((("Unable to " + (name)) + ": ") + (result.getMessage()))); throw new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.ForwardingException(true, ((("Unable to " + (name)) + ": ") + (result.getMessage()))); } } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.log.error("Error trying to {}", name, e); throw new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.ForwardingException(isRecoverable(e), e.getMessage()); } }<END_MOD>
@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commitAt(org.eclipse.jgit.lib.ObjectId expected) throws java.io.IOException { if (com.google.common.base.Objects.equal(src, expected)) { return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(getRefName()); if (expected != null) { ru.setExpectedOldObjectId(expected); } else { ru.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); } ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); switch (ru.update(rw)) { case NEW : case FAST_FORWARD : revision = rw.parseCommit(ru.getNewObjectId()); update.<START_MOD>fireRefUpdatedEvent<END_MOD>(ru); return revision; default : throw new java.io.IOException(((((( update   + (ru.getName())) +   in   + (db.getDirectory())) +     + (ru.getResult()))); } }
public static com.google.gerrit.client.rpc.RestApi hashtag(int changeId<START_MOD>, @com.google.gerrit.common.Nullable java.lang.String project<END_MOD>, java.lang.String hashtag) { return com.google.gerrit.client.changes.ChangeApi.change(changeId<START_MOD>, project<END_MOD>).view("hashtags").id(hashtag); }
<START_MOD>public static boolean isInstalled() { if (!(com.google.gwtexpui.user.client.UserAgent.Flash.checked)) { com.google.gwtexpui.user.client.UserAgent.Flash.installed = com.google.gwtexpui.user.client.UserAgent.Flash.hasFlash(); } return com.google.gwtexpui.user.client.UserAgent.Flash.installed; }<END_MOD>
private org.eclipse.jgit.revwalk.RevCommit newMergeCommit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectInserter oi, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.server.project.<START_MOD>ProjectState projectState<END_MOD>, org.eclipse.jgit.revwalk.RevCommit mergeTip, com.google.gerrit.extensions.common.MergeInput merge, org.eclipse.jgit.lib.PersonIdent authorIdent, java.lang.String commitMessage) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException { if (com.google.common.base.Strings.isNullOrEmpty(merge.source)) { throw new com.google.gerrit.extensions.restapi.BadRequestException( must be non-empty } com.google.gerrit.server.project.ProjectState state = <START_MOD>projectState<END_MOD>; org.eclipse.jgit.revwalk.RevCommit sourceCommit = com.google.gerrit.server.git.MergeUtil.resolveCommit(repo, rw, merge.source); if (!(commits.canRead(state, repo, sourceCommit))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(( not have read permission for:   + (merge.source))); } com.google.gerrit.server.git.MergeUtil mergeUtil = mergeUtilFactory.create(state); java.lang.String mergeStrategy = com.google.common.base.MoreObjects.firstNonNull(com.google.common.base.Strings.emptyToNull(merge.strategy), mergeUtil.mergeStrategyName()); return com.google.gerrit.server.git.MergeUtil.createMergeCommit(oi, repo.getConfig(), mergeTip, sourceCommit, mergeStrategy, authorIdent, commitMessage, rw); }
private void update() { if ((colWidth.getIntValue()) <= 0) { new com.google.gerrit.client.ErrorDialog(PatchUtil.C.illegalNumberOfColumns()).center(); return; } com.google.gerrit.<START_MOD>extensions.common.DiffPreferencesInfo dp = getValue(); dp.ignoreWhitespace = <END_MOD>getIgnoreWhitespace()<START_MOD>; dp.context = <END_MOD>getContext()<START_MOD>; dp.tabSize = <END_MOD>tabWidth.getIntValue()<START_MOD>; dp.lineLength = <END_MOD>colWidth.getIntValue()<START_MOD>; dp.<END_MOD>syntaxHighlighting<START_MOD> = syntaxHighlighting.getValue(); dp.<END_MOD>intralineDifference<START_MOD> = intralineDifference.getValue(); dp.showWhitespaceErrors = <END_MOD>whitespaceErrors.getValue()<START_MOD>; dp.<END_MOD>showLineEndings<START_MOD> = showLineEndings.getValue(); dp.<END_MOD>showTabs<START_MOD> = showTabs.getValue(); dp.<END_MOD>skipDeleted<START_MOD> = skipDeleted.getValue(); dp.<END_MOD>skipUncommented<START_MOD> = skipUncommented.getValue(); dp.<END_MOD>expandAllComments<START_MOD> = expandAllComments.getValue(); dp.<END_MOD>retainHeader<START_MOD> = retainHeader.getValue(); dp.<END_MOD>manualReview<START_MOD> = manualReview.getValue(<END_MOD>); listenablePrefs.set(dp); }
void appendSubmittedBy(com.google.gerrit.reviewdb.client.Account<START_MOD>.Id<END_MOD> <START_MOD>accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account<END_MOD>) { sb.append(   appendUserData(<START_MOD>accountId, account<END_MOD>); sb.append("\n"); }
public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException { who = realm.authenticate(who); try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); try { final com.google.gerrit.reviewdb.client.AccountExternalId.Key key = com.google.gerrit.server.account.AccountManager.id(who); final com.google.gerrit.reviewdb.client.AccountExternalId id = <START_MOD>getAccountExternalId(db, key); if (id == null) { return create(db, who); } else { com.google.gerrit.reviewdb.client.Account act = db.accounts<END_MOD>().get(<START_MOD>id.getAccountId()); if ((act == null) || (!(act.isActive()))) { throw new com.google.gerrit.server.account.AccountException( error, account inactive } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.getAccountId(), <END_MOD>key<START_MOD>, false); } } finally { db.close(); } } catch (com.google.gwtorm.server.OrmException e<END_MOD>) { throw new com.google.gerrit.server.account.AccountException( error e)<START_MOD>; } }<END_MOD>
private java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> loadDashboards(final com.google.gerrit.reviewdb.client.Project<START_MOD> project<END_MOD>, final org.eclipse.jgit.lib.Repository repo, final org.eclipse.jgit.revwalk.RevWalk revWalk, final org.eclipse.jgit.lib.Ref ref) throws java.io.IOException { final java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> output = com.google.common.collect.Maps.newTreeMap(); final org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(ref.getObjectId()); final org.eclipse.jgit.revwalk.RevTree tree = commit.getTree(); org.eclipse.jgit.treewalk.TreeWalk treeWalk = new org.eclipse.jgit.treewalk.TreeWalk(repo); try { treeWalk.addTree(tree); treeWalk.setRecursive(true); while (treeWalk.next()) { <START_MOD>final org.eclipse.jgit.lib.ObjectLoader loader = repo.open(treeWalk.getObjectId(0)); final <END_MOD>com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo info = <START_MOD>loadDashboard(project, ref.getName(), treeWalk.getPathString(), loader); output.put(<END_MOD>info.<START_MOD>id,<END_MOD> info<START_MOD>); } } finally<END_MOD> { <START_MOD>treeWalk.release(<END_MOD>); } <START_MOD>return output<END_MOD>; }
public boolean <START_MOD>isMatchable<END_MOD>() <START_MOD>{ return (this) instanceof<END_MOD> com.google.<START_MOD>gerrit<END_MOD>.server.<START_MOD>query.MatchablePredicate<END_MOD>;<START_MOD> }<END_MOD>
private java.util.Set<com.google.gerrit.reviewdb.Project.NameKey> getAllParents(final com.google.gerrit.reviewdb.Project.NameKey projectName) { final java.util.Set<com.google.gerrit.reviewdb.Project.NameKey> parents = new java.util.HashSet<com.google.gerrit.reviewdb.Project.NameKey>(); com.google.gerrit.reviewdb.Project.NameKey p = projectName; while ((p != null) && (parents.add(p))) { final com.google.gerrit.server.project.ProjectState e = projectCache.get(p); if (e == null) { break; } p = <START_MOD>parentResolver.get<END_MOD>(e.getProject()); } return parents; }
@java.lang.Override public void deleteBranches(com.google.gerrit.extensions.api.projects.DeleteBranchesInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteBranches.apply(checkExists(), in); } catch (com.google.gwtorm.server.OrmException | java.io.IOException <START_MOD>| com.google.gerrit.server.permissions.PermissionBackendException <END_MOD>e) { throw new com.google.gerrit.extensions.restapi.RestApiException( delete branches e); } }
@java.lang.Override public com.google.gerrit.common.data.GroupDetail call() throws com.google.gerrit.server.account.NoSuchGroupException, com.google.gwtorm.client.OrmException { control = groupControl.validateFor(groupId); final com.google.gerrit.reviewdb.AccountGroup group = control.getAccountGroup(); final com.google.gerrit.common.data.GroupDetail detail = new com.google.gerrit.common.data.GroupDetail(); detail.setGroup(group); detail.setOwnerGroup(groupCache.get(group.getOwnerGroupId())); switch (group.getType()) { case INTERNAL : detail.setMembers(loadMembers()); <START_MOD>detail.setIncludedGroups(loadIncludedGroups()); <END_MOD>break; } detail.setAccounts(aic.create()); <START_MOD>detail.setGroups(gic.create()); <END_MOD>return detail; }
private com.google.gerrit.server.change.ChangeResource parseResource(com.google.gerrit.acceptance.PushOneCommit.Result r) throws java.lang.Exception { java.util.List<com.google.gerrit.server.<START_MOD>notedb<END_MOD>.<START_MOD>ChangeNotes<END_MOD>> <START_MOD>notes<END_MOD> = changeFinder.find(r.getChangeId()); assertThat(<START_MOD>notes<END_MOD>).hasSize(1); return changeResourceFactory.create(<START_MOD>changeControlFactory.controlFor(notes<END_MOD>.get(0)<START_MOD>, atrScope.get().getUser())<END_MOD>); }
@org.junit.Test public void copyMaxScoreOnRework() throws java.lang.Exception { java.lang.String subject =   commit java.lang.String file = "a.txt"; codeReview.setCopyMaxScore(true); saveLabelConfig(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), subject, file,   contents com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, "refs/for/master"); <START_MOD>revision(r).approve(); assertApproval<END_MOD>(r, 2); <START_MOD>push = pushFactory.create(db, user.getIdent(), subject, file,   contents r.getChangeId()); r = push.to(git, "refs/for/master"); <END_MOD>assertApproval(r, 2); }
private void appendHeader(<START_MOD>com.google.gerrit.common.data.PatchScript script, <END_MOD>final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m) { m.openTr(); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().iconCell()); m.addStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.closeTd(); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.addStyleName(Gerrit.RESOURCES.css().lineNumber()); m.closeTd(); m.openTd(); m.setStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.setAttribute("width", "50%"); m.append(PatchUtil.C.patchHeaderOld()); m.<START_MOD>br(); if ( < (script.getA().size())) { if ((idSideA) == null) { downloadLink(m, patchKey, "1"); } else { downloadLink(m, new com.google.gerrit.reviewdb.Patch.Key(idSideA, patchKey.get()), "0"); } } m.<END_MOD>closeTd(); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.addStyleName(Gerrit.RESOURCES.css().lineNumber()); m.closeTd(); m.openTd(); m.setStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.setAttribute("width", "50%"); m.append(PatchUtil.C.patchHeaderNew()); m.<START_MOD>br(); if ( < (script.getA().size())) { downloadLink(m, patchKey, "0"); } m.<END_MOD>closeTd(); m.closeTr(); }
<START_MOD>public boolean hasPushTask() { taskLock.lock(); try { if ((totalPushCount) == 0) { return false; } } finally { taskLock.unlock(); } return true; }<END_MOD>
public com.google.gerrit.server.account.GroupControl controlFor(com.google.gerrit.common.data.GroupDescription.Basic group) { return new com.google.gerrit.server.account.GroupControl(user.get(), group<START_MOD>, groupBackend<END_MOD>); }
<START_MOD>public final org.eclipse.jgit.notes.NoteMap commitNewNotes(org.eclipse.jgit.notes.NoteMap notes, java.lang.String notesBranch, org.eclipse.jgit.lib.PersonIdent commitAuthor, java.lang.String commitMessage) throws java.io.IOException { this.overwrite = false; commitNotes(notes, notesBranch, commitAuthor, commitMessage); org.eclipse.jgit.notes.NoteMap newlyCreated = org.eclipse.jgit.notes.NoteMap.newEmptyMap(); for (org.eclipse.jgit.notes.Note n : notes) { if (!(base.contains(n))) { newlyCreated.set(n, n.getData()); } } return newlyCreated; }<END_MOD>
<START_MOD>@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if (((event.getSource()) == (newTopic)) && ((event.getCharCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER))) { doTopicEdit(); } }<END_MOD>
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepo, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException( <START_MOD>account<END_MOD> wasn automatically loaded }
<START_MOD>@org.junit.Test public void pushToPublishMagicBranchIsAllowed() throws java.lang.Exception { createChange("refs/publish/master"); com.google.gerrit.acceptance.PushOneCommit.Result result = pushTo("refs/publish/master"); result.assertOkStatus(); assertThat(result.getMessage()).endsWith("Pushing to refs/publish/* will be deprecated, use refs/for/* instead.\n"); }<END_MOD>
<START_MOD>@org.junit.Test public void addRemoveMember() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount user = accounts.create("user"); assertEquals(HttpStatus.SC_CREATED, PUT("/groups/Administrators/members/user")); assertMembers("Administrators", admin, user); assertEquals(HttpStatus.SC_NO_CONTENT, DELETE("/groups/Administrators/members/user")); assertMembers("Administrators", admin); }<END_MOD>
<START_MOD>public static boolean isRE(java.lang.String str) { return str.startsWith(AccessSection.REGEX_PREFIX); }<END_MOD>
@java.lang.Override public void remove() { guiceFilter.destroy(); <START_MOD>if (guiceFilter == (filter)) { filter = null; <END_MOD>}<START_MOD> }<END_MOD>
<START_MOD>@java.lang.Override public SiteIndexer.Result indexAll(com.google.gerrit.server.index.group.GroupIndex index) { org.eclipse.jgit.lib.ProgressMonitor progress = new org.eclipse.jgit.lib.TextProgressMonitor(new java.io.PrintWriter(progressOut)); progress.start(2); com.google.common.base.Stopwatch sw = com.google.common.base.Stopwatch.createStarted(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> uuids; try { uuids = collectGroups(progress); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.index.group.AllGroupsIndexer.log.error("Error collecting groups", e); return new com.google.gerrit.server.index.group.Result(sw, false, 0, 0); } return reindexGroupss(index, uuids, progress); }<END_MOD>
private void evictCache(com.google.common.cache.Cache<?, ?> cache, java.lang.String cacheName, java.lang.Object key) { if (<START_MOD>CacheContants<END_MOD>.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); } else { cache.invalidate(key); } com.ericsson.gerrit.plugins.<START_MOD>highavailability.forwarder.rest<END_MOD>.EvictCacheRestApiServlet.logger.debug((   + cacheName)); }
<START_MOD>private void addLink(java.lang.String label, final com.google.gerrit.reviewdb.client.PatchSet.Id id) { final com.google.gwt.user.client.ui.Anchor anchor = new com.google.gwt.user.client.ui.Anchor(label); anchor.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if ((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.A)) { idSideA = id; } else { idSideB = id; } com.google.gerrit.reviewdb.client.Patch.Key k = new com.google.gerrit.reviewdb.client.Patch.Key(idSideB, patchKey.get()); switch (screenType) { case SIDE_BY_SIDE : com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toPatchSideBySide(idSideA, k)); break; case UNIFIED : com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toPatchUnified(idSideA, k)); break; } } }); links.add(anchor); linkPanel.add(anchor); }<END_MOD>
public final void setOwnerUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { owner_id(com.google.gwt.http.client.URL.encodePathSegment(<START_MOD>com.google.gwt.http.client.URL.encodeQueryString(<END_MOD>uuid.get()))<START_MOD>)<END_MOD>; }
private void initIgnoreWhitespace() { ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_NONE(), com.google.gerrit.client.diff.IGNORE_NONE.name()); ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_SPACE_AT_EOL(), com.google.gerrit.client.diff.<START_MOD>IGNORE_AT_LINE_END<END_MOD>.name()); ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_SPACE_CHANGE(), com.google.gerrit.client.diff.<START_MOD>IGNORE_LEADING_AND_END<END_MOD>.name()); ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_ALL_SPACE(), com.google.gerrit.client.diff.<START_MOD>IGNORE_ALL<END_MOD>.name()); }
protected void populateProjects() { <START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gerrit.client.projects.ProjectList.all<END_MOD>(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.<START_MOD>client<END_MOD>.<START_MOD>projects<END_MOD>.ProjectList>() { @java.lang.Override public void onSuccess(final com.google.gerrit.<START_MOD>client<END_MOD>.<START_MOD>projects<END_MOD>.ProjectList result) { projectsTab.display(result); if (firstPopupLoad) { firstPopupLoad = false; displayPopup(); } } }); }
public static com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject> cs(final com.google.gerrit.reviewdb.client.Change.Id id, <START_MOD>@com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, <END_MOD>final com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.change.ChangeActions.setEnabled(false, draftButtons); return new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id<START_MOD>, project<END_MOD>)); } @java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.ChangeActions.setEnabled(true, draftButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id<START_MOD>, project<END_MOD>)); } else { super.onFailure(err); } } }; }
public java.lang.Iterable<com.google.gerrit.extensions.common.WebLinkInfo> getProjectLinks(java.lang.String project) { java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.extensions.webui.ProjectWebLink webLink : projectLinks) { <START_MOD>java.lang.String name = webLink.getLinkName(); java.lang.String url = webLink.getProjectUrl(project); if ((!(com.google.common.base.Strings.isNullOrEmpty(name))) && (!(com.google.common.base.Strings.isNullOrEmpty(url)))) { <END_MOD>links.add(new com.google.gerrit.extensions.common.WebLinkInfo(<START_MOD>name<END_MOD>, webLink.getImageUrl(), <START_MOD>url<END_MOD>, webLink.getTarget())); } <START_MOD>} <END_MOD>return links; }
public java.lang.String getGerritPluginName(java.nio.file.Path srcPath) { java.lang.String fileName = srcPath.getFileName().toString(); if (com.google.gerrit.server.plugins.PluginLoader.isJsPlugin(fileName)) { return fileName.substring(0, fileName.<START_MOD>lastIndexOf<END_MOD>(<START_MOD>'.'<END_MOD>)); } if (serverPluginFactory.handles(srcPath)) { return serverPluginFactory.getPluginName(srcPath); } return null; }
@java.lang.Override protected void loadDefaults() { approvals = com.google.common.collect.ImmutableListMultimap.of(); reviewers = com.google.common.collect.ImmutableSetMultimap.of(); submitRecords = com.google.common.collect.ImmutableList.of(); allChangeMessages = com.google.common.collect.ImmutableList.of(); changeMessagesByPatchSet = com.google.common.collect.ImmutableListMultimap.of(); comments = com.google.common.collect.ImmutableListMultimap.of(); hashtags = com.google.common.collect.ImmutableSet.of(); <START_MOD>patchSets = com.google.common.collect.ImmutableSortedMap.of(); <END_MOD>}
public void testInlineWithSingleProperty() throws java.io.IOException { com.googlesource.gerrit.plugins.its.workflow.ActionRequest actionRequest = createMock(com.googlesource.gerrit.plugins.its.workflow.ActionRequest.class); expect(actionRequest.getParameter(1)).andReturn("inline"); expect(actionRequest.getParameters()).andReturn(new java.lang.String[]{ "inline", "${subject}" }); java.util.Set<com.googlesource.gerrit.plugins.its.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); com.googlesource.gerrit.plugins.its.workflow.Property propertySubject = createMock(com.googlesource.gerrit.plugins.its.workflow.Property.class); expect(propertySubject.getKey()).andReturn("subject").anyTimes(); expect(propertySubject.getValue()).andReturn("Rosebud").anyTimes(); properties.add(propertySubject); org.easymock.IAnswer<java.lang.Boolean> answer = new com.googlesource.gerrit.plugins.hooks.workflow.action.AddVelocityCommentTest.VelocityWriterFiller("Rosebud"); org.easymock.Capture<org.apache.velocity.VelocityContext> contextCapture = org.easymock.<START_MOD>EasyMock.newCapture<END_MOD>(); expect(velocityRuntime.evaluate(capture(contextCapture), ((java.io.Writer) (anyObject())), ((java.lang.String) (anyObject())), eq("${subject}"))).andAnswer(answer); its.addComment("4711", "Rosebud"); replayMocks(); com.googlesource.gerrit.plugins.its.workflow.action.AddVelocityComment addVelocityComment = createAddVelocityComment(); addVelocityComment.execute("4711", actionRequest, properties); org.apache.velocity.VelocityContext context = contextCapture.getValue(); assertEquals( property of context did not match "Rosebud", context.get("subject")); }
<START_MOD>@java.lang.Override public java.lang.String toString() { return ((((((("Range [startLine=" + (startLine)) + ", startCh=") + (startCh)) + ", endLine=") + (endLine)) + ", endCh=") + (endCh)) + "]"; }<END_MOD>
<START_MOD>public void setSideB(com.google.gerrit.client.reviewdb.PatchSet.Id patchSetId) { idSideB = patchSetId; updateCookie(com.google.gerrit.client.patches.PatchScreen.COOKIE_SIDE_B, patchSetId); }<END_MOD>
public static com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.IntraLineDiffKey create(org.eclipse.jgit.lib.ObjectId aId, org.eclipse.jgit.lib.ObjectId bId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { return new com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.AutoValue_IntraLineDiffKey(aId, bId, whitespace); }
<START_MOD>@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.FixResource fixResource, java.lang.Void nothing) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.RevisionResource revisionResource = fixResource.getRevisionResource(); com.google.gerrit.reviewdb.client.Project.NameKey project = revisionResource.getProject(); com.google.gerrit.server.project.ProjectState projectState = revisionResource.getControl().getProjectControl().getProjectState(); com.google.gerrit.reviewdb.client.PatchSet patchSet = revisionResource.getPatchSet(); org.eclipse.jgit.lib.ObjectId patchSetCommitId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); try (org.eclipse.jgit.lib.Repository repository = gitRepositoryManager.openRepository(project)) { com.google.gerrit.server.edit.tree.TreeModification treeModification = fixReplacementInterpreter.toTreeModification(repository, projectState, patchSetCommitId, fixResource.getFixReplacements()); changeEditModifier.combineWithModifiedPatchSetTree(repository, revisionResource.getControl(), patchSet, treeModification); } catch (com.google.gerrit.server.project.InvalidChangeOperationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } return com.google.gerrit.extensions.restapi.Response.none(); }<END_MOD>
<START_MOD>protected com.google.inject.ProvisionException fail(java.lang.Throwable t) { com.google.inject.ProvisionException e = new com.google.inject.ProvisionException("Error scanning indexes"); e.initCause(t); return e; }<END_MOD>
void setMaxHeight(int height) { <START_MOD>maxHeightBeforeHeader<END_MOD> = height<START_MOD>;<END_MOD> <START_MOD>if<END_MOD> (<START_MOD>isVisible<END_MOD>()) { <START_MOD>applyMaxHeight<END_MOD>(); } }
private java.lang.String getCommitMessageHookInstallationHint() { final java.util.List<com.jcraft.jsch.HostKey> hostKeys = sshInfo.getHostKeys(); if (hostKeys.isEmpty()) { <START_MOD>if ((commitMsgHookCommand) != null) { return commitMsgHookCommand; } else { <END_MOD>java.lang.String p = ".git/hooks/commit-msg"; return java.lang.String.format( curl -Lo %s %s/tools/hooks/commit-msg ; chmod +x %s p, com.google.gerrit.server.git.validators.CommitValidators.getGerritUrl(canonicalWebUrl), p); } <START_MOD>} <END_MOD>java.lang.String sshHost; int sshPort; java.lang.String host = hostKeys.get(0).getHost(); int c = host.lastIndexOf(':'); if ( <= c) { if (host.startsWith("*:")) { sshHost = com.google.gerrit.server.git.validators.CommitValidators.getGerritHost(canonicalWebUrl); } else { sshHost = host.substring(0, c); } sshPort = java.lang.Integer.parseInt(host.substring((c + 1))); } else { sshHost = host; sshPort = 22; } return java.lang.String.format( scp -p -P %d %s@%s:hooks/commit-msg .git/hooks/ sshPort, <START_MOD>user<END_MOD>.getUserName(), sshHost); }
<START_MOD>@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "user.writeGroupsToNoteDb", value = "true") public void groupOwnerWithWriteToNoteDb() throws java.lang.Exception { testGroupOwner(true); }<END_MOD>
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.server.project.SubmitRuleEvaluator(<START_MOD>accountByEmailCache, <END_MOD>accountCache, cd).setPatchSet(patchSet).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(( type rule failed:   + rec)); } return rec.type; }
public Project.NameKey project() throws com.google.gwtorm.server.OrmException { if ((project) == null) { checkState((!(<START_MOD>a.<END_MOD>notesMigration.readChanges())),   not have created ChangeData without a project when NoteDb is enabled project = change().getProject(); } return project; }
<START_MOD>private java.util.List<java.lang.String> getReviewerEmails() { java.util.List<java.lang.String> reviewers = new java.util.ArrayList<>(); try { for (com.google.gerrit.reviewdb.client.Account.Id who : changeData.reviewers().all()) { reviewers.add(getNameEmailFor(who)); } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.mail.send.ChangeEmail.log.warn("Cannot get change reviewers", e); } return reviewers; }<END_MOD>
private void beforeTest(org.junit.runner.Description description, boolean memory, boolean enableHttpd) throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = config(description); server = startServer(cfg, memory, enableHttpd); server.getTestInjector().injectMembers(this); admin = accounts.admin(); user = accounts.user(); adminSession = new com.google.gerrit.acceptance.RestSession(server, admin); userSession = new com.google.gerrit.acceptance.RestSession(server, user); com.google.gerrit.acceptance.GitUtil.initSsh(admin); db = reviewDbProvider.open(); com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context ctx = newRequestContext(admin); atrScope.set(ctx); sshSession = ctx.getSession(); sshSession.open(); <START_MOD>projectPrefix = com.google.gerrit.acceptance.AbstractDaemonTest.UNSAFE_PROJECT_NAME.matcher(((((description.getClassName()) + "_") + (description.getMethodName())) + "_")).replaceAll(""); project = createProject(<END_MOD>projectInput<START_MOD>(description)); testRepo = com.google.gerrit.acceptance.GitUtil.cloneProject(<END_MOD>project, sshSession); }
@java.lang.Override public com.google.gerrit.server.group.GroupJson.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException<START_MOD>, com.google.gwtorm.server.OrmException<END_MOD> { com.google.gerrit.reviewdb.client.AccountGroup group = resource.toAccountGroup(); if (group == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } try { com.google.gerrit.server.account.GroupControl c = controlFactory.validateFor(group.getOwnerGroupUUID()); return json.addOption(com.google.gerrit.server.group.<START_MOD>MEMBERS).addOption(com.google.gerrit.server.group.INCLUDES).addOption(com.google.gerrit.server.group.<END_MOD>OWNER).format(c.getGroup()); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
<START_MOD>@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void export(com.google.gerrit.extensions.Export export, java.lang.Class<?> type) throws com.google.gerrit.server.plugins.InvalidPluginException { if (javax.servlet.http.HttpServlet.class.isAssignableFrom(type)) { java.lang.Class<javax.servlet.http.HttpServlet> old = serve.get(export.value()); if (old != null) { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format("@Export(\"%s\") has duplicate bindings:\n %s\n %s", export.value(), old.getName(), type.getName())); } serve.put(export.value(), ((java.lang.Class<javax.servlet.http.HttpServlet>) (type))); } else { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format("Class %s with @Export(\"%s\") must extend %s", type.getName(), export.value(), javax.servlet.http.HttpServlet.class.getName())); } }<END_MOD>
<START_MOD>@org.junit.Test public void singleHashtag() { java.lang.String commitMessage = "#Subject\n\nLine 1\n\nLine 2"; assertThat(com.google.gerrit.server.change.HashtagsUtil.extractTags(commitMessage)).containsExactlyElementsIn(com.google.common.collect.Sets.newHashSet("#Subject")); }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroupByIdAud.Key> keys) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); }<END_MOD>
public com.google.gerrit.common.data.<START_MOD>ParametrizedString<END_MOD>.Builder replace(final java.lang.String name, final java.lang.String value) { params.put(name, value); return this; }
<START_MOD>public static boolean isStale(com.google.gerrit.server.git.GitRepositoryManager repoManager, com.google.gerrit.reviewdb.client.Change.Id id, com.google.gerrit.reviewdb.client.Change indexChange, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Change reviewDbChange, com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefState> states, com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern> patterns) { return (com.google.gerrit.server.index.change.StalenessChecker.reviewDbChangeIsStale(indexChange, reviewDbChange)) || (com.google.gerrit.server.index.change.StalenessChecker.isStale(repoManager, id, states, patterns)); }<END_MOD>
@java.lang.Override public void run() { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData(change); try { index.replace(cd); } catch (java.<START_MOD>lang<END_MOD>.<START_MOD>Exception<END_MOD> e) { com.google.gerrit.server.index.ChangeIndexerImpl.log.error( indexing change e); } }
@java.lang.Override public void onPreReceive(final org.eclipse.jgit.transport.<START_MOD>ReceiveSession<END_MOD> <START_MOD>rs<END_MOD>, final java.util.Collection<org.eclipse.jgit.transport.ReceiveCommand> commands) { parseCommands(commands); if (((newChange) != null) && ((newChange.getResult()) == (org.eclipse.jgit.transport.ReceiveCommand.Result.NOT_ATTEMPTED))) { createNewChanges(); } doReplaces(); }
<START_MOD>public java.util.List<java.util.List<com.google.gerrit.server.query.change.ChangeData>> queryByStrings(java.util.List<java.lang.String> queryStrings) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> queries = new java.util.ArrayList<>(queryStrings.size()); for (java.lang.String qs : queryStrings) { queries.add(queryBuilder.parse(qs)); } return queryChanges(queries); }<END_MOD>
public boolean isVisible(<START_MOD>com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gwtorm.client.OrmException { if (((change.getStatus()) == (Change.Status.DRAFT)) && (!(isDraftVisible(db)))<END_MOD>) {<START_MOD> return false; }<END_MOD> return getRefControl().isVisible(); }
protected com.google.gerrit.prettify.common.SparseHtmlFile getSparseHtmlFileB(com.google.gerrit.common.data.PatchScript s) { com.google.gerrit.reviewdb.client.AccountDiffPreference dp = new com.google.gerrit.reviewdb.client.AccountDiffPreference(s.getDiffPrefs()); com.google.gerrit.prettify.common.PrettyFormatter f = ClientSideFormatter.FACTORY.get(); f.setDiffPrefs(dp); f.setFileName(s.getB().getPath()); f.setEditFilter(PrettyFormatter.B); f.setEditList(s.getEdits()); if ((<START_MOD>s.getA().isWholeFile<END_MOD>()) && (<START_MOD>!(s.getB().isWholeFile()))) { f.format(s.getB().apply(<END_MOD>s.getA()<START_MOD>, s.getEdits())); } else<END_MOD> { f.format(s.getB()); } <START_MOD>return f<END_MOD>; }
public static void <START_MOD>queryMultiple(final <END_MOD>com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeList>> callback, java.util.EnumSet<com.google.gerrit.extensions.client.ListChangesOption> options, java.lang.String... queries) { <START_MOD>if (<END_MOD>(queries.length) <START_MOD>== 0) { return; }<END_MOD> com.google.gerrit.client.rpc.RestApi call = new com.google.gerrit.client.rpc.RestApi(com.google.gerrit.client.changes.ChangeList.URI); for (java.lang.String q : queries) { call.addParameterRaw("q", com.google.gwtorm.client.KeyUtil.encode(q)); } com.google.gerrit.client.changes.ChangeList.OPTIONS.addAll(options); com.google.gerrit.client.changes.ChangeList.addOptions(call, com.google.gerrit.client.changes.ChangeList.OPTIONS); <START_MOD>if ((queries.length) == 1) { <END_MOD>call.get(<START_MOD>new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.ChangeList>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeList> wrapped = com.google.gwt.core.client.JsArray.createArray(1).cast(); wrapped.push(result); <END_MOD>callback<START_MOD>.onSuccess(wrapped); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { callback.onFailure(caught); } }); } else { call.get(callback); } }<END_MOD>
@org.junit.Test public void listTagsOfNonExistingProjectWithApi() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.projects().name("does-not-exist").tags(); }
private void addChangeImpl(java.lang.String id) throws com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> matched = <START_MOD>changeFinder<END_MOD>.findChanges(id, userProvider.get()); java.util.List<com.google.gerrit.server.project.ChangeControl> toAdd = new java.util.ArrayList(changes.size()); for (com.google.gerrit.server.project.ChangeControl ctl : matched) { if (((!(changes.containsKey(ctl.getId()))) && (inProject(ctl.getProject()))) && (ctl.isVisible(db))) { toAdd.add(ctl); } } switch (toAdd.size()) { case   : throw com.google.gerrit.sshd.commands.SetReviewersCommand.error((("\"" + id) +   no such change case 1 : com.google.gerrit.server.project.ChangeControl ctl = toAdd.get(0); changes.put(ctl.getId(), changesCollection.parse(ctl)); break; default : throw com.google.gerrit.sshd.commands.SetReviewersCommand.error((("\"" + id) +   matches multiple changes } }
@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup( group for schema migration setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.<START_MOD>testing<END_MOD>.TestUpdateUI()); com.google.gerrit.reviewdb.client.AccountGroup group = db.accountGroups().get(groupId); assertThat(group.getCreatedOn()).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }
<START_MOD>private void addMessage(com.google.gerrit.server.update.ChangeContext ctx, com.google.gerrit.server.notedb.ChangeUpdate update) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = ctx.getChange(); com.google.gerrit.reviewdb.client.ChangeMessage cmsg = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx, (c.isPrivate() ? "Set Private" : "Unset Private"), (c.isPrivate() ? com.google.gerrit.server.ChangeMessagesUtil.TAG_SET_PRIVATE : com.google.gerrit.server.ChangeMessagesUtil.TAG_UNSET_PRIVATE)); cmUtil.addChangeMessage(ctx.getDb(), update, cmsg); }<END_MOD>
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { if (<START_MOD>!(isChangeDeletable<END_MOD>(rsrc.getChange().getStatus())<START_MOD>)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException( not permitted } rsrc.permissions().database(db).check(ChangePermission.DELETE); try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.reviewdb.client.<END_MOD>Change.<START_MOD>Id id = rsrc.getChange().getId(); bu.setOrder(Order.DB_BEFORE_REPO); bu.addOp(id, opProvider.get()); bu.execute(); } return<END_MOD> com.google.gerrit.extensions.restapi.<START_MOD>Response.none();<END_MOD> }
<START_MOD>public void addDependencies(com.google.gerrit.server.events.ChangeAttribute ca, com.google.gerrit.reviewdb.Change change) { ca.dependsOn = new java.util.ArrayList<com.google.gerrit.server.events.DependencyAttribute>(); ca.neededBy = new java.util.ArrayList<com.google.gerrit.server.events.DependencyAttribute>(); try { final com.google.gerrit.reviewdb.ReviewDb db = schema.open(); try { final com.google.gerrit.reviewdb.PatchSet.Id psId = change.currentPatchSetId(); for (com.google.gerrit.reviewdb.PatchSetAncestor a : db.patchSetAncestors().ancestorsOf(psId)) { for (com.google.gerrit.reviewdb.PatchSet p : db.patchSets().byRevision(a.getAncestorRevision())) { com.google.gerrit.reviewdb.Change c = db.changes().get(p.getId().getParentKey()); ca.dependsOn.add(newDependsOn(c, p)); } } final com.google.gerrit.reviewdb.RevId revId = db.patchSets().get(psId).getRevision(); for (com.google.gerrit.reviewdb.PatchSetAncestor a : db.patchSetAncestors().descendantsOf(revId)) { final com.google.gerrit.reviewdb.PatchSet p = db.patchSets().get(a.getPatchSet()); final com.google.gerrit.reviewdb.Change c = db.changes().get(p.getId().getParentKey()); ca.neededBy.add(newNeededBy(c, p)); } } finally { db.close(); } } catch (com.google.gwtorm.client.OrmException e) { } if (ca.dependsOn.isEmpty()) { ca.dependsOn = null; } if (ca.neededBy.isEmpty()) { ca.neededBy = null; } }<END_MOD>
static com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.EditTransformer.ContextAwareEdit create(java.lang.String oldFilePath, java.lang.String newFilePath, int beginA, int endA, int beginB, int endB, boolean filePathAdjusted) { java.lang.String adjustedOldFilePath = com.google.common.base.MoreObjects.firstNonNull(oldFilePath, newFilePath); boolean implicitRename = (!(java.util.Objects.equals(oldFilePath, newFilePath))) && filePathAdjusted; return new com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.AutoValue_EditTransformer_ContextAwareEdit(adjustedOldFilePath, newFilePath, beginA, endA, beginB, endB, implicitRename); }
<START_MOD>@java.lang.Override public void start() { if (!(supportAutomaticAccountActivityUpdate)) { return; } com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig(); long interval = scheduleConfig.getInterval(); long delay = scheduleConfig.getInitialDelay(); if ((delay == (MISSING_CONFIG)) && (interval == (MISSING_CONFIG))) { com.google.gerrit.server.account.AccountDeactivator.log.info("Ignoring missing accountDeactivator schedule configuration"); } else if ((delay < 0) || (interval <= 0)) { com.google.gerrit.server.account.AccountDeactivator.log.warn(java.lang.String.format("Ignoring invalid accountDeactivator schedule configuration: %s", scheduleConfig)); } else { @java.lang.SuppressWarnings("unused") java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(deactivator, delay, interval, java.util.concurrent.TimeUnit.MILLISECONDS); } }<END_MOD>
<START_MOD>private static org.eclipse.jgit.lib.BaseRepositoryBuilder<?, ?> builder(org.eclipse.jgit.lib.Repository r) { return new org.eclipse.jgit.lib.BaseRepositoryBuilder().setFS(r.getFS()).setGitDir(r.getDirectory()).setWorkTree(r.getWorkTree()).setIndexFile(r.getIndexFile()); }<END_MOD>
private void assertCreateGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnCreate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo,   <START_MOD>account<END_MOD> config GroupConfig.GROUP_CONFIG_FILE,   content + (name("bar")))); if (expectedErrorOnCreate != null) { r.assertErrorStatus(expectedErrorOnCreate); } else { r.assertOkStatus(); } }
public com.google.gerrit.testutil.InMemoryDatabase create() throws com.google.gwtorm.server.OrmException { if (!(created)) { created = true; <START_MOD>try<END_MOD> <START_MOD>(<END_MOD>com.google.gerrit.reviewdb.server.ReviewDb c = open()<START_MOD>)<END_MOD> { try { schemaCreator.create(c); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException( create in-memory database e); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException( create in-memory database e); } } } return this; }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> listRepositories(java.<START_MOD>lang.String prefix, java.<END_MOD>util.Set<java.lang.String> branches) throws java.io.IOException { <START_MOD>prefix = com.google.common.base.Strings.emptyToNull(prefix); if ((prefix != null) && (!(prefix.endsWith("/")))) { prefix += '/'; } <END_MOD>java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> repos = com.google.common.collect.Maps.newTreeMap(com.google.gitiles.DefaultAccess.US_COLLATOR); for (org.eclipse.jgit.lib.Repository repo : scanRepositories(basePath, req)) { <START_MOD>java.lang.String name = getRepositoryName(repo); if ((prefix == null) || (name.startsWith(prefix))) { <END_MOD>repos.put(<START_MOD>name<END_MOD>, buildDescription(repo, branches)); <START_MOD>} <END_MOD>repo.close(); } return repos; }
private com.google.gerrit.server.git.strategy.SubmitStrategy createStrategy(com.google.gerrit.extensions.client.SubmitType submitType<START_MOD>, com.google.gerrit.server.query.change.ChangeData cd<END_MOD>) throws com.google.gerrit.server.git.MergeException, com.google.gerrit.server.project.NoSuchProjectException<START_MOD>, com.google.gwtorm.server.OrmException<END_MOD> { return submitStrategyFactory.create(submitType, db, repo, rw, inserter, canMergeFlag, getAlreadyAccepted(branchTip), <START_MOD>cd.change().getDest()<END_MOD>); }
@java.lang.Override public void run() { <START_MOD>try (<END_MOD>com.google.gerrit.reviewdb.server.ReviewDb db = database.open()<START_MOD>)<END_MOD> { for (; ;) { java.util.Map.Entry<com.google.gerrit.reviewdb.client.Project.NameKey, java.util.List<com.google.gerrit.reviewdb.client.Change>> next = next(); if (next != null) { try { export(db, next.getKey(), next.getValue()); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { stderr.println(e.getMessage()); } } else { break; } } } <START_MOD>catch (com.google.gwtorm.server.OrmException e) { stderr.println(e.getMessage()); return; } <END_MOD>finally { monitor.endWorker(); <START_MOD>} }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gerrit.extensions.client.SubmitType testSubmitType(com.google.gerrit.server.change.TestSubmitRule.Input in) throws com.google.gerrit.extensions.restapi.RestApiException { try { return testSubmitType.get().apply(revision, in); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot test submit type", e); } }<END_MOD>
@java.lang.Override protected org.eclipse.jgit.lfs.server.LargeFileRepository getLargeFileRepository(com.googlesource.gerrit.plugins.lfs.LfsRequest request, java.lang.String path) throws org.eclipse.jgit.lfs.errors.LfsException { java.lang.String pathInfo = (path.startsWith("/")) ? path : "/" + path; java.util.regex.Matcher matcher = com.googlesource.gerrit.plugins.lfs.LfsApiServlet.URL_PATTERN.matcher(pathInfo); if (!(matcher.matches())) { return null; } com.google.gerrit.reviewdb.client.Project.NameKey project = Project.NameKey.parse(com.google.gerrit.common.ProjectUtil.stripGitSuffix(matcher.group(1))); com.google.gerrit.server.project.ProjectState state = projectCache.get(project); if ((state == null) || ((state.getProject().getState()) == (HIDDEN))) { throw new org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound(project.get()); } if ((request.getOperation().equals("upload")) && ((state.getProject().getState()) == (READ_ONLY))) { throw new org.eclipse.jgit.lfs.errors.LfsRepositoryReadOnly(project.get()); } org.eclipse.jgit.lib.Config config = pluginConfigFactory.getProjectPluginConfigWithInheritance(state, pluginName); <START_MOD>if (!(<END_MOD>config.getBoolean("lfs", "enabled", false)<START_MOD>)) { return null; } if (request.getOperation().equals("upload")) { long maxObjectSize = config.getLong("lfs", "maxObjectSize", 0); if (maxObjectSize > 0) { for (org.eclipse.jgit.lfs.server.LfsObject object : request.getObjects()) { if ((object.getSize()) > maxObjectSize) { throw new org.eclipse.jgit.lfs.errors.LfsValidationError((( of object   + (object.getOid())) +   exceeds limit } } } } return<END_MOD> getRepository()<START_MOD>; }<END_MOD>
@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.<START_MOD>getNativeKeyCode<END_MOD>()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { widget.setEnabled(true); add(); } }
<START_MOD>@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws com.google.gwtorm.server.OrmException { if ((change) != null) { assigneeChanged.fire(change, ctx.getAccount(), oldAssignee, ctx.getWhen()); } }<END_MOD>
private java.lang.Runnable doScroll(final net.codemirror.lib.CodeMirror cm) { <START_MOD>return new java.lang.Runnable() { public void run() { if (((cm.getScrollSetAt()) + 5) > (java.lang.System.currentTimeMillis())) { return; }<END_MOD> net.codemirror.lib.<START_MOD>ScrollInfo si<END_MOD> = <START_MOD>cm.getScrollInfo();<END_MOD> if (((<START_MOD>si.getTop()) == 0) && (!(com.google.gerrit.client.Gerrit.isHeaderVisible()))) { com.google.gerrit.client.Gerrit.setHeaderVisible(true); diffTable.updateFileCommentVisibility(false); resizeCodeMirror(); } else if (((si.getTop()<END_MOD>) > (<START_MOD>0.5 * (<END_MOD>si<START_MOD>.getClientHeight()))) && (com.google.gerrit.client.Gerrit.isHeaderVisible())) { com.google.gerrit.client.Gerrit.setHeaderVisible(false); diffTable.updateFileCommentVisibility(true); resizeCodeMirror(); } fixScroll(cm); scrollTimerA.cancel(); scrollTimerB.cancel(); (cm<END_MOD> == (cmA) ? scrollTimerA : scrollTimerB).schedule(<START_MOD>10); } }; }<END_MOD>
<START_MOD>private void createGroupBranch(java.lang.String ref) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(allUsers);org.eclipse.jgit.lib.ObjectInserter oi = r.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { org.eclipse.jgit.lib.ObjectId emptyTree = oi.insert(Constants.OBJ_TREE, new byte[]{ }); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(emptyTree); cb.setCommitter(ident); cb.setAuthor(ident); cb.setMessage("Create group"); org.eclipse.jgit.lib.ObjectId emptyCommit = oi.insert(cb); oi.flush(); org.eclipse.jgit.lib.RefUpdate updateRef = r.updateRef(ref); updateRef.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRef.update(rw)).isEqualTo(RefUpdate.Result.NEW); } }<END_MOD>
<START_MOD>@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { this.healthy = true; }<END_MOD>
@java.lang.Override public void run() throws java.io.IOException { com.google.gerrit.server.index.IndexModule.IndexType type = com.google.gerrit.server.index.IndexModule.IndexType.LUCENE; if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) > 1) { ui.header("Index"); type = index.select("Type", "type", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.ELASTICSEARCH)) { <START_MOD>java.lang.String name = index.string( Name "name", "gerrit"); com.google.gerrit.pgm.init.api.Section elasticsearch = sections.get("elasticsearch", name); elasticsearch<END_MOD>.select( protocol "protocol", "http", com.google.common.collect.Sets.newHashSet("http", "https")); <START_MOD>elasticsearch<END_MOD>.string("Hostname", "hostname", "localhost"); <START_MOD>elasticsearch<END_MOD>.string("Port", "port", "9200"); } if (((site.isNew) || (isEmptySite())) && (type == (com.google.gerrit.server.index.IndexModule.IndexType.LUCENE))) { for (com.google.gerrit.server.index.SchemaDefinitions<?> def : com.google.gerrit.server.index.IndexModule.ALL_SCHEMA_DEFS) { com.google.gerrit.server.index.IndexUtils.setReady(site, def.getName(), def.getLatest().getVersion(), true); } } else { if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) <= 1) { ui.header("Index"); } java.lang.String message = java.lang.String.format(( index must be %sbuilt before starting Gerrit: +   java -jar gerrit.war reindex -d site_path (site.isNew ? "" : "re")); ui.message(message); initFlags.autoStart = false; } }
private void initRevisionsAction(com.google.gerrit.client.changes.ChangeInfo info, java.lang.String revision) { int currentPatchSet; if (((info.current_revision()) != null) && (info.revisions().containsKey(info.current_revision()))) { currentPatchSet = info.revision(info.current_revision())._number(); } else { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> revList = info.revisions().values(); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(revList); currentPatchSet = revList.get(((revList.length()) - 1))._number(); } java.lang.String currentlyViewedPatchSet; if (info.revision(revision).id().equals("edit")) { currentlyViewedPatchSet = Resources.M.editPatchSet(com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.findEditParent(info.revisions().values())); currentPatchSet = (info.revisions().values().length()) - 1; } else { currentlyViewedPatchSet = info.revision(revision).id(); } patchSetsText.setInnerText(Resources.M.patchSets(currentlyViewedPatchSet, currentPatchSet)); patchSetsAction = new com.google.gerrit.client.change.PatchSetsAction(info.legacy_id(), revision, style, headerLine, patchSets); <START_MOD>if (info.revision(revision).draft()) { quickApprove.setVisible(false); } }<END_MOD>
@java.lang.Override protected void configure() { final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.ActiveSession.Key, com.google.gerrit.reviewdb.ActiveSession>> type = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.ActiveSession.Key, com.google.gerrit.reviewdb.ActiveSession>>() {}; core(type, com.google.gerrit.httpd.WebSession.CACHE_NAME<START_MOD>, ActiveSession.Key.class, com.google.gerrit.reviewdb.ActiveSession.class<END_MOD>).memoryLimit(1024).maxAge(12, java.util.concurrent.TimeUnit.HOURS).evictionPolicy(EvictionPolicy.LRU); bind(com.google.gerrit.httpd.WebSession.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.httpd.WebSession.KeyGenerator.class).in(com.google.gerrit.httpd.SINGLETON); }
void resizePaddingWidget() { selfWidget.changed(); <START_MOD>widgetManager.resizePaddingWidget(<END_MOD>); }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { com.google.gerrit.server.IdentifiedUser user = receiveEvent.user; java.lang.String refname = receiveEvent.refName; org.eclipse.jgit.lib.ObjectId old = org.eclipse.jgit.lib.ObjectId.zeroId(); if ((receiveEvent.commit.getParentCount()) > 0) { old = receiveEvent.commit.getParent(0); } if (receiveEvent.command.getRefName().startsWith(com.googlesource.gerrit.plugins.hooks.REFS_CHANGES)) { refname = refname.replace(com.googlesource.gerrit.plugins.hooks.R_HEADS, "refs/for/refs/heads/"); old = org.eclipse.jgit.lib.ObjectId.zeroId(); } com.googlesource.gerrit.plugins.hooks.HookArgs args = hookFactory.createArgs(); args.add("--project", receiveEvent.project.getName()); args.add("--refname", refname); args.add("--uploader", user.getNameEmail()); args.add("--oldrev", old.name()); args.add("--newrev", receiveEvent.commit.name()); com.googlesource.gerrit.plugins.hooks.HookResult result = hook.run(args); if (result != null) <START_MOD>{ java.lang.String output = <END_MOD>result.<START_MOD>toString(); if ((result.<END_MOD>getExitValue()) != 0) { throw new com.google.gerrit.server.git.validators.CommitValidationException(<START_MOD>output<END_MOD>); } <START_MOD>if (!(output.isEmpty())) { <END_MOD>return <START_MOD>com.google.common.collect.FluentIterable.from(com.google.common.base.Splitter.on(com.google.common.base.CharMatcher.anyOf("\n\r")).splitToList(output)).transform(com.googlesource.gerrit.plugins.hooks.CommitReceived.MESSAGE).toList(); } } return <END_MOD>java.util.Collections.emptyList(); }
private void doClearPassword() { if ((id) != null) { enableUI(false); <START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gerrit.client.account.AccountApi.clearHttpPassword<END_MOD>(id.<START_MOD>getAccountId().toString<END_MOD>(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.<START_MOD>VoidResult<END_MOD>>() {<START_MOD> @java.lang.Override<END_MOD> public void onSuccess(com.google.gerrit.client.<START_MOD>VoidResult<END_MOD> result) { <START_MOD>id.setPassword(null); <END_MOD>display(<START_MOD>id<END_MOD>); } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { enableUI(true); } }); } }
@java.lang.Override public java.lang.String toString()<START_MOD> { if (isError()) { return ((((( AcessToken [error= + (error)) +   error_description= + (error_description)) +   error_uri= + (error_uri)) + "]"; } else<END_MOD> { return ((( [access_token= + (access_token)) +   token_type= + (token_type)) + "]"; }<START_MOD> }<END_MOD>
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.VoteResource rsrc, com.google.gerrit.server.change.DeleteVote.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.<START_MOD>reviewdb.client.Change change<END_MOD> = r.<START_MOD>getChange(); try (com.google.gerrit.server.git.BatchUpdate bu = batchUpdateFactory.create(db.get(), change.getProject(), rsrc.getReviewer().<END_MOD>getControl()<START_MOD>.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.change.DeleteVote.Op(<END_MOD>r.<START_MOD>getReviewerUser().getAccountId(), rsrc.getLabel()));<END_MOD> bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
<START_MOD>private void renderRange(int start, int end, boolean removeAll, boolean insertFirst) { if (insertFirst || removeAll) { startRow = start; top = start * (rowHeight); } if ((!insertFirst) || removeAll) { bottom = (end * (rowHeight)) - (maxHeight); } com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); for (int i = start; i < end; i++) { renderRow(sb, i); } if (removeAll) { body.setInnerSafeHtml(sb); body.getStyle().setTop(top, Style.Unit.PX); } else { surrogate.setInnerSafeHtml(sb); for (int cnt = surrogate.getChildCount(); cnt > 0; cnt--) { fragment.appendChild(surrogate.getFirstChild()); } if (insertFirst) { body.insertFirst(fragment); body.getStyle().setTop(top, Style.Unit.PX); } else { body.appendChild(fragment); } } }<END_MOD>
private void fireEventForUnrestrictedListeners(final com.google.gerrit.server.events.<START_MOD>Event<END_MOD> event) { for (com.google.gerrit.common.ChangeListener listener : unrestrictedListeners) { listener.<START_MOD>onEvent<END_MOD>(event); } }
public void setHttpInjector(com.google.inject.Injector injector) { httpModule = copy(injector); httpGen = injector.getProvider(com.google.gerrit.server.plugins.ModuleGenerator.class<START_MOD>); httpItems = dynamicItemOf(injector<END_MOD>); httpSets = dynamicSetsOf(injector); httpMaps = dynamicMapsOf(injector); onStart.addAll(com.google.gerrit.server.plugins.PluginGuiceEnvironment.listeners(injector, com.google.gerrit.server.plugins.StartPluginListener.class)); onReload.addAll(com.google.gerrit.server.plugins.PluginGuiceEnvironment.listeners(injector, com.google.gerrit.server.plugins.ReloadPluginListener.class)); }
public AccountResource.SshKey parse(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException<START_MOD>, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException<END_MOD> { try { int seq = java.lang.Integer.parseInt(id.get(), 10); com.google.gerrit.reviewdb.client.AccountSshKey sshKey<START_MOD>; if (readFromGit) { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName.get())) { com.google.gerrit.server.account.VersionedAuthorizedKeys authorizedKeys = new com.google.gerrit.server.account.VersionedAuthorizedKeys(user.getAccountId()); authorizedKeys.load(git); sshKey = authorizedKeys.getKey(seq); } } else { sshKey<END_MOD> = dbProvider.get().accountSshKeys().get(new com.google.gerrit.reviewdb.client.AccountSshKey.Id(user.getAccountId(), seq)); <START_MOD>} <END_MOD>if (sshKey == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.account.AccountResource.SshKey(user, sshKey); } catch (java.lang.NumberFormatException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
<START_MOD>@org.junit.Test public void addReviewerToReviewableChangeByOtherCcingSelfInNoteDbBatch() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); addReviewerToReviewableChangeByOtherCcingSelfInNoteDb(batch()); }<END_MOD>
<START_MOD>private java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.group.MembersCollection.MemberInfo> getMembers(final com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, final boolean recursive, final java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seenGroups) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { seenGroups.add(groupUUID); final java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.group.MembersCollection.MemberInfo> members = com.google.common.collect.Maps.newHashMap(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupUUID); final com.google.gerrit.common.data.GroupDetail groupDetail = groupDetailFactory.create(group.getId()).call(); if ((groupDetail.members) != null) { for (final com.google.gerrit.reviewdb.client.AccountGroupMember member : groupDetail.members) { final com.google.gerrit.reviewdb.client.Account account = accountCache.get(member.getAccountId()).getAccount(); members.put(account.getId(), com.google.gerrit.server.group.MembersCollection.parse(account)); } } if (recursive) { if ((groupDetail.includes) != null) { for (final com.google.gerrit.reviewdb.client.AccountGroupIncludeByUuid includedGroup : groupDetail.includes) { if (!(seenGroups.contains(includedGroup.getIncludeUUID()))) { members.putAll(getMembers(includedGroup.getIncludeUUID(), recursive, seenGroups)); } } } } return members; }<END_MOD>
public void doChangeMergedHook(final com.google.gerrit.reviewdb.Change change, final com.google.gerrit.reviewdb.Account account, final com.google.gerrit.reviewdb.PatchSet patchSet) { final com.google.gerrit.common.ChangeHookRunner.ChangeMergedEvent event = new com.google.gerrit.common.ChangeHookRunner.ChangeMergedEvent(); event.change = getChangeAttribute(change); event.submitter = getAccountAttribute(account); event.patchSet = getPatchSetAttribute(patchSet); fireEvent(change, event); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(changeMergedHook.getAbsolutePath()); args.add("--change"); args.add(event.change.id); args.add(<START_MOD>"--change-number"); args.add(event.change.number); args.add(<END_MOD>"--project"); args.add(event.change.project); args.add("--branch"); args.add(event.change.branch); args.add("--submitter"); args.add(getDisplayName(account)); args.add("--commit"); args.add(event.patchSet.revision); runHook(getRepo(change), args); }
@org.junit.Test public void submitTwoChangesWithFastForward() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(); <START_MOD>java.lang.String id1 = change.getChangeId(); java.lang.String id2 = change2.getChangeId(); <END_MOD>approve(<START_MOD>id1<END_MOD>); submit(<START_MOD>id2<END_MOD>); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(change2.getCommitId()); assertThat(head.getParent(0).getId()).isEqualTo(change.getCommitId()); assertSubmitter(change.getChangeId(), 1); assertSubmitter(change2.getChangeId(), 1); assertPersonEquals(admin.getIdent(), head.getAuthorIdent()); assertPersonEquals(admin.getIdent(), head.getCommitterIdent()); <START_MOD>assertSubmittedTogether(id1, id2, id1); assertSubmittedTogether(id2, id2, id1); <END_MOD>}
@org.junit.Before public void setup() throws com.google.gerrit.server.project.NoSuchProjectException { when(configFactory.getProjectPluginConfigWithInheritance(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_NAME, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN)).thenReturn(config); when(<START_MOD>provider.getFactory(eq(config), eq(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO))).thenReturn(java.util.Optional.of(factory)); when(factory.create(any(com.google.gerrit.server.events.ProjectEvent.class))).thenReturn(processor); when(<END_MOD>taskFactory.create(anyString(), <START_MOD>eq(processor<END_MOD>))).thenReturn(postTask); eventHandler = new com.googlesource.gerrit.plugins.webhooks.EventHandler(configFactory, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN, taskFactory<START_MOD>, provider<END_MOD>); }
private java.util.List<com.google.gerrit.common.data.SubmitRecord> cannotSubmitDraft(<START_MOD>com.google.gerrit.reviewdb.client.PatchSet ps) { try { if (!(control.isDraftVisible(cd.db(), cd))) { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError((( set   + (ps.getId())) +   not found } else if (ps.isDraft()) { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError( submit draft patch sets } else { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError( submit draft changes } } catch (<END_MOD>com.google.gwtorm.server.OrmException <START_MOD>err) { java.lang.String msg<END_MOD> = <START_MOD>  check visibility of patch<END_MOD> set   + (ps.<START_MOD>getId())<END_MOD>; com.google.gerrit.server.project.SubmitRuleEvaluator.log.error(msg, err); return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError(msg); } }
@java.lang.Override int getCmLine(int line, com.google.gerrit.client.diff.DisplaySide side) { int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.UnifiedDiffChunkInfo(side, line, 0, 0, 0, false)); if (res >= 0) { return chunks.get(res).cmLine; } else { res = (-res) - 1; if (res > 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get((res - 1)); if (((side == (DisplaySide.A)) && (info.edit)) && ((info.side) == (DisplaySide.B))) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo delete = chunks.get((res - 2)); if (line <= (delete.end)) { return ((delete.cmLine) + line) - (delete.start); } else { return (((((delete.cmLine) + line) - (delete.start)) + (info.end)) - (info.start)) + 1; } } else if (side == (info.side)) { return ((info.cmLine) + line) - (info.start); } else { return ((info.cmLine) + (<START_MOD>mapper<END_MOD>.lineOnOther(side, line).getLine())) - (info.start); } } else { return line; } } }
@java.lang.Override public java.lang.String authenticate(com.google.gerrit.server.CurrentUser user, java.util.List<java.lang.String> args) throws com.google.gerrit.sshd.BaseCommand.Failure, com.google.gerrit.sshd.BaseCommand.UnloggedFailure { try { java.net.URL url = new java.net.URL(canonicalWebUrl); java.lang.String <START_MOD>project = args.get(0); java.lang.String operation = args.get(1); java.lang.String <END_MOD>href = ((((((url.getProtocol()) + "://") + (url.getAuthority())) + (url.getPath())) + "/") + <START_MOD>project<END_MOD>) + "/info/lfs"; org.eclipse.jgit.lfs.server.Response.Action response = new org.eclipse.jgit.lfs.server.Response.Action(); response.href = href; response.header = java.util.Collections.singletonMap(com.googlesource.gerrit.plugins.lfs.HDR_AUTHORIZATION, <START_MOD>auth.generateToken(user, project, operation)<END_MOD>); return gson.toJson(response); } catch (java.net.MalformedURLException e) { throw new com.google.gerrit.sshd.BaseCommand.Failure(1, ((( configuration error:   +   Git LFS endpoint URL from canonicalWebUrl [ + (canonicalWebUrl)) +   failed. } }
@java.lang.SuppressWarnings({ "rawtypes", "unchecked" }) public void execute(java.util.Collection<com.google.gerrit.server.update.BatchUpdate> updates, com.google.gerrit.server.update.BatchUpdateListener listener, @com.google.gerrit.common.Nullable com.google.gerrit.server.util.RequestId requestId, boolean dryRun) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { checkNotNull(listener); <START_MOD>com.google.gerrit.server.update.BatchUpdate.Factory.checkSameProject(updates); <END_MOD>if (migration.disableChangeReviewDb()) { com.google.common.collect.ImmutableList<com.google.gerrit.server.update.NoteDbBatchUpdate> noteDbUpdates = ((com.google.common.collect.ImmutableList) (com.google.common.collect.ImmutableList.copyOf(updates))); com.google.gerrit.server.update.NoteDbBatchUpdate.execute(noteDbUpdates, listener, requestId, dryRun); } else { com.google.common.collect.ImmutableList<com.google.gerrit.server.update.ReviewDbBatchUpdate> reviewDbUpdates = ((com.google.common.collect.ImmutableList) (com.google.common.collect.ImmutableList.copyOf(updates))); com.google.gerrit.server.update.ReviewDbBatchUpdate.execute(reviewDbUpdates, listener, requestId, dryRun); } }
public com.google.gerrit.common.data.PermissionRange getRange(java.lang.String permission) { <START_MOD>java.util.List<com.google.gerrit.common.data.PermissionRule> rules = getRefControl().getRules(permission); if ((isOwner()) && (rulesContainGroup(rules, AccountGroup.CHANGE_OWNERS))) { return getRefControl().getLabelRange(permission); } else { <END_MOD>return getRefControl().getRange(permission); }<START_MOD> }<END_MOD>
<START_MOD>private static com.google.gerrit.server.query.change.ChangeData.StarsOf create(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Set<java.lang.String> stars) { return new com.google.gerrit.server.query.change.AutoValue_ChangeData_StarsOf(accountId, stars); }<END_MOD>
private com.google.gerrit.server.group.InternalGroup createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroupName gn = new com.google.gerrit.reviewdb.client.AccountGroupName(groupCreation.getNameKey(), groupCreation.getId()); db.accountGroupNames().insert(com.google.common.collect.ImmutableList.of(gn)); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupsUpdate.createAccountGroup(groupCreation); com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult updateResult = updateGroupInReviewDb(db, group, groupUpdate); return com.google.gerrit.server.group.InternalGroup.create(group, updateResult.getModifiedMembers(), updateResult.getModifiedSubgroups(), updateResult.getRefState()); }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo setAssignee(com.google.gerrit.extensions.api.changes.AssigneeInput input) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putAssignee.apply(change, input); } catch (java.<START_MOD>lang<END_MOD>.<START_MOD>Exception<END_MOD> <START_MOD>e)<END_MOD> <START_MOD>{<END_MOD> com.google.gerrit.server.<START_MOD>api<END_MOD>.<START_MOD>changes.ChangeApiImpl.throwIfPossible(<END_MOD>e)<START_MOD>;<END_MOD> throw new com.google.gerrit.extensions.restapi.RestApiException( set assignee e); } }
@java.lang.Override protected void onLoad() { file.set(id, content<START_MOD>, editExists<END_MOD>); file.setText(fileName); file.setEnabled(fileName.isEmpty()); content.setText(fileContent); save.setEnabled(false); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { content.setFocus(true); } }); }
<START_MOD>@org.junit.Test public void testDefaultSubmitTypeWhenNotConfigured() { assertEquals(SubmitType.MERGE_IF_NECESSARY, repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey("someProject"))); }<END_MOD>
<START_MOD>protected abstract org.eclipse.jgit.lfs.server.LargeFileRepository getLargeFileRepository(org.eclipse.jgit.lfs.server.LfsGerritProtocolServlet.LfsRequest request, java.lang.String path, org.eclipse.jgit.lfs.server.LfsGerritProtocolServlet.AuthInfo info) throws org.eclipse.jgit.lfs.errors.LfsException;<END_MOD>
<START_MOD>@org.junit.Test public void testDefaultSubmitTypeForStartWithFilter() { configureDefaultSubmitType("somePath/somePath/*", SubmitType.REBASE_IF_NECESSARY); configureDefaultSubmitType("somePath/*", SubmitType.CHERRY_PICK); configureDefaultSubmitType("*", SubmitType.MERGE_ALWAYS); assertEquals(SubmitType.MERGE_ALWAYS, repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey("someProject"))); assertEquals(SubmitType.CHERRY_PICK, repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey("somePath/someProject"))); assertEquals(SubmitType.REBASE_IF_NECESSARY, repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey("somePath/somePath/someProject"))); }<END_MOD>
<START_MOD>@com.google.gerrit.common.Nullable public abstract java.lang.String label();<END_MOD>
<START_MOD>public final native java.lang.String urlAlias(java.lang.String n);<END_MOD>
<START_MOD>@java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { closePopup(); handlerManager.fireEvent(new com.google.gerrit.client.ui.ProjectListPopup.ProjectListPopupOnCloseEvent()); }<END_MOD>
<START_MOD>private void listen(java.lang.Class<?> type, java.lang.Class<?> clazz) throws com.google.gerrit.server.plugins.InvalidPluginException { while (type != null) { if ((type.getAnnotation(com.google.gerrit.extensions.annotations.ExtensionPoint.class)) != null) { if (!(env.hasDynamicSet(type))) { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format("Cannot load %s with @Listen, server does not accept %s", clazz.getName(), type.getName())); } sysSingletons.add(clazz); sysListen.put(type, clazz); return; } java.lang.Class<?>[] interfaces = type.getInterfaces(); if (interfaces != null) { for (java.lang.Class<?> i : interfaces) { listen(i, clazz); } } type = type.getSuperclass(); } }<END_MOD>
<START_MOD>@org.junit.Test public void wrongNumericChangeIdReturnsNotFound() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.changes().id(java.lang.Integer.MAX_VALUE); }<END_MOD>
<START_MOD>private org.eclipse.jgit.revwalk.RevCommit createCommit(org.eclipse.jgit.notes.NoteMap map, org.eclipse.jgit.lib.PersonIdent author, java.lang.String message, org.eclipse.jgit.revwalk.RevCommit... parents) throws java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.lib.ObjectInserter inserter = db.newObjectInserter(); org.eclipse.jgit.lib.CommitBuilder b = new org.eclipse.jgit.lib.CommitBuilder(); b.setTreeId(map.writeTree(inserter)); b.setAuthor(author); b.setCommitter(gerritIdent); if ((parents.length) > 0) { b.setParentIds(parents); } b.setMessage(message); return revWalk.parseCommit(inserter.insert(b)); }<END_MOD>
private void display(com.google.gerrit.client.info.AccountPreferencesInfo p) { showSiteHeader.setValue(p.showSiteHeader()); useFlashClipboard.setValue(p.useFlashClipboard()); copySelfOnEmails.setValue(p.copySelfOnEmail()); setListBox(maximumPageSize, com.google.gerrit.client.account.DEFAULT_PAGESIZE, p.changesPerPage()); setListBox(dateFormat, AccountGeneralPreferencesInfo.DateFormat.STD, p.dateFormat()); setListBox(timeFormat, AccountGeneralPreferencesInfo.TimeFormat.HHMM_12, p.timeFormat()); relativeDateInChangeTable.setValue(p.relativeDateInChangeTable()); sizeBarInChangeTable.setValue(p.sizeBarInChangeTable()); legacycidInChangeTable.setValue(p.legacycidInChangeTable()); muteCommonPathPrefixes.setValue(p.muteCommonPathPrefixes()); <START_MOD>signedOffBy.setValue(p.signedOffBy()); <END_MOD>setListBox(reviewCategoryStrategy, AccountGeneralPreferencesInfo.ReviewCategoryStrategy.NONE, p.reviewCategoryStrategy()); setListBox(diffView, AccountGeneralPreferencesInfo.DiffView.SIDE_BY_SIDE, p.diffView()); display(p.my()); }
void <START_MOD>reloadRevisionActions(<END_MOD>com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.actions.ActionInfo> actions<START_MOD>) { if (!(com.google.gerrit.client.Gerrit.isSignedIn())) { return; } actions.copyKeysIntoChildren("id"); boolean canSubmit<END_MOD> = <START_MOD>actions.containsKey("submit"); if (canSubmit) { com.google.gerrit.client.actions.ActionInfo action = actions.get("submit"); submit.setTitle(action.title()); submit.setEnabled(action.enabled()); submit.setHTML(new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().openDiv().append(action.label()).closeDiv()); submit.setEnabled(action.enabled()); } submit.setVisible(canSubmit); com.google.gerrit.client.change.Actions.a2b(actions, "cherrypick", cherrypick); com.google.gerrit.client.change.Actions.a2b(actions, "rebase", rebase); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo <END_MOD>revInfo<START_MOD> = changeInfo.revision(revision); for (java.lang.String id : com.google.gerrit.client.change.Actions.filterNonCore(actions)) { add(new com.google.gerrit.client.actions.ActionButton(changeInfo,<END_MOD> revInfo<START_MOD>,<END_MOD> actions.get(<START_MOD>id)<END_MOD>)); } }
@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { <START_MOD>try { <END_MOD>if (stalenessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; }<START_MOD> } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug( was deleted, aborting reindexing the change } return false; }<END_MOD>
protected boolean hasDifferences(final com.google.gerrit.common.data.PatchScript script) { boolean hasEdits = <START_MOD>false; for <END_MOD>(<START_MOD>org.eclipse.jgit.diff.Edit e : <END_MOD>script.getEdits()<START_MOD>) { if ((e<END_MOD>.<START_MOD>getType<END_MOD>())<START_MOD> != (Edit.Type.EMPTY)) { hasEdits = true<END_MOD>;<START_MOD> break; } }<END_MOD> boolean hasMeta = !(script.getPatchHeader().isEmpty()); return hasEdits || hasMeta; }
<START_MOD>public static void mergeTestChangesByBranch(com.google.gerrit.server.git.MergeOp.Factory opFactory, com.google.gerrit.reviewdb.Branch.NameKey branch) { opFactory.create(branch).testMergeabilityOfChangesbyBranch(); }<END_MOD>
private void populatePublishAction() { final com.google.gwt.user.client.ui.Button b = new com.google.gwt.user.client.ui.Button(Util.C.buttonPublishPatchSet()); b.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { b.setEnabled(false); <START_MOD>final com.google.gerrit.reviewdb.client.Change.Id id = patchSet.getId().getParentKey(); com.google.gerrit.client.changes.ChangeApi<END_MOD>.publish(<START_MOD>id.get(), <END_MOD>patchSet.<START_MOD>getRevision().get<END_MOD>(), new com.google.gerrit.client.<START_MOD>rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } public void onFailure(java.lang.Throwable err) { if (com.google.gerrit.client.<END_MOD>changes.<START_MOD>SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.changes.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } else { super.onFailure(err); } } }); } }); actionsPanel.add<END_MOD>(b)<START_MOD>; }<END_MOD>
private com.google.gerrit.reviewdb.client.Change.Id getOrRegisterAccount(com.google.gerrit.reviewdb.server.ReviewDb db, java.lang.String login, java.lang.String name, java.lang.String email) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { <START_MOD>java.util.Optional<com.google.gerrit.server.account.externalids.ExternalId> externalId<END_MOD> = <START_MOD>externalIds.byUsername(<END_MOD>login); <START_MOD>if (externalId.isPresent()) { return externalId.get().accountId<END_MOD>(); <START_MOD>} return accountImporter.importAccount(login, name, email<END_MOD>); }
<START_MOD>public void assertReviewerDeletedEvents(java.lang.String... expected) { com.google.common.collect.ImmutableList<ReviewerDeletedEvent> events = getReviewerDeletedEvents(((expected.length) / 2)); int i = 0; for (ReviewerDeletedEvent event : events) { java.lang.String id = event.change.get().id; assertThat(id).isEqualTo(expected[i]); java.lang.String reviewer = event.reviewer.get().username; assertThat(reviewer).isEqualTo(expected[(i + 1)]); i += 2; } }<END_MOD>
<START_MOD>com.google.gerrit.server.patch.FilePathList getFilePaths(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gerrit.server.patch.PatchListNotAvailableException;<END_MOD>
@org.junit.Test public void testWithAnotherURI() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p = createProject("a"); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); java.lang.String gitmodules = ((("" + ((   +   = a +   = http: + (p.get())) + "\n") +   = master cfg.fromText(gitmodules); java.lang.String thisServer = com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey("project"), "master"); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> res = new com.google.gerrit.server.util.SubmoduleSectionParser(cfg, thisServer, targetBranch).parseAllSections(); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> expected = com.google.common.collect.Sets.newHashSet(new com.google.gerrit.reviewdb.client.SubmoduleSubscription(targetBranch, new com.google.gerrit.reviewdb.client.Branch.NameKey(p, "master"), "a")); assertThat(res).containsExactlyElementsIn(expected); }
@java.lang.Override protected void configure() { bind(new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.<START_MOD>common.data.GroupReference<END_MOD>>>() {}).annotatedWith(com.google.gerrit.server.config.<START_MOD>AdministrateServerGroups<END_MOD>.class).toProvider(com.google.gerrit.server.config.<START_MOD>AdministrateServerGroupsProvider<END_MOD>.class).in(com.google.gerrit.server.project.SINGLETON); bind(new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).annotatedWith(com.google.gerrit.server.config.<START_MOD>GitUploadPackGroups.class).toProvider(com.google.gerrit.server.config.GitUploadPackGroupsProvider.class).in(com.google.gerrit.server.project.SINGLETON); bind(new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).annotatedWith(com.google.gerrit.server.config.<END_MOD>GitReceivePackGroups.class).toProvider(com.google.gerrit.server.config.GitReceivePackGroupsProvider.class).in(com.google.gerrit.server.project.SINGLETON); bind(ChangeControl.Factory.class); factory(ProjectControl.AssistedFactory.class); }
com.google.gerrit.httpd.rpc.changedetail.PatchSetDetailFactory create(@com.google.inject.assistedinject.Assisted("psIdBase") @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.PatchSet.Id psIdBase, @com.google.inject.assistedinject.Assisted("psIdNew") com.google.gerrit.reviewdb.client.PatchSet.Id psIdNew, @com.google.gerrit.common.Nullable com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>DiffPreferencesInfo<END_MOD> diffPrefs);
<START_MOD>public com.google.common.collect.FluentIterable<com.google.gerrit.common.data.WebLinkInfoCommon> getFileHistoryLinksCommon(final java.lang.String project, final java.lang.String revision, final java.lang.String file) { return com.google.common.collect.FluentIterable.from(fileLogLinks).transform(new com.google.common.base.Function<com.google.gerrit.extensions.webui.WebLink, com.google.gerrit.common.data.WebLinkInfoCommon>() { @java.lang.Override public com.google.gerrit.common.data.WebLinkInfoCommon apply(com.google.gerrit.extensions.webui.WebLink webLink) { com.google.gerrit.extensions.common.WebLinkInfo info = ((com.google.gerrit.extensions.webui.FileHistoryWebLink) (webLink)).getFileHistoryWebLink(project, revision, file); com.google.gerrit.common.data.WebLinkInfoCommon commonInfo = new com.google.gerrit.common.data.WebLinkInfoCommon(); commonInfo.name = info.name; commonInfo.imageUrl = info.imageUrl; commonInfo.url = info.url; commonInfo.target = info.target; return commonInfo; } }).filter(com.google.gerrit.server.WebLinks.INVALID_WEBLINK_COMMON); }<END_MOD>
<START_MOD>java.lang.String removeHashTag(java.lang.String name);<END_MOD>
public void assertCanDelete(com.google.gerrit.server.project.ProjectResource rsrc, com.googlesource.gerrit.plugins.deleteproject.DeleteProject.Input input) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { try { pcHandler.assertCanDelete(rsrc); fsHandler.assertCanDelete(rsrc, (input == null ? false : input.preserve)); } catch (com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }
static void initialize(org.eclipse.jgit.lib.Config cfg) {<START_MOD> cfg.setString(com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER, AsciidocFormatter.NAME, com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_EXT, "adoc");<END_MOD> cfg.setString(com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER, MarkdownFormatter.NAME, com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE, "text/x-markdown"); cfg.setString(com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER, PlainTextFormatter.NAME, com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE, "text/plain"); }
private static void onRemove(com.google.gwt.dom.client.NativeEvent event) { java.lang.String hashtags = com.google.gerrit.client.change.Hashtags.getDataId(event); if (hashtags != null) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); final com.google.gerrit.reviewdb.client.PatchSet.Id psId = screen.getPatchSetId(); <START_MOD>final com.google.gerrit.reviewdb.client.Project.NameKey project = null; <END_MOD>com.google.gerrit.client.changes.ChangeApi.hashtags(psId.getParentKey().get(<START_MOD>), Project.NameKey.asStringOrNull(project<END_MOD>)).post(com.google.gerrit.client.change.Hashtags.PostInput.create(null, hashtags), new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(psId)); } } }); } }
<START_MOD>static<END_MOD> com.google.gerrit.server.project.PermissionCollection.SeenRule <START_MOD>create(com.google.gerrit.common.data.AccessSection<END_MOD> <START_MOD>section,<END_MOD> <START_MOD>com.google.gerrit.common.data.Permission permission, com.google.gerrit.common.data.PermissionRule rule) { return new<END_MOD> com.google.gerrit.server.project.<START_MOD>AutoValue_PermissionCollection_SeenRule(section<END_MOD>.<START_MOD>getName<END_MOD>(), <START_MOD>permission<END_MOD>.<START_MOD>getName(), rule.getGroup().getUUID(<END_MOD>)); }
<START_MOD>private void clearDatabase() throws java.lang.Exception { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (schemaFactory.open())); try { java.sql.Connection conn = schema.getConnection(); com.google.gwtorm.schema.sql.SqlDialect dialect = schema.getDialect(); com.google.gwtorm.jdbc.JdbcExecutor e = new com.google.gwtorm.jdbc.JdbcExecutor(schema); try { for (java.lang.String table : dialect.listTables(conn)) { e.execute(("DROP TABLE " + table)); } schema.restartSequences(e); } finally { e.close(); } } finally { schema.close(); } }<END_MOD>
private void testGetGroup(java.lang.String url, com.google.gerrit.reviewdb.client.AccountGroup expectedGroup) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.get(url); com.google.gerrit.<START_MOD>server<END_MOD>.group<START_MOD>.GroupJson<END_MOD>.GroupInfo group = new com.google.gson.Gson().fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<com.google.gerrit.<START_MOD>server<END_MOD>.group<START_MOD>.GroupJson<END_MOD>.GroupInfo>() {}.getType()); com.google.gerrit.acceptance.rest.group.GroupAssert.assertGroupInfo(expectedGroup, group); }
private void setMissingHeader(final java.util.Map<java.lang.String, com.google.gerrit.server.mail.EmailHeader> hdrs, final java.lang.String name, final java.lang.String value) { if ((!(hdrs.containsKey(name))) || (hdrs.get(name).isEmpty())) { <START_MOD>setHeader(<END_MOD>hdrs<START_MOD>, <END_MOD>name, value); } }
public static void saveInlineComments() { final com.google.gerrit.client.change.LocalComments.StorageBackend storage = new com.google.gerrit.client.change.LocalComments.StorageBackend(); for (final java.lang.String cookie : storage.getKeys()) { if (com.google.gerrit.client.change.LocalComments.isInlineComment(cookie)) { com.google.gerrit.client.change.LocalComments.InlineComment input = com.google.gerrit.client.change.LocalComments.getInlineComment(cookie); if ((input.commentInfo.id()) == null) { com.google.gerrit.client.changes.CommentApi.createDraft(input.psId<START_MOD>, Project.NameKey.asStringOrNull(input.project)<END_MOD>, input.commentInfo, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { storage.removeItem(cookie); } }); } else { com.google.gerrit.client.changes.CommentApi.updateDraft(input.psId, <START_MOD>Project.NameKey.asStringOrNull(input.project), <END_MOD>input.commentInfo.id(), input.commentInfo, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { storage.removeItem(cookie); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if (com.google.gerrit.client.rpc.RestApi.isNotFound(caught)) { storage.removeItem(cookie); } else { super.onFailure(caught); } } }); } } } }
<START_MOD>private GroupBundle.Builder newBundle() { java.sql.Timestamp ts = new java.sql.Timestamp(TestTimeUtil.START.toEpochMilli()); com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.Id(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("group-1"), ts); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.Account.Id(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.Account.Id(2000), ts); com.google.gerrit.reviewdb.client.AccountGroupById byId = new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(byId, new com.google.gerrit.reviewdb.client.Account.Id(3000), ts); return com.google.gerrit.server.group.db.GroupBundle.builder().group(group).members(member).memberAudit(memberAudit).byId(byId).byIdAudit(byIdAudit); }<END_MOD>
@java.lang.Override public boolean allowsEdit(final com.google.gerrit.reviewdb.client.Account.FieldName field) { if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.client.AuthType.HTTP)) { switch (field) { case USER_NAME : return false; case FULL_NAME : return (com.google.common.base.Strings.emptyToNull(authConfig.getHttpDisplaynameHeader())) == null; case REGISTER_NEW_EMAIL : return (<START_MOD>emailSettings.allowRegisterNewEmail) && ((<END_MOD>com.google.common.base.Strings.emptyToNull(authConfig.getHttpEmailHeader())) == null<START_MOD>)<END_MOD>; default : return true; } } else { return true; } }
<START_MOD>@java.lang.Override public boolean hasNext() { return (index) < (size()); }<END_MOD>
@org.junit.Before public void setUp() throws java.lang.Exception { <START_MOD>com.google.gerrit.lifecycle.LifecycleManager lifecycle = <END_MOD>new<START_MOD> com.google.gerrit.lifecycle.LifecycleManager();<END_MOD> com.google.gerrit.testutil.InMemoryModule<START_MOD>.createInjector<END_MOD>(<START_MOD>lifecycle<END_MOD>).<START_MOD>injectMembers<END_MOD>(this); <START_MOD>lifecycle.start(); <END_MOD>}
private boolean isSecure(javax.servlet.http.HttpServletRequest req) { return (<START_MOD>(authConfig.getCookieSecure()) || (<END_MOD>req.isSecure(<START_MOD>)<END_MOD>)) || ("https".equals(req.getScheme())); }
<START_MOD>@org.junit.Test public void testUSERNoAllowDomain() { setFrom("USER"); setDomain(java.util.Arrays.asList("example.com")); final java.lang.String name = "A U. Thor"; final java.lang.String email = "a.u.thor@test.com"; final com.google.gerrit.reviewdb.client.Account.Id user = user(name, email); replay(accountCache); final com.google.gerrit.server.mail.Address r = create().from(user); assertThat(r).isNotNull(); assertThat(r.name).isEqualTo(name); assertThat(r.email).isEqualTo(ident.getEmailAddress()); verify(accountCache); }<END_MOD>
@org.junit.Test public void defaultGroupsCreated_internals() throws java.lang.Exception { java.util.Set<java.lang.String> names = com.google.common.collect.Sets.newHashSet(); for (com.google.gerrit.reviewdb.client.AccountGroup g : db.accountGroups().all()) { names.add(g.getName()); } <START_MOD>assertThat<END_MOD>(names<START_MOD>)<END_MOD>.contains("Administrators"); <START_MOD>assertThat<END_MOD>(names<START_MOD>)<END_MOD>.contains( Users }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.project.ProjectControl myCtl = parent.getControl(); if (id.toString().equals(<START_MOD>com.google.gerrit.server.project.DashboardsCollection.DEFAULT_DASHBOARD_NAME<END_MOD>)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(myCtl); } java.util.List<java.lang.String> parts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id.get())); if ((parts.size()) != 2) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.server.CurrentUser user = myCtl.getUser(); java.lang.String ref = parts.get(0); java.lang.String path = parts.get(1); for (com.google.gerrit.server.project.ProjectState ps : myCtl.getProjectState().tree()) { try { return parse(ps.controlFor(user), ref, path, myCtl); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@org.junit.Test public void revert() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); gApi.changes().id(("p~master~" + (r.getChangeId()))).revision(r.getCommit().name()).approve(); gApi.changes().id(("p~master~" + (r.getChangeId()))).revision(r.getCommit().name()).submit(); gApi.changes().id(("p~master~" + (r.getChangeId()))).revert(); }
<START_MOD>public com.google.gerrit.server.project.ProjectState getChecked(com.google.gerrit.reviewdb.client.Project.NameKey projectName) throws java.io.IOException;<END_MOD>
private java.lang.Iterable<<START_MOD>org<END_MOD>.<START_MOD>eclipse<END_MOD>.<START_MOD>jgit.lib.Ref<END_MOD>> getDraftRefs(com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { <START_MOD>try (org<END_MOD>.<START_MOD>eclipse<END_MOD>.<START_MOD>jgit<END_MOD>.<START_MOD>lib<END_MOD>.<START_MOD>Repository<END_MOD> <START_MOD>repo<END_MOD> = <START_MOD>repoManager.openMetadataRepository<END_MOD>(<START_MOD>allUsers)) { return getDraftRefs(repo, changeId<END_MOD>); <START_MOD>}<END_MOD> <START_MOD>catch (<END_MOD>java.<START_MOD>io<END_MOD>.<START_MOD>IOException<END_MOD> <START_MOD>e)<END_MOD> <START_MOD>{<END_MOD> <START_MOD>throw<END_MOD> new com.google.<START_MOD>gwtorm<END_MOD>.<START_MOD>server<END_MOD>.<START_MOD>OrmException<END_MOD>(<START_MOD>e<END_MOD>); } }
<START_MOD>@java.lang.Override <END_MOD>public com.google.gerrit.server.project.ProjectState get(final com.google.gerrit.reviewdb.client.Project.NameKey projectName) { <START_MOD>try { return getChecked(projectName); } catch<END_MOD> (<START_MOD>java.io.IOException<END_MOD> <START_MOD>e<END_MOD>) { return null; } }
public void add(final com.google.gerrit.extensions.registration.RegistrationHandle handle) { if (handle instanceof com.google.gerrit.extensions.registration.ReloadableRegistrationHandle) { if ((reloadableHandles) == null) { reloadableHandles = com.google.common.collect.Lists.newArrayList(); } reloadableHandles.add(((com.google.gerrit.extensions.registration.ReloadableRegistrationHandle<?>) (handle))); } add(new com.google.gerrit.<START_MOD>extensions.events<END_MOD>.LifecycleListener() { @java.lang.Override public void start() { } @java.lang.Override public void stop() { handle.remove(); } }); }
<START_MOD>@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupMemberAudit get(com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key key) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); }<END_MOD>
<START_MOD>@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { revision = getRevision(); super.onLoad(); }<END_MOD>
<START_MOD>public com.google.gerrit.server.project.RefFilter<T> setStart(int start) { this.start = start; return this; }<END_MOD>
<START_MOD>@org.junit.Test public void listProjectsWithBranch() throws com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.RestResponse r = GET("/projects/?b=master"); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ProjectInfo> result = com.google.gerrit.acceptance.rest.project.ListProjectsIT.toProjectInfoMap(r); assertNotNull(result.get(existingProject.get())); assertNotNull(result.get(existingProject.get()).branches); assertEquals(1, result.get(existingProject.get()).branches.size()); assertNotNull(result.get(existingProject.get()).branches.get("master")); }<END_MOD>
<START_MOD>public static java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> getNames() { return com.google.gerrit.server.group.SystemGroupBackend.names; }<END_MOD>
private void assertRefs(java.lang.String... expectedWithMeta) throws java.lang.Exception { java.util.List<java.lang.String> expected = new java.util.ArrayList<>(expectedWithMeta.length); for (java.lang.String r : expectedWithMeta) { if ((notesMigration.writeChanges()) || (!(r.endsWith(RefNames.META_SUFFIX)))) { expected.add(r); } } com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context ctx = disableDb(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { com.google.gerrit.server.project.ProjectControl ctl = projectControlFactory.controlFor(project, <START_MOD>userProvider.get(<END_MOD>)); com.google.gerrit.server.git.VisibleRefFilter filter = new com.google.gerrit.server.git.VisibleRefFilter(tagCache, changeCache, repo, ctl, new com.google.gerrit.testutil.DisabledReviewDb(), true); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = repo.getAllRefs(); assertThat(filter.filter(all, false).keySet()).containsExactlyElementsIn(expected); } finally { enableDb(ctx); } }
private void setMerged(final com.google.gerrit.reviewdb.client.Change c, final com.google.gerrit.reviewdb.client.ChangeMessage msg) <START_MOD>throws com.google.gwtorm<END_MOD>.server.<START_MOD>OrmException { try { db.changes().beginTransaction(c.getId()); com.google.gerrit.server.<END_MOD>git.CodeReviewCommit commit = commits.get(c.getId()); com.google.gerrit.reviewdb.client.PatchSet.Id merged = commit.change.currentPatchSetId(); setMergedPatchSet(c.getId(), merged); com.google.gerrit.reviewdb.client.PatchSetApproval submitter = saveApprovals(c, merged); addMergedMessage(submitter, msg); sendMergedEmail(c, submitter); <START_MOD>db.commit(); <END_MOD>if (submitter != null) { try { hooks.doChangeMergedHook(c, accountCache.get(submitter.getAccountId()).getAccount(), db.patchSets().get(c.currentPatchSetId()), db); } catch (com.google.gwtorm.server.OrmException ex) { com.google.gerrit.server.git.MergeOp.log.error(( run hook for submitted patch set   + (c.getId())), ex); } } }<START_MOD> finally { db.rollback(); } }<END_MOD>
<START_MOD>boolean match(java.lang.String refName) { return pattern().matcher(refName).find(); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String apply(com.google.gerrit.server.change.RevisionResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { return test.apply(resource, null); }<END_MOD>
@org.junit.Test public void revertChangeByOwner() throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageChange(); revert(sc, sc.owner); assertThat(sender).sent("newchange", sc).to(sc.reviewer<START_MOD>, sc.watchingProjectOwner, admin<END_MOD>).cc(sc.ccer).<START_MOD>bcc<END_MOD>(com.google.gerrit.acceptance.server.mail.<START_MOD>NEW_CHANGES, com.google.gerrit.acceptance.server.mail.NEW_PATCHSETS).noOneElse(<END_MOD>); assertThat(sender).sent("revert", sc).cc(sc.reviewer, sc.ccer, <START_MOD>admin<END_MOD>).bcc(com.google.gerrit.acceptance.server.mail.ALL_COMMENTS)<START_MOD>.noOneElse()<END_MOD>; }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server<START_MOD>.restapi<END_MOD>.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
private void populateDiffAllActions(final com.google.gerrit.common.data.PatchSetDetail detail) { diffAllSideBySide = new com.google.gwt.user.client.ui.Button(Util.C.buttonDiffAllSideBySide()); diffAllUnified = new com.google.gwt.user.client.ui.Button(Util.C.buttonDiffAllUnified()); <START_MOD>addHandlerForDiffButton<END_MOD>(detail); <START_MOD>actionsPanel.add(diffAllSideBySide<END_MOD>); actionsPanel.add(diffAllUnified); }
@com.google.gwtjsonrpc.common.HostPageCache(name = <START_MOD>"_hpd"<END_MOD>, once = true) void load(com.google.gwtjsonrpc.common.AsyncCallback<com.google.gerrit.common.data.HostPageData> callback);
public T load() throws com.google.gwtorm.server.OrmException { if (loaded) { return self(); } if ((!(args.migration.enabled())) || ((changeId) == null)) { loadDefaults(); return self(); } try (<START_MOD>com.google.gerrit.metrics.Timer1.Context timer = args.metrics.readLatency.start(com.google.gerrit.server.notedb.NoteDbTable.CHANGES);<END_MOD>org.eclipse.jgit.lib.Repository repo = args.repoManager.openMetadataRepository(getProjectName());com.google.gerrit.server.notedb.AbstractChangeNotes.LoadHandle handle = openHandle(repo)) { revision = handle.id(); onLoad(handle); loaded = true; } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } return self(); }
<START_MOD>public<END_MOD> com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.<START_MOD>ForProject forProject(com.google.gerrit.reviewdb.client.Project.NameKey projectName<END_MOD>)<START_MOD> throws com.google.gerrit.extensions.restapi.ResourceNotFoundException<END_MOD> { <START_MOD>try { return new com<END_MOD>.<START_MOD>googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject<END_MOD>(<START_MOD>cfgFactory.getProjectPluginConfigWithInheritance<END_MOD>(<START_MOD>projectName, pluginName<END_MOD>)); } <START_MOD>catch<END_MOD> <START_MOD>(com<END_MOD>.<START_MOD>google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((("Project" + (projectName.get<END_MOD>()<START_MOD>)) +   not found<END_MOD> }<START_MOD> }<END_MOD>
<START_MOD>private boolean isPatchSetMerged(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws java.io.IOException { org.eclipse.jgit.lib.Repository repository = ctx.getRepository(); org.eclipse.jgit.revwalk.RevWalk revWalk = ctx.getRevWalk(); org.eclipse.jgit.lib.ObjectId objectId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); org.eclipse.jgit.revwalk.RevCommit revCommit = revWalk.parseCommit(objectId); com.google.gerrit.reviewdb.client.Branch.NameKey destinationNameKey = ctx.getChange().getDest(); org.eclipse.jgit.lib.Ref destinationRef = repository.exactRef(destinationNameKey.get()); if (destinationRef == null) { return false; } return com.google.gerrit.server.change.IncludedInResolver.includedInOne(repository, revWalk, revCommit, java.util.Collections.singletonList(destinationRef)); }<END_MOD>
<START_MOD>@org.junit.Test public void getVersion() throws java.lang.Exception { java.lang.String version = gApi.config().server().getVersion(); com.google.common.truth.Truth.assertThat(version).is(com.google.gerrit.common.Version.getVersion()); }<END_MOD>
private <T extends com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput> void checkComments(com.google.gerrit.server.change.RevisionResource revision, java.util.Map<java.lang.String, java.util.List<T>> commentsPerPath) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListNotAvailableException { java.util.Set<java.lang.String> revisionFilePaths = getAffectedFilePaths(revision); for (java.util.Map.Entry<java.lang.String, java.util.List<T>> entry : commentsPerPath.entrySet()) { java.lang.String path = entry.getKey(); com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId = revision.getChange().currentPatchSetId(); com.google.gerrit.server.change.PostReview.ensurePathRefersToAvailableOrMagicFile(path, revisionFilePaths, patchSetId); java.util.List<T> comments = entry.getValue(); for (T comment : comments) { com.google.gerrit.server.change.PostReview.ensureLineIsNonNegative(comment.line, path); com.google.gerrit.server.change.PostReview.ensureCommentNotOnMagicFilesOfAutoMerge(path, comment); com.google.gerrit.server.change.PostReview.ensureRangeIsValid(path, comment.range); } } }
<START_MOD>private org.eclipse.jgit.lib.Ref findMergedInto(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, java.lang.String first, org.eclipse.jgit.revwalk.RevCommit commit) { try { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = ctx.getRepository().getRefDatabase().getRefs(com.google.gerrit.server.git.ALL); org.eclipse.jgit.lib.Ref firstRef = all.get(first); if ((firstRef != null) && (com.google.gerrit.server.git.ReplaceOp.isMergedInto(ctx.getRevWalk(), commit, firstRef))) { return firstRef; } for (org.eclipse.jgit.lib.Ref ref : all.values()) { if (com.google.gerrit.server.git.ReplaceOp.isHead(ref)) { if (com.google.gerrit.server.git.ReplaceOp.isMergedInto(ctx.getRevWalk(), commit, ref)) { return ref; } } } return null; } catch (java.io.IOException e) { com.google.gerrit.server.git.ReplaceOp.log.warn("Can't check for already submitted change", e); return null; } }<END_MOD>
<START_MOD>public org.bouncycastle.openpgp.PGPPublicKeyRing get(byte[] fingerprint) throws java.io.IOException, org.bouncycastle.openpgp.PGPException { if ((reader) == null) { load(); } if ((notes) == null) { return null; } org.eclipse.jgit.notes.Note note = notes.getNote(com.google.gerrit.gpg.PublicKeyStore.keyObjectId(com.google.gerrit.gpg.Fingerprint.getId(fingerprint))); if (note == null) { return null; } try (java.io.InputStream in = reader.open(note.getData(), com.google.gerrit.gpg.OBJ_BLOB).openStream()) { while (true) { @java.lang.SuppressWarnings("unchecked") java.util.Iterator<java.lang.Object> it = new org.bouncycastle.openpgp.bc.BcPGPObjectFactory(new org.bouncycastle.bcpg.ArmoredInputStream(in)).iterator(); if (!(it.hasNext())) { break; } java.lang.Object obj = it.next(); if (obj instanceof org.bouncycastle.openpgp.PGPPublicKeyRing) { org.bouncycastle.openpgp.PGPPublicKeyRing kr = ((org.bouncycastle.openpgp.PGPPublicKeyRing) (obj)); if (java.util.Arrays.equals(kr.getPublicKey().getFingerprint(), fingerprint)) { return kr; } } checkState((!(it.hasNext())), "expected one PGP object per ArmoredInputStream"); } return null; } }<END_MOD>
public java.io.Reader get(java.lang.String endPoint) throws java.io.IOException { org.apache.http.client.methods.HttpGet get = new org.apache.http.client.methods.HttpGet(("http://localhost:8080/a" + endPoint)); org.apache.http.HttpResponse response = getClient().execute(get); java.io.Reader reader = new java.io.InputStreamReader(response.getEntity().getContent()); reader.skip(<START_MOD>RestApiServlet.JSON_MAGIC.length<END_MOD>); return reader; }
@org.junit.Test public void createDraft() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); java.lang.String changeId = r.getChangeId(); java.lang.String revId = r.getCommit().getName(); com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput comment = newCommentInfo("file1", Comment.Side.REVISION, 1,   1 addDraft(changeId, revId, comment); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = getDraftComments(changeId, revId); <START_MOD>assertThat(result.size()).isEqualTo<END_MOD>(1<START_MOD>); com.google.gerrit.extensions.common.CommentInfo actual = com.google.common.collect.Iterables.getOnlyElement(<END_MOD>result.<START_MOD>get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment,<END_MOD> actual); }
<START_MOD>public static boolean isDefaultDashboard(java.lang.String id) { return (id != null) && (id.equals(com.google.gerrit.server.project.DashboardsCollection.DEFAULT_DASHBOARD_NAME)); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.Void get(long timeout, java.util.concurrent.TimeUnit unit) { nrtManager.waitForGeneration(gen, timeout, unit); return null; }<END_MOD>
<START_MOD>@java.lang.Override public java.util.Set<com.google.gerrit.common.data.GroupReference> suggest(java.lang.String name) { java.util.Set<com.google.gerrit.common.data.GroupReference> groups = com.google.common.collect.Sets.newHashSet(); for (com.google.gerrit.server.account.GroupBackend g : backends) { groups.addAll(g.suggest(name)); } return groups; }<END_MOD>
public static void sortRevisionInfoByNumber(com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> list) { java.util.Collections.sort(com.google.gerrit.client.rpc.Natives.asList(list), new java.util.Comparator<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo>() { @java.lang.Override public int compare(com.google.gerrit.client.changes.ChangeInfo.RevisionInfo a, com.google.gerrit.client.changes.ChangeInfo.RevisionInfo b) { return <START_MOD>java.lang.Integer.compare<END_MOD>(a._number()<START_MOD>,<END_MOD> b._number()); } }); }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.<START_MOD>getEvenIfMissing<END_MOD>(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.maybeGet(id).map(AccountState::getAccount); if ((!(account.isPresent())) || (!(account.get().isActive()))) { continue; } if (match != null) { return null; } match = account.get(); } return match; }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); idA = org.eclipse.jgit.lib.ObjectId.fromString("df84c2f4f7ce7e0b25cdeac84b8870bcff319885"); name = new com.google.gerrit.reviewdb.Project.NameKey("test"); realDb = createBareRepository(); mockDb = createStrictMock(org.eclipse.jgit.lib.Repository.class); pc = createStrictMock(com.google.gerrit.server.project.ProjectControl.class); pcf = createStrictMock(ProjectControl.Factory.class); grm = createStrictMock(com.google.gerrit.GitRepositoryManager.class); }
<START_MOD>public static org.eclipse.jgit.lib.CommitBuilder rebaseCommits(org.eclipse.jgit.lib.Repository git, org.eclipse.jgit.revwalk.RevCommit original, org.eclipse.jgit.revwalk.RevCommit branchTip) throws java.io.IOException { final org.eclipse.jgit.merge.ThreeWayMerger merger = MergeStrategy.RESOLVE.newMerger(git, true); merger.merge(original, branchTip); final org.eclipse.jgit.lib.CommitBuilder rebasedCommitBuilder = new org.eclipse.jgit.lib.CommitBuilder(); rebasedCommitBuilder.setTreeId(merger.getResultTreeId()); rebasedCommitBuilder.setParentId(branchTip); rebasedCommitBuilder.setAuthor(original.getAuthorIdent()); rebasedCommitBuilder.setMessage(original.getFullMessage()); return rebasedCommitBuilder; }<END_MOD>
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canGenerateHttpPassword()))) { throw new com.google.gerrit.extensions.restapi.AuthException( allowed to generate HTTP password } newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().<START_MOD>canGenerateHttpPassword<END_MOD>()))) { throw new com.google.gerrit.extensions.restapi.AuthException( allowed to clear HTTP password } newPassword = null; } else { if (!(self.get().getCapabilities().<START_MOD>canGenerateHttpPassword<END_MOD>())) { throw new com.google.gerrit.extensions.restapi.AuthException(( allowed to set HTTP password directly,   +   <START_MOD>the generate http password permision.<END_MOD> } newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }
<START_MOD>@java.lang.Override public java.util.List<org.eclipse.jgit.transport.ReceiveCommand> rebuild(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change.Id changeId) { throw new java.lang.UnsupportedOperationException(); }<END_MOD>
private void init() { final org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); try { cfg.fromText(com.google.gerrit.pgm.init.Libraries.read(com.google.gerrit.pgm.init.Libraries.RESOURCE_FILE)); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e.getMessage(), e); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException(e.getMessage(), e); } for (java.lang.reflect.Field f : com.google.gerrit.pgm.init.Libraries.class.getDeclaredFields()) { if ((((f.getModifiers()) & (java.lang.reflect.Modifier.STATIC)) == 0) && ((f.getType()) == (com.google.gerrit.pgm.init.LibraryDownloader.class))) { try { <START_MOD>f.set(this<END_MOD>, <START_MOD>downloadProvider.get()); } catch (java.lang.IllegalArgumentException | java.lang.IllegalAccessException e) { throw new java.lang.IllegalStateException(( initialize   + (f.getName()))); } } } for (java.lang.reflect.Field f : com.google.gerrit.pgm.init.Libraries.class.getDeclaredFields()) { if ((((f.getModifiers()) & (java.lang.reflect.Modifier.STATIC)) == 0) && ((f.getType()) == (com.google.gerrit.pgm.init.LibraryDownloader.class))) { try { init(f, <END_MOD>cfg); } catch (java.lang.IllegalArgumentException <START_MOD>| java.lang.IllegalAccessException | java.lang.NoSuchFieldException | java.lang.SecurityException <END_MOD>e) { throw new java.lang.IllegalStateException(( <START_MOD>configure<END_MOD>   + (f.getName()))); } <START_MOD>} } }<END_MOD>
@java.lang.SuppressWarnings("deprecation") static org.eclipse.jgit.lib.ObjectId getNoteKey(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) { return org.eclipse.jgit.lib.ObjectId.fromRaw(com.google.common.hash.Hashing.sha1().hashString(groupName.get(), java.nio.charset.StandardCharsets.UTF_8).asBytes()); }
public void displayPopup() { poppingUp = true; if (firstPopupLoad) { <START_MOD>query = new com.google.gerrit.client.ui.ProjectListPopup.Query("").run<END_MOD>(); } else { popup.setPopupPositionAndShow(popupPosition); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(popup); try { com.google.gwtexpui.globalkey.client.GlobalKey.addApplication(popup, new com.google.gwtexpui.globalkey.client.HidePopupPanelCommand(0, com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE, popup)); } catch (java.lang.Throwable e) { } projectsTab.setRegisterKeys(true); projectsTab.finishDisplay(); filterTxt.setFocus(true); poppingUp = false; } }
public void removeApproval(java.lang.String label) { removeApprovalFor(<START_MOD>getEffectiveAccountId<END_MOD>(), label); }
@org.junit.Test public void testPersonByNameAge() throws java.lang.Exception { com.google.gwtorm.nosql.IndexFunction<com.google.gwtorm.data.Person> idx = index("nameAge",   name=? AND age=? org.junit.Assert.assertEquals("nameAge", idx.getName()); com.google.gwtorm.nosql.IndexKeyBuilder b; com.google.gwtorm.data.Person p; b = new com.google.gwtorm.nosql.IndexKeyBuilder(); p = new com.google.gwtorm.data.Person(new com.google.gwtorm.data.Person.Key("hm"), 42); assertTrue(idx.includes(p)); idx.encode(b, p); com.google.gwtorm.nosql.IndexFunctionTest.assertEqualToBuilderResult(new byte[]{ 'h', 'm', 0, 1, 1, 42 }, b); p = new com.google.gwtorm.data.Person(new com.google.gwtorm.data.Person.Key(null), 0); assertFalse(idx.includes(p)); new com.google.gwtorm.nosql.IndexKeyBuilder(); assertFalse(idx.includes(p)); }
public static com.google.gerrit.server.notedb.NotesMigration allEnabled() { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); <START_MOD>for (com.google.gerrit.server.notedb.NotesMigration.Table t : com.google.gerrit.server.notedb.NotesMigration.Table.values()) { <END_MOD>cfg.setBoolean(<START_MOD>com.google.gerrit.server.notedb.NotesMigration.NOTEDB, t.name().toLowerCase(), com.google.gerrit.server.notedb.NotesMigration.WRITE<END_MOD>, true); cfg.setBoolean(<START_MOD>com.google.gerrit.server.notedb.NotesMigration.NOTEDB, t.name().toLowerCase(), com.google.gerrit.server.notedb.NotesMigration.READ<END_MOD>, true); <START_MOD>}<END_MOD> return new com.google.gerrit.server.notedb.NotesMigration(cfg); }
@java.lang.Override public java.lang.Void call() throws java.lang.Exception { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open(); try { context.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDbProvider() { return com.google.inject.util.Providers.of(db); } @java.lang.Override public com.google.gerrit.server.CurrentUser getCurrentUser() { throw new com.google.inject.OutOfScopeException( user during ChangeIndexer } }); index.replace(<START_MOD>cd<END_MOD>); return null; } finally { context.setContext(null); db.close(); } } catch (java.lang.Exception e) { com.google.gerrit.server.index.ChangeIndexerImpl.log.error(java.lang.String.format( to index change %d in %s <START_MOD>cd.getId<END_MOD>(), <START_MOD>cd.getChange()<END_MOD>.getProject().get()), e); throw e; } }
@java.lang.Override public void run() { if (!(listeners.iterator().hasNext())) { return; } try { com.googlesource.gerrit.plugins.quota.Publisher.<START_MOD>RepoEvent repoSizeEvent<END_MOD> = <START_MOD>createRepoSizeEvent(); com.googlesource.gerrit.plugins.quota.Publisher.RepoEvent pushCountEvent = createPushCountEvent(); com.googlesource.gerrit.plugins.quota.Publisher.RepoEvent fetchCountEvent = createFetchCountEvent<END_MOD>(); for (com.google.gerrit.extensions.events.UsageDataPublishedListener l : listeners) { try { l.onUsageDataPublished(<START_MOD>repoSizeEvent); l.onUsageDataPublished(pushCountEvent); l.onUsageDataPublished(fetchCountEvent<END_MOD>); } catch (java.lang.RuntimeException e) { com.googlesource.gerrit.plugins.quota.Publisher.log.warn( in UsageDataPublishedListener e); } } } catch (java.util.concurrent.ExecutionException e) { com.googlesource.gerrit.plugins.quota.Publisher.log.warn( accessing repoSizeCache e); } }
<START_MOD>@java.lang.Override <END_MOD>public void setUserAccountId(com.google.gerrit.reviewdb.client.Account.Id id) { key = new com.google.gerrit.httpd.WebSessionManager.Key(("id:" + id)); val = new com.google.gerrit.httpd.WebSessionManager.Val(id, 0, false, null, 0); }
static com.google.gerrit.extensions.common.GpgKeyInfo toJson(org.bouncycastle.openpgp.PGPPublicKeyRing keyRing<START_MOD>, com.google.gerrit.gpg.PublicKeyChecker checker, com.google.gerrit.gpg.PublicKeyStore store<END_MOD>) throws java.io.IOException { org.bouncycastle.openpgp.PGPPublicKey key = keyRing.getPublicKey(); com.google.gerrit.extensions.common.GpgKeyInfo info = new com.google.gerrit.extensions.common.GpgKeyInfo(); info.id = com.google.gerrit.gpg.PublicKeyStore.keyIdToString(key.getKeyID()); info.fingerprint = com.google.gerrit.gpg.Fingerprint.toString(key.getFingerprint()); @java.lang.SuppressWarnings("unchecked") java.util.Iterator<java.lang.String> userIds = key.getUserIDs(); info.userIds = com.google.common.collect.ImmutableList.copyOf(userIds); try (java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(4096);org.bouncycastle.bcpg.ArmoredOutputStream aout = new org.bouncycastle.bcpg.ArmoredOutputStream(out)) { key.encode(aout); info.key = new java.lang.String(out.toByteArray(), java.nio.charset.StandardCharsets.UTF_8); } <START_MOD>com.google.gerrit.gpg.CheckResult checkResult = checker.check(key, store); info.status = checkResult.getStatus(); if (!(checkResult.getProblems().isEmpty())) { info.problems = checkResult.getProblems(); } <END_MOD>return info; }
<START_MOD>public final void copyTo(com.google.gerrit.extensions.common.EditPreferencesInfo p) { p.tabSize = tabSize(); p.lineLength = lineLength(); p.lineWrapping = lineWrapping(); p.showTabs = showTabs(); p.showTrailingSpace = showTrailingSpace(); p.syntaxHighlighting = syntaxHighlighting(); p.hideLineNumbers = hideLineNumbers(); p.keyMap = keyMap(); p.theme = theme(); }<END_MOD>
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException<START_MOD>, org.eclipse.jgit.errors.ConfigInvalidException<END_MOD> { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.<START_MOD>server.account.ExternalId extId = getAccountExternalId(who.getExternalId()); if (extId != null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException( in use by another account } update(db, who, extId); } else { externalIdsUpdate.create().insert(db, com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalId(), to, who.getEmailAddress())); if ((who.getEmailAddress()) != null) { com.google.gerrit.<END_MOD>reviewdb.client.<START_MOD>Account a<END_MOD> = <START_MOD>db.accounts().get(to<END_MOD>); if (<START_MOD>(a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress())<END_MOD> != null) { <START_MOD>byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return<END_MOD> new com.google.gerrit.server.account.AuthResult(to, <START_MOD>who.getExternalId()<END_MOD>, false); } }
<START_MOD>private java.util.SortedSet<com.google.gerrit.reviewdb.Project.NameKey> scanProjects() { java.util.SortedSet<com.google.gerrit.reviewdb.Project.NameKey> names = new java.util.TreeSet<com.google.gerrit.reviewdb.Project.NameKey>(); scanProjects(basePath, "", names); return java.util.Collections.unmodifiableSortedSet(names); }<END_MOD>
<START_MOD>@org.junit.Test public void preflightBadMethod() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); for (java.lang.String method : new java.lang.String[]{ "POST", "PUT", "DELETE", "PATCH" }) { org.apache.http.client.fluent.Request req = org.apache.http.client.fluent.Request.Options(((((adminRestSession.url()) + "/a/changes/") + (change.getChangeId())) + "/detail")); req.addHeader(HttpHeaders.ORIGIN, "http://example.com"); req.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, method); adminRestSession.execute(req).assertBadRequest(); } }<END_MOD>
@org.junit.Test public void createDuplicateInternalGroupCaseSensitiveName_Conflict() throws java.lang.Exception { java.lang.String dupGroupName = name("dupGroup"); gApi.groups().create(dupGroupName); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((   + dupGroupName) +   already exists gApi.groups().create(dupGroupName); }
@java.lang.Override public void start() { try { <START_MOD>try (<END_MOD>com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()<START_MOD>)<END_MOD> { final com.google.gerrit.reviewdb.client.CurrentSchemaVersion currentVer = getSchemaVersion(db); final int expectedVer = com.google.gerrit.server.schema.SchemaVersion.getBinaryVersion(); if (currentVer == null) { throw new com.google.inject.ProvisionException((( not yet initialized. + ( Run init to initialize the schema: +   java -jar gerrit.war init -d   + (site.site_path.toAbsolutePath()))); } if ((currentVer.versionNbr) < expectedVer) { throw new com.google.inject.ProvisionException((((((((( schema version   + (currentVer.versionNbr)) +   expected schema version   + expectedVer) +   Run init to upgrade: +   java -jar   + (site.gerrit_war.toAbsolutePath())) +   init -d   + (site.site_path.toAbsolutePath()))); } else if ((currentVer.versionNbr) > expectedVer) { throw new com.google.inject.ProvisionException((((( schema version   + (currentVer.versionNbr)) +   expected schema version   + expectedVer) +   Downgrade is not supported. } } <START_MOD>} catch (com.google.gwtorm.server.OrmException e) { throw new com.google.inject.ProvisionException( read schema_version e<END_MOD>); } }
<START_MOD>protected java.lang.String soyHtmlTemplate(java.lang.String name) { return args.soyTofu.newRenderer(("com.google.gerrit.server.mail.template." + name)).setContentKind(SanitizedContent.ContentKind.HTML).setData(soyContext).render(); }<END_MOD>
@java.lang.Override public com.google.gerrit.extensions.api.changes.ChangeApi create(com.google.gerrit.extensions.common.ChangeInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.common.ChangeInfo out = createChange.apply(TopLevelResource.INSTANCE, in).value(); return api.create(changes.parse(new com.google.gerrit.reviewdb.client.Change.Id(out._number))); } catch (com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.project.InvalidChangeOperationException | com.google.gerrit.server.git.UpdateException <START_MOD>| com.google.gerrit.server.permissions.PermissionBackendException <END_MOD>e) { throw new com.google.gerrit.extensions.restapi.RestApiException( create change e); } }
@java.lang.Override protected void configure() { bind(new com.google.inject.TypeLiteral<com.google.common.base.Optional<com.ericsson.gerrit.plugins.highavailability.peers.PeerInfo>>() {}).toProvider(com.ericsson.gerrit.plugins.highavailability.peers.<START_MOD>JGroupsPeerInfoProvider.class); listener().to(com.ericsson.gerrit.plugins.highavailability.peers.JGroupsPeerInfoProvider<END_MOD>.class); }
<START_MOD>@java.lang.Override public java.util.List<com.google.gerrit.server.account.GetExternalIds.ExternalIdInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.IdentifiedUser user = resource.getUser(); if ((self.get()) != user) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get external IDs"); } try { java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> ids = db.get().accountExternalIds().byAccount(user.getAccountId()).toList(); if (ids.isEmpty()) { return com.google.common.collect.ImmutableList.of(); } java.util.List<com.google.gerrit.server.account.GetExternalIds.ExternalIdInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { com.google.gerrit.server.account.GetExternalIds.ExternalIdInfo info = new com.google.gerrit.server.account.GetExternalIds.ExternalIdInfo(); info.identity = id.getExternalId(); info.emailAddress = id.getEmailAddress(); info.trusted = authConfig.isIdentityTrustable(java.util.Collections.singleton(id)); if (id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME)) { info.canDelete = false; } else { info.canDelete = false; } result.add(info); } return result; } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot get external IDs", e); } }<END_MOD>
private boolean isMember(com.google.gerrit.reviewdb.client.AccountGroup parent, com.google.gerrit.common.data.GroupDescription.Basic member) throws com.google.gwtorm.server.OrmException { return <START_MOD>groups.isMember<END_MOD>(dbProvider.get()<START_MOD>,<END_MOD> parent.getId(), member.getGroupUUID()); }
@org.junit.Test public void systemGroupsCreated_rest() throws java.io.IOException { com.google.gerrit.acceptance.RestSession session = new com.google.gerrit.acceptance.RestSession(server, admin); com.google.gerrit.acceptance.RestResponse r = session.get("/groups/"); com.google.gson.Gson gson = new com.google.gson.Gson(); java.util.Map<java.lang.String, com.google.gerrit.acceptance.rest.group.GroupInfo> result = gson.fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.acceptance.rest.group.GroupInfo>>() {}.getType()); java.util.Set<java.lang.String> names = result.keySet(); assertTrue(names.contains("Administrators")); assertTrue(names.contains( Users assertTrue(names.contains( <START_MOD>Owners assertTrue(names.contains( <END_MOD>Users assertTrue(names.contains( Owners assertTrue(names.contains( Users }
<START_MOD>@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "user.writeGroupsToNoteDb", value = "true") public void createGroupWithWriteToNoteDb() throws java.lang.Exception { testCreateGroup(true); }<END_MOD>
<START_MOD>private com.google.gerrit.extensions.api.changes.NotifyHandling defaultNotify(com.google.gerrit.server.project.ChangeControl control) { return control.getNotes().hasReviewStarted() ? com.google.gerrit.extensions.api.changes.NotifyHandling.ALL : com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER; }<END_MOD>
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(createEmptyCommit = false) public void submitToEmptyRepo() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); assertThat(getRemoteHead().getId()).isEqualTo(change.<START_MOD>getCommit<END_MOD>()); }
private java.util.List<com.google.gerrit.server.<START_MOD>notedb<END_MOD>.<START_MOD>ChangeNotes<END_MOD>> changeFromNotesFactory(java.lang.String id) throws com.google.gerrit.sshd.BaseCommand.UnloggedFailure, com.google.gwtorm.server.OrmException { return changeNotesFactory.create(db, parseId(id)).stream().collect(java.util.stream.Collectors.toList()); }
<START_MOD>@com.google.gwtorm.client.Relation com.google.gerrit.reviewdb.AccountGroupIncludedGroupAccess accountGroupIncludedGroups();<END_MOD>
<START_MOD>@java.lang.Override public Iterable<java.lang.String> get(com.google.gerrit.server.account.AccountState input, com.google.gerrit.server.index.account.FillArgs args) { return com.google.gerrit.server.index.SchemaUtil.getPersonParts(input.getAccount().getFullName(), com.google.common.collect.Iterables.transform(input.getExternalIds(), new Function<com.google.gerrit.reviewdb.client.AccountExternalId, java.lang.String>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.AccountExternalId in) { return in.getEmailAddress(); } })); }<END_MOD>
<START_MOD>private int inheritedMax(com.google.gerrit.server.git.ProjectConfig config, com.google.gerrit.server.schema.Schema_48.OldRefRight old) { int max = 0; java.lang.String ref = old.ref_pattern; java.lang.String category = old.category; com.google.gerrit.reviewdb.AccountGroup.UUID group = old.group.getUUID(); com.google.gerrit.reviewdb.Project.NameKey project = config.getProject().getParent(); if (project == null) { project = systemConfig.wildProjectName; } do { java.util.List<com.google.gerrit.server.schema.Schema_48.OldRefRight> rights = rightsByProject.get(project); if (rights != null) { for (com.google.gerrit.server.schema.Schema_48.OldRefRight r : rights) { if (((r.ref_pattern.equals(ref)) && (r.group.getUUID().equals(group))) && (r.category.equals(category))) { max = java.lang.Math.max(max, r.max_value); break; } } } project = parentsByProject.get(project); } while (!(project.equals(systemConfig.wildProjectName)) ); return max; }<END_MOD>
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.<START_MOD>AccountGroup.UUID<END_MOD>> <START_MOD>uuids, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId<END_MOD>, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.<START_MOD>AccountGroup.UUID uuid<END_MOD> : <START_MOD>uuids) { java.lang.String groupName<END_MOD> = <START_MOD>groupBackend.get(uuid).getName(); java.lang.String targetGroupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format( {0}/{1}, group {2}/{3} uuid,<END_MOD> groupName<START_MOD>, groupId,<END_MOD> targetGroupName<START_MOD>)); } logOrmException(header, me,<END_MOD> descriptions, e); }
public void testChangeRefReplicated() throws com.google.gwtorm.server.OrmException, java.net.URISyntaxException { com.google.gerrit.reviewdb.client.Change expectedChange = new com.google.gerrit.reviewdb.client.Change(null, null, null, null, null); reset(changeAccessMock); expect(changeAccessMock.get(anyObject(Change.Id.class))).andReturn(expectedChange); replay(changeAccessMock); reset(changeHooksMock); com.googlesource.gerrit.plugins.replication.RefReplicatedEvent expectedEvent = new com.googlesource.gerrit.plugins.replication.RefReplicatedEvent("someProject", <START_MOD>"refs/changes/01/1/1", "someHost", com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult.FAILED); changeHooksMock.postEvent(eq(expectedChange), com.googlesource.gerrit.plugins.replication.RefReplicatedEventEquals.eqEvent(expectedEvent), anyObject(com.google.gerrit.reviewdb.server.ReviewDb.class)); expectLastCall().once(); replay(changeHooksMock); gitUpdateProcessing.onRefReplicatedToOneNode("someProject", <END_MOD>"refs/changes/1/1/1", <START_MOD>new org.eclipse.jgit.transport.URIish("git://someHost/someProject.git"), <END_MOD>RefPushResult.FAILED); verify(changeHooksMock); }
<START_MOD>java.lang.String getStyleName() { return style.name().toLowerCase(java.util.Locale.US); }<END_MOD>
@java.lang.Override protected void onLoad() { super.onLoad(); <START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gerrit.client.account.AccountApi.getAgreements<END_MOD>(<START_MOD>"self", <END_MOD>new com.google.gerrit.client.rpc.<START_MOD>GerritCallback<com.google.gwt.core.client.JsArray<END_MOD><com.google.gerrit.<START_MOD>client<END_MOD>.<START_MOD>account<END_MOD>.AgreementInfo><START_MOD>><END_MOD>() { @java.lang.Override public void <START_MOD>onSuccess<END_MOD>(<START_MOD>com.google.gwt.core.client.JsArray<<END_MOD>com.google.gerrit.<START_MOD>client<END_MOD>.<START_MOD>account<END_MOD>.AgreementInfo<START_MOD>><END_MOD> result) { agreements.display(<START_MOD>com.google.gerrit.client.rpc.Natives.asList(<END_MOD>result<START_MOD>)<END_MOD>); } }); <START_MOD>display(); <END_MOD>}
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.index.ChangeIndex.class).to(com.google.gerrit.lucene.LuceneChangeIndex.class); listener().to(com.google.gerrit.lucene.LuceneChangeIndex.class); <START_MOD>if (checkVersion) { listener().to(com.google.gerrit.lucene.IndexVersionCheck.class); <END_MOD>}<START_MOD> }<END_MOD>
private static <T> com.google.common.collect.ImmutableSet<T> logIfNotUnique(com.google.gerrit.server.group.db.GroupBundle.Source source, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.Iterable<T> iterable, java.util.Comparator<T> comparator, java.lang.Class<T> clazz) { java.util.List<T> list = com.google.common.collect.Streams.stream(iterable).sorted(comparator).collect(java.util.stream.Collectors.toList()); com.google.common.collect.ImmutableSet<T> set = com.google.common.collect.ImmutableSet.copyOf(list); if ((set.size()) != (list.size())) { com.google.gerrit.server.group.db.GroupBundle.log.warn( {} in {} has duplicate {} entities: {} uuid, source, clazz.getSimpleName(), iterable); } return set; }
<START_MOD>private void addSuggestion(java.util.Map map, com.google.gerrit.reviewdb.Account account, com.google.gerrit.common.data.AccountInfo info, java.lang.Boolean active) { if (active != null) { if ((active.booleanValue()) != (account.isActive())) { return; } } map.put(account.getId(), info); }<END_MOD>
public static com.google.gerrit.client.rpc.RestApi edit(int id<START_MOD>, @com.google.gerrit.common.Nullable java.lang.String project<END_MOD>) { return com.google.gerrit.client.changes.ChangeApi.change(id<START_MOD>, project<END_MOD>).view("edit"); }
private void doSave() { project.setDescription(descTxt.getText().trim()); project.setUseContributorAgreements(useContributorAgreements.getValue()); project.setUseSignedOffBy(useSignedOffBy<START_MOD>.getValue()); project.setUseContentMerge(useContentMerge<END_MOD>.getValue()); project.setRequireChangeID(requireChangeID.getValue()); if ((submitType.getSelectedIndex()) >= 0) { project.setSubmitType(Project.SubmitType.valueOf(submitType.getValue(submitType.getSelectedIndex()))); } enableForm(false, false, false); saveProject.setEnabled(false); Util.PROJECT_SVC.changeProjectSettings(project, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.data.ProjectDetail>() { public void onSuccess(final com.google.gerrit.common.data.ProjectDetail result) { enableForm(result.canModifyAgreements, result.canModifyDescription, result.canModifyMergeType); display(result); } }); }
@java.lang.Override public org.eclipse.jgit.lib.Repository createRepository(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.git.RepositoryCaseMismatchException, org.eclipse.jgit.errors.RepositoryNotFoundException { org.eclipse.jgit.lib.Repository repo = createRepository(<START_MOD>getBasePath(name)<END_MOD>, name); if ((noteDbPath) != null) { createRepository(noteDbPath, name); } return repo; }
public org.eclipse.jgit.lib.PersonIdent newCommitterIdent(final java.util.Date when, final java.util.TimeZone tz) { final com.google.gerrit.reviewdb.Account ua = getAccount(); java.lang.String name = ua.getFullName(); java.lang.String email = ua.getPreferredEmail(); if ((email == null) || (email.isEmpty())) { java.lang.String user = getUserName(); if ((user == null) || (user.isEmpty())) { user = "account-" + (ua.getId().toString()); } java.lang.String host; if ((canonicalUrl.get()) != null) { try { host = new java.net.URL(canonicalUrl.get()).getHost(); } catch (java.net.MalformedURLException e) { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } } else { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = (user + "@") + host; } if ((name == null) || (name.isEmpty())) { final int at = email.indexOf('@'); if ( < at) { name = email.substring(0, at); } else { name =   Coward } } <START_MOD>if ((when == null) && (tz == null)) { <END_MOD>return new org.eclipse.jgit.lib.PersonIdent(name, email<START_MOD>); } else { return new org.eclipse.jgit.lib.PersonIdent(name, email<END_MOD>, when, tz); }<START_MOD> }<END_MOD>
void showUpdates(com.google.gerrit.client.info.ChangeInfo newInfo) { if ((!(isAttached())) || (newInfo.updated().equals(lastDisplayedUpdate))) { return; } com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> om = changeInfo.messages(); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> nm = newInfo.messages(); if (om == null) { om = com.google.gwt.core.client.JsArray.createArray().cast(); } if (nm == null) { nm = com.google.gwt.core.client.JsArray.createArray().cast(); } if ((om.length()) == (nm.length())) { return; } if ((updateAvailable) == null) { updateAvailable = new com.google.gerrit.client.change.UpdateAvailableBar() { @java.lang.Override void onShow() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId<START_MOD>, project<END_MOD>)); } @java.lang.Override void onIgnore(java.sql.Timestamp newTime) { lastDisplayedUpdate = newTime; } }; } updateAvailable.set(com.google.gerrit.client.rpc.Natives.asList(nm).subList(om.length(), nm.length()), newInfo.updated()); if (!(updateAvailable.isAttached())) { add(updateAvailable); } }
@java.lang.Override public void onLoad() { if ((info) == null) { initUI(); } super.onLoad(); display(com.google.gerrit.client.Gerrit.getUserAccount()); tabs.selectTab(tabTokens.indexOf(initialTabToken)); Util.ACCOUNT_SVC.myAccount(new com.google.gerrit.client.rpc.<START_MOD>ScreenLoadCallback<END_MOD><com.google.gerrit.client.reviewdb.Account>(<START_MOD>this<END_MOD>) { <START_MOD>@java.lang.Override protected<END_MOD> void <START_MOD>prepare<END_MOD>(final com.google.gerrit.client.reviewdb.Account result) { display(result); } }); }
<START_MOD>public static boolean isValidHttpUri(java.lang.String val) { return ((val.startsWith("http:")) || (val.startsWith("https:"))) && (com.google.gitiles.doc.html.HtmlBuilder.URI.getValueFilter().matcher(val).find()); }<END_MOD>
<START_MOD>com.google.gerrit.server.mail.RebasedPatchSetSender create(com.google.gerrit.reviewdb.Change change);<END_MOD>
private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(com.google.gerrit.server.schema.SchemaVersionCheck.module()); modules.add(new com.google.gerrit.pgm.util.LogFileCompressor.Module()); modules.add(new com.google.gerrit.server.git.WorkQueue.Module()); modules.add(new com.google.gerrit.common.ChangeHookRunner.Module()); modules.add(new com.google.gerrit.server.git.ReceiveCommitsExecutorModule()); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); modules.add(new com.google.gerrit.ehcache.EhcachePoolImpl.Module()); modules.add(new com.google.gerrit.server.mail.SmtpEmailSender.Module()); modules.add(new com.google.gerrit.server.mail.SignedTokenEmailTokenVerifier.Module()); modules.add(new com.google.gerrit.server.git.PushReplication.Module<START_MOD>()); modules.add(new com.google.gerrit.server.plugins.PluginLoaderModule<END_MOD>()); if (httpd) { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); } else { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.server.config.CanonicalWebUrlProvider.class; } }); } if (!(slave)) { modules.add(new com.google.gerrit.server.config.MasterNodeStartup()); } return cfgInjector.createChildInjector(modules); }
<START_MOD>private boolean canPerform(java.lang.String permissionName, boolean isChangeOwner, boolean withForce) { for (com.google.gerrit.server.permissions.PermissionCollection.BlockAccessSection s : relevant.getBlocks(permissionName)) { boolean blocked = false; for (com.google.gerrit.common.data.PermissionRule pr : s.blocks) { if (projectControl.match(pr, isChangeOwner)) { blocked = true; break; } } if (blocked) { for (com.google.gerrit.common.data.PermissionRule pr : s.overrides) { if (projectControl.match(pr, isChangeOwner)) { return (pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW); } } } } for (com.google.gerrit.common.data.PermissionRule pr : relevant.getRules(permissionName)) { if (projectControl.match(pr, isChangeOwner)) { if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.DENY)) { return false; } if (withForce) { if (((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) && (pr.getForce())) { return true; } } else if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) { return true; } } } return false; }<END_MOD>
@com.google.gwt.uibinder.client.UiHandler("deleteChange") void onDeleteChange(@java.lang.SuppressWarnings("unused") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteChange())) { com.google.gerrit.client.change.ChangeActions.delete(changeId, <START_MOD>project, <END_MOD>deleteChange); } }
public java.util.Optional<com.google.gerrit.server.group.InternalGroup> getLoadedGroup() { checkLoaded(); <START_MOD>loadedGroup.ifPresent(( t) -> checkConsistencyWithGroupNameNotes(t)); <END_MOD>return loadedGroup; }
public final com.google.gerrit.gpg.CheckResult check(org.eclipse.jgit.transport.PushCertificate cert) { if ((cert.getNonceStatus()) != (org.eclipse.jgit.transport.PushCertificate.NonceStatus.OK)) { return new com.google.gerrit.gpg.CheckResult( nonce } java.util.List<java.lang.String> problems = new java.util.ArrayList<>(); try { org.bouncycastle.openpgp.PGPSignature sig = readSignature(cert); if (sig != null) { org.eclipse.jgit.lib.Repository repo = getRepository(); try (com.google.gerrit.gpg.PublicKeyStore store = new com.google.gerrit.gpg.PublicKeyStore(repo)) { checkSignature(sig, cert, store, problems); checkCustom(repo, problems); } finally { if (shouldClose(repo)) { repo.close(); } } } else { problems.add( signature format } } catch (org.bouncycastle.openpgp.PGPException | java.io.IOException e) { java.lang.String msg =   error checking push certificate com.google.gerrit.gpg.PushCertificateChecker.log.error(msg, e); problems.add(msg); } return new com.google.gerrit.gpg.CheckResult(problems); }
private static <T extends com.google.gwt.core.client.JavaScriptObject> T parseJson(com.google.gwt.http.client.Response res) throws com.google.gwt.json.client.JSONException { java.lang.String json = com.google.gerrit.client.rpc.RestApi.<START_MOD>trimJsonMagic(res<END_MOD>.<START_MOD>getText<END_MOD>()); if (json.isEmpty()) { throw new com.google.gwt.json.client.JSONException( was empty } return com.google.gerrit.client.rpc.RestApi.cast(com.google.gwt.json.client.JSONParser.parseStrict(json)); }
void createOrEditFileComment() { if (!(com.google.gerrit.client.Gerrit.isSignedIn())) { com.google.gerrit.client.Gerrit.doSignIn(<START_MOD>manager.getSideBySide2()<END_MOD>.getToken()); return; } if (boxes.isEmpty()) { <START_MOD>addFileComment(manager.newFileDraft(side)); } else { com.google.gerrit.client.diff.CommentBox box<END_MOD> = <START_MOD>boxes.get(((boxes.size()) - 1)); if (box instanceof com.google.gerrit.client.diff.DraftBox) { ((com.google.gerrit.client.diff.DraftBox) (box)).setEdit(true); } else {<END_MOD> addFileComment(((com.google.gerrit.client.diff.PublishedBox) (box)).addReplyBox()); } } }
<START_MOD>public static com.google.inject.Injector createChildInjector(com.google.inject.Injector parentInjector) { com.google.gerrit.server.LibModuleLoader moduleLoader = parentInjector.getInstance(com.google.gerrit.server.LibModuleLoader.class); return parentInjector.createChildInjector(moduleLoader.modules()); }<END_MOD>
@org.junit.Test public void retrieveFilesInEdit() throws java.lang.Exception { assertEquals(RefUpdate.Result.NEW, modifier.createEdit(change, ps)); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); assertEquals(RefUpdate.Result.FORCED, modifier.modifyFile(edit.get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.<START_MOD>RestSession.newRawInput(com.google.gerrit.acceptance.<END_MOD>edit.ChangeEditIT.CONTENT_NEW<START_MOD>)<END_MOD>)); EditInfo info = toEditInfo(true); assertEquals(2, info.files.size()); java.util.List<java.lang.String> l = com.google.common.collect.Lists.newArrayList(info.files.keySet()); assertEquals("/COMMIT_MSG", l.get(0)); assertEquals("foo", l.get(1)); }
<START_MOD>private static java.lang.String getControllerClassName(org.kohsuke.github.GHEvent event) { java.lang.StringBuilder controllerName = new java.lang.StringBuilder(com.googlesource.gerrit.plugins.github.notification.WebhookServlet.PACKAGE_NAME); controllerName.append("."); for (java.lang.String component : event.name().split("_")) { controllerName.append(component.charAt(0)); controllerName.append(component.substring(1).toLowerCase()); } controllerName.append("Handler"); return controllerName.toString(); }<END_MOD>
<START_MOD>private static long computeInitialDelay(long interval, java.lang.String start, java.time.ZonedDateTime now) { checkNotNull(start); java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("[E ]HH:mm").withLocale(java.util.Locale.US); java.time.LocalTime firstStartTime = java.time.LocalTime.parse(start, formatter); java.time.ZonedDateTime startTime = now.with(firstStartTime); try { java.time.DayOfWeek dayOfWeek = formatter.parse(start, java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); long delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } return delay; }<END_MOD>
private void display(com.google.gerrit.client.info.AccountPreferencesInfo p) { showSiteHeader.setValue(p.showSiteHeader()); useFlashClipboard.setValue(p.useFlashClipboard()); copySelfOnEmails.setValue(p.copySelfOnEmail()); setListBox(maximumPageSize, com.google.gerrit.client.account.DEFAULT_PAGESIZE, p.changesPerPage()); setListBox(dateFormat, <START_MOD>AccountGeneralPreferencesInfo<END_MOD>.DateFormat.STD, p.dateFormat()); setListBox(timeFormat, <START_MOD>AccountGeneralPreferencesInfo<END_MOD>.TimeFormat.HHMM_12, p.timeFormat()); relativeDateInChangeTable.setValue(p.relativeDateInChangeTable()); sizeBarInChangeTable.setValue(p.sizeBarInChangeTable()); legacycidInChangeTable.setValue(p.legacycidInChangeTable()); muteCommonPathPrefixes.setValue(p.muteCommonPathPrefixes()); setListBox(reviewCategoryStrategy, <START_MOD>AccountGeneralPreferencesInfo<END_MOD>.ReviewCategoryStrategy.NONE, p.reviewCategoryStrategy()); setListBox(diffView, <START_MOD>AccountGeneralPreferencesInfo<END_MOD>.DiffView.SIDE_BY_SIDE, p.diffView()); display(p.my()); }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException, javax.servlet.ServletException { rsp.setContentType("text/plain"); rsp.setCharacterEncoding("UTF-8"); java.lang.String path = req.getPathInfo(); java.lang.String accountId = path.substring(((path.lastIndexOf('/')) + 1)); com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(accountId); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); index(id); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.error( to update account index e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }
private java.util.Map<java.lang.String, com.google.gerrit.reviewdb.client.PatchSetApproval> scanLabels(com.google.gerrit.server.change.RevisionResource rsrc, java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> del) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = rsrc.getControl().getLabelTypes(); java.util.Map<java.lang.String, com.google.gerrit.reviewdb.client.PatchSetApproval> current = com.google.common.collect.Maps.newHashMap(); for (com.google.gerrit.reviewdb.client.PatchSetApproval a : db.patchSetApprovals().byPatchSetUser(rsrc.getPatchSet().getId(), rsrc.getAccountId())) { if (<START_MOD>a.isSubmit(<END_MOD>)) { continue; } com.google.gerrit.common.data.LabelType lt = labelTypes.byId(a.<START_MOD>getLabelId<END_MOD>()); if (lt != null) { current.put(lt.getName(), a); } else { del.add(a); } } return current; }
@java.lang.Override protected void configureServlets() { com.googlesource.gerrit.plugins.lfs.LfsBackend backend = config.getEnum(<START_MOD>"data", null, <END_MOD>"backend", LfsBackend.FS); switch (backend) { case FS : serveRegex(com.googlesource.gerrit.plugins.lfs.URL_REGEX).with(com.googlesource.gerrit.plugins.lfs.fs.LfsFsApiServlet.class); bind(com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.class); serve((("/" + (CONTENT_PATH)) + "/*")).with(com.googlesource.gerrit.plugins.lfs.fs.LfsFsContentServlet.class); break; case S3 : serveRegex(com.googlesource.gerrit.plugins.lfs.URL_REGEX).with(com.googlesource.gerrit.plugins.lfs.s3.LfsS3ApiServlet.class); bind(com.googlesource.gerrit.plugins.lfs.s3.S3LargeFileRepository.class); break; default : throw new java.lang.RuntimeException(( backend:   + backend)); } }
@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getKnownGroups() { <START_MOD>search<END_MOD>(java.util.Collections.<com.google.gerrit.reviewdb.client.AccountGroup.UUID>emptySet()); <START_MOD>java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> r =<END_MOD> com.google.common.collect.Sets.<START_MOD>newHashSetWithExpectedSize<END_MOD>(<START_MOD>memberOf.size()); for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.AccountGroup.UUID, java.lang.Boolean> e : memberOf.entrySet()) { if (e.getValue()) { r.add(e.getKey()<END_MOD>); }<START_MOD> } return r; }<END_MOD>
<START_MOD>@org.junit.Test public void testAlternateRepositoryLocation() throws java.io.IOException { java.io.File alternateBasePath = com.google.gerrit.testutil.TempFileUtil.createTempDirectory(); com.google.gerrit.reviewdb.client.Project.NameKey someProjectKey = new com.google.gerrit.reviewdb.client.Project.NameKey("someProject"); reset(repositoryConfigMock); expect(repositoryConfigMock.getBasePath(someProjectKey)).andReturn(alternateBasePath.getAbsolutePath()).anyTimes(); expect(repositoryConfigMock.getAllBasePaths()).andReturn(new java.lang.String[]{ alternateBasePath.getAbsolutePath() }).anyTimes(); replay(repositoryConfigMock); org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(someProjectKey); assertThat(repo.getDirectory()).isNotNull(); assertThat(repo.getDirectory().exists()).isTrue(); assertThat(repo.getDirectory().getParent()).isEqualTo(alternateBasePath.getAbsolutePath()); repo = repoManager.openRepository(someProjectKey); assertThat(repo.getDirectory()).isNotNull(); assertThat(repo.getDirectory().exists()).isTrue(); assertThat(repo.getDirectory().getParent()).isEqualTo(alternateBasePath.getAbsolutePath()); assertThat(repoManager.getBasePath(someProjectKey).getAbsolutePath()).isEqualTo(alternateBasePath.getAbsolutePath()); java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> repoList = repoManager.list(); assertThat(repoList.size()).isEqualTo(1); assertThat(repoList.toArray(new com.google.gerrit.reviewdb.client.Project.NameKey[repoList.size()])).isEqualTo(new com.google.gerrit.reviewdb.client.Project.NameKey[]{ someProjectKey }); }<END_MOD>
@org.junit.Test public void testOwnerGroupsForStartWithFilter() { java.<START_MOD>util.List<java.<END_MOD>lang.String<START_MOD>><END_MOD> ownerGroups1 = <START_MOD>java.util.Arrays.asList("group1"); java.util.List<<END_MOD>java.lang.String<START_MOD>> ownerGroups2 = java.util.Arrays.asList("group2"); java.util.List<<END_MOD>java.lang.String<START_MOD>> ownerGroups3<END_MOD> = <START_MOD>java.util.Arrays.asList(<END_MOD>"group3"<START_MOD>)<END_MOD>; configureOwnerGroups("*", ownerGroups1); configureOwnerGroups("somePath/*", ownerGroups2); configureOwnerGroups("somePath/somePath/*", <START_MOD>ownerGroups3); assertThat(repoCfg.getOwnerGroups(new <END_MOD>com.google.<START_MOD>gerrit.reviewdb.client.Project.NameKey("someProject"))).containsExactlyElementsIn(ownerGroups1); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey("somePath/someProject"))).containsExactlyElementsIn(ownerGroups2); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey("somePath/somePath/someProject"))).containsExactlyElementsIn<END_MOD>(ownerGroups3); }
private java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource> newLoader(final java.nio.file.Path p) { return new java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource>() { @java.lang.Override public com.google.gerrit.httpd.raw.ResourceServlet.Resource call() throws java.io.IOException { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource(getLastModifiedTime(p), com.google.gerrit.httpd.raw.ResourceServlet.contentType(p.toString()), java.nio.file.Files.readAllBytes(p)); } }; }
public com.google.gwtjsonrpc.client.VoidResult run(final com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.Account.Id me = getAccountId(); final java.util.Set<com.google.gerrit.reviewdb.Change.Id> existing = currentUser.get().getStarredChanges(); java.util.List<com.google.gerrit.reviewdb.StarredChange> add = new java.util.ArrayList<com.google.gerrit.reviewdb.StarredChange>(); java.util.List<com.google.gerrit.reviewdb.StarredChange.Key> remove = new java.util.ArrayList<com.google.gerrit.reviewdb.StarredChange.Key>(); if ((req.getAddSet()) != null) { for (final com.google.gerrit.reviewdb.Change.Id id : req.getAddSet()) { if (!(existing.contains(id))) { <START_MOD>com.google.gerrit.reviewdb.StarredChange.Key key = <END_MOD>new com.google.gerrit.reviewdb.StarredChange.Key(me, id)<START_MOD>; add.add(new com.google.gerrit.reviewdb.StarredChange(key)); starredChangesCache.evict(key<END_MOD>); } } } if ((req.getRemoveSet()) != null) { for (final com.google.gerrit.reviewdb.Change.Id id : req.getRemoveSet()) { <START_MOD>com.google.gerrit.reviewdb.StarredChange.Key key = <END_MOD>new com.google.gerrit.reviewdb.StarredChange.Key(me, id)<START_MOD>; remove.add(key); starredChangesCache.evict(key<END_MOD>); } } db.starredChanges().insert(add); db.starredChanges().deleteKeys(remove); return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }
@java.lang.Override protected void configureServlets() { install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(AddBranch.Factory.class); factory(AddRefRight.Factory.class); factory(ChangeProjectSettings.Factory.class); factory(DeleteBranches.Factory.class); factory(DeleteRefRights.Factory.class); factory(ListBranches.Factory.class); factory(VisibleProjects.Factory.class); factory(ProjectDetailFactory.Factory.class); <START_MOD>factory(UpdateParent.Factory.class); <END_MOD>} }); rpc(com.google.gerrit.httpd.rpc.project.ProjectAdminServiceImpl.class); }
<START_MOD>private com.google.gerrit.reviewdb.client.PatchSet getOrCreateAlreadyMergedPatchSet(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = alreadyMerged.getPatchsetId(); ctx.getChange().setCurrentPatchSet(psId, alreadyMerged.getShortMessage(), ctx.getChange().getOriginalSubject()); com.google.gerrit.reviewdb.client.PatchSet existing = args.psUtil.get(ctx.getDb(), ctx.getNotes(), psId); if (existing != null) { return existing; } return args.psUtil.insert(ctx.getDb(), ctx.getRevWalk(), ctx.getUpdate(psId), psId, alreadyMerged, false, null, null); }<END_MOD>
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (<START_MOD>(<END_MOD>!(rsrc.isUserOwner())) <START_MOD>&& (!(permissionBackend.user(self).test(GlobalPermission.ADMINISTRATE_SERVER)))) <END_MOD>{ throw new com.google.gerrit.extensions.restapi.AuthException( allowed to set work in progress } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(( is   + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException( is already work in progress } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
public com.googlesource.gerrit.plugins.its.base.validation.ItsAssociationPolicy getItsAssociationPolicy() { return <START_MOD>getConfigEnum<END_MOD>("commentlink", getCommentLinkName(), "association", ItsAssociationPolicy.OPTIONAL); }
@org.junit.Test public void revert() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).submit(); ChangeInfo revertChange = gApi.changes().id(r.getChangeId()).revert().get(); java.util.List<com.google.gerrit.extensions.common.ChangeMessageInfo> sourceMessages = new java.util.ArrayList(gApi.changes().id(r.getChangeId()).get().messages); assertThat(sourceMessages).hasSize(4); java.lang.String expectedMessage = java.lang.String.format( a revert of this change as %s revertChange.changeId); assertThat(sourceMessages.get(3).message).isEqualTo(expectedMessage); assertThat(revertChange.messages).hasSize(1); assertThat(revertChange.messages.iterator().next().message).isEqualTo( patch set 1. <START_MOD>assertThat(revertChange.revertOf).isEqualTo(r.getChange().getId().get()); <END_MOD>}
<START_MOD>private boolean toBoolean(java.lang.String v) { com.google.common.base.Preconditions.checkState((!(com.google.common.base.Strings.isNullOrEmpty(v)))); return v.equals("Y"); }<END_MOD>
<START_MOD>java.lang.Runnable<END_MOD> <START_MOD>navigate(com.google.gerrit.client.diff.SideBySide2.Direction dir) { switch (dir) { case PREV : return new java.lang.Runnable<END_MOD>() { <START_MOD>@java.lang.Override<END_MOD> <START_MOD>public void run() { (<END_MOD>hasPrev<START_MOD> ? prev : up).go()<END_MOD>; }<START_MOD> }; case NEXT : return new java.lang.Runnable() { @java.lang.Override public void run() { (hasNext ? next : up).go(); } }; default : return new java.lang.Runnable() { @java.lang.Override public void run() { } }; } }<END_MOD>
public abstract com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.Text aText();
private void renderLinks(<START_MOD>com.google.gerrit.client.editor.ChangeEditInfo info<END_MOD>) { for (com.google.gerrit.client.ui.InlineHyperlink link : getLinks()) { linkPanel.add(link); } <START_MOD>if (info != null) { java.util.List<com.google.gerrit.client.DiffWebLinkInfo> diffWebLinks = com.google.gerrit.client.rpc.Natives.asList(info.web_links()); if (diffWebLinks != null) { for (com.google.gerrit.client.DiffWebLinkInfo webLink : diffWebLinks) { linkPanel.add(webLink.toAnchor()); <END_MOD>}<START_MOD> } } }<END_MOD>
<START_MOD>@java.lang.Override public boolean apply(java.lang.String refPart) { return refPart.endsWith(("-" + (changeId.get()))); }<END_MOD>
private java.util.concurrent.Callable<java.lang.Void> reindexProject(final com.google.gerrit.server.index.ChangeIndexer indexer, final com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gerrit.server.git.MultiProgressMonitor.Task done, final com.google.gerrit.server.git.MultiProgressMonitor.Task failed, final java.io.PrintWriter verboseWriter) { return new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.google.common.collect.Multimap<org.eclipse.jgit.lib.ObjectId, com.google.gerrit.server.query.change.ChangeData> byId = com.google.common.collect.ArrayListMultimap.create(); org.eclipse.jgit.lib.Repository repo = null; com.google.gerrit.reviewdb.server.ReviewDb db = null; try { repo = repoManager.openRepository(project); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(com.google.gerrit.server.index.ALL); db = schemaFactory.open(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().byProject(project)) { org.eclipse.jgit.lib.Ref r = refs.get(c.currentPatchSetId().toRefName()); if (r != null) { byId.put(r.getObjectId(), changeDataFactory.create(db, c)); } } new com.google.gerrit.server.index.ChangeBatchIndexer.ProjectIndexer(indexer, <START_MOD>recursiveMerger, <END_MOD>byId, repo, done, failed, verboseWriter).call(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException rnfe) { com.google.gerrit.server.index.ChangeBatchIndexer.log.error(rnfe.getMessage()); } finally { if (db != null) { db.close(); } if (repo != null) { repo.close(); } } return null; } }; }
@org.junit.Test public void <START_MOD>rebuildEmptySiteStartingWithNoteDbEnabled<END_MOD>() throws java.lang.Exception { initSite(); <START_MOD>setNotesMigrationState(NotesMigrationState<END_MOD>.<START_MOD>NOTE_DB<END_MOD>); com.google.gerrit.acceptance.pgm.RebuildNoteDbIT.runGerrit("RebuildNoteDb", "-d", sitePath, "--show-stack-trace"); }
@org.junit.Before public void setUp() throws java.lang.Exception { group1 = group("users1"); group2 = group("users2"); group3 = group("users3"); user1 = user("user1",   Last1 group1); user2 = user("user2",   Last2 group2); user3 = user("user3",   Last3 group1, group2); user4 = user("jdoe",   Doe "JDOE"); <START_MOD>anonymousUsers = groups.parse( Users allow(allProjects, "read", anonymousUsers, "refs/*"); <END_MOD>}
private void fireEvent(com.google.gerrit.reviewdb.client.Branch.NameKey branchName, final com.google.gerrit.server.events.RefEvent event) { <START_MOD>com.google.gerrit.common.EventDispatcher d = <END_MOD>dispatcher<START_MOD>.get(); if (d != null) { d<END_MOD>.fireEvent(branchName, event); }<START_MOD> }<END_MOD>
@java.lang.Override public void visit(org.commonmark.node.Heading node) { outputNamedAnchor = false; java.lang.String tag = "h" + (node.getLevel()); html.open(tag); java.lang.String id = toc.idFromHeader(node); if (id != null) { html.open("a").attribute("class", "h").attribute("name", id<START_MOD>.toLowerCase()<END_MOD>).attribute("href", ("#" + <START_MOD>(<END_MOD>id<START_MOD>.toLowerCase())<END_MOD>)).open("span").close("span").close("a"); } visitChildren(node); html.close(tag); outputNamedAnchor = true; }
@java.lang.Override protected void applyDataRowStyle(final int row) { super.applyDataRowStyle(row); final com.google.gwt.user.client.ui.HTMLTable.CellFormatter fmt = table.getCellFormatter(); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_STAR, Gerrit.RESOURCES.css().iconCell()); for (int i = com.google.gerrit.client.changes.ChangeTable2.C_ID; i < (columns); i++) { fmt.addStyleName(row, i, Gerrit.RESOURCES.css().dataCell()); } <START_MOD>if (!(showLegacyId)) { fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_ID, Gerrit.RESOURCES.css().dataCellHidden()); } <END_MOD>fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_SUBJECT, Gerrit.RESOURCES.css().cSUBJECT()); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_STATUS, Gerrit.RESOURCES.css().cSTATUS()); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_OWNER, Gerrit.RESOURCES.css().cOWNER()); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_LAST_UPDATE, Gerrit.RESOURCES.css().cLastUpdate()); <START_MOD>fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_SIZE, Gerrit.RESOURCES.css().cSIZE()); for (int i = com.google.gerrit.client.changes.ChangeTable2.C_SIZE; i < (columns); i++<END_MOD>) { fmt.addStyleName(row, <START_MOD>i, Gerrit.RESOURCES.css().cAPPROVAL<END_MOD>()); } }
private com.google.gerrit.client.diff.DraftBox addDraftBox(com.google.gerrit.client.changes.CommentInfo info, boolean doSave<START_MOD>, com.google.gerrit.client.diff.PublishedBox replyTo<END_MOD>) { com.google.gerrit.client.diff.DraftBox box = new com.google.gerrit.client.diff.DraftBox(this, revision, info, commentLinkProcessor, true, doSave); addCommentBox(info, box<START_MOD>, replyTo<END_MOD>); if (!doSave) { box.setEdit(true); } <START_MOD>net.codemirror.lib.CodeMirror.LineHandle handle = getCmFromSide<END_MOD>(info.side()).<START_MOD>getLineHandle<END_MOD>(((info.line()) - 1)<START_MOD>); lineActiveBoxMap.put(handle<END_MOD>, box); return box; }
<START_MOD>public void testOnlySkipMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> ret; com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.MANDATORY).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile("SKIP")).atLeastOnce(); expect(commit.getFullMessage()).andReturn("TestMessage SKIP").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn("TestCommit").anyTimes(); expect(issueExtractor.getIssueIds("TestMessage SKIP")).andReturn(new java.lang.String[]{ }).atLeastOnce(); replayMocks(); ret = ivc.onCommitReceived(event); assertEmptyList(ret); }<END_MOD>
<START_MOD>@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(); }<END_MOD>
<START_MOD>public void putComment(com.google.gerrit.reviewdb.client.PatchLineComment comment) { commentsToAdd.add(comment); }<END_MOD>
<START_MOD>static com.google.gerrit.client.projects.ProjectApi.ConfigValueInput create() { return ((com.google.gerrit.client.projects.ProjectApi.ConfigValueInput) (createObject())); }<END_MOD>
java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Collection<com.google.gerrit.<START_MOD>server<END_MOD>.<START_MOD>account<END_MOD>.<START_MOD>WatchConfig<END_MOD>.NotifyType>> getProjectWatches() { checkLoaded(); return projectWatches; }
<START_MOD>@org.junit.Test public void watchProjectNotifyForDraftChange() throws java.lang.Exception { java.lang.String watchedProject = createProject("watchedProject").get(); setApiUser(user); watch(watchedProject, null); grant(Permission.VIEW_DRAFTS, new com.google.gerrit.reviewdb.client.Project.NameKey(watchedProject), "refs/*", false, com.google.gerrit.acceptance.server.project.REGISTERED_USERS); setApiUser(admin); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> watchedRepo = cloneProject(new com.google.gerrit.reviewdb.client.Project.NameKey(watchedProject), admin); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), watchedRepo, "TRIGGER", "a", "a1").to("refs/for/master%draft"); r.assertOkStatus(); java.util.List<com.google.gerrit.testutil.FakeEmailSender.Message> messages = sender.getMessages(); assertThat(messages).hasSize(1); com.google.gerrit.testutil.FakeEmailSender.Message m = messages.get(0); assertThat(m.rcpt()).containsExactly(user.emailAddress); assertThat(m.body()).contains("Change subject: TRIGGER\n"); assertThat(m.body()).contains("Gerrit-PatchSet: 1\n"); }<END_MOD>
@org.junit.Test public void testSubmodulesParseWithSubProjectFound() throws java.lang.Exception { java.util.Map<java.lang.String, com.google.gerrit.server.util.<START_MOD>SubmoduleSectionParserTest.<END_MOD>SubmoduleSection> sectionsToReturn = new java.util.TreeMap<>(); sectionsToReturn.put("a/b", new com.google.gerrit.server.util.<START_MOD>SubmoduleSectionParserTest.<END_MOD>SubmoduleSection("ssh://localhost/a/b", "a/b", ".")); java.util.Map<java.lang.String, java.lang.String> reposToBeFound = new java.util.HashMap<>(); reposToBeFound.put("a/b", "a/b"); reposToBeFound.put("b", "b"); com.google.gerrit.reviewdb.client.Branch.NameKey superBranchNameKey = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey("super-project"), "refs/heads/master"); com.google.gerrit.server.util.List<com.google.gerrit.reviewdb.client.SubmoduleSubscription> expectedSubscriptions = new com.google.gerrit.server.util.ArrayList(); expectedSubscriptions.add(new com.google.gerrit.reviewdb.client.SubmoduleSubscription(superBranchNameKey, new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey("a/b"), "refs/heads/master"), "a/b")); execute(superBranchNameKey, sectionsToReturn, reposToBeFound, expectedSubscriptions); }
@java.lang.Override protected void configure() { factory(ReviewerResource.Factory.class); factory(AccountInfo.Loader.Factory.class); factory(EmailReviewComments.Factory.class); factory(ChangeInserter.Factory.class); factory(PatchSetInserter.Factory.class); <START_MOD>factory(ReviewedFlagCopier.Factory.class); bind(ReviewedFlagCopier.Queue.class); <END_MOD>}
<START_MOD>@java.lang.Override public com.google.gerrit.server.permissions.PermissionBackend.ForRef ref(java.lang.String ref) { return controlForRef(ref).asForRef(); }<END_MOD>
<START_MOD>private void verifyInstallPluginList(com.google.gerrit.pgm.util.ConsoleUI ui, java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> plugins) { if ((nullOrEmpty(installPlugins)) || (nullOrEmpty(plugins))) { return; } java.util.ArrayList<java.lang.String> copy = com.google.common.collect.Lists.newArrayList(installPlugins); java.util.List<java.lang.String> pluginNames = com.google.common.collect.Lists.transform(plugins, new com.google.common.base.Function<com.google.gerrit.pgm.init.InitPlugins.PluginData, java.lang.String>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.pgm.init.InitPlugins.PluginData input) { return input.name; } }); copy.removeAll(pluginNames); if (!(copy.isEmpty())) { ui.message("Cannot find plugin(s): %s\n", com.google.common.base.Joiner.on(", ").join(copy)); listPlugins = true; } }<END_MOD>
<START_MOD>@java.lang.Override public void onSuccess(java.lang.Void result) { view.operation(new java.lang.Runnable() { @java.lang.Override public void run() { java.lang.String t = prefs.theme().name().toLowerCase(); view.getCmFromSide(DisplaySide.A).setOption("theme", t); view.getCmFromSide(DisplaySide.B).setOption("theme", t); } }); }<END_MOD>
<START_MOD>private<END_MOD> void addReviewerToReviewableChangeByOwnerCcingSelfInNoteDb(<START_MOD>com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Adder adder<END_MOD>) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create("added", "added@example.com", "added"); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.CC_ON_OWN_COMMENTS, null); assertThat(sender).sent("newchange", sc).to(reviewer).cc(sc.owner, sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).noOneElse(); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.<START_MOD>restapi.<END_MOD>change.FileResource>> views() { return views; }
<START_MOD>private<END_MOD> <START_MOD>net.codemirror.lib.CodeMirror.RenderLineHandler resizeLinePadding<END_MOD>(<START_MOD>final <END_MOD>com.google.gerrit.client.diff.DisplaySide <START_MOD>side<END_MOD>) { <START_MOD>return new net.codemirror.lib.CodeMirror.RenderLineHandler() { @java.lang.Override public void handle(<END_MOD>net.codemirror.lib.CodeMirror cm<START_MOD>,<END_MOD> net.codemirror.lib.CodeMirror.LineHandle <START_MOD>lh,<END_MOD> com.google.gwt.dom.client.Element <START_MOD>e<END_MOD>) { <START_MOD>commentManager<END_MOD>.<START_MOD>resizePadding<END_MOD>(<START_MOD>lh<END_MOD>); <START_MOD>coloringManager<END_MOD>.<START_MOD>resizePadding<END_MOD>(<START_MOD>cm<END_MOD>, <START_MOD>lh<END_MOD>, <START_MOD>side<END_MOD>); } }; }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.<com.google.gerrit.reviewdb.client.AccountGroup.UUID>of(), com.google.common.collect.ImmutableSet.<com.google.gerrit.reviewdb.client.AccountExternalId>of(), <START_MOD>new java.util.HashMap<<END_MOD>com.google.<START_MOD>gerrit<END_MOD>.<START_MOD>server<END_MOD>.<START_MOD>account<END_MOD>.<START_MOD>WatchConfig.ProjectWatchKey, java.util.Collection<END_MOD><com.google.gerrit.reviewdb.client.AccountProjectWatch<START_MOD>.NotifyType<END_MOD>><START_MOD>><END_MOD>()); }
@java.lang.Override void render(com.google.gerrit.client.diff.DiffInfo diff) { super.render(); <START_MOD>chunks = new java.util.ArrayList(); padding = new java.util.ArrayList(); paddingDivs = new java.util.ArrayList(); java.lang.String diffColor = (((diff.metaA()) == null) || ((diff.metaB()) == null)) ? SideBySideTable.style.intralineBg() : SideBySideTable.style.diff(); for (<END_MOD>com.google.gerrit.client.diff.<START_MOD>DiffInfo.Region current : com.google.gerrit.client.rpc.Natives.asList(diff.content())) { if ((current.ab()) != null) {<END_MOD> mapper<START_MOD>.appendCommon(current.ab().length()); } else if ((current.skip()) > 0) { mapper.appendCommon(current.skip()); } else if (current.common()) { mapper.appendCommon(current.b().length()); } else { render(current, diffColor); } } if (<END_MOD>paddingDivs<START_MOD>.isEmpty()) { paddingDivs =<END_MOD> null<START_MOD>; } }<END_MOD>
<START_MOD>@java.lang.Override <END_MOD>public void <START_MOD>onOpenProjectRow<END_MOD>(com.google.<START_MOD>gerrit<END_MOD>.client.<START_MOD>ui<END_MOD>.<START_MOD>ProjectListPopup.ProjectListPopupOnOpenRowEvent projectListPopupEvent<END_MOD>) { <START_MOD>doAddNew<END_MOD>(); }
@org.junit.Before public void setTimeForTesting() { systemTimeZone = java.lang.System.setProperty("user.timezone", "US/Eastern"); <START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gerrit<END_MOD>.<START_MOD>testutil<END_MOD>.<START_MOD>TestTimeUtil<END_MOD>.<START_MOD>setClockStep<END_MOD>(1, java.util.concurrent.TimeUnit.SECONDS); }
public static java.nio.file.Path <START_MOD>getDeveloperEclipseOut<END_MOD>() throws java.io.FileNotFoundException { java.lang.Class<com.google.gerrit.launcher.GerritLauncher> self = com.google.gerrit.launcher.GerritLauncher.class; java.net.URL u = self.getResource(((self.getSimpleName()) + ".class")); if (u == null) { throw new java.io.FileNotFoundException(( find class   + (self.getName()))); } else if ("jar".equals(u.getProtocol())) { java.lang.String p = u.getPath(); try { u = new java.net.URL(p.substring(0, p.indexOf('!'))); } catch (java.net.MalformedURLException e) { java.io.FileNotFoundException fnfe = new java.io.FileNotFoundException(( a valid jar file:   + u)); fnfe.initCause(e); throw fnfe; } } if (!("file".equals(u.getProtocol()))) { throw new java.io.FileNotFoundException(( find extract path from   + u)); } java.nio.file.Path dir = java.nio.file.Paths.get(u.getPath()); while (!(com.google.gerrit.launcher.GerritLauncher.name(dir).equals(<START_MOD>"eclipse-out"<END_MOD>))) { java.nio.file.Path parent = dir.getParent(); if ((parent == null) || (parent.equals(dir))) { throw new java.io.FileNotFoundException(( find buck-out from   + u)); } dir = parent; } return dir; }
private void configureMainSection() { ui.header( section java.lang.String <START_MOD>sharedDirDefault = (ui.isBatch()) ? "shared" : null; java.lang.String shared<END_MOD> = promptAndSetString( directory com.ericsson.gerrit.plugins.highavailability.MAIN_SECTION, com.ericsson.gerrit.plugins.highavailability.SHARED_DIRECTORY_KEY, <START_MOD>sharedDirDefault<END_MOD>); if (!(com.google.common.base.Strings.isNullOrEmpty(<START_MOD>shared<END_MOD>))) {<START_MOD> sharedDir = java.nio.file.Paths.get(shared);<END_MOD> java.nio.file.Path <START_MOD>resolved<END_MOD> = site.site_path.resolve(sharedDir); com.google.gerrit.common.FileUtil.mkdirsOrDie(<START_MOD>resolved<END_MOD>, ( create   + <START_MOD>resolved<END_MOD>)); } }
<START_MOD>protected<END_MOD> java.lang.String getImageUrl() { return ("plugins/" + (pluginName)) + "/static/readme.png"; }
<START_MOD>@java.lang.Override public void run() throws java.lang.Exception { java.util.List<com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult> res = searcher.doQuery(q); for (com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult docResult : res) { stdout.println(java.lang.String.format("%s: %s", docResult.title, docResult.url)); } }<END_MOD>
public java.util.List<com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult> doQuery(java.lang.String q) throws com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocQueryException { if (((parser) == null) || ((searcher) == null)) { <START_MOD>return com.google.common.collect.Lists.newArrayListWithCapacity(0);<END_MOD> } try { org.apache.lucene.search.Query query = parser.parse(q); org.apache.lucene.search.TopDocs results = searcher.search(query, java.lang.Integer.MAX_VALUE); org.apache.lucene.search.ScoreDoc[] hits = results.scoreDocs; int totalHits = results.totalHits; java.util.List<com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult> out = com.google.common.collect.Lists.newArrayListWithCapacity(totalHits); for (int i = 0; i < totalHits; i++) { com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult result = new com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult(); org.apache.lucene.document.Document doc = searcher.doc(hits[i].doc); result.url = doc.get(Constants.URL_FIELD); result.title = doc.get(Constants.TITLE_FIELD); out.add(result); } return out; } catch (java.io.IOException | org.apache.lucene.queryparser.classic.ParseException e) { throw new com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocQueryException(e); } }
<START_MOD>public void onDelete(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.reviewdb.client.Project.NameKey project, com.googlesource.gerrit.plugins.deleteproject.DeleteProject.Input options) { org.apache.log4j.spi.LoggingEvent event = new org.apache.log4j.spi.LoggingEvent(org.apache.log4j.Logger.class.getName(), com.googlesource.gerrit.plugins.deleteproject.DeleteLog.log, com.google.gerrit.common.TimeUtil.nowMs(), org.apache.log4j.Level.INFO, "Project Deletion", java.lang.Thread.currentThread().getName(), null, null, null, null); event.setProperty(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.ACCOUNT_ID, user.getAccountId().toString()); event.setProperty(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.USER_NAME, user.getUserName()); event.setProperty(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.PROJECT_NAME, project.get()); if (options != null) { event.setProperty(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.OPTIONS, OutputFormat.JSON_COMPACT.newGson().toJson(options)); } com.googlesource.gerrit.plugins.deleteproject.DeleteLog.log.callAppenders(event); }<END_MOD>
private static java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { return java.util.Optional.of(com.google.common.collect.Iterables.getOnlyElement(accountGroups)); } else if (accountGroups.isEmpty()) { return java.util.Optional.empty(); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException(( <START_MOD>account<END_MOD> UUID   + groupUuid)); } }
public java.lang.String getPluginName(java.io.File srcFile) throws java.io.IOException { return com.google.common.base.Objects.firstNonNull(getGerritPluginName(srcFile), com.google.gerrit.server.plugins.PluginLoader.nameOf(srcFile)).toLowerCase(); }
@java.lang.Override public void rebase(com.google.gerrit.extensions.api.changes.RebaseInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { rebase.apply(change, in); } catch (<START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>Exception<END_MOD> <START_MOD>e)<END_MOD> <START_MOD>{<END_MOD> com.google.gerrit.server.<START_MOD>api<END_MOD>.<START_MOD>changes<END_MOD>.<START_MOD>ChangeApiImpl<END_MOD>.<START_MOD>throwRestApiException<END_MOD>( rebase change e); } }
<START_MOD>@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo> m) { files.set((base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, base._number()) : null), new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, rev._number()), style, reply, fileTableMode, ((edit) != null)); files.setValue(m, myLastReply, (comments == null ? empty : comments.get(0)), (drafts == null ? empty : drafts.get(0))); }<END_MOD>
private void initEditor(com.google.gerrit.client.rpc.HttpResponse<com.google.gerrit.client.rpc.NativeString> file) { net.codemirror.mode.ModeInfo mode = null; java.lang.String content = ""; if (file != null) { content = file.getResult().asString(); if (prefs.syntaxHighlighting()) { mode = net.codemirror.mode.ModeInfo.findMode(file.getContentType(), path); } } cm = net.codemirror.lib.CodeMirror.create(editor, net.codemirror.lib.Configuration.create().set("value", content).set("readOnly", false).set("cursorBlinkRate", 0).set("cursorHeight", 0.85).set("lineNumbers", true).set("tabSize", prefs.tabSize()).set("lineWrapping", false).set("scrollbarStyle", "overlay").set("styleSelectedText", true).set("showTrailingSpace", true).set("keyMap", "default").set("theme", prefs.theme().name().toLowerCase()).set("mode", (mode != null ? mode.mode() : null))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on("Cmd-S", save()).on("Ctrl-S", save())); <START_MOD>if ((com.google.gerrit.client.editor.EditScreen.scrollToLine) != 0) { cm.scrollToLine(com.google.gerrit.client.editor.EditScreen.scrollToLine); com.google.gerrit.client.editor.EditScreen.scrollToLine = 0; <END_MOD>}<START_MOD> }<END_MOD>
<START_MOD>java.util.concurrent.Future<java.lang.Void><END_MOD> insert(org.apache.lucene.document.Document doc) throws java.io.IOException { <START_MOD>return new com.google.gerrit.lucene.SubIndex.NrtFuture(<END_MOD>writer.addDocument(doc)<START_MOD>)<END_MOD>; }
private java.lang.String getGroupName(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { return groupCache.get(groupId).map(InternalGroup::getName).orElse(( <START_MOD>account<END_MOD>   + groupId)); }
@java.lang.Override public org.parboiled.Rule[] blockPluginRules() { return new org.parboiled.Rule[]{ toc()<START_MOD>, note()<END_MOD> }; }
private com.google.gwt.user.client.ui.Anchor getDownloadLink() { boolean isCommitMessage = Patch.COMMIT_MSG.equals(script.getNewName()); if ((isCommitMessage || (((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.A)) && ( >= (script.getA().size())))) || (((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.B)) && ( >= (script.getB().size())))) { return null; } com.google.gerrit.reviewdb.client.Patch.Key key = ((idSideA) == null) ? patchKey : new com.google.gerrit.reviewdb.client.Patch.Key(idSideA, patchKey.get()); java.lang.String sideURL = ((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.A)) ? "1" : "0"; final java.lang.String base = (com.google.gwt.core.client.GWT.getHostPageBaseURL()) + "cat/"; <START_MOD>com.google.gwt.user.client.ui.Image image = new com.google.gwt.user.client.ui.Image(Gerrit.RESOURCES.downloadIcon()); <END_MOD>final com.google.gwt.user.client.ui.Anchor anchor = new com.google.gwt.user.client.ui.Anchor(<START_MOD>); anchor.setHref((((base + (com.google.gwtorm.client.KeyUtil.encode(key.toString()))) + "^") + sideURL)); anchor.setTitle(<END_MOD>PatchUtil.C.download()); <START_MOD>com.google.gwt.user.client.DOM.insertBefore(anchor.getElement(), image.getElement(), com.google.gwt.user.client.DOM.getFirstChild(anchor.getElement()<END_MOD>)); return anchor; }
@org.junit.Test public void pushNewPatchSetForMasterWithApprovals() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo("refs/for/master"); r.assertOkStatus(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, "b.txt", "anotherContent", r.getChangeId()); r = push.to("refs/for/master/%l=Code-Review+2"); ChangeInfo ci = get(r.getChangeId()<START_MOD>, com.google.gerrit.acceptance.git.DETAILED_LABELS, com.google.gerrit.acceptance.git.MESSAGES<END_MOD>); LabelInfo cr = ci.labels.get("Code-Review"); assertThat(com.google.common.collect.Iterables.getLast(ci.messages).message).isEqualTo( patch set 2: Code-Review+2. assertThatUserIsOnlyReviewer(ci, admin); assertThat(cr.all).hasSize(1); assertThat(cr.all.get(0).name).isEqualTo("Administrator"); assertThat(cr.all.get(0).value).isEqualTo(2); }
<START_MOD>static void publish(final com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String revision) { com.google.gerrit.client.changes.ChangeApi.publish(id.get(), revision, new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { redisplay(); } public void onFailure(java.lang.Throwable err) { if (com.google.gerrit.client.changes.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.changes.SubmitFailureDialog(err.getMessage()).center(); redisplay(); } else { super.onFailure(err); } } private void redisplay() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(id)); } }); }<END_MOD>
@java.lang.Override public void onFailure(java.lang.Throwable caught) { cbox.setEnabled(true); info.<START_MOD>notify<END_MOD>(type, oldVal); cbox.setValue(oldVal); }
<START_MOD>protected com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context setAccountContext(com.google.gerrit.acceptance.TestAccount account) { return atrScope.set(newRequestContext(account)); }<END_MOD>
com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create(com.google.gerrit.extensions.client.SubmitType submitType, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.server.git.MergeOp.CommitStatus commits, com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw, com.google.gerrit.server.IdentifiedUser caller, com.google.gerrit.server.git.MergeTip mergeTip, org.eclipse.jgit.lib.ObjectInserter inserter, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevFlag canMergeFlag, com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<org.eclipse.jgit.revwalk.RevCommit> alreadyAccepted, java.lang.String submissionId<START_MOD>, com.google.gerrit.extensions.api.changes.SubmitInput submitInput<END_MOD>);
private static com.google.gitiles.Paginator newPaginator(org.eclipse.jgit.lib.Repository repo, com.google.gitiles.GitilesView view, com.google.gitiles.GitilesAccess access) throws java.io.IOException { if (view == null) { return null; } <START_MOD>try (<END_MOD>org.eclipse.jgit.revwalk.RevWalk walk = com.google.gitiles.LogServlet.newWalk(repo, view, access)<START_MOD>) {<END_MOD> com.google.common.base.Optional<org.eclipse.jgit.lib.ObjectId> start; try { start = com.google.gitiles.LogServlet.getStart(view.getParameters(), walk.getObjectReader()); } catch (java.io.IOException e) { <START_MOD>throw e; } if (start == null) { return null; } return new com.google.gitiles.Paginator(<END_MOD>walk<START_MOD>, com.google.gitiles.LogServlet.getLimit(view), start.orNull()); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException<END_MOD> e<START_MOD>) { return null; } }<END_MOD>
<START_MOD>public void setProjects(final java.util.Set<com.google.gerrit.server.project.ProjectControl> projects) { this.projects = projects; }<END_MOD>
@java.lang.Override protected void configure() { bind(com.ericsson.gerrit.plugins.highavailability.Configuration.class).toInstance(config); bind(org.apache.http.impl.client.CloseableHttpClient.class).toProvider(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpClientProvider.class).in(Scopes.SINGLETON); <START_MOD>bind(com.ericsson.gerrit.plugins.highavailability.peers.PeerInfo.class).toInstance(peerInfo); <END_MOD>}
private void parseDelete(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canDelete()) { } else { <START_MOD>if (GitRepositoryManager.REF_CONFIG.equals(ctl.getRefName())) { <END_MOD>com.google.gerrit.server.git.ReceiveCommits.reject(cmd,   <START_MOD>the project configuration is <END_MOD>not <START_MOD>allowed } else { rp.sendMessage(( need 'Push' rights with the   Push flag set to <END_MOD>delete references<START_MOD>. + (com.google.gerrit.server.git.ReceiveCommits.MESSAGE_FOOTER))); com.google.gerrit.server.git.ReceiveCommits.reject(cmd, (( user   + (ctl.getCurrentUser().getUserName())) +   can not delete references } } }<END_MOD>
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.accounts.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); } java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( <START_MOD>u<END_MOD>) -> <START_MOD>u.update()<END_MOD>.setStatus(com.google.common.base.Strings.nullToEmpty(newStatus))); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException( not found } return com.google.common.base.Strings.isNullOrEmpty(account.getStatus()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getStatus()); }
<START_MOD>public S element(int index) { com.google.gerrit.acceptance.ListSubject.checkArgument((index >= 0), "index(%s) must be >= 0", index); java.util.List<E> list = ((java.util.List<E>) (com.google.gerrit.acceptance.ListSubject.actual())); com.google.gerrit.acceptance.ListSubject.isNotNull(); if (index >= (list.size())) { com.google.gerrit.acceptance.ListSubject.fail(("has an element at index " + index)); } return elementAssertThatFunction.apply(list.get(index)); }<END_MOD>
<START_MOD>@java.lang.Override public<END_MOD> void build(<START_MOD>com.google.gerrit.httpd.raw.Label label) throws com.google.gerrit.httpd.raw.BuildFailureException, java.io.IOException { com.google.gerrit.httpd.raw.BuckUtils.log.info(( build   + label)); java.util.Properties properties = com.google.gerrit.httpd.raw.BuckUtils.loadBuckProperties(targetPath(label));<END_MOD> java.lang.String <START_MOD>buck = firstNonNull(<END_MOD>properties<START_MOD>.getProperty("buck"), "buck"); java.lang.ProcessBuilder proc = new java.lang.ProcessBuilder(<END_MOD>buck, "build", <START_MOD>label.fullName()<END_MOD>).directory(<START_MOD>sourceRoot<END_MOD>.toFile()).redirectErrorStream(true); if (properties.containsKey("PATH")) { proc.environment().put("PATH", properties.getProperty("PATH")); } long start = com.google.gerrit.common.TimeUtil.nowMs(); java.lang.Process rebuild = proc.start(); byte[] out; try (java.io.InputStream in = rebuild.getInputStream()) { out = com.google.common.io.ByteStreams.toByteArray(in); } finally { rebuild.getOutputStream().close(); } int status; try { status = rebuild.waitFor(); } catch (java.lang.InterruptedException e) { throw new java.io.InterruptedIOException(( waiting for   + buck)); } if (status != 0) { throw new com.google.gerrit.httpd.raw.BuildFailureException(out); } long time = (com.google.gerrit.common.TimeUtil.nowMs()) - start; com.google.gerrit.httpd.raw.BuckUtils.log.info(java.lang.String.format( %s in %.3fs <START_MOD>label.fullName()<END_MOD>, (time / 1000.0))); }
<START_MOD>@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); java.util.List<com.google.gerrit.common.data.ApprovalType> typeList = new java.util.ArrayList<com.google.gerrit.common.data.ApprovalType>(); typeList.add(com.google.gerrit.rules.common.CommonRulesTest.codeReviewCategory()); typeList.add(com.google.gerrit.rules.common.CommonRulesTest.verifiedCategory()); final com.google.gerrit.common.data.ApprovalTypes types = new com.google.gerrit.common.data.ApprovalTypes(typeList); load("common_rules_test.pl", new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.common.data.ApprovalTypes.class).toInstance(types); } }); }<END_MOD>
@java.lang.Override public java.util.List<java.lang.String> queryChangeEvents(java.lang.String query) throws com.ericsson.gerrit.plugins.eventslog.MalformedQueryException, com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException { if (!(online)) { throw new com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException(); } java.util.List<java.lang.String> events = new java.util.ArrayList<>(); <START_MOD>java.util.List<com.ericsson.gerrit.plugins.eventslog.SQLClient.SQLEntry> entries = new java.util.ArrayList<>(); <END_MOD>com.google.gerrit.reviewdb.client.Project.NameKey project = null; for (java.util.Map.Entry<java.lang.String, java.util.Collection<<START_MOD>com.ericsson.gerrit.plugins.eventslog.SQLClient.SQLEntry<END_MOD>>> entry : eventsDb.getEvents(query).asMap().entrySet()) { try { project = new com.google.gerrit.reviewdb.client.Project.NameKey(entry.getKey()); if (projectControlFactory.controlFor(project, userProvider.get()).isVisible()) { <START_MOD>entries<END_MOD>.addAll(entry.getValue()); } } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn((( contains a non-existing project,   + (project.get())) +   removing project from database e); removeProjectEvents(project.get()); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn((( get project visibility info for   + (project.get())) +   from cache e); } } <START_MOD>java.util.Collections.sort(entries, eventsDb.getIdComparator()); for (com.ericsson.gerrit.plugins.eventslog.SQLClient.SQLEntry entry : entries) { events.add(entry.getEvent()); } <END_MOD>return events; }
<START_MOD>public static com.google.gerrit.plugin.client.rpc.RestApi change(int id) { return new com.google.gerrit.plugin.client.rpc.RestApi("/changes/").id(id); }<END_MOD>
@java.lang.Override public void onDialogVisible(com.google.gwtexpui.user.client.DialogVisibleEvent event) {<START_MOD> if ((event.isVisible()) && (event.contains(this))) { return; }<END_MOD> swf.getStyle().setVisibility((event.isVisible() ? Style.Visibility.HIDDEN : Style.Visibility.VISIBLE)); }
<START_MOD>public static java.sql.Timestamp timeForReadOnlyCheck(long skewMs) { return new java.sql.Timestamp(((com.google.gerrit.common.TimeUtil.nowMs()) - skewMs)); }<END_MOD>
final <START_MOD>native<END_MOD> com.google.<START_MOD>gerrit<END_MOD>.client.<START_MOD>rpc.NativeMap<END_MOD><com.google.gerrit.client.projects.ConfigInfo.CommentLinkInfo> <START_MOD>commentlinks<END_MOD>();
@java.lang.Override public void run() { try { <START_MOD>try<END_MOD> <START_MOD>(<END_MOD>java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(in, "ISO-8859-1"))<START_MOD>)<END_MOD> { java.lang.String line; while ((line = br.readLine()) != null) { com.google.gerrit.httpd.gitweb.GitWebServlet.log.error((   + line)); } } } catch (java.io.IOException e) { com.google.gerrit.httpd.gitweb.GitWebServlet.log.debug( error copying stderr from CGI e); } }
<START_MOD>@java.lang.SuppressWarnings("deprecation") private final org.bouncycastle.openpgp.PGPEncryptedDataGenerator cpk() throws java.security.NoSuchProviderException, org.bouncycastle.openpgp.PGPException { final org.bouncycastle.openpgp.PGPEncryptedDataGenerator cpk = new org.bouncycastle.openpgp.PGPEncryptedDataGenerator(org.bouncycastle.openpgp.PGPEncryptedData.CAST5, true, prng, "BC"); cpk.addMethod(dest); return cpk; }<END_MOD>
<START_MOD>private java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> addProjectDashboards(final com.google.gerrit.server.project.ProjectState projectState, java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> all) { final java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> dashboards = projectDashboards(projectState); dashboards.putAll(all); return dashboards; }<END_MOD>
public java.util.List<com.google.gerrit.server.ReviewerStatusUpdate> reviewerUpdates() throws com.google.gwtorm.server.OrmException { if ((reviewerUpdates) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } reviewerUpdates = <START_MOD>a.<END_MOD>approvalsUtil.getReviewerUpdates(notes()); } return reviewerUpdates; }
@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = delegate.open(); if (migration.readChanges()) { if (migration.disableChangeReviewDb()) { db = new com.google.gerrit.server.schema.NoChangesReviewDbWrapper(db); } db = new com.google.gerrit.reviewdb.server.DisallowReadFromChangesReviewDbWrapper(db); } if (groupsMigration.readFromNoteDb()) { <START_MOD>if (groupsMigration.disableGroupReviewDb()) { db = new com.google.gerrit.server.schema.NoGroupsReviewDbWrapper(db); } <END_MOD>db = new com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper(db); } return db; }
<START_MOD>@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Mark as Unreviewed").setTitle("Mark the change as unreviewed to highlight it in the dashboard").setVisible(isReviewed(rsrc)); }<END_MOD>
private Account.Id createAccountOutsideRequestContext(java.lang.String username, java.lang.String fullName, java.lang.String email, boolean active) throws java.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email != null) { accountManager.link(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(id, ( <START_MOD>u<END_MOD>) -> { <START_MOD>u.update()<END_MOD>.setFullName(<START_MOD>com.google.common.base.Strings.nullToEmpty(<END_MOD>fullName)<START_MOD>)<END_MOD>.setPreferredEmail(<START_MOD>com.google.common.base.Strings.nullToEmpty(email))<END_MOD>.setActive(active); }); return id; } }
<START_MOD>@java.lang.Override public boolean isPureRevert() throws com.google.gerrit.extensions.restapi.RestApiException { return isPureRevert(null); }<END_MOD>
@org.junit.Test public void testVerifyAuthInfo() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId(), <START_MOD>java.time.Instant.now(), <END_MOD>1); assertThat(auth.verifyAuthInfo(info.authToken, "o", zeroId())).isTrue(); }
<START_MOD>@java.lang.Override public void onSuggestionsReady(com.google.gerrit.client.ui.Request req, com.google.gerrit.client.ui.Response res) { if ((query) == (this)) { active = false; query = null; callback.onSuggestionsReady(req, res); } else { query.start(); } }<END_MOD>
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = getRevision(); if (rev == null) { loadDefaults(); return; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(reader); try { com.google.gerrit.server.notedb.ChangeNotes.Parser parser = new com.google.gerrit.server.notedb.ChangeNotes.Parser(change, rev, walk<START_MOD>, repoManager<END_MOD>); parser.parseAll(); if ((parser.status) != null) { change.setStatus(parser.status); } approvals = parser.buildApprovals(); changeMessages = parser.buildMessages()<START_MOD>; publishedComments = com.google.common.collect.ImmutableListMultimap.copyOf(parser.publishedComments); noteMap = parser.publishedCommentNoteMap<END_MOD>; ImmutableSetMultimap.Builder<com.google.gerrit.server.notedb.ReviewerState, com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.ImmutableSetMultimap.builder(); for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.notedb.ReviewerState> e : parser.reviewers.entrySet()) { reviewers.put(e.getValue(), e.getKey()); } this.reviewers = reviewers.build(); submitRecords = com.google.common.collect.ImmutableList.copyOf(parser.submitRecords); } <START_MOD>catch (java.text.ParseException e1) { } <END_MOD>finally { walk.release(); } }
<START_MOD>public static org.apache.lucene.index.Term idTerm(com.google.gerrit.reviewdb.client.Change.Id id) { return com.google.gerrit.lucene.QueryBuilder.intTerm(com.google.gerrit.lucene.LEGACY_ID.getName(), id.get()); }<END_MOD>
<START_MOD>@java.lang.Override public void onLoad(final com.google.gerrit.plugin.client.screen.Screen screen) { java.lang.String input = screen.getToken(1); java.lang.String[] patchsetId = input.split(","); final java.lang.String changeId = com.google.gwt.http.client.URL.decodePathSegment(patchsetId[0]); final java.lang.String revisionId = patchsetId[1]; new com.google.gerrit.plugin.client.rpc.RestApi("changes").id(changeId).get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { if (result != null) { screen.setPageTitle(((("Reports for change " + (result._number())) + "/") + revisionId)); } } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); screen.show(new com.googlesource.gerrit.plugins.verifystatus.client.JobsScreen(changeId, revisionId)); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutInactive.Input input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account a = dbProvider.get().accounts().get(rsrc.getUser().getAccountId()); if (a == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("No such account: " + (rsrc.getUser().getAccountId()))); } if (!(a.isActive())) { return com.google.gerrit.extensions.restapi.Response.ok(""); } a.setActive(false); dbProvider.get().accounts().update(java.util.Collections.singleton(a)); byIdCache.evict(a.getId()); return com.google.gerrit.extensions.restapi.Response.created(""); }<END_MOD>
<START_MOD>public void onClick(com.google.gwt.user.client.ui.Widget sender) { sendButton.setEnabled(false); PatchUtil.DETAIL_SVC.abandonChange(message.getText().trim(), psid, new com.google.gerrit.client.rpc.GerritCallback<com.google.gwtjsonrpc.client.VoidResult>() { public void onSuccess(com.google.gwtjsonrpc.client.VoidResult result) { if ((appCallback) != null) { appCallback.onSuccess(null); } hide(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { sendButton.setEnabled(true); super.onFailure(caught); } }); }<END_MOD>
<START_MOD>private void assertMail(com.google.gerrit.server.mail.receive.MailMessage have, com.google.gerrit.server.mail.receive.MailMessage want) { assertThat(have.id()).isEqualTo(want.id()); assertThat(have.to()).isEqualTo(want.to()); assertThat(have.from()).isEqualTo(want.from()); assertThat(have.cc()).isEqualTo(want.cc()); assertThat(have.dateReceived()).isEqualTo(want.dateReceived()); assertThat(have.additionalHeaders()).isEqualTo(want.additionalHeaders()); assertThat(have.subject()).isEqualTo(want.subject()); assertThat(have.textContent()).isEqualTo(want.textContent()); assertThat(have.htmlContent()).isEqualTo(want.htmlContent()); }<END_MOD>
<START_MOD>@java.lang.Override public void onBrowserEvent(com.google.gwt.user.client.Event e) { com.google.gerrit.client.ui.OnEditEnabler.TBBInfo tbi = tbis.get(com.google.gwt.dom.client.Element.as(e.getEventTarget())); tbi.listener.onBrowserEvent(e); if ((e.getTypeInt()) == (com.google.gwt.user.client.Event.ONPASTE)) { onTextBoxBase(tbi.textBoxBase); } }<END_MOD>
<START_MOD>@com.google.gerrit.server.query.QueryBuilder.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> sample(java.lang.String value) throws com.google.gerrit.server.query.QueryParseException { return new com.googlesource.gerrit.plugins.cookbook.SampleOperator.MyPredicate(Change.Id.parse(value)); }<END_MOD>
<START_MOD>private <T extends com.google.gwt.core.client.JavaScriptObject> void sendPost(final com.google.gwtjsonrpc.common.AsyncCallback<T> cb, java.lang.String token) { com.google.gwt.http.client.RequestBuilder req = new com.google.gwt.http.client.RequestBuilder(com.google.gwt.http.client.RequestBuilder.POST, url.toString()); req.setHeader("Accept", JsonConstants.JSON_TYPE); req.setHeader("Content-Type", "application/x-www-form-urlencoded"); req.setRequestData(token); req.setCallback(new com.google.gerrit.client.rpc.RestApi.MyRequestCallback<T>(cb)); try { req.send(); } catch (com.google.gwt.http.client.RequestException e) { RpcStatus.INSTANCE.onRpcComplete(); cb.onFailure(e); } }<END_MOD>
void onExecute(com.google.gerrit.sshd.DispatchCommand dcmd, int exitValue, com.google.gerrit.sshd.SshSession sshSession) { final com.google.gerrit.sshd.SshScope.Context ctx = context.get(); ctx.finished = com.google.gerrit.common.TimeUtil.nowMs(); <START_MOD>com.google.common.collect.ListMultimap<<END_MOD>java.lang.String<START_MOD>, ?> parameters = extractParameters(dcmd); java.lang.String<END_MOD> cmd = extractWhat(dcmd<START_MOD>, parameters<END_MOD>); final org.apache.log4j.spi.LoggingEvent event = log(cmd); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + "ms")); event.setProperty(com.google.gerrit.sshd.SshLog.P_EXEC, (((ctx.finished) - (ctx.started)) + "ms")); final java.lang.String status; switch (exitValue) { case BaseCommand.STATUS_CANCEL : status = "killed"; break; case BaseCommand.STATUS_NOT_FOUND : status = "not-found"; break; case BaseCommand.STATUS_NOT_ADMIN : status = "not-admin"; break; default : status = java.lang.String.valueOf(exitValue); break; } event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, status); java.lang.String peerAgent = sshSession.getPeerAgent(); if (peerAgent != null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_AGENT, peerAgent); } if ((async) != null) { async.append(event); } audit(<START_MOD>ctx, status, extractWhat(<END_MOD>dcmd<START_MOD>, parameters), parameters<END_MOD>); }
<START_MOD>public com.google.gerrit.server.project.RefFilter<T> setSubString(java.lang.String subString) { this.matchSubstring = subString; return this; }<END_MOD>
@org.junit.Test public void getExternalIds() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.<START_MOD>maybeGet(user.getId()).<END_MOD>get().getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
<START_MOD>private java.util.List<com.google.gerrit.extensions.common.CommentInfo> getRevisionComments(java.lang.String changeId, java.lang.String revId) throws java.lang.Exception { return getPublishedComments(changeId, revId).values().stream().flatMap(( t) -> t.stream()).collect(java.util.stream.Collectors.toList()); }<END_MOD>
<START_MOD>private static void addRewrites(com.google.common.collect.ListMultimap<java.lang.String, com.google.gerrit.server.notedb.NoteDbRewriter> rewriters, com.google.gerrit.server.notedb.NoteDbUpdateManager.OpenRepo openRepo) throws com.google.gwtorm.server.OrmException, java.io.IOException { for (java.util.Map.Entry<java.lang.String, java.util.Collection<com.google.gerrit.server.notedb.NoteDbRewriter>> entry : rewriters.asMap().entrySet()) { java.lang.String refName = entry.getKey(); org.eclipse.jgit.lib.ObjectId oldTip = openRepo.cmds.get(refName).orElse(org.eclipse.jgit.lib.ObjectId.zeroId()); if (oldTip.equals(org.eclipse.jgit.lib.ObjectId.zeroId())) { return; } org.eclipse.jgit.lib.ObjectId currTip = oldTip; try { for (com.google.gerrit.server.notedb.NoteDbRewriter noteDbRewriter : entry.getValue()) { org.eclipse.jgit.lib.ObjectId nextTip = noteDbRewriter.rewriteCommitHistory(openRepo.rw, openRepo.tempIns, currTip); if (nextTip != null) { currTip = nextTip; } } } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException("Cannot rewrite history", e); } if (!(oldTip.equals(currTip))) { openRepo.cmds.add(new org.eclipse.jgit.transport.ReceiveCommand(oldTip, currTip, refName)); } } }<END_MOD>
@org.junit.Test public void byHashtagWithNotedb() throws java.lang.Exception { <START_MOD>assume().that<END_MOD>(notesMigration.enabled()<START_MOD>).isTrue(<END_MOD>); java.util.List<com.google.gerrit.reviewdb.client.Change> changes = setUpHashtagChanges(); java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo> results = query("hashtag:foo"); <START_MOD>assertThat(results).hasSize<END_MOD>(2); assertResultEquals(changes.get(1), results.get(0)); assertResultEquals(changes.get(0), results.get(1)); assertResultEquals(changes.get(1), queryOne("hashtag:bar")); assertResultEquals(changes.get(1), queryOne( tag assertResultEquals(changes.get(1), queryOne( tag   assertResultEquals(changes.get(1), queryOne( a tag   assertResultEquals(changes.get(1), queryOne( tag assertResultEquals(changes.get(1), queryOne(   tag }
public java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sort(java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> incoming) throws java.io.IOException { final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = new java.util.ArrayList<>(); final java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> sort = new java.util.HashSet(incoming); while (!(sort.isEmpty())) { final com.google.gerrit.server.git.CodeReviewCommit n = com.google.gerrit.server.git.RebaseSorter.removeOne(sort); rw.resetRetain(canMergeFlag); rw.markStart(n); <START_MOD>for (org.eclipse.jgit.revwalk.RevCommit c : accepted) { <END_MOD>if (<START_MOD>!(c.equals(n))) { rw.markUninteresting(c); } } com.google.gerrit.server.git.CodeReviewCommit c; final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> contents = new java.util.ArrayList<>(); while ((c = rw.next()<END_MOD>) != null) { <START_MOD>if ((!(c.has(canMergeFlag))) || (!(incoming.contains(c)))) { if ((n.missing) == null) { n.setStatusCode(CommitMergeStatus.MISSING_DEPENDENCY); n.missing = new java.util.ArrayList(); } n.missing.add(c); } else {<END_MOD> contents<START_MOD>.add(c); } }<END_MOD> if ((<START_MOD>n.getStatusCode()<END_MOD>) == <START_MOD>(com.google.gerrit.server.git.strategy.<END_MOD>CommitMergeStatus.MISSING_DEPENDENCY)<START_MOD>) { continue; } sort.removeAll(<END_MOD>contents<START_MOD>); java.util.Collections.reverse(contents); sorted<END_MOD>.removeAll(contents); <START_MOD>sorted.addAll<END_MOD>(contents); <START_MOD>} return <END_MOD>sorted<START_MOD>; }<END_MOD>
public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, <START_MOD>java.util.List<<END_MOD>com.google.gerrit.reviewdb.client.Account<START_MOD>.Id> reviewers, com.google.gerrit.reviewdb.client.Account adder, java.sql.Timestamp when) { if ((!(listeners.iterator().hasNext())) || (reviewers.isEmpty())) { return; } java.util.List<com.google.gerrit.extensions.common.AccountInfo> transformed = com.google.common.collect.FluentIterable.from(reviewers).transform(new com.google.common.base.Function<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.extensions.common.AccountInfo>() { @java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.reviewdb.client.Account.Id<END_MOD> account<START_MOD>) { return util.accountInfo(account); } }).toList(); try { fire(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), transformed, util.accountInfo(<END_MOD>adder<START_MOD>),<END_MOD> when)<START_MOD>; } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ReviewerAdded.log.error(<END_MOD> fire<START_MOD> event<END_MOD> e)<START_MOD>; } }<END_MOD>
public static java.lang.String describe(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { return user.getAccountId().toString(); } if (user instanceof com.google.gerrit.server.query.change.SingleGroupUser) { return <START_MOD>"account:"<END_MOD> + (user.getEffectiveGroups().getKnownGroups().iterator().next().toString()); } return user.toString(); }
<START_MOD>private void refreshKeys() { keys.clear(); com.google.gerrit.client.account.AccountApi.self().view("gpgkeys").get(com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren("id", new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.account.GpgKeyInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.account.GpgKeyInfo> result) { java.util.List<com.google.gerrit.client.account.GpgKeyInfo> list = com.google.gerrit.client.rpc.Natives.asList(result.values()); java.util.Collections.sort(list, new java.util.Comparator<com.google.gerrit.client.account.GpgKeyInfo>() { @java.lang.Override public int compare(com.google.gerrit.client.account.GpgKeyInfo a, com.google.gerrit.client.account.GpgKeyInfo b) { return a.id().compareTo(b.id()); } }); if (!(list.isEmpty())) { keys.setVisible(true); for (com.google.gerrit.client.account.GpgKeyInfo k : list) { keys.addOneKey(k); } showKeyTable(true); } else { keys.setVisible(false); showAddKeyBlock(true); showKeyTable(false); } display(); } })); }<END_MOD>
<START_MOD>private org.pegdown.ast.RootNode parseFile(com.google.gitiles.GitilesView view, java.lang.String path, com.google.gitiles.doc.MarkdownFormatter fmt, java.lang.String md) { org.pegdown.ast.RootNode docTree; try { docTree = fmt.parseMarkdown(md); } catch (org.pegdown.ParsingTimeoutException e) { com.google.gitiles.doc.DocServlet.log.error("timeout rendering {}/{} at {}", view.getRepositoryName(), path, view.getRevision().getName()); return null; } if (docTree == null) { com.google.gitiles.doc.DocServlet.log.error("cannot parse {}/{} at {}", view.getRepositoryName(), path, view.getRevision().getName()); } return docTree; }<END_MOD>
<START_MOD>public java.util.List<com.google.gerrit.common.data.SubmitRecord> canSubmit() { java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl("locate_submit_rule", "can_submit", "locate_submit_filter", "filter_submit_results"); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError((((((("Submit rule '" + (getSubmitRule())) + "' for change ") + (cd.getId())) + " of ") + (getProjectName())) + " has no solution.")); } return resultsToSubmitRecord(getSubmitRule(), results); }<END_MOD>
<START_MOD>public final java.util.List<java.lang.String> archives() { java.util.List<java.lang.String> archives = new java.util.ArrayList<>(); for (com.google.gerrit.client.config.DownloadInfo.ArchiveFormatInfo f : com.google.gerrit.client.rpc.Natives.asList(_archives())) { archives.add(f.get()); } return archives; }<END_MOD>
@org.junit.Before public void <START_MOD>setUp<END_MOD>() throws java.lang.Exception { <START_MOD>sitePaths<END_MOD> = <START_MOD>new com.google.gerrit.server.config.SitePaths(<END_MOD>com.google.gerrit.testutil.TempFileUtil.createTempDirectory()<START_MOD>.toPath()); sitePath = sitePaths.site_path.toString(); gerritConfig = new org.eclipse.jgit.storage.file.FileBasedConfig(sitePaths.gerrit_config.toFile(), org.eclipse.jgit.util.FS.detect())<END_MOD>; }
<START_MOD>@java.lang.Override public java.lang.String generate(com.google.gwt.core.ext.TreeLogger logger, com.google.gwt.core.ext.GeneratorContext context, java.lang.String typeName) throws com.google.gwt.core.ext.UnableToCompleteException { com.google.gwt.core.ext.typeinfo.TypeOracle typeOracle = context.getTypeOracle(); com.google.gwt.core.ext.typeinfo.JClassType sourceType = typeOracle.findType(typeName); if (sourceType == null) { logger.log(TreeLogger.ERROR, "Could not find requested typeName", null); throw new com.google.gwt.core.ext.UnableToCompleteException(); } validateType(logger, sourceType); java.lang.String generatedSimpleSourceName = (sourceType.getSimpleSourceName()) + "PluginImpl"; com.google.gwt.user.rebind.ClassSourceFileComposerFactory f = new com.google.gwt.user.rebind.ClassSourceFileComposerFactory(sourceType.getPackage().getName(), generatedSimpleSourceName); f.addImport(com.google.gwt.core.client.GWT.class.getName()); f.setSuperclass(typeName); java.io.PrintWriter out = context.tryCreate(logger, sourceType.getPackage().getName(), generatedSimpleSourceName); if (out != null) { com.google.gwt.user.rebind.SourceWriter sw = f.createSourceWriter(context, out); sw.println((("public " + generatedSimpleSourceName) + "() {")); sw.indent(); sw.println("init();"); sw.outdent(); sw.println("}"); sw.commit(logger); } return f.getCreatedClassName(); }<END_MOD>
<START_MOD>@java.lang.SuppressWarnings("rawtypes") @java.lang.Override protected void configure() { bind(new com.google.inject.TypeLiteral<com.google.gerrit.extensions.registration.DynamicSet<com.google.gerrit.server.cache.CacheRemovalListener>>() {}).toInstance(com.google.gerrit.extensions.registration.DynamicSet.<com.google.gerrit.server.cache.CacheRemovalListener>emptySet()); install(new com.google.gerrit.server.cache.h2.DefaultCacheFactory.Module()); }<END_MOD>
<START_MOD>private static boolean isLdapUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return uuid.get().startsWith("ldapgroup:"); }<END_MOD>
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.server.project.DeleteBranch.Input input) throws com.google.gerrit.extensions.restapi.<START_MOD>RestApiException<END_MOD>, com.google.gwtorm.server.OrmException, java.io.IOException { if (!(rsrc.getControl().controlForRef(rsrc.getBranchKey()).canDelete())) { throw new com.google.gerrit.extensions.restapi.AuthException( delete branch } if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((   + (rsrc.getBranchKey())) +   has open changes } <START_MOD>deleteRef.delete(rsrc)<END_MOD>; <START_MOD>return com.google.gerrit.extensions.restapi.Response.none(<END_MOD>); }
private void update(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.account.AuthRequest who, com.google.gerrit.reviewdb.client.AccountExternalId extId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = userFactory.create(extId.getAccountId()); com.google.gerrit.reviewdb.client.Account toUpdate = null; java.lang.String newEmail = who.getEmailAddress(); java.lang.String oldEmail = extId.getEmailAddress(); if ((newEmail != null) && (!(newEmail.equals(oldEmail)))) { if ((oldEmail != null) && (oldEmail.equals(user.getAccount().getPreferredEmail()))) { toUpdate = load(toUpdate, user.getAccountId(), db); toUpdate.setPreferredEmail(newEmail); } extId.setEmailAddress(newEmail); db.accountExternalIds().update(java.util.Collections.singleton(extId)); } if ((<START_MOD>(<END_MOD>!(realm.allowsEdit(Account.FieldName.FULL_NAME))) && (<START_MOD>(who.getDisplayName()) != null)) && (<END_MOD>!(com.google.gerrit.server.account.AccountManager.eq(user.getAccount().getFullName(), who.getDisplayName())))) { toUpdate = load(toUpdate, user.getAccountId(), db); toUpdate.setFullName(who.getDisplayName()); } if ((!(realm.allowsEdit(Account.FieldName.USER_NAME))) && (!(com.google.gerrit.server.account.AccountManager.eq(user.getUserName(), who.getUserName())))) { changeUserNameFactory.create(db, user, who.getUserName()); } if (toUpdate != null) { db.accounts().update(java.util.Collections.singleton(toUpdate)); } if ((newEmail != null) && (!(newEmail.equals(oldEmail)))) { byEmailCache.evict(oldEmail); byEmailCache.evict(newEmail); } if (toUpdate != null) { byIdCache.evict(toUpdate.getId()); } }
private java.lang.String getLine(com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchFile fileInfo, short side, int lineNbr) { try { return fileInfo.getLine(side, lineNbr); } catch (java.io.IOException err) { com.google.gerrit.server.mail.send.CommentSender.log.warn(java.lang.String.format( to read file on side %d side), err); return ""; } catch (java.lang.IndexOutOfBoundsException err) { com.google.gerrit.server.mail.send.CommentSender.log.debug(java.lang.String.format( to get line number of file on side %d side), err); return ""; } catch (com.google.gerrit.common.errors.NoSuchEntityException err) { com.google.gerrit.server.mail.send.CommentSender.log.warn(java.lang.String.format( %d of file didn exist side), err); return ""; } }
<START_MOD>java.lang.String unwatchedProjectListOpen();<END_MOD>
public boolean <START_MOD>canSeeMember<END_MOD>(com.google.gerrit.reviewdb.Account.Id id) { return isOwner(); }
<START_MOD>public boolean isAuthentcated() { return (this) instanceof com.google.gerrit.server.IdentifiedUser; }<END_MOD>
@java.lang.Override public <START_MOD>AccountResource<END_MOD>.StarredChange parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); try { user.asyncStarredChanges(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); if (user.getStarredChanges().contains(change.getChange().getId())) { return new com.google.gerrit.server.account.AccountResource.StarredChange(user, change); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } finally { user.abortStarredChanges(); } }
private void evictCache(com.google.common.cache.Cache<?, ?> cache, java.lang.String cacheName, java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); <START_MOD>com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug( all {} cacheName); <END_MOD>} else { cache.invalidate(key); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug( {} <START_MOD>from {} key, <END_MOD>cacheName); }<START_MOD> }<END_MOD>
<START_MOD>private static boolean isInteger(java.lang.Class<?> t) { return (java.lang.Integer.class.isAssignableFrom(t)) || ((int.class) == t); }<END_MOD>
@java.lang.Override public com.googlesource.gerrit.plugins.lfs.LfsConfigInfo apply(com.google.gerrit.server.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { com.googlesource.gerrit.plugins.lfs.LfsConfigInfo info = new com.googlesource.gerrit.plugins.lfs.LfsConfigInfo(); com.googlesource.gerrit.plugins.lfs.LfsConfigSection config = <START_MOD>lfsConfigFactory.create()<END_MOD>.getForProject(resource.getNameKey()); if (config != null) { info.enabled = config.isEnabled(); info.maxObjectSize = config.getMaxObjectSize(); } return info; }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false,   draft changes to private changes (default is work-in-progress)? { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format( draft changes with %s changes ... strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE)) ? "is_private" : "work_in_progress"; e.execute(java.lang.String.format(( changes <START_MOD>  + (((((((((<END_MOD> %s = 'Y', <START_MOD>  +   status = 'n'   +   <END_MOD>created_on = created_on <START_MOD>  +   status = 'd'   +   OR (status = 'n'   +   AND EXISTS   +   (SELECT *   +   FROM patch_sets   +   <END_MOD>WHERE patch_sets.change_id <START_MOD>= changes.change_id   +   <END_MOD>AND patch_sets.draft = 'Y')<START_MOD>)  <END_MOD> column)); } ui.message("done"); }
@java.lang.Override public java.util.Collection<com.google.gerrit.common.data.GroupReference> suggest(java.lang.String name<START_MOD>, com.google.gerrit.reviewdb.client.Project project<END_MOD>) { java.util.Set<com.google.gerrit.common.data.GroupReference> groups = com.google.common.collect.Sets.newTreeSet(com.google.gerrit.server.account.GroupBackends.GROUP_REF_NAME_COMPARATOR); for (com.google.gerrit.server.account.GroupBackend g : backends) { groups.addAll(g.suggest(name<START_MOD>, project<END_MOD>)); } return groups; }
public static byte[] asByteArray(org.eclipse.jgit.lib.ObjectLoader ldr) throws java.io.IOException, org.eclipse.jgit.errors.LargeObjectException, org.eclipse.jgit.errors.MissingObjectException { return ldr.getCachedBytes(com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.Text.bigFileThreshold); }
private static com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListEntry createPatchListEntry(org.eclipse.jgit.diff.RawTextComparator cmp, org.eclipse.jgit.revwalk.RevCommit aCommit, com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.Text aText, com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.Text bText, java.lang.String fileName) { byte[] rawHdr = com.google.gerrit.server.patch.PatchListLoader.getRawHeader((aCommit != null), fileName); byte[] aContent = aText.getContent(); byte[] bContent = bText.getContent(); long size = bContent.length; long sizeDelta = (bContent.length) - (aContent.length); org.eclipse.jgit.diff.RawText aRawText = new org.eclipse.jgit.diff.RawText(aContent); org.eclipse.jgit.diff.RawText bRawText = new org.eclipse.jgit.diff.RawText(bContent); org.eclipse.jgit.diff.EditList edits = new org.eclipse.jgit.diff.HistogramDiff().diff(cmp, aRawText, bRawText); org.eclipse.jgit.patch.FileHeader fh = new org.eclipse.jgit.patch.FileHeader(rawHdr, edits, org.eclipse.jgit.patch.FileHeader.PatchType.UNIFIED); return new com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListEntry(fh, edits, com.google.common.collect.ImmutableSet.of(), size, sizeDelta); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.<START_MOD>restapi.<END_MOD>change.RobotCommentResource>> views() { return views; }
<START_MOD>private boolean isAllProjects(com.google.gerrit.server.project.ProjectResource rsrc) { return rsrc.getName().endsWith(AllProjectsNameProvider.DEFAULT); }<END_MOD>
<START_MOD>@org.junit.Test <END_MOD>public void testInsertManyPeopleByTransaction() throws java.lang.Exception { final com.google.gwtorm.data.PhoneBookDb schema = openAndCreate(); final com.google.gwtorm.client.Transaction txn = schema.beginTransaction(); final java.util.ArrayList<com.google.gwtorm.data.<START_MOD>Person<END_MOD>> all = new java.util.ArrayList<com.google.gwtorm.data.<START_MOD>Person<END_MOD>>(); all.add(new com.google.gwtorm.data.<START_MOD>Person(new com.google.gwtorm.data.Person<END_MOD>.Key("Bob"), 18)); all.add(new com.google.gwtorm.data.<START_MOD>Person(new com.google.gwtorm.data.Person<END_MOD>.Key("Mary"), 22)); all.add(new com.google.gwtorm.data.<START_MOD>Person(new com.google.gwtorm.data.Person<END_MOD>.Key("Zak"), 33)); schema.people().insert(all, txn); final java.sql.Statement st = statement(schema); java.sql.ResultSet rs; rs = st.executeQuery( name,age FROM people ORDER BY name assertFalse(rs.next()); rs.close(); txn.commit(); rs = st.executeQuery( name,age FROM people ORDER BY name for (int rowIdx = 0; rowIdx < (all.size()); rowIdx++) { assertTrue(rs.next()); assertEquals(all.get(rowIdx).name(), rs.getString(1)); assertEquals(all.get(rowIdx).age(), rs.getInt(2)); } assertFalse(rs.next()); rs.close(); st.close(); }
<START_MOD>private void applyMaxHeight() { int header = (getTabBar().getOffsetHeight()) + 2; for (int i = 0; i < (getTabBar().getTabCount()); i++) { tabs.get(i).setMaxHeight(((maxHeightBeforeHeader) - header)); } }<END_MOD>
@java.lang.Override public java.<START_MOD>util<END_MOD>.<START_MOD>Optional<com.googlesource.gerrit.plugins.webhooks.processors.Output><END_MOD> process() { return <START_MOD>java.util.Optional.of(new com.googlesource.gerrit.plugins.webhooks.EventProcessor.Output(<END_MOD>com.googlesource.gerrit.plugins.webhooks.processors.JenkinsEventProcessor.GSON.toJson(event)<START_MOD>))<END_MOD>; }
private boolean canCompleteImport(com.google.gerrit.server.project.ProjectResource rsrc) { com.google.gerrit.server.<START_MOD>permissions<END_MOD>.<START_MOD>PermissionBackend.WithUser<END_MOD> <START_MOD>withUser<END_MOD> = <START_MOD>permissionBackend.user(<END_MOD>currentUserProvider.get()); return (<START_MOD>withUser<END_MOD>.<START_MOD>testOrFalse<END_MOD>(<START_MOD>GlobalPermission.ADMINISTRATE_SERVER<END_MOD>)) || ((<START_MOD>withUser<END_MOD>.<START_MOD>testOrFalse<END_MOD>(<START_MOD>new com.google.gerrit.extensions.api.access.PluginPermission<END_MOD>(pluginName<START_MOD>,<END_MOD> ImportCapability.ID))) && (rsrc.getControl().isOwner())); }
@java.lang.Override protected com.google.gerrit.server.git.MergeTip _run(com.google.gerrit.server.git.CodeReviewCommit branchTip, java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.<START_MOD>IntegrateException<END_MOD> { java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = args.mergeUtil.reduceToMinimalMerge(args.mergeSorter, toMerge); com.google.gerrit.server.git.MergeTip mergeTip; if (branchTip == null) { mergeTip = new com.google.gerrit.server.git.MergeTip(sorted.get(0), toMerge); sorted.remove(0); } else { mergeTip = new com.google.gerrit.server.git.MergeTip(branchTip, toMerge); } while (!(sorted.isEmpty())) { com.google.gerrit.server.git.CodeReviewCommit mergedFrom = sorted.remove(0); org.eclipse.jgit.lib.PersonIdent serverIdent = args.serverIdent.get(); org.eclipse.jgit.lib.PersonIdent caller = args.caller.newCommitterIdent(serverIdent.getWhen(), serverIdent.getTimeZone()); com.google.gerrit.server.git.CodeReviewCommit newTip = args.mergeUtil.mergeOneCommit(caller, serverIdent, args.repo, args.rw, args.inserter, args.canMergeFlag, args.destBranch, mergeTip.getCurrentTip(), mergedFrom); mergeTip.moveTipTo(newTip, mergedFrom); } args.mergeUtil.markCleanMerges(args.rw, args.canMergeFlag, mergeTip.getCurrentTip(), args.alreadyAccepted); setRefLogIdent(); return mergeTip; }
@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { user = ctx.getIdentifiedUser(); notes = ctx.getNotes(); ps = psUtil.get(ctx.getDb(), ctx.getNotes(), psId); boolean dirty = false; dirty |= insertComments(ctx); dirty |= insertRobotComments(ctx); dirty |= updateLabels(<START_MOD>projectCache.checkedGet(ctx.getProject()), <END_MOD>ctx); dirty |= insertMessage(ctx); return dirty; }
<START_MOD>void setShowTabs(boolean b) { if (b) { panel.addStyleName(style.showTabs()); } else { panel.removeStyleName(style.showTabs()); } }<END_MOD>
@org.junit.Test public void testKeywords() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(); com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator validator = new com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator(null, new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE, null, null, null); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = validator.performValidation(repo, c<START_MOD>, new org.eclipse.jgit.revwalk.RevWalk(repo)<END_MOD>, com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidatorTest.getPatterns().values(), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG); java.util.Set<java.lang.String> expected = com.google.common.collect.ImmutableSet.of(( blocked keyword(s) found in: foo.txt (Line: 1) +   (found: myp4ssw0rd, foobar) ( blocked keyword(s) found in: bar.txt (Line: 5) +   (found: $Id: foo bar$) (( blocked keyword(s) found in:   + (com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG)) +   (Line: 1) (found: foobar) assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }
private boolean canPerform(com.google.gerrit.reviewdb.ApprovalCategory.Id actionId, short level) { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> groups = getCurrentUser().getEffectiveGroups(); int val = java.lang.Integer.MIN_VALUE; <START_MOD>java.util.List<com.google.gerrit.reviewdb.RefRight> allRights = new java.util.ArrayList<com.google.gerrit.reviewdb.RefRight>(); allRights.addAll(getLocalRights()); if (actionId.canInheritFromWildProject()) { allRights.addAll(getInheritedRights()); } java.util.List<com.google.gerrit.reviewdb.RefRight> actionRights = new java.util.ArrayList<com.google.gerrit.reviewdb.RefRight>(); <END_MOD>for (final com.google.gerrit.reviewdb.RefRight right : <START_MOD>allRights<END_MOD>) { if (right.getApprovalCategoryId().equals(actionId)) <START_MOD>{ actionRights.add(right); } } java.util.Collections.sort(actionRights, new com.google.gerrit.reviewdb.RefRight.RefPatternOrder()); java.util.List<com.google.gerrit.reviewdb.RefRight> mostSpecific = com.google.gerrit.server.project.RefControl.filterMostSpecific(actionRights); for (com.google.gerrit.reviewdb.RefRight right : mostSpecific) { if (groups.contains(right.getAccountGroupId())) { if ((val < 0) <END_MOD>&& (<START_MOD>(right.getMaxValue()) ><END_MOD> 0)<START_MOD>) { val = <END_MOD>right.getMaxValue()<START_MOD>; } else { val = java.lang.Math.max(<END_MOD>right.getMaxValue(), val); } } } return val >= level; }
<START_MOD>private final native void setPluginConfigValuesRaw(com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.projects.ProjectApi.ConfigValueInput>> v);<END_MOD>
<START_MOD>private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findById(java.lang.String accountId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(accountId); if ((schema.get().accounts().get(id)) != null) { return java.util.Collections.singleton(id); } else { return java.util.Collections.emptySet(); } }<END_MOD>
<START_MOD>@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; if ((getClass()) != (obj.getClass())) return false; com.google.gerrit.audit.AuditEvent other = ((com.google.gerrit.audit.AuditEvent) (obj)); return this.asString().equals(other.asString()); }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (refControl.getCurrentUser().isIdentifiedUser()) { final com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (refControl.getCurrentUser())); java.lang.String refname = receiveEvent.refName; org.eclipse.jgit.lib.ObjectId old = receiveEvent.commit.getParent(0); if (receiveEvent.command.getRefName().startsWith("refs/changes")) { refname = refname.replace("refs/heads/", "refs/for/refs/heads/"); old = org.eclipse.jgit.lib.ObjectId.zeroId(); } com.google.gerrit.common.ChangeHookRunner.HookResult result = hooks.doRefUpdateHook(receiveEvent.project, refname, user.getAccount(), old, receiveEvent.commit); if ((result != null) && ((result.getExitValue()) != 0)) { final java.lang.String message = result.toString().trim(); throw new com.google.gerrit.server.git.validators.CommitValidationException(message); } } return java.util.Collections.emptyList(); }<END_MOD>
@org.junit.Test public void createGroupAsServerIdent() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroup(1, <START_MOD>"test-account"<END_MOD>, serverIdent, null); assertThat(auditLogReader.getMembersAudit(allUsersRepo, group.getGroupUUID())).hasSize(0); }
@java.lang.Override public boolean cancel(boolean mayInterruptIfRunning) { if (task.cancel(mayInterruptIfRunning)) { if ((runnable) instanceof com.google.gerrit.server.git.WorkQueue.CancelableRunnable) <START_MOD>{ if<END_MOD> (running.compareAndSet(false, true)) { ((com.google.gerrit.server.git.WorkQueue.CancelableRunnable) (runnable)).cancel();<START_MOD> } else if ((runnable) instanceof com.google.gerrit.server.git.WorkQueue.CanceledWhileRunning) { ((com.google.gerrit.server.git.WorkQueue.CanceledWhileRunning) (runnable)).setCanceledWhileRunning(); }<END_MOD> } executor.remove(this); executor.purge(); return true; } else { return false; } }
<START_MOD>public<END_MOD> static com.google.gerrit.server.change.ChangeJson.GitPerson toGitPerson(com.google.gerrit.reviewdb.client.UserIdentity committer) { com.google.gerrit.server.change.ChangeJson.GitPerson p = new com.google.gerrit.server.change.ChangeJson.GitPerson(); p.name = committer.getName(); p.email = committer.getEmail(); p.date = committer.getDate(); p.tz = committer.getTimeZone(); return p; }
public void index(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException, java.io.IOException { <START_MOD>com.google.gerrit.server.query.change.ChangeData cd = <END_MOD>newChangeData(db, project, changeId)<START_MOD>; index(cd); reindexIfStale(cd<END_MOD>); }
<START_MOD>private com.google.gerrit.httpd.raw.ResourceServlet.Resource getResource(javax.servlet.http.HttpServletRequest req) throws java.util.concurrent.ExecutionException { java.lang.String name = com.google.common.base.CharMatcher.is('/').trimFrom(req.getPathInfo()); if (com.google.gerrit.httpd.raw.ResourceServlet.isUnreasonableName(name)) { return com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND; } java.nio.file.Path p = getResourcePath(name); if (p == null) { return com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND; } java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource> loader = newLoader(name, p); com.google.gerrit.httpd.raw.ResourceServlet.Resource r = cache.get(p, loader); if (r == (com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND)) { return com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND; } if ((refresh) && (r.isStale(p))) { cache.invalidate(p); r = cache.get(p, loader); } return r; }<END_MOD>
<START_MOD>public com.google.common.collect.ImmutableList<? extends com.google.gerrit.reviewdb.client.Comment> getComments() { checkParsed(); return comments; }<END_MOD>
public com.google.gerrit.reviewdb.client.PatchType getPatchType() { return com.google.gerrit.reviewdb.client.PatchType.forCode(patchType); }
private com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append("Abandoned"); if (!(com.google.common.base.Strings.nullToEmpty(msgTxt).trim().isEmpty())) { msg.append("\n\n"); msg.append(msgTxt.trim()); } return com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx, msg.toString()<START_MOD>, ChangeMessagesUtil.ABANDON<END_MOD>); }
<START_MOD>@org.junit.Test public void addReviewerToReviewableChangeByOtherInNoteDbSingly() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); addReviewerToReviewableChangeByOtherInNoteDb(singly()); }<END_MOD>
<START_MOD>private static java.util.List<org.apache.solr.client.solrj.SolrQuery.SortClause> getSorts(com.google.gerrit.server.index.Schema<com.google.gerrit.server.query.change.ChangeData> schema, com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) { if (com.google.gerrit.server.query.change.SortKeyPredicate.hasSortKeyField(schema)) { boolean reverse = com.google.gerrit.server.query.change.ChangeQueryBuilder.hasNonTrivialSortKeyAfter(schema, p); return com.google.common.collect.ImmutableList.of(new org.apache.solr.client.solrj.SolrQuery.SortClause(ChangeField.SORTKEY.getName(), (!reverse ? SolrQuery.ORDER.desc : SolrQuery.ORDER.asc))); } else { return com.google.common.collect.ImmutableList.of(new org.apache.solr.client.solrj.SolrQuery.SortClause(ChangeField.UPDATED.getName(), SolrQuery.ORDER.desc), new org.apache.solr.client.solrj.SolrQuery.SortClause(ChangeField.LEGACY_ID.getName(), SolrQuery.ORDER.desc)); } }<END_MOD>
<START_MOD>@java.lang.Override <END_MOD>public void evictAfterRename(final com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName, final com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName) { byName.remove(oldName); updateGroupList(oldName, newName); }
public final com.google.gerrit.server.git.MergeTip run(final com.google.gerrit.server.git.CodeReviewCommit currentTip, final java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.<START_MOD>IntegrateException<END_MOD> { refLogIdent = null; checkState(((args.caller) != null)); return _run(currentTip, toMerge); }
<START_MOD>private java.lang.Iterable<com.google.gerrit.extensions.common.ProjectInfo> filter(java.lang.Iterable<com.google.gerrit.extensions.common.ProjectInfo> infos) { return com.google.common.collect.Iterables.filter(infos, new com.google.common.base.Predicate<com.google.gerrit.extensions.common.ProjectInfo>() { @java.lang.Override public boolean apply(com.google.gerrit.extensions.common.ProjectInfo in) { return ((in.name) != null) && (((in.name.equals(allProjects.get())) || (in.name.equals(allUsers.get()))) || (in.name.startsWith(getProjectPrefix()))); } }); }<END_MOD>
private static com.google.common.base.Optional<org.eclipse.jgit.lib.ObjectId> getStart(com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> params, org.eclipse.jgit.lib.ObjectReader reader) throws java.io.IOException { java.util.List<java.lang.String> values = params.get(com.google.gitiles.LogServlet.START_PARAM); switch (values.size()) { case   : return com.google.common.base.Optional.absent(); case 1 : java.lang.String id = values.get(0); if (!(org.eclipse.jgit.lib.AbbreviatedObjectId.isId(id))) { <START_MOD>throw new java.lang.IllegalStateException()<END_MOD>; } java.util.Collection<org.eclipse.jgit.lib.ObjectId> ids = reader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(id)); if ((ids.size()) != 1) { <START_MOD>throw new java.lang.IllegalStateException(); } <END_MOD>return <START_MOD>com.google.common.base.Optional.of(com.google.common.collect.Iterables.getOnlyElement(ids)); default : throw new java.lang.IllegalStateException()<END_MOD>; } }
java.lang.String image(java.lang.String dest) { if ((com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest)) || (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(dest))) { return dest; } else if ((imageLoader) != null) { return imageLoader.inline(filePath, dest); } return <START_MOD>SharedUtility<END_MOD>.<START_MOD>IMAGE_URI_INNOCUOUS_OUTPUT<END_MOD>; }
@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); globalConfig = dbInjector.getInstance(com.google.inject.Key.get(org.eclipse.jgit.lib.Config.class, com.google.gerrit.server.config.GerritServerConfig.class)); threads = com.google.gerrit.pgm.util.ThreadLimiter.limitThreads(dbInjector, threads); checkNotSlaveMode(); disableLuceneAutomaticCommit(); disableChangeCache(); com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); sysInjector.injectMembers(this<START_MOD>); checkIndicesOption(<END_MOD>); try { boolean ok = true; for (com.google.gerrit.server.index.IndexDefinition<?, ?, ?> def : indexDefs) { if (listIndices) { java.lang.System.out.format("%s\n", def.getName()); } else { <START_MOD>if ((indices.isEmpty()) || (indices.contains(def.getName()))) { <END_MOD>ok &= reindex(def); } } <START_MOD>} <END_MOD>return ok ?   : 1; } catch (java.lang.Exception e) { throw die(e.getMessage(), e); } finally { sysManager.stop(); dbManager.stop(); } }
<START_MOD>public static com.google.gwtorm.server.OrmException convertError(java.lang.String op, java.sql.SQLException err) { switch (com.google.gerrit.server.change.H2AccountPatchReviewStore.getSQLStateInt(err)) { case 23001 : case 23505 : return new com.google.gwtorm.server.OrmDuplicateKeyException("ACCOUNT_PATCH_REVIEWS", err); default : if (((err.getCause()) == null) && ((err.getNextException()) != null)) { err.initCause(err.getNextException()); } return new com.google.gwtorm.server.OrmException((op + " failure on ACCOUNT_PATCH_REVIEWS"), err); } }<END_MOD>
public java.<START_MOD>util.List<java.<END_MOD>lang.String<START_MOD>><END_MOD> currentFilePaths(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db, com.google.gerrit.server.patch.PatchListCache cache) throws com.google.gwtorm.server.OrmException { if ((currentFiles) == null) { com.google.gerrit.reviewdb.client.Change c = change(db); if (c == null) { return null; } com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(db); if (ps == null) { return null; } com.google.gerrit.server.patch.PatchList p; try { p = cache.get(c, ps); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { currentFiles = <START_MOD>java.util.Collections.emptyList()<END_MOD>; return currentFiles; } java.util.List<java.lang.String> r = new java.util.ArrayList<java.lang.String>(p.getPatches().size()); for (com.google.gerrit.server.patch.PatchListEntry e : p.getPatches()) { if (Patch.COMMIT_MSG.equals(e.getNewName())) { continue; } switch (e.getChangeType()) { case ADDED : case MODIFIED : case DELETED : case COPIED : r.add(e.getNewName()); break; case RENAMED : r.add(e.getOldName()); r.add(e.getNewName()); break; case REWRITE : break; } } <START_MOD>java.util.Collections.sort(<END_MOD>currentFiles<START_MOD>); } return <END_MOD>currentFiles<START_MOD>; }<END_MOD>