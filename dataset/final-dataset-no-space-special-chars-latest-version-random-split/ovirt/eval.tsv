private void addSELinuxModes(org.ovirt.engine.api.model.VersionCaps version, org.ovirt.engine.core.common.businessentities.SELinuxMode[] values) { if (org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual(version, org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_5)) { version.setSelinuxModes(new org.ovirt.engine.api.model.SELinuxModes()); for (org.ovirt.engine.core.common.businessentities.SELinuxMode mode : values) { version.getSelinuxModes().getSELinuxModes().add(mode.toString().toLowerCase()); } } }	private void addSELinuxModes(org.ovirt.engine.api.model.VersionCaps version, org.ovirt.engine.api.model.SELinuxMode[] values) { if (org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual(version, org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_5)) { version.setSelinuxModes(new org.ovirt.engine.api.model.SELinuxModes()); for (org.ovirt.engine.api.model.SELinuxMode mode : values) { version.getSelinuxModes().getSELinuxModes().add(mode.value()); } } }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Reset Option") java.lang.String resetOptionVolumeTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Reset Option") java.lang.String resetOptionVolumeTitle();
private boolean executeWithoutTransaction() { boolean functionReturnValue = false; boolean exceptionOccurred = true; try { logRunningCommand(); if (hasTaskHandlers()) { getCurrentTaskHandler().execute(); } else { executeCommand(); } functionReturnValue = getSucceeded(); exceptionOccurred = false; } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { log.error(java.lang.String.format("Command %1$s throw Vdc Bll exception. With error message %2$s", getClass().getName(), e.getMessage())); if (log.isDebugEnabled()) { log.debug(java.lang.String.format("Command %1$s throw Vdc Bll exception", getClass().getName()), e); } processExceptionToClient(new org.ovirt.engine.core.common.errors.VdcFault(e, e.getVdsError().getCode())); } catch (java.lang.RuntimeException e) { processExceptionToClient(new org.ovirt.engine.core.common.errors.VdcFault(e, org.ovirt.engine.core.common.errors.VdcBllErrors.ENGINE)); log.error(java.lang.String.format("Command %1$s throw exception", getClass().getName()), e); } finally { if ((!(getReturnValue().getVdsmTaskIdList().isEmpty())) && ((org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(getCommandId())) == null)) { persistCommand(getParameters().getParentCommand(), ((getCallBack()) != null)); } if (!exceptionOccurred) { setCommandExecuted(); } if (exceptionOccurred || (!(getSucceeded()))) { clearChildAsyncTasksWithOutVdsmId(); setCommandStatus(CommandStatus.FAILED); setSucceeded(false); compensate(); } else { if (((((getTaskType()) == (org.ovirt.engine.core.common.asynctasks.AsyncTaskType.notSupported)) && (getReturnValue().getVdsmTaskIdList().isEmpty())) && ((getCallBack()) == null)) && ((commandStatus) == (org.ovirt.engine.core.compat.CommandStatus.ACTIVE))) { setCommandStatus(CommandStatus.SUCCEEDED); } cleanUpCompensationData(); } } return functionReturnValue; }	private boolean executeWithoutTransaction() { boolean functionReturnValue = false; boolean exceptionOccurred = true; try { logRunningCommand(); if (hasTaskHandlers()) { getCurrentTaskHandler().execute(); } else { executeCommand(); } functionReturnValue = getSucceeded(); exceptionOccurred = false; } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { log.error(java.lang.String.format("Command %1$s throw Vdc Bll exception. With error message %2$s", getClass().getName(), e.getMessage())); if (log.isDebugEnabled()) { log.debug(java.lang.String.format("Command %1$s throw Vdc Bll exception", getClass().getName()), e); } processExceptionToClient(new org.ovirt.engine.core.common.errors.VdcFault(e, e.getVdsError().getCode())); } catch (java.lang.RuntimeException e) { processExceptionToClient(new org.ovirt.engine.core.common.errors.VdcFault(e, org.ovirt.engine.core.common.errors.VdcBllErrors.ENGINE)); log.error(java.lang.String.format("Command %1$s throw exception", getClass().getName()), e); } finally { if (!exceptionOccurred) { setCommandExecuted(); } if (exceptionOccurred || (!(getSucceeded()))) { clearChildAsyncTasksWithOutVdsmId(); setCommandStatus(CommandStatus.FAILED); setSucceeded(false); compensate(); } else { if (((((getTaskType()) == (org.ovirt.engine.core.common.asynctasks.AsyncTaskType.notSupported)) && (getReturnValue().getVdsmTaskIdList().isEmpty())) && ((getCallBack()) == null)) && ((commandStatus) == (org.ovirt.engine.core.compat.CommandStatus.ACTIVE))) { setCommandStatus(CommandStatus.SUCCEEDED); } cleanUpCompensationData(); } } return functionReturnValue; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.storage.domains.UpdateStorageDomainCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_UPDATE_STORAGE_DOMAIN : org.ovirt.engine.core.common.AuditLogType.USER_UPDATE_STORAGE_DOMAIN_FAILED; }	@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_UPDATE_STORAGE_DOMAIN : org.ovirt.engine.core.common.AuditLogType.USER_UPDATE_STORAGE_DOMAIN_FAILED; }
public void testCannotUpdateOSNotSupportVirtioScsi() { prepareVmToPassValidate(); group.setCompatibilityVersion(Version.v4_0); when(command.isVirtioScsiEnabledForVm(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(true); when(osRepository.getDiskInterfaces(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(new java.util.ArrayList(java.util.Collections.singletonList("VirtIO"))); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI); }	public void testCannotUpdateOSNotSupportVirtioScsi() { prepareVmToPassValidate(); group.setCompatibilityVersion(Version.v4_0); when(command.isVirtioScsiEnabledForVm(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(true); when(osRepository.getDiskInterfaces(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(java.util.Collections.singletonList("VirtIO")); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI); }
public void setHighlyAvailableIsActive(boolean value) { mVdsStatistics.setHighlyAvailableIsActive(value); }	public void setHighlyAvailableIsActive(boolean value) { vdsStatistics.setHighlyAvailableIsActive(value); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.ProcessOvfUpdateForStoragePoolCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.OVF_UPDATE, EngineMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.ProcessOvfUpdateForStoragePoolCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.OVF_UPDATE, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
@org.junit.Test public void diskImagesDontExist() { doReturn(false).when(validator).isDiskExists(disk1.getId()); doReturn(false).when(validator).isDiskExists(disk2.getId()); assertThat(validator.diskImagesNotExist(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessages.ACTION_TYPE_FAILED_DISKS_NOT_EXIST)); }	@org.junit.Test public void diskImagesDontExist() { doReturn(false).when(validator).isDiskExists(disk1.getId()); doReturn(false).when(validator).isDiskExists(disk2.getId()); assertThat(validator.diskImagesNotExist(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST)); }
@org.junit.Test public void unmanagedVlanAddedToNic() { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic("nic0", null); mockExistingIfaces(nic); java.lang.String networkName = "net"; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(nic, createVlan(nic.getName(), 100, networkName))); validateAndExpectViolation(helper, EngineMessages.NETWORKS_DONT_EXIST_IN_CLUSTER, networkName); }	@org.junit.Test public void unmanagedVlanAddedToNic() { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic("nic0", null); mockExistingIfaces(nic); java.lang.String networkName = "net"; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(nic, createVlan(nic.getName(), 100, networkName))); validateAndExpectViolation(helper, EngineMessage.NETWORKS_DONT_EXIST_IN_CLUSTER, networkName); }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { java.lang.Object[] array = ((java.lang.Object[]) (result.getState())); org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel) (array[0])); org.ovirt.engine.core.common.businessentities.StorageDomain sdToAdd1 = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (array[1])); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = result.getReturnValue(); boolean success = (returnVal != null) && (returnVal.getSucceeded()); if (success) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (storageListModel.getWindow())); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = model.getDataCenter().getSelectedItem(); if (!(dataCenter.getId().equals(StorageModel.UnassignedDataCenterId))) { storageListModel.attachStorageToDataCenter(sdToAdd1.getId(), dataCenter.getId(), model.getActivateDomain().getEntity()); onFinish(storageListModel.context, true, storageListModel.storageModel, null); } else { postImportFileStorage(storageListModel.context, true, storageListModel.storageModel, null); } } else { postImportFileStorage(storageListModel.context, false, storageListModel.storageModel, ""); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.RemoveStorageServerConnection, new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase(fileConnection, hostId), null, this); } }	@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { java.lang.Object[] array = ((java.lang.Object[]) (result.getState())); org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel) (array[0])); org.ovirt.engine.core.common.businessentities.StorageDomain sdToAdd1 = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (array[1])); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = result.getReturnValue(); boolean success = (returnVal != null) && (returnVal.getSucceeded()); if (success) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (storageListModel.getWindow())); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = model.getDataCenter().getSelectedItem(); if (!(dataCenter.getId().equals(StorageModel.UnassignedDataCenterId))) { storageListModel.attachStorageToDataCenter(sdToAdd1.getId(), dataCenter.getId(), model.getActivateDomain().getEntity()); onFinish(storageListModel.context, true, storageListModel.storageModel, null); } else { postImportFileStorage(storageListModel.context, true, storageListModel.storageModel, null); } } else { postImportFileStorage(storageListModel.context, false, storageListModel.storageModel, ""); cleanConnection(fileConnection, hostId); } }
public java.util.List<java.lang.Long> allocateAvailableMacs(int numberOfMacs) { if ((getAvailableMacsCount()) < numberOfMacs) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineErrors.MAC_POOL_NO_MACS_LEFT); } final java.util.List<java.lang.Long> result = new java.util.ArrayList<>(numberOfMacs); int remainingMacs = numberOfMacs; while (remainingMacs > 0) { final org.ovirt.engine.core.bll.network.macpoolmanager.Range rangeWithAvailableMac = getRangeWithAvailableMac(); org.apache.commons.lang.Validate.notNull(rangeWithAvailableMac); final java.util.List<java.lang.Long> allocatedMacs = rangeWithAvailableMac.allocateMacs(remainingMacs); remainingMacs -= allocatedMacs.size(); result.addAll(allocatedMacs); } return result; }	public java.util.List<java.lang.Long> allocateAvailableMacs(int numberOfMacs) { if ((getAvailableMacsCount()) < numberOfMacs) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.MAC_POOL_NO_MACS_LEFT); } final java.util.List<java.lang.Long> result = new java.util.ArrayList<>(numberOfMacs); int remainingMacs = numberOfMacs; while (remainingMacs > 0) { final org.ovirt.engine.core.bll.network.macpoolmanager.Range rangeWithAvailableMac = getRangeWithAvailableMac(); org.apache.commons.lang.Validate.notNull(rangeWithAvailableMac); final java.util.List<java.lang.Long> allocatedMacs = rangeWithAvailableMac.allocateMacs(remainingMacs); remainingMacs -= allocatedMacs.size(); result.addAll(allocatedMacs); } return result; }
private boolean stopSuspendedVm() { boolean returnVal = false; org.ovirt.engine.core.bll.StopVmCommandBase.setVm(null); org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getstatus(); org.ovirt.engine.core.bll.StopVmCommandBase.getVm().setstatus(VMStatus.ImageLocked); if ((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getstatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked)) { updateVmStatus(VMStatus.ImageLocked); if ((!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(org.ovirt.engine.core.bll.StopVmCommandBase.getVm().gethibernation_vol_handle()))) && (handleHibernatedVm(org.ovirt.engine.core.bll.StopVmCommandBase.getActionType(), false))) { returnVal = true; } else { updateVmStatus(vmStatus); } } return returnVal; }	private boolean stopSuspendedVm() { boolean returnVal = false; org.ovirt.engine.core.bll.StopVmCommandBase.setVm(null); org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getstatus(); if ((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getstatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked)) { updateVmStatus(VMStatus.ImageLocked); if ((!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(org.ovirt.engine.core.bll.StopVmCommandBase.getVm().gethibernation_vol_handle()))) && (handleHibernatedVm(org.ovirt.engine.core.bll.StopVmCommandBase.getActionType(), false))) { returnVal = true; } else { updateVmStatus(vmStatus); } } return returnVal; }
public boolean isFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(isFieldUpdatable(name))) { if (((fieldContainer != null) && ((container) != null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values != null) ? values.contains(name) : false; if ((!returnValue) && hotsetEnabled) { returnValue = isHotSetField(name); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn("field '{}' can not be updated when status is '{}'", name, status); } } return returnValue; }	public boolean isFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(isFieldUpdatable(name))) { if (((fieldContainer != null) && ((container) != null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values != null) ? values.contains(name) : false; if ((!returnValue) && hotsetEnabled) { returnValue = isHotSetField(name); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn("Field '{}' can not be updated when status is '{}'", name, status); } } return returnValue; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to override the current opened Remote Log-In session") java.lang.String allowReconnectToVmRoleTreeTooltip();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to override the currently opened remote console session") java.lang.String allowReconnectToVmRoleTreeTooltip();
public int getMedia_id() { return media_id; }	public int getMediaId() { return mediaId; }
public void isClusterEmpty(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid clusterId) { runBooleanQueryByEntityId(VdcQueryType.IsClusterEmpty, aQuery, clusterId); }	public void isClusterEmpty(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid clusterId) { runQueryByIdParameter(VdcQueryType.IsClusterEmpty, aQuery, clusterId); }
@org.junit.Before public void setUp() { lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setId("lun1"); lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setId("lun2"); lun3 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun3.setId("lun3"); }	@org.junit.Before public void setUp() { lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUNId("lun1"); lun1.setDiskId(org.ovirt.engine.core.compat.Guid.newGuid()); lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUNId("lun2"); lun2.setDiskId(org.ovirt.engine.core.compat.Guid.newGuid()); lun3 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun3.setLUNId("lun3"); lun3.setDiskId(org.ovirt.engine.core.compat.Guid.newGuid()); }
@java.lang.Override public void setMainTabSelectedItem(org.ovirt.engine.core.common.businessentities.VDSGroup selectedItem) { org.ovirt.engine.ui.webadmin.section.main.view.tab.cluster.SubTabClusterGeneralView.Driver.driver.edit(getDetailModel()); formBuilder.update(getDetailModel()); if (selectedItem.supportsVirtService()) { if (selectedItem.getselection_algorithm().equals(VdsSelectionAlgorithm.PowerSave)) { setVisibility(true); leftSlider.setValue(selectedItem.getlow_utilization()); rightSlider.setValue(selectedItem.gethigh_utilization()); policyTimeLabel.setText((((((constants.clusterPolicyForTimeLabel()) + " ") + (selectedItem.getcpu_over_commit_duration_minutes())) + " ") + (constants.clusterPolicyMinTimeLabel()))); policyFieldLabel.setText(constants.clusterPolicyPowSaveLabel()); } else if (selectedItem.getselection_algorithm().equals(VdsSelectionAlgorithm.EvenlyDistribute)) { setVisibility(true); leftSlider.setVisible(false); leftDummySlider.setVisible(true); rightSlider.setValue(selectedItem.gethigh_utilization()); policyTimeLabel.setText((((((constants.clusterPolicyForTimeLabel()) + " ") + (selectedItem.getcpu_over_commit_duration_minutes())) + " ") + (constants.clusterPolicyMinTimeLabel()))); policyFieldLabel.setText(constants.clusterPolicyEvenDistLabel()); } else { setVisibility(false); policyFieldLabel.setText(constants.clusterPolicyNoneLabel()); } } policyPanel.setVisible(selectedItem.supportsVirtService()); volumeSummaryPanel.setVisible(selectedItem.supportsGlusterService()); }	@java.lang.Override public void setMainTabSelectedItem(org.ovirt.engine.core.common.businessentities.VDSGroup selectedItem) { driver.edit(getDetailModel()); form.update(); }
@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { return; } super.syncSearch(); org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> domains = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue(); for (org.ovirt.engine.core.common.businessentities.StorageDomain domain : domains) { java.lang.String guid = ((domain.getStoragePoolId()) != null) ? domain.getStoragePoolId().toString() : Guid.Empty.toString(); domain.setQueryableId((((domain.getId()) + "_") + guid)); } setItems(domains); setIsEmpty(((getItems().size()) == 0)); } }; org.ovirt.engine.core.common.queries.IdQueryParameters tempVar = new org.ovirt.engine.core.common.queries.IdQueryParameters(getEntity().getId()); tempVar.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainListById, tempVar, _asyncQuery); }	@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { return; } super.syncSearch(); org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> domains = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue(); for (org.ovirt.engine.core.common.businessentities.StorageDomain domain : domains) { domain.setId(domain.getStoragePoolId()); } java.util.Collections.sort(domains, new org.ovirt.engine.ui.uicommonweb.Linq.StorageDomainByPoolNameComparator()); setItems(domains); setIsEmpty(((getItems().size()) == 0)); } }; org.ovirt.engine.core.common.queries.IdQueryParameters tempVar = new org.ovirt.engine.core.common.queries.IdQueryParameters(getEntity().getId()); tempVar.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainListById, tempVar, _asyncQuery); }
private static boolean isVmRunningOnHost(org.ovirt.engine.core.compat.Guid hostId) { return !(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().getAllRunningForVds(hostId).isEmpty()); }	private static boolean isVmRunningOnHost(org.ovirt.engine.core.compat.Guid hostId) { return !(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDao().getAllRunningForVds(hostId).isEmpty()); }
public void setDisablePowerManagementPolicy(boolean disablePowerManagementPolicy) { mVdsDynamic.setDisablePowerManagementPolicy(disablePowerManagementPolicy); }	public void setDisablePowerManagementPolicy(boolean disablePowerManagementPolicy) { mVdsStatic.setDisablePowerManagementPolicy(disablePowerManagementPolicy); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ("IsLinuxOS".equals(propName)) { changeApplicationLevelVisibility(linuxBootOptionsPanel, vm.getIsLinuxOS()); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ("IsLinuxOS".equals(propName)) { changeApplicationLevelVisibility(linuxBootOptionsPanel, vm.getIsLinuxOS()); } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Erratum.class, to = org.ovirt.engine.api.model.Erratum.class) public static org.ovirt.engine.api.model.Erratum map(org.ovirt.engine.api.model.Erratum model, org.ovirt.engine.core.common.businessentities.Erratum template) { org.ovirt.engine.core.common.businessentities.Erratum entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.Erratum(); if (model.isSetId()) { entity.setId(model.getId()); } if (model.isSetTitle()) { entity.setTitle(model.getTitle()); } if (model.isSetSummary()) { entity.setSummary(model.getSummary()); } if (model.isSetSolution()) { entity.setSolution(model.getSolution()); } if (model.isSetDescription()) { entity.setDescription(model.getDescription()); } if (model.isSetIssued()) { entity.setIssued(model.getIssued().toGregorianCalendar().getTime()); } if (model.isSetSeverity()) { entity.setSeverity(org.ovirt.engine.core.common.businessentities.Erratum.ErrataSeverity.byDescription(model.getSeverity())); } if (model.isSetType()) { entity.setType(org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.byDescription(model.getType())); } if ((model.isSetPackages()) && (!(model.getPackages().getPackages().isEmpty()))) { entity.setPackages(new java.util.ArrayList<java.lang.String>(model.getPackages().getPackages().size())); for (java.lang.Package p : model.getPackages().getPackages()) { entity.getPackages().add(p.getName()); } } return entity; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.KatelloErratum.class, to = org.ovirt.engine.core.common.businessentities.Erratum.class) public static org.ovirt.engine.core.common.businessentities.Erratum map(org.ovirt.engine.api.model.KatelloErratum model, org.ovirt.engine.core.common.businessentities.Erratum template) { org.ovirt.engine.core.common.businessentities.Erratum entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.Erratum(); if (model.isSetId()) { entity.setId(hex2string(model.getId())); } if (model.isSetTitle()) { entity.setTitle(model.getTitle()); } if (model.isSetSummary()) { entity.setSummary(model.getSummary()); } if (model.isSetSolution()) { entity.setSolution(model.getSolution()); } if (model.isSetDescription()) { entity.setDescription(model.getDescription()); } if (model.isSetIssued()) { entity.setIssued(model.getIssued().toGregorianCalendar().getTime()); } if (model.isSetSeverity()) { entity.setSeverity(org.ovirt.engine.core.common.businessentities.Erratum.ErrataSeverity.byDescription(model.getSeverity())); } if (model.isSetType()) { entity.setType(org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.byDescription(model.getType())); } if ((model.isSetPackages()) && (!(model.getPackages().getPackages().isEmpty()))) { entity.setPackages(new java.util.ArrayList<java.lang.String>(model.getPackages().getPackages().size())); for (java.lang.Package p : model.getPackages().getPackages()) { entity.getPackages().add(p.getName()); } } return entity; }
public org.ovirt.engine.core.common.businessentities.UnmanagedNetwork getUnmanagedNetworkByName(java.lang.String networkName) { for (org.ovirt.engine.core.common.businessentities.UnmanagedNetwork unmanagedNetwork : getUnmanagedNetworks()) { if (unmanagedNetwork.getNetworkName().equals(networkName)) { return unmanagedNetwork; } } return null; }	public org.ovirt.engine.core.common.businessentities.UnmanagedNetwork getUnmanagedNetwork(org.ovirt.engine.core.compat.Guid hostId, java.lang.String networkName) { for (org.ovirt.engine.core.common.businessentities.UnmanagedNetwork unmanagedNetwork : getUnmanagedNetworks(hostId)) { if (unmanagedNetwork.getNetworkName().equals(networkName)) { return unmanagedNetwork; } } return null; }
@java.lang.Override protected void onEntityChanged() { if ((getEntity()) != null) { org.ovirt.engine.core.common.businessentities.VM vm = getEntity().getVm(); setItems(vm.getInterfaces()); } else { setItems(null); } }	@java.lang.Override protected void onEntityChanged() { if ((getEntity()) != null) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (getEntity())); setItems(vm.getInterfaces()); } else { setItems(null); } }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("LUN device is already in use.") java.lang.String alreadyInUseLUN();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("LUN includes partitions") java.lang.String partitionedLUN();
@com.google.gwt.i18n.client.Constants.DefaultStringValue("New Role") java.lang.String newRoleTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("New Role") java.lang.String newRoleTitle();
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetEquallyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); assertThat(factory.createDecoratedPool(macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); assertThat(factory.createDecoratedPool(macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(macPoolDecoratorA), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor.capture()); java.util.List<java.util.concurrent.locks.ReentrantReadWriteLock> capturesValues = captor.getAllValues(); assertEquals(capturesValues.get(0), capturesValues.get(1)); }	@org.junit.Test public void testDifferenlyDecoratedPoolsUseSameLock() { multipleDecoratorsUsesSameLock(macPoolDecoratorA, macPoolDecoratorB); }
public java.lang.String getDisplayValue() { if (isDefault()) { final java.lang.String defaultTimeZoneKey = ((java.lang.String) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(timeZoneType.getDefaultTimeZoneConfigurationKey()))); return timeZoneType.getTimeZoneList().get(defaultTimeZoneKey); } else { return timeZoneType.getTimeZoneList().get(timeZoneKey); } }	public java.lang.String getDisplayValue() { if (isDefault()) { final java.lang.String defaultTimeZoneKey = ((java.lang.String) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(timeZoneType.getDefaultTimeZoneConfigurationKey()))); if (!(timeZoneType.getTimeZoneList().containsKey(defaultTimeZoneKey))) { timeZoneKey = timeZoneType.getUltimateFallback(); } return timeZoneType.getTimeZoneList().get(defaultTimeZoneKey); } else { return timeZoneType.getTimeZoneList().get(timeZoneKey); } }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(org.ovirt.engine.core.bll.pm.VAR__ACTION__STOP); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(org.ovirt.engine.core.bll.pm.VAR__ACTION__STOP); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.extensions.mgr.ExtensionProxy> extensions = getExtensionsManager().getExtensionsByService(org.ovirt.engine.api.extensions.aaa.Authz.class.getName()); java.util.List<java.lang.String> names = new java.util.ArrayList(extensions.size()); for (org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension : extensions) { names.add(org.ovirt.engine.core.aaa.AuthzUtils.getName(extension)); } if (org.ovirt.engine.core.bll.GetDomainListQuery.getParameters().getFilterInternalDomain()) { names.remove(org.ovirt.engine.core.bll.GetDomainListQuery.INTERNAL); } java.util.Collections.sort(names); org.ovirt.engine.core.bll.GetDomainListQuery.getQueryReturnValue().setReturnValue(names); }	@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.extensions.mgr.ExtensionProxy> extensions = getExtensionsManager().getExtensionsByService(org.ovirt.engine.api.extensions.aaa.Authz.class.getName()); java.util.List<java.lang.String> names = new java.util.ArrayList(extensions.size()); for (org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension : extensions) { names.add(org.ovirt.engine.core.aaa.AuthzUtils.getName(extension)); } java.util.Collections.sort(names); org.ovirt.engine.core.bll.GetDomainListQuery.getQueryReturnValue().setReturnValue(names); }
@org.junit.Test public void testInterfaceByNameExistsWhenInterfaceIsNull() throws java.lang.Exception { assertThat(new org.ovirt.engine.core.bll.validator.HostInterfaceValidator(null).interfaceByNameExists(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessages.HOST_NETWORK_INTERFACE_NOT_EXIST)); }	@org.junit.Test public void testInterfaceByNameExistsWhenInterfaceIsNull() throws java.lang.Exception { assertThat(new org.ovirt.engine.core.bll.validator.HostInterfaceValidator(null).interfaceByNameExists(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST)); }
private java.lang.String getMigrationNetworkIp() { org.ovirt.engine.core.common.businessentities.network.Network migrationNetwork = null; java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> allNetworksInCluster = org.ovirt.engine.core.bll.MigrateVmCommand.getNetworkDao().getAllForCluster(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getClusterId()); for (org.ovirt.engine.core.common.businessentities.network.Network tempNetwork : allNetworksInCluster) { if (tempNetwork.getCluster().isMigration()) { migrationNetwork = tempNetwork; break; } } if (migrationNetwork != null) { final java.lang.String migrationDestinationIpv4Address = findMigrationIpAddress(migrationNetwork, VdsNetworkInterface::getIpv4Address); if (migrationDestinationIpv4Address != null) { return migrationDestinationIpv4Address; } final java.lang.String migrationDestinationIpv6Address = findMigrationIpAddress(migrationNetwork, VdsNetworkInterface::getIpv6Address); if (migrationDestinationIpv6Address != null) { return migrationDestinationIpv6Address; } } return null; }	private java.lang.String getMigrationNetworkIp() { org.ovirt.engine.core.common.businessentities.network.Network migrationNetwork = null; java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> allNetworksInCluster = org.ovirt.engine.core.bll.MigrateVmCommand.getNetworkDao().getAllForCluster(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getClusterId()); for (org.ovirt.engine.core.common.businessentities.network.Network tempNetwork : allNetworksInCluster) { if (tempNetwork.getCluster().isMigration()) { migrationNetwork = tempNetwork; break; } } if (migrationNetwork != null) { final java.lang.String migrationDestinationIpv4Address = findValidMigrationIpAddress(migrationNetwork, VdsNetworkInterface::getIpv4Address); if (migrationDestinationIpv4Address != null) { return migrationDestinationIpv4Address; } final java.lang.String migrationDestinationIpv6Address = findValidMigrationIpAddress(migrationNetwork, VdsNetworkInterface::getIpv6Address); if (migrationDestinationIpv6Address != null) { return migrationDestinationIpv6Address; } } return null; }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The Storage Pool has running tasks.") java.lang.String CANNOT_REINIT_SPM_STORAGE_POOL_HAS_RUNNING_TASKS();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The Storage Pool has running tasks.") java.lang.String CANNOT_FORCE_SELECT__SPM_STORAGE_POOL_HAS_RUNNING_TASKS();
private java.lang.String getMigrationNetworkIp() { if (!(org.ovirt.engine.core.common.FeatureSupported.migrationNetwork(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getEffectiveCompatibilityVersion()))) { return null; } org.ovirt.engine.core.common.businessentities.network.Network migrationNetwork = null; java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> allNetworksInCluster = org.ovirt.engine.core.bll.MigrateVmCommand.getNetworkDao().getAllForCluster(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getVdsGroupId()); for (org.ovirt.engine.core.common.businessentities.network.Network tempNetwork : allNetworksInCluster) { if (tempNetwork.getCluster().isMigration()) { migrationNetwork = tempNetwork; break; } } if (migrationNetwork != null) { if ((getMigrationNetworkAddress(org.ovirt.engine.core.bll.MigrateVmCommand.getVds().getId(), migrationNetwork.getName())) == null) { return null; } return getMigrationNetworkAddress(getDestinationVds().getId(), migrationNetwork.getName()); } return null; }	private java.lang.String getMigrationNetworkIp() { if (!(org.ovirt.engine.core.common.FeatureSupported.migrationNetwork(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getCompatibilityVersion()))) { return null; } org.ovirt.engine.core.common.businessentities.network.Network migrationNetwork = null; java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> allNetworksInCluster = org.ovirt.engine.core.bll.MigrateVmCommand.getNetworkDao().getAllForCluster(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getClusterId()); for (org.ovirt.engine.core.common.businessentities.network.Network tempNetwork : allNetworksInCluster) { if (tempNetwork.getCluster().isMigration()) { migrationNetwork = tempNetwork; break; } } if (migrationNetwork != null) { if ((getMigrationNetworkAddress(org.ovirt.engine.core.bll.MigrateVmCommand.getVds().getId(), migrationNetwork.getName())) == null) { return null; } return getMigrationNetworkAddress(getDestinationVds().getId(), migrationNetwork.getName()); } return null; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn setVolumeGeneration(java.lang.String jobId, java.util.Map<?, ?> volumeInfo);	org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn updateVolume(java.lang.String jobId, java.util.Map<?, ?> volumeInfo, java.util.Map<?, ?> volumeAttributes);
public static java.lang.String renderVmNamesList(java.util.List<java.lang.String> names) { return names.stream().collect(java.util.stream.Collectors.joining(", ")); }	public static java.lang.String renderVmNamesList(java.util.List<java.lang.String> names) { return java.lang.String.join(", ", names); }
protected void setForeignMenuData(org.ovirt.engine.ui.uicommonweb.restapi.HasForeignMenuData nativeImpl, java.lang.String engineCertificate) { nativeImpl.setEngineHost(Window.Location.getHost()); nativeImpl.setVmId(getEntity().getId()); nativeImpl.setTrustStore(engineCertificate); nativeImpl.setAdmin(org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoggedInUser().isAdmin()); }	protected void setForeignMenuData(org.ovirt.engine.ui.uicommonweb.restapi.HasForeignMenuData nativeImpl) { nativeImpl.setEngineHost(Window.Location.getHost()); nativeImpl.setVmId(getEntity().getId()); nativeImpl.setAdmin(org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoggedInUser().isAdmin()); }
@java.lang.Override public java.lang.Void runInTransaction() { getImageStorageDomainMapDao().remove(new org.ovirt.engine.core.common.businessentities.ImageStorageDomainMapId(getParameters().getImageId(), getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.ImagesHandler.updateAllDiskImageSnapshotsStatusWithCompensation(getRelevantDiskImage().getId(), getRelevantDiskImage().getImageStatus(), null, null); return null; }	@java.lang.Override public java.lang.Void runInTransaction() { getImageStorageDomainMapDao().remove(new org.ovirt.engine.core.common.businessentities.ImageStorageDomainMapId(getParameters().getImageId(), getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.ImagesHandler.updateAllDiskImageSnapshotsStatus(getRelevantDiskImage().getId(), getRelevantDiskImage().getImageStatus()); return null; }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getUnderUtilizedCPUHosts(java.util.Collection<org.ovirt.engine.core.common.businessentities.VDS> relevantHosts, final int lowUtilization, final int minVmCount, final int cpuOverCommitDurationMinutes) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> underUtilizedHosts = org.ovirt.engine.core.utils.linq.LinqUtils.filter(relevantHosts, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.VDS>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.VDS p) { return ((((p.getUsageCpuPercent()) + (org.ovirt.engine.core.bll.scheduling.policyunits.CpuAndMemoryBalancingPolicyUnit.calcSpmCpuConsumption(p))) < lowUtilization) && ((p.getVmCount()) >= minVmCount)) && (((p.getCpuOverCommitTimestamp()) == null) || (((getTime().getTime()) - (p.getCpuOverCommitTimestamp().getTime())) < (java.util.concurrent.TimeUnit.MINUTES.toMillis(cpuOverCommitDurationMinutes)))); } }); if ((underUtilizedHosts.size()) > 1) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getVdsGroupDao().get(underUtilizedHosts.get(0).getVdsGroupId()); java.util.Collections.sort(underUtilizedHosts, new org.ovirt.engine.core.bll.scheduling.utils.VdsCpuUsageComparator(((cluster != null) && (cluster.getCountThreadsAsCores())))); } return underUtilizedHosts; }	protected java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getUnderUtilizedCPUHosts(java.util.Collection<org.ovirt.engine.core.common.businessentities.VDS> relevantHosts, final int lowUtilization, final int minVmCount, final int cpuOverCommitDurationMinutes) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> underUtilizedHosts = relevantHosts.stream().filter(( p) -> ((((p.getUsageCpuPercent()) + (calcSpmCpuConsumption(p))) < lowUtilization) && ((p.getVmCount()) >= minVmCount)) && (((p.getCpuOverCommitTimestamp()) == null) || (((getTime().getTime()) - (p.getCpuOverCommitTimestamp().getTime())) >= (TimeUnit.MINUTES.toMillis(cpuOverCommitDurationMinutes))))).collect(java.util.stream.Collectors.toList()); if ((underUtilizedHosts.size()) > 1) { org.ovirt.engine.core.common.businessentities.Cluster cluster = getClusterDao().get(underUtilizedHosts.get(0).getClusterId()); java.util.Collections.sort(underUtilizedHosts, new org.ovirt.engine.core.bll.scheduling.utils.VdsCpuUsageComparator(((cluster != null) && (cluster.getCountThreadsAsCores())))); } return underUtilizedHosts; }
@java.lang.Override public void templateWithVersion_SelectedItemChanged() { super.templateWithVersion_SelectedItemChanged(); org.ovirt.engine.core.common.businessentities.VmTemplate template = ((getModel().getTemplateWithVersion().getSelectedItem()) != null) ? getModel().getTemplateWithVersion().getSelectedItem().getTemplateVersion() : null; if (template == null) { return; } setupWindowModelFrom(template); doChangeDefautlHost(template.getDedicatedVmForVds()); org.ovirt.engine.core.compat.Guid dedicatedHostsGuid = (template.getDedicatedVmForVdsList().isEmpty()) ? null : template.getDedicatedVmForVdsList().get(0); doChangeDefautlHost(dedicatedHostsGuid); core : enable = $missing$; org.ovirt.engine.ui.uicommonweb.models.vms.pinning to; org.ovirt.engine.ui.uicommonweb.models.vms.hosts updateRngDevice = template.getId(); getModel().getCustomPropertySheet().deserialize(template.getCustomProperties()); }	@java.lang.Override public void templateWithVersion_SelectedItemChanged() { super.templateWithVersion_SelectedItemChanged(); org.ovirt.engine.core.common.businessentities.VmTemplate template = ((getModel().getTemplateWithVersion().getSelectedItem()) != null) ? getModel().getTemplateWithVersion().getSelectedItem().getTemplateVersion() : null; if (template == null) { return; } setupWindowModelFrom(template); doChangeDefautlHost(template.fetchDedicatedVmForSingleHost()); updateRngDevice(template.getId()); getModel().getCustomPropertySheet().deserialize(template.getCustomProperties()); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Shut down all VMs before changing the cluster version.") java.lang.String cannotClusterVersionChangeWithActiveVm();	java.lang.String cannotClusterVersionChangeWithActiveVm();
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { if (org.ovirt.engine.core.bll.ShutdownVmCommand.shouldSkipCommandExecutionCached()) { return org.ovirt.engine.core.bll.ShutdownVmCommand.logCommandExecutionSkipped("Shutdown VM"); } if (org.ovirt.engine.core.bll.ShutdownVmCommand.getSuspendedVm()) { if (!(org.ovirt.engine.core.bll.ShutdownVmCommand.getSucceeded())) { return org.ovirt.engine.core.common.AuditLogType.USER_STOP_SUSPENDED_VM_FAILED; } return (org.ovirt.engine.core.bll.ShutdownVmCommand.getReason()) == null ? org.ovirt.engine.core.common.AuditLogType.USER_STOP_SUSPENDED_VM : org.ovirt.engine.core.common.AuditLogType.USER_STOP_SUSPENDED_VM_WITH_REASON; } if (!(org.ovirt.engine.core.bll.ShutdownVmCommand.getSucceeded())) { return org.ovirt.engine.core.common.AuditLogType.USER_FAILED_SHUTDOWN_VM; } return (org.ovirt.engine.core.bll.ShutdownVmCommand.getReason()) == null ? org.ovirt.engine.core.common.AuditLogType.USER_INITIATED_SHUTDOWN_VM : org.ovirt.engine.core.common.AuditLogType.USER_INITIATED_SHUTDOWN_VM_WITH_REASON; }	@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { if (org.ovirt.engine.core.bll.ShutdownVmCommand.shouldSkipCommandExecutionCached()) { return org.ovirt.engine.core.bll.ShutdownVmCommand.logCommandExecutionSkipped("Shutdown VM"); } if (org.ovirt.engine.core.bll.ShutdownVmCommand.getSuspendedVm()) { return org.ovirt.engine.core.bll.ShutdownVmCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_STOP_SUSPENDED_VM : org.ovirt.engine.core.common.AuditLogType.USER_STOP_SUSPENDED_VM_FAILED; } else { return org.ovirt.engine.core.bll.ShutdownVmCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_INITIATED_SHUTDOWN_VM : org.ovirt.engine.core.common.AuditLogType.USER_FAILED_SHUTDOWN_VM; } }
private void queryNetworkAttachments() { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.setModel(this); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValueObj) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValueObj)); java.lang.Object returnValue2 = returnValue.getReturnValue(); hostSetupNetworksParametersData.newOrModifiedNetworkAttachments = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>) (returnValue2)); queryVfsConfig(); } }; org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters(vds.getId()); params.setRefresh(false); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetNetworkAttachmentsByHostId, params, asyncQuery); }	private void queryNetworkAttachments() { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.setModel(this); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValueObj) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValueObj)); java.lang.Object returnValue2 = returnValue.getReturnValue(); hostSetupNetworksParametersData.getNetworkAttachments().addAll(((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>) (returnValue2))); queryVfsConfig(); } }; org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters(vds.getId()); params.setRefresh(false); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetNetworkAttachmentsByHostId, params, asyncQuery); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterHookUpdate(java.lang.String glusterCommand, java.lang.String stage, java.lang.String hookName, java.lang.String content, java.lang.String checksum) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterHook.update").withParameter("glusterCmd", glusterCommand).withParameter("hookLevel", stage).withParameter("hookName", hookName).withParameter("hookData", content).withParameter("hookMd5Sum", checksum).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterHookUpdate(java.lang.String glusterCommand, java.lang.String stage, java.lang.String hookName, java.lang.String content, java.lang.String checksum) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterHook.update").withParameter("glusterCmd", glusterCommand).withParameter("hookLevel", stage).withParameter("hookName", hookName).withParameter("hookData", content).withParameter("hookMd5Sum", checksum).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
public void setGlusterVolume(org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus glusterVolume) { this.glusterVolume = glusterVolume; for (org.ovirt.engine.ui.frontend.server.dashboard.maps.GlusterVolumeStatusMap status : org.ovirt.engine.ui.frontend.server.dashboard.maps.GlusterVolumeStatusMap.values()) { java.util.List<java.lang.String> statusValues = java.util.Arrays.asList(status.getStringValues()); glusterVolume.setStatusValues(status.name().toLowerCase(), statusValues); } }	public void setVolume(org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus volume) { this.volume = volume; for (org.ovirt.engine.ui.frontend.server.dashboard.maps.GlusterVolumeStatusMap status : org.ovirt.engine.ui.frontend.server.dashboard.maps.GlusterVolumeStatusMap.values()) { java.util.List<java.lang.String> statusValues = java.util.Arrays.asList(status.getStringValues()); volume.setStatusValues(status.name().toLowerCase(), statusValues); } }
@org.junit.Test public void lunAlreadyPartOfStorageDomains() { org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id(org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.GUIDS[0].toString()); lun1.setStorageDomainId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id(org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.GUIDS[1].toString()); lun2.setStorageDomainId(org.ovirt.engine.core.compat.Guid.newGuid()); doReturn(lunDao).when(cmd).getLunDao(); when(lunDao.getAll()).thenReturn(java.util.Arrays.asList(lun1, lun2)); java.util.List<java.lang.String> specifiedLunIds = java.util.Collections.singletonList(org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.GUIDS[0].toString()); assertTrue(cmd.isLunsAlreadyInUse(specifiedLunIds)); java.util.List<java.lang.String> messages = cmd.getReturnValue().getCanDoActionMessages(); assertEquals(messages.size(), 2); assertEquals(messages.get(0), EngineMessages.ACTION_TYPE_FAILED_LUNS_ALREADY_PART_OF_STORAGE_DOMAINS.toString()); assertEquals(messages.get(1), java.lang.String.format("$lunIds %1$s", cmd.getFormattedLunId(lun1, lun1.getStorageDomainName()))); }	@org.junit.Test public void lunAlreadyPartOfStorageDomains() { org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id(org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.GUIDS[0].toString()); lun1.setStorageDomainId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id(org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.GUIDS[1].toString()); lun2.setStorageDomainId(org.ovirt.engine.core.compat.Guid.newGuid()); doReturn(lunDao).when(cmd).getLunDao(); when(lunDao.getAll()).thenReturn(java.util.Arrays.asList(lun1, lun2)); java.util.List<java.lang.String> specifiedLunIds = java.util.Collections.singletonList(org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.GUIDS[0].toString()); assertTrue(cmd.isLunsAlreadyInUse(specifiedLunIds)); java.util.List<java.lang.String> messages = cmd.getReturnValue().getCanDoActionMessages(); assertEquals(messages.size(), 2); assertEquals(messages.get(0), EngineMessage.ACTION_TYPE_FAILED_LUNS_ALREADY_PART_OF_STORAGE_DOMAINS.toString()); assertEquals(messages.get(1), java.lang.String.format("$lunIds %1$s", cmd.getFormattedLunId(lun1, lun1.getStorageDomainName()))); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), diskImages, lunDisks, interfaces, vmBase, clusterName, affinityGroups, dbUsers); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), diskImages, lunDisks, interfaces, vmBase, clusterName, affinityGroups, dbUsers, userToRoles); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.GetDirectoryGroupsForUserQuery.getQueryReturnValue().setReturnValue(getDirectoryUser(org.ovirt.engine.core.bll.GetDirectoryGroupsForUserQuery.getDbFacade().getDbUserDao().get(org.ovirt.engine.core.bll.GetDirectoryGroupsForUserQuery.getUserID()))); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.aaa.GetDirectoryGroupsForUserQuery.getQueryReturnValue().setReturnValue(getDirectoryUser(org.ovirt.engine.core.bll.aaa.GetDirectoryGroupsForUserQuery.getDbFacade().getDbUserDao().get(org.ovirt.engine.core.bll.aaa.GetDirectoryGroupsForUserQuery.getUserID()))); }
public org.ovirt.engine.core.authentication.DirectoryEntryStatus getStatus() { return status; }	public boolean isActive() { return active; }
public void dataCenterWithClusterSelectedItemChanged() { org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithClusterEntityModel dataCenterWithClusterEntityModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithClusterEntityModel) (getModel().getDataCenterWithClustersList().getSelectedItem())); if (dataCenterWithClusterEntityModel == null) { return; } org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = dataCenterWithClusterEntityModel.getDataCenter(); if (dataCenter == null) { return; } getModel().setIsHostAvailable(((dataCenter.getstorage_pool_type()) != (org.ovirt.engine.core.common.businessentities.StorageType.LOCALFS))); if ((dataCenter.getQuotaEnforcementType()) != (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED)) { getModel().getQuota().setIsAvailable(true); } else { getModel().getQuota().setIsAvailable(false); } }	public void dataCenterWithClusterSelectedItemChanged() { org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster dataCenterWithCluster = ((org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster) (getModel().getDataCenterWithClustersList().getSelectedItem())); if (dataCenterWithCluster == null) { return; } org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = dataCenterWithCluster.getDataCenter(); if (dataCenter == null) { return; } getModel().setIsHostAvailable(((dataCenter.getstorage_pool_type()) != (org.ovirt.engine.core.common.businessentities.StorageType.LOCALFS))); if ((dataCenter.getQuotaEnforcementType()) != (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED)) { getModel().getQuota().setIsAvailable(true); } else { getModel().getQuota().setIsAvailable(false); } postDataCenterWithClusterSelectedItemChanged(); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("You are about to attach the network to all the selected clusters and to detach the network from all the unselected clusters.\n\nAre you sure you want to continue?") java.lang.String youAreAboutToAttachDetachNetworkToFromTheClustersMsg();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("You are about to attach the network to all the selected clusters and to detach the network from all the unselected clusters.\n\nAre you sure you want to continue?") java.lang.String youAreAboutToAttachDetachNetworkToFromTheClustersMsg();
@java.lang.Override protected void endSuccessfully() { super.endSuccessfully(); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(this, AuditLogType.USER_UPDATED_MOM_POLICIES); }	@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__TYPE__HOST); addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE); }
@java.lang.Override protected boolean canDoAction() { boolean retValue; org.ovirt.engine.core.compat.Guid subscriberId = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getsubscriber_id(); java.lang.String eventName = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getevent_up_name(); org.ovirt.engine.core.common.EventNotificationMethod eventNotificationMethod = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getevent_notification_method(); java.util.List<org.ovirt.engine.core.common.businessentities.event_subscriber> subscriptions = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getEventDao().getAllForSubscriber(subscriberId); if (org.ovirt.engine.core.bll.AddEventSubscriptionCommand.IsAlreadySubscribed(subscriptions, subscriberId, eventName, eventNotificationMethod)) { addCanDoActionMessage(VdcBllMessages.EN_ALREADY_SUBSCRIBED); retValue = false; } else { if (eventNotificationMethod != null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().get(subscriberId); if (user == null) { addCanDoActionMessage(VdcBllMessages.USER_MUST_EXIST_IN_DB); retValue = false; } else { retValue = ValidateAdd(eventNotificationMethod, org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber(), user); } } else { addCanDoActionMessage(VdcBllMessages.EN_UNKNOWN_NOTIFICATION_METHOD); retValue = false; } } return retValue; }	@java.lang.Override protected boolean canDoAction() { boolean retValue; org.ovirt.engine.core.compat.Guid subscriberId = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getsubscriber_id(); java.lang.String eventName = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getevent_up_name(); org.ovirt.engine.core.common.EventNotificationMethod eventNotificationMethod = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getevent_notification_method(); java.util.List<org.ovirt.engine.core.common.businessentities.event_subscriber> subscriptions = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getEventDao().getAllForSubscriber(subscriberId); if (org.ovirt.engine.core.bll.AddEventSubscriptionCommand.IsAlreadySubscribed(subscriptions, subscriberId, eventName, eventNotificationMethod)) { addCanDoActionMessage(VdcBllMessages.EN_ALREADY_SUBSCRIBED); retValue = false; } else if (!(eventExists(eventName))) { addCanDoActionMessage(VdcBllMessages.EN_UNSUPPORTED_NOTIFICATION_EVENT); retValue = false; } else { if (eventNotificationMethod != null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().get(subscriberId); if (user == null) { addCanDoActionMessage(VdcBllMessages.USER_MUST_EXIST_IN_DB); retValue = false; } else { retValue = ValidateAdd(eventNotificationMethod, org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber(), user); } } else { addCanDoActionMessage(VdcBllMessages.EN_UNKNOWN_NOTIFICATION_METHOD); retValue = false; } } return retValue; }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.RolesEntity> getForAdElement(org.ovirt.engine.core.compat.Guid id) { org.hibernate.Query query = getSession().createQuery(("from roles role, permissions perms " + ("where perms.roleId = role.id " + "and perms.adElementId = :id"))); query.setParameter("id", id); return query.list(); }	@java.lang.SuppressWarnings("unchecked") @java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Role> getForAdElement(org.ovirt.engine.core.compat.Guid id) { org.hibernate.Query query = getSession().createQuery(("from roles role, permissions perms " + ("where perms.roleId = role.id " + "and perms.adElementId = :id"))); query.setParameter("id", id); return query.list(); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The following VM is actively using the Logical Network: ${VM_NAME}. Please stop the VM and try again.") java.lang.String NETWORK_CANNOT_DETACH_NETWORK_USED_BY_SINGLE_VM();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The following Logical Network: '${networkName}' is being used by the following VM: '${vmName}'. Please stop the VM and try again.") java.lang.String SINGLE_NETWORK_CANNOT_DETACH_NETWORK_USED_BY_SINGLE_VM();
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Attached") java.lang.String attachedHost();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Attached") java.lang.String attachedHost();
private boolean isNetworkDeviceFree(org.ovirt.engine.core.common.businessentities.HostDevice networkDevice) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vfNic = getNicByPciDevice(networkDevice); return (((vfNic != null) && (!(isNetworkAttached(vfNic)))) && (!(isVlanDeviceAttached(vfNic)))) && (!(isPartOfBond(vfNic))); }	private boolean isNetworkDeviceFree(org.ovirt.engine.core.common.businessentities.HostDevice networkDevice) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vfNic = getNicByPciDevice(networkDevice); return (((vfNic != null) && (!(isNetworkAttached(vfNic)))) && (!(isVlanDeviceAttached(vfNic)))) && (!(vfNic.isPartOfBond())); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The network interface type is not compatible with the selected operating system.") java.lang.String VM_INTERFACE_VERSION_IS_NOT_SUPPORTED();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The network interface type is not compatible with the selected operating system.") java.lang.String ACTION_TYPE_FAILED_VM_INTERFACE_TYPE_IS_NOT_SUPPORTED_BY_OS();
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.scheduling.PolicyUnit object) { java.lang.String tooltipContent = null; if (object.isInternal()) { tooltipContent = constants.internalPolicyUnit(); } else { tooltipContent = constants.externalPolicyUnit(); } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(tooltipContent); }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.scheduling.PolicyUnit object) { java.lang.String tooltipContent = null; if (object.isInternal()) { tooltipContent = org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.ManagePolicyUnitPopupView.constants.internalPolicyUnit(); } else { tooltipContent = org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.ManagePolicyUnitPopupView.constants.externalPolicyUnit(); } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(tooltipContent); }
public void setPmPort(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Integer> value) { port = value; }	public void setPmPort(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Integer> value) { if (value != null) { port = value; } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.HostStorage.class, to = org.ovirt.engine.core.common.businessentities.storage.LUNs.class) public static org.ovirt.engine.core.common.businessentities.storage.LUNs map(org.ovirt.engine.api.model.HostStorage model, org.ovirt.engine.core.common.businessentities.storage.LUNs template) { org.ovirt.engine.core.common.businessentities.storage.LUNs entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.storage.LUNs(); if (model.isSetLogicalUnits()) { org.ovirt.engine.api.model.LogicalUnit logicalUnit = model.getLogicalUnits().getLogicalUnits().get(0); entity.setLUN_id(logicalUnit.getId()); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>(); connections.add(org.ovirt.engine.api.restapi.types.StorageLogicalUnitMapper.map(logicalUnit, null)); entity.setLunConnections(connections); } if (model.isSetType()) { org.ovirt.engine.api.model.StorageType storageType = org.ovirt.engine.api.model.StorageType.fromValue(model.getType()); if (storageType != null) { entity.setLunType(org.ovirt.engine.api.restapi.types.StorageDomainMapper.map(storageType, null)); } } return entity; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.HostStorage.class, to = org.ovirt.engine.core.common.businessentities.storage.LUNs.class) public static org.ovirt.engine.core.common.businessentities.storage.LUNs map(org.ovirt.engine.api.model.HostStorage model, org.ovirt.engine.core.common.businessentities.storage.LUNs template) { org.ovirt.engine.core.common.businessentities.storage.LUNs entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.storage.LUNs(); if ((model.isSetLogicalUnits()) && (model.getLogicalUnits().isSetLogicalUnits())) { org.ovirt.engine.api.model.LogicalUnit logicalUnit = model.getLogicalUnits().getLogicalUnits().get(0); entity.setLUN_id(logicalUnit.getId()); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>(); connections.add(org.ovirt.engine.api.restapi.types.StorageLogicalUnitMapper.map(logicalUnit, null)); entity.setLunConnections(connections); } if (model.isSetType()) { org.ovirt.engine.api.model.StorageType storageType = org.ovirt.engine.api.model.StorageType.fromValue(model.getType()); if (storageType != null) { entity.setLunType(org.ovirt.engine.api.restapi.types.StorageDomainMapper.map(storageType, null)); } } return entity; }
protected void addErrorMessages(org.ovirt.engine.core.common.errors.EngineMessage messageActionTypeParameter, org.ovirt.engine.core.common.errors.EngineMessage messageReason) { addValidateMessage(EngineMessage.VAR__TYPE__BOOKMARK); addValidateMessage(messageActionTypeParameter); addValidateMessage(messageReason); }	protected void addErrorMessages(org.ovirt.engine.core.common.errors.EngineMessage messageActionTypeParameter, org.ovirt.engine.core.common.errors.EngineMessage messageReason) { addValidationMessage(EngineMessage.VAR__TYPE__BOOKMARK); addValidationMessage(messageActionTypeParameter); addValidationMessage(messageReason); }
private static void mapQosToEntity(org.ovirt.engine.api.model.Qos model, org.ovirt.engine.core.common.businessentities.qos.QosBase entity) { org.ovirt.engine.api.model.QosType qosType = ((model.getType()) == null) ? (entity.getQosType()) == null ? null : org.ovirt.engine.api.restapi.types.QosTypeMapper.map(entity.getQosType(), null) : model.getType(); switch (qosType) { case STORAGE : org.ovirt.engine.api.restapi.types.QosMapper.mapStorageQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.qos.StorageQos) (entity))); break; case CPU : org.ovirt.engine.api.restapi.types.QosMapper.mapCpuQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.qos.CpuQos) (entity))); break; case NETWORK : org.ovirt.engine.api.restapi.types.QosMapper.mapNetworkQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.network.NetworkQoS) (entity))); break; case HOSTNETWORK : org.ovirt.engine.api.restapi.types.QosMapper.mapHostNetworkQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.network.HostNetworkQos) (entity))); break; default : break; } }	private static void mapQosToEntity(org.ovirt.engine.api.model.Qos model, org.ovirt.engine.core.common.businessentities.qos.QosBase entity) { org.ovirt.engine.api.model.QosType qosType = model.getType(); if ((qosType == null) && ((entity.getQosType()) != null)) { qosType = org.ovirt.engine.api.restapi.types.QosTypeMapper.map(entity.getQosType(), null); } if (qosType != null) { switch (qosType) { case STORAGE : org.ovirt.engine.api.restapi.types.QosMapper.mapStorageQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.qos.StorageQos) (entity))); break; case CPU : org.ovirt.engine.api.restapi.types.QosMapper.mapCpuQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.qos.CpuQos) (entity))); break; case NETWORK : org.ovirt.engine.api.restapi.types.QosMapper.mapNetworkQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.network.NetworkQoS) (entity))); break; case HOSTNETWORK : org.ovirt.engine.api.restapi.types.QosMapper.mapHostNetworkQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.network.HostNetworkQos) (entity))); break; default : break; } } }
@java.lang.Override protected void onBind() { super.onBind(); M listModel = listModelProvider.getModel(); listModel.getSelectedItemChangedEvent().addListener(( ev, sender, args) -> updateSelectedRows()); listModel.getSelectedItemsChangedEvent().addListener(( ev, sender, args) -> updateSelectedRows()); }	@java.lang.Override protected void onBind() { super.onBind(); M listModel = getModel(); listModel.getSelectedItemChangedEvent().addListener(( ev, sender, args) -> updateSelectedRows()); listModel.getSelectedItemsChangedEvent().addListener(( ev, sender, args) -> updateSelectedRows()); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot create bond ${bond} containing network interface ${nic}. Network interface has an unmanaged network attached.") java.lang.String ACTION_TYPE_FAILED_HOST_NETWORK_CREATE_BOND_WITH_UNMANAGED_NETWORK();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot remove unmanaged network ${network} from host, as it is an existing cluster network.") java.lang.String REMOVED_UNMANAGED_NETWORK_IS_A_CLUSTER_NETWORK();
public java.lang.String getGroupIds() { java.util.List<org.ovirt.engine.core.common.utils.ExternalId> ids = new java.util.ArrayList<org.ovirt.engine.core.common.utils.ExternalId>(mGroups.size()); for (org.ovirt.engine.core.common.businessentities.LdapGroup group : mGroups.values()) { org.ovirt.engine.core.common.utils.ExternalId id = group.getid(); if (id != null) { ids.add(id); } } java.lang.StringBuilder buffer = new java.lang.StringBuilder(); for (int i = 0; i < (ids.size()); i++) { if (i > 0) { buffer.append(','); } org.ovirt.engine.core.common.utils.ExternalId id = ids.get(i); buffer.append(id); } return buffer.toString(); }	public java.lang.String getGroupIds() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); boolean first = true; for (org.ovirt.engine.core.common.businessentities.LdapGroup group : mGroups.values()) { if (first) { first = false; } else { sb.append(","); } sb.append(group.getid()); } return sb.toString(); }
protected com.google.gwt.safehtml.shared.SafeHtml getImageSafeHtml(org.gwtbootstrap3.client.ui.constants.IconType iconType) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString((("<i class='fa " + (iconType.getCssName())) + "' style='font-size:16px;color:orange'></i>")); }	protected com.google.gwt.safehtml.shared.SafeHtml getImageSafeHtml(org.gwtbootstrap3.client.ui.constants.IconType iconType) { return org.ovirt.engine.ui.webadmin.gin.AssetProvider.getTemplates().iconTypeAlertTemplate(iconType.getCssName()); }
@java.lang.Override public void onSuccess(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase> operation, final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Frontend: sucessfully executed runAction, determining result!"); handleActionResult(actionType, parameters, result, (callback != null ? callback : org.ovirt.engine.ui.frontend.Frontend.NULLABLE_ASYNC_CALLBACK), state, showErrorDialog); org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent.fire(this, new org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent.Builder(state, true).action(true).build()); }	@java.lang.Override public void onSuccess(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase> operation, final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Frontend: sucessfully executed runAction, determining result!"); handleActionResult(actionType, parameters, result, (callback != null ? callback : org.ovirt.engine.ui.frontend.Frontend.NULLABLE_ASYNC_CALLBACK), state, showErrorDialog); fireAsyncActionSucceededEvent(state); }
public static boolean isHostedEngineDomain(final org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().getAllForStorageDomain(storageDomain.getId()); if ((vms == null) || (vms.isEmpty())) { return false; } java.util.List<org.ovirt.engine.core.compat.Guid> hostedEngineVm = vms.stream().filter(( vm) -> vm.isHostedEngine()).map(VM::getId).collect(java.util.stream.Collectors.toList()); return !(hostedEngineVm.isEmpty()); }	public boolean isHostedEngineStorageDomain(final org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = vmDao.getAllForStorageDomain(storageDomain.getId()); if (vms == null) { return false; } return vms.stream().filter(VM::isHostedEngine).findAny().isPresent(); }
@java.lang.Override public java.lang.String getOldName() { return oldVm.getVmName(); }	@java.lang.Override public java.lang.String getEntityOldName() { return oldVm.getVmName(); }
@java.lang.Override protected void readOsSection(XmlNode section) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(section.Attributes.get("ovf:id").getValue())); XmlNode node = section.SelectSingleNode("Description"); if (node != null) { if (node.InnerText.equals(java.lang.String.valueOf(OsRepository.OLD_OTHER_ID))) { node.InnerText = java.lang.String.valueOf(OsRepository.DEFAULT_OS); } _vmTemplate.setOsId(osRepository.getOsIdByUniqueName(node.InnerText)); } _vmTemplate.setArchitecture(ArchitectureType.x86_64); }	@java.lang.Override protected void readOsSection(XmlNode section) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(section.attributes.get("ovf:id").getValue())); XmlNode node = section.SelectSingleNode("Description"); if (node != null) { _vmTemplate.setOsId(osRepository.getOsIdByUniqueName(node.innerText)); } _vmTemplate.setClusterArch(ArchitectureType.x86_64); }
private void UpdateActionAvailability() { java.util.List tempVar = getSelectedItems(); java.util.ArrayList selectedItems = ((java.util.ArrayList) ((tempVar != null) ? tempVar : new java.util.ArrayList())); boolean anyEngine = false; for (java.lang.Object item : selectedItems) { org.ovirt.engine.core.common.businessentities.NetworkEntity network = ((org.ovirt.engine.core.common.businessentities.NetworkEntity) (item)); if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(network.getname(), org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterNetworkListModel.ENGINE_NETWORK)) { anyEngine = true; break; } } getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed((((selectedItems.size()) > 0) && (!anyEngine))); }	private void UpdateActionAvailability() { java.util.List tempVar = getSelectedItems(); java.util.ArrayList selectedItems = ((java.util.ArrayList) ((tempVar != null) ? tempVar : new java.util.ArrayList())); boolean anyEngine = false; for (java.lang.Object item : selectedItems) { org.ovirt.engine.core.common.businessentities.Network network = ((org.ovirt.engine.core.common.businessentities.Network) (item)); if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(network.getname(), org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterNetworkListModel.ENGINE_NETWORK)) { anyEngine = true; break; } } getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed((((selectedItems.size()) > 0) && (!anyEngine))); }
@org.junit.Test public void testResolveNetworkExclusivenessValidatorEmptyInput() { final org.ovirt.engine.core.bll.validator.network.NetworkExclusivenessValidator actual = underTest.resolveNetworkExclusivenessValidator(java.util.Collections.<org.ovirt.engine.core.compat.Version>emptySet()); org.junit.Assert.assertThat(actual, sameInstance(legacyNetworkExclusivenessValidator)); }	@org.junit.Test public void testResolveNetworkExclusivenessValidatorEmptyInput() { final org.ovirt.engine.core.bll.validator.network.NetworkExclusivenessValidator actual = underTest.resolveNetworkExclusivenessValidator(java.util.Collections.<org.ovirt.engine.core.compat.Version>emptySet()); assertThat(actual, sameInstance(legacyNetworkExclusivenessValidator)); }
private void initVncKeyboardLayout() { final java.util.List<java.lang.String> layouts = ((java.util.List<java.lang.String>) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.VncKeyboardLayoutValidValues))); final java.util.ArrayList<java.lang.String> vncKeyboardLayoutItems = new java.util.ArrayList<java.lang.String>(); vncKeyboardLayoutItems.add(null); vncKeyboardLayoutItems.addAll(layouts); getVncKeyboardLayout().setItems(vncKeyboardLayoutItems); getVncKeyboardLayout().setIsChangable(false); }	private void initVncKeyboardLayout() { java.util.List<java.lang.String> layouts = ((java.util.List<java.lang.String>) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.VncKeyboardLayoutValidValues))); java.util.List<java.lang.String> vncKeyboardLayoutItems = new java.util.ArrayList<java.lang.String>(); vncKeyboardLayoutItems.add(null); vncKeyboardLayoutItems.addAll(layouts); getVncKeyboardLayout().setItems(vncKeyboardLayoutItems); getVncKeyboardLayout().setIsChangable(false); }
@java.lang.Override public int compareTo(org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics o) { return org.ovirt.engine.core.common.businessentities.comparators.BusinessEntityComparator.newGuidInstance().compare(this, o); }	@java.lang.Override public int compareTo(org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics o) { return org.ovirt.engine.core.common.businessentities.comparators.BusinessEntityComparator.<org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics, org.ovirt.engine.core.compat.Guid>newInstance().compare(this, o); }
@org.ovirt.engine.ui.uicompat.DefaultMessage("{0} bytes have been read in the current profiling interval out of {1} bytes during profiling") java.lang.String bytesReadInCurrentProfileInterval(java.lang.String currentBytesRead, java.lang.String totalBytes);	@org.ovirt.engine.ui.uicompat.DefaultMessage("{0} {1} have been read in the current profiling interval out of {2} {3} during profiling") java.lang.String bytesReadInCurrentProfileInterval(java.lang.String currentBytesRead, java.lang.String currentBytesReadUnit, java.lang.String totalBytes, java.lang.String totalBytesUnit);
public void setTimeZone(java.util.TimeZone timeZone) { this.timeZone = timeZone; }	public void setTimeZone(java.lang.String timeZone) { this.timeZone = timeZone; }
@java.lang.Override public void addVmToAffinityLabels() { mapAffinityLabels().forEach(( affinityLabel) -> { affinityLabel.getVms().add(getParameters().getVm().getId()); labelDao.update(affinityLabel); }); }	@java.lang.Override public void addVmToAffinityLabels() { mapAffinityLabels().forEach(( affinityLabel) -> { affinityLabel.addVm(getParameters().getVm()); labelDao.update(affinityLabel); }); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmTemplate getByName(java.lang.String name, org.ovirt.engine.core.compat.Guid datacenterId, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { return getCallsHandler().executeRead("GetVmTemplateByVmtName", org.ovirt.engine.core.dao.VmTemplateDAOImpl.VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("vmt_name", name).addValue("storage_pool_id", datacenterId).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmTemplate getByName(java.lang.String name, org.ovirt.engine.core.compat.Guid datacenterId, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { return getCallsHandler().executeRead("GetVmTemplateByVmtName", org.ovirt.engine.core.dao.VmTemplateDaoImpl.VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("vmt_name", name).addValue("storage_pool_id", datacenterId).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }
public java.lang.String getConcurrentListUnSelectedItem() { return getConcurrentSelectList().getItems().toArray(new java.lang.String[getConcurrentSelectList().getItems().size()])[0]; }	public java.lang.String getConcurrentListFirstItem() { return getConcurrentSelectList().getItems().toArray(new java.lang.String[getConcurrentSelectList().getItems().size()])[0]; }
protected void updateDefaultTimeZone() { final org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase.TimezoneType timezoneType = getTimeZoneType(); if ((cachedDefaultTimeZoneKeys.get(timezoneType)) == null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetDefaultTimeZone(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase) (target)); cachedDefaultTimeZoneKeys.put(timezoneType, ((java.lang.String) (returnValue))); behavior.postUpdateDefaultTimeZone(); } }, getModel().getHash())); } else { postUpdateDefaultTimeZone(); } }	protected void updateDefaultTimeZone() { org.ovirt.engine.ui.uicommonweb.models.vms.TimeZoneModel.withLoadedDefaultTimeZoneKey(getTimeZoneType(), new java.lang.Runnable() { @java.lang.Override public void run() { doUpdateTimeZone(null); } }); }
@java.lang.Override public javax.ws.rs.core.Response performRemove(java.lang.String id) { return performAction(VdcActionType.RemovePermission, new org.ovirt.engine.core.common.action.PermissionsOperationsParameters(getPermission(id))); }	@java.lang.Override public javax.ws.rs.core.Response performRemove(java.lang.String id) { throw new org.apache.commons.lang.NotImplementedException(); }
private void doInit(org.ovirt.engine.api.extensions.ExtMap inputMap, org.ovirt.engine.api.extensions.ExtMap outputMap) { context = inputMap.<org.ovirt.engine.api.extensions.ExtMap>get(Base.InvokeKeys.CONTEXT); configuration = context.<java.util.Properties>get(Base.ContextKeys.CONFIGURATION); org.ovirt.engine.extensions.aaa.builtin.kerberosldap.Config.setConfiguration(((java.util.Properties) (configuration.get("config")))); broker = org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapFactory.getInstance(getAuthzName()); context.<java.util.List<java.lang.String>>get(Base.ContextKeys.CONFIGURATION_SENSITIVE_KEYS).add("config.authn.user.password"); context.mput(Base.ContextKeys.AUTHOR, "The oVirt Project").mput(Base.ContextKeys.EXTENSION_NAME, "Kerberos/Ldap Authn (Built-in)").mput(Base.ContextKeys.LICENSE, "ASL 2.0").mput(Base.ContextKeys.HOME_URL, "http://www.ovirt.org").mput(Base.ContextKeys.VERSION, "N/A").mput(Authn.ContextKeys.CAPABILITIES, Authn.Capabilities.AUTHENTICATE_PASSWORD).mput(Base.ContextKeys.BUILD_INTERFACE_VERSION, Base.INTERFACE_VERSION_CURRENT); org.ovirt.engine.extensions.aaa.builtin.kerberosldap.KerberosManager.getInstance(); org.ovirt.engine.extensions.aaa.builtin.kerberosldap.UsersDomainsCacheManagerService.getInstance().init(); }	private void doInit(org.ovirt.engine.api.extensions.ExtMap inputMap, org.ovirt.engine.api.extensions.ExtMap outputMap) { try { org.ovirt.engine.extensions.aaa.builtin.kerberosldap.Utils.handleApplicationInit(context.<org.ovirt.engine.api.extensions.ExtMap>get(Base.ContextKeys.GLOBAL_CONTEXT).<java.lang.String>get(Base.GlobalContextKeys.APPLICATION_NAME)); } catch (java.lang.Exception e) { outputMap.mput(Base.InvokeKeys.MESSAGE, e.getMessage()).mput(Base.InvokeKeys.RESULT, Base.InvokeResult.FAILED); } }
public static java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsForSession(java.lang.String engineSessionId) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.coco.getCommandIdsForSession(engineSessionId); }	public static java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsBySessionSeqId(long engineSessionSeqId) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.coco.getCommandIdsBySessionSeqId(engineSessionSeqId); }
@java.lang.Override protected void showErrataListWithDetailsPopup(java.lang.String filterCommand) { super.showErrataListWithDetailsPopup(filterCommand, org.ovirt.engine.ui.uicommonweb.models.HostErrataCountModel.messages.errataForHost(getName())); }	@java.lang.Override protected void showErrataListWithDetailsPopup(java.lang.String filterCommand) { super.showErrataListWithDetailsPopup(filterCommand, org.ovirt.engine.ui.uicommonweb.models.HostErrataCountModel.messages.errataForHost(getEntity().getName())); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.Cluster model, org.ovirt.engine.api.model.Cluster transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getComment(), transform.getComment()); assertNotNull(transform.getCpu()); assertEquals(model.getCpu().getId(), transform.getCpu().getId()); assertNotNull(transform.getDataCenter()); assertEquals(model.getDataCenter().getId(), transform.getDataCenter().getId()); assertNotNull(transform.getSchedulingPolicy()); assertEquals(model.getSchedulingPolicy().getPolicy(), transform.getSchedulingPolicy().getPolicy()); assertEquals(model.getErrorHandling().getOnError(), transform.getErrorHandling().getOnError()); assertNotNull(transform.getMemoryPolicy()); assertNotNull(transform.getMemoryPolicy().getTransparentHugepages()); assertEquals(transform.getMemoryPolicy().getTransparentHugepages().isEnabled(), transform.getMemoryPolicy().getTransparentHugepages().isEnabled()); assertEquals(model.isVirtService(), transform.isVirtService()); assertEquals(model.isGlusterService(), transform.isGlusterService()); assertEquals(model.isTunnelMigration(), transform.isTunnelMigration()); assertEquals(model.isTrustedService(), transform.isTrustedService()); assertEquals(model.isBallooningEnabled(), transform.isBallooningEnabled()); assertEquals(model.isKsmEnabled(), transform.isKsmEnabled()); assertEquals(model.getDisplay().getProxy(), transform.getDisplay().getProxy()); }	@java.lang.Override protected void verify(org.ovirt.engine.api.model.Cluster model, org.ovirt.engine.api.model.Cluster transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getComment(), transform.getComment()); assertNotNull(transform.getCpu()); assertEquals(model.getCpu().getId(), transform.getCpu().getId()); assertNotNull(transform.getDataCenter()); assertEquals(model.getDataCenter().getId(), transform.getDataCenter().getId()); assertNotNull(transform.getSchedulingPolicy()); assertEquals(model.getSchedulingPolicy().getPolicy(), transform.getSchedulingPolicy().getPolicy()); assertEquals(model.getErrorHandling().getOnError(), transform.getErrorHandling().getOnError()); assertNotNull(transform.getMemoryPolicy()); assertNotNull(transform.getMemoryPolicy().getTransparentHugepages()); assertEquals(transform.getMemoryPolicy().getTransparentHugepages().isEnabled(), transform.getMemoryPolicy().getTransparentHugepages().isEnabled()); assertEquals(model.isVirtService(), transform.isVirtService()); assertEquals(model.isGlusterService(), transform.isGlusterService()); assertEquals(model.isTunnelMigration(), transform.isTunnelMigration()); assertEquals(model.isTrustedService(), transform.isTrustedService()); assertEquals(model.isBallooningEnabled(), transform.isBallooningEnabled()); assertEquals(model.getKsm().isEnabled(), transform.getKsm().isEnabled()); assertEquals(model.getDisplay().getProxy(), transform.getDisplay().getProxy()); }
@java.lang.Override public boolean areAllVfsFree(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { java.util.List<org.ovirt.engine.core.common.businessentities.HostDevice> deviceList = getDevicesByHostId(nic.getVdsId()); org.ovirt.engine.core.common.businessentities.HostDevice pciDevice = getPciDeviceByNic(nic, deviceList); if (!(isSriovDevice(pciDevice))) { throw new java.lang.UnsupportedOperationException(); } java.util.List<org.ovirt.engine.core.common.businessentities.HostDevice> vfs = getVfs(pciDevice, deviceList); org.ovirt.engine.core.common.businessentities.HostDevice nonFreeVf = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(vfs, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.HostDevice>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.HostDevice vf) { return !(isVfFree(vf)); } }); return nonFreeVf == null; }	@java.lang.Override public boolean areAllVfsFree(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { org.ovirt.engine.core.common.businessentities.HostDevice nonFreeVf = getVf(nic, false); return nonFreeVf == null; }
private static boolean addQosForDevice(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.compat.Version vdsGroupCompatibilityVersion) { org.ovirt.engine.core.compat.Guid qosId = vnicProfile.getNetworkQosId(); if (qosId != null) { if (!(org.ovirt.engine.core.common.FeatureSupported.networkQoS(vdsGroupCompatibilityVersion))) { return false; } java.util.Map<java.lang.String, java.lang.Object> specParams = ((java.util.Map<java.lang.String, java.lang.Object>) (struct.get(VdsProperties.SpecParams))); if (specParams == null) { specParams = new java.util.HashMap<>(); struct.put(VdsProperties.SpecParams, specParams); } org.ovirt.engine.core.common.businessentities.qos.NetworkQoS networkQoS = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getQosDao().get(qosId); org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper qosMapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper(specParams, VdsProperties.QOS_INBOUND, VdsProperties.QOS_OUTBOUND); qosMapper.serialize(networkQoS); } return true; }	private static boolean addQosForDevice(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.compat.Version vdsGroupCompatibilityVersion) { org.ovirt.engine.core.compat.Guid qosId = vnicProfile.getNetworkQosId(); if (!(org.ovirt.engine.core.common.FeatureSupported.networkQoS(vdsGroupCompatibilityVersion))) { return qosId == null; } java.util.Map<java.lang.String, java.lang.Object> specParams = ((java.util.Map<java.lang.String, java.lang.Object>) (struct.get(VdsProperties.SpecParams))); if (specParams == null) { specParams = new java.util.HashMap<>(); struct.put(VdsProperties.SpecParams, specParams); } org.ovirt.engine.core.common.businessentities.network.NetworkQoS networkQoS = (qosId == null) ? new org.ovirt.engine.core.common.businessentities.network.NetworkQoS() : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getQosDao().get(qosId); org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper qosMapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper(specParams, VdsProperties.QOS_INBOUND, VdsProperties.QOS_OUTBOUND); qosMapper.serialize(networkQoS); return true; }
@java.lang.Override public void run() { try { java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> vmsToMigrate = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStaticDao().getAllWithFailbackByVds(vds.getId()); if (!(vmsToMigrate.isEmpty())) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); executionContext.setMonitored(true); org.ovirt.engine.core.bll.Backend.getInstance().runInternalMultipleActions(VdcActionType.MigrateVmToServer, new java.util.ArrayList(createVmToServerParametersList(vmsToMigrate, vds)), executionContext); } } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.VdsEventListener.log.errorFormat("Failed to initialize Vds on up. Error: {0}", e); } }	@java.lang.Override public void run() { try { java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> vmsToMigrate = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStaticDao().getAllWithFailbackByVds(vds.getId()); if (!(vmsToMigrate.isEmpty())) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); executionContext.setMonitored(true); org.ovirt.engine.core.bll.Backend.getInstance().runInternalMultipleActions(VdcActionType.MigrateVmToServer, new java.util.ArrayList(createMigrateVmToServerParametersList(vmsToMigrate, vds)), executionContext); } } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.VdsEventListener.log.errorFormat("Failed to initialize Vds on up. Error: {0}", e); } }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.VmDevice entity) { return createIdParameterMapper(entity.getId()).addValue("device", entity.getDevice()).addValue("type", entity.getType().getValue()).addValue("address", entity.getAddress()).addValue("boot_order", entity.getBootOrder()).addValue("spec_params", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(entity.getSpecParams())).addValue("is_managed", entity.getIsManaged()).addValue("is_plugged", entity.getIsPlugged()).addValue("is_readonly", entity.getIsReadOnly()).addValue("alias", entity.getAlias()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(entity.getCustomProperties())).addValue("snapshot_id", entity.getSnapshotId()).addValue("logical_name", entity.getLogicalName()).addValue("is_scsi_reservation_used", entity.isScsiReservationUsed()); }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.VmDevice entity) { return createIdParameterMapper(entity.getId()).addValue("device", entity.getDevice()).addValue("type", entity.getType().getValue()).addValue("address", entity.getAddress()).addValue("boot_order", entity.getBootOrder()).addValue("spec_params", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(entity.getSpecParams())).addValue("is_managed", entity.getIsManaged()).addValue("is_plugged", entity.getIsPlugged()).addValue("is_readonly", entity.getIsReadOnly()).addValue("alias", entity.getAlias()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(entity.getCustomProperties())).addValue("snapshot_id", entity.getSnapshotId()).addValue("logical_name", entity.getLogicalName()).addValue("is_using_scsi_reservation", entity.isUsingScsiReservation()); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (((getAllUpServers()) == null) || (getAllUpServers().isEmpty())) { addValidateMessage(EngineMessage.ACTION_TYPE_FAILED_NO_UP_SERVER_FOUND); return false; } return true; }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (((getAllUpServers()) == null) || (getAllUpServers().isEmpty())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_NO_UP_SERVER_FOUND); return false; } return true; }
protected void addVmNetwork() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> nics = getVmInterfaces(); org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(getMacPool()); vmInterfaceManager.sortVmNics(nics, getVmInterfaceDevices()); java.util.List<java.lang.String> macAddresses = getMacPool().allocateMacAddresses(nics.size()); for (int i = 0; i < (nics.size()); ++i) { org.ovirt.engine.core.common.businessentities.network.VmNic iface = nics.get(i); org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.compat.Guid.newGuid(); srcVmNicIdToTargetVmNicIdMapping.put(iface.getId(), id); iface.setId(id); iface.setMacAddress(macAddresses.get(i)); iface.setSpeed(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(iface.getType()).getSpeed()); iface.setVmTemplateId(null); iface.setVmId(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getId()); updateProfileOnNic(iface); org.ovirt.engine.core.bll.AddVmCommand.getVmNicDao().save(iface); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(iface); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkStatisticsDao().save(iface.getStatistics()); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(iface.getStatistics()); } }	protected void addVmNetwork() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> nics = getVmInterfaces(); org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(macPool); vmInterfaceManager.sortVmNics(nics, getVmInterfaceDevices()); java.util.List<java.lang.String> macAddresses = macPool.allocateMacAddresses(nics.size()); for (int i = 0; i < (nics.size()); ++i) { org.ovirt.engine.core.common.businessentities.network.VmNic iface = nics.get(i); org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.compat.Guid.newGuid(); srcVmNicIdToTargetVmNicIdMapping.put(iface.getId(), id); iface.setId(id); iface.setMacAddress(macAddresses.get(i)); iface.setSpeed(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(iface.getType()).getSpeed()); iface.setVmTemplateId(null); iface.setVmId(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getId()); updateProfileOnNic(iface); org.ovirt.engine.core.bll.AddVmCommand.getVmNicDao().save(iface); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(iface); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkStatisticsDao().save(iface.getStatistics()); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(iface.getStatistics()); } }
private void oSType_SelectedItemChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.Integer osType = ((java.lang.Integer) (getOSType().getSelectedItem())); setIsWindowsOS(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType(osType)); setIsLinuxOS(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isLinuxOsType(osType)); getInitrd_path().setIsChangable(getIsLinuxOS()); getInitrd_path().setIsAvailable(getIsLinuxOS()); getKernel_path().setIsChangable(getIsLinuxOS()); getKernel_path().setIsAvailable(getIsLinuxOS()); getKernel_parameters().setIsChangable(getIsLinuxOS()); getKernel_parameters().setIsAvailable(getIsLinuxOS()); getDomain().setIsChangable(getIsWindowsOS()); getBehavior().updateDefaultTimeZone(); updateWatchdogModels(osType); }	private void oSType_SelectedItemChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.Integer osType = getOSType().getSelectedItem(); setIsWindowsOS(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType(osType)); setIsLinuxOS(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isLinuxOsType(osType)); getInitrd_path().setIsChangable(getIsLinuxOS()); getInitrd_path().setIsAvailable(getIsLinuxOS()); getKernel_path().setIsChangable(getIsLinuxOS()); getKernel_path().setIsAvailable(getIsLinuxOS()); getKernel_parameters().setIsChangable(getIsLinuxOS()); getKernel_parameters().setIsAvailable(getIsLinuxOS()); getDomain().setIsChangable(getIsWindowsOS()); getBehavior().updateDefaultTimeZone(); handleQxlClusterLevel(); updateWatchdogModels(osType); }
public static void runAndAssertValidateSuccess(org.ovirt.engine.core.bll.CommandBase<?> command) { boolean validate = command.validate(); java.util.List<java.lang.String> validateMessages = command.getReturnValue().getValidateMessages(); assertTrue(java.text.MessageFormat.format("Command''s validate expected to succeed, but failed, messages are: {0}", validateMessages), validate); assertTrue(java.text.MessageFormat.format("Command''s validate succeeded, but added the following messages: {0}", validateMessages), validateMessages.isEmpty()); }	public static void runAndAssertValidateSuccess(org.ovirt.engine.core.bll.CommandBase<?> command) { boolean validate = command.validate(); java.util.List<java.lang.String> validationMessages = command.getReturnValue().getValidationMessages(); assertTrue(java.text.MessageFormat.format("Command''s validate expected to succeed, but failed, messages are: {0}", validationMessages), validate); assertTrue(java.text.MessageFormat.format("Command''s validate succeeded, but added the following messages: {0}", validationMessages), validationMessages.isEmpty()); }
@java.lang.Override public void rollback() { super.rollback(); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDC.getInstance().removePool(getMacPool().getId()); }	@java.lang.Override public void rollback() { super.rollback(); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDcSingleton.getInstance().removePool(getMacPoolEntity().getId()); }
@javax.ws.rs.Path("applications") public org.ovirt.engine.api.resource.DevicesResource<org.ovirt.engine.api.model.Application, org.ovirt.engine.api.model.Applications> getApplicationsResource();	@javax.ws.rs.Path("applications") public org.ovirt.engine.api.resource.VmApplicationsResource getApplicationsResource();
@org.junit.Test public void onlyOutboundAveragePresent() { qos.setOutboundAverage(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH); valuesPresentTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_MISSING_VALUES)); }	@org.junit.Test public void onlyOutboundAveragePresent() { qos.setOutboundAverage(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_MEDIUM); valuesPresentTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_MISSING_VALUES)); }
@org.junit.Test public void vlanIdTakenByDifferentNetwork() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network otherNetwork = new org.ovirt.engine.core.common.businessentities.network.Network(); otherNetwork.setVlanId(DEFAULT_VLAN_ID); otherNetwork.setId(new org.ovirt.engine.core.compat.Guid(OTHER_GUID)); java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>(); networks.add(otherNetwork); vlanIdAvailableTest(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.NETWORK_VLAN_IN_USE), networks); }	@org.junit.Test public void vlanIdTakenByDifferentNetwork() throws java.lang.Exception { vlanIdAvailableTest(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.NETWORK_VLAN_IN_USE), getSingletonVlanNetworkList(DEFAULT_VLAN_ID, OTHER_GUID)); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = executeVdsCommand(); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.compat.Guid taskId = org.ovirt.engine.core.bll.SpmCommand.getAsyncTaskId(); org.ovirt.engine.core.bll.SpmCommand.getReturnValue().getInternalVdsmTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.SpmCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.SpmCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.SpmCommand.getParameters().getDestinationImageId())); org.ovirt.engine.core.bll.SpmCommand.setSucceeded(true); } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = executeVdsCommand(); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.compat.Guid taskId = org.ovirt.engine.core.bll.ImageSpmCommand.getAsyncTaskId(); org.ovirt.engine.core.bll.ImageSpmCommand.getReturnValue().getInternalVdsmTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.ImageSpmCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.ImageSpmCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.ImageSpmCommand.getParameters().getDestinationImageId())); org.ovirt.engine.core.bll.ImageSpmCommand.setSucceeded(true); } }
@org.junit.Test public void testIscsiLunCanBeAdded() { org.ovirt.engine.core.common.businessentities.LunDisk disk = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createISCSILunDisk(); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createParameters(); parameters.setDiskInfo(disk); initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid(), parameters); when(diskLunMapDAO.getDiskIdByLunId(disk.getLun().getLUN_id())).thenReturn(null); assertTrue("checkIfLunDiskCanBeAdded() failed for valid iscsi lun", command.checkIfLunDiskCanBeAdded(diskValidator)); }	@org.junit.Test public void testIscsiLunCanBeAdded() { org.ovirt.engine.core.common.businessentities.LunDisk disk = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createISCSILunDisk(); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createParameters(); parameters.setDiskInfo(disk); initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid(), parameters); when(diskLunMapDAO.getDiskIdByLunId(disk.getLun().getLUN_id())).thenReturn(null); assertTrue("checkIfLunDiskCanBeAdded() failed for valid iscsi lun", command.checkIfLunDiskCanBeAdded(spyDiskValidator(disk))); }
public void setKsmCpuPercent(java.lang.Integer value) { mVdsStatistics.setKsmCpuPercent(value); }	public void setKsmCpuPercent(java.lang.Integer value) { vdsStatistics.setKsmCpuPercent(value); }
org.ovirt.engine.core.vdsbroker.vdsbroker.GlusterHooksListReturnForXmlRpc glusterHooksList();	org.ovirt.engine.core.vdsbroker.gluster.GlusterHooksListReturnForXmlRpc glusterHooksList();
protected void reestablishConnectionIfNeeded() { if ((((org.ovirt.engine.core.bll.VdsCommand.getVds().getProtocol()) != (org.ovirt.engine.core.common.businessentities.VdsProtocol.STOMP)) && (org.ovirt.engine.core.common.FeatureSupported.jsonProtocol(org.ovirt.engine.core.bll.VdsCommand.getVds().getVdsGroupCompatibilityVersion()))) && ((org.ovirt.engine.core.bll.VdsCommand.getVds().getHostOs()) != null)) { org.ovirt.engine.core.bll.VdsCommand.getVds().setProtocol(VdsProtocol.STOMP); org.ovirt.engine.core.bll.VdsCommand.getVdsStaticDao().save(org.ovirt.engine.core.bll.VdsCommand.getVds().getStaticData()); initializeVds(); } }	protected void reestablishConnectionIfNeeded() { org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.core.bll.VdsCommand.getVds(); if ((((host.getProtocol()) == (org.ovirt.engine.core.common.businessentities.VdsProtocol.XML)) && (org.ovirt.engine.core.common.FeatureSupported.jsonProtocol(host.getVdsGroupCompatibilityVersion()))) && ((host.getHostOs()) != null)) { org.ovirt.engine.core.common.businessentities.VdsStatic hostStaticData = host.getStaticData(); hostStaticData.setProtocol(VdsProtocol.STOMP); org.ovirt.engine.core.bll.VdsCommand.getVdsStaticDao().update(hostStaticData); resourceManager.reestablishConnection(org.ovirt.engine.core.bll.VdsCommand.getVdsId()); } }
@org.ovirt.engine.ui.common.DefaultStringValue("Modifying the settings below can lead to a boot failure. " + "Please consult the documentation before doing any changes.") java.lang.String kernelCmdlineWarning();	@org.ovirt.engine.ui.common.DefaultStringValue("Modifying kernel boot parameters settings can lead to a host boot failure. " + ("Please consult the documentation before doing any changes. " + "The host needs to be rebooted after successful host deploy for kernel boot parameters to be applied.")) java.lang.String kernelCmdlineWarning();
private void auditInvalidInterfaces(java.util.List<java.lang.String> invalidNetworkNames, java.util.List<java.lang.String> invalidIfaceNames) { if ((invalidNetworkNames.size()) > 0) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("Networks", org.apache.commons.lang.StringUtils.join(invalidNetworkNames, ',')); logable.addCustomValue("Interfaces", org.apache.commons.lang.StringUtils.join(invalidIfaceNames, ',')); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.IMPORTEXPORT_SNAPSHOT_VM_INVALID_INTERFACES); } }	private void auditInvalidInterfaces(java.util.List<java.lang.String> invalidNetworkNames, java.util.List<java.lang.String> invalidIfaceNames, java.lang.String vmName) { if ((invalidNetworkNames.size()) > 0) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("VmName", vmName); logable.addCustomValue("Networks", org.apache.commons.lang.StringUtils.join(invalidNetworkNames, ',')); logable.addCustomValue("Interfaces", org.apache.commons.lang.StringUtils.join(invalidIfaceNames, ',')); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.IMPORTEXPORT_SNAPSHOT_VM_INVALID_INTERFACES); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = new org.ovirt.engine.core.common.action.ActionReturnValue(); final org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getVdsId(); final java.lang.String sessionId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getSessionId(); returnValue = executeVdsFenceAction(vdsId, sessionId, ActionType.StopVds); if ((org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.ActionType.VdsNotRespondingTreatment)) { updateHostInFenceFlow(vdsId, true); } if (wasSkippedDueToPolicy(returnValue)) { org.ovirt.engine.core.bll.pm.RestartVdsResult restartVdsResult = new org.ovirt.engine.core.bll.pm.RestartVdsResult(); restartVdsResult.setSkippedDueToFencingPolicy(true); setActionReturnValue(restartVdsResult); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); setVdsStatus(VDSStatus.NonResponsive); return; } else if (returnValue.getSucceeded()) { executeFenceVdsManuallyAction(vdsId, sessionId); returnValue = executeVdsFenceAction(vdsId, sessionId, ActionType.StartVds); setSucceeded(returnValue.getSucceeded()); } else { handleError(); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); } if (!(org.ovirt.engine.core.bll.pm.RestartVdsCommand.getSucceeded())) { log.warn("Restart host action failed, updating host '{}' to '{}'", vdsId, VDSStatus.NonResponsive.name()); setVdsStatus(VDSStatus.NonResponsive); } updateHostInFenceFlow(vdsId, false); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.ActionReturnValue returnValue; final org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getVdsId(); final java.lang.String sessionId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getSessionId(); returnValue = executeVdsFenceAction(vdsId, sessionId, ActionType.StopVds); if ((org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.ActionType.VdsNotRespondingTreatment)) { updateHostInFenceFlow(vdsId, true); } if (wasSkippedDueToPolicy(returnValue)) { org.ovirt.engine.core.bll.pm.RestartVdsResult restartVdsResult = new org.ovirt.engine.core.bll.pm.RestartVdsResult(); restartVdsResult.setSkippedDueToFencingPolicy(true); setActionReturnValue(restartVdsResult); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); setVdsStatus(VDSStatus.NonResponsive); return; } else if (returnValue.getSucceeded()) { executeFenceVdsManuallyAction(vdsId, sessionId); returnValue = executeVdsFenceAction(vdsId, sessionId, ActionType.StartVds); setSucceeded(returnValue.getSucceeded()); } else { handleError(); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); } if (!(org.ovirt.engine.core.bll.pm.RestartVdsCommand.getSucceeded())) { log.warn("Restart host action failed, updating host '{}' to '{}'", vdsId, VDSStatus.NonResponsive.name()); setVdsStatus(VDSStatus.NonResponsive); } updateHostInFenceFlow(vdsId, false); }
private void InitVdsBroker() { org.ovirt.engine.core.vdsbroker.VdsManager.log.infoFormat("Initialize vdsBroker ({0},{1})", vds.getHostName(), vds.getPort()); vdsProxy = new org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerWrapper(vds.getHostName(), vds.getPort()); }	private void initVdsBroker() { org.ovirt.engine.core.vdsbroker.VdsManager.log.infoFormat("Initialize vdsBroker ({0},{1})", vds.getHostName(), vds.getPort()); int clientTimeOut = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.vdsTimeout)) * 1000; int connectionTimeOut = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.vdsConnectionTimeout)) * 1000; int heartbeat = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.vdsHeartbeatInSeconds)) * 1000; int clientRetries = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.vdsRetries); vdsProxy = org.ovirt.engine.core.vdsbroker.jsonrpc.TransportFactory.createVdsServer(vds.getProtocol(), vds.getHostName(), vds.getPort(), clientTimeOut, connectionTimeOut, clientRetries, heartbeat); }
java.util.List<org.ovirt.engine.core.common.businessentities.NetworkEntity> getAllForCluster(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered);	java.util.List<org.ovirt.engine.core.common.businessentities.Network> getAllForCluster(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered);
public static org.ovirt.engine.core.common.businessentities.LdapUser getUserById(org.ovirt.engine.core.common.utils.ExternalId id) { org.ovirt.engine.core.common.businessentities.LdapUser retVal = null; org.ovirt.engine.core.common.businessentities.DbUser dbUser = org.ovirt.engine.core.bll.adbroker.InternalBrokerUtils.getDbUserDAO().getByExternalId(org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.AdminDomain), id); if (dbUser != null) { retVal = new org.ovirt.engine.core.common.businessentities.LdapUser(dbUser); } return retVal; }	public static org.ovirt.engine.core.common.businessentities.LdapUser getUserById(org.ovirt.engine.core.common.utils.ExternalId id) { org.ovirt.engine.core.common.businessentities.LdapUser retVal = null; org.ovirt.engine.core.common.businessentities.DbUser dbUser = org.ovirt.engine.core.bll.adbroker.InternalBrokerUtils.getDbUserDAO().getByExternalId(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.AdminDomain), id); if (dbUser != null) { retVal = new org.ovirt.engine.core.common.businessentities.LdapUser(dbUser); } return retVal; }
@org.junit.Test public void calculateNetworkImplementationDetailsNetworkQosOutOfSync() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice(); org.ovirt.engine.core.common.businessentities.qos.NetworkQoS qos = createQos(); qos.setOutboundAverage(30); qos.setOutboundPeak(30); qos.setOutboundBurst(30); calculateNetworkImplementationDetailsAndAssertSync(iface, false, iface.getNetworkName(), iface.isBridged(), iface.getMtu(), iface.getVlanId(), qos); }	@org.junit.Test public void calculateNetworkImplementationDetailsNetworkQosOutOfSync() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice(); org.ovirt.engine.core.common.businessentities.network.NetworkQoS qos = createQos(); qos.setOutboundAverage(30); qos.setOutboundPeak(30); qos.setOutboundBurst(30); calculateNetworkImplementationDetailsAndAssertSync(iface, false, iface.getNetworkName(), iface.isBridged(), iface.getMtu(), iface.getVlanId(), qos); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType parse(java.lang.CharSequence text) throws java.text.ParseException { if (org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(text.toString())) { return null; } return org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType.fromValue(text.toString().toUpperCase()); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType parse(java.lang.CharSequence text) throws java.text.ParseException { return null; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.VDSGroup.class, to = org.ovirt.engine.api.model.SchedulingPolicy.class) public static org.ovirt.engine.api.model.SchedulingPolicy map(org.ovirt.engine.core.common.businessentities.VDSGroup entity, org.ovirt.engine.api.model.SchedulingPolicy template) { org.ovirt.engine.api.model.SchedulingPolicy model = (template != null) ? template : new org.ovirt.engine.api.model.SchedulingPolicy(); if (((entity.getClusterPolicyName()) != null) && (!(entity.getClusterPolicyName().toLowerCase().equals("none")))) { model.setPolicy(entity.getClusterPolicyName()); if ((entity.getClusterPolicyProperties()) != null) { model.setThresholds(new org.ovirt.engine.api.model.SchedulingPolicyThresholds()); java.lang.String lowUtilization = entity.getClusterPolicyProperties().get("LowUtilization"); java.lang.String highUtilization = entity.getClusterPolicyProperties().get("HighUtilization"); java.lang.String cpuOverCommitDurationMinutes = entity.getClusterPolicyProperties().get("CpuOverCommitDurationMinutes"); if (lowUtilization != null) { model.getThresholds().setLow(java.lang.Integer.parseInt(lowUtilization)); } if (highUtilization != null) { model.getThresholds().setHigh(java.lang.Integer.parseInt(highUtilization)); } if (cpuOverCommitDurationMinutes != null) { int duration = (java.lang.Integer.parseInt(cpuOverCommitDurationMinutes)) * 60; model.getThresholds().setDuration(duration); } } } return model; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.VDSGroup.class, to = org.ovirt.engine.api.model.SchedulingPolicy.class) public static org.ovirt.engine.api.model.SchedulingPolicy map(org.ovirt.engine.core.common.businessentities.VDSGroup entity, org.ovirt.engine.api.model.SchedulingPolicy template) { org.ovirt.engine.api.model.SchedulingPolicy model = (template != null) ? template : new org.ovirt.engine.api.model.SchedulingPolicy(); if ((entity.getClusterPolicyName()) != null) { model.setPolicy(entity.getClusterPolicyName().toLowerCase()); if (((entity.getClusterPolicyProperties()) != null) && (!(entity.getClusterPolicyProperties().isEmpty()))) { model.setThresholds(new org.ovirt.engine.api.model.SchedulingPolicyThresholds()); java.lang.String lowUtilization = entity.getClusterPolicyProperties().get(org.ovirt.engine.api.restapi.types.ClusterMapper.LOW_UTILIZATION); java.lang.String highUtilization = entity.getClusterPolicyProperties().get(org.ovirt.engine.api.restapi.types.ClusterMapper.HIGH_UTILIZATION); java.lang.String cpuOverCommitDurationMinutes = entity.getClusterPolicyProperties().get(org.ovirt.engine.api.restapi.types.ClusterMapper.CPU_OVER_COMMIT_DURATION_MINUTES); if (lowUtilization != null) { model.getThresholds().setLow(java.lang.Integer.parseInt(lowUtilization)); } if (highUtilization != null) { model.getThresholds().setHigh(java.lang.Integer.parseInt(highUtilization)); } if (cpuOverCommitDurationMinutes != null) { int duration = (java.lang.Integer.parseInt(cpuOverCommitDurationMinutes)) * 60; model.getThresholds().setDuration(duration); } } } return model; }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = result.getReturnValue(); final org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel userPortalListModel = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel) (result.getState())); if ((returnValueBase != null) && (returnValueBase.getSucceeded())) { org.ovirt.engine.core.common.action.VmManagementParametersBase param = getUpdateVmParameters(applyCpuChangesLater); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UpdateVm, param, new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModelNetworkAsyncCallback(model, defaultNetworkCreatingManager, gettempVm().getId()), this); } else { userPortalListModel.getWindow().stopProgress(); } }	@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = result.getReturnValue(); if ((returnValueBase != null) && (returnValueBase.getSucceeded())) { org.ovirt.engine.core.common.action.VmManagementParametersBase param = getUpdateVmParameters(applyCpuChangesLater); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UpdateVm, param, new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModelNetworkAsyncCallback(model, defaultNetworkCreatingManager, gettempVm().getId()), this); } else { getWindow().stopProgress(); } }
private void activate() { for (org.ovirt.engine.core.extensions.mgr.ExtensionManager.ExtensionEntry entry : loadedEntries.values()) { entry.enabled = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getBoolean(("ENGINE_EXTENSION_ENABLE_" + (entry.getName())), entry.enabled); if (entry.enabled) { try { entry.extension = ((org.ovirt.engine.core.extensions.mgr.Extension) (lookupService(org.ovirt.engine.core.extensions.mgr.Extension.class, entry.getConfig().getProperty(org.ovirt.engine.core.extensions.mgr.ExtensionManager.CLASS), entry.getConfig().getProperty(org.ovirt.engine.core.extensions.mgr.ExtensionManager.MODULE)).newInstance())); entry.extension.setContext(entry.context); entry.extension.init(); activatedEntries.put(entry.getName(), entry); org.ovirt.engine.core.utils.collections.MultiValueMapUtils.addToMap(entry.getProvides(), entry, providesEntries); } catch (java.lang.Exception ex) { org.ovirt.engine.core.extensions.mgr.ExtensionManager.log.error(java.lang.String.format("Error in activating extension %1$s. Exception message is %2$s", entry.getName(), ex.getMessage())); if (org.ovirt.engine.core.extensions.mgr.ExtensionManager.log.isDebugEnabled()) { org.ovirt.engine.core.extensions.mgr.ExtensionManager.log.error("", ex); } } } } }	private void activate() { org.ovirt.engine.core.utils.EngineLocalConfig config = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance(); for (org.ovirt.engine.core.extensions.mgr.ExtensionManager.ExtensionEntry entry : loadedEntries.values()) { entry.enabled = config.getBoolean(((org.ovirt.engine.core.extensions.mgr.ExtensionManager.ENGINE_EXTENSION_ENABLED) + (entry.getName())), entry.enabled); if (entry.enabled) { try { entry.extension = ((org.ovirt.engine.core.extensions.mgr.Extension) (lookupService(org.ovirt.engine.core.extensions.mgr.Extension.class, entry.getConfig().getProperty(org.ovirt.engine.core.extensions.mgr.ExtensionManager.CLASS), entry.getConfig().getProperty(org.ovirt.engine.core.extensions.mgr.ExtensionManager.MODULE)).newInstance())); entry.extension.setContext(entry.context); entry.extension.init(); activatedEntries.put(entry.getName(), entry); org.ovirt.engine.core.utils.collections.MultiValueMapUtils.addToMap(entry.getProvides(), entry, providesEntries); } catch (java.lang.Exception ex) { entry.enabled = false; org.ovirt.engine.core.extensions.mgr.ExtensionManager.log.error(java.lang.String.format("Error in activating extension %1$s. Exception message is %2$s", entry.getName(), ex.getMessage())); if (org.ovirt.engine.core.extensions.mgr.ExtensionManager.log.isDebugEnabled()) { org.ovirt.engine.core.extensions.mgr.ExtensionManager.log.error("", ex); } } } } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.Provider.class, to = org.ovirt.engine.api.model.ForemanHostProvider.class) public static org.ovirt.engine.api.model.ForemanHostProvider map(org.ovirt.engine.core.common.businessentities.Provider entity, org.ovirt.engine.api.model.ForemanHostProvider template) { org.ovirt.engine.api.model.ForemanHostProvider model = (template != null) ? template : new org.ovirt.engine.api.model.ForemanHostProvider(); if ((entity.getId()) != null) { model.setId(entity.getId().toString()); } if ((entity.getName()) != null) { model.setName(entity.getName()); } if ((entity.getDescription()) != null) { model.setDescription(entity.getDescription()); } if ((entity.getUrl()) != null) { model.setUrl(entity.getUrl()); } model.setRequiresAuthentication(entity.isRequiringAuthentication()); if ((entity.getUsername()) != null) { model.setUsername(entity.getUsername()); } java.util.Map<java.lang.String, java.lang.String> customProperties = entity.getCustomProperties(); if (customProperties != null) { org.ovirt.engine.api.model.Properties properties = new org.ovirt.engine.api.model.Properties(); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : customProperties.entrySet()) { org.ovirt.engine.api.model.Property property = new org.ovirt.engine.api.model.Property(); property.setName(entry.getKey()); property.setValue(entry.getValue()); properties.getProperties().add(property); } model.setProperties(properties); } return model; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.Provider.class, to = org.ovirt.engine.api.model.ExternalHostProvider.class) public static org.ovirt.engine.api.model.ExternalHostProvider map(org.ovirt.engine.core.common.businessentities.Provider entity, org.ovirt.engine.api.model.ExternalHostProvider template) { org.ovirt.engine.api.model.ExternalHostProvider model = (template != null) ? template : new org.ovirt.engine.api.model.ExternalHostProvider(); if ((entity.getId()) != null) { model.setId(entity.getId().toString()); } if ((entity.getName()) != null) { model.setName(entity.getName()); } if ((entity.getDescription()) != null) { model.setDescription(entity.getDescription()); } if ((entity.getUrl()) != null) { model.setUrl(entity.getUrl()); } model.setRequiresAuthentication(entity.isRequiringAuthentication()); if ((entity.getUsername()) != null) { model.setUsername(entity.getUsername()); } return model; }
public void setGroupNames(java.util.Collection<java.lang.String> value) { groupNames = new java.util.LinkedList(value); }	public void setGroupNames(java.util.Collection<java.lang.String> value) { groupNames = new java.util.HashSet<java.lang.String>(value); }
public void notifyVdsJobProgress(org.ovirt.engine.core.compat.Guid jobId, org.ovirt.engine.core.common.businessentities.VdsJob obj) { org.ovirt.engine.core.common.JobListener listener = jobListeners.get(jobId); listener.progress(jobId, obj.getDescription(), obj.getProgress()); }	public void scheduleJobs() { org.ovirt.engine.core.utils.timer.SchedulerUtil sched = getSchedulUtil(); int refreshRate = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsRefreshRate)) * 1000; refreshIteration = (numberRefreshesBeforeSave) - 1; registeredJobs.add(sched.scheduleAFixedDelayJob(this, "onTimer", new java.lang.Class[0], new java.lang.Object[0], refreshRate, refreshRate, java.util.concurrent.TimeUnit.MILLISECONDS)); registeredJobs.add(sched.scheduleAFixedDelayJob(this, "vmsMonitoring", new java.lang.Class[0], new java.lang.Object[0], refreshRate, refreshRate, java.util.concurrent.TimeUnit.MILLISECONDS)); double availableUpdatesRefreshRate = org.ovirt.engine.core.common.config.Config.<java.lang.Double>getValue(ConfigValues.HostPackagesUpdateTimeInHours); final int HOURS_TO_MINUTES = 60; long rateInMinutes = java.lang.Math.round((availableUpdatesRefreshRate * HOURS_TO_MINUTES)); registeredJobs.add(sched.scheduleAFixedDelayJob(this, "availableUpdates", new java.lang.Class[0], new java.lang.Object[0], rateInMinutes, rateInMinutes, java.util.concurrent.TimeUnit.MINUTES)); }
@org.junit.Test public void sameBondNameSentTwice() { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = createBond(org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME, null); mockExistingIfaces(bond); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(bond, bond)); validateAndExpectViolation(helper, EngineMessages.NETWORK_INTERFACES_ALREADY_SPECIFIED, bond.getName()); }	@org.junit.Test public void sameBondNameSentTwice() { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = createBond(org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME, null); mockExistingIfaces(bond); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(bond, bond)); validateAndExpectViolation(helper, EngineMessage.NETWORK_INTERFACES_ALREADY_SPECIFIED, bond.getName()); }
private void UpdateVmTemplate() { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().update(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateSmartcardDevice(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplateId(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().getVmTemplateData().isSmartcardEnabled()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateConsoleDevice(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplateId(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().isConsoleEnabled()); }	private void UpdateVmTemplate() { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().update(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateSmartcardDevice(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplateId(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().getVmTemplateData().isSmartcardEnabled()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateAudioDevice(mOldTemplate, org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVdsGroup().getcompatibility_version(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().isSoundDeviceEnabled()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateConsoleDevice(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplateId(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().isConsoleEnabled()); }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__ACTION__EXPORT); addValidateMessage(EngineMessage.VAR__TYPE__VM_DISK); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__EXPORT); addValidationMessage(EngineMessage.VAR__TYPE__VM_DISK); }
@java.lang.Override public void removeTabWidget(com.google.gwt.user.client.ui.IsWidget tabWidget) { widgetBar.remove(tabWidget); recalculateWidgetBarMinWidth(); showScrollButtons(); }	@java.lang.Override public void removeTabWidget(com.google.gwt.user.client.ui.IsWidget tabWidget) { widgetBar.remove(tabWidget); com.google.gwt.user.client.ui.Widget listWidget = copyWidgetAsDropdownItem(tabWidget); if (listWidget != null) { dropdownPanel.remove(listWidget); } recalculateWidgetBarMinWidth(); showScrollButtons(); }
protected boolean setAndValidateDiskProfiles() { setDiskProfileParameters(); return validate(new org.ovirt.engine.core.bll.profiles.DiskProfileValidator(getDiskProfileId()).isStorageDomainValid(getStorageDomainId())); }	protected boolean setAndValidateDiskProfiles() { return validate(org.ovirt.engine.core.bll.profiles.DiskProfileHelper.setAndValidateDiskProfiles(java.util.Collections.singletonMap(getDiskImageInfo(), getStorageDomainId()), org.ovirt.engine.core.bll.AddDiskCommand.getStoragePool().getcompatibility_version())); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionStop(java.lang.String volumeName, java.lang.String remoteHost, java.lang.String remoteVolumeName, java.lang.Boolean force) { try { return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(vdsServer.glusterVolumeGeoRepSessionStop(volumeName, remoteVolumeName, remoteVolumeName, force)); } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionStop(java.lang.String volumeName, java.lang.String remoteHost, java.lang.String remoteVolumeName, java.lang.Boolean force) { try { return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(vdsServer.glusterVolumeGeoRepSessionStop(volumeName, remoteHost, remoteVolumeName, force)); } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
public void setHighlyAvailableIsConfigured(boolean value) { mVdsStatistics.setHighlyAvailableIsConfigured(value); }	public void setHighlyAvailableIsConfigured(boolean value) { vdsStatistics.setHighlyAvailableIsConfigured(value); }
public void setIsExecutionAllowed(boolean value) { isExecutionAllowed = value; if (value) { getExecuteProhibitionReasons().clear(); } onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("IsExecutionAllowed")); }	public void setIsExecutionAllowed(boolean value) { if ((isExecutionAllowed) != value) { isExecutionAllowed = value; if (value) { getExecuteProhibitionReasons().clear(); } onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("IsExecutionAllowed")); } }
public static void GetClusterDesktopMemoryOverCommit(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 0; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.ui.uicommonweb.dataprovider.GetConfigurationValueParameters(ConfigurationValues.MaxVdsMemOverCommit, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }	public static void getClusterDesktopMemoryOverCommit(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 0; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommit, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }
public void remove() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeQuotaAssignmentFromUsersTitle()); model.setHashName("remove_quota_assignment_from_user"); model.setHelpTag(model.getHashName(), "Quota > Users > Detach Users/Groups from Quota"); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.permissions item : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.permissions>cast(getSelectedItems())) { list.add(item.getOwnerName()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnRemove", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }	public void remove() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeQuotaAssignmentFromUsersTitle()); model.setHelpTag(HelpTag.remove_quota_assignment_from_user); model.setHashName("remove_quota_assignment_from_user"); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.Permissions item : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.Permissions>cast(getSelectedItems())) { list.add(item.getOwnerName()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnRemove", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.RolesEntity role) { if (role.getis_readonly()) { return getApplicationResources().lockImage(); } return null; }	@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.Role role) { if (role.getis_readonly()) { return getApplicationResources().lockImage(); } return null; }
static void translateErrors(java.util.List<org.ovirt.engine.core.common.action.VdcReturnValueBase> errors) { for (org.ovirt.engine.core.common.action.VdcReturnValueBase retVal : errors) { retVal.setCanDoActionMessages(org.ovirt.engine.ui.frontend.Frontend.canDoActionErrorsTranslator.translateErrorText(retVal.getCanDoActionMessages())); } }	private static void translateErrors(java.util.List<org.ovirt.engine.core.common.action.VdcReturnValueBase> errors) { for (org.ovirt.engine.core.common.action.VdcReturnValueBase retVal : errors) { retVal.setCanDoActionMessages(org.ovirt.engine.ui.frontend.Frontend.canDoActionErrorsTranslator.translateErrorText(retVal.getCanDoActionMessages())); } }
protected void addVmInterfaces() { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(getVm().getVdsGroupId(), org.ovirt.engine.core.bll.ImportVmCommand.getStoragePoolId(), getVdsGroup().getcompatibility_version()); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : getVm().getInterfaces()) { initInterface(iface); vnicProfileHelper.updateNicWithVnicProfileForUser(iface, org.ovirt.engine.core.bll.ImportVmCommand.getCurrentUser().getUserId()); vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.ImportVmCommand.getCompensationContext(), getParameters().isImportAsNewEntity(), getVdsGroup().getcompatibility_version()); macsAdded.add(iface.getMacAddress()); } vnicProfileHelper.auditInvalidInterfaces(org.ovirt.engine.core.bll.ImportVmCommand.getVmName(), getAuditLogTypeForInvalidInterfaces()); }	protected void addVmInterfaces() { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(getVm().getVdsGroupId(), org.ovirt.engine.core.bll.ImportVmCommand.getStoragePoolId(), getVdsGroup().getcompatibility_version(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_IMPORT_VM_INVALID_INTERFACES); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : getVm().getInterfaces()) { initInterface(iface); vnicProfileHelper.updateNicWithVnicProfileForUser(iface, org.ovirt.engine.core.bll.ImportVmCommand.getCurrentUser().getUserId()); vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.ImportVmCommand.getCompensationContext(), getParameters().isImportAsNewEntity(), getVdsGroup().getcompatibility_version()); macsAdded.add(iface.getMacAddress()); } vnicProfileHelper.auditInvalidInterfaces(org.ovirt.engine.core.bll.ImportVmCommand.getVmName()); }
java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> getAllForMac(java.lang.String macAddress);	java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> getPluggedForMac(java.lang.String macAddress);
@org.junit.Test public void nameExists() { newPoolNameIsAlreadyTaken(); canDoActionFailed(EngineMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NAME_ALREADY_EXIST); }	@org.junit.Test public void nameExists() { newPoolNameIsAlreadyTaken(); canDoActionFailed(EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_NAME_ALREADY_EXIST); }
private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineErrors errorCode) { doReturn(backend).when(cmd).getBackend(); when(backend.getResourceManager()).thenReturn(vdsBrokerFrontend); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.RunVdsCommand(eq(VDSCommandType.AddGlusterHook), argThat(anyHookVDS()))).thenReturn(vdsReturnValue); }	private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); when(backend.getResourceManager()).thenReturn(vdsBrokerFrontend); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.RunVdsCommand(eq(VDSCommandType.AddGlusterHook), argThat(anyHookVDS()))).thenReturn(vdsReturnValue); }
@org.junit.Test public void clusterAlreadyInLocalFs() { prepareManagementNetworkMocks(); createCommandWithDefaultVdsGroup(); oldGroupIsDetachedDefault(); storagePoolIsLocalFS(); cpuExists(); cpuManufacturersMatch(); allQueriesForVms(); storagePoolAlreadyHasCluster(); architectureIsUpdatable(); canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE); }	@org.junit.Test public void clusterAlreadyInLocalFs() { prepareManagementNetworkMocks(); createCommandWithDefaultVdsGroup(); oldGroupIsDetachedDefault(); storagePoolIsLocalFS(); setupCpu(); allQueriesForVms(); storagePoolAlreadyHasCluster(); architectureIsUpdatable(); canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE); }
private void OSType_SelectedItemChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.Integer osType = ((java.lang.Integer) (getOSType().getSelectedItem())); setIsWindowsOS(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsWindowsOsType(osType)); setIsLinuxOS(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsLinuxOsType(osType)); getInitrd_path().setIsChangable(getIsLinuxOS()); getInitrd_path().setIsAvailable(getIsLinuxOS()); getKernel_path().setIsChangable(getIsLinuxOS()); getKernel_path().setIsAvailable(getIsLinuxOS()); getKernel_parameters().setIsChangable(getIsLinuxOS()); getKernel_parameters().setIsAvailable(getIsLinuxOS()); getDomain().setIsChangable(getIsWindowsOS()); if ((getTimeZone().getSelectedItem()) == null) { getBehavior().updateTimeZone(); } else { getBehavior().updateTimeZone(((java.util.Map.Entry<java.lang.String, java.lang.String>) (getTimeZone().getSelectedItem())).getKey()); } }	private void firstBootDevice_SelectedItemChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.models.EntityModel entityModel = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (getFirstBootDevice().getSelectedItem())); org.ovirt.engine.core.common.businessentities.BootSequence firstDevice = ((org.ovirt.engine.core.common.businessentities.BootSequence) (entityModel.getEntity())); java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); for (java.lang.Object item : getFirstBootDevice().getItems()) { org.ovirt.engine.ui.uicommonweb.models.EntityModel a = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (item)); if (((org.ovirt.engine.core.common.businessentities.BootSequence) (a.getEntity())) != firstDevice) { list.add(a); } } org.ovirt.engine.ui.uicommonweb.models.EntityModel tempVar = new org.ovirt.engine.ui.uicommonweb.models.EntityModel(); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().noneTitle()); org.ovirt.engine.ui.uicommonweb.models.EntityModel noneOption = tempVar; list.add(0, noneOption); getSecondBootDevice().setItems(list); getSecondBootDevice().setSelectedItem(noneOption); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("The relevant Data-Center is not active.") java.lang.String relevantDCnotActive();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("The relevant Data-Center is not active.") java.lang.String relevantDCnotActive();
private void handleInactiveStorageDomain(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType, org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { org.ovirt.engine.core.bll.storage.domains.IsoDomainListSyncronizer.log.debug(("Storage domain id '{}', is not active, and therefore could not be refreshed for '{}'" + " file type (Iso domain status is '{}')."), storageDomainId, imageType, status); }	private void handleInactiveStorageDomain(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType, org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.log.debug(("Storage domain id '{}', is not active, and therefore could not be refreshed for '{}'" + " file type (Iso domain status is '{}')."), storageDomainId, imageType, status); }
public void setCreateSnapshotStage(org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters.CreateSnapshotStage createSnapshotStage) { this.createSnapshotStage = createSnapshotStage; }	public void setCreateSnapshotStage(org.ovirt.engine.core.common.action.CreateSnapshotForVmParameters.CreateSnapshotStage createSnapshotStage) { this.createSnapshotStage = createSnapshotStage; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Allow to configure Host's Network physical interfaces (Nics)") java.lang.String allowToConfigureHostsNetworkPhysicalInterfacesRoleTreeTooltip();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to configure Host's Network physical interfaces (Nics)") java.lang.String allowToConfigureHostsNetworkPhysicalInterfacesRoleTreeTooltip();
void localize() { pathLabel.setText(constants.storagePopupPosixPathLabel()); pathHintLabel.setText(constants.storagePopupPosixPathHintLabel()); vfsTypeLabel.setText(constants.storagePopupVfsTypeLabel()); mountOptionsLabel.setText(constants.storagePopupMountOptionsLabel()); nfsPosixAlertIcon.setTitle(constants.storagePopupPosixNfsWarningLabel()); }	void localize() { pathLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.PosixStorageView.constants.storagePopupPosixPathLabel()); pathHintLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.PosixStorageView.constants.storagePopupPosixPathHintLabel()); vfsTypeLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.PosixStorageView.constants.storagePopupVfsTypeLabel()); mountOptionsLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.PosixStorageView.constants.storagePopupMountOptionsLabel()); nfsPosixAlertIcon.setTitle(org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.PosixStorageView.constants.storagePopupPosixNfsWarningLabel()); }
private boolean shouldAddVlanToNic(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlan) { return (vlan.getId()) == null; }	protected boolean shouldAddVlanToNic(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlan) { return (vlan.getId()) == null; }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.SubTabVolumePermissionPresenter.constants.volumePermissionSubTabLabel(), 3); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData() { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.SubTabVolumePermissionPresenter.constants.volumePermissionSubTabLabel(), 3); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturnForXmlRpc glusterVolumeRebalanceStatus(java.lang.String volumeName) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.rebalanceStatus").withParameter("volumeName", volumeName).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturnForXmlRpc glusterVolumeRebalanceStatus(java.lang.String volumeName) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.rebalanceStatus").withParameter("volumeName", volumeName).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturnForXmlRpc(response); }
private java.lang.String[] createIncoherentIdentificationErrorReplacements(org.ovirt.engine.core.compat.Guid violatingEntityId, org.ovirt.engine.core.compat.Guid referringId, java.lang.String referringName) { return new java.lang.String[]{ java.lang.String.format("$id %s", violatingEntityId), java.lang.String.format("$referringId %s", referringId), java.lang.String.format("$referringName %s", referringName) }; }	private java.lang.String[] createIncoherentIdentificationErrorReplacements(org.ovirt.engine.core.compat.Guid violatingEntityId, org.ovirt.engine.core.compat.Guid referringId, java.lang.String referringName) { return new java.lang.String[]{ java.lang.String.format("$ENTITY_ID %s", violatingEntityId), java.lang.String.format("$referringId %s", referringId), java.lang.String.format("$referringName %s", referringName) }; }
@java.lang.Override protected org.ovirt.engine.core.common.queries.ConfigurationValues spiceFullScreenConfigKey() { return org.ovirt.engine.core.common.queries.ConfigurationValues.FullScreenUserportalDefault; }	@java.lang.Override protected org.ovirt.engine.core.common.queries.ConfigurationValues spiceFullScreenConfigKey() { if (placeManager.isMainSectionBasicPlaceVisible()) { return org.ovirt.engine.core.common.queries.ConfigurationValues.FullScreenUserportalBasicDefault; } return org.ovirt.engine.core.common.queries.ConfigurationValues.FullScreenUserportalExtendedDefault; }
public void maintenance() { if ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getConfirmWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel<java.lang.String> model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel<java.lang.String>(); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().maintenanceHostsTitle()); model.setHelpTag(HelpTag.maintenance_host); model.setHashName("maintenance_host"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().areYouSureYouWantToPlaceFollowingHostsIntoMaintenanceModeMsg()); java.util.ArrayList<java.lang.String> vdss = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getSelectedItems()) { vdss.add(vds.getName()); } model.setItems(vdss); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnMaintenance", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirm", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }	public void maintenance() { if ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getConfirmWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().maintenanceHostsTitle()); model.setHelpTag(HelpTag.maintenance_host); model.setHashName("maintenance_host"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().areYouSureYouWantToPlaceFollowingHostsIntoMaintenanceModeMsg()); java.util.ArrayList<java.lang.String> vdss = new java.util.ArrayList<java.lang.String>(); for (java.lang.Object item : org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VDS vds = ((org.ovirt.engine.core.common.businessentities.VDS) (item)); vdss.add(vds.getName()); } model.setItems(vdss); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnMaintenance", this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("CancelConfirm", this); model.getCommands().add(tempVar2); }
private void handleNonResponsiveHosts(java.util.List<java.lang.String> hostNotRespondingList) { if (!(hostNotRespondingList.isEmpty())) { addValidateMessage(EngineMessage.VDS_CANNOT_MAINTENANCE_VDS_IS_NOT_RESPONDING_WITH_VMS); org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getReturnValue().getValidateMessages().add(java.lang.String.format("$HostNotResponding %1$s", org.apache.commons.lang.StringUtils.join(hostNotRespondingList, ","))); } }	private void handleNonResponsiveHosts(java.util.List<java.lang.String> hostNotRespondingList) { if (!(hostNotRespondingList.isEmpty())) { addValidationMessage(EngineMessage.VDS_CANNOT_MAINTENANCE_VDS_IS_NOT_RESPONDING_WITH_VMS); org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getReturnValue().getValidationMessages().add(java.lang.String.format("$HostNotResponding %1$s", org.apache.commons.lang.StringUtils.join(hostNotRespondingList, ","))); } }
public static void GetClusterList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid dataCenterId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.dataprovider.VDSGroup> list = ((java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.dataprovider.VDSGroup>) (source)); java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.VdsGroupByNameComparer()); return list; } return new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.dataprovider.VDSGroup>(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new org.ovirt.engine.ui.uicommonweb.dataprovider.StoragePoolQueryParametersBase(dataCenterId), aQuery); }	public static void getClusterList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid dataCenterId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> list = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>) (source)); java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.VdsGroupByNameComparer()); return list; } return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId), aQuery); }
@java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel, ?> getConfirmModelPopup(org.ovirt.engine.ui.uicommonweb.models.providers.ProviderNetworkListModel source, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand) { if (lastExecutedCommand == (getModel().getRemoveCommand())) { return removeConfirmPopupProvider.get(); } else { return super.getConfirmModelPopup(source, lastExecutedCommand); } }	@java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel, ?> getConfirmModelPopup(org.ovirt.engine.ui.uicommonweb.models.providers.ProviderNetworkListModel source, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand) { return super.getConfirmModelPopup(source, lastExecutedCommand); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.authentication.DirectoryUser.class, to = org.ovirt.engine.api.model.User.class) public static org.ovirt.engine.api.model.User map(org.ovirt.engine.core.authentication.DirectoryUser entity, org.ovirt.engine.api.model.User template) { org.ovirt.engine.api.model.User model = (template != null) ? template : new org.ovirt.engine.api.model.User(); model.setName(entity.getFirstName()); model.setUserName((((entity.getName()) + "@") + (entity.getDirectoryName()))); model.setId(new org.ovirt.engine.core.compat.Guid(entity.getId().getBytes(), true).toString()); model.setLastName(entity.getLastName()); model.setEmail(entity.getEmail()); model.setDepartment(entity.getDepartment()); if ((entity.getGroups()) != null) { model.setGroups(new org.ovirt.engine.api.model.Groups()); for (org.ovirt.engine.core.authentication.DirectoryGroup directoryGroup : entity.getGroups()) { org.ovirt.engine.api.model.Group group = new org.ovirt.engine.api.model.Group(); group.setName(directoryGroup.getName()); model.getGroups().getGroups().add(group); } } if (!(org.apache.commons.lang.StringUtils.isEmpty(entity.getDirectory().getName()))) { org.ovirt.engine.api.model.Domain dom = new org.ovirt.engine.api.model.Domain(); dom.setId(new org.ovirt.engine.core.compat.Guid(entity.getDirectory().getName().getBytes(), true).toString()); model.setDomain(dom); } return model; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.authentication.DirectoryUser.class, to = org.ovirt.engine.api.model.User.class) public static org.ovirt.engine.api.model.User map(org.ovirt.engine.core.authentication.DirectoryUser entity, org.ovirt.engine.api.model.User template) { org.ovirt.engine.api.model.User model = (template != null) ? template : new org.ovirt.engine.api.model.User(); model.setName(entity.getFirstName()); model.setUserName((((entity.getName()) + "@") + (entity.getDirectory().getName()))); model.setId(new org.ovirt.engine.core.compat.Guid(entity.getId().getBytes(), true).toString()); model.setLastName(entity.getLastName()); model.setEmail(entity.getEmail()); model.setDepartment(entity.getDepartment()); if ((entity.getGroups()) != null) { model.setGroups(new org.ovirt.engine.api.model.Groups()); for (org.ovirt.engine.core.authentication.DirectoryGroup directoryGroup : entity.getGroups()) { org.ovirt.engine.api.model.Group group = new org.ovirt.engine.api.model.Group(); group.setName(directoryGroup.getName()); model.getGroups().getGroups().add(group); } } if (!(org.apache.commons.lang.StringUtils.isEmpty(entity.getDirectory().getName()))) { org.ovirt.engine.api.model.Domain dom = new org.ovirt.engine.api.model.Domain(); dom.setId(new org.ovirt.engine.core.compat.Guid(entity.getDirectory().getName().getBytes(), true).toString()); model.setDomain(dom); } return model; }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (!(getGlusterVolume().isOnline())) { addCanDoActionMessage(EngineMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN); return false; } if (((getParameters().getExistingBrick()) == null) || ((getParameters().getNewBrick()) == null)) { addCanDoActionMessage(EngineMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED); return false; } if (!(updateBrickServerAndInterfaceName(getParameters().getExistingBrick(), true))) { return false; } if (!(updateBrickServerAndInterfaceName(getParameters().getNewBrick(), true))) { return false; } if (!(isValidVolumeBrick(getParameters().getExistingBrick()))) { addCanDoActionMessage(EngineMessages.ACTION_TYPE_FAILED_NOT_A_GLUSTER_VOLUME_BRICK); return false; } return true; }	@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (!(getGlusterVolume().isOnline())) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN); return false; } if (((getParameters().getExistingBrick()) == null) || ((getParameters().getNewBrick()) == null)) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED); return false; } if (!(updateBrickServerAndInterfaceName(getParameters().getExistingBrick(), true))) { return false; } if (!(updateBrickServerAndInterfaceName(getParameters().getNewBrick(), true))) { return false; } if (!(isValidVolumeBrick(getParameters().getExistingBrick()))) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_NOT_A_GLUSTER_VOLUME_BRICK); return false; } return true; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepConfigReset(java.lang.String volumeName, java.lang.String slaveHost, java.lang.String slaveVolumeName, java.lang.String configKey, java.lang.String slaveUserName);	org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepConfigReset(java.lang.String volumeName, java.lang.String slaveHost, java.lang.String slaveVolumeName, java.lang.String configKey, java.lang.String userName);
private java.util.List<java.lang.String> getNamesOfDerivedVmsFromTemplate(org.ovirt.engine.core.common.businessentities.DiskImage diskImage) { java.util.List<java.lang.String> result = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.VM vm : org.ovirt.engine.core.bll.RemoveDiskCommand.getDbFacade().getVmDao().getAllWithTemplate(org.ovirt.engine.core.bll.RemoveDiskCommand.getVmTemplateId())) { for (org.ovirt.engine.core.common.businessentities.Disk vmDisk : org.ovirt.engine.core.bll.RemoveDiskCommand.getDbFacade().getDiskDao().getAllForVm(vm.getId())) { if ((vmDisk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.DiskImage vmDiskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (vmDisk)); if (vmDiskImage.getImageTemplateId().equals(diskImage.getImageId())) { if (vmDiskImage.getStorageIds().contains(org.ovirt.engine.core.bll.RemoveDiskCommand.getParameters().getStorageDomainId())) { result.add(vm.getName()); } break; } } } } return result; }	private java.util.List<java.lang.String> getNamesOfDerivedVmsFromTemplate(org.ovirt.engine.core.common.businessentities.DiskImage diskImage) { java.util.List<java.lang.String> result = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.VM vm : org.ovirt.engine.core.bll.RemoveDiskCommand.getVmDAO().getAllWithTemplate(org.ovirt.engine.core.bll.RemoveDiskCommand.getVmTemplateId())) { for (org.ovirt.engine.core.common.businessentities.Disk vmDisk : getDiskDao().getAllForVm(vm.getId())) { if ((vmDisk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.DiskImage vmDiskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (vmDisk)); if (vmDiskImage.getImageTemplateId().equals(diskImage.getImageId())) { if (vmDiskImage.getStorageIds().contains(org.ovirt.engine.core.bll.RemoveDiskCommand.getParameters().getStorageDomainId())) { result.add(vm.getName()); } break; } } } } return result; }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue)); }	@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue)); updateCanSetBoot(disks); }
public static java.util.Set<org.ovirt.engine.core.compat.Guid> collectForHost(org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager manager, org.ovirt.engine.core.common.businessentities.VDS host) { java.util.Set<org.ovirt.engine.core.compat.Guid> ids = new java.util.HashSet<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingVM pending : manager.pendingHostResources(host, org.ovirt.engine.core.bll.scheduling.pending.PendingVM.class)) { ids.add(pending.getVm().getId()); } return ids; }	public static java.util.Set<org.ovirt.engine.core.compat.Guid> collectForHost(org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager manager, org.ovirt.engine.core.compat.Guid host) { java.util.Set<org.ovirt.engine.core.compat.Guid> ids = new java.util.HashSet<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingVM pending : manager.pendingHostResources(host, org.ovirt.engine.core.bll.scheduling.pending.PendingVM.class)) { ids.add(pending.getVm()); } return ids; }
private void freezeVm() { if ((!(isLiveSnapshotApplicable())) || (!(isCinderDisksExist()))) { return; } org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue; try { returnValue = runVdsCommand(VDSCommandType.Freeze, new org.ovirt.engine.core.common.vdscommands.VdsAndVmIDVDSParametersBase(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVds().getId(), org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { handleFreezeVmFailure(e); return; } if (!(returnValue.getSucceeded())) { handleFreezeVmFailure(new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.freezeErr)); } }	private void freezeVm() { if (!(shouldFreezeOrThawVm())) { return; } org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue; try { auditLogDirector.log(this, AuditLogType.FREEZE_VM_INITIATED); returnValue = runVdsCommand(VDSCommandType.Freeze, new org.ovirt.engine.core.common.vdscommands.VdsAndVmIDVDSParametersBase(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVds().getId(), org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { handleFreezeVmFailure(e); return; } if (returnValue.getSucceeded()) { auditLogDirector.log(this, AuditLogType.FREEZE_VM_SUCCESS); } else { handleFreezeVmFailure(new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.freezeErr)); } }
@org.junit.Test public void testJsonNullDiskDescription() throws java.io.IOException { assertDiskDescriptionMap("DiskAlias", null); }	@org.junit.Test public void testJsonNullDiskDescription() throws java.io.IOException { org.ovirt.engine.core.bll.ImagesHandlerTest.assertDiskDescriptionMap("DiskAlias", null); }
@java.lang.Override protected void executeCommand() { updateQuotaCache(); if ((get_oldStoragePool().getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Up)) { if (!(org.apache.commons.lang.StringUtils.equals(get_oldStoragePool().getName(), org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getName()))) { runVdsCommand(VDSCommandType.SetStoragePoolDescription, new org.ovirt.engine.core.common.vdscommands.SetStoragePoolDescriptionVDSCommandParameters(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getName())); } } org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.copyUnchangedStoragePoolProperties(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool(), get_oldStoragePool()); org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePoolDAO().updatePartial(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool()); updateStoragePoolFormatType(); org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { updateQuotaCache(); org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.copyUnchangedStoragePoolProperties(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool(), oldStoragePool); org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePoolDAO().updatePartial(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool()); updateStoragePoolFormatType(); org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.setSucceeded(true); }
java.lang.String passDiscardNotSupportedForStorageType();	java.lang.String nonRetrievedVmsWereAllFilteredOnImportVm();
@java.lang.Override protected org.ovirt.engine.core.common.businessentities.VmNetworkInterface setNetwork(org.ovirt.engine.api.model.NIC device, org.ovirt.engine.core.common.businessentities.VmNetworkInterface ni) { if (device.isSetNetwork()) { if (((device.getNetwork().getId()) != null) || ((device.getNetwork().getName()) != null)) { org.ovirt.engine.core.compat.Guid clusterId = getEntity(org.ovirt.engine.core.common.businessentities.VmTemplate.class, VdcQueryType.GetVmTemplate, new org.ovirt.engine.core.common.queries.GetVmTemplateParameters(parentId), "id").getvds_group_id(); org.ovirt.engine.core.common.businessentities.Network net = lookupClusterNetwork(clusterId, (device.getNetwork().isSetId() ? asGuid(device.getNetwork().getId()) : null), device.getNetwork().getName()); if (net != null) { ni.setNetworkName(net.getname()); } } else { ni.setNetworkName(null); } } return ni; }	@java.lang.Override protected org.ovirt.engine.core.common.businessentities.VmNetworkInterface setNetwork(org.ovirt.engine.api.model.NIC device, org.ovirt.engine.core.common.businessentities.VmNetworkInterface ni) { if (device.isSetNetwork()) { if ((device.isSetId()) || (device.isSetName())) { org.ovirt.engine.core.compat.Guid clusterId = getEntity(org.ovirt.engine.core.common.businessentities.VmTemplate.class, VdcQueryType.GetVmTemplate, new org.ovirt.engine.core.common.queries.GetVmTemplateParameters(parentId), "id").getvds_group_id(); org.ovirt.engine.core.common.businessentities.Network net = lookupClusterNetwork(clusterId, (device.getNetwork().isSetId() ? asGuid(device.getNetwork().getId()) : null), device.getNetwork().getName()); if (net != null) { ni.setNetworkName(net.getname()); } } else { ni.setNetworkName(null); } } return ni; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VDS getFirstUpRhelForVdsGroup(org.ovirt.engine.core.compat.Guid vdsGroupId) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vds = getCallsHandler().executeReadList("getFirstUpRhelForVdsGroupId", org.ovirt.engine.core.dao.VdsDAOImpl.VdsRowMapper.instance, getCustomMapSqlParameterSource().addValue("vds_group_id", vdsGroupId)); return (vds.size()) != 0 ? vds.iterator().next() : null; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.VDS getFirstUpRhelForVdsGroup(org.ovirt.engine.core.compat.Guid vdsGroupId) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vds = getCallsHandler().executeReadList("getFirstUpRhelForVdsGroupId", org.ovirt.engine.core.dao.VdsDaoImpl.VdsRowMapper.instance, getCustomMapSqlParameterSource().addValue("vds_group_id", vdsGroupId)); return (vds.size()) != 0 ? vds.iterator().next() : null; }
public java.util.List<org.ovirt.engine.core.dal.VdcBllMessages> validate() { for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface : params.getInterfaces()) { java.lang.String name = iface.getName(); if (validateInterfaceNotProcessedAlready(iface)) { if (isBond(iface)) { extractBondIfModified(iface, name); } else { if (org.apache.commons.lang.StringUtils.isNotBlank(iface.getBondName())) { extractBondSlave(iface); } if (!(getExistingIfaces().containsKey(org.ovirt.engine.core.utils.NetworkUtils.StripVlan(name)))) { violations.add(VdcBllMessages.NETWORK_INTERFACE_NOT_EXISTS); } } if ((violations.isEmpty()) && (org.apache.commons.lang.StringUtils.isNotBlank(iface.getNetworkName()))) { extractNetwork(iface); } } } validateBondSlavesCount(); detectSlaveChanges(); extractRemoveNetworks(); extractRemovedBonds(); return violations; }	public java.util.List<org.ovirt.engine.core.dal.VdcBllMessages> validate() { for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface : params.getInterfaces()) { java.lang.String name = iface.getName(); if (addInterfaceToProcessedList(iface)) { if (isBond(iface)) { extractBondIfModified(iface, name); } else { if (org.apache.commons.lang.StringUtils.isNotBlank(iface.getBondName())) { extractBondSlave(iface); } if (!(getExistingIfaces().containsKey(org.ovirt.engine.core.utils.NetworkUtils.StripVlan(name)))) { violations.add(VdcBllMessages.NETWORK_INTERFACE_NOT_EXISTS); } } if ((violations.isEmpty()) && (org.apache.commons.lang.StringUtils.isNotBlank(iface.getNetworkName()))) { extractNetwork(iface); } } } validateBondSlavesCount(); detectSlaveChanges(); extractRemovedNetworks(); extractRemovedBonds(); return violations; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.network.Network findDefaultManagementNetwork(org.ovirt.engine.core.compat.Guid dataCenterId) { final org.ovirt.engine.core.common.businessentities.network.Network defaultEngineManagementNetwork = findDefaultEngineManagementNetwork(dataCenterId); if (defaultEngineManagementNetwork != null) { return defaultEngineManagementNetwork; } final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> managementNetworks = networkDao.getManagementNetworks(dataCenterId); if ((managementNetworks.size()) == 1) { return managementNetworks.get(0); } return null; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.network.Network findDefaultManagementNetwork(org.ovirt.engine.core.compat.Guid dataCenterId) { final org.ovirt.engine.core.common.businessentities.network.Network defaultEngineManagementNetwork = findConfigDefaultEngineManagementNetwork(dataCenterId); if (defaultEngineManagementNetwork != null) { return defaultEngineManagementNetwork; } final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> managementNetworks = networkDao.getManagementNetworks(dataCenterId); if ((managementNetworks.size()) == 1) { return managementNetworks.get(0); } return null; }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (getGeoRepSession().getStatus().equals(GeoRepSessionStatus.STOPPED)) { addValidateMessage(EngineMessage.ACTION_TYPE_FAILED_GEOREP_SESSION_STOPPED); } return true; }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (getGeoRepSession().getStatus().equals(GeoRepSessionStatus.STOPPED)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GEOREP_SESSION_STOPPED); } return true; }
public boolean isRngRateValid() { return rngRateValid; }	public boolean getIsSystemTabValid() { return isSystemTabValid; }
@java.lang.Override public java.lang.Void runInTransaction() { curVm.guestLogoutTimeTreatmentAfterDestroy(); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDao().update(curVm.getDynamicData()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStatisticsDao().update(curVm.getStatisticsData()); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces = curVm.getInterfaces(); if ((interfaces != null) && ((interfaces.size()) > 0)) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface ifc : interfaces) { org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics stats = ifc.getStatistics(); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkStatisticsDao().update(stats); } } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDynamicDao().smartUpdatePartialVds(getVdsId(), 0, 0, 0, (-(curVm.getVmMemSizeMb())), (-(curVm.getNumOfCpus()))); return null; }	@java.lang.Override public java.lang.Void runInTransaction() { curVm.guestLogoutTimeTreatmentAfterDestroy(); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDao().update(curVm.getDynamicData()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStatisticsDao().update(curVm.getStatisticsData()); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces = curVm.getInterfaces(); if ((interfaces != null) && ((interfaces.size()) > 0)) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface ifc : interfaces) { org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics stats = ifc.getStatistics(); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkStatisticsDao().update(stats); } } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDynamicDao().updatePartialVdsDynamicCalc(getVdsId(), 0, 0, 0, (-(curVm.getVmMemSizeMb())), (-(curVm.getNumOfCpus()))); return null; }
protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (getWatchdogs().isEmpty()) { return failCanDoAction(EngineMessages.WATCHDOG_NOT_FOUND); } return true; }	protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (getWatchdogs().isEmpty()) { return failCanDoAction(EngineMessage.WATCHDOG_NOT_FOUND); } return true; }
public void setEndTime(java.util.Date value) { mUseTimeout = true; mEndTime = ((java.util.Date) (value.clone())); }	public void setEndTime(long value) { mUseTimeout = true; mEndTime = value; }
@java.lang.Override protected void executeCommand() { java.sql.Time originalExecutionTime = getSchedule().getExecutionTime(); try { java.lang.String jobId = scheduleJob(); if (jobId != null) { setSucceeded(true); getSchedule().setJobId(jobId); getSchedule().setExecutionTime(originalExecutionTime); getGlusterVolumeSnapshotScheduleDao().save(getSchedule()); } else { setSucceeded(false); } } catch (java.lang.Exception ex) { setSucceeded(false); handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_SCHEDULE_FAILED, ex.getMessage()); } }	@java.lang.Override protected void executeCommand() { java.sql.Time originalExecutionTime = getSchedule().getExecutionTime(); try { java.lang.String jobId = scheduleJob(); setSucceeded(true); getSchedule().setJobId(jobId); getSchedule().setExecutionTime(originalExecutionTime); getGlusterVolumeSnapshotScheduleDao().save(getSchedule()); } catch (java.lang.Exception ex) { setSucceeded(false); handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_SCHEDULE_FAILED, ex.getMessage()); } }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Root") java.lang.String rootTag();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Root") java.lang.String rootTag();
@org.junit.Test public void canDoAction() { java.util.List lunsFromDb = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id("1"); lun1.setStorageDomainId(sdId); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id("2"); lun2.setStorageDomainId(sdId); lunsFromDb.add(lun1); lunsFromDb.add(lun2); when(lunsDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.disk.lun.RefreshLunsSizeCommandTest.STORAGE)).thenReturn(lunsFromDb); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(cmd); }	@org.junit.Test public void canDoAction() { java.util.List lunsFromDb = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id("1"); lun1.setStorageDomainId(sdId); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id("2"); lun2.setStorageDomainId(sdId); lunsFromDb.add(lun1); lunsFromDb.add(lun2); when(lunsDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.RefreshLunsSizeCommandTest.STORAGE)).thenReturn(lunsFromDb); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(cmd); }
public void backupCheck() { if (lock.tryLock()) { try { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Backup check started."); doBackupCheck(); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Backup check completed."); } finally { lock.unlock(); } } }	private void backupCheck() { try { if (lock.tryLock()) { try { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Backup check started."); doBackupCheck(); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Backup check completed."); } finally { lock.unlock(); } } } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.error("Exception in backupCheck: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.debug("Exception", t); } }
private boolean foundBadMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics, java.util.function.Predicate<java.lang.String> badMacPredicate) { return vnics.stream().map(VmNetworkInterface::getMacAddress).filter(java.util.Objects::nonNull).anyMatch(badMacPredicate); }	private org.ovirt.engine.core.bll.ValidationResult validateForMacsInUse(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics, org.ovirt.engine.core.bll.network.macpool.MacPool macPool) { if (macPool.isDuplicateMacAddressesAllowed()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } final java.util.List<java.lang.String> macsInUse = vnics.stream().map(VmNetworkInterface::getMacAddress).filter(java.util.Objects::nonNull).filter(macPool::isMacInUse).collect(java.util.stream.Collectors.toList()); final org.ovirt.engine.core.common.errors.EngineMessage msg = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE_DETAILED; return org.ovirt.engine.core.bll.ValidationResult.failWith(msg, org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(msg, macsInUse)).unless(macsInUse.isEmpty()); }
public void init() { org.ovirt.engine.ui.uicommonweb.ICommandTarget target = ((org.ovirt.engine.ui.uicommonweb.ICommandTarget) (getEntity())); org.ovirt.engine.ui.uicommonweb.UICommand actionCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("OnExecute", this); actionCommand.setTitle(constants.ok()); actionCommand.setIsDefault(true); getCommands().add(actionCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", target); cancelCommand.setTitle(constants.cancel()); cancelCommand.setIsCancel(true); getCommands().add(cancelCommand); setSourceAvailable(true); }	public void init() { org.ovirt.engine.ui.uicommonweb.ICommandTarget target = ((org.ovirt.engine.ui.uicommonweb.ICommandTarget) (getEntity())); org.ovirt.engine.ui.uicommonweb.UICommand actionCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("OnExecute", this); actionCommand.setTitle(constants.ok()); actionCommand.setIsDefault(true); getCommands().add(actionCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", target); cancelCommand.setTitle(constants.cancel()); cancelCommand.setIsCancel(true); getCommands().add(cancelCommand); }
public java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> getVmInitByIds(java.util.List<org.ovirt.engine.core.compat.Guid> ids) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> all = vmInitDao.getVmInitByIds(ids); for (org.ovirt.engine.core.common.businessentities.VmInit vmInit : all) { vmInit.setPasswordAlreadyStored((!(org.apache.commons.lang.StringUtils.isEmpty(vmInit.getRootPassword())))); vmInit.setRootPassword(null); } return all; }	public java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> getVmInitWithoutPasswordByIds(java.util.List<org.ovirt.engine.core.compat.Guid> ids) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> all = vmInitDao.getVmInitByIds(ids); for (org.ovirt.engine.core.common.businessentities.VmInit vmInit : all) { vmInit.setPasswordAlreadyStored((!(org.apache.commons.lang.StringUtils.isEmpty(vmInit.getRootPassword())))); vmInit.setRootPassword(null); } return all; }
@org.junit.Test public void invalidVdsGroup() { createSimpleCommand(); when(vdsGroupDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); canDoActionFailedWithReason(EngineMessages.VDS_CLUSTER_IS_NOT_VALID); }	@org.junit.Test public void invalidVdsGroup() { createSimpleCommand(); when(vdsGroupDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); canDoActionFailedWithReason(EngineMessage.VDS_CLUSTER_IS_NOT_VALID); }
public boolean isUseManualTabIndex() { return useManualTabIndex; }	public org.ovirt.engine.ui.common.widget.VisibilityRenderer getRenderer() { return renderer; }
@java.lang.Override protected void init() { super.init(); setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getContainerId()); setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getStoragePoolId()); imageToDestinationDomainMap = org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getImageToDestinationDomainMap(); if (((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm()) != null) && ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap()) != null)) { imageList = new java.util.ArrayList(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { imageList.add(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))); } } } ensureDomainMap(imageList, org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getDestDomainId()); org.ovirt.engine.core.bll.VmHandler.updateMaxMemorySize(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getEffectiveCompatibilityVersion()); }	@java.lang.Override protected void init() { super.init(); setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getContainerId()); setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getStoragePoolId()); imageToDestinationDomainMap = org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getImageToDestinationDomainMap(); if (((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm()) != null) && ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap()) != null)) { imageList = new java.util.ArrayList(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { imageList.add(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))); } } } ensureDomainMap(imageList, org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getDestDomainId()); }
public void updateVmIfChanged(org.ovirt.engine.core.compat.Guid vmId, java.lang.String vdsmHash) { if ((!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(getGroupCompatibilityVersion(vdsId)))) && (isVmDevicesChanged(vmId, vdsmHash))) { updateVm(vmId); } }	public void updateVm(org.ovirt.engine.core.compat.Guid vmId, java.lang.String vdsmHash) { if ((!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(getGroupCompatibilityVersion(vdsId)))) && (isVmDevicesChanged(vmId, vdsmHash, fetchTime))) { lockTouchedVm(vmId); vmsToUpdate.add(vmId); } }
private void remove() { org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.RemoveProvider, new org.ovirt.engine.core.common.action.ProviderParameters(((org.ovirt.engine.core.common.businessentities.Provider) (getSelectedItem()))), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void Executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { getSearchCommand().Execute(); } }); }	private void remove() { org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.RemoveProvider, new org.ovirt.engine.core.common.action.ProviderParameters(((org.ovirt.engine.core.common.businessentities.Provider) (getSelectedItem()))), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { getSearchCommand().execute(); } }); }
@java.lang.Override protected void executeCommand() { updateVmInitPassword(); org.ovirt.engine.core.bll.VmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVdsGroup().getcompatibility_version()); org.ovirt.engine.core.compat.Guid poolId = getPoolId(); setActionReturnValue(poolId); org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().getVmtGuid(), org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getCompensationContext()); addVmsToPool(poolId); org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getReturnValue().setCanDoAction(getAddVmsSucceded()); org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.setSucceeded(getAddVmsSucceded()); org.ovirt.engine.core.bll.VmTemplateHandler.unlockVmTemplate(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().getVmtGuid()); org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getCompensationContext().resetCompensation(); }	@java.lang.Override protected void executeCommand() { updateVmInitPassword(); org.ovirt.engine.core.bll.VmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVdsGroup().getcompatibility_version()); org.ovirt.engine.core.compat.Guid poolId = getPoolId(); setActionReturnValue(poolId); org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().getVmtGuid(), org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getCompensationContext()); addVmsToPool(poolId); org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getReturnValue().setCanDoAction(isAddVmsSucceded()); org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.setSucceeded(isAddVmsSucceded()); org.ovirt.engine.core.bll.VmTemplateHandler.unlockVmTemplate(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().getVmtGuid()); org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getCompensationContext().resetCompensation(); }
private java.lang.String getJsonDiskDescription() throws java.io.IOException { return org.ovirt.engine.core.bll.storage.disk.MetadataDiskDescriptionHandler.getInstance().generateJsonDiskDescription(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getParameters().getDiskInfo()); }	private java.lang.String getJsonDiskDescription() throws java.io.IOException { return org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandler.getInstance().generateJsonDiskDescription(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getParameters().getDiskInfo()); }
private void addReportedIpConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { if (!(isPrimaryAddressExist())) { return; } org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol definedBootProtocol = networkDataCenterIpConfigurationDefinition.getPrimaryAddress().getBootProtocol(); result.add(ReportedConfigurationType.BOOT_PROTOCOL, iface.getBootProtocol(), definedBootProtocol); if (definedBootProtocol == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)) { result.add(ReportedConfigurationType.NETMASK, iface.getSubnet(), networkDataCenterIpConfigurationDefinition.getPrimaryAddress().getNetmask()); result.add(ReportedConfigurationType.IP_ADDRESS, iface.getAddress(), networkDataCenterIpConfigurationDefinition.getPrimaryAddress().getAddress()); } }	private void addReportedIpConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { if (!(isPrimaryAddressExist())) { return; } org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol definedBootProtocol = (isPrimaryAddressExist()) ? getPrimaryAddress().getBootProtocol() : null; result.add(ReportedConfigurationType.BOOT_PROTOCOL, iface.getBootProtocol(), definedBootProtocol); if ((definedBootProtocol == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)) & ((iface.getBootProtocol()) == definedBootProtocol)) { result.add(ReportedConfigurationType.NETMASK, iface.getSubnet(), (isPrimaryAddressExist() ? getPrimaryAddress().getNetmask() : null)); result.add(ReportedConfigurationType.IP_ADDRESS, iface.getAddress(), (isPrimaryAddressExist() ? getPrimaryAddress().getAddress() : null)); } }
protected boolean hostToRunExist() { java.util.List<org.ovirt.engine.core.compat.Guid> dedicatedHostsList = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getDedicatedVmForVdsList(); if (dedicatedHostsList.isEmpty()) { return true; } for (org.ovirt.engine.core.compat.Guid candidateHostGuid : dedicatedHostsList) { if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(candidateHostGuid)) == null) { addCanDoActionMessage(EngineMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST); return false; } } return true; }	protected boolean hostToRunExist() { java.util.List<org.ovirt.engine.core.compat.Guid> dedicatedHostsList = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getDedicatedVmForVdsList(); if (dedicatedHostsList.isEmpty()) { return true; } for (org.ovirt.engine.core.compat.Guid candidateHostGuid : dedicatedHostsList) { if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(candidateHostGuid)) == null) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_HOST_NOT_EXIST); return false; } } return true; }
@java.lang.Override public void setEnabled(boolean enabled) { editFenceAgent.setEnabled(enabled); removeConcurrentGroup.setEnabled(enabled); if (enabled) { agentLabel.getElement().removeClassName(OvirtCss.LABEL_DISABLED); } else { agentLabel.getElement().addClassName(OvirtCss.LABEL_DISABLED); } }	@java.lang.Override public void setEnabled(boolean enabled) { editFenceAgent.setEnabled(enabled); removeConcurrentGroup.setEnabled(enabled); if (enabled) { agentLabel.removeStyleName(OvirtCss.LABEL_DISABLED); agentLabel.addStyleName(style.fakeAnchor()); } else { agentLabel.addStyleName(OvirtCss.LABEL_DISABLED); agentLabel.removeStyleName(style.fakeAnchor()); } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Disk object) { if ((object.getLastAlignmentScan()) != null) { com.google.gwt.i18n.client.DateTimeFormat lastScanDateFormat = com.google.gwt.i18n.client.DateTimeFormat.getFormat("yyyy-MM-dd, HH:mm"); getCell().setTitle((((org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.constants.lastDiskAlignmentScan()) + ": ") + (lastScanDateFormat.format(object.getLastAlignmentScan())))); } else { getCell().setTitle(null); } return object.getAlignment().toString(); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Disk object) { if ((object.getLastAlignmentScan()) != null) { java.lang.String lastScanDate = com.google.gwt.i18n.client.DateTimeFormat.getFormat("yyyy-MM-dd, HH:mm").format(object.getLastAlignmentScan()); setTitle(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.messages.lastDiskAlignment(lastScanDate)); } else { setTitle(null); } return object.getAlignment().toString(); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.StorageServerConnections mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.StorageServerConnections entity = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); entity.setconnection(rs.getString("connection")); entity.setid(rs.getString("id")); entity.setiqn(rs.getString("iqn")); entity.setport(rs.getString("port")); entity.setportal(rs.getString("portal")); entity.setpassword(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.decryptPassword(rs.getString("password"))); entity.setstorage_type(org.ovirt.engine.core.common.businessentities.storage.StorageType.forValue(rs.getInt("storage_type"))); entity.setuser_name(rs.getString("user_name")); entity.setMountOptions(rs.getString("mount_options")); entity.setVfsType(rs.getString("vfs_type")); entity.setNfsVersion(((rs.getString("nfs_version")) != null ? org.ovirt.engine.core.common.businessentities.NfsVersion.forValue(rs.getString("nfs_version")) : null)); entity.setNfsRetrans(org.ovirt.engine.core.dao.StorageServerConnectionDAOImpl.getShort(rs, "nfs_retrans")); entity.setNfsTimeo(org.ovirt.engine.core.dao.StorageServerConnectionDAOImpl.getShort(rs, "nfs_timeo")); return entity; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.StorageServerConnections mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.StorageServerConnections entity = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); entity.setconnection(rs.getString("connection")); entity.setid(rs.getString("id")); entity.setiqn(rs.getString("iqn")); entity.setport(rs.getString("port")); entity.setportal(rs.getString("portal")); entity.setpassword(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.decryptPassword(rs.getString("password"))); entity.setstorage_type(org.ovirt.engine.core.common.businessentities.storage.StorageType.forValue(rs.getInt("storage_type"))); entity.setuser_name(rs.getString("user_name")); entity.setMountOptions(rs.getString("mount_options")); entity.setVfsType(rs.getString("vfs_type")); entity.setNfsVersion(((rs.getString("nfs_version")) != null ? org.ovirt.engine.core.common.businessentities.NfsVersion.forValue(rs.getString("nfs_version")) : null)); entity.setNfsRetrans(org.ovirt.engine.core.dao.StorageServerConnectionDaoImpl.getShort(rs, "nfs_retrans")); entity.setNfsTimeo(org.ovirt.engine.core.dao.StorageServerConnectionDaoImpl.getShort(rs, "nfs_timeo")); return entity; }
@java.lang.Override protected void readGeneralData(org.ovirt.engine.core.compat.backendcompat.XmlNode content) { org.ovirt.engine.core.compat.backendcompat.XmlNode node = content.SelectSingleNode(OvfProperties.NAME); if (node != null) { _vmTemplate.setName(node.innerText); name = _vmTemplate.getName(); } node = content.SelectSingleNode(OvfProperties.TEMPLATE_ID); if (node != null) { if (org.apache.commons.lang.StringUtils.isNotEmpty(node.innerText)) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(node.innerText)); } } node = content.SelectSingleNode(OvfProperties.IS_DISABLED); if (node != null) { _vmTemplate.setDisabled(java.lang.Boolean.parseBoolean(node.innerText)); } node = content.SelectSingleNode(OvfProperties.TRUSTED_SERVICE); if (node != null) { _vmTemplate.setTrustedService(java.lang.Boolean.parseBoolean(node.innerText)); } node = content.SelectSingleNode(OvfProperties.TEMPLATE_TYPE); if (node != null) { _vmTemplate.setTemplateType(org.ovirt.engine.core.common.businessentities.VmEntityType.valueOf(node.innerText)); } node = content.SelectSingleNode(OvfProperties.BASE_TEMPLATE_ID); if (node != null) { _vmTemplate.setBaseTemplateId(org.ovirt.engine.core.compat.Guid.createGuidFromString(node.innerText)); } else { _vmTemplate.setBaseTemplateId(_vmTemplate.getId()); } node = content.SelectSingleNode(OvfProperties.TEMPLATE_VERSION_NUMBER); if (node != null) { _vmTemplate.setTemplateVersionNumber(java.lang.Integer.parseInt(node.innerText)); } node = content.SelectSingleNode(OvfProperties.TEMPLATE_NAME); if (node != null) { _vmTemplate.setTemplateVersionName(node.innerText); } }	@java.lang.Override protected void readGeneralData(org.ovirt.engine.core.compat.backendcompat.XmlNode content) { org.ovirt.engine.core.compat.backendcompat.XmlNode node = content.SelectSingleNode(OvfProperties.NAME); if (node != null) { _vmTemplate.setName(node.innerText); name = _vmTemplate.getName(); } node = content.SelectSingleNode(OvfProperties.TEMPLATE_ID); if (node != null) { if (org.apache.commons.lang.StringUtils.isNotEmpty(node.innerText)) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(node.innerText)); } } node = content.SelectSingleNode(OvfProperties.IS_DISABLED); if (node != null) { _vmTemplate.setDisabled(java.lang.Boolean.parseBoolean(node.innerText)); } node = content.SelectSingleNode(OvfProperties.TRUSTED_SERVICE); if (node != null) { _vmTemplate.setTrustedService(java.lang.Boolean.parseBoolean(node.innerText)); } node = content.SelectSingleNode(OvfProperties.TEMPLATE_TYPE); if (node != null) { _vmTemplate.setTemplateType(org.ovirt.engine.core.common.businessentities.VmEntityType.valueOf(node.innerText)); } node = content.SelectSingleNode(OvfProperties.BASE_TEMPLATE_ID); if (node != null) { _vmTemplate.setBaseTemplateId(org.ovirt.engine.core.compat.Guid.createGuidFromString(node.innerText)); } else { _vmTemplate.setBaseTemplateId(_vmTemplate.getId()); } node = content.SelectSingleNode(OvfProperties.TEMPLATE_VERSION_NUMBER); if (node != null) { _vmTemplate.setTemplateVersionNumber(java.lang.Integer.parseInt(node.innerText)); } node = content.SelectSingleNode(OvfProperties.TEMPLATE_VERSION_NAME); if (node != null) { _vmTemplate.setTemplateVersionName(node.innerText); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { onExportChanged(); updateMtu(); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { onExportChanged(); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity selectedSlaveVolume = getSlaveVolumes().getSelectedItem(); java.util.Set<java.lang.String> hostsInCurrentVolume = new java.util.HashSet<java.lang.String>(); if ((!(getShowEligibleVolumes().getEntity())) && (selectedSlaveVolume != null)) { updateRecommendatonViolations(); } if (selectedSlaveVolume != null) { hostsInCurrentVolume = getHostNamesForVolume(selectedSlaveVolume); } getSlaveHosts().setItems(hostsInCurrentVolume); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity selectedSlaveVolume = getSlaveVolumes().getSelectedItem(); java.util.Set<java.lang.String> hostsInCurrentVolume = new java.util.HashSet<java.lang.String>(); if ((!(getShowEligibleVolumes().getEntity())) && (selectedSlaveVolume != null)) { updateRecommendatonViolations(); } if (selectedSlaveVolume != null) { hostsInCurrentVolume = getHostNamesForVolume(selectedSlaveVolume); } getSlaveHosts().setItems(hostsInCurrentVolume); }
public void startNextLiveMerge(int completedChildren) { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.getParameters().getImageIds().get(completedChildren); log.infoFormat("Starting child command {0} of {1}, image {2}", (completedChildren + 1), org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.getParameters().getImageIds().size(), imageId); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveSnapshotSingleDiskLive, buildRemoveSnapshotSingleDiskLiveParameters(imageId), org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.cloneContextAndDetachFromParent()); }	public void startNextLiveMerge(int completedChildren) { if (completedChildren == 0) { org.ovirt.engine.core.bll.ImagesHandler.updateAllDiskImageSnapshotsStatus(getImageGroupId(), ImageStatus.LOCKED); } else { checkImageIdConsistency((completedChildren - 1)); } org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.getParameters().getImageIds().get(completedChildren); org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.log.info("Starting child command {} of {}, image '{}'", (completedChildren + 1), org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.getParameters().getImageIds().size(), imageId); org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters = buildRemoveSnapshotSingleDiskLiveParameters(imageId); if ((org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.getParameters().getChildImageIds()) == null) { org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.getParameters().setChildImageIds(java.util.Arrays.asList(new org.ovirt.engine.core.compat.Guid[org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.getParameters().getImageIds().size()])); } org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.getParameters().getChildImageIds().set(completedChildren, parameters.getDestinationImageId()); persistCommand(org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveSnapshotSingleDiskLive, parameters, org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.cloneContextAndDetachFromParent()); }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel setEntity(java.lang.Object value) { if ((entity) != value) { EntityChanging(value, entity); entity = value; OnEntityChanged(); getEntityChangedEvent().raise(this, EventArgs.Empty); OnPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("Entity")); } return this; }	public void setEntity(java.lang.Object value) { if ((entity) != value) { EntityChanging(value, entity); entity = value; OnEntityChanged(); getEntityChangedEvent().raise(this, EventArgs.Empty); OnPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("Entity")); } }
public abstract com.google.gwt.event.dom.client.HasClickHandlers getCloseButton();	public abstract com.google.gwt.event.dom.client.HasClickHandlers getCloseIconButton();
public static void getHostNumaTopologyByHostId(AsyncQuery asyncQuery, org.ovirt.engine.core.compat.Guid hostId) { List<VdsNumaNode> numaNodeList = new java.util.ArrayList<VdsNumaNode>(); numaNodeList.add(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getNumaNode(new VdsNumaNode(), 0)); numaNodeList.add(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getNumaNode(new VdsNumaNode(), 1)); numaNodeList.add(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getNumaNode(new VdsNumaNode(), 2)); numaNodeList.add(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getNumaNode(new VdsNumaNode(), 3)); asyncQuery.asyncCallback.onSuccess(asyncQuery.model, numaNodeList); }	public void getHostNumaTopologyByHostId(org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery, org.ovirt.engine.core.compat.Guid hostId) { asyncQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VdsNumaNode>(); } return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVdsNumaNodesByVdsId, new org.ovirt.engine.core.common.queries.IdQueryParameters(hostId), asyncQuery); }
@java.lang.Override public void onLogout() { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(); query.setHandleFailure(true); query.setModel(this); query.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { Window.Location.reload(); } }; frontend.logoffAsync(frontend.getLoggedInUser(), query); }	@java.lang.Override public void onLogout() { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(); query.setHandleFailure(true); query.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { Window.Location.reload(); } }; frontend.logoffAsync(frontend.getLoggedInUser(), query); }
@org.junit.Test public void testGetAllForAdElementFilteredWithNoPermissions() { java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> result = dao.getAllForAdElement(org.ovirt.engine.core.dao.PermissionDAOTest.AD_ELEMENT_ID, org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID, org.ovirt.engine.core.dao.UNPRIVILEGED_USER_SESSION_ID, true); org.ovirt.engine.core.dao.PermissionDAOTest.assertInvalidGetPermissionList(result); }	@org.junit.Test public void testGetAllForAdElementFilteredWithNoPermissions() { java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> result = dao.getAllForAdElement(org.ovirt.engine.core.dao.PermissionDAOTest.AD_ELEMENT_ID, org.ovirt.engine.core.dao.UNPRIVILEGED_USER_SESSION_ID, true); org.ovirt.engine.core.dao.PermissionDAOTest.assertInvalidGetPermissionList(result); }
private void removeUnselectableHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.compat.Guid run_on_vds, boolean allRunOnSameVds, boolean hostedEngineOnlyMigration) { if ((getVmsOnSameCluster()) && allRunOnSameVds) { org.ovirt.engine.core.common.businessentities.VDS runOnSameVDS = null; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getId().equals(run_on_vds)) { runOnSameVDS = host; } } hosts.remove(runOnSameVDS); } if (hostedEngineOnlyMigration) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> nonHeHosts = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (!(host.isHostedEngineDeployed())) { nonHeHosts.add(host); } } hosts.removeAll(nonHeHosts); } }	private void removeUnselectableHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.compat.Guid runOnVds, boolean allRunOnSameVds) { if ((getVmsOnSameCluster()) && allRunOnSameVds) { org.ovirt.engine.core.common.businessentities.VDS runOnSameVDS = null; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getId().equals(runOnVds)) { runOnSameVDS = host; } } hosts.remove(runOnSameVDS); } }
protected boolean migrateVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.job.ExecutionContext parentContext) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters(false, vm.getId()); parameters.setReason(new org.ovirt.engine.core.common.migration.MigrationReason(MigrationReason.Type.HOST_IN_MAINTENANCE)); return runInternalAction(VdcActionType.MigrateVm, parameters, createMigrateVmContext(parentContext, vm)).getSucceeded(); }	protected boolean migrateVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.job.ExecutionContext parentContext) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters(false, vm.getId()); parameters.setReason(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getMessage(AuditLogType.MIGRATION_REASON_HOST_IN_MAINTENANCE)); return runInternalAction(VdcActionType.MigrateVm, parameters, createMigrateVmContext(parentContext, vm)).getSucceeded(); }
org.ovirt.engine.core.common.job.Step getStep(org.ovirt.engine.core.compat.Guid stepId, boolean includeSubjectEntities);	org.ovirt.engine.core.common.job.Step getStep(org.ovirt.engine.core.compat.Guid stepId, boolean loadSubjectEntities);
@java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations.ReportedConfiguration reportedConfiguration) { return !(reportedConfiguration.isInSync()); }	@java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration reportedConfiguration) { return !(reportedConfiguration.isInSync()); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Profiles") java.lang.String profilesTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Profiles") java.lang.String profilesTitle();
@java.lang.Override public java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> getTabNameMapping() { return tabMap; }	@java.lang.Override public final java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> getTabNameMapping() { return tabMap; }
private org.ovirt.engine.core.common.businessentities.VmNetworkInterface getIfaceWithNetworkName(java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> interfaces) { return org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(interfaces, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.VmNetworkInterface>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.VmNetworkInterface vmNetworkInterface) { return hasDetachedNetworkName(vmNetworkInterface); } }); }	private boolean networkUsedByAnInterface(java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> interfaces) { for (org.ovirt.engine.core.common.businessentities.VmNetworkInterface vmNetworkInterface : interfaces) { if (getNetworkName().equals(vmNetworkInterface.getNetworkName())) { return true; } } return false; }
@java.lang.Override public java.lang.String get(java.lang.Enum<?> key) { try { if (key == null) { return null; } java.lang.String enumName = key.getDeclaringClass().toString(); enumName = enumName.substring(((enumName.lastIndexOf(".")) + 1), enumName.length()); java.lang.String translatedEnum = enums.getString(((enumName + "___") + (key.toString()))); return translatedEnum; } catch (java.util.MissingResourceException e) { org.ovirt.engine.ui.uicompat.EnumTranslator.logger.info(("Missing Enum resource: " + (e.getLocalizedMessage()))); return key.name(); } }	@java.lang.Override public java.lang.String get(java.lang.Enum<?> key) { if (key == null) { return org.ovirt.engine.ui.uicompat.EnumTranslator.constants.notAvailableLabel(); } try { java.lang.String enumName = key.getDeclaringClass().toString(); enumName = enumName.substring(((enumName.lastIndexOf(".")) + 1), enumName.length()); java.lang.String translatedEnum = enums.getString(((enumName + "___") + (key.toString()))); return translatedEnum; } catch (java.util.MissingResourceException e) { org.ovirt.engine.ui.uicompat.EnumTranslator.logger.info(("Missing Enum resource: " + (e.getLocalizedMessage()))); return key.name(); } }
@java.lang.Override protected void populateTabMap() { getTabNameMapping().put(ClusterModel.ClusterTabNames.GENERAL_TAB, this.generalTab); getTabNameMapping().put(ClusterModel.ClusterTabNames.CONSOLE_TAB, this.consoleTab); getTabNameMapping().put(ClusterModel.ClusterTabNames.CLUSTER_POLICY_TAB, this.clusterPolicyTab); getTabNameMapping().put(ClusterModel.ClusterTabNames.OPTIMIZATION_TAB, this.optimizationTab); getTabNameMapping().put(ClusterModel.ClusterTabNames.RESILIENCE_POLICY_TAB, this.resiliencePolicyTab); }	@java.lang.Override protected void populateTabMap() { getTabNameMapping().put(TabName.GENERAL_TAB, this.generalTab); getTabNameMapping().put(TabName.CONSOLE_TAB, this.consoleTab); getTabNameMapping().put(TabName.CLUSTER_POLICY_TAB, this.clusterPolicyTab); getTabNameMapping().put(TabName.OPTIMIZATION_TAB, this.optimizationTab); getTabNameMapping().put(TabName.RESILIENCE_POLICY_TAB, this.resiliencePolicyTab); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.HostDeviceView object) { return (object.getMdevTypes()) == null ? "" : java.lang.String.join(", ", object.getMdevTypes().stream().sorted().collect(java.util.stream.Collectors.toList())); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.HostDeviceView object) { return (object.getMdevTypes()) == null ? "" : object.getMdevTypes().stream().sorted().collect(java.util.stream.Collectors.joining(", ")); }
public void initNetworkFilterList(org.ovirt.engine.core.compat.Version dcCompatibilityVersion) { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkFilter> networkFilters = new java.util.ArrayList(((java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkFilter>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); networkFilters.add(null); final org.ovirt.engine.core.common.businessentities.network.NetworkFilter selectedNetworkFilter = (((vnicProfile) == null) || ((vnicProfile.getNetworkFilterId()) == null)) ? null : org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(networkFilters, new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate<>(vnicProfile.getNetworkFilterId())); getNetworkFilter().setItems(networkFilters, selectedNetworkFilter); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllSupportedNetworkFiltersByVersion, new org.ovirt.engine.core.common.action.VersionQueryParameters(dcCompatibilityVersion), asyncQuery); }	public void initNetworkFilterList(org.ovirt.engine.core.compat.Version dcCompatibilityVersion) { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkFilter> networkFilters = new java.util.ArrayList(((java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkFilter>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); networkFilters.add(org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel.EMPTY_FILTER); getNetworkFilter().setItems(networkFilters); initSelectedNetworkFilter(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllSupportedNetworkFiltersByVersion, new org.ovirt.engine.core.common.action.VersionQueryParameters(dcCompatibilityVersion), asyncQuery); }
protected boolean isDiskPlugged() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices = getVmDeviceDao().getVmDevicesByDeviceId(getImageGroupId(), org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getVmId()); return (!(devices.isEmpty())) && (devices.get(0).getIsPlugged()); }	protected boolean isDiskPlugged() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices = org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getVmDeviceDao().getVmDevicesByDeviceId(getImageGroupId(), org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getVmId()); return (!(devices.isEmpty())) && (devices.get(0).getIsPlugged()); }
private static void saveToDb(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.AuditLogType logType, java.lang.String loggerString) { org.ovirt.engine.core.common.AuditLogSeverity severity = logType.getSeverity(); if (severity == null) { severity = org.ovirt.engine.core.common.AuditLogSeverity.NORMAL; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.infoFormat("No severity for {0} audit log type, assuming Normal severity", logType); } org.ovirt.engine.core.common.businessentities.AuditLog auditLog = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.createAuditLog(auditLogable, logType, loggerString, severity); if (auditLog == null) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.warn("Unable to create AuditLog"); } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.setPropertiesFromAuditLogableBase(auditLogable, auditLog); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getDbFacadeInstance().getAuditLogDao().save(auditLog); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.logMessage(severity, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getMessageToLog(loggerString, auditLog)); } }	private static void saveToDb(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.AuditLogType logType, java.lang.String loggerString) { org.ovirt.engine.core.common.AuditLogSeverity severity = logType.getSeverity(); org.ovirt.engine.core.common.businessentities.AuditLog auditLog = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.createAuditLog(auditLogable, logType, loggerString, severity); if (auditLog == null) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.warn("Unable to create AuditLog"); } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.setPropertiesFromAuditLogableBase(auditLogable, auditLog); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getDbFacadeInstance().getAuditLogDao().save(auditLog); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.logMessage(severity, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getMessageToLog(loggerString, auditLog)); } }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); org.ovirt.engine.core.dao.VdsDAO vdsDAO = dbFacade.getVdsDao(); existingVds = vdsDAO.get(FixturesTool.VDS_RHEL6_NFS_SPM); org.ovirt.engine.core.dao.StoragePoolDAO storagePoolDAO = dbFacade.getStoragePoolDao(); storagePool = storagePoolDAO.get(FixturesTool.STORAGE_POOL_RHEL6_ISCSI_OTHER); dao = dbFacade.getVdsGroupDao(); existingVdsGroup = dao.get(existingVds.getVdsGroupId()); groupWithNoRunningVms = dbFacade.getVdsGroupDao().get(FixturesTool.VDS_GROUP_NO_RUNNING_VMS); newGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup(); newGroup.setName("New VDS Group"); newGroup.setcompatibility_version(new org.ovirt.engine.core.compat.Version("3.0")); newGroup.setVirtService(true); newGroup.setGlusterService(false); newGroup.setClusterPolicyId(existingVdsGroup.getClusterPolicyId()); clusterPolicyDao = dbFacade.getClusterPolicyDao(); newGroup.setClusterPolicyName(clusterPolicyDao.get(existingVdsGroup.getClusterPolicyId()).getName()); newGroup.setClusterPolicyProperties(new java.util.LinkedHashMap<java.lang.String, java.lang.String>()); newGroup.setSchedulerOptimizeForSpeed(true); }	@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); org.ovirt.engine.core.dao.VdsDAO vdsDAO = dbFacade.getVdsDao(); existingVds = vdsDAO.get(FixturesTool.VDS_RHEL6_NFS_SPM); org.ovirt.engine.core.dao.StoragePoolDAO storagePoolDAO = dbFacade.getStoragePoolDao(); storagePool = storagePoolDAO.get(FixturesTool.STORAGE_POOL_RHEL6_ISCSI_OTHER); dao = dbFacade.getVdsGroupDao(); existingVdsGroup = dao.get(existingVds.getVdsGroupId()); groupWithNoRunningVms = dbFacade.getVdsGroupDao().get(FixturesTool.VDS_GROUP_NO_RUNNING_VMS); newGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup(); newGroup.setName("New VDS Group"); newGroup.setcompatibility_version(new org.ovirt.engine.core.compat.Version("3.0")); newGroup.setVirtService(true); newGroup.setGlusterService(false); newGroup.setClusterPolicyId(existingVdsGroup.getClusterPolicyId()); clusterPolicyDao = dbFacade.getClusterPolicyDao(); newGroup.setClusterPolicyName(clusterPolicyDao.get(existingVdsGroup.getClusterPolicyId()).getName()); newGroup.setClusterPolicyProperties(new java.util.LinkedHashMap<java.lang.String, java.lang.String>()); newGroup.setDetectEmulatedMachine(true); newGroup.setEmulatedMachine("rhel6.4.0"); newGroup.setArchitecture(ArchitectureType.x86_64); }
private void updateOptionsNonLocalFSData() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.VDS>>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> returnValue) { hosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); updateOptionsNonLocalFS(); } }), getEntity().getName()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostList(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.VDS>>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> returnValue) { allHosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); updateOptionsNonLocalFS(); } })); if (getEntity().supportsGlusterService()) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isAnyHostUpInCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<java.lang.Boolean>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Boolean returnValue) { isAnyHostUpInCluster = returnValue; updateOptionsNonLocalFS(); } }), getEntity().getName()); } }	private void updateOptionsNonLocalFSData() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByCluster(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.VDS>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> returnValue) { hosts = returnValue; updateOptionsNonLocalFS(); } }), getEntity().getName()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostList(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.VDS>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> returnValue) { allHosts = returnValue; updateOptionsNonLocalFS(); } })); if (getEntity().supportsGlusterService()) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isAnyHostUpInCluster(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.lang.Boolean>() { @java.lang.Override public void onSuccess(java.lang.Boolean returnValue) { isAnyHostUpInCluster = returnValue; updateOptionsNonLocalFS(); } }), getEntity().getName()); } }
private void updateNetworkInterfacesByTemplate(org.ovirt.engine.core.common.businessentities.VmTemplate template) { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(getModel(), new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { if (returnValue == null) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); if ((nics.size()) == 0) { return; } initNetworkInterfaces(networkBehavior, nics); } }); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetTemplateInterfacesByTemplateId, new org.ovirt.engine.core.common.queries.IdQueryParameters(template.getId()), query); }	private void updateNetworkInterfacesByTemplate(org.ovirt.engine.core.common.businessentities.VmTemplate template) { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(getModel(), new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { if (returnValue == null) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); initNetworkInterfaces(networkBehavior, nics); } }); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetTemplateInterfacesByTemplateId, new org.ovirt.engine.core.common.queries.IdQueryParameters(template.getId()), query); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.String value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); try { new org.ovirt.engine.ui.uicompat.MailAddress(value); } catch (java.lang.RuntimeException e) { result.setSuccess(false); result.getReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().invalidEmailAddressInvalidReason()); } return result; }	@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); try { new org.ovirt.engine.ui.uicompat.MailAddress(((java.lang.String) (value))); } catch (java.lang.RuntimeException e) { result.setSuccess(false); result.getReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().invalidEmailAddressInvalidReason()); } return result; }
@org.junit.Test public void testCanDoActionInstanceNameDuplicate() { cmd.getParameters().setTemplateType(VmEntityType.INSTANCE_TYPE); doReturn(true).when(cmd).isInstanceWithSameNameExists("templateName"); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED); }	@org.junit.Test public void testCanDoActionInstanceNameDuplicate() { cmd.getParameters().setTemplateType(VmEntityType.INSTANCE_TYPE); doReturn(true).when(cmd).isInstanceWithSameNameExists("templateName"); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_NAME_ALREADY_USED); }
@java.lang.Override protected void setObjectName(java.lang.Object object, java.lang.String name, boolean isSuffix) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ((org.ovirt.engine.core.common.businessentities.VmTemplate) (object)); if (isSuffix) { template.setName(((template.getName()) + name)); } else { template.setName(name); } }	@java.lang.Override protected void setObjectName(java.lang.Object object, java.lang.String name, boolean isSuffix) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData) (object)).getTemplate(); if (isSuffix) { template.setName(((template.getName()) + name)); } else { template.setName(name); } }
protected org.ovirt.engine.core.common.action.AddVdsGroupOperationParameters createCommandParams(org.ovirt.engine.api.model.Cluster cluster, org.ovirt.engine.core.common.businessentities.StoragePool dataCenter) { org.ovirt.engine.core.common.businessentities.VDSGroup clusterEntity = map(cluster, map(dataCenter)); final org.ovirt.engine.core.common.action.AddVdsGroupOperationParameters taskParams = (cluster.isSetManagementNetworkId()) ? new org.ovirt.engine.core.common.action.AddVdsGroupOperationParameters(clusterEntity, org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(cluster.getManagementNetworkId())) : new org.ovirt.engine.core.common.action.AddVdsGroupOperationParameters(clusterEntity); return taskParams; }	protected org.ovirt.engine.core.common.action.AddClusterOperationParameters createAddCommandParams(org.ovirt.engine.api.model.Cluster cluster, org.ovirt.engine.core.common.businessentities.StoragePool dataCenter) { org.ovirt.engine.core.common.businessentities.VDSGroup clusterEntity = map(cluster, map(dataCenter)); if (!((cluster.isSetErrorHandling()) && (cluster.getErrorHandling().isSetOnError()))) { clusterEntity.setMigrateOnError(null); } final org.ovirt.engine.core.compat.Guid managementNetworkId = getManagementNetworkId(cluster, dataCenter.getId()); return new org.ovirt.engine.core.common.action.AddClusterOperationParameters(clusterEntity, managementNetworkId); }
private org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel createModel(org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior) { if (behavior instanceof org.ovirt.engine.ui.uicommonweb.models.templates.ExistingBlankTemplateModelBehavior) { return new org.ovirt.engine.ui.uicommonweb.models.templates.BlankTemplateModel(behavior); } return new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(behavior); }	private org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel createModel(org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior) { if (behavior.isBlankTemplateBehavior()) { return new org.ovirt.engine.ui.uicommonweb.models.templates.BlankTemplateModel(behavior, this); } return new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(behavior, this); }
@org.junit.Test(expected = javax.servlet.ServletException.class) public void testInitServletConfigNoInitParams() throws javax.servlet.ServletException { testServlet.init(testConfig); fail("Should not get here"); }	@org.junit.Test(expected = javax.servlet.ServletException.class) public void testInitServletConfig_NoInitParams() throws javax.servlet.ServletException { testServlet.init(mockConfig); fail("Should not get here"); }
@java.lang.Override protected void SortCommands() { java.util.ArrayList<org.ovirt.engine.core.bll.CommandBase<?>> commands = getCommands(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM>(commands.size()); for (org.ovirt.engine.core.bll.CommandBase<?> cmd : commands) { vms.put(cmd.getVmId(), org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(cmd.getVmId())); } java.util.Collections.sort(commands, java.util.Collections.reverseOrder(new java.util.Comparator<org.ovirt.engine.core.bll.CommandBase<?>>() { private final org.ovirt.engine.core.common.businessentities.comperators.VmsComparer vmComparator = new org.ovirt.engine.core.common.businessentities.comperators.VmsComparer(); @java.lang.Override public int compare(org.ovirt.engine.core.bll.CommandBase<?> o1, org.ovirt.engine.core.bll.CommandBase<?> o2) { org.ovirt.engine.core.common.businessentities.VM vm1 = vms.get(o1.getVmId()); org.ovirt.engine.core.common.businessentities.VM vm2 = vms.get(o2.getVmId()); return vmComparator.Compare(vm1, vm2); } })); }	@java.lang.Override protected void SortCommands() { java.util.ArrayList<org.ovirt.engine.core.bll.CommandBase<?>> commands = getCommands(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM>(commands.size()); for (org.ovirt.engine.core.bll.CommandBase<?> cmd : commands) { vms.put(cmd.getVmId(), org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(cmd.getVmId())); } java.util.Collections.sort(commands, java.util.Collections.reverseOrder(new java.util.Comparator<org.ovirt.engine.core.bll.CommandBase<?>>() { private final org.ovirt.engine.core.common.businessentities.comparators.VmsComparer vmComparator = new org.ovirt.engine.core.common.businessentities.comparators.VmsComparer(); @java.lang.Override public int compare(org.ovirt.engine.core.bll.CommandBase<?> o1, org.ovirt.engine.core.bll.CommandBase<?> o2) { org.ovirt.engine.core.common.businessentities.VM vm1 = vms.get(o1.getVmId()); org.ovirt.engine.core.common.businessentities.VM vm2 = vms.get(o2.getVmId()); return vmComparator.Compare(vm1, vm2); } })); }
protected void testAction(org.ovirt.engine.core.common.action.VdcActionType actionType, java.lang.String networkId, java.lang.String networkName) throws java.lang.Exception { setupGetExpectations(); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setNetwork(new org.ovirt.engine.api.model.Network()); if (networkId != null) { action.getNetwork().setId(networkId); } else { action.getNetwork().setName(networkName); } setUpEntityQueryExpectations(VdcQueryType.GetAllNetworks, org.ovirt.engine.core.common.queries.GetAllNetworkQueryParamenters.class, new java.lang.String[]{ "StoragePoolId" }, new java.lang.Object[]{ org.ovirt.engine.core.compat.Guid.Empty }, asList(org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.getNetwork())); setUpEntityQueryExpectations(); setUriInfo(setUpActionExpectations(actionType, org.ovirt.engine.core.common.action.AttachNetworkToVdsParameters.class, new java.lang.String[]{ "VdsId" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.PARENT_GUID }, true, true, null, null, true)); if (actionType == (org.ovirt.engine.core.common.action.VdcActionType.AttachNetworkToVdsInterface)) { verifyActionResponse(resource.attach(action)); } else { verifyActionResponse(resource.detach(action)); } }	protected void testAction(org.ovirt.engine.core.common.action.VdcActionType actionType, java.lang.String networkId, java.lang.String networkName) throws java.lang.Exception { org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setNetwork(new org.ovirt.engine.api.model.Network()); if (networkId != null) { action.getNetwork().setId(networkId); } else { action.getNetwork().setName(networkName); } setUpEntityQueryExpectations(VdcQueryType.GetAllNetworks, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ org.ovirt.engine.core.compat.Guid.Empty }, asList(org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.getNetwork())); setUpEntityQueryExpectations(); setUriInfo(setUpActionExpectations(actionType, org.ovirt.engine.core.common.action.AttachNetworkToVdsParameters.class, new java.lang.String[]{ "VdsId" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.PARENT_GUID }, true, true, null, null, true)); if (actionType == (org.ovirt.engine.core.common.action.VdcActionType.AttachNetworkToVdsInterface)) { verifyActionResponse(resource.attach(action)); } else { verifyActionResponse(resource.detach(action)); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllForVnicProfile(org.ovirt.engine.core.compat.Guid vNicProfileId) { return getCallsHandler().executeReadList("GetVmsByVnicProfileId", org.ovirt.engine.core.dao.VmDAOImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("vnic_profile_id", vNicProfileId)); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllForVnicProfile(org.ovirt.engine.core.compat.Guid vNicProfileId) { return getCallsHandler().executeReadList("GetVmsByVnicProfileId", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("vnic_profile_id", vNicProfileId)); }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { model.setSearchType(AdSearchType.MY_GROUPS); getView().changeStateOfElementsWhenAccessIsForEveryoneOrMyGroups(false, true); getModel().getSearchMyGroupsCommand().execute(); getView().userTypeChanged(UserOrGroup.User); model.setItems(null); }	@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { model.setSearchType(AdSearchType.MY_GROUPS); getView().changeStateOfElementsWhenAccessIsForEveryoneOrMyGroups(false, true); getModel().getSearchMyGroupsCommand().execute(); getView().userTypeChanged(UserOrGroup.User, false); model.setItems(null); getView().setLoadingState(LoadingState.LOADING); }
public org.ovirt.engine.core.common.businessentities.VDS refreshHost() { refreshHost(cachedVds); return cachedVds; }	public void refreshHost() { refreshHost(cachedVds); }
private void reportMTUDifferences(java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ifaceNetworks) { java.util.List<java.lang.String> mtuDiffNetworks = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.network.Network net : ifaceNetworks) { mtuDiffNetworks.add(java.lang.String.format("%s(%s)", net.getName(), ((net.getMtu()) == 0 ? "default" : java.lang.String.valueOf(net.getMtu())))); } addViolation(VdcBllMessages.NETWORK_MTU_DIFFERENCES, java.lang.String.format("[%s]", org.apache.commons.lang.StringUtils.join(mtuDiffNetworks, ", "))); }	private java.util.Set<java.lang.String> getRemovedBondsUsedByNetworks() { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure = getAttachmentsToConfigure(); java.util.Set<java.lang.String> requiredNicsNames = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : attachmentsToConfigure) { requiredNicsNames.add(attachment.getNicName()); } return requiredNicsNames; }
private static org.ovirt.engine.core.common.action.InstallVdsParameters createParameters() { org.ovirt.engine.core.common.action.InstallVdsParameters param = new org.ovirt.engine.core.common.action.InstallVdsParameters(org.ovirt.engine.core.compat.Guid.NewGuid()); param.setIsReinstallOrUpgrade(true); return param; }	private static org.ovirt.engine.core.common.action.InstallVdsParameters createParameters() { org.ovirt.engine.core.common.action.InstallVdsParameters param = new org.ovirt.engine.core.common.action.InstallVdsParameters(org.ovirt.engine.core.compat.Guid.newGuid()); param.setIsReinstallOrUpgrade(true); return param; }
@java.lang.Override public void endSuccessfully() { super.endSuccessfully(); if (getEnclosingCommand().getParameters().getImportAsTemplate()) { org.ovirt.engine.core.compat.Guid newTemplateId = createTemplate(); if (newTemplateId != null) { attachDiskToTemplate(newTemplateId); } } org.ovirt.engine.core.bll.ImagesHandler.updateImageStatus(getEnclosingCommand().getParameters().getDestinationImageId(), ImageStatus.OK); getEnclosingCommand().getReturnValue().setSucceeded(true); }	@java.lang.Override public void endSuccessfully() { super.endSuccessfully(); if (getEnclosingCommand().getParameters().getImportAsTemplate()) { org.ovirt.engine.core.compat.Guid newTemplateId = createTemplate(); if (newTemplateId != null) { attachDiskToTemplate(newTemplateId); } } getEnclosingCommand().getParameters().getDiskImage().setImageStatus(ImageStatus.OK); org.ovirt.engine.core.bll.ImagesHandler.updateImageStatus(getEnclosingCommand().getParameters().getDestinationImageId(), ImageStatus.OK); getEnclosingCommand().getReturnValue().setSucceeded(true); }
protected boolean updateVnicForBackwardCompatibility() { org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(); if (!(validate(vnicProfileHelper.updateNicForBackwardCompatibility(org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase.getParameters().getInterface(), org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase.getVmTemplate(), org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase.getCurrentUser().getUserId())))) { return false; } return true; }	protected boolean updateVnicForBackwardCompatibility() { if (!(validate(org.ovirt.engine.core.bll.network.vm.VnicProfileHelper.updateNicForBackwardCompatibility(org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase.getParameters().getInterface(), org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase.getVmTemplate(), org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase.getCurrentUser().getUserId())))) { return false; } return true; }
private org.ovirt.engine.core.common.businessentities.Provider getOldProvider() { if ((oldProvider) == null) { oldProvider = org.ovirt.engine.core.bll.provider.UpdateProviderCommand.getDbFacade().getNetworkProviderDao().get(getProvider().getId()); } return oldProvider; }	private org.ovirt.engine.core.common.businessentities.Provider getOldProvider() { if ((oldProvider) == null) { oldProvider = getProviderDao().get(getProvider().getId()); } return oldProvider; }
@java.lang.Override public void onPowerringUp() { decreasePendingVm(this.vmStaticDao.get(org.ovirt.engine.core.bll.RunVmCommand.getVmId())); }	@java.lang.Override public void onPowerringUp() { decreasePendingVm(vmStaticDao.get(org.ovirt.engine.core.bll.RunVmCommand.getVmId())); }
private void mapIpConfiguration(org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper, org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration) { boolean hasPrimaryAddressSet = ipConfiguration.hasPrimaryAddressSet(); org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = (hasPrimaryAddressSet) ? ipConfiguration.getPrimaryAddress() : null; mapper.addValue("boot_protocol", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(primaryAddress.getBootProtocol())).addValue("address", (hasPrimaryAddressSet ? primaryAddress.getAddress() : null)).addValue("netmask", (hasPrimaryAddressSet ? primaryAddress.getNetmask() : null)).addValue("gateway", (hasPrimaryAddressSet ? primaryAddress.getGateway() : null)); }	private void mapIpConfiguration(org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper, org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration) { boolean hasPrimaryAddressSet = ipConfiguration.hasPrimaryAddressSet(); org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = (hasPrimaryAddressSet) ? ipConfiguration.getPrimaryAddress() : null; mapper.addValue("boot_protocol", (hasPrimaryAddressSet ? org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(primaryAddress.getBootProtocol()) : null)).addValue("address", (hasPrimaryAddressSet ? primaryAddress.getAddress() : null)).addValue("netmask", (hasPrimaryAddressSet ? primaryAddress.getNetmask() : null)).addValue("gateway", (hasPrimaryAddressSet ? primaryAddress.getGateway() : null)); }
public void addUiPluginListModel(final java.lang.String label, java.lang.String historyToken) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<java.lang.Void, java.lang.Void> uiPluginListModel = new org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<java.lang.Void, java.lang.Void>() { @java.lang.Override protected java.lang.String getListName() { return label; } }; uiPluginListModel.setSearchString(label); uiPluginListModel.setApplicationPlace(historyToken); getItems().add(uiPluginListModel); uiPluginLabelListMap.put(historyToken, uiPluginListModel); }	public void addPluginModel(java.lang.String historyToken, java.lang.String searchPrefix) { org.ovirt.engine.ui.uicommonweb.models.plugin.PluginModel model = new org.ovirt.engine.ui.uicommonweb.models.plugin.PluginModel(historyToken, searchPrefix); getItems().add(model); pluginModelMap.put(historyToken, model); }
@java.lang.Override public java.lang.String toString() { if (!(valid)) { return ""; } java.lang.String authority = new java.lang.String(); authority += host; if (!(port.isEmpty())) { authority += ':' + (port); } return authority; }	public java.lang.String getStringRepresentation() { if (!(valid)) { return null; } java.lang.String authority = new java.lang.String(); authority += host; if (!(port.isEmpty())) { authority += ':' + (port); } return authority; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(selectedItemChangedEventDefinition)) { if (sender == (getDataCenter())) { dataCenter_SelectedItemChanged(); } else if (sender == (getHost())) { host_SelectedItemChanged(); } else if (sender == (getAvailableStorageTypeItems())) { storageType_SelectedItemChanged(); } else if (sender == (getAvailableStorageDomainTypeItems())) { org.ovirt.engine.core.common.businessentities.StorageDomainType storageDomainType = getAvailableStorageDomainTypeItems().getSelectedItem(); org.ovirt.engine.core.common.businessentities.storage.StorageType storageType = getAvailableStorageTypeItems().getSelectedItem(); updateStorageSelectedItem(storageType, storageDomainType); } } else if (ev.matchesDefinition(itemsChangedEventDefinition)) { storageItemsChanged(); } else if (ev.matchesDefinition(NfsStorageModel.pathChangedEventDefinition)) { nfsStorageModel_PathChanged(sender, args); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(selectedItemChangedEventDefinition)) { if (sender == (getDataCenter())) { dataCenter_SelectedItemChanged(); } else if (sender == (getHost())) { host_SelectedItemChanged(); } else if (sender == (getAvailableStorageTypeItems())) { storageType_SelectedItemChanged(); } else if (sender == (getAvailableStorageDomainTypeItems())) { updateCurrentStorageItem(); } } else if (ev.matchesDefinition(itemsChangedEventDefinition)) { storageItemsChanged(); } else if (ev.matchesDefinition(NfsStorageModel.pathChangedEventDefinition)) { nfsStorageModel_PathChanged(sender, args); } }
public void validateRepo() throws java.lang.IllegalStateException;	public boolean isHypervEnabled(int osId, org.ovirt.engine.core.compat.Version version);
@org.junit.Test public void testCanDoSuccessOnAddFloatingDiskWithPlugUnset() { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createDiskImage(1); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createParameters(); parameters.setDiskInfo(disk); parameters.setVmId(Guid.Empty); parameters.setPlugDiskToVm(false); org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId, parameters); mockStorageDomain(storageId); mockStoragePoolIsoMap(); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(command); }	@org.junit.Test public void testValidateSuccessOnAddFloatingDiskWithPlugUnset() { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createDiskImage(1); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createParameters(); parameters.setDiskInfo(disk); parameters.setVmId(Guid.Empty); parameters.setPlugDiskToVm(false); org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId, parameters); mockStorageDomain(storageId); mockStoragePoolIsoMap(); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(command); }
@org.junit.Before public void setUp() { vm.setCpuPerSocket(2); vm.setNumOfSockets(2); vdsWithoutCores.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vdsWithoutCores.setCpuCores(0); vdsWithoutCores.setCpuThreads(0); vdsWithCores.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vdsWithCores.setCpuCores(2); vdsWithCores.setCpuThreads(4); cluster.setId(org.ovirt.engine.core.compat.Guid.newGuid()); when(vdsGroupDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(cluster); }	@org.junit.Before public void setUp() { vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setCpuPerSocket(2); vm.setNumOfSockets(2); vdsWithInvalidCpuInfo = new org.ovirt.engine.core.common.businessentities.VDS(); vdsWithInvalidCpuInfo.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vdsWithInvalidCpuInfo.setCpuCores(0); vdsWithInvalidCpuInfo.setCpuThreads(0); vdsWithCores = new org.ovirt.engine.core.common.businessentities.VDS(); vdsWithCores.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vdsWithCores.setCpuCores(2); vdsWithCores.setCpuThreads(4); cluster = new org.ovirt.engine.core.common.businessentities.VDSGroup(); cluster.setId(org.ovirt.engine.core.compat.Guid.newGuid()); when(vdsGroupDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(cluster); }
private static void initJavaTimeZones() { for (java.lang.String id : java.util.TimeZone.getAvailableIDs()) { java.util.TimeZone timeZone = java.util.TimeZone.getTimeZone(id); org.ovirt.engine.core.bll.GetTimeZonesQuery.javaTimezones.put(timeZone.getID(), timeZone.getDisplayName()); } }	private static void initJavaTimeZones() { for (java.lang.String id : java.util.TimeZone.getAvailableIDs()) { java.util.TimeZone timeZone = java.util.TimeZone.getTimeZone(id); java.lang.String displayName = org.ovirt.engine.core.bll.GetTimeZonesQuery.beautifyTZDisplayName(timeZone); if (!(org.ovirt.engine.core.bll.GetTimeZonesQuery.javaTimezones.containsValue(displayName))) { org.ovirt.engine.core.bll.GetTimeZonesQuery.javaTimezones.put(timeZone.getID(), displayName); } } }
public void close() throws java.io.IOException { try { if ((_session) != null) { _session.close(true); _session = null; } if ((_client) != null) { _client.stop(); _client = null; } } catch (java.lang.Exception e) { org.ovirt.engine.core.utils.ssh.SSHClient.log.error("Failed to close session", e); } }	public void close() throws java.io.IOException { try { if ((_session) != null) { _session.close(true); _session = null; } if ((_client) != null) { _client.stop(); _client = null; } } catch (java.lang.Exception e) { org.ovirt.engine.core.utils.ssh.SSHClient.log.error("Failed to close session", e); throw new java.io.IOException(e); } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.network.ExternalSubnet.class, to = org.ovirt.engine.api.model.OpenStackSubnet.class) public static org.ovirt.engine.api.model.OpenStackSubnet map(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet entity, org.ovirt.engine.api.model.OpenStackSubnet template) { org.ovirt.engine.api.model.OpenStackSubnet model = (template != null) ? template : new org.ovirt.engine.api.model.OpenStackSubnet(); if ((entity.getId()) != null) { model.setId(entity.getId()); } if ((entity.getName()) != null) { model.setName(entity.getName()); } if ((entity.getCidr()) != null) { model.setCidr(entity.getCidr()); } if ((entity.getIpVersion()) != null) { model.setIpVersion(org.ovirt.engine.api.restapi.types.IpVersionMapper.map(entity.getIpVersion()).value()); } if ((entity.getGateway()) != null) { model.setGateway(entity.getGateway()); } java.util.List<java.lang.String> entityDnsServers = entity.getDnsServers(); if ((entityDnsServers != null) && (!(entityDnsServers.isEmpty()))) { org.ovirt.engine.api.model.DnsServers modelDnsServers = new org.ovirt.engine.api.model.DnsServers(); for (java.lang.String entityDnsServer : entityDnsServers) { modelDnsServers.getDnsServers().getDnsServers().add(entityDnsServer); } model.setDnsServers(modelDnsServers); } return model; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.network.ExternalSubnet.class, to = org.ovirt.engine.api.model.OpenStackSubnet.class) public static org.ovirt.engine.api.model.OpenStackSubnet map(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet entity, org.ovirt.engine.api.model.OpenStackSubnet template) { org.ovirt.engine.api.model.OpenStackSubnet model = (template != null) ? template : new org.ovirt.engine.api.model.OpenStackSubnet(); if ((entity.getId()) != null) { model.setId(entity.getId()); } if ((entity.getName()) != null) { model.setName(entity.getName()); } if ((entity.getCidr()) != null) { model.setCidr(entity.getCidr()); } if ((entity.getIpVersion()) != null) { model.setIpVersion(org.ovirt.engine.api.restapi.types.IpVersionMapper.map(entity.getIpVersion()).value()); } if ((entity.getGateway()) != null) { model.setGateway(entity.getGateway()); } java.util.List<java.lang.String> entityDnsServers = entity.getDnsServers(); if ((entityDnsServers != null) && (!(entityDnsServers.isEmpty()))) { org.ovirt.engine.api.model.OpenStackSubnet.DnsServersList modelDnsServers = new org.ovirt.engine.api.model.OpenStackSubnet.DnsServersList(); for (java.lang.String entityDnsServer : entityDnsServers) { modelDnsServers.getDnsServers().add(entityDnsServer); } model.setDnsServers(modelDnsServers); } return model; }
@java.lang.Override protected boolean canDoAction() { if ((getNic()) == null) { return failCanDoAction(VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST); } if (((getNic().getLabels()) != null) && (getNic().getLabels().contains(getLabel()))) { return failCanDoAction(VdcBllMessages.INTERFACE_ALREADY_LABELED); } if (!(org.ovirt.engine.core.common.utils.ValidationUtils.validateInputs(org.ovirt.engine.core.bll.network.host.LabelNicCommand.getValidationGroups(), getNic()).isEmpty())) { return failCanDoAction(VdcBllMessages.IMPROPER_INTERFACE_IS_LABELED); } for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : getHostInterfaces()) { if (((!(org.apache.commons.lang.StringUtils.equals(nic.getName(), getNicName()))) && ((nic.getLabels()) != null)) && (nic.getLabels().contains(getLabel()))) { return failCanDoAction(VdcBllMessages.OTHER_INTERFACE_ALREADY_LABELED, ("$LabeledNic " + (nic.getName()))); } } java.util.List<java.lang.String> assignedNetworks = validateNetworksNotAssignedToIncorrectNics(); if (!(assignedNetworks.isEmpty())) { return failCanDoAction(VdcBllMessages.LABELED_NETWORK_ATTACHED_TO_WRONG_INTERFACE, ("$AssignedNetworks " + (org.apache.commons.lang.StringUtils.join(assignedNetworks.toArray(new java.lang.String[assignedNetworks.size()]), ", ")))); } return true; }	@java.lang.Override protected boolean canDoAction() { if ((getNic()) == null) { return failCanDoAction(VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST); } if (((getNic().getLabels()) != null) && (getNic().getLabels().contains(getLabel()))) { return failCanDoAction(VdcBllMessages.INTERFACE_ALREADY_LABELED); } if (!(org.ovirt.engine.core.common.utils.ValidationUtils.validateInputs(org.ovirt.engine.core.bll.network.host.LabelNicCommand.getValidationGroups(), getNic()).isEmpty())) { return failCanDoAction(VdcBllMessages.IMPROPER_INTERFACE_IS_LABELED); } for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : getHostInterfaces()) { if (((!(org.apache.commons.lang.StringUtils.equals(nic.getName(), getNicName()))) && ((nic.getLabels()) != null)) && (nic.getLabels().contains(getLabel()))) { return failCanDoAction(VdcBllMessages.OTHER_INTERFACE_ALREADY_LABELED, ("$LabeledNic " + (nic.getName()))); } } java.util.List<java.lang.String> assignedNetworks = validateNetworksNotAssignedToIncorrectNics(); if (!(assignedNetworks.isEmpty())) { return failCanDoAction(VdcBllMessages.LABELED_NETWORK_ATTACHED_TO_WRONG_INTERFACE, ("$AssignedNetworks " + (org.apache.commons.lang.StringUtils.join(assignedNetworks, ", ")))); } return true; }
@org.junit.Test public void testPositiveValidateWithDisks() { setUpGeneralValidations(); setUpDiskValidations(); doReturn(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getNonEmptyDiskList()).when(cmd).getDisksList(); doReturn(org.ovirt.engine.core.compat.Guid.newGuid()).when(cmd).getStorageDomainId(); assertTrue(cmd.validate()); assertTrue(cmd.getReturnValue().getValidateMessages().isEmpty()); }	@org.junit.Test public void testPositiveValidateWithDisks() { setUpGeneralValidations(); setUpDiskValidations(); doReturn(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getNonEmptyDiskList()).when(cmd).getDisksList(); doReturn(org.ovirt.engine.core.compat.Guid.newGuid()).when(cmd).getStorageDomainId(); assertTrue(cmd.validate()); assertTrue(cmd.getReturnValue().getValidationMessages().isEmpty()); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.CommitRemoveGlusterVolumeBricks, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeRemoveBricksVDSParameters(getUpServer().getId(), volume.getName(), volume.getBricks(), volume.getReplicaCount())); setSucceeded(returnValue.getSucceeded()); if (!(getSucceeded())) { handleVdsError(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_COMMIT_FAILED, returnValue.getVdsError().getMessage()); return; } endStepJob(); releaseVolumeLock(); getReturnValue().setActionReturnValue(returnValue.getReturnValue()); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.CommitRemoveGlusterVolumeBricks, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeRemoveBricksVDSParameters(getUpServer().getId(), volume.getName(), volume.getBricks())); setSucceeded(returnValue.getSucceeded()); if (!(getSucceeded())) { handleVdsError(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_COMMIT_FAILED, returnValue.getVdsError().getMessage()); return; } endStepJob(); releaseVolumeLock(); getReturnValue().setActionReturnValue(returnValue.getReturnValue()); }
public java.util.List<org.ovirt.engine.core.compat.Guid> getVmAndTemplatesIdsWithoutAttachedImageDisks(boolean shareableDisks, boolean snapshotDisks);	public java.util.List<org.ovirt.engine.core.compat.Guid> getVmAndTemplatesIdsWithoutAttachedImageDisks(boolean shareableDisks);
private void init() { setDataCenter(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>()); setClusters(new org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.VDSGroup>()); getClusters().getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { clusterSelectedItemChanged(); } }); setVolumeName(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>()); setClusterConfigOptions(new org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeSnapshotConfigModel>>()); setVolumeConfigOptions(new org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeSnapshotConfigModel>>()); }	private void init() { setDataCenter(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>()); setClusterName(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>()); setVolumeName(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>()); setConfigOptions(new org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeSnapshotOptionModel>>()); populateConfigOptions(); }
public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAllForNetwork(org.ovirt.engine.core.compat.Guid networkId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("network_id", networkId); return getCallsHandler().executeReadList("GetVdsByNetworkId", org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VdsRowMapper.instance, parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAllForNetwork(org.ovirt.engine.core.compat.Guid networkId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("network_id", networkId); return getCallsHandler().executeReadList("GetVdsByNetworkId", org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VdsRowMapper.instance, parameterSource); }
protected org.ovirt.engine.core.compat.Guid getNewMasterId() { return (getNewMaster()) == null ? org.ovirt.engine.core.compat.Guid.Empty : getNewMaster().getId(); }	protected org.ovirt.engine.core.compat.Guid getNewMasterStorageDomainId() { if ((newMasterStorageDomainId) == null) { newMasterStorageDomain = electNewMaster(true, org.ovirt.engine.core.bll.storage.ReconstructMasterDomainCommand.getParameters().isCanChooseInactiveDomainAsMaster(), org.ovirt.engine.core.bll.storage.ReconstructMasterDomainCommand.getParameters().isCanChooseCurrentMasterAsNewMaster()); newMasterStorageDomainId = ((newMasterStorageDomain) != null) ? newMasterStorageDomain.getId() : org.ovirt.engine.core.compat.Guid.Empty; } return newMasterStorageDomainId; }
protected void addVmStatic() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData(); if ((vmStatic.getOrigin()) == null) { vmStatic.setOrigin(org.ovirt.engine.core.common.businessentities.OriginType.valueOf(org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.OriginType))); } vmStatic.setId(org.ovirt.engine.core.bll.AddVmCommand.getVmId()); vmStatic.setQuotaId(getQuotaId()); vmStatic.setCreationDate(new java.util.Date()); vmStatic.setCreatedByUserId(org.ovirt.engine.core.bll.AddVmCommand.getUserId()); org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.bll.AddVmCommand.getVdsGroupDAO().get(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getVdsGroupId()); vmStatic.setArchitecture(vdsGroup.getArchitectureType()); if ((vmStatic.getCustomProperties()) != null) { org.ovirt.engine.core.utils.customprop.VmPropertiesUtils.VMCustomProperties properties = org.ovirt.engine.core.utils.customprop.VmPropertiesUtils.getInstance().parseProperties(vdsGroup.getcompatibility_version(), vmStatic.getCustomProperties()); java.lang.String predefinedProperties = properties.getPredefinedProperties(); java.lang.String userDefinedProperties = properties.getUseDefinedProperties(); vmStatic.setPredefinedProperties(predefinedProperties); vmStatic.setUserDefinedProperties(userDefinedProperties); } getVmStaticDao().save(vmStatic); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(vmStatic); }	protected void addVmStatic() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData(); if ((vmStatic.getOrigin()) == null) { vmStatic.setOrigin(org.ovirt.engine.core.common.businessentities.OriginType.valueOf(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.OriginType))); } vmStatic.setId(org.ovirt.engine.core.bll.AddVmCommand.getVmId()); vmStatic.setQuotaId(getQuotaId()); vmStatic.setCreationDate(new java.util.Date()); vmStatic.setCreatedByUserId(org.ovirt.engine.core.bll.AddVmCommand.getUserId()); if ((vmStatic.getCustomProperties()) != null) { org.ovirt.engine.core.utils.customprop.VmPropertiesUtils.VMCustomProperties properties = org.ovirt.engine.core.utils.customprop.VmPropertiesUtils.getInstance().parseProperties(org.ovirt.engine.core.bll.AddVmCommand.getVdsGroupDAO().get(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getVdsGroupId()).getcompatibility_version(), vmStatic.getCustomProperties()); java.lang.String predefinedProperties = properties.getPredefinedProperties(); java.lang.String userDefinedProperties = properties.getUseDefinedProperties(); vmStatic.setPredefinedProperties(predefinedProperties); vmStatic.setUserDefinedProperties(userDefinedProperties); } vmStatic.setOriginalTemplateGuid(vmStatic.getVmtGuid()); vmStatic.setOriginalTemplateName(org.ovirt.engine.core.bll.AddVmCommand.getVmTemplate().getName()); getVmStaticDao().save(vmStatic); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(vmStatic); }
private boolean isOutAverageLinkShareInSync() { return org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(ifaceQos.getOutAverageLinkshare(), hostNetworkQos.getOutAverageLinkshare()); }	private boolean isOutAverageLinkShareInSync() { return org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface.getOutAverageLinkshare(ifaceQos), org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface.getOutAverageLinkshare(hostNetworkQos)); }
private void updateBrickStatusDown() { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> brickEntities = org.ovirt.engine.core.bll.SetNonOperationalVdsCommand.getDbFacade().getGlusterBrickDao().getGlusterVolumeBricksByServerId(org.ovirt.engine.core.bll.SetNonOperationalVdsCommand.getVdsId()); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : brickEntities) { brick.setStatus(GlusterStatus.DOWN); } org.ovirt.engine.core.bll.SetNonOperationalVdsCommand.getDbFacade().getGlusterBrickDao().updateAll(brickEntities); }	private void updateBrickStatusDown() { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> brickEntities = org.ovirt.engine.core.bll.SetNonOperationalVdsCommand.getDbFacade().getGlusterBrickDao().getGlusterVolumeBricksByServerId(org.ovirt.engine.core.bll.SetNonOperationalVdsCommand.getVdsId()); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : brickEntities) { brick.setStatus(GlusterStatus.DOWN); } org.ovirt.engine.core.bll.SetNonOperationalVdsCommand.getDbFacade().getGlusterBrickDao().updateBrickStatuses(brickEntities); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { switch (disk.getDiskStorageType()) { case IMAGE : return ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)).getImageId().toString(); case CINDER : return ((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (disk)).getImageId().toString(); } return null; }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { return ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) || ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.CINDER)) ? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)).getImageId().toString() : null; }
@java.lang.Override protected void executeVmCommand() { setActionReturnValue(VMStatus.Down); if ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Paused)) { resumeVm(); } else { initVm(); if (((!(_isRerun)) && (java.lang.Boolean.TRUE.equals(org.ovirt.engine.core.bll.RunVmCommand.getParameters().getRunAsStateless()))) && ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Suspended))) { if (org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskList().isEmpty()) { warnIfNotAllDisksPermitSnapshots(); runVm(); } else { statelessVmTreatment(); } } else if (((((!(org.ovirt.engine.core.bll.RunVmCommand.isInternalExecution())) && (!(_isRerun))) && ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Suspended))) && (isStatelessSnapshotExistsForVm())) && (!(isVMPartOfManualPool()))) { removeVmStatlessImages(); } else { runVm(); } } }	@java.lang.Override protected void executeVmCommand() { setActionReturnValue(VMStatus.Down); initVm(); perform(); }
@org.junit.Test public void testCDAVdsSPMPrioritySetToNever() { vds.setVdsSpmPriority(BusinessEntitiesDefinitions.HOST_MIN_SPM_PRIORITY); assertFalse("canDoAction did not fail on a VDS that is set to never be elected as SPM", command.canDoAction()); org.ovirt.engine.core.bll.CommandAssertUtils.checkMessagesContains(command, VdcBllMessages.CANNOT_REINIT_SPM_VDS_MARKED_AS_NEVER_SPM); }	@org.junit.Test public void testCDAVdsSPMPrioritySetToNever() { vds.setVdsSpmPriority(BusinessEntitiesDefinitions.HOST_MIN_SPM_PRIORITY); assertFalse("canDoAction did not fail on a VDS that is set to never be elected as SPM", command.canDoAction()); org.ovirt.engine.core.bll.CommandAssertUtils.checkMessagesContains(command, VdcBllMessages.CANNOT_FORCE_SELECT_SPM_VDS_MARKED_AS_NEVER_SPM); }
@java.lang.Override public org.ovirt.engine.ui.uicompat.ConstantsManager constantsManager() { return constantsManager; }	@java.lang.Override public org.ovirt.engine.ui.uicompat.UIConstants uiConstants() { return uiConstants; }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { return java.util.Collections.singletonMap(super.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.REMOTE_VM, getVmIsBeingImportedMessage())); }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { return java.util.Collections.singletonMap(getParameters().getContainerId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.REMOTE_VM, getVmIsBeingImportedMessage())); }
@org.junit.Test public void testOperationAndComponentSubscription() { org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder holder = mock(org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder.class); when(holder.getId()).thenReturn("*.*.*.uuid"); org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder differentHolder = mock(org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder.class); when(differentHolder.getId()).thenReturn("*.*.test.*"); org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder thirdHolder = mock(org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder.class); when(thirdHolder.getId()).thenReturn("*.testcase.test2.*"); org.ovirt.vdsm.jsonrpc.client.events.SubscriptionMatcher matcher = new org.ovirt.vdsm.jsonrpc.client.events.SubscriptionMatcher(); matcher.add(holder); matcher.add(differentHolder); matcher.add(thirdHolder); org.ovirt.vdsm.jsonrpc.client.JsonRpcEvent event = mock(org.ovirt.vdsm.jsonrpc.client.JsonRpcEvent.class); when(event.getMethod()).thenReturn("localhost.testcase.test.uuid"); java.util.Set<org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder> holders = matcher.match(event); assertEquals(3, holders.size()); event = mock(org.ovirt.vdsm.jsonrpc.client.JsonRpcEvent.class); when(event.getMethod()).thenReturn("localhost.testcase.test2.uuid"); holders = matcher.match(event); assertEquals(2, holders.size()); }	@org.junit.Test public void testOperationAndComponentSubscription() { org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder holder = mock(org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder.class); when(holder.getId()).thenReturn("*|*|*|uuid"); org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder differentHolder = mock(org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder.class); when(differentHolder.getId()).thenReturn("*|*|test|*"); org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder thirdHolder = mock(org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder.class); when(thirdHolder.getId()).thenReturn("*|testcase|test2|*"); org.ovirt.vdsm.jsonrpc.client.events.SubscriptionMatcher matcher = new org.ovirt.vdsm.jsonrpc.client.events.SubscriptionMatcher(); matcher.add(holder); matcher.add(differentHolder); matcher.add(thirdHolder); org.ovirt.vdsm.jsonrpc.client.JsonRpcEvent event = mock(org.ovirt.vdsm.jsonrpc.client.JsonRpcEvent.class); when(event.getMethod()).thenReturn("localhost|testcase|test|uuid"); java.util.Set<org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder> holders = matcher.match(event); assertEquals(3, holders.size()); event = mock(org.ovirt.vdsm.jsonrpc.client.JsonRpcEvent.class); when(event.getMethod()).thenReturn("localhost|testcase|test2|uuid"); holders = matcher.match(event); assertEquals(2, holders.size()); }
public void updateAll() { final org.ovirt.engine.core.compat.Guid selectedInstanceTypeId = getSelectedInstanceTypeId(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllInstanceTypes, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if ((returnValue == null) || (!(returnValue.getSucceeded()))) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.InstanceType> instanceTypes = new java.util.ArrayList<>(); if (!(getModel().isCreateInstanceOnly())) { instanceTypes.add(CustomInstanceType.INSTANCE); } for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : ((java.lang.Iterable<org.ovirt.engine.core.common.businessentities.InstanceType>) (returnValue.getReturnValue()))) { instanceTypes.add(instanceType); } getModel().getInstanceTypes().setItems(instanceTypes); for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : instanceTypes) { if ((instanceType instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) && (selectedInstanceTypeId == null)) { getModel().getInstanceTypes().setSelectedItem(CustomInstanceType.INSTANCE); break; } if (((instanceType.getId()) == null) || (selectedInstanceTypeId == null)) { continue; } if (instanceType.getId().equals(selectedInstanceTypeId)) { getModel().getInstanceTypes().setSelectedItem(instanceType); break; } } if ((getModel().getInstanceTypes().getSelectedItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) { getModel().getAttachedToInstanceType().setEntity(false); } updateFields(); } })); }	public void updateAll() { final org.ovirt.engine.core.compat.Guid selectedInstanceTypeId = getSelectedInstanceTypeId(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllInstanceTypes, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if ((returnValue == null) || (!(returnValue.getSucceeded()))) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.InstanceType> instanceTypes = new java.util.ArrayList<>(); if (!(getModel().isCreateInstanceOnly())) { instanceTypes.add(CustomInstanceType.INSTANCE); } for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : ((java.lang.Iterable<org.ovirt.engine.core.common.businessentities.InstanceType>) (returnValue.getReturnValue()))) { instanceTypes.add(instanceType); } getModel().getInstanceTypes().setItems(instanceTypes); for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : instanceTypes) { if ((instanceType instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) && (selectedInstanceTypeId == null)) { getModel().getInstanceTypes().setSelectedItem(CustomInstanceType.INSTANCE); break; } if (((instanceType.getId()) == null) || (selectedInstanceTypeId == null)) { continue; } if (instanceType.getId().equals(selectedInstanceTypeId)) { getModel().getInstanceTypes().setSelectedItem(instanceType); break; } } if ((getModel().getInstanceTypes().getSelectedItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) { getModel().getAttachedToInstanceType().setEntity(false); } updateFields(); } })); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Remove System Permission(s)") java.lang.String removeSystemPermissionsTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Remove System Permission(s)") java.lang.String removeSystemPermissionsTitle();
@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return object.getReadOnly(); }	@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return object.getVmDevice().getReadOnly(); }
void saveVmsToDb() { getDbFacade().getVmDynamicDao().updateAllInBatch(vmDynamicToSave.values()); getDbFacade().getVmStatisticsDao().updateAllInBatch(vmStatisticsToSave.values()); final java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics> allVmInterfaceStatistics = new java.util.LinkedList<org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics>(); for (java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> list : vmInterfaceStatisticsToSave.values()) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : list) { allVmInterfaceStatistics.add(iface.getStatistics()); } } getDbFacade().getVmNetworkStatisticsDao().updateAllInBatch(allVmInterfaceStatistics); getDbFacade().getDiskImageDynamicDao().updateAllInBatch(vmDiskImageDynamicToSave.values()); getDbFacade().getLunDao().updateAllInBatch(vmLunDisksToSave); saveVmDevicesToDb(); saveVmGuestAgentNetworkDevices(); getVdsEventListener().addExternallyManagedVms(externalVmsToAdd); }	void saveVmsToDb() { getDbFacade().getVmDynamicDao().updateAllInBatch(vmDynamicToSave.values()); getDbFacade().getVmStatisticsDao().updateAllInBatch(vmStatisticsToSave.values()); final java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics> allVmInterfaceStatistics = new java.util.LinkedList<org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics>(); for (java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> list : vmInterfaceStatisticsToSave.values()) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : list) { allVmInterfaceStatistics.add(iface.getStatistics()); } } getDbFacade().getVmNetworkStatisticsDao().updateAllInBatch(allVmInterfaceStatistics); getDbFacade().getDiskImageDynamicDao().updateAllInBatch(vmDiskImageDynamicToSave.values()); getDbFacade().getLunDao().updateAllInBatch(vmLunDisksToSave); getVdsEventListener().addExternallyManagedVms(externalVmsToAdd); saveVmDevicesToDb(); saveVmJobsToDb(); saveVmGuestAgentNetworkDevices(); saveVmNumaNodeRuntimeData(); }
@org.junit.Test public void testGetLunsToUpdateInDbDiffLunIdSamePvId() { org.ovirt.engine.core.compat.Guid pvID = org.ovirt.engine.core.compat.Guid.newGuid(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToUpdateInDb = getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid(), pvID, pvID); assertTrue(java.util.Objects.equals(lunsToUpdateInDb.stream().map(LUNs::getPhysicalVolumeId).findFirst().orElse(null), pvID.toString())); }	@org.junit.Test public void testGetLunsToUpdateInDbDiffLunIdSamePvId() { org.ovirt.engine.core.compat.Guid pvID = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.compat.Guid lunFromVgLunId = org.ovirt.engine.core.compat.Guid.newGuid(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> newLunsToSaveInDb = getLunsToUpdateInDb(lunFromVgLunId, org.ovirt.engine.core.compat.Guid.newGuid(), pvID, pvID).get(command.saveNewLuns); assertLunIdInList(newLunsToSaveInDb, lunFromVgLunId); }
public com.google.gwt.dom.client.LabelElement getLabelElement() { return labelElement; }	protected com.google.gwt.dom.client.LabelElement getLabelElement() { return labelElement; }
java.lang.String VdsTransparentHugePagesState__Always();	java.lang.String VdsTransparentHugePagesState___Always();
@org.junit.Test public void testJsonNullDiskDescription() throws java.io.IOException { disk1.setDiskAlias("DiskAlias"); disk1.setDiskDescription(null); assertDiskDescriptionMap(); }	@org.junit.Test public void testJsonNullDiskDescription() throws java.io.IOException { disk1.setDiskAlias("DiskAlias"); disk1.setDiskDescription(null); org.ovirt.engine.core.bll.ImagesHandlerTest.assertDiskDescriptionMap(disk1); }
public long getStatusChangedAt() { return statusChangedAt; }	public void calculateNextMaintenanceAttemptTime() { this.nextMaintenanceAttemptTime = (java.lang.System.currentTimeMillis()) + (java.util.concurrent.TimeUnit.MILLISECONDS.convert(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.HostPreparingForMaintenanceIdleTime), java.util.concurrent.TimeUnit.SECONDS)); }
public org.ovirt.engine.core.bll.ValidationResult dataCenterVersionMismatch() { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = getDataCenter(); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.VDS_GROUP_CANNOT_ADD_COMPATIBILITY_VERSION_WITH_LOWER_STORAGE_POOL).when(((dataCenter != null) && (cluster.supportsVirtService()) ? (dataCenter.getCompatibilityVersion().compareTo(cluster.getCompatibilityVersion())) > 0 : false)); }	public org.ovirt.engine.core.bll.ValidationResult dataCenterVersionMismatch() { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = getDataCenter(); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.VDS_GROUP_CANNOT_ADD_COMPATIBILITY_VERSION_WITH_LOWER_STORAGE_POOL).when(((dataCenter != null) && (cluster.supportsVirtService() ? (dataCenter.getCompatibilityVersion().compareTo(cluster.getCompatibilityVersion())) > 0 : false))); }
@java.lang.Override public void invoke(org.ovirt.engine.api.extensions.ExtMap context, java.util.Map<java.lang.String, java.lang.Object> args) { context.mput(Schema.InvokeKeys.MODIFICATION_TYPE, Sql.ModificationTypes.INSERT); context.put(Schema.InvokeKeys.ENTITY_KEYS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.getGroupKeys(args, context.get(ContextKeys.POSITIONAL, java.lang.String.class))); if (!(context.containsKey(ContextKeys.EXIT_STATUS))) { org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.commands.get("_schema-modify").invoke(context); } if (!(context.containsKey(ContextKeys.EXIT_STATUS))) { context.put(ContextKeys.EXIT_STATUS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.SUCCESS); } }	@java.lang.Override public void invoke(org.ovirt.engine.api.extensions.ExtMap context, java.util.Map<java.lang.String, java.lang.Object> args) { context.mput(Schema.InvokeKeys.MODIFICATION_TYPE, Sql.ModificationTypes.INSERT); context.put(Schema.InvokeKeys.ENTITY_KEYS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.getGroupKeys(args, context.get(ContextKeys.POSITIONAL, java.lang.String.class))); if (!(context.containsKey(ContextKeys.EXIT_STATUS))) { org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.commands.get("_schema-modify").invoke(context); context.putIfAbsent(ContextKeys.EXIT_STATUS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.SUCCESS); } }
protected void handleError() { addValidateMessage(org.ovirt.engine.core.bll.pm.VDS_FENCE_OPERATION_FAILED); addValidateMessage(org.ovirt.engine.core.bll.pm.VAR__TYPE__HOST); addValidateMessage(org.ovirt.engine.core.bll.pm.VAR__ACTION__RESTART); log.error("Failed to run RestartVdsCommand on vds '{}'", org.ovirt.engine.core.bll.pm.RestartVdsCommand.getVdsName()); }	protected void handleError() { addValidationMessage(org.ovirt.engine.core.bll.pm.VDS_FENCE_OPERATION_FAILED); addValidationMessage(org.ovirt.engine.core.bll.pm.VAR__TYPE__HOST); addValidationMessage(org.ovirt.engine.core.bll.pm.VAR__ACTION__RESTART); log.error("Failed to run RestartVdsCommand on vds '{}'", org.ovirt.engine.core.bll.pm.RestartVdsCommand.getVdsName()); }
@org.junit.Test public void validateDomainNotWithinThreshold() { setupForStorageTests(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(multipleSdValidator).allDomainsWithinThresholds(); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(EngineMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN.toString())); verify(multipleSdValidator).allDomainsWithinThresholds(); verify(multipleSdValidator, never()).allDomainsHaveSpaceForNewDisks(anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)); }	@org.junit.Test public void validateDomainNotWithinThreshold() { setupForStorageTests(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(multipleSdValidator).allDomainsWithinThresholds(); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN.toString())); verify(multipleSdValidator).allDomainsWithinThresholds(); verify(multipleSdValidator, never()).allDomainsHaveSpaceForNewDisks(anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)); }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmDynamic, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createHAThatShutdownAbnormally(); }	@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createHAThatShutdownAbnormally(); }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__ACTION__REVERT_TO); addValidateMessage(EngineMessage.VAR__TYPE__SNAPSHOT); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__REVERT_TO); addValidationMessage(EngineMessage.VAR__TYPE__SNAPSHOT); }
@org.junit.Before public void setUp() { initVmTemplate(); cmd.setVmTemplate(vmTemplate); cmd.setVmTemplateId(vmTemplate.getId()); initCluster(); cmd.setClusterId(cluster.getId()); cmd.setCluster(cluster); initStoragePool(); cmd.setStoragePoolId(org.ovirt.engine.core.bll.AddVmCommandTestBase.STORAGE_POOL_ID); cmd.setStoragePool(storagePool); mockDaos(); mockOtherDependencies(); org.ovirt.engine.core.bll.AddVmCommandTestBase.doNothing().when(cmd).initTemplateDisks(); org.ovirt.engine.core.bll.AddVmCommandTestBase.doNothing().when(cmd).initCommandBase(); org.ovirt.engine.core.bll.AddVmCommandTestBase.doNothing().when(cmd).initUser(); }	@org.junit.Before public void setUp() { initVmTemplate(); cmd.setVmTemplate(vmTemplate); cmd.setVmTemplateId(vmTemplate.getId()); initCluster(); cmd.setClusterId(cluster.getId()); cmd.setCluster(cluster); initStoragePool(); cmd.setStoragePoolId(org.ovirt.engine.core.bll.AddVmCommandTestBase.STORAGE_POOL_ID); cmd.setStoragePool(storagePool); mockDaos(); mockOtherDependencies(); org.ovirt.engine.core.bll.AddVmCommandTestBase.doNothing().when(cmd).initTemplateDisks(); }
private void updatePlugChangeability() { if ((getVm()) == null) { return; } org.ovirt.engine.core.common.businessentities.DiskInterface diskInterface = getDiskInterface().getSelectedItem(); boolean isVmRunning = ((getVm()) != null) && ((getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)); if ((DiskInterface.IDE.equals(diskInterface)) && isVmRunning) { getIsPlugged().setChangeProhibitionReason(org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.cannotHotPlugDiskWithIdeInterface()); getIsPlugged().setIsChangable(false); getIsPlugged().setEntity(false); } else { if (!(canDiskBePlugged(getVm()))) { getIsPlugged().setEntity(false); getIsPlugged().setChangeProhibitionReason(org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.cannotPlugDiskIncorrectVmStatus()); getIsPlugged().setIsChangable(false); } else { getIsPlugged().setIsChangable(isEditEnabled()); getIsPlugged().setEntity(true); } } }	private void updatePlugChangeability() { if ((getVm()) == null) { return; } org.ovirt.engine.core.common.businessentities.DiskInterface diskInterface = getDiskInterface().getSelectedItem(); boolean isVmRunning = ((getVm()) != null) && ((getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)); if ((DiskInterface.IDE.equals(diskInterface)) && isVmRunning) { getIsPlugged().setChangeProhibitionReason(org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.cannotHotPlugDiskWithIdeInterface()); getIsPlugged().setIsChangable(false); getIsPlugged().setEntity(false); } else { if (!(canDiskBePlugged(getVm()))) { getIsPlugged().setChangeProhibitionReason(org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.cannotPlugDiskIncorrectVmStatus()); getIsPlugged().setIsChangable(false); getIsPlugged().setEntity(false); } else { getIsPlugged().setIsChangable(isEditEnabled()); getIsPlugged().setEntity(true); } } }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { object.queryBackend(org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeProfileStatisticsPopupView.Nfs); }	@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { object.queryBackend(false); }
private org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap loadStoragePoolIsoMap() { return org.ovirt.engine.core.bll.storage.domains.DeactivateStorageDomainWithOvfUpdateCommand.getStoragePoolIsoMapDao().get(new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId(org.ovirt.engine.core.bll.storage.domains.DeactivateStorageDomainWithOvfUpdateCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.domains.DeactivateStorageDomainWithOvfUpdateCommand.getParameters().getStoragePoolId())); }	private org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap loadStoragePoolIsoMap() { return org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getStoragePoolIsoMapDao().get(new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getParameters().getStoragePoolId())); }
@org.junit.Test public void moveUnpluggedDiskVmDown() { command.getParameters().setParametersList(createMoveDisksParameters()); initDiskImage(diskImageId); initVm(VMStatus.Down, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageId, false); command.updateParameters(); assertTrue(((command.getMoveDiskParametersList().size()) == 1)); }	@org.junit.Test public void moveUnpluggedDiskVmDown() { command.getParameters().setParametersList(createMoveDisksParameters()); initDiskImage(diskImageId); initVm(VMStatus.Down, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageId, false); command.updateParameters(); assertEquals(command.getMoveDiskParametersList().size(), 1); }
@javax.annotation.PostConstruct public void init() { try { threadMXBean = java.lang.management.ManagementFactory.getThreadMXBean(); } catch (java.lang.Exception e) { throw new java.lang.IllegalStateException(("Problem getting ThreadMXBean:" + e)); } org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Initializing Thread Monitoring Service"); executor.scheduleWithFixedDelay(this::monitorEngineThreadPools, 0, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ThreadPoolMonitoringIntervalInMinutes), java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Thread Monitoring Service initialized"); }	@javax.annotation.PostConstruct public void init() { try { threadMXBean = java.lang.management.ManagementFactory.getThreadMXBean(); } catch (java.lang.Exception e) { throw new java.lang.IllegalStateException(("Problem getting ThreadMXBean:" + e)); } org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Initializing Thread Monitoring Service"); int threadPoolMonitoringIntervalInSeconds = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("THREAD_POOL_MONITORING_INTERVAL_IN_SECONDS"); if (threadPoolMonitoringIntervalInSeconds <= 0) { org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Thread Monitoring Service is disabled."); } else { executor.scheduleWithFixedDelay(this::monitorEngineThreadPools, 0, threadPoolMonitoringIntervalInSeconds, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Thread Monitoring Service initialized"); } }
public void init(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, java.util.List<org.ovirt.engine.core.compat.Guid> usedHosts) { if ((hosts == null) || (usedHosts == null)) { return; } allHostNamesMap = new java.util.HashMap(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hostsMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { allHostNamesMap.put(host.getName(), host); hostsMap.put(host.getId(), host); } java.util.Set<java.lang.String> usedHostNames = usedHosts.stream().map(( guid) -> hostsMap.get(guid).getName()).sorted().collect(java.util.stream.Collectors.toSet()); init(allHostNamesMap.keySet(), usedHostNames); }	public void init(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, java.util.List<org.ovirt.engine.core.compat.Guid> usedHosts) { if (hosts == null) { return; } java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> allHostIdsMap = new java.util.HashMap<>(); populateHostMaps(hosts, allHostNamesMap, allHostIdsMap); java.util.Set<java.lang.String> usedHostNames = getUsedHostNamesFromIds(usedHosts, allHostIdsMap); super.init(allHostNamesMap.keySet(), usedHostNames); setInitialized(); }
protected boolean validateUniqueVmName() { return org.ovirt.engine.core.bll.VmHandler.isVmWithSameNameExistStatic(org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getName(), org.ovirt.engine.core.bll.ImportVmCommandBase.getStoragePoolId()) ? failValidate(EngineMessage.VM_CANNOT_IMPORT_VM_NAME_EXISTS) : true; }	protected boolean validateUniqueVmName() { return org.ovirt.engine.core.bll.VmHandler.isVmWithSameNameExistStatic(org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getName(), org.ovirt.engine.core.bll.ImportVmCommandBase.getStoragePoolId()) ? failValidation(EngineMessage.VM_CANNOT_IMPORT_VM_NAME_EXISTS) : true; }
public org.ovirt.engine.core.bll.ValidationResult networksAreAttachedToThisInterface(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> hostInterfaces, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworksWithLabel) { java.util.List<java.lang.String> assignedNetworks = validateNetworksNotAssignedToIncorrectNics(hostInterfaces, clusterNetworksWithLabel); return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.LABELED_NETWORK_ATTACHED_TO_WRONG_INTERFACE, (((org.ovirt.engine.core.bll.validator.HostInterfaceValidator.VAR_ASSIGNED_NETWORKS) + " ") + (org.ovirt.engine.core.bll.validator.ValidatorUtils.commaSeparated(assignedNetworks)))).when((!(assignedNetworks.isEmpty()))); }	public org.ovirt.engine.core.bll.ValidationResult networksAreAttachedToThisInterface(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> hostInterfaces, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworksWithLabel) { java.util.List<java.lang.String> assignedNetworks = validateNetworksNotAssignedToIncorrectNics(hostInterfaces, clusterNetworksWithLabel); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.LABELED_NETWORK_ATTACHED_TO_WRONG_INTERFACE, org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.validator.HostInterfaceValidator.VAR_ASSIGNED_NETWORKS, assignedNetworks)).when((!(assignedNetworks.isEmpty()))); }
@java.lang.Override public void onSuccess(java.lang.Object innerModel, java.lang.Object innerReturnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Quota> quotaList = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (innerReturnValue)).getReturnValue(); if ((quotaList != null) && (!(quotaList.isEmpty()))) { getQuota().setItems(quotaList); } org.ovirt.engine.core.compat.Guid diskQuota = ((getDisk()) != null) ? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getQuotaId() : null; org.ovirt.engine.core.compat.Guid vmQuota = ((getVm()) != null) ? getVm().getQuotaId() : null; org.ovirt.engine.core.compat.Guid defaultQuota = (diskQuota != null) ? diskQuota : vmQuota; if (defaultQuota == null) { return; } for (org.ovirt.engine.core.common.businessentities.Quota quota : quotaList) { if (quota.getId().equals(defaultQuota)) { getQuota().setSelectedItem(quota); return; } } if (diskQuota != null) { org.ovirt.engine.core.common.businessentities.Quota quota = new org.ovirt.engine.core.common.businessentities.Quota(); quota.setId(diskQuota); quota.setQuotaName(getDiskImage().getQuotaName()); quotaList.add(quota); getQuota().setItems(quotaList); getQuota().setSelectedItem(quota); } }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.Quota> quotaList = ((java.util.List<org.ovirt.engine.core.common.businessentities.Quota>) (returnValue)); if ((quotaList != null) && (!(quotaList.isEmpty()))) { getQuota().setItems(quotaList); if (quotaList.get(0).getId().equals(defaultQuota)) { return; } } if (diskQuota != null) { org.ovirt.engine.core.common.businessentities.Quota quota = new org.ovirt.engine.core.common.businessentities.Quota(); quota.setId(diskQuota); quota.setQuotaName(getDiskImage().getQuotaName()); if (quotaList == null) { quotaList = new java.util.ArrayList(); } quotaList.add(quota); getQuota().setItems(quotaList); getQuota().setSelectedItem(quota); } }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Copy Role") java.lang.String copyRoleTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Copy Role") java.lang.String copyRoleTitle();
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Status") java.lang.String statusStorageTree();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Status") java.lang.String statusStorageTree();
protected boolean validateVmProperties(org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String runOnceCustomProperties, java.util.List<java.lang.String> messages) { java.lang.String customProperties = (runOnceCustomProperties != null) ? runOnceCustomProperties : vm.getCustomProperties(); return getVmPropertiesUtils().validateVmProperties(vm.getEffectiveCompatibilityVersion(), customProperties, messages); }	protected boolean validateVmProperties(org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String runOnceCustomProperties, java.util.List<java.lang.String> messages) { java.lang.String customProperties = (runOnceCustomProperties != null) ? runOnceCustomProperties : vm.getCustomProperties(); return getVmPropertiesUtils().validateVmProperties(vm.getCompatibilityVersion(), customProperties, messages); }
public org.ovirt.engine.core.dao.qos.NetworkQosDao getNetworkQosDao() { return getDao(org.ovirt.engine.core.dao.qos.NetworkQosDao.class); }	public org.ovirt.engine.core.dao.network.NetworkQoSDao getQosDao() { return getDao(org.ovirt.engine.core.dao.network.NetworkQoSDao.class); }
@org.junit.Test public void canDoActionFailsOnServerNotUp() { cmd = spy(new org.ovirt.engine.core.bll.gluster.AddGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); setUpMocksForAdd(VDSStatus.Down); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(EngineMessages.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP.toString())); }	@org.junit.Test public void canDoActionFailsOnServerNotUp() { cmd = spy(new org.ovirt.engine.core.bll.gluster.AddGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); setUpMocksForAdd(VDSStatus.Down); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP.toString())); }
public static boolean isSane(java.lang.String path) { final int lenght = path.length(); if (lenght > (org.ovirt.engine.core.utils.ServletUtils.PATH_MAX)) { org.ovirt.engine.core.utils.ServletUtils.log.error((((("The path is " + lenght) + " characters long, which is longer than the maximum allowed ") + (org.ovirt.engine.core.utils.ServletUtils.PATH_MAX)) + ".")); return false; } if (((path.contains("..")) || (path.contains("//"))) || (path.contains("./"))) { org.ovirt.engine.core.utils.ServletUtils.log.error("The path contains potentially dangerous directory navigation sequences."); return false; } return true; }	public static boolean isSane(java.lang.String path) { final int length = path.length(); if (length > (org.ovirt.engine.core.utils.ServletUtils.PATH_MAX)) { org.ovirt.engine.core.utils.ServletUtils.log.error((((("The path is " + length) + " characters long, which is longer than the maximum allowed ") + (org.ovirt.engine.core.utils.ServletUtils.PATH_MAX)) + ".")); return false; } if (((path.contains("..")) || (path.contains("//"))) || (path.contains("./"))) { org.ovirt.engine.core.utils.ServletUtils.log.error("The path contains potentially dangerous directory navigation sequences."); return false; } return true; }
private boolean isQuietTimeFromLastActionPassed() { int secondsLeftToNextPmOp = ((org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.isInternalExecution()) || ((org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.VdcActionType.RestartVds))) ? 0 : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAuditLogDao().getTimeToWaitForNextPmOp(org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.getVds().getName(), getRequestedAuditEvent()); if (secondsLeftToNextPmOp > 0) { addValidateMessage(EngineMessage.VDS_FENCE_DISABLED_AT_QUIET_TIME); org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.addValidateMessageVariable("seconds", secondsLeftToNextPmOp); return false; } else { return true; } }	private boolean isQuietTimeFromLastActionPassed() { int secondsLeftToNextPmOp = ((org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.isInternalExecution()) || ((org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.VdcActionType.RestartVds))) ? 0 : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAuditLogDao().getTimeToWaitForNextPmOp(org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.getVds().getName(), getRequestedAuditEvent()); if (secondsLeftToNextPmOp > 0) { addValidationMessage(EngineMessage.VDS_FENCE_DISABLED_AT_QUIET_TIME); org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.addValidationMessageVariable("seconds", secondsLeftToNextPmOp); return false; } else { return true; } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterTaskInfoReturnForXmlRpc glusterVolumeRemoveBrickStart(java.lang.String volumeName, java.lang.String[] brickDirectories, int replicaCount, java.lang.Boolean forceRemove) { try { if (forceRemove) { return new org.ovirt.engine.core.vdsbroker.gluster.GlusterTaskInfoReturnForXmlRpc(vdsServer.glusterVolumeRemoveBrickForce(volumeName, brickDirectories, replicaCount)); } else { return new org.ovirt.engine.core.vdsbroker.gluster.GlusterTaskInfoReturnForXmlRpc(vdsServer.glusterVolumeRemoveBrickStart(volumeName, brickDirectories, replicaCount)); } } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterTaskInfoReturnForXmlRpc glusterVolumeRemoveBricksStart(java.lang.String volumeName, java.lang.String[] brickDirectories, int replicaCount, java.lang.Boolean forceRemove) { try { if (forceRemove) { return new org.ovirt.engine.core.vdsbroker.gluster.GlusterTaskInfoReturnForXmlRpc(vdsServer.glusterVolumeRemoveBrickForce(volumeName, brickDirectories, replicaCount)); } else { return new org.ovirt.engine.core.vdsbroker.gluster.GlusterTaskInfoReturnForXmlRpc(vdsServer.glusterVolumeRemoveBrickStart(volumeName, brickDirectories, replicaCount)); } } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.StorageServerConnections paramConnection = org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getConnection(); if (org.apache.commons.lang.StringUtils.isNotEmpty(paramConnection.geIid())) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY); } if (!(isValidConnection(paramConnection))) { return false; } org.ovirt.engine.core.compat.Guid storagePoolId = (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getParameters().getVdsId())) ? null : org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getVds().getStoragePoolId(); if (isConnWithSameDetailsExists(paramConnection, storagePoolId)) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ALREADY_EXISTS); } if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getParameters().getVdsId()))) { if ((org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getVds()) == null) { return failCanDoAction(EngineMessage.VDS_INVALID_SERVER_ID); } if ((org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getVds().getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { return failCanDoAction(EngineMessage.VDS_ADD_STORAGE_SERVER_STATUS_MUST_BE_UP); } } return true; }	@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.StorageServerConnections paramConnection = org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getConnection(); if (org.apache.commons.lang.StringUtils.isNotEmpty(paramConnection.getId())) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY); } if (!(isValidConnection(paramConnection))) { return false; } org.ovirt.engine.core.compat.Guid storagePoolId = (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getParameters().getVdsId())) ? null : org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getVds().getStoragePoolId(); if (isConnWithSameDetailsExists(paramConnection, storagePoolId)) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ALREADY_EXISTS); } if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getParameters().getVdsId()))) { if ((org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getVds()) == null) { return failCanDoAction(EngineMessage.VDS_INVALID_SERVER_ID); } if ((org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getVds().getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { return failCanDoAction(EngineMessage.VDS_ADD_STORAGE_SERVER_STATUS_MUST_BE_UP); } } return true; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Edit Quota") java.lang.String defineStorageQuotaOnDataCenterTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Edit Quota") java.lang.String defineStorageQuotaOnDataCenterTitle();
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.EntityModel setEntity(java.lang.Object value) { super.setEntity(value); UpdateIsCloneVmSupported(); return this; }	@java.lang.Override public void setEntity(java.lang.Object value) { super.setEntity(value); UpdateIsCloneVmSupported(); }
protected void LogSettingVmToDown(org.ovirt.engine.core.compat.Guid vdsId, org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(vdsId, vmId); auditLogDirector.log(logable, AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE); }	protected void logSettingVmToDown(org.ovirt.engine.core.compat.Guid vdsId, org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(vdsId, vmId); auditLogDirector.log(logable, AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE); }
private boolean skipSearchItem(org.ovirt.engine.core.searchbackend.SyntaxContainer syntax, java.lang.String item) { if ((getFilter()) != null) { for (java.lang.String value : getFilter()) { if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(value.toLowerCase(), item.toLowerCase())) { return true; } } } if (((getSearchObjectFilter()) != null) && ((syntax.getState()) == (org.ovirt.engine.core.searchbackend.SyntaxObjectType.BEGIN))) { for (java.lang.String value : getSearchObjectFilter()) { if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(value.toLowerCase(), item.toLowerCase())) { return true; } } } return false; }	private void addSuggestItem(java.lang.String firstPart, org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartType firstPartType, java.lang.String secondPart, org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartType secondPartType) { org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel tempVar = new org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel(); tempVar.setPartString(firstPart); tempVar.setPartType(firstPartType); org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel tempVar2 = new org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel(); tempVar2.setPartString(secondPart); tempVar2.setPartType(secondPartType); java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel> parts = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel>(java.util.Arrays.asList(new org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel[]{ tempVar, tempVar2 })); getItems().add(parts); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.BaseDisk entity) { return createIdParameterMapper(entity.getId()).addValue("disk_alias", entity.getDiskAlias()).addValue("disk_description", entity.getDiskDescription()).addValue("disk_interface", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getDiskInterface())).addValue("wipe_after_delete", entity.isWipeAfterDelete()).addValue("propagate_errors", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getPropagateErrors())).addValue("shareable", entity.isShareable()).addValue("boot", entity.isBoot()).addValue("sgio", entity.getSgio()).addValue("alignment", entity.getAlignment()).addValue("last_alignment_scan", entity.getLastAlignmentScan()).addValue("disk_storage_type", ((org.ovirt.engine.core.common.businessentities.storage.Disk) (entity)).getDiskStorageType()); }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.BaseDisk entity) { return createIdParameterMapper(entity.getId()).addValue("disk_alias", entity.getDiskAlias()).addValue("disk_description", entity.getDiskDescription()).addValue("disk_interface", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getDiskInterface())).addValue("wipe_after_delete", entity.isWipeAfterDelete()).addValue("propagate_errors", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getPropagateErrors())).addValue("shareable", entity.isShareable()).addValue("boot", entity.isBoot()).addValue("sgio", entity.getSgio()).addValue("alignment", entity.getAlignment()).addValue("last_alignment_scan", entity.getLastAlignmentScan()).addValue("disk_storage_type", entity.getDiskStorageType()); }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.bll.MaintenanceVdsCommand.getVds(); if ((vds.getClusterSupportsGlusterService()) && (org.ovirt.engine.core.bll.MaintenanceVdsCommand.getParameters().getIsStopGlusterProcesses())) { return new org.ovirt.engine.core.bll.HostMaintenanceCallback(); } else { return super.getCallback(); } }	@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { if ((org.ovirt.engine.core.bll.MaintenanceVdsCommand.getVds().getClusterSupportsGlusterService()) && (org.ovirt.engine.core.bll.MaintenanceVdsCommand.getParameters().isStopGlusterService())) { return new org.ovirt.engine.core.bll.HostMaintenanceCallback(); } else { return super.getCallback(); } }
private void validateQueryType(javax.servlet.http.HttpServletRequest request) throws java.lang.Exception { java.lang.String queryType = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, SSOConstants.HTTP_PARAM_SEARCH_QUERY_TYPE); if ((!(directoryQueries.containsKey(queryType))) && (!(directoryPublicQueries.containsKey(queryType)))) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SSOConstants.ERR_CODE_INVALID_REQUEST, java.lang.String.format(ssoContext.getLocalizationUtils().localize(SSOConstants.APP_ERROR_UNSUPPORTED_PARAMETER_IN_REQUEST, request.getLocale()), queryType, SSOConstants.HTTP_PARAM_SEARCH_QUERY_TYPE)); } }	private void validateQueryType(javax.servlet.http.HttpServletRequest request) throws java.lang.Exception { java.lang.String queryType = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, SSOConstants.HTTP_PARAM_SEARCH_QUERY_TYPE); if ((!(directoryQueries.containsKey(queryType))) && (!(directoryPublicQueries.containsKey(queryType)))) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SSOConstants.ERR_CODE_INVALID_REQUEST, java.lang.String.format(ssoContext.getLocalizationUtils().localize(SSOConstants.APP_ERROR_UNSUPPORTED_PARAMETER_IN_REQUEST, ((java.util.Locale) (request.getAttribute(SSOConstants.LOCALE)))), queryType, SSOConstants.HTTP_PARAM_SEARCH_QUERY_TYPE)); } }
protected boolean isDiskPassPCIAndIDELimit(org.ovirt.engine.core.common.businessentities.Disk diskInfo) { java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> vmInterfaces = org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmNetworkInterfaceDAO().getAllForVm(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.Disk> allVmDisks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getDiskMap().values()); allVmDisks.add(diskInfo); return checkPciAndIDeLimit(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getnum_of_monitors(), vmInterfaces, allVmDisks, org.ovirt.engine.core.bll.AbstractDiskVmCommand.getReturnValue().getCanDoActionMessages()); }	protected boolean isDiskPassPciAndIdeLimit(org.ovirt.engine.core.common.businessentities.Disk diskInfo) { java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> vmInterfaces = org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmNetworkInterfaceDAO().getAllForVm(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.Disk> allVmDisks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getDiskMap().values()); allVmDisks.add(diskInfo); return checkPciAndIdeLimit(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getnum_of_monitors(), vmInterfaces, allVmDisks, org.ovirt.engine.core.bll.AbstractDiskVmCommand.getReturnValue().getCanDoActionMessages()); }
protected java.lang.String getLocaleStringFromPath(final java.lang.String path) { java.lang.String result = null; if (null != path) { if (!(path.startsWith("/"))) { throw new java.lang.IllegalArgumentException("Path should start with a '/'"); } java.lang.String[] pathElements = path.substring(1).split("/"); java.io.File localeFile = new java.io.File(base, pathElements[0]); if ((!(localeFile.exists())) || (localeFile.isDirectory())) { result = pathElements[0]; } } return result; }	protected java.lang.String getLocaleStringFromPath(final java.lang.String path) { java.lang.String result = null; if (path != null) { if (!(path.startsWith("/"))) { org.ovirt.engine.core.DocsServlet.log.warn("Path should start with a '/'"); return null; } java.lang.String[] pathElements = path.substring(1).split("/"); java.io.File localeFile = new java.io.File(base, pathElements[0]); if ((!(localeFile.exists())) || (localeFile.isDirectory())) { result = pathElements[0]; } } return result; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsDiskHotPlugAvailable".equals(args.propertyName)) { com.google.gwt.event.logical.shared.InitializeEvent.fire(plugButtonDefinition); com.google.gwt.event.logical.shared.InitializeEvent.fire(unPlugButtonDefinition); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsDiskHotPlugAvailable".equals(args.propertyName)) { com.google.gwt.event.logical.shared.InitializeEvent.fire(plugButtonDefinition); com.google.gwt.event.logical.shared.InitializeEvent.fire(unPlugButtonDefinition); } }
public org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel getBookmarkList() { return this.bookmarkListModelProvider.get(); }	public org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel getBookmarkList() { return bookmarkListModel; }
protected org.ovirt.engine.api.model.Roles mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.RolesEntity> entities) { org.ovirt.engine.api.model.Roles collection = new org.ovirt.engine.api.model.Roles(); for (org.ovirt.engine.core.common.businessentities.RolesEntity entity : entities) { collection.getRoles().add(addLinks(map(entity))); } return collection; }	protected org.ovirt.engine.api.model.Roles mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.Role> entities) { org.ovirt.engine.api.model.Roles collection = new org.ovirt.engine.api.model.Roles(); for (org.ovirt.engine.core.common.businessentities.Role entity : entities) { collection.getRoles().add(addLinks(map(entity))); } return collection; }
@java.lang.Override protected void executeIrsBrokerCommand() { floppyList = org.ovirt.engine.core.vdsbroker.irsbroker.GetFloppyListVDSCommand.getIrsProxy().getFloppyList(org.ovirt.engine.core.vdsbroker.irsbroker.GetFloppyListVDSCommand.getParameters().getStoragePoolId().toString()); org.ovirt.engine.core.vdsbroker.irsbroker.GetFloppyListVDSCommand.proceedProxyReturnValue(); setReturnValue(floppyList.getFileToMetadata()); }	@java.lang.Override protected void executeIrsBrokerCommand() { floppyList = org.ovirt.engine.core.vdsbroker.irsbroker.GetFloppyListVDSCommand.getIrsProxy().getFloppyList(org.ovirt.engine.core.vdsbroker.irsbroker.GetFloppyListVDSCommand.getParameters().getStoragePoolId().toString()); org.ovirt.engine.core.vdsbroker.irsbroker.GetFloppyListVDSCommand.proceedProxyReturnValue(); setReturnValue(floppyList.getFileStats()); }
@org.junit.Test public void testNotExternalNetworkWhenExternalNetworkIsProvided() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = new org.ovirt.engine.core.common.businessentities.network.Network(); externalNetwork.setProvidedBy(new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(org.ovirt.engine.core.compat.Guid.newGuid(), "")); when(networkDaoMock.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(externalNetwork); assertThat(new org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator(new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(), new org.ovirt.engine.core.common.businessentities.VDS()).notExternalNetwork(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.EXTERNAL_NETWORK_CANNOT_BE_PROVISIONED)); }	@org.junit.Test public void testNotExternalNetworkWhenExternalNetworkIsProvided() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = new org.ovirt.engine.core.common.businessentities.network.Network(); externalNetwork.setId(org.ovirt.engine.core.compat.Guid.newGuid()); externalNetwork.setProvidedBy(new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(org.ovirt.engine.core.compat.Guid.newGuid(), "")); when(networkDaoMock.get(eq(externalNetwork.getId()))).thenReturn(externalNetwork); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); attachment.setNetworkId(externalNetwork.getId()); assertThat(createNetworkAttachmentValidator(attachment).notExternalNetwork(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.EXTERNAL_NETWORK_CANNOT_BE_PROVISIONED)); }
@java.lang.SuppressWarnings({ "unchecked", "rawtypes" }) private <T extends org.ovirt.engine.core.dao.DAO> T getDao(java.lang.Class<T> daoType) { for (org.ovirt.engine.core.dao.DAO dao : daos) { if (daoType.isAssignableFrom(dao.getClass())) { if (dao instanceof org.ovirt.engine.core.dao.jpa.AbstractJpaDao) { try { org.ovirt.engine.core.dao.jpa.AbstractJpaDao abstractJpaDao = ((org.ovirt.engine.core.dao.jpa.AbstractJpaDao) (createAndInjectMembers(dao))); return ((T) (abstractJpaDao)); } catch (java.lang.Exception e) { org.ovirt.engine.core.dal.dbbroker.DbFacade.log.error(("Can't initialize an AbstractJpaDao for entity " + daoType), e); } } else { return ((T) (dao)); } } } org.ovirt.engine.core.dal.dbbroker.DbFacade.log.error(("Can't find dao for " + daoType)); return null; }	@java.lang.SuppressWarnings("unchecked") private <T extends org.ovirt.engine.core.dao.Dao> T getDao(java.lang.Class<T> daoType) { for (org.ovirt.engine.core.dao.Dao dao : daos) { if (daoType.isAssignableFrom(dao.getClass())) { return ((T) (dao)); } } org.ovirt.engine.core.dal.dbbroker.DbFacade.log.error(("Can't find dao for " + daoType)); return null; }
public java.lang.Integer getMaxVmNameLength() { java.lang.Integer maxVmNameLengthNonWindows = ((java.lang.Integer) (getConfigValuePreConverted(ConfigurationValues.MaxVmNameLength))); if (maxVmNameLengthNonWindows == null) { return 64; } return maxVmNameLengthNonWindows; }	public java.lang.Integer getMaxVmNameLength() { java.lang.Integer maxVmNameLength = ((java.lang.Integer) (getConfigValuePreConverted(ConfigurationValues.MaxVmNameLength))); if (maxVmNameLength == null) { return 64; } return maxVmNameLength; }
public org.ovirt.engine.core.bll.network.macpool.MacPool createMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool, boolean engineStartup) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges macPoolUsingRanges = new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges(macPool.getId(), org.ovirt.engine.core.utils.MacAddressRangeUtils.macPoolToRanges(macPool), macPool.isAllowDuplicateMacAddresses(), auditLogDirector); macPoolUsingRanges.initialize(engineStartup, macsToAllocate(macPool.getId())); return macPoolUsingRanges; }	public org.ovirt.engine.core.bll.network.macpool.MacPool createMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool, boolean engineStartup) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges macPoolUsingRanges = new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges(macPool.getId(), org.ovirt.engine.core.utils.MacAddressRangeUtils.macPoolToRanges(macPool), macPool.isAllowDuplicateMacAddresses(), auditLogDirector); macPoolUsingRanges.initialize(engineStartup, macsUsedAcrossWholeSystem.getMacsForMacPool(macPool.getId())); return macPoolUsingRanges; }
@java.lang.Override public void finished(org.ovirt.engine.core.common.businessentities.VmBase source, org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel destination) { getModel().getIsStateless().setIsAvailable(((vm.getVmPoolId()) == null)); getModel().getIsRunAndPause().setIsAvailable(((vm.getVmPoolId()) == null)); getModel().getCpuSharesAmount().setEntity(vm.getCpuShares()); updateCpuSharesSelection(); updateRngDevice(getVm().getId()); updateTimeZone(vm.getTimeZone()); updateGraphics(); getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags()); getModel().getStorageDomain().setIsChangeable(false); getModel().getProvisioning().setIsAvailable(false); getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid())); getModel().getCpuPinning().setEntity(vm.getCpuPinning()); getModel().getCustomPropertySheet().deserialize(vm.getCustomProperties()); if (isHotSetCpuSupported()) { getModel().getTotalCPUCores().getEntityChangedEvent().removeListener(getModel()); getModel().getCoresPerSocket().getSelectedItemChangedEvent().removeListener(getModel()); getModel().getNumOfSockets().getSelectedItemChangedEvent().removeListener(getModel()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostById(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { runningOnHost = ((org.ovirt.engine.core.common.businessentities.VDS) (returnValue)); hostCpu = calculateHostCpus(); updateNumOfSockets(); } }), vm.getRunOnVds()); } updateCpuProfile(vm.getVdsGroupId(), vm.getEffectiveCompatibilityVersion(), vm.getCpuProfileId()); }	@java.lang.Override public void finished(org.ovirt.engine.core.common.businessentities.VmBase source, org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel destination) { getModel().getIsStateless().setIsAvailable(((vm.getVmPoolId()) == null)); getModel().getIsRunAndPause().setIsAvailable(((vm.getVmPoolId()) == null)); getModel().getCpuSharesAmount().setEntity(vm.getCpuShares()); updateCpuSharesSelection(); updateRngDevice(getVm().getId()); updateTimeZone(vm.getTimeZone()); updateGraphics(); getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags()); getModel().getStorageDomain().setIsChangeable(false); getModel().getProvisioning().setIsAvailable(false); getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid())); getModel().getCpuPinning().setEntity(vm.getCpuPinning()); getModel().getCustomPropertySheet().deserialize(vm.getCustomProperties()); if (isHotSetCpuSupported()) { getModel().getTotalCPUCores().getEntityChangedEvent().removeListener(getModel()); getModel().getCoresPerSocket().getSelectedItemChangedEvent().removeListener(getModel()); getModel().getThreadsPerCore().getSelectedItemChangedEvent().removeListener(getModel()); getModel().getNumOfSockets().getSelectedItemChangedEvent().removeListener(getModel()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostById(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { runningOnHost = ((org.ovirt.engine.core.common.businessentities.VDS) (returnValue)); hostCpu = calculateHostCpus(); updateNumOfSockets(); } }), vm.getRunOnVds()); } updateCpuProfile(vm.getClusterId(), vm.getCompatibilityVersion(), vm.getCpuProfileId()); }
@java.lang.Override protected void executeCommand() { initializeStorageDomain(); addStorageDomainInDb(); org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer> connectReturnValue = connectStorage(); if (!(connectReturnValue.getFirst())) { org.ovirt.engine.core.common.errors.VdcFault fault = new org.ovirt.engine.core.common.errors.VdcFault(); fault.setError(org.ovirt.engine.core.common.errors.EngineErrors.forValue(connectReturnValue.getSecond())); org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getReturnValue().setFault(fault); org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.setSucceeded(false); } else if (addStorageDomainInIrs()) { updateStorageDomainDynamicFromIrs(); org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.setSucceeded(true); } }	@java.lang.Override protected void executeCommand() { initializeStorageDomain(); addStorageDomainInDb(); org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer> connectReturnValue = connectStorage(); if (!(connectReturnValue.getFirst())) { org.ovirt.engine.core.common.errors.VdcFault fault = new org.ovirt.engine.core.common.errors.VdcFault(); fault.setError(org.ovirt.engine.core.common.errors.EngineError.forValue(connectReturnValue.getSecond())); org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getReturnValue().setFault(fault); org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.setSucceeded(false); } else if (addStorageDomainInIrs()) { updateStorageDomainDynamicFromIrs(); org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.setSucceeded(true); } }
@java.lang.Override public void onSuccess(java.lang.Object model1, java.lang.Object result1) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel) (model1)); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel unitVmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (vmListModel.getWindow())); org.ovirt.engine.core.common.action.AddVmFromTemplateParameters param = new org.ovirt.engine.core.common.action.AddVmFromTemplateParameters(vmListModel.getcurrentVm(), unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap(), org.ovirt.engine.core.compat.Guid.Empty); param.setSoundDeviceEnabled(((java.lang.Boolean) (model.getIsSoundcardEnabled().getEntity()))); param.setConsoleEnabled(((java.lang.Boolean) (model.getIsConsoleDeviceEnabled().getEntity()))); param.setCopyTemplatePermissions(((java.lang.Boolean) (model.getCopyPermissions().getEntity()))); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.AddVmFromTemplate, param, new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModelNetworkAsyncCallbacks.NetworkCreateOrUpdateFrontendActionAsyncCallback(model, defaultNetworkCreatingManager), vmListModel); }	@java.lang.Override public void onSuccess(java.lang.Object model1, java.lang.Object result1) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel) (model1)); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel unitVmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (vmListModel.getWindow())); org.ovirt.engine.core.common.action.AddVmFromTemplateParameters param = new org.ovirt.engine.core.common.action.AddVmFromTemplateParameters(vmListModel.getcurrentVm(), unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap(), org.ovirt.engine.core.compat.Guid.Empty); param.setSoundDeviceEnabled(((java.lang.Boolean) (model.getIsSoundcardEnabled().getEntity()))); param.setConsoleEnabled(((java.lang.Boolean) (model.getIsConsoleDeviceEnabled().getEntity()))); param.setBalloonEnabled(balloonEnabled(model)); param.setCopyTemplatePermissions(((java.lang.Boolean) (model.getCopyPermissions().getEntity()))); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.AddVmFromTemplate, param, new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModelNetworkAsyncCallbacks.NetworkCreateOrUpdateFrontendActionAsyncCallback(model, defaultNetworkCreatingManager), vmListModel); }
@org.junit.Test public void customPropertiesNotSupported() { org.ovirt.engine.core.common.businessentities.network.Network network = createManagementNetwork(); mockExistingNetworks(network); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork("eth0", network); mockExistingIfaces(iface); iface.setCustomProperties(createCustomProperties()); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(iface)); validateAndExpectViolation(helper, EngineMessages.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_NOT_SUPPORTED, network.getName()); }	@org.junit.Test public void customPropertiesNotSupported() { org.ovirt.engine.core.common.businessentities.network.Network network = createManagementNetwork(); mockExistingNetworks(network); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork("eth0", network); mockExistingIfaces(iface); iface.setCustomProperties(createCustomProperties()); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(iface)); validateAndExpectViolation(helper, EngineMessage.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_NOT_SUPPORTED, network.getName()); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetEquallyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool1 = factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool2 = factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)); assertThat(decoratedPool1, is(macPoolDecoratorA)); assertThat(decoratedPool2, is(macPoolDecoratorA)); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(macPool), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any()); }	@org.junit.Test public void testDifferenlyDecoratedPoolsUseSameLock() { multipleDecoratorsUsesSameLock(macPoolDecoratorA, macPoolDecoratorB); }
@org.junit.Test public void testListWithCustomGlobalHeaderOverridden() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(1); headers.put("my", "local"); clustersService.list().headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }	@org.junit.Test public void testListWithCustomGlobalHeaderOverridden() { clustersService.list().header("my", "local").send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }
@org.junit.Test public void findProxyHost_ExcludedHost() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = new java.util.LinkedList<>(); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(org.ovirt.engine.core.bll.FenceProxyLocatorTest.OTHER_HOST_ID_1); vds.setVdsGroupId(org.ovirt.engine.core.bll.FenceProxyLocatorTest.FENCED_HOST_CLUSTER_ID); hosts.add(vds); when(vdsDao.getAll()).thenReturn(hosts); org.ovirt.engine.core.common.businessentities.VDS proxyHost = fenceProxyLocator.findProxyHost(false, org.ovirt.engine.core.bll.FenceProxyLocatorTest.OTHER_HOST_ID_1); assertNull(proxyHost); }	@org.junit.Test public void findProxyHostExcludeHost() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = new java.util.LinkedList<>(); hosts.add(createProxyCandidate()); when(vdsDao.getAll()).thenReturn(hosts); org.ovirt.engine.core.common.businessentities.VDS proxyHost = fenceProxyLocator.findProxyHost(false, org.ovirt.engine.core.bll.FenceProxyLocatorTest.OTHER_HOST_ID_1); assertNull(proxyHost); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.NetworkEntity lookupEntity(org.ovirt.engine.core.compat.Guid id) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { return lookupNetwork(id, name, dataCenterId); }	@java.lang.Override public org.ovirt.engine.api.model.Network lookupEntity(org.ovirt.engine.core.compat.Guid id) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { return lookupNetwork(id, name, dataCenterId); }
@org.junit.Test public void shouldHaveNotingToMigrate() { when(clusterEnforcer1.chooseNextVmToMigrate()).thenReturn(null); when(clusterEnforcer2.chooseNextVmToMigrate()).thenReturn(null); verify(arem, never()).migrateVM(any(org.ovirt.engine.core.common.businessentities.VM.class)); }	@org.junit.Test public void shouldNotMigrateVmOnCluster2NothingToDo() { when(rulesEnforcer.chooseNextVmToMigrate(eq(vdsGroup2))).thenReturn(null); arem.refresh(); verify(arem).migrateVM(vm1); verify(arem, times(1)).migrateVM(any(org.ovirt.engine.core.common.businessentities.VM.class)); }
@java.lang.Override public java.lang.Void runInTransaction() { log.infoFormat("LUN details mismatch has been detected - refresh data from the underlying storage"); refreshLunsInfo(lunsFromVgInfo, lunsFromDb); return null; }	@java.lang.Override public java.lang.Void runInTransaction() { refreshLunsInfo(lunsFromVgInfo, lunsFromDb); return null; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.Collection<org.ovirt.engine.core.common.businessentities.qos.NetworkQoS> qos = ((java.util.Collection<org.ovirt.engine.core.common.businessentities.qos.NetworkQoS>) (returnValue)); getQos().setItems(qos); getQos().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.findNetworkQosById(qos, getNetwork().getQosId())); }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkQoS> qos = ((java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkQoS>) (returnValue)); getQos().setItems(qos); getQos().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.findNetworkQosById(qos, getNetwork().getQosId())); }
@java.lang.Override public org.ovirt.engine.core.authentication.Directory create(java.io.File file, org.ovirt.engine.core.authentication.Configuration config) { java.lang.String name = config.getInheritedString(org.ovirt.engine.core.authentication.nop.NopDirectoryFactory.NAME_PARAMETER); if (name == null) { org.ovirt.engine.core.authentication.nop.NopDirectoryFactory.log.error("The configuration file \"{}\" doesn\'t contain the name of the directory.", file.getAbsolutePath()); return null; } return new org.ovirt.engine.core.authentication.nop.NopDirectory(name); }	@java.lang.Override public org.ovirt.engine.core.authentication.Directory create(org.ovirt.engine.core.authentication.Configuration config) throws org.ovirt.engine.core.authentication.ConfigurationException { java.lang.String name = config.getInheritedString(org.ovirt.engine.core.authentication.nop.NopDirectoryFactory.NAME_PARAMETER); if (name == null) { throw new org.ovirt.engine.core.authentication.ConfigurationException(((("The configuration file \"" + (config.getFile().getAbsolutePath())) + "\" doesn\'t contain the name of ") + "the directory.")); } return new org.ovirt.engine.core.authentication.nop.NopDirectory(name); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSParametersBase getVDSParameters() { return org.ovirt.engine.core.bll.storage.SecureDeletionHandler.fixParametersWithSecureDeletion(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(getEnclosingCommand().getParameters().getStoragePoolId(), getEnclosingCommand().getParameters().getSourceStorageDomainId(), getEnclosingCommand().getParameters().getImageGroupID(), org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskImageDao().get(getEnclosingCommand().getParameters().getDestinationImageId()).isWipeAfterDelete(), getEnclosingCommand().getParameters().getForceDelete())); }	@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSParametersBase getVDSParameters() { return org.ovirt.engine.core.bll.storage.PostZeroHandler.fixParametersWithPostZero(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(getEnclosingCommand().getParameters().getStoragePoolId(), getEnclosingCommand().getParameters().getSourceStorageDomainId(), getEnclosingCommand().getParameters().getImageGroupID(), org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskImageDao().get(getEnclosingCommand().getParameters().getDestinationImageId()).isWipeAfterDelete(), getEnclosingCommand().getParameters().getForceDelete())); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Note: the networks will only be removed from the system, they will remain intact on any external providers.") java.lang.String removeProvidedNetworksNote();	@com.google.gwt.i18n.client.Constants.DefaultStringValue("Note: this will only remove the listed networks from the system.\nThey will remain intact on any external providers.") java.lang.String removeProvidedNetworksNote();
private void rollback5() { org.ovirt.engine.ui.uicompat.Enlistment enlistment = context.enlistment; org.ovirt.engine.ui.uicommonweb.models.hosts.EnlistmentContext enlistmentContext = ((org.ovirt.engine.ui.uicommonweb.models.hosts.EnlistmentContext) (enlistment.getContext())); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = context.changeVDSClusterReturnValue; if ((enlistmentContext.getDataCenterId()) != null) { org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.RemoveStoragePool, new org.ovirt.engine.core.common.action.StoragePoolParametersBase(enlistmentContext.getDataCenterId()), Frontend.NULLABLE_ASYNC_CALLBACK); } context.enlistment = null; enlistment.Done(); }	private void rollback5() { org.ovirt.engine.ui.uicompat.Enlistment enlistment = context.enlistment; org.ovirt.engine.ui.uicommonweb.models.hosts.EnlistmentContext enlistmentContext = ((org.ovirt.engine.ui.uicommonweb.models.hosts.EnlistmentContext) (enlistment.getContext())); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = context.changeVDSClusterReturnValue; if ((enlistmentContext.getDataCenterId()) != null) { org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.RemoveStoragePool, new org.ovirt.engine.core.common.action.StoragePoolParametersBase(enlistmentContext.getDataCenterId())); } context.enlistment = null; enlistment.Done(); }
private org.ovirt.engine.ui.webadmin.widget.table.column.MenuCell<org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport> getRemoveBrickActivityMenu(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { org.ovirt.engine.ui.webadmin.widget.table.column.MenuCell<org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport> menuCell = new org.ovirt.engine.ui.webadmin.widget.table.column.MenuCell<org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport>() { @java.lang.Override protected boolean isVisible(org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport value) { return (value.getAsyncTask().getType()) == (org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REMOVE_BRICK); } }; menuCell.addMenuItem(constants.removeBricksStop(), getDetailModel().getStopRemoveBricksCommand()); menuCell.addMenuItem(constants.removeBricksCommit(), getDetailModel().getCommitRemoveBricksCommand()); menuCell.addMenuItem(constants.retainBricks(), getDetailModel().getRetainBricksCommand()); return menuCell; }	private org.ovirt.engine.ui.webadmin.widget.table.column.MenuCell<org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport> getRemoveBrickActivityMenu(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { org.ovirt.engine.ui.webadmin.widget.table.column.MenuCell<org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport> menuCell = new org.ovirt.engine.ui.webadmin.widget.table.column.MenuCell<org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport>() { @java.lang.Override protected boolean isVisible(org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport value) { return (value.getAsyncTask().getType()) == (org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REMOVE_BRICK); } }; menuCell.addMenuItem(constants.removeBricksStatus(), getDetailModel().getStatusRemoveBricksCommand()); menuCell.addMenuItem(constants.removeBricksStop(), getDetailModel().getStopRemoveBricksCommand()); menuCell.addMenuItem(constants.removeBricksCommit(), getDetailModel().getCommitRemoveBricksCommand()); menuCell.addMenuItem(constants.retainBricks(), getDetailModel().getRetainBricksCommand()); return menuCell; }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Connection parameters are invalid for this storage type.") java.lang.String ACTION_TYPE_FAILED_STORAGE_CONNECTION_WRONG_PARAMETERS_FOR_STORAGE_TYPE();	@org.ovirt.engine.ui.frontend.DefaultStringValue("$action cancel conversion") java.lang.String VAR__ACTION__CANCEL_CONVERSION();
public static java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType> GetNicTypeList(int osId, boolean hasDualmode) { java.util.List<java.lang.String> osSupportedNetworkDevices = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getOsNetworkDevices(osId); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType> list = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType>(osSupportedNetworkDevices.size()); for (java.lang.String supportedDevice : osSupportedNetworkDevices) { org.ovirt.engine.core.common.businessentities.network.VmInterfaceType interfaceType = org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.valueOf(supportedDevice); if ((interfaceType != (org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.rtl8139_pv)) || ((osId == (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.WINDOWS_XP)) && hasDualmode)) { list.add(interfaceType); } } return list; }	public static void getNicTypeList(final int osId, org.ovirt.engine.core.compat.Version version, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { final org.ovirt.engine.ui.frontend.INewAsyncCallback chainedCallback = asyncQuery.asyncCallback; asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.ArrayList<java.lang.String> nics = ((java.util.ArrayList<java.lang.String>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType> interfaceTypes = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType>(); for (java.lang.String nic : nics) { try { interfaceTypes.add(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.valueOf(nic)); } catch (java.lang.IllegalArgumentException e) { } } chainedCallback.onSuccess(model, interfaceTypes); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.OsRepository, new org.ovirt.engine.core.common.queries.OsQueryParameters(OsRepositoryVerb.GetNetworkDevices, osId, version), asyncQuery); }
private void updateItems() { java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> items = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getItems(); for (org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity vmDeviceFeEntity : items) { vmDeviceFeEntity.setBeingUnplugged(devicesBeingHotUnplugged.contains(vmDeviceFeEntity)); } setItems(items); }	private void updateItems() { java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> items = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getItems(); for (org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity item : items) { item.setBeingUnplugged(idsOfDevicesBeingUnplugged.contains(item.getVmDevice().getId())); } setItems(new java.util.ArrayList(items)); }
@java.lang.Override protected void syncSearch() { updateGuestContainerList(); org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestContainerListModel.setIsQueryFirstTime(false); }	@java.lang.Override protected void syncSearch() { updateGuestContainers(); }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { log.debug("Non-tx, non-compensation state, immediately releasing macs {}.", java.util.Arrays.toString(macs.toArray())); macs.forEach(macPool::freeMac); }	@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { log.debug("Non-tx, non-compensation state, immediately releasing macs {}.", macs); macs.forEach(macPool::freeMac); }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeRemoveBrickCommit(java.lang.String volumeName, java.lang.String[] brickList, int replicCount);	org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeRemoveBricksCommit(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount);
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.RemoveQosModel<org.ovirt.engine.core.common.businessentities.network.HostNetworkQos> getRemoveQosModel() { return new org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.RemoveHostNetworkQos(this); }	@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.RemoveQosModel<org.ovirt.engine.core.common.businessentities.network.HostNetworkQos> getRemoveQosModel() { return new org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.RemoveHostNetworkQosModel(this); }
protected org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { return createTask(taskId, asyncTaskCreationInfo, parentCommand, null, java.util.Collections.<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType>emptyMap()); }	protected org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { return createTask(taskId, asyncTaskCreationInfo, parentCommand, null, new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType>()); }
@java.lang.Override protected void buildVmSoundDevices() { if ((vm.getVmType()) == (org.ovirt.engine.core.common.businessentities.VmType.Desktop)) { buildVmDevicesFromDb(VmDeviceGeneralType.SOUND, true); } }	@java.lang.Override protected void buildVmSoundDevices() { buildVmDevicesFromDb(VmDeviceGeneralType.SOUND, true); }
public org.ovirt.engine.core.bll.ValidationResult qosBaloonSupported() { org.ovirt.engine.core.compat.Version version = cluster.getCompatibilityVersion(); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessages.QOS_BALLOON_NOT_SUPPORTED).when((((version != null) && ((Version.v3_3.compareTo(version)) > 0)) && (cluster.isEnableBallooning()))); }	public org.ovirt.engine.core.bll.ValidationResult qosBaloonSupported() { org.ovirt.engine.core.compat.Version version = cluster.getCompatibilityVersion(); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.QOS_BALLOON_NOT_SUPPORTED).when((((version != null) && ((Version.v3_3.compareTo(version)) > 0)) && (cluster.isEnableBallooning()))); }
private static int getNumOfMonitors(org.ovirt.engine.core.common.businessentities.VM vm) { int maxMonitorsSpice = (vm.getSingleQxlPci()) ? 1 : vm.getNumOfMonitors(); int maxMonitorsVnc = java.lang.Math.max(1, vm.getNumOfMonitors()); return java.lang.Math.min(maxMonitorsSpice, maxMonitorsVnc); }	private static int getNumOfMonitors(org.ovirt.engine.core.common.businessentities.VM vm) { int maxMonitorsSpice = (vm.getSingleQxlPci()) ? org.ovirt.engine.core.bll.utils.VmDeviceUtils.SINGLE_QXL_MONITORS : vm.getNumOfMonitors(); int maxMonitorsVnc = java.lang.Math.max(org.ovirt.engine.core.bll.utils.VmDeviceUtils.VNC_MIN_MONITORS, vm.getNumOfMonitors()); return java.lang.Math.min(maxMonitorsSpice, maxMonitorsVnc); }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__ACTION__DETACH); addValidateMessage(EngineMessage.VAR__TYPE__STORAGE__CONNECTION); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__DETACH); addValidationMessage(EngineMessage.VAR__TYPE__STORAGE__CONNECTION); }
java.lang.String ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_IS_NOT_VALID();	java.lang.String ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_DOES_CONTAINS_THE_DISK();
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (!(getGlusterUtil().isGlusterSnapshotSupported(org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup().getCompatibilityVersion(), org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup().getId()))) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_VOLUME_SNAPSHOT_NOT_SUPPORTED); } return true; }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (!(getGlusterUtil().isGlusterSnapshotSupported(org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup().getCompatibilityVersion(), org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup().getId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VOLUME_SNAPSHOT_NOT_SUPPORTED); } return true; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("At least one transport type should be selected.") java.lang.String volumeTransportTypesValidationMsg();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("At least one transport type should be selected.") java.lang.String volumeTransportTypesValidationMsg();
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Allow to create Disk") java.lang.String allowToCreateDiskRoleTreeTooltip();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to create Disk") java.lang.String allowToCreateDiskRoleTreeTooltip();
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.storage.StorageConnectionValidator storageConnectionValidator = createStorageConnectionValidator(); if (((!(validate(storageConnectionValidator.isConnectionExists()))) || (!(validate(storageConnectionValidator.isDomainOfConnectionExistsAndInactive(org.ovirt.engine.core.bll.storage.connection.DetachStorageConnectionFromStorageDomainCommand.getStorageDomain()))))) || (!(validate(storageConnectionValidator.isISCSIConnectionAndDomain(org.ovirt.engine.core.bll.storage.connection.DetachStorageConnectionFromStorageDomainCommand.getStorageDomain()))))) { return false; } if (!(storageConnectionValidator.isConnectionForISCSIDomainAttached(org.ovirt.engine.core.bll.storage.connection.DetachStorageConnectionFromStorageDomainCommand.getStorageDomain()))) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_FOR_DOMAIN_NOT_EXIST); } return true; }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.storage.StorageConnectionValidator storageConnectionValidator = createStorageConnectionValidator(); if (((!(validate(storageConnectionValidator.isConnectionExists()))) || (!(validate(storageConnectionValidator.isDomainOfConnectionExistsAndInactive(org.ovirt.engine.core.bll.storage.connection.DetachStorageConnectionFromStorageDomainCommand.getStorageDomain()))))) || (!(validate(storageConnectionValidator.isISCSIConnectionAndDomain(org.ovirt.engine.core.bll.storage.connection.DetachStorageConnectionFromStorageDomainCommand.getStorageDomain()))))) { return false; } if (!(storageConnectionValidator.isConnectionForISCSIDomainAttached(org.ovirt.engine.core.bll.storage.connection.DetachStorageConnectionFromStorageDomainCommand.getStorageDomain()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_FOR_DOMAIN_NOT_EXIST); } return true; }
@java.lang.Override public void doPolling(org.ovirt.engine.core.compat.Guid cmdId, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { org.ovirt.engine.core.bll.RemoveVmPoolCommand<? extends org.ovirt.engine.core.common.action.VmPoolParametersBase> command = getCommand(cmdId); boolean anyFailed = false; for (org.ovirt.engine.core.compat.Guid childCmdId : childCmdIds) { org.ovirt.engine.core.common.businessentities.CommandEntity entity = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(childCmdId); switch (entity.getCommandStatus()) { case FAILED : case FAILED_RESTARTED : case UNKNOWN : anyFailed = true; break; default : break; } if ((entity.isExecuted()) && (!(entity.getReturnValue().getSucceeded()))) { anyFailed = true; } } if (anyFailed) { command.setCommandStatus(CommandStatus.FAILED); } else { org.ovirt.engine.core.common.businessentities.VmPool pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmPoolDao().get(command.getVmPoolId()); if ((pool.getRunningVmsCount()) == 0) { command.setCommandStatus(CommandStatus.SUCCEEDED); } } }	@java.lang.Override public void doPolling(org.ovirt.engine.core.compat.Guid cmdId, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { org.ovirt.engine.core.bll.RemoveVmPoolCommand<? extends org.ovirt.engine.core.common.action.VmPoolParametersBase> command = getCommand(cmdId); boolean anyFailed = false; for (org.ovirt.engine.core.compat.Guid childCmdId : childCmdIds) { org.ovirt.engine.core.common.businessentities.CommandEntity entity = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(childCmdId); switch (entity.getCommandStatus()) { case FAILED : case FAILED_RESTARTED : case UNKNOWN : anyFailed = true; break; default : break; } } if (anyFailed) { command.setCommandStatus(CommandStatus.FAILED); } else { org.ovirt.engine.core.common.businessentities.VmPool pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmPoolDao().get(command.getVmPoolId()); if ((pool == null) || ((pool.getRunningVmsCount()) == 0)) { command.setCommandStatus(CommandStatus.SUCCEEDED); } } }
@org.junit.Test public void networkWithDifferentMTUAddedToNic() { org.ovirt.engine.core.common.businessentities.Network net = createNetwork("nonVmMtu5000"); net.setVmNetwork(false); net.setMtu(5000); org.ovirt.engine.core.common.businessentities.Network newNet = createNetwork("vLanVmMtu9000"); newNet.setMtu(9000); mockExistingNetworks(net, newNet); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNic("nic0", net.getName()); nic.setBridged(false); mockExistingIfaces(nic); org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper(createParametersForNics(nic, createVlan(nic.getName(), 100, newNet.getName()))); validateAndExpectViolation(helper, VdcBllMessages.NETWORK_MTU_DIFFERENCES, java.lang.String.format("[%s(%d), %s(%d)]", net.getName(), net.getMtu(), newNet.getName(), newNet.getMtu())); }	@org.junit.Test public void networksWithDifferentMTUAddedToNic() { org.ovirt.engine.core.common.businessentities.Network net = createNetwork("nonVmMtu5000"); net.setVmNetwork(false); net.setMtu(5000); org.ovirt.engine.core.common.businessentities.Network newNet = createNetwork("vlanVmMtu9000"); newNet.setvlan_id(100); newNet.setMtu(9000); mockExistingNetworks(net, newNet); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNic("nic0", null); mockExistingIfaces(nic); nic.setNetworkName(net.getName()); org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper(createParametersForNics(nic, createVlan(nic.getName(), newNet.getvlan_id(), newNet.getName()))); validateAndExpectViolation(helper, VdcBllMessages.NETWORK_MTU_DIFFERENCES, java.lang.String.format("[%s(%d), %s(%d)]", net.getName(), net.getMtu(), newNet.getName(), newNet.getMtu())); }
@org.junit.Test public void replaceProductKey_emptyKeyShouldRemoveTheWholeSection() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "", false); assertThat(res, not(containsString("<ProductKey>"))); assertThat(res, not(containsString("</ProductKey>"))); }	@org.junit.Test public void replaceProductKeyEmptyKeyShouldRemoveTheWholeSection() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "", false); assertThat(res, not(containsString("<ProductKey>"))); assertThat(res, not(containsString("</ProductKey>"))); }
public void setOperatingsystem(org.ovirt.engine.core.bll.host.provider.foreman.ForemanOperatingSystem operationsystem) { this.operatingsystem = operationsystem; }	public void setResults(org.ovirt.engine.core.bll.host.provider.foreman.ForemanOperatingSystem[] operationsystem) { this.results = operationsystem; }
@org.junit.Test public void insufficientStorageSpace() { setupForStorageTests(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(multipleSdValidator).allDomainsHaveSpaceForClonedDisks(anyList()); assertFalse(cmd.imagesRelatedChecks()); }	@org.junit.Test public void insufficientStorageSpace() { setupForStorageTests(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(multipleSdValidator).allDomainsHaveSpaceForClonedDisks(anyList()); assertFalse(cmd.imagesRelatedChecks()); }
public void setIsBootSequenceTabValid(boolean value) { if (value) { invalidTabs.remove(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.UnitVmTabNames.BOOT_OPTIONS_TAB); } else { invalidTabs.add(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.UnitVmTabNames.BOOT_OPTIONS_TAB); } }	public void setRngSourceRandom(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.NotChangableForVmInPoolEntityModel<java.lang.Boolean> rngSourceRandom) { this.rngSourceRandom = rngSourceRandom; }
private void managePolicyUnits() { if ((getWindow()) != null) { return; } policyUnitModel = new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ManagePolicyUnitModel(); policyUnitModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().managePolicyUnits()); policyUnitModel.setHashName("manage_policy_units"); policyUnitModel.setHelpTag(policyUnitModel.getHashName(), ""); policyUnitModel.setPolicyUnits(new org.ovirt.engine.ui.uicommonweb.models.ListModel()); policyUnitModel.getPolicyUnits().setItems(sort(policyUnits)); policyUnitModel.getRefreshPolicyUnitsEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { setIsQueryFirstTime(true); syncSearch(); } }); org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()); command.setIsCancel(true); policyUnitModel.getCommands().add(command); setWindow(policyUnitModel); }	private void managePolicyUnits() { if ((getWindow()) != null) { return; } policyUnitModel = new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ManagePolicyUnitModel(); policyUnitModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().managePolicyUnits()); policyUnitModel.setHelpTag(HelpTag.manage_policy_units); policyUnitModel.setHashName("manage_policy_units"); policyUnitModel.setPolicyUnits(new org.ovirt.engine.ui.uicommonweb.models.ListModel()); policyUnitModel.getPolicyUnits().setItems(sort(policyUnits)); policyUnitModel.getRefreshPolicyUnitsEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { setIsQueryFirstTime(true); syncSearch(); } }); org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()); command.setIsCancel(true); policyUnitModel.getCommands().add(command); setWindow(policyUnitModel); }
@org.junit.Test public void updateChangeConnectionType() { oldNFSConnection.setstorage_type(StorageType.ISCSI); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_CHANGE_STORAGE_TYPE); }	@org.junit.Test public void updateChangeConnectionType() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0); parameters.setStorageServerConnection(newNFSConnection); oldNFSConnection.setstorage_type(StorageType.ISCSI); when(storageConnDao.get(newNFSConnection.getid())).thenReturn(oldNFSConnection); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_CHANGE_STORAGE_TYPE); }
@java.lang.Override protected void initDetailModels() { super.initDetailModels(); networkExternalSubnetListModel = new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkExternalSubnetListModel(); org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new org.ovirt.engine.ui.uicompat.ObservableCollection(); list.add(new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkGeneralModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkProfileListModel()); list.add(networkExternalSubnetListModel); list.add(new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkClusterListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkHostListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkVmListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkTemplateListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel()); setDetailModels(list); }	private void setDetailList(final org.ovirt.engine.ui.uicommonweb.models.networks.NetworkGeneralModel networkGeneralModel, final org.ovirt.engine.ui.uicommonweb.models.networks.NetworkProfileListModel networkProfileListModel, final org.ovirt.engine.ui.uicommonweb.models.networks.NetworkClusterListModel networkClusterListModel, final org.ovirt.engine.ui.uicommonweb.models.networks.NetworkHostListModel networkHostListModel, final org.ovirt.engine.ui.uicommonweb.models.networks.NetworkVmListModel networkVmListModel, final org.ovirt.engine.ui.uicommonweb.models.networks.NetworkTemplateListModel networkTemplateListModel, final org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.ui.uicommonweb.models.networks.NetworkListModel> permissionListModel) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); list.add(networkGeneralModel); list.add(networkProfileListModel); list.add(networkExternalSubnetListModel); list.add(networkClusterListModel); list.add(networkHostListModel); list.add(networkVmListModel); list.add(networkTemplateListModel); list.add(permissionListModel); setDetailModels(list); }
protected final void execute() { setCommandStatus(CommandStatus.ACTIVE); checkPersistCommand(); getReturnValue().setCanDoAction(true); getReturnValue().setIsSyncronious(true); if ((!(hasTaskHandlers())) || ((getExecutionIndex()) == 0)) { org.ovirt.engine.core.bll.job.ExecutionHandler.addStep(getExecutionContext(), StepEnum.EXECUTING, null); } try { handleTransactivity(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(scope, this); } catch (javax.ejb.TransactionRolledbackLocalException e) { log.infoFormat("Transaction was aborted in {0}", this.getClass().getName()); compensate(); } finally { try { if (getCommandShouldBeLogged()) { logRenamedEntity(); logCommand(); } if (getSucceeded()) { startPollingAsyncTasks(); } } finally { if ((!(hasTasks())) && (!(org.ovirt.engine.core.bll.job.ExecutionHandler.checkIfJobHasTasks(getExecutionContext())))) { org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(getExecutionContext(), getSucceeded()); } } } }	protected final void execute() { setCommandStatus(CommandStatus.ACTIVE); if ((getCallBack()) != null) { persistCommand(getParameters().getParentCommand(), true); } getReturnValue().setCanDoAction(true); getReturnValue().setIsSyncronious(true); if ((!(hasTaskHandlers())) || ((getExecutionIndex()) == 0)) { org.ovirt.engine.core.bll.job.ExecutionHandler.addStep(getExecutionContext(), StepEnum.EXECUTING, null); } try { handleTransactivity(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(scope, this); } catch (javax.ejb.TransactionRolledbackLocalException e) { log.infoFormat("Transaction was aborted in {0}", this.getClass().getName()); compensate(); } finally { try { if (getCommandShouldBeLogged()) { logRenamedEntity(); logCommand(); } if (getSucceeded()) { startPollingAsyncTasks(); } } finally { if ((!(hasTasks())) && (!(org.ovirt.engine.core.bll.job.ExecutionHandler.checkIfJobHasTasks(getExecutionContext())))) { org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(getExecutionContext(), getSucceeded()); } } } }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.HostNIC model, org.ovirt.engine.api.model.HostNIC transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertNotNull(transform.getNetwork()); assertEquals(model.getNetwork().getName(), transform.getNetwork().getName()); assertNotNull(transform.getIp()); assertEquals(model.getIp().getAddress(), transform.getIp().getAddress()); assertEquals(model.getIp().getNetmask(), transform.getIp().getNetmask()); assertEquals(model.getIp().getGateway(), transform.getIp().getGateway()); assertNotNull(transform.getMac()); assertEquals(model.getMac().getAddress(), transform.getMac().getAddress()); assertNotNull(model.getBonding()); assertEquals(model.getBonding().getOptions().getOptions().size(), transform.getBonding().getOptions().getOptions().size()); for (int i = 0; i < (model.getBonding().getOptions().getOptions().size()); i++) { assertEquals(model.getBonding().getOptions().getOptions().get(i).getName(), transform.getBonding().getOptions().getOptions().get(i).getName()); assertEquals(model.getBonding().getOptions().getOptions().get(i).getValue(), transform.getBonding().getOptions().getOptions().get(i).getValue()); } assertNotNull(model.getCustomProperties()); assertEquals(org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.parse(model.getCustomProperties().getCustomProperty()), org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.parse(transform.getCustomProperties().getCustomProperty())); }	@java.lang.Override protected void verify(org.ovirt.engine.api.model.HostNIC model, org.ovirt.engine.api.model.HostNIC transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertNotNull(transform.getNetwork()); assertEquals(model.getNetwork().getName(), transform.getNetwork().getName()); assertNotNull(transform.getIp()); assertEquals(model.getIp().getAddress(), transform.getIp().getAddress()); assertEquals(model.getIp().getNetmask(), transform.getIp().getNetmask()); assertEquals(model.getIp().getGateway(), transform.getIp().getGateway()); assertNotNull(transform.getMac()); assertEquals(model.getMac().getAddress(), transform.getMac().getAddress()); assertNotNull(model.getBonding()); assertEquals(model.getBonding().getOptions().getOptions().size(), transform.getBonding().getOptions().getOptions().size()); for (int i = 0; i < (model.getBonding().getOptions().getOptions().size()); i++) { assertEquals(model.getBonding().getOptions().getOptions().get(i).getName(), transform.getBonding().getOptions().getOptions().get(i).getName()); assertEquals(model.getBonding().getOptions().getOptions().get(i).getValue(), transform.getBonding().getOptions().getOptions().get(i).getValue()); } assertNotNull(model.getProperties()); assertEquals(org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.toMap(model.getProperties()), org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.toMap(transform.getProperties())); }
@org.junit.Test public void testGetVmDisks() throws java.io.IOException { try { org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument(getXmlOvfData()); org.ovirt.engine.core.utils.OvfUtils.getVmDisks(xmlDocument); } catch (java.io.IOException e) { e.printStackTrace(); } catch (java.lang.Exception e) { e.printStackTrace(); } assertEquals(true, true); }	@org.junit.Test public void testFetchVmDisks() throws java.io.IOException { try { org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument(getXmlOvfData()); java.util.List<org.ovirt.engine.core.compat.Guid> disks = org.ovirt.engine.core.utils.OvfUtils.fetchVmDisks(xmlDocument); assertNotNull("The list of disks should not be null", disks); assertTrue("The list of disks should not be empty", (!(disks.isEmpty()))); } catch (java.lang.Exception e) { e.printStackTrace(); } }
private void attachManagementNetwork() { org.ovirt.engine.core.common.businessentities.network.Network net = findManagementNetwork(org.ovirt.engine.core.bll.AddVdsGroupCommand.getVdsGroup(), getManagementNetworkId()); if (net != null) { org.ovirt.engine.core.dal.dbbroker.DbFacadeLocator.getDbFacade().getNetworkClusterDao().save(createNetworkCluster(net.getId())); } }	private void attachManagementNetwork() { final org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = createManagementNetworkCluster(); networkCluster.setClusterId(org.ovirt.engine.core.bll.AddVdsGroupCommand.getVdsGroupId()); networkClusterDao.save(networkCluster); }
public java.util.List<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice> getStorageDevicesInHost(org.ovirt.engine.core.compat.Guid hostId);	java.util.List<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice> getStorageDevicesInHost(org.ovirt.engine.core.compat.Guid hostId);
@org.junit.Test public void validateFailWithUnsupportedDiskInterface() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId); mockVm(); mockStorageDomain(storageId); mockStoragePoolIsoMap(); mockMaxPciSlots(); when(diskValidator.isReadOnlyPropertyCompatibleWithInterface()).thenReturn(ValidationResult.VALID); when(diskValidator.isDiskInterfaceSupported(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED)); when(diskValidator.isVirtIoScsiValid(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(ValidationResult.VALID); when(command.getDiskValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class))).thenReturn(diskValidator); assertFalse(command.validate()); assertTrue(command.getReturnValue().getValidateMessages().contains(EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED.toString())); }	@org.junit.Test public void validateFailWithUnsupportedDiskInterface() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId); mockVm(); mockStorageDomain(storageId); mockStoragePoolIsoMap(); mockMaxPciSlots(); when(diskValidator.isReadOnlyPropertyCompatibleWithInterface()).thenReturn(ValidationResult.VALID); when(diskValidator.isDiskInterfaceSupported(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED)); when(diskValidator.isVirtIoScsiValid(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(ValidationResult.VALID); when(command.getDiskValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class))).thenReturn(diskValidator); assertFalse(command.validate()); assertTrue(command.getReturnValue().getValidationMessages().contains(EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED.toString())); }
public int getAnonymousHugePages() { return mVdsStatistics.getAnonymousHugePages(); }	public int getAnonymousHugePages() { return vdsStatistics.getAnonymousHugePages(); }
public void setpm_options(java.lang.String value) { mVdsStatic.setPmOptions(value); }	public void setPmOptions(java.lang.String value) { mVdsStatic.setPmOptions(value); }
protected java.lang.Object resolveCreated(org.ovirt.engine.core.common.action.VdcReturnValueBase result, org.ovirt.engine.api.restapi.resource.EntityResolver entityResolver, java.lang.Class<? extends org.ovirt.engine.api.model.BaseResource> suggestedParentType) { try { return entityResolver.resolve(result.getActionReturnValue()); } catch (java.lang.Exception e) { return null; } }	protected java.lang.Object resolveCreated(org.ovirt.engine.core.common.action.VdcReturnValueBase result, org.ovirt.engine.api.restapi.resource.EntityResolver entityResolver, java.lang.Class<? extends org.ovirt.engine.api.model.BaseResource> suggestedParentType) { try { return entityResolver.resolve(((org.ovirt.engine.core.compat.Guid) (result.getActionReturnValue()))); } catch (java.lang.Exception e) { return null; } }
public org.ovirt.engine.core.bll.tasks.SPMAsyncTask concreteCreateTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { return createTask(internalGetTaskType(command), new org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters(asyncTaskCreationInfo, getAsyncTask(taskId, command, asyncTaskCreationInfo, parentCommand)).withEntityInfo(command.getParameters().getEntityInfo())); }	public org.ovirt.engine.core.bll.tasks.SPMAsyncTask concreteCreateTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters p = new org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters(asyncTaskCreationInfo, getAsyncTask(taskId, command, asyncTaskCreationInfo, parentCommand)); p.setEntityInfo(command.getParameters().getEntityInfo()); return createTask(internalGetTaskType(command), p); }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.Quota quota) { if ((quota.getQuotaEnforcementType()) == null) { return getApplicationResources().iconDisable(); } switch (quota.getQuotaEnforcementType()) { case HARD_ENFORCEMENT : return getApplicationResources().iconEnforce(); case SOFT_ENFORCEMENT : return getApplicationResources().iconAudit(); case DISABLED : return getApplicationResources().iconDisable(); default : return getApplicationResources().iconDisable(); } }	@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.Quota quota) { if ((quota.getQuotaEnforcementType()) == null) { return org.ovirt.engine.ui.webadmin.widget.table.column.QuotaDcStatusColumn.resources.iconDisable(); } switch (quota.getQuotaEnforcementType()) { case HARD_ENFORCEMENT : return org.ovirt.engine.ui.webadmin.widget.table.column.QuotaDcStatusColumn.resources.iconEnforce(); case SOFT_ENFORCEMENT : return org.ovirt.engine.ui.webadmin.widget.table.column.QuotaDcStatusColumn.resources.iconAudit(); case DISABLED : return org.ovirt.engine.ui.webadmin.widget.table.column.QuotaDcStatusColumn.resources.iconDisable(); default : return org.ovirt.engine.ui.webadmin.widget.table.column.QuotaDcStatusColumn.resources.iconDisable(); } }
@java.lang.Override public java.lang.String encodedId(org.ovirt.engine.extensions.aaa.builtin.kerberosldap.IdType id) { org.ovirt.engine.core.compat.Guid guid = id.toGuid(); return getNsUniqueIdFromGuidString(guid.toString()); }	@java.lang.Override public java.lang.String encodedId(org.ovirt.engine.core.compat.Guid id) { return getNsUniqueIdFromGuidString(id.toString()); }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Disk o1, org.ovirt.engine.core.common.businessentities.Disk o2) { java.lang.String alias1 = o1.getDiskAlias(); java.lang.String alias2 = o2.getDiskAlias(); if (alias1 == null) { if (alias2 == null) { return 0; } else { return -1; } } if (alias2 == null) { return 1; } return alias1.compareTo(alias2); }	@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Disk o1, org.ovirt.engine.core.common.businessentities.Disk o2) { return o1.getDiskAlias().compareTo(o2.getDiskAlias()); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> getUserRequestForStorageDomainRepoFileList() { return org.ovirt.engine.core.bll.storage.domains.IsoDomainListSyncronizer.getInstance().getUserRequestForStorageDomainRepoFileList(getStorageDomainIdForQuery(), GetImagesListQueryBase.getParameters().getImageType(), GetImagesListQueryBase.getParameters().getForceRefresh()); }	protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> getUserRequestForStorageDomainRepoFileList() { return org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.getInstance().getUserRequestForStorageDomainRepoFileList(getStorageDomainIdForQuery(), GetImagesListQueryBase.getParameters().getImageType(), GetImagesListQueryBase.getParameters().getForceRefresh()); }
public void setserver_SSL_enabled(boolean value) { this.mVdsStatic.setServerSslEnabled(value); }	public void setServerSslEnabled(boolean value) { this.mVdsStatic.setServerSslEnabled(value); }
@java.lang.Override public void execute(int iterationId) { org.ovirt.engine.core.common.businessentities.VDS vds = getVdss().get(iterationId); try { boolean isConnectSucceeded = org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(getStorageDomain().getStorageType()).connectStorageToDomainByVdsId(getStorageDomain(), vds.getId()); if (isConnectSucceeded) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().runVdsCommand(VDSCommandType.ConnectStoragePool, new org.ovirt.engine.core.common.vdscommands.ConnectStoragePoolVDSCommandParameters(vds, getStoragePool())); } else { org.ovirt.engine.core.bll.storage.ConntectVDSToPoolAndDomains.log.errorFormat("Failed to connect host {0} to domain {1}", vds.getName(), getStorageDomain().getStorageName()); } } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.storage.ConntectVDSToPoolAndDomains.log.errorFormat("Failed to connect host {0} to storage pool {1}. Exception: {3}", vds.getName(), getStoragePool().getName(), e); } }	@java.lang.Override public void execute(int iterationId) { org.ovirt.engine.core.common.businessentities.VDS vds = getVdss().get(iterationId); try { boolean isConnectSucceeded = org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(getStorageDomain().getStorageType()).connectStorageToDomainByVdsId(getStorageDomain(), vds.getId()); if (isConnectSucceeded) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().runVdsCommand(VDSCommandType.ConnectStoragePool, new org.ovirt.engine.core.common.vdscommands.ConnectStoragePoolVDSCommandParameters(vds, getStoragePool(), masterStorageDomainId, storagePoolIsoMap)); } else { org.ovirt.engine.core.bll.storage.ConntectVDSToPoolAndDomains.log.errorFormat("Failed to connect host {0} to domain {1}", vds.getName(), getStorageDomain().getStorageName()); } } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.storage.ConntectVDSToPoolAndDomains.log.errorFormat("Failed to connect host {0} to storage pool {1}. Exception: {3}", vds.getName(), getStoragePool().getName(), e); } }
public void OnRemove() { for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.RolesEntity role = ((org.ovirt.engine.core.common.businessentities.RolesEntity) (item)); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.RemoveRole, new org.ovirt.engine.core.common.action.RolesParameterBase(role.getId())); } Cancel(); getSearchCommand().Execute(); }	public void OnRemove() { for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.Role role = ((org.ovirt.engine.core.common.businessentities.Role) (item)); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.RemoveRole, new org.ovirt.engine.core.common.action.RolesParameterBase(role.getId())); } Cancel(); getSearchCommand().Execute(); }
protected org.ovirt.engine.core.common.businessentities.AdGroups getAdGroup(org.ovirt.engine.api.model.Group group) { if ((group.getId()) != null) { return lookupGroupById(asGuid(group.getId())); } java.util.List<org.ovirt.engine.core.common.businessentities.AdGroups> adGroups = asCollection(getEntity(java.util.ArrayList.class, SearchType.AdGroup, getSearchPattern("*", getDomainName(group.getName())))); for (org.ovirt.engine.core.common.businessentities.AdGroups adGroup : adGroups) { if (adGroup.getname().equals(group.getName())) { return adGroup; } } return entityNotFound(); }	protected org.ovirt.engine.core.common.businessentities.LdapGroup getAdGroup(org.ovirt.engine.api.model.Group group) { if ((group.getId()) != null) { return lookupGroupById(asGuid(group.getId())); } java.util.List<org.ovirt.engine.core.common.businessentities.LdapGroup> adGroups = asCollection(getEntity(java.util.ArrayList.class, SearchType.AdGroup, getSearchPattern("*", getDomainName(group.getName())))); for (org.ovirt.engine.core.common.businessentities.LdapGroup adGroup : adGroups) { if (adGroup.getname().equals(group.getName())) { return adGroup; } } return entityNotFound(); }
private java.lang.String replaceLocaleWithUSLocale(java.lang.String originalString, java.util.Locale locale) { return originalString.replaceAll(((("/" + (locale.toLanguageTag().replaceAll("-", "\\\\-"))) + "|/") + (locale.toString())), ("/" + (java.util.Locale.US.toLanguageTag()))); }	private java.lang.String replaceLocaleWithUSLocale(java.lang.String originalString, java.util.Locale locale) { java.lang.String regex = (("/" + (locale.toLanguageTag().replaceAll("-", "\\\\-"))) + "|/") + (locale.toString()); return originalString.replaceAll(regex, ("/" + (java.util.Locale.US.toLanguageTag()))); }
private void initNetworkModels() { java.util.Map<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> networkModels = new java.util.HashMap<>(); networkLabelMap = new java.util.HashMap(); for (org.ovirt.engine.core.common.businessentities.network.Network network : allNetworks) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel(network, this); networkModels.put(network.getName(), networkModel); if (!(network.isExternal())) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkLabelModel labelModel = networkLabelMap.get(network.getLabel()); if (labelModel == null) { labelModel = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkLabelModel(network.getLabel(), this); networkLabelMap.put(network.getLabel(), labelModel); } labelModel.getNetworks().add(networkModel); } } setNetworks(networkModels); }	private void initNetworkModels() { java.util.Map<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> networkModels = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.network.Network network : allNetworks) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel(network, this); networkModels.put(network.getName(), networkModel); if (networkModel.isManagement()) { managementNetworkModel = networkModel; } if (!(network.isExternal())) { java.lang.String label = network.getLabel(); if (label != null) { networkLabelMap.get(label).getNetworks().add(networkModel); } } } setNetworks(networkModels); }
@java.lang.Override public java.lang.Object mapFromContext(java.lang.Object ctx) { if (ctx == null) { return null; } org.springframework.ldap.core.DirContextAdapter searchResult = ((org.springframework.ldap.core.DirContextAdapter) (ctx)); javax.naming.directory.Attributes attributes = searchResult.getAttributes(); if (attributes == null) { return null; } if ((attributes.get(org.ovirt.engine.extensions.aaa.builtin.kerberosldap.OpenLdapGroupAttributes.entryuuid.name())) == null) { return null; } try { java.util.List<java.lang.String> memberOf = new java.util.ArrayList<java.lang.String>(); javax.naming.directory.Attribute att = attributes.get(org.ovirt.engine.extensions.aaa.builtin.kerberosldap.OpenLdapGroupAttributes.memberof.name()); if (att != null) { javax.naming.NamingEnumeration<?> groupsNames = att.getAll(); while (groupsNames.hasMoreElements()) { memberOf.add(((java.lang.String) (groupsNames.nextElement()))); } } java.lang.String objectGuid = ((java.lang.String) (attributes.get(org.ovirt.engine.extensions.aaa.builtin.kerberosldap.OpenLdapGroupAttributes.entryuuid.name()).get(0))); java.lang.String distinguishedName = searchResult.getNameInNamespace(); distinguishedName = org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapBrokerUtils.hadleNameEscaping(distinguishedName); org.ovirt.engine.extensions.aaa.builtin.kerberosldap.GroupSearchResult groupSearchResult = new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.GroupSearchResult(new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.IdType(org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(objectGuid)).toString(), memberOf, distinguishedName); return groupSearchResult; } catch (java.lang.Exception ex) { org.ovirt.engine.extensions.aaa.builtin.kerberosldap.OpenLdapGroupContextMapper.log.error("Failed populating group", ex); return null; } }	@java.lang.Override public java.lang.Object mapFromContext(java.lang.Object ctx) { if (ctx == null) { return null; } org.springframework.ldap.core.DirContextAdapter searchResult = ((org.springframework.ldap.core.DirContextAdapter) (ctx)); javax.naming.directory.Attributes attributes = searchResult.getAttributes(); if (attributes == null) { return null; } if ((attributes.get(org.ovirt.engine.extensions.aaa.builtin.kerberosldap.OpenLdapGroupAttributes.entryuuid.name())) == null) { return null; } try { java.util.List<java.lang.String> memberOf = new java.util.ArrayList<java.lang.String>(); javax.naming.directory.Attribute att = attributes.get(org.ovirt.engine.extensions.aaa.builtin.kerberosldap.OpenLdapGroupAttributes.memberof.name()); if (att != null) { javax.naming.NamingEnumeration<?> groupsNames = att.getAll(); while (groupsNames.hasMoreElements()) { memberOf.add(((java.lang.String) (groupsNames.nextElement()))); } } java.lang.String objectGuid = ((java.lang.String) (attributes.get(org.ovirt.engine.extensions.aaa.builtin.kerberosldap.OpenLdapGroupAttributes.entryuuid.name()).get(0))); java.lang.String distinguishedName = searchResult.getNameInNamespace(); distinguishedName = org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapBrokerUtils.hadleNameEscaping(distinguishedName); org.ovirt.engine.extensions.aaa.builtin.kerberosldap.GroupSearchResult groupSearchResult = new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.GroupSearchResult(org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(objectGuid).toString(), memberOf, distinguishedName); return groupSearchResult; } catch (java.lang.Exception ex) { org.ovirt.engine.extensions.aaa.builtin.kerberosldap.OpenLdapGroupContextMapper.log.error("Failed populating group", ex); return null; } }
@java.lang.Override protected boolean canDoAction() { java.lang.String sshPublicKey = org.ovirt.engine.core.bll.UserProfilesOperationCommandBase.getParameters().getUserProfile().getSshPublicKey(); if ((sshPublicKey == null) || (sshPublicKey.isEmpty())) { return true; } if (!(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isPublicKeyValid(sshPublicKey))) { return failCanDoAction(EngineMessages.ACTION_TYPE_FAILED_INVALID_PUBLIC_SSH_KEY); } return true; }	@java.lang.Override protected boolean canDoAction() { java.lang.String sshPublicKey = org.ovirt.engine.core.bll.UserProfilesOperationCommandBase.getParameters().getUserProfile().getSshPublicKey(); if ((sshPublicKey == null) || (sshPublicKey.isEmpty())) { return true; } if (!(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isPublicKeyValid(sshPublicKey))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_INVALID_PUBLIC_SSH_KEY); } return true; }
private void cleanZombieTasks() { long maxTime = org.ovirt.engine.core.compat.DateTime.getNow().AddMinutes(((-1) * (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AsyncTaskZombieTaskLifeInMinutes)))).getTime(); for (org.ovirt.engine.core.bll.SPMAsyncTask task : _tasks.values()) { if ((task.getParameters().getDbAsyncTask().getStartTime().getTime()) < maxTime) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("CommandName", task.getParameters().getDbAsyncTask().getaction_type().toString()); logable.addCustomValue("Date", task.getParameters().getDbAsyncTask().getStartTime().toString()); if (((task.getLastTaskStatus().getStatus()) != (org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.finished)) && ((task.getLastTaskStatus().getStatus()) != (org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.unknown))) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.TASK_STOPPING_ASYNC_TASK); org.ovirt.engine.core.bll.AsyncTaskManager.log.infoFormat("Cleaning zombie tasks: Stopping async task {0} that started at {1}", task.getParameters().getDbAsyncTask().getaction_type(), task.getParameters().getDbAsyncTask().getStartTime()); task.stopTask(true); } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.TASK_CLEARING_ASYNC_TASK); org.ovirt.engine.core.bll.AsyncTaskManager.log.infoFormat("Cleaning zombie tasks: Clearing async task {0} that started at {1}", task.getParameters().getDbAsyncTask().getaction_type(), task.getParameters().getDbAsyncTask().getStartTime()); task.clearAsyncTask(true); } } } }	private void cleanZombieTasks() { long maxTime = org.ovirt.engine.core.compat.DateTime.getNow().addMinutes(((-1) * (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AsyncTaskZombieTaskLifeInMinutes)))).getTime(); for (org.ovirt.engine.core.bll.SPMAsyncTask task : _tasks.values()) { if ((task.getParameters().getDbAsyncTask().getStartTime().getTime()) < maxTime) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("CommandName", task.getParameters().getDbAsyncTask().getaction_type().toString()); logable.addCustomValue("Date", task.getParameters().getDbAsyncTask().getStartTime().toString()); if (((task.getLastTaskStatus().getStatus()) != (org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.finished)) && ((task.getLastTaskStatus().getStatus()) != (org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.unknown))) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.TASK_STOPPING_ASYNC_TASK); org.ovirt.engine.core.bll.AsyncTaskManager.log.infoFormat("Cleaning zombie tasks: Stopping async task {0} that started at {1}", task.getParameters().getDbAsyncTask().getaction_type(), task.getParameters().getDbAsyncTask().getStartTime()); task.stopTask(true); } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.TASK_CLEARING_ASYNC_TASK); org.ovirt.engine.core.bll.AsyncTaskManager.log.infoFormat("Cleaning zombie tasks: Clearing async task {0} that started at {1}", task.getParameters().getDbAsyncTask().getaction_type(), task.getParameters().getDbAsyncTask().getStartTime()); task.clearAsyncTask(true); } } } }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getVdsGroup(); if (cluster == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID); return false; } if (!(cluster.supportsGlusterService())) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_DOES_NOT_SUPPORT_GLUSTER); return false; } if (volume.getVolumeType().isDispersedType()) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CREATION_OF_DISPERSE_VOLUME_NOT_SUPPORTED); return false; } if (volumeNameExists(volume.getName())) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NAME_ALREADY_EXISTS); addCanDoActionMessageVariable("volumeName", volume.getName()); return false; } if (!(validate(createVolumeValidator().isForceCreateVolumeAllowed(getVdsGroup().getCompatibilityVersion(), getParameters().isForce())))) { return false; } return validateBricks(volume); }	@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getVdsGroup(); if (cluster == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID); return false; } if (!(cluster.supportsGlusterService())) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_DOES_NOT_SUPPORT_GLUSTER); return false; } if (volume.getVolumeType().isDispersedType()) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CREATION_OF_DISPERSE_VOLUME_NOT_SUPPORTED); return false; } if (volume.getVolumeType().isDistributedDispersedType()) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CREATION_OF_DISTRIBUTED_DISPERSE_VOLUME_NOT_SUPPORTED); return false; } if (volumeNameExists(volume.getName())) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NAME_ALREADY_EXISTS); addCanDoActionMessageVariable("volumeName", volume.getName()); return false; } if (!(validate(createVolumeValidator().isForceCreateVolumeAllowed(getVdsGroup().getCompatibilityVersion(), getParameters().isForce())))) { return false; } return validateBricks(volume); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { if (((!(org.ovirt.engine.core.bll.AddDiskCommand.isInternalExecution())) && ((org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getVmId()) != null)) && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getVmId())))) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED)); } return null; }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { if ((!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getVmId()))) && (!(org.ovirt.engine.core.bll.AddDiskCommand.isInternalExecution()))) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED)); } return null; }
private void UpdateProperties() { org.ovirt.engine.core.common.businessentities.NetworkView extendedNetwork = ((org.ovirt.engine.core.common.businessentities.NetworkView) (getEntity())); setName(extendedNetwork.getNetwork().getName()); setId(extendedNetwork.getNetwork().getId()); setDescription(extendedNetwork.getNetwork().getdescription()); setRole(extendedNetwork.getNetwork().isVmNetwork()); setVlan(extendedNetwork.getNetwork().getvlan_id()); if ((extendedNetwork.getNetwork().getMtu()) == 0) { setMtu(null); } else { setMtu(extendedNetwork.getNetwork().getMtu()); } }	private void UpdateProperties() { org.ovirt.engine.core.common.businessentities.NetworkView extendedNetwork = ((org.ovirt.engine.core.common.businessentities.NetworkView) (getEntity())); setName(extendedNetwork.getNetwork().getName()); setId(extendedNetwork.getNetwork().getId()); setDescription(extendedNetwork.getNetwork().getdescription()); setRole((extendedNetwork.getNetwork().isVmNetwork() ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().vmNetworkRole() : "")); setVlan(extendedNetwork.getNetwork().getvlan_id()); if ((extendedNetwork.getNetwork().getMtu()) == 0) { setMtu(null); } else { setMtu(extendedNetwork.getNetwork().getMtu()); } }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("String was expected") java.lang.String StringArgExpected();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("To enable NUMA set migration mode to non-migratable, and pin VM to host that supports NUMA topologhy") java.lang.String numaDisabledInfoMessage();
java.lang.String GlusterDeleteWebhookException();	java.lang.String GlusterWebhookDeleteException();
private boolean validateAndCompleteParameters(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.AuditLogType, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase> auditLogPair) throws org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException { boolean hardEnforcement = (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType()); for (org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter param : parameters.getParameters()) { boolean validQuotaId = checkAndFetchQuota(parameters, param, auditLogPair); boolean validCluster = true; boolean validStorageDomain = true; if (validQuotaId) { if (param instanceof org.ovirt.engine.core.bll.quota.QuotaClusterConsumptionParameter) { validCluster = checkClusterMatchQuota(parameters, ((org.ovirt.engine.core.bll.quota.QuotaClusterConsumptionParameter) (param))); } if (param instanceof org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) { validStorageDomain = checkStoragePoolMatchQuota(parameters, ((org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) (param))); } } if (((!validQuotaId) || (!validCluster)) || (!validStorageDomain)) { if (hardEnforcement) { return false; } else { parameters.getValidationMessages().clear(); } } } parameters.getParameters().removeAll(corruptedParameters); corruptedParameters.clear(); return true; }	private boolean validateAndCompleteParameters(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.AuditLogType, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase> auditLogPair) throws org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException { if ((org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType())) { return true; } boolean hardEnforcement = (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType()); for (org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter param : parameters.getParameters()) { boolean validQuotaId = checkAndFetchQuota(parameters, param, auditLogPair); boolean validCluster = true; boolean validStorageDomain = true; if (validQuotaId) { if (param instanceof org.ovirt.engine.core.bll.quota.QuotaClusterConsumptionParameter) { validCluster = checkClusterMatchQuota(parameters, param); } if (param instanceof org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) { validStorageDomain = checkStoragePoolMatchQuota(parameters, param); } } if (((!validQuotaId) || (!validCluster)) || (!validStorageDomain)) { if (hardEnforcement) { return false; } else { parameters.getValidationMessages().clear(); if ((org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType())) { auditLogPair.setFirst(null); } } } } parameters.getParameters().removeAll(corruptedParameters); corruptedParameters.clear(); return true; }
public org.ovirt.engine.core.compat.Version getClusterCompatibilityVersion() { return clusterCompatibilityVersion; }	public org.ovirt.engine.core.compat.Version getCompatibilityVersion() { return compatibilityVersion; }
private boolean validateManagementNetwork() { final org.ovirt.engine.core.common.businessentities.network.Network managementNetwork; if ((getManagementNetworkId()) == null) { managementNetwork = defaultManagementNetworkFinder.findDefaultManagementNetwork(org.ovirt.engine.core.bll.AddVdsGroupCommand.getVdsGroup().getStoragePoolId()); if (managementNetwork == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } } else { managementNetwork = getManagementNetworkById(getManagementNetworkId()); if (managementNetwork == null) { addCanDoActionMessage(VdcBllMessages.NETWORK_NOT_EXISTS); return false; } } final org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator networkClusterValidator = createNetworkClusterValidator(); return ((validate(networkClusterValidator.networkBelongsToDataCenter(org.ovirt.engine.core.bll.AddVdsGroupCommand.getVdsGroup(), managementNetwork))) && (validate(networkClusterValidator.managementNetworkAttachment(managementNetwork)))) && (validate(networkClusterValidator.migrationPropertySupported())); }	private boolean validateManagementNetwork() { if ((getManagementNetworkId()) == null) { return findDefaultManagementNetwork(); } else { return validateInputManagementNetwork(); } }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(java.lang.Object object) { return ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).isExistsInSystem() ? org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmFromExportDomainPopupView.resources.alertImage() : null; }	@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(java.lang.Object object) { org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData importVmData = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)); if (((importVmData.getError()) != null) || (importVmData.isNameExistsInTheSystem())) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmFromExportDomainPopupView.resources.errorImage(); } if ((importVmData.getWarning()) != null) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmFromExportDomainPopupView.resources.alertImage(); } return null; }
@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveHasNetworkAssignedWhichIsNotRemovedAsAPartOfRequest() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond(); org.ovirt.engine.core.common.businessentities.network.Network networkBeingRemoved = new org.ovirt.engine.core.common.businessentities.network.Network(); networkBeingRemoved.setName("assignedNetwork"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveA = createBondSlave(bond, "slaveA"); slaveA.setNetworkName("assignedNetwork"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveB = createBondSlave(bond, "slaveB"); bond.setSlaves(java.util.Arrays.asList(slaveA.getName(), slaveB.getName())); org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(host.getId()); params.setBonds(java.util.Collections.singletonList(bond)); doTestValidateModifiedBondSlaves(params, java.util.Arrays.asList(bond, slaveA, slaveB), java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>emptyList(), java.util.Collections.singletonList(networkBeingRemoved), ValidationResult.VALID, ValidationResult.VALID, new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE, HostSetupNetworksValidator.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE_ENTITY, slaveA.getName())); }	@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveHasNetworkAssignedWhichIsNotRemovedAsAPartOfRequest() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond(); org.ovirt.engine.core.common.businessentities.network.Network networkBeingRemoved = new org.ovirt.engine.core.common.businessentities.network.Network(); networkBeingRemoved.setName("assignedNetwork"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveA = createBondSlave(bond, "slaveA"); slaveA.setNetworkName("assignedNetwork"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveB = createBondSlave(bond, "slaveB"); bond.setSlaves(java.util.Arrays.asList(slaveA.getName(), slaveB.getName())); org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(host.getId()); params.setBonds(java.util.Collections.singletonList(bond)); doTestValidateModifiedBondSlaves(params, java.util.Arrays.asList(bond, slaveA, slaveB), java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>emptyList(), java.util.Collections.singletonList(networkBeingRemoved), ValidationResult.VALID, ValidationResult.VALID, new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostSetupNetworksValidator.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE_ENTITY, slaveA.getName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostSetupNetworksValidator.VAR_NETWORK_NAME, networkBeingRemoved.getName()))); }
protected void postInitStorageDomains() { boolean showWarning = false; for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel disk : getDisks()) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (disk.getDisk())); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> diskStorageIds = diskImage.getstorage_ids(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage_domains> sourceStorageDomains = org.ovirt.engine.ui.uicommonweb.Linq.getStorageDomainsByIds(diskStorageIds, getActiveStorageDomains()); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage_domains> destStorageDomains = org.ovirt.engine.ui.uicommonweb.Linq.Except(getActiveStorageDomains(), sourceStorageDomains); destStorageDomains = filterStoragesByDatacenterId(destStorageDomains, diskImage.getstorage_pool_id()); boolean isDiskBasedOnTemplate = !(diskImage.getParentId().equals(NGuid.Empty)); if (isDiskBasedOnTemplate) { destStorageDomains = org.ovirt.engine.ui.uicommonweb.Linq.Except(destStorageDomains, getMissingStorages(destStorageDomains, disk)); } if ((sourceStorageDomains.isEmpty()) || (destStorageDomains.isEmpty())) { showWarning = true; addProhibitionReasons(disk, isDiskBasedOnTemplate, sourceStorageDomains.isEmpty(), destStorageDomains.isEmpty()); } java.util.Collections.sort(destStorageDomains, new org.ovirt.engine.ui.uicommonweb.Linq.StorageDomainByNameComparer()); java.util.Collections.sort(sourceStorageDomains, new org.ovirt.engine.ui.uicommonweb.Linq.StorageDomainByNameComparer()); disk.getStorageDomain().setItems(destStorageDomains); disk.getSourceStorageDomain().setItems(sourceStorageDomains); addSourceStorageDomainName(disk, sourceStorageDomains); } sortDisks(); postCopyOrMoveInit(showWarning); }	protected void postInitStorageDomains() { boolean showWarning = false; for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel disk : getDisks()) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (disk.getDisk())); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> diskStorageIds = diskImage.getstorage_ids(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage_domains> sourceStorageDomains = org.ovirt.engine.ui.uicommonweb.Linq.getStorageDomainsByIds(diskStorageIds, getActiveStorageDomains()); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage_domains> destStorageDomains = org.ovirt.engine.ui.uicommonweb.Linq.Except(getActiveStorageDomains(), sourceStorageDomains); destStorageDomains = filterStoragesByDatacenterId(destStorageDomains, diskImage.getstorage_pool_id()); boolean isDiskBasedOnTemplate = !(diskImage.getParentId().equals(NGuid.Empty)); if (isDiskBasedOnTemplate) { destStorageDomains = org.ovirt.engine.ui.uicommonweb.Linq.Except(destStorageDomains, getMissingStorages(destStorageDomains, disk)); } if ((sourceStorageDomains.isEmpty()) || (destStorageDomains.isEmpty())) { showWarning = true; updateChangeability(disk, isDiskBasedOnTemplate, sourceStorageDomains.isEmpty(), destStorageDomains.isEmpty()); } java.util.Collections.sort(destStorageDomains, new org.ovirt.engine.ui.uicommonweb.Linq.StorageDomainByNameComparer()); java.util.Collections.sort(sourceStorageDomains, new org.ovirt.engine.ui.uicommonweb.Linq.StorageDomainByNameComparer()); disk.getStorageDomain().setItems(destStorageDomains); disk.getSourceStorageDomain().setItems(sourceStorageDomains); addSourceStorageDomainName(disk, sourceStorageDomains); } sortDisks(); postCopyOrMoveInit(showWarning); }
private static void addQoSData(java.util.Map<java.lang.String, java.lang.Object> specParams, java.lang.String containerName, int average, int peak, int burst) { if (average > 0) { java.util.Map<java.lang.String, java.lang.String> qosData = new java.util.HashMap<>(); qosData.put(VdsProperties.QOS_AVERAGE, java.lang.String.valueOf((average * (org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.TO_KILOBITS)))); qosData.put(VdsProperties.QOS_PEAK, java.lang.String.valueOf((peak * (org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.TO_KILOBITS)))); qosData.put(VdsProperties.QOS_BURST, java.lang.String.valueOf((burst * (org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.TO_KILOBITS)))); specParams.put(containerName, qosData); } }	private static void addQosData(java.util.Map<java.lang.String, java.lang.Object> specParams, java.lang.String containerName, int average, int peak, int burst) { if (average > 0) { java.util.Map<java.lang.String, java.lang.String> qosData = new java.util.HashMap<>(); qosData.put(VdsProperties.QOS_AVERAGE, java.lang.String.valueOf((average * (org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.TO_KILOBITS)))); qosData.put(VdsProperties.QOS_PEAK, java.lang.String.valueOf((peak * (org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.TO_KILOBITS)))); qosData.put(VdsProperties.QOS_BURST, java.lang.String.valueOf((burst * (org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.TO_KILOBITS)))); specParams.put(containerName, qosData); } }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getCustomValues() { int noOfBricks = 0; if ((getParameters().getBricks()) != null) { noOfBricks = getParameters().getBricks().size(); } addCustomValue(GlusterConstants.NO_OF_BRICKS, java.lang.String.valueOf(noOfBricks)); return super.getCustomValues(); }	private void addGlusterVolumeBricks(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksList, int replicaCount, int stripeCount) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.AddBricksToGlusterVolume, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeBricksActionVDSParameters(upServer.getId(), getGlusterVolumeName(), bricksList, replicaCount, stripeCount)); setSucceeded(returnValue.getSucceeded()); if (getSucceeded()) { addCustomValue(GlusterConstants.NO_OF_BRICKS, java.lang.String.valueOf(bricksList.size())); addGlusterVolumeBricksInDb(bricksList, replicaCount, stripeCount); logAuditMessages(bricksList); getReturnValue().setActionReturnValue(getBrickIds(bricksList)); } else { handleVdsError(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, returnValue.getVdsError().getMessage()); return; } }
public void onKernelCmdlineResetButton() { setKernelCmdlineParsable(true); kernelCmdlineListener.setEnabled(false); getKernelCmdline().setEntity(""); kernelCmdlineListener.setEnabled(true); resetKernelCmdlineCheckboxes(); }	public void resetKernelCmdline() { setKernelCmdlineParsable(true); kernelCmdlineListener.whilePaused(new java.lang.Runnable() { @java.lang.Override public void run() { getKernelCmdline().setEntity(""); } }); resetKernelCmdlineCheckboxes(); }
public org.ovirt.engine.core.bll.ValidationResult nameNotUsed() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED).when(((hostDao.getByName(host.getName())) != null)); }	public org.ovirt.engine.core.bll.ValidationResult nameNotUsed() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_NAME_ALREADY_USED).when(((hostDao.getByName(host.getName())) != null)); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Running") java.lang.String runningVm();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Running") java.lang.String runningVm();
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.OperationCadidateEventArgs evtArgs = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.OperationCadidateEventArgs) (args)); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation candidate = evtArgs.getCandidate(); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1 = evtArgs.getOp1(); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2 = evtArgs.getOp2(); if (evtArgs.isDryRun()) { return; } if (candidate == null) { setErrorStatus(constants.noValidActionSetupNetwork()); } else { if (candidate.isErroneousOperation()) { setErrorStatus(candidate.getMessage(op1, op2)); } else { if (candidate.isDisplayNetworkAffected(op1, op2)) { setWarningStatus(applicationMessages.moveDisplayNetworkWarning(candidate.getMessage(op1, op2))); } else { setValidStatus(candidate.getMessage(op1, op2)); } } } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.OperationCadidateEventArgs evtArgs = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.OperationCadidateEventArgs) (args)); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation candidate = evtArgs.getCandidate(); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1 = evtArgs.getOp1(); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2 = evtArgs.getOp2(); if (candidate == null) { setErrorStatus(constants.noValidActionSetupNetwork()); } else { if (candidate.isErroneousOperation()) { setErrorStatus(candidate.getMessage(op1, op2)); } else { if (candidate.isDisplayNetworkAffected(op1, op2)) { setWarningStatus(applicationMessages.moveDisplayNetworkWarning(candidate.getMessage(op1, op2))); } else { setValidStatus(candidate.getMessage(op1, op2)); } } } }
@java.lang.Override protected boolean validate() { boolean returnValue = ((super.validate()) && (org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.checkStorageDomain())) && (((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)) || (checkStorageDomainStatusNotEqual(StorageDomainStatus.Active))); if ((returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master))) && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStoragePool()) != null)) { if ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.electNewMaster()) == null) { returnValue = false; addValidateMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN); } else if (!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.initializeVds())) { returnValue = false; addValidateMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN_HOST_NOT_ACTIVE); } } if (returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLANCE))) { addValidateMessage(EngineMessage.ERROR_CANNOT_MANAGE_STORAGE_DOMAIN); returnValue = false; } return returnValue; }	@java.lang.Override protected boolean validate() { boolean returnValue = ((super.validate()) && (org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.checkStorageDomain())) && (((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)) || (checkStorageDomainStatusNotEqual(StorageDomainStatus.Active))); if ((returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master))) && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStoragePool()) != null)) { if ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.electNewMaster()) == null) { returnValue = false; addValidationMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN); } else if (!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.initializeVds())) { returnValue = false; addValidationMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN_HOST_NOT_ACTIVE); } } if (returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLANCE))) { addValidationMessage(EngineMessage.ERROR_CANNOT_MANAGE_STORAGE_DOMAIN); returnValue = false; } return returnValue; }
public static final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.Disk> getInterfaceColumn(java.lang.String sortBy) { org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.Disk> column = new org.ovirt.engine.ui.common.widget.table.column.AbstractEnumColumn<org.ovirt.engine.core.common.businessentities.Disk, org.ovirt.engine.core.common.businessentities.DiskInterface>() { @java.lang.Override protected org.ovirt.engine.core.common.businessentities.DiskInterface getRawValue(org.ovirt.engine.core.common.businessentities.Disk object) { return object.getDiskInterface(); } @java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.Disk object) { return null; } }; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable(column, sortBy); }	public static final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk> getInterfaceColumn(java.lang.String sortBy) { org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk> column = new org.ovirt.engine.ui.common.widget.table.column.AbstractEnumColumn<org.ovirt.engine.core.common.businessentities.storage.Disk, org.ovirt.engine.core.common.businessentities.storage.DiskInterface>() { @java.lang.Override protected org.ovirt.engine.core.common.businessentities.storage.DiskInterface getRawValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) { return object.getDiskInterface(); } }; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable(column, sortBy); }
@org.junit.Test public void canDoActionFailsForGlusterServerWhenNoUpServer() throws java.lang.Exception { setupGlusterMock(true, null, false); assertFalse(commandMock.canDoAction()); assertTrue(commandMock.getReturnValue().getCanDoActionMessages().contains(EngineMessages.ACTION_TYPE_FAILED_NO_GLUSTER_HOST_TO_PEER_PROBE.toString())); }	@org.junit.Test public void canDoActionFailsForGlusterServerWhenNoUpServer() throws java.lang.Exception { setupGlusterMock(true, null, false); assertFalse(commandMock.canDoAction()); assertTrue(commandMock.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_NO_GLUSTER_HOST_TO_PEER_PROBE.toString())); }
@java.lang.Override public void updateVolumeCapacityInfo(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSizeInfo volumeCapacityInfo) { getCallsHandler().executeModification("UpdateGlusterVolumeCapacityInfo", getCustomMapSqlParameterSource().addValue("id", volumeCapacityInfo.getVolumeId()).addValue("total_space", volumeCapacityInfo.getTotalSize()).addValue("used_space", volumeCapacityInfo.getUsedSize()).addValue("free_space", volumeCapacityInfo.getFreeSize())); }	@java.lang.Override public void updateVolumeCapacityInfo(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSizeInfo volumeCapacityInfo) { getCallsHandler().executeModification("UpdateGlusterVolumeDetails", createCapacityInfoParas(volumeCapacityInfo)); }
public void setAnonymousHugePages(int value) { mVdsStatistics.setAnonymousHugePages(value); }	public void setAnonymousHugePages(int value) { vdsStatistics.setAnonymousHugePages(value); }
public void setLock(org.ovirt.engine.core.common.locks.Lock lock) { this.lock = lock; }	public void setLockInfo(org.ovirt.engine.core.common.locks.LockInfo lockInfo) { this.lockInfo = lockInfo; }
public void updateImageSize(org.ovirt.engine.core.compat.Guid id, long size, java.util.Date lastModified);	public void updateImageSize(org.ovirt.engine.core.compat.Guid id, long size);
public static org.ovirt.engine.api.model.ResumeBehavior mapResumeBehavior(org.ovirt.engine.core.common.businessentities.ResumeBehavior resumeBehavior) { if (resumeBehavior == null) { return null; } switch (resumeBehavior) { case AUTO_RESUME : return org.ovirt.engine.api.model.ResumeBehavior.AUTO_RESUME; case LEAVE_PAUSED : return org.ovirt.engine.api.model.ResumeBehavior.LEAVE_PAUSED; case KILL : return org.ovirt.engine.api.model.ResumeBehavior.KILL; default : throw new java.lang.IllegalArgumentException((("Unknown resume behavior \"" + resumeBehavior) + "\"")); } }	public static org.ovirt.engine.api.model.VmStorageErrorResumeBehaviour mapResumeBehavior(org.ovirt.engine.core.common.businessentities.VmResumeBehavior resumeBehavior) { if (resumeBehavior == null) { return null; } switch (resumeBehavior) { case AUTO_RESUME : return org.ovirt.engine.api.model.VmStorageErrorResumeBehaviour.AUTO_RESUME; case LEAVE_PAUSED : return org.ovirt.engine.api.model.VmStorageErrorResumeBehaviour.LEAVE_PAUSED; case KILL : return org.ovirt.engine.api.model.VmStorageErrorResumeBehaviour.KILL; default : throw new java.lang.IllegalArgumentException((("Unknown resume behavior \"" + resumeBehavior) + "\"")); } }
public static boolean CheckImageConfiguration(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain, org.ovirt.engine.core.common.businessentities.DiskImageBase diskInfo, java.util.List<java.lang.String> messages) { boolean result = true; if (((((diskInfo.getVolumeType()) == (org.ovirt.engine.core.common.businessentities.VolumeType.Preallocated)) && ((diskInfo.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.VolumeFormat.COW))) || ((((storageDomain.getstorage_type()) == (org.ovirt.engine.core.common.businessentities.StorageType.FCP)) || ((storageDomain.getstorage_type()) == (org.ovirt.engine.core.common.businessentities.StorageType.ISCSI))) && (((diskInfo.getVolumeType()) == (org.ovirt.engine.core.common.businessentities.VolumeType.Sparse)) && ((diskInfo.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.VolumeFormat.RAW))))) || (((diskInfo.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.VolumeFormat.Unassigned)) || ((diskInfo.getVolumeType()) == (org.ovirt.engine.core.common.businessentities.VolumeType.Unassigned)))) { result = false; messages.add(VdcBllMessages.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED.toString()); } return result; }	public static boolean CheckImageConfiguration(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain, org.ovirt.engine.core.common.businessentities.DiskImageBase diskInfo, java.util.List<java.lang.String> messages) { boolean result = true; if (((((diskInfo.getVolumeType()) == (org.ovirt.engine.core.common.businessentities.VolumeType.Preallocated)) && ((diskInfo.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.VolumeFormat.COW))) || ((((storageDomain.getStorageType()) == (org.ovirt.engine.core.common.businessentities.StorageType.FCP)) || ((storageDomain.getStorageType()) == (org.ovirt.engine.core.common.businessentities.StorageType.ISCSI))) && (((diskInfo.getVolumeType()) == (org.ovirt.engine.core.common.businessentities.VolumeType.Sparse)) && ((diskInfo.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.VolumeFormat.RAW))))) || (((diskInfo.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.VolumeFormat.Unassigned)) || ((diskInfo.getVolumeType()) == (org.ovirt.engine.core.common.businessentities.VolumeType.Unassigned)))) { result = false; messages.add(VdcBllMessages.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED.toString()); } return result; }
@java.lang.Override public void endSuccessfully() { setQcowCompatForQcowImage(); if (org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImportAsTemplate()) { org.ovirt.engine.core.compat.Guid newTemplateId = createTemplate(); if (newTemplateId != null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.setSucceeded(true); }	@java.lang.Override public void endSuccessfully() { super.endSuccessfully(); setQcowCompatForQcowImage(); if (org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImportAsTemplate()) { org.ovirt.engine.core.compat.Guid newTemplateId = createTemplate(); if (newTemplateId != null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.setSucceeded(true); }
@java.lang.Override protected void initSelectedType() { getNicType().setSelectedItem(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetDefaultNicType()); }	@java.lang.Override protected void initSelectedType() { getNicType().setSelectedItem(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultNicType()); }
@java.lang.Override public void onSuccess(java.lang.Object model1, java.lang.Object result1) { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>) (result1)); managementNetwork = org.ovirt.engine.ui.uicommonweb.Linq.findManagentNetwork(clusterNetworks); profilesQuery.setModel(clusterNetworks); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVnicProfilesByDcId(profilesQuery, dcId); }	@java.lang.Override public void onSuccess(java.lang.Object model1, java.lang.Object result1) { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>) (result1)); managementNetworkName = org.ovirt.engine.ui.uicommonweb.Linq.findManagementNetwork(clusterNetworks).getName(); profilesQuery.setModel(clusterNetworks); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVnicProfilesByDcId(profilesQuery, dcId); }
public void setData(org.ovirt.engine.core.common.utils.ParametersMap data) { this.data = data; }	public void setData(java.util.Map<java.lang.String, java.io.Serializable> data) { this.data = data; }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.Disk object) { return (object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.LUN) ? org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.resources.externalDiskIcon() : null; }	@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) { return (object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN) ? org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.resources.externalDiskIcon() : null; }
private boolean validRemovedBonds(org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Bond> removedBonds) { java.util.Set<java.lang.String> requiredNicsNames = getRemovedBondsUsedByNetworks(removedBonds); boolean passed = true; for (org.ovirt.engine.core.common.businessentities.network.Bond removedBond : params.getRemovedBonds()) { java.lang.String bondName = removedBond.getName(); if (bondName == null) { addViolation(VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST, null); passed = false; continue; } org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingBond = existingIfaces.get(bondName); if (validateAndAddViolation(new org.ovirt.engine.core.bll.validator.HostInterfaceValidator(existingBond).interfaceIsBond(), bondName)) { passed = false; continue; } if (requiredNicsNames.contains(bondName)) { addViolation(VdcBllMessages.BOND_USED_BY_NETWORK_ATTACHMENTS, bondName); passed = false; continue; } } return passed; }	private org.ovirt.engine.core.bll.ValidationResult attachmentsDontReferenceSameNetworkDuplicately(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachments) { return new org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator(attachments, clusterNetworks).verifyUserAttachmentsDoesNotReferenceSameNetworkDuplicately(); }
@java.lang.Override public void dispatchEvent(org.ovirt.engine.core.notifier.filter.Event event, java.lang.String address) { sendQueue.add(new org.ovirt.engine.core.notifier.transport.smtp.Smtp.DispatchAttempt(event, address)); }	@java.lang.Override public void dispatchEvent(org.ovirt.engine.core.notifier.filter.AuditLogEvent event, java.lang.String address) { if (org.apache.commons.lang.StringUtils.isEmpty(address)) { org.ovirt.engine.core.notifier.transport.smtp.Smtp.log.error(("Address is empty, cannot distribute message." + (event.getName()))); } else { sendQueue.add(new org.ovirt.engine.core.notifier.transport.smtp.Smtp.DispatchAttempt(event, address)); } }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getDisabledHtml() { return !(showTitle) ? disabledImage : !(imageAfterTitle) ? org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.TEMPLATES.imageTextButton(disabledImage, org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.getText()) : org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.TEMPLATES.textImageButton(org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.getText(), disabledImage); }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getDisabledHtml() { return !(showTitle) ? disabledImage : !(imageAfterTitle) ? org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.templates.imageTextButton(disabledImage, org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.getText()) : org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.templates.textImageButton(org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.getText(), disabledImage); }
@java.lang.Override public java.lang.Void runInTransaction() { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addGraphicsDevice(); getCompensationContext().stateChanged(); return null; }	@java.lang.Override public java.lang.Void runInTransaction() { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Out Peak") java.lang.String NetworkQoSOutboundPeak();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Out Peak") java.lang.String networkQoSOutboundPeak();
public java.lang.String getErrorNicName() { return errorNicName; }	public java.lang.String getErrorMessage() { return errorMessage; }
private void initValueChangeListeners() { org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs> onPropertyChangeValidate = new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { validate(true); } }; getSnapshotName().getEntityChangedEvent().addListener(onPropertyChangeValidate); getDaysOfTheWeek().getSelectedItemChangedEvent().addListener(onPropertyChangeValidate); getDaysOfMonth().getSelectedItemChangedEvent().addListener(onPropertyChangeValidate); getEndDate().getEntityChangedEvent().addListener(onPropertyChangeValidate); }	private void initValueChangeListeners() { org.ovirt.engine.ui.uicompat.IEventListener onPropertyChangeValidate = new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { validate(true); } }; getSnapshotName().getEntityChangedEvent().addListener(onPropertyChangeValidate); getDaysOfTheWeek().getSelectedItemChangedEvent().addListener(onPropertyChangeValidate); getDaysOfMonth().getSelectedItemChangedEvent().addListener(onPropertyChangeValidate); getEndDate().getEntityChangedEvent().addListener(onPropertyChangeValidate); }
org.ovirt.engine.core.vdsbroker.ResourceManager getResourceManager() { return org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance(); }	protected org.ovirt.engine.core.vdsbroker.ResourceManager getResourceManager() { return org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance(); }
@org.junit.Test public void canDoActionFailsMaster() { sd.setStorageDomainType(StorageDomainType.Master); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }	@org.junit.Test public void canDoActionFailsMaster() { sd.setStorageDomainType(StorageDomainType.Master); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }
private boolean hasStatelessSnapshot() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSnapshotDao().exists(org.ovirt.engine.core.bll.CloneVmCommand.getVmId(), Snapshot.SnapshotType.STATELESS); }	@java.lang.Override protected void endSuccessfully() { super.endSuccessfully(); attachDisks(); }
private void setRngAvailability() { TModel model = getModel(); org.ovirt.engine.ui.uicommonweb.models.vms.Set<org.ovirt.engine.core.common.businessentities.VmRngDevice.Source> requiredRngSources = model.getSelectedCluster().getRequiredRngSources(); model.getIsRngEnabled().setIsChangable((!(requiredRngSources.isEmpty()))); model.getIsRngEnabled().setMessage(constants.rngNotSupportedByCluster()); model.getRngPeriod().setIsChangable((!(requiredRngSources.isEmpty()))); model.getRngPeriod().setMessage(constants.rngNotSupportedByCluster()); model.getRngBytes().setIsChangable((!(requiredRngSources.isEmpty()))); model.getRngBytes().setMessage(constants.rngNotSupportedByCluster()); model.getRngSourceRandom().setIsChangable(requiredRngSources.contains(VmRngDevice.Source.RANDOM)); model.getRngSourceRandom().setMessage(messages.rngSourceNotSupportedByCluster(VmRngDevice.Source.RANDOM.toString())); model.getRngSourceHwrng().setIsChangable(requiredRngSources.contains(VmRngDevice.Source.HWRNG)); model.getRngSourceHwrng().setMessage(messages.rngSourceNotSupportedByCluster(VmRngDevice.Source.HWRNG.toString())); }	private void setRngAvailability() { TModel model = getModel(); java.util.Set<org.ovirt.engine.core.common.businessentities.VmRngDevice.Source> requiredRngSources = model.getSelectedCluster().getRequiredRngSources(); boolean requiredRngSourcesEmpty = requiredRngSources.isEmpty(); boolean randomSourceAvailable = requiredRngSources.contains(VmRngDevice.Source.RANDOM); boolean hwrngSourceAvailable = requiredRngSources.contains(VmRngDevice.Source.HWRNG); model.getIsRngEnabled().setIsChangable((!requiredRngSourcesEmpty)); model.getRngPeriod().setIsChangable((!requiredRngSourcesEmpty)); model.getRngBytes().setIsChangable((!requiredRngSourcesEmpty)); if (requiredRngSourcesEmpty) { model.getIsRngEnabled().setMessage(constants.rngNotSupportedByCluster()); model.getRngPeriod().setMessage(constants.rngNotSupportedByCluster()); model.getRngBytes().setMessage(constants.rngNotSupportedByCluster()); } model.getRngSourceRandom().setIsChangable(randomSourceAvailable); if (randomSourceAvailable) { model.getRngSourceRandom().setMessage(messages.rngSourceNotSupportedByCluster(VmRngDevice.Source.RANDOM.toString())); } model.getRngSourceHwrng().setIsChangable(hwrngSourceAvailable); if (hwrngSourceAvailable) { model.getRngSourceHwrng().setMessage(messages.rngSourceNotSupportedByCluster(VmRngDevice.Source.HWRNG.toString())); } }
@java.lang.Override public java.lang.String getHashName() { return "edit_network_qos"; }	@java.lang.Override public java.lang.String getHashName() { return "edit_storage_qos"; }
public java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> getVolumesByVolumeType(org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType volumeType);	public java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> getVolumesByStatusAndTypes(org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status, java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType> volumeTypes);
private void validateRoleMapping(org.ovirt.engine.api.model.RegistrationRoleMapping mapping) { if (!(mapping.isSetFrom())) { badRequest("Role name is missing from source."); } if (!(mapping.isSetTo())) { badRequest("Role name is missing from destination."); } }	private void validateRoleMapping(org.ovirt.engine.api.model.RegistrationRoleMapping mapping) { if (!(mapping.isSetFrom())) { badRequest("Role name is missing from source."); } if (!(mapping.isSetTo())) { badRequest("Role is missing from destination."); } }
@java.lang.Override protected org.ovirt.engine.api.model.DataCenter postPopulate(org.ovirt.engine.api.model.DataCenter model) { model.setStorageFormat(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.restapi.model.StorageFormat.class).value()); model.setQuotaModeType(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.QuotaModeType.class).value()); return model; }	@java.lang.Override protected org.ovirt.engine.api.model.DataCenter postPopulate(org.ovirt.engine.api.model.DataCenter model) { model.setStorageFormat(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.restapi.model.StorageFormat.class).value()); model.setQuotaMode(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.QuotaModeType.class).value()); return model; }
@org.junit.Test public void testQueryFailsIfServerExists() { mockQueryParameters(org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.EXISTING_SERVER, org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.PASSWORD); try { getQuery().executeQueryCommand(); fail("Query didn't fail when the server already exists!"); } catch (java.lang.RuntimeException e) { assertEquals(EngineMessages.SERVER_ALREADY_EXISTS_IN_ANOTHER_CLUSTER.toString(), e.getMessage()); } }	@org.junit.Test public void testQueryFailsIfServerExists() { mockQueryParameters(org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.EXISTING_SERVER, org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.PASSWORD); try { getQuery().executeQueryCommand(); fail("Query didn't fail when the server already exists!"); } catch (java.lang.RuntimeException e) { assertEquals(EngineMessage.SERVER_ALREADY_EXISTS_IN_ANOTHER_CLUSTER.toString(), e.getMessage()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("SearchString".equals(args.propertyName)) { clearSelection(); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("SearchString".equals(args.propertyName)) { clearSelection(); } }
private boolean isSupported(org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters.ArchCapabilitiesVerb archCapabilitiesVerb, org.ovirt.engine.core.common.businessentities.ArchitectureType architecture, org.ovirt.engine.core.compat.Version version) { switch (archCapabilitiesVerb) { case GetMigrationSupport : return org.ovirt.engine.core.common.FeatureSupported.isMigrationSupported(architecture, version); case GetMemorySnapshotSupport : return org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(architecture, version); } return false; }	private static boolean isSupported(org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters.ArchCapabilitiesVerb archCapabilitiesVerb, org.ovirt.engine.core.common.businessentities.ArchitectureType architecture, org.ovirt.engine.core.compat.Version version) { switch (archCapabilitiesVerb) { case GetMigrationSupport : return org.ovirt.engine.core.common.FeatureSupported.isMigrationSupported(architecture, version); case GetMemorySnapshotSupport : return org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(architecture, version); case GetSuspendSupport : return org.ovirt.engine.core.common.FeatureSupported.isSuspendSupportedByArchitecture(architecture, version); } return false; }
@org.junit.Test public void testGetUsingInvalidName() { org.ovirt.engine.core.common.businessentities.VDS result = dao.get("farkle"); assertNull(result); }	@org.junit.Test public void testGetUsingInvalidName() { org.ovirt.engine.core.common.businessentities.VDS result = dao.getByName("farkle"); assertNull(result); }
@java.lang.Override protected org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, org.ovirt.engine.core.common.errors.EngineFault> runConnectionStorageToDomain(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain, org.ovirt.engine.core.compat.Guid vdsId, int type) { return runConnectionStorageToDomain(storageDomain, vdsId, type, null, Guid.Empty); }	@java.lang.Override protected org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, org.ovirt.engine.core.common.errors.EngineFault> runConnectionStorageToDomain(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain, org.ovirt.engine.core.compat.Guid vdsId, int type) { return runConnectionStorageToDomain(storageDomain, vdsId, type, null, storageDomain.getStoragePoolId()); }
@org.junit.Test public void testNotRemovingLabeledNetworksWhenRemovingLabeledNetworkUnrelatedToRemovedBond() throws java.lang.Exception { java.lang.String nicName = "nicName"; java.lang.String label = "label"; org.ovirt.engine.core.common.businessentities.network.Network labeledNetwork = new org.ovirt.engine.core.common.businessentities.network.Network(); labeledNetwork.setName("networkName"); labeledNetwork.setId(org.ovirt.engine.core.compat.Guid.newGuid()); labeledNetwork.setLabel(label); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = createNetworkAttachment(labeledNetwork); networkAttachment.setNicName(nicName); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingNic = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); existingNic.setLabels(java.util.Collections.singleton(label)); existingNic.setName(nicName); org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(host.getId()); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setHost(host).setParams(params).setExistingInterfaces(java.util.Collections.singletonList(existingNic)).setNetworkBusinessEntityMap(new org.ovirt.engine.core.common.businessentities.BusinessEntityMap(java.util.Collections.singletonList(labeledNetwork))).build(); assertThat(validator.notRemovingLabeledNetworks(networkAttachment), failsWith(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_LABELED_NETWORK_FROM_NIC, HostSetupNetworksValidator.VAR_ACTION_TYPE_FAILED_CANNOT_REMOVE_LABELED_NETWORK_FROM_NIC_LIST, labeledNetwork.getName())); }	@org.junit.Test public void testNotRemovingLabeledNetworksWhenRemovingLabeledNetworkUnrelatedToRemovedBond() throws java.lang.Exception { java.lang.String nicName = "nicName"; java.lang.String label = "label"; org.ovirt.engine.core.common.businessentities.network.Network labeledNetwork = new org.ovirt.engine.core.common.businessentities.network.Network(); labeledNetwork.setName("networkName"); labeledNetwork.setId(org.ovirt.engine.core.compat.Guid.newGuid()); labeledNetwork.setLabel(label); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = createNetworkAttachment(labeledNetwork); networkAttachment.setNicName(nicName); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingNic = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); existingNic.setLabels(java.util.Collections.singleton(label)); existingNic.setName(nicName); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = createHostSetupNetworksValidator(new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(host.getId()), java.util.Collections.singletonList(existingNic), java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>emptyList(), new org.ovirt.engine.core.common.businessentities.BusinessEntityMap(java.util.Collections.singletonList(labeledNetwork))); assertThat(validator.notRemovingLabeledNetworks(networkAttachment), failsWith(EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_LABELED_NETWORK_FROM_NIC, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostSetupNetworksValidator.VAR_ACTION_TYPE_FAILED_CANNOT_REMOVE_LABELED_NETWORK_FROM_NIC_LIST, labeledNetwork.getName()))); }
private boolean noCollapseWithSnapshots() { return ((getParameters().getVm().getSnapshots().size()) > 1) && (!(getParameters().getCopyCollapse())); }	private boolean isCopyCollapseDisabledWithSnapshots() { return ((getParameters().getVm().getSnapshots().size()) > 1) && (!(getParameters().getCopyCollapse())); }
public org.ovirt.engine.api.rsdl.Node.Builder actions(java.util.List<java.lang.String> actions) { node.setActions(actions); return this; }	public org.ovirt.engine.api.rsdl.ServiceTreeNode.Builder actions(java.util.List<java.lang.String> actions) { node.setActions(actions); return this; }
public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getDcInventoryStatus(javax.sql.DataSource engineDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDAO(engineDataSource); return dao.getDcInventoryStatus(); }	public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getDcInventoryStatus(javax.sql.DataSource engineDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDao(engineDataSource); return dao.getDcInventoryStatus(); }
protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return tsb.append("id", getId()).append("name", getName()).append("vdsId", getVdsId()).append("networkName", getNetworkName()).append("ipv4BootProtocol", getIpv4BootProtocol()).append("ipv4Address", getIpv4Address()).append("ipv4Subnet", getIpv4Subnet()).append("ipv4Gateway", getIpv4Gateway()).append("ipv6BootProtocol", getIpv6BootProtocol()).append("ipv6Address", getIpv6Address()).append("ipv6Prefix", getIpv6Prefix()).append("ipv6Gateway", getIpv6Gateway()).append("mtu", getMtu()).append("bridged", isBridged()).append("switchType", getSwitchType()).append("type", getType()).append("networkImplementationDetails", getNetworkImplementationDetails()).append("qos", getQos()); }	protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return tsb.append("id", getId()).append("name", getName()).append("vdsId", getVdsId()).append("networkName", getNetworkName()).append("ipv4BootProtocol", getIpv4BootProtocol()).append("ipv4Address", getIpv4Address()).append("ipv4Subnet", getIpv4Subnet()).append("ipv4Gateway", getIpv4Gateway()).append("ipv6BootProtocol", getIpv6BootProtocol()).append("ipv6Address", getIpv6Address()).append("ipv6Prefix", getIpv6Prefix()).append("ipv6Gateway", getIpv6Gateway()).append("mtu", getMtu()).append("bridged", isBridged()).append("reportedSwitchType", getReportedSwitchType()).append("type", getType()).append("networkImplementationDetails", getNetworkImplementationDetails()).append("qos", getQos()).append("adPartnerMac", getAdPartnerMac()); }
public void setVmCount(int value) { mVdsDynamic.setVmCount(value); }	public void setVmCount(int value) { vdsDynamic.setVmCount(value); }
@org.junit.Test public void updateIScsiConnection() { newNFSConnection.setstorage_type(StorageType.ISCSI); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_STORAGE); }	@org.junit.Test public void updateIScsiConnection() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.ISCSI, NfsVersion.V4, 300, 0); parameters.setStorageServerConnection(newNFSConnection); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_STORAGE); }
private void logRunningCommand() { java.lang.StringBuilder logInfo = new java.lang.StringBuilder("Running command: ").append(getClass().getSimpleName()); if (log.isDebugEnabled()) { logInfo.append(((getParameters()) != null ? ("(" + (getCommandParameters(getParameters()))) + ")" : org.apache.commons.lang.StringUtils.EMPTY)); } if (hasTaskHandlers()) { logInfo.append(" Task handler: ").append(getCurrentTaskHandler().getClass().getSimpleName()); } logInfo.append(" internal: ").append(org.ovirt.engine.core.bll.CommandBase.isInternalExecution()).append("."); java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionSubjectList = getPermissionCheckSubjects(); if ((permissionSubjectList != null) && (!(permissionSubjectList.isEmpty()))) { java.lang.StringBuilder logEntityIdsInfo = new java.lang.StringBuilder(); for (org.ovirt.engine.core.bll.utils.PermissionSubject permSubject : permissionSubjectList) { if ((permSubject.getObjectId()) != null) { if ((logEntityIdsInfo.length()) != 0) { logEntityIdsInfo.append(", "); } logEntityIdsInfo.append(" ID: ").append(permSubject.getObjectId()).append(" Type: ").append(permSubject.getObjectType()); } } if ((logEntityIdsInfo.length()) != 0) { logInfo.append(" Entities affected : ").append(logEntityIdsInfo); } } log.info(logInfo); }	private void logRunningCommand() { java.lang.StringBuilder logInfo = new java.lang.StringBuilder("Running command: ").append(getClass().getSimpleName()); if (log.isDebugEnabled()) { logInfo.append(((getParameters()) != null ? ("(" + (getCommandParamatersString(getParameters()))) + ")" : org.apache.commons.lang.StringUtils.EMPTY)); } if (hasTaskHandlers()) { logInfo.append(" Task handler: ").append(getCurrentTaskHandler().getClass().getSimpleName()); } logInfo.append(" internal: ").append(org.ovirt.engine.core.bll.CommandBase.isInternalExecution()).append("."); java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionSubjectList = getPermissionCheckSubjects(); if ((permissionSubjectList != null) && (!(permissionSubjectList.isEmpty()))) { java.lang.StringBuilder logEntityIdsInfo = new java.lang.StringBuilder(); for (org.ovirt.engine.core.bll.utils.PermissionSubject permSubject : permissionSubjectList) { if ((permSubject.getObjectId()) != null) { if ((logEntityIdsInfo.length()) != 0) { logEntityIdsInfo.append(", "); } logEntityIdsInfo.append(" ID: ").append(permSubject.getObjectId()).append(" Type: ").append(permSubject.getObjectType()); } } if ((logEntityIdsInfo.length()) != 0) { logInfo.append(" Entities affected : ").append(logEntityIdsInfo); } } log.info(logInfo); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Remove Virtual Machine(s)") java.lang.String removeVirtualMachinesTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Remove Virtual Machine(s)") java.lang.String removeVirtualMachinesTitle();
private boolean isUser(org.ovirt.engine.core.common.businessentities.DbUser user) { return (user != null) && (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(user.getusername()))); }	private static boolean isUser(org.ovirt.engine.core.common.businessentities.DbUser user) { return (user != null) && (!(user.getIsGroup())); }
@java.lang.Override protected org.ovirt.engine.core.common.queries.VdcQueryType getProfilesByQosIdQueryType() { return org.ovirt.engine.core.common.queries.VdcQueryType.GetAllNetworksByQosId; }	@java.lang.Override protected org.ovirt.engine.core.common.queries.VdcQueryType getUsingEntitiesByQosIdQueryType() { return org.ovirt.engine.core.common.queries.VdcQueryType.GetAllNetworksByQosId; }
public void onSave() { if (!(Validate())) { return; } org.ovirt.engine.core.common.businessentities.Provider provider = new org.ovirt.engine.core.common.businessentities.Provider(); provider.setName(((java.lang.String) (privateName.getEntity()))); provider.setDescription(((java.lang.String) (privateDescription.getEntity()))); provider.setApiAddress(((java.lang.String) (privateUrl.getEntity()))); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.AddProvider, new org.ovirt.engine.core.common.action.ProviderParameters(provider), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void Executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { sourceListModel.getSearchCommand().Execute(); } }); cancel(); }	public void onSave() { if (!(validate())) { return; } org.ovirt.engine.core.common.businessentities.Provider provider = new org.ovirt.engine.core.common.businessentities.Provider(); provider.setName(((java.lang.String) (privateName.getEntity()))); provider.setDescription(((java.lang.String) (privateDescription.getEntity()))); provider.setUrl(((java.lang.String) (privateUrl.getEntity()))); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.AddProvider, new org.ovirt.engine.core.common.action.ProviderParameters(provider), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { sourceListModel.getSearchCommand().execute(); } }); cancel(); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Event Details") java.lang.String eventDetailsTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Event Details") java.lang.String eventDetailsTitle();
public static void GetMaxNumOfVmSockets(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, java.lang.String version) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 1; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.GetConfigurationValueParameters tempVar = new org.ovirt.engine.ui.uicommonweb.dataprovider.GetConfigurationValueParameters(ConfigurationValues.MaxNumOfVmSockets); tempVar.setVersion(version); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(tempVar, aQuery); }	public static void getMaxNumOfVmSockets(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, java.lang.String version) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 1; } }; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.MaxNumOfVmSockets); tempVar.setVersion(version); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache(tempVar, aQuery); }
public void show() { }	public void show() { call(widget.getElement(), org.ovirt.engine.ui.common.widget.tooltip.Tooltip.SHOW); }
@java.lang.Override protected void executeVdsBrokerCommand() { _result = org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand.getBroker().discoverSendTargets(org.ovirt.engine.core.vdsbroker.storage.StorageConnectionHelper.createStructFromConnection(org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand.getParameters().getConnection(), null, org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand.getParameters().getVdsId())); org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand.proceedProxyReturnValue(); setReturnValue((_result.isFullTargets() ? parseFullTargets(_result.getIqnList()) : parseTargets(_result.getIqnList()))); }	@java.lang.Override protected void executeVdsBrokerCommand() { _result = org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand.getBroker().discoverSendTargets(org.ovirt.engine.core.vdsbroker.storage.StorageConnectionHelper.getInstance().createStructFromConnection(org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand.getParameters().getConnection(), null, org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand.getParameters().getVdsId())); org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand.proceedProxyReturnValue(); setReturnValue((_result.isFullTargets() ? parseFullTargets(_result.getIqnList()) : parseTargets(_result.getIqnList()))); }
private void updateActionAvailability() { getEditParameterCommand().setIsExecutionAllowed((((getSelectedItems()) != null) && ((getSelectedItems().size()) == 1))); getResetParameterCommand().setIsExecutionAllowed((((getSelectedItems()) != null) && ((getSelectedItems().size()) == 1))); getResetAllParameterCommand().setIsExecutionAllowed((((getItems()) != null) && ((((java.util.List) (getItems())).size()) > 0))); }	private void updateActionAvailability() { getEditParameterCommand().setIsExecutionAllowed((((getSelectedItems()) != null) && ((getSelectedItems().size()) == 1))); getResetParameterCommand().setIsExecutionAllowed((((getSelectedItems()) != null) && ((getSelectedItems().size()) == 1))); getResetAllParameterCommand().setIsExecutionAllowed((((getItems()) != null) && ((((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity>) (getItems())).size()) > 0))); }
@java.lang.Override protected void executeCommand() { super.executeCommand(); if (org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getSucceeded()) { updatePoolVms(); } org.ovirt.engine.core.bll.Backend.getInstance().triggerPoolMonitoringJob(); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue currentVmsInPoolQuery = runInternalQuery(VdcQueryType.GetAllPoolVms, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPool().getVmPoolId())); java.util.List<org.ovirt.engine.core.common.businessentities.VM> poolVmsBeforeAdd = (currentVmsInPoolQuery.getSucceeded()) ? currentVmsInPoolQuery.<java.util.List<org.ovirt.engine.core.common.businessentities.VM>>getReturnValue() : null; super.executeCommand(); if (org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getSucceeded()) { updatePoolVms(poolVmsBeforeAdd); } vmPoolMonitor.triggerPoolMonitoringJob(); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Storage") java.lang.String storagesTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("LUN is not usable") java.lang.String lunUnusable();
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { interfaceMappings.setLabel(((java.lang.String) (behavior.getInterfaceMappingsLabel().getEntity()))); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { interfaceMappings.setLabel(((java.lang.String) (model.getInterfaceMappingsLabel().getEntity()))); }
public void unpinVNode(org.ovirt.engine.core.compat.Guid sourceVMGuid, int sourceVNumaIndex) { org.ovirt.engine.ui.uicommonweb.models.hosts.numa.VNodeModel vNodeModel = getNodeModel(sourceVMGuid, sourceVNumaIndex); if (vNodeModel.isPinned()) { assignedNumaNodes.get(vNodeModel.getHostNodeIndex()).remove(vNodeModel); unassignedNumaNodes.add(vNodeModel); } vmsToUpdate.add(vNodeModel.getVm().getId()); modelReady(); }	public void unpinVNode(org.ovirt.engine.core.compat.Guid sourceVMGuid, int sourceVNumaIndex) { org.ovirt.engine.ui.uicommonweb.models.hosts.numa.VNodeModel vNodeModel = getNodeModel(sourceVMGuid, sourceVNumaIndex); if (vNodeModel.isPinned()) { assignedNumaNodes.get(vNodeModel.getHostNodeIndex()).remove(vNodeModel); unassignedNumaNodes.add(vNodeModel); } vNodeModel.unpin(); vmsToUpdate.add(vNodeModel.getVm().getId()); modelReady(); }
private boolean validateAndCompleteParameters(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.AuditLogType, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase> auditLogPair) throws org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException { if ((org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType())) { return true; } boolean hardEnforcement = (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType()); for (org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter param : parameters.getParameters()) { boolean validQuotaId = checkAndFetchQuota(parameters, param, auditLogPair); boolean validVdsGroup = true; boolean validStorageDomain = true; if (validQuotaId) { if (param instanceof org.ovirt.engine.core.bll.quota.QuotaVdsGroupConsumptionParameter) { validVdsGroup = checkVdsGroupMatchQuota(parameters, param); } if (param instanceof org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) { validStorageDomain = checkStoragePoolMatchQuota(parameters, param); } } if (((!validQuotaId) || (!validVdsGroup)) || (!validStorageDomain)) { if (hardEnforcement) { return false; } else { parameters.getValidateMessages().clear(); if ((org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType())) { auditLogPair.setFirst(null); } } } } parameters.getParameters().removeAll(corruptedParameters); corruptedParameters.clear(); return true; }	private boolean validateAndCompleteParameters(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.AuditLogType, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase> auditLogPair) throws org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException { if ((org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType())) { return true; } boolean hardEnforcement = (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType()); for (org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter param : parameters.getParameters()) { boolean validQuotaId = checkAndFetchQuota(parameters, param, auditLogPair); boolean validVdsGroup = true; boolean validStorageDomain = true; if (validQuotaId) { if (param instanceof org.ovirt.engine.core.bll.quota.QuotaVdsGroupConsumptionParameter) { validVdsGroup = checkVdsGroupMatchQuota(parameters, param); } if (param instanceof org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) { validStorageDomain = checkStoragePoolMatchQuota(parameters, param); } } if (((!validQuotaId) || (!validVdsGroup)) || (!validStorageDomain)) { if (hardEnforcement) { return false; } else { parameters.getValidationMessages().clear(); if ((org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType())) { auditLogPair.setFirst(null); } } } } parameters.getParameters().removeAll(corruptedParameters); corruptedParameters.clear(); return true; }
public java.lang.String getHardwareProductName() { return mVdsDynamic.getHardwareProductName(); }	public java.lang.String getHardwareProductName() { return vdsDynamic.getHardwareProductName(); }
void save(org.ovirt.engine.core.common.job.StepSubjectEntity stepSubjectEntity);	void saveAll(java.util.Collection<org.ovirt.engine.core.common.job.StepSubjectEntity> entities);
@java.lang.Override protected void proceedProxyReturnValue() { org.ovirt.engine.core.common.errors.EngineErrors returnStatus = getReturnValueFromStatus(org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getReturnStatus()); switch (returnStatus) { case StoragePoolUnknown : case SpmStatusError : break; case TaskInProgress : org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getVDSReturnValue().setVdsError(new org.ovirt.engine.core.common.errors.VDSError(returnStatus, org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getReturnStatus().mMessage)); org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getVDSReturnValue().setSucceeded(false); break; default : super.proceedProxyReturnValue(); initializeVdsError(returnStatus); break; } }	@java.lang.Override protected void proceedProxyReturnValue() { org.ovirt.engine.core.common.errors.EngineError returnStatus = getReturnValueFromStatus(org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getReturnStatus()); switch (returnStatus) { case StoragePoolUnknown : case SpmStatusError : break; case TaskInProgress : org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getVDSReturnValue().setVdsError(new org.ovirt.engine.core.common.errors.VDSError(returnStatus, org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getReturnStatus().mMessage)); org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getVDSReturnValue().setSucceeded(false); break; default : super.proceedProxyReturnValue(); initializeVdsError(returnStatus); break; } }
@java.lang.Override public void updateIfNeeded(org.ovirt.engine.core.common.businessentities.VdsDynamic vdsDynamic) { org.ovirt.engine.core.common.businessentities.VdsDynamic dbData = get(vdsDynamic.getId()); if (!(dbData.equals(vdsDynamic))) { update(vdsDynamic); } else { org.ovirt.engine.core.dao.VdsDynamicDAOImpl.log.debug("Ignored an unneeded update of VdsDynamic"); } }	@java.lang.Override public void updateIfNeeded(org.ovirt.engine.core.common.businessentities.VdsDynamic vdsDynamic) { org.ovirt.engine.core.common.businessentities.VdsDynamic dbData = get(vdsDynamic.getId()); if (!(dbData.equals(vdsDynamic))) { update(vdsDynamic); } else { org.ovirt.engine.core.dao.VdsDynamicDaoImpl.log.debug("Ignored an unneeded update of VdsDynamic"); } }
public void addSubTab(org.ovirt.engine.ui.webadmin.plugin.entity.EntityType entityType, java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, org.ovirt.engine.ui.common.widget.Align align) { switch (entityType) { case DataCenter : addTab(DataCenterSubTabPanelPresenter.TYPE_RequestTabs, DataCenterSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl, align); break; case Cluster : addTab(ClusterSubTabPanelPresenter.TYPE_RequestTabs, ClusterSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl, align); break; case Host : addTab(HostSubTabPanelPresenter.TYPE_RequestTabs, HostSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl, align); break; case Storage : addTab(StorageSubTabPanelPresenter.TYPE_RequestTabs, StorageSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl, align); break; case Disk : addTab(DiskSubTabPanelPresenter.TYPE_RequestTabs, DiskSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl, align); break; case VirtualMachine : addTab(VirtualMachineSubTabPanelPresenter.TYPE_RequestTabs, VirtualMachineSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl, align); break; case Template : addTab(TemplateSubTabPanelPresenter.TYPE_RequestTabs, TemplateSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl, align); break; } }	public void addSubTab(org.ovirt.engine.ui.webadmin.plugin.entity.EntityType entityType, java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { switch (entityType) { case DataCenter : addTab(DataCenterSubTabPanelPresenter.TYPE_RequestTabs, DataCenterSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl, options); break; case Cluster : addTab(ClusterSubTabPanelPresenter.TYPE_RequestTabs, ClusterSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl, options); break; case Host : addTab(HostSubTabPanelPresenter.TYPE_RequestTabs, HostSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl, options); break; case Storage : addTab(StorageSubTabPanelPresenter.TYPE_RequestTabs, StorageSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl, options); break; case Disk : addTab(DiskSubTabPanelPresenter.TYPE_RequestTabs, DiskSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl, options); break; case VirtualMachine : addTab(VirtualMachineSubTabPanelPresenter.TYPE_RequestTabs, VirtualMachineSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl, options); break; case Template : addTab(TemplateSubTabPanelPresenter.TYPE_RequestTabs, TemplateSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl, options); break; } }
private void generateWriteOne(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getEnumName(type); java.lang.String tag = schemaNames.getSchemaTagName(type.getName()); javaBuffer.addImport(typeName); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.json.JsonWriter.class); javaBuffer.addLine("public static void writeOne(%1$s object, JsonWriter writer) {", typeName.getSimpleName()); javaBuffer.addLine(" writeOne(object, null, writer);"); javaBuffer.addLine("}"); javaBuffer.addLine(); javaBuffer.addLine("public static void writeOne(%1$s object, String name, JsonWriter writer) {", typeName.getSimpleName()); javaBuffer.addLine("if (name != null) {"); javaBuffer.addLine("writer.writeStartObject(name);"); javaBuffer.addLine("}"); javaBuffer.addLine("else {"); javaBuffer.addLine("writer.writeStartObject();"); javaBuffer.addLine("}"); javaBuffer.addLine("writer.writeString(\"%1$s\", object.value());", tag); javaBuffer.addLine("writer.writeEnd();"); javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateEnumWriteOne(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getEnumName(type); java.lang.String tag = schemaNames.getSchemaTagName(type.getName()); javaBuffer.addImport(typeName); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.json.JsonWriter.class); javaBuffer.addLine("public static void writeOne(%1$s object, JsonWriter writer) {", typeName.getSimpleName()); javaBuffer.addLine(" writeOne(object, null, writer);"); javaBuffer.addLine("}"); javaBuffer.addLine(); javaBuffer.addLine("public static void writeOne(%1$s object, String name, JsonWriter writer) {", typeName.getSimpleName()); javaBuffer.addLine("if (name != null) {"); javaBuffer.addLine("writer.writeStartObject(name);"); javaBuffer.addLine("}"); javaBuffer.addLine("else {"); javaBuffer.addLine("writer.writeStartObject();"); javaBuffer.addLine("}"); javaBuffer.addLine("writer.writeString(\"%1$s\", object.value());", tag); javaBuffer.addLine("writer.writeEnd();"); javaBuffer.addLine("}"); javaBuffer.addLine(); }
protected void updateEmulatedMachines() { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel().getSelectedCluster(); if (cluster == null) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getEmulatedMachinesByClusterID(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.TreeSet<java.lang.String> emulatedSet = new java.util.TreeSet<java.lang.String>(((java.util.HashSet<java.lang.String>) (returnValue))); emulatedSet.add(""); java.lang.String lastEmulatedSelected = getModel().getSelectedEmulatedMachine().getEntity(); getModel().getEmulatedMachine().setItems(emulatedSet); if (((lastEmulatedSelected != null) && (!(lastEmulatedSelected.equals("")))) && (emulatedSet.contains(lastEmulatedSelected))) { getModel().getEmulatedMachine().setSelectedItem(lastEmulatedSelected); } else { getModel().getSelectedEmulatedMachine().setEntity(lastEmulatedSelected); } } }), cluster.getId()); }	protected void updateEmulatedMachines() { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel().getSelectedCluster(); if (cluster == null) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getEmulatedMachinesByClusterID(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { if (returnValue != null) { java.util.Set<java.lang.String> emulatedSet = new java.util.TreeSet<java.lang.String>(((java.util.HashSet<java.lang.String>) (returnValue))); emulatedSet.add(""); java.lang.String oldVal = getModel().getEmulatedMachine().getSelectedItem(); getModel().getEmulatedMachine().setItems(emulatedSet); getModel().getEmulatedMachine().setSelectedItem(oldVal); } } }), cluster.getId()); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Function Modules") java.lang.String clusterPolicyFunctionLabel();	@com.google.gwt.i18n.client.Constants.DefaultStringValue("Function Modules") java.lang.String clusterPolicyFunctionLabel();
private org.snmp4j.security.UsmUser getUsmUser(org.ovirt.engine.core.notifier.transport.snmp.Snmp.Profile profile) { org.snmp4j.smi.OID authenticationProtocol = null; org.snmp4j.smi.OctetString authenticationPassphrase = null; org.snmp4j.smi.OID privacyProtocol = null; org.snmp4j.smi.OctetString privacyPassphrase = null; switch (profile.securityLevel) { case org.snmp4j.security.SecurityLevel.AUTH_NOPRIV : authenticationProtocol = org.snmp4j.security.AuthMD5.ID; authenticationPassphrase = profile.authPassphrase; break; case org.snmp4j.security.SecurityLevel.AUTH_PRIV : authenticationProtocol = org.snmp4j.security.AuthMD5.ID; authenticationPassphrase = profile.authPassphrase; privacyProtocol = org.snmp4j.security.PrivAES128.ID; privacyPassphrase = profile.privacyPassphrase; break; } return new org.snmp4j.security.UsmUser(profile.username, authenticationProtocol, authenticationPassphrase, privacyProtocol, privacyPassphrase); }	private org.snmp4j.security.UsmUser getUsmUser(org.ovirt.engine.core.notifier.transport.snmp.Snmp.Profile profile) { org.snmp4j.smi.OID authenticationProtocol = null; org.snmp4j.smi.OctetString authenticationPassphrase = null; org.snmp4j.smi.OID privacyProtocol = null; org.snmp4j.smi.OctetString privacyPassphrase = null; switch (profile.securityLevel) { case org.snmp4j.security.SecurityLevel.AUTH_NOPRIV : authenticationProtocol = profile.authProtocol; authenticationPassphrase = profile.authPassphrase; break; case org.snmp4j.security.SecurityLevel.AUTH_PRIV : authenticationProtocol = profile.authProtocol; authenticationPassphrase = profile.authPassphrase; privacyProtocol = profile.privProtocol; privacyPassphrase = profile.privacyPassphrase; break; } return new org.snmp4j.security.UsmUser(profile.username, authenticationProtocol, authenticationPassphrase, privacyProtocol, privacyPassphrase); }
@org.junit.Test public void vlanNetworkWithVmNetworkDenied() { org.ovirt.engine.core.common.businessentities.network.Network net1 = createNetwork("net1"); org.ovirt.engine.core.common.businessentities.network.Network net2 = createNetwork("net2"); net2.setVlanId(100); mockExistingNetworks(net1, net2); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic("nic0", null); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic = createVlan(nic.getName(), net2.getVlanId(), net2.getName()); mockExistingIfaces(nic, vlanNic); nic.setNetworkName(net1.getName()); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(nic, vlanNic)); final java.util.List<org.ovirt.engine.core.bll.validator.network.NetworkType> networksOnIface = java.util.Arrays.asList(NetworkType.VM, NetworkType.VLAN); when(networkExclusivenessValidator.isNetworkExclusive(networksOnIface)).thenReturn(false); validateAndExpectViolation(helper, org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK_MSG, nic.getName()); }	@org.junit.Test public void vlanNetworkWithVmNetworkDenied() { org.ovirt.engine.core.common.businessentities.network.Network net1 = createNetwork("net1"); org.ovirt.engine.core.common.businessentities.network.Network net2 = createNetwork("net2"); net2.setVlanId(100); mockExistingNetworks(net1, net2); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic("nic0", null); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic = createVlan(nic, net2.getVlanId(), net2.getName()); mockExistingIfaces(nic, vlanNic); nic.setNetworkName(net1.getName()); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(nic, vlanNic)); final java.util.List<org.ovirt.engine.core.bll.validator.network.NetworkType> networksOnIface = java.util.Arrays.asList(NetworkType.VM, NetworkType.VLAN); when(networkExclusivenessValidator.isNetworkExclusive(networksOnIface)).thenReturn(false); validateAndExpectViolation(helper, EngineMessage.NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK, nic.getName()); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.scheduling.PolicyUnit.class, to = org.ovirt.engine.api.model.SchedulingPolicyUnit.class) public static org.ovirt.engine.api.model.SchedulingPolicyUnit map(org.ovirt.engine.core.common.scheduling.PolicyUnit entity, org.ovirt.engine.api.model.SchedulingPolicyUnit template) { org.ovirt.engine.api.model.SchedulingPolicyUnit model = (template != null) ? template : new org.ovirt.engine.api.model.SchedulingPolicyUnit(); model.setId(entity.getId().toString()); model.setName(entity.getName()); model.setDescription(entity.getDescription()); model.setType(entity.getPolicyUnitType().name().toLowerCase()); model.setEnabled(entity.isEnabled()); model.setInternal(entity.isInternal()); if (((entity.getParameterRegExMap()) != null) && (!(entity.getParameterRegExMap().isEmpty()))) { model.setRegexValidationMap(org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.fromMap(entity.getParameterRegExMap())); } return model; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.scheduling.PolicyUnit.class, to = org.ovirt.engine.api.model.SchedulingPolicyUnit.class) public static org.ovirt.engine.api.model.SchedulingPolicyUnit map(org.ovirt.engine.core.common.scheduling.PolicyUnit entity, org.ovirt.engine.api.model.SchedulingPolicyUnit template) { org.ovirt.engine.api.model.SchedulingPolicyUnit model = (template != null) ? template : new org.ovirt.engine.api.model.SchedulingPolicyUnit(); model.setId(entity.getId().toString()); model.setName(entity.getName()); model.setDescription(entity.getDescription()); model.setType(org.ovirt.engine.api.restapi.types.PolicyUnitMapper.map(entity.getPolicyUnitType(), null).name().toLowerCase()); model.setEnabled(entity.isEnabled()); model.setInternal(entity.isInternal()); if (((entity.getParameterRegExMap()) != null) && (!(entity.getParameterRegExMap().isEmpty()))) { model.setPropertiesMetaData(org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.fromMap(entity.getParameterRegExMap())); } return model; }
@java.lang.Override protected void setUriInfo(javax.ws.rs.core.UriInfo uriInfo) { resource.setUriInfo(uriInfo); ((org.ovirt.engine.api.restapi.resource.BackendClusterSubResource) (resource)).getParent().setUriInfo(uriInfo); }	@java.lang.Override protected void setUriInfo(javax.ws.rs.core.UriInfo uriInfo) { resource.setUriInfo(uriInfo); ((org.ovirt.engine.api.restapi.resource.BackendDataCenterClusterResource) (resource)).getParent().setUriInfo(uriInfo); }
protected void showErrataListWithDetailsPopup(java.lang.String filterCommand, java.lang.String title) { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.HostErrataCountModel transferObj = new org.ovirt.engine.ui.uicommonweb.models.HostErrataCountModel(); transferObj.setFilterCommand(filterCommand); transferObj.setTitle(title); transferObj.setGuid(getGuid()); transferObj.setName(getName()); setWindow(transferObj); initCommands(transferObj); }	protected void showErrataListWithDetailsPopup(java.lang.String filterCommand, java.lang.String title) { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.HostErrataCountModel transferObj = new org.ovirt.engine.ui.uicommonweb.models.HostErrataCountModel(); transferObj.setFilterCommand(filterCommand); transferObj.setTitle(title); transferObj.setGuid(getGuid()); setWindow(transferObj); initCommands(transferObj); }
@java.lang.Override protected boolean canDoAction() { setStoragePoolId(getVm().getStoragePoolId()); org.ovirt.engine.core.bll.validator.LiveSnapshotValidator liveSnapshotValidator = new org.ovirt.engine.core.bll.validator.LiveSnapshotValidator(org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getStoragePool().getcompatibility_version(), org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getVds()); org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotValidator = createSnapshotsValidator(); if ((!(validate(liveSnapshotValidator.canDoSnapshot()))) || (!(validate(snapshotValidator.vmNotDuringSnapshot(org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getVmId()))))) { return false; } if ((((!(isValidParametersList())) || (!(checkImagesStatus()))) || (!(validateSpaceRequirements()))) || (!(performVmRelatedChecks()))) { return false; } for (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : getParameters().getParametersList()) { org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getReturnValue().setCanDoAction((((((isDiskNotShareable(parameters.getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(parameters.getImageId()))) && (isTemplateInDestStorageDomain(parameters.getImageId(), parameters.getTargetStorageDomainId()))) && (performStorageDomainsChecks(parameters))) && (isSameSourceAndDest(parameters)))); if (!(org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getReturnValue().getCanDoAction())) { return false; } } if (!(setAndValidateDiskProfiles())) { return false; } return true; }	@java.lang.Override protected boolean canDoAction() { setStoragePoolId(getVm().getStoragePoolId()); org.ovirt.engine.core.bll.validator.LiveSnapshotValidator validator = new org.ovirt.engine.core.bll.validator.LiveSnapshotValidator(org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getStoragePool().getcompatibility_version(), org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getVds()); if (!(validate(validator.canDoSnapshot()))) { return false; } if ((((!(isValidParametersList())) || (!(checkImagesStatus()))) || (!(validateSpaceRequirements()))) || (!(performVmRelatedChecks()))) { return false; } for (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : getParameters().getParametersList()) { org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getReturnValue().setCanDoAction((((((isDiskNotShareable(parameters.getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(parameters.getImageId()))) && (isTemplateInDestStorageDomain(parameters.getImageId(), parameters.getTargetStorageDomainId()))) && (performStorageDomainsChecks(parameters))) && (isSameSourceAndDest(parameters)))); if (!(org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getReturnValue().getCanDoAction())) { return false; } } if (!(setAndValidateDiskProfiles())) { return false; } return true; }
private boolean isAlreadyInRequestedStatus(java.lang.String options) { boolean ret = false; org.ovirt.engine.core.common.businessentities.FenceActionType action = org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getAction(); _result = org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getBroker().fenceNode(org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getIp(), "", org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getType(), org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getUser(), org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getPassword(), "status", "", options, convertFencingPolicy(org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getFencingPolicy())); if ((_result.power) != null) { java.lang.String powerStatus = _result.power.toLowerCase(); if (((action == (org.ovirt.engine.core.common.businessentities.FenceActionType.Start)) && (powerStatus.equals("on"))) || ((action == (org.ovirt.engine.core.common.businessentities.FenceActionType.Stop)) && (powerStatus.equals("off")))) ret = true; } return ret; }	private boolean isAlreadyInRequestedStatus(java.lang.String options) { boolean ret = false; org.ovirt.engine.core.common.businessentities.FenceActionType action = org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getAction(); _result = org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getBroker().fenceNode(org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getIp(), "", org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getType(), org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getUser(), org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getPassword(), "status", "", options, null); if ((_result.power) != null) { java.lang.String powerStatus = _result.power.toLowerCase(); if (((action == (org.ovirt.engine.core.common.businessentities.FenceActionType.Start)) && (powerStatus.equals("on"))) || ((action == (org.ovirt.engine.core.common.businessentities.FenceActionType.Stop)) && (powerStatus.equals("off")))) ret = true; } return ret; }
private boolean executeBasicAuthentication(javax.ws.rs.core.HttpHeaders headers, java.lang.String engineSessionId, boolean preferPersistentAuth) { boolean successful = false; java.util.List<java.lang.String> auth = headers.getRequestHeader(HttpHeaders.AUTHORIZATION); if ((auth != null) && ((auth.size()) != 0)) { org.ovirt.engine.api.common.security.auth.Principal principal = scheme.decode(headers); if (((validator) == null) || (validator.validate(principal, engineSessionId))) { successful = true; updateAuthenticationProperties(preferPersistentAuth, principal); } } return successful; }	private boolean executeBasicAuthentication(javax.ws.rs.core.HttpHeaders headers, javax.servlet.http.HttpSession httpSession, boolean preferPersistentAuth) { boolean successful = false; java.util.List<java.lang.String> auth = headers.getRequestHeader(HttpHeaders.AUTHORIZATION); if ((auth != null) && ((auth.size()) != 0)) { org.ovirt.engine.api.common.security.auth.Principal principal = scheme.decode(headers); java.lang.String engineSessionId = org.ovirt.engine.api.common.security.auth.SessionUtils.generateEngineSessionId(); if (((validator) == null) || (validator.validate(principal, engineSessionId))) { successful = true; if (httpSession == null) { httpSession = getCurrentSession(true); } org.ovirt.engine.api.common.security.auth.SessionUtils.setEngineSessionId(httpSession, engineSessionId); updateAuthenticationProperties(preferPersistentAuth, principal); } } return successful; }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VM> buildFromOVFs(java.util.List<java.lang.String> ovfList) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<>(); for (java.lang.String ovf : ovfList) { try { if (!(ovfHelper.isOvfTemplate(ovf))) { vms.add(ovfHelper.readVmFromOvf(ovf).getFirst()); } } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException ex) { auditLogOvfLoadError(ex.getName(), ex.getMessage()); } } return vms; }	@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VM> buildFromOVFs(java.util.List<java.lang.String> ovfList) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<>(); for (java.lang.String ovf : ovfList) { try { if (!(ovfHelper.isOvfTemplate(ovf))) { vms.add(ovfHelper.readVmFromOvf(ovf).getVm()); } } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException ex) { auditLogOvfLoadError(ex.getName(), ex.getMessage()); } } return vms; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Remove Quota(s)") java.lang.String removeQuotasTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Remove Quota(s)") java.lang.String removeQuotasTitle();
@java.lang.Override public org.ovirt.engine.api.model.Templates list() { org.ovirt.engine.api.model.Templates templates = new org.ovirt.engine.api.model.Templates(); if (org.ovirt.engine.api.common.util.QueryHelper.hasMatrixParam(getUriInfo(), org.ovirt.engine.api.restapi.resource.UNREGISTERED_CONSTRAINT_PARAMETER)) { java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> unregisteredTemplates = getBackendCollection(VdcQueryType.GetUnregisteredVms, new org.ovirt.engine.core.common.queries.IdAndNameQueryParameters(storageDomainId, "Template")); java.util.List<org.ovirt.engine.api.model.Template> collection = new java.util.ArrayList<org.ovirt.engine.api.model.Template>(); for (org.ovirt.engine.core.common.businessentities.VmTemplate entity : unregisteredTemplates) { org.ovirt.engine.api.model.Template vmTemplate = map(entity); collection.add(addLinks(populate(vmTemplate, entity))); } templates.getTemplates().addAll(collection); } templates.getTemplates().addAll(getCollection()); return templates; }	@java.lang.Override public org.ovirt.engine.api.model.Templates list() { org.ovirt.engine.api.model.Templates templates = new org.ovirt.engine.api.model.Templates(); if (org.ovirt.engine.api.common.util.QueryHelper.hasMatrixParam(getUriInfo(), org.ovirt.engine.api.restapi.resource.UNREGISTERED_CONSTRAINT_PARAMETER)) { java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> unregisteredTemplates = getBackendCollection(VdcQueryType.GetUnregisteredVmTemplates, new org.ovirt.engine.core.common.queries.UnregisteredEntitiesQueryParameters(storageDomainId)); java.util.List<org.ovirt.engine.api.model.Template> collection = new java.util.ArrayList<org.ovirt.engine.api.model.Template>(); for (org.ovirt.engine.core.common.businessentities.VmTemplate entity : unregisteredTemplates) { org.ovirt.engine.api.model.Template vmTemplate = map(entity); collection.add(addLinks(populate(vmTemplate, entity))); } templates.getTemplates().addAll(collection); } else { templates.getTemplates().addAll(getCollection()); } return templates; }
java.lang.String selectedAffinityLabels();	java.lang.String selectItemLabel();
@javax.ws.rs.Path("{action: (end)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:end)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@org.ovirt.engine.ui.uicompat.DefaultMessage("{0} TiB") @org.ovirt.engine.ui.uicompat.AlternateMessage({ "BYTES", "{0} B", "KB", "{0} KiB", "MB", "{0} MiB", "GB", "{0} GiB", "TB", "{0} TiB" }) java.lang.String sizeUnitString(java.lang.String size, @org.ovirt.engine.ui.uicompat.Select org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit sizeUnit);	@org.ovirt.engine.ui.uicompat.DefaultMessage("{0} TiB") @org.ovirt.engine.ui.uicompat.AlternateMessage({ "BYTES", "{0} B", "KiB", "{0} KiB", "MiB", "{0} MiB", "GiB", "{0} GiB", "TiB", "{0} TiB" }) java.lang.String sizeUnitString(java.lang.String size, @org.ovirt.engine.ui.uicompat.Select org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit sizeUnit);
@java.lang.Override public boolean execute() { java.lang.String sessionId = getSessionId(); if (sessionId != null) { sendRequest(createRequest(), new org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.RestApiRequestCallback()); return true; } else { return false; } }	@java.lang.Override public boolean execute() { if ((restApiSessionId) != null) { sendRequest(createRequest(), new org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.RestApiRequestCallback()); return true; } else { return false; } }
public java.util.List<java.lang.Boolean> readBooleans() { return read(java.lang.Boolean.class); }	public java.util.List<java.lang.Boolean> readBooleans() { java.util.List<java.lang.Boolean> list = new java.util.ArrayList<>(); expect(JsonParser.Event.START_ARRAY); boolean listEnd = false; while (!listEnd) { javax.json.stream.JsonParser.Event next = next(); switch (next) { case VALUE_FALSE : list.add(false); break; case VALUE_TRUE : list.add(true); break; case END_ARRAY : listEnd = true; break; default : continue; } } return list; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicommonweb.models.hosts.ValueEventArgs<T> args) { org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIterator<T>.CallbackContext<T> context = ((org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIterator<T>.CallbackContext<T>) (ev.getContext())); org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIterator<T> iterator = context.getIterator(); org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIteratorPredicate<T> action = context.getAction(); T item = context.getItem(); java.lang.Object value = args.getValue(); boolean callComplete = false; if (action.match(item, value)) { callComplete = true; iterator.setStopped(true); } iterator.setCounter(((iterator.getCounter()) + 1)); if ((!(iterator.getStopped())) && ((iterator.getCounter()) == (org.ovirt.engine.ui.uicommonweb.Linq.count(iterator.getSource())))) { callComplete = true; } if (callComplete && ((iterator.getComplete()) != null)) { iterator.getComplete().run(item, value); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicommonweb.models.hosts.ValueEventArgs<T>> ev, java.lang.Object sender, org.ovirt.engine.ui.uicommonweb.models.hosts.ValueEventArgs<T> args) { org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIterator<T>.CallbackContext<T> context = ((org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIterator<T>.CallbackContext<T>) (ev.getContext())); org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIterator<T> iterator = context.getIterator(); org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIteratorPredicate<T> action = context.getAction(); T item = context.getItem(); java.lang.Object value = args.getValue(); boolean callComplete = false; if (action.match(item, value)) { callComplete = true; iterator.setStopped(true); } iterator.setCounter(((iterator.getCounter()) + 1)); if ((!(iterator.getStopped())) && ((iterator.getCounter()) == (org.ovirt.engine.ui.uicommonweb.Linq.count(iterator.getSource())))) { callComplete = true; } if (callComplete && ((iterator.getComplete()) != null)) { iterator.getComplete().run(item, value); } }
public static void init(final com.google.gwt.event.shared.EventBus eventBus) { org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.commonModel = org.ovirt.engine.ui.uicommonweb.models.CommonModel.newInstance(); org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.commonModel.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.common.uicommon.model.MainModelSelectionChangeEvent.fire(eventBus, org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.commonModel.getSelectedItem()); } }); }	public static void init(final com.google.gwt.event.shared.EventBus eventBus) { org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.commonModel = org.ovirt.engine.ui.uicommonweb.models.CommonModel.newInstance(); org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.commonModel.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.common.uicommon.model.MainModelSelectionChangeEvent.fire(eventBus, org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.commonModel.getSelectedItem()); } }); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VM vm) { if (((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) || ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingTo))) { return null; } return super.getValue(vm); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VM vm) { if ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) { return null; } return super.getValue(vm); }
@org.junit.Test public void peakLowerThanAverage() { qos.setInboundPeak(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_LOW); peakConsistentWithAverageTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_PEAK_LOWER_THAN_AVERAGE)); }	@org.junit.Test public void inboundPeakLowerThanAverage() { qos.setInboundPeak(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_LOW); qos.setOutboundPeak(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_HIGH); peakConsistentWithAverageTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_PEAK_LOWER_THAN_AVERAGE)); }
@java.lang.Override public org.ovirt.engine.core.common.asynctasks.AsyncTaskType getRevertTaskType() { return org.ovirt.engine.core.common.asynctasks.AsyncTaskType.deleteImage; }	@java.lang.Override public org.ovirt.engine.core.common.asynctasks.AsyncTaskType getRevertTaskType() { return null; }
@java.lang.Override public java.lang.Void runInTransaction() { for (final org.ovirt.engine.core.compat.Guid asyncTaskId : getReturnValue().getTaskPlaceHolderIdList()) { org.ovirt.engine.core.common.businessentities.AsyncTasks task = getAsyncTaskDao().get(asyncTaskId); if ((task != null) && (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(task.getVdsmTaskId()))) { org.ovirt.engine.core.bll.AsyncTaskManager.removeTaskFromDbByTaskId(task.getTaskId()); } } return null; }	@java.lang.Override public java.lang.Void runInTransaction() { for (org.ovirt.engine.core.compat.Guid asyncTaskId : getReturnValue().getTaskPlaceHolderIdList()) { org.ovirt.engine.core.common.businessentities.AsyncTasks task = getAsyncTaskDao().get(asyncTaskId); if ((task != null) && (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(task.getVdsmTaskId()))) { org.ovirt.engine.core.bll.AsyncTaskManager.removeTaskFromDbByTaskId(task.getTaskId()); } } return null; }
public void setInstanceTypeId(org.ovirt.engine.core.compat.NGuid instanceTypeId) { this.instanceTypeId = instanceTypeId; }	public void setInstanceTypeId(org.ovirt.engine.core.compat.Guid instanceTypeId) { this.instanceTypeId = instanceTypeId; }
@org.junit.Test public void testCanDoActionPoolInMaintenance() { getStoragePool().setStatus(StoragePoolStatus.Maintenance); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND); }	@org.junit.Test public void testCanDoActionDomainInMaintenance() { getDiskStorageDomain().setStatus(StorageDomainStatus.Maintenance); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL); }
public org.ovirt.engine.core.common.businessentities.ServerCpu findMaxServerCpuByFlags(java.lang.String flags, org.ovirt.engine.core.compat.Version ver);	public org.ovirt.engine.core.common.businessentities.ServerCpu findMaxServerCpuByFlags(java.lang.String flags, org.ovirt.engine.core.compat.Version ver) { final org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager cpuFlagsManager = org.ovirt.engine.core.bll.CpuFlagsManagerHandler._managersDictionary.get(ver); if (cpuFlagsManager != null) { return cpuFlagsManager.FindMaxServerCpuByFlags(flags); } return null; }
private void importHostedEngineVM(java.util.Map vmStruct) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmsDataFromExternalProvider(vmStruct); if (vm != null) { vm.setImages(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildDiskImagesFromDevices(vmStruct)); vm.setInterfaces(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmNetworkInterfacesFromDevices(vmStruct)); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : vm.getImages()) { vm.getDiskMap().put(org.ovirt.engine.core.compat.Guid.newGuid(), diskImage); } vm.setVdsGroupId(org.ovirt.engine.core.bll.AddExternalVmsCommand.getVdsGroupId()); vm.setRunOnVds(org.ovirt.engine.core.bll.AddExternalVmsCommand.getVdsId()); importHostedEngineVm(vm); } }	private void importHostedEngineVM(java.util.Map<java.lang.String, java.lang.Object> vmStruct) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmsDataFromExternalProvider(vmStruct); if (vm != null) { vm.setImages(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildDiskImagesFromDevices(vmStruct)); vm.setInterfaces(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmNetworkInterfacesFromDevices(vmStruct)); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : vm.getImages()) { vm.getDiskMap().put(org.ovirt.engine.core.compat.Guid.newGuid(), diskImage); } vm.setVdsGroupId(org.ovirt.engine.core.bll.AddUnmanagedVmsCommand.getVdsGroupId()); vm.setRunOnVds(org.ovirt.engine.core.bll.AddUnmanagedVmsCommand.getVdsId()); importHostedEngineVm(vm); } }
private void init() { leftBound.setEntity(((macRange.getMacFrom()) == null ? "" : macRange.getMacFrom())); rightBound.setEntity(((macRange.getMacTo()) == null ? "" : macRange.getMacTo())); recalculateMacsCount(); leftBound.getEntityChangedEvent().addListener(( ev, sender, args) -> onMacRangeChange()); rightBound.getEntityChangedEvent().addListener(( ev, sender, args) -> onMacRangeChange()); }	private void init() { leftBound.setEntity(((macRange.getMacFrom()) == null ? "" : macRange.getMacFrom())); rightBound.setEntity(((macRange.getMacTo()) == null ? "" : macRange.getMacTo())); recalculateMacsCount(); }
private java.lang.String getEffectiveEmulatedMachine() { if ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomEmulatedMachine()) != null) { return org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomEmulatedMachine(); } java.lang.String recentDefault = org.ovirt.engine.core.bll.RunVmCommand.getCluster().getEmulatedMachine(); if ((removeThisDebugSwitch) && ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomCompatibilityVersion()) != null)) { java.util.List<java.lang.String> oldSupported = org.ovirt.engine.core.common.config.Config.<java.util.List<java.lang.String>>getValue(ConfigValues.ClusterEmulatedMachines, org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomCompatibilityVersion().getValue()); java.util.Optional<java.lang.String> best = oldSupported.stream().max(( s1, s2) -> (org.apache.commons.lang.StringUtils.indexOfDifference(recentDefault, s1)) - (org.apache.commons.lang.StringUtils.indexOfDifference(recentDefault, s2))); org.ovirt.engine.core.bll.RunVmCommand.log.info("Emulated machine '{}' selected since Custom Compatibility Version is set for the '{}' VM", best.orElse(recentDefault), org.ovirt.engine.core.bll.RunVmCommand.getVm().getName()); return best.orElse(recentDefault); } return recentDefault; }	protected java.lang.String getEffectiveEmulatedMachine() { if ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomEmulatedMachine()) != null) { return org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomEmulatedMachine(); } java.lang.String recentClusterDefault = org.ovirt.engine.core.bll.RunVmCommand.getCluster().getEmulatedMachine(); if ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomCompatibilityVersion()) == null) { return recentClusterDefault; } java.util.List<java.lang.String> oldSupported = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.ClusterEmulatedMachines, org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomCompatibilityVersion().getValue()); java.util.Optional<java.lang.String> best = oldSupported.stream().max(( s1, s2) -> (org.apache.commons.lang.StringUtils.indexOfDifference(recentClusterDefault, s1)) - (org.apache.commons.lang.StringUtils.indexOfDifference(recentClusterDefault, s2))); org.ovirt.engine.core.bll.RunVmCommand.log.info("Emulated machine '{}' selected since Custom Compatibility Version is set for '{}'", best.orElse(recentClusterDefault), org.ovirt.engine.core.bll.RunVmCommand.getVm()); return best.orElse(recentClusterDefault); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.storage.LUNs dummyLun = createDummyLun(); org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap connectionMapRecord = new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap(dummyLun.getLUN_id(), org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getParameters().getStorageConnectionId()); java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connectionsForDomain; if ((getLunDao().get(dummyLun.getLUN_id())) == null) { getLunDao().save(dummyLun); connectionsForDomain = getStorageServerConnectionDao().getAllForDomain(org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getStorageDomainId()); for (org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : connectionsForDomain) { saveConnection(new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap(dummyLun.getLUN_id(), connection.getid())); } } saveConnection(connectionMapRecord); org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.storage.LUNs dummyLun = createDummyLun(); org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap connectionMapRecord = new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap(dummyLun.getLUN_id(), org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getParameters().getStorageConnectionId()); java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connectionsForDomain; if ((org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getLunDao().get(dummyLun.getLUN_id())) == null) { org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getLunDao().save(dummyLun); connectionsForDomain = org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getStorageServerConnectionDao().getAllForDomain(org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getStorageDomainId()); for (org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : connectionsForDomain) { saveConnection(new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap(dummyLun.getLUN_id(), connection.getid())); } } saveConnection(connectionMapRecord); org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.setSucceeded(true); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.ActionVersionMap> getAllActionVersionMap() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource(); return getCallsHandler().executeReadList("GetAllFromaction_version_map", org.ovirt.engine.core.dao.ActionGroupDAOImpl.ActionVersionMapMapper.instance, parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.ActionVersionMap> getAllActionVersionMap() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource(); return getCallsHandler().executeReadList("GetAllFromaction_version_map", org.ovirt.engine.core.dao.ActionGroupDaoImpl.ActionVersionMapMapper.instance, parameterSource); }
@java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.bll.storage.domains.StorageDomainCommandBase.proceedLUNInDb(lun, lun.getLunType()); getBaseDiskDao().save(getParameters().getDiskInfo()); getDiskLunMapDao().save(new org.ovirt.engine.core.common.businessentities.storage.DiskLunMap(getParameters().getDiskInfo().getId(), lun.getLUN_id())); if ((getVm()) != null) { addManagedDeviceForDisk(getParameters().getDiskInfo().getId(), ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (getParameters().getDiskInfo())).isUsingScsiReservation()); } return null; }	@java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.proceedLUNInDb(lun, lun.getLunType()); getBaseDiskDao().save(getParameters().getDiskInfo()); getDiskLunMapDao().save(new org.ovirt.engine.core.common.businessentities.storage.DiskLunMap(getParameters().getDiskInfo().getId(), lun.getLUN_id())); if ((getVm()) != null) { addManagedDeviceForDisk(getParameters().getDiskInfo().getId(), ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (getParameters().getDiskInfo())).isUsingScsiReservation()); } return null; }
@java.lang.Override protected boolean canDoAction() { boolean returnValue = true; if (((org.ovirt.engine.core.bll.RemoveTagCommand.getTagId()) == null) || ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().get(org.ovirt.engine.core.bll.RemoveTagCommand.getTagId())) == null)) { addCanDoActionMessage(EngineMessages.TAGS_CANNOT_REMOVE_TAG_NOT_EXIST); returnValue = false; } return returnValue; }	@java.lang.Override protected boolean canDoAction() { boolean returnValue = true; if (((org.ovirt.engine.core.bll.RemoveTagCommand.getTagId()) == null) || ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().get(org.ovirt.engine.core.bll.RemoveTagCommand.getTagId())) == null)) { addCanDoActionMessage(EngineMessage.TAGS_CANNOT_REMOVE_TAG_NOT_EXIST); returnValue = false; } return returnValue; }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.bll.aaa.RemoveGroupCommand.getParameters().getId(); if (isLastSuperUserGroup(id)) { addCanDoActionMessage(EngineMessages.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE); return false; } if (MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID.equals(id)) { addCanDoActionMessage(EngineMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_BUILTIN_GROUP_EVERYONE); return false; } return true; }	@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.bll.aaa.RemoveGroupCommand.getParameters().getId(); if (isLastSuperUserGroup(id)) { addCanDoActionMessage(EngineMessage.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE); return false; } if (MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID.equals(id)) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_BUILTIN_GROUP_EVERYONE); return false; } return true; }
protected void mapFileDomain(org.ovirt.engine.api.model.StorageDomain model, org.ovirt.engine.core.common.businessentities.StorageDomain entity) { final org.ovirt.engine.api.model.Storage storage = model.getStorage(); org.ovirt.engine.core.common.businessentities.StorageServerConnections cnx = getStorageServerConnection(entity.getStorage()); if (cnx.getconnection().contains(":")) { java.lang.String[] parts = cnx.getconnection().split(":"); model.getStorage().setAddress(parts[0]); model.getStorage().setPath(parts[1]); } else { model.getStorage().setPath(cnx.getconnection()); } storage.setMountOptions(cnx.getMountOptions()); storage.setVfsType(cnx.getVfsType()); if ((entity.getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.NFS)) { if ((cnx.getNfsRetrans()) != null) { storage.setNfsRetrans(cnx.getNfsRetrans().intValue()); } if ((cnx.getNfsTimeo()) != null) { storage.setNfsTimeo(cnx.getNfsTimeo().intValue()); } if ((cnx.getNfsVersion()) != null) { storage.setNfsVersion(org.ovirt.engine.api.restapi.types.StorageDomainMapper.map(cnx.getNfsVersion(), null)); } } }	protected void mapFileDomain(org.ovirt.engine.api.model.StorageDomain model, org.ovirt.engine.core.common.businessentities.StorageDomain entity) { final org.ovirt.engine.api.model.Storage storage = model.getStorage(); org.ovirt.engine.core.common.businessentities.StorageServerConnections cnx = getStorageServerConnection(entity.getStorage()); if (cnx.getconnection().contains(":")) { java.lang.String[] parts = cnx.getconnection().split(":"); storage.setAddress(parts[0]); storage.setPath(parts[1]); } else { storage.setPath(cnx.getconnection()); } storage.setMountOptions(cnx.getMountOptions()); storage.setVfsType(cnx.getVfsType()); if ((entity.getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.NFS)) { if ((cnx.getNfsRetrans()) != null) { storage.setNfsRetrans(cnx.getNfsRetrans().intValue()); } if ((cnx.getNfsTimeo()) != null) { storage.setNfsTimeo(cnx.getNfsTimeo().intValue()); } if ((cnx.getNfsVersion()) != null) { storage.setNfsVersion(org.ovirt.engine.api.restapi.types.StorageDomainMapper.map(cnx.getNfsVersion(), null)); } } }
@org.ovirt.api.metamodel.annotations.In java.lang.Boolean volatile_();	@org.ovirt.api.metamodel.annotations.In java.lang.Boolean _volatile();
public org.ovirt.engine.core.bll.ValidationResult isPosixSupportedInDC() { if ((!(storagePool.isLocal())) && (!(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.PosixStorageEnabled, storagePool.getCompatibilityVersion().toString())))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.DATA_CENTER_POSIX_STORAGE_NOT_SUPPORTED_IN_CURRENT_VERSION); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult isPosixSupportedInDC() { if ((!(storagePool.isLocal())) && (!(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.PosixStorageEnabled, storagePool.getCompatibilityVersion().toString())))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.DATA_CENTER_POSIX_STORAGE_NOT_SUPPORTED_IN_CURRENT_VERSION); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public static org.ovirt.engine.core.common.validation.MaskValidator getInstance() { return org.ovirt.engine.core.common.validation.MaskValidator.validator; }	public static org.ovirt.engine.core.common.validation.MaskValidator getInstance() { return org.ovirt.engine.core.common.validation.MaskValidator.INSTANCE; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookUpdate(java.lang.String url, java.lang.String bearerToken) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookUpdate").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookUpdate(java.lang.String url, java.lang.String bearerToken) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookUpdate").withParameter("url", url).withParameter("bearerToken", bearerToken).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsHighPendingButSwapHelps() { vds.setSwapFree(80L); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, true); }	@org.junit.Test public void validateVmMemoryCanStartOnVdsHighPendingButSwapHelps() { vds.setSwapFree(80L); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 65); assertTrue(vmPassedMemoryRequirement); }
@org.junit.Test public void testMutliKeys() throws java.lang.Exception { assertTrue(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isPublicKeysValid(((((org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.EXTRA_SSH_KEYS[0]) + "\n") + (org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.EXTRA_SSH_KEYS[1])) + "\n"))); assertTrue(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isPublicKeysValid((((org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.EXTRA_SSH_KEYS[0]) + "\n") + (org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.EXTRA_SSH_KEYS[1])))); assertTrue(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isPublicKeysValid(((org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.EXTRA_SSH_KEYS[0]) + "\n"))); assertTrue(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isPublicKeysValid(org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.EXTRA_SSH_KEYS[0])); }	@org.junit.Test public void testMutliKeys() throws java.lang.Exception { assertTrue(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.arePublicKeysValid(((((org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.EXTRA_SSH_KEYS[0]) + "\n") + (org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.EXTRA_SSH_KEYS[1])) + "\n"))); assertTrue(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.arePublicKeysValid((((org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.EXTRA_SSH_KEYS[0]) + "\n") + (org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.EXTRA_SSH_KEYS[1])))); assertTrue(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.arePublicKeysValid(((org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.EXTRA_SSH_KEYS[0]) + "\n"))); assertTrue(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.arePublicKeysValid(org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.EXTRA_SSH_KEYS[0])); }
protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntityPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase) { if ((phase == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.PAUSED_SYSTEM)) && ((pausedBySystemReason) != null)) { auditLog(this, pausedBySystemReason); } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); updates.setPhase(phase); return updateEntity(updates); }	protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntityPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); updates.setPhase(phase); return updateEntity(updates); }
private boolean isProviderReadOnly(org.ovirt.engine.core.common.businessentities.Provider provider) { if ((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.EXTERNAL_NETWORK)) { org.ovirt.engine.core.common.businessentities.ExternalNetworkProviderProperties properties = ((org.ovirt.engine.core.common.businessentities.ExternalNetworkProviderProperties) (provider.getAdditionalProperties())); if (properties.getReadOnly()) { return true; } } return false; }	private boolean isExternalNetworkProviderReadOnly(org.ovirt.engine.core.common.businessentities.Provider provider) { if ((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.EXTERNAL_NETWORK)) { org.ovirt.engine.core.common.businessentities.ExternalNetworkProviderProperties properties = ((org.ovirt.engine.core.common.businessentities.ExternalNetworkProviderProperties) (provider.getAdditionalProperties())); if (properties.getReadOnly()) { return true; } } return false; }
com.google.gwt.user.cellview.client.Header<?> createHeader(com.google.gwt.user.cellview.client.Column<T, ?> column, java.lang.String headerTextOrHtml, boolean allowHtml) { com.google.gwt.safehtml.shared.SafeHtml text = (allowHtml) ? com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(headerTextOrHtml) : com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(headerTextOrHtml); return columnResizingEnabled ? new org.ovirt.engine.ui.common.widget.table.resize.ResizableHeader<T>(text, column, this) : createSafeHtmlHeader(text); }	com.google.gwt.user.cellview.client.Header<?> createHeader(com.google.gwt.user.cellview.client.Column<T, ?> column, java.lang.String headerTextOrHtml, boolean allowHtml) { com.google.gwt.safehtml.shared.SafeHtml headerHtml = (allowHtml) ? com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(headerTextOrHtml) : com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(headerTextOrHtml); return createHeader(column, headerHtml); }
public org.ovirt.engine.ui.uicommonweb.models.ListModel flush() { org.ovirt.engine.ui.uicommonweb.models.ListModel model = driver.flush(); flush(model); return model; }	public org.ovirt.engine.ui.uicommonweb.models.ListModel flush() { return driver.flush(); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getDismissCommand())) { dismissAlert(); } else if (command == (getDisplayAllCommand())) { displayAllDismissedAlerts(); } else if (command == (getClearAllCommand())) { clearAllDismissedAlerts(); } }	@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getDismissCommand())) { dismissAlert(); } else if (command == (getDisplayAllCommand())) { displayAllAlerts(); } else if (command == (getClearAllCommand())) { clearAllAlerts(); } }
public static java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> updateInitiators(java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> conns, org.ovirt.engine.core.compat.Guid vdsId) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> res = new java.util.ArrayList(conns); for (org.ovirt.engine.core.common.businessentities.StorageServerConnections conn : conns) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> initiators = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getInterfaceDao().getIscsiInitiatorsByVdsIdAndStorageTargetId(vdsId, conn.getid()); if ((initiators != null) && (!(initiators.isEmpty()))) { conn.setInitiatorName(initiators.remove(0).getName()); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface initiator : initiators) { org.ovirt.engine.core.common.businessentities.StorageServerConnections newConn = org.ovirt.engine.core.common.businessentities.StorageServerConnections.copyOf(conn); newConn.setid(org.ovirt.engine.core.compat.Guid.newGuid().toString()); newConn.setInitiatorName(initiator.getName()); res.add(newConn); } } } return res; }	public static java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> updateIfaces(java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> conns, org.ovirt.engine.core.compat.Guid vdsId) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> res = new java.util.ArrayList(conns); for (org.ovirt.engine.core.common.businessentities.StorageServerConnections conn : conns) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ifaces = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getInterfaceDao().getIscsiIfacesByHostIdAndStorageTargetId(vdsId, conn.getid()); if (!(ifaces.isEmpty())) { conn.setIface(ifaces.remove(0).getName()); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : ifaces) { org.ovirt.engine.core.common.businessentities.StorageServerConnections newConn = org.ovirt.engine.core.common.businessentities.StorageServerConnections.copyOf(conn); newConn.setid(org.ovirt.engine.core.compat.Guid.newGuid().toString()); newConn.setIface(iface.getName()); res.add(newConn); } } } return res; }
@java.lang.Override public boolean isDisplayNetworkToBeChanged(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2) { final org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel bondNetworkInterfaceModel1 = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel) (op1)); final org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel bondNetworkInterfaceModel2 = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel) (op2)); return (org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.isDisplayNetworkAttached(bondNetworkInterfaceModel1.getItems())) || (org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.isDisplayNetworkAttached(bondNetworkInterfaceModel2.getItems())); }	@java.lang.Override public boolean isDisplayNetworkAffected(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2) { return org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.isDisplayNetworkAttached(((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (op1)), ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (op2))); }
@java.lang.Override protected void perform() { if (isColdReboot()) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.ShutdownVm, org.ovirt.engine.core.bll.RebootVmCommand.withRootCommandInfo(new org.ovirt.engine.core.common.action.ShutdownVmParameters(org.ovirt.engine.core.bll.RebootVmCommand.getVmId(), false)), org.ovirt.engine.core.bll.RebootVmCommand.cloneContextAndDetachFromParent()); org.ovirt.engine.core.bll.RebootVmCommand.setSucceeded(true); } else { final org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.RebootVm, new org.ovirt.engine.core.common.vdscommands.VdsAndVmIDVDSParametersBase(org.ovirt.engine.core.bll.RebootVmCommand.getVdsId(), org.ovirt.engine.core.bll.RebootVmCommand.getVmId())); setActionReturnValue(returnValue.getReturnValue()); setSucceeded(returnValue.getSucceeded()); } }	@java.lang.Override protected void perform() { if (isColdReboot()) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalAction(VdcActionType.ShutdownVm, new org.ovirt.engine.core.common.action.ShutdownVmParameters(org.ovirt.engine.core.bll.RebootVmCommand.getVmId(), false)); setReturnValue(returnValue); setSucceeded(returnValue.getSucceeded()); if (org.ovirt.engine.core.bll.RebootVmCommand.getSucceeded()) { resourceManager.getVmManager(org.ovirt.engine.core.bll.RebootVmCommand.getVmId()).setColdReboot(true); } } else { final org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.RebootVm, new org.ovirt.engine.core.common.vdscommands.VdsAndVmIDVDSParametersBase(org.ovirt.engine.core.bll.RebootVmCommand.getVdsId(), org.ovirt.engine.core.bll.RebootVmCommand.getVmId())); setActionReturnValue(returnValue.getReturnValue()); setSucceeded(returnValue.getSucceeded()); } }
private boolean validate() { getName().validateEntity(createNameValidations()); getType().validateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); getUsername().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); getPassword().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); getTenantName().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); getUrl().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.UrlValidation(org.ovirt.engine.ui.uicommonweb.Uri.SCHEME_HTTP, org.ovirt.engine.ui.uicommonweb.Uri.SCHEME_HTTPS) }); getNeutronAgentModel().validate(); return ((((((getName().getIsValid()) && (getType().getIsValid())) && (getUrl().getIsValid())) && (getUsername().getIsValid())) && (getPassword().getIsValid())) && (getTenantName().getIsValid())) && (getNeutronAgentModel().getIsValid()); }	private boolean validate() { getName().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.AsciiNameValidation() }); getType().validateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); getNeutronAgentModel().validate(); boolean connectionSettingsValid = validateConnectionSettings(); return ((connectionSettingsValid && (getName().getIsValid())) && (getType().getIsValid())) && (getNeutronAgentModel().getIsValid()); }
private void importChain() { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.ImportProviderCertificate, new org.ovirt.engine.core.common.action.ImportProviderCertificateParameters(provider, certificate), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue(); if ((res != null) && (res.getSucceeded())) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TestProviderConnectivity, new org.ovirt.engine.core.common.action.ProviderParameters(provider), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue(); setTestResultValue(res); stopProgress(); } }, null, false); } else { setTestResultValue(res); stopProgress(); } } }); sourceListModel.setConfirmWindow(null); }	private void importCertificate() { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.ImportProviderCertificate, importCertificateParams(), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { testProviderConnectivity(); } }, null, false); sourceListModel.setConfirmWindow(null); }
@java.lang.Override protected boolean canDoAction() { return validate(networkNotAttachedToCluster(org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getParameters().getNetwork())); }	@java.lang.Override protected boolean canDoAction() { return validate(networkNotAttachedToCluster(org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getNetwork())); }
public boolean check(final org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters.PollTechnique pt = (org.ovirt.engine.core.common.FeatureSupported.isPing2SupportedByVdsm(host.getClusterCompatibilityVersion())) ? POLL2 : POLL; org.ovirt.engine.core.bll.network.host.HostPoller poller = new org.ovirt.engine.core.bll.network.host.HostPoller(new org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters(host.getId(), pt)); final long startTime = java.lang.System.nanoTime(); while (((java.lang.System.nanoTime()) - startTime) < (org.ovirt.engine.core.bll.host.HostConnectivityChecker.VDSM_RESPONSIVENESS_PERIOD_IN_NANOS)) { if (poller.poll()) { org.ovirt.engine.core.bll.host.HostConnectivityChecker.log.info("Engine managed to communicate with VDSM agent on host '{}' with address '{}' ('{}')", host.getName(), host.getHostName(), host.getId()); return true; } } return false; }	public boolean check(final org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters.PollTechnique pollTechnique = (org.ovirt.engine.core.common.FeatureSupported.isPing2SupportedByVdsm(host.getClusterCompatibilityVersion())) ? POLL2 : POLL; org.ovirt.engine.core.bll.network.host.HostPoller poller = new org.ovirt.engine.core.bll.network.host.HostPoller(new org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters(host.getId(), pollTechnique)); final long startTime = java.lang.System.nanoTime(); while (((java.lang.System.nanoTime()) - startTime) < (org.ovirt.engine.core.bll.host.HostConnectivityChecker.VDSM_RESPONSIVENESS_PERIOD_IN_NANOS)) { if (poller.poll()) { org.ovirt.engine.core.bll.host.HostConnectivityChecker.log.info("Engine managed to communicate with VDSM agent on host '{}' with address '{}' ('{}')", host.getName(), host.getHostName(), host.getId()); return true; } } return false; }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessages.VAR__ACTION__REMOVE); addCanDoActionMessage(EngineMessages.VAR__TYPE__PERMISSION); }	@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__REMOVE); addCanDoActionMessage(EngineMessage.VAR__TYPE__PERMISSION); }
public org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmPopupWidgetConfig withSpecialMark() { return new org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmPopupWidgetConfig(advancedOnly, alwaysHidden, true, adminOnly); }	public org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig withSpecialMark() { return new org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig(advancedOnly, alwaysHidden, true, adminOnly); }
@org.junit.Test public void validateValidate() { setupForStorageTests(); assertTrue(command.validate()); }	@org.junit.Test public void validate() { setupForStorageTests(); assertTrue(command.validate()); }
private void closeConfirmationWindow() { getConfirmWindow().stopProgress(); setConfirmWindow(null); }	private void closeConfirmationWindow() { if ((getConfirmWindow()) == null) { return; } getConfirmWindow().stopProgress(); setConfirmWindow(null); }
@org.junit.Test public void updateConnectionOfUnattachedFileDomain() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0); org.ovirt.engine.core.common.businessentities.StorageDomain domain1 = new org.ovirt.engine.core.common.businessentities.StorageDomain(); domain1.setStorage(newNFSConnection.getConnection()); domain1.setStatus(StorageDomainStatus.Unknown); domain1.setStorageDomainSharedStatus(StorageDomainSharedStatus.Unattached); initDomainListForConnection(newNFSConnection.geIid(), domain1); parameters.setStorageServerConnection(newNFSConnection); when(storageConnDao.get(newNFSConnection.geIid())).thenReturn(oldNFSConnection); doReturn(false).when(command).isConnWithSameDetailsExists(newNFSConnection, null); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); }	@org.junit.Test public void updateConnectionOfUnattachedFileDomain() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0); org.ovirt.engine.core.common.businessentities.StorageDomain domain1 = new org.ovirt.engine.core.common.businessentities.StorageDomain(); domain1.setStorage(newNFSConnection.getConnection()); domain1.setStatus(StorageDomainStatus.Unknown); domain1.setStorageDomainSharedStatus(StorageDomainSharedStatus.Unattached); initDomainListForConnection(newNFSConnection.getId(), domain1); parameters.setStorageServerConnection(newNFSConnection); when(storageConnDao.get(newNFSConnection.getId())).thenReturn(oldNFSConnection); doReturn(false).when(command).isConnWithSameDetailsExists(newNFSConnection, null); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); }
private void logTaskStoppedFromCLI(org.ovirt.engine.core.common.job.Step step, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity vol) { org.ovirt.engine.core.common.AuditLogType logType; switch (step.getStepType()) { case REBALANCING_VOLUME : logType = org.ovirt.engine.core.common.AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP_DETECTED_FROM_CLI; break; case REMOVING_BRICKS : logType = org.ovirt.engine.core.common.AuditLogType.STOP_REMOVING_GLUSTER_VOLUME_BRICKS_DETECTED_FROM_CLI; break; default : logType = org.ovirt.engine.core.common.AuditLogType.UNASSIGNED; break; } getGlusterLogUtil().logAuditMessage(vol.getClusterId(), vol, null, logType, null); }	private void logTaskStoppedFromCLI(org.ovirt.engine.core.common.job.Step step, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity vol) { org.ovirt.engine.core.common.AuditLogType logType; switch (step.getStepType()) { case REBALANCING_VOLUME : logType = org.ovirt.engine.core.common.AuditLogType.GLUSTER_VOLUME_REBALANCE_NOT_FOUND_FROM_CLI; break; case REMOVING_BRICKS : logType = org.ovirt.engine.core.common.AuditLogType.REMOVE_GLUSTER_VOLUME_BRICKS_NOT_FOUND_FROM_CLI; break; default : logType = org.ovirt.engine.core.common.AuditLogType.UNASSIGNED; break; } getGlusterLogUtil().logAuditMessage(vol.getClusterId(), vol, null, logType, null); }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (getEntity())); @java.lang.SuppressWarnings("unchecked") java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoImage> selectedImages = ((getSelectedItems()) != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoImage>) (getSelectedItems())) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoImage>(); getDownloadImagesCommand().setIsExecutionAllowed((((storageDomain != null) && ((storageDomain.getStorageType()) == (org.ovirt.engine.core.common.businessentities.StorageType.GLANCE))) && ((selectedImages.size()) > 0))); }	private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (getEntity())); @java.lang.SuppressWarnings("unchecked") java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoImage> selectedImages = ((getSelectedItems()) != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoImage>) (getSelectedItems())) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoImage>(); getImportImagesCommand().setIsExecutionAllowed((((storageDomain != null) && ((storageDomain.getStorageType()) == (org.ovirt.engine.core.common.businessentities.StorageType.GLANCE))) && ((selectedImages.size()) > 0))); }
@java.lang.Override protected javax.ws.rs.core.Response performRemove(java.lang.String id) { return javax.ws.rs.core.Response.serverError().build(); }	@java.lang.Override protected javax.ws.rs.core.Response performRemove(java.lang.String id) { throw new java.lang.UnsupportedOperationException(); }
@org.junit.Test public void testImportVMFromConfigurationXMLCouldNotGetParsed() { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntity = getOvfEntityData(); ovfEntity.setOvfData("This is not a valid XML"); initCommand(ovfEntity); java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> ovfEntityDataList = new java.util.ArrayList<>(); ovfEntityDataList.add(ovfEntity); when(unregisteredOVFDataDao.getByEntityIdAndStorageDomain(vmId, storageDomainId)).thenReturn(ovfEntityDataList); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyList())).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessages.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED); }	@org.junit.Test public void testImportVMFromConfigurationXMLCouldNotGetParsed() { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntity = getOvfEntityData(); ovfEntity.setOvfData("This is not a valid XML"); initCommand(ovfEntity); java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> ovfEntityDataList = new java.util.ArrayList<>(); ovfEntityDataList.add(ovfEntity); when(unregisteredOVFDataDao.getByEntityIdAndStorageDomain(vmId, storageDomainId)).thenReturn(ovfEntityDataList); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyList())).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED); }
@org.ovirt.engine.ui.uicompat.DefaultMessage("Direct LUN disk(s) will not be a part of the cloned VM: {0}.") java.lang.String directLUNDisksWillNotBePartOfTheClone(java.lang.String diskList);	@org.ovirt.engine.ui.uicompat.DefaultMessage("Network couldn''t be assigned to ''{0}'' via label ''{1}''.") java.lang.String networkLabelConflict(java.lang.String nicName, java.lang.String labelName);
@org.junit.Test public void testUpdateNetworkInfo() { when(mockTargetVnicProfileFinder.findTargetVnicProfile(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME, externalVnicProfileMappings)).thenReturn(optionalVnicProfile); when(mockNetworkDao.get(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_ID)).thenReturn(targetNetwork); underTest.updateNetworkInfo(mockVmNetworkInterface, externalVnicProfileMappings); verify(mockTargetVnicProfileFinder).findTargetVnicProfile(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME, externalVnicProfileMappings); verify(mockVmNetworkInterface).setVnicProfileId(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_ID); verify(mockVmNetworkInterface).setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME); verify(mockVmNetworkInterface).setNetworkName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_NAME); }	@org.junit.Test public void testUpdateNetworkInfo() { when(mockExternalVnicProfileMappingFinder.findMappingEntry(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME, externalVnicProfileMappings)).thenReturn(java.util.Optional.of(createMappingEntry(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_ID))); when(mockNetworkDao.get(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_ID)).thenReturn(targetNetwork); underTest.updateNetworkInfo(mockVmNetworkInterface, externalVnicProfileMappings); verify(mockExternalVnicProfileMappingFinder).findMappingEntry(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME, externalVnicProfileMappings); verify(mockVmNetworkInterface).setVnicProfileId(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_ID); verify(mockVmNetworkInterface).setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME); verify(mockVmNetworkInterface).setNetworkName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_NAME); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Bricks") java.lang.String hostBricksTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Bricks") java.lang.String hostBricksTitle();
public void initWidget() { com.google.gwt.user.client.Element dragger = findElementByClassName(this.getElement(), "gwt-SplitLayoutPanel-VDragger"); if (dragger != null) { dragger.setInnerHTML(org.ovirt.engine.ui.userportal.widget.extended.ExtendedViewSplitLayoutPanel.template.dragger(middleBackgroundImage).asString()); } }	public void init() { com.google.gwt.user.client.Element dragger = findElementByClassName(this.getElement(), "gwt-SplitLayoutPanel-VDragger"); if (dragger != null) { dragger.setInnerHTML(org.ovirt.engine.ui.userportal.widget.extended.ExtendedViewSplitLayoutPanel.template.dragger(middleBackgroundImage).asString()); } }
@java.lang.Override protected boolean validate() { if (!(checkRemoveEditValidations())) { return false; } if ((getVdsGroupDao().getClustersByClusterPolicyId(getParameters().getClusterPolicyId()).size()) > 0) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_POLICY_INUSE, java.lang.String.format("$clusters %1$s", clustersListIntoTokenizedString())); } return true; }	@java.lang.Override protected boolean validate() { if (!(checkRemoveEditValidations())) { return false; } if ((getVdsGroupDao().getClustersByClusterPolicyId(getParameters().getClusterPolicyId()).size()) > 0) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_POLICY_INUSE, java.lang.String.format("$clusters %1$s", clustersListIntoTokenizedString())); } return true; }
protected java.lang.String getLocaleStringFromReferer(final javax.servlet.http.HttpServletRequest request) { final java.net.URI refererURL; java.lang.String result = null; try { java.lang.String referer = request.getHeader(org.ovirt.engine.core.DocsServlet.REFERER); if (null != referer) { refererURL = new java.net.URI(referer); java.lang.String query = refererURL.getQuery(); if (null != query) { java.lang.String[] parameters = query.split("&"); for (int i = 0; i < (parameters.length); i++) { java.lang.String[] keyValues = parameters[i].split("="); if (org.ovirt.engine.core.DocsServlet.LOCALE.equalsIgnoreCase(keyValues[0])) { result = keyValues[1]; break; } } } } } catch (java.net.URISyntaxException e) { org.ovirt.engine.core.DocsServlet.log.error("Unable to determine referer URI", e); } return result; }	protected java.lang.String getLocaleStringFromReferer(final javax.servlet.http.HttpServletRequest request) { final java.net.URI refererURL; java.lang.String result = null; try { java.lang.String referer = request.getHeader(org.ovirt.engine.core.DocsServlet.REFERER); if (referer != null) { refererURL = new java.net.URI(referer); java.lang.String query = refererURL.getQuery(); if (query != null) { java.lang.String[] parameters = query.split("&"); for (int i = 0; i < (parameters.length); i++) { java.lang.String[] keyValues = parameters[i].split("="); if (org.ovirt.engine.core.DocsServlet.LOCALE.equalsIgnoreCase(keyValues[0])) { result = keyValues[1]; break; } } } } } catch (java.net.URISyntaxException e) { org.ovirt.engine.core.DocsServlet.log.error("Unable to determine referer URI", e); } return result; }
public void write(java.io.File outDir) throws java.io.IOException { java.io.File packageDir = new java.io.File(outDir, className.getPackageName().replace('.', java.io.File.separatorChar)); org.apache.commons.io.FileUtils.forceMkdir(packageDir); if (!(packageDir.exists())) { if (!(packageDir.mkdirs())) { throw new java.io.IOException((("Can\'t create directory \"" + (packageDir.getAbsolutePath())) + "\"")); } } java.io.File classFile = new java.io.File(packageDir, ((className.getSimpleName()) + ".java")); java.lang.System.out.println((("Writing class file \"" + (classFile.getAbsolutePath())) + "\".")); try (java.io.Writer writer = new java.io.FileWriter(classFile)) { writer.write(toString()); } }	public void write(java.io.File outDir) throws java.io.IOException { java.io.File packageDir = new java.io.File(outDir, className.getPackageName().replace('.', java.io.File.separatorChar)); org.apache.commons.io.FileUtils.forceMkdir(packageDir); if (!(packageDir.exists())) { if (!(packageDir.mkdirs())) { throw new java.io.IOException((("Can\'t create directory \"" + (packageDir.getAbsolutePath())) + "\"")); } } java.io.File classFile = new java.io.File(packageDir, ((className.getSimpleName()) + ".java")); java.lang.System.out.println((("Writing class file \"" + (classFile.getAbsolutePath())) + "\".")); try (java.io.Writer writer = new java.io.OutputStreamWriter(new java.io.FileOutputStream(classFile), java.nio.charset.Charset.forName("UTF-8"))) { writer.write(toString()); } }
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm()) == null) { return failCanDoAction(EngineMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND); } return true; }	@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } return true; }
com.google.gwt.user.cellview.client.Column<T, ?> getColumn() { return column; }	@com.google.gwt.uibinder.client.UiHandler("container") void onDrop(com.google.gwt.event.dom.client.DropEvent event) { event.preventDefault(); int draggedColumnIndex = controller.getDragIndex(); int itemColumnIndex = controller.getColumnIndex(column); if (draggedColumnIndex != itemColumnIndex) { controller.swapColumns(controller.getColumn(draggedColumnIndex), column); } controller.setDragIndex(ColumnController.NO_DRAG); }
java.lang.String getName();	int getMinAllocatedMem();
private void addNetworkUsages(org.ovirt.engine.api.model.VersionCaps version, org.ovirt.engine.api.restapi.types.NetworkUsage[] values) { if (org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual(version, org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_1)) { version.setNetworkUsages(new org.ovirt.engine.api.model.NetworkUsages()); for (org.ovirt.engine.api.restapi.types.NetworkUsage networkUsage : values) { version.getNetworkUsages().getNetworkUsages().add(networkUsage.value()); } } }	private void addNetworkUsages(org.ovirt.engine.api.model.VersionCaps version, org.ovirt.engine.api.restapi.types.NetworkUsage[] values) { if (org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual(version, org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_1)) { version.setUsages(new org.ovirt.engine.api.model.Usages()); for (org.ovirt.engine.api.restapi.types.NetworkUsage usage : values) { version.getUsages().getUsages().add(usage.value()); } } }
org.ovirt.engine.core.bll.VdsDeploy.CustomizationCondition value();	org.ovirt.engine.core.bll.VdsDeploy.CustomizationCondition[] value();
@java.lang.Override public void onFailure(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase> operation, final java.lang.Throwable caught) { if (ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ("Failed to execute RunAction: " + caught), caught); failureEventHandler(caught); org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult(actionType, parameters, null, state); if (callback != null) { callback.executed(f); } }	@java.lang.Override public void onFailure(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase> operation, final java.lang.Throwable caught) { if (ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ("Failed to execute runAction: " + caught), caught); failureEventHandler(caught); org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult(actionType, parameters, null, state); if (callback != null) { callback.executed(f); } }
private boolean evaluateHostUpgradeInternalCommandProgress(java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.bll.CommandBase<?> rootCommand) { org.ovirt.engine.core.common.businessentities.CommandEntity upgradeCommand = getHostUpgradeInternalCommand(childCmdIds); if (upgradeCommand != null) { switch (upgradeCommand.getCommandStatus()) { case ACTIVE : case NOT_STARTED : return true; case FAILED : case FAILED_RESTARTED : case UNKNOWN : rootCommand.setCommandStatus(CommandStatus.FAILED); return true; case SUCCEEDED : rootCommand.setCommandStatus(CommandStatus.SUCCEEDED); return true; } } return false; }	private boolean evaluateHostUpgradeInternalCommandProgress(java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.bll.CommandBase<?> rootCommand) { org.ovirt.engine.core.common.businessentities.CommandEntity upgradeCommand = getHostUpgradeInternalCommand(childCmdIds); if (upgradeCommand == null) { return false; } switch (upgradeCommand.getCommandStatus()) { case ACTIVE : case NOT_STARTED : case FAILED : case FAILED_RESTARTED : case UNKNOWN : rootCommand.setCommandStatus(CommandStatus.FAILED); return true; case SUCCEEDED : rootCommand.setCommandStatus(CommandStatus.SUCCEEDED); return true; } return true; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Allow migrating VM between Hosts in a Cluster") java.lang.String allowMigratingVmBetweenHostsInClusterRoleTreeTooltip();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow migrating VM between Hosts in a Cluster") java.lang.String allowMigratingVmBetweenHostsInClusterRoleTreeTooltip();
private void handleException(java.lang.Throwable e) { log.error(java.lang.String.format("Failed to import certificate: %1$s", e.getMessage())); log.debug("Exception", e); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineErrors.PROVIDER_IMPORT_CERTIFICATE_ERROR, e.getMessage()); }	private void handleException(java.lang.Throwable e) { log.error(java.lang.String.format("Failed to import certificate: %1$s", e.getMessage())); log.debug("Exception", e); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_IMPORT_CERTIFICATE_ERROR, e.getMessage()); }
private void discoverTargets() { if (!(validateDiscoverTargetFields())) { return; } org.ovirt.engine.core.common.businessentities.VDS host = getContainer().getHost().getSelectedItem(); org.ovirt.engine.core.common.businessentities.StorageServerConnections tempVar = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); tempVar.setConnection(getAddress().getEntity().trim()); tempVar.setPort(getPort().getEntity().trim()); tempVar.setStorageType(StorageType.ISCSI); tempVar.setUserName((getUseUserAuth().getEntity() ? getUserName().getEntity() : "")); tempVar.setPassword((getUseUserAuth().getEntity() ? getPassword().getEntity() : "")); org.ovirt.engine.core.common.queries.DiscoverSendTargetsQueryParameters parameters = new org.ovirt.engine.core.common.queries.DiscoverSendTargetsQueryParameters(host.getId(), tempVar); setMessage(null); final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase model = this; org.ovirt.engine.ui.frontend.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.lang.Object result = returnValue.getReturnValue(); model.postDiscoverTargetsInternal((result != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>) (result)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>())); } }, true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.DiscoverSendTargets, parameters, asyncQuery); }	private void discoverTargets() { if (!(validateDiscoverTargetFields())) { return; } org.ovirt.engine.core.common.businessentities.VDS host = getContainer().getHost().getSelectedItem(); org.ovirt.engine.core.common.businessentities.StorageServerConnections tempVar = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); tempVar.setConnection(getAddress().getEntity().trim()); tempVar.setPort(getPort().getEntity().trim()); tempVar.setStorageType(StorageType.ISCSI); tempVar.setUserName((getUseUserAuth().getEntity() ? getUserName().getEntity() : "")); tempVar.setPassword((getUseUserAuth().getEntity() ? getPassword().getEntity() : "")); org.ovirt.engine.core.common.queries.DiscoverSendTargetsQueryParameters parameters = new org.ovirt.engine.core.common.queries.DiscoverSendTargetsQueryParameters(host.getId(), tempVar); setMessage(null); final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase model = this; org.ovirt.engine.ui.uicommonweb.models.storage.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncQuery = new org.ovirt.engine.ui.uicommonweb.models.storage.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.lang.Object result = returnValue.getReturnValue(); model.postDiscoverTargetsInternal((result != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>) (result)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>())); } }, true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.DiscoverSendTargets, parameters, asyncQuery); }
private void initCommandExecutor() { if (!(cmdExecutorInitialized)) { for (org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity : coco.getCommandsWithCallBackEnabled()) { switch (cmdEntity.getCommandStatus()) { case ACTIVE_SYNC : case ACTIVE_ASYNC : case NOT_STARTED : coco.retrieveCommand(cmdEntity.getId()).setCommandStatus(CommandStatus.FAILED_RESTARTED); break; default : if (!(cmdEntity.isCallBackNotified())) { addToCallBackMap(cmdEntity); } break; } } cmdExecutorInitialized = true; } }	private void initCommandExecutor() { if (!(cmdExecutorInitialized)) { for (org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity : coco.getCommandsWithCallBackEnabled()) { if (!(cmdEntity.isExecuted())) { coco.retrieveCommand(cmdEntity.getId()).setCommandStatus(CommandStatus.FAILED_RESTARTED); } else if (!(cmdEntity.isCallBackNotified())) { addToCallBackMap(cmdEntity); } } cmdExecutorInitialized = true; } }
private boolean isStoragePoolMatching(org.ovirt.engine.core.common.businessentities.VM vm) { if ((org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getStoragePoolIsoMapDao().get(new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId(getStorageDomainId(), vm.getStoragePoolId()))) == null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_OF_VM_NOT_MATCH); } return true; }	private boolean isStoragePoolMatching(org.ovirt.engine.core.common.businessentities.VM vm) { if ((org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getStoragePoolIsoMapDao().get(new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId(getStorageDomainId(), vm.getStoragePoolId()))) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_OF_VM_NOT_MATCH); } return true; }
protected void setTabBar(com.google.gwt.user.client.ui.IsWidget content) { ((org.ovirt.engine.ui.webadmin.widget.tab.SimpleTabPanel) (getTabPanel())).setTabBar(content); }	protected void setTabBar(com.google.gwt.user.client.ui.IsWidget content) { org.ovirt.engine.ui.common.widget.tab.AbstractTabPanel panel = getTabPanel(); if (panel instanceof org.ovirt.engine.ui.webadmin.widget.tab.SimpleTabPanel) { ((org.ovirt.engine.ui.webadmin.widget.tab.SimpleTabPanel) (getTabPanel())).setTabBar(content); } }
public void run() { org.ovirt.vdsm.jsonrpc.client.internal.MessageContext context = null; org.codehaus.jackson.map.ObjectMapper mapper = new org.codehaus.jackson.map.ObjectMapper(); while (true) { try { context = this.queue.take(); if ((context.getClient()) == null) { break; } org.ovirt.vdsm.jsonrpc.client.internal.ResponseWorker.log.debug(("Message received :" + (new java.lang.String(context.getMessage(), UTF8)))); org.codehaus.jackson.JsonNode rootNode = mapper.readTree(context.getMessage()); if (!(rootNode.isArray())) { processIncomingObject(context.getClient(), rootNode); } else { final java.util.Iterator<org.codehaus.jackson.JsonNode> iter = rootNode.getElements(); while (iter.hasNext()) { final org.codehaus.jackson.JsonNode node = iter.next(); processIncomingObject(context.getClient(), node); } } } catch (java.lang.Exception e) { org.ovirt.vdsm.jsonrpc.client.internal.ResponseWorker.log.warn("Exception thrown during message processing", e); continue; } } }	public void run() { org.ovirt.vdsm.jsonrpc.client.internal.MessageContext context = null; org.codehaus.jackson.map.ObjectMapper mapper = new org.codehaus.jackson.map.ObjectMapper(); while (true) { try { context = this.queue.take(); if ((context.getClient()) == null) { break; } if (org.ovirt.vdsm.jsonrpc.client.internal.ResponseWorker.log.isDebugEnabled()) { org.ovirt.vdsm.jsonrpc.client.internal.ResponseWorker.log.debug(("Message received: " + (new java.lang.String(context.getMessage(), UTF8)))); } org.codehaus.jackson.JsonNode rootNode = mapper.readTree(context.getMessage()); if (!(rootNode.isArray())) { processIncomingObject(context.getClient(), rootNode); } else { final java.util.Iterator<org.codehaus.jackson.JsonNode> iter = rootNode.getElements(); while (iter.hasNext()) { final org.codehaus.jackson.JsonNode node = iter.next(); processIncomingObject(context.getClient(), node); } } } catch (java.lang.Exception e) { org.ovirt.vdsm.jsonrpc.client.internal.ResponseWorker.log.warn("Exception thrown during message processing", e); continue; } } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.ActionGroup.class, to = org.ovirt.engine.api.model.PermitType.class) public static org.ovirt.engine.api.model.PermitType map(org.ovirt.engine.core.common.businessentities.ActionGroup entity, org.ovirt.engine.api.model.PermitType template) { try { return org.ovirt.engine.api.model.PermitType.valueOf(entity); } catch (java.lang.IllegalArgumentException e) { org.ovirt.engine.api.restapi.types.PermitMapper.log.error("Missing mapping '{}' --> '{}': {}", entity, org.ovirt.engine.api.model.PermitType.class.getName(), e.getMessage()); org.ovirt.engine.api.restapi.types.PermitMapper.log.debug("Exception", e); return null; } }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.ActionGroup.class, to = org.ovirt.engine.api.model.PermitType.class) public static org.ovirt.engine.api.model.PermitType map(org.ovirt.engine.core.common.businessentities.ActionGroup entity, org.ovirt.engine.api.model.PermitType template) { try { return org.ovirt.engine.api.model.PermitType.valueOf(entity); } catch (java.lang.IllegalArgumentException e) { org.ovirt.engine.api.restapi.types.PermitMapper.log.error("Missing mapping '{}' --> '{}': {}", entity, org.ovirt.engine.api.model.PermitType.class.getName(), e.getMessage()); org.ovirt.engine.api.restapi.types.PermitMapper.log.error("Exception", e); return null; } }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { if (!(org.apache.commons.lang.StringUtils.isBlank(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm().getName()))) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm().getName(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_NAME, EngineMessages.ACTION_TYPE_FAILED_VM_IS_BEING_UPDATED)); } return null; }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { if (!(org.apache.commons.lang.StringUtils.isBlank(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm().getName()))) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm().getName(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_NAME, EngineMessage.ACTION_TYPE_FAILED_VM_IS_BEING_UPDATED)); } return null; }
@org.junit.Test public void testGetAllSnapshotsForLeaf() { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> images = dao.getAllSnapshotsForLeaf(FixturesTool.IMAGE_ID); assertFalse(images.isEmpty()); }	@org.junit.Test public void testGetAllSnapshotsForLeaf() { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> images = dao.getAllSnapshotsForLeaf(FixturesTool.IMAGE_ID); assertFalse(images.isEmpty()); assertFalse(org.apache.commons.collections.CollectionUtils.exists(images, new org.apache.commons.collections.Predicate() { public boolean evaluate(java.lang.Object disk) { return (((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)).getVmEntityType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.TEMPLATE); } })); }
public static java.util.List<org.ovirt.engine.core.common.businessentities.AdGroups> getAllGroups() { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.AdGroups>(); }	public static java.util.List<org.ovirt.engine.core.common.businessentities.LdapGroup> getAllGroups() { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.LdapGroup>(); }
@java.lang.Override protected void onEntityChanged() { super.onEntityChanged(); if ((org.ovirt.engine.ui.uicommonweb.models.vms.VmGeneralModel.getEntity()) != null) { updateProperties(); } }	@java.lang.Override protected void onEntityChanged() { super.onEntityChanged(); if ((getEntity()) != null) { updateProperties(); } }
public java.util.List<org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters.VolumeAddress> getVolumes() { return volumes; }	public org.ovirt.engine.core.compat.Guid getStoragePoolId() { return storagePoolId; }
public java.lang.String getVncKeyboardLayout() { return vmDynamic.getVncKeyboardLayout(); }	public java.util.Date getLastStopTime() { return this.vmDynamic.getLastStopTime(); }
private void handleCopyResult(org.ovirt.engine.core.common.businessentities.DiskImage srcDiskImage, org.ovirt.engine.core.common.businessentities.DiskImage copiedDiskImage, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, org.ovirt.engine.core.common.action.VdcReturnValueBase result) { if (!(result.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.VolumeCreationError); } else { org.ovirt.engine.core.bll.ImagesHandler.addDiskImageWithNoVmDevice(copiedDiskImage); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getTaskIdList().addAll(result.getInternalVdsmTaskIdList()); srcDiskToTargetDiskMapping.put(srcDiskImage.getId(), copiedDiskImage.getId()); newDiskImages.add(copiedDiskImage); } }	private void handleCopyResult(org.ovirt.engine.core.common.businessentities.DiskImage srcDiskImage, org.ovirt.engine.core.common.businessentities.DiskImage copiedDiskImage, org.ovirt.engine.core.common.action.VdcReturnValueBase result) { if (!(result.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.VolumeCreationError); } else { org.ovirt.engine.core.bll.ImagesHandler.addDiskImageWithNoVmDevice(copiedDiskImage); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getTaskIdList().addAll(result.getInternalVdsmTaskIdList()); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getSrcDiskIdToTargetDiskIdMapping().put(srcDiskImage.getId(), copiedDiskImage.getId()); } }
protected void restartVdsVms() { java.util.List<org.ovirt.engine.core.compat.Guid> autoStartVmIdsToRerun = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : mVmList) { destroyVmOnDestination(vm); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.SetVmStatus, new org.ovirt.engine.core.common.vdscommands.SetVmStatusVDSCommandParameters(vm.getId(), org.ovirt.engine.core.common.businessentities.VMStatus.Down, org.ovirt.engine.core.common.businessentities.VmExitStatus.Error)); if ((returnValue != null) && (returnValue.getSucceeded())) { LogSettingVmToDown(org.ovirt.engine.core.bll.FenceVdsBaseCommand.getVds().getId(), vm.getId()); } setVmId(vm.getId()); setVmName(vm.getName()); setVm(vm); org.ovirt.engine.core.bll.DownVmsHandler.processVmPoolOnStopVm(vm.getId(), org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks(org.ovirt.engine.core.bll.FenceVdsBaseCommand.getExecutionContext())); if (vm.isAutoStartup()) { autoStartVmIdsToRerun.add(vm.getId()); } } if (!(autoStartVmIdsToRerun.isEmpty())) { org.ovirt.engine.core.bll.AutoStartVmsRunner.getInstance().addVmsToRun(autoStartVmIdsToRerun); } org.ovirt.engine.core.bll.FenceVdsBaseCommand.setVm(null); setVmId(Guid.Empty); org.ovirt.engine.core.bll.FenceVdsBaseCommand.setVmName(null); }	protected void restartVdsVms() { java.util.List<org.ovirt.engine.core.compat.Guid> autoStartVmIdsToRerun = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : mVmList) { destroyVmOnDestination(vm); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.SetVmStatus, new org.ovirt.engine.core.common.vdscommands.SetVmStatusVDSCommandParameters(vm.getId(), org.ovirt.engine.core.common.businessentities.VMStatus.Down, org.ovirt.engine.core.common.businessentities.VmExitStatus.Error)); if ((returnValue != null) && (returnValue.getSucceeded())) { LogSettingVmToDown(org.ovirt.engine.core.bll.FenceVdsBaseCommand.getVds().getId(), vm.getId()); } setVmId(vm.getId()); setVmName(vm.getName()); setVm(vm); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.ProcessDownVm, new org.ovirt.engine.core.common.action.IdParameters(vm.getId()), org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks(org.ovirt.engine.core.bll.FenceVdsBaseCommand.getExecutionContext())); if (vm.isAutoStartup()) { autoStartVmIdsToRerun.add(vm.getId()); } } if (!(autoStartVmIdsToRerun.isEmpty())) { org.ovirt.engine.core.bll.AutoStartVmsRunner.getInstance().addVmsToRun(autoStartVmIdsToRerun); } org.ovirt.engine.core.bll.FenceVdsBaseCommand.setVm(null); setVmId(Guid.Empty); org.ovirt.engine.core.bll.FenceVdsBaseCommand.setVmName(null); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (getEnabled().equals(sender)) { updateChangeability(); } else if ((this.equals(sender)) && ("IsAvailable".equals(((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).PropertyName))) { updateAvailability(); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (getEnabled().equals(sender)) { updateChangeability(); } else if (this.equals(sender)) { getEnabled().setIsChangable(getIsChangable()); } }
private void writeEventMap() { logger.log(Type.DEBUG, "Starting to write EventMap"); sw.println(); sw.println("@Override"); sw.println((("protected " + (org.ovirt.engine.ui.common.editor.UiCommonEventMap.class.getName())) + " getEventMap() {")); sw.indent(); sw.println(((((org.ovirt.engine.ui.common.editor.UiCommonEventMap.class.getName()) + " eventMap = new ") + (org.ovirt.engine.ui.common.editor.UiCommonEventMap.class.getName())) + "();")); logger.log(Type.DEBUG, "Looking for Model Fields"); for (com.google.gwt.editor.rebind.model.EditorData editorData : model.getEditorData()) { logger.log(Type.DEBUG, ("Going over Field: " + editorData)); java.lang.String path = editorData.getPath(); if ((path.length()) == 0) { continue; } com.google.gwt.core.ext.typeinfo.JClassType propertyOwnerType = eraseType(editorData.getPropertyOwnerType()); if (propertyOwnerType == (entityModelType)) { logger.log(Type.DEBUG, ("Found EntityModel Field: " + editorData)); sw.println("eventMap.addEvent(\"%s\", \"EntityChanged\", getObject()%s.getEntityChangedEvent());", path, editorData.getBeanOwnerExpression()); } else if (propertyOwnerType == (listModelType)) { logger.log(Type.DEBUG, ("Found ListModel Field: " + editorData)); sw.println("eventMap.addEvent(\"%s\", \"ItemsChanged\", getObject()%s.getItemsChangedEvent());", path, editorData.getBeanOwnerExpression()); sw.println("eventMap.addEvent(\"%s\", \"SelectedItemsChanged\", getObject()%s.getSelectedItemsChangedEvent());", path, editorData.getBeanOwnerExpression()); sw.println("eventMap.addEvent(\"%s\", \"SelectedItemChanged\", getObject()%s.getSelectedItemChangedEvent());", path, editorData.getBeanOwnerExpression()); } } sw.println("return eventMap;"); sw.outdent(); sw.println("}"); }	private void writeEventMap() { logger.log(Type.DEBUG, "Strating to write EventMap"); sw.println(); sw.println("@Override"); sw.println((("protected " + (org.ovirt.engine.ui.common.editor.UiCommonEventMap.class.getName())) + " getEventMap() {")); sw.indent(); sw.println(((((org.ovirt.engine.ui.common.editor.UiCommonEventMap.class.getName()) + " eventMap = new ") + (org.ovirt.engine.ui.common.editor.UiCommonEventMap.class.getName())) + "();")); logger.log(Type.DEBUG, "Looking for Model Fields"); for (com.google.gwt.editor.rebind.model.EditorData editorData : model.getEditorData()) { logger.log(Type.DEBUG, ("Going over Field: " + editorData)); java.lang.String path = editorData.getPath(); if ((path.length()) == 0) { continue; } com.google.gwt.core.ext.typeinfo.JClassType propertyOwnerType = eraseType(editorData.getPropertyOwnerType()); if (propertyOwnerType == (entityModelType)) { logger.log(Type.DEBUG, ("Found EntityModel Field: " + editorData)); sw.println("eventMap.addEvent(\"%s\", \"EntityChanged\", getObject()%s.getEntityChangedEvent());", path, editorData.getBeanOwnerExpression()); } else if (propertyOwnerType == (listModelType)) { logger.log(Type.DEBUG, ("Found ListModel Field: " + editorData)); sw.println("eventMap.addEvent(\"%s\", \"ItemsChanged\", getObject()%s.getItemsChangedEvent());", path, editorData.getBeanOwnerExpression()); sw.println("eventMap.addEvent(\"%s\", \"SelectedItemsChanged\", getObject()%s.getSelectedItemsChangedEvent());", path, editorData.getBeanOwnerExpression()); sw.println("eventMap.addEvent(\"%s\", \"SelectedItemChanged\", getObject()%s.getSelectedItemChangedEvent());", path, editorData.getBeanOwnerExpression()); } } sw.println("return eventMap;"); sw.outdent(); sw.println("}"); }
public void notifyVdsJobProgress(org.ovirt.engine.core.compat.Guid jobId, java.lang.Object obj) { org.ovirt.engine.core.common.JobListener listener = jobListeners.get(jobId); }	public void scheduleJobs() { org.ovirt.engine.core.utils.timer.SchedulerUtil sched = getSchedulUtil(); int refreshRate = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsRefreshRate)) * 1000; refreshIteration = (numberRefreshesBeforeSave) - 1; registeredJobs.add(sched.scheduleAFixedDelayJob(this, "onTimer", new java.lang.Class[0], new java.lang.Object[0], refreshRate, refreshRate, java.util.concurrent.TimeUnit.MILLISECONDS)); registeredJobs.add(sched.scheduleAFixedDelayJob(this, "vmsMonitoring", new java.lang.Class[0], new java.lang.Object[0], refreshRate, refreshRate, java.util.concurrent.TimeUnit.MILLISECONDS)); double availableUpdatesRefreshRate = org.ovirt.engine.core.common.config.Config.<java.lang.Double>getValue(ConfigValues.HostPackagesUpdateTimeInHours); final int HOURS_TO_MINUTES = 60; long rateInMinutes = java.lang.Math.round((availableUpdatesRefreshRate * HOURS_TO_MINUTES)); registeredJobs.add(sched.scheduleAFixedDelayJob(this, "availableUpdates", new java.lang.Class[0], new java.lang.Object[0], rateInMinutes, rateInMinutes, java.util.concurrent.TimeUnit.MINUTES)); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage getDisk(org.ovirt.engine.core.compat.Guid diskId) { return org.ovirt.engine.core.bll.Backend.getInstance().runInternalQuery(VdcQueryType.GetDiskByDiskId, new org.ovirt.engine.core.common.queries.IdQueryParameters(diskId)).getReturnValue(); }	private org.ovirt.engine.core.common.businessentities.storage.DiskImage getDisk(org.ovirt.engine.core.compat.Guid diskId) { return ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDiskDao().get(diskId))); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command.equals(getStartSwiftCommand())) { } else if (command.equals(getStopSwiftCommand())) { } else if (command.equals(getRestartSwiftCommand())) { } }	@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command.equals(getStartSwiftCommand())) { startSwift(); } else if (command.equals(getStopSwiftCommand())) { stopSwift(); } else if (command.equals(getRestartSwiftCommand())) { restartSwift(); } }
public static synchronized void setTasksMap(java.lang.String hostName, java.lang.String taskId) { org.ovirt.vdsmfake.task.TaskProcessor.tasksmap.put(hostName, taskId); }	public static void setTasksMap(java.lang.String hostName, java.lang.String taskId) { org.ovirt.vdsmfake.task.TaskProcessor.tasksmap.put(hostName, taskId); }
@java.lang.Override protected java.lang.String getListName() { org.ovirt.engine.ui.uicommonweb.models.HostErrataListModel.logger.fine(((this.getClass().toString()) + " getListName")); return "HostErrataListModel"; }	@java.lang.Override protected java.lang.String getListName() { return "HostErrataListModel"; }
@java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.core.common.businessentities.Cluster returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (getWindow())); model.setEntity(returnValue); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().configureLaterTitle()); tempVar.setIsDefault(true); tempVar.setIsCancel(true); model.getCommands().add(tempVar); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.Cluster returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (getWindow())); model.setEntity(returnValue); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().configureLaterTitle()); tempVar.setIsDefault(true); tempVar.setIsCancel(true); model.getCommands().add(tempVar); }
public java.lang.Boolean isDisabled() { return disabled; }	public boolean isDisabled() { return disabled; }
private org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel resolveSelectedConsoleModel(org.ovirt.engine.core.compat.Guid vmId) { if (!(cachedConsoleModels.containsKey(vmId))) { return null; } for (org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel model : cachedConsoleModels.get(vmId)) { if (model.isUserSelected()) { return model; } } return null; }	private org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel resolveUserSelectedConsoleModel(org.ovirt.engine.core.compat.Guid vmId) { if (!(cachedConsoleModels.containsKey(vmId))) { return null; } for (org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel model : cachedConsoleModels.get(vmId)) { if (model.isUserSelected()) { return model; } } return null; }
@java.lang.Override protected void cretaeVirtIODisk() { org.ovirt.engine.core.common.businessentities.DiskImage disk = getDiskImage(); disk.setDiskInterface(DiskInterface.VirtIO); disk.setActive(true); doReturn(diskDao).when(command).getDiskDao(); when(diskDao.get(diskImageGuid)).thenReturn(disk); when(osRepository.getDiskHotpluggableInterfaces(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(org.ovirt.engine.core.bll.DISK_HOTPLUGGABLE_INTERFACES); mockVmDevice(true); }	@java.lang.Override protected void cretaeVirtIODisk() { org.ovirt.engine.core.common.businessentities.DiskImage disk = getDiskImage(); disk.setDiskInterface(DiskInterface.VirtIO); disk.setActive(true); doReturn(diskDao).when(command).getDiskDao(); when(diskDao.get(diskImageGuid)).thenReturn(disk); when(osRepository.getDiskHotpluggableInterfaces(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(new java.util.HashSet<java.lang.String>(DISK_HOTPLUGGABLE_INTERFACES)); mockVmDevice(true); }
@java.lang.Override public void setEntity(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity value) { super.setEntity(value); }	public void setEntity(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity value) { super.setEntity(value); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityTooltip(org.ovirt.engine.core.common.businessentities.StoragePool object) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = getSafeHtmlStringMap(object); if (!(imagesToText.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getDataCenterTooltip(imagesToText); } return null; }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityTooltip(org.ovirt.engine.core.common.businessentities.StoragePool object) { if (object.isStoragePoolCompatibilityLevelUpgradeNeeded()) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(org.ovirt.engine.ui.webadmin.widget.table.column.DcAdditionalStatusColumn.constants.clusterLevelUpgradeNeeded()); } return null; }
public boolean getPostZero() { return postZero; }	@java.lang.Override public boolean getPostZero() { return postZero; }
public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getEventStatus(javax.sql.DataSource dataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO(dataSource); java.util.Map<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> data = dao.getEventStatusCount(); for (java.util.Map.Entry<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> entry : data.entrySet()) { switch (entry.getKey()) { case ALERT : result.setStatusCount(AuditLogSeverity.ALERT.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; case ERROR : result.setStatusCount(AuditLogSeverity.ERROR.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; case NORMAL : break; case WARNING : result.setStatusCount(AuditLogSeverity.WARNING.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; default : break; } } return result; }	public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getEventStatus(javax.sql.DataSource dataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDao(dataSource); java.util.Map<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> data = dao.getEventStatusCount(); for (java.util.Map.Entry<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> entry : data.entrySet()) { switch (entry.getKey()) { case ALERT : result.setStatusCount(AuditLogSeverity.ALERT.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; case ERROR : result.setStatusCount(AuditLogSeverity.ERROR.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; case NORMAL : break; case WARNING : result.setStatusCount(AuditLogSeverity.WARNING.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; default : break; } } return result; }
private void hasIllegalStatusMessage() { assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(EngineMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2.toString())); }	private void hasIllegalStatusMessage() { assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2.toString())); }
private void upload() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = new org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel(getEntity().getId(), null); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().uploadImageTitle()); model.setHelpTag(HelpTag.upload_disk_image); model.setEntity(this); model.setHashName("upload_disk_image"); setWindow(model); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.setCancelCommand(cancelCommand); model.getCommands().add(cancelCommand); model.initialize(); }	private void upload() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.showUploadDialog(this, HelpTag.upload_disk_image_to_domain, getEntity().getId(), null); }
private boolean connectStorageServer(org.ovirt.engine.core.common.businessentities.StorageType type, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections) { boolean connectSucceeded = true; if ((connections != null) && ((connections.size()) > 0)) { if (type == (org.ovirt.engine.core.common.businessentities.StorageType.ISCSI)) { connections = org.ovirt.engine.core.bll.storage.ISCSIStorageHelper.updateInitiators(connections, getVds().getId()); } java.util.Map<java.lang.String, java.lang.String> retValues = ((java.util.HashMap<java.lang.String, java.lang.String>) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ConnectStorageServer, new org.ovirt.engine.core.common.vdscommands.StorageServerConnectionManagementVDSParameters(getVds().getId(), getStoragePool().getId(), type, connections)).getReturnValue())); connectSucceeded = org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(type).isConnectSucceeded(retValues, connections); log.infoFormat("Host {0} storage connection was {1} ", getVds().getName(), (connectSucceeded ? "succeeded" : "failed")); } return connectSucceeded; }	private boolean connectStorageServer(org.ovirt.engine.core.common.businessentities.StorageType type, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections) { boolean connectSucceeded = true; if ((connections != null) && ((connections.size()) > 0)) { if (type == (org.ovirt.engine.core.common.businessentities.StorageType.ISCSI)) { connections = org.ovirt.engine.core.bll.storage.ISCSIStorageHelper.updateIfaces(connections, getVds().getId()); } java.util.Map<java.lang.String, java.lang.String> retValues = ((java.util.HashMap<java.lang.String, java.lang.String>) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ConnectStorageServer, new org.ovirt.engine.core.common.vdscommands.StorageServerConnectionManagementVDSParameters(getVds().getId(), getStoragePool().getId(), type, connections)).getReturnValue())); connectSucceeded = org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(type).isConnectSucceeded(retValues, connections); log.infoFormat("Host {0} storage connection was {1} ", getVds().getName(), (connectSucceeded ? "succeeded" : "failed")); } return connectSucceeded; }
protected org.ovirt.engine.core.common.businessentities.VmTemplate getEntity(int index) { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate(); template.setId(org.ovirt.engine.api.restapi.resource.BackendTemplateCdromsResourceTest.TEMPLATE_ID); template.setIsoPath(org.ovirt.engine.api.restapi.resource.BackendTemplateCdromsResourceTest.ISO_PATH); return template; }	private org.ovirt.engine.core.common.businessentities.VmTemplate getTemplate() { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate(); template.setId(org.ovirt.engine.api.restapi.resource.BackendTemplateCdromsResourceTest.TEMPLATE_ID); template.setIsoPath(org.ovirt.engine.api.restapi.resource.BackendTemplateCdromsResourceTest.ISO_PATH); return template; }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__ACTION__UPDATE_VM_VERSION); addValidateMessage(EngineMessage.VAR__TYPE__VM); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__UPDATE_VM_VERSION); addValidationMessage(EngineMessage.VAR__TYPE__VM); }
protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((getTemplateType()) != (org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE)) { validate(getVirtioRngValidator().canAddRngDevice(getVdsGroup(), getParameters().getRngDevice())); } if (!(getRngDevices().isEmpty())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_RNG_ALREADY_EXISTS); } return true; }	protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((getTemplateType()) != (org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE)) { if (!(validate(getVirtioRngValidator().canAddRngDevice(getVdsGroup(), getParameters().getRngDevice())))) { return false; } } if (!(getRngDevices().isEmpty())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_RNG_ALREADY_EXISTS); } return true; }
@java.lang.Override protected void executeVmCommand() { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retValue = runVdsCommand(VDSCommandType.ConvertVm, buildConvertParameters()); if (retValue.getSucceeded()) { getVdsManager().addV2VJobInfoForVm(org.ovirt.engine.core.bll.ConvertVmCommand.getVmId(), JobStatus.WAIT_FOR_START); getVmManager().setConvertProxyHostId(org.ovirt.engine.core.bll.ConvertVmCommand.getVdsId()); org.ovirt.engine.core.bll.ConvertVmCommand.setSucceeded(true); } else { org.ovirt.engine.core.bll.ConvertVmCommand.log.error("Failed to convert VM"); setCommandStatus(CommandStatus.FAILED); } } catch (org.ovirt.engine.core.common.errors.EngineException e) { org.ovirt.engine.core.bll.ConvertVmCommand.log.error("Failed to convert VM", e); setCommandStatus(CommandStatus.FAILED); } }	@java.lang.Override protected void executeVmCommand() { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retValue = runVdsCommand(); if (retValue.getSucceeded()) { monitorV2VJob(JobStatus.WAIT_FOR_START); org.ovirt.engine.core.bll.ConvertVmCommand.setSucceeded(true); } else { org.ovirt.engine.core.bll.ConvertVmCommand.log.error("Failed to convert VM"); setCommandStatus(CommandStatus.FAILED); } } catch (org.ovirt.engine.core.common.errors.EngineException e) { org.ovirt.engine.core.bll.ConvertVmCommand.log.error("Failed to convert VM", e); setCommandStatus(CommandStatus.FAILED); } }
@java.lang.Override public int getQuotaCount() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource(); return getCallsHandler().executeRead("getQuotaCount", org.ovirt.engine.core.dao.QuotaDAOImpl.longMapper, parameterSource).intValue(); }	@java.lang.Override public int getQuotaCount() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource(); return getCallsHandler().executeRead("getQuotaCount", org.ovirt.engine.core.dao.QuotaDaoImpl.longMapper, parameterSource).intValue(); }
@java.lang.Override public boolean isValid(java.lang.String name, javax.validation.ConstraintValidatorContext context) { return (name != null) && (super.isValid(name, context)); }	@java.lang.Override public boolean isValid(java.lang.String name, javax.validation.ConstraintValidatorContext context) { return (name == null) || (org.ovirt.engine.core.common.utils.ValidationUtils.validHostname(name)); }
void handleActionResult(final org.ovirt.engine.core.common.action.VdcActionType actionType, final org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, final org.ovirt.engine.core.common.action.VdcReturnValueBase result, final org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback callback, final java.lang.Object state, final boolean showErrorDialog) { org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.FINER, "Retrieved action result from RunAction."); org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult(actionType, parameters, result, state); boolean success = false; if (!(result.getCanDoAction())) { callback.executed(f); } else if ((showErrorDialog && (result.getIsSyncronious())) && (!(result.getSucceeded()))) { runActionExecutionFailed(actionType, result.getFault()); callback.executed(f); success = true; } else { success = true; callback.executed(f); } if (((!success) && ((getEventsHandler()) != null)) && (getEventsHandler().isRaiseErrorModalPanel(actionType, result.getFault()))) { if ((result.getCanDoActionMessages().size()) <= 1) { java.lang.String errorMessage = ((!(result.getCanDoAction())) || (!(result.getCanDoActionMessages().isEmpty()))) ? getRunActionErrorMessage(result.getCanDoActionMessages()) : result.getFault().getMessage(); failureEventHandler(result.getDescription(), errorMessage); } else { failureEventHandler(result.getDescription(), result.getCanDoActionMessages()); } } }	void handleActionResult(final org.ovirt.engine.core.common.action.VdcActionType actionType, final org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, final org.ovirt.engine.core.common.action.VdcReturnValueBase result, final org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback callback, final java.lang.Object state, final boolean showErrorDialog) { org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.FINER, "Retrieved action result from RunAction."); org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult(actionType, parameters, result, state); boolean success = false; if (!(result.getCanDoAction())) { result.setCanDoActionMessages(((java.util.ArrayList<java.lang.String>) (translateError(result)))); callback.executed(f); } else if ((showErrorDialog && (result.getIsSyncronious())) && (!(result.getSucceeded()))) { runActionExecutionFailed(actionType, result.getFault()); callback.executed(f); success = true; } else { success = true; callback.executed(f); } if (((!success) && ((getEventsHandler()) != null)) && (getEventsHandler().isRaiseErrorModalPanel(actionType, result.getFault()))) { if ((result.getCanDoActionMessages().size()) <= 1) { java.lang.String errorMessage = ((!(result.getCanDoAction())) || (!(result.getCanDoActionMessages().isEmpty()))) ? getRunActionErrorMessage(result.getCanDoActionMessages()) : result.getFault().getMessage(); failureEventHandler(result.getDescription(), errorMessage); } else { failureEventHandler(result.getDescription(), result.getCanDoActionMessages()); } } }
public static org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand, java.lang.String description, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType> entitiesMap) { return org.ovirt.engine.core.bll.tasks.CommandCoordinator.getInstance().createTask(taskId, command, asyncTaskCreationInfo, parentCommand, description, entitiesMap); }	public static org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand, java.lang.String description, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType> entitiesMap) { return org.ovirt.engine.core.bll.tasks.TaskManagerUtil.coco.createTask(taskId, command, asyncTaskCreationInfo, parentCommand, description, entitiesMap); }
private void assertValidateFailure(final java.lang.String messageToVerify) { assertFalse(command.validate()); assertTrue(command.getReturnValue().getValidateMessages().contains(messageToVerify)); }	private void assertValidateFailure(final java.lang.String messageToVerify) { assertFalse(command.validate()); assertTrue(command.getReturnValue().getValidationMessages().contains(messageToVerify)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel model = ((org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel) (sender)); java.lang.String propertyName = args.propertyName; if ("SelectionNodeList".equals(propertyName)) { updateTree(model); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel model = ((org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel) (sender)); java.lang.String propertyName = args.propertyName; if ("SelectionNodeList".equals(propertyName)) { updateTree(model); } }
@java.lang.Override protected boolean canDoAction() { if (!(checkIsDomainLocked(org.ovirt.engine.core.bll.storage.ReconstructMasterDomainCommand.getStorageDomain().getStoragePoolIsoMapData()))) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap> poolDomains = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().getAllForStoragePool(org.ovirt.engine.core.bll.storage.ReconstructMasterDomainCommand.getStoragePool().getId()); for (org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap poolDomain : poolDomains) { if (!(checkIsDomainLocked(poolDomain))) { return false; } } return org.ovirt.engine.core.bll.storage.ReconstructMasterDomainCommand.initializeVds(); }	@java.lang.Override protected boolean canDoAction() { if (checkIsDomainLocked(org.ovirt.engine.core.bll.storage.ReconstructMasterDomainCommand.getStorageDomain().getStoragePoolIsoMapData())) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap> poolDomains = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().getAllForStoragePool(org.ovirt.engine.core.bll.storage.ReconstructMasterDomainCommand.getStoragePool().getId()); for (org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap poolDomain : poolDomains) { if (checkIsDomainLocked(poolDomain)) { return false; } } return org.ovirt.engine.core.bll.storage.ReconstructMasterDomainCommand.initializeVds(); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Label.class, to = org.ovirt.engine.core.common.businessentities.network.NetworkLabel.class) public static org.ovirt.engine.core.common.businessentities.network.NetworkLabel map(org.ovirt.engine.api.model.Label model, org.ovirt.engine.core.common.businessentities.network.NetworkLabel template) { org.ovirt.engine.core.common.businessentities.network.NetworkLabel entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.network.NetworkLabel(); if (model.isSetId()) { entity.setId(model.getId()); } return entity; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Label.class, to = org.ovirt.engine.core.common.businessentities.network.pseudo.NetworkLabel.class) public static org.ovirt.engine.core.common.businessentities.network.pseudo.NetworkLabel map(org.ovirt.engine.api.model.Label model, org.ovirt.engine.core.common.businessentities.network.pseudo.NetworkLabel template) { org.ovirt.engine.core.common.businessentities.network.pseudo.NetworkLabel entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.network.pseudo.NetworkLabel(); if (model.isSetId()) { entity.setId(model.getId()); } return entity; }
public void setRoleId(org.ovirt.engine.core.compat.Guid value) { roleId = value; }	public void setRoleId(org.ovirt.engine.core.compat.Guid roleId) { this.roleId = roleId; }
protected com.google.gwt.safehtml.shared.SafeHtml createMigrationsTemplate(int migrations) { java.lang.String prefix; java.lang.String postfix; java.lang.String migrationsStr; com.google.gwt.safehtml.shared.SafeHtml image; if (migrations > 0) { prefix = "("; migrationsStr = java.lang.String.valueOf(migrations); image = org.ovirt.engine.ui.webadmin.widget.table.column.VmCountColumn.arrowImageHtml; postfix = ")"; } else { prefix = "\u00a0"; migrationsStr = "\u00a0"; image = com.google.gwt.safehtml.shared.SafeHtmlUtils.EMPTY_SAFE_HTML; postfix = "\u00a0"; } return org.ovirt.engine.ui.webadmin.widget.table.column.VmCountColumn.templates.vmCountInOutMigrations(prefix, migrationsStr, image, postfix); }	protected com.google.gwt.safehtml.shared.SafeHtml createInOutMigrationsTemplate(int migrations, com.google.gwt.safehtml.shared.SafeHtml arrowImage) { java.lang.String prefix; java.lang.String postfix; java.lang.String migrationsStr; com.google.gwt.safehtml.shared.SafeHtml image; if (migrations > 0) { prefix = "("; migrationsStr = java.lang.String.valueOf(migrations); image = arrowImage; postfix = ")"; } else { prefix = "\u00a0"; migrationsStr = "\u00a0"; image = com.google.gwt.safehtml.shared.SafeHtmlUtils.EMPTY_SAFE_HTML; postfix = "\u00a0"; } return org.ovirt.engine.ui.webadmin.widget.table.column.VmCountColumn.templates.vmCountInOutMigrations(prefix, migrationsStr, image, postfix); }
@org.junit.Test public void executeCommandWhenFailed() { cmd = spy(new org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand<org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters>(new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters(org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID))); setupMocks(); doThrow(new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineErrors.GlusterHookListException)).when(hookSyncJob).refreshHooksInCluster(getVdsGroup(), true); try { cmd.executeCommand(); fail("Expected EngineException"); } catch (org.ovirt.engine.core.common.errors.EngineException e) { assertEquals(e.getErrorCode(), EngineErrors.GlusterHookListException); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_REFRESH_FAILED); } }	@org.junit.Test public void executeCommandWhenFailed() { cmd = spy(new org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand<org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters>(new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters(org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID))); setupMocks(); doThrow(new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GlusterHookListException)).when(hookSyncJob).refreshHooksInCluster(getVdsGroup(), true); try { cmd.executeCommand(); fail("Expected EngineException"); } catch (org.ovirt.engine.core.common.errors.EngineException e) { assertEquals(e.getErrorCode(), EngineError.GlusterHookListException); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_REFRESH_FAILED); } }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Are you sure you want to reset the following option?") java.lang.String resetOptionVolumeMsg();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Are you sure you want to reset the following option?") java.lang.String resetOptionVolumeMsg();
private static void populateModelWithIpv4Details(org.ovirt.engine.core.common.businessentities.VmInitNetwork entity, org.ovirt.engine.api.model.NicConfiguration model) { if ((entity.getBootProtocol()) != null) { model.setBootProtocol(org.ovirt.engine.api.restapi.types.Ipv4BootProtocolMapper.map(entity.getBootProtocol())); } model.setIp(org.ovirt.engine.api.restapi.types.InitializationMapper.createIpModel(new org.ovirt.engine.core.common.network.vm.VmInitNetworkIpv4InfoFetcher(entity))); }	private static void populateModelWithIpv4Details(org.ovirt.engine.core.common.businessentities.VmInitNetwork entity, org.ovirt.engine.api.model.NicConfiguration model) { if ((entity.getBootProtocol()) != null) { model.setBootProtocol(org.ovirt.engine.api.restapi.types.Ipv4BootProtocolMapper.map(entity.getBootProtocol())); } model.setIp(org.ovirt.engine.api.restapi.types.InitializationMapper.createIpModel(new org.ovirt.engine.core.utils.network.vm.VmInitNetworkIpv4InfoFetcher(entity))); }
public static java.lang.String asId(java.lang.String name) { return java.util.UUID.nameUUIDFromBytes(name.getBytes()).toString(); }	private static java.lang.String asId(java.lang.String name) { return java.util.UUID.nameUUIDFromBytes(name.getBytes()).toString(); }
private void showCheckBoxes(java.util.List<T> seletedItems) { for (java.util.Map.Entry<T, com.google.gwt.user.client.ui.CheckBox> currentEntry : checkBoxes.entrySet()) { wrapperPanel.add(currentEntry.getValue()); if (seletedItems.contains(currentEntry.getKey())) { currentEntry.getValue().setValue(true, false); } } }	private void showCheckBoxes(java.util.List<T> seletedItems) { for (java.util.Map.Entry<T, com.google.gwt.user.client.ui.CheckBox> currentEntry : checkBoxes.entrySet()) { wrapperPanel.add(currentEntry.getValue()); if (seletedItems.contains(currentEntry.getKey())) { currentEntry.getValue().setValue(true); } } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VMInfoListReturnForXmlRpc getVmStats(java.lang.String vmId) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.getStats").withParameter("vmID", vmId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withResponseKey("statsList"); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMInfoListReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VMInfoListReturnForXmlRpc getVmStats(java.lang.String vmId) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.getStats").withParameter("vmID", vmId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("statsList"); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMInfoListReturnForXmlRpc(response); }
private void setSourceVisibility(final org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model) { imageFileUploadPanel.setVisible(model.getImageSourceLocalEnabled().getEntity()); imageFileDownloadPanel.setVisible((!(model.getImageSourceLocalEnabled().getEntity()))); imageTypeEditor.setEnabled(((!(model.getImageSourceLocalEnabled().getEntity())) || (model.getBrowserSupportsUpload()))); }	private void setSourceVisibility(final org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model) { imageFileUploadPanel.setVisible(model.getImageSourceLocalEnabled().getEntity()); imageFileDownloadPanel.setVisible((!(model.getImageSourceLocalEnabled().getEntity()))); volumeFormatEditor.setEnabled(((!(model.getImageSourceLocalEnabled().getEntity())) || (model.getBrowserSupportsUpload()))); }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmDynamic, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createHANotRunningAndUknown() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmDynamic, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), null); pair.getFirst().setStatus(VMStatus.Unknown); return pair; }	org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createHANotRunningAndUknown() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), null); pair.getFirst().setAutoStartup(true); pair.getFirst().setStatus(VMStatus.Unknown); return pair; }
protected java.util.List<org.ovirt.engine.core.common.businessentities.qos.NetworkQoS> getAllQosInDc() { if ((allQos) == null) { allQos = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkQosDao().getAllForStoragePoolId(qos.getStoragePoolId()); } return allQos; }	protected java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkQoS> getAllQosInDc() { if ((allQos) == null) { allQos = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getQosDao().getAllForStoragePoolId(qos.getStoragePoolId()); } return allQos; }
@org.junit.Test public void getLunConnectionsForISCSI() { org.ovirt.engine.core.common.businessentities.LUNs lun = new org.ovirt.engine.core.common.businessentities.LUNs(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage_server_connections> connections = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage_server_connections>(); connections.add(new org.ovirt.engine.core.common.businessentities.storage_server_connections("Some LUN connection", "id", "iqn", "password", org.ovirt.engine.core.common.businessentities.StorageType.ISCSI, "Username", "port", "portal")); connections.add(new org.ovirt.engine.core.common.businessentities.storage_server_connections("Other LUN connection", "id", "iqn", "password", org.ovirt.engine.core.common.businessentities.StorageType.ISCSI, "Username", "port", "portal")); lun.setLunConnections(connections); java.util.Map<org.ovirt.engine.core.common.businessentities.StorageType, java.util.List<org.ovirt.engine.core.common.businessentities.storage_server_connections>> connectionsByType = org.ovirt.engine.core.bll.storage.StorageHelperBase.filterLUNsByStorageType(lun); assertTrue("Map of ISCSI storage connections should not be empty.", (!(connectionsByType.isEmpty()))); assertEquals("Map of ISCSI storage connections should have only one type of connections.", 1, connectionsByType.size()); assertEquals("Map of ISCSI storage connections should have only 2 ISCSI connections.", 2, connectionsByType.get(StorageType.ISCSI).size()); }	@org.junit.Test public void getLunConnectionsForISCSI() { org.ovirt.engine.core.common.businessentities.LUNs lun = new org.ovirt.engine.core.common.businessentities.LUNs(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>(); connections.add(new org.ovirt.engine.core.common.businessentities.StorageServerConnections("Some LUN connection", "id", "iqn", "password", org.ovirt.engine.core.common.businessentities.StorageType.ISCSI, "Username", "port", "portal")); connections.add(new org.ovirt.engine.core.common.businessentities.StorageServerConnections("Other LUN connection", "id", "iqn", "password", org.ovirt.engine.core.common.businessentities.StorageType.ISCSI, "Username", "port", "portal")); lun.setLunConnections(connections); java.util.Map<org.ovirt.engine.core.common.businessentities.StorageType, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections>> connectionsByType = org.ovirt.engine.core.bll.storage.StorageHelperBase.filterConnectionsByStorageType(lun); assertTrue("Map of ISCSI storage connections should not be empty.", (!(connectionsByType.isEmpty()))); assertEquals("Map of ISCSI storage connections should have only one type of connections.", 1, connectionsByType.size()); assertEquals("Map of ISCSI storage connections should have only 2 ISCSI connections.", 2, connectionsByType.get(StorageType.ISCSI).size()); }
@java.lang.Override protected void templateInited() { super.templateInited(); setupWindowModelFrom(pool.getStaticData()); }	protected void templateInited() { super.templateInited(); setupWindowModelFrom(pool.getStaticData()); }
private void addEntriesToNfsCummulativeStatistics(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.FopStats> fopStats) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.FopStats>> fopStatsEntities = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.FopStats>>(); for (int i = 0; i < (fopStats.size()); i++) { org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.FopStats> fopStatEntity = new org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.FopStats>(fopStats.get(i)); fopStatsEntities.add(fopStatEntity); } getNfsServerProfileStats().setItems(fopStatsEntities); }	private void populateCummulativeStatistics(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.FopStats> fopStats, org.ovirt.engine.ui.uicommonweb.models.ListModel profileStats) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.FopStats>> fopStatsEntities = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.FopStats>>(); for (int i = 0; i < (fopStats.size()); i++) { org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.FopStats> fopStatEntity = new org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.FopStats>(fopStats.get(i)); fopStatsEntities.add(fopStatEntity); } profileStats.setItems(fopStatsEntities); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel hostListModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel) (model)); org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel innerHostModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel) (hostListModel.getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>) (result)); org.ovirt.engine.core.common.businessentities.VDS host = ((org.ovirt.engine.core.common.businessentities.VDS) (hostListModel.getSelectedItem())); innerHostModel.updateModelFromVds(host, dataCenters, false, getSystemTreeSelectedItem()); innerHostModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editAndApproveHostTitle()); innerHostModel.setHashName("edit_and_approve_host"); innerHostModel.setHelpTag(innerHostModel.getHashName(), "Host > Edit/Approve Host"); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnApprove", hostListModel); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); innerHostModel.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", hostListModel); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); innerHostModel.getCommands().add(tempVar2); }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel hostListModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel) (model)); org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel innerHostModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel) (hostListModel.getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>) (result)); org.ovirt.engine.core.common.businessentities.VDS host = ((org.ovirt.engine.core.common.businessentities.VDS) (hostListModel.getSelectedItem())); innerHostModel.updateModelFromVds(host, dataCenters, false, getSystemTreeSelectedItem()); innerHostModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editAndApproveHostTitle()); innerHostModel.setHelpTag(HelpTag.edit_and_approve_host); innerHostModel.setHashName("edit_and_approve_host"); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnApprove", hostListModel); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); innerHostModel.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", hostListModel); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); innerHostModel.getCommands().add(tempVar2); }
private void endCopyCollapseOperations(org.ovirt.engine.core.common.businessentities.VM vm) { vm.setVmtGuid(VmTemplateHandler.BlankVmTemplateId); vm.setVmtName(null); org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSnapshotDao().get(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSnapshotDao().getId(vm.getId(), SnapshotType.ACTIVE)); vm.setSnapshots(java.util.Collections.singletonList(activeSnapshot)); updateCopyVmInSpm(org.ovirt.engine.core.bll.ExportVmCommand.getVm().getStoragePoolId(), vm, org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getStorageDomainId()); }	private void endCopyCollapseOperations(org.ovirt.engine.core.common.businessentities.VM vm) { vm.setVmtGuid(VmTemplateHandler.BlankVmTemplateId); vm.setVmtName(null); org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = org.ovirt.engine.core.bll.ExportVmCommand.getDbFacade().getSnapshotDao().get(org.ovirt.engine.core.bll.ExportVmCommand.getDbFacade().getSnapshotDao().getId(vm.getId(), SnapshotType.ACTIVE)); vm.setSnapshots(java.util.Arrays.asList(activeSnapshot)); updateCopyVmInSpm(org.ovirt.engine.core.bll.ExportVmCommand.getVm().getStoragePoolId(), vm, org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getStorageDomainId()); }
protected boolean checkStorageConnection(java.lang.String storageDomainConnection) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domains = null; org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommon.getStorageServerConnectionDao().get(storageDomainConnection); if (connection == null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_NOT_EXIST); } if (connection.getStorageType().isFileDomain()) { domains = getStorageDomainsByConnId(connection.getId()); if ((domains.size()) > 0) { java.lang.String domainNames = createDomainNamesListFromStorageDomains(domains); return prepareFailureMessageForDomains(domainNames); } } return true; }	protected boolean checkStorageConnection(java.lang.String storageDomainConnection) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domains = null; org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommon.getStorageServerConnectionDao().get(storageDomainConnection); if (connection == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_NOT_EXIST); } if (connection.getStorageType().isFileDomain()) { domains = getStorageDomainsByConnId(connection.getId()); if ((domains.size()) > 0) { java.lang.String domainNames = createDomainNamesListFromStorageDomains(domains); return prepareFailureMessageForDomains(domainNames); } } return true; }
protected void createDiskDummiesForSpaceValidations(java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList, java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> dummies) { for (org.ovirt.engine.core.common.businessentities.DiskImage image : disksList) { org.ovirt.engine.core.compat.Guid targetSdId = imageToDestinationDomainMap.get(image.getId()); org.ovirt.engine.core.common.businessentities.DiskImage dummy = org.ovirt.engine.core.bll.ImagesHandler.createDummyDiskImage(image, targetSdId); dummies.add(dummy); } }	protected java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> createDiskDummiesForSpaceValidations(java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList) { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> dummies = new java.util.ArrayList(disksList.size()); for (org.ovirt.engine.core.common.businessentities.DiskImage image : disksList) { org.ovirt.engine.core.compat.Guid targetSdId = imageToDestinationDomainMap.get(image.getId()); org.ovirt.engine.core.common.businessentities.DiskImage dummy = org.ovirt.engine.core.bll.ImagesHandler.createDiskImageWithExcessData(image, targetSdId); dummies.add(dummy); } return dummies; }
private boolean isTemplateInDestStorageDomain(org.ovirt.engine.core.compat.Guid imageId, org.ovirt.engine.core.compat.Guid sourceDomainId) { org.ovirt.engine.core.compat.Guid templateId = getDiskImageByImageId(imageId).getImageTemplateId(); if (!(Guid.Empty.equals(templateId))) { org.ovirt.engine.core.common.businessentities.storage.DiskImage templateImage = org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getDiskImageDao().get(templateId); if (!(templateImage.getStorageIds().contains(sourceDomainId))) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return true; }	private boolean isTemplateInDestStorageDomain(org.ovirt.engine.core.compat.Guid imageId, org.ovirt.engine.core.compat.Guid sourceDomainId) { org.ovirt.engine.core.compat.Guid templateId = getDiskImageByImageId(imageId).getImageTemplateId(); if (!(Guid.Empty.equals(templateId))) { org.ovirt.engine.core.common.businessentities.storage.DiskImage templateImage = org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getDiskImageDao().get(templateId); if (!(templateImage.getStorageIds().contains(sourceDomainId))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return true; }
protected boolean proceedVdsStats() { boolean returnValue = true; try { runVdsCommand(VDSCommandType.GetStats, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase(getVds())); java.util.List<org.ovirt.engine.core.compat.Guid> problematicDomainsIds = org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.getDomainsReportedAsProblematic(getVds().getStoragePoolId(), getVds().getDomains()); for (org.ovirt.engine.core.compat.Guid domainId : problematicDomainsIds) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainInfo = getStorageDomainStaticDAO().get(domainId); log.errorFormat("Storage Domain {0} of pool {1} is in problem in host {2}", (domainInfo != null ? domainInfo.getStorageName() : domainId), getStoragePool().getName(), getVds().getName()); if ((domainInfo == null) || (domainInfo.getStorageDomainType().isDataDomain())) { returnValue = false; } } } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { log.errorFormat("Could not get Host statistics for Host {0}, Error is {1}", getVds().getName(), e); returnValue = false; } return returnValue; }	protected boolean proceedVdsStats() { boolean returnValue = true; try { runVdsCommand(VDSCommandType.GetStats, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase(getVds())); java.util.List<org.ovirt.engine.core.compat.Guid> problematicDomainsIds = org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.fetchDomainsReportedAsProblematic(getVds().getStoragePoolId(), getVds().getDomains()); for (org.ovirt.engine.core.compat.Guid domainId : problematicDomainsIds) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainInfo = getStorageDomainStaticDAO().get(domainId); log.errorFormat("Storage Domain {0} of pool {1} is in problem in host {2}", (domainInfo != null ? domainInfo.getStorageName() : domainId), getStoragePool().getName(), getVds().getName()); if ((domainInfo == null) || (domainInfo.getStorageDomainType().isDataDomain())) { returnValue = false; } } } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { log.errorFormat("Could not get Host statistics for Host {0}, Error is {1}", getVds().getName(), e); returnValue = false; } return returnValue; }
private java.lang.String composeObjectId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable, org.ovirt.engine.core.common.AuditLogType logType) { final java.lang.StringBuilder builder = new java.lang.StringBuilder(); compose(builder, "type", logType.toString()); compose(builder, "sd", nullToEmptyString(logable.getStorageDomainId())); compose(builder, "dc", nullToEmptyString(logable.getStoragePoolId())); compose(builder, "user", nullToEmptyString(logable.getUserId())); compose(builder, "cluster", logable.getVdsGroupId().toString()); compose(builder, "vds", logable.getVdsId().toString()); compose(builder, "vm", emptyGuidToEmptyString(logable.getVmId())); compose(builder, "template", emptyGuidToEmptyString(logable.getVmTemplateId())); compose(builder, "customId", org.apache.commons.lang.StringUtils.defaultString(logable.getCustomId())); return builder.toString(); }	private java.lang.String composeObjectId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable, org.ovirt.engine.core.common.AuditLogType logType) { final java.lang.StringBuilder builder = new java.lang.StringBuilder(); compose(builder, "type", logType.toString()); compose(builder, "sd", org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.nullToEmptyString(logable.getStorageDomainId())); compose(builder, "dc", org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.nullToEmptyString(logable.getStoragePoolId())); compose(builder, "user", org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.nullToEmptyString(logable.getUserId())); compose(builder, "cluster", logable.getVdsGroupId().toString()); compose(builder, "vds", logable.getVdsId().toString()); compose(builder, "vm", emptyGuidToEmptyString(logable.getVmId())); compose(builder, "template", emptyGuidToEmptyString(logable.getVmTemplateId())); compose(builder, "customId", org.apache.commons.lang.StringUtils.defaultString(logable.getCustomId())); return builder.toString(); }
public void getDbGroupsByUserId(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid groupId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetDbGroupsByUserId, new org.ovirt.engine.core.common.queries.IdQueryParameters(groupId), aQuery); }	public void getDbGroupsByUserId(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid userId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<java.util.List<org.ovirt.engine.core.common.businessentities.aaa.DbGroup>>() { @java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.aaa.DbGroup> Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return ((java.util.List<org.ovirt.engine.core.common.businessentities.aaa.DbGroup>) (source)); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetDbGroupsByUserId, new org.ovirt.engine.core.common.queries.IdQueryParameters(userId), aQuery); }
@org.junit.Test public void testCDAVdsIsSPM() { vds.setSpmStatus(VdsSpmStatus.SPM); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure("canDoAction did not fail on a VDS that is already set as SPM", command, EngineMessages.CANNOT_FORCE_SELECT_SPM_VDS_ALREADY_SPM); }	@org.junit.Test public void testCDAVdsIsSPM() { vds.setSpmStatus(VdsSpmStatus.SPM); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure("canDoAction did not fail on a VDS that is already set as SPM", command, EngineMessage.CANNOT_FORCE_SELECT_SPM_VDS_ALREADY_SPM); }
protected javax.ws.rs.core.Response doAction(final org.ovirt.engine.core.common.action.VdcActionType task, final org.ovirt.engine.core.common.action.VdcActionParametersBase params, final org.ovirt.engine.api.model.Action action, org.ovirt.engine.api.restapi.resource.AbstractBackendResource.PollingType pollingType) { awaitGrace(action); try { org.ovirt.engine.core.common.action.VdcReturnValueBase actionResult = doAction(task, params); if (actionResult.getHasAsyncTasks()) { if (expectBlocking(action)) { org.ovirt.engine.api.model.CreationStatus status = awaitCompletion(actionResult, pollingType); return actionStatus(status, action, org.ovirt.engine.api.restapi.resource.AbstractBackendActionableResource.get()); } else { return actionAsync(actionResult, action); } } else { return actionSuccess(action, org.ovirt.engine.api.restapi.resource.AbstractBackendActionableResource.get()); } } catch (java.lang.Exception e) { return handleError(e, action); } }	protected javax.ws.rs.core.Response doAction(final org.ovirt.engine.core.common.action.VdcActionType task, final org.ovirt.engine.core.common.action.VdcActionParametersBase params, final org.ovirt.engine.api.model.Action action, org.ovirt.engine.api.restapi.resource.AbstractBackendResource.PollingType pollingType) { awaitGrace(action); try { org.ovirt.engine.core.common.action.VdcReturnValueBase actionResult = doAction(task, params); if (actionResult.getHasAsyncTasks()) { if (expectBlocking(action)) { org.ovirt.engine.api.model.CreationStatus status = awaitCompletion(actionResult, pollingType); return actionStatus(status, action, addLinks(newModel(id))); } else { return actionAsync(actionResult, action); } } else { return actionSuccess(action, addLinks(newModel(id))); } } catch (java.lang.Exception e) { return handleError(e, action); } }
private void addCpuPinning(final java.lang.String compatibilityVersion) { final java.lang.String cpuPinning = vm.getCpuPinning(); if (((org.apache.commons.lang.StringUtils.isNotEmpty(cpuPinning)) && (java.lang.Boolean.TRUE.equals(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>GetValue(ConfigValues.CpuPinningEnabled, compatibilityVersion)))) && (cpuPinning != null)) { final org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct pinDict = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct(); for (java.lang.String pin : cpuPinning.split("_")) { final java.lang.String[] split = pin.split("#"); pinDict.add(split[0], split[1]); } createInfo.add(VdsProperties.cpuPinning, pinDict); } }	private void addCpuPinning(final java.lang.String compatibilityVersion) { final java.lang.String cpuPinning = vm.getCpuPinning(); if ((org.apache.commons.lang.StringUtils.isNotEmpty(cpuPinning)) && (java.lang.Boolean.TRUE.equals(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>GetValue(ConfigValues.CpuPinningEnabled, compatibilityVersion)))) { final org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct pinDict = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct(); for (java.lang.String pin : cpuPinning.split("_")) { final java.lang.String[] split = pin.split("#"); pinDict.add(split[0], split[1]); } createInfo.add(VdsProperties.cpuPinning, pinDict); } }
public boolean entityStateEqualTo(org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel other) { if (((getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VmPool) && ((other.getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VmPool)) { return getEntity().equals(other.getEntity()); } else if (((getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VM) && ((other.getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VM)) { org.ovirt.engine.core.common.businessentities.VM thisVm = ((org.ovirt.engine.core.common.businessentities.VM) (getEntity())); org.ovirt.engine.core.common.businessentities.VM otherVm = ((org.ovirt.engine.core.common.businessentities.VM) (other.getEntity())); return ((thisVm.getDynamicData().getStatus().equals(otherVm.getDynamicData().getStatus())) && (thisVm.getDynamicData().getConsoleCurrentUserName().equals(otherVm.getDynamicData().getConsoleCurrentUserName()))) && (thisVm.getStaticData().equals(otherVm.getStaticData())); } return false; }	public boolean entityStateEqualTo(org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel other) { if (((getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VmPool) && ((other.getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VmPool)) { return getEntity().equals(other.getEntity()); } else if (((getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VM) && ((other.getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VM)) { org.ovirt.engine.core.common.businessentities.VM thisVm = ((org.ovirt.engine.core.common.businessentities.VM) (getEntity())); org.ovirt.engine.core.common.businessentities.VM otherVm = ((org.ovirt.engine.core.common.businessentities.VM) (other.getEntity())); boolean consoleUsersEqual = ((thisVm.getConsoleCurentUserName()) != null) && (thisVm.getConsoleCurentUserName().equals(otherVm.getConsoleCurentUserName())); return ((thisVm.getDynamicData().getStatus().equals(otherVm.getDynamicData().getStatus())) && consoleUsersEqual) && (thisVm.getStaticData().equals(otherVm.getStaticData())); } return false; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.ExternalStatus.class, to = org.ovirt.engine.api.model.EntityExternalStatus.class) public static org.ovirt.engine.core.common.businessentities.ExternalStatus map(org.ovirt.engine.api.model.EntityExternalStatus entityStatus, org.ovirt.engine.core.common.businessentities.ExternalStatus template) { switch (entityStatus) { case OK : return org.ovirt.engine.core.common.businessentities.ExternalStatus.Ok; case INFO : return org.ovirt.engine.core.common.businessentities.ExternalStatus.Info; case WARNING : return org.ovirt.engine.core.common.businessentities.ExternalStatus.Warning; case ERROR : return org.ovirt.engine.core.common.businessentities.ExternalStatus.Error; case FAILURE : return org.ovirt.engine.core.common.businessentities.ExternalStatus.Failure; default : return null; } }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.EntityExternalStatus.class, to = org.ovirt.engine.core.common.businessentities.ExternalStatus.class) public static org.ovirt.engine.core.common.businessentities.ExternalStatus map(org.ovirt.engine.api.model.EntityExternalStatus entityStatus, org.ovirt.engine.core.common.businessentities.ExternalStatus template) { switch (entityStatus) { case OK : return org.ovirt.engine.core.common.businessentities.ExternalStatus.Ok; case INFO : return org.ovirt.engine.core.common.businessentities.ExternalStatus.Info; case WARNING : return org.ovirt.engine.core.common.businessentities.ExternalStatus.Warning; case ERROR : return org.ovirt.engine.core.common.businessentities.ExternalStatus.Error; case FAILURE : return org.ovirt.engine.core.common.businessentities.ExternalStatus.Failure; default : return null; } }
public static void GetRoleList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RolesEntity>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RolesEntity>(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllRoles, new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters(), aQuery); }	public static void GetRoleList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Role>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Role>(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllRoles, new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters(), aQuery); }
@java.lang.SuppressWarnings("unchecked") protected javax.ws.rs.core.UriInfo setUpUriExpectationsWithMax() { javax.ws.rs.core.UriInfo uriInfo = control.createMock(javax.ws.rs.core.UriInfo.class); expect(uriInfo.getBaseUri()).andReturn(java.net.URI.create(org.ovirt.engine.api.restapi.resource.URI_BASE)).anyTimes(); java.util.List<javax.ws.rs.core.PathSegment> psl = new java.util.ArrayList<javax.ws.rs.core.PathSegment>(); javax.ws.rs.core.PathSegment ps = control.createMock(javax.ws.rs.core.PathSegment.class); javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> matrixParams = control.createMock(javax.ws.rs.core.MultivaluedMap.class); expect(matrixParams.isEmpty()).andReturn(false).anyTimes(); expect(matrixParams.containsKey("max")).andReturn(true).anyTimes(); java.util.List<java.lang.String> matrixParamsList = control.createMock(java.util.List.class); expect(matrixParams.get("max")).andReturn(matrixParamsList).anyTimes(); expect(ps.getMatrixParameters()).andReturn(matrixParams).anyTimes(); expect(matrixParamsList.size()).andReturn(1).anyTimes(); expect(matrixParamsList.get(0)).andReturn("2").anyTimes(); psl.add(ps); expect(uriInfo.getPathSegments()).andReturn(psl).anyTimes(); return uriInfo; }	@java.lang.SuppressWarnings("unchecked") protected javax.ws.rs.core.UriInfo setUpUriExpectationsWithMax(boolean badFormat) { javax.ws.rs.core.UriInfo uriInfo = control.createMock(javax.ws.rs.core.UriInfo.class); expect(uriInfo.getBaseUri()).andReturn(java.net.URI.create(org.ovirt.engine.api.restapi.resource.URI_BASE)).anyTimes(); java.util.List<javax.ws.rs.core.PathSegment> psl = new java.util.ArrayList<javax.ws.rs.core.PathSegment>(); javax.ws.rs.core.PathSegment ps = control.createMock(javax.ws.rs.core.PathSegment.class); javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> matrixParams = control.createMock(javax.ws.rs.core.MultivaluedMap.class); expect(matrixParams.isEmpty()).andReturn(false).anyTimes(); expect(matrixParams.containsKey("max")).andReturn(true).anyTimes(); java.util.List<java.lang.String> matrixParamsList = control.createMock(java.util.List.class); expect(matrixParams.get("max")).andReturn(matrixParamsList).anyTimes(); expect(ps.getMatrixParameters()).andReturn(matrixParams).anyTimes(); expect(matrixParamsList.size()).andReturn(1).anyTimes(); expect(matrixParamsList.get(0)).andReturn((badFormat ? "bla3" : "2")).anyTimes(); psl.add(ps); expect(uriInfo.getPathSegments()).andReturn(psl).anyTimes(); return uriInfo; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.UpdateVmPolicy, new org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.Params(org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm().getId(), org.ovirt.engine.core.bll.VmSlaPolicyCommand.getParameters().getVm().getStaticData().getCpuLimit())); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.VmSlaPolicyCommand.setSucceeded(true); } else { org.ovirt.engine.core.common.errors.VdcFault fault = new org.ovirt.engine.core.common.errors.VdcFault(); fault.setError(vdsReturnValue.getVdsError().getCode()); fault.setMessage(vdsReturnValue.getVdsError().getMessage()); org.ovirt.engine.core.bll.VmSlaPolicyCommand.getReturnValue().setFault(fault); } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.UpdateVmPolicy, new org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams(org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVmId(), org.ovirt.engine.core.bll.VmSlaPolicyCommand.getParameters().getCpuLimit())); setSucceeded(vdsReturnValue.getSucceeded()); }
@javax.ws.rs.Path("{action: (approve|install|fence|activate|deactivate|commitnetconfig|iscsidiscover|iscsilogin|refreshcapabilities)}/{oid}") public org.ovirt.engine.api.resource.ActionResource getActionSubresource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid);	@javax.ws.rs.Path("{action: (approve|install|fence|activate|deactivate|commitnetconfig|iscsidiscover|iscsilogin)}/{oid}") public org.ovirt.engine.api.resource.ActionResource getActionSubresource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid);
@org.junit.Test public void testGetClustersHavingHosts() { java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = ((org.ovirt.engine.core.dao.VdsGroupDAOImpl) (dao)).getClustersHavingHosts(); assertNotNull(clusters); assertThat(clusters, hasSize(4)); }	@org.junit.Test public void testGetClustersHavingHosts() { java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = ((org.ovirt.engine.core.dao.VdsGroupDaoImpl) (dao)).getClustersHavingHosts(); assertNotNull(clusters); assertThat(clusters, hasSize(4)); }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__ACTION__ADD); addValidateMessage(EngineMessage.VAR__TYPE__USER_PROFILE); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__ADD); addValidationMessage(EngineMessage.VAR__TYPE__USER_PROFILE); }
public void setGuestOsNamedVersion() { if ((guestOsType) == (org.ovirt.engine.core.common.businessentities.OsType.Linux)) { java.lang.String optional = ""; if (!(org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(guestOsCodename))) { optional = org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel.messages.guestOSVersionOptional(guestOsCodename); } guestOsNamedVersion = org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel.messages.guestOSVersionLinux(guestOsDistribution, guestOsVersion, optional); } else if (((guestOsType) == (org.ovirt.engine.core.common.businessentities.OsType.Windows)) && (guestOs.startsWith("Win "))) { if (guestOs.startsWith("Win 20")) { guestOsNamedVersion = org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel.messages.guestOSVersionWindowsServer(guestOs.substring(4), guestOsVersion); } else { guestOsNamedVersion = org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel.messages.guestOSVersionWindows(guestOs.substring(4), guestOsVersion); } } }	private void setGuestOsNamedVersion() { if ((guestOsType) == (org.ovirt.engine.core.common.businessentities.OsType.Linux)) { java.lang.String optional = ""; if (!(org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(guestOsCodename))) { optional = org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel.messages.guestOSVersionOptional(guestOsCodename); } guestOsNamedVersion = org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel.messages.guestOSVersionLinux(guestOsDistribution, guestOsVersion, optional); } else if (((guestOsType) == (org.ovirt.engine.core.common.businessentities.OsType.Windows)) && (guestOs.startsWith("Win "))) { if (guestOs.startsWith("Win 20")) { guestOsNamedVersion = org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel.messages.guestOSVersionWindowsServer(guestOs.substring(4), guestOsVersion); } else { guestOsNamedVersion = org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel.messages.guestOSVersionWindows(guestOs.substring(4), guestOsVersion); } } }
protected boolean checkQuotaValidationCommon(org.ovirt.engine.core.common.businessentities.Quota quota, java.util.List<java.lang.String> messages) { if (quota == null) { messages.add(EngineMessages.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID.toString()); return false; } if (((!(checkQuotaNameExisting(quota, messages))) || (!(org.ovirt.engine.core.bll.QuotaCRUDCommand.validateQuotaStorageLimitation(quota, messages)))) || (!(org.ovirt.engine.core.bll.QuotaCRUDCommand.validateQuotaVdsGroupLimitation(quota, messages)))) { return false; } return true; }	protected boolean checkQuotaValidationCommon(org.ovirt.engine.core.common.businessentities.Quota quota, java.util.List<java.lang.String> messages) { if (quota == null) { messages.add(EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID.toString()); return false; } if (((!(checkQuotaNameExisting(quota, messages))) || (!(org.ovirt.engine.core.bll.QuotaCRUDCommand.validateQuotaStorageLimitation(quota, messages)))) || (!(org.ovirt.engine.core.bll.QuotaCRUDCommand.validateQuotaVdsGroupLimitation(quota, messages)))) { return false; } return true; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getIsScsiReservationUsed() { return isScsiReservationUsed; }	public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getIsUsingScsiReservation() { return isUsingScsiReservation; }
@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveAlreadySlavesForDifferentBond() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond("bond1"); org.ovirt.engine.core.common.businessentities.network.Bond differentBond = createBond("bond2"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveA = createBondSlave(bond, "slaveA"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveB = createBondSlave(differentBond, "slaveB"); setBondSlaves(bond, slaveA, slaveB); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ALREADY_IN_BOND; org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(bond))).addExistingInterfaces(bond, differentBond, slaveA, slaveB).build(); _doTestValidateModifiedBondSlaves(spy(validator), ValidationResult.VALID, ValidationResult.VALID, failsWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(engineMessage, slaveB.getName()))); }	@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveAlreadySlavesForDifferentBond() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond("bond1"); org.ovirt.engine.core.common.businessentities.network.Bond differentBond = createBond("bond2"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveA = createBondSlave(bond, "slaveA"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveB = createBondSlave(differentBond, "slaveB"); setBondSlaves(bond, slaveA, slaveB); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ALREADY_IN_BOND; org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(bond))).addExistingInterfaces(bond, differentBond, slaveA, slaveB).build(); doTestValidateModifiedBondSlaves(spy(validator), ValidationResult.VALID, ValidationResult.VALID, failsWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(engineMessage, slaveB.getName()))); }
public java.lang.Integer getVmsCoresCount() { return mVdsDynamic.getVmsCoresCount(); }	public java.lang.Integer getVmsCoresCount() { return vdsDynamic.getVmsCoresCount(); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (org.apache.commons.lang.StringUtils.isEmpty(getParameters().getSnapshotName())) { failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_NAME_IS_EMPTY); } snapshot = getGlusterVolumeSnapshotDao().getByName(getGlusterVolumeId(), getParameters().getSnapshotName()); if ((snapshot) == null) { failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_DOES_NOT_EXIST, getParameters().getSnapshotName()); } return true; }	@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } return true; }
public org.ovirt.engine.core.bll.validator.VfsConfigValidator getVfsConfigValidator() { if ((vfsConfigValidator) == null) { vfsConfigValidator = new org.ovirt.engine.core.bll.validator.VfsConfigValidator(org.ovirt.engine.core.bll.network.host.VfsConfigCommandBase.getParameters().getNicId()); } return vfsConfigValidator; }	public org.ovirt.engine.core.bll.validator.VfsConfigValidator getVfsConfigValidator() { if ((vfsConfigValidator) == null) { vfsConfigValidator = new org.ovirt.engine.core.bll.validator.VfsConfigValidator(org.ovirt.engine.core.bll.network.host.VfsConfigCommandBase.getParameters().getNicId(), getVfsConfig()); } return vfsConfigValidator; }
public boolean validate() { boolean res = true; for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : labelModels.getItems()) { java.lang.String label = labelModel.getSelectedItem(); java.lang.String usingIface = labelToIface.get(label); if ((usingIface != null) && (!(containedIfaces.contains(usingIface)))) { labelModel.setIsValid(false); labelModel.getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().labelInUse(label, usingIface)); res = false; } } return res; }	public boolean validate() { boolean res = true; for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : getItems()) { java.lang.String label = labelModel.getSelectedItem(); java.lang.String usingIface = labelToIface.get(label); if ((usingIface != null) && (!(containedIfaces.contains(usingIface)))) { labelModel.getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().labelInUse(label, usingIface)); labelModel.setIsValid(false); res = false; } } return res; }
java.lang.String GlusterSyncWebhookException();	java.lang.String GlusterWebhookSyncException();
@java.lang.Override protected org.ovirt.engine.core.common.scheduling.enums.AffinityEnforcementType getRawValue(org.ovirt.engine.core.common.scheduling.AffinityGroup object) { return object.getEnforcementType(); }	@java.lang.Override protected java.lang.Boolean getRawValue(org.ovirt.engine.core.common.scheduling.AffinityGroup object) { return object.isEnforcing(); }
private void restoreNetworkParameters(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters netParams = getSetupModel().getNetworkToLastDetachParams().get(getName()); if (netParams != null) { nic.setBootProtocol(netParams.getBootProtocol()); nic.setAddress(netParams.getAddress()); nic.setSubnet(netParams.getSubnet()); nic.setGateway(netParams.getGateway()); nic.setQos(netParams.getQos()); nic.setCustomProperties(netParams.getCustomProperties()); } else if ((nic.getBootProtocol()) == null) { nic.setBootProtocol((isManagement() ? org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.DHCP : org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.NONE)); } }	public void restoreNetworkAttachmentParameters(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters netParams = getSetupModel().getNetworkToLastDetachParams().get(getName()); if (netParams != null) { if (netParams.isQosOverridden()) { attachment.setHostNetworkQos(netParams.getQos()); } attachment.setProperties(netParams.getCustomProperties()); } }
@java.lang.Override public void testQuery() throws java.lang.Exception { setUpGetGraphicsExpectations(3); setUpGetBallooningExpectations(3); super.testQuery(); }	@java.lang.Override public void testQuery() throws java.lang.Exception { setUpGetGraphicsExpectations(3); super.testQuery(); }
@java.lang.Override public void removeFromSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { }	@java.lang.Override public com.google.gwt.event.shared.HandlerRegistration addLoadHandler(com.google.gwt.event.dom.client.LoadHandler handler) { return null; }
protected boolean checkMasterDomainIsUp() { boolean returnValue = true; java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomainDao().getAllForStoragePool(org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStoragePool().getId()); storageDomains = org.ovirt.engine.core.utils.linq.LinqUtils.filter(storageDomains, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.StorageDomain a) { return ((a.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master)) && ((a.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)); } }); if (storageDomains.isEmpty()) { addCanDoActionMessage(EngineMessages.ACTION_TYPE_FAILED_MASTER_STORAGE_DOMAIN_NOT_ACTIVE); returnValue = false; } return returnValue; }	protected boolean checkMasterDomainIsUp() { boolean returnValue = true; java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomainDao().getAllForStoragePool(org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStoragePool().getId()); storageDomains = org.ovirt.engine.core.utils.linq.LinqUtils.filter(storageDomains, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.StorageDomain a) { return ((a.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master)) && ((a.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)); } }); if (storageDomains.isEmpty()) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_MASTER_STORAGE_DOMAIN_NOT_ACTIVE); returnValue = false; } return returnValue; }
private void applyKerberosConfiguration() throws org.ovirt.engine.core.utils.kerberos.ManageDomainsResult { try { if (org.ovirt.engine.core.utils.FileUtil.fileExists(utilityConfiguration.getkrb5confFilePath())) { java.text.SimpleDateFormat ft = new java.text.SimpleDateFormat("yyyyMMddhhmmsszzz"); java.lang.String destFileName = ((utilityConfiguration.getkrb5confFilePath()) + ".backup_") + (ft.format(new java.util.Date())); org.ovirt.engine.core.utils.kerberos.ManageDomains.log.info(("Performing backup of kerberos configuration file to " + destFileName)); org.ovirt.engine.core.utils.FileUtil.copyFile(utilityConfiguration.getkrb5confFilePath(), destFileName); } org.ovirt.engine.core.utils.kerberos.ManageDomains.log.info("Applying kerberos configuration"); org.ovirt.engine.core.utils.FileUtil.copyFile(((utilityConfiguration.getkrb5confFilePath()) + (TESTING_KRB5_CONF_SUFFIX)), utilityConfiguration.getkrb5confFilePath()); org.ovirt.engine.core.utils.FileUtil.deleteFile(((utilityConfiguration.getkrb5confFilePath()) + (TESTING_KRB5_CONF_SUFFIX))); } catch (java.io.IOException e) { throw new org.ovirt.engine.core.utils.kerberos.ManageDomainsResult(ManageDomainsResultEnum.FAILURE_WHILE_APPLYING_KERBEROS_CONFIGURATION, "Check Connection to DB, kerberos configuration couldn't been saved", e.getMessage()); } }	private void applyKerberosConfiguration() throws org.ovirt.engine.core.utils.kerberos.ManageDomainsResult { try { if (org.ovirt.engine.core.utils.FileUtil.fileExists(utilityConfiguration.getkrb5confFilePath())) { java.text.SimpleDateFormat ft = new java.text.SimpleDateFormat("yyyyMMddhhmmsszzz"); java.lang.String destFileName = ((utilityConfiguration.getkrb5confFilePath()) + ".backup_") + (ft.format(new java.util.Date())); org.ovirt.engine.core.utils.kerberos.ManageDomains.log.info(("Performing backup of kerberos configuration file to " + destFileName)); org.ovirt.engine.core.utils.FileUtil.copyFile(utilityConfiguration.getkrb5confFilePath(), destFileName); } org.ovirt.engine.core.utils.kerberos.ManageDomains.log.info("Applying kerberos configuration"); org.ovirt.engine.core.utils.FileUtil.copyFile(((utilityConfiguration.getkrb5confFilePath()) + (TESTING_KRB5_CONF_SUFFIX)), utilityConfiguration.getkrb5confFilePath()); org.ovirt.engine.core.utils.FileUtil.deleteFile(((utilityConfiguration.getkrb5confFilePath()) + (TESTING_KRB5_CONF_SUFFIX))); } catch (java.io.IOException e) { throw new org.ovirt.engine.core.utils.kerberos.ManageDomainsResult(ManageDomainsResultEnum.FAILURE_WHILE_APPLYING_KERBEROS_CONFIGURATION, e.getMessage()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (((connectAutomatically.readConnectAutomatically()) && (model.getCanConnectAutomatically())) && (!(alreadyOpened))) { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { connect(((java.lang.Boolean) (returnValue))); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getIsPasswordDelegationPossible(asyncQuery); } unregisterModels(); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (((connectAutomatically.readConnectAutomatically()) && (model.getCanConnectAutomatically())) && (!(alreadyOpened))) { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { connect(((java.lang.Boolean) (returnValue))); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getIsPasswordDelegationPossible(asyncQuery); } }
org.ovirt.engine.core.common.businessentities.aaa.UserProfile getByUserId(org.ovirt.engine.core.compat.Guid userId);	org.ovirt.engine.core.common.businessentities.UserProfile getByUserId(org.ovirt.engine.core.compat.Guid userId);
public java.lang.String determineProtocolMessage(org.ovirt.engine.ui.uicommonweb.models.ConsoleAwareModel item) { if (item.isPool()) { return ""; } if (!((isRDPAvailable()) || (isSpiceAvailable()))) { return BROWSER_NOT_SUPPORTED_MESSAGE; } boolean isSpice = ((item.getDefaultConsoleModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel) && (isSpiceAvailable()); boolean isRdp = ((item.getAdditionalConsoleModel()) != null) && (isRDPAvailable()); if ((!isSpice) && (!isRdp)) { return VNC_NOT_SUPPORTED_MESSAGE; } return ""; }	public java.lang.String determineProtocolMessage(org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel item) { if (item.isPool()) { return ""; } if (!((isRDPAvailable()) || (isSpiceAvailable()))) { return BROWSER_NOT_SUPPORTED_MESSAGE; } boolean isSpice = ((item.getDefaultConsoleModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel) && (isSpiceAvailable()); boolean isRdp = ((item.getAdditionalConsoleModel()) != null) && (isRDPAvailable()); if ((!isSpice) && (!isRdp)) { return VNC_NOT_SUPPORTED_MESSAGE; } return ""; }
public org.ovirt.engine.core.common.businessentities.network.NameServer flush() { return new org.ovirt.engine.core.common.businessentities.network.NameServer(this.nameServerEntity.getEntity()); }	public java.lang.String flush() { return getEntity(); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.GetTagsByUserIdQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.DbFacade.getInstance().getTagDao().getAllForUsers(org.ovirt.engine.core.bll.GetTagsByUserIdQuery.getParameters().getUserId())); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.GetTagsByUserIdQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getAllForUsers(org.ovirt.engine.core.bll.GetTagsByUserIdQuery.getParameters().getUserId())); }
@org.junit.Test public void testStop() throws java.lang.Exception { setupGetVmExpectations(); setUriInfo(setUpActionExpectations(VdcActionType.StopVm, org.ovirt.engine.core.common.action.StopVmParameters.class, new java.lang.String[]{ "VmId", "StopVmType" }, new java.lang.Object[]{ GUIDS[0], org.ovirt.engine.core.common.action.StopVmTypeEnum.NORMAL })); verifyActionResponse(resource.stop(new org.ovirt.engine.api.model.Action())); }	@org.junit.Test public void testStop() throws java.lang.Exception { setUriInfo(setUpActionExpectations(VdcActionType.StopVm, org.ovirt.engine.core.common.action.StopVmParameters.class, new java.lang.String[]{ "VmId", "StopVmType" }, new java.lang.Object[]{ GUIDS[0], org.ovirt.engine.core.common.action.StopVmTypeEnum.NORMAL })); verifyActionResponse(resource.stop(new org.ovirt.engine.api.model.Action())); }
private void postExportGetMissingTemplates(java.util.ArrayList<java.lang.String> missingTemplatesFromVms) { org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel) (getWindow())); if (!(missingTemplatesFromVms.isEmpty())) { model.stopProgress(); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel<java.lang.String> confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel<java.lang.String>(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().baseTemplatesNotFoundOnExportDomainTitle()); confirmModel.setHelpTag(HelpTag.base_template_not_found_on_export_domain); confirmModel.setHashName("base_template_not_found_on_export_domain"); confirmModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().theFollowingTemplatesAreMissingOnTargetExportDomainForTemplateVersionsMsg()); confirmModel.setItems(missingTemplatesFromVms); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnExportNoTemplates", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); confirmModel.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); confirmModel.getCommands().add(tempVar2); } else { doExport(); } }	private void postExportGetMissingTemplates(java.util.ArrayList<java.lang.String> missingTemplatesFromVms) { org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel) (getWindow())); if (!(missingTemplatesFromVms.isEmpty())) { model.stopProgress(); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().baseTemplatesNotFoundOnExportDomainTitle()); confirmModel.setHelpTag(HelpTag.base_template_not_found_on_export_domain); confirmModel.setHashName("base_template_not_found_on_export_domain"); confirmModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().theFollowingTemplatesAreMissingOnTargetExportDomainForTemplateVersionsMsg()); confirmModel.setItems(missingTemplatesFromVms); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnExportNoTemplates", this); confirmModel.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("CancelConfirmation", this); confirmModel.getCommands().add(tempVar2); } else { doExport(); } }
private void setNode() { _isNode = true; _deploy.getVds().setVdsType(VDSType.oVirtLegacyNode); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsStaticDao().update(_deploy.getVds().getStaticData()); return null; }); }	private void setNode() { _isNode = true; _deploy.getVds().setVdsType(VDSType.oVirtVintageNode); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsStaticDao().update(_deploy.getVds().getStaticData()); return null; }); }
@java.lang.Override protected void endSuccessfully() { if ((org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getDestinationDiskImage()) != null) { org.ovirt.engine.core.common.businessentities.storage.DiskImage curr = org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getDestinationDiskImage(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> orderedCinderSnapshots = org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getDiskImageDao().getAllSnapshotsForLeaf(curr.getImageId()); if ((orderedCinderSnapshots.size()) > 1) { org.ovirt.engine.core.common.businessentities.storage.DiskImage volumeBasedOnsnapshot = orderedCinderSnapshots.get(1); volumeBasedOnsnapshot.setParentId(curr.getParentId()); org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getBaseDiskDao().update(volumeBasedOnsnapshot); org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getImageDao().update(volumeBasedOnsnapshot.getImage()); } org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getImageDao().remove(curr.getImageId()); } if (!(org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getParameters().isParentHasTasks())) { org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getBackend().endAction(org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getParameters().getParentCommand(), org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getParameters().getParentParameters(), null); } org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.setSucceeded(true); }	@java.lang.Override protected void endSuccessfully() { if ((org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getDestinationDiskImage()) != null) { org.ovirt.engine.core.common.businessentities.storage.DiskImage curr = org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getDestinationDiskImage(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> orderedCinderSnapshots = org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getDiskImageDao().getAllSnapshotsForParent(curr.getImageId()); if (!(orderedCinderSnapshots.isEmpty())) { org.ovirt.engine.core.common.businessentities.storage.DiskImage volumeBasedOnsnapshot = orderedCinderSnapshots.get(0); volumeBasedOnsnapshot.setParentId(curr.getParentId()); org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getImageDao().update(volumeBasedOnsnapshot.getImage()); } org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getImageDao().remove(curr.getImageId()); } org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.setSucceeded(true); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.VDS.class, to = org.ovirt.engine.api.model.HardwareInformation.class) public static org.ovirt.engine.api.model.HardwareInformation map(org.ovirt.engine.core.common.businessentities.VDS entity, org.ovirt.engine.api.model.HardwareInformation template) { org.ovirt.engine.api.model.HardwareInformation model = (template != null) ? template : new org.ovirt.engine.api.model.HardwareInformation(); model.setManufacturer(entity.getHardwareManufacturer()); model.setFamily(entity.getHardwareFamily()); model.setProductName(entity.getHardwareProductName()); model.setSerialNumber(entity.getHardwareSerialNumber()); model.setUuid(entity.getHardwareUUID()); model.setVersion(entity.getHardwareVersion()); model.setSupportedRngSources(new org.ovirt.engine.api.model.HardwareInformation.SupportedRngSourcesItem()); model.getSupportedRngSources().getSupportedRngSources().addAll(org.ovirt.engine.api.restapi.types.RngDeviceMapper.mapRngSources(entity.getSupportedRngSources())); return model; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.VDS.class, to = org.ovirt.engine.api.model.HardwareInformation.class) public static org.ovirt.engine.api.model.HardwareInformation map(org.ovirt.engine.core.common.businessentities.VDS entity, org.ovirt.engine.api.model.HardwareInformation template) { org.ovirt.engine.api.model.HardwareInformation model = (template != null) ? template : new org.ovirt.engine.api.model.HardwareInformation(); model.setManufacturer(entity.getHardwareManufacturer()); model.setFamily(entity.getHardwareFamily()); model.setProductName(entity.getHardwareProductName()); model.setSerialNumber(entity.getHardwareSerialNumber()); model.setUuid(entity.getHardwareUUID()); model.setVersion(entity.getHardwareVersion()); model.setSupportedRngSources(new org.ovirt.engine.api.model.HardwareInformation.SupportedRngSourcesList()); model.getSupportedRngSources().getSupportedRngSources().addAll(org.ovirt.engine.api.restapi.types.RngDeviceMapper.mapRngSources(entity.getSupportedRngSources())); return model; }
public void setPmPassword(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> value) { password = value; }	public void setPmPassword(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> value) { if (value != null) { password = value; } }
private org.ovirt.engine.core.bll.network.macpool.MacPool createPoolInternal(org.ovirt.engine.core.common.businessentities.MacPool macPool) { if (macPools.containsKey(macPool.getId())) { throw new java.lang.IllegalStateException(org.ovirt.engine.core.bll.network.macpool.MacPoolPerDc.UNABLE_TO_CREATE_MAC_POOL_IT_ALREADY_EXIST); } org.ovirt.engine.core.bll.network.macpool.MacPool poolForScope = new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges(macPoolToRanges(macPool), macPool.isAllowDuplicateMacAddresses()); macPools.put(macPool.getId(), org.ovirt.engine.core.bll.network.macpool.MacPoolLockingProxy.createMacPoolLockingProxy(poolForScope)); return poolForScope; }	private org.ovirt.engine.core.bll.network.macpool.MacPool createPoolInternal(org.ovirt.engine.core.common.businessentities.MacPool macPool) { if (macPools.containsKey(macPool.getId())) { throw new java.lang.IllegalStateException(org.ovirt.engine.core.bll.network.macpool.MacPoolPerDc.UNABLE_TO_CREATE_MAC_POOL_IT_ALREADY_EXIST); } org.ovirt.engine.core.bll.network.macpool.MacPool poolForScope = new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges(macPoolToRanges(macPool), macPool.isAllowDuplicateMacAddresses()); macPools.put(macPool.getId(), lockedObjectFactory.createLockingInstance(poolForScope, org.ovirt.engine.core.bll.network.macpool.MacPool.class)); return poolForScope; }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.GlusterBricks bricks) { for (org.ovirt.engine.api.model.GlusterBrick brick : bricks.getGlusterBricks()) { validateParameters(brick, "serverId", "brickDir"); } java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> brickEntities = mapBricks(asGuid(getVolumeId()), bricks); java.lang.Integer replicaCount = org.ovirt.engine.api.common.util.QueryHelper.getIntegerMatrixParameter(uriInfo, "replica_count"); java.lang.Integer stripeCount = org.ovirt.engine.api.common.util.QueryHelper.getIntegerMatrixParameter(uriInfo, "stripe_count"); return performCreationMultiple(VdcActionType.AddBricksToGlusterVolume, new org.ovirt.engine.core.common.action.gluster.GlusterVolumeBricksActionParameters(asGuid(getVolumeId()), brickEntities, (replicaCount != null ? replicaCount : 0), (stripeCount != null ? replicaCount : 0), isForce()), new org.ovirt.engine.api.restapi.resource.gluster.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetGlusterBrickById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }	@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.GlusterBricks bricks) { for (org.ovirt.engine.api.model.GlusterBrick brick : bricks.getGlusterBricks()) { validateParameters(brick, "serverId", "brickDir"); } java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> brickEntities = mapBricks(asGuid(getVolumeId()), bricks); int replicaCount = org.ovirt.engine.api.common.util.QueryHelper.getIntegerMatrixParameter(uriInfo, org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBricksResource.REPLICA_COUNT, 0, 0); int stripeCount = org.ovirt.engine.api.common.util.QueryHelper.getIntegerMatrixParameter(uriInfo, org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBricksResource.STRIPE_COUNT, 0, 0); return performCreationMultiple(VdcActionType.AddBricksToGlusterVolume, new org.ovirt.engine.core.common.action.gluster.GlusterVolumeBricksActionParameters(asGuid(getVolumeId()), brickEntities, replicaCount, stripeCount, isForce()), new org.ovirt.engine.api.restapi.resource.gluster.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetGlusterBrickById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult mtuValid() { return (network.getMtu()) == 0 ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_CANNOT_HAVE_MTU); }	@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult mtuValid() { return (network.getMtu()) == 0 ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_CANNOT_HAVE_MTU); }
public org.ovirt.engine.core.bll.ValidationResult isStorageDomainFormatCorrectForDC() { if (isStorageDomainOfTypeIsoOrExport()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((storagePool) != null) { if ((org.ovirt.engine.core.common.utils.VersionStorageFormatUtil.getPreferredForVersion(storagePool.getCompatibilityVersion(), storageDomainStatic.getStorageType()).compareTo(storageDomainStatic.getStorageFormat())) < 0) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_FORMAT_ILLEGAL, java.lang.String.format("$storageFormat %1$s", storageDomainStatic.getStorageFormat().toString())); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult isStorageDomainFormatCorrectForDC() { if (isStorageDomainOfTypeIsoOrExport()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((storagePool) != null) { if ((org.ovirt.engine.core.common.utils.VersionStorageFormatUtil.getPreferredForVersion(storagePool.getCompatibilityVersion(), storageDomainStatic.getStorageType()).compareTo(storageDomainStatic.getStorageFormat())) < 0) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_FORMAT_ILLEGAL, java.lang.String.format("$storageFormat %1$s", storageDomainStatic.getStorageFormat().toString())); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public void setUiPluginTabSelected(java.lang.String tabName) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?, ?> uiPluginListModel = uiPluginLabelListMap.get(tabName); if (uiPluginListModel != null) { setSelectedItem(uiPluginListModel); } setSearchStringPrefix(uiPluginListModel.getListName()); setSearchString(""); }	public void setPluginTabSelected(java.lang.String historyToken) { org.ovirt.engine.ui.uicommonweb.models.plugin.PluginModel model = pluginModelMap.get(historyToken); if (model != null) { setSelectedItem(model); setSearchEnabled(false); } else { setSelectedItem(getDefaultItem()); } }
@java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { if (!(bondPopup.Validate())) { return; } sourceListModel.setConfirmWindow(null); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = ((org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface) (bondPopup.getBond().getSelectedItem())); setBondOptions(bond, bondPopup); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic1 = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (networkCommand.getOp1())); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic2 = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (networkCommand.getOp2())); java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> networks = ((nic1.getItems().size()) != 0) ? new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(nic1.getItems()) : new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(nic2.getItems()); networkCommand.Execute(bond); redraw(); for (org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic : getNics()) { if (nic.getName().equals(bond.getName())) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.attachNetworks(nic, networks, allNics); redraw(); return; } } }	@java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { if (!(bondPopup.Validate())) { return; } sourceListModel.setConfirmWindow(null); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = new org.ovirt.engine.core.common.businessentities.network.Bond(((java.lang.String) (bondPopup.getBond().getSelectedItem()))); setBondOptions(bond, bondPopup); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic1 = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (networkCommand.getOp1())); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic2 = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (networkCommand.getOp2())); java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> networks = ((nic1.getItems().size()) != 0) ? new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(nic1.getItems()) : new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(nic2.getItems()); networkCommand.Execute(bond); redraw(); for (org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic : getNics()) { if (nic.getName().equals(bond.getName())) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.attachNetworks(nic, networks, allNics); redraw(); return; } } }
@org.junit.Before public void setup() { validator = spy(new org.ovirt.engine.core.bll.validator.VnicProfileValidator(vmDao, networkFilterDao, vnicProfile)); doReturn(dbFacade).when(validator).getDbFacade(); when(dbFacade.getVnicProfileDao()).thenReturn(vnicProfileDao); when(dbFacade.getNetworkDao()).thenReturn(networkDao); when(dbFacade.getNetworkQosDao()).thenReturn(networkQosDao); when(dbFacade.getVmDao()).thenReturn(vmDao); initNetworkFilterDao(); when(vnicProfileDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vnicProfile); when(vnicProfileDao.getAllForNetwork(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vnicProfiles); }	@org.junit.Before public void setup() { validator = spy(new org.ovirt.engine.core.bll.validator.VnicProfileValidator(vnicProfile, vmDao, dcDao, networkFilterDao)); doReturn(dbFacade).when(validator).getDbFacade(); when(dbFacade.getVnicProfileDao()).thenReturn(vnicProfileDao); when(dbFacade.getNetworkDao()).thenReturn(networkDao); when(dbFacade.getNetworkQosDao()).thenReturn(networkQosDao); when(dbFacade.getVmDao()).thenReturn(vmDao); initNetworkFilterDao(); when(vnicProfileDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vnicProfile); when(vnicProfileDao.getAllForNetwork(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vnicProfiles); }
private void setVdsmNamesInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfacesToUpdate = new java.util.LinkedList<>(); interfaces.stream().filter(( iface) -> java.util.Objects.equals(iface.getNetworkName(), network.getName())).forEach(( iface) -> { iface.setNetworkName(network.getVdsmName()); interfacesToUpdate.add(iface); }); interfaceDao.massUpdateInterfacesForVds(interfacesToUpdate); }	private void setVdsmNamesInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfacesToUpdate = new java.util.LinkedList<>(); interfaces.stream().filter(( iface) -> java.util.Objects.equals(iface.getNetworkName(), network.getName())).forEach(( iface) -> { iface.setNetworkName(network.getVdsmName()); interfacesToUpdate.add(iface); }); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getInterfaceDao().massUpdateInterfacesForVds(interfacesToUpdate); }
public org.ovirt.engine.core.bll.ValidationResult isVirtIoScsiValid(org.ovirt.engine.core.common.businessentities.VM vm) { if ((org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI) != (disk.getDiskInterface())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((disk.getSgio()) != null) { if ((org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE) == (disk.getDiskStorageType())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.SCSI_GENERIC_IO_IS_NOT_SUPPORTED_FOR_IMAGE_DISK); } } if (vm != null) { if (!(org.ovirt.engine.core.common.FeatureSupported.virtIoScsi(vm.getVdsGroupCompatibilityVersion()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL); } if (!(isVirtioScsiControllerAttached(vm.getId()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.CANNOT_PERFORM_ACTION_VIRTIO_SCSI_IS_DISABLED); } return isOsSupportedForVirtIoScsi(vm); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult isVirtIoScsiValid(org.ovirt.engine.core.common.businessentities.VM vm) { if ((org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI) != (disk.getDiskInterface())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((disk.getSgio()) != null) { if ((org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE) == (disk.getDiskStorageType())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.SCSI_GENERIC_IO_IS_NOT_SUPPORTED_FOR_IMAGE_DISK); } } if (vm != null) { if (!(org.ovirt.engine.core.common.FeatureSupported.virtIoScsi(vm.getVdsGroupCompatibilityVersion()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL); } if (!(isVirtioScsiControllerAttached(vm.getId()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_PERFORM_ACTION_VIRTIO_SCSI_IS_DISABLED); } return isOsSupportedForVirtIoScsi(vm); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@org.junit.Test public void failsIfImported() throws java.lang.Exception { when(hostedEngineHelper.getStorageDomain()).thenReturn(new org.ovirt.engine.core.common.businessentities.StorageDomainStatic()); cmd.validate(); org.ovirt.engine.core.bll.ValidateTestUtils.assertValidateMessages("", cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); verify(backend, times(0)).runInternalQuery(eq(VdcQueryType.GetExistingStorageDomainList), any(org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class)); verify(cmd, times(0)).executeCommand(); }	@org.junit.Test public void failsIfImported() throws java.lang.Exception { when(hostedEngineHelper.getStorageDomain()).thenReturn(new org.ovirt.engine.core.common.businessentities.StorageDomainStatic()); cmd.validate(); org.ovirt.engine.core.bll.ValidateTestUtils.assertValidationMessages("", cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); verify(backend, times(0)).runInternalQuery(eq(VdcQueryType.GetExistingStorageDomainList), any(org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class)); verify(cmd, times(0)).executeCommand(); }
@org.junit.Test public void executeCommandWhenFailed() { cmd = spy(new org.ovirt.engine.core.bll.gluster.AddGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); setUpMocksForAdd(); mockBackend(false, VdcBllErrors.GlusterHookAddFailed); cmd.executeCommand(); verify(hooksDao, never()).updateGlusterHook(any(org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity.class)); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_ADD_FAILED); }	@org.junit.Test public void executeCommandWhenFailed() { cmd = spy(new org.ovirt.engine.core.bll.gluster.AddGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); setUpMocksForAdd(); mockBackend(false, VdcBllErrors.GlusterHookAddFailed); cmd.executeCommand(); verify(hooksDao, never()).updateGlusterHook(any(org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity.class)); verify(hooksDao, never()).removeGlusterServerHook(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class)); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_ADD_FAILED); }
public void isAnyHostUpInCluster(org.ovirt.engine.ui.frontend.AsyncQuery<java.lang.Boolean> aQuery, java.lang.String clusterName) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery<java.lang.Boolean> _asyncQuery) { if ((source != null) && (!(((java.util.List<?>) (source)).isEmpty()))) { return true; } return false; } }; getUpHostListByCluster(aQuery, clusterName, 1); }	public void isAnyHostUpInCluster(org.ovirt.engine.ui.frontend.AsyncQuery<java.lang.Boolean> aQuery, java.lang.String clusterName) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsNonEmptyCollectionConverter(); getUpHostListByCluster(aQuery, clusterName, 1); }
@java.lang.Override public void doPolling(org.ovirt.engine.core.compat.Guid cmdId, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandExecutionStatus(cmdId); if ((status != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) && ((org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandStatus(cmdId)) == (org.ovirt.engine.core.compat.CommandStatus.ACTIVE))) { return; } boolean anyFailed = false; int completedChildren = 0; org.ovirt.engine.core.bll.CommandBase<?> command = getCommand(cmdId); for (org.ovirt.engine.core.compat.Guid childCmdId : childCmdIds) { org.ovirt.engine.core.bll.CommandBase<?> child = getCommand(childCmdId); switch (org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandStatus(childCmdId)) { case NOT_STARTED : case ACTIVE : logWaitingForChildCommand(childCmdId, child.getActionType(), command.getActionType(), cmdId); return; case FAILED : case FAILED_RESTARTED : if (!(child.getParameters().getShouldBeEndedByParent())) { logWaitingForChildCommand(childCmdId, child.getActionType(), command.getActionType(), cmdId); return; } anyFailed = true; break; case ENDED_WITH_FAILURE : case UNKNOWN : anyFailed = true; break; case SUCCEEDED : if (!(child.getParameters().getShouldBeEndedByParent())) { logWaitingForChildCommand(childCmdId, child.getActionType(), command.getActionType(), cmdId); return; } default : ++completedChildren; break; } } childCommandsExecutionEnded(command, anyFailed, childCmdIds, status, completedChildren); }	@java.lang.Override public void doPolling(org.ovirt.engine.core.compat.Guid cmdId, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandExecutionStatus(cmdId); if ((status != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) && ((org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandStatus(cmdId)) == (org.ovirt.engine.core.compat.CommandStatus.ACTIVE))) { return; } boolean anyFailed = false; int completedChildren = 0; org.ovirt.engine.core.bll.CommandBase<?> command = getCommand(cmdId); for (org.ovirt.engine.core.compat.Guid childCmdId : childCmdIds) { org.ovirt.engine.core.bll.CommandBase<?> child = getCommand(childCmdId); switch (org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandStatus(childCmdId)) { case NOT_STARTED : case ACTIVE : logWaitingForChildCommand(child, command); return; case FAILED : case FAILED_RESTARTED : if (shouldWaitForEndMethodsCompletion(child, command)) { return; } anyFailed = true; break; case ENDED_WITH_FAILURE : case UNKNOWN : anyFailed = true; break; case SUCCEEDED : if (shouldWaitForEndMethodsCompletion(child, command)) { return; } default : ++completedChildren; } } childCommandsExecutionEnded(command, anyFailed, childCmdIds, status, completedChildren); }
@java.lang.Override public boolean authenticate(java.lang.String name, java.lang.String password) { return true; }	@java.lang.Override public void authenticate(java.lang.String name, java.lang.String password) { }
@org.junit.Test public void testCanDoActionWithEmptySnapshotGuid() { org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters params = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vmId, org.ovirt.engine.core.compat.Guid.Empty); cmd = spy(new org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand<org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters>(params)); doNothing().when(cmd).updateVmDisksFromDb(); doReturn(snapshotDao).when(cmd).getSnapshotDao(); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessages.ACTION_TYPE_FAILED_CORRUPTED_VM_SNAPSHOT_ID); }	@org.junit.Test public void testCanDoActionWithEmptySnapshotGuid() { org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters params = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vmId, org.ovirt.engine.core.compat.Guid.Empty); cmd = spy(new org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand<org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters>(params)); doNothing().when(cmd).updateVmDisksFromDb(); doReturn(snapshotDao).when(cmd).getSnapshotDao(); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_CORRUPTED_VM_SNAPSHOT_ID); }
@java.lang.Override public java.lang.Boolean runInTransaction() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ifaces = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(getInterfaces()); ifaces.addAll(getRemovedBonds().values()); org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CollectVdsNetworkData, new org.ovirt.engine.core.common.vdscommands.CollectHostNetworkDataVdsCommandParameters(getVds(), ifaces)); for (org.ovirt.engine.core.common.businessentities.network.Network net : getNetworks()) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus(getVdsGroupId(), net); } return java.lang.Boolean.TRUE; }	@java.lang.Override public java.lang.Boolean runInTransaction() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ifaces = new java.util.ArrayList(getInterfaces()); ifaces.addAll(getRemovedBonds().values()); org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CollectVdsNetworkData, new org.ovirt.engine.core.common.vdscommands.CollectHostNetworkDataVdsCommandParameters(getVds(), ifaces)); for (org.ovirt.engine.core.common.businessentities.network.Network net : getNetworks()) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus(getVdsGroupId(), net); } return java.lang.Boolean.TRUE; }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessages.VAR__ACTION__HOT_SET_CPUS); addCanDoActionMessage(EngineMessages.VAR__TYPE__VM); addCanDoActionMessageVariable("clusterVersion", org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getVdsGroupCompatibilityVersion()); addCanDoActionMessageVariable("architecture", org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getClusterArch()); }	@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__HOT_SET_CPUS); addCanDoActionMessage(EngineMessage.VAR__TYPE__VM); addCanDoActionMessageVariable("clusterVersion", org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getVdsGroupCompatibilityVersion()); addCanDoActionMessageVariable("architecture", org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getClusterArch()); }
java.lang.String ProviderType___ESXI();	java.lang.String ProviderType___VMWARE();
@com.google.gwt.i18n.client.Constants.DefaultStringValue("High") java.lang.String highTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("High") java.lang.String highTitle();
@java.lang.Override public void initTable(org.ovirt.engine.ui.common.CommonApplicationConstants constants) { this.constants = constants; initTableOverhead(); handleRadioButtonClick(null); org.ovirt.engine.ui.common.widget.uicommon.vm.BaseVmDiskListModelTable.getModel().getItemsChangedEvent().addListener(new org.ovirt.engine.core.compat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.core.compat.Event ev, java.lang.Object sender, org.ovirt.engine.core.compat.EventArgs args) { disksViewRadioGroup.setDiskViewType(((org.ovirt.engine.ui.uicommonweb.models.disks.DiskViewType) (getModel().getDiskViewType().getEntity()))); } }); }	@java.lang.Override public void initTable(org.ovirt.engine.ui.common.CommonApplicationConstants constants) { this.constants = constants; initTableOverhead(); handleRadioButtonClick(null); org.ovirt.engine.ui.common.widget.uicommon.vm.BaseVmDiskListModelTable.getModel().getItemsChangedEvent().addListener(new org.ovirt.engine.core.compat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.core.compat.Event ev, java.lang.Object sender, org.ovirt.engine.core.compat.EventArgs args) { disksViewRadioGroup.setDiskStorageType(((org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType) (getModel().getDiskViewType().getEntity()))); } }); }
protected final java.util.Collection<T> sortItems(java.util.Collection<T> items) { if ((items == null) || ((comparator) == null)) { return items; } return new org.ovirt.engine.ui.uicommonweb.models.SortedCollection<T>(comparator, items); }	protected final java.util.Collection<T> sortItems(java.util.Collection<T> items) { if ((items == null) || ((comparator) == null)) { return items; } java.util.List<T> sortedList = new java.util.ArrayList<T>(items); java.util.Collections.sort(sortedList, comparator); return sortedList; }
public org.ovirt.engine.core.bll.ValidationResult validate() { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure = getAttachmentsToConfigure(); org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID; vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NicLabelValidator(params, existingInterfacesMap, bondsMap).validate(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validRemovedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedBonds(); vr = (skipValidation(vr)) ? vr : validRemovedBonds(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : attachmentsDontReferenceSameNetworkDuplicately(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : networksUniquelyConfiguredOnHost(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateNetworkExclusiveOnNics(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NetworkMtuValidator(networkBusinessEntityMap).validateMtu(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateCustomProperties(); vr = (skipValidation(vr)) ? vr : validateQosOverriddenInterfaces(); vr = (skipValidation(vr)) ? vr : validateQosNotPartiallyConfigured(); vr = (skipValidation(vr)) ? vr : validateQosCommitment(attachmentsToConfigure); return vr; }	public org.ovirt.engine.core.bll.ValidationResult validate() { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure = getAttachmentsToConfigure(); org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID; vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NicLabelValidator(params, existingInterfacesMap, bondsMap, hostSetupNetworksValidatorHelper).validate(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validRemovedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedBonds(); vr = (skipValidation(vr)) ? vr : validRemovedBonds(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : attachmentsDontReferenceSameNetworkDuplicately(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : networksUniquelyConfiguredOnHost(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateNetworkExclusiveOnNics(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NetworkMtuValidator(networkBusinessEntityMap).validateMtu(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateCustomProperties(); vr = (skipValidation(vr)) ? vr : validateQos(attachmentsToConfigure); return vr; }
@org.junit.Before public void setUp() { mappingLocator = new org.ovirt.engine.api.restapi.types.MappingLocator(); mappingLocator.populate(); java.util.HashMap<java.lang.Integer, java.lang.String> osNames = new java.util.HashMap<>(1); osNames.put(0, "Unassigned"); }	@org.junit.Before public void setUp() { mappingLocator = new org.ovirt.engine.api.restapi.types.MappingLocator(); mappingLocator.populate(); }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue removeImage(org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters parameters) { try { return org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.DeleteImageGroup, parameters); } catch (org.ovirt.engine.core.common.errors.EngineException e) { if ((e.getErrorCode()) == (org.ovirt.engine.core.common.errors.EngineErrors.ImageDoesNotExistInDomainError)) { return createImageDoesNotExistInDomainReturnValue(); } throw e; } }	protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue removeImage(org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters parameters) { try { return org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.DeleteImageGroup, parameters); } catch (org.ovirt.engine.core.common.errors.EngineException e) { if ((e.getErrorCode()) == (org.ovirt.engine.core.common.errors.EngineError.ImageDoesNotExistInDomainError)) { return createImageDoesNotExistInDomainReturnValue(); } throw e; } }
@org.junit.Test public void testGetAllForTemplate() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> result = dao.getAllForTemplate(org.ovirt.engine.core.dao.network.VmNicDaoTest.TEMPLATE_ID); assertCorrectResultForTemplate(result); }	@org.junit.Test public void testGetAllForTemplate() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> result = dao.getAllForTemplate(org.ovirt.engine.core.dao.network.VmNicDaoTest.TEMPLATE_ID); assertNotNull(result); assertFalse(result.isEmpty()); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : result) { assertEquals(org.ovirt.engine.core.dao.network.VmNicDaoTest.TEMPLATE_ID, iface.getVmTemplateId()); } }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Allow to add/remove disk to the VM") java.lang.String allowToAddRemoveDiskToTheVmRoleTreeTooltip();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to add/remove disk to the VM") java.lang.String allowToAddRemoveDiskToTheVmRoleTreeTooltip();
public static void GetMaximalVmMemSize64OS(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, java.lang.String version) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : -1; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.GetConfigurationValueParameters tempVar = new org.ovirt.engine.ui.uicommonweb.dataprovider.GetConfigurationValueParameters(ConfigurationValues.VM64BitMaxMemorySizeInMB); tempVar.setVersion(version); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(tempVar, aQuery); }	public static void getMaximalVmMemSize64OS(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, java.lang.String version) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : -1; } }; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.VM64BitMaxMemorySizeInMB); tempVar.setVersion(version); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache(tempVar, aQuery); }
@org.junit.Test public void generateDiskDescriptionWhenDescriptionIsCompletelyTruncated() throws java.io.IOException { java.lang.String alias = org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.DISK_PROPERTY_FOR_TESTING.substring(0, 173); disk1.setDiskAlias(alias); disk1.setDiskDescription("DiskDescription"); assertDiskDescriptionMap(disk1, alias, ""); }	@org.junit.Test public void generateDiskDescriptionWhenDescriptionIsCompletelyTruncated() throws java.io.IOException { java.lang.String alias = org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.generateRandomString(org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.DISK_ALIAS_MAX_LENGTH); disk.setDiskAlias(alias); disk.setDiskDescription("DiskDescription"); assertDiskDescriptionMap(disk, org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.generateDiskAliasJsonEntry(alias)); }
@org.junit.Test public void canDoActionFailsPoolSpecifiedDoesNotExist() { params.setStoragePoolId(spId); when(spDao.get(spId)).thenReturn(null); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST); }	@org.junit.Test public void canDoActionFailsPoolSpecifiedDoesNotExist() { params.setStoragePoolId(spId); when(spDao.get(spId)).thenReturn(null); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST); }
public java.util.HashSet<org.ovirt.engine.core.compat.Version> getSupportedClusterVersionsSet() { return mVdsDynamic.getSupportedClusterVersionsSet(); }	public java.util.HashSet<org.ovirt.engine.core.compat.Version> getSupportedClusterVersionsSet() { return vdsDynamic.getSupportedClusterVersionsSet(); }
void saveVmNumaNode(org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode, org.ovirt.engine.core.compat.Guid vmId);	java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode>> getVmNumaNodeInfoByVdsGroupId(org.ovirt.engine.core.compat.Guid vdsGroupId);
@java.lang.Override public boolean isValid(java.lang.String cidr, javax.validation.ConstraintValidatorContext context) { boolean isCidrFormat = org.ovirt.engine.core.common.validation.CidrValidator.isCidrFormatValid(cidr); if (!isCidrFormat) { return false; } boolean isNetworkAddress = org.ovirt.engine.core.common.validation.CidrValidator.isCidrValidNetworkAddress(cidr); if (!isNetworkAddress) { context.disableDefaultConstraintViolation(); context.buildConstraintViolationWithTemplate("CIDR_NOT_NETWORK_ADDRESS").addNode("cidr").addConstraintViolation(); return false; } return true; }	@java.lang.Override public boolean isValid(java.lang.String cidr, javax.validation.ConstraintValidatorContext context) { if (!(isCidrFormatValid(cidr))) { return failWith(context, VdcBllMessages.BAD_CIDR_FORMAT.name()); } if (!(isCidrNetworkAddressValid(cidr))) { return failWith(context, VdcBllMessages.CIDR_NOT_NETWORK_ADDRESS.name()); } return true; }
@org.junit.AfterClass public static void terminate() throws java.lang.Exception { if ((org.ovirt.engine.core.utils.hostinstall.SSHDialogTest.s_sshd) != null) { org.ovirt.engine.core.utils.hostinstall.SSHDialogTest.s_sshd.stop(); } }	@org.junit.AfterClass public static void terminate() throws java.lang.Exception { if ((org.ovirt.engine.core.utils.ssh.SSHDialogTest.s_sshd) != null) { org.ovirt.engine.core.utils.ssh.SSHDialogTest.s_sshd.stop(); } }
private org.ovirt.engine.api.model.RSDL getRSDL(javax.ws.rs.core.Application application) { for (java.lang.Object obj : application.getSingletons()) { if (obj instanceof org.ovirt.engine.api.restapi.resource.BackendApiResource) { org.ovirt.engine.api.restapi.resource.BackendApiResource resource = ((org.ovirt.engine.api.restapi.resource.BackendApiResource) (obj)); return resource.getRSDL(); } } return null; }	private org.ovirt.engine.api.model.RSDL getRSDL(javax.ws.rs.core.Application application) { org.ovirt.engine.api.model.RSDL rsdl = null; for (java.lang.Object obj : application.getSingletons()) { if (obj instanceof org.ovirt.engine.api.restapi.resource.BackendApiResource) { org.ovirt.engine.api.restapi.resource.BackendApiResource resource = ((org.ovirt.engine.api.restapi.resource.BackendApiResource) (obj)); rsdl = resource.getRSDL(); break; } } assert rsdl != null : "Resource that generates RSDL, BackendApiResource, not found (this should never happen)"; return rsdl; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Configure System") java.lang.String configureSystemRoleTree();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Configure System") java.lang.String configureSystemRoleTree();
public java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> getInterfaces() { return mInterfaceList; }	public java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> getInterfaces() { return interfaces; }
private void logRenamedEntity() { if ((this) instanceof org.ovirt.engine.core.bll.RenamedEntityInfoProvider) { java.lang.String entity = "UNKNOWN"; java.lang.String oldName = ""; java.lang.String newName = ""; try { entity = org.ovirt.engine.core.utils.ReflectionUtils.getMethodValue(this, "getEntityName").toString(); oldName = org.ovirt.engine.core.utils.ReflectionUtils.getMethodValue(this, "getOldName").toString(); newName = org.ovirt.engine.core.utils.ReflectionUtils.getMethodValue(this, "getNewName").toString(); if (!(oldName.equals(newName))) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.AddCustomValue("EntityName", entity); logable.AddCustomValue("OldName", oldName); logable.AddCustomValue("NewName", newName); java.lang.Class<org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase>[] partypes = new java.lang.Class[1]; partypes[0] = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase.class; java.lang.Object[] arglist = new java.lang.Object[1]; arglist[0] = logable; org.ovirt.engine.core.utils.ReflectionUtils.callMethod(this, "setId", partypes, arglist); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.ENTITY_RENAMED); } } catch (java.lang.SecurityException e) { e.printStackTrace(); } catch (java.lang.IllegalArgumentException e) { e.printStackTrace(); } catch (java.lang.NoSuchMethodException e) { e.printStackTrace(); } catch (java.lang.IllegalAccessException e) { e.printStackTrace(); } catch (java.lang.reflect.InvocationTargetException e) { e.printStackTrace(); } } }	private void logRenamedEntity() { try { if ((this) instanceof org.ovirt.engine.core.bll.RenamedEntityInfoProvider) { org.ovirt.engine.core.bll.RenamedEntityInfoProvider renameable = ((org.ovirt.engine.core.bll.RenamedEntityInfoProvider) (this)); java.lang.String entityType = renameable.getEntityType(); java.lang.String oldEntityName = renameable.getEntityOldName(); java.lang.String newEntityName = renameable.getEntityNewName(); if (!(org.apache.commons.lang.StringUtils.equals(oldEntityName, newEntityName))) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("EntityType", entityType); logable.addCustomValue("OldEntityName", oldEntityName); logable.addCustomValue("NewEntityName", newEntityName); renameable.setEntityId(logable); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.ENTITY_RENAMED); } } } catch (java.lang.Exception e) { log.error("Failed to log entity rename operation.", e); } }
@org.junit.Test public void testHandleActionResult_SucceededFalse() { org.ovirt.engine.core.common.action.VdcActionParametersBase testParameters = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnValue.setValidate(true); returnValue.setIsSyncronious(true); returnValue.setSucceeded(false); org.ovirt.engine.core.common.errors.EngineFault testFault = new org.ovirt.engine.core.common.errors.EngineFault(); returnValue.setFault(testFault); frontend.handleActionResult(VdcActionType.AddDisk, testParameters, returnValue, mockActionCallback, testState, true); verify(mockActionCallback).executed(callbackParam.capture()); assertEquals("Parameters should match", testParameters, callbackParam.getValue().getParameters()); assertEquals("Result should match", returnValue, callbackParam.getValue().getReturnValue()); assertEquals("States should match", testState, callbackParam.getValue().getState()); assertEquals("Action type should match", VdcActionType.AddDisk, callbackParam.getValue().getActionType()); verify(mockEventsHandler).runActionExecutionFailed(VdcActionType.AddDisk, testFault); }	@org.junit.Test public void testHandleActionResult_SucceededFalse() { org.ovirt.engine.core.common.action.VdcActionParametersBase testParameters = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnValue.setValid(true); returnValue.setIsSyncronious(true); returnValue.setSucceeded(false); org.ovirt.engine.core.common.errors.EngineFault testFault = new org.ovirt.engine.core.common.errors.EngineFault(); returnValue.setFault(testFault); frontend.handleActionResult(VdcActionType.AddDisk, testParameters, returnValue, mockActionCallback, testState, true); verify(mockActionCallback).executed(callbackParam.capture()); assertEquals("Parameters should match", testParameters, callbackParam.getValue().getParameters()); assertEquals("Result should match", returnValue, callbackParam.getValue().getReturnValue()); assertEquals("States should match", testState, callbackParam.getValue().getState()); assertEquals("Action type should match", VdcActionType.AddDisk, callbackParam.getValue().getActionType()); verify(mockEventsHandler).runActionExecutionFailed(VdcActionType.AddDisk, testFault); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } snapshots = getGlusterVolumeSnapshotDao().getAllByVolumeId(getGlusterVolumeId()); if (((snapshots) == null) || ((snapshots.size()) == 0)) { failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NO_SNAPSHOTS_EXIST, getGlusterVolumeName()); } return true; }	@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (((snapshots) == null) || (snapshots.isEmpty())) { failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NO_SNAPSHOTS_EXIST, getGlusterVolumeName()); } return true; }
public static org.ovirt.engine.api.extensions.ExtMap fetchPrincipalRecord(final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension, java.lang.String principal) { org.ovirt.engine.api.extensions.ExtMap input = new org.ovirt.engine.api.extensions.ExtMap().mput(Base.InvokeKeys.COMMAND, Authz.InvokeCommands.FETCH_PRINCIPAL_RECORD).mput(Authz.InvokeKeys.PRINCIPAL, principal); return org.ovirt.engine.core.aaa.AuthzUtils.fetchPrincipalRecordImpl(extension, input); }	public static org.ovirt.engine.api.extensions.ExtMap fetchPrincipalRecord(final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension, java.lang.String principal) { return org.ovirt.engine.core.aaa.AuthzUtils.fetchPrincipalRecordImpl(extension, Authz.InvokeKeys.PRINCIPAL, principal); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase runAction(org.ovirt.engine.core.bll.CommandBase<?> action) { return runAction(action, true, null); }	@java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase runAction(org.ovirt.engine.core.bll.CommandBase<?> action, org.ovirt.engine.core.bll.job.ExecutionContext executionContext) { return runAction(action, true, org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks(executionContext)); }
public void setOldClusterVersionOfSnapshotWithMemory(org.ovirt.engine.core.common.businessentities.VM vm) { if (!(isVMWithMemoryCompatible(vm))) { org.ovirt.engine.core.compat.Version originalClusterVersion = vm.getClusterCompatibilityVersionOrigin(); originalClusterVersion = (originalClusterVersion == null) ? org.ovirt.engine.core.compat.Version.v3_6 : originalClusterVersion; this.oldClusterVersionOfSnapshotWithMemory = originalClusterVersion; } else { this.oldClusterVersionOfSnapshotWithMemory = null; } }	public void setOldClusterVersionOfSnapshotWithMemory(org.ovirt.engine.core.common.businessentities.VM vm) { if (!(isVMWithMemoryCompatible(vm))) { org.ovirt.engine.core.compat.Version originalClusterVersion = vm.getClusterCompatibilityVersionOrigin(); originalClusterVersion = (originalClusterVersion == null) ? org.ovirt.engine.core.compat.Version.v3_6 : originalClusterVersion; oldClusterVersionOfSnapshotWithMemory = originalClusterVersion; } else { oldClusterVersionOfSnapshotWithMemory = null; } }
private void updateSwitchTypeIfNeeded() { org.ovirt.engine.core.common.SwitchType switchType = org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getSwitchType(); boolean needToUpdate = !(java.util.Objects.equals(switchType, oldCluster.getSwitchType())); if (needToUpdate) { org.ovirt.engine.core.bll.UpdateClusterCommand.getClusterDao().setSwitchTypeOfAllNetworkAttachmentsInCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getClusterId(), switchType); } }	@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { final java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> result = new java.util.ArrayList(super.getPermissionCheckSubjects()); final org.ovirt.engine.core.compat.Guid macPoolId = getNewMacPoolId(); final boolean changingPoolDefinition = (macPoolId != null) && (!(macPoolId.equals(getOldMacPoolId()))); if (changingPoolDefinition) { result.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(macPoolId, org.ovirt.engine.core.common.VdcObjectType.MacPool, org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_MAC_POOL)); } return result; }
private void afterVMsRefreshTreatment() { for (org.ovirt.engine.core.compat.Guid vm_guid : _vmsToRerun) { org.ovirt.engine.core.vdsbroker.HostMonitoring.log.errorFormat("Rerun vm {0}. Called from vds {1}", vm_guid, _vds.getName()); org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().RerunFailedCommand(vm_guid, _vds.getId()); } for (org.ovirt.engine.core.compat.Guid vm_guid : _succededToRunVms) { _vdsManager.succededToRunVm(vm_guid); } _autoVmsToRun.removeAll(_vmsToRerun); getVdsEventListener().runFailedAutoStartVMs(_autoVmsToRun); for (java.util.Map.Entry<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDynamic> pair : _vmsClientIpChanged.entrySet()) { getVdsEventListener().processOnClientIpChange(_vds, pair.getValue().getId()); } for (org.ovirt.engine.core.common.businessentities.VmDynamic runningVm : _poweringUpVms) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().getEventListener().processOnVmPoweringUp(_vds.getId(), runningVm.getId(), runningVm.getDisplayIp(), runningVm.getDisplay()); } for (org.ovirt.engine.core.compat.Guid vm_guid : _vmsMovedToDown) { getVdsEventListener().processOnVmStop(vm_guid); } for (org.ovirt.engine.core.compat.Guid vm_guid : _vmsToRemoveFromAsync) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().RemoveAsyncRunningVm(vm_guid); } }	private void afterVMsRefreshTreatment() { getVdsEventListener().destroyVms(vmsToDestroy); for (org.ovirt.engine.core.compat.Guid vm_guid : _vmsToRerun) { org.ovirt.engine.core.vdsbroker.HostMonitoring.log.error("Rerun vm '{}'. Called from vds '{}'", vm_guid, _vds.getName()); org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().RerunFailedCommand(vm_guid, _vds.getId()); } for (org.ovirt.engine.core.compat.Guid vm_guid : _succededToRunVms) { _vdsManager.succededToRunVm(vm_guid); } getVdsEventListener().updateSlaPolicies(_succededToRunVms, _vds.getId()); _autoVmsToRun.removeAll(_vmsToRerun); getVdsEventListener().runFailedAutoStartVMs(_autoVmsToRun); for (java.util.Map.Entry<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDynamic> pair : _vmsClientIpChanged.entrySet()) { getVdsEventListener().processOnClientIpChange(_vds, pair.getValue().getId()); } for (org.ovirt.engine.core.common.businessentities.VmDynamic runningVm : _poweringUpVms) { getVdsEventListener().processOnVmPoweringUp(runningVm.getId()); } getVdsEventListener().processOnVmStop(_vmsMovedToDown); for (org.ovirt.engine.core.compat.Guid vm_guid : _vmsToRemoveFromAsync) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().RemoveAsyncRunningVm(vm_guid); } }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override protected void showSuggestions(final com.google.gwt.user.client.ui.SuggestBox suggestBox, java.util.Collection<? extends com.google.gwt.user.client.ui.SuggestOracle.Suggestion> suggestions, boolean isDisplayStringHTML, boolean isAutoSelectEnabled, org.ovirt.engine.ui.webadmin.widget.autocomplete.SuggestionCallback callback) { boolean anySuggestions = (suggestions != null) && ((suggestions.size()) > 0); if (!anySuggestions) { hideSuggestions(); return; } if ((suggestionPopup) == null) { suggestionPopup = createPopup(); } if (suggestionPopup.isAttached()) { suggestionPopup.hide(); } if (suggestBox != null) { suggestionPopup.removeAutoHidePartner(suggestBox.getElement()); suggestionPopup.addAutoHidePartner(suggestBox.getElement()); } suggestionsTable = getSuggestionCellList(((java.util.Collection<org.ovirt.engine.ui.webadmin.widget.autocomplete.SearchSuggestion>) (suggestions)), suggestBox, suggestionPopup); suggestionPopup.setWidget(suggestionsTable); suggestionPopup.showRelativeTo(suggestBox); }	@java.lang.SuppressWarnings("unchecked") @java.lang.Override protected void showSuggestions(final com.google.gwt.user.client.ui.SuggestBox suggestBox, java.util.Collection<? extends com.google.gwt.user.client.ui.SuggestOracle.Suggestion> suggestions, boolean isDisplayStringHTML, boolean isAutoSelectEnabled, org.ovirt.engine.ui.webadmin.widget.autocomplete.SuggestionCallback callback) { boolean anySuggestions = (suggestions != null) && ((suggestions.size()) > 0); if (!anySuggestions) { hideSuggestions(); return; } if ((suggestionPopup) == null) { suggestionPopup = createPopup(); } if (suggestionPopup.isAttached()) { suggestionPopup.hide(); } if (suggestBox != null) { suggestionPopup.removeAutoHidePartner(suggestBox.getElement()); suggestionPopup.addAutoHidePartner(suggestBox.getElement()); } suggestionsTable = getSuggestionCellList(((java.util.Collection<org.ovirt.engine.ui.webadmin.widget.autocomplete.SearchSuggestion>) (suggestions)), suggestBox, suggestionPopup); suggestionPopup.setWidget(suggestionsTable); suggestionPopup.showRelativeTo(suggestBox); if (suggestBox != null) { int suggestBoxInputWidth = suggestBox.getValueBox().getElement().getOffsetWidth(); suggestionPopup.setWidth((suggestBoxInputWidth + "px")); } }
@org.junit.Test public void canDoActionFailure() { when(validator.isConnectionExists()).thenReturn(ValidationResult.VALID); when(validator.isConnectionForISCSIDomainAttached(domain)).thenReturn(java.lang.Boolean.FALSE); when(validator.isISCSIConnectionAndDomain(domain)).thenReturn(ValidationResult.VALID); when(validator.isDomainOfConnectionExistsAndInactive(domain)).thenReturn(ValidationResult.VALID); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, EngineMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_FOR_DOMAIN_NOT_EXIST); }	@org.junit.Test public void canDoActionFailure() { when(validator.isConnectionExists()).thenReturn(ValidationResult.VALID); when(validator.isConnectionForISCSIDomainAttached(domain)).thenReturn(java.lang.Boolean.FALSE); when(validator.isISCSIConnectionAndDomain(domain)).thenReturn(ValidationResult.VALID); when(validator.isDomainOfConnectionExistsAndInactive(domain)).thenReturn(ValidationResult.VALID); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_FOR_DOMAIN_NOT_EXIST); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionResume(java.lang.String volumeName, java.lang.String slaveHostName, java.lang.String slaveVolumeName, java.lang.String slaveUserName, boolean force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.geoRepSessionResume").withParameter("volumeName", volumeName).withParameter("remoteHost", slaveHostName).withParameter("remoteVolumeName", slaveVolumeName).withOptionalParameter("remoteUserName", slaveUserName).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionResume(java.lang.String volumeName, java.lang.String slaveHostName, java.lang.String slaveVolumeName, java.lang.String userName, boolean force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.geoRepSessionResume").withParameter("volumeName", volumeName).withParameter("remoteHost", slaveHostName).withParameter("remoteVolumeName", slaveVolumeName).withOptionalParameter("remoteUserName", userName).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
public boolean getPlugDiskToVm() { return plugDiskToVm; }	public java.lang.Boolean getPlugDiskToVm() { return plugDiskToVm; }
@java.lang.Override protected boolean validate() { if (!(getGlusterUtil().isGlusterGeoReplicationSupported(getVdsGroup().getCompatibilityVersion(), getVdsGroup().getId()))) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_GEO_REP_NOT_SUPPORTED); } slaveHost = getSlaveHost(); if ((slaveHost) == null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_HOST_NOT_EXIST); } if ((slaveHost.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP, java.lang.String.format("$%1$s %2$s", "VdsName", slaveHost.getName())); } slaveVolume = getSlaveVolume(); if ((slaveVolume) == null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_INVALID); } if ((slaveVolume.getStatus()) != (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_STARTED); } if (!(areAllRemoteServersUp())) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_ONE_OR_MORE_REMOTE_HOSTS_ARE_NOT_ACCESSIBLE); } org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession geoRepSession = getGeoRepDao().getGeoRepSession(getGlusterVolumeId(), slaveHost.getId(), getParameters().getSlaveVolumeName()); if (geoRepSession != null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_GEOREP_SESSION_ALREADY_CREATED); } return super.validate(); }	@java.lang.Override protected boolean validate() { if (!(getGlusterUtil().isGlusterGeoReplicationSupported(getVdsGroup().getCompatibilityVersion(), getVdsGroup().getId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_GEO_REP_NOT_SUPPORTED); } slaveHost = getSlaveHost(); if ((slaveHost) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_HOST_NOT_EXIST); } if ((slaveHost.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP, java.lang.String.format("$%1$s %2$s", "VdsName", slaveHost.getName())); } slaveVolume = getSlaveVolume(); if ((slaveVolume) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_INVALID); } if ((slaveVolume.getStatus()) != (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_STARTED); } if (!(areAllRemoteServersUp())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_ONE_OR_MORE_REMOTE_HOSTS_ARE_NOT_ACCESSIBLE); } org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession geoRepSession = getGeoRepDao().getGeoRepSession(getGlusterVolumeId(), slaveHost.getId(), getParameters().getSlaveVolumeName()); if (geoRepSession != null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_GEOREP_SESSION_ALREADY_CREATED); } return super.validate(); }
@java.lang.Override protected void readGeneralData(org.ovirt.engine.core.compat.backendcompat.XmlNode content) { org.ovirt.engine.core.compat.backendcompat.XmlNode node = content.SelectSingleNode("Name"); if (node != null) { _vmTemplate.setName(node.innerText); name = _vmTemplate.getName(); } node = content.SelectSingleNode("TemplateId"); if (node != null) { if (org.apache.commons.lang.StringUtils.isNotEmpty(node.innerText)) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(node.innerText)); } } node = content.SelectSingleNode("IsDisabled"); if (node != null) { _vmTemplate.setDisabled(java.lang.Boolean.parseBoolean(node.innerText)); } node = content.SelectSingleNode("TrustedService"); if (node != null) { _vmTemplate.setTrustedService(java.lang.Boolean.parseBoolean(node.innerText)); } node = content.SelectSingleNode("TemplateType"); if (node != null) { _vmTemplate.setTemplateType(org.ovirt.engine.core.common.businessentities.VmEntityType.valueOf(node.innerText)); } if ((_vmTemplate.getTemplateVersion()) == null) { _vmTemplate.setTemplateVersion(1); } else { node = content.SelectSingleNode("BaseTemplateId"); if (node != null) { _vmTemplate.setBaseTemplateId(org.ovirt.engine.core.compat.Guid.createGuidFromString(node.innerText)); } } }	@java.lang.Override protected void readGeneralData(org.ovirt.engine.core.compat.backendcompat.XmlNode content) { org.ovirt.engine.core.compat.backendcompat.XmlNode node = content.SelectSingleNode("Name"); if (node != null) { _vmTemplate.setName(node.innerText); name = _vmTemplate.getName(); } node = content.SelectSingleNode("TemplateId"); if (node != null) { if (org.apache.commons.lang.StringUtils.isNotEmpty(node.innerText)) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(node.innerText)); } } node = content.SelectSingleNode("IsDisabled"); if (node != null) { _vmTemplate.setDisabled(java.lang.Boolean.parseBoolean(node.innerText)); } node = content.SelectSingleNode("TrustedService"); if (node != null) { _vmTemplate.setTrustedService(java.lang.Boolean.parseBoolean(node.innerText)); } node = content.SelectSingleNode("TemplateType"); if (node != null) { _vmTemplate.setTemplateType(org.ovirt.engine.core.common.businessentities.VmEntityType.valueOf(node.innerText)); } node = content.SelectSingleNode("BaseTemplateId"); if (node != null) { _vmTemplate.setBaseTemplateId(org.ovirt.engine.core.compat.Guid.createGuidFromString(node.innerText)); } else { _vmTemplate.setBaseTemplateId(_vmTemplate.getId()); } node = content.SelectSingleNode("TemplateVersionNumber"); if (node != null) { _vmTemplate.setTemplateVersionNumber(java.lang.Integer.parseInt(node.innerText)); } node = content.SelectSingleNode("TemplateVersionName"); if (node != null) { _vmTemplate.setTemplateVersionName(node.innerText); } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlListReturn getVmLeaseInfo(java.lang.String leaseUUID, java.lang.String sdUUID) { java.util.HashMap<java.lang.String, java.lang.Object> leaseDict = new java.util.HashMap<>(); leaseDict.put("lease_id", leaseUUID); leaseDict.put("sd_id", sdUUID); org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.info").withParameter("lease", leaseDict).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlListReturn(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.LeaseInfoReturn getVmLeaseInfo(java.lang.String leaseUUID, java.lang.String sdUUID) { java.util.HashMap<java.lang.String, java.lang.Object> leaseDict = new java.util.HashMap<>(); leaseDict.put("lease_id", leaseUUID); leaseDict.put("sd_id", sdUUID); org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.info").withParameter("lease", leaseDict).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.LeaseInfoReturn(response); }
@java.lang.Override public void freeMacs(java.util.List<java.lang.String> macs) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug("Releasing mac addresses {} back to {}", java.util.Arrays.toString(macs.toArray()), this); for (java.lang.String mac : macs) { macsStorage.freeMac(org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong(mac)); } }	@java.lang.Override public void freeMacs(java.util.List<java.lang.String> macs) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug("Releasing mac addresses {} back to {}", macs, this); for (java.lang.String mac : macs) { macsStorage.freeMac(org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong(mac)); } }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase runInternalAction(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, org.ovirt.engine.core.bll.context.CommandContext inheritingContext) { entailContext(inheritingContext); return org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(actionType, parameters, inheritingContext); }	protected org.ovirt.engine.core.common.action.VdcReturnValueBase runInternalAction(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, org.ovirt.engine.core.bll.context.CommandContext internalCommandContext) { return getBackend().runInternalAction(actionType, parameters, internalCommandContext); }
private void createSnapshotsForDisks() { org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeParameters parameters = new org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeParameters(); parameters.setDiskIdsToIgnoreInChecks(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIdsToIgnoreInChecks()); parameters.setDiskToImageIds(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskToImageIds()); parameters.setNewActiveSnapshotId(newActiveSnapshotId); parameters.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()); parameters.setDiskIds(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIds()); parameters.setVmId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.CreateSnapshotVolume, parameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getContext(), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getLock())); }	private void createSnapshotsForDisks() { org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskParameters parameters = new org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskParameters(); parameters.setDiskIdsToIgnoreInChecks(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIdsToIgnoreInChecks()); parameters.setDiskToImageIds(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskToImageIds()); parameters.setNewActiveSnapshotId(newActiveSnapshotId); parameters.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()); parameters.setDiskIds(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIds()); parameters.setEndProcedure(ActionParametersBase.EndProcedure.PARENT_MANAGED); parameters.setVmId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId()); parameters.setSessionId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSessionId()); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters()); parameters.setEntityInfo(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getEntityInfo()); runInternalAction(ActionType.CreateSnapshotDisk, parameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContextForTasks(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getContext(), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getLock())); }
<T extends org.ovirt.engine.core.common.businessentities.BusinessEntity<? extends org.ovirt.engine.core.compat.NGuid>> void addActionButton(java.lang.String label, final org.ovirt.engine.ui.webadmin.plugin.api.ActionButtonInterface actionButtonInterface, final org.ovirt.engine.ui.common.widget.table.ActionTable<T> table) { final org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand(label, new org.ovirt.engine.ui.uicommonweb.BaseCommandTarget() { @java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand uiCommand) { actionButtonInterface.onClick().invoke(org.ovirt.engine.ui.webadmin.plugin.entity.EntityObject.arrayFrom(table.getSelectedItems()), null); } }); table.addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<T>(label, getCommandLocation(actionButtonInterface)) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return command; } }); table.getSelectionModel().addSelectionChangeHandler(new com.google.gwt.view.client.SelectionChangeEvent.Handler() { @java.lang.Override public void onSelectionChange(com.google.gwt.view.client.SelectionChangeEvent event) { updateActionButtonCommand(command, actionButtonInterface, table.getSelectedItems()); } }); updateActionButtonCommand(command, actionButtonInterface, table.getSelectedItems()); }	<T extends org.ovirt.engine.core.common.businessentities.BusinessEntity<? extends org.ovirt.engine.core.compat.NGuid>> void addActionButton(java.lang.String label, final org.ovirt.engine.ui.webadmin.plugin.api.ActionButtonInterface actionButtonInterface, final org.ovirt.engine.ui.common.widget.table.ActionTable<T> table) { final org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand(label, new org.ovirt.engine.ui.uicommonweb.BaseCommandTarget() { @java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand uiCommand) { actionButtonInterface.onClick().invoke(org.ovirt.engine.ui.webadmin.plugin.entity.EntityObject.arrayFrom(table.getSelectedItems()), null); } }); table.addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<T>(label, actionButtonInterface.getLocation()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return command; } }); table.getSelectionModel().addSelectionChangeHandler(new com.google.gwt.view.client.SelectionChangeEvent.Handler() { @java.lang.Override public void onSelectionChange(com.google.gwt.view.client.SelectionChangeEvent event) { updateActionButtonCommand(command, actionButtonInterface, table.getSelectedItems()); } }); updateActionButtonCommand(command, actionButtonInterface, table.getSelectedItems()); }
protected boolean isQuietTimeFromLastActionPassed() { int secondsLeftToNextPmOp = (org.ovirt.engine.core.bll.pm.VdsNotRespondingTreatmentCommand.isInternalExecution()) ? 0 : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAuditLogDao().getTimeToWaitForNextPmOp(org.ovirt.engine.core.bll.pm.VdsNotRespondingTreatmentCommand.getVds().getName(), AuditLogType.USER_VDS_RESTART.name()); if (secondsLeftToNextPmOp > 0) { addValidationMessage(EngineMessage.VDS_FENCE_DISABLED_AT_QUIET_TIME); org.ovirt.engine.core.bll.pm.VdsNotRespondingTreatmentCommand.addValidationMessageVariable("seconds", secondsLeftToNextPmOp); return false; } else { return true; } }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return org.ovirt.engine.core.bll.pm.VdsNotRespondingTreatmentCommand.createFenceExclusiveLocksMap(org.ovirt.engine.core.bll.pm.VdsNotRespondingTreatmentCommand.getVdsId()); }
private void assertCorrectGetManagedInterfaceForVdsResult(org.ovirt.engine.core.common.businessentities.VdsNetworkInterface result) { assertNotNull(result); assertTrue(result.getIsManagement()); }	private static void assertCorrectGetManagedInterfaceForVdsResult(org.ovirt.engine.core.common.businessentities.VdsNetworkInterface result) { assertNotNull(result); assertTrue(result.getIsManagement()); }
public static void GetMaximalVmMemSize32OS(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 20480; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.VM32BitMaxMemorySizeInMB, org.ovirt.engine.core.common.config.ConfigCommon.defaultConfigurationVersion), aQuery); }	public static void GetMaximalVmMemSize32OS(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 20480; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.VM32BitMaxMemorySizeInMB, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }
public boolean validate() { getName().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.AsciiNameValidation() }); java.util.List<org.ovirt.engine.ui.uicommonweb.validation.IValidation> cidrValidations = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.validation.IValidation>(); cidrValidations.add(new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation()); if ((getIpVersion().getSelectedItem()) == (org.ovirt.engine.core.common.businessentities.network.ExternalSubnet.IpVersion.IPV4)) { cidrValidations.add(new org.ovirt.engine.ui.uicommonweb.validation.CidrValidation()); } getCidr().validateEntity(cidrValidations.toArray(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[0])); getIpVersion().validateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); return ((getName().getIsValid()) && (getCidr().getIsValid())) && (getIpVersion().getIsValid()); }	public boolean validate() { getName().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.AsciiNameValidation() }); getCidr().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ (getIpVersion().getSelectedItem()) == (org.ovirt.engine.core.common.businessentities.network.ExternalSubnet.IpVersion.IPV4) ? new org.ovirt.engine.ui.uicommonweb.validation.CidrValidation() : new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); getIpVersion().validateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); return ((getName().getIsValid()) && (getCidr().getIsValid())) && (getIpVersion().getIsValid()); }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource createInterfaceParametersMapper(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { return getCustomMapSqlParameterSource().addValue("addr", nic.getAddress()).addValue("bond_name", nic.getBondName()).addValue("bond_type", nic.getBondType()).addValue("gateway", nic.getGateway()).addValue("id", nic.getId()).addValue("is_bond", nic.getBonded()).addValue("bond_opts", nic.getBondOptions()).addValue("mac_addr", nic.getMacAddress()).addValue("name", nic.getName()).addValue("network_name", nic.getNetworkName()).addValue("speed", nic.getSpeed()).addValue("subnet", nic.getSubnet()).addValue("boot_protocol", nic.getBootProtocol()).addValue("type", nic.getType()).addValue("vds_id", nic.getVdsId()).addValue("vlan_id", nic.getVlanId()).addValue("mtu", nic.getMtu()).addValue("bridged", nic.isBridged()).addValue("qos_overridden", nic.isQosOverridden()).addValue("labels", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(nic.getLabels())).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize((nic.hasCustomProperties() ? nic.getCustomProperties() : null))); }	private org.springframework.jdbc.core.namedparam.MapSqlParameterSource createInterfaceParametersMapper(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { return getCustomMapSqlParameterSource().addValue("addr", nic.getAddress()).addValue("bond_name", nic.getBondName()).addValue("bond_type", nic.getBondType()).addValue("gateway", nic.getGateway()).addValue("id", nic.getId()).addValue("is_bond", nic.getBonded()).addValue("bond_opts", nic.getBondOptions()).addValue("mac_addr", nic.getMacAddress()).addValue("name", nic.getName()).addValue("network_name", nic.getNetworkName()).addValue("speed", nic.getSpeed()).addValue("subnet", nic.getSubnet()).addValue("boot_protocol", nic.getBootProtocol()).addValue("type", nic.getType()).addValue("vds_id", nic.getVdsId()).addValue("vlan_id", nic.getVlanId()).addValue("mtu", nic.getMtu()).addValue("bridged", nic.isBridged()).addValue("qos_overridden", nic.isQosOverridden()).addValue("labels", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(nic.getLabels())).addValue("custom_properties", (nic.hasCustomProperties() ? org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(nic.getCustomProperties()) : null)); }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource getFullParameterSource(org.ovirt.engine.core.common.businessentities.VmInit vmInit) { return getCustomMapSqlParameterSource().addValue("vm_id", vmInit.getId()).addValue("host_name", vmInit.getHostname()).addValue("domain", vmInit.getDomain()).addValue("authorized_keys", vmInit.getAuthorizedKeys()).addValue("regenerate_keys", vmInit.getRegenerateKeys()).addValue("dns_servers", vmInit.getDnsServers()).addValue("dns_search_domains", vmInit.getDnsSearch()).addValue("time_zone", vmInit.getTimeZone()).addValue("networks", org.ovirt.engine.core.utils.VmInitUtils.networkListToJson(vmInit.getNetworks())).addValue("password", org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.encryptPassword(vmInit.getRootPassword())).addValue("winkey", vmInit.getWinKey()).addValue("custom_script", vmInit.getCustomScript()).addValue("input_locale", vmInit.getInputLocale()).addValue("ui_language", vmInit.getUiLanguage()).addValue("system_locale", vmInit.getSystemLocale()).addValue("user_locale", vmInit.getUserLocale()).addValue("user_name", vmInit.getUserName()).addValue("active_directory_ou", vmInit.getUserName()); }	private org.springframework.jdbc.core.namedparam.MapSqlParameterSource getFullParameterSource(org.ovirt.engine.core.common.businessentities.VmInit vmInit) { return getCustomMapSqlParameterSource().addValue("vm_id", vmInit.getId()).addValue("host_name", vmInit.getHostname()).addValue("domain", vmInit.getDomain()).addValue("authorized_keys", vmInit.getAuthorizedKeys()).addValue("regenerate_keys", vmInit.getRegenerateKeys()).addValue("dns_servers", vmInit.getDnsServers()).addValue("dns_search_domains", vmInit.getDnsSearch()).addValue("time_zone", vmInit.getTimeZone()).addValue("networks", org.ovirt.engine.core.utils.VmInitUtils.networkListToJson(vmInit.getNetworks())).addValue("password", org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.encryptPassword(vmInit.getRootPassword())).addValue("winkey", vmInit.getWinKey()).addValue("custom_script", vmInit.getCustomScript()).addValue("input_locale", vmInit.getInputLocale()).addValue("ui_language", vmInit.getUiLanguage()).addValue("system_locale", vmInit.getSystemLocale()).addValue("user_locale", vmInit.getUserLocale()).addValue("user_name", vmInit.getUserName()).addValue("active_directory_ou", vmInit.getActiveDirectoryOU()); }
@java.lang.Override protected boolean canDoAction() { boolean returnValue = ((super.canDoAction()) && (org.ovirt.engine.core.bll.storage.domains.ForceRemoveStorageDomainCommand.checkStorageDomain())) && (((org.ovirt.engine.core.bll.storage.domains.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)) || (checkStorageDomainStatusNotEqual(StorageDomainStatus.Active))); if ((returnValue && ((org.ovirt.engine.core.bll.storage.domains.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master))) && ((org.ovirt.engine.core.bll.storage.domains.ForceRemoveStorageDomainCommand.getStoragePool()) != null)) { if ((org.ovirt.engine.core.bll.storage.domains.ForceRemoveStorageDomainCommand.electNewMaster()) == null) { returnValue = false; addCanDoActionMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN); } else if (!(org.ovirt.engine.core.bll.storage.domains.ForceRemoveStorageDomainCommand.initializeVds())) { returnValue = false; addCanDoActionMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN_HOST_NOT_ACTIVE); } } if (returnValue && ((org.ovirt.engine.core.bll.storage.domains.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLANCE))) { addCanDoActionMessage(EngineMessage.ERROR_CANNOT_MANAGE_STORAGE_DOMAIN); returnValue = false; } return returnValue; }	@java.lang.Override protected boolean canDoAction() { boolean returnValue = ((super.canDoAction()) && (org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.checkStorageDomain())) && (((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)) || (checkStorageDomainStatusNotEqual(StorageDomainStatus.Active))); if ((returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master))) && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStoragePool()) != null)) { if ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.electNewMaster()) == null) { returnValue = false; addCanDoActionMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN); } else if (!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.initializeVds())) { returnValue = false; addCanDoActionMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN_HOST_NOT_ACTIVE); } } if (returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLANCE))) { addCanDoActionMessage(EngineMessage.ERROR_CANNOT_MANAGE_STORAGE_DOMAIN); returnValue = false; } return returnValue; }
@org.junit.Test public void testNested() { org.ovirt.engine.api.types.V4Vm object = newVm().setCpu(newCpu().setMode("mymode")).build(); assertEquals("{'cpu':{'mode':'mymode'}}", objectToJson(object)); }	@org.junit.Test public void testNested() { org.ovirt.engine.api.types.V4Vm object = vm().cpu(cpu().mode("mymode")).build(); assertEquals("{'cpu':{'mode':'mymode'}}", objectToJson(object)); }
private static org.ovirt.engine.core.common.businessentities.VDSGroup cloneVDSGroup(org.ovirt.engine.core.common.businessentities.VDSGroup instance) { org.ovirt.engine.core.common.businessentities.VDSGroup obj = new org.ovirt.engine.core.common.businessentities.VDSGroup(); obj.setId(instance.getId()); obj.setName(instance.getName()); obj.setDescription(instance.getDescription()); obj.setComment(instance.getComment()); obj.setCpuName(instance.getCpuName()); obj.setCompatibilityVersion(instance.getCompatibilityVersion()); obj.setMigrateOnError(instance.getMigrateOnError()); obj.setTransparentHugepages(instance.getTransparentHugepages()); obj.setStoragePoolId(instance.getStoragePoolId()); obj.setMaxVdsMemoryOverCommit(instance.getMaxVdsMemoryOverCommit()); obj.setCountThreadsAsCores(instance.getCountThreadsAsCores()); obj.setEmulatedMachine(instance.getEmulatedMachine()); obj.setDetectEmulatedMachine(instance.isDetectEmulatedMachine()); obj.setArchitecture(instance.getArchitecture()); obj.setSerialNumberPolicy(instance.getSerialNumberPolicy()); obj.setCustomSerialNumber(instance.getCustomSerialNumber()); obj.setFencingPolicy(new org.ovirt.engine.core.common.businessentities.FencingPolicy(instance.getFencingPolicy())); obj.setAutoConverge(instance.getAutoConverge()); obj.setMigrateCompressed(instance.getMigrateCompressed()); obj.setGluster37Support(instance.getGluster37Support()); return obj; }	private static org.ovirt.engine.core.common.businessentities.VDSGroup cloneVDSGroup(org.ovirt.engine.core.common.businessentities.VDSGroup instance) { org.ovirt.engine.core.common.businessentities.VDSGroup obj = new org.ovirt.engine.core.common.businessentities.VDSGroup(); obj.setId(instance.getId()); obj.setName(instance.getName()); obj.setDescription(instance.getDescription()); obj.setComment(instance.getComment()); obj.setCpuName(instance.getCpuName()); obj.setCompatibilityVersion(instance.getCompatibilityVersion()); obj.setMigrateOnError(instance.getMigrateOnError()); obj.setTransparentHugepages(instance.getTransparentHugepages()); obj.setStoragePoolId(instance.getStoragePoolId()); obj.setMaxVdsMemoryOverCommit(instance.getMaxVdsMemoryOverCommit()); obj.setCountThreadsAsCores(instance.getCountThreadsAsCores()); obj.setEmulatedMachine(instance.getEmulatedMachine()); obj.setDetectEmulatedMachine(instance.isDetectEmulatedMachine()); obj.setArchitecture(instance.getArchitecture()); obj.setSerialNumberPolicy(instance.getSerialNumberPolicy()); obj.setCustomSerialNumber(instance.getCustomSerialNumber()); obj.setFencingPolicy(new org.ovirt.engine.core.common.businessentities.FencingPolicy(instance.getFencingPolicy())); obj.setAutoConverge(instance.getAutoConverge()); obj.setMigrateCompressed(instance.getMigrateCompressed()); return obj; }
public static void GetDocumentationBaseURL(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.String) (source)) : ""; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.DocsURL, org.ovirt.engine.core.common.config.ConfigCommon.defaultConfigurationVersion), aQuery); }	public static void GetDocumentationBaseURL(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.String) (source)) : ""; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.DocsURL, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }
public static java.util.List<java.lang.String> getPresetDisplayStrings() { java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>(org.ovirt.engine.ui.uicommonweb.models.providers.NeutronPluginTranslator.pluginForDisplay.keySet()); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator()); return list; }	public static java.util.List<java.lang.String> getPresetDisplayStrings() { return org.ovirt.engine.ui.uicommonweb.models.providers.NeutronPluginTranslator.displayStrings; }
public void calculateFreeVirtualMemory() { if ((((getmem_commited()) != null) && ((getphysical_mem_mb()) != null)) && ((getreserved_mem()) != null)) { maxSchedulingMemory = (((getmax_vds_memory_over_commit()) * (getphysical_mem_mb())) / 100.0F) - ((getmem_commited()) + (getreserved_mem())); } maxSchedulingMemory = ((maxSchedulingMemory) > 0) ? maxSchedulingMemory : 0; }	public void calculateFreeVirtualMemory() { if ((((getmem_commited()) != null) && ((getphysical_mem_mb()) != null)) && ((getreserved_mem()) != null)) { maxSchedulingMemory = (((getmax_vds_memory_over_commit()) * (getphysical_mem_mb())) / 100.0F) - ((getmem_commited()) + (getreserved_mem())); maxSchedulingMemory = ((maxSchedulingMemory) > 0) ? maxSchedulingMemory : 0; } }
protected org.ovirt.engine.core.common.businessentities.InstanceType getInstanceType() { if (((instanceType) == null) && ((instanceTypeId) != null)) { instanceType = AddVmCommand.getVmTemplateDAO().getInstanceType(instanceTypeId.getValue()); } return instanceType; }	protected org.ovirt.engine.core.common.businessentities.InstanceType getInstanceType() { if (((instanceType) == null) && ((instanceTypeId) != null)) { instanceType = AddVmCommand.getVmTemplateDAO().getInstanceType(instanceTypeId); } return instanceType; }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { model.onKernelCmdlineResetButton(); }	@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { model.resetKernelCmdline(); }
@org.junit.Test public void canDoActionFailsNullParameterForIsoFile() { mockVdsWithOsVersion(org.ovirt.engine.core.bll.UpgradeOvirtNodeCommandTest.VALID_OVIRT_VERSION); org.ovirt.engine.core.common.action.InstallVdsParameters param = org.ovirt.engine.core.bll.UpgradeOvirtNodeCommandTest.createParameters(); param.setoVirtIsoFile(null); org.ovirt.engine.core.bll.UpgradeOvirtNodeCommand<org.ovirt.engine.core.common.action.InstallVdsParameters> command = createCommand(param); org.ovirt.engine.core.bll.UpgradeOvirtNodeCommandTest.assertFailsWithCanDoActionMessage(command, VdcBllMessages.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE); }	@org.junit.Test public void canDoActionFailsNullParameterForIsoFile() { mockVdsWithOsVersion(org.ovirt.engine.core.bll.UpgradeOvirtNodeInternalCommandTest.VALID_OVIRT_VERSION); org.ovirt.engine.core.common.action.InstallVdsParameters param = org.ovirt.engine.core.bll.UpgradeOvirtNodeInternalCommandTest.createParameters(); param.setoVirtIsoFile(null); org.ovirt.engine.core.bll.UpgradeOvirtNodeInternalCommand<org.ovirt.engine.core.common.action.InstallVdsParameters> command = createCommand(param); org.ovirt.engine.core.bll.UpgradeOvirtNodeInternalCommandTest.assertFailsWithCanDoActionMessage(command, VdcBllMessages.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE); }
@java.lang.Override protected void ExecuteVdsBrokerCommand() { returnValue = org.ovirt.engine.core.vdsbroker.gluster.ManageGlusterServiceVDSCommand.getBroker().glusterServiceManage(org.ovirt.engine.core.vdsbroker.gluster.ManageGlusterServiceVDSCommand.getParameters().getVdsId(), ((java.lang.String[]) (org.ovirt.engine.core.vdsbroker.gluster.ManageGlusterServiceVDSCommand.getParameters().getServiceList().toArray())), org.ovirt.engine.core.vdsbroker.gluster.ManageGlusterServiceVDSCommand.getParameters().getActionType(), true); org.ovirt.engine.core.vdsbroker.gluster.ManageGlusterServiceVDSCommand.ProceedProxyReturnValue(); }	@java.lang.Override protected void ExecuteVdsBrokerCommand() { java.util.List<java.lang.String> serviceList = org.ovirt.engine.core.vdsbroker.gluster.ManageGlusterServiceVDSCommand.getParameters().getServiceList(); java.lang.String[] serviceNameList = new java.lang.String[serviceList.size()]; serviceList.toArray(serviceNameList); returnValue = org.ovirt.engine.core.vdsbroker.gluster.ManageGlusterServiceVDSCommand.getBroker().glusterServiceManage(org.ovirt.engine.core.vdsbroker.gluster.ManageGlusterServiceVDSCommand.getParameters().getVdsId(), serviceNameList, org.ovirt.engine.core.vdsbroker.gluster.ManageGlusterServiceVDSCommand.getParameters().getActionType(), true); org.ovirt.engine.core.vdsbroker.gluster.ManageGlusterServiceVDSCommand.ProceedProxyReturnValue(); }
@java.lang.Override public int compare(T o1, T o2) { java.lang.String text1 = getValue(o1); java.lang.String text2 = getValue(o2); if (text1.equals(text2)) { return 0; } else if ((RxTxRateRenderer.NO_VALUE.equals(text1)) || (RxTxRateRenderer.NO_VALUE.equals(text2))) { return RxTxRateRenderer.NO_VALUE.equals(text1) ? -1 : 1; } else if ((RxTxRateRenderer.ZERO_VALUE.equals(text1)) || (RxTxRateRenderer.ZERO_VALUE.equals(text2))) { return RxTxRateRenderer.ZERO_VALUE.equals(text1) ? -1 : 1; } else if ((RxTxRateRenderer.SMALL_VALUE.equals(text1)) || (RxTxRateRenderer.SMALL_VALUE.equals(text2))) { return RxTxRateRenderer.SMALL_VALUE.equals(text1) ? -1 : 1; } else { return lexoNumeric.compare(text1, text2); } }	@java.lang.Override public int compare(T o1, T o2) { java.lang.String text1 = getValue(o1); java.lang.String text2 = getValue(o2); if (text1.equals(text2)) { return 0; } else if ((org.ovirt.engine.ui.common.widget.renderer.RxTxRateRenderer.isEmpty(text1)) || (org.ovirt.engine.ui.common.widget.renderer.RxTxRateRenderer.isEmpty(text2))) { return org.ovirt.engine.ui.common.widget.renderer.RxTxRateRenderer.isEmpty(text1) ? -1 : 1; } else if ((org.ovirt.engine.ui.common.widget.renderer.RxTxRateRenderer.isZero(text1)) || (org.ovirt.engine.ui.common.widget.renderer.RxTxRateRenderer.isZero(text2))) { return org.ovirt.engine.ui.common.widget.renderer.RxTxRateRenderer.isZero(text1) ? -1 : 1; } else if ((org.ovirt.engine.ui.common.widget.renderer.RxTxRateRenderer.isSmall(text1)) || (org.ovirt.engine.ui.common.widget.renderer.RxTxRateRenderer.isSmall(text2))) { return org.ovirt.engine.ui.common.widget.renderer.RxTxRateRenderer.isSmall(text1) ? -1 : 1; } else { return lexoNumeric.compare(text1, text2); } }
@java.lang.Override public boolean validateAndSetQuota() { if (org.ovirt.engine.core.bll.RunVmOnceCommand.isInternalExecution()) { return true; } boolean quotaAcc = super.validateAndSetQuota(); if (!quotaAcc) { return false; } if (java.lang.Boolean.FALSE.equals(org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getRunAsStateless())) { return quotaAcc; } return org.ovirt.engine.core.bll.quota.QuotaManager.getInstance().validateAndSetStorageQuota(org.ovirt.engine.core.bll.RunVmOnceCommand.getStoragePool(), getStorageQuotaListParameters(), org.ovirt.engine.core.bll.RunVmOnceCommand.getReturnValue().getCanDoActionMessages()); }	@java.lang.Override public boolean validateAndSetQuota() { if (org.ovirt.engine.core.bll.RunVmOnceCommand.isInternalExecution()) { return true; } boolean quotaAcc = super.validateAndSetQuota(); if (!quotaAcc) { return false; } if (!(java.lang.Boolean.TRUE.equals(org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getRunAsStateless()))) { return quotaAcc; } return org.ovirt.engine.core.bll.quota.QuotaManager.getInstance().validateAndSetStorageQuota(org.ovirt.engine.core.bll.RunVmOnceCommand.getStoragePool(), getStorageQuotaListParameters(), org.ovirt.engine.core.bll.RunVmOnceCommand.getReturnValue().getCanDoActionMessages()); }
@java.lang.Override public java.lang.String getDisplayStringNullSafe(java.lang.String data) { if ((data == null) || (data.trim().isEmpty())) { data = customCpu.getNullReplacementString(); } return typeAheadNameTemplateNullSafe(data); }	@java.lang.Override public java.lang.String getDisplayStringNullSafe(java.lang.String data) { if ((data == null) || (data.trim().isEmpty())) { data = getDefaultEmulatedMachineLabel(); } return typeAheadNameTemplateNullSafe(data); }
private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.Optional<org.ovirt.engine.core.compat.Version> optionalVersion = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(java.util.Comparator.naturalOrder()); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); optionalVersion.ifPresent(( version) -> dataCenters.forEach(( dataCenter) -> { dataCenter.setStoragePoolCompatibilityLevelUpgradeNeeded(((version.compareTo(dataCenter.getCompatibilityVersion())) > 0)); dataCenter.setMacPoolId(dcSingleMacPoolFinder.find(dataCenter.getId())); })); return dataCenters; }	private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); dataCenters.forEach(this::setDcSingleMacPoolId); setDcCompatibilityLevelUpgradeNeeded(dataCenters); return dataCenters; }
private boolean isPrimaryAddressExist() { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = getIpConfigurationOfNetworkAttachment(); return (ipConfiguration != null) && (ipConfiguration.hasIpv4PrimaryAddressSet()); }	private boolean isIpv4PrimaryAddressExist() { org.ovirt.engine.core.common.businessentities.network.IpConfiguration networkDataCenterIpConfigurationDefinition = getIpConfigurationOfNetworkAttachment(); return (networkDataCenterIpConfigurationDefinition != null) && (networkDataCenterIpConfigurationDefinition.hasIpv4PrimaryAddressSet()); }
@java.lang.Override protected void verifyModel(org.ovirt.engine.api.model.Permission model, int index) { assertEquals(GUIDS[index].toString(), model.getId()); assertTrue(model.isSetUser()); assertEquals(org.ovirt.engine.api.restapi.utils.DirectoryEntryIdUtils.generateId(GUIDS[1].toString(), " ", " "), model.getUser().getId()); assertTrue(model.isSetRole()); assertEquals(GUIDS[2].toString(), model.getRole().getId()); }	@java.lang.Override protected void verifyModel(org.ovirt.engine.api.model.Permission model, int index) { assertEquals(GUIDS[index].toString(), model.getId()); assertTrue(model.isSetUser()); assertEquals(GUIDS[1].toString(), model.getUser().getId()); assertTrue(model.isSetRole()); assertEquals(GUIDS[2].toString(), model.getRole().getId()); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Cannot change Data Center in tree context") java.lang.String cannotChangeDCInTreeContext();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Cannot change Data Center in tree context") java.lang.String cannotChangeDCInTreeContext();
private org.ovirt.engine.core.extensions.mgr.ExtensionProxy loadExtension(java.util.Properties props) throws java.lang.Exception { org.ovirt.engine.core.extensions.mgr.ExtensionsManager.BindingsLoader loader = bindingsLoaders.get(props.getProperty(Base.ConfigKeys.BINDINGS_METHOD)); if (loader == null) { throw new org.ovirt.engine.core.extensions.mgr.ConfigurationException(java.lang.String.format("Invalid binding method '%1$s'.", props.getProperty(Base.ConfigKeys.BINDINGS_METHOD))); } return loader.load(props); }	private org.ovirt.engine.core.extensions.mgr.ExtensionProxy loadExtension(java.util.Properties props) throws java.lang.Exception { org.ovirt.engine.core.extensions.mgr.ExtensionsManager.BindingsLoader loader = org.ovirt.engine.core.extensions.mgr.ExtensionsManager.bindingsLoaders.get(props.getProperty(Base.ConfigKeys.BINDINGS_METHOD)); if (loader == null) { throw new org.ovirt.engine.core.extensions.mgr.ConfigurationException(java.lang.String.format("Invalid binding method '%1$s'.", props.getProperty(Base.ConfigKeys.BINDINGS_METHOD))); } return loader.load(props); }
private org.ovirt.engine.core.compat.Guid getNewMacPoolId() { return org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); }	private org.ovirt.engine.core.compat.Guid getNewMacPoolId() { return (org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getParameters().getStoragePool()) == null ? null : org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); }
private boolean changesAreClusterCompatible() { if (!(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommand.getParameters().getNetwork().isVmNetwork())) { if (!(org.ovirt.engine.core.common.FeatureSupported.nonVmNetwork(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommand.getVdsGroup().getCompatibilityVersion()))) { addCanDoActionMessage(EngineMessages.NON_VM_NETWORK_NOT_SUPPORTED_FOR_POOL_LEVEL); return false; } } return true; }	private boolean changesAreClusterCompatible() { if (!(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommand.getParameters().getNetwork().isVmNetwork())) { if (!(org.ovirt.engine.core.common.FeatureSupported.nonVmNetwork(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommand.getVdsGroup().getCompatibilityVersion()))) { addCanDoActionMessage(EngineMessage.NON_VM_NETWORK_NOT_SUPPORTED_FOR_POOL_LEVEL); return false; } } return true; }
private void addInterfacesFromTemplate() { java.lang.String macRegex = "^(\\p{XDigit}{2}:){5}\\p{XDigit}{2}$"; org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(); for (org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : getVm().getInterfaces()) { if ((iface.getId()) == null) { iface.setId(org.ovirt.engine.core.compat.Guid.NewGuid()); } if (org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(iface.getMacAddress())) { iface.setMacAddress(org.ovirt.engine.core.bll.MacPoolManager.getInstance().allocateNewMac()); } if (!(org.ovirt.engine.core.compat.Regex.IsMatch(iface.getMacAddress(), macRegex))) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.AddCustomValue("MacAddress", iface.getMacAddress()); logable.AddCustomValue("IfaceName", iface.getName()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.IMPORTEXPORT_IMPORT_INTERFACES_WITH_INVALID_MAC_ADDRESS); } iface.setVmTemplateId(null); iface.setVmId(getVm().getStaticData().getId()); iface.setVmName(getVm().getvm_name()); if (getParameters().isImportAsNewEntity()) { macAdded = true; } else { macAdded = vmInterfaceManager.add(iface, getCompensationContext()); } } }	private void addInterfacesFromTemplate() { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(); for (org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : getVm().getInterfaces()) { if ((iface.getId()) == null) { iface.setId(org.ovirt.engine.core.compat.Guid.NewGuid()); } fillMacAddressIfMissing(iface); iface.setVmTemplateId(null); iface.setVmId(getVmId()); iface.setVmName(getVm().getvm_name()); macAdded = vmInterfaceManager.add(iface, getCompensationContext()); } }
@org.junit.Test public void testVmDuringSnaoshot() { setUpGeneralValidations(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT)).when(snapshotsValidator).vmNotDuringSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList()).when(cmd).getDisksList(); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(EngineMessages.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT.name())); }	@org.junit.Test public void testVmDuringSnaoshot() { setUpGeneralValidations(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT)).when(snapshotsValidator).vmNotDuringSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList()).when(cmd).getDisksList(); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT.name())); }
public static boolean isMemorySizeLegal(org.ovirt.engine.core.common.businessentities.VmOsType osType, int memSizeInMB, java.lang.String cluster_version) { return (memSizeInMB >= (org.ovirt.engine.core.common.utils.VmValidationUtils.getMinMemorySizeInMb())) && (memSizeInMB <= (org.ovirt.engine.core.common.utils.VmValidationUtils.getMaxMemorySizeInMb(osType, cluster_version))); }	public static boolean isMemorySizeLegal(org.ovirt.engine.core.common.businessentities.VmOsType osType, int memSizeInMB, java.lang.String clusterVersion) { return (memSizeInMB >= (org.ovirt.engine.core.common.utils.VmValidationUtils.getMinMemorySizeInMb())) && (memSizeInMB <= (org.ovirt.engine.core.common.utils.VmValidationUtils.getMaxMemorySizeInMb(osType, clusterVersion))); }
private boolean refreshVdsmFileList(org.ovirt.engine.core.compat.Guid repoStoragePoolId, org.ovirt.engine.core.compat.Guid repoStorageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> fileStats, org.ovirt.engine.core.bll.IsoDomainListSyncronizer.FileListRefreshed fileListRefreshed) { if (repoStorageDomainId == null) { return false; } try { boolean vdsmRefreshOk = fileStats != null; org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.debug("The refresh process from VDSM, for {}, {}.", imageFileType, succeededOrFailed(vdsmRefreshOk)); if (!vdsmRefreshOk) { return false; } boolean refreshSucceeded = org.ovirt.engine.core.bll.IsoDomainListSyncronizer.refreshIsoFileListMetaData(repoStorageDomainId, repoStorageDom, fileStats, imageFileType); if (refreshSucceeded && (fileListRefreshed != null)) { fileListRefreshed.onFileListRefreshed(repoStoragePoolId, fileStats.keySet()); } return refreshSucceeded; } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.warn("The refresh process for {} failed: {}", imageFileType, e.getMessage()); org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.debug("Exception", e); return false; } }	private boolean refreshVdsmFileList(org.ovirt.engine.core.compat.Guid repoStoragePoolId, org.ovirt.engine.core.compat.Guid repoStorageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> fileStats, org.ovirt.engine.core.bll.IsoDomainListSyncronizer.FileListRefreshed fileListRefreshed) { if (repoStorageDomainId == null) { return false; } boolean vdsmRefreshOk = fileStats != null; org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.debug("The refresh process from VDSM, for {}, {}.", imageFileType, succeededOrFailed(vdsmRefreshOk)); if (!vdsmRefreshOk) { return false; } boolean refreshSucceeded = org.ovirt.engine.core.bll.IsoDomainListSyncronizer.refreshIsoFileListMetaData(repoStorageDomainId, repoStorageDom, fileStats, imageFileType); if (refreshSucceeded && (fileListRefreshed != null)) { fileListRefreshed.onFileListRefreshed(repoStoragePoolId, fileStats.keySet()); } return refreshSucceeded; }
protected java.util.Map[] getVmInfo(java.util.List<java.lang.String> vmsToUpdate) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(vdsManager.getVdsId()); return ((java.util.Map[]) (getResourceManager().runVdsCommand(VDSCommandType.FullList, new org.ovirt.engine.core.common.vdscommands.FullListVDSCommandParameters(vds, vmsToUpdate)).getReturnValue())); }	protected java.util.Map[] getVmInfo(java.util.List<java.lang.String> vmsToUpdate) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(vdsManager.getVdsId()); java.util.Map[] result = new java.util.Map[]{ }; org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = getResourceManager().runVdsCommand(VDSCommandType.FullList, new org.ovirt.engine.core.common.vdscommands.FullListVDSCommandParameters(vds, vmsToUpdate)); if (vdsReturnValue.getSucceeded()) { result = ((java.util.Map[]) (vdsReturnValue.getReturnValue())); } return result; }
@org.junit.Test public void encodeWhenNonAsciiAliasIsTruncated() throws java.io.IOException { java.lang.String nonAsciiDiskAlias = "ááááááááááááááááááááááááááááááááááááááááááááááá"; disk.setDiskAlias(nonAsciiDiskAlias); disk.setDiskDescription("DiskDescription"); assertDiskDescriptionMap(disk, org.ovirt.engine.core.bll.storage.disk.MetadataDiskDescriptionHandlerTest.generateDiskAliasJsonEntry(org.ovirt.engine.core.bll.storage.disk.MetadataDiskDescriptionHandlerTest.encodeString(nonAsciiDiskAlias.substring(0, 46))), org.ovirt.engine.core.bll.storage.disk.MetadataDiskDescriptionHandlerTest.generateEncodingJsonEntry(1)); }	@org.junit.Test public void encodeWhenNonAsciiAliasIsTruncated() throws java.io.IOException { java.lang.String nonAsciiDiskAlias = "ááááááááááááááááááááááááááááááááááááááááááááááá"; disk.setDiskAlias(nonAsciiDiskAlias); disk.setDiskDescription("DiskDescription"); assertDiskDescriptionMap(disk, org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandlerTest.generateDiskAliasJsonEntry(org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandlerTest.encodeString(nonAsciiDiskAlias.substring(0, 46))), org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandlerTest.generateEncodingJsonEntry(1)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) { if (sender == (getIsoImage())) { IsoImage_SelectedItemChanged(); } else if (sender == (getFloppyImage())) { FloppyImage_SelectedItemChanged(); } else if (sender == (getSysPrepDomainName())) { SysPrepDomainName_SelectedItemChanged(); } } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition)) { if (sender == (getAttachFloppy())) { AttachFloppy_EntityChanged(); } else if (sender == (getAttachIso())) { AttachIso_EntityChanged(); } else if (sender == (getIsVmFirstRun())) { IsVmFirstRun_EntityChanged(); } else if (sender == (getUseAlternateCredentials())) { UseAlternateCredentials_EntityChanged(); } else if ((sender == (getDisplayConsole_Vnc_IsSelected())) && ((java.lang.Boolean) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity()))) { getDisplayConsole_Spice_IsSelected().setEntity(false); } else if ((sender == (getDisplayConsole_Spice_IsSelected())) && ((java.lang.Boolean) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity()))) { getDisplayConsole_Vnc_IsSelected().setEntity(false); } else if (sender == (getIsAutoAssign())) { IsAutoAssign_EntityChanged(sender, args); } } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) { if (sender == (getIsoImage())) { IsoImage_SelectedItemChanged(); } else if (sender == (getFloppyImage())) { floppyImage_SelectedItemChanged(); } else if (sender == (getSysPrepDomainName())) { sysPrepDomainName_SelectedItemChanged(); } } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition)) { if (sender == (getAttachFloppy())) { attachFloppy_EntityChanged(); } else if (sender == (getAttachIso())) { attachIso_EntityChanged(); } else if (sender == (getIsVmFirstRun())) { isVmFirstRun_EntityChanged(); } else if (sender == (getUseAlternateCredentials())) { useAlternateCredentials_EntityChanged(); } else if ((sender == (getDisplayConsole_Vnc_IsSelected())) && ((java.lang.Boolean) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity()))) { getDisplayConsole_Spice_IsSelected().setEntity(false); } else if ((sender == (getDisplayConsole_Spice_IsSelected())) && ((java.lang.Boolean) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity()))) { getDisplayConsole_Vnc_IsSelected().setEntity(false); } else if (sender == (getIsAutoAssign())) { isAutoAssign_EntityChanged(sender, args); } } }
private static void mapFopStats(org.ovirt.engine.api.model.ProfileDetail profileDetail, org.ovirt.engine.core.common.businessentities.gluster.StatsInfo statsInfo) { for (org.ovirt.engine.core.common.businessentities.gluster.FopStats fopStat : statsInfo.getFopStats()) { org.ovirt.engine.api.model.FopStatistic fStat = new org.ovirt.engine.api.model.FopStatistic(); fStat.setName(fopStat.getName()); fStat.getStatistic().add(org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.MIN_LATENCY, fopStat.getMinLatency())); fStat.getStatistic().add(org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.MAX_LATENCY, fopStat.getMaxLatency())); fStat.getStatistic().add(org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.AVG_LATENCY, fopStat.getAvgLatency())); fStat.getStatistic().add(org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.HITS, fopStat.getHits())); profileDetail.getFopStatistic().add(fStat); } }	private static void mapFopStats(org.ovirt.engine.api.model.ProfileDetail profileDetail, org.ovirt.engine.core.common.businessentities.gluster.StatsInfo statsInfo) { for (org.ovirt.engine.core.common.businessentities.gluster.FopStats fopStat : statsInfo.getFopStats()) { org.ovirt.engine.api.model.FopStatistic fStat = new org.ovirt.engine.api.model.FopStatistic(); fStat.setName(fopStat.getName()); fStat.getStatistic().add(org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.clone(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.MIN_LATENCY), fopStat.getMinLatency())); fStat.getStatistic().add(org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.clone(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.MAX_LATENCY), fopStat.getMaxLatency())); fStat.getStatistic().add(org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.clone(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.AVG_LATENCY), fopStat.getAvgLatency())); fStat.getStatistic().add(org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.clone(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.HITS), fopStat.getHits())); profileDetail.getFopStatistic().add(fStat); } }
@javax.annotation.PostConstruct private void initialize() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.PMHealthCheckEnabled)) { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Start initializing {}", getClass().getSimpleName()); java.lang.Integer pmHealthCheckInterval = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PMHealthCheckIntervalInSec); executor.scheduleWithFixedDelay(() -> pmHealthCheck(), pmHealthCheckInterval, pmHealthCheckInterval, java.util.concurrent.TimeUnit.SECONDS); } recover(vdsDao.getAll()); org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Finished initializing {}", getClass().getSimpleName()); }	@javax.annotation.PostConstruct private void initialize() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.PMHealthCheckEnabled)) { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Start initializing {}", getClass().getSimpleName()); java.lang.Integer pmHealthCheckInterval = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PMHealthCheckIntervalInSec); executor.scheduleWithFixedDelay(this::pmHealthCheck, pmHealthCheckInterval, pmHealthCheckInterval, java.util.concurrent.TimeUnit.SECONDS); } recover(vdsDao.getAll()); org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Finished initializing {}", getClass().getSimpleName()); }
public void setStorageDomains(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> value) { if ((storageDomains) != value) { storageDomains = value; OnPropertyChanged(new org.ovirt.engine.core.compat.PropertyChangedEventArgs("Storage Domains")); } }	protected abstract java.lang.String getNoActiveTargetDomainMessage();
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc merge(java.lang.String jobId, java.util.Map topImage, java.util.Map baseImage) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.merge").withParameter("top", topImage).withParameter("base", baseImage).withParameter("job_id", jobId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn moveDomainDevice(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> moveParams) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.move_domain_device").withParameter("job_id", jobId).withParameter("move_params", moveParams).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.Uri uri = new org.ovirt.engine.ui.uicommonweb.Uri(((java.lang.String) (value))); org.ovirt.engine.ui.uicommonweb.validation.ValidationResult res = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if (!(uri.isValid())) { res.setSuccess(false); res.getReasons().add(getUriMessage()); return res; } res = getHostValidation().validate(uri.getAuthority().getHost()); if (!(uri.getScheme().equalsIgnoreCase(Uri.SCHEME_HTTP))) { res.setSuccess(false); res.getReasons().add(getSchemeMessage()); } return res; }	@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.Uri uri = new org.ovirt.engine.ui.uicommonweb.Uri(((java.lang.String) (value))); org.ovirt.engine.ui.uicommonweb.validation.ValidationResult res = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if (!(uri.isValid())) { res.setSuccess(false); res.getReasons().add(getUriMessage()); return res; } res = getHostValidation().validate(uri.getAuthority().getHost()); if (!(allowedSchemes.contains(uri.getScheme()))) { res.setSuccess(false); res.getReasons().add(getSchemeMessage()); } return res; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return java.lang.String.valueOf(object.getDiskList().size()); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return java.lang.String.valueOf(object.getDiskTemplateMap().size()); }
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { java.util.List<org.ovirt.engine.ui.uicommonweb.dataprovider.VmTemplate> list = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.dataprovider.VmTemplate>(); if (source != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.VmTemplate blankTemplate = null; for (org.ovirt.engine.ui.uicommonweb.dataprovider.VmTemplate template : ((java.util.List<org.ovirt.engine.ui.uicommonweb.dataprovider.VmTemplate>) (source))) { if (template.getId().equals(Guid.Empty)) { blankTemplate = template; } else if ((template.getStatus()) == (VmTemplateStatus.OK)) { list.add(template); } } java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.VmTemplateByNameComparer()); if (blankTemplate != null) { list.add(0, blankTemplate); } } return list; }	@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> list = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate>(); if (source != null) { org.ovirt.engine.core.common.businessentities.VmTemplate blankTemplate = null; for (org.ovirt.engine.core.common.businessentities.VmTemplate template : ((java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate>) (source))) { if (template.getId().equals(Guid.Empty)) { blankTemplate = template; } else if ((template.getStatus()) == (org.ovirt.engine.core.common.businessentities.VmTemplateStatus.OK)) { list.add(template); } } java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.VmTemplateByNameComparer()); if (blankTemplate != null) { list.add(0, blankTemplate); } } return list; }
private boolean isVmInterfacesConfigured() { for (org.ovirt.engine.core.common.businessentities.VmNetworkInterface nic : org.ovirt.engine.core.bll.RunVmCommand.getVm().getInterfaces()) { if ((nic.getNetworkName()) == null) { if (!(org.ovirt.engine.core.common.validation.FeatureSupported.networkLinking(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVdsGroupCompatibilityVersion()))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INTERFACE_NETWORK_NOT_CONFIGURED); return false; } else { return true; } } } return true; }	private boolean isVmInterfacesConfigured() { for (org.ovirt.engine.core.common.businessentities.VmNetworkInterface nic : org.ovirt.engine.core.bll.RunVmCommand.getVm().getInterfaces()) { if ((nic.getNetworkName()) == null) { if (!(org.ovirt.engine.core.common.FeatureSupported.networkLinking(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVdsGroupCompatibilityVersion()))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INTERFACE_NETWORK_NOT_CONFIGURED); return false; } else { return true; } } } return true; }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = createSnapshotsValidator(); if ((!(validate(snapshotsValidator.snapshotExists(getSnapshot())))) || (!(validate(snapshotsValidator.vmNotDuringSnapshot(getSnapshot().getVmId()))))) { return false; } vmFromConfiguration = getVmFromConfiguration(); if ((vmFromConfiguration) == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_SNAPSHOT_HAS_NO_CONFIGURATION); addCanDoActionMessageVariable("VmName", org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmName()); addCanDoActionMessageVariable("SnapshotName", org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getSnapshotName()); return false; } if (!(super.canDoAction())) { return false; } org.ovirt.engine.core.bll.validator.VmValidator vmValidator = createVmValidator(vmFromConfiguration); if ((java.lang.Boolean.FALSE.equals(org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters().isVirtioScsiEnabled())) && (!(validate(vmValidator.canDisableVirtioScsi(getAdjustedDiskImagesFromConfiguration()))))) { return false; } return true; }	@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = createSnapshotsValidator(); if ((!(validate(snapshotsValidator.snapshotExists(getSnapshot())))) || (!(validate(snapshotsValidator.vmNotDuringSnapshot(getSnapshot().getVmId()))))) { return false; } vmFromConfiguration = getVmFromConfiguration(); if ((vmFromConfiguration) == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_SNAPSHOT_HAS_NO_CONFIGURATION); addCanDoActionMessageVariable("VmName", org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmName()); addCanDoActionMessageVariable("SnapshotName", org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getSnapshotName()); return false; } if (!(super.canDoAction())) { return false; } if (!(checkCanDisableVirtIoScsi())) { return false; } return true; }
private void validateRoleMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetRoleMappings())) && (action.getRegistrationConfiguration().getRoleMappings().isSetRegistrationRoleMappings())) { action.getRegistrationConfiguration().getRoleMappings().getRegistrationRoleMappings().forEach(this::validateRoleMapping); } }	private void validateRoleMappings(org.ovirt.engine.api.model.Action action) { if ((action.getRegistrationConfiguration().isSetRoleMappings()) && (action.getRegistrationConfiguration().getRoleMappings().isSetRegistrationRoleMappings())) { action.getRegistrationConfiguration().getRoleMappings().getRegistrationRoleMappings().forEach(this::validateRoleMapping); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Erratum> getErrataForHost(java.lang.String hostName) { org.ovirt.engine.core.bll.host.provider.foreman.ContentHost contentHost = findContentHost(hostName); if (contentHost == null) { return java.util.Collections.emptyList(); } return runErrataListMethod(java.lang.String.format(org.ovirt.engine.core.bll.host.provider.foreman.ForemanHostProviderProxy.CONTENT_HOST_ERRATA_ENTRY_POINT, contentHost.getUuid())); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Erratum> getErrataForHost(java.lang.String hostName) { org.ovirt.engine.core.bll.host.provider.foreman.ContentHost contentHost = findContentHost(hostName); if (contentHost == null) { log.error("Failed to find host on provider '{}' by host name '{}' ", getProvider().getName(), hostName); return java.util.Collections.emptyList(); } return runErrataListMethod(java.lang.String.format(org.ovirt.engine.core.bll.host.provider.foreman.ForemanHostProviderProxy.CONTENT_HOST_ERRATA_ENTRY_POINT, contentHost.getUuid())); }
public static void GetDomainList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, boolean filterInternalDomain) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? new java.util.ArrayList<java.lang.String>(((java.util.ArrayList<java.lang.String>) (source))) : new java.util.ArrayList<java.lang.String>(); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.GetDomainListParameters tempVar = new org.ovirt.engine.ui.uicommonweb.dataprovider.GetDomainListParameters(); tempVar.setFilterInternalDomain(filterInternalDomain); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetDomainList, tempVar, aQuery); }	public static void getDomainList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, boolean filterInternalDomain) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? new java.util.ArrayList<java.lang.String>(((java.util.ArrayList<java.lang.String>) (source))) : new java.util.ArrayList<java.lang.String>(); } }; org.ovirt.engine.core.common.queries.GetDomainListParameters tempVar = new org.ovirt.engine.core.common.queries.GetDomainListParameters(); tempVar.setFilterInternalDomain(filterInternalDomain); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetDomainList, tempVar, aQuery); }
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getEventBus().addHandler(org.ovirt.engine.ui.common.widget.tab.TabAccessibleChangeEvent.getType(), new org.ovirt.engine.ui.common.widget.tab.TabAccessibleChangeEvent.TabAccessibleChangeHandler() { @java.lang.Override public void onTabAccessibleChange(org.ovirt.engine.ui.common.widget.tab.TabAccessibleChangeEvent event) { getView().recalculateSize(); getView().showScrollButtons(); } })); registerHandler(getEventBus().addHandler(org.ovirt.engine.ui.common.system.HeaderOffsetChangeEvent.getType(), new org.ovirt.engine.ui.common.system.HeaderOffsetChangeEvent.HeaderOffsetChangeHandler() { @java.lang.Override public void onHeaderOffsetChange(org.ovirt.engine.ui.common.system.HeaderOffsetChangeEvent event) { getView().setOffset(event.getWidth()); if ((resizeHandlerRegistration) != null) { resizeHandlerRegistration.removeHandler(); } } })); resizeHandlerRegistration = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent resizeEvent) { getView().recalculateSize(); getView().showScrollButtons(); } }); }	@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getEventBus().addHandler(org.ovirt.engine.ui.common.widget.tab.TabAccessibleChangeEvent.getType(), new org.ovirt.engine.ui.common.widget.tab.TabAccessibleChangeEvent.TabAccessibleChangeHandler() { @java.lang.Override public void onTabAccessibleChange(org.ovirt.engine.ui.common.widget.tab.TabAccessibleChangeEvent event) { getView().recalculateSize(); getView().showScrollButtons(); } })); registerHandler(getEventBus().addHandler(org.ovirt.engine.ui.common.system.HeaderOffsetChangeEvent.getType(), new org.ovirt.engine.ui.common.system.HeaderOffsetChangeEvent.HeaderOffsetChangeHandler() { @java.lang.Override public void onHeaderOffsetChange(org.ovirt.engine.ui.common.system.HeaderOffsetChangeEvent event) { getView().setOffset(event.getWidth()); if ((resizeHandlerRegistration) != null) { resizeHandlerRegistration.removeHandler(); resizeHandlerRegistration = null; } } })); resizeHandlerRegistration = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent resizeEvent) { getView().recalculateSize(); getView().showScrollButtons(); } }); }
@java.lang.Override public void runningSucceded() { try { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDynamicDao().updatePartialVdsDynamicCalc(getVdsDestinationId(), 0, (-(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getVmMemSizeMb())), (-(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getNumOfCpus())), 0, 0); super.runningSucceded(); } finally { org.ovirt.engine.core.bll.MigrateVmCommand.freeLock(); } }	@java.lang.Override public void runningSucceded() { try { super.runningSucceded(); } finally { org.ovirt.engine.core.bll.MigrateVmCommand.freeLock(); } }
public final void setBrandingManager(final org.ovirt.engine.ui.frontend.server.gwt.branding.BrandingManager manager) { this.brandingManager = manager; }	public final void setBrandingManager(final org.ovirt.engine.ui.frontend.server.gwt.branding.BrandingManager manager) { brandingManager = manager; }
@java.lang.Override protected java.util.List<java.lang.Class<?>> getValidationGroups() { org.ovirt.engine.core.bll.network.host.UnlabelNicCommand.addValidationGroup(org.ovirt.engine.core.common.validation.group.CreateEntity.class); return super.getValidationGroups(); }	private java.util.Set<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> getNicsToRemove(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> labeledNetworks, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface underlyingNic) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsByNetworkName = org.ovirt.engine.core.common.businessentities.Entities.hostInterfacesByNetworkName(nics); java.util.Set<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsToRemove = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.Network network : labeledNetworks) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = nicsByNetworkName.get(network.getName()); if (nic != null) { if (org.apache.commons.lang.StringUtils.equals(nic.getName(), underlyingNic.getName())) { underlyingNic.setNetworkName(null); } else if (org.apache.commons.lang.StringUtils.equals(org.ovirt.engine.core.utils.NetworkUtils.stripVlan(nic.getName()), underlyingNic.getName())) { nicsToRemove.add(nic); } } } return nicsToRemove; }
private java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> getExistingNics() { if ((existingNics) == null) { existingNics = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getDbFacade().getInterfaceDao().getAllInterfacesForVds(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsId()); org.ovirt.engine.core.dao.network.NetworkQoSDao qosDao = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getDbFacade().getNetworkQosDao(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : existingNics) { org.ovirt.engine.core.common.businessentities.network.Network network = getClusterNetworks().get(iface.getNetworkName()); iface.setNetworkImplementationDetails(org.ovirt.engine.core.utils.NetworkUtils.calculateNetworkImplementationDetails(network, (network == null ? null : qosDao.get(network.getQosId())), iface)); } } return existingNics; }	private java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> getExistingNics() { if ((existingNics) == null) { existingNics = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getDbFacade().getInterfaceDao().getAllInterfacesForVds(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsId()); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.Network> networksByName = org.ovirt.engine.core.common.businessentities.Entities.entitiesByName(getClusterNetworks().values()); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : existingNics) { org.ovirt.engine.core.common.businessentities.network.Network network = networksByName.get(iface.getNetworkName()); iface.setNetworkImplementationDetails(org.ovirt.engine.core.utils.NetworkUtils.calculateNetworkImplementationDetails(network, (network == null ? null : qosDao.get(network.getQosId())), iface)); } } return existingNics; }
@java.lang.Override protected java.lang.String getWarning(java.util.List<java.lang.String> disks) { return messages.cannotMoveDisks(disks.stream().collect(java.util.stream.Collectors.joining(", "))); }	@java.lang.Override protected java.lang.String getWarning(java.util.List<java.lang.String> disks) { return messages.cannotMoveDisks(java.lang.String.join(", ", disks)); }
public static void GetConfigFromCache(org.ovirt.engine.core.common.queries.GetConfigurationValueParameters parameters, AsyncQuery aQuery) { final java.util.Map.Entry<org.ovirt.engine.core.common.queries.ConfigurationValues, java.lang.String> config_key = new org.ovirt.engine.core.compat.KeyValuePairCompat<org.ovirt.engine.core.common.queries.ConfigurationValues, java.lang.String>(parameters.getConfigValue(), parameters.getVersion()); java.lang.Object returnValue = null; if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValues.containsKey(config_key)) { returnValue = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValues.get(config_key); } else if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValuesPreConvert.containsKey(config_key)) { returnValue = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValuesPreConvert.get(config_key); if ((aQuery.converterCallback) != null) { returnValue = aQuery.converterCallback.Convert(returnValue, aQuery); } if (returnValue != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValues.put(config_key, returnValue); } } aQuery.asyncCallback.OnSuccess(aQuery.getModel(), returnValue); }	public static void GetConfigFromCache(org.ovirt.engine.core.common.queries.GetConfigurationValueParameters parameters, AsyncQuery aQuery) { final org.ovirt.engine.core.compat.KeyValuePairCompat<org.ovirt.engine.core.common.queries.ConfigurationValues, java.lang.String> config_key = new org.ovirt.engine.core.compat.KeyValuePairCompat<org.ovirt.engine.core.common.queries.ConfigurationValues, java.lang.String>(parameters.getConfigValue(), parameters.getVersion()); java.lang.Object returnValue = null; if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValues.containsKey(config_key)) { returnValue = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValues.get(config_key); } else if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValuesPreConvert.containsKey(config_key)) { returnValue = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValuesPreConvert.get(config_key); if ((aQuery.converterCallback) != null) { returnValue = aQuery.converterCallback.Convert(returnValue, aQuery); } if (returnValue != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValues.put(config_key, returnValue); } } aQuery.asyncCallback.OnSuccess(aQuery.getModel(), returnValue); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData) { int size = registerVmData.getVm().getVmMemSizeMb(); return (size + " ") + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterVmPopupView.constants.mb()); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData) { int size = registerVmData.getVm().getVmMemSizeMb(); return org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterVmPopupView.messages.megabytes(java.lang.String.valueOf(size)); }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.TagsVmMap tagsVmMap; tagsVmMap = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVmByTagIdAndByVmId(org.ovirt.engine.core.bll.UpdateTagsVmMapDefaultDisplayTypeCommand.getParameters().getTagsVmMap().gettag_id(), org.ovirt.engine.core.bll.UpdateTagsVmMapDefaultDisplayTypeCommand.getParameters().getTagsVmMap().getvm_id()); if (tagsVmMap == null) { addCanDoActionMessage(EngineMessages.TAGS_SPECIFY_TAG_IS_NOT_EXISTS); return false; } return true; }	@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.TagsVmMap tagsVmMap; tagsVmMap = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVmByTagIdAndByVmId(org.ovirt.engine.core.bll.UpdateTagsVmMapDefaultDisplayTypeCommand.getParameters().getTagsVmMap().gettag_id(), org.ovirt.engine.core.bll.UpdateTagsVmMapDefaultDisplayTypeCommand.getParameters().getTagsVmMap().getvm_id()); if (tagsVmMap == null) { addCanDoActionMessage(EngineMessage.TAGS_SPECIFY_TAG_IS_NOT_EXISTS); return false; } return true; }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue(); if ((res != null) && (res.getSucceeded())) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TestProviderConnectivity, new org.ovirt.engine.core.common.action.ProviderParameters(provider), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue(); setTestResultValueFromCommandReturnValue(res); stopProgress(); } }, null, false); } else { setTestResultValueFromCommandReturnValue(res); stopProgress(); } }	@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue(); if ((res != null) && (res.getSucceeded())) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TestProviderConnectivity, new org.ovirt.engine.core.common.action.ProviderParameters(provider), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue(); setTestResultValue(res); stopProgress(); } }, null, false); } else { setTestResultValue(res); stopProgress(); } }
@java.lang.Override public void process() throws java.io.IOException, org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { final java.lang.Runnable op = pendingOperations(); if (op != null) { key.interestOps(0); this.executorService.execute(new java.lang.Runnable() { @java.lang.Override public void run() { try { op.run(); updateInterestedOps(); selector.wakeup(); } catch (org.ovirt.vdsm.jsonrpc.client.ClientConnectionException e) { org.ovirt.vdsm.jsonrpc.client.reactors.tcp.SSLClient.log.error("Unable to process messages", e); } } }); } if (((nioEngine) != null) && (nioEngine.handshakeInProgress())) { return; } super.process(); }	@java.lang.Override public void process() throws java.io.IOException, org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { final java.lang.Runnable op = pendingOperations(); if (op != null) { key.interestOps(0); scheduleTask(new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() { try { op.run(); updateInterestedOps(); selector.wakeup(); } catch (org.ovirt.vdsm.jsonrpc.client.ClientConnectionException e) { org.ovirt.vdsm.jsonrpc.client.reactors.SSLClient.log.error("Unable to process messages", e); } return null; } }); } if (((this.nioEngine) != null) && (this.nioEngine.handshakeInProgress())) { return; } super.process(); }
@org.junit.Test public void testClone() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUriInfo(setUpBasicUriExpectations()); setUpGetPayloadExpectations(1, 2); setUpGetBallooningExpectations(1, 2); setUpGetConsoleExpectations(new int[]{ 1, 2 }); setUpGetVmOvfExpectations(new int[]{ 2 }); setUpGetVirtioScsiExpectations(new int[]{ 2 }); setUpGetSoundcardExpectations(new int[]{ 2 }); setUpGetRngDeviceExpectations(new int[]{ 2 }); setUpGetCertuficateExpectations(1, 2); setUpEntityQueryExpectations(VdcQueryType.GetVmTemplate, org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[1] }, getTemplateEntity(0)); setUpEntityQueryExpectations(VdcQueryType.GetVdsGroupByVdsGroupId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[2] }, getVdsGroupEntity()); setUpCreationExpectations(VdcActionType.AddVmFromTemplate, org.ovirt.engine.core.common.action.AddVmFromTemplateParameters.class, new java.lang.String[]{ "StorageDomainId" }, new java.lang.Object[]{ GUIDS[0] }, true, true, GUIDS[2], VdcQueryType.GetVmByVmId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[2] }, getEntity(2)); javax.ws.rs.core.Response response = collection.add(createModel(new org.ovirt.engine.api.model.Disks() { { setClone(true); } })); assertEquals(201, response.getStatus()); assertTrue(((response.getEntity()) instanceof org.ovirt.engine.api.model.VM)); verifyModel(((org.ovirt.engine.api.model.VM) (response.getEntity())), 2); }	@org.junit.Test public void testClone() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUpGetPayloadExpectations(1, 2); setUpGetBallooningExpectations(1, 2); setUpGetConsoleExpectations(1, 2); setUpGetVmOvfExpectations(2); setUpGetVirtioScsiExpectations(2); setUpGetSoundcardExpectations(2, 1); setUpGetRngDeviceExpectations(2); setUpGetCertuficateExpectations(1, 2); setUpEntityQueryExpectations(VdcQueryType.GetVmTemplate, org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[1] }, getTemplateEntity(0)); setUpEntityQueryExpectations(VdcQueryType.GetVdsGroupByVdsGroupId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[2] }, getVdsGroupEntity()); setUpCreationExpectations(VdcActionType.AddVmFromTemplate, org.ovirt.engine.core.common.action.AddVmFromTemplateParameters.class, new java.lang.String[]{ "StorageDomainId" }, new java.lang.Object[]{ GUIDS[0] }, true, true, GUIDS[2], VdcQueryType.GetVmByVmId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[2] }, getEntity(2)); javax.ws.rs.core.Response response = collection.add(createModel(new org.ovirt.engine.api.model.Disks() { { setClone(true); } })); assertEquals(201, response.getStatus()); assertTrue(((response.getEntity()) instanceof org.ovirt.engine.api.model.VM)); verifyModel(((org.ovirt.engine.api.model.VM) (response.getEntity())), 2); }
@java.lang.Override protected boolean validate() { final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.FreezeVmCommand.getVm(); if (vm == null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.FreezeVmCommand.canRunActionOnNonManagedVm())) { return false; } if ((org.ovirt.engine.core.bll.FreezeVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { return org.ovirt.engine.core.bll.FreezeVmCommand.failVmStatusIllegal(); } return true; }	@java.lang.Override protected boolean validate() { final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.FreezeVmCommand.getVm(); if (vm == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.FreezeVmCommand.canRunActionOnNonManagedVm())) { return false; } if ((org.ovirt.engine.core.bll.FreezeVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { return org.ovirt.engine.core.bll.FreezeVmCommand.failVmStatusIllegal(); } return true; }
private void doTestIncludes(java.lang.String spec, java.lang.String[] rels, boolean[] expected) throws java.lang.Exception { javax.ws.rs.core.HttpHeaders httpheaders = createMock(javax.ws.rs.core.HttpHeaders.class); java.util.List<java.lang.String> requestHeaders = new java.util.ArrayList<java.lang.String>(); expect(httpheaders.getRequestHeader("Accept")).andReturn(requestHeaders).anyTimes(); requestHeaders.add(((org.ovirt.engine.api.common.util.DetailHelperTest.ACCEPTABLE) + spec)); replay(httpheaders); for (int i = 0; i < (rels.length); i++) { org.ovirt.engine.api.common.util.Details details = org.ovirt.engine.api.common.util.DetailsHelper.getDetails(httpheaders, null); assertEquals(expected[i], details.isIncluded(rels[i])); } verify(httpheaders); }	private void doTestIncludes(java.lang.String spec, java.lang.String[] rels, boolean[] expected) throws java.lang.Exception { javax.ws.rs.core.HttpHeaders httpheaders = createMock(javax.ws.rs.core.HttpHeaders.class); java.util.List<java.lang.String> requestHeaders = new java.util.ArrayList<java.lang.String>(); expect(httpheaders.getRequestHeader("Accept")).andReturn(requestHeaders).anyTimes(); requestHeaders.add(((org.ovirt.engine.api.common.util.DetailHelperTest.ACCEPTABLE) + spec)); replay(httpheaders); for (int i = 0; i < (rels.length); i++) { java.util.Set<java.lang.String> details = org.ovirt.engine.api.common.util.DetailHelper.getDetails(httpheaders, null); assertEquals(expected[i], details.contains(rels[i])); } verify(httpheaders); }
public void remove() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeRolesTitle()); model.setHashName("remove_role"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().rolesMsg()); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.RolesEntity role : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.RolesEntity>Cast(getSelectedItems())) { list.add(role.getname()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnRemove", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }	public void remove() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeRolesTitle()); model.setHashName("remove_role"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().rolesMsg()); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.Role role : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.Role>Cast(getSelectedItems())) { list.add(role.getname()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnRemove", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
private java.util.List<org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateWithPlugInfo> getVMTemplatesWithPlugInfo(org.ovirt.engine.core.compat.Guid imageId) { java.util.List<org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateWithPlugInfo> plugInfoList = getCallsHandler().executeReadList("GetVmTemplatesByImageId", org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateWithPlugInfoRowMapper.instance, getCustomMapSqlParameterSource().addValue("image_guid", imageId)); return plugInfoList; }	private org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateWithPlugInfo getVMTemplatesWithPlugInfo(org.ovirt.engine.core.compat.Guid imageId) { org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateWithPlugInfo plugInfo = getCallsHandler().executeRead("GetVmTemplatesByImageId", org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateWithPlugInfoRowMapper.instance, getCustomMapSqlParameterSource().addValue("image_guid", imageId)); return plugInfo; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { return java.util.Collections.singletonList(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getVmId(), org.ovirt.engine.core.common.VdcObjectType.VM, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getActionType().getActionGroup())); }	private org.ovirt.engine.core.common.businessentities.VmStatic getNextRunConfiguration() { final org.ovirt.engine.core.common.businessentities.Snapshot snapshot = snapshotDao.get(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId(), Snapshot.SnapshotType.NEXT_RUN); if (snapshot == null) { return null; } final org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); return vm.getStaticData(); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo> getAll() { return null; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo> getAll() { throw new org.apache.commons.lang.NotImplementedException(); }
@java.lang.Override public void onSuccess(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.LoginUserParameters> operation, final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Succesful returned result from Login."); setLoggedInUser(((org.ovirt.engine.core.common.users.VdcUser) (result.getActionReturnValue()))); result.setCanDoActionMessages(((java.util.ArrayList<java.lang.String>) (translateError(result)))); callback.getDel().onSuccess(callback.getModel(), result); if (((getLoginHandler()) != null) && (result.getSucceeded())) { getLoginHandler().onLoginSuccess(userName, password, domain); } }	@java.lang.Override public void onSuccess(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.LoginUserParameters> operation, final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Succesful returned result from Login."); setLoggedInUser(((org.ovirt.engine.core.common.businessentities.DbUser) (result.getActionReturnValue()))); result.setCanDoActionMessages(((java.util.ArrayList<java.lang.String>) (translateError(result)))); callback.getDel().onSuccess(callback.getModel(), result); if (((getLoginHandler()) != null) && (result.getSucceeded())) { getLoginHandler().onLoginSuccess(userName, password, domain); } }
@java.lang.Override protected void initSelectedType() { java.lang.Integer selectedNicType = getNic().getType(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType> nicTypes = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType>) (getNicType().getItems())); nicTypes = (nicTypes == null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType>() : nicTypes; if ((selectedNicType == null) || (!(nicTypes.contains(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(selectedNicType))))) { selectedNicType = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetDefaultNicType().getValue(); } getNicType().setSelectedItem(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(selectedNicType)); }	@java.lang.Override protected void initSelectedType() { java.lang.Integer selectedNicType = getNic().getType(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType> nicTypes = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType>) (getNicType().getItems())); nicTypes = (nicTypes == null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType>() : nicTypes; if ((selectedNicType == null) || (!(nicTypes.contains(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(selectedNicType))))) { selectedNicType = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultNicType().getValue(); } getNicType().setSelectedItem(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(selectedNicType)); }
public java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmImagesFromDb(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allVmImages = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(vm.getDiskList(), org.ovirt.engine.core.bll.storage.ovfstore.SNAPABLE_DISKS_ONLY, org.ovirt.engine.core.bll.storage.ovfstore.ACTIVE_DISKS_ONLY); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : filteredDisks) { allVmImages.addAll(getAllImageSnapshots(diskImage)); } for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : allVmImages) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskVmElementDao().get(new org.ovirt.engine.core.common.businessentities.VmDeviceId(disk.getId(), vm.getId())); disk.setDiskVmElements(java.util.Collections.singletonList(dve)); } return allVmImages; }	public java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmImagesFromDb(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allVmImages = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(vm.getDiskList(), org.ovirt.engine.core.bll.storage.ovfstore.ONLY_SNAPABLE, org.ovirt.engine.core.bll.storage.ovfstore.ONLY_ACTIVE); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : filteredDisks) { allVmImages.addAll(getAllImageSnapshots(diskImage)); } for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : allVmImages) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskVmElementDao().get(new org.ovirt.engine.core.common.businessentities.VmDeviceId(disk.getId(), vm.getId())); disk.setDiskVmElements(java.util.Collections.singletonList(dve)); } return allVmImages; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured, reportedDnsResolverConfiguration, isInFenceFlow); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured, reportedDnsResolverConfiguration, inFenceFlow); }
private java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkLabel> getHostNicLabels(org.ovirt.engine.core.compat.Guid hostNicId) { return getBackendCollection(VdcQueryType.GetNetworkLabelsByHostNicId, new org.ovirt.engine.core.common.queries.IdQueryParameters(hostNicId)); }	private java.util.List<org.ovirt.engine.core.common.businessentities.network.pseudo.NetworkLabel> getHostNicLabels(org.ovirt.engine.core.compat.Guid hostNicId) { return getBackendCollection(VdcQueryType.GetNetworkLabelsByHostNicId, new org.ovirt.engine.core.common.queries.IdQueryParameters(hostNicId)); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Provider> getAllWithQuery(java.lang.String query) { return jdbcTemplate.query(query, org.ovirt.engine.core.dao.provider.ProviderDaoDbFacadeImpl.ProviderRowMapper.INSTANCE); }	public java.util.List<org.ovirt.engine.core.common.businessentities.Provider> getAllWithQuery(java.lang.String query) { return jdbcTemplate.query(query, org.ovirt.engine.core.dao.provider.ProviderDaoDbFacadeImpl.ProviderRowMapper.INSTANCE); }
private void onSelectedHookSourceChanged() { org.ovirt.engine.ui.uicommonweb.models.EntityModel selectedItem = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (getHookSources().getSelectedItem())); if (selectedItem == null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook selectedServer = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook) (selectedItem.getEntity())); getServerHooksList().setSelectedItem(selectedServer); if ((selectedServer.getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStatus.MISSING)) { getContentModel().getContent().setEntity(null); getContentModel().getStatus().setEntity(null); getContentModel().getMd5Checksum().setEntity(null); return; } getContentModel().getStatus().setEntity(selectedServer.getStatus()); getContentModel().getMd5Checksum().setEntity(selectedServer.getChecksum()); if ((selectedServer.getContentType()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterHookContentType.TEXT)) { startProgress(null); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getGlusterHookContent(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.lang.String content = ((java.lang.String) (returnValue)); getContentModel().getContent().setEntity(content); stopProgress(); } }), getGlusterHookEntiry().getId(), selectedServer.getServerId()); } }	private void onSelectedHookSourceChanged() { org.ovirt.engine.ui.uicommonweb.models.EntityModel selectedItem = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (getHookSources().getSelectedItem())); if (selectedItem == null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook selectedServer = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook) (selectedItem.getEntity())); getServerHooksList().setSelectedItem(selectedServer); if ((selectedServer.getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStatus.MISSING)) { getContentModel().getContent().setEntity(null); getContentModel().getStatus().setEntity(null); getContentModel().getMd5Checksum().setEntity(null); return; } getContentModel().getStatus().setEntity(selectedServer.getStatus()); getContentModel().getMd5Checksum().setEntity(selectedServer.getChecksum()); if ((selectedServer.getContentType()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterHookContentType.TEXT)) { startProgress(null); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getGlusterHookContent(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.lang.String content = ((java.lang.String) (returnValue)); getContentModel().getContent().setEntity(content); stopProgress(); } }), getGlusterHookEntity().getId(), selectedServer.getServerId()); } }
public static java.lang.String getDisplayStringForPluginName(java.lang.String pluginName) { try { return new org.ovirt.engine.ui.uicompat.EnumTranslator().get(org.ovirt.engine.core.common.businessentities.OpenstackNetworkPluginType.valueOf(pluginName)); } catch (java.lang.Exception e) { return pluginName == null ? "" : pluginName; } }	public static java.lang.String getDisplayStringForPluginName(java.lang.String pluginName) { try { return org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance().get(org.ovirt.engine.core.common.businessentities.OpenstackNetworkPluginType.valueOf(pluginName)); } catch (java.lang.Exception e) { return pluginName == null ? "" : pluginName; } }
private java.lang.String fixLocalhostURL(java.lang.String url) { java.util.regex.Matcher m = org.ovirt.engine.core.utils.servlet.RedirectServlet.urlPattern.matcher(url); if (m.matches()) { java.lang.String host = m.group("host"); if (host != null) { if (((host.equals("localhost")) || (host.startsWith("127."))) || (host.equals("::1"))) { url = java.lang.String.format("%s%s%s", ((m.group("prefix")) != null ? m.group("prefix") : ""), org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getHost(), ((m.group("suffix")) != null ? m.group("suffix") : "")); } } } return url; }	private java.lang.String injectLocalHost(java.lang.String url) { java.util.regex.Matcher m = org.ovirt.engine.core.utils.servlet.RedirectServlet.urlPattern.matcher(url); if (m.matches()) { java.lang.String host = m.group("host"); if (host != null) { if (((org.ovirt.engine.core.utils.servlet.RedirectServlet.localHostNames.contains(host)) || (host.startsWith("127."))) || (host.equals("::1"))) { url = java.lang.String.format("%s%s%s", ((m.group("prefix")) != null ? m.group("prefix") : ""), org.ovirt.engine.core.utils.servlet.RedirectServlet.LOCALHOST_PLACEHOLDER, ((m.group("suffix")) != null ? m.group("suffix") : "")); } } } return url; }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()) != null) { vmPoolDao.removeVmFromVmPool(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmId()); if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isUpdatePrestartedVms()) { vmPoolDao.boundVmPoolPrestartedVms(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()); } if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isRemovePoolUponDetachAllVMs()) { removeVmPool(); } org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); } }	@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()) != null) { vmPoolDao.removeVmFromVmPool(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmId()); if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isUpdatePrestartedVms()) { vmPoolDao.boundVmPoolPrestartedVms(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()); } if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isRemovePoolUponDetachAllVMs()) { removeVmPoolIfNeeded(); } org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); } }
@java.lang.Override public void execute(int iterationId) { try { org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ConnectStoragePool, new org.ovirt.engine.core.common.vdscommands.ConnectStoragePoolVDSCommandParameters(getVdss().get(iterationId), getStoragePool(), true)); org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(getStorageDomain().getStorageType()).disconnectStorageFromDomainByVdsId(getStorageDomain(), getVdss().get(iterationId).getId()); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.storage.RefreshStoragePoolAndDisconnectAsyncOperation.log.errorFormat("Failed to connect/refresh storagePool. Host {0} to storage pool {1}. Exception: {3}", getVdss().get(iterationId).getName(), getStoragePool().getName(), e); } }	@java.lang.Override public void execute(int iterationId) { try { org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ConnectStoragePool, new org.ovirt.engine.core.common.vdscommands.ConnectStoragePoolVDSCommandParameters(getVdss().get(iterationId), getStoragePool(), masterStorageDomainId, storagePoolIsoMap, true)); org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(getStorageDomain().getStorageType()).disconnectStorageFromDomainByVdsId(getStorageDomain(), getVdss().get(iterationId).getId()); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.storage.RefreshStoragePoolAndDisconnectAsyncOperation.log.errorFormat("Failed to connect/refresh storagePool. Host {0} to storage pool {1}. Exception: {3}", getVdss().get(iterationId).getName(), getStoragePool().getName(), e); } }
public boolean getGlusterCliBasedScheduling() { return this.glusterCliBasedScheduling; }	public boolean isGlusterCliBasedSchedulingOn() { return this.glusterCliBasedSchedulingOn; }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Gluster volume snapshot set config failed") java.lang.String GlusterVolumeSnapshotSetConfigFailedException();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Failed to create snapshot for gluster volume") java.lang.String GlusterSnapshotCreateFailedException();
protected boolean checkIfImageDiskCanBeAdded(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator) { if (Guid.Empty.equals(getStorageDomainId())) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_SPECIFIED); } boolean returnValue; org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = createStorageDomainValidator(); returnValue = (((((((((org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().isSkipDomainCheck()) || (validate(storageDomainValidator.isDomainExistAndActive()))) && (!(isShareableDiskOnGlusterDomain()))) && (checkImageConfiguration())) && (validate(storageDomainValidator.hasSpaceForNewDisk(getDiskImageInfo())))) && (validate(storageDomainValidator.isDomainWithinThresholds()))) && (checkExceedingMaxBlockDiskSize())) && (canAddShareableDisk())) && (validate(diskValidator.isVirtIoScsiValid(vm)))) && (validate(diskValidator.isDiskInterfaceSupported(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getVm()))); if (returnValue && (vm != null)) { org.ovirt.engine.core.common.businessentities.StoragePool sp = org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getStoragePool(); returnValue = (((validate(new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator(sp).isUp())) && (isStoragePoolMatching(vm))) && (org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.isVmNotLocked())) && (org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.isVmNotInPreviewSnapshot()); } return returnValue; }	protected boolean checkIfImageDiskCanBeAdded(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator) { if (Guid.Empty.equals(getStorageDomainId())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_SPECIFIED); } boolean returnValue; org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = createStorageDomainValidator(); returnValue = (((((((((org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().isSkipDomainCheck()) || (validate(storageDomainValidator.isDomainExistAndActive()))) && (!(isShareableDiskOnGlusterDomain()))) && (checkImageConfiguration())) && (validate(storageDomainValidator.hasSpaceForNewDisk(getDiskImageInfo())))) && (validate(storageDomainValidator.isDomainWithinThresholds()))) && (checkExceedingMaxBlockDiskSize())) && (canAddShareableDisk())) && (validate(diskValidator.isVirtIoScsiValid(vm)))) && (validate(diskValidator.isDiskInterfaceSupported(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getVm()))); if (returnValue && (vm != null)) { org.ovirt.engine.core.common.businessentities.StoragePool sp = org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getStoragePool(); returnValue = (((validate(new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator(sp).isUp())) && (isStoragePoolMatching(vm))) && (org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.isVmNotLocked())) && (org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.isVmNotInPreviewSnapshot()); } return returnValue; }
@java.lang.Override protected void executeQueryCommand() { if ((org.ovirt.engine.core.bll.storage.domains.GetStorageDomainDefaultWipeAfterDeleteQuery.getParameters().getStorageType()) != null) { org.ovirt.engine.core.bll.storage.domains.GetStorageDomainDefaultWipeAfterDeleteQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.utils.WipeAfterDeleteUtils.getDefaultWipeAfterDeleteFlag(org.ovirt.engine.core.bll.storage.domains.GetStorageDomainDefaultWipeAfterDeleteQuery.getParameters().getStorageType())); } }	@java.lang.Override protected void executeQueryCommand() { if ((org.ovirt.engine.core.bll.storage.domain.GetStorageDomainDefaultWipeAfterDeleteQuery.getParameters().getStorageType()) != null) { org.ovirt.engine.core.bll.storage.domain.GetStorageDomainDefaultWipeAfterDeleteQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.utils.WipeAfterDeleteUtils.getDefaultWipeAfterDeleteFlag(org.ovirt.engine.core.bll.storage.domain.GetStorageDomainDefaultWipeAfterDeleteQuery.getParameters().getStorageType())); } }
protected boolean validateNotificationMethod(org.ovirt.engine.core.common.EventNotificationMethod eventNotificationMethod, org.ovirt.engine.core.common.businessentities.EventSubscriber eventSubscriber, org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { boolean retValue = true; org.ovirt.engine.core.common.EventNotificationMethod notificationMethod = eventNotificationMethod; switch (notificationMethod) { case SMTP : java.lang.String mailAddress = (org.apache.commons.lang.StringUtils.isEmpty(eventSubscriber.getMethodAddress())) ? user.getEmail() : eventSubscriber.getMethodAddress(); if (!(org.ovirt.engine.core.bll.EventSubscriptionCommandBase.isEmailValid(mailAddress))) { addValidateMessage(EngineMessage.USER_DOES_NOT_HAVE_A_VALID_EMAIL); retValue = false; } break; default : addValidateMessage(EngineMessage.EN_UNKNOWN_NOTIFICATION_METHOD); retValue = false; break; } return retValue; }	protected boolean validateNotificationMethod(org.ovirt.engine.core.common.EventNotificationMethod eventNotificationMethod, org.ovirt.engine.core.common.businessentities.EventSubscriber eventSubscriber, org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { boolean retValue = true; org.ovirt.engine.core.common.EventNotificationMethod notificationMethod = eventNotificationMethod; switch (notificationMethod) { case SMTP : java.lang.String mailAddress = (org.apache.commons.lang.StringUtils.isEmpty(eventSubscriber.getMethodAddress())) ? user.getEmail() : eventSubscriber.getMethodAddress(); if (!(org.ovirt.engine.core.bll.EventSubscriptionCommandBase.isEmailValid(mailAddress))) { addValidationMessage(EngineMessage.USER_DOES_NOT_HAVE_A_VALID_EMAIL); retValue = false; } break; default : addValidationMessage(EngineMessage.EN_UNKNOWN_NOTIFICATION_METHOD); retValue = false; break; } return retValue; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Remove Provider(s)") java.lang.String removeProviderTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Remove Provider(s)") java.lang.String removeProviderTitle();
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.domains.GetStorageDomainByNameQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.storage.domains.GetStorageDomainByNameQuery.getDbFacade().getStorageDomainStaticDao().getByName(org.ovirt.engine.core.bll.storage.domains.GetStorageDomainByNameQuery.getParameters().getName(), org.ovirt.engine.core.bll.storage.domains.GetStorageDomainByNameQuery.getUserID(), org.ovirt.engine.core.bll.storage.domains.GetStorageDomainByNameQuery.getParameters().isFiltered())); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.domain.GetStorageDomainByNameQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.storage.domain.GetStorageDomainByNameQuery.getDbFacade().getStorageDomainStaticDao().getByName(org.ovirt.engine.core.bll.storage.domain.GetStorageDomainByNameQuery.getParameters().getName(), org.ovirt.engine.core.bll.storage.domain.GetStorageDomainByNameQuery.getUserID(), org.ovirt.engine.core.bll.storage.domain.GetStorageDomainByNameQuery.getParameters().isFiltered())); }
@org.junit.Test public void checkRemoveIscsiConnectionDomainsExist() { parameters.setStorageServerConnection(iSCSIConnection); when(storageServerConnectionDao.get(iSCSIConnection.getid())).thenReturn(iSCSIConnection); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs>(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id("3600144f09dbd05000000517e730b1212"); lun1.setStorageDomainName("storagedomain1"); lun1.setvolume_group_id("G95OWd-Wvck-vftu-pMq9-9SAC-NF3E-ulDPsQ"); luns.add(lun1); when(lunDao.getAllForStorageServerConnection(iSCSIConnection.getid())).thenReturn(luns); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, EngineMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS); }	@org.junit.Test public void checkRemoveIscsiConnectionDomainsExist() { parameters.setStorageServerConnection(iSCSIConnection); when(storageServerConnectionDao.get(iSCSIConnection.getid())).thenReturn(iSCSIConnection); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs>(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id("3600144f09dbd05000000517e730b1212"); lun1.setStorageDomainName("storagedomain1"); lun1.setvolume_group_id("G95OWd-Wvck-vftu-pMq9-9SAC-NF3E-ulDPsQ"); luns.add(lun1); when(lunDao.getAllForStorageServerConnection(iSCSIConnection.getid())).thenReturn(luns); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS); }
@java.lang.Override public void onSuccess(java.lang.Object thisModel, java.lang.Object returnValue) { if (((java.lang.Boolean) (returnValue))) { org.ovirt.engine.ui.uicommonweb.models.vms.EditNextRunConfigurationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.vms.EditNextRunConfigurationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editNextRunConfigurationTitle()); confirmModel.setHelpTag(HelpTag.edit_next_run_configuration); confirmModel.setHashName("edit_next_run_configuration"); confirmModel.setCpuChanged(((selectedItem.getCpuPerSocket()) != (getcurrentVm().getCpuPerSocket()))); confirmModel.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("updateExistingVm", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true)); confirmModel.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()).setIsCancel(true)); } else { updateExistingVm(false); } }	@java.lang.Override public void onSuccess(java.lang.Object thisModel, java.lang.Object returnValue) { if (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).<java.lang.Boolean>getReturnValue()) { org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel(); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editNextRunConfigurationTitle()); confirmModel.setHelpTag(HelpTag.edit_next_run_configuration); confirmModel.setHashName("edit_next_run_configuration"); confirmModel.setCpuPluggable((((selectedItem.getCpuPerSocket()) == (getcurrentVm().getCpuPerSocket())) && ((selectedItem.getNumOfSockets()) != (getcurrentVm().getNumOfSockets())))); confirmModel.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("updateExistingVm", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true)); confirmModel.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()).setIsCancel(true)); setConfirmWindow(confirmModel); } else { updateExistingVm(false); } }
@java.lang.Override public java.lang.Void runInTransaction() { addInterfaceToDb(anInterface); addInterfaceDeviceToDb(); getCompensationContext().stateChanged(); return null; }	@java.lang.Override public java.lang.Void runInTransaction() { addInterfaceToDb(getInterface()); addInterfaceDeviceToDb(); getCompensationContext().stateChanged(); return null; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("note: Permissions containing these operations should be associated with Disk or Storage Domain Object (or above)") java.lang.String notePermissionsContainingOperationsRoleTreeTooltip();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("note: Permissions containing these operations should be associated with Disk or Storage Domain Object (or above)") java.lang.String notePermissionsContainingOperationsRoleTreeTooltip();
@org.junit.Test public void testAddingIDELunExceedsSlotLimit() { org.ovirt.engine.core.common.businessentities.LunDisk disk = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createISCSILunDisk(); disk.setDiskInterface(DiskInterface.IDE); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createParameters(); parameters.setDiskInfo(disk); initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid(), parameters); when(diskLunMapDAO.getDiskIdByLunId(disk.getLun().getLUN_id())).thenReturn(null); org.ovirt.engine.core.common.businessentities.VM vm = mockVm(); mockMaxPciSlots(); fillDiskMap(disk, vm, ((VmCommand.MAX_IDE_SLOTS) - 1)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); vm.getDiskMap().put(org.ovirt.engine.core.compat.Guid.newGuid(), disk); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_EXCEEDED_MAX_IDE_SLOTS); }	@org.junit.Test public void testAddingIDELunExceedsSlotLimit() { mockInterfaceList(); org.ovirt.engine.core.common.businessentities.LunDisk disk = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createISCSILunDisk(); disk.setDiskInterface(DiskInterface.IDE); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createParameters(); parameters.setDiskInfo(disk); initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid(), parameters); when(diskLunMapDAO.getDiskIdByLunId(disk.getLun().getLUN_id())).thenReturn(null); org.ovirt.engine.core.common.businessentities.VM vm = mockVm(); mockMaxPciSlots(); fillDiskMap(disk, vm, ((VmCommand.MAX_IDE_SLOTS) - 1)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); vm.getDiskMap().put(org.ovirt.engine.core.compat.Guid.newGuid(), disk); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_EXCEEDED_MAX_IDE_SLOTS); }
@org.junit.Test public void gatewayChanged() { org.ovirt.engine.core.common.businessentities.network.Network net = createNetwork("net"); mockExistingNetworks(net); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNicSyncedWithNetwork("nic0", net); nic.setBootProtocol(NetworkBootProtocol.STATIC_IP); nic.setGateway(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); mockExistingIfaces(nic); nic.setGateway(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); org.ovirt.engine.core.common.businessentities.VDS vds = mock(org.ovirt.engine.core.common.businessentities.VDS.class); when(vds.getId()).thenReturn(Guid.Empty); when(vds.getVdsGroupCompatibilityVersion()).thenReturn(Version.v3_3); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(nic), vds); validateAndAssertNetworkModified(helper, net); }	@org.junit.Test public void gatewayChanged() { org.ovirt.engine.core.common.businessentities.network.Network net = createNetwork("otherThenMgmtNetwork"); mockExistingNetworks(net); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNicSyncedWithNetwork("nic0", net); nic.setBootProtocol(NetworkBootProtocol.STATIC_IP); nic.setGateway(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); mockExistingIfaces(nic); nic.setGateway(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); org.ovirt.engine.core.common.businessentities.VDS vds = mock(org.ovirt.engine.core.common.businessentities.VDS.class); when(vds.getId()).thenReturn(Guid.Empty); when(vds.getVdsGroupCompatibilityVersion()).thenReturn(Version.v3_3); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(nic), vds); validateAndAssertNetworkModified(helper, net); }
@java.lang.Override public void onSuccess(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase> operation, final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Frontend: sucessfully executed RunAction, determining result!"); handleActionResult(actionType, parameters, result, (callback != null ? callback : org.ovirt.engine.ui.frontend.Frontend.NULLABLE_ASYNC_CALLBACK), state, showErrorDialog); }	@java.lang.Override public void onSuccess(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase> operation, final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Frontend: sucessfully executed runAction, determining result!"); handleActionResult(actionType, parameters, result, (callback != null ? callback : org.ovirt.engine.ui.frontend.Frontend.NULLABLE_ASYNC_CALLBACK), state, showErrorDialog); }
private org.ovirt.engine.core.bll.ValidationResult notDefaultNetwork(org.ovirt.engine.core.common.businessentities.Network oldNetwork) { java.lang.String defaultNetwork = org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.ManagementNetwork); return (oldNetwork.getname().equals(defaultNetwork)) && (!(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetworkName().equals(defaultNetwork))) ? new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.NETWORK_CAN_NOT_REMOVE_DEFAULT_NETWORK) : org.ovirt.engine.core.bll.ValidationResult.VALID; }	private org.ovirt.engine.core.bll.ValidationResult notChangingManagementNetworkName(org.ovirt.engine.core.common.businessentities.network.Network oldNetwork) { java.lang.String managementNetwork = org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.ManagementNetwork); return (oldNetwork.getName().equals(managementNetwork)) && (!(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetworkName().equals(managementNetwork))) ? new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.NETWORK_CAN_NOT_REMOVE_DEFAULT_NETWORK) : org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable { if ((executedRunnables.contains(toReturn)) || ((executedRunnables.size()) < countToExecuteOnFirstRun)) { threadPool.execute(toReturn); executedRunnables.add(toReturn); } else { executedRunnables.add(toReturn); throw new java.util.concurrent.RejectedExecutionException(); } return null; }	@java.lang.Override public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable { if ((executedRunnables.size()) < countToExecute) { threadPool.execute(toReturn); executedRunnables.add(toReturn); } else { throw new java.util.concurrent.RejectedExecutionException(); } return null; }
private static void addConsoleDevice(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.NewGuid(), vmId), VmDeviceGeneralType.CONSOLE, VmDeviceType.CONSOLE, new java.util.HashMap<java.lang.String, java.lang.Object>(), true, false, null); }	private static void addConsoleDevice(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vmId), VmDeviceGeneralType.CONSOLE, VmDeviceType.CONSOLE, new java.util.HashMap<java.lang.String, java.lang.Object>(), true, false, null); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Remove Host(s)") java.lang.String removeHostsTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Remove Host(s)") java.lang.String removeHostsTitle();
private static org.ovirt.engine.api.model.IpAddressAssignment mapIpv6AddressAssignment(org.ovirt.engine.core.common.businessentities.network.IpV6Address ipV6Address) { org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment = new org.ovirt.engine.api.model.IpAddressAssignment(); org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); ip.setVersion(IpVersion.V6.value()); if ((ipV6Address.getAddress()) != null) { ip.setAddress(ipV6Address.getAddress()); } if ((ipV6Address.getGateway()) != null) { ip.setGateway(ipV6Address.getGateway()); } if ((ipV6Address.getPrefix()) != null) { ip.setNetmask(ipV6Address.getPrefix().toString()); } ipAddressAssignment.setIp(ip); org.ovirt.engine.api.model.BootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(ipV6Address.getBootProtocol(), null); ipAddressAssignment.setAssignmentMethod((assignmentMethod == null ? null : assignmentMethod.value())); return ipAddressAssignment; }	static org.ovirt.engine.api.model.IpAddressAssignment mapIpv6AddressAssignment(org.ovirt.engine.core.common.businessentities.network.IpV6Address ipV6Address) { org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment = new org.ovirt.engine.api.model.IpAddressAssignment(); org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); ip.setVersion(IpVersion.V6); if ((ipV6Address.getAddress()) != null) { ip.setAddress(ipV6Address.getAddress()); } if ((ipV6Address.getGateway()) != null) { ip.setGateway(ipV6Address.getGateway()); } if ((ipV6Address.getPrefix()) != null) { ip.setNetmask(ipV6Address.getPrefix().toString()); } ipAddressAssignment.setIp(ip); org.ovirt.engine.api.model.BootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(ipV6Address.getBootProtocol(), null); ipAddressAssignment.setAssignmentMethod((assignmentMethod == null ? null : assignmentMethod)); return ipAddressAssignment; }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessages.VAR__TYPE__VM); addCanDoActionMessage(EngineMessages.VAR__ACTION__HIBERNATE); }	@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__TYPE__VM); addCanDoActionMessage(EngineMessage.VAR__ACTION__HIBERNATE); }
public boolean validate() { leftBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.AnyMacAddressValidation() }); rightBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.AnyMacAddressValidation() }); if ((leftBound.getIsValid()) && (rightBound.getIsValid())) { rightBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.MacRangeValidation(leftBound.getEntity()) }); } setIsValid(((leftBound.getIsValid()) && (rightBound.getIsValid()))); return getIsValid(); }	public boolean validate() { leftBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.MacAddressValidation() }); rightBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.MacAddressValidation() }); if ((leftBound.getIsValid()) && (rightBound.getIsValid())) { rightBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.MacRangeValidation(leftBound.getEntity()) }); } setIsValid(((leftBound.getIsValid()) && (rightBound.getIsValid()))); return getIsValid(); }
@java.lang.Override protected org.ovirt.engine.api.model.Disk deprecatedPopulate(org.ovirt.engine.api.model.Disk model, org.ovirt.engine.core.common.businessentities.Disk entity) { org.ovirt.engine.api.common.util.Details details = org.ovirt.engine.api.common.util.DetailsHelper.getDetails(httpHeaders, uriInfo); if (details.isIncluded("statistics")) { addStatistics(model, entity); } return model; }	@java.lang.Override protected org.ovirt.engine.api.model.Disk deprecatedPopulate(org.ovirt.engine.api.model.Disk model, org.ovirt.engine.core.common.businessentities.Disk entity) { java.util.Set<java.lang.String> details = org.ovirt.engine.api.common.util.DetailHelper.getDetails(httpHeaders, uriInfo); if (details.contains("statistics")) { addStatistics(model, entity); } return model; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Allow to delete Disk") java.lang.String allowToDeleteDiskRoleTreeTooltip();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to delete Disk") java.lang.String allowToDeleteDiskRoleTreeTooltip();
private void updateImportedVmDevice(org.ovirt.engine.core.common.businessentities.VmBase vmBase, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.compat.Guid deviceId, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate) { org.ovirt.engine.core.common.businessentities.VmDevice exportedDevice = vmBase.getManagedDeviceMap().get(deviceId); if (exportedDevice != null) { vmDevice.setAddress(exportedDevice.getAddress()); vmDevice.setIsPlugged(exportedDevice.getIsPlugged()); vmDevice.setIsReadOnly(exportedDevice.getIsReadOnly()); vmDevicesToUpdate.add(vmDevice); } }	private void updateImportedVmDevice(org.ovirt.engine.core.common.businessentities.VmBase vmBase, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.compat.Guid deviceId, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate) { org.ovirt.engine.core.common.businessentities.VmDevice exportedDevice = vmBase.getManagedDeviceMap().get(deviceId); if (exportedDevice != null) { vmDevice.setAddress(exportedDevice.getAddress()); vmDevice.setPlugged(exportedDevice.isPlugged()); vmDevice.setReadOnly(exportedDevice.getReadOnly()); vmDevicesToUpdate.add(vmDevice); } }
public static boolean isCpuSupported(int osId, org.ovirt.engine.core.compat.Version version, java.lang.String cpuName, java.util.ArrayList<java.lang.String> canDoActionMessages) { if (org.ovirt.engine.core.bll.VmHandler.osRepository.isCpuSupported(osId, version, org.ovirt.engine.core.bll.CpuFlagsManagerHandler.getCpuId(cpuName, version))) { return true; } java.lang.String unsupportedCpus = org.ovirt.engine.core.bll.VmHandler.osRepository.getUnsupportedCpus(osId, version).toString(); canDoActionMessages.add(EngineMessages.CPU_TYPE_UNSUPPORTED_FOR_THE_GUEST_OS.name()); canDoActionMessages.add(("$unsupportedCpus " + (org.apache.commons.lang.StringUtils.strip(unsupportedCpus.toString(), "[]")))); return false; }	public static boolean isCpuSupported(int osId, org.ovirt.engine.core.compat.Version version, java.lang.String cpuName, java.util.ArrayList<java.lang.String> canDoActionMessages) { if (org.ovirt.engine.core.bll.VmHandler.osRepository.isCpuSupported(osId, version, org.ovirt.engine.core.bll.CpuFlagsManagerHandler.getCpuId(cpuName, version))) { return true; } java.lang.String unsupportedCpus = org.ovirt.engine.core.bll.VmHandler.osRepository.getUnsupportedCpus(osId, version).toString(); canDoActionMessages.add(EngineMessage.CPU_TYPE_UNSUPPORTED_FOR_THE_GUEST_OS.name()); canDoActionMessages.add(("$unsupportedCpus " + (org.apache.commons.lang.StringUtils.strip(unsupportedCpus.toString(), "[]")))); return false; }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Mac pool does not exist.") java.lang.String MAC_POOL_DOES_NOT_EXIST();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Default ${type} cannot be removed.") java.lang.String ACTION_TYPE_FAILED_CANNOT_REMOVE_DEFAULT_MAC_POOL();
@com.google.gwt.i18n.client.Messages.DefaultMessage("The Network will be added to the Data Center {0} as well.") java.lang.String theNetworkWillBeAddedToTheDataCenterAsWell(java.lang.String dcName);	@org.ovirt.engine.ui.webadmin.DefaultMessage("The Network will be added to the Data Center {0} as well.") java.lang.String theNetworkWillBeAddedToTheDataCenterAsWell(java.lang.String dcName);
public void addMenuItem(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { final com.google.gwt.user.client.ui.MenuItem menuItem = new com.google.gwt.user.client.ui.MenuItem(buttonDef.getText(), ((com.google.gwt.user.client.Command) (() -> { menuPanelPopup.asPopupPanel().hide(); buttonDef.onClick(null); }))); menuItem.setEnabled(buttonDef.isEnabled(null)); buttonDef.addInitializeHandler(( event) -> menuItem.setEnabled(buttonDef.isEnabled(null))); menuPanelPopup.getMenuBar().addItem(menuItem); }	public void addMenuItem(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { final com.google.gwt.user.client.ui.MenuItem menuItem = new com.google.gwt.user.client.ui.MenuItem(buttonDef.getText(), () -> { menuPanelPopup.asPopupPanel().hide(); buttonDef.onClick(null); }); menuItem.setEnabled(buttonDef.isEnabled(null)); buttonDef.addInitializeHandler(( event) -> menuItem.setEnabled(buttonDef.isEnabled(null))); menuPanelPopup.getMenuBar().addItem(menuItem); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.Application model, org.ovirt.engine.api.model.Application transform) { assertNotNull(transform); assertNotNull(transform.getId()); assertNotNull(transform.getAppName()); assertEquals(model.getAppName(), transform.getAppName()); }	@java.lang.Override protected void verify(org.ovirt.engine.api.model.Application model, org.ovirt.engine.api.model.Application transform) { assertNotNull(transform); assertNotNull(transform.getId()); assertNotNull(transform.getName()); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); }
public void subscribe(org.ovirt.vdsm.jsonrpc.client.events.EventSubscriber subscriber) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.getWorker().getPublisher().subscribe(subscriber); }	public void subscribe(org.ovirt.vdsm.jsonrpc.client.events.EventSubscriber subscriber) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.getWorker(this.parallelism).getPublisher().subscribe(subscriber); }
@java.lang.Override protected void endSuccessfully() { super.endSuccessfully(); }	@java.lang.Override protected void endSuccessfully() { org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.setSucceeded(true); }
@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); addCanDoActionMessage(EngineMessages.VAR__ACTION__RESTART); addCanDoActionMessage(EngineMessages.VAR__TYPE__VM); }	@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); addCanDoActionMessage(EngineMessage.VAR__ACTION__RESTART); addCanDoActionMessage(EngineMessage.VAR__TYPE__VM); }
private void addAuditLogOnRemoveFailue() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("DiskAlias", org.ovirt.engine.core.bll.MoveImageGroupCommand.getDiskImage().getDiskAlias()); logable.addCustomValue("StorageDomainName", org.ovirt.engine.core.bll.MoveImageGroupCommand.getStorageDomain().getStorageName()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.MOVE_IMAGE_GROUP_FAILED_TO_DELETE_SRC_IMAGE); }	private void addAuditLogOnRemoveFailue() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("DiskAlias", org.ovirt.engine.core.bll.MoveImageGroupCommand.getDiskImage().getDiskAlias()); logable.addCustomValue("StorageDomainName", org.ovirt.engine.core.bll.MoveImageGroupCommand.getStorageDomain().getStorageName()); logable.addCustomValue("UserName", org.ovirt.engine.core.bll.MoveImageGroupCommand.getUserName()); org.ovirt.engine.core.common.AuditLogType logType = null; if ((org.ovirt.engine.core.bll.MoveImageGroupCommand.getActionState()) == (CommandActionState.END_SUCCESS)) { logType = org.ovirt.engine.core.common.AuditLogType.USER_MOVE_IMAGE_GROUP_FAILED_TO_DELETE_SRC_IMAGE; } else { logType = org.ovirt.engine.core.common.AuditLogType.USER_MOVE_IMAGE_GROUP_FAILED_TO_DELETE_DST_IMAGE; } org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, logType); }
private org.ovirt.engine.core.bll.job.ExecutionContext createRunVmContext(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.bll.job.ExecutionContext ctx = new org.ovirt.engine.core.bll.job.ExecutionContext(); try { java.util.Map<java.lang.String, java.lang.String> values = getVmValuesForMsgResolving(); org.ovirt.engine.core.common.job.Step step = org.ovirt.engine.core.bll.job.ExecutionHandler.addSubStep(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getExecutionContext(), org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getExecutionContext().getJob().getStep(StepEnum.EXECUTING), StepEnum.TAKING_VM_FROM_POOL, org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveStepMessage(StepEnum.TAKING_VM_FROM_POOL, values)); ctx.setStep(step); ctx.setMonitored(true); ctx.setShouldEndJob(true); } catch (java.lang.RuntimeException e) { log.errorFormat("Error when creating executing context for running stateless VM. Error is: {0} ", e.getMessage()); log.debug("", e); } return ctx; }	private org.ovirt.engine.core.bll.job.ExecutionContext createRunVmContext(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.bll.job.ExecutionContext ctx = new org.ovirt.engine.core.bll.job.ExecutionContext(); try { org.ovirt.engine.core.common.job.Step step = org.ovirt.engine.core.bll.job.ExecutionHandler.addSubStep(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getExecutionContext(), org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getExecutionContext().getJob().getStep(StepEnum.EXECUTING), StepEnum.TAKING_VM_FROM_POOL, org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveStepMessage(StepEnum.TAKING_VM_FROM_POOL, java.util.Collections.singletonMap(VdcObjectType.VM.name().toLowerCase(), org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmName()))); ctx.setStep(step); ctx.setMonitored(true); ctx.setShouldEndJob(true); } catch (java.lang.RuntimeException e) { log.errorFormat("Error when creating executing context for running stateless VM. Error is: {0} ", e.getMessage()); log.debug("", e); } return ctx; }
private void setupMock() { expected = getExpectedHooksList(); emptyList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity>(); doReturn(org.ovirt.engine.core.bll.gluster.GetGlusterHooksQueryTest.CLUSTER_ID).when(getQueryParameters()).getClusterId(); glusterHookDaoMock = mock(org.ovirt.engine.core.dao.gluster.GlusterHookDao.class); doReturn(glusterHookDaoMock).when(getQuery()).getGlusterHookDao(); doReturn(org.ovirt.engine.core.bll.gluster.GetGlusterHooksQueryTest.UPSERVER_ID).when(getQuery()).getUpServerId(org.ovirt.engine.core.bll.gluster.GetGlusterHooksQueryTest.CLUSTER_ID); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); returnValue.setSucceeded(true); returnValue.setReturnValue(expected); doReturn(returnValue).when(getQuery()).runVdsCommand(eq(VDSCommandType.GetGlusterHooks), any(org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class)); }	private void setupMock() { expected = getExpectedHooksList(); emptyList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity>(); doReturn(org.ovirt.engine.core.bll.gluster.GetGlusterHooksQueryTest.CLUSTER_ID).when(getQueryParameters()).getClusterId(); glusterHookDaoMock = mock(org.ovirt.engine.core.dao.gluster.GlusterHooksDao.class); doReturn(glusterHookDaoMock).when(getQuery()).getGlusterHookDao(); }
org.ovirt.engine.core.common.businessentities.VmOsType getOs();	int getOsId();
private void setFallbackProtocol(org.ovirt.engine.core.common.businessentities.VdsProtocol protocol) { final org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = this.vds.getStaticData(); vdsStatic.setProtocol(protocol); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsStaticDao().update(vdsStatic); return null; } }); }	private void setFallbackProtocol(org.ovirt.engine.core.common.businessentities.VdsProtocol protocol) { final org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = this.vds.getStaticData(); vdsStatic.setProtocol(protocol); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { vdsStaticDao.update(vdsStatic); return null; } }); }
@org.junit.Test public void addPosixNonEmptyVFSType() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "cifs", "timeo=30"); parameters.setStorageServerConnection(newPosixConnection); parameters.setVdsId(Guid.Empty); doReturn(false).when(command).isConnWithSameDetailsExists(newPosixConnection, null); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); }	@org.junit.Test public void addPosixNonEmptyVFSType() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30"); parameters.setStorageServerConnection(newPosixConnection); parameters.setVdsId(Guid.Empty); doReturn(false).when(command).isConnWithSameDetailsExists(newPosixConnection, null); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); }
private static void switchTab(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> mapping, org.ovirt.engine.ui.common.view.TabbedView view) { int lowestIndex = java.lang.Integer.MAX_VALUE; java.util.List<org.gwtbootstrap3.client.ui.TabListItem> allTabs = view.getTabPanel().getTabs(); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if ((allTabs.indexOf(mapping.get(invalidTabName))) < lowestIndex) { lowestIndex = allTabs.indexOf(mapping.get(invalidTabName)); } } if (lowestIndex != (java.lang.Integer.MAX_VALUE)) { view.getTabPanel().switchTab(allTabs.get(lowestIndex)); } }	private static void switchTab(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem> mapping, org.ovirt.engine.ui.common.view.TabbedView view) { int lowestIndex = java.lang.Integer.MAX_VALUE; java.util.List<org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem> allTabs = view.getTabPanel().getTabs(); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if ((allTabs.indexOf(mapping.get(invalidTabName))) < lowestIndex) { lowestIndex = allTabs.indexOf(mapping.get(invalidTabName)); } } if (lowestIndex != (java.lang.Integer.MAX_VALUE)) { view.getTabPanel().switchTab(allTabs.get(lowestIndex)); } }
public void commit(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface dstIface) { for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : srcIfaces) { iface.getLabels().clear(); } flush(); dstIface.setLabels(flushedLabels); }	public void commit(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface dstIface) { for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : srcIfaces) { iface.setLabels(null); } flush(); dstIface.setLabels((flushedLabels.isEmpty() ? null : flushedLabels)); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessages.VAR__ACTION__STOP_PROFILE); addCanDoActionMessage(EngineMessages.VAR__TYPE__GLUSTER_VOLUME); }	@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__STOP_PROFILE); addCanDoActionMessage(EngineMessage.VAR__TYPE__GLUSTER_VOLUME); }
public java.util.Map<java.lang.String, java.lang.Object> glusterGetDeviceInfo();	public java.util.Map<java.lang.String, java.lang.Object> glusterSnapshotInfo(java.lang.String snapshotName, java.lang.String volumeName);
private boolean removeVm() { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.RemoveVmCommand.getVm(); hasImages = (vm.getDiskList().size()) > 0; if ((org.ovirt.engine.core.bll.RemoveVmCommand.getParameters().isRemoveDisks()) && (hasImages)) { if (!(removeVmImages(null))) { prepareAuditLogMessageForDisksLeftInVm(); } } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { removeVmFromDb(); return null; } }); return true; }	private boolean removeVm() { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.RemoveVmCommand.getVm(); hasImages = (vm.getDiskList().size()) > 0; if ((org.ovirt.engine.core.bll.RemoveVmCommand.getParameters().isRemoveDisks()) && (hasImages)) { if (!(removeVmImages(null))) { return false; } processUnremovedDisks(false); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { removeVmFromDb(); return null; } }); return true; }
protected boolean isValidExportDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain domain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().getForStoragePool(org.ovirt.engine.core.bll.storage.GetAllFromExportDomainQuery.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.GetAllFromExportDomainQuery.getParameters().getStoragePoolId()); return (domain != null) && ((domain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport)); }	private boolean isValidExportDomain(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { return (storage != null) && ((storage.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport)); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessages.VAR__ACTION__REMOVE); addCanDoActionMessage(EngineMessages.VAR__TYPE__DISK__SNAPSHOT); }	@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__REMOVE); addCanDoActionMessage(EngineMessage.VAR__TYPE__DISK__SNAPSHOT); }
private int calculateSiblingWidth() { int width = 0; com.google.gwt.user.client.ui.Widget parent = actionPanel.getParent(); if ((parent != null) && (parent instanceof com.google.gwt.user.client.ui.HasWidgets)) { java.util.Iterator<com.google.gwt.user.client.ui.Widget> widgetIterator = ((com.google.gwt.user.client.ui.HasWidgets) (parent)).iterator(); while (widgetIterator.hasNext()) { com.google.gwt.user.client.ui.Widget widget = widgetIterator.next(); if (widget != (actionPanel)) { width += widget.getOffsetWidth(); } } } return width; }	private int calculateSiblingWidth() { int width = 0; com.google.gwt.user.client.ui.Widget parent = actionPanel.getParent(); if (parent instanceof com.google.gwt.user.client.ui.HasWidgets) { java.util.Iterator<com.google.gwt.user.client.ui.Widget> widgetIterator = ((com.google.gwt.user.client.ui.HasWidgets) (parent)).iterator(); while (widgetIterator.hasNext()) { com.google.gwt.user.client.ui.Widget widget = widgetIterator.next(); if (widget != (actionPanel)) { width += widget.getOffsetWidth(); } } } return width; }
public org.ovirt.engine.core.bll.ValidationResult notChangingDataCenterId(org.ovirt.engine.core.compat.Guid dataCenterId) { final org.ovirt.engine.core.compat.Guid oldDataCenterId = network.getDataCenterId(); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessages.ACTION_TYPE_FAILED_DATA_CENTER_ID_CANNOT_BE_CHANGED).when((!(oldDataCenterId.equals(dataCenterId)))); }	public org.ovirt.engine.core.bll.ValidationResult notChangingDataCenterId(org.ovirt.engine.core.compat.Guid dataCenterId) { final org.ovirt.engine.core.compat.Guid oldDataCenterId = network.getDataCenterId(); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_DATA_CENTER_ID_CANNOT_BE_CHANGED).when((!(oldDataCenterId.equals(dataCenterId)))); }
private double calcTimeoutToFence(java.lang.Integer vmCount, org.ovirt.engine.core.common.businessentities.VdsSpmStatus spmStatus) { java.lang.Integer spmIndicator = 0; if (spmStatus == (org.ovirt.engine.core.common.businessentities.VdsSpmStatus.SPM)) { spmIndicator = 1; } return java.util.concurrent.TimeUnit.SECONDS.toMillis((((org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.TimeoutToResetVdsInSeconds)) + ((org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.DelayResetPerStatusInSeconds)) * spmIndicator)) + ((org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.DelayResetPerVmInSeconds)) * vmCount))); }	private long calcTimeoutToFence(int vmCount, org.ovirt.engine.core.common.businessentities.VdsSpmStatus spmStatus) { int spmIndicator = 0; if (spmStatus != (org.ovirt.engine.core.common.businessentities.VdsSpmStatus.None)) { spmIndicator = 1; } return java.util.concurrent.TimeUnit.SECONDS.toMillis(((int) (((org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.TimeoutToResetVdsInSeconds)) + ((org.ovirt.engine.core.common.config.Config.<java.lang.Double>GetValue(ConfigValues.DelayResetForSpmInSeconds)) * spmIndicator)) + ((org.ovirt.engine.core.common.config.Config.<java.lang.Double>GetValue(ConfigValues.DelayResetPerVmInSeconds)) * vmCount)))); }
private void updateInstanceImages() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmDiskList(new org.ovirt.engine.ui.frontend.AsyncQuery(getModel(), new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel> imageLineModels = new java.util.ArrayList<>(); boolean isChangeable = ((vm) == null) || (org.ovirt.engine.core.common.validation.VmActionValidator.isCommandAllowed(vm.getOrigin(), VdcActionType.UpdateVmDisk)); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue))) { org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel lineModel = new org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel(getModel().getInstanceImages()); lineModel.initialize(disk, getVm()); lineModel.setEnabled(isChangeable); imageLineModels.add(lineModel); } getModel().getInstanceImages().setIsChangeable(isChangeable); getModel().getInstanceImages().setItems(imageLineModels); getModel().getInstanceImages().setVm(getVm()); } }), getVm().getId()); }	private void updateInstanceImages() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmDiskList(new org.ovirt.engine.ui.frontend.AsyncQuery(getModel(), new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel> imageLineModels = new java.util.ArrayList<>(); boolean isChangeable = ((vm) == null) || (org.ovirt.engine.core.common.validation.VmActionByVmOriginTypeValidator.isCommandAllowed(vm, VdcActionType.UpdateVmDisk)); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue))) { org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel lineModel = new org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel(getModel().getInstanceImages()); lineModel.initialize(disk, getVm()); lineModel.setEnabled(isChangeable); imageLineModels.add(lineModel); } getModel().getInstanceImages().setIsChangeable(isChangeable); getModel().getInstanceImages().setItems(imageLineModels); getModel().getInstanceImages().setVm(getVm()); } }), getVm().getId()); }
@java.lang.Override protected boolean validate() { if ((org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm()) == null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN); } if ((!(org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm().isUseLatestVersion())) && ((org.ovirt.engine.core.bll.UpdateVmVersionCommand.getParameters().getNewTemplateVersion()) == null)) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_SET_FOR_LATEST); } if ((org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVmTemplate()) == null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST); } if (org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVmTemplateId().equals(org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm().getVmtGuid())) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_VM_ALREADY_IN_LATEST_VERSION); } org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm().setVmtGuid(org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVmTemplate().getId()); return true; }	@java.lang.Override protected boolean validate() { if ((org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN); } if ((!(org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm().isUseLatestVersion())) && ((org.ovirt.engine.core.bll.UpdateVmVersionCommand.getParameters().getNewTemplateVersion()) == null)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_SET_FOR_LATEST); } if ((org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVmTemplate()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST); } if (org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVmTemplateId().equals(org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm().getVmtGuid())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_ALREADY_IN_LATEST_VERSION); } org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm().setVmtGuid(org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVmTemplate().getId()); return true; }
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getView().getAboutLink().addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { com.gwtplatform.mvp.client.proxy.RevealRootPopupContentEvent.fire(org.ovirt.engine.ui.userportal.section.main.presenter.HeaderPresenterWidget.this, aboutPopup); } })); registerHandler(getView().getOptionsLink().addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalBasicListModel model = basicListProvider.getModel(); model.executeCommand(model.getEditCommand()); } })); }	@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getView().getAboutLink().addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { com.gwtplatform.mvp.client.proxy.RevealRootPopupContentEvent.fire(org.ovirt.engine.ui.userportal.section.main.presenter.HeaderPresenterWidget.this, aboutPopup); } })); registerHandler(getView().getOptionsLink().addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { org.ovirt.engine.ui.uicommonweb.models.OptionsModel model = optionsProvider.getModel(); model.executeCommand(model.getEditCommand()); } })); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Number of bricks should be equal to Replica Count") java.lang.String replicateVolumeAddBricksMsg();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Number of bricks should be equal to Replica Count") java.lang.String replicateVolumeAddBricksMsg();
private boolean isTextNotEmpty(java.lang.String text) { return !("".equals(text)); }	public void applyTo(final com.google.gwt.user.client.ui.Widget tooltipSource) { tooltipSource.addAttachHandler(new com.google.gwt.event.logical.shared.AttachEvent.Handler() { @java.lang.Override public void onAttachOrDetach(com.google.gwt.event.logical.shared.AttachEvent event) { if (event.isAttached()) { registerPreviewHandler(tooltipSource); } else { removeHandlerRegistration(); } } }); }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createVdsInterface(org.ovirt.engine.core.compat.Guid id, java.lang.String name, java.lang.Boolean bonded, java.lang.String bondName, java.lang.Integer vlanId, java.lang.String networkName, boolean bridged, java.lang.String address, boolean qosOverridden) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); iface.setId(id); iface.setName(name); iface.setBonded(bonded); iface.setBondName(bondName); iface.setVlanId(vlanId); iface.setNetworkName(networkName); iface.setBridged(bridged); iface.setAddress(address); iface.setQosOverridden(qosOverridden); return iface; }	private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createVdsInterface(org.ovirt.engine.core.compat.Guid id, java.lang.String name, java.lang.Boolean bonded, java.lang.String bondName, java.lang.Integer vlanId, java.lang.String networkName, boolean bridged, java.lang.String address, boolean qosOverridden, java.util.Set<java.lang.String> labels) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); iface.setId(id); iface.setName(name); iface.setBonded(bonded); iface.setBondName(bondName); iface.setVlanId(vlanId); iface.setNetworkName(networkName); iface.setBridged(bridged); iface.setAddress(address); iface.setQosOverridden(qosOverridden); iface.setLabels(labels); return iface; }
public org.ovirt.engine.core.bll.tasks.SPMAsyncTask concreteCreateTask(org.ovirt.engine.core.compat.Guid userId, org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters p = new org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters(asyncTaskCreationInfo, getAsyncTask(userId, taskId, command, asyncTaskCreationInfo, parentCommand)); p.setEntityInfo(command.getParameters().getEntityInfo()); return createTask(internalGetTaskType(command), p); }	public org.ovirt.engine.core.bll.tasks.SPMAsyncTask concreteCreateTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters p = new org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters(asyncTaskCreationInfo, getAsyncTask(taskId, command, asyncTaskCreationInfo, parentCommand)); p.setEntityInfo(command.getParameters().getEntityInfo()); return createTask(internalGetTaskType(command), p); }
@java.lang.Override protected boolean validate() { if (((org.ovirt.engine.core.bll.network.host.RemoveFenceAgentsByVdsIdCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.network.host.RemoveFenceAgentsByVdsIdCommand.getParameters().getVdsId()) == null)) { return failValidate(EngineMessage.VDS_REMOVE_FENCE_AGENTS_VDS_ID_REQUIRED); } return super.validate(); }	@java.lang.Override protected boolean validate() { if (((org.ovirt.engine.core.bll.network.host.RemoveFenceAgentsByVdsIdCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.network.host.RemoveFenceAgentsByVdsIdCommand.getParameters().getVdsId()) == null)) { return failValidation(EngineMessage.VDS_REMOVE_FENCE_AGENTS_VDS_ID_REQUIRED); } return super.validate(); }
public boolean isUpdated() { return updated; }	public java.util.Date getLastUpdated() { return lastUpdated; }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command.equals(getAddBricksCommand())) { checkUpServerAndAddBricks(); } else if (command.getName().equals("OnAddBricks")) { onAddBricks(); } else if (command.getName().equals("OnAddBricksInternal")) { onAddBricksInternal(); } else if (command.getName().equals("CancelConfirmation")) { cancelConfirmation(); } else if (command.equals(getRemoveBricksCommand())) { removeBricks(); } else if (command.getName().equals("OnRemove")) { onRemoveBricks(); } else if (command.equals(getStopRemoveBricksCommand())) { stopRemoveBricks(); } else if (command.getName().equals("OnStopRemoveBricks")) { onStopRemoveBricks(); } else if (command.equals(getCommitRemoveBricksCommand())) { commitRemoveBricks(); } else if (command.getName().equals("OnCommitRemoveBricks")) { onCommitRemoveBricks(); } else if (command.equals(getStatusRemoveBricksCommand())) { showRemoveBricksStatus(); } else if (command.equals(getReplaceBrickCommand())) { replaceBrick(); } else if (command.getName().equals("OnReplace")) { onReplaceBrick(); } else if (command.equals(getBrickAdvancedDetailsCommand())) { showBrickAdvancedDetails(); } else if (command.getName().equals("Cancel")) { setWindow(null); } else if (command.getName().equals("CancelConfirmation")) { setConfirmWindow(null); } }	@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command.equals(getAddBricksCommand())) { checkUpServerAndAddBricks(); } else if (command.getName().equals("OnAddBricks")) { onAddBricks(); } else if (command.getName().equals("OnAddBricksInternal")) { onAddBricksInternal(); } else if (command.getName().equals("CancelConfirmation")) { cancelConfirmation(); } else if (command.equals(getRemoveBricksCommand())) { removeBricks(); } else if (command.getName().equals("OnRemove")) { onRemoveBricks(); } else if (command.equals(getStopRemoveBricksCommand())) { stopRemoveBricks(); } else if (command.getName().equals("OnStopRemoveBricks")) { onStopRemoveBricks(); } else if (command.equals(getCommitRemoveBricksCommand())) { commitRemoveBricks(); } else if (command.getName().equals("OnCommitRemoveBricks")) { onCommitRemoveBricks(); } else if (command.equals(getStatusRemoveBricksCommand())) { showRemoveBricksStatus(); } else if (command.getName().equals("StopRemoveBricksOnStatus")) { getStopRemoveBricksCommand().execute(); } else if (command.getName().equals("CommitRemoveBricksOnStatus")) { getCommitRemoveBricksCommand().execute(); } else if (command.getName().equals("CancelRemoveBricksStatus")) { cancelRemoveBrickStatus(); } else if (command.equals(getReplaceBrickCommand())) { replaceBrick(); } else if (command.getName().equals("OnReplace")) { onReplaceBrick(); } else if (command.equals(getBrickAdvancedDetailsCommand())) { showBrickAdvancedDetails(); } else if (command.getName().equals("Cancel")) { setWindow(null); } else if (command.getName().equals("CancelConfirmation")) { setConfirmWindow(null); } }
@java.lang.Override public void setUp() { super.setUp(); generateStorageToDisksMap(); initDestSDs(); mcr.mockConfigValue(ConfigValues.MaxIoThreadsPerVm, 127); mcr.mockConfigValue(ConfigValues.MaxVmNameLength, 64); mcr.mockConfigValue(ConfigValues.SupportedClusterLevels, new java.util.HashSet(java.util.Arrays.asList(new org.ovirt.engine.core.compat.Version(2, 2), new org.ovirt.engine.core.compat.Version(3, 0)))); mcr.mockConfigValue(ConfigValues.ValidNumOfMonitors, java.util.Arrays.asList("1", "2", "4")); }	@java.lang.Override public void setUp() { super.setUp(); generateStorageToDisksMap(); initDestSDs(); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Can not ${action} ${type}. The given name contains special characters. Only lower-case and upper-case letters, numbers, '_', '-', '.' allowed.") java.lang.String ACTION_TYPE_FAILED_NAME_MAY_NOT_CONTAIN_SPECIAL_CHARS();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Can not ${action} ${type}. The given name contains special characters. Only lower-case and upper-case letters, numbers, '_', '-', '.' are allowed.") java.lang.String ACTION_TYPE_FAILED_NAME_MAY_NOT_CONTAIN_SPECIAL_CHARS();
private void updateHaMaintenanceAvailability(java.util.List items) { if ((items == null) || ((items.size()) != 1)) { setHaMaintenanceAvailability(false); return; } org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem(); if (((vm == null) || (!(vm.isHostedEngine()))) || ((vm.getEffectiveCompatibilityVersion().compareTo(Version.v3_4)) < 0)) { setHaMaintenanceAvailability(false); } else { setHaMaintenanceAvailability(true); } }	private void updateHaMaintenanceAvailability(java.util.List items) { if ((items == null) || ((items.size()) != 1)) { setHaMaintenanceAvailability(false); return; } org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem(); if (((vm == null) || (!(vm.isHostedEngine()))) || ((vm.getCompatibilityVersion().compareTo(Version.v3_4)) < 0)) { setHaMaintenanceAvailability(false); } else { setHaMaintenanceAvailability(true); } }
public static boolean isContained(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Method method2) { if (method.getName().equals(method2.getName())) { return false; } if (((method.getBase()) == null) || ((method2.getBase()) == null)) { return false; } if (!(method.getBase().getName().equals(method2.getBase().getName()))) { return false; } return (org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.isParametersContained(method.getMandatoryParameters(), method2.getMandatoryParameters())) && (org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.isAttributesContained(method.getMandatoryAttributes(), method2.getMandatoryAttributes())); }	public boolean isContained(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Method method2) { if (method.getName().equals(method2.getName())) { return false; } if (((method.getBase()) == null) || ((method2.getBase()) == null)) { return false; } if (!(method.getBase().getName().equals(method2.getBase().getName()))) { return false; } return (isParametersContained(method.getMandatoryParameters(), method2.getMandatoryParameters())) && (isAttributesContained(method.getMandatoryAttributes(), method2.getMandatoryAttributes())); }
public java.util.List<org.ovirt.engine.core.compat.Guid> getSelectedHostIds() { java.util.List<org.ovirt.engine.core.compat.Guid> list = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyModel : getItems()) { java.lang.String selectedItem = keyModel.getKeys().getSelectedItem(); if (isKeyValid(selectedItem)) { list.add(allHostNamesMap.get(selectedItem).getId()); } } return list; }	public java.util.List<org.ovirt.engine.core.compat.Guid> getSelectedHostIds() { java.util.List<org.ovirt.engine.core.compat.Guid> list = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyLineModel keyModel : getItems()) { java.lang.String selectedItem = keyModel.getKeys().getSelectedItem(); if (isKeyValid(selectedItem)) { list.add(allHostNamesMap.get(selectedItem).getId()); } } return list; }
public static void removeReactorsMap(java.lang.String vmId) { org.ovirt.vdsmfake.rpc.json.JsonRpcServer.clientsMap.remove(vmId); }	public static void removeClientByVmId(java.lang.String vmId) { org.ovirt.vdsmfake.rpc.json.JsonRpcServer.clientsMap.remove(vmId); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Allow to manipulate Gluster Volumes") java.lang.String allowToManipulateGlusterVolumesRoleTree();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to manipulate Gluster Volumes") java.lang.String allowToManipulateGlusterVolumesRoleTree();
protected java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> createAddVmInterfaceParams(final org.ovirt.engine.core.compat.Guid vmId, final java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks> nicsWithLogicalNetworks) { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks nicWithNetworks : nicsWithLogicalNetworks) { parameters.add(new org.ovirt.engine.core.common.action.AddVmInterfaceParameters(vmId, nicWithNetworks.getNetworkInterface())); } return parameters; }	private java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> createAddVmInterfaceParams(final org.ovirt.engine.core.compat.Guid vmId, final java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks> nicsWithLogicalNetworks) { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks nicWithNetworks : nicsWithLogicalNetworks) { parameters.add(new org.ovirt.engine.core.common.action.AddVmInterfaceParameters(vmId, nicWithNetworks.getNetworkInterface())); } return parameters; }
@org.junit.Test public void testGetFileFromStringNullPath() { java.io.File file = new java.io.File("/etc/hosts"); java.io.File testFile = org.ovirt.engine.core.utils.ServletUtils.getFileFromString(null, file); assertEquals("new file should be same as old file", file, testFile); }	@org.junit.Test public void testGetFileFromString_NullPath() { java.io.File file = new java.io.File("/etc/hosts"); java.io.File testFile = org.ovirt.engine.core.utils.ServletUtils.makeFileFromSanePath(null, file); assertEquals("new file should be same as old file", file, testFile); }
private void doInit(org.ovirt.engine.api.extensions.ExtMap input, org.ovirt.engine.api.extensions.ExtMap output) { try { javax.sql.DataSource ds = new org.ovirt.engine.extension.aaa.jdbc.core.datasource.DataSourceProvider(configuration).provide(); this.authentication = new org.ovirt.engine.extension.aaa.jdbc.core.Authentication(ds); this.tasks = new org.ovirt.engine.extension.aaa.jdbc.core.Tasks(ds, this.authentication); org.ovirt.engine.extension.aaa.jdbc.binding.api.ExtensionUtils.checkDbVersion(ds.getConnection(), input.<org.ovirt.engine.api.extensions.ExtMap>get(Base.InvokeKeys.CONTEXT).<java.lang.String>get(Base.ContextKeys.CONFIGURATION_FILE)); output.put(Base.InvokeKeys.RESULT, Base.InvokeResult.SUCCESS); } catch (java.lang.Exception ex) { org.ovirt.engine.extension.aaa.jdbc.binding.api.AuthnExtension.LOG.debug("Exception", ex); output.put(Base.InvokeKeys.RESULT, Base.InvokeResult.FAILED); output.put(Base.InvokeKeys.MESSAGE, ex.getMessage()); } }	private void doInit(org.ovirt.engine.api.extensions.ExtMap input) throws java.io.IOException, java.sql.SQLException { javax.sql.DataSource ds = new org.ovirt.engine.extension.aaa.jdbc.core.datasource.DataSourceProvider(configuration).provide(); this.authentication = new org.ovirt.engine.extension.aaa.jdbc.core.Authentication(ds); this.tasks = new org.ovirt.engine.extension.aaa.jdbc.core.Tasks(ds, this.authentication); org.ovirt.engine.extension.aaa.jdbc.binding.api.ExtensionUtils.checkDbVersion(ds.getConnection(), input.<org.ovirt.engine.api.extensions.ExtMap>get(Base.InvokeKeys.CONTEXT).<java.lang.String>get(Base.ContextKeys.CONFIGURATION_FILE)); }
private void addQuotaToMemoryQuotaList(org.ovirt.engine.core.common.businessentities.QuotaPerUserUsageEntity quotaPerUserUsageEntity) { org.ovirt.engine.ui.userportal.widget.QuotaProgressBar memoryQuotaProgressBar = new org.ovirt.engine.ui.userportal.widget.QuotaProgressBar(); if (quotaPerUserUsageEntity.isUnlimitedMemory()) { memoryQuotaProgressBar.setUnlimited(true); } else { memoryQuotaProgressBar.setValueA(((int) (quotaPerUserUsageEntity.getOthersMemoryUsagePercentage()))); memoryQuotaProgressBar.setValueB(((int) (quotaPerUserUsageEntity.getUserMemoryUsagePercentage()))); java.lang.String freeMem = ((quotaPerUserUsageEntity.getFreeMemory()) > 4096) ? ((quotaPerUserUsageEntity.getFreeMemory()) / 1024) + "GB" : (quotaPerUserUsageEntity.getFreeMemory()) + "MB"; memoryQuotaProgressBar.setTitle(((org.ovirt.engine.ui.userportal.section.main.view.tab.extended.SideTabExtendedResourceView.constants.freeMemory()) + freeMem)); if ((quotaPerUserUsageEntity.getMemoryTotalUsage()) == 0) { memoryQuotaProgressBar.setZeroValue(); } } org.ovirt.engine.ui.userportal.section.main.view.tab.extended.VerticalPanel verticalPanel = new org.ovirt.engine.ui.userportal.section.main.view.tab.extended.VerticalPanel(); org.ovirt.engine.ui.userportal.section.main.view.tab.extended.Label quotaName = new org.ovirt.engine.ui.userportal.section.main.view.tab.extended.Label(); quotaName.setText(quotaPerUserUsageEntity.getQuotaName()); verticalPanel.add(quotaName); verticalPanel.add(memoryQuotaProgressBar); verticalPanel.setWidth("100%"); memoryQuotasList.add(verticalPanel); }	private void addQuotaToMemoryQuotaList(org.ovirt.engine.core.common.businessentities.QuotaUsagePerUser quotaPerUserUsageEntity) { org.ovirt.engine.ui.userportal.widget.QuotaProgressBar memoryQuotaProgressBar = new org.ovirt.engine.ui.userportal.widget.QuotaProgressBar(); if (quotaPerUserUsageEntity.isUnlimitedMemory()) { memoryQuotaProgressBar.setUnlimited(true); } else { memoryQuotaProgressBar.setValueA(((int) (quotaPerUserUsageEntity.getOthersMemoryUsagePercentage()))); memoryQuotaProgressBar.setValueB(((int) (quotaPerUserUsageEntity.getUserMemoryUsagePercentage()))); java.lang.String freeMem = ((quotaPerUserUsageEntity.getFreeMemory()) > 4096) ? ((quotaPerUserUsageEntity.getFreeMemory()) / 1024) + "GB" : (quotaPerUserUsageEntity.getFreeMemory()) + "MB"; memoryQuotaProgressBar.setTitle(((org.ovirt.engine.ui.userportal.section.main.view.tab.extended.SideTabExtendedResourceView.constants.freeMemory()) + freeMem)); if ((quotaPerUserUsageEntity.getMemoryTotalUsage()) == 0) { memoryQuotaProgressBar.setZeroValue(); } } addQuotaRow(memoryQuotasList, quotaPerUserUsageEntity.getQuotaName(), memoryQuotaProgressBar); }
@java.lang.Override protected void readOsSection(XmlNode section) { _vm.getStaticData().setId(new org.ovirt.engine.core.compat.Guid(section.attributes.get("ovf:id").getValue())); this.lastReadEntry = "Description"; XmlNode node = section.SelectSingleNode("Description"); if (node != null) { int osId = osRepository.getOsIdByUniqueName(node.innerText); _vm.getStaticData().setOsId(osId); _vm.setClusterArch(osRepository.getArchitectureFromOS(osId)); } else { _vm.setClusterArch(ArchitectureType.undefined); } }	@java.lang.Override protected void readOsSection(XmlNode section) { _vm.getStaticData().setId(new org.ovirt.engine.core.compat.Guid(section.attributes.get("ovf:id").getValue())); XmlNode node = selectSingleNode(section, "Description"); if (node != null) { int osId = osRepository.getOsIdByUniqueName(node.innerText); _vm.getStaticData().setOsId(osId); _vm.setClusterArch(osRepository.getArchitectureFromOS(osId)); } else { _vm.setClusterArch(ArchitectureType.undefined); } }
@java.lang.Override public void runFailedAutoStartVMs(java.util.List<org.ovirt.engine.core.compat.Guid> vmIds) { for (org.ovirt.engine.core.compat.Guid vmId : vmIds) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVmId(vmId); auditLogDirector.log(event, AuditLogType.HA_VM_FAILED); org.ovirt.engine.core.bll.VdsEventListener.log.infoFormat("Highly Available VM went down. Attempting to restart. VM Name: {0}, VM Id: {1}", event.getVmName(), vmId); } org.ovirt.engine.core.bll.AutoStartVmsRunner.getInstance().addVmsToRun(vmIds); }	@java.lang.Override public void runFailedAutoStartVMs(java.util.List<org.ovirt.engine.core.compat.Guid> vmIds) { for (org.ovirt.engine.core.compat.Guid vmId : vmIds) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVmId(vmId); auditLogDirector.log(event, AuditLogType.HA_VM_FAILED); org.ovirt.engine.core.bll.VdsEventListener.log.info("Highly Available VM went down. Attempting to restart. VM Name '{}', VM Id '{}'", event.getVmName(), vmId); } org.ovirt.engine.core.bll.AutoStartVmsRunner.getInstance().addVmsToRun(vmIds); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetworkDAO().update(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork()); for (org.ovirt.engine.core.common.businessentities.network.NetworkCluster clusterAttachment : getClusterAttachments()) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus(clusterAttachment.getClusterId(), org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork()); } org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetworkDAO().update(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork()); for (org.ovirt.engine.core.common.businessentities.network.NetworkCluster clusterAttachment : org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetworkClusterDAO().getAllForNetwork(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork().getId())) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus(clusterAttachment.getClusterId(), org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork()); } org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.setSucceeded(true); }
static void verify(org.ovirt.engine.api.model.Statistic statistic, java.lang.String name) { assertEquals(java.util.UUID.nameUUIDFromBytes(name.getBytes()).toString(), statistic.getId()); assertEquals(name, statistic.getName()); assertEquals(StatisticUnit.BYTES, statistic.getUnit()); assertEquals(StatisticType.GAUGE, statistic.getType()); assertTrue(statistic.isSetValues()); assertEquals(ValueType.INTEGER, statistic.getValueType()); }	static void verify(org.ovirt.engine.api.model.Statistic statistic, java.lang.String name) { assertEquals(java.util.UUID.nameUUIDFromBytes(name.getBytes()).toString(), statistic.getId()); assertEquals(name, statistic.getName()); assertEquals(StatisticUnit.BYTES, statistic.getUnit()); assertEquals(StatisticKind.GAUGE, statistic.getKind()); assertTrue(statistic.isSetValues()); assertEquals(ValueType.INTEGER, statistic.getType()); }
public org.ovirt.engine.core.bll.ValidationResult nicSriovEnabled() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_NIC_IS_NOT_SRIOV_ENABLED, getNicNameReplacement()).when(((getOldVfsConfig()) == null)); }	public org.ovirt.engine.core.bll.ValidationResult nicSriovEnabled() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_NIC_IS_NOT_SRIOV_ENABLED, getNicNameReplacement()).when(((oldVfsConfig) == null)); }
@java.lang.Override protected boolean validate() { if ((org.ovirt.engine.core.bll.RemoveUserProfileCommand.getUserProfile()) == null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_PROFILE_NOT_EXIST); } return true; }	@java.lang.Override protected boolean validate() { if ((org.ovirt.engine.core.bll.RemoveUserProfileCommand.getUserProfile()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_PROFILE_NOT_EXIST); } return true; }
public static org.ovirt.engine.core.bll.context.CommandContext createInternalJobContext(org.ovirt.engine.core.bll.context.CommandContext commandContext, org.ovirt.engine.core.utils.lock.EngineLock lock) { return org.ovirt.engine.core.bll.job.ExecutionHandler.modifyContextForIntenrakJob(lock, commandContext.clone()); }	public static org.ovirt.engine.core.bll.context.CommandContext createInternalJobContext(org.ovirt.engine.core.bll.context.CommandContext commandContext, org.ovirt.engine.core.utils.lock.EngineLock lock) { return org.ovirt.engine.core.bll.job.ExecutionHandler.modifyContextForIntenralJob(commandContext.clone(), lock); }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getJobMessageProperties() { if ((jobProperties) == null) { jobProperties = new java.util.HashMap<java.lang.String, java.lang.String>(); org.ovirt.engine.core.common.businessentities.VmPool vmPool = org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getParameters().getVmPool(); java.lang.String vmPoolName = (vmPool != null) ? vmPool.getName() : org.apache.commons.lang.StringUtils.EMPTY; jobProperties.put(VdcObjectType.VmPool.name().toLowerCase(), vmPoolName); org.ovirt.engine.core.compat.Guid vmTemplateId = org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getVmTemplateId(); java.lang.String templateName = org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getVmTemplateName(); if (org.apache.commons.lang.StringUtils.isEmpty(templateName)) { templateName = (vmTemplateId == null) ? org.apache.commons.lang.StringUtils.EMPTY : vmTemplateId.toString(); } jobProperties.put(VdcObjectType.VmTemplate.name().toLowerCase(), templateName); } return jobProperties; }	@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getJobMessageProperties() { if ((jobProperties) == null) { jobProperties = new java.util.HashMap<java.lang.String, java.lang.String>(); org.ovirt.engine.core.common.businessentities.VmPool vmPool = org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getParameters().getVmPool(); java.lang.String vmPoolName = (vmPool == null) ? org.apache.commons.lang.StringUtils.EMPTY : vmPool.getName(); jobProperties.put(VdcObjectType.VmPool.name().toLowerCase(), vmPoolName); org.ovirt.engine.core.compat.Guid vmTemplateId = org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getVmTemplateId(); java.lang.String templateName = org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getVmTemplateName(); if (org.apache.commons.lang.StringUtils.isEmpty(templateName)) { templateName = (vmTemplateId == null) ? org.apache.commons.lang.StringUtils.EMPTY : vmTemplateId.toString(); } jobProperties.put(VdcObjectType.VmTemplate.name().toLowerCase(), templateName); } return jobProperties; }
@org.junit.Test public void shouldDetectDifferentMajorVersion() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("test", new org.ovirt.engine.core.compat.Version("6.3")).isSameMajorVersion(new org.ovirt.engine.core.bll.scheduling.OS("test", new org.ovirt.engine.core.compat.Version("7.3")))).isFalse(); }	@org.junit.Test public void shouldDetectDifferentMajorVersion() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("test", new org.ovirt.engine.core.compat.Version("6.3")).isSameMajorVersion(new org.ovirt.engine.core.bll.scheduling.OS("test", new org.ovirt.engine.core.compat.Version("7.3"))), is(false)); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Host") java.lang.String geoRepSessionHostName();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Master Host") java.lang.String geoRepSessionHostName();
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler(( event) -> { org.ovirt.engine.ui.webadmin.section.main.presenter.modelProvider.setSelectedItems(getSelectedItems()); fireTableSelectionChangeEvent(); if (!(isVisible())) { handlePlaceTransition(); } })); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getEventBus().addHandler(org.ovirt.engine.ui.uicommonweb.models.ApplySearchStringEvent.getType(), ( event) -> { applySearchString(event.getSearchString()); })); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setDetailPlaceTransitionHandler(this); java.lang.String searchString = searchStringCollector.getSearchStringPrefix(modelProvider.getModel().getSearchString()); if (searchString != null) { applySearchString(searchString); } if (hasSearchPanelPresenterWidget()) { setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel, searchPanelPresenterWidget); } if (hasActionPanelPresenterWidget()) { setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetActionPanel, actionPanelPresenterWidget); } }	@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler(( event) -> { org.ovirt.engine.ui.webadmin.section.main.presenter.modelProvider.setSelectedItems(getSelectedItems()); fireTableSelectionChangeEvent(); if (isVisible()) { handlePlaceTransition(false); } })); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getEventBus().addHandler(org.ovirt.engine.ui.uicommonweb.models.ApplySearchStringEvent.getType(), ( event) -> { applySearchString(event.getSearchString()); })); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setDetailPlaceTransitionHandler(this); java.lang.String searchString = searchStringCollector.getSearchStringPrefix(modelProvider.getModel().getSearchString()); if (searchString != null) { applySearchString(searchString); } if (hasSearchPanelPresenterWidget()) { setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel, searchPanelPresenterWidget); } if (hasActionPanelPresenterWidget()) { setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetActionPanel, org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getActionPanelPresenterWidget()); } }
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, T value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { org.gwtbootstrap3.client.ui.Icon icon = new org.gwtbootstrap3.client.ui.Icon(); org.gwtbootstrap3.client.ui.base.helper.StyleHelper.addEnumStyleName(icon, iconType); if (org.ovirt.engine.ui.common.widget.table.cell.AbstractIconButtonCell.isEnabled(value)) { icon.getElement().getStyle().setProperty("color", enabledColor); icon.getElement().getStyle().setProperty("cursor", "pointer"); } else { icon.getElement().getStyle().setProperty("color", disabledColor); icon.getElement().getStyle().setProperty("cursor", "default"); } sb.append(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(icon.toString())); }	@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, T value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { org.gwtbootstrap3.client.ui.Icon icon = new org.gwtbootstrap3.client.ui.Icon(); icon.setId(id); org.gwtbootstrap3.client.ui.base.helper.StyleHelper.addEnumStyleName(icon, iconType); icon.addStyleName((org.ovirt.engine.ui.common.widget.table.cell.AbstractIconButtonCell.isEnabled(value) ? "icon-enabled" : "icon-disabled")); sb.append(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(icon.toString())); }
private void plugToExternalNetwork() { java.util.Map<java.lang.String, java.lang.String> runtimeProperties = getProviderProxy().allocate(getNetwork(), vnicProfile, org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic(), org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVds().getHostName()); if (runtimeProperties != null) { org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm().getRuntimeDeviceCustomProperties().put(vmDevice.getId(), runtimeProperties); } }	private void plugToExternalNetwork() { java.util.Map<java.lang.String, java.lang.String> runtimeProperties = getProviderProxy().allocate(getNetwork(), vnicProfile, org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic(), org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVds()); if (runtimeProperties != null) { org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm().getRuntimeDeviceCustomProperties().put(vmDevice.getId(), runtimeProperties); } }
@java.lang.Override public org.ovirt.engine.core.compat.Guid getId() { return this.id; }	@java.lang.Override public org.ovirt.engine.core.compat.Guid getId() { return id; }
@java.lang.Override public void OnSuccess(java.lang.Object model1, java.lang.Object result1) { org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceListModel vmInterfaceListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceListModel) (model1)); org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel vmInterfaceModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel) (vmInterfaceListModel.getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.NetworkEntity> networks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.NetworkEntity>(); for (org.ovirt.engine.core.common.businessentities.NetworkEntity a : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.NetworkEntity>) (result1))) { if ((a.getStatus()) == (org.ovirt.engine.core.common.businessentities.NetworkStatus.Operational)) { networks.add(a); } } if (vmInterfaceModel.getIsNew()) { vmInterfaceModel.getNetwork().setItems(networks); vmInterfaceModel.getNetwork().setSelectedItem(((networks.size()) > 0 ? networks.get(0) : null)); } else { org.ovirt.engine.core.common.businessentities.VmNetworkInterface nic = ((org.ovirt.engine.core.common.businessentities.VmNetworkInterface) (vmInterfaceListModel.getSelectedItem())); vmInterfaceModel.getNetwork().setItems(networks); vmInterfaceModel.getNetwork().setSelectedItem(null); for (org.ovirt.engine.core.common.businessentities.NetworkEntity a : networks) { if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(a.getname(), nic.getNetworkName())) { vmInterfaceModel.getNetwork().setSelectedItem(a); break; } } } okCommand.setIsExecutionAllowed(true); }	@java.lang.Override public void OnSuccess(java.lang.Object model1, java.lang.Object result1) { org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceListModel vmInterfaceListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceListModel) (model1)); org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel vmInterfaceModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel) (vmInterfaceListModel.getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Network> networks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Network>(); for (org.ovirt.engine.core.common.businessentities.Network a : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Network>) (result1))) { if ((a.getStatus()) == (org.ovirt.engine.core.common.businessentities.NetworkStatus.Operational)) { networks.add(a); } } if (vmInterfaceModel.getIsNew()) { vmInterfaceModel.getNetwork().setItems(networks); vmInterfaceModel.getNetwork().setSelectedItem(((networks.size()) > 0 ? networks.get(0) : null)); } else { org.ovirt.engine.core.common.businessentities.VmNetworkInterface nic = ((org.ovirt.engine.core.common.businessentities.VmNetworkInterface) (vmInterfaceListModel.getSelectedItem())); vmInterfaceModel.getNetwork().setItems(networks); vmInterfaceModel.getNetwork().setSelectedItem(null); for (org.ovirt.engine.core.common.businessentities.Network a : networks) { if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(a.getname(), nic.getNetworkName())) { vmInterfaceModel.getNetwork().setSelectedItem(a); break; } } } okCommand.setIsExecutionAllowed(true); }
@java.lang.Override protected boolean canDoAction() { boolean result = true; if (!(canDoSnapshot(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm()))) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList = getDisksList(); if ((disksList.size()) > 0) { org.ovirt.engine.core.bll.storage.StoragePoolValidator spValidator = new org.ovirt.engine.core.bll.storage.StoragePoolValidator(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getStoragePool()); org.ovirt.engine.core.bll.validator.VmValidator vmValidator = new org.ovirt.engine.core.bll.validator.VmValidator(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm()); org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotValidator = new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator(); result = (((((((validate(spValidator.isUp())) && (validate(snapshotValidator.vmNotDuringSnapshot(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId())))) && (validate(snapshotValidator.vmNotInPreview(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId())))) && (validate(vmValidator.vmNotDuringMigration()))) && (validate(vmValidator.vmNotRunningStateless()))) && (validate(vmValidator.vmNotIlegal()))) && (org.ovirt.engine.core.bll.ImagesHandler.PerformImagesChecks(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getReturnValue().getCanDoActionMessages(), org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getStoragePoolId(), Guid.Empty, true, true, true, true, true, true, disksList))) && (validate(vmValidator.vmNotLocked())); } return result; }	@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.validator.VmValidator vmValidator = new org.ovirt.engine.core.bll.validator.VmValidator(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm()); boolean result = validateVM(vmValidator); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList = getDisksList(); if (result && ((disksList.size()) > 0)) { org.ovirt.engine.core.bll.storage.StoragePoolValidator spValidator = new org.ovirt.engine.core.bll.storage.StoragePoolValidator(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getStoragePool()); org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotValidator = new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator(); result = (((((((validate(spValidator.isUp())) && (validate(snapshotValidator.vmNotDuringSnapshot(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId())))) && (validate(snapshotValidator.vmNotInPreview(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId())))) && (validate(vmValidator.vmNotDuringMigration()))) && (validate(vmValidator.vmNotRunningStateless()))) && (validate(vmValidator.vmNotIlegal()))) && (org.ovirt.engine.core.bll.ImagesHandler.PerformImagesChecks(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getReturnValue().getCanDoActionMessages(), org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getStoragePoolId(), Guid.Empty, true, true, true, true, true, true, disksList))) && (validate(vmValidator.vmNotLocked())); } return result; }
private static boolean verifyByteArray(java.io.DataInputStream dataInputStream) throws java.io.IOException { int length = dataInputStream.readInt(); byte[] contents = new byte[length]; int numBytes = dataInputStream.read(contents, 0, length); if (numBytes != length) { return false; } return true; }	private static boolean isBase64(byte[] octects) { for (int i = 0; i < (octects.length); i++) { if (!(org.apache.commons.codec.binary.Base64.isBase64(octects[i]))) { return false; } } return true; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeSnapshotDelete(java.lang.String snapshotName);	org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterSnapshotDelete(java.lang.String snapshotName);
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.VdsStatistics stats) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cpu_idle", stats.getcpu_idle()).addValue("cpu_load", stats.getcpu_load()).addValue("cpu_sys", stats.getcpu_sys()).addValue("cpu_user", stats.getcpu_user()).addValue("usage_cpu_percent", stats.getusage_cpu_percent()).addValue("usage_mem_percent", stats.getusage_mem_percent()).addValue("usage_network_percent", stats.getusage_network_percent()).addValue("vds_id", stats.getId()).addValue("mem_available", stats.getmem_available()).addValue("mem_free", stats.getMemFree()).addValue("mem_shared", stats.getmem_shared()).addValue("swap_free", stats.getswap_free()).addValue("swap_total", stats.getswap_total()).addValue("ksm_cpu_percent", stats.getksm_cpu_percent()).addValue("ksm_pages", stats.getksm_pages()).addValue("ksm_state", stats.getksm_state()).addValue("ha_score", stats.getHighlyAvailableScore()).addValue("anonymousHugePages", stats.getAnonymousHugePages()); getCallsHandler().executeModification("InsertVdsStatistics", parameterSource); }	@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.VdsStatistics stats) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cpu_idle", stats.getcpu_idle()).addValue("cpu_load", stats.getcpu_load()).addValue("cpu_sys", stats.getcpu_sys()).addValue("cpu_user", stats.getcpu_user()).addValue("usage_cpu_percent", stats.getusage_cpu_percent()).addValue("usage_mem_percent", stats.getusage_mem_percent()).addValue("usage_network_percent", stats.getusage_network_percent()).addValue("vds_id", stats.getId()).addValue("mem_available", stats.getmem_available()).addValue("mem_free", stats.getMemFree()).addValue("mem_shared", stats.getmem_shared()).addValue("swap_free", stats.getswap_free()).addValue("swap_total", stats.getswap_total()).addValue("ksm_cpu_percent", stats.getksm_cpu_percent()).addValue("ksm_pages", stats.getksm_pages()).addValue("ksm_state", stats.getksm_state()).addValue("ha_score", stats.getHighlyAvailableScore()).addValue("anonymous_hugepages", stats.getAnonymousHugePages()); getCallsHandler().executeModification("InsertVdsStatistics", parameterSource); }
private void updateAuditLog(org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand command, org.ovirt.engine.core.common.AuditLogType auditLogType, java.lang.Long imageSizeInGigabytes) { command.addCustomValue("DiskAlias", getDisk(command).getDiskAlias()); command.addCustomValue("NewSize", java.lang.String.valueOf(imageSizeInGigabytes)); org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class).log(command, auditLogType); }	private void updateAuditLog(org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand command, org.ovirt.engine.core.common.AuditLogType auditLogType, java.lang.Long imageSizeInGigabytes) { command.addCustomValue("DiskAlias", getDisk(command).getDiskAlias()); command.addCustomValue("NewSize", java.lang.String.valueOf(imageSizeInGigabytes)); auditLogDirector.log(command, auditLogType); }
@java.lang.Override public void update(org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy) { super.update(clusterPolicy); getCallsHandler().executeModification("DeleteClusterPolicyUnitsByClusterPolicyId", getCustomMapSqlParameterSource().addValue("id", clusterPolicy.getId())); for (org.ovirt.engine.core.dao.scheduling.ClusterPolicyDaoImpl.ClusterPolicyUnit clusterPolicyUnit : getclusterPolicyUnit(clusterPolicy)) { saveClusterPolicyUnit(clusterPolicyUnit); } }	@java.lang.Override public void update(org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy) { super.update(clusterPolicy); getCallsHandler().executeModification("DeleteClusterPolicyUnitsByClusterPolicyId", getCustomMapSqlParameterSource().addValue("id", clusterPolicy.getId())); java.util.List<org.ovirt.engine.core.dao.scheduling.ClusterPolicyDaoImpl.ClusterPolicyUnit> clusterPolicyUnits = getclusterPolicyUnit(clusterPolicy); if (clusterPolicyUnits != null) { for (org.ovirt.engine.core.dao.scheduling.ClusterPolicyDaoImpl.ClusterPolicyUnit clusterPolicyUnit : clusterPolicyUnits) { saveClusterPolicyUnit(clusterPolicyUnit); } } }
@java.lang.Override protected void afterReadResponse(java.net.HttpURLConnection connection, byte[] response) throws java.lang.Exception { if (((connection.getResponseCode()) != (java.net.HttpURLConnection.HTTP_OK)) && ((connection.getResponseCode()) != (java.net.HttpURLConnection.HTTP_MOVED_TEMP))) { org.ovirt.engine.core.bll.host.provider.foreman.ForemanErrorWrapper ferr = objectMapper.readValue(response, org.ovirt.engine.core.bll.host.provider.foreman.ForemanErrorWrapper.class); java.lang.String err = org.apache.commons.lang.StringUtils.join(ferr.getForemanError().getFull_messages(), ", "); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineErrors.PROVIDER_FAILURE, err); } }	@java.lang.Override protected void afterReadResponse(java.net.HttpURLConnection connection, byte[] response) throws java.lang.Exception { if (((connection.getResponseCode()) != (java.net.HttpURLConnection.HTTP_OK)) && ((connection.getResponseCode()) != (java.net.HttpURLConnection.HTTP_MOVED_TEMP))) { org.ovirt.engine.core.bll.host.provider.foreman.ForemanErrorWrapper ferr = objectMapper.readValue(response, org.ovirt.engine.core.bll.host.provider.foreman.ForemanErrorWrapper.class); java.lang.String err = org.apache.commons.lang.StringUtils.join(ferr.getForemanError().getFull_messages(), ", "); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, err); } }
private void commitLabelChanges(org.ovirt.engine.ui.uicommonweb.models.hosts.NicLabelModel labelModel, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> potentialNetworks) { labelModel.commit(iface); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel ifaceModel = nicMap.get(iface.getName()); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.clearNetworks(ifaceModel, allNics, allNetworkAttachments, hostSetupNetworksParameters); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.attachNetworks(ifaceModel, new java.util.ArrayList(potentialNetworks), allNics, allNetworkAttachments, hostSetupNetworksParameters); }	private void commitNetworkChanges(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> networks) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel bondModel = nicMap.get(iface.getName()); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.attachNetworks(bondModel, new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(networks), hostSetupNetworksParametersData); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ("IsChangable".equals(propName)) { cloudInitPasswordSetEditor.setTitle((model.getCloudInitPasswordSet().getIsChangable() ? org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmInitWidget.constants.vmInitPasswordSetToolTip() : org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmInitWidget.constants.vmInitPasswordNotSetToolTip())); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ("IsChangable".equals(propName)) { cloudInitPasswordSetEditor.setTitle((model.getCloudInitPasswordSet().getIsChangable() ? org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmInitWidget.constants.vmInitPasswordSetToolTip() : org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmInitWidget.constants.vmInitPasswordNotSetToolTip())); } }
public final java.lang.String consoleClientResourcesUrl() { java.lang.String url = getString(org.ovirt.engine.ui.common.utils.DynamicMessages.DynamicMessageKey.CONSOLE_CLIENT_RESOURCES_URL); boolean isAbsolute = url.contains("://"); return isAbsolute ? url : (((((Window.Location.getProtocol()) + "//") + (Window.Location.getHost())) + "/") + (org.ovirt.engine.ui.frontend.utils.BaseContextPathData.getInstance().getRelativePath())) + url; }	public final java.lang.String consoleClientResourcesUrl() { java.lang.String url = getString(org.ovirt.engine.ui.common.utils.DynamicMessages.DynamicMessageKey.CONSOLE_CLIENT_RESOURCES_URL); boolean isAbsolute = (com.google.gwt.safehtml.shared.UriUtils.extractScheme(url)) != null; return isAbsolute ? url : ("/" + (org.ovirt.engine.ui.frontend.utils.BaseContextPathData.getInstance().getRelativePath())) + url; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if ((ev.matchesDefinition(ListModel.SelectedItemChangedEventDefinition)) && (sender == (getDataCenter()))) { DataCenter_SelectedItemChanged(); } else if ((ev.matchesDefinition(ListModel.SelectedItemChangedEventDefinition)) && (sender == (getCluster()))) { Cluster_SelectedItemChanged(); } else if ((ev.matchesDefinition(ListModel.SelectedItemChangedEventDefinition)) && (sender == (getHostName()))) { HostName_SelectedItemChanged(); } else if (sender == (getConsoleAddressEnabled())) { consoleAddressChanged(); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getDataCenter()))) { dataCenter_SelectedItemChanged(); } else if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getCluster()))) { cluster_SelectedItemChanged(); } else if (sender == (getConsoleAddressEnabled())) { consoleAddressChanged(); } }
@java.lang.Override protected void executeVmCommand() { if (diskShouldBeUnPlugged()) { performPlugCommand(VDSCommandType.HotUnPlugDisk, disk, vmDevice); } org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVmDeviceDao().remove(vmDevice.getId()); if ((!(disk.isDiskSnapshot())) && ((org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE) == (disk.getDiskStorageType()))) { UpdateMetaDataDescription(); org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getImageDao().updateImageVmSnapshotId(((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)).getImageId(), null); } org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateBootOrderInVmDeviceAndStoreToDB(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm().getStaticData()); org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVmStaticDAO().incrementDbGeneration(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm().getId()); org.ovirt.engine.core.bll.DetachDiskFromVmCommand.setSucceeded(true); }	@java.lang.Override protected void executeVmCommand() { if (diskShouldBeUnPlugged()) { performPlugCommand(VDSCommandType.HotUnPlugDisk, disk, vmDevice); } org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVmDeviceDao().remove(vmDevice.getId()); if ((!(disk.isDiskSnapshot())) && ((org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE) == (disk.getDiskStorageType()))) { org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getImageDao().updateImageVmSnapshotId(((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)).getImageId(), null); } org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateBootOrderInVmDeviceAndStoreToDB(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm().getStaticData()); org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVmStaticDAO().incrementDbGeneration(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm().getId()); org.ovirt.engine.core.bll.DetachDiskFromVmCommand.setSucceeded(true); }
public static java.util.List<org.ovirt.engine.core.compat.Guid> getAttachedDataCenters(org.ovirt.engine.api.restapi.resource.BackendResource resource, org.ovirt.engine.core.compat.Guid id) { java.util.List<org.ovirt.engine.core.compat.Guid> ids = new java.util.ArrayList<>(1); org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = resource.runQuery(VdcQueryType.GetStorageDomainListById, new org.ovirt.engine.core.common.queries.IdQueryParameters(id)); if ((result != null) && (result.getSucceeded())) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = result.getReturnValue(); if (storageDomains != null) { for (org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain : storageDomains) { ids.add(storageDomain.getStoragePoolId()); } } } return ids; }	public static void addAttachedDataCenterReferences(org.ovirt.engine.api.restapi.resource.BackendResource resource, org.ovirt.engine.api.model.StorageDomain model) { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.compat.Guid.createGuidFromString(model.getId()); org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = resource.runQuery(VdcQueryType.GetStorageDomainListById, new org.ovirt.engine.core.common.queries.IdQueryParameters(id)); if ((result != null) && (result.getSucceeded())) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = result.getReturnValue(); if (org.apache.commons.collections.CollectionUtils.isNotEmpty(storageDomains)) { org.ovirt.engine.api.model.DataCenters dataCenters = new org.ovirt.engine.api.model.DataCenters(); for (org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain : storageDomains) { org.ovirt.engine.api.model.DataCenter dataCenter = new org.ovirt.engine.api.model.DataCenter(); dataCenter.setId(storageDomain.getStoragePoolId().toString()); dataCenters.getDataCenters().add(dataCenter); } model.setDataCenters(dataCenters); } } }
@java.lang.Override protected void finished(org.junit.runner.Description description) { super.finished(description); reset(mockedInjector); }	@java.lang.Override protected void finished(org.junit.runner.Description description) { super.finished(description); overrideInjector(null); reset(mockedInjector); }
private void createConcreteSSLSocketFactory() throws org.ovirt.engine.core.notifier.NotificationServiceException { org.ovirt.engine.core.utils.LocalConfig config = org.ovirt.engine.core.utils.LocalConfig.getInstance(); java.lang.String keystorePass = config.getPKIEngineStorePassword(); java.lang.String keystoreUrl = config.getPKIEngineStore().getAbsolutePath(); try { java.lang.String sslProtocol = prop.get(NotificationProperties.SSL_PROTOCOL); if (org.apache.commons.lang.StringUtils.isEmpty(sslProtocol)) { sslProtocol = org.ovirt.engine.core.notifier.EngineMonitorService.DEFAULT_SSL_PROTOCOL; } java.security.KeyStore keyStore = org.ovirt.engine.core.utils.crypt.EncryptionUtils.getKeyStore(keystoreUrl, keystorePass, org.ovirt.engine.core.notifier.EngineMonitorService.CERTIFICATION_TYPE); javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()); tmf.init(keyStore); javax.net.ssl.SSLContext ctx = javax.net.ssl.SSLContext.getInstance(sslProtocol); ctx.init(null, tmf.getTrustManagers(), null); sslFactory = ctx.getSocketFactory(); } catch (java.lang.Exception e) { throw new org.ovirt.engine.core.notifier.NotificationServiceException("Failed to create SSL factory when running with SSL mode.", e); } }	private void createConcreteSSLSocketFactory() throws org.ovirt.engine.core.notifier.NotificationServiceException { org.ovirt.engine.core.utils.EngineLocalConfig config = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance(); java.lang.String keystorePass = config.getPKIEngineStorePassword(); java.lang.String keystoreUrl = config.getPKIEngineStore().getAbsolutePath(); try { java.lang.String sslProtocol = prop.get(NotificationProperties.SSL_PROTOCOL); if (org.apache.commons.lang.StringUtils.isEmpty(sslProtocol)) { sslProtocol = org.ovirt.engine.core.notifier.EngineMonitorService.DEFAULT_SSL_PROTOCOL; } java.security.KeyStore keyStore = org.ovirt.engine.core.utils.crypt.EncryptionUtils.getKeyStore(keystoreUrl, keystorePass, org.ovirt.engine.core.notifier.EngineMonitorService.CERTIFICATION_TYPE); javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()); tmf.init(keyStore); javax.net.ssl.SSLContext ctx = javax.net.ssl.SSLContext.getInstance(sslProtocol); ctx.init(null, tmf.getTrustManagers(), null); sslFactory = ctx.getSocketFactory(); } catch (java.lang.Exception e) { throw new org.ovirt.engine.core.notifier.NotificationServiceException("Failed to create SSL factory when running with SSL mode.", e); } }
private void logProxySelection(java.lang.String proxy, java.lang.String origin, java.lang.String command) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("Proxy", proxy); logable.addCustomValue("Origin", origin); logable.addCustomValue("Command", command); logable.setVdsId(_vds.getId()); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(logable, AuditLogType.PROXY_HOST_SELECTION); org.ovirt.engine.core.bll.FenceExecutor.log.infoFormat("Using Host {0} from {1} as proxy to execute {2} command on Host {3}", proxy, origin, command, _vds.getName()); }	private org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue checkAgentStatus(org.ovirt.engine.core.common.businessentities.FenceAgent agent, org.ovirt.engine.core.common.businessentities.VDS proxyHost) { org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue returnValue = null; returnValue = fence(FenceActionType.STATUS, agent, proxyHost); if (returnValue.getSucceeded()) { returnValue.setProxyHostUsed(proxyHost); returnValue.setFenceAgentUsed(agent); } return returnValue; }
public void onConfirmPMHost() { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel) (getWindow())); if (!(model.validate())) { return; } if (!((java.lang.Boolean) (model.getIsPm().getEntity()))) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().powerManagementConfigurationTitle()); confirmModel.setHashName("power_management_configuration"); confirmModel.setHelpTag(confirmModel.getHashName(), "Host > Power Management Configuration"); confirmModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().youHavntConfigPmMsg()); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnAddHost", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); confirmModel.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmWithFocus", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); confirmModel.getCommands().add(tempVar2); } else { onAddHost(); } }	public void onConfirmPMHost() { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel) (getWindow())); if (!(model.validate())) { return; } if (!((java.lang.Boolean) (model.getIsPm().getEntity()))) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().powerManagementConfigurationTitle()); confirmModel.setHelpTag(HelpTag.power_management_configuration); confirmModel.setHashName("power_management_configuration"); confirmModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().youHavntConfigPmMsg()); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnAddHost", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); confirmModel.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmWithFocus", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); confirmModel.getCommands().add(tempVar2); } else { onAddHost(); } }
private boolean isRunningConfigurationNeeded() { return (!(org.ovirt.engine.core.bll.VmHandler.isUpdateValid(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus()))) || (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isNextRunConfigurationExists()); }	private boolean isRunningConfigurationNeeded() { return (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isNextRunConfigurationExists()) || (!(org.ovirt.engine.core.bll.VmHandler.isUpdateValid(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus()))); }
@org.junit.Test public void testSaveWithEntities() { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.NewGuid(); dao.save(newAsyncTask, VdcObjectType.Storage, storageId); java.util.List<org.ovirt.engine.core.compat.Guid> asyncTasks = dao.getAsyncTaskIdsByEntity(storageId); assertNotNull(asyncTasks); assertEquals(asyncTasks.size(), 1); assertEquals(asyncTasks.get(0), newAsyncTask.getTaskId()); }	@org.junit.Test public void testSaveWithEntities() { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); dao.save(newAsyncTask, VdcObjectType.Storage, storageId); java.util.List<org.ovirt.engine.core.compat.Guid> asyncTasks = dao.getAsyncTaskIdsByEntity(storageId); assertNotNull(asyncTasks); assertEquals(asyncTasks.size(), 1); assertEquals(asyncTasks.get(0), newAsyncTask.getTaskId()); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(storageDomainId, imageGroupId, baseImageGeneration, baseImage, topImage); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(storageDomainId, baseImageGeneration, baseImage, topImage); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.Disk disk = getDisk(); if (disk != null) { permsList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(disk.getId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.SPARSIFY_DISK)); } return permsList; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getDiskImage(); if (diskImage == null) { return java.util.Collections.emptyList(); } return java.util.Collections.singletonList(new org.ovirt.engine.core.bll.utils.PermissionSubject(diskImage.getId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getActionType().getActionGroup())); }
protected void setVdsRuntimeError(java.lang.RuntimeException ex) { getVDSReturnValue().setSucceeded(false); getVDSReturnValue().setExceptionString(ex.toString()); getVDSReturnValue().setExceptionObject(ex); org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase vdsExp = ((org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) ((ex instanceof org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) ? ex : null)); if (vdsExp != null) { if ((vdsExp.getVdsError()) != null) { getVDSReturnValue().setVdsError(((org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) (ex)).getVdsError()); } else if ((vdsExp.getCause()) instanceof org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) { getVDSReturnValue().setVdsError(((org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) (vdsExp.getCause())).getVdsError()); } } }	protected void setVdsRuntimeError(java.lang.RuntimeException ex) { getVDSReturnValue().setSucceeded(false); getVDSReturnValue().setExceptionString(ex.toString()); getVDSReturnValue().setExceptionObject(ex); org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase vdsExp = ((org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) ((ex instanceof org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) ? ex : null)); if (vdsExp != null) { if ((vdsExp.getVdsError()) != null) { getVDSReturnValue().setVdsError(((org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) (ex)).getVdsError()); } else if ((vdsExp.getCause()) instanceof org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) { getVDSReturnValue().setVdsError(((org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) (vdsExp.getCause())).getVdsError()); } } logException(ex); }
default java.lang.String getDetailMessage(T entity) { return null; }	java.lang.String getDetailMessage(T entity);
private java.lang.String getDiskIsBeingMigratedMessage() { if ((cachedDiskIsBeingMigratedMessage) == null) { java.lang.StringBuilder builder = new java.lang.StringBuilder(VdcBllMessages.ACTION_TYPE_FAILED_DISK_IS_BEING_MIGRATED.name()); if ((org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage()) != null) { builder.append(java.lang.String.format("$DiskName %1$s", getDiskAlias())); } builder.append(java.lang.String.format("$OperationType %1$s", ((org.ovirt.engine.core.common.businessentities.ImageOperation.Move) == (org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters().getOperation()) ? "moved" : "copied"))); cachedDiskIsBeingMigratedMessage = builder.toString(); } return cachedDiskIsBeingMigratedMessage; }	private java.lang.String getDiskIsBeingMigratedMessage() { if ((cachedDiskIsBeingMigratedMessage) == null) { java.lang.StringBuilder builder = new java.lang.StringBuilder(VdcBllMessages.ACTION_TYPE_FAILED_DISK_IS_BEING_MIGRATED.name()); if ((org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage()) != null) { builder.append(java.lang.String.format("$DiskName %1$s", getDiskAlias())); } cachedDiskIsBeingMigratedMessage = builder.toString(); } return cachedDiskIsBeingMigratedMessage; }
@org.junit.Test public void testIt() { org.ovirt.engine.core.compat.backendcompat.PropertyInfo pc = org.ovirt.engine.core.compat.backendcompat.TypeCompat.GetProperty(this.getClass(), "someValue"); java.lang.String result = ((java.lang.String) (pc.getValue(this, "JarJar"))); assertEquals("Standard", "Anakin", result); this.someValue = null; result = ((java.lang.String) (pc.getValue(this, "JarJar"))); assertEquals("Null Value", "JarJar", result); }	@org.junit.Test public void testIt() { org.ovirt.engine.core.compat.backendcompat.PropertyInfo propInfo = org.ovirt.engine.core.compat.backendcompat.TypeCompat.GetProperty(this.getClass(), "someValue"); java.lang.String result = ((java.lang.String) (propInfo.getValue(this, "JarJar"))); assertEquals("Standard", "Anakin", result); this.someValue = null; result = ((java.lang.String) (propInfo.getValue(this, "JarJar"))); assertEquals("Null Value", "JarJar", result); }
public java.lang.String generateEngineXml(org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String cpuId, java.lang.String emulatedMachine) { vm.setCpuName(cpuId); vm.setEmulatedMachine(emulatedMachine); return new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(vm, vmInfoBuildUtils).buildCreateVm(); }	private java.lang.String generateEngineXml(org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String cpuId, java.lang.String emulatedMachine) { vm.setCpuName(cpuId); vm.setEmulatedMachine(emulatedMachine); return new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(vm, vmInfoBuildUtils).buildCreateVm(); }
public void retrieveValue(final java.lang.String key, final org.ovirt.engine.ui.frontend.communication.StorageCallback callback) { getOperationManager().retrieve(key, callback); }	public void retrieveFromHttpSession(final java.lang.String key, final org.ovirt.engine.ui.frontend.communication.StorageCallback callback) { getOperationManager().retrieveFromHttpSession(key, callback); }
@java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.Model, ?> getModelPopup(org.ovirt.engine.ui.uicommonweb.models.HostErrataCountModel sourceModel, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand, org.ovirt.engine.ui.uicommonweb.models.Model windowModel) { org.ovirt.engine.ui.webadmin.section.main.presenter.popup.ErrataListWithDetailsPopupPresenterWidget popup = errataPopupProvider.get(); return popup; }	@java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.Model, ?> getModelPopup(org.ovirt.engine.ui.uicommonweb.models.HostErrataCountModel source, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand, org.ovirt.engine.ui.uicommonweb.models.Model windowModel) { return errataPopupProvider.get(); }
@javax.ws.rs.Path("hostgroups") public org.ovirt.engine.api.resource.foreman.ForemanHostGroupsResource getForemanHostGroups();	@javax.ws.rs.Path("hostgroups") public org.ovirt.engine.api.resource.externalhostproviders.ExternalHostGroupsResource getExternalHostGroups();
@java.lang.Override protected void toggleGhost(org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType value, org.ovirt.engine.ui.common.widget.profile.ProfileInstanceTypeEditor item, boolean becomingGhost) { item.profileEditor.setEnabled((!becomingGhost)); item.profileEditor.asWidget().setEnabled(true); vnics.put(value.getNetworkInterface(), becomingGhost); updateHeaderLabel(); }	@java.lang.Override protected void toggleGhost(org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType value, org.ovirt.engine.ui.common.widget.profile.ProfileInstanceTypeEditor item, boolean becomingGhost) { item.profileEditor.setEnabled((!becomingGhost)); item.profileEditor.asWidget().setEnabled(true); }
@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getStepType() { return org.ovirt.engine.core.common.job.StepEnum.STOP_REBALANCING_GLUSTER_VOLUME; }	@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getStepType() { return org.ovirt.engine.core.common.job.StepEnum.REBALANCING_VOLUME; }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((id) == null ? 0 : id.hashCode()); result = (prime * result) + ((LVER) == null ? 0 : LVER.hashCode()); result = (prime * result) + ((description) == null ? 0 : description.hashCode()); result = (prime * result) + ((comment) == null ? 0 : comment.hashCode()); result = (prime * result) + ((compatibilityVersion) == null ? 0 : compatibilityVersion.hashCode()); result = (prime * result) + (masterDomainVersion); result = (prime * result) + ((name) == null ? 0 : name.hashCode()); result = (prime * result) + ((recovery_mode) == null ? 0 : recovery_mode.hashCode()); result = (prime * result) + ((spmVdsId) == null ? 0 : spmVdsId.hashCode()); result = (prime * result) + ((status) == null ? 0 : status.hashCode()); result = (prime * result) + ((storagePoolFormatType) == null ? 0 : storagePoolFormatType.hashCode()); result = (prime * result) + ((quotaEnforcementType) == null ? 0 : quotaEnforcementType.hashCode()); return result; }	@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((id) == null ? 0 : id.hashCode()); result = (prime * result) + ((LVER) == null ? 0 : LVER.hashCode()); result = (prime * result) + ((description) == null ? 0 : description.hashCode()); result = (prime * result) + ((comment) == null ? 0 : comment.hashCode()); result = (prime * result) + ((compatibilityVersion) == null ? 0 : compatibilityVersion.hashCode()); result = (prime * result) + (masterDomainVersion); result = (prime * result) + ((name) == null ? 0 : name.hashCode()); result = (prime * result) + ((recovery_mode) == null ? 0 : recovery_mode.hashCode()); result = (prime * result) + ((spmVdsId) == null ? 0 : spmVdsId.hashCode()); result = (prime * result) + ((status) == null ? 0 : status.hashCode()); result = (prime * result) + (local ? 1231 : 1237); result = (prime * result) + ((storagePoolFormatType) == null ? 0 : storagePoolFormatType.hashCode()); result = (prime * result) + ((quotaEnforcementType) == null ? 0 : quotaEnforcementType.hashCode()); return result; }
public org.ovirt.engine.ui.uicommonweb.UICommand getRequestConsoleKeysCommand() { return privateRequestConsoleKeysCommand; }	public org.ovirt.engine.ui.uicommonweb.UICommand getSetConsoleKeyCommand() { return setConsoleKeyCommand; }
public static boolean hasSpiceSupportCached(int osId, org.ovirt.engine.core.compat.Version version) { java.util.HashMap<java.lang.Integer, java.lang.Boolean> osIdSpiceMap = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.versionOsIdSpiceMap.get(version); return osIdSpiceMap.get(osId); }	public static boolean hasSpiceSupport(int osId, org.ovirt.engine.core.compat.Version version) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDisplayTypes(osId, version).contains(DisplayType.qxl); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel clusterModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel) (model)); java.util.ArrayList<org.ovirt.engine.core.compat.Version> versions = ((java.util.ArrayList<org.ovirt.engine.core.compat.Version>) (result)); clusterModel.getVersion().setItems(versions); if (!(versions.contains(clusterModel.getVersion().getSelectedItem()))) { if (versions.contains(clusterModel.getDataCenter().getSelectedItem().getcompatibility_version())) { clusterModel.getVersion().setSelectedItem(clusterModel.getDataCenter().getSelectedItem().getcompatibility_version()); } else { clusterModel.getVersion().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.selectHighestVersion(versions)); } } else if (clusterModel.getIsEdit()) { clusterModel.getVersion().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(versions, new org.ovirt.engine.ui.uicommonweb.Linq.VersionPredicate(clusterModel.getEntity().getcompatibility_version()))); } }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel clusterModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel) (model)); java.util.ArrayList<org.ovirt.engine.core.compat.Version> versions = ((java.util.ArrayList<org.ovirt.engine.core.compat.Version>) (result)); org.ovirt.engine.core.compat.Version selectedVersion = clusterModel.getVersion().getSelectedItem(); clusterModel.getVersion().setItems(versions); if ((selectedVersion == null) || (!(versions.contains(selectedVersion)))) { clusterModel.getVersion().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.selectHighestVersion(versions)); } else if (clusterModel.getIsEdit()) { clusterModel.getVersion().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(versions, new org.ovirt.engine.ui.uicommonweb.Linq.VersionPredicate(clusterModel.getEntity().getcompatibility_version()))); } else { clusterModel.getVersion().setSelectedItem(selectedVersion); } }
private void initAddedLabelsParams(org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig originalVfsConfig, org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig updateVfsConfig) { for (java.lang.String label : updateVfsConfig.getLabels()) { if (!(originalVfsConfig.getLabels().contains(label))) { addedLabelsParams.add(new org.ovirt.engine.core.common.action.VfsConfigLabelParameters(originalVfsConfig.getNicId(), label)); } } }	private void initAddedLabelsParams(org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig originalVfsConfig, org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig updateVfsConfig) { for (java.lang.String label : updateVfsConfig.getNetworkLabels()) { if (!(originalVfsConfig.getNetworkLabels().contains(label))) { addedLabelsParams.add(new org.ovirt.engine.core.common.action.VfsConfigLabelParameters(originalVfsConfig.getNicId(), label)); } } }
protected java.util.List<java.lang.String> getLocales(java.io.File manualDir) { java.util.List<java.lang.String> locales = new java.util.ArrayList<>(); if ((!(manualDir.exists())) || (!(manualDir.canRead()))) { org.ovirt.engine.docs.utils.servlet.ContextSensitiveHelpMappingServlet.log.error(("manual directory doesn't exist: " + manualDir)); return locales; } for (java.io.File dir : manualDir.listFiles()) { if ((dir.isDirectory()) && (dir.canRead())) { java.lang.String name = dir.getName(); if (((name.length()) == 5) && ((name.indexOf("-")) == 2)) { locales.add(name); } } } return locales; }	protected java.util.List<java.lang.String> getLocales(java.io.File manualDir) { java.util.List<java.lang.String> locales = new java.util.ArrayList<>(); if ((!(manualDir.exists())) || (!(manualDir.canRead()))) { org.ovirt.engine.docs.utils.servlet.ContextSensitiveHelpMappingServlet.log.info(("Context-sensitive help is not installed. Manual directory doesn't exist: " + manualDir)); return locales; } for (java.io.File dir : manualDir.listFiles()) { if ((dir.isDirectory()) && (dir.canRead())) { java.lang.String name = dir.getName(); java.util.regex.Matcher m = org.ovirt.engine.docs.utils.servlet.ContextSensitiveHelpMappingServlet.LOCALE_PATTERN.matcher(name); if (m.matches()) { locales.add(name); } } } return locales; }
@java.lang.Override protected boolean validate() { initializeObjectState(); if ((org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm()) == null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.canRunActionOnNonManagedVm())) { return false; } org.ovirt.engine.core.bll.validator.VmValidator vmValidator = createVmValidator(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm()); if (((((((!(validate(new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getStoragePool()).isUp()))) || (!(validateVmNotDuringSnapshot()))) || (!(validateVmNotInPreview()))) || (!(validateSnapshotExists()))) || (!(validateSnapshotType()))) || (org.ovirt.engine.core.common.FeatureSupported.liveMerge(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm().getVdsGroupCompatibilityVersion()) ? (!(validate(vmValidator.vmQualifiedForSnapshotMerge()))) || (!(validate(vmValidator.vmHostCanLiveMerge()))) : !(validate(vmValidator.vmDown())))) || (!(validate(vmValidator.vmNotHavingDeviceSnapshotsAttachedToOtherVms(false))))) { return false; } if (hasImages()) { if (!(validateImages())) { return false; } if (!(validateImageNotInTemplate())) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_IMAGE_TEMPLATE); } if (!(validateStorageDomains())) { return false; } } return true; }	@java.lang.Override protected boolean validate() { initializeObjectState(); if ((org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.canRunActionOnNonManagedVm())) { return false; } org.ovirt.engine.core.bll.validator.VmValidator vmValidator = createVmValidator(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm()); if (((((((!(validate(new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getStoragePool()).isUp()))) || (!(validateVmNotDuringSnapshot()))) || (!(validateVmNotInPreview()))) || (!(validateSnapshotExists()))) || (!(validateSnapshotType()))) || (org.ovirt.engine.core.common.FeatureSupported.liveMerge(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm().getVdsGroupCompatibilityVersion()) ? (!(validate(vmValidator.vmQualifiedForSnapshotMerge()))) || (!(validate(vmValidator.vmHostCanLiveMerge()))) : !(validate(vmValidator.vmDown())))) || (!(validate(vmValidator.vmNotHavingDeviceSnapshotsAttachedToOtherVms(false))))) { return false; } if (hasImages()) { if (!(validateImages())) { return false; } if (!(validateImageNotInTemplate())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_IMAGE_TEMPLATE); } if (!(validateStorageDomains())) { return false; } } return true; }
private org.ovirt.engine.core.common.businessentities.RolesEntity getRole() { org.ovirt.engine.core.common.businessentities.RolesEntity role = new org.ovirt.engine.core.common.businessentities.RolesEntity(); role.setId(GUIDS[1]); return role; }	private org.ovirt.engine.api.model.Role getRole() { org.ovirt.engine.core.common.businessentities.Role role = new org.ovirt.engine.core.common.businessentities.Role(); role.setId(GUIDS[1]); return role; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc moveImage(java.lang.String spUUID, java.lang.String srcDomUUID, java.lang.String dstDomUUID, java.lang.String imgGUID, java.lang.String vmGUID, int op, java.lang.String postZero, java.lang.String force) { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = irsServer.moveImage(spUUID, srcDomUUID, dstDomUUID, imgGUID, vmGUID, op, postZero, force); org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(xmlRpcReturnValue); return wrapper; }	public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc moveImage(java.lang.String spUUID, java.lang.String srcDomUUID, java.lang.String dstDomUUID, java.lang.String imgGUID, java.lang.String vmGUID, int op, java.lang.String postZero, java.lang.String force) { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = irsServer.moveImage(spUUID, srcDomUUID, dstDomUUID, imgGUID, vmGUID, op, postZero, force); org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(xmlRpcReturnValue); return wrapper; }
public void setIsGeoRepSlave(java.lang.Boolean isGeoRepSlave) { this.isGeoRepSlave = isGeoRepSlave; }	public void setGeoRepMasterVolAndClusterName(java.lang.String masterVolAndClusterName) { this.geoRepMasterVolAndClusterName = masterVolAndClusterName; }
public boolean isCanChoseInactiveDomainAsMaster() { return canChoseInactiveDomainAsMaster; }	public boolean isCanChooseInactiveDomainAsMaster() { return canChooseInactiveDomainAsMaster; }
@java.lang.Override protected void initMtu() { getHasMtu().setEntity(((getNetwork().getMtu()) != 0)); if (getHasMtu().getEntity()) { getMtu().setEntity(getNetwork().getMtu()); } }	@java.lang.Override protected void initMtu() { boolean isCustomMtu = (getNetwork().getMtu()) != 0; getMtuSelector().setSelectedItem((isCustomMtu ? MtuSelector.customMtu : MtuSelector.defaultMtu)); getMtu().setEntity((isCustomMtu() ? getNetwork().getMtu() : null)); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel getSelectedItem() { return super.getSelectedItem(); }	@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel getSelectedItem() { return ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel) (super.getSelectedItem())); }
private boolean IsFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer) { boolean returnValue = true; if (!(IsFieldUpdatable(name))) { if (((fieldContainer != null) && ((container) != null)) && (!(container.CanUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.List<java.lang.String> values = null; if (((values = dictionary.get(status)) != null) && (values != null)) { returnValue = values.contains(name); } else { returnValue = false; } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.LogError(name, status); } } return returnValue; }	private boolean IsFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer) { boolean returnValue = true; if (!(IsFieldUpdatable(name))) { if (((fieldContainer != null) && ((container) != null)) && (!(container.CanUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values != null) ? values.contains(name) : false; } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.LogError(name, status); } } return returnValue; }
@java.lang.Override public void onSuccess(final java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.queries.VdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase>> operationList, final java.util.List<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> resultObject) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Succesful returned result from runMultipleQueries!"); org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult(queryTypeList, queryParamsList, resultObject); callback.executed(f); org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent.fire(this, new org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent(state, true)); }	@java.lang.Override public void onSuccess(final java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.queries.VdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase>> operationList, final java.util.List<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> resultObject) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Succesful returned result from runMultipleQueries!"); org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult(queryTypeList, queryParamsList, resultObject); callback.executed(f); fireAsyncQuerySucceededEvent(state); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = getSafeHtmlStringMap(vm); if (!(imagesToText.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getTooltip(imagesToText); } return null; }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = getImagesToTooltipTextMap(vm); return imagesToText.isEmpty() ? null : org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getTooltip(imagesToText); }
@java.lang.Override protected void executeCommand() { updateQuotaCache(); if ((_oldStoragePool.getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Up)) { if (!(org.apache.commons.lang.StringUtils.equals(_oldStoragePool.getName(), org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getName()))) { runVdsCommand(VDSCommandType.SetStoragePoolDescription, new org.ovirt.engine.core.common.vdscommands.SetStoragePoolDescriptionVDSCommandParameters(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getName())); } } org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.copyUnchangedStoragePoolProperties(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool(), _oldStoragePool); org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePoolDAO().updatePartial(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool()); updateStoragePoolFormatType(); org.ovirt.engine.core.bll.network.ScopedMacPoolManager.scopeFor().storagePool(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getId()).modifyPool(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getMacPoolRanges()); org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { updateQuotaCache(); org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.copyUnchangedStoragePoolProperties(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool(), _oldStoragePool); org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePoolDAO().updatePartial(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool()); updateStoragePoolFormatType(); org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.setSucceeded(true); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { if (returnValue != null) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); updateVms(java.util.Collections.singletonList(vm)); clearErrorAndWarning(); } else { setError(messages.failedToLoadOva(getOvaPath().getEntity())); } stopProgress(); }	@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if (queryReturnValue.getSucceeded()) { org.ovirt.engine.core.common.businessentities.VM vm = queryReturnValue.getReturnValue(); updateVms(java.util.Collections.singletonList(vm)); } else { setError(messages.failedToLoadOva(getOvaPath().getEntity())); } stopProgress(); }
@java.lang.Override protected org.ovirt.engine.core.compat.Guid getExistingEntityId() { return org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty("1115c1c6-cb15-4832-b2a4-023770607111"); }	@java.lang.Override protected org.ovirt.engine.core.compat.Guid getExistingEntityId() { return new org.ovirt.engine.core.compat.Guid("1115c1c6-cb15-4832-b2a4-023770607111"); }
@java.lang.SuppressWarnings("rawtypes") @java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc hotunplugDisk(java.util.Map info) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.hotunplugDisk").withParameter("vmID", getVmId(info)).withParameter("params", info).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }	@java.lang.SuppressWarnings("rawtypes") @java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc hotunplugDisk(java.util.Map info) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.hotunplugDisk").withParameter("vmID", getVmId(info)).withParameter("params", info).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { clearModelSearchString(); }	@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { commonModel.getClearSearchStringCommand().execute(); }
public org.ovirt.engine.core.common.businessentities.VDSStatus getPreviousStatus() { return mVdsDynamic.getPreviousStatus(); }	public org.ovirt.engine.core.common.businessentities.VDSStatus getPreviousStatus() { return vdsDynamic.getPreviousStatus(); }
@java.lang.Override public void onAcccept(final org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient client) { client.setRetryPolicy(new org.ovirt.vdsm.jsonrpc.client.utils.retry.RetryPolicy(180000, 0, 2000, 3000)); listeningClient = client; }	@java.lang.Override public void onAcccept(final org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient client) { listeningClient = client; }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__ACTION__REFRESH); addValidateMessage(EngineMessage.VAR__TYPE__HOST_DEVICES); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__REFRESH); addValidationMessage(EngineMessage.VAR__TYPE__HOST_DEVICES); }
public boolean isAutoCleared() { return isAutoCleared; }	public boolean isAutoCleared() { return autoCleared; }
private void initRanges(java.lang.String ranges) { java.lang.String[] rangesArray = ranges.split("[,]", (-1)); for (java.lang.String range : rangesArray) { java.lang.String[] startendArray = range.split("[-]", (-1)); if ((startendArray.length) == 2) { if (!(initRange(startendArray[0], startendArray[1]))) { org.ovirt.engine.core.bll.network.MacPoolManager.log.errorFormat("Failed to initialize Mac Pool range. Please fix Mac Pool range: {0}", range); } } else { org.ovirt.engine.core.bll.network.MacPoolManager.log.errorFormat("Failed to initialize Mac Pool range. Please fix Mac Pool range: {0}", range); } } if (getAvailableMacs().isEmpty()) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.MAC_POOL_INITIALIZATION_FAILED); } }	private void initRanges(java.lang.String ranges) { java.lang.String[] rangesArray = ranges.split("[,]", (-1)); for (java.lang.String range : rangesArray) { java.lang.String[] startendArray = range.split("[-]", (-1)); if ((startendArray.length) == 2) { if (!(initRange(startendArray[0], startendArray[1]))) { org.ovirt.engine.core.bll.network.MacPoolManager.log.errorFormat("Failed to initialize Mac Pool range. Please fix Mac Pool range: {0}", range); } } else { org.ovirt.engine.core.bll.network.MacPoolManager.log.errorFormat("Failed to initialize Mac Pool range. Please fix Mac Pool range: {0}", range); } } if (availableMacs.isEmpty()) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.MAC_POOL_INITIALIZATION_FAILED); } }
private void HandleEndedTask() { if ((getState()) != (AsyncTaskState.Ended)) { setState(AsyncTaskState.Ended); setLastStatusAccessTime(); } if (isZombieTask()) { getParameters().getDbAsyncTask().getTaskParameters().setTaskGroupSuccess(false); org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(privateParameters.getDbAsyncTask().getStepId(), JobExecutionStatus.FAILED); OnTaskEndFailure(); } if (isPartiallyCompletedCommandTask()) { getParameters().getDbAsyncTask().getTaskParameters().setTaskGroupSuccess(false); org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(privateParameters.getDbAsyncTask().getStepId(), JobExecutionStatus.FAILED); OnTaskEndFailure(); } if (HasTaskEndedSuccessfully()) { org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(privateParameters.getDbAsyncTask().getStepId(), JobExecutionStatus.FINISHED); OnTaskEndSuccess(); } else if (HasTaskEndedInFailure()) { org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(privateParameters.getDbAsyncTask().getStepId(), JobExecutionStatus.FAILED); OnTaskEndFailure(); } else if (!(DoesTaskExist())) { org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(privateParameters.getDbAsyncTask().getStepId(), JobExecutionStatus.UNKNOWN); OnTaskDoesNotExist(); } }	private void handleEndedTask() { if ((getState()) != (AsyncTaskState.Ended)) { setState(AsyncTaskState.Ended); setLastStatusAccessTime(); } if (isPartiallyCompletedCommandTask()) { getParameters().getDbAsyncTask().getTaskParameters().setTaskGroupSuccess(false); org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(privateParameters.getDbAsyncTask().getStepId(), JobExecutionStatus.FAILED); onTaskEndFailure(); } if (hasTaskEndedSuccessfully()) { org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(privateParameters.getDbAsyncTask().getStepId(), JobExecutionStatus.FINISHED); onTaskEndSuccess(); } else if (hasTaskEndedInFailure()) { org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(privateParameters.getDbAsyncTask().getStepId(), JobExecutionStatus.FAILED); onTaskEndFailure(); } else if (!(doesTaskExist())) { org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(privateParameters.getDbAsyncTask().getStepId(), JobExecutionStatus.UNKNOWN); onTaskDoesNotExist(); } }
private void verifyActions(org.ovirt.engine.api.model.HostNics list) { assertNotNull(list.getActions()); assertNotNull(list.getActions().getLinks()); assertNotNull(list.getActions().getLinks().get(0)); assertEquals(list.getActions().getLinks().get(0).getHref(), org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.SETUPNETWORKS_ACTION_URL); }	private void verifyActions(org.ovirt.engine.api.model.HostNics list) { assertNotNull(list.getActions()); assertNotNull(list.getActions().getLinks()); assertNotNull(list.getActions().getLinks().get(0)); assertEquals(list.getActions().getLinks().get(0).getHref(), org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.SETUPNETWORKS_ACTION_URL); assertEquals(list.getActions().getLinks().get(0).getRel(), org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.SETUPNETWORKS_ACTION_REL); }
public <P extends org.ovirt.engine.core.common.action.VdcActionParametersBase> org.ovirt.engine.core.bll.CommandBase<P> createCommand(org.ovirt.engine.core.common.action.VdcActionType action, P parameters) { return org.ovirt.engine.core.bll.CommandsFactory.getInstance().createCommand(action, parameters); }	public <P extends org.ovirt.engine.core.common.action.VdcActionParametersBase> org.ovirt.engine.core.bll.CommandBase<P> createCommand(org.ovirt.engine.core.common.action.VdcActionType action, P parameters) { return org.ovirt.engine.core.bll.CommandsFactory.createCommand(action, parameters); }
@java.lang.Override protected void executeQueryCommand() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmInit> allInit = org.ovirt.engine.core.common.businessentities.Entities.businessEntitiesById(org.ovirt.engine.core.bll.VmHandler.getAllVmInit()); if ((org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getVms()) != null) { for (org.ovirt.engine.core.common.businessentities.VM vm : org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getVms()) { vm.getStaticData().setVmInit(allInit.get(vm.getId())); } org.ovirt.engine.core.bll.GetVmsInitQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getVms()); return; } if ((org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getTemplates()) != null) { for (org.ovirt.engine.core.common.businessentities.VmTemplate template : org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getTemplates()) { template.setVmInit(allInit.get(template.getId())); } org.ovirt.engine.core.bll.GetVmsInitQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getVms()); } }	@java.lang.Override protected void executeQueryCommand() { if ((org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getIds()) != null) { org.ovirt.engine.core.bll.GetVmsInitQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.VmHandler.getVmInitByIds(org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getIds())); } }
@java.lang.Override public void execute() { if ((connected.getCount()) == 0) { connected = new java.util.concurrent.CountDownLatch(1); } if ((subscribed.getCount()) == 0) { subscribed = new java.util.concurrent.CountDownLatch(1); } send(new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().connect().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_ACCEPT, "1.2").withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_HEART_BEAT, ((0 + ",") + (policy.getHeartBeat()))).build()); subscribtionId = java.util.UUID.randomUUID().toString(); send(new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().subscribe().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_DESTINATION, org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompClient.RESPONSE_QUEUE).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_ID, subscribtionId).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_ACK, "client").build()); }	@java.lang.Override public void execute() { if ((connected.getCount()) == 0) { connected = new java.util.concurrent.CountDownLatch(1); } if ((subscribed.getCount()) == 0) { subscribed = new java.util.concurrent.CountDownLatch(1); } send(new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().connect().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_ACCEPT, "1.2").withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_HEART_BEAT, ((0 + ",") + (reduceGracePeriod(policy.getHeartbeat())))).build()); subscribtionId = java.util.UUID.randomUUID().toString(); send(new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().subscribe().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_DESTINATION, org.ovirt.vdsm.jsonrpc.client.reactors.stomp.RESPONSE_QUEUE).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_ID, subscribtionId).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_ACK, "client").build()); }
public void runMultipleActions(final java.util.List<org.ovirt.engine.core.common.action.VdcActionType> actionTypes, final java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters, final java.util.List<org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback> callbacks, final org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback failureCallback, final java.lang.Object state, boolean aggregateErrors) { runMultipleActions(actionTypes, parameters, callbacks, failureCallback, state, aggregateErrors, (aggregateErrors ? new java.util.ArrayList<java.lang.String>() : null)); }	public void runMultipleActions(final java.util.List<org.ovirt.engine.core.common.action.VdcActionType> actionTypes, final java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters, final java.util.List<org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback> callbacks, final org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback failureCallback, final java.lang.Object state, boolean aggregateErrors) { runMultipleActions(actionTypes, parameters, callbacks, failureCallback, state, aggregateErrors, (aggregateErrors ? new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionType>() : null), (aggregateErrors ? new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase>() : null)); }
@org.junit.jupiter.api.Test public void testAdd() { try { javax.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "00000001-0001-0001-0001-000000000011", "nics"); javax.ws.rs.core.Request request = mockRequest("POST"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/apidoc#services/host_nics/methods/add", fault.getDetail()); } catch (java.lang.ClassNotFoundException | java.io.IOException e) { fail(); } }	@org.junit.jupiter.api.Test public void testAdd() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "00000001-0001-0001-0001-000000000011", "nics"); javax.ws.rs.core.Request request = mockRequest("POST"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/apidoc#services/host_nics/methods/add", fault.getDetail()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.event_subscriber> getAllForSubscriber(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("subscriber_id", id); return getCallsHandler().executeReadList("Getevent_subscriberBysubscriber_id", org.ovirt.engine.core.dao.EventDAOImpl.EventSubscriberRowMapper.instance, parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.event_subscriber> getAllForSubscriber(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("subscriber_id", id); return getCallsHandler().executeReadList("Getevent_subscriberBysubscriber_id", org.ovirt.engine.core.dao.EventDaoImpl.EventSubscriberRowMapper.instance, parameterSource); }
@java.lang.Override public org.ovirt.engine.core.compat.Guid ensureIconInDatabase(final java.lang.String icon) { try { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { final org.ovirt.engine.core.common.businessentities.VmIcon newIcon = new org.ovirt.engine.core.common.businessentities.VmIcon(org.ovirt.engine.core.compat.Guid.newGuid(), icon, null); save(newIcon); return null; } }); } catch (java.lang.RuntimeException ex) { } final java.util.List<org.ovirt.engine.core.common.businessentities.VmIcon> iconsOfRequiredData = getByDataUrl(icon); if ((iconsOfRequiredData.size()) != 1) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.VM_ICON_NOT_FOUND); } return iconsOfRequiredData.get(0).getId(); }	@java.lang.Override public void removeAllUnusedIcons() { getCallsHandler().executeModification("DeleteAllUnusedVmIcons", getCustomMapSqlParameterSource()); }
@java.lang.Override protected void executeCommand() { boolean succeeded = false; org.ovirt.engine.core.common.action.SetHaMaintenanceParameters params = ((org.ovirt.engine.core.common.action.SetHaMaintenanceParameters) (getParameters())); try { succeeded = runVdsCommand(VDSCommandType.SetHaMaintenanceMode, new org.ovirt.engine.core.common.vdscommands.SetHaMaintenanceModeVDSCommandParameters(getVds(), params.getMode(), params.getIsEnabled())).getSucceeded(); } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { log.errorFormat("Could not {0} {1} Hosted Engine HA maintenance mode on host {2}", (params.getIsEnabled() ? "enable" : "disable"), params.getMode().name().toLowerCase(), getVdsName()); } getReturnValue().setSucceeded(succeeded); }	@java.lang.Override protected void executeCommand() { boolean succeeded = false; org.ovirt.engine.core.common.action.SetHaMaintenanceParameters params = getParameters(); try { succeeded = runVdsCommand(VDSCommandType.SetHaMaintenanceMode, new org.ovirt.engine.core.common.vdscommands.SetHaMaintenanceModeVDSCommandParameters(getVds(), params.getMode(), params.getIsEnabled())).getSucceeded(); } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { log.errorFormat("Could not {0} {1} Hosted Engine HA maintenance mode on host {2}", (params.getIsEnabled() ? "enable" : "disable"), params.getMode().name().toLowerCase(), getVdsName()); } getReturnValue().setSucceeded(succeeded); }
@java.lang.Override protected void onLoad() { super.onLoad(); if ((selectionModel.getLastSelectedRow()) == (-1)) { return; } com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { setFocus(true); enforceScrollPosition(); } }); }	@java.lang.Override protected void onLoad() { super.onLoad(); if ((selectionModel.getLastSelectedRow()) == (-1)) { return; } com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { setFocus(true); } }); }
void processOnClientIpChange(org.ovirt.engine.core.compat.Guid vmId, java.lang.String newClientIp);	void processOnClientIpChange(org.ovirt.engine.core.compat.Guid vmId, java.lang.String newClientIp, java.lang.String newClientUserName);
public static void copyVmDevices(org.ovirt.engine.core.compat.Guid srcId, org.ovirt.engine.core.compat.Guid dstId, java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disks, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> ifaces, boolean isConsoleEnabled) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(dstId); org.ovirt.engine.core.common.businessentities.VmBase vmBase = (vm != null) ? vm.getStaticData() : null; boolean isVm = vmBase != null; if (!isVm) { vmBase = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().get(dstId); } java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.getVmDeviceByVmId(srcId); org.ovirt.engine.core.bll.utils.VmDeviceUtils.copyVmDevices(srcId, dstId, vm, vmBase, isVm, devices, disks, ifaces, isConsoleEnabled); }	public static void copyVmDevices(org.ovirt.engine.core.compat.Guid srcId, org.ovirt.engine.core.compat.Guid dstId, java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disks, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> ifaces, boolean soundDeviceEnabled, boolean isConsoleEnabled) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(dstId); org.ovirt.engine.core.common.businessentities.VmBase vmBase = (vm != null) ? vm.getStaticData() : null; boolean isVm = vmBase != null; if (!isVm) { vmBase = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().get(dstId); } java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.getVmDeviceByVmId(srcId); org.ovirt.engine.core.bll.utils.VmDeviceUtils.copyVmDevices(srcId, dstId, vm, vmBase, isVm, devices, disks, ifaces, soundDeviceEnabled, isConsoleEnabled); }
boolean isSpiceProxyDefined();	public boolean isSpiceAvailable();
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllDirectPermissionsForAdElement(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("ad_element_id", id); return getCallsHandler().executeReadList("GetDirectPermissionsByAdElementId", org.ovirt.engine.core.dao.PermissionDAOImpl.PermissionRowMapper.instance, parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllDirectPermissionsForAdElement(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("ad_element_id", id); return getCallsHandler().executeReadList("GetDirectPermissionsByAdElementId", org.ovirt.engine.core.dao.PermissionDaoImpl.PermissionRowMapper.instance, parameterSource); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.RemoveDiskCommand.getParameters().getEntityInfo().getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, getDiskIsBeingRemovedLockMessage())); }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.RemoveDiskCommand.getParameters().getDiskId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, getDiskIsBeingRemovedLockMessage())); }
private void UpdateGrayedOut(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lunModel) { org.ovirt.engine.ui.uicompat.Constants constants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants(); org.ovirt.engine.core.common.businessentities.LUNs lun = ((org.ovirt.engine.core.common.businessentities.LUNs) (lunModel.getEntity())); if ((!(isIgnoreGrayedOut())) && (!(lun.isAttached()))) { lunModel.setIsGrayedOut(((lun.isPartitioned()) || (!(lun.getvolume_group_id().isEmpty())))); } else { lunModel.setIsGrayedOut(lun.isAttached()); } if (lun.isPartitioned()) { lunModel.getGrayedOutReasons().add(constants.partitionedLUN()); } if ((!(lun.getvolume_group_id().isEmpty())) || (lun.isAttached())) { lunModel.getGrayedOutReasons().add(constants.alreadyInUseLUN()); } }	private void UpdateGrayedOut(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lunModel) { org.ovirt.engine.ui.uicompat.Constants constants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants(); org.ovirt.engine.ui.uicompat.Messages messages = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages(); org.ovirt.engine.core.common.businessentities.LUNs lun = ((org.ovirt.engine.core.common.businessentities.LUNs) (lunModel.getEntity())); boolean nonEmpty = (((lun.isPartitioned()) || ((lun.getStorageDomainId()) != null)) || ((lun.getDiskId()) != null)) || (((lun.getvolume_group_id()) != null) && (!(lun.getvolume_group_id().isEmpty()))); lunModel.setIsGrayedOut((isIgnoreGrayedOut() ? (lun.getDiskId()) != null : nonEmpty)); if (lun.isPartitioned()) { lunModel.getGrayedOutReasons().add(constants.partitionedLUN()); } if ((lun.getStorageDomainId()) != null) { lunModel.getGrayedOutReasons().add(messages.lunAlreadyPartOfStorageDomainWarning(lun.getStorageDomainName())); } else if ((lun.getDiskId()) != null) { lunModel.getGrayedOutReasons().add(messages.lunUsedByDiskWarning(lun.getDiskAlias())); } else if ((lun.getvolume_group_id()) != null) { lunModel.getGrayedOutReasons().add(messages.lunUsedByVGWarning(lun.getvolume_group_id())); } }
public int getMemoryOverCommit() { return memoryOverCommit; }	public java.lang.Integer getMemoryOverCommit() { return memoryOverCommit; }
public static void ProcessVmPoolOnStopVm(org.ovirt.engine.core.compat.Guid vmId, org.ovirt.engine.core.bll.context.CommandContext context) { org.ovirt.engine.core.common.businessentities.VmPoolMap map = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmPoolDao().getVmPoolMapByVmGuid(vmId); java.util.List<org.ovirt.engine.core.common.businessentities.DbUser> users = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().getAllForVm(vmId); if (((map != null) && (users != null)) && (!(users.isEmpty()))) { org.ovirt.engine.core.common.businessentities.vm_pools pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmPoolDao().get(map.getvm_pool_id()); if ((pool != null) && ((pool.getvm_pool_type()) == (org.ovirt.engine.core.common.businessentities.VmPoolType.Automatic))) { for (org.ovirt.engine.core.common.businessentities.DbUser dbUser : users) { org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.DetachUserFromVmFromPool, new org.ovirt.engine.core.common.action.VmPoolSimpleUserParameters(map.getvm_pool_id(), dbUser.getuser_id()), context); } } } else { org.ovirt.engine.core.bll.VmPoolHandler.removeVmStatelessImages(vmId, context); } org.ovirt.engine.core.bll.quota.QuotaManager.getInstance().rollbackQuotaByVmId(vmId); org.ovirt.engine.core.bll.VmHandler.removeStatelessVmUnmanagedDevices(vmId); org.ovirt.engine.core.bll.VmPoolHandler.handleProviderNetworks(vmId); }	public static void ProcessVmPoolOnStopVm(org.ovirt.engine.core.compat.Guid vmId, org.ovirt.engine.core.bll.context.CommandContext context) { org.ovirt.engine.core.common.businessentities.VmPoolMap map = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmPoolDao().getVmPoolMapByVmGuid(vmId); java.util.List<org.ovirt.engine.core.common.businessentities.DbUser> users = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().getAllForVm(vmId); if (((map != null) && (users != null)) && (!(users.isEmpty()))) { org.ovirt.engine.core.common.businessentities.VmPool pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmPoolDao().get(map.getvm_pool_id()); if ((pool != null) && ((pool.getVmPoolType()) == (org.ovirt.engine.core.common.businessentities.VmPoolType.Automatic))) { for (org.ovirt.engine.core.common.businessentities.DbUser dbUser : users) { org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.DetachUserFromVmFromPool, new org.ovirt.engine.core.common.action.VmPoolSimpleUserParameters(map.getvm_pool_id(), dbUser.getuser_id(), vmId), context); } } } else { org.ovirt.engine.core.bll.VmPoolHandler.removeVmStatelessImages(vmId, context); } org.ovirt.engine.core.bll.quota.QuotaManager.getInstance().rollbackQuotaByVmId(vmId); org.ovirt.engine.core.bll.VmHandler.removeStatelessVmUnmanagedDevices(vmId); org.ovirt.engine.core.bll.VmPoolHandler.handleProviderNetworks(vmId); }
@java.lang.Override public void setHeight(java.lang.String height) { super.setHeight(height); }	@java.lang.Override public void setHelpCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { helpCommand = command; infoAnchor.setVisible((command != null)); }
@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); addValidateMessage(EngineMessage.VAR__ACTION__REMOVE_BRICKS_START); addValidateMessage(EngineMessage.VAR__TYPE__GLUSTER_BRICK); }	@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); addValidationMessage(EngineMessage.VAR__ACTION__REMOVE_BRICKS_START); addValidationMessage(EngineMessage.VAR__TYPE__GLUSTER_BRICK); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Unassigned Logical Networks panel") java.lang.String unassignedLogicalNetworksPanel();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Unassigned Logical Networks panel") java.lang.String unassignedLogicalNetworksPanel();
protected void extractBond(java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> bonds, org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface, java.lang.String name) { if (bonds.containsKey(name)) { violations.add(VdcBllMessages.NETWORK_BOND_NAME_EXISTS); } else { bonds.put(name, iface); } }	protected void extractBondIfModified(java.util.Set<java.lang.String> bonds, org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface, java.lang.String name) { if (bonds.contains(name)) { violations.add(VdcBllMessages.NETWORK_BOND_NAME_EXISTS); } else { bonds.add(name); if (interfaceWasModified(iface)) { modifiedBonds.put(name, iface); } } }
protected boolean verifyAddVM(java.util.List<java.lang.String> reasons, org.ovirt.engine.core.compat.Guid storagePoolId, int vmPriority) { return org.ovirt.engine.core.bll.VmHandler.VerifyAddVm(reasons, getVmInterfaces().size(), getVmTemplate(), storagePoolId, vmPriority); }	protected boolean verifyAddVM(java.util.List<java.lang.String> reasons, org.ovirt.engine.core.compat.Guid storagePoolId, int vmPriority) { return org.ovirt.engine.core.bll.VmHandler.VerifyAddVm(reasons, getVmInterfaces().size(), org.ovirt.engine.core.bll.AddVmCommand.getVmTemplate(), storagePoolId, vmPriority); }
@java.lang.Override @org.ovirt.engine.api.restapi.resource.SingleEntityResource public org.ovirt.engine.api.resource.InstanceTypeResource getInstanceTypeSubResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendInstanceTypeResource(id, this)); }	@java.lang.Override @org.ovirt.engine.api.restapi.resource.SingleEntityResource public org.ovirt.engine.api.resource.InstanceTypeResource getInstanceTypeSubResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendInstanceTypeResource(id)); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage_pool runInTransaction() { getStoragePoolDAO().update(getStoragePool()); if (context != null) { context.snapshotEntity(getStoragePool()); } return null; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage_pool runInTransaction() { getStoragePoolDAO().update(getStoragePool()); return null; }
@java.lang.Override protected void Perform() { if (org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(mTicket)) { mTicket = org.ovirt.engine.core.utils.Ticketing.GenerateOTP(); } final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.SetVmTicketCommand.getVm(); final org.ovirt.engine.core.common.interfaces.IVdcUser user = org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser(); vm.setConsoleUserId(user.getUserId()); vm.setguest_cur_user_name((user.getUserName().contains("@") ? user.getUserName() : ((user.getUserName()) + "@") + (user.getDomainControler()))); final org.ovirt.engine.core.dao.VmDynamicDAO dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDAO(); if ((vm.getAllowConsoleReconnect()) || (neededPermissions)) { dao.update(vm.getDynamicData()); sendTicket(); } else { final boolean saved = dao.updateConsoleUserWithOptimisticLocking(vm.getDynamicData()); if (saved) { sendTicket(); } else { dontSendTicket(); } } }	@java.lang.Override protected void Perform() { if (org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(mTicket)) { mTicket = org.ovirt.engine.core.utils.Ticketing.GenerateOTP(); } final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.SetVmTicketCommand.getVm(); final org.ovirt.engine.core.common.interfaces.IVdcUser user = org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser(); vm.setConsoleUserId(user.getUserId()); vm.setguest_cur_user_name(user.getFQN()); final org.ovirt.engine.core.dao.VmDynamicDAO dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDAO(); if ((vm.getAllowConsoleReconnect()) || (neededPermissions)) { dao.update(vm.getDynamicData()); sendTicket(); } else { final boolean saved = dao.updateConsoleUserWithOptimisticLocking(vm.getDynamicData()); if (saved) { sendTicket(); } else { dontSendTicket(); } } }
public void setcpu_list(java.lang.String value) { this.cpu_list = value; }	public void setOnlineCpus(java.lang.String value) { this.onlineCpus = value; }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_PLACEHOLDER_CREATION)) { updateStage(LiveDiskMigrateStage.VM_REPLICATE_START); replicateDiskStart(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_START); syncImageData(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END); return true; } if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END)) { completeLiveMigration(); updateStage(LiveDiskMigrateStage.SOURCE_IMAGE_DELETION); removeImage(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getSourceStorageDomainId()); return false; } return false; }	@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_PLACEHOLDER_CREATION)) { updateStage(LiveDiskMigrateStage.VM_REPLICATE_DISK_START); replicateDiskStart(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_START); syncImageData(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END); return true; } if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END)) { updateStage(LiveDiskMigrateStage.VM_REPLICATE_DISK_FINISH); completeLiveMigration(); updateStage(LiveDiskMigrateStage.SOURCE_IMAGE_DELETION); org.ovirt.engine.core.bll.storage.lsm.LiveStorageMigrationHelper.removeImage(this, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getSourceStorageDomainId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getDestinationImageId(), AuditLogType.USER_MOVE_IMAGE_GROUP_FAILED_TO_DELETE_SRC_IMAGE); return false; } return false; }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__ACTION__UPDATE); addValidateMessage(EngineMessage.VAR__TYPE__CLUSTER_POLICY); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__UPDATE); addValidationMessage(EngineMessage.VAR__TYPE__CLUSTER_POLICY); }
protected void initGraphicsConsoles() { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getSelectedCluster(); java.lang.Integer osType = getOSType().getSelectedItem(); if ((cluster == null) || (osType == null)) { return; } initGraphicsConsoles(osType, getEffectiveCompatibilityVersion()); }	protected void initGraphicsConsoles() { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getSelectedCluster(); java.lang.Integer osType = getOSType().getSelectedItem(); if ((cluster == null) || (osType == null)) { return; } initGraphicsConsoles(osType, getCompatibilityVersion()); }
private void setDiskProfilesList(java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> diskProfiles) { if ((diskProfiles != null) && (!(diskProfiles.isEmpty()))) { getDiskProfile().setItems(diskProfiles); } org.ovirt.engine.core.compat.Guid defaultProfileId = ((((getDisk()) != null) && (isExistingDisk())) && ((getDisk().getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE))) ? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getDiskProfileId() : null; if (defaultProfileId != null) { for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile profile : diskProfiles) { if (profile.getId().equals(defaultProfileId)) { getDiskProfile().setSelectedItem(profile); return; } } org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile = new org.ovirt.engine.core.common.businessentities.profiles.DiskProfile(); diskProfile.setId(defaultProfileId); if ((getDisk()) != null) { diskProfile.setName(getDiskImage().getDiskProfileName()); } diskProfiles.add(diskProfile); getDiskProfile().setItems(diskProfiles); getDiskProfile().setSelectedItem(diskProfile); } }	private void setDiskProfilesList(java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> diskProfiles) { if ((diskProfiles != null) && (!(diskProfiles.isEmpty()))) { getDiskProfile().setItems(diskProfiles); } org.ovirt.engine.core.compat.Guid defaultProfileId = ((((getDisk()) != null) && (!(getIsNew()))) && ((getDisk().getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE))) ? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getDiskProfileId() : null; if (defaultProfileId != null) { for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile profile : diskProfiles) { if (profile.getId().equals(defaultProfileId)) { getDiskProfile().setSelectedItem(profile); return; } } org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile = new org.ovirt.engine.core.common.businessentities.profiles.DiskProfile(); diskProfile.setId(defaultProfileId); if ((getDisk()) != null) { diskProfile.setName(getDiskImage().getDiskProfileName()); } diskProfiles.add(diskProfile); getDiskProfile().setItems(diskProfiles); getDiskProfile().setSelectedItem(diskProfile); } }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Permit permit) { validateParameters(permit, "name|id"); org.ovirt.engine.api.restapi.resource.validation.ValidatorLocator.getValidator(org.ovirt.engine.api.model.Permit.class).validateEnums(permit); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.ActionGroup> actionGroups = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.ActionGroup>(); actionGroups.add(map(permit)); return performCreation(VdcActionType.AttachActionGroupsToRole, new org.ovirt.engine.core.common.action.ActionGroupsToRoleParameter(roleId, actionGroups), new org.ovirt.engine.api.restapi.resource.BackendPermitsResource.PermitIdResolver(actionGroups.get(0))); }	@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Permit permit) { validateParameters(permit, "name|id"); validateEnums(org.ovirt.engine.api.model.Permit.class, permit); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.ActionGroup> actionGroups = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.ActionGroup>(); actionGroups.add(map(permit)); return performCreation(VdcActionType.AttachActionGroupsToRole, new org.ovirt.engine.core.common.action.ActionGroupsToRoleParameter(roleId, actionGroups), new org.ovirt.engine.api.restapi.resource.BackendPermitsResource.PermitIdResolver(actionGroups.get(0))); }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.network.NetworkView network = getEntity(); getNewCommand().setIsExecutionAllowed(network.isVmNetwork()); getEditCommand().setIsExecutionAllowed((((getSelectedItems()) != null) && ((getSelectedItems().size()) == 1))); getRemoveCommand().setIsExecutionAllowed((((getSelectedItems()) != null) && ((getSelectedItems().size()) > 0))); }	private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.network.NetworkView network = getEntity(); getNewCommand().setIsExecutionAllowed(((network != null) && (network.isVmNetwork()))); getEditCommand().setIsExecutionAllowed((((getSelectedItems()) != null) && ((getSelectedItems().size()) == 1))); getRemoveCommand().setIsExecutionAllowed((((getSelectedItems()) != null) && ((getSelectedItems().size()) > 0))); }
protected boolean canRunActions(java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> returnValues) { if ((getCommands().size()) == 1) { org.ovirt.engine.core.utils.CorrelationIdTracker.setCorrelationId(getCommands().get(0).getCorrelationId()); returnValues.add(getCommands().get(0).canDoActionOnly()); } else { checkCanDoActionsAsynchronously(returnValues); } if (isRunOnlyIfAllCanDoPass) { for (org.ovirt.engine.core.common.action.VdcReturnValueBase value : returnValues) { if (!(value.getCanDoAction())) { return false; } } } return true; }	private boolean canRunActions(java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> returnValues) { if ((getCommands().size()) == 1) { org.ovirt.engine.core.utils.CorrelationIdTracker.setCorrelationId(getCommands().get(0).getCorrelationId()); returnValues.add(getCommands().get(0).canDoActionOnly()); } else { checkCanDoActionsAsynchronously(returnValues); } if (isRunOnlyIfAllCanDoPass) { for (org.ovirt.engine.core.common.action.VdcReturnValueBase value : returnValues) { if (!(value.getCanDoAction())) { return false; } } } return true; }
@java.lang.Override public void markAsValid() { isValid = true; applyCommonValidationStyles(); getValidatedWidgetStyle().setBorderColor("gray"); getValidatedWidget().setTitle(null); }	@java.lang.Override public void markAsValid() { valid = true; applyCommonValidationStyles(); getValidatedWidgetStyle().setBorderColor("gray"); getValidatedWidget().setTitle(null); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmNetworkInterface mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.VmNetworkInterface entity = new org.ovirt.engine.core.common.businessentities.VmNetworkInterface(); entity.getStatistics().setId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("id"))); entity.getStatistics().setReceiveRate(rs.getDouble("rx_rate")); entity.getStatistics().setTransmitRate(rs.getDouble("tx_rate")); entity.getStatistics().setReceiveDropRate(rs.getDouble("rx_drop")); entity.getStatistics().setTransmitDropRate(rs.getDouble("tx_drop")); entity.getStatistics().setStatus(org.ovirt.engine.core.common.businessentities.InterfaceStatus.forValue(rs.getInt("iface_status"))); entity.setType(((java.lang.Integer) (rs.getObject("type")))); entity.setMacAddress(rs.getString("mac_addr")); entity.setNetworkName(rs.getString("network_name")); entity.setName(rs.getString("name")); entity.setVmId(org.ovirt.engine.core.compat.NGuid.createGuidFromString(rs.getString("vm_guid"))); entity.setVmTemplateId(org.ovirt.engine.core.compat.NGuid.createGuidFromString(rs.getString("vmt_guid"))); entity.setVmName(rs.getString("vm_name")); entity.setId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("id"))); entity.setSpeed(((java.lang.Integer) (rs.getObject("speed")))); entity.setActive(rs.getBoolean("is_plugged")); entity.setActive(rs.getBoolean("promisc")); return entity; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmNetworkInterface mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.VmNetworkInterface entity = new org.ovirt.engine.core.common.businessentities.VmNetworkInterface(); entity.getStatistics().setId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("id"))); entity.getStatistics().setReceiveRate(rs.getDouble("rx_rate")); entity.getStatistics().setTransmitRate(rs.getDouble("tx_rate")); entity.getStatistics().setReceiveDropRate(rs.getDouble("rx_drop")); entity.getStatistics().setTransmitDropRate(rs.getDouble("tx_drop")); entity.getStatistics().setStatus(org.ovirt.engine.core.common.businessentities.InterfaceStatus.forValue(rs.getInt("iface_status"))); entity.setType(((java.lang.Integer) (rs.getObject("type")))); entity.setMacAddress(rs.getString("mac_addr")); entity.setNetworkName(rs.getString("network_name")); entity.setName(rs.getString("name")); entity.setVmId(org.ovirt.engine.core.compat.NGuid.createGuidFromString(rs.getString("vm_guid"))); entity.setVmTemplateId(org.ovirt.engine.core.compat.NGuid.createGuidFromString(rs.getString("vmt_guid"))); entity.setVmName(rs.getString("vm_name")); entity.setId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("id"))); entity.setSpeed(((java.lang.Integer) (rs.getObject("speed")))); entity.setActive(rs.getBoolean("is_plugged")); entity.setPortMirroring(rs.getBoolean("port_mirroring")); return entity; }
@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); addValidateMessage(EngineMessage.VAR__ACTION__FREEZE); addValidateMessage(EngineMessage.VAR__TYPE__VM); }	@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); addValidationMessage(EngineMessage.VAR__ACTION__FREEZE); addValidationMessage(EngineMessage.VAR__TYPE__VM); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterHookEnable(java.lang.String glusterCommand, java.lang.String stage, java.lang.String hookName) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterHook.enable").withParameter("glusterCmd", glusterCommand).withParameter("hookLevel", stage).withParameter("hookName", hookName).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterHookEnable(java.lang.String glusterCommand, java.lang.String stage, java.lang.String hookName) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterHook.enable").withParameter("glusterCmd", glusterCommand).withParameter("hookLevel", stage).withParameter("hookName", hookName).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@org.junit.Test public void canDoActionFailsOnRemoveLastAdGroupWithSuperUserPrivileges() throws java.lang.Exception { mockIsLastSuperUserGroup(true); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(EngineMessages.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString())); }	@org.junit.Test public void canDoActionFailsOnRemoveLastAdGroupWithSuperUserPrivileges() throws java.lang.Exception { mockIsLastSuperUserGroup(true); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString())); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Destination Cluster Host") java.lang.String volumeSubTabGeoRepSlaveClusterHostColumn();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Destination Host") java.lang.String volumeSubTabGeoRepSlaveClusterHostColumn();
public boolean isRequired() { return required; }	public java.lang.Boolean isRequired() { return required; }
private void onTest() { if (!(validateConnectionSettings())) { getTestResult().setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().testFailedInsufficientParams()); return; } flush(); startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TestProviderConnectivity, new org.ovirt.engine.core.common.action.ProviderParameters(provider), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue(); if (isFailedOnSSL(res)) { org.ovirt.engine.ui.frontend.AsyncQuery getCertChainQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getCertChainQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { if (result != null) { certificate = ((java.lang.String) (result)); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = getImportChainConfirmationModel(certificate); sourceListModel.setConfirmWindow(confirmationModel); } else { stopProgress(); getTestResult().setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().testFailedUnknownErrorMsg()); } } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getProviderCertificate(getCertChainQuery, provider); } else { stopProgress(); setTestResultValue(res); } } }, null, false); }	private void onTest() { if (!(validateConnectionSettings())) { getTestResult().setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().testFailedInsufficientParams()); return; } flush(); startProgress(null); if (provider.getUrl().startsWith(Uri.SCHEME_HTTPS)) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getProviderCertificateChain(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { boolean ok = false; certificate = null; if (returnValue != null) { java.util.List<org.ovirt.engine.core.common.businessentities.CertificateInfo> certs = ((java.util.List<org.ovirt.engine.core.common.businessentities.CertificateInfo>) (returnValue)); if (!(certs.isEmpty())) { certificate = certs.get(((certs.size()) - 1)).getPayload(); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = getImportCertificateConfirmationModel(certs.get(0)); sourceListModel.setConfirmWindow(confirmationModel); ok = true; } } if (!ok) { stopProgress(); getTestResult().setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().testFailedUnknownErrorMsg()); } } }), provider); } else { testProviderConnectivity(); } }
private void createImageForVmMetaData() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CreateImage, new org.ovirt.engine.core.common.vdscommands.CreateImageVDSCommandParameters(storagePool.getId(), storageDomainId, vmConfImageGroupId, MemoryUtils.METADATA_SIZE_IN_BYTES, org.ovirt.engine.core.common.businessentities.storage.VolumeType.Sparse, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.RAW, vmConfVolumeId, "")); if (!(retVal.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.VolumeCreationError, "Failed to create image for vm configuration!"); } org.ovirt.engine.core.compat.Guid taskId = enclosingCommand.persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder.CREATE_IMAGE_FOR_VM_TASK_KEY); org.ovirt.engine.core.compat.Guid guid = enclosingCommand.createTask(taskId, retVal.getCreationInfo(), enclosingCommand.getActionType()); enclosingCommand.getTaskIdList().add(guid); }	private void createImageForVmMetaData() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CreateImage, new org.ovirt.engine.core.common.vdscommands.CreateImageVDSCommandParameters(storagePool.getId(), storageDomainId, vmConfImageGroupId, MemoryUtils.METADATA_SIZE_IN_BYTES, org.ovirt.engine.core.common.businessentities.storage.VolumeType.Preallocated, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.RAW, vmConfVolumeId, "")); if (!(retVal.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.VolumeCreationError, "Failed to create image for vm configuration!"); } org.ovirt.engine.core.compat.Guid taskId = enclosingCommand.persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder.CREATE_IMAGE_FOR_VM_TASK_KEY); org.ovirt.engine.core.compat.Guid guid = enclosingCommand.createTask(taskId, retVal.getCreationInfo(), enclosingCommand.getActionType()); enclosingCommand.getTaskIdList().add(guid); }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hookEntity) { if (hookEntity.hasConflicts()) { return resources.alertImage(); } return null; }	@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hookEntity) { if (hookEntity.hasConflicts()) { return org.ovirt.engine.ui.webadmin.widget.table.column.GlusterHookSyncStatusColumn.resources.alertImage(); } return null; }
private void MoveVMsToUnknown() { addMigratedVmsNotUpYet(); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().getAllRunningForVds(getVdsId()); for (org.ovirt.engine.core.common.businessentities.VM vm : vmList) { destroyVmOnDestination(vm); org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().runVdsCommand(VDSCommandType.SetVmStatus, new org.ovirt.engine.core.common.vdscommands.SetVmStatusVDSCommandParameters(vm.getId(), org.ovirt.engine.core.common.businessentities.VMStatus.Unknown)); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.setVmId(vm.getId()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.VM_SET_TO_UNKNOWN_STATUS); } }	private void moveVMsToUnknown() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = getVmsToMoveToUnknown(); for (org.ovirt.engine.core.common.businessentities.VM vm : vmList) { destroyVmOnDestination(vm); org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().runVdsCommand(VDSCommandType.SetVmStatus, new org.ovirt.engine.core.common.vdscommands.SetVmStatusVDSCommandParameters(vm.getId(), org.ovirt.engine.core.common.businessentities.VMStatus.Unknown)); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.setVmId(vm.getId()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.VM_SET_TO_UNKNOWN_STATUS); } }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Any Host in Cluster") java.lang.String anyHostInCluster();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Any Host in Cluster") java.lang.String anyHostInCluster();
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>> _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> list = getClusterByServiceList(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>) (source)), supportsVirtService, supportsGlusterService); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return list; } return new java.util.ArrayList<>(); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> convert(java.lang.Object source) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> list = getClusterByServiceList(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>) (source)), supportsVirtService, supportsGlusterService); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return list; } return new java.util.ArrayList<>(); }
@org.junit.Test public void shouldDetectNumaPinning() { invalidVM.setvNumaNodeList(java.util.Arrays.asList(createVmNumaNode(1, java.util.Arrays.asList(createVdsNumaNode(1))))); assertThat(validator.isVmReadyForUpgrade(invalidVM)).contains(UPGRADE_ERROR.VM_NUMA_PINNED); }	@org.junit.Test public void shouldDetectNumaPinning() { invalidVM.setvNumaNodeList(java.util.Arrays.asList(createVmNumaNode(1, java.util.Arrays.asList(createVdsNumaNode(1))))); assertThat(validator.isVmReadyForUpgrade(invalidVM)).contains(UpgradeError.VM_NUMA_PINNED); }
@org.junit.Test public void updateStatusOfImagesByImageGroupId() { org.ovirt.engine.core.common.businessentities.storage.Image image = dao.get(org.ovirt.engine.core.dao.ImageDaoTest.EXISTING_IMAGE_ID); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = dbFacade.getDiskImageDao().getAllSnapshotsForImageGroup(image.getDiskId()); assertFalse(((snapshots.size()) == 1)); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : snapshots) { assertNotSame(ImageStatus.LOCKED, diskImage.getImageStatus()); } dao.updateStatusOfImagesByImageGroupId(image.getDiskId(), ImageStatus.LOCKED); snapshots = dbFacade.getDiskImageDao().getAllSnapshotsForImageGroup(image.getDiskId()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : snapshots) { assertEquals(ImageStatus.LOCKED, diskImage.getImageStatus()); } }	@org.junit.Test public void updateStatusOfImagesByImageGroupId() { org.ovirt.engine.core.common.businessentities.storage.Image image = dao.get(org.ovirt.engine.core.dao.ImageDaoTest.EXISTING_IMAGE_ID); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = dbFacade.getDiskImageDao().getAllSnapshotsForImageGroup(image.getDiskId()); assertNotEquals(1, snapshots.size()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : snapshots) { assertNotSame(ImageStatus.LOCKED, diskImage.getImageStatus()); } dao.updateStatusOfImagesByImageGroupId(image.getDiskId(), ImageStatus.LOCKED); snapshots = dbFacade.getDiskImageDao().getAllSnapshotsForImageGroup(image.getDiskId()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : snapshots) { assertEquals(ImageStatus.LOCKED, diskImage.getImageStatus()); } }
private com.google.gwt.safehtml.shared.SafeHtml buildWarnings(java.util.List<org.ovirt.engine.core.common.businessentities.ClusterEditWarnings.Warning> warnings) { com.google.gwt.safehtml.shared.SafeHtmlBuilder builder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); for (org.ovirt.engine.core.common.businessentities.ClusterEditWarnings.Warning warning : warnings) { builder.append(warningTemplates.warningTitle(warning.getMainMessage())); builder.append(warningTemplates.warningList(buildWarningDetails(warning.getDetailsByName()))); } return builder.toSafeHtml(); }	private com.google.gwt.safehtml.shared.SafeHtml buildWarnings(java.util.List<org.ovirt.engine.core.common.businessentities.ClusterEditWarnings.Warning> warnings) { com.google.gwt.safehtml.shared.SafeHtmlBuilder builder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); for (org.ovirt.engine.core.common.businessentities.ClusterEditWarnings.Warning warning : warnings) { builder.append(warningTemplates.warningTitle(org.ovirt.engine.ui.webadmin.section.main.view.popup.cluster.ClusterWarningsPopupView.localize(warning.getMainMessage()))); builder.append(warningTemplates.warningList(buildWarningDetails(warning.getDetailsByName()))); } return builder.toSafeHtml(); }
@java.lang.Override public int extractOsType(org.ovirt.engine.core.common.businessentities.VmTemplate item) { return item.getOs(); }	@java.lang.Override public int extractOsType(org.ovirt.engine.core.common.businessentities.VmTemplate item) { return item.getOsId(); }
@java.lang.Override protected boolean canDoAction() { if (org.ovirt.engine.core.bll.ChangeDiskCommand.shouldSkipCommandExecutionCached()) { return true; } if ((org.ovirt.engine.core.bll.ChangeDiskCommand.getVm()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.ChangeDiskCommand.canRunActionOnNonManagedVm())) { return false; } if (!(org.ovirt.engine.core.bll.ChangeDiskCommand.getVm().isRunningOrPaused())) { return org.ovirt.engine.core.bll.ChangeDiskCommand.failVmStatusIllegal(); } if (((org.ovirt.engine.core.bll.storage.domains.IsoDomainListSyncronizer.getInstance().findActiveISODomain(org.ovirt.engine.core.bll.ChangeDiskCommand.getVm().getStoragePoolId())) == null) && (!(org.apache.commons.lang.StringUtils.isEmpty(cdImagePath)))) { return failCanDoAction(EngineMessage.VM_CANNOT_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO); } if ((org.apache.commons.lang.StringUtils.isNotEmpty(cdImagePath)) && (!(org.apache.commons.lang.StringUtils.endsWithIgnoreCase(cdImagePath, ValidationUtils.ISO_SUFFIX)))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_INVALID_CDROM_DISK_FORMAT); } return true; }	@java.lang.Override protected boolean canDoAction() { if (org.ovirt.engine.core.bll.ChangeDiskCommand.shouldSkipCommandExecutionCached()) { return true; } if ((org.ovirt.engine.core.bll.ChangeDiskCommand.getVm()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.ChangeDiskCommand.canRunActionOnNonManagedVm())) { return false; } if (!(org.ovirt.engine.core.bll.ChangeDiskCommand.getVm().isRunningOrPaused())) { return org.ovirt.engine.core.bll.ChangeDiskCommand.failVmStatusIllegal(); } if (((org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.getInstance().findActiveISODomain(org.ovirt.engine.core.bll.ChangeDiskCommand.getVm().getStoragePoolId())) == null) && (!(org.apache.commons.lang.StringUtils.isEmpty(cdImagePath)))) { return failCanDoAction(EngineMessage.VM_CANNOT_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO); } if ((org.apache.commons.lang.StringUtils.isNotEmpty(cdImagePath)) && (!(org.apache.commons.lang.StringUtils.endsWithIgnoreCase(cdImagePath, ValidationUtils.ISO_SUFFIX)))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_INVALID_CDROM_DISK_FORMAT); } return true; }
public void setVmName(java.lang.String VmName) { this.VmName = VmName; }	public void setVmName(java.lang.String vmName) { this.vmName = vmName; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingResources(java.lang.Class<T> type) { java.util.List<T> list = new java.util.ArrayList<>(); synchronized(this) { for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : pendingResources.values()) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } } return list; }	public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingResources(java.lang.Class<T> type) { java.util.List<T> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : pendingResources.values()) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } return list; }
protected static void updateAllDiskImageSnapshotsStatusWithCompensation(final org.ovirt.engine.core.compat.Guid diskId, final org.ovirt.engine.core.common.businessentities.ImageStatus status, org.ovirt.engine.core.common.businessentities.ImageStatus statusForCompensation, final org.ovirt.engine.core.bll.context.CompensationContext compensationContext) { if (compensationContext != null) { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> diskSnapshots = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskImageDao().getAllSnapshotsForImageGroup(diskId); for (org.ovirt.engine.core.common.businessentities.DiskImage diskSnapshot : diskSnapshots) { diskSnapshot.setImageStatus(statusForCompensation); compensationContext.snapshotEntityStatus(diskSnapshot.getImage()); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getImageDao().updateStatusOfImagesByImageGroupId(diskId, status); compensationContext.stateChanged(); return null; } }); } else { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getImageDao().updateStatusOfImagesByImageGroupId(diskId, status); } }	protected static void updateAllDiskImageSnapshotsStatusWithCompensation(final org.ovirt.engine.core.compat.Guid diskId, final org.ovirt.engine.core.common.businessentities.ImageStatus status, org.ovirt.engine.core.common.businessentities.ImageStatus statusForCompensation, final org.ovirt.engine.core.bll.context.CompensationContext compensationContext) { if (compensationContext != null) { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> diskSnapshots = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskImageDao().getAllSnapshotsForImageGroup(diskId); for (org.ovirt.engine.core.common.businessentities.DiskImage diskSnapshot : diskSnapshots) { diskSnapshot.setImageStatus(statusForCompensation); compensationContext.snapshotEntityStatus(diskSnapshot.getImage()); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getImageDao().updateStatusOfImagesByImageGroupId(diskId, status); compensationContext.stateChanged(); return null; } }); } else { org.ovirt.engine.core.bll.ImagesHandler.updateAllDiskImageSnapshotsStatus(diskId, status); } }
protected org.ovirt.engine.core.common.businessentities.VmStatic getVm(org.ovirt.engine.api.model.Template template) { org.ovirt.engine.core.common.businessentities.VM vm; if (template.getVm().isSetId()) { vm = getEntity(org.ovirt.engine.api.model.VM.class, VdcQueryType.GetVmByVmId, new org.ovirt.engine.core.common.queries.GetVmByVmIdParameters(asGuid(template.getVm().getId())), template.getVm().getId()); } else if (isFiltered()) { vm = getEntity(org.ovirt.engine.api.model.VM.class, VdcQueryType.GetVmByVmName, new org.ovirt.engine.core.common.queries.GetVmByVmNameParameters(template.getVm().getName()), template.getVm().getName()); } else { vm = getEntity(org.ovirt.engine.api.model.VM.class, SearchType.VM, ("VM: name=" + (template.getVm().getName()))); } return vm.getStaticData(); }	protected org.ovirt.engine.core.common.businessentities.VmStatic getVm(org.ovirt.engine.core.common.businessentities.VDSGroup cluster, org.ovirt.engine.api.model.Template template) { org.ovirt.engine.core.common.businessentities.VM vm; if (template.getVm().isSetId()) { vm = getEntity(org.ovirt.engine.api.model.VM.class, VdcQueryType.GetVmByVmId, new org.ovirt.engine.core.common.queries.GetVmByVmIdParameters(asGuid(template.getVm().getId())), template.getVm().getId()); } else if (isFiltered()) { org.ovirt.engine.core.compat.Guid dataCenterId = null; if ((cluster != null) && ((cluster.getStoragePoolId()) != null)) { dataCenterId = asGuid(cluster.getStoragePoolId()); } vm = getEntity(org.ovirt.engine.api.model.VM.class, VdcQueryType.GetVmByVmNameForDataCenter, new org.ovirt.engine.core.common.queries.GetVmByVmNameForDataCenterParameters(dataCenterId, template.getVm().getName()), template.getVm().getName()); } else { vm = getEntity(org.ovirt.engine.api.model.VM.class, SearchType.VM, ("VM: name=" + (template.getVm().getName()))); } return vm.getStaticData(); }
void initTable(org.ovirt.engine.ui.common.widget.table.SimpleActionTable<org.ovirt.engine.core.common.businessentities.AuditLog> table) { table.addColumn(new org.ovirt.engine.ui.common.widget.table.column.AuditLogSeverityColumn(), constants.empty(), "30px"); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.AuditLog> logTimeColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractFullDateTimeColumn<org.ovirt.engine.core.common.businessentities.AuditLog>() { @java.lang.Override protected java.util.Date getRawValue(org.ovirt.engine.core.common.businessentities.AuditLog object) { return object.getLogTime(); } @java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.AuditLog object) { return null; } }; table.addColumn(logTimeColumn, constants.timeEvent(), "160px"); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.AuditLog> messageColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.AuditLog>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.AuditLog object) { return object.getMessage(); } @java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.AuditLog object) { return null; } }; table.addColumn(messageColumn, constants.messageEvent()); }	void initTable(org.ovirt.engine.ui.common.widget.table.SimpleActionTable<org.ovirt.engine.core.common.businessentities.AuditLog> table) { table.addColumn(new org.ovirt.engine.ui.common.widget.table.column.AuditLogSeverityColumn(), org.ovirt.engine.ui.webadmin.widget.footer.AlertsEventsFooterView.constants.empty(), "30px"); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.AuditLog> logTimeColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractFullDateTimeColumn<org.ovirt.engine.core.common.businessentities.AuditLog>() { @java.lang.Override protected java.util.Date getRawValue(org.ovirt.engine.core.common.businessentities.AuditLog object) { return object.getLogTime(); } }; table.addColumn(logTimeColumn, org.ovirt.engine.ui.webadmin.widget.footer.AlertsEventsFooterView.constants.timeEvent(), "160px"); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.AuditLog> messageColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.AuditLog>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.AuditLog object) { return object.getMessage(); } }; table.addColumn(messageColumn, org.ovirt.engine.ui.webadmin.widget.footer.AlertsEventsFooterView.constants.messageEvent()); }
static void addIoTuneParams(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.String, java.lang.Long> ioTune) { if (org.ovirt.engine.core.common.FeatureSupported.storageQoS(vm.getVdsGroupCompatibilityVersion())) { if (ioTune != null) { if ((vmDevice.getSpecParams()) == null) { vmDevice.setSpecParams(new java.util.HashMap<java.lang.String, java.lang.Object>()); } vmDevice.getSpecParams().put(VdsProperties.Iotune, ioTune); } } }	static void handleIoTune(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.common.businessentities.DiskImage diskImage, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskProfileStorageQosMap, java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<java.lang.String, java.lang.Long>> storageQosIoTuneMap) { if (org.ovirt.engine.core.common.FeatureSupported.storageQoS(vm.getVdsGroupCompatibilityVersion())) { java.util.Map<java.lang.String, java.lang.Long> ioTune = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.buildIoTune(diskImage, diskProfileStorageQosMap, storageQosIoTuneMap); if (ioTune != null) { if ((vmDevice.getSpecParams()) == null) { vmDevice.setSpecParams(new java.util.HashMap<java.lang.String, java.lang.Object>()); } vmDevice.getSpecParams().put(VdsProperties.Iotune, ioTune); } } }
@org.junit.Test public void canDoActionMaxBlockDiskSizeCheckFails() { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskCommandTest.createParameters(); parameters.setDiskInfo(org.ovirt.engine.core.bll.AddDiskCommandTest.createDiskImage(((org.ovirt.engine.core.bll.AddDiskCommandTest.MAX_BLOCK_SIZE) * 2))); initializeCommand(storageId, parameters); mockVm(); mockStorageDomain(storageId, StorageType.ISCSI); mockStoragePoolIsoMap(); mockMaxPciSlots(); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(EngineMessages.ACTION_TYPE_FAILED_DISK_MAX_SIZE_EXCEEDED.toString())); }	@org.junit.Test public void canDoActionMaxBlockDiskSizeCheckFails() { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskCommandTest.createParameters(); parameters.setDiskInfo(org.ovirt.engine.core.bll.AddDiskCommandTest.createDiskImage(((org.ovirt.engine.core.bll.AddDiskCommandTest.MAX_BLOCK_SIZE) * 2))); initializeCommand(storageId, parameters); mockVm(); mockStorageDomain(storageId, StorageType.ISCSI); mockStoragePoolIsoMap(); mockMaxPciSlots(); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_DISK_MAX_SIZE_EXCEEDED.toString())); }
public org.ovirt.engine.core.bll.ValidationResult virtIoRngSupported() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessages.ACTION_TYPE_FAILED_RNG_SOURCE_NOT_SUPPORTED).unless(((cluster.getRequiredRngSources().isEmpty()) || (virtIoRngSupportedInCluster()))); }	public org.ovirt.engine.core.bll.ValidationResult virtIoRngSupported() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_RNG_SOURCE_NOT_SUPPORTED).unless(((cluster.getRequiredRngSources().isEmpty()) || (virtIoRngSupportedInCluster()))); }
@org.junit.Test public void validateVmShareableDisk() { createParameters(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); assertFalse(command.validate()); assertTrue(command.getReturnValue().getValidateMessages().contains(EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED.toString())); }	@org.junit.Test public void validateVmShareableDisk() { createParameters(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); assertFalse(command.validate()); assertTrue(command.getReturnValue().getValidationMessages().contains(EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED.toString())); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel value) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(constants.rebootVm()); }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel value) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.userportal.section.main.view.tab.extended.SideTabExtendedVirtualMachineView.constants.rebootVm()); }
@org.junit.Test public void noAllVfsAreFree() { allVfsAreFreeTest(org.ovirt.engine.core.bll.validator.VfsConfigValidatorTest.NUM_OF_VFS, ((org.ovirt.engine.core.bll.validator.VfsConfigValidatorTest.NUM_OF_VFS) - 1)); assertThat(validator.allVfsAreFree(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NUM_OF_VFS_CANNOT_BE_CHANGED, java.lang.String.format(VfsConfigValidator.NIC_NAME_REPLACEMENT, nic.getName()))); }	@org.junit.Test public void notAllVfsAreFree() { allVfsAreFreeTest(false); assertThat(validator.allVfsAreFree(hostNicVfsConfigHelper), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NUM_OF_VFS_CANNOT_BE_CHANGED, java.lang.String.format(VfsConfigValidator.NIC_NAME_REPLACEMENT, nic.getName()))); }
private org.ovirt.engine.core.bll.ValidationResult isVmInterfacesAttachedToVmNetworks(final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks, java.util.Set<java.lang.String> interfaceNetworkNames) { java.util.List<java.lang.String> nonVmNetworkNames = org.ovirt.engine.core.utils.NetworkUtils.filterNonVmNetworkNames(clusterNetworks, interfaceNetworkNames); if ((nonVmNetworkNames.size()) > 0) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NOT_A_VM_NETWORK, java.lang.String.format("$networks %1$s", org.apache.commons.lang.StringUtils.join(nonVmNetworkNames, ","))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	protected org.ovirt.engine.core.bll.ValidationResult isVmInterfacesAttachedToVmNetworks(final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks, java.util.Set<java.lang.String> interfaceNetworkNames) { java.util.List<java.lang.String> nonVmNetworkNames = org.ovirt.engine.core.utils.NetworkUtils.filterNonVmNetworkNames(clusterNetworks, interfaceNetworkNames); return nonVmNetworkNames.isEmpty() ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NOT_A_VM_NETWORK, java.lang.String.format("$networks %1$s", org.apache.commons.lang.StringUtils.join(nonVmNetworkNames, ","))); }
public void migrateMacsToAnotherMacPoolIfNeeded(org.ovirt.engine.core.common.businessentities.Cluster sourceCluster, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceCluster); java.util.Objects.requireNonNull(targetMacPoolId); java.util.Objects.requireNonNull(commandContext); org.ovirt.engine.core.compat.Guid sourceMacPoolId = java.util.Objects.requireNonNull(sourceCluster.getMacPoolId()); org.ovirt.engine.core.compat.Guid clusterId = java.util.Objects.requireNonNull(sourceCluster.getId()); boolean macPoolChanged = !(sourceMacPoolId.equals(targetMacPoolId)); if (macPoolChanged) { java.util.List<java.lang.String> macsToMigrate = getMacsForClusterId(clusterId); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macsToMigrate, commandContext); } }	public void migrateMacsToAnotherMacPool(org.ovirt.engine.core.common.businessentities.Cluster sourceCluster, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceCluster); java.util.Objects.requireNonNull(targetMacPoolId); java.util.Objects.requireNonNull(commandContext); org.ovirt.engine.core.compat.Guid sourceMacPoolId = java.util.Objects.requireNonNull(sourceCluster.getMacPoolId()); org.ovirt.engine.core.compat.Guid clusterId = java.util.Objects.requireNonNull(sourceCluster.getId()); boolean macPoolChanged = !(sourceMacPoolId.equals(targetMacPoolId)); if (macPoolChanged) { java.util.List<java.lang.String> macsToMigrate = getMacsForClusterId(clusterId); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macsToMigrate, commandContext); } }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Gluster command is required.") java.lang.String ACTION_TYPE_FAILED_GLUSTER_COMMAND_IS_REQUIRED();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Gluster hook does not exist.") java.lang.String ACTION_TYPE_FAILED_GLUSTER_HOOK_DOES_NOT_EXIST();
void updateListHeader(org.ovirt.engine.ui.uicommonweb.models.storage.DisksAllocationModel model) { java.lang.String width = (showQuota) ? "85px" : "100px"; listHeader = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, ((com.google.gwt.user.cellview.client.CellTable.Resources) (com.google.gwt.core.client.GWT.create(org.ovirt.engine.ui.common.PopupSimpleTableResources.class))), true); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.aliasDisk(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.provisionedSizeDisk(), width); if (showVolumeType) listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.allocationDisk(), width); if (showSource) listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.sourceDisk(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.targetDisk(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.diskProfile(), width); if (showQuota) listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.quotaDisk(), width); listHeader.setRowData(new java.util.ArrayList()); listHeader.setWidth("100%", true); diskListHeaderPanel.setWidget(listHeader); }	void updateListHeader(org.ovirt.engine.ui.uicommonweb.models.storage.DisksAllocationModel model) { java.lang.String width = "85px"; listHeader = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, ((com.google.gwt.user.cellview.client.CellTable.Resources) (com.google.gwt.core.client.GWT.create(org.ovirt.engine.ui.common.PopupSimpleTableResources.class))), true); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.aliasDisk(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.provisionedSizeDisk(), width); if (showVolumeType) listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.allocationDisk(), width); if (showSource) listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.sourceDisk(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.targetDisk(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.diskProfile(), width); if (showQuota) listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.quotaDisk(), width); listHeader.setRowData(new java.util.ArrayList()); listHeader.setWidth("100%", true); diskListHeaderPanel.setWidget(listHeader); }
@org.junit.Test public void canDoPass() { when(hostedEngineHelper.getStorageDomain()).thenReturn(null); org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain(); int i = new java.util.Random().nextInt(SUPPORTED_DOMAIN_TYPES.length); sd.setStorageType(org.ovirt.engine.core.bll.storage.domains.ImportHostedEngineStorageDomainCommand.SUPPORTED_DOMAIN_TYPES[i]); sd.setStorageName(org.ovirt.engine.core.bll.storage.domains.ImportHostedEngineStorageDomainCommandTest.HOSTED_STORAGE_NAME); doReturn(createQueryReturnValueWith(java.util.Arrays.asList(sd))).when(backend).runInternalQuery(eq(VdcQueryType.GetExistingStorageDomainList), any(org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class)); assertTrue(cmd.canDoAction()); }	@org.junit.Test public void canDoPass() { when(hostedEngineHelper.getStorageDomain()).thenReturn(null); org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain(); int i = new java.util.Random().nextInt(SUPPORTED_DOMAIN_TYPES.length); sd.setStorageType(org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.SUPPORTED_DOMAIN_TYPES[i]); sd.setStorageName(org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommandTest.HOSTED_STORAGE_NAME); doReturn(createQueryReturnValueWith(java.util.Arrays.asList(sd))).when(backend).runInternalQuery(eq(VdcQueryType.GetExistingStorageDomainList), any(org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class)); assertTrue(cmd.canDoAction()); }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { result.add(new org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.NAME), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.CPU_AVERAGE), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.MEM_AVERAGE))); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result.add(new org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDao.NAME), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDao.CPU_AVERAGE), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDao.MEM_AVERAGE))); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (((currentErrataModel.getMessage()) != null) && (!(currentErrataModel.getMessage().isEmpty()))) { org.ovirt.engine.ui.webadmin.section.main.presenter.tab.host.SubTabHostGeneralHostErrataPresenter.logger.info("bus published message that there was a query error. update view."); getView().showErrorMessage(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(currentErrataModel.getMessage())); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (((currentErrataCountModel.getMessage()) != null) && (!(currentErrataCountModel.getMessage().isEmpty()))) { getView().showErrorMessage(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(currentErrataCountModel.getMessage())); } }
@java.lang.Override protected boolean validate() { return org.ovirt.engine.core.bll.storage.pool.AbstractSyncLunsCommand.checkStoragePool(); }	@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.storage.pool.AbstractSyncLunsCommand.checkStoragePool())) { return false; } return super.validate(); }
protected org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator createMultipleStorageDomainsValidator(java.util.Collection<org.ovirt.engine.core.common.businessentities.DiskImage> diskImages) { return new org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator(params.getStoragePoolId(), org.ovirt.engine.core.bll.ImagesHandler.getAllStorageIdsForImageIds(diskImages)); }	public org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator createMultipleStorageDomainsValidator(java.util.Collection<org.ovirt.engine.core.common.businessentities.DiskImage> diskImages) { return new org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator(params.getStoragePoolId(), org.ovirt.engine.core.bll.ImagesHandler.getAllStorageIdsForImageIds(diskImages)); }
public final void AddFields(java.lang.Iterable<java.lang.Enum<?>> statuses, java.lang.String... fields) { for (java.lang.String field : fields) { AddField(statuses, field); } }	public final <T extends java.lang.Enum<T>> void AddFields(java.lang.Iterable<T> statuses, java.lang.String... fields) { for (java.lang.String field : fields) { AddField(statuses, field); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listFailedAutorecoverables() { return getCallsHandler().executeReadList("GetFailingStorage_domains", org.ovirt.engine.core.dao.StorageDomainDAOImpl.StorageDomainRowMapper.instance, null); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listFailedAutorecoverables() { return getCallsHandler().executeReadList("GetFailingStorage_domains", org.ovirt.engine.core.dao.StorageDomainDaoImpl.StorageDomainRowMapper.instance, null); }
private void moveVDSToMaintenanceIfNeeded() { if ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.PreparingForMaintenance)) { if (monitoringStrategy.canMoveToMaintenance(vds)) { org.ovirt.engine.core.common.businessentities.VdsDynamic dbVds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDynamicDao().get(vds.getId()); vds.setStopReason(dbVds.getMaintenanceReason()); vdsManager.setStatus(VDSStatus.Maintenance, vds); saveVdsDynamic = true; saveVdsStatistics = true; org.ovirt.engine.core.vdsbroker.HostMonitoring.log.info("Updated vds status from 'Preparing for Maintenance' to 'Maintenance' in database, vds '{}'({})", vds.getName(), vds.getId()); } else { vdsMaintenanceTimeoutOccurred = vdsManager.isTimeToRetryMaintenance(); } } }	private void moveVDSToMaintenanceIfNeeded() { if ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.PreparingForMaintenance)) { if (monitoringStrategy.canMoveToMaintenance(vds)) { org.ovirt.engine.core.common.businessentities.VdsDynamic dbVds = getDbFacade().getVdsDynamicDao().get(vds.getId()); vds.setMaintenanceReason(dbVds.getMaintenanceReason()); vdsManager.setStatus(VDSStatus.Maintenance, vds); saveVdsDynamic = true; saveVdsStatistics = true; org.ovirt.engine.core.vdsbroker.HostMonitoring.log.info("Updated vds status from 'Preparing for Maintenance' to 'Maintenance' in database, vds '{}'({})", vds.getName(), vds.getId()); } else { vdsMaintenanceTimeoutOccurred = vdsManager.isTimeToRetryMaintenance(); } } }
@org.ovirt.engine.ui.common.DefaultStringValue("SPACE") java.lang.String spice();	@org.ovirt.engine.ui.common.DefaultStringValue("SPICE") java.lang.String spice();
public void setport(int value) { this.mVdsStatic.setPort(value); }	public void setPort(int value) { this.mVdsStatic.setPort(value); }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume = getGlusterVolume(); if (!(super.canDoAction())) { return false; } if ((!(getGlusterTaskUtils().isTaskOfType(glusterVolume, GlusterTaskType.REBALANCE))) || (!(getGlusterTaskUtils().isTaskStatus(glusterVolume, JobExecutionStatus.STARTED)))) { return failCanDoAction(EngineMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REBALANCE_NOT_STARTED); } return true; }	@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume = getGlusterVolume(); if (!(super.canDoAction())) { return false; } if ((!(getGlusterTaskUtils().isTaskOfType(glusterVolume, GlusterTaskType.REBALANCE))) || (!(getGlusterTaskUtils().isTaskStatus(glusterVolume, JobExecutionStatus.STARTED)))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REBALANCE_NOT_STARTED); } return true; }
protected boolean isVmTemplateWithSameNameExist() { return (org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().getByName(getParameters().getVmTemplate().getName(), getParameters().getStoragePoolId(), null, false)) != null; }	protected boolean isVmTemplateWithSameNameExist() { return (vmTemplateDao.getByName(getParameters().getVmTemplate().getName(), getParameters().getStoragePoolId(), null, false)) != null; }
private org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.util.Set<java.lang.String>> insertExclusiveLock(java.lang.String key, java.lang.String message, boolean isCheckOnly) { org.ovirt.engine.core.bll.lock.InMemoryLockManager.InternalLockView lock = locks.get(key); if (lock != null) { return new org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.util.Set<java.lang.String>>(java.lang.Boolean.FALSE, lock.getMessages()); } if (!isCheckOnly) { locks.put(key, new org.ovirt.engine.core.bll.lock.InMemoryLockManager.InternalLockView(0, message, true)); } return org.ovirt.engine.core.bll.lock.InMemoryLockManager.LOCK_INSER_SUCCESS_RESULT; }	private org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.util.Set<java.lang.String>> insertExclusiveLock(java.lang.String key, java.lang.String message, boolean isCheckOnly) { org.ovirt.engine.core.bll.lock.InMemoryLockManager.InternalLockView lock = locks.get(key); if (lock != null) { return new org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.util.Set<java.lang.String>>(java.lang.Boolean.FALSE, lock.getMessages()); } if (!isCheckOnly) { locks.put(key, new org.ovirt.engine.core.bll.lock.InMemoryLockManager.InternalLockView(0, message, true)); } return org.ovirt.engine.core.bll.lock.InMemoryLockManager.LOCK_INSERT_SUCCESS_RESULT; }
private void flush() { flushedLabels.clear(); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : labelModels.getItems()) { flushedLabels.add(labelModel.getSelectedItem()); } }	private void flush() { flushedLabels.clear(); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : getItems()) { flushedLabels.add(labelModel.getSelectedItem()); } }
@java.lang.Override public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem) { super.initialize(systemTreeSelectedItem); getModel().getVmType().setIsChangeable(true); getModel().getPoolStateful().setIsChangeable(true); templateValidate(); instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.NewPoolInstanceTypeManager(getModel()); getModel().getVmInitModel().init(null); getModel().getDiskAllocationTargetEnabled().setIsAvailable(java.lang.Boolean.TRUE); getModel().getDiskAllocationTargetEnabled().setIsChangeable(java.lang.Boolean.TRUE); getModel().getDiskAllocationTargetEnabled().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { getModel().getDisksAllocationModel().updateTargetChangeable((!(getModel().getDiskAllocationTargetEnabled().getEntity()))); } }); }	@java.lang.Override public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem) { super.initialize(systemTreeSelectedItem); getModel().getVmType().setIsChangeable(true); getModel().getPoolStateful().setIsChangeable(true); templateValidate(); instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.NewPoolInstanceTypeManager(getModel()); getModel().getVmInitModel().init(null); getModel().getDisksAllocationModel().initializeAutoSelectTarget(true, false); }
@java.lang.Override protected boolean validate() { boolean retValue; org.ovirt.engine.core.compat.Guid subscriberId = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getSubscriberId(); java.lang.String eventName = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getEventUpName(); org.ovirt.engine.core.common.EventNotificationMethod eventNotificationMethod = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getEventNotificationMethod(); java.util.List<org.ovirt.engine.core.common.businessentities.EventSubscriber> subscriptions = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getEventDao().getAllForSubscriber(subscriberId); if (org.ovirt.engine.core.bll.AddEventSubscriptionCommand.isAlreadySubscribed(subscriptions, subscriberId, eventName, eventNotificationMethod)) { addValidateMessage(EngineMessage.EN_ALREADY_SUBSCRIBED); retValue = false; } else if (!(eventExists(eventName))) { addValidateMessage(EngineMessage.EN_UNSUPPORTED_NOTIFICATION_EVENT); retValue = false; } else { if (eventNotificationMethod != null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().get(subscriberId); if (user == null) { addValidateMessage(EngineMessage.USER_MUST_EXIST_IN_DB); retValue = false; } else { retValue = validateAdd(eventNotificationMethod, org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber(), user); } } else { addValidateMessage(EngineMessage.EN_UNKNOWN_NOTIFICATION_METHOD); retValue = false; } } return retValue; }	@java.lang.Override protected boolean validate() { boolean retValue; org.ovirt.engine.core.compat.Guid subscriberId = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getSubscriberId(); java.lang.String eventName = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getEventUpName(); org.ovirt.engine.core.common.EventNotificationMethod eventNotificationMethod = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getEventNotificationMethod(); java.util.List<org.ovirt.engine.core.common.businessentities.EventSubscriber> subscriptions = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getEventDao().getAllForSubscriber(subscriberId); if (org.ovirt.engine.core.bll.AddEventSubscriptionCommand.isAlreadySubscribed(subscriptions, subscriberId, eventName, eventNotificationMethod)) { addValidationMessage(EngineMessage.EN_ALREADY_SUBSCRIBED); retValue = false; } else if (!(eventExists(eventName))) { addValidationMessage(EngineMessage.EN_UNSUPPORTED_NOTIFICATION_EVENT); retValue = false; } else { if (eventNotificationMethod != null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().get(subscriberId); if (user == null) { addValidationMessage(EngineMessage.USER_MUST_EXIST_IN_DB); retValue = false; } else { retValue = validateAdd(eventNotificationMethod, org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber(), user); } } else { addValidationMessage(EngineMessage.EN_UNKNOWN_NOTIFICATION_METHOD); retValue = false; } } return retValue; }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}: The disk interface is not supported by the VM.") java.lang.String ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}: The disk interface is not supported by the VM OS: ${osName}.") java.lang.String ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED();
public org.ovirt.engine.core.common.action.SetupNetworksParameters buildParameters(org.ovirt.engine.core.compat.Guid hostId, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networksToRemove, java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsBylabels) { org.ovirt.engine.core.common.action.SetupNetworksParameters parameters = createSetupNetworksParameters(hostId); for (java.util.Map.Entry<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> entry : nicsBylabels.entrySet()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicToConfigure = getNicToConfigure(parameters.getInterfaces(), entry.getValue().getId()); if (nicToConfigure == null) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.LABELED_NETWORK_INTERFACE_NOT_FOUND); } java.util.Set<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsToRemove = getNicsToRemove(parameters.getInterfaces(), networksToRemove, nicToConfigure); parameters.getInterfaces().removeAll(nicsToRemove); } return parameters; }	public org.ovirt.engine.core.common.action.SetupNetworksParameters buildParameters(org.ovirt.engine.core.compat.Guid hostId, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networksToRemove, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { org.ovirt.engine.core.common.action.SetupNetworksParameters parameters = createSetupNetworksParameters(hostId); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicToConfigure = getNicToConfigure(parameters.getInterfaces(), nic.getId()); if (nicToConfigure == null) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.LABELED_NETWORK_INTERFACE_NOT_FOUND); } java.util.Set<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsToRemove = getNicsToRemove(parameters.getInterfaces(), networksToRemove, nicToConfigure); parameters.getInterfaces().removeAll(nicsToRemove); } return parameters; }
private static java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> findNetworkInterfaces(java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> vdsInterfaces, boolean bridgesReported, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, java.util.Map<java.lang.String, java.lang.Object> entry) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfaces = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(); if (bridgesReported) { if (iface == null) { if (entry != null) { interfaces.addAll(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.findBridgedNetworkInterfaces(entry, vdsInterfaces)); } } else { interfaces.add(iface); } } else { interfaces.addAll(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.findBridgedNetworkInterfaces(entry, vdsInterfaces)); } return interfaces; }	private static java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> findNetworkInterfaces(java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> vdsInterfaces, java.lang.String interfaceName, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> bridges) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfaces = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = vdsInterfaces.get(interfaceName); if (iface == null) { if (bridges != null) { java.util.Map<java.lang.String, java.lang.Object> bridgeProperties = bridges.get(interfaceName); if (bridgeProperties != null) { interfaces.addAll(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.findBridgedNetworkInterfaces(bridgeProperties, vdsInterfaces)); } } } else { interfaces.add(iface); } return interfaces; }
public static org.ovirt.engine.core.common.businessentities.AsyncTasks createAsyncTask(org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { return org.ovirt.engine.core.bll.tasks.CommandCoordinator.getInstance().createAsyncTask(command, asyncTaskCreationInfo, parentCommand); }	public static org.ovirt.engine.core.common.businessentities.AsyncTasks createAsyncTask(org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { return org.ovirt.engine.core.bll.tasks.TaskManagerUtil.coco.createAsyncTask(command, asyncTaskCreationInfo, parentCommand); }
private void newTemplate() { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel selectedItem = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel) (getSelectedItem())); if (selectedItem == null) { return; } org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (selectedItem.getEntity())); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel windowModel = new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewTemplateVmModelBehavior(vm)); setWindow(windowModel); windowModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newTemplateTitle()); windowModel.setHashName("new_template"); windowModel.setHelpTag(windowModel.getHashName(), "VMs > Make Template"); windowModel.setIsNew(true); windowModel.getVmType().setSelectedItem(vm.getVmType()); windowModel.initialize(null); windowModel.getIsTemplatePublic().setEntity(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnNewTemplate", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); windowModel.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); windowModel.getCommands().add(tempVar2); }	private void newTemplate() { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel selectedItem = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel) (getSelectedItem())); if (selectedItem == null) { return; } org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (selectedItem.getEntity())); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel windowModel = new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.UserPortalNewTemplateVmModelBehavior(vm)); setWindow(windowModel); windowModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newTemplateTitle()); windowModel.setHelpTag(HelpTag.new_template); windowModel.setHashName("new_template"); windowModel.setIsNew(true); windowModel.getVmType().setSelectedItem(vm.getVmType()); windowModel.initialize(null); windowModel.getIsTemplatePublic().setEntity(false); windowModel.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("OnNewTemplate", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true)); windowModel.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()).setIsCancel(true)); }
void removeEventListener(org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.MessageListener el);	public void removeEventListener(org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.MessageListener el) { eventListeners.remove(el); }
@org.junit.experimental.theories.Theory public void testCompare(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { storageDomain1.setStorageType(storageType); for (org.ovirt.engine.core.common.businessentities.storage.StorageType storageType2 : org.ovirt.engine.core.common.businessentities.storage.StorageType.values()) { storageDomain2.setStorageType(storageType2); int compareTypes = java.lang.Boolean.compare(storageType.isShared(), storageType2.isShared()); int comparatorReturnValue = comparator.compare(storageDomain1, storageDomain2); assertEquals((compareTypes < 0), (comparatorReturnValue < 0)); assertEquals((compareTypes == 0), (comparatorReturnValue == 0)); assertEquals((compareTypes > 0), (comparatorReturnValue > 0)); } }	@org.junit.Test public void testCompareLocalWithLocal() { storageDomain1.setStorageType(StorageType.LOCALFS); storageDomain2.setStorageType(StorageType.LOCALFS); assertEqualsTo(storageDomain1, storageDomain2); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAllWithUniqueId(java.lang.String id) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getCallsHandler().executeReadList("GetVdsByUniqueID", org.ovirt.engine.core.dao.VdsDAOImpl.VdsRowMapper.instance, getCustomMapSqlParameterSource().addValue("vds_unique_id", id)); return uniteAgents(vdsList); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAllWithUniqueId(java.lang.String id) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getCallsHandler().executeReadList("GetVdsByUniqueID", org.ovirt.engine.core.dao.VdsDaoImpl.VdsRowMapper.instance, getCustomMapSqlParameterSource().addValue("vds_unique_id", id)); return uniteAgents(vdsList); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((id) == null ? 0 : id.hashCode()); result = (prime * result) + ((compatVersion) == null ? 0 : compatVersion.hashCode()); result = (prime * result) + ((compatibility_version) == null ? 0 : compatibility_version.hashCode()); result = (prime * result) + ((cpu_name) == null ? 0 : cpu_name.hashCode()); result = (prime * result) + ((description) == null ? 0 : description.hashCode()); result = (prime * result) + (max_vds_memory_over_commit); result = (prime * result) + (countThreadsAsCores ? 1231 : 1237); result = (prime * result) + ((migrateOnError) == null ? 0 : migrateOnError.hashCode()); result = (prime * result) + ((name) == null ? 0 : name.hashCode()); result = (prime * result) + ((storagePoolId) == null ? 0 : storagePoolId.hashCode()); result = (prime * result) + ((storagePoolName) == null ? 0 : storagePoolName.hashCode()); result = (prime * result) + (transparentHugepages ? 1231 : 1237); result = (prime * result) + (virtService ? 1231 : 1237); result = (prime * result) + (glusterService ? 1231 : 1237); result = (prime * result) + (tunnelMigration ? 1231 : 1237); result = (prime * result) + ((emulatedMachine) == null ? 0 : emulatedMachine.hashCode()); result = (prime * result) + (trustedService ? 1231 : 1237); result = (prime * result) + ((clusterPolicyName) == null ? 0 : clusterPolicyName.hashCode()); result = (prime * result) + ((clusterPolicyProperties) == null ? 0 : clusterPolicyProperties.hashCode()); result = (prime * result) + (enableBallooning ? 1231 : 1237); result = (prime * result) + (schedulerOptimizeForSpeed ? 1231 : 1237); return result; }	@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((id) == null ? 0 : id.hashCode()); result = (prime * result) + ((compatVersion) == null ? 0 : compatVersion.hashCode()); result = (prime * result) + ((compatibility_version) == null ? 0 : compatibility_version.hashCode()); result = (prime * result) + ((cpu_name) == null ? 0 : cpu_name.hashCode()); result = (prime * result) + ((description) == null ? 0 : description.hashCode()); result = (prime * result) + (max_vds_memory_over_commit); result = (prime * result) + (countThreadsAsCores ? 1231 : 1237); result = (prime * result) + ((migrateOnError) == null ? 0 : migrateOnError.hashCode()); result = (prime * result) + ((name) == null ? 0 : name.hashCode()); result = (prime * result) + ((storagePoolId) == null ? 0 : storagePoolId.hashCode()); result = (prime * result) + ((storagePoolName) == null ? 0 : storagePoolName.hashCode()); result = (prime * result) + (transparentHugepages ? 1231 : 1237); result = (prime * result) + (virtService ? 1231 : 1237); result = (prime * result) + (glusterService ? 1231 : 1237); result = (prime * result) + (tunnelMigration ? 1231 : 1237); result = (prime * result) + ((emulatedMachine) == null ? 0 : emulatedMachine.hashCode()); result = (prime * result) + (trustedService ? 1231 : 1237); result = (prime * result) + ((clusterPolicyName) == null ? 0 : clusterPolicyName.hashCode()); result = (prime * result) + ((clusterPolicyProperties) == null ? 0 : clusterPolicyProperties.hashCode()); result = (prime * result) + (enableBallooning ? 1231 : 1237); result = (prime * result) + ((optimizationType) == null ? 0 : optimizationType.hashCode()); return result; }
@org.junit.Test public void testStoragePoolIsNotUp() { setUpGeneralValidations(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND)).when(storagePoolValidator).isUp(); doReturn(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList()).when(cmd).getDisksList(); assertFalse(cmd.validate()); assertTrue(cmd.getReturnValue().getValidateMessages().contains(EngineMessage.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND.name())); }	@org.junit.Test public void testStoragePoolIsNotUp() { setUpGeneralValidations(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND)).when(storagePoolValidator).isUp(); doReturn(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList()).when(cmd).getDisksList(); assertFalse(cmd.validate()); assertTrue(cmd.getReturnValue().getValidationMessages().contains(EngineMessage.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND.name())); }
protected boolean checkTemplateInStorageDomain() { boolean retValue = validate(org.ovirt.engine.core.bll.ImportVmCommand.getImportValidator().verifyDisks(imageList, imageToDestinationDomainMap)); if ((retValue && (!(VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getVm().getVmtGuid())))) && (!(getParameters().getCopyCollapse()))) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domains = runInternalQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new org.ovirt.engine.core.common.queries.IdQueryParameters(getVm().getVmtGuid())).getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> domainsId = org.ovirt.engine.core.utils.linq.LinqUtils.transformToList(domains, new org.ovirt.engine.core.utils.linq.Function<org.ovirt.engine.core.common.businessentities.StorageDomain, org.ovirt.engine.core.compat.Guid>() { @java.lang.Override public org.ovirt.engine.core.compat.Guid eval(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomainStatic) { return storageDomainStatic.getId(); } }); if (java.util.Collections.disjoint(domainsId, imageToDestinationDomainMap.values())) { return failCanDoAction(EngineMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return retValue; }	protected boolean checkTemplateInStorageDomain() { boolean retValue = validate(org.ovirt.engine.core.bll.ImportVmCommand.getImportValidator().verifyDisks(imageList, imageToDestinationDomainMap)); if ((retValue && (!(VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getVm().getVmtGuid())))) && (!(getParameters().getCopyCollapse()))) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domains = runInternalQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new org.ovirt.engine.core.common.queries.IdQueryParameters(getVm().getVmtGuid())).getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> domainsId = org.ovirt.engine.core.utils.linq.LinqUtils.transformToList(domains, new org.ovirt.engine.core.utils.linq.Function<org.ovirt.engine.core.common.businessentities.StorageDomain, org.ovirt.engine.core.compat.Guid>() { @java.lang.Override public org.ovirt.engine.core.compat.Guid eval(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomainStatic) { return storageDomainStatic.getId(); } }); if (java.util.Collections.disjoint(domainsId, imageToDestinationDomainMap.values())) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return retValue; }
private org.ovirt.engine.core.common.businessentities.storage.CinderDisk cloneDiskForStateless() { org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDependentVolume = getDisk(); initCinderDependentVolume(cinderDependentVolume); cinderDependentVolume.setActive(true); java.lang.String volumeId = org.ovirt.engine.core.bll.storage.disk.cinder.CreateCinderSnapshotCommand.getCinderBroker().cloneDisk(cinderDependentVolume); org.ovirt.engine.core.compat.Guid destinationImageId = org.ovirt.engine.core.compat.Guid.createGuidFromString(volumeId); org.ovirt.engine.core.bll.storage.disk.cinder.CreateCinderSnapshotCommand.getParameters().setDestinationImageId(destinationImageId); cinderDependentVolume.setImageId(destinationImageId); return cinderDependentVolume; }	private boolean isStatelessSnapshot() { return (org.ovirt.engine.core.bll.storage.disk.cinder.CreateCinderSnapshotCommand.getParameters().getSnapshotType()) == (Snapshot.SnapshotType.STATELESS); }
@com.google.gwt.i18n.client.Messages.DefaultMessage("Note that some of the selected VMs are already running on this Host and will not be migrated.") java.lang.String migrateSomeVmsAlreadyRunningOnHost();	@org.ovirt.engine.ui.webadmin.DefaultMessage("Note that some of the selected VMs are already running on this Host and will not be migrated.") java.lang.String migrateSomeVmsAlreadyRunningOnHost();
private boolean validateDestStorageAndSourceStorageOfSameTypes(org.ovirt.engine.core.common.businessentities.StorageDomain destDomain, org.ovirt.engine.core.common.businessentities.StorageDomain sourceDomain) { if ((destDomain.getStorageType().getStorageSubtype()) != (sourceDomain.getStorageType().getStorageSubtype())) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_DESTINATION_AND_SOURCE_STORAGE_SUB_TYPES_DIFFERENT); } return true; }	private boolean validateDestStorageAndSourceStorageOfSameTypes(org.ovirt.engine.core.common.businessentities.StorageDomain destDomain, org.ovirt.engine.core.common.businessentities.StorageDomain sourceDomain) { if ((destDomain.getStorageType().getStorageSubtype()) != (sourceDomain.getStorageType().getStorageSubtype())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DESTINATION_AND_SOURCE_STORAGE_SUB_TYPES_DIFFERENT); } return true; }
@org.junit.Test public void allPassthroughVnicsMigratableNoVnics() { allPassthroughVnicsMigratableCommon(vm.getId(), 0); assertThatAllPassthroughVnicsMigratable(true); }	@org.junit.Test public void allPassthroughVnicsMigratableForEmptyVnicList() { mockVnics(createRegularNics(0)); assertThatAllPassthroughVnicsMigratable(true); }
private void updatePassDiscardChangeabilityForDirectLun() { if (((getSanStorageModelBase()) != null) && ((getSanStorageModelBase().getAddedLuns()) != null)) { if (getSanStorageModelBase().getAddedLuns().isEmpty()) { getPassDiscard().setIsChangeable(false, null); } else { getPassDiscard().setIsChangeable(isLunSupportDiscard(getSanStorageModelBase().getAddedLuns().get(0).getEntity()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); if (!(getPassDiscard().getIsChangable())) { getPassDiscard().setEntity(false); } } } else if ((getLunDisk()) != null) { getPassDiscard().setIsChangeable(isLunSupportDiscard(getLunDisk().getLun()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); } }	private void updatePassDiscardChangeabilityForDirectLun() { if (((getSanStorageModelBase()) != null) && ((getSanStorageModelBase().getAddedLuns()) != null)) { if (getSanStorageModelBase().getAddedLuns().isEmpty()) { getPassDiscard().setIsChangeable(false); } else { getPassDiscard().setIsChangeable(isLunSupportDiscard(getSanStorageModelBase().getAddedLuns().get(0).getEntity()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); if (!(getPassDiscard().getIsChangable())) { getPassDiscard().setEntity(false); } } } else if ((getLunDisk()) != null) { getPassDiscard().setIsChangeable(isLunSupportDiscard(getLunDisk().getLun()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); } }
@org.junit.Test public void validateSameSourceAndDest() throws java.lang.Exception { createParameters(srcStorageId, srcStorageId); org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); assertFalse(command.validate()); assertTrue(command.getReturnValue().getValidateMessages().contains(EngineMessage.ACTION_TYPE_FAILED_SOURCE_AND_TARGET_SAME.name())); }	@org.junit.Test public void validateSameSourceAndDest() throws java.lang.Exception { createParameters(srcStorageId, srcStorageId); org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); assertFalse(command.validate()); assertTrue(command.getReturnValue().getValidationMessages().contains(EngineMessage.ACTION_TYPE_FAILED_SOURCE_AND_TARGET_SAME.name())); }
public static boolean isImagesExists(java.lang.Iterable<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, org.ovirt.engine.core.compat.Guid storagePoolId) { return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isImagesExists(images, storagePoolId, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage>()); }	public static boolean isImagesExists(java.lang.Iterable<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, org.ovirt.engine.core.compat.Guid storagePoolId) { return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isImagesExists(images, storagePoolId, new java.util.ArrayList()); }
protected boolean isEditEnabled() { return (((getVm()) != null) && (getVm().isDown())) || (!(getDisk().getPlugged())); }	protected boolean isEditEnabled() { return (((getIsFloating()) || (getIsNew())) || (getVm().isDown())) || (!(getDisk().getPlugged())); }
@java.lang.Override public void scheduleFinally(org.ovirt.engine.ui.frontend.ScheduledCommand cmd) { }	@java.lang.Override public void scheduleFinally(org.ovirt.engine.ui.frontend.ScheduledCommand cmd) { throw new java.lang.RuntimeException("Not implemented"); }
java.util.List<org.ovirt.engine.core.common.businessentities.Bookmarks> getAll();	java.util.List<org.ovirt.engine.core.common.businessentities.Bookmark> getAll();
@java.lang.Override public int hashCode() { return java.util.Objects.hash(getHost(), pageSize); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(getVm(), getHost(), pageSize); }
@org.junit.Test public void onTimerFullConfig() { org.ovirt.engine.core.common.config.Config.<java.util.Map<java.lang.String, java.lang.String>>GetValue(ConfigValues.AutoRecoveryAllowedTypes).put("hosts", java.lang.Boolean.TRUE.toString()); manager.onTimer(); verify(backendMock, times(vdss.size())).runInternalAction(eq(VdcActionType.ActivateVds), any(org.ovirt.engine.core.common.action.VdcActionParametersBase.class)); }	@org.junit.Test public void onTimerFullConfig() { org.ovirt.engine.core.common.config.Config.<java.util.Map<java.lang.String, java.lang.String>>GetValue(ConfigValues.AutoRecoveryAllowedTypes).put("storage domains", java.lang.Boolean.TRUE.toString()); org.ovirt.engine.core.common.config.Config.<java.util.Map<java.lang.String, java.lang.String>>GetValue(ConfigValues.AutoRecoveryAllowedTypes).put("hosts", java.lang.Boolean.TRUE.toString()); manager.onTimer(); verify(backendMock, times(vdss.size())).runInternalAction(eq(VdcActionType.ActivateVds), any(org.ovirt.engine.core.common.action.VdcActionParametersBase.class)); verify(backendMock, times(storageDomains.size())).runInternalAction(eq(VdcActionType.ConnectDomainToStorage), any(org.ovirt.engine.core.common.action.VdcActionParametersBase.class)); }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainStatic> filterAttachedStorageDomains() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainStatic> storageDomainStaticList = new java.util.ArrayList<>(); if ((org.ovirt.engine.core.bll.storage.domains.GetFileStorageDomainsWithAttachedStoragePoolGuidQuery.getParameters().getStorageDomainList()) != null) { storageDomainStaticList = getAttachedStorageDomains(org.ovirt.engine.core.bll.storage.domains.GetFileStorageDomainsWithAttachedStoragePoolGuidQuery.getParameters().getStorageDomainList()); } else if ((org.ovirt.engine.core.bll.storage.domains.GetFileStorageDomainsWithAttachedStoragePoolGuidQuery.getParameters().getStorageServerConnection()) != null) { storageDomainStaticList = getStorageDomainsByStorageServerConnections(org.ovirt.engine.core.bll.storage.domains.GetFileStorageDomainsWithAttachedStoragePoolGuidQuery.getParameters().getStorageServerConnection()); } return storageDomainStaticList; }	@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainStatic> filterAttachedStorageDomains() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainStatic> storageDomainStaticList = new java.util.ArrayList<>(); if ((org.ovirt.engine.core.bll.storage.domain.GetFileStorageDomainsWithAttachedStoragePoolGuidQuery.getParameters().getStorageDomainList()) != null) { storageDomainStaticList = getAttachedStorageDomains(org.ovirt.engine.core.bll.storage.domain.GetFileStorageDomainsWithAttachedStoragePoolGuidQuery.getParameters().getStorageDomainList()); } else if ((org.ovirt.engine.core.bll.storage.domain.GetFileStorageDomainsWithAttachedStoragePoolGuidQuery.getParameters().getStorageServerConnection()) != null) { storageDomainStaticList = getStorageDomainsByStorageServerConnections(org.ovirt.engine.core.bll.storage.domain.GetFileStorageDomainsWithAttachedStoragePoolGuidQuery.getParameters().getStorageServerConnection()); } return storageDomainStaticList; }
public java.util.Map createStorageDomain(java.lang.Integer storageType, java.lang.String sdUUID, java.lang.String domainName, java.lang.String typeSpecificArg, java.lang.Integer domClass, java.lang.String storageFormatType) { log.info("Storage domain sdUUID: {}, name: {} created.", sdUUID, domainName); org.ovirt.vdsmfake.service.StorageDomain storageDomain = getStorageDomainById(sdUUID); storageDomain.setName(domainName); storageDomain.setConnection(typeSpecificArg); storageDomain.setDomainClass(StorageDomain.DomainClass.getByCode(domClass)); storageDomain.setStorageType(StorageDomain.StorageType.getByCode(storageType)); updateStorageDomain(storageDomain); return getOKStatus(); }	public java.util.Map createStorageDomain(java.lang.Integer storageType, java.lang.String sdUUID, java.lang.String domainName, java.lang.String typeSpecificArg, java.lang.Integer domClass, java.lang.String storageFormatType) { log.info("Storage domain sdUUID: {}, name: {} created.", sdUUID, domainName); org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(sdUUID); storageDomain.setName(domainName); storageDomain.setConnection(typeSpecificArg); storageDomain.setDomainClass(StorageDomain.DomainClass.getByCode(domClass)); storageDomain.setStorageType(StorageDomain.StorageType.getByCode(storageType)); updateStorageDomain(storageDomain); return getOKStatus(); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Role> getAllForApplicationMode(int appMode) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetAllRolesByApplicationMode", org.ovirt.engine.core.dao.RoleDAODbFacadeImpl.RolesRowMapper.instance, parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Role> getAllForUserAndGroups(org.ovirt.engine.core.compat.Guid id, java.lang.String groupIds, int appMode) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("user_id", id).addValue("group_ids", groupIds).addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetAllRolesByUserIdAndGroupIds", org.ovirt.engine.core.dao.RoleDAODbFacadeImpl.RolesRowMapper.instance, parameterSource); }
public boolean canRunVm(java.util.List<java.lang.String> messages, org.ovirt.engine.core.common.businessentities.StoragePool storagePool, java.util.List<org.ovirt.engine.core.compat.Guid> vdsBlackList, org.ovirt.engine.core.compat.Guid destVds, org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup) { if ((((((((((((!(validateVmProperties(vm, messages))) || (!(validate(validateBootSequence(vm, runVmParam.getBootSequence(), getVmDisks()), messages)))) || (!(validate(new org.ovirt.engine.core.bll.validator.VmValidator(vm).vmNotLocked(), messages)))) || (!(validate(getSnapshotValidator().vmNotDuringSnapshot(vm.getId()), messages)))) || (!(validate(validateVmStatusUsingMatrix(vm), messages)))) || (!(validate(validateStoragePoolUp(vm, storagePool, getVmImageDisks()), messages)))) || (!(validate(validateIsoPath(vm, runVmParam.getDiskPath(), runVmParam.getFloppyPath()), messages)))) || (!(validate(vmDuringInitialization(vm), messages)))) || (!(validate(validateVdsStatus(vm), messages)))) || (!(validate(validateStatelessVm(vm, getVmDisks(), runVmParam.getRunAsStateless()), messages)))) || (!(validate(validateStorageDomains(vm, isInternalExecution, getVmImageDisks()), messages)))) || (!(validate(validateImagesForRunVm(vm, getVmImageDisks()), messages)))) { return false; } if (!(org.ovirt.engine.core.bll.scheduling.SchedulingManager.getInstance().canSchedule(vdsGroup, vm, vdsBlackList, null, destVds, messages))) { return false; } return true; }	public boolean canRunVm(java.util.List<java.lang.String> messages, org.ovirt.engine.core.common.businessentities.StoragePool storagePool, java.util.List<org.ovirt.engine.core.compat.Guid> vdsBlackList, java.util.List<org.ovirt.engine.core.compat.Guid> vdsWhiteList, org.ovirt.engine.core.compat.Guid destVds, org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup) { return ((((((((((((validateVmProperties(vm, messages)) && (validate(validateBootSequence(vm, runVmParam.getBootSequence(), getVmDisks()), messages))) && (validate(new org.ovirt.engine.core.bll.validator.VmValidator(vm).vmNotLocked(), messages))) && (validate(getSnapshotValidator().vmNotDuringSnapshot(vm.getId()), messages))) && (validate(validateVmStatusUsingMatrix(vm), messages))) && (validate(validateStoragePoolUp(vm, storagePool, getVmImageDisks()), messages))) && (validate(validateIsoPath(vm, runVmParam.getDiskPath(), runVmParam.getFloppyPath()), messages))) && (validate(vmDuringInitialization(vm), messages))) && (validate(validateVdsStatus(vm), messages))) && (validate(validateStatelessVm(vm, getVmDisks(), runVmParam.getRunAsStateless()), messages))) && (validate(validateStorageDomains(vm, isInternalExecution, getVmImageDisks()), messages))) && (validate(validateImagesForRunVm(vm, getVmImageDisks()), messages))) && (org.ovirt.engine.core.bll.scheduling.SchedulingManager.getInstance().canSchedule(vdsGroup, vm, vdsBlackList, vdsWhiteList, destVds, messages)); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.VM.class, to = org.ovirt.engine.api.model.VmPool.class) public static org.ovirt.engine.api.model.VmPool map(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.api.model.VmPool template) { org.ovirt.engine.api.model.VmPool model = (template != null) ? template : new org.ovirt.engine.api.model.VmPool(); org.ovirt.engine.api.model.VM vmModel = org.ovirt.engine.api.restapi.types.VmMapper.map(vm, ((org.ovirt.engine.api.model.VM) (null))); vmModel.setCluster(null); vmModel.setTemplate(null); vmModel.setVmpool(null); model.setVm(vmModel); return model; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.VM.class, to = org.ovirt.engine.api.model.VmPool.class) public static org.ovirt.engine.api.model.VmPool map(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.api.model.VmPool template) { org.ovirt.engine.api.model.VmPool model = (template != null) ? template : new org.ovirt.engine.api.model.VmPool(); org.ovirt.engine.api.model.Vm vmModel = org.ovirt.engine.api.restapi.types.VmMapper.map(vm, ((org.ovirt.engine.api.model.Vm) (null))); vmModel.setCluster(null); vmModel.setTemplate(null); vmModel.setVmPool(null); model.setVm(vmModel); return model; }
@org.junit.Test public void checkCidrNetworkAddressValidation() { runSetup(org.ovirt.engine.core.common.validation.CidrConstraintTest.TEST_CIDR, true, false, EngineMessages.CIDR_NOT_NETWORK_ADDRESS.name()); runVerify(org.ovirt.engine.core.common.validation.CidrConstraintTest.TEST_CIDR, EngineMessages.CIDR_NOT_NETWORK_ADDRESS.name()); }	@org.junit.Test public void checkCidrNetworkAddressValidation() { runSetup(org.ovirt.engine.core.common.validation.CidrConstraintTest.TEST_CIDR, true, false, EngineMessage.CIDR_NOT_NETWORK_ADDRESS.name()); runVerify(org.ovirt.engine.core.common.validation.CidrConstraintTest.TEST_CIDR, EngineMessage.CIDR_NOT_NETWORK_ADDRESS.name()); }
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.profiles.ProfileBaseModel<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile, org.ovirt.engine.core.common.businessentities.qos.StorageQos, org.ovirt.engine.core.common.businessentities.StorageDomain> getEditProfileModel() { return new org.ovirt.engine.ui.uicommonweb.models.profiles.EditDiskProfileModel(this, getSelectedItem(), getStoragePoolId()); }	@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.profiles.ProfileBaseModel<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile, org.ovirt.engine.core.common.businessentities.qos.StorageQos, org.ovirt.engine.core.common.businessentities.StorageDomain> getEditProfileModel() { return new org.ovirt.engine.ui.uicommonweb.models.profiles.EditDiskProfileModel(this, ((org.ovirt.engine.core.common.businessentities.profiles.DiskProfile) (getSelectedItem())), getStoragePoolId()); }
protected void updateQuery(final javax.persistence.Query query) { entityManager.joinTransaction(); query.executeUpdate(); }	protected void updateQuery(final javax.persistence.Query query) { query.executeUpdate(); }
private boolean getAllowOptimizeAvailability(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { if ((volume.getReplicaCount()) == 3) { return true; } return false; }	private boolean isOptionEnabledOnVolume(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, java.util.List<org.ovirt.engine.core.common.utils.ListUtils.PredicateFilter<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity>> predicates) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity> volumeOptionsEnabled = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity>(volume.getOptions()); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity> filteredOptions = volumeOptionsEnabled; for (org.ovirt.engine.core.common.utils.ListUtils.PredicateFilter<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity> predicate : predicates) { filteredOptions = org.ovirt.engine.core.common.utils.ListUtils.filter(filteredOptions, predicate); } if ((filteredOptions.size()) > 0) { return true; } return false; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Share memory pages across all available memory (best KSM effectivness)") java.lang.String shareKsmAcrossNumaNodes();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("'Passthrough' cannot be changed if the vNIC Profile is used by a VM") java.lang.String passthroughNotChangedIfUsedByVms();
@org.junit.Test public void testAddHostedEngineStorageFails() { parameters.getStorageDomain().setStorageName(StorageConstants.HOSTED_ENGINE_STORAGE_DOMAIN_NAME); assertFalse(command.canAddDomain()); org.ovirt.engine.core.bll.CanDoActionTestUtils.assertCanDoActionMessages("", command, VdcBllMessages.ACTION_TYPE_FAILED_HOSTED_ENGINE_STORAGE); }	@org.junit.Test public void testAddHostedEngineStorageFails() { when(command.getLUNsFromVgInfo(parameters.getStorageDomain().getStorage())).thenReturn(org.ovirt.engine.core.bll.storage.AddExistingBlockStorageDomainCommandTest.getLUNs()); doReturn(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.LUNs>()).when(command).getAllLuns(); parameters.getStorageDomain().setStorageName(StorageConstants.HOSTED_ENGINE_STORAGE_DOMAIN_NAME); assertFalse(command.canAddDomain()); org.ovirt.engine.core.bll.CanDoActionTestUtils.assertCanDoActionMessages("Add self hosted engine storage domain succeeded where it should have failed", command, VdcBllMessages.ACTION_TYPE_FAILED_HOSTED_ENGINE_STORAGE); }
public org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal getTotalCpuMemCount() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal result = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.TOTAL_CPU_MEMORY_COUNT, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { result.setCpuTotal(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.CPU_TOTAL)); result.setMemTotal(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEM_TOTAL)); } } }); return result; }	public org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal getTotalCpuMemCount() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal result = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.TOTAL_CPU_MEMORY_COUNT, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result.setCpuTotal(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.CPU_TOTAL)); result.setMemTotal(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.MEM_TOTAL)); } }); return result; }
@org.junit.Test public void PctThresholdMoreThan100() { org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings settings = new org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings(); settings.diskSpaceFree = 10; settings.diskSpaceUsed = 0; settings.spaceThresholdGB = 5; settings.spaceThresholdPct = 110; org.ovirt.engine.core.common.businessentities.storage_domains domain = setupForSpaceTest(settings); assertFalse(org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.isAboveThresholds(domain)); }	@org.junit.Test public void PctThresholdMoreThan100() { org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings settings = new org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings(); settings.diskSpaceFree = 10; settings.diskSpaceUsed = 0; settings.spaceThresholdGB = 5; settings.spaceThresholdPct = 110; org.ovirt.engine.core.common.businessentities.storage_domains domain = setupForSpaceTest(settings); assertFalse(org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.isWithinThresholds(domain)); }
@java.lang.Override public javax.ws.rs.core.Response unregisteredStorageDomains(org.ovirt.engine.api.model.Action action) { validateParameters(action, "iscsi.address"); org.ovirt.engine.api.model.IscsiDetails iscsiDetails = action.getIscsi(); java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> storageServerConnections = new java.util.ArrayList<>(); for (java.lang.String iscsiTarget : action.getIscsiTargets()) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connectionDetails = getInitializedConnectionIscsiDetails(action); connectionDetails.setiqn(iscsiTarget); storageServerConnections.add(connectionDetails); } org.ovirt.engine.core.common.queries.GetUnregisteredBlockStorageDomainsParameters unregisteredBlockStorageDomainsParameters = new org.ovirt.engine.core.common.queries.GetUnregisteredBlockStorageDomainsParameters(guid, org.ovirt.engine.core.common.businessentities.StorageType.ISCSI, storageServerConnections); try { org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain>, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections>> pair = getEntity(org.ovirt.engine.core.common.utils.Pair.class, VdcQueryType.GetUnregisteredBlockStorageDomains, unregisteredBlockStorageDomainsParameters, "GetUnregisteredBlockStorageDomains", true); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = pair.getFirst(); return actionSuccess(mapToStorageDomains(action, storageDomains)); } catch (java.lang.Exception e) { return handleError(e, false); } }	@java.lang.Override public javax.ws.rs.core.Response unregisteredStorageDomainsDiscover(org.ovirt.engine.api.model.Action action) { validateParameters(action, "iscsi.address"); java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> storageServerConnections = new java.util.ArrayList<>(); for (java.lang.String iscsiTarget : action.getIscsiTargets()) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connectionDetails = getInitializedConnectionIscsiDetails(action); connectionDetails.setiqn(iscsiTarget); storageServerConnections.add(connectionDetails); } org.ovirt.engine.core.common.queries.GetUnregisteredBlockStorageDomainsParameters unregisteredBlockStorageDomainsParameters = new org.ovirt.engine.core.common.queries.GetUnregisteredBlockStorageDomainsParameters(guid, org.ovirt.engine.core.common.businessentities.StorageType.ISCSI, storageServerConnections); try { org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain>, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections>> pair = getEntity(org.ovirt.engine.core.common.utils.Pair.class, VdcQueryType.GetUnregisteredBlockStorageDomains, unregisteredBlockStorageDomainsParameters, "GetUnregisteredBlockStorageDomains", true); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = pair.getFirst(); return actionSuccess(mapToStorageDomains(action, storageDomains)); } catch (java.lang.Exception e) { return handleError(e, false); } }
private void generateRequestImplementation(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Name name = method.getName(); java.lang.String request = getRequestName(method); java.lang.String requestImpl = getRequestImplName(method); buffer.addLine("private class %1$s implements %2$s {", requestImpl, request); method.parameters().filter(Parameter::isIn).sorted().forEach(this::generateRequestParameterImplementation); buffer.addImport(java.util.Map.class); buffer.addLine("private Map<String, String> headers;"); buffer.addLine("public %1s headers(Map<String, String> headers) {", request); buffer.addLine("this.headers = headers;"); buffer.addLine("return this;"); buffer.addLine("}"); buffer.addLine("private Map<String, String> query;"); buffer.addLine("public %1s query(Map<String, String> query) {", request); buffer.addLine("this.query = query;"); buffer.addLine("return this;"); buffer.addLine("}"); buffer.addLine("public %1$s send() {", getResponseName(method)); if (org.ovirt.sdk.java.ServicesImplGenerator.ADD.equals(name)) { generateAddRequestImplementation(method); } else if ((org.ovirt.sdk.java.ServicesImplGenerator.GET.equals(name)) || (org.ovirt.sdk.java.ServicesImplGenerator.LIST.equals(name))) { generateListRequestImplementation(method); } else if (org.ovirt.sdk.java.ServicesImplGenerator.REMOVE.equals(name)) { generateRemoveRequestImplementation(method); } else if (org.ovirt.sdk.java.ServicesImplGenerator.UPDATE.equals(name)) { generateUpdateRequestImplementation(method); } else { generateActionRequestImplementation(method); } buffer.addLine("}"); buffer.addLine(); buffer.addLine("}"); buffer.addLine(); }	private void generateRequestImplementation(org.ovirt.api.metamodel.concepts.Method method) { buffer.addImport(((BASE_PACKAGE) + ".BaseRequest")); org.ovirt.api.metamodel.concepts.Name name = method.getName(); java.lang.String request = getRequestName(method); java.lang.String response = getResponseName(method); java.lang.String requestImpl = getRequestImplName(method); buffer.addLine("private class %1$s extends BaseRequest<%2$s, %3$s> implements %2$s {", requestImpl, request, response); method.parameters().filter(Parameter::isIn).sorted().forEach(this::generateRequestParameterImplementation); buffer.addLine("public %1$s send() {", getResponseName(method)); if (org.ovirt.sdk.java.ServicesImplGenerator.ADD.equals(name)) { generateAddRequestImplementation(method); } else if ((org.ovirt.sdk.java.ServicesImplGenerator.GET.equals(name)) || (org.ovirt.sdk.java.ServicesImplGenerator.LIST.equals(name))) { generateListRequestImplementation(method); } else if (org.ovirt.sdk.java.ServicesImplGenerator.REMOVE.equals(name)) { generateRemoveRequestImplementation(method); } else if (org.ovirt.sdk.java.ServicesImplGenerator.UPDATE.equals(name)) { generateUpdateRequestImplementation(method); } else { generateActionRequestImplementation(method); } buffer.addLine("}"); buffer.addLine(); buffer.addLine("}"); buffer.addLine(); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot update host's mom policy. Host is null.") java.lang.String ACTION_TYPE_FAILED_UPDATE_MOM_POLICY_UPDATE_NULL_HOST();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Cannot set single display device to non Linux operating system.") java.lang.String ACTION_TYPE_FAILED_ILLEGAL_SINGLE_DEVICE_OS_TYPE();
@org.junit.Test public void canDoActionFailsOnNull() { org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters params = new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters(); params.setServerServiceId(null); cmd = spy(new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand(params)); prepareMocks(cmd); assertFalse(cmd.canDoAction()); }	@org.junit.Test public void canDoActionFailsOnNull() { cmd = spy(new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand(new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters(null, null, org.ovirt.engine.core.common.businessentities.gluster.ServiceType.NFS, org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_START))); prepareMocks(cmd); assertFalse(cmd.canDoAction()); }
@org.junit.Test public void testAddGroupPermission() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUpCreationExpectations(VdcActionType.AddPermission, org.ovirt.engine.core.common.action.PermissionsOperationsParameters.class, new java.lang.String[]{ "Group.Id", "Permission.ad_element_id", "Permission.ObjectId", "Permission.role_id" }, new java.lang.Object[]{ GUIDS[1], GUIDS[1], targetId, GUIDS[3] }, true, true, GUIDS[0], VdcQueryType.GetPermissionById, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[0] }, getEntity(0)); org.ovirt.engine.api.model.Permission model = new org.ovirt.engine.api.model.Permission(); model.setRole(new org.ovirt.engine.api.model.Role()); model.getRole().setId(GUIDS[3].toString()); model.setGroup(new org.ovirt.engine.api.model.Group()); model.getGroup().setId(org.ovirt.engine.api.restapi.utils.DirectoryEntryIdUtils.generateId(GUIDS[1].toString(), " ", " ")); javax.ws.rs.core.Response response = collection.add(model); assertEquals(201, response.getStatus()); assertTrue(((response.getEntity()) instanceof org.ovirt.engine.api.model.Permission)); verifyModel(((org.ovirt.engine.api.model.Permission) (response.getEntity())), 0); }	@org.junit.Test public void testAddGroupPermission() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUpCreationExpectations(VdcActionType.AddPermission, org.ovirt.engine.core.common.action.PermissionsOperationsParameters.class, new java.lang.String[]{ "Group.Id", "Permission.ad_element_id", "Permission.ObjectId", "Permission.role_id" }, new java.lang.Object[]{ GUIDS[1], GUIDS[1], targetId, GUIDS[3] }, true, true, GUIDS[0], VdcQueryType.GetPermissionById, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[0] }, getEntity(0)); org.ovirt.engine.api.model.Permission model = new org.ovirt.engine.api.model.Permission(); model.setRole(new org.ovirt.engine.api.model.Role()); model.getRole().setId(GUIDS[3].toString()); model.setGroup(new org.ovirt.engine.api.model.Group()); model.getGroup().setId(GUIDS[1].toString()); javax.ws.rs.core.Response response = collection.add(model); assertEquals(201, response.getStatus()); assertTrue(((response.getEntity()) instanceof org.ovirt.engine.api.model.Permission)); verifyModel(((org.ovirt.engine.api.model.Permission) (response.getEntity())), 0); }
public void setStepId(org.ovirt.engine.core.compat.NGuid stepId) { this.stepId = stepId; }	public void setStepId(org.ovirt.engine.core.compat.Guid stepId) { this.stepId = stepId; }
private org.ovirt.engine.core.bll.network.host.SetupNetworksHelper createHelper(org.ovirt.engine.core.common.action.SetupNetworksParameters params) { org.ovirt.engine.core.common.businessentities.VDS vds = mock(org.ovirt.engine.core.common.businessentities.VDS.class); when(vds.getId()).thenReturn(Guid.Empty); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = spy(new org.ovirt.engine.core.bll.network.host.SetupNetworksHelper(params, vds)); when(helper.getVmInterfaceManager()).thenReturn(vmInterfaceManager); org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacade = mock(org.ovirt.engine.core.dal.dbbroker.DbFacade.class); doReturn(dbFacade).when(helper).getDbFacade(); doReturn(interfaceDAO).when(dbFacade).getInterfaceDao(); doReturn(mock(org.ovirt.engine.core.dao.VdsDAO.class)).when(dbFacade).getVdsDao(); doReturn(networkDAO).when(dbFacade).getNetworkDao(); return helper; }	private org.ovirt.engine.core.bll.network.host.SetupNetworksHelper createHelper(org.ovirt.engine.core.common.action.SetupNetworksParameters params) { org.ovirt.engine.core.common.businessentities.VDS vds = mock(org.ovirt.engine.core.common.businessentities.VDS.class); when(vds.getId()).thenReturn(Guid.Empty); return createHelper(params, vds); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand.getParameters().getVdsId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VDS, EngineMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand.getParameters().getVdsId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VDS, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
@java.lang.Override public java.lang.Void runInTransaction() { for (org.ovirt.engine.core.common.businessentities.DiskImage disk : disks) { org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters p = new org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters(containerID, disk.getId(), disk.getImageId(), getParameters().getStorageDomainId(), getMoveOrCopyImageOperation()); p.setParentCommand(getActionType()); p.setEntityInfo(getParameters().getEntityInfo()); p.setAddImageDomainMapping(((getMoveOrCopyImageOperation()) == (org.ovirt.engine.core.common.businessentities.ImageOperation.Copy))); p.setSourceDomainId(imageFromSourceDomainMap.get(disk.getId()).getStorageIds().get(0)); p.setParentParameters(getParameters()); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = getBackend().runInternalAction(VdcActionType.MoveOrCopyImageGroup, p, org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks(getExecutionContext())); getReturnValue().getVdsmTaskIdList().addAll(vdcRetValue.getInternalVdsmTaskIdList()); } return null; }	private org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters buildModeOrCopyImageGroupParameters(final org.ovirt.engine.core.compat.Guid containerID, org.ovirt.engine.core.common.businessentities.DiskImage disk) { org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters params = new org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters(containerID, disk.getId(), disk.getImageId(), getParameters().getStorageDomainId(), getMoveOrCopyImageOperation()); params.setParentCommand(getActionType()); params.setEntityInfo(getParameters().getEntityInfo()); params.setAddImageDomainMapping(((getMoveOrCopyImageOperation()) == (org.ovirt.engine.core.common.businessentities.ImageOperation.Copy))); params.setSourceDomainId(imageFromSourceDomainMap.get(disk.getId()).getStorageIds().get(0)); params.setParentParameters(getParameters()); return params; }
@java.lang.Override public javax.ws.rs.core.Response deactivate(org.ovirt.engine.api.model.Action action) { boolean forceMaintenance = ((action.isForce()) == null) ? false : action.isForce(); return doAction(ActionType.DeactivateStorageDomainWithOvfUpdate, new org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(guid, dataCenterId, forceMaintenance), action); }	@java.lang.Override public javax.ws.rs.core.Response deactivate(org.ovirt.engine.api.model.Action action) { boolean forceMaintenance = (action.isSetForce()) ? action.isForce() : false; return doAction(ActionType.DeactivateStorageDomainWithOvfUpdate, new org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(guid, dataCenterId, forceMaintenance), action); }
@org.junit.Test public void canDoActionFailsOnNullHookId() { cmd = spy(new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand<org.ovirt.engine.core.common.action.gluster.GlusterHookParameters>(new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters(null))); setupMocks(cmd); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(EngineMessages.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED.toString())); }	@org.junit.Test public void canDoActionFailsOnNullHookId() { cmd = spy(new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand<org.ovirt.engine.core.common.action.gluster.GlusterHookParameters>(new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters(null))); setupMocks(cmd); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED.toString())); }
@java.lang.Override public java.lang.String getValue(java.lang.Object object) { int numOfDisks = getEntity(object).getDiskList().size(); return java.lang.String.valueOf(numOfDisks); }	@java.lang.Override public java.lang.String getValue(java.lang.Object object) { int numOfDisks = getEntity(object).getDiskTemplateMap().size(); return java.lang.String.valueOf(numOfDisks); }
public org.ovirt.engine.core.bll.ValidationResult validateUsbDevices(org.ovirt.engine.core.common.businessentities.VmBase vm) { if ((vm.getUsbPolicy()) == (org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED)) { final java.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> usbControllers = getVmDeviceUtils().getUsbControllers(vm.getId()); final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> unmanagedControllers = usbControllers.stream().filter(( d) -> !(d.isManaged())).collect(java.util.stream.Collectors.toList()); if ((unmanagedControllers.size()) > 1) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_USB_UNMANAGED_DEV_EXCEEDED_LIMIT, java.lang.String.format("$VmName %1$s", vm.getName()), java.lang.String.format("$UnmanagedUsbDevices %1$s", unmanagedControllers)); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult validateUsbDevices(org.ovirt.engine.core.common.businessentities.VmBase vm) { if ((vm.getUsbPolicy()) == (org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED)) { final java.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> usbControllers = getVmDeviceUtils().getUsbControllers(vm.getId()); final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> unmanagedControllers = usbControllers.stream().filter(( d) -> !(d.isManaged())).collect(java.util.stream.Collectors.toList()); if ((unmanagedControllers.size()) > 1) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_USB_UNMANAGED_DEV_EXCEEDED_LIMIT); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
void addMenuItem(int index, java.lang.String label, java.lang.String href, java.lang.String primaryMenuId, java.lang.String iconCssName);	int addMenuItemPlace(int priority, java.lang.String label, java.lang.String href, java.lang.Integer primaryMenuIndex, java.lang.String iconCssName);
@java.lang.Override public org.ovirt.engine.core.common.businessentities.AsyncTask getByVdsmTaskId(org.ovirt.engine.core.compat.Guid vdsmTaskId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vdsm_task_id", vdsmTaskId); return getCallsHandler().executeRead("GetAsyncTasksByVdsmTaskId", org.ovirt.engine.core.dao.AsyncTaskDAOImpl.AsyncTaskRowMapper.instance, parameterSource); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.AsyncTask getByVdsmTaskId(org.ovirt.engine.core.compat.Guid vdsmTaskId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vdsm_task_id", vdsmTaskId); return getCallsHandler().executeRead("GetAsyncTasksByVdsmTaskId", org.ovirt.engine.core.dao.AsyncTaskDaoImpl.AsyncTaskRowMapper.instance, parameterSource); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.Cluster getCluster() { if ((_cluster) == null) { _cluster = org.ovirt.engine.core.bll.ClusterCommandBase.getClusterDao().get(org.ovirt.engine.core.bll.ClusterCommandBase.getParameters().getClusterId()); } return _cluster; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.Cluster getCluster() { if ((cluster) == null) { cluster = org.ovirt.engine.core.bll.ClusterCommandBase.getClusterDao().get(org.ovirt.engine.core.bll.ClusterCommandBase.getParameters().getClusterId()); } return cluster; }
public static void cancelTasks(final org.ovirt.engine.core.bll.CommandBase command) { org.ovirt.engine.core.bll.tasks.CommandCoordinator.getInstance().cancelTasks(command); }	public static void cancelTasks(final org.ovirt.engine.core.bll.CommandBase command) { org.ovirt.engine.core.bll.tasks.TaskManagerUtil.coco.cancelTasks(command); }
@java.lang.Override public javax.ws.rs.core.Response undelete(org.ovirt.engine.api.model.Action action) { return performAction(VdcActionType.HandleAuditLogAlertsVisibility, new org.ovirt.engine.core.common.action.HandleAuditLogAlertsVisibilityParameters(true), action, false); }	@java.lang.Override public javax.ws.rs.core.Response undelete(org.ovirt.engine.api.model.Action action) { return performAction(VdcActionType.DisplayAllAuditLogAlerts, new org.ovirt.engine.core.common.action.VdcActionParametersBase(), action, false); }
@org.ovirt.engine.ui.common.Template("This is not entire kernel command line. Parameters listed below will be added to default kernel parameters.") com.google.gwt.safehtml.shared.SafeHtml kernelCmdlineInfoIcon();	@org.ovirt.engine.ui.common.Template("This is not the entire kernel command line. Parameters listed below will be added to default kernel parameters.") com.google.gwt.safehtml.shared.SafeHtml kernelCmdlineInfoIcon();
@org.junit.Test public void testHandleActionResult() { org.ovirt.engine.core.common.action.VdcActionParametersBase testParameters = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnValue.setValidate(false); frontend.handleActionResult(VdcActionType.AddDisk, testParameters, returnValue, mockActionCallback, testState, false); verify(mockActionCallback).executed(callbackParam.capture()); assertEquals("Parameters should match", testParameters, callbackParam.getValue().getParameters()); assertEquals("Result should match", returnValue, callbackParam.getValue().getReturnValue()); assertEquals("States should match", testState, callbackParam.getValue().getState()); assertEquals("Action type should match", VdcActionType.AddDisk, callbackParam.getValue().getActionType()); }	@org.junit.Test public void testHandleActionResult() { org.ovirt.engine.core.common.action.VdcActionParametersBase testParameters = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnValue.setValid(false); frontend.handleActionResult(VdcActionType.AddDisk, testParameters, returnValue, mockActionCallback, testState, false); verify(mockActionCallback).executed(callbackParam.capture()); assertEquals("Parameters should match", testParameters, callbackParam.getValue().getParameters()); assertEquals("Result should match", returnValue, callbackParam.getValue().getReturnValue()); assertEquals("States should match", testState, callbackParam.getValue().getState()); assertEquals("Action type should match", VdcActionType.AddDisk, callbackParam.getValue().getActionType()); }
@org.junit.Test public void diskImagesOnAnyApplicableDomainsValidDomains() { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Set<org.ovirt.engine.core.compat.Guid>> validDomainsForDisk = createDiskValidDomainsMap(disk1, disk2); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomainMap = createStorageDomainsMap(disk1, disk2); assertThat(validator.diskImagesOnAnyApplicableDomains(validDomainsForDisk, storageDomainMap, EngineMessages.ACTION_TYPE_FAILED_NO_VALID_DOMAINS_STATUS_FOR_TEMPLATE_DISKS, java.util.EnumSet.of(StorageDomainStatus.Active)), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }	@org.junit.Test public void diskImagesOnAnyApplicableDomainsValidDomains() { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Set<org.ovirt.engine.core.compat.Guid>> validDomainsForDisk = createDiskValidDomainsMap(disk1, disk2); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomainMap = createStorageDomainsMap(disk1, disk2); assertThat(validator.diskImagesOnAnyApplicableDomains(validDomainsForDisk, storageDomainMap, EngineMessage.ACTION_TYPE_FAILED_NO_VALID_DOMAINS_STATUS_FOR_TEMPLATE_DISKS, java.util.EnumSet.of(StorageDomainStatus.Active)), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
public static void store(org.ovirt.vdsmfake.domain.BaseObject baseObject, java.io.File f) { if ((baseObject.getName().contains("?")) && (baseObject instanceof org.ovirt.vdsmfake.domain.DataCenter)) { baseObject.setName(baseObject.getId()); } java.io.ObjectOutputStream oos = null; try { oos = new java.io.ObjectOutputStream(new java.io.FileOutputStream(f)); oos.writeObject(baseObject); } catch (java.lang.Exception e) { org.ovirt.vdsmfake.PersistUtils.log.error("Cannot save object", e); throw new java.lang.RuntimeException("Cannot save object", e); } finally { org.apache.commons.io.IOUtils.closeQuietly(oos); baseObject.setLastUpdate(f.lastModified()); } }	public static void store(org.ovirt.vdsmfake.domain.BaseObject baseObject, java.io.File f) { if ((baseObject instanceof org.ovirt.vdsmfake.domain.DataCenter) && (baseObject.getName().contains("?"))) { baseObject.setName(baseObject.getId()); } java.io.ObjectOutputStream oos = null; try { oos = new java.io.ObjectOutputStream(new java.io.FileOutputStream(f)); oos.writeObject(baseObject); } catch (java.lang.Exception e) { org.ovirt.vdsmfake.PersistUtils.log.error("Cannot save object", e); throw new java.lang.RuntimeException("Cannot save object", e); } finally { org.apache.commons.io.IOUtils.closeQuietly(oos); baseObject.setLastUpdate(f.lastModified()); } }
private void initLoadBalance() { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> balancePolicyUnits = getBalancePolicyUnits(policyUnits); getLoadBalanceList().setItems(balancePolicyUnits); if ((clusterPolicy.getBalance()) != null) { currentLoadBalance = policyUnitsMap.get(clusterPolicy.getBalance()); } else { currentLoadBalance = policyUnitsMap.get(org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.NewClusterPolicyModel.NONE_POLICY_UNIT); } getLoadBalanceList().setIsChangable((!(clusterPolicy.isLocked()))); getLoadBalanceList().setSelectedItem(currentLoadBalance); getLoadBalanceList().getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { refreshCustomProperties(currentLoadBalance, false); currentLoadBalance = getLoadBalanceList().getSelectedItem(); } }); }	private void initLoadBalance() { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> balancePolicyUnits = getBalancePolicyUnits(policyUnits); getLoadBalanceList().setItems(balancePolicyUnits); if ((clusterPolicy.getBalance()) != null) { currentLoadBalance = policyUnitsMap.get(clusterPolicy.getBalance()); } else { currentLoadBalance = policyUnitsMap.get(org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.NewClusterPolicyModel.NONE_POLICY_UNIT); } getLoadBalanceList().setIsChangable((!(clusterPolicy.isLocked()))); getLoadBalanceList().setSelectedItem(currentLoadBalance); getLoadBalanceList().getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { refreshCustomProperties(currentLoadBalance, false); currentLoadBalance = getLoadBalanceList().getSelectedItem(); } }); }
private java.util.Collection<java.lang.String> acquireSubTemplatesLock() { final java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> lockExclusiveMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VmTemplate templateSubVersion : templateSubVersions) { lockExclusiveMap.put(templateSubVersion.getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.TEMPLATE, createSubTemplateLockMessage(templateSubVersion))); } subTemplatesLock = new org.ovirt.engine.core.utils.lock.EngineLock(lockExclusiveMap); final org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.util.Set<java.lang.String>> isLockedAndFailReason = org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getLockManager().acquireLock(subTemplatesLock); if (isLockedAndFailReason.getFirst()) { return null; } subTemplatesLock = null; java.util.List<java.lang.String> lockFailReasons = extractVariableDeclarations(isLockedAndFailReason.getSecond()); return lockFailReasons; }	private org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.util.List<java.lang.String>> acquireBaseTemplateSuccessorLock() { final java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> lockSharedMap = java.util.Collections.singletonMap(baseTemplateSuccessor.getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.TEMPLATE, createSubTemplateLockMessage(baseTemplateSuccessor))); baseTemplateSuccessorLock = new org.ovirt.engine.core.utils.lock.EngineLock(null, lockSharedMap); final org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.util.Set<java.lang.String>> isLockedAndFailReason = org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getLockManager().acquireLock(baseTemplateSuccessorLock); if (isLockedAndFailReason.getFirst()) { return new org.ovirt.engine.core.common.utils.Pair(true, null); } baseTemplateSuccessorLock = null; final java.util.List<java.lang.String> lockFailReasons = extractVariableDeclarations(isLockedAndFailReason.getSecond()); return new org.ovirt.engine.core.common.utils.Pair(false, lockFailReasons); }
public static void GetWANDisableEffects(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects>(); } java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects> res = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects>(); java.lang.String fromDb = ((java.lang.String) (source)); for (java.lang.String value : fromDb.split(",")) { if (value == null) { continue; } java.lang.String trimmedValue = value.trim(); if ("".equals(trimmedValue)) { continue; } res.add(org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects.fromString(trimmedValue)); } return res; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.ui.uicommonweb.dataprovider.GetConfigurationValueParameters(ConfigurationValues.WANDisableEffects, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }	public static void getWANDisableEffects(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects>(); } java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects> res = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects>(); java.lang.String fromDb = ((java.lang.String) (source)); for (java.lang.String value : fromDb.split(",")) { if (value == null) { continue; } java.lang.String trimmedValue = value.trim(); if ("".equals(trimmedValue)) { continue; } res.add(org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects.fromString(trimmedValue)); } return res; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.WANDisableEffects, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }
public int getPort() { return mVdsStatic.getPort(); }	public int getPort() { return vdsStatic.getPort(); }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__ACTION__CREATE); addValidateMessage(EngineMessage.VAR__TYPE__GLUSTER_VOLUME); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__CREATE); addValidationMessage(EngineMessage.VAR__TYPE__GLUSTER_VOLUME); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getExportCommand())) { export(); } else if ("Cancel".equals(command.getName())) { cancel(); } else if ("OnExport".equals(command.getName())) { onExport(); } else if ("OnSave".equals(command.getName())) { onSave(); } else if ("postNameUniqueCheck".equals(command.getName())) { postNameUniqueCheck(); setConfirmWindow(null); } else if ("OnRemove".equals(command.getName())) { onRemove(); } else if ("OnExportNoTemplates".equals(command.getName())) { doExport(); } else if ("CancelConfirmation".equals(command.getName())) { cancelConfirmation(); } }	@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getExportCommand())) { export(); } else if (command == (getCreateVmFromTemplateCommand())) { createVMFromTemplate(); } else if ("Cancel".equals(command.getName())) { cancel(); } else if ("OnExport".equals(command.getName())) { onExport(); } else if ("OnSave".equals(command.getName())) { onSave(); } else if ("OnSaveVm".equals(command.getName())) { onSaveVm(); } else if ("postNameUniqueCheck".equals(command.getName())) { postNameUniqueCheck(); setConfirmWindow(null); } else if ("OnRemove".equals(command.getName())) { onRemove(); } else if ("OnExportNoTemplates".equals(command.getName())) { doExport(); } else if ("CancelConfirmation".equals(command.getName())) { cancelConfirmation(); } }
@org.junit.Test public void testGetAllRolesForUserAndGroupByAdElement() { java.util.List<org.ovirt.engine.core.common.businessentities.RolesEntity> result = dao.getAllForAdElement(org.ovirt.engine.core.dao.RoleDAOTest.USER_ID); assertNotNull(result); assertFalse(result.isEmpty()); }	@org.junit.Test public void testGetAllRolesForUserAndGroupByAdElement() { java.util.List<org.ovirt.engine.core.common.businessentities.Role> result = dao.getAllForAdElement(org.ovirt.engine.core.dao.RoleDAOTest.USER_ID); assertNotNull(result); assertFalse(result.isEmpty()); }
public org.ovirt.engine.core.common.businessentities.AsyncTasks createAsyncTask(org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { org.ovirt.engine.core.compat.Guid parentCommandId = ((command.getParameters().getParentParameters()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : command.getParameters().getParentParameters().getCommandId(); org.ovirt.engine.core.common.action.VdcActionParametersBase parentParameters = command.getParentParameters(parentCommand); if (VdcActionType.Unknown.equals(command.getParameters().getCommandType())) { command.getParameters().setCommandType(command.getActionType()); } org.ovirt.engine.core.common.businessentities.AsyncTasks asyncTask = new org.ovirt.engine.core.common.businessentities.AsyncTasks(org.ovirt.engine.core.common.businessentities.AsyncTaskResultEnum.success, org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.running, asyncTaskCreationInfo.getVdsmTaskId(), asyncTaskCreationInfo.getStepId(), asyncTaskCreationInfo.getStoragePoolID(), asyncTaskCreationInfo.getTaskType(), getParentCommandEntity(parentCommandId, parentCommand, parentParameters), getChildCommandEntity(command, parentCommand)); return asyncTask; }	public org.ovirt.engine.core.common.businessentities.AsyncTask createAsyncTask(org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { org.ovirt.engine.core.compat.Guid parentCommandId = ((command.getParameters().getParentParameters()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : command.getParameters().getParentParameters().getCommandId(); org.ovirt.engine.core.common.action.VdcActionParametersBase parentParameters = command.getParentParameters(parentCommand); if (VdcActionType.Unknown.equals(command.getParameters().getCommandType())) { command.getParameters().setCommandType(command.getActionType()); } org.ovirt.engine.core.common.businessentities.AsyncTask asyncTask = new org.ovirt.engine.core.common.businessentities.AsyncTask(org.ovirt.engine.core.common.businessentities.AsyncTaskResultEnum.success, org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.running, asyncTaskCreationInfo.getVdsmTaskId(), asyncTaskCreationInfo.getStepId(), asyncTaskCreationInfo.getStoragePoolID(), asyncTaskCreationInfo.getTaskType(), getParentCommandEntity(parentCommandId, parentCommand, parentParameters), getChildCommandEntity(command, parentCommand)); return asyncTask; }
@org.junit.Test public void allPassthroughVnicsMigratableMulitpleVmsNotValid() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = initValidatorWithMultipleVms(3); allPassthroughVnicsMigratableCommon(vmList.get(0).getId(), 2); vmNotHavingPassthroughVnicsCommon(vmList.get(1).getId(), 0, 1, 8); allPassthroughVnicsMigratableCommon(vmList.get(2).getId(), 4); assertThat(validator.allPassthroughVnicsMigratable(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED)); }	@org.junit.Test public void passthroughVnicsMigrationIsNotSupported() { mockVnics(createMigratablePassthroughNics(1, true)); vm.setClusterCompatibilityVersion(Version.v3_6); assertThatAllPassthroughVnicsMigratable(false); }
public static <TSource> java.lang.Iterable<TSource> Where(java.lang.Iterable<TSource> source, org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<TSource> predicate) { java.util.ArrayList<TSource> list = new java.util.ArrayList<TSource>(); for (TSource item : source) { if (predicate.match(item)) { list.add(item); } } return list; }	public static <TSource> java.lang.Iterable<TSource> where(java.lang.Iterable<TSource> source, org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<TSource> predicate) { java.util.ArrayList<TSource> list = new java.util.ArrayList<TSource>(); for (TSource item : source) { if (predicate.match(item)) { list.add(item); } } return list; }
void attachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().add(alertPanel); com.google.gwt.dom.client.Element messageDivElement = alertPanel.getMessageAt(0).getElement(); if (org.ovirt.engine.ui.common.utils.ElementUtils.detectOverflowUsingScrollWidth(messageDivElement)) { com.google.gwt.safehtml.shared.SafeHtml tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(messageDivElement.getInnerText()); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltipContent.asString(), alertPanel.getElement()); } }	void attachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().add(alertPanel); com.google.gwt.dom.client.Element messageDivElement = alertPanel.getMessageAt(0).getElement(); if (org.ovirt.engine.ui.common.utils.ElementUtils.detectOverflowUsingScrollWidth(messageDivElement)) { java.lang.String tooltipContent = messageDivElement.getInnerText(); org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipUtils.setTooltipOnElement(tooltipContent, alertPanel.getElement()); } }
private void vmInitLoaded(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.UserPortalExistingVmModelBehavior(vm), this); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editVmTitle()); model.setHelpTag(HelpTag.edit_vm); model.setHashName("edit_vm"); model.getVmType().setSelectedItem(vm.getVmType()); model.setCustomPropertiesKeysList(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getCustomPropertiesList()); model.setIsAdvancedModeLocalStorageKey("up_vm_dialog"); setWindow(model); model.initialize(null); org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand switchModeCommand = new org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand(); switchModeCommand.init(model); model.getCommands().add(switchModeCommand); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSave", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }	private void vmInitLoaded(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.UserPortalExistingVmModelBehavior(vm), this); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editVmTitle()); model.setHelpTag(HelpTag.edit_vm); model.setHashName("edit_vm"); model.getVmType().setSelectedItem(vm.getVmType()); model.setCustomPropertiesKeysList(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getCustomPropertiesList()); model.setIsAdvancedModeLocalStorageKey("up_vm_dialog"); setWindow(model); model.initialize(null); org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand switchModeCommand = new org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand(); switchModeCommand.init(model); model.getCommands().add(switchModeCommand); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSave", this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.getCommands().add(tempVar2); }
private org.ovirt.engine.core.bll.context.CommandContext buildCommandContext(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); org.ovirt.engine.core.common.utils.PersistedCommandContext persistedCommandContext = cmdEntity.getCommandContext(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(persistedCommandContext.getJobId()))) { executionContext.setJob(jobRepository.getJobWithSteps(persistedCommandContext.getJobId())); } else if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(persistedCommandContext.getStepId()))) { executionContext.setStep(jobRepository.getStep(persistedCommandContext.getStepId())); } if (org.apache.commons.lang.StringUtils.isNotEmpty(persistedCommandContext.getExecutionMethod())) { executionContext.setExecutionMethod(ExecutionContext.ExecutionMethod.valueOf(persistedCommandContext.getExecutionMethod())); } executionContext.setCompleted(persistedCommandContext.isCompleted()); executionContext.setJobRequired(persistedCommandContext.isJobRequired()); executionContext.setMonitored(persistedCommandContext.isMonitored()); executionContext.setShouldEndJob(persistedCommandContext.shouldEndJob()); executionContext.setTasksMonitored(persistedCommandContext.isTasksMonitored()); return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext); }	private org.ovirt.engine.core.bll.context.CommandContext buildCommandContext(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); org.ovirt.engine.core.common.utils.PersistedCommandContext persistedCommandContext = cmdEntity.getCommandContext(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(persistedCommandContext.getJobId()))) { executionContext.setJob(jobRepository.getJobWithSteps(persistedCommandContext.getJobId())); } else if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(persistedCommandContext.getStepId()))) { executionContext.setStep(jobRepository.getStep(persistedCommandContext.getStepId())); } executionContext.setExecutionMethod(persistedCommandContext.getExecutionMethod()); executionContext.setCompleted(persistedCommandContext.isCompleted()); executionContext.setJobRequired(persistedCommandContext.isJobRequired()); executionContext.setMonitored(persistedCommandContext.isMonitored()); executionContext.setShouldEndJob(persistedCommandContext.shouldEndJob()); executionContext.setTasksMonitored(persistedCommandContext.isTasksMonitored()); return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext); }
@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { processRefreshVdsStatsResponse(((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result")))); if (!(isVdsUpOrGoingToMaintenance)) { vdsManager.setStatus(VDSStatus.Up, vds); } refreshVdsRunTimeInfo(isVdsUpOrGoingToMaintenance); } catch (java.lang.Throwable t) { onFailure(t); } }	@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { processRefreshVdsStatsResponse(((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result")))); if (!(vdsUpOrGoingToMaintenance)) { vdsManager.setStatus(VDSStatus.Up, vds); } refreshVdsRunTimeInfo(vdsUpOrGoingToMaintenance); } catch (java.lang.Throwable t) { onFailure(t); } }
protected void onAdUsersLoaded(org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel adElementListModel) { getSearchInProgress().setEntity(false); java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.aaa.DbUser>> items = new java.util.ArrayList<>(); items.addAll(getusers()); adElementListModel.getSelectAll().setEntity(false); adElementListModel.setItems(items); setIsEmpty(items.isEmpty()); }	protected void onAdUsersLoaded(org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel adElementListModel) { onAdItemsLoaded(adElementListModel, getusers()); }
@org.junit.Before public void prepareParams() { NFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.NFS, NfsVersion.V4, 50, 0); IscsiConnection = createIscsiConnection("10.11.12.225", StorageType.ISCSI, "iqn.2013-04.myhat.com:abc-target1", "user1", "mypassword", "1"); prepareCommand(); }	@org.junit.Before public void prepareParams() { NFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.NFS, NfsVersion.V4, 50, 0); iSCSIConnection = createIscsiConnection("10.11.12.225", StorageType.ISCSI, "iqn.2013-04.myhat.com:abc-target1", "user1", "mypassword", "1"); prepareCommand(); }
@java.lang.Override protected boolean canDoAction() { if (((getParameters()) == null) || ((getParameters().getQuotaId()) == null)) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } org.ovirt.engine.core.common.businessentities.Quota quota = getQuota(); if (quota == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } if ((getQuotaDAO().isQuotaInUse(quota)) && (!(quota.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_IN_USE_BY_VM_OR_DISK); return false; } return true; }	@java.lang.Override protected boolean canDoAction() { if (((getParameters()) == null) || ((getParameters().getQuotaId()) == null)) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } org.ovirt.engine.core.common.businessentities.Quota quota = getQuota(); if (quota == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } if ((!(QuotaEnforcementTypeEnum.DISABLED.equals(quota.getQuotaEnforcementType()))) && (getQuotaDAO().isQuotaInUse(quota))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_IN_USE_BY_VM_OR_DISK); return false; } return true; }
@java.lang.Override protected void readGeneralData(org.ovirt.engine.core.compat.backendcompat.XmlNode content) { org.ovirt.engine.core.compat.backendcompat.XmlNode node = content.SelectSingleNode("Name"); if (node != null) { _vmTemplate.setname(node.InnerText); name = _vmTemplate.getname(); } node = content.SelectSingleNode("TemplateId"); if (node != null) { if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(node.InnerText))) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(node.InnerText)); } } node = content.SelectSingleNode("default_display_type"); if (node != null) { if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(node.InnerText))) { _vmTemplate.setdefault_display_type(org.ovirt.engine.core.common.businessentities.DisplayType.forValue(java.lang.Integer.parseInt(node.InnerText))); } } node = content.SelectSingleNode("IsDisabled"); if (node != null) { if (!(org.apache.commons.lang.StringUtils.isEmpty(node.InnerText))) { _vmTemplate.setDisabled(java.lang.Boolean.parseBoolean(node.InnerText)); } } }	@java.lang.Override protected void readGeneralData(org.ovirt.engine.core.compat.backendcompat.XmlNode content) { org.ovirt.engine.core.compat.backendcompat.XmlNode node = content.SelectSingleNode("Name"); if (node != null) { _vmTemplate.setname(node.InnerText); name = _vmTemplate.getname(); } node = content.SelectSingleNode("TemplateId"); if (node != null) { if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(node.InnerText))) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(node.InnerText)); } } node = content.SelectSingleNode("IsDisabled"); if (node != null) { _vmTemplate.setDisabled(java.lang.Boolean.parseBoolean(node.InnerText)); } }
private void warnIfNotAllDisksPermitSnapshots() { for (org.ovirt.engine.core.bll.Disk disk : org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values()) { if (!(disk.isAllowSnapshot())) { auditLogDirector.log(this, AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT); break; } } }	private void warnIfNotAllDisksPermitSnapshots() { for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values()) { if (!(disk.isAllowSnapshot())) { auditLogDirector.log(this, AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT); break; } } }
public void runQuery(org.ovirt.engine.core.compat.Guid guid) { startProgress("getCount"); org.ovirt.engine.ui.frontend.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.setHandleFailure(true); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { stopProgress(); org.ovirt.engine.core.common.businessentities.ErrataCounts resultEntity = returnValue.getReturnValue(); setMessage(null); if ((resultEntity != null) && (returnValue.getSucceeded())) { setErrataCounts(resultEntity); } else { setMessage((((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel.constants.katelloProblemRetrievingErrata()) + " ") + (returnValue.getExceptionMessage()))); } } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(getQueryType(), new org.ovirt.engine.core.common.queries.GetErrataCountsParameters(guid), asyncQuery); }	public void runQuery(org.ovirt.engine.core.compat.Guid guid) { startProgress("getCount"); org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncQuery = new org.ovirt.engine.ui.uicommonweb.models.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { stopProgress(); org.ovirt.engine.core.common.businessentities.ErrataCounts resultEntity = returnValue.getReturnValue(); setMessage(null); if ((resultEntity != null) && (returnValue.getSucceeded())) { setErrataCounts(resultEntity); } else { setMessage((((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel.constants.katelloProblemRetrievingErrata()) + " ") + (returnValue.getExceptionMessage()))); } } }); asyncQuery.setHandleFailure(true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(getQueryType(), new org.ovirt.engine.core.common.queries.GetErrataCountsParameters(guid), asyncQuery); }
private java.lang.Integer calcMaxVCpu() { java.lang.Integer maxSockets = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmSockets, vm.getCompatibilityVersion().getValue()); java.lang.Integer maxVCpus = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmCpus, vm.getCompatibilityVersion().getValue()); int threadsPerCore = vm.getThreadsPerCpu(); int cpuPerSocket = vm.getCpuPerSocket(); maxVCpus = (cpuPerSocket * threadsPerCore) * (java.lang.Math.min(maxSockets, (maxVCpus / (cpuPerSocket * threadsPerCore)))); return maxVCpus; }	private java.lang.Integer calcMaxVCpu() { return org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu(vm.getStaticData(), vm.getClusterCompatibilityVersion()); }
@java.lang.Override protected boolean validate() { if ((org.ovirt.engine.core.bll.numa.vm.AbstractVmNumaNodeCommand.getVm()) == null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } return validate(org.ovirt.engine.core.bll.numa.vm.NumaValidator.checkVmNumaNodesIntegrity(org.ovirt.engine.core.bll.numa.vm.AbstractVmNumaNodeCommand.getVm(), getVmNumaNodesForValidation())); }	@java.lang.Override protected boolean validate() { if ((org.ovirt.engine.core.bll.numa.vm.AbstractVmNumaNodeCommand.getVm()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } return validate(org.ovirt.engine.core.bll.numa.vm.NumaValidator.checkVmNumaNodesIntegrity(org.ovirt.engine.core.bll.numa.vm.AbstractVmNumaNodeCommand.getVm(), getVmNumaNodesForValidation())); }
private boolean refreshRepos(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.ImageFileType imageType, boolean forceRefresh) { boolean refreshResult = false; java.util.List<org.ovirt.engine.core.common.businessentities.RepoImage> tempProblematicRepoFileList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoImage>(); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(storageDomainId); if (!forceRefresh) { return true; } if ((storageDomain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) { refreshResult = refreshIsoDomain(storageDomainId, tempProblematicRepoFileList, imageType); } else if ((storageDomain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Image)) { refreshResult = refreshImageDomain(storageDomain, tempProblematicRepoFileList, imageType); } else { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.errorFormat("Unable to refresh the storage domain {0}, Storage Type {1} not supported", storageDomainId, storageDomain.getStorageDomainType()); return false; } org.ovirt.engine.core.bll.IsoDomainListSyncronizer.handleErrorLog(tempProblematicRepoFileList); if (refreshResult) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.addToAuditLogSuccessMessage(storageDomain.getStorageName(), imageType.name()); } return refreshResult; }	private boolean refreshRepos(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.ImageFileType imageType, boolean forceRefresh) { boolean res = true; java.util.List<org.ovirt.engine.core.common.businessentities.RepoImage> tempProblematicRepoFileList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoImage>(); if (forceRefresh) { if (refreshIsoDomain(storageDomainId, tempProblematicRepoFileList, imageType)) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.handleErrorLog(tempProblematicRepoFileList); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(storageDomainId); org.ovirt.engine.core.bll.IsoDomainListSyncronizer.addToAuditLogSuccessMessage(storageDomain.getStorageName(), imageType.name()); } else { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.handleErrorLog(tempProblematicRepoFileList); res = false; } } return res; }
public java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> getUserRequestForStorageDomainRepoFileList(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType, boolean forceRefresh) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> repoList; if (!(isStorageDomainValid(storageDomainId, imageType, forceRefresh))) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.GetIsoListError); } repoList = getCachedIsoListByDomainId(storageDomainId, imageType); return repoList; }	public java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> getUserRequestForStorageDomainRepoFileList(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType, boolean forceRefresh) { if (!(isStorageDomainValid(storageDomainId, imageType, forceRefresh))) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.GetIsoListError); } return getCachedIsoListByDomainId(storageDomainId, imageType); }
private static void verifyModelSpecific(org.ovirt.engine.api.model.Cdrom model, int index) { assertEquals(Guid.Empty.toString(), model.getId()); assertTrue(model.isSetTemplate()); assertEquals(org.ovirt.engine.api.restapi.resource.BackendTemplateCdromResourceTest.TEMPLATE_ID.toString(), model.getTemplate().getId()); assertTrue(model.isSetFile()); assertEquals(org.ovirt.engine.api.restapi.resource.BackendTemplateCdromResourceTest.ISO_PATH, model.getFile().getId()); }	private void verifyModel(org.ovirt.engine.api.model.Cdrom model) { assertEquals(Guid.Empty.toString(), model.getId()); assertTrue(model.isSetTemplate()); assertEquals(org.ovirt.engine.api.restapi.resource.BackendTemplateCdromResourceTest.TEMPLATE_ID.toString(), model.getTemplate().getId()); assertTrue(model.isSetFile()); assertEquals(org.ovirt.engine.api.restapi.resource.BackendTemplateCdromResourceTest.ISO_PATH, model.getFile().getId()); }
public void logoutUser(final java.lang.Object userObject, final org.ovirt.engine.ui.frontend.communication.VdcUserCallback<?> callback) { loggedIn = false; processor.logoutUser(userObject, callback); }	public void logoutUser(final java.lang.Object userObject, final org.ovirt.engine.ui.frontend.communication.UserCallback<?> callback) { loggedIn = false; processor.logoutUser(userObject, callback); }
protected org.ovirt.engine.core.bll.job.ExecutionContext createMigrateVmContext(org.ovirt.engine.core.bll.job.ExecutionContext parentContext, org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.bll.job.ExecutionContext ctx = new org.ovirt.engine.core.bll.job.ExecutionContext(); try { java.util.Map<java.lang.String, java.lang.String> values = new java.util.HashMap<java.lang.String, java.lang.String>(); values.put(VdcObjectType.VM.name().toLowerCase(), vm.getVmName()); values.put(VdcObjectType.VDS.name().toLowerCase(), vm.getRunOnVdsName()); org.ovirt.engine.core.common.job.Step step = org.ovirt.engine.core.bll.job.ExecutionHandler.addSubStep(org.ovirt.engine.core.bll.MaintananceVdsCommand.getExecutionContext(), parentContext.getJob().getStep(StepEnum.EXECUTING), StepEnum.MIGRATE_VM, org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveStepMessage(StepEnum.MIGRATE_VM, values)); ctx.setStep(step); ctx.setMonitored(true); } catch (java.lang.RuntimeException e) { log.error("Failed to create ExecutionContext for MigrateVmCommand", e); } return ctx; }	protected org.ovirt.engine.core.bll.context.CommandContext createMigrateVmContext(org.ovirt.engine.core.bll.job.ExecutionContext parentContext, org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.bll.job.ExecutionContext ctx = new org.ovirt.engine.core.bll.job.ExecutionContext(); try { java.util.Map<java.lang.String, java.lang.String> values = new java.util.HashMap<java.lang.String, java.lang.String>(); values.put(VdcObjectType.VM.name().toLowerCase(), vm.getVmName()); values.put(VdcObjectType.VDS.name().toLowerCase(), vm.getRunOnVdsName()); org.ovirt.engine.core.common.job.Step step = org.ovirt.engine.core.bll.job.ExecutionHandler.addSubStep(org.ovirt.engine.core.bll.MaintananceVdsCommand.getExecutionContext(), parentContext.getJob().getStep(StepEnum.EXECUTING), StepEnum.MIGRATE_VM, org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveStepMessage(StepEnum.MIGRATE_VM, values)); ctx.setStep(step); ctx.setMonitored(true); } catch (java.lang.RuntimeException e) { log.error("Failed to create ExecutionContext for MigrateVmCommand", e); } return new org.ovirt.engine.core.bll.context.CommandContext(ctx); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessages.VAR__ACTION__REMOVE); addCanDoActionMessage(EngineMessages.VAR__TYPE__VM); }	@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__REMOVE); addCanDoActionMessage(EngineMessage.VAR__TYPE__VM); }
private void copyTemplatePermissions(org.ovirt.engine.core.bll.UniquePermissionsSet permissionsToAdd) { org.ovirt.engine.core.dao.PermissionDAO dao = org.ovirt.engine.core.bll.AddVmCommand.getDbFacade().getPermissionDao(); java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> templatePermissions = dao.getAllForEntity(org.ovirt.engine.core.bll.AddVmCommand.getVmTemplateId(), org.ovirt.engine.core.bll.AddVmCommand.getCurrentUser().getId(), org.ovirt.engine.core.bll.AddVmCommand.getSessionId(), false); for (org.ovirt.engine.core.common.businessentities.Permissions templatePermission : templatePermissions) { boolean templateOwnerRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_OWNER.getId()); boolean templateUserRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_USER.getId()); if (templateOwnerRole || templateUserRole) { continue; } permissionsToAdd.addPermission(templatePermission.getad_element_id(), templatePermission.getrole_id(), org.ovirt.engine.core.bll.AddVmCommand.getVmId(), VdcObjectType.VM); } }	private void copyTemplatePermissions(org.ovirt.engine.core.bll.UniquePermissionsSet permissionsToAdd) { org.ovirt.engine.core.dao.PermissionDAO dao = org.ovirt.engine.core.bll.AddVmCommand.getDbFacade().getPermissionDao(); java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> templatePermissions = dao.getAllForEntity(org.ovirt.engine.core.bll.AddVmCommand.getVmTemplateId(), org.ovirt.engine.core.bll.AddVmCommand.getEngineSessionSeqId(), false); for (org.ovirt.engine.core.common.businessentities.Permissions templatePermission : templatePermissions) { boolean templateOwnerRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_OWNER.getId()); boolean templateUserRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_USER.getId()); if (templateOwnerRole || templateUserRole) { continue; } permissionsToAdd.addPermission(templatePermission.getad_element_id(), templatePermission.getrole_id(), org.ovirt.engine.core.bll.AddVmCommand.getVmId(), VdcObjectType.VM); } }
@org.junit.Test public void testWriteFileToStreamIOException() { java.io.File file = new java.io.File("/doesnotexist/iamprettysure"); java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(); try { org.ovirt.engine.core.utils.ServletUtils.writeFileToStream(out, file); fail("Should not get here, file doesn't exist"); } catch (java.io.IOException ioe) { } }	@org.junit.Test public void testWriteFileToStream_IOException() { java.io.File file = new java.io.File("/doesnotexist/iamprettysure"); java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(); try { org.ovirt.engine.core.utils.ServletUtils.writeFileToStream(out, file); fail("Should not get here, file doesn't exist"); } catch (java.io.IOException ioe) { } }
@java.lang.Override public void updateReportsPanel(java.lang.String url, java.util.Map<java.lang.String, java.util.List<java.lang.String>> params) { if (!(org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabReportsView.reportsWebappDeployed)) { checkUpdateReportsPanel(url, params); } else { doUpdateReportsPanel(url, params); } }	@java.lang.Override public void updateReportsPanel(java.lang.String url, java.util.Map<java.lang.String, java.util.List<java.lang.String>> params) { reportPostableFrame.setUrl(url); reportPostableFrame.removeOldParams(); for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> entry : params.entrySet()) { for (java.lang.String param : entry.getValue()) { reportPostableFrame.addParameter(entry.getKey(), param); } } reportPostableFrame.post(); }
private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getAffinityLabels(); for (org.ovirt.engine.core.common.businessentities.Label label : affinityLabels) { label.addVm(org.ovirt.engine.core.bll.AddVmCommand.getVm()); labelDao.update(label); } }	private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.stream().map(Label::getId).collect(java.util.stream.Collectors.toList()); labelDao.addVmToLabels(org.ovirt.engine.core.bll.AddVmCommand.getVmId(), labelIds); }
public org.ovirt.engine.ui.common.widget.dialog.tab.DialogTabPanel getTabPanel() { return mainTabPanel; }	@java.lang.Override public org.ovirt.engine.ui.common.widget.dialog.tab.DialogTabPanel getTabPanel() { return mainTabPanel; }
@org.junit.Test public void testLocalDcAndMatchingCompatiblityVersion() { storagePool.setcompatibility_version(Version.v3_0); storagePool.setIsLocal(true); assertTrue(validator.isDcMatchingPosixCompatiblityVersion().isValid()); }	@org.junit.Test public void testLocalDcAndMatchingCompatiblityVersion() { storagePool.setcompatibility_version(Version.v3_0); storagePool.setIsLocal(true); assertTrue(validator.isPosixSupportedInDC().isValid()); }
private void updateDiskProfiles(org.ovirt.engine.core.common.businessentities.StoragePool selectedItem) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getStorageDomain().getSelectedItem(); if (storageDomain == null) { return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetDiskProfilesByStorageDomainId, new org.ovirt.engine.core.common.queries.IdQueryParameters(storageDomain.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object innerModel, java.lang.Object innerReturnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> diskProfiles = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (innerReturnValue)).getReturnValue(); if ((diskProfiles != null) && (!(diskProfiles.isEmpty()))) { getDiskProfile().setItems(diskProfiles); } org.ovirt.engine.core.compat.Guid defaultProfileId = ((getDisk()) != null) ? ((org.ovirt.engine.core.common.businessentities.DiskImage) (getDisk())).getDiskProfileId() : null; if (defaultProfileId != null) { for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile profile : diskProfiles) { if (profile.getId().equals(defaultProfileId)) { getDiskProfile().setSelectedItem(profile); return; } } org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile = new org.ovirt.engine.core.common.businessentities.profiles.DiskProfile(); diskProfile.setId(defaultProfileId); if ((getDisk()) != null) { diskProfile.setName(getDiskImage().getDiskProfileName()); } diskProfiles.add(diskProfile); getDiskProfile().setItems(diskProfiles); getDiskProfile().setSelectedItem(diskProfile); } } }, getHash())); }	private void updateDiskProfiles(org.ovirt.engine.core.common.businessentities.StoragePool selectedItem) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getStorageDomain().getSelectedItem(); if (storageDomain == null) { return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetDiskProfilesByStorageDomainId, new org.ovirt.engine.core.common.queries.IdQueryParameters(storageDomain.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object innerModel, java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.this.setDiskProfilesList(((java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (value)).getReturnValue()))); } }, getHash())); }
protected void setDefaultSwitchTypeIfNeeded() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if (cluster.hasRequiredSwitchType(null)) { org.ovirt.engine.core.common.network.SwitchType defaultSwitchType = org.ovirt.engine.core.common.network.DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } }	protected void setDefaultSwitchTypeIfNeeded() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if (!(cluster.isSetRequiredSwitchType())) { org.ovirt.engine.core.common.network.SwitchType defaultSwitchType = org.ovirt.engine.core.common.network.DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } }
protected void addTaskIdToEntities(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.common.VdcObjectType entityType, org.ovirt.engine.core.compat.Guid... entityIds) { getAsyncTaskDao().addAsyncTaskToEntities(taskId, entityType, entityIds); }	protected org.ovirt.engine.core.compat.Guid CreateTask(org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand, java.lang.String description, org.ovirt.engine.core.common.VdcObjectType entityType, org.ovirt.engine.core.compat.Guid... entityIds) { org.ovirt.engine.core.compat.Guid retValue = org.ovirt.engine.core.compat.Guid.Empty; javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); try { org.ovirt.engine.core.common.job.Step taskStep = org.ovirt.engine.core.bll.job.ExecutionHandler.addTaskStep(getExecutionContext(), org.ovirt.engine.core.common.job.StepEnum.getStepNameByTaskType(asyncTaskCreationInfo.getTaskType()), description); if (taskStep != null) { asyncTaskCreationInfo.setStepId(taskStep.getId()); } org.ovirt.engine.core.bll.SPMAsyncTask task = ConcreteCreateTask(asyncTaskCreationInfo, parentCommand); retValue = task.getTaskID(); if (task != null) { task.setEntityType(entityType); task.setAssociatedEntities(entityIds); org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.addOrUpdateTaskInDB(task); org.ovirt.engine.core.bll.AsyncTaskManager.getInstance().lockAndAddTaskToManager(task); retValue = task.getTaskID(); } org.ovirt.engine.core.bll.job.ExecutionHandler.updateStepExternalId(taskStep, retValue, ExternalSystemType.VDSM); } catch (java.lang.RuntimeException ex) { log.errorFormat("Error during CreateTask for command: {0}. Exception {1}", getClass().getName(), ex); } finally { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); } return retValue; }
@org.junit.Test public void validateCantUploadLockedImage() { initializeSuppliedImage(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED, "")).when(diskImagesValidator).diskImagesNotLocked(); assertFailsWithValidateMessage(getCommand(), EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED); }	@org.junit.Test public void validateCantUploadLockedImage() { initializeSuppliedImage(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED, "")).when(diskImagesValidator).diskImagesNotLocked(); getCommand().validate(); org.ovirt.engine.core.bll.ValidateTestUtils.assertValidationMessages("Can't start a transfer for a locked image.", getCommand(), EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED); }
private java.lang.String createSpiceInvocationInfo() { return new org.ovirt.engine.ui.common.view.popup.ConsolePopupView.KeyValueHtmlRowMaker(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.auto(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokeAuto()).append(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.nativeClient(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.consoleInvokeNative()).append(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceHtml5(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokeHtml5()).toString(); }	private java.lang.String createSpiceInvocationInfo() { org.ovirt.engine.ui.common.view.popup.ConsolePopupView.KeyValueHtmlRowMaker rowMaker = new org.ovirt.engine.ui.common.view.popup.ConsolePopupView.KeyValueHtmlRowMaker(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.auto(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokeAuto()); rowMaker.append(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.nativeClient(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.consoleInvokeNative()); if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isEnableDeprecatedClientModeSpicePlugin()) { rowMaker.append(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.browserPlugin(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokePlugin()); } rowMaker.append(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceHtml5(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokeHtml5()); return rowMaker.toString(); }
public static boolean isSpecialDevice(java.lang.String device, org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type) { return (((((org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.SOUND) == type) || (VmDeviceType.USB.getName().equals(device))) || ((VmDeviceType.SMARTCARD.getName().equals(device)) && ((org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.SMARTCARD) == type))) || ((VmDeviceType.SPICEVMC.getName().equals(device)) && ((org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.CHANNEL) == type))) || ((VmDeviceType.MEMBALLOON.getName().equals(device)) && ((org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.BALLOON) == type)); }	public static boolean isSpecialDevice(java.lang.String device, org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type) { return ((((((org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.SOUND) == type) || (VmDeviceType.USB.getName().equals(device))) || ((VmDeviceType.SMARTCARD.getName().equals(device)) && ((org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.SMARTCARD) == type))) || ((VmDeviceType.SPICEVMC.getName().equals(device)) && ((org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.CHANNEL) == type))) || ((VmDeviceType.MEMBALLOON.getName().equals(device)) && ((org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.BALLOON) == type))) || ((VmDeviceType.WATCHDOG.getName().equals(device)) && ((org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.WATCHDOG) == type)); }
protected java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> getAllImageSnapshots(org.ovirt.engine.core.common.businessentities.DiskImage diskImage) { return org.ovirt.engine.core.bll.ImagesHandler.getAllImageSnapshots(diskImage.getImageId(), diskImage.getItGuid()); }	protected java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> getAllImageSnapshots(org.ovirt.engine.core.common.businessentities.DiskImage diskImage) { return org.ovirt.engine.core.bll.ImagesHandler.getAllImageSnapshots(diskImage.getImageId(), diskImage.getImageTemplateId()); }
@javax.ws.rs.POST @javax.ws.rs.Path("/{cluster:[^/]*}/{vm:[^/]*}") @javax.ws.rs.Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON) @javax.ws.rs.Consumes(javax.ws.rs.core.MediaType.APPLICATION_JSON) public java.util.Map<java.lang.String, org.ovirt.optimizer.common.ScoreResult> simpleSchedule(java.util.Map<java.lang.String, org.ovirt.optimizer.common.DebugSnapshot> snapshots, @javax.ws.rs.PathParam("cluster") java.lang.String cluster, @javax.ws.rs.PathParam("vm") java.lang.String vm) throws java.io.IOException { response.getOutputHeaders().putSingle("Access-Control-Allow-Origin", "*"); response.getOutputHeaders().putSingle("Access-Control-Allow-Methods", "POST"); response.getOutputHeaders().putSingle("Access-Control-Allow-Headers", "Content-Type"); if (!(configProvider.load().getConfig().getProperty(ConfigProvider.DEBUG_ENDPOINT_ENABLED, "false").equals("true"))) { response.sendError(403, "Debug url is disabled, please check your configuration."); return null; } org.ovirt.optimizer.service.problemspace.OptimalDistributionStepsSolution baseSolution = null; if (snapshots != null) { org.ovirt.optimizer.common.DebugSnapshot snapshot = snapshots.get(cluster); if (snapshot != null) { baseSolution = snapshot.getState(); } } return optimizer.simpleSchedule(cluster, baseSolution, vm); }	@javax.ws.rs.POST @javax.ws.rs.Path("/{cluster:[^/]*}/{vm:[^/]*}") @javax.ws.rs.Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON) @javax.ws.rs.Consumes(javax.ws.rs.core.MediaType.APPLICATION_JSON) public java.util.Map<java.lang.String, org.ovirt.optimizer.common.ScoreResult> simpleSchedule(java.util.Map<java.lang.String, org.ovirt.optimizer.common.DebugSnapshot> snapshots, @javax.ws.rs.PathParam("cluster") java.lang.String cluster, @javax.ws.rs.PathParam("vm") java.lang.String vm) throws java.io.IOException { response.getOutputHeaders().putSingle("Access-Control-Allow-Origin", "*"); response.getOutputHeaders().putSingle("Access-Control-Allow-Methods", "POST"); response.getOutputHeaders().putSingle("Access-Control-Allow-Headers", "Content-Type"); if (!(configProvider.load().getConfig().getProperty(ConfigProvider.DEBUG_ENDPOINT_ENABLED, "false").equals("true"))) { response.sendError(403, "Debug url is disabled, please check your configuration."); return null; } org.ovirt.optimizer.service.problemspace.OptimalDistributionStepsSolution baseSolution = null; java.util.List<java.util.Map<java.lang.String, java.lang.String>> preSteps = java.util.Collections.emptyList(); if (snapshots != null) { org.ovirt.optimizer.common.DebugSnapshot snapshot = snapshots.get(cluster); if (snapshot != null) { baseSolution = snapshot.getState(); if (((snapshot.getResult()) != null) && ((snapshot.getResult().getMigrations()) != null)) { preSteps = snapshot.getResult().getMigrations(); } } } return optimizer.simpleSchedule(cluster, baseSolution, preSteps, vm); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Import") java.lang.String importNetworksButton();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Import") java.lang.String importNetworksButton();
@org.junit.Test public void testFenceStatus() throws java.lang.Exception { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); retVal.setSucceeded(true); retVal.setReturnValue(new org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult(FenceOperationResult.Status.SUCCESS, org.ovirt.engine.core.common.businessentities.pm.HostPowerStatus.ON)); setUpEntityQueryExpectations(VdcQueryType.GetVdsFenceStatus, org.ovirt.engine.core.common.queries.VdsIdParametersBase.class, new java.lang.String[]{ "VdsId" }, new java.lang.Object[]{ GUIDS[0] }, retVal); control.replay(); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setFenceType(FenceType.STATUS.value()); verifyActionResponse(resource.fence(action)); org.ovirt.engine.api.model.PowerManagementStatus status = org.ovirt.engine.api.model.PowerManagementStatus.fromValue(action.getPowerManagement().getStatus().getState()); assertTrue(status.equals(PowerManagementStatus.ON)); }	@org.junit.Test public void testFenceStatus() throws java.lang.Exception { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); retVal.setSucceeded(true); retVal.setReturnValue(new org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult(FenceOperationResult.Status.SUCCESS, org.ovirt.engine.core.common.businessentities.pm.PowerStatus.ON)); setUpEntityQueryExpectations(VdcQueryType.GetVdsFenceStatus, org.ovirt.engine.core.common.queries.VdsIdParametersBase.class, new java.lang.String[]{ "VdsId" }, new java.lang.Object[]{ GUIDS[0] }, retVal); control.replay(); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setFenceType(FenceType.STATUS.value()); verifyActionResponse(resource.fence(action)); org.ovirt.engine.api.model.PowerManagementStatus status = org.ovirt.engine.api.model.PowerManagementStatus.fromValue(action.getPowerManagement().getStatus().getState()); assertTrue(status.equals(PowerManagementStatus.ON)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { boolean isAutoAssign = object.getIsAutoAssign().getEntity(); defaultHostEditor.setEnabled((!isAutoAssign)); specificHost.setValue((!isAutoAssign)); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { boolean isAutoAssign = object.getIsAutoAssign().getEntity(); defaultHostEditor.setEnabled((!isAutoAssign)); specificHost.setValue((!isAutoAssign)); }
@java.lang.Override protected void buildSysprepVmPayload(java.lang.String strSysPrepContent) { byte[] binarySysPrep; try { binarySysPrep = strSysPrepContent.getBytes(org.ovirt.engine.core.vdsbroker.vdsbroker.VmOldInfoBuilder.UTF8_CHARSET_ENCODING); } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.RuntimeException("Unsupported charset", e); } createInfo.add(VdsProperties.sysprepInf, binarySysPrep); }	@java.lang.Override protected void buildSysprepVmPayload(java.lang.String strSysPrepContent) { byte[] binarySysPrep; try { binarySysPrep = strSysPrepContent.getBytes(org.ovirt.engine.core.vdsbroker.vdsbroker.VmOldInfoBuilder.UTF8_CHARSET_ENCODING); } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.RuntimeException("Unsupported charset while building VM sysprep", e); } createInfo.add(VdsProperties.sysprepInf, binarySysPrep); }
private void resetVmInterfaceStatistics() { loadVmNetworkInterfaces(); ifaces.stream().map(VmNetworkInterface::getStatistics).forEach(VmNetworkStatistics::resetVmStatistics); }	protected void resetVmInterfaceStatistics() { loadVmNetworkInterfaces(); ifaces.stream().map(VmNetworkInterface::getStatistics).forEach(VmNetworkStatistics::resetVmStatistics); }
private org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters createSetupNetworksParameters(int timeout) { org.ovirt.engine.core.common.network.SwitchType clusterSwitchType = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getCluster().getRequiredSwitchTypeForCluster(); org.ovirt.engine.core.common.businessentities.network.Network managementNetworkOfThisCluster = managementNetworkUtil.getManagementNetwork(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterId()); java.util.List<org.ovirt.engine.core.common.vdscommands.HostNetwork> networksToConfigure = calculateNetworksToConfigure(managementNetworkOfThisCluster); boolean managementNetworkChanged = isManagementNetworkChanged(managementNetworkOfThisCluster, networksToConfigure); final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters hostCmdParams = new org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds(), networksToConfigure, getAllNetworksToRemove(), org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateOrUpdateBonds(), getRemovedBondNames(), clusterSwitchType); hostCmdParams.setRollbackOnFailure(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().rollbackOnFailure()); hostCmdParams.setConnectivityTimeout(timeout); hostCmdParams.setManagementNetworkChanged(managementNetworkChanged); return hostCmdParams; }	private org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters createSetupNetworksParameters(int timeout) { org.ovirt.engine.core.common.network.SwitchType clusterSwitchType = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getCluster().getRequiredSwitchTypeForCluster(); java.util.List<org.ovirt.engine.core.common.vdscommands.HostNetwork> networksToConfigure = calculateNetworksToConfigure(); final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters hostCmdParams = new org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds(), networksToConfigure, getAllNetworksToRemove(), org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateOrUpdateBonds(), getRemovedBondNames(), clusterSwitchType); hostCmdParams.setRollbackOnFailure(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().rollbackOnFailure()); hostCmdParams.setConnectivityTimeout(timeout); hostCmdParams.setManagementNetworkChanged(isManagementNetworkChanged(networksToConfigure)); return hostCmdParams; }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Group group) { validateParameters(group, "name"); if ((org.ovirt.engine.api.restapi.utils.AuthzUtils.getAuthzNameFromEntityName(group.getName())) == null) { validateParameters(group, "domain.id|name"); } java.lang.String directoryName = getDirectoryName(group); org.ovirt.engine.core.aaa.DirectoryGroup directoryGroup = findDirectoryGroup(directoryName, group); if (directoryGroup == null) { return javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(((("No such group: " + (group.getName())) + " in directory ") + directoryName)).build(); } org.ovirt.engine.core.common.action.AddGroupParameters parameters = new org.ovirt.engine.core.common.action.AddGroupParameters(); parameters.setGroupToAdd(new org.ovirt.engine.core.common.businessentities.aaa.DbGroup(directoryGroup)); org.ovirt.engine.api.restapi.resource.aaa.QueryIdResolver<org.ovirt.engine.core.compat.Guid> resolver = new org.ovirt.engine.api.restapi.resource.aaa.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetDbGroupById, org.ovirt.engine.core.common.queries.IdQueryParameters.class); return performCreate(VdcActionType.AddGroup, parameters, resolver, org.ovirt.engine.api.model.BaseResource.class); }	@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Group group) { java.util.List<java.lang.String> authzProvidersNames = getBackendCollection(java.lang.String.class, VdcQueryType.GetDomainList, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase()); validateParameters(group, "name"); if ((org.ovirt.engine.api.restapi.utils.aaa.AuthzUtils.getAuthzNameFromEntityName(group.getName(), authzProvidersNames)) == null) { validateParameters(group, "domain.id|name"); } java.lang.String directoryName = getAuthzProviderName(group, authzProvidersNames); org.ovirt.engine.core.aaa.DirectoryGroup directoryGroup = findDirectoryGroup(directoryName, group); if (directoryGroup == null) { return javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(((("No such group: " + (group.getName())) + " in directory ") + directoryName)).build(); } org.ovirt.engine.core.common.action.AddGroupParameters parameters = new org.ovirt.engine.core.common.action.AddGroupParameters(); parameters.setGroupToAdd(new org.ovirt.engine.core.common.businessentities.aaa.DbGroup(directoryGroup)); org.ovirt.engine.api.restapi.resource.aaa.QueryIdResolver<org.ovirt.engine.core.compat.Guid> resolver = new org.ovirt.engine.api.restapi.resource.aaa.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetDbGroupById, org.ovirt.engine.core.common.queries.IdQueryParameters.class); return performCreate(VdcActionType.AddGroup, parameters, resolver, org.ovirt.engine.api.model.BaseResource.class); }
@org.junit.Test public void testPK() throws java.lang.Exception { client.setKeyPair(TestCommon.keyPair); client.connect(); java.io.ByteArrayOutputStream out = new org.ovirt.engine.core.utils.ssh.OvirtSSH.ConstraintByteArrayOutputStream(500); client.execute(org.ovirt.engine.core.utils.ssh.BasicTest.hello_command, null, out, null); assertEquals(org.ovirt.engine.core.utils.ssh.BasicTest.hello_result, new java.lang.String(out.toByteArray(), "UTF-8")); }	@org.junit.Test public void testPK() throws java.lang.Exception { client.setKeyPair(TestCommon.keyPair); client.connect(); client.authenticate(); java.io.ByteArrayOutputStream out = new org.ovirt.engine.core.utils.ssh.ConstraintByteArrayOutputStream(500); client.executeCommand(org.ovirt.engine.core.utils.ssh.BasicTest.hello_command, null, out, null); assertEquals(org.ovirt.engine.core.utils.ssh.BasicTest.hello_result, new java.lang.String(out.toByteArray(), "UTF-8")); }
public static org.ovirt.engine.core.bll.ValidationResult validateIconId(org.ovirt.engine.core.compat.Guid iconId, java.lang.String nameForErrorMessage) { if (org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmIconDao().exists(iconId)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.ICON_OF_PROVIDED_ID_DOES_NOT_EXIST, ("$iconName " + nameForErrorMessage)); }	public static org.ovirt.engine.core.bll.ValidationResult validateIconId(org.ovirt.engine.core.compat.Guid iconId, java.lang.String nameForErrorMessage) { if (org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmIconDao().exists(iconId)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ICON_OF_PROVIDED_ID_DOES_NOT_EXIST, ("$iconName " + nameForErrorMessage)); }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); if (!(super.validate())) { return false; } if (!(validate(getBrickValidator().canStopOrCommitRemoveBrick(volume, getParameters().getBricks())))) { return false; } if ((!(getGlusterTaskUtils().isTaskOfType(volume, GlusterTaskType.REMOVE_BRICK))) || (!(getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.FINISHED)))) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REMOVE_BRICKS_NOT_FINISHED); } return true; }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); if (!(super.validate())) { return false; } if (!(validate(getBrickValidator().canStopOrCommitRemoveBrick(volume, getParameters().getBricks())))) { return false; } if ((!(getGlusterTaskUtils().isTaskOfType(volume, GlusterTaskType.REMOVE_BRICK))) || (!(getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.FINISHED)))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REMOVE_BRICKS_NOT_FINISHED); } return true; }
@org.junit.Test public void testCDAVdsSPMPrioritySetToNever() { vds.setVdsSpmPriority(BusinessEntitiesDefinitions.HOST_MIN_SPM_PRIORITY); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.CANNOT_FORCE_SELECT_SPM_VDS_MARKED_AS_NEVER_SPM); }	@org.junit.Test public void testCDAVdsSPMPrioritySetToNever() { vds.setVdsSpmPriority(BusinessEntitiesDefinitions.HOST_MIN_SPM_PRIORITY); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure("canDoAction did not fail on a VDS that is set to never be elected as SPM", command, VdcBllMessages.CANNOT_FORCE_SELECT_SPM_VDS_MARKED_AS_NEVER_SPM); }
public void connectStoragePool() { java.util.Map<java.lang.String, java.lang.String> storageDomains = null; storageDomains = org.ovirt.engine.core.vdsbroker.storage.StoragePoolDomainHelper.buildStoragePoolDomainsMap(ConnectStoragePoolVDSCommand.getParameters().getStorageDomains()); log.info("executing with domain map: {}", storageDomains); status = ConnectStoragePoolVDSCommand.getBroker().connectStoragePool(ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), ConnectStoragePoolVDSCommand.getParameters().getVds().getVdsSpmId(), ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), ConnectStoragePoolVDSCommand.getParameters().getMasterDomainId().toString(), ConnectStoragePoolVDSCommand.getParameters().getStoragePool().getMasterDomainVersion(), storageDomains); }	public void connectStoragePool() { java.util.Map<java.lang.String, java.lang.String> storageDomains = null; storageDomains = org.ovirt.engine.core.vdsbroker.storage.StoragePoolDomainHelper.buildStoragePoolDomainsMap(ConnectStoragePoolVDSCommand.getParameters().getStorageDomains()); log.info("Executing with domain map: {}", storageDomains); status = ConnectStoragePoolVDSCommand.getBroker().connectStoragePool(ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), ConnectStoragePoolVDSCommand.getParameters().getVds().getVdsSpmId(), ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), ConnectStoragePoolVDSCommand.getParameters().getMasterDomainId().toString(), ConnectStoragePoolVDSCommand.getParameters().getStoragePool().getMasterDomainVersion(), storageDomains); }
private java.util.HashMap<org.ovirt.engine.core.common.businessentities.ArchitectureType, java.util.HashMap<org.ovirt.engine.core.compat.Version, java.lang.Boolean>> getMap(org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters.ArchCapabilitiesVerb archCapabilitiesVerb) { java.util.HashMap<org.ovirt.engine.core.common.businessentities.ArchitectureType, java.util.HashMap<org.ovirt.engine.core.compat.Version, java.lang.Boolean>> supportMap = new java.util.HashMap<org.ovirt.engine.core.common.businessentities.ArchitectureType, java.util.HashMap<org.ovirt.engine.core.compat.Version, java.lang.Boolean>>(); for (org.ovirt.engine.core.common.businessentities.ArchitectureType arch : org.ovirt.engine.core.common.businessentities.ArchitectureType.values()) { java.util.HashMap<org.ovirt.engine.core.compat.Version, java.lang.Boolean> archMap = new java.util.HashMap<org.ovirt.engine.core.compat.Version, java.lang.Boolean>(); for (org.ovirt.engine.core.compat.Version version : org.ovirt.engine.core.compat.Version.ALL) { boolean isSupported = isSupported(archCapabilitiesVerb, arch, version); archMap.put(version, isSupported); } supportMap.put(arch, archMap); } return supportMap; }	private static java.util.Map<org.ovirt.engine.core.common.businessentities.ArchitectureType, java.util.Map<org.ovirt.engine.core.compat.Version, java.lang.Boolean>> getMap(org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters.ArchCapabilitiesVerb archCapabilitiesVerb) { if (archCapabilitiesVerb == null) { return null; } java.util.Map<org.ovirt.engine.core.common.businessentities.ArchitectureType, java.util.Map<org.ovirt.engine.core.compat.Version, java.lang.Boolean>> supportMap = new java.util.EnumMap<org.ovirt.engine.core.common.businessentities.ArchitectureType, java.util.Map<org.ovirt.engine.core.compat.Version, java.lang.Boolean>>(org.ovirt.engine.core.common.businessentities.ArchitectureType.class); for (org.ovirt.engine.core.common.businessentities.ArchitectureType arch : org.ovirt.engine.core.common.businessentities.ArchitectureType.values()) { java.util.Map<org.ovirt.engine.core.compat.Version, java.lang.Boolean> archMap = new java.util.HashMap<org.ovirt.engine.core.compat.Version, java.lang.Boolean>(); for (org.ovirt.engine.core.compat.Version version : org.ovirt.engine.core.compat.Version.ALL) { archMap.put(version, org.ovirt.engine.core.bll.GetArchitectureCapabilitiesQuery.isSupported(archCapabilitiesVerb, arch, version)); } supportMap.put(arch, archMap); } return supportMap; }
private java.util.Set<org.ovirt.engine.core.common.businessentities.GraphicsType> getVmActiveGraphics() { java.util.Set<org.ovirt.engine.core.common.businessentities.GraphicsType> graphicsTypes = new java.util.HashSet<>(); for (java.util.Map.Entry<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.GraphicsInfo> graphics : vm.getGraphicsInfos().entrySet()) { if (graphics.getValue().isSet()) { graphicsTypes.add(graphics.getKey()); } } return graphicsTypes; }	private java.util.Set<org.ovirt.engine.core.common.businessentities.GraphicsType> getVmActiveGraphics() { if (((vm.getGraphicsInfos()) != null) && (!(vm.getGraphicsInfos().isEmpty()))) { return vm.getGraphicsInfos().keySet(); } else { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> graphicDevices = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdAndType(vm.getId(), VmDeviceGeneralType.GRAPHICS); java.util.Set<org.ovirt.engine.core.common.businessentities.GraphicsType> graphicsTypes = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.VmDevice graphicDevice : graphicDevices) { org.ovirt.engine.core.common.businessentities.GraphicsType type = org.ovirt.engine.core.common.businessentities.GraphicsType.fromString(graphicDevice.getDevice()); graphicsTypes.add(type); } return graphicsTypes; } }
public static void GetDiskList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.dataprovider.DiskImage>) (source)) : new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.dataprovider.DiskImage>(); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.SearchParameters searchParams = new org.ovirt.engine.ui.uicommonweb.dataprovider.SearchParameters("Disks:", org.ovirt.engine.core.common.interfaces.SearchType.Disk); searchParams.setMaxCount(9999); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery); }	public static void getDiskList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(); } }; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters("Disks:", org.ovirt.engine.core.common.interfaces.SearchType.Disk); searchParams.setMaxCount(9999); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery); }
public boolean validate() { boolean res = true; for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : getItems()) { labelModel.validateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.AsciiNameValidation() }); java.lang.String label = labelModel.getSelectedItem(); java.lang.String usingIface = labelToIface.get(label); if ((usingIface != null) && (!(containedIfaces.contains(usingIface)))) { labelModel.getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().labelInUse(label, usingIface)); labelModel.setIsValid(false); res = false; } } return res; }	public boolean validate() { boolean res = true; for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : getItems()) { labelModel.validateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.AsciiNameValidation() }); java.lang.String label = labelModel.getSelectedItem(); java.lang.String usingIface = labelToIface.get(label); if ((usingIface != null) && (!(containedIfaces.contains(usingIface)))) { labelModel.getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().labelInUse(label, usingIface)); labelModel.setIsValid(false); } res &= labelModel.getIsValid(); } return res; }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.cluster.ClusterSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(ginjector.getApplicationConstants().clusterHooksSubTabLabel(), 5, ginjector.getSubTabClusterGlusterHookModelProvider()); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.cluster.ClusterSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(ginjector.getApplicationConstants().clusterGlusterHooksSubTabLabel(), 5, ginjector.getSubTabClusterGlusterHookModelProvider()); }
public static boolean hasVirtioScsiControllers(org.ovirt.engine.api.restapi.resource.BackendResource resource, org.ovirt.engine.core.compat.Guid id) { java.util.List<java.lang.String> result = resource.getEntity(java.util.List.class, VdcQueryType.GetVirtioScsiControllers, new org.ovirt.engine.core.common.queries.IdQueryParameters(id), "GetVirtioScsiControllers", true); return result.isEmpty(); }	public static java.util.List<java.lang.String> getVirtioScsiControllersForEntity(org.ovirt.engine.api.restapi.resource.BackendResource resource, org.ovirt.engine.core.compat.Guid id) { return resource.getEntity(java.util.List.class, VdcQueryType.GetVirtioScsiControllers, new org.ovirt.engine.core.common.queries.IdQueryParameters(id), "GetVirtioScsiControllers", true); }
public void setVmGuid(org.ovirt.engine.core.compat.Guid value) { this.vmId = value; }	public void setVmId(org.ovirt.engine.core.compat.Guid value) { this.vmId = value; }
private void init() { setMasterVolume(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>()); setSlaveVolume(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>()); setSlaveHost(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>()); setForce(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean>()); setMessage(new java.lang.String()); getForce().setEntity(false); }	private void init() { setMasterVolume(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>()); setSlaveVolume(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>()); setSlaveHost(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>()); setForce(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean>()); }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator validator = new org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator(getNetworkCluster()); return (((vdsGroupExists()) && (changesAreClusterCompatible())) && (logicalNetworkExists())) && ((!(org.ovirt.engine.core.bll.network.NetworkHelper.managementNetwork(getNetwork()))) || (validate(validator.managementNetworkAttachment(getNetworkName())))); }	@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator validator = new org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator(getNetworkCluster()); return (((vdsGroupExists()) && (changesAreClusterCompatible())) && (logicalNetworkExists())) && ((!(org.ovirt.engine.core.utils.NetworkUtils.isManagementNetwork(getNetwork()))) || (validate(validator.managementNetworkAttachment(getNetworkName())))); }
@org.junit.Test public void testDeactivate() throws java.lang.Exception { setUpGetEntityExpectations(VdcQueryType.GetStorageServerConnectionById, org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase.class, new java.lang.String[]{ "ServerConnectionId" }, new java.lang.Object[]{ GUIDS[0].toString() }, org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.setUpStorageServerConnection()); setUpGetEntityExpectations(); setUriInfo(setUpActionExpectations(VdcActionType.DeactivateStorageDomain, org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase.class, new java.lang.String[]{ "StorageDomainId", "StoragePoolId" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.STORAGE_DOMAIN_ID, org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.DATA_CENTER_ID })); verifyActionResponse(resource.deactivate(new org.ovirt.engine.api.model.Action())); }	@org.junit.Test public void testDeactivate() throws java.lang.Exception { setUriInfo(setUpActionExpectations(VdcActionType.DeactivateStorageDomain, org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase.class, new java.lang.String[]{ "StorageDomainId", "StoragePoolId" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.STORAGE_DOMAIN_ID, org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.DATA_CENTER_ID })); verifyActionResponse(resource.deactivate(new org.ovirt.engine.api.model.Action())); }
private void plugDiskToVmIfNeeded() { if ((((org.ovirt.engine.core.bll.AddDiskCommand.getVm()) != null) && (org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getPlugDiskToVm())) && ((org.ovirt.engine.core.bll.AddDiskCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { org.ovirt.engine.core.common.action.HotPlugDiskToVmParameters params = new org.ovirt.engine.core.common.action.HotPlugDiskToVmParameters(org.ovirt.engine.core.bll.AddDiskCommand.getVmId(), org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo().getId()); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.HotPlugDiskToVm, params); } }	private void plugDiskToVmIfNeeded() { if (((java.lang.Boolean.TRUE.equals(org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getPlugDiskToVm())) && ((org.ovirt.engine.core.bll.AddDiskCommand.getVm()) != null)) && ((org.ovirt.engine.core.bll.AddDiskCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { org.ovirt.engine.core.common.action.HotPlugDiskToVmParameters params = new org.ovirt.engine.core.common.action.HotPlugDiskToVmParameters(org.ovirt.engine.core.bll.AddDiskCommand.getVmId(), org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo().getId()); params.setShouldBeLogged(false); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.HotPlugDiskToVm, params); if (!(returnValue.getSucceeded())) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(this, AuditLogType.USER_FAILED_HOTPLUG_DISK); } } }
public java.lang.Boolean getHighlyAvailableIsConfigured() { return this.mVdsStatistics.getHighlyAvailableIsConfigured(); }	public boolean getHighlyAvailableIsConfigured() { return this.mVdsStatistics.getHighlyAvailableIsConfigured(); }
private boolean checkInstanceTypeImagePermissions(org.ovirt.engine.core.compat.Guid id) { java.util.Collection<java.lang.String> createInstanceMessages = new java.util.ArrayList<>(); java.util.Collection<java.lang.String> actionGroupMessages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.utils.PermissionSubject createInstanceSubject = new org.ovirt.engine.core.bll.utils.PermissionSubject(id, org.ovirt.engine.core.common.VdcObjectType.VmTemplate, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_INSTANCE); org.ovirt.engine.core.bll.utils.PermissionSubject actionGroupSubject = new org.ovirt.engine.core.bll.utils.PermissionSubject(id, org.ovirt.engine.core.common.VdcObjectType.VmTemplate, org.ovirt.engine.core.bll.AddVmCommand.getActionType().getActionGroup()); if ((!(checkSinglePermission(createInstanceSubject, createInstanceMessages))) && (!(checkSinglePermission(actionGroupSubject, actionGroupMessages)))) { org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getValidateMessages().addAll(actionGroupMessages); return false; } return true; }	private boolean checkInstanceTypeImagePermissions(org.ovirt.engine.core.compat.Guid id) { java.util.Collection<java.lang.String> createInstanceMessages = new java.util.ArrayList<>(); java.util.Collection<java.lang.String> actionGroupMessages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.utils.PermissionSubject createInstanceSubject = new org.ovirt.engine.core.bll.utils.PermissionSubject(id, org.ovirt.engine.core.common.VdcObjectType.VmTemplate, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_INSTANCE); org.ovirt.engine.core.bll.utils.PermissionSubject actionGroupSubject = new org.ovirt.engine.core.bll.utils.PermissionSubject(id, org.ovirt.engine.core.common.VdcObjectType.VmTemplate, org.ovirt.engine.core.bll.AddVmCommand.getActionType().getActionGroup()); if ((!(checkSinglePermission(createInstanceSubject, createInstanceMessages))) && (!(checkSinglePermission(actionGroupSubject, actionGroupMessages)))) { org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getValidationMessages().addAll(actionGroupMessages); return false; } return true; }
@java.lang.Override protected boolean validate() { clusterId = getParameters().getClusterId(); serverId = getParameters().getServerId(); serviceType = getParameters().getServiceType(); actionType = getParameters().getActionType(); if (!(org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand.manageActionDetailsMap.keySet().contains(actionType))) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_INVALID_ACTION_TYPE); } if ((org.ovirt.engine.core.compat.Guid.isNullOrEmpty(clusterId)) && (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(serverId))) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_CLUSTERID_AND_SERVERID_BOTH_NULL); } if ((!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(clusterId))) && ((getClusterUtils().getAllUpServers(clusterId).size()) == 0)) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_NO_SERVERS_FOR_CLUSTER); } return true; }	@java.lang.Override protected boolean validate() { clusterId = getParameters().getClusterId(); serverId = getParameters().getServerId(); serviceType = getParameters().getServiceType(); actionType = getParameters().getActionType(); if (!(org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand.manageActionDetailsMap.keySet().contains(actionType))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_INVALID_ACTION_TYPE); } if ((org.ovirt.engine.core.compat.Guid.isNullOrEmpty(clusterId)) && (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(serverId))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CLUSTERID_AND_SERVERID_BOTH_NULL); } if ((!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(clusterId))) && ((getClusterUtils().getAllUpServers(clusterId).size()) == 0)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_NO_SERVERS_FOR_CLUSTER); } return true; }
public static java.util.Map<java.lang.String, java.lang.Object> createHotplugMemoryParamsMap(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, boolean copyAlias, int minAllocatedMem) { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); data.put("vmId", vmDevice.getVmId().toString()); data.put("memGuaranteedSize", minAllocatedMem); data.put("memory", org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createVmMemoryDeviceMap(vmDevice, copyAlias)); return data; }	public static java.util.Map<java.lang.String, java.lang.Object> createHotplugMemoryParamsMap(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, boolean copyAlias, int minAllocatedMem) { java.util.Map<java.lang.String, java.lang.Object> data = org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createHotplugMemoryParamsMap(vmDevice, copyAlias); data.put("memGuaranteedSize", minAllocatedMem); return data; }
protected void refreshLunsInfo(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) { for (org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromVgInfo : lunsFromVgInfo) { updateLunInDb(lunFromVgInfo); for (org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : lunFromVgInfo.getLunConnections()) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connectionFromDb = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageServerConnectionDao().getForIqn(connection.getIqn()); if (connectionFromDb == null) { continue; } org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap lunConnection = new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap(lunFromVgInfo.getLUNId(), connectionFromDb.getId()); if ((getStorageServerConnectionLunMapDao().get(lunConnection.getId())) == null) { getStorageServerConnectionLunMapDao().save(lunConnection); } } } for (org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDb : lunsFromDb) { if ((!(isDummyLun(lunFromDb))) && (!(containsLun(lunsFromVgInfo, lunFromDb)))) { org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getLunDao().remove(lunFromDb.getLUNId()); log.info("Removed LUN ID '{}'", lunFromDb.getLUNId()); } } }	protected void refreshLunsConnections(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo) { for (org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromVgInfo : lunsFromVgInfo) { for (org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : lunFromVgInfo.getLunConnections()) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connectionFromDb = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageServerConnectionDao().getForIqn(connection.getIqn()); if (connectionFromDb == null) { continue; } org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap lunConnection = new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap(lunFromVgInfo.getLUNId(), connectionFromDb.getId()); if ((getStorageServerConnectionLunMapDao().get(lunConnection.getId())) == null) { getStorageServerConnectionLunMapDao().save(lunConnection); } } } }
private void initConfigurationProperties() throws org.ovirt.engine.core.notifier.NotificationServiceException { daysToKeepHistory = getNonNegativeIntegerProperty(NotificationProperties.DAYS_TO_KEEP_HISTORY); daysToSendOnStartup = getNonNegativeIntegerProperty(NotificationProperties.DAYS_TO_SEND_ON_STARTUP); initConnectivity(); initMethodMapper(); }	private void initConfigurationProperties() throws org.ovirt.engine.core.notifier.NotificationServiceException { daysToKeepHistory = getNonNegativeIntegerProperty(NotificationProperties.DAYS_TO_KEEP_HISTORY); daysToSendOnStartup = getNonNegativeIntegerProperty(NotificationProperties.DAYS_TO_SEND_ON_STARTUP); initMethodMapper(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label object) { return object.getName(); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label label) { return label.getName(); }
public static void GetMinimalVmMemSize(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 1; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.VMMinMemorySizeInMB, org.ovirt.engine.core.common.config.ConfigCommon.defaultConfigurationVersion), aQuery); }	public static void GetMinimalVmMemSize(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 1; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.VMMinMemorySizeInMB, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }
@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, T vm) { vm.setMemSizeMb(model.getMemSize().getEntity()); if (model.getIoThreadsEnabled().getEntity()) { vm.setNumOfIoThreads(model.getNumOfIoThreads().getEntity()); } else { vm.setNumOfIoThreads(0); } vm.setNumOfSockets(model.getNumOfSockets().getSelectedItem()); vm.setCpuPerSocket(((java.lang.Integer.parseInt(model.getTotalCPUCores().getEntity())) / (model.getNumOfSockets().getSelectedItem()))); vm.setDefaultDisplayType(model.getDisplayType().getSelectedItem()); vm.setNumOfMonitors(model.getNumOfMonitors().getSelectedItem()); vm.setSmartcardEnabled(model.getIsSmartcardEnabled().getEntity()); vm.setSsoMethod(model.extractSelectedSsoMethod()); vm.setMinAllocatedMem(model.getMinAllocatedMemory().getEntity()); vm.setDefaultBootSequence(model.getBootSequence()); vm.setSingleQxlPci(model.getIsSingleQxlEnabled().getEntity()); vm.setCustomEmulatedMachine(model.getEmulatedMachine().getSelectedItem()); vm.setCustomCpuName(model.getCustomCpu().getSelectedItem()); }	@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, T vm) { vm.setMemSizeMb(model.getMemSize().getEntity()); vm.setNumOfSockets(model.getNumOfSockets().getSelectedItem()); vm.setCpuPerSocket(((java.lang.Integer.parseInt(model.getTotalCPUCores().getEntity())) / (model.getNumOfSockets().getSelectedItem()))); vm.setDefaultDisplayType(model.getDisplayType().getSelectedItem()); vm.setNumOfMonitors(model.getNumOfMonitors().getSelectedItem()); vm.setSmartcardEnabled(model.getIsSmartcardEnabled().getEntity()); vm.setSsoMethod(model.extractSelectedSsoMethod()); vm.setMinAllocatedMem(model.getMinAllocatedMemory().getEntity()); vm.setDefaultBootSequence(model.getBootSequence()); vm.setSingleQxlPci(model.getIsSingleQxlEnabled().getEntity()); vm.setCustomEmulatedMachine(model.getEmulatedMachine().getSelectedItem()); vm.setCustomCpuName(model.getCustomCpu().getSelectedItem()); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Replica count can be reduced 1 at a time.") java.lang.String ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_MORE_THAN_ONE();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Replica count cannot be reduced by more than one.") java.lang.String ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_MORE_THAN_ONE();
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeDelete(java.lang.String volumeName) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.delete").withParameter("volumeName", volumeName).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeDelete(java.lang.String volumeName) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.delete").withParameter("volumeName", volumeName).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
private boolean isIsoFileValid(java.lang.String isoFile, org.ovirt.engine.core.bll.OVirtNodeInfo Info) { boolean result = false; java.lang.String pathRepo = null; java.util.List<java.lang.String> reposUpgrade = new java.util.ArrayList<java.lang.String>(); java.lang.String[] tempRepo = Info.getISOsPath().split(Info.getInfoDelimiter()); for (int i = 0; i < (tempRepo.length); i++) reposUpgrade.add(tempRepo[i]); if (org.apache.commons.lang.StringUtils.isNotBlank(isoFile)) { for (java.lang.String repo : reposUpgrade) { pathRepo = (repo + "/") + isoFile; java.io.File path = new java.io.File(pathRepo); org.ovirt.engine.core.bll.InstallVdsCommand.log.infoFormat("isIsoFileValid - Validating ISO path: {0}", pathRepo); if (path.exists()) { _isoFullPath = pathRepo; result = true; org.ovirt.engine.core.bll.InstallVdsCommand.log.infoFormat("isIsoFileValid: ISO found: {0}", pathRepo); break; } } } org.ovirt.engine.core.bll.InstallVdsCommand.log.infoFormat("isIsoFileValid: result {0}", result); return result; }	private boolean isISOCompatible(File iso, org.ovirt.engine.core.compat.RpmVersion ovirtHostOsVersion) { boolean ret = false; org.ovirt.engine.core.bll.InstallVdsCommand.log.debugFormat("Check if ISO compatible: {0}", iso); for (org.ovirt.engine.core.bll.OVirtNodeInfo.Entry info : org.ovirt.engine.core.bll.OVirtNodeInfo.getInstance().get()) { if (info.path.equals(iso.getParentFile())) { java.util.regex.Matcher matcher = info.isoPattern.matcher(iso.getName()); if (matcher.find()) { java.lang.String rpmLike = matcher.group(1).replaceAll("-", "."); org.ovirt.engine.core.bll.InstallVdsCommand.log.debugFormat("ISO version: {0} {1} {3}", iso, rpmLike, ovirtHostOsVersion); org.ovirt.engine.core.compat.RpmVersion isoVersion = new org.ovirt.engine.core.compat.RpmVersion(rpmLike, "", true); if (org.ovirt.engine.core.bll.VdsHandler.isIsoVersionCompatibleForUpgrade(ovirtHostOsVersion, isoVersion)) { org.ovirt.engine.core.bll.InstallVdsCommand.log.debugFormat("ISO compatible: {0}", iso); ret = true; break; } } } } return ret; }
private boolean isBookmarkForCurrentPlace(org.ovirt.engine.core.common.businessentities.Bookmark bookmark, org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter<?, ?, ?, ?> currentPlacePresenter) { java.lang.String searchString = bookmark.getValue(); if (searchString != null) { java.lang.String[] split = searchString.split(":"); java.lang.String result = null; if ((split.length) > 0) { java.lang.String defaultSearchString = split[0]; result = SearchStringMapping.searchToPlaceMap.get(defaultSearchString); } if ((currentPlacePresenter != null) && (currentPlacePresenter.placeMatches(result))) { return true; } } return false; }	private boolean isBookmarkForCurrentPlace(org.ovirt.engine.core.common.businessentities.Bookmark bookmark, org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter<?, ?, ?, ?> currentPlacePresenter) { java.lang.String searchString = bookmark.getValue(); if (searchString != null) { java.lang.String[] split = searchString.split(":"); java.lang.String result = null; if ((split.length) > 0) { java.lang.String defaultSearchString = split[0]; result = org.ovirt.engine.ui.uicommonweb.models.SearchStringMapping.getPlace(defaultSearchString); } if ((currentPlacePresenter != null) && (currentPlacePresenter.placeMatches(result))) { return true; } } return false; }
protected java.util.List<java.lang.String> listFiles() { org.ovirt.engine.core.common.queries.GetImagesListParameters queryParams = new org.ovirt.engine.core.common.queries.GetImagesListParameters(asGuid(storageDomainId), org.ovirt.engine.core.common.businessentities.ImageFileType.ISO); queryParams.setForceRefresh(true); java.util.List<org.ovirt.engine.core.common.businessentities.RepoImage> files = getBackendCollection(org.ovirt.engine.core.common.businessentities.RepoImage.class, VdcQueryType.GetImagesList, queryParams); java.util.List<java.lang.String> fileNames = new java.util.LinkedList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.RepoImage file : files) { fileNames.add(file.getRepoImageId()); } return fileNames; }	protected java.util.List<java.lang.String> listFiles() { org.ovirt.engine.core.common.queries.GetImagesListParameters queryParams = new org.ovirt.engine.core.common.queries.GetImagesListParameters(asGuid(storageDomainId), org.ovirt.engine.core.common.businessentities.ImageFileType.All); queryParams.setForceRefresh(true); java.util.List<org.ovirt.engine.core.common.businessentities.RepoImage> files = getBackendCollection(org.ovirt.engine.core.common.businessentities.RepoImage.class, VdcQueryType.GetImagesList, queryParams); java.util.List<java.lang.String> fileNames = new java.util.LinkedList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.RepoImage file : files) { fileNames.add(file.getRepoImageId()); } return fileNames; }
public void setPlacement(org.gwtbootstrap3.client.ui.constants.Placement placement) { this.placement = placement; }	public void setPlacement(org.gwtbootstrap3.client.ui.constants.Placement placement) { tooltipConfig.setPlacement(placement); }
@java.lang.Override protected void initDetailModels() { super.initDetailModels(); org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.HasEntity<org.ovirt.engine.core.common.scheduling.ClusterPolicy>> list = new org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.HasEntity<org.ovirt.engine.core.common.scheduling.ClusterPolicy>>(); list.add(new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyClusterListModel()); setDetailModels(list); }	private void setDetailList(final org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyClusterListModel clusterPolicyClusterListModel) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.HasEntity<org.ovirt.engine.core.common.scheduling.ClusterPolicy>> list = new java.util.ArrayList<>(); list.add(clusterPolicyClusterListModel); setDetailModels(list); }
@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getBroker().glusterVolumeRebalanceStart(org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getParameters().isFixLayoutOnly(), org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getParameters().isForceAction()); org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.proceedProxyReturnValue(); }	protected void executeVdsBrokerCommand() { glusterTaskReturn = org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getBroker().glusterVolumeRebalanceStart(org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getParameters().isFixLayoutOnly(), org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getParameters().isForceAction()); task = glusterTaskReturn.getGlusterTask(); org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.proceedProxyReturnValue(); setReturnValue(task); }
protected boolean checkExistingStorageDomain() { if ((org.ovirt.engine.core.bll.storage.domains.AddExistingFileStorageDomainCommand.getStorageDomainStaticDao().get(org.ovirt.engine.core.bll.storage.domains.AddExistingFileStorageDomainCommand.getStorageDomain().getId())) != null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); } org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid> domainFromIrs = executeHSMGetStorageDomainInfo(new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.domains.AddExistingFileStorageDomainCommand.getVdsId(), org.ovirt.engine.core.bll.storage.domains.AddExistingFileStorageDomainCommand.getStorageDomain().getId())); if (domainFromIrs == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); } return concreteCheckExistingStorageDomain(domainFromIrs); }	protected boolean checkExistingStorageDomain() { if ((org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getStorageDomainStaticDao().get(org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getStorageDomain().getId())) != null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); } org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid> domainFromIrs = executeHSMGetStorageDomainInfo(new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getVdsId(), org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getStorageDomain().getId())); if (domainFromIrs == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); } return concreteCheckExistingStorageDomain(domainFromIrs); }
private void handleRemovedDevices(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change change, org.ovirt.engine.core.compat.Guid vmId, java.util.Set<org.ovirt.engine.core.compat.Guid> libvirtDevices, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> dbDevices) { for (org.ovirt.engine.core.common.businessentities.VmDevice device : dbDevices) { if (libvirtDevices.contains(device.getDeviceId())) { continue; } if (org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.deviceWithoutAddress(device)) { continue; } if (device.getIsManaged()) { if (device.getIsPlugged()) { device.setIsPlugged(java.lang.Boolean.FALSE); device.setAddress(""); change.updateDevice(device); org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.log.debug("VM '{}' managed pluggable device was unplugged : '{}'", vmId, device); } else if (!(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.devicePluggable(device))) { org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.log.error("VM '{}' managed non pluggable device was removed unexpectedly from libvirt: '{}'", vmId, device); } } else { change.removeDevice(device.getId()); org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.log.debug("VM '{}' unmanaged device was marked for remove : {1}", vmId, device); } } }	private void handleRemovedDevices(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change change, org.ovirt.engine.core.compat.Guid vmId, java.util.Set<org.ovirt.engine.core.compat.Guid> libvirtDevices, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> dbDevices) { for (org.ovirt.engine.core.common.businessentities.VmDevice device : dbDevices) { if (libvirtDevices.contains(device.getDeviceId())) { continue; } if (org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.deviceWithoutAddress(device)) { continue; } if (device.getIsManaged()) { if (device.getIsPlugged()) { device.setIsPlugged(java.lang.Boolean.FALSE); device.setAddress(""); change.updatedDevices.add(device); org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.log.debug("VM '{}' managed pluggable device was unplugged : '{}'", vmId, device); } else if (!(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.devicePluggable(device))) { org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.log.error("VM '{}' managed non pluggable device was removed unexpectedly from libvirt: '{}'", vmId, device); } } else { change.removedDeviceIds.add(device.getId()); org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.log.debug("VM '{}' unmanaged device was marked for remove : {1}", vmId, device); } } }
@java.lang.Override public void init() { context.put(ExtensionProperties.AUTHOR, "The oVirt Project"); context.put(ExtensionProperties.EXTENSION_NAME, "Internal Authentication (Built-in)"); context.put(ExtensionProperties.LICENSE, "ASL 2.0"); context.put(ExtensionProperties.HOME, "http://www.ovirt.org"); context.put(ExtensionProperties.VERSION, "N/A"); context.put(ExtensionProperties.AAA_IS_PASSWORD_AUTH, true); }	@java.lang.Override public void init() { context.put(ExtensionProperties.AUTHOR, "The oVirt Project"); context.put(ExtensionProperties.EXTENSION_NAME, "Internal Authentication (Built-in)"); context.put(ExtensionProperties.LICENSE, "ASL 2.0"); context.put(ExtensionProperties.HOME, "http://www.ovirt.org"); context.put(ExtensionProperties.VERSION, "N/A"); context.put(ExtensionProperties.AAA_AUTHENTICATION_CAPABILITIES, org.ovirt.engine.core.aaa.internal.AAA_AUTH_CAP_FLAGS_PASSWORD); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> getVolumesSupportedAsStorageDomain() { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = getCallsHandler().executeReadList("GetGlusterVolumesSupportedAsStorageDomain", org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoImpl.volumeRowMapper, getCustomMapSqlParameterSource().addValue("replica_count", 3)); return volumes; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> getVolumesSupportedAsStorageDomain() { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = getCallsHandler().executeReadList("GetGlusterVolumesSupportedAsStorageDomain", org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoImpl.volumeRowMapper, null); fetchRelatedEntities(volumes); return volumes; }
public java.lang.String getDuration() { return org.ovirt.engine.core.common.TimeUtils.formatTimeSpan(((new java.util.Date().getTime()) - (org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().getStartTime().getTime()))); }	public java.lang.String getDuration() { return org.apache.commons.lang.time.DurationFormatUtils.formatDurationWords(((new java.util.Date().getTime()) - (org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().getStartTime().getTime())), true, true); }
@java.lang.Override public void setValue(java.util.List<T> values, boolean fireEvents, boolean fromClick) { if (((values != null) && ((lastValues) != null)) && (lastValues.equals(values))) { return; } if (fromClick) { T value = values.get(0); if (selectedList.contains(value)) { selectedList.remove(value); } else { if (value != null) { selectedList.add(value); } } } else { selectedList.clear(); for (T value : values) { if (value != null) { selectedList.add(value); } } } listPanel.setSelected(selectedList); updateCurrentValue(selectedList, fireEvents); }	@java.lang.Override protected void setValue(java.util.List<T> values, boolean fireEvents, boolean fromClick) { if (((values != null) && ((lastValues) != null)) && (lastValues.equals(values))) { return; } if (fromClick) { T value = values.get(0); if (selectedList.contains(value)) { selectedList.remove(value); } else { if (value != null) { selectedList.add(value); } } } else { selectedList.clear(); if (values != null) { for (T value : values) { if (value != null) { selectedList.add(value); } } } } listPanel.setSelected(selectedList); updateCurrentValue(selectedList, fireEvents); }
public void addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { addActionButton(buttonDef, java.lang.Integer.MAX_VALUE); }	@java.lang.Override public void addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { org.ovirt.engine.ui.common.widget.action.ActionButton newButton = ActionPanelPresenterWidget.getView().addActionButton(buttonDef); if ((buttonDef.getIndex()) > (actionButtonDefinitions.size())) { actionButtonDefinitions.add(buttonDef); } else { actionButtonDefinitions.add(buttonDef.getIndex(), buttonDef); } initButton(buttonDef, newButton); }
@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult parentEntityExists() { if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsGroupDao().get(getProfile().getClusterId())) == null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.ACTION_TYPE_FAILED_CLUSTER_CAN_NOT_BE_EMPTY); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult parentEntityExists() { if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsGroupDao().get(getProfile().getClusterId())) == null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CLUSTER_CAN_NOT_BE_EMPTY); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void updateBricksFromServer() { org.ovirt.engine.core.common.businessentities.VDS selectedServer = getServers().getSelectedItem(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getUnusedBricksFromServer(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice> bricks = ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice>) (returnValue)); java.util.List<java.lang.String> lvNames = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.gluster.StorageDevice brick : bricks) { if (((brick.getMountPoint()) != null) && (!(brick.getMountPoint().isEmpty()))) { lvNames.add(brick.getMountPoint()); } else { lvNames.add(("None - " + (brick.getName()))); } } getBricksFromServer().setItems(lvNames); } }), selectedServer.getId()); }	private void updateBricksFromHost() { org.ovirt.engine.core.common.businessentities.VDS selectedServer = getServers().getSelectedItem(); if (selectedServer != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getUnusedBricksFromServer(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice> bricks = ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice>) (returnValue)); java.util.List<java.lang.String> lvNames = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.gluster.StorageDevice brick : bricks) { if (((brick.getMountPoint()) != null) && (!(brick.getMountPoint().isEmpty()))) { lvNames.add(brick.getMountPoint()); } } getBricksFromServer().setItems(lvNames); } }), selectedServer.getId()); } }
private static java.lang.String buildDetailedAuditLogMessage(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { java.lang.String storageDomainName = "Repository not found"; if ((repoImage != null) && ((repoImage.getRepoDomainId()) != null)) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(repoImage.getRepoDomainId()); if (storageDomain != null) { storageDomainName = java.lang.String.format("%s (%s file type)", storageDomain.getStorageName(), repoImage.getFileType().name()); } } else { org.ovirt.engine.core.bll.storage.domains.IsoDomainListSyncronizer.log.error("Repository file meta data not found for logging"); } return storageDomainName; }	private static java.lang.String buildDetailedAuditLogMessage(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { java.lang.String storageDomainName = "Repository not found"; if ((repoImage != null) && ((repoImage.getRepoDomainId()) != null)) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(repoImage.getRepoDomainId()); if (storageDomain != null) { storageDomainName = java.lang.String.format("%s (%s file type)", storageDomain.getStorageName(), repoImage.getFileType().name()); } } else { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.log.error("Repository file meta data not found for logging"); } return storageDomainName; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Hard") java.lang.String hardEnforcingAffinity();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Hard") java.lang.String hardEnforcingAffinity();
protected boolean CanDoAddVmCommand() { boolean returnValue = false; returnValue = areParametersLegal(org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages()); returnValue = returnValue && (checkNumberOfMonitors()); returnValue = ((returnValue && (checkPciAndIDeLimit(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getnum_of_monitors(), getVmInterfaces(), getVmDisks(), org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages()))) && (canAddVm(org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages(), destStorages.values()))) && (hostToRunExist()); return returnValue; }	protected boolean canDoAddVmCommand() { boolean returnValue = false; returnValue = areParametersLegal(org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages()); returnValue = returnValue && (checkNumberOfMonitors()); returnValue = ((returnValue && (checkPciAndIdeLimit(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getnum_of_monitors(), getVmInterfaces(), getVmDisks(), org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages()))) && (canAddVm(org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages(), destStorages.values()))) && (hostToRunExist()); return returnValue; }
@org.junit.Test public void testChangeToExistingName() { prepareVmToPassCanDoAction(); mockSameNameQuery(true); assertFalse("canDoAction should have failed with vm name already in use.", command.canDoAction()); assertCanDoActionMessage(EngineMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED); }	@org.junit.Test public void testChangeToExistingName() { prepareVmToPassCanDoAction(); mockSameNameQuery(true); assertFalse("canDoAction should have failed with vm name already in use.", command.canDoAction()); assertCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_NAME_ALREADY_USED); }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.networks.ImportNetworksModel object) { driver.edit(object); }	@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.networks.ImportNetworksModel model) { providerNetworks.edit(model.getProviderNetworks()); importedNetworks.edit(model.getImportedNetworks()); dcColumn.edit(model.getDataCenters()); driver.edit(model); }
public java.lang.String getExportName() { return exportDomain.getName(); }	public java.lang.String getExportName() { return exportName; }
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.network.NetworkCluster cluster) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cluster_id", cluster.getClusterId()).addValue("network_id", cluster.getNetworkId()).addValue("status", cluster.getStatus()).addValue("is_display", cluster.isDisplay()).addValue("required", cluster.isRequired()).addValue("migration", cluster.isMigration()).addValue("management", cluster.isManagement()); getCallsHandler().executeModification("Updatenetwork_cluster", parameterSource); }	@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.network.NetworkCluster cluster) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = createAllFieldsParameterSource(cluster); getCallsHandler().executeModification("Updatenetwork_cluster", parameterSource); }
@org.junit.Test public void testMacPoolGetByDataCenterIdExist() throws java.lang.Exception { final org.ovirt.engine.core.common.businessentities.MacPool macPool = dao.getByClusterId(FixturesTool.STORAGE_POOL_RHEL6_ISCSI_OTHER); assertThat(macPool, notNullValue()); assertThat(macPool.getId(), is(FixturesTool.NON_DEFAULT_MAC_POOL)); }	@org.junit.Test public void testMacPoolGetByClusterIdExist() throws java.lang.Exception { final org.ovirt.engine.core.common.businessentities.MacPool macPool = dao.getByClusterId(FixturesTool.CLUSTER_RHEL6_ISCSI); assertThat(macPool, notNullValue()); assertThat(macPool.getId(), is(FixturesTool.NON_DEFAULT_MAC_POOL)); }
private void assertNoNetworksRemoved(org.ovirt.engine.core.bll.SetupNetworksHelper helper) { junit.framework.Assert.assertTrue(java.text.MessageFormat.format("Expected no networks to be removed but there were. Removed networks: {0}", helper.getRemoveNetworks()), helper.getRemoveNetworks().isEmpty()); }	private void assertNoNetworksRemoved(org.ovirt.engine.core.bll.SetupNetworksHelper helper) { junit.framework.Assert.assertTrue(java.text.MessageFormat.format("Expected no networks to be removed but some were removed. Removed networks: {0}", helper.getRemoveNetworks()), helper.getRemoveNetworks().isEmpty()); }
private boolean isTaskStateError(org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue) { if (((vdsReturnValue != null) && ((vdsReturnValue.getVdsError()) != null)) && ((vdsReturnValue.getVdsError().getCode()) == (org.ovirt.engine.core.common.errors.EngineErrors.TaskStateError))) { org.ovirt.engine.core.bll.tasks.SPMAsyncTask.log.info(("SPMAsyncTask::ClearAsyncTask: At time of attempt to clear task '{}' the response code" + " was '{}' and message was '{}'. Task will not be cleaned"), getVdsmTaskId(), vdsReturnValue.getVdsError().getCode(), vdsReturnValue.getVdsError().getMessage()); return true; } return false; }	private boolean isTaskStateError(org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue) { if (((vdsReturnValue != null) && ((vdsReturnValue.getVdsError()) != null)) && ((vdsReturnValue.getVdsError().getCode()) == (org.ovirt.engine.core.common.errors.EngineError.TaskStateError))) { org.ovirt.engine.core.bll.tasks.SPMAsyncTask.log.info(("SPMAsyncTask::ClearAsyncTask: At time of attempt to clear task '{}' the response code" + " was '{}' and message was '{}'. Task will not be cleaned"), getVdsmTaskId(), vdsReturnValue.getVdsError().getCode(), vdsReturnValue.getVdsError().getMessage()); return true; } return false; }
private boolean removeHibernationVolumes() { org.ovirt.engine.core.bll.StopVmCommandBase.setVm(null); final org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getStatus(); if (vmStatus == (org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked)) { return false; } updateVmStatus(VMStatus.ImageLocked); if (!(removeMemoryVolumes(org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getHibernationVolHandle(), org.ovirt.engine.core.bll.StopVmCommandBase.getActionType(), false))) { updateVmStatus(vmStatus); return false; } return true; }	private boolean removeVmHibernationVolumes() { if (org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getHibernationVolHandle())) { return false; } org.ovirt.engine.core.common.RemoveVmHibernationVolumesParameters parameters = new org.ovirt.engine.core.common.RemoveVmHibernationVolumesParameters(org.ovirt.engine.core.bll.StopVmCommandBase.getVmId()); parameters.setParentCommand(org.ovirt.engine.core.bll.StopVmCommandBase.getActionType()); parameters.setEntityInfo(org.ovirt.engine.core.bll.StopVmCommandBase.getParameters().getEntityInfo()); parameters.setParentParameters(org.ovirt.engine.core.bll.StopVmCommandBase.getParameters()); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = org.ovirt.engine.core.bll.StopVmCommandBase.getBackend().runInternalAction(VdcActionType.RemoveVmHibernationVolumes, parameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks(org.ovirt.engine.core.bll.StopVmCommandBase.getExecutionContext())); if (vdcRetValue.getSucceeded()) { org.ovirt.engine.core.bll.StopVmCommandBase.getReturnValue().getVdsmTaskIdList().addAll(vdcRetValue.getInternalVdsmTaskIdList()); } return vdcRetValue.getSucceeded(); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.GetConnectionsByDataCenterAndStorageTypeQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.storage.GetConnectionsByDataCenterAndStorageTypeQuery.getDbFacade().getStorageServerConnectionDao().getStorageConnectionsByStorageTypeAndStatus(org.ovirt.engine.core.bll.storage.GetConnectionsByDataCenterAndStorageTypeQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.GetConnectionsByDataCenterAndStorageTypeQuery.getParameters().getStorageType(), java.util.EnumSet.of(StorageDomainStatus.Active, StorageDomainStatus.Inactive, StorageDomainStatus.Unknown, StorageDomainStatus.Maintenance, StorageDomainStatus.PreparingForMaintenance))); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.GetConnectionsByDataCenterAndStorageTypeQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.storage.GetConnectionsByDataCenterAndStorageTypeQuery.getDbFacade().getStorageServerConnectionDao().getStorageConnectionsByStorageTypeAndStatus(org.ovirt.engine.core.bll.storage.GetConnectionsByDataCenterAndStorageTypeQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.GetConnectionsByDataCenterAndStorageTypeQuery.getParameters().getStorageType(), java.util.EnumSet.allOf(org.ovirt.engine.core.common.businessentities.StorageDomainStatus.class))); }
@java.lang.Override public org.ovirt.engine.api.resource.DataCenterNetworkResource getNetworkResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResource(dataCenterId, id)); }	@java.lang.Override public org.ovirt.engine.api.resource.DataCenterNetworkResource getNetworkResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResource(id)); }
private void validateQosNotPartiallyConfigured() { java.util.Set<java.lang.String> someSubInterfacesHaveQos = new java.util.HashSet<>(); java.util.Set<java.lang.String> notAllSubInterfacesHaveQos = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : params.getInterfaces()) { java.lang.String networkName = iface.getNetworkName(); org.ovirt.engine.core.common.businessentities.network.Network network = getExistingClusterNetworks().get(networkName); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = getNetworkAttachment(iface, network); java.lang.String baseIfaceName = org.ovirt.engine.core.utils.NetworkUtils.stripVlan(iface); if (network != null) { if (org.ovirt.engine.core.utils.NetworkUtils.qosConfiguredOnInterface(networkAttachment, network)) { someSubInterfacesHaveQos.add(baseIfaceName); } else { notAllSubInterfacesHaveQos.add(baseIfaceName); } } } for (java.lang.String ifaceName : someSubInterfacesHaveQos) { if (notAllSubInterfacesHaveQos.contains(ifaceName)) { addViolation(EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_INTERFACES_WITHOUT_QOS, ifaceName); } } }	private void validateQosNotPartiallyConfigured() { java.util.Set<java.lang.String> someSubInterfacesHaveQos = new java.util.HashSet<>(); java.util.Set<java.lang.String> notAllSubInterfacesHaveQos = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : params.getInterfaces()) { java.lang.String networkName = iface.getNetworkName(); org.ovirt.engine.core.common.businessentities.network.Network network = getExistingClusterNetworks().get(networkName); if (network != null) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = getNetworkAttachment(iface, network); java.lang.String baseIfaceName = org.ovirt.engine.core.utils.NetworkUtils.stripVlan(iface); if (org.ovirt.engine.core.utils.NetworkUtils.qosConfiguredOnInterface(networkAttachment, network)) { someSubInterfacesHaveQos.add(baseIfaceName); } else { notAllSubInterfacesHaveQos.add(baseIfaceName); } } } for (java.lang.String ifaceName : someSubInterfacesHaveQos) { if (notAllSubInterfacesHaveQos.contains(ifaceName)) { addViolation(EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_INTERFACES_WITHOUT_QOS, ifaceName); } } }
public void setMainTabContentUrl(java.lang.String historyToken, java.lang.String contentUrl) { org.ovirt.engine.ui.webadmin.plugin.api.SetMainTabCustomContentUrlEvent.fire(this, historyToken, contentUrl); }	public void setTabContentUrl(final java.lang.String historyToken, final java.lang.String contentUrl) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { org.ovirt.engine.ui.webadmin.section.main.presenter.SetDynamicTabContentUrlEvent.fire(org.ovirt.engine.ui.webadmin.plugin.api.PluginUiFunctions.this, historyToken, contentUrl); } }); }
private static double getLast5MinutesStorageAverage(javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO(dwhDataSource); return (dao.getLast5MinutesStorageAverage()) / 1024; }	private static double getLast5MinutesStorageAverage(javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao(dwhDataSource); return (dao.getLast5MinutesStorageAverage()) / 1024; }
private boolean hostExists(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> glusterServers, org.ovirt.engine.core.compat.Guid serverId) { for (org.ovirt.engine.core.common.businessentities.VDS vds : glusterServers) { if (vds.getId().equals(serverId)) { return true; } } return false; }	private boolean hostExists(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo> glusterServers, org.ovirt.engine.core.common.businessentities.VDS server) { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo glusterServer : glusterServers) { if (glusterServer.getHostnameOrIp().equals(server.gethost_name())) { return true; } for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface vdsNwInterface : getVdsInterfaces(server.getId())) { if (glusterServer.getHostnameOrIp().equals(vdsNwInterface.getAddress())) { return true; } } } return false; }
protected boolean prepareFailureMessageForDomainsAndDisks(java.lang.String domainNames, java.lang.String diskNames) { org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.addCanDoActionMessageVariable("domainNames", domainNames); org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.addCanDoActionMessageVariable("diskNames", diskNames); return failCanDoAction(EngineMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS_AND_DISKS); }	protected boolean prepareFailureMessageForDomainsAndDisks(java.lang.String domainNames, java.lang.String diskNames) { org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.addCanDoActionMessageVariable("domainNames", domainNames); org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.addCanDoActionMessageVariable("diskNames", diskNames); return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS_AND_DISKS); }
protected void OnUserAndAdGroupsLoaded(org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel adElementListModel) { if (((adElementListModel.getusers()) != null) && ((adElementListModel.getgroups()) != null)) { getSearchInProgress().setEntity(false); java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> items = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); items.addAll(getusers()); items.addAll(getgroups()); adElementListModel.getSelectAll().setEntity(false); adElementListModel.setItems(items); setusers(null); setgroups(getusers()); setIsEmpty(items.isEmpty()); } }	protected void onUserAndAdGroupsLoaded(org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel adElementListModel) { if (((adElementListModel.getusers()) != null) && ((adElementListModel.getgroups()) != null)) { getSearchInProgress().setEntity(false); java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> items = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); items.addAll(getusers()); items.addAll(getgroups()); adElementListModel.getSelectAll().setEntity(false); adElementListModel.setItems(items); setusers(null); setgroups(getusers()); setIsEmpty(items.isEmpty()); } }
@com.google.inject.Provides @com.google.inject.Singleton public org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.RepoImage, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageIsoListModel> getStorageIsoListProvider(org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector, final com.google.inject.Provider<org.ovirt.engine.ui.webadmin.section.main.presenter.popup.storage.ImportExportImagePopupPresenterWidget> importExportPopupProvider) { return new org.ovirt.engine.ui.common.uicommon.model.SearchableDetailTabModelProvider<org.ovirt.engine.core.common.businessentities.RepoImage, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageIsoListModel>(ginjector, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel.class, org.ovirt.engine.ui.uicommonweb.models.storage.StorageIsoListModel.class) { @java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.Model, ?> getModelPopup(org.ovirt.engine.ui.uicommonweb.models.storage.StorageIsoListModel source, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand, org.ovirt.engine.ui.uicommonweb.models.Model windowModel) { if (lastExecutedCommand == (getModel().getDownloadImagesCommand())) { return importExportPopupProvider.get(); } else { return super.getModelPopup(source, lastExecutedCommand, windowModel); } } }; }	@com.google.inject.Provides @com.google.inject.Singleton public org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.RepoImage, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageIsoListModel> getStorageIsoListProvider(org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector, final com.google.inject.Provider<org.ovirt.engine.ui.webadmin.section.main.presenter.popup.storage.ImportExportImagePopupPresenterWidget> importExportPopupProvider) { return new org.ovirt.engine.ui.common.uicommon.model.SearchableDetailTabModelProvider<org.ovirt.engine.core.common.businessentities.RepoImage, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageIsoListModel>(ginjector, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel.class, org.ovirt.engine.ui.uicommonweb.models.storage.StorageIsoListModel.class) { @java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.Model, ?> getModelPopup(org.ovirt.engine.ui.uicommonweb.models.storage.StorageIsoListModel source, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand, org.ovirt.engine.ui.uicommonweb.models.Model windowModel) { if (lastExecutedCommand == (getModel().getImportImagesCommand())) { return importExportPopupProvider.get(); } else { return super.getModelPopup(source, lastExecutedCommand, windowModel); } } }; }
public static void init() { final java.lang.Class<?>[] inspectedClassNames = new java.lang.Class<?>[]{ org.ovirt.engine.core.common.businessentities.VmBase.class, org.ovirt.engine.core.common.businessentities.VmTemplate.class }; org.ovirt.engine.core.bll.VmTemplateHandler.updateVmTemplate = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.bll.VmTemplateHandler.class); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.EditableVmField, java.lang.reflect.Field> pair : org.ovirt.engine.core.common.backendinterfaces.BaseHandler.extractAnnotatedFields(org.ovirt.engine.core.common.businessentities.EditableVmField.class, inspectedClassNames)) { org.ovirt.engine.core.common.businessentities.EditableVmField annotation = pair.getFirst(); java.util.List<org.ovirt.engine.core.common.businessentities.VMStatus> statusList = java.util.Arrays.asList(annotation.onStatuses()); java.lang.String fieldName = pair.getSecond().getName(); if ((statusList.isEmpty()) || (annotation.onTemplate())) { org.ovirt.engine.core.bll.VmTemplateHandler.updateVmTemplate.addPermittedFields(fieldName); } } }	public static void init() { final java.lang.Class<?>[] inspectedClassNames = new java.lang.Class<?>[]{ org.ovirt.engine.core.common.businessentities.VmBase.class, org.ovirt.engine.core.common.businessentities.VmTemplate.class }; org.ovirt.engine.core.bll.VmTemplateHandler.updateVmTemplate = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.bll.VmTemplateHandler.class); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.EditableVmTemplateField, java.lang.reflect.Field> pair : org.ovirt.engine.core.common.backendinterfaces.BaseHandler.extractAnnotatedFields(org.ovirt.engine.core.common.businessentities.EditableVmTemplateField.class, inspectedClassNames)) { java.lang.String fieldName = pair.getSecond().getName(); org.ovirt.engine.core.bll.VmTemplateHandler.updateVmTemplate.addPermittedFields(fieldName); } for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.EditableVmField, java.lang.reflect.Field> pair : org.ovirt.engine.core.common.backendinterfaces.BaseHandler.extractAnnotatedFields(org.ovirt.engine.core.common.businessentities.EditableVmField.class, inspectedClassNames)) { org.ovirt.engine.core.common.businessentities.EditableVmField annotation = pair.getFirst(); java.util.List<org.ovirt.engine.core.common.businessentities.VMStatus> statusList = java.util.Arrays.asList(annotation.onStatuses()); java.lang.String fieldName = pair.getSecond().getName(); if (statusList.isEmpty()) { org.ovirt.engine.core.bll.VmTemplateHandler.updateVmTemplate.addPermittedFields(fieldName); } } }
private void editConsole() { if (((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getWindow()) != null) || ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem()) == null)) { return; } final org.ovirt.engine.ui.uicommonweb.models.VmConsoles activeVmConsoles = consoleModelsCache.getVmConsolesForEntity(org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem()); final org.ovirt.engine.ui.uicommonweb.models.ConsolePopupModel model = new org.ovirt.engine.ui.uicommonweb.models.ConsolePopupModel(); model.setVmConsoles(activeVmConsoles); model.setHelpTag(HelpTag.editConsole); model.setHashName("editConsole"); setWindow(model); final org.ovirt.engine.ui.uicommonweb.UICommand saveCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("OnEditConsoleSave", this); saveCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); saveCommand.setIsDefault(true); model.getCommands().add(saveCommand); final org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); cancelCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); cancelCommand.setIsCancel(true); model.getCommands().add(cancelCommand); }	private void editConsole() { if (((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getWindow()) != null) || ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem()) == null)) { return; } final org.ovirt.engine.ui.uicommonweb.models.VmConsoles activeVmConsoles = consoleModelsCache.getVmConsolesForEntity(org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem()); final org.ovirt.engine.ui.uicommonweb.models.ConsolePopupModel model = new org.ovirt.engine.ui.uicommonweb.models.ConsolePopupModel(); model.setVmConsoles(activeVmConsoles); model.setHelpTag(HelpTag.editConsole); model.setHashName("editConsole"); setWindow(model); final org.ovirt.engine.ui.uicommonweb.UICommand saveCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnEditConsoleSave", this); model.getCommands().add(saveCommand); final org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.getCommands().add(cancelCommand); }
@org.junit.Test public void subnetChanged() { org.ovirt.engine.core.common.businessentities.Network net = createNetwork("net"); mockExistingNetworks(net); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNicOnNetwork("nic0", net); nic.setBootProtocol(NetworkBootProtocol.StaticIp); nic.setSubnet(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); mockExistingIfaces(nic); nic.setSubnet(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper(createParametersForNics(nic)); validateAndAssertNetworkModified(helper, net); }	@org.junit.Test public void subnetChanged() { org.ovirt.engine.core.common.businessentities.Network net = createNetwork("net"); mockExistingNetworks(net); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNicSyncedWithNetwork("nic0", net); nic.setBootProtocol(NetworkBootProtocol.StaticIp); nic.setSubnet(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); mockExistingIfaces(nic); nic.setSubnet(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper(createParametersForNics(nic)); validateAndAssertNetworkModified(helper, net); }
public int compare(org.ovirt.engine.core.aaa.AuthenticationProfile o1, org.ovirt.engine.core.aaa.AuthenticationProfile o2) { return -(new java.lang.Integer(o1.getNegotiationPriority()).compareTo(o2.getNegotiationPriority())); }	@java.lang.Override public int compare(org.ovirt.engine.core.aaa.AuthenticationProfile o1, org.ovirt.engine.core.aaa.AuthenticationProfile o2) { return java.lang.Integer.valueOf(o1.getNegotiationPriority()).compareTo(o2.getNegotiationPriority()); }
void bindInfrastructure() { bindCommonInfrastructure(); bind(org.ovirt.engine.ui.webadmin.system.ApplicationInit.class).asEagerSingleton(); bind(org.ovirt.engine.ui.webadmin.system.InternalConfiguration.class).asEagerSingleton(); bind(org.ovirt.engine.ui.webadmin.system.PostMessageDispatcher.class).asEagerSingleton(); }	void bindInfrastructure() { bindCommonInfrastructure(org.ovirt.engine.ui.webadmin.place.WebAdminPlaceManager.class); bind(org.ovirt.engine.ui.webadmin.system.ApplicationInit.class).asEagerSingleton(); bind(org.ovirt.engine.ui.webadmin.system.InternalConfiguration.class).asEagerSingleton(); bind(org.ovirt.engine.ui.webadmin.system.PostMessageDispatcher.class).asEagerSingleton(); }
protected boolean checkExistingStorageDomain() { if ((org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getStorageDomainStaticDao().get(org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getStorageDomain().getId())) != null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); } org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid> domainFromIrs = executeHSMGetStorageDomainInfo(new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getVdsId(), org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getStorageDomain().getId())); if (domainFromIrs == null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); } return concreteCheckExistingStorageDomain(domainFromIrs); }	protected boolean checkExistingStorageDomain() { if ((org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getStorageDomainStaticDao().get(org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getStorageDomain().getId())) != null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); } org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid> domainFromIrs = executeHSMGetStorageDomainInfo(new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getVdsId(), org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getStorageDomain().getId())); if (domainFromIrs == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); } return concreteCheckExistingStorageDomain(domainFromIrs); }
@org.junit.Test public void testSaveNetworkQos() { org.ovirt.engine.core.common.businessentities.qos.NetworkQoS qosD = new org.ovirt.engine.core.common.businessentities.qos.NetworkQoS(); qosD.setId(org.ovirt.engine.core.dao.network.NetworkQosDaoTest.qosDId); qosD.setName("qos_d"); qosD.setStoragePoolId(FixturesTool.STORAGE_POOL_NFS_2); qosD.setInboundAverage(200); qosD.setInboundPeak(200); qosD.setInboundBurst(200); qosD.setOutboundAverage(200); qosD.setOutboundPeak(200); qosD.setOutboundBurst(200); dao.save(qosD); org.ovirt.engine.core.common.businessentities.qos.NetworkQoS returnedD = dao.get(org.ovirt.engine.core.dao.network.NetworkQosDaoTest.qosDId); assertTrue(qosD.equals(returnedD)); }	@org.junit.Test public void testSaveNetworkQos() { org.ovirt.engine.core.common.businessentities.network.NetworkQoS qosD = new org.ovirt.engine.core.common.businessentities.network.NetworkQoS(); qosD.setId(org.ovirt.engine.core.dao.network.NetworkQosDaoTest.qosDId); qosD.setName("qos_d"); qosD.setStoragePoolId(FixturesTool.STORAGE_POOL_MIXED_TYPES); qosD.setInboundAverage(200); qosD.setInboundPeak(200); qosD.setInboundBurst(200); qosD.setOutboundAverage(200); qosD.setOutboundPeak(200); qosD.setOutboundBurst(200); dao.save(qosD); org.ovirt.engine.core.common.businessentities.network.NetworkQoS returnedD = dao.get(org.ovirt.engine.core.dao.network.NetworkQosDaoTest.qosDId); assertTrue(qosD.equals(returnedD)); }
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { super.update(entity); removeNameServersByDnsResolverConfigurationId(entity.getId()); saveNameServersByDnsResolverConfigurationId(entity.getId(), entity.getNameServers()); return null; }); }	@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity) { super.update(entity); removeNameServersByDnsResolverConfigurationId(entity.getId()); saveNameServersByDnsResolverConfigurationId(entity.getId(), entity.getNameServers()); }
@org.junit.Test public void canDoActionShareableDiskOnGlusterFails() { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.AddDiskCommandTest.createShareableDiskImage(); image.setvolumeFormat(VolumeFormat.RAW); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskCommandTest.createParameters(); parameters.setDiskInfo(image); org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId, parameters); mockVm(); mockStorageDomain(storageId, StorageType.GLUSTERFS, Version.v3_1); mockStoragePoolIsoMap(); mockMaxPciSlots(); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(EngineMessages.ACTION_TYPE_FAILED_SHAREABLE_DISKS_NOT_SUPPORTED_ON_GLUSTER_DOMAIN.toString())); }	@org.junit.Test public void canDoActionShareableDiskOnGlusterFails() { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.AddDiskCommandTest.createShareableDiskImage(); image.setvolumeFormat(VolumeFormat.RAW); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskCommandTest.createParameters(); parameters.setDiskInfo(image); org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId, parameters); mockVm(); mockStorageDomain(storageId, StorageType.GLUSTERFS, Version.v3_1); mockStoragePoolIsoMap(); mockMaxPciSlots(); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISKS_NOT_SUPPORTED_ON_GLUSTER_DOMAIN.toString())); }
private static javax.sql.DataSource createDataSource() { javax.sql.DataSource result = null; java.util.Properties properties = new java.util.Properties(); org.ovirt.engine.core.common.config.Config.setConfigUtils(new org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils(false)); try { java.lang.String job = java.lang.System.getProperty("JOB_NAME"); if (job == null) job = ""; java.lang.String number = java.lang.System.getProperty("BUILD_NUMBER"); if (number == null) number = ""; java.lang.String schemaNamePostfix = job + number; java.io.InputStream is = org.ovirt.engine.core.dao.BaseDAOTestCase.class.getResourceAsStream("/test-database.properties"); properties.load(is); is.close(); java.lang.ClassLoader.getSystemClassLoader().loadClass(properties.getProperty("database.driver")); java.lang.String dbUrl = (properties.getProperty("database.url")) + schemaNamePostfix; result = new org.springframework.jdbc.datasource.SingleConnectionDataSource(dbUrl, properties.getProperty("database.username"), properties.getProperty("database.password"), true); org.ovirt.engine.core.dao.BaseDAOTestCase.initSql = properties.getProperty("database.initsql"); org.ovirt.engine.core.dao.BaseDAOTestCase.loadDataFactory(properties.getProperty("database.testing.datafactory")); if (((org.ovirt.engine.core.dao.BaseDAOTestCase.initSql) != null) && (!(org.ovirt.engine.core.dao.BaseDAOTestCase.initSql.isEmpty()))) { org.ovirt.engine.core.dao.BaseDAOTestCase.needInitializationSql = true; } } catch (java.lang.Exception error) { error.printStackTrace(); throw new java.lang.RuntimeException("Cannot create data source", error); } return result; }	private static javax.sql.DataSource createDataSource() { javax.sql.DataSource result = null; java.util.Properties properties = new java.util.Properties(); org.ovirt.engine.core.common.config.Config.setConfigUtils(new org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils(false)); java.io.InputStream is = null; try { java.lang.String job = java.lang.System.getProperty("JOB_NAME"); if (job == null) job = ""; java.lang.String number = java.lang.System.getProperty("BUILD_NUMBER"); if (number == null) number = ""; java.lang.String schemaNamePostfix = job + number; is = org.ovirt.engine.core.dao.BaseDAOTestCase.class.getResourceAsStream("/test-database.properties"); properties.load(is); java.lang.ClassLoader.getSystemClassLoader().loadClass(properties.getProperty("database.driver")); java.lang.String dbUrl = (properties.getProperty("database.url")) + schemaNamePostfix; result = new org.springframework.jdbc.datasource.SingleConnectionDataSource(dbUrl, properties.getProperty("database.username"), properties.getProperty("database.password"), true); org.ovirt.engine.core.dao.BaseDAOTestCase.initSql = properties.getProperty("database.initsql"); org.ovirt.engine.core.dao.BaseDAOTestCase.loadDataFactory(properties.getProperty("database.testing.datafactory")); if (((org.ovirt.engine.core.dao.BaseDAOTestCase.initSql) != null) && (!(org.ovirt.engine.core.dao.BaseDAOTestCase.initSql.isEmpty()))) { org.ovirt.engine.core.dao.BaseDAOTestCase.needInitializationSql = true; } } catch (java.lang.Exception error) { error.printStackTrace(); throw new java.lang.RuntimeException("Cannot create data source", error); } finally { if (is != null) { try { is.close(); } catch (java.io.IOException e) { } } } return result; }
private void reset() { org.ovirt.engine.ui.uicommonweb.models.GridTimer.currentRate = 0; repetitions = org.ovirt.engine.ui.uicommonweb.models.GridTimer.RATE.NORMAL.getRepetitions(); }	private void reset() { currentRate = 0; repetitions = org.ovirt.engine.ui.uicommonweb.models.GridTimer.RATE.NORMAL.getRepetitions(); }
@java.lang.Override public org.ovirt.engine.api.model.Users list() { if (isFiltered()) { return mapDbUserCollection(getBackendCollection(VdcQueryType.GetDbUserByUserId, new org.ovirt.engine.core.common.queries.GetDbUserByUserIdParameters(getCurrent().get(org.ovirt.engine.core.common.users.VdcUser.class).getUserId()))); } else { return mapDbUserCollection(getBackendCollection(SearchType.DBUser, getSearchPattern())); } }	@java.lang.Override public org.ovirt.engine.api.model.Users list() { if (isFiltered()) { return mapDbUserCollection(getBackendCollection(VdcQueryType.GetAllDbUsers, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase())); } else { return mapDbUserCollection(getBackendCollection(SearchType.DBUser, getSearchPattern())); } }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.clusters.GlusterHookContentModel object) { org.ovirt.engine.ui.webadmin.section.main.view.popup.cluster.GlusterHookContentPopupView.Driver.driver.edit(object); }	@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.clusters.GlusterHookContentModel object) { driver.edit(object); }
private native boolean invokePlugin(org.ovirt.engine.ui.webadmin.plugin.Plugin plugin, java.lang.String functionName, com.google.gwt.core.client.JavaScriptObject contextObject);	boolean invokePlugin(final org.ovirt.engine.ui.webadmin.plugin.Plugin plugin, final java.lang.String functionName, com.google.gwt.core.client.JsArray<?> functionArgs) { return plugin.getEventHandlerFunction(functionName).invoke(functionArgs, new org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler() { @java.lang.Override public void onError(java.lang.String message) { org.ovirt.engine.ui.webadmin.plugin.PluginManager.logger.severe(((((("Exception caught while invoking event handler function [" + functionName) + "] for plugin [") + (plugin.getMetaData().getName())) + "]: ") + message)); } }); }
@java.lang.SuppressWarnings("unchecked") public static <V> java.util.concurrent.Future<V> execute(java.util.concurrent.FutureTask<V> command) { try { return ((java.util.concurrent.Future<V>) (org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.es.submit(command))); } catch (java.util.concurrent.RejectedExecutionException e) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.log.warn("The thread pool is out of limit. A submitted task was rejected"); throw e; } }	@java.lang.SuppressWarnings("unchecked") public static <V> java.util.concurrent.Future<V> execute(java.util.concurrent.FutureTask<V> command) { try { return ((java.util.concurrent.Future<V>) (org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.es.submit(command))); } catch (java.util.concurrent.RejectedExecutionException e) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.log.warn("The thread pool is out of limit. The submitted event was rejected"); throw e; } }
private void onDeleteSnapshot() { if ((getConfirmWindow()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())); if ((model.getProgress()) != null) { return; } if ((getSelectedItems()) == null) { return; } java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> paramsList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity snapshot : ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity>) (getSelectedItems()))) { org.ovirt.engine.core.common.action.gluster.GlusterVolumeSnapshotActionParameters param = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeSnapshotActionParameters(getEntity().getId(), snapshot.getSnapshotName(), true); paramsList.add(param); } model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.DeleteGlusterVolumeSnapshot, paramsList, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())); localModel.stopProgress(); setConfirmWindow(null); } }); }	private void onDeleteSnapshot() { if ((getConfirmWindow()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())); java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> paramsList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity snapshot : ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity>) (getSelectedItems()))) { org.ovirt.engine.core.common.action.gluster.GlusterVolumeSnapshotActionParameters param = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeSnapshotActionParameters(getEntity().getId(), snapshot.getSnapshotName(), true); paramsList.add(param); } model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.DeleteGlusterVolumeSnapshot, paramsList, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())); localModel.stopProgress(); setConfirmWindow(null); } }, model); }
@org.junit.Test public void testAllDomainsHaveSpaceForNewDisksFailure() { setUpGeneralValidations(); setUpDiskValidations(); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList = org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommandTest.getNonEmptyDiskList(); doReturn(disksList).when(cmd).getDisksList(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(multipleStorageDomainsValidator).allDomainsHaveSpaceForNewDisks(disksList); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN); verify(multipleStorageDomainsValidator).allDomainsHaveSpaceForNewDisks(disksList); }	@org.junit.Test public void testAllDomainsHaveSpaceForNewDisksFailure() { setUpGeneralValidations(); setUpDiskValidations(); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList = java.util.Collections.emptyList(); doReturn(disksList).when(cmd).getDisksList(); doReturn(disksList).when(cmd).getDisksListForChecks(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(multipleStorageDomainsValidator).allDomainsHaveSpaceForNewDisks(disksList); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN); verify(multipleStorageDomainsValidator).allDomainsHaveSpaceForNewDisks(disksList); }
public void removeNetworkFromParameters(org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters params, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.Network net) { if (org.ovirt.engine.core.utils.NetworkUtils.isVlan(net)) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlan = getVlanDevice(params.getInterfaces(), nic, net); if (vlan == null) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineErrors.NETWORK_LABEL_CONFLICT); } else { params.getInterfaces().remove(vlan); } } else if (org.apache.commons.lang.StringUtils.equals(net.getName(), nic.getNetworkName())) { nic.setNetworkName(null); } }	public void removeNetworkFromParameters(org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters params, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.Network net) { if (org.ovirt.engine.core.utils.NetworkUtils.isVlan(net)) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlan = getVlanDevice(params.getInterfaces(), nic, net); if (vlan == null) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.NETWORK_LABEL_CONFLICT); } else { params.getInterfaces().remove(vlan); } } else if (org.apache.commons.lang.StringUtils.equals(net.getName(), nic.getNetworkName())) { nic.setNetworkName(null); } }
public static <B, G extends B> java.util.List<B> upcast(java.util.Collection<G> entities) { java.util.List<B> baseEntities = new java.util.ArrayList<B>(entities.size()); for (G entity : entities) { baseEntities.add(entity); } return baseEntities; }	public static <B, G extends B> java.util.List<B> upcast(java.util.List<G> entities) { java.util.List<B> baseEntities = new java.util.ArrayList<B>(entities.size()); for (G entity : entities) { baseEntities.add(entity); } return baseEntities; }
@org.junit.Test public void failUpdateStats() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValueUpdate = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); returnValueUpdate.setSucceeded(false); org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(); doReturn(map).when(command).getStoragePoolIsoMap(); doReturn(returnValueUpdate).when(command).getStatsForDomain(); doReturn(true).when(command).connectToStorage(); org.ovirt.engine.core.common.businessentities.StorageDomainDynamic domainDynamic = new org.ovirt.engine.core.common.businessentities.StorageDomainDynamic(); doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Locked); doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Maintenance); doNothing().when(command).disconnectFromStorage(); command.executeCommand(); org.ovirt.engine.core.bll.CommandAssertUtils.checkSucceeded(command, false); verify(storageDomainDynamicDao, never()).update(domainDynamic); verify(storageConnDao, never()).update(newNFSConnection); }	@org.junit.Test public void failUpdateStats() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValueUpdate = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); returnValueUpdate.setSucceeded(false); org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(); doReturn(map).when(command).getStoragePoolIsoMap(); doReturn(returnValueUpdate).when(command).getStatsForDomain(); doReturn(true).when(command).connectToStorage(); org.ovirt.engine.core.common.businessentities.StorageDomainDynamic domainDynamic = new org.ovirt.engine.core.common.businessentities.StorageDomainDynamic(); doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Locked); doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Maintenance); doNothing().when(command).disconnectFromStorage(); command.executeCommand(); org.ovirt.engine.core.bll.CommandAssertUtils.checkSucceeded(command, false); verify(storageDomainDynamicDao, never()).update(domainDynamic); verify(storageConnDao, never()).update(newNFSConnection); }
public void setPlugDiskToVm(boolean plugDiskToVm) { this.plugDiskToVm = plugDiskToVm; }	public void setPlugDiskToVm(java.lang.Boolean plugDiskToVm) { this.plugDiskToVm = plugDiskToVm; }
protected boolean isDiskPassPciAndIdeLimit(org.ovirt.engine.core.common.businessentities.Disk diskInfo) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> vmInterfaces = org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmNicDao().getAllForVm(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.Disk> allVmDisks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getDiskMap().values()); allVmDisks.add(diskInfo); return checkPciAndIdeLimit(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getOs(), org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getVdsGroupCompatibilityVersion(), org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getNumOfMonitors(), vmInterfaces, allVmDisks, isVirtioScsiControllerAttached(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId()), org.ovirt.engine.core.bll.AbstractDiskVmCommand.getReturnValue().getCanDoActionMessages()); }	protected boolean isDiskPassPciAndIdeLimit(org.ovirt.engine.core.common.businessentities.Disk diskInfo) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> vmInterfaces = org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmNicDao().getAllForVm(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.Disk> allVmDisks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getDiskMap().values()); allVmDisks.add(diskInfo); return checkPciAndIdeLimit(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getOs(), org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getVdsGroupCompatibilityVersion(), org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getNumOfMonitors(), vmInterfaces, allVmDisks, isVirtioScsiControllerAttached(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId()), hasWatchdog(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId()), isBalloonEnabled(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId()), isSoundDeviceEnabled(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId()), org.ovirt.engine.core.bll.AbstractDiskVmCommand.getReturnValue().getCanDoActionMessages()); }
private void Edit() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel(); model.getMAC().setIsAvailable(false); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editNetworkInterfaceTitle()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetClusterNetworkList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel vmInterfaceListModel = ((org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.NetworkEntity> network_list = (returnValue != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.NetworkEntity>) (returnValue)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.NetworkEntity>(); vmInterfaceListModel.PostGetClusterNetworkList_Edit(network_list); } }), getEntityStronglyTyped().getvds_group_id()); }	private void Edit() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel(); model.getMAC().setIsAvailable(false); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editNetworkInterfaceTitle()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetClusterNetworkList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel vmInterfaceListModel = ((org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Network> network_list = (returnValue != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Network>) (returnValue)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Network>(); vmInterfaceListModel.PostGetClusterNetworkList_Edit(network_list); } }), getEntityStronglyTyped().getvds_group_id()); }
private static java.util.ArrayList<java.lang.String> trimElements(java.lang.String... elements) { java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(elements.length); for (java.lang.String e : elements) { e = e.trim(); if ((e.length()) > 0) { list.add(e); } } return list; }	private static java.util.List<java.lang.String> trimElements(java.lang.String... elements) { java.util.List<java.lang.String> list = new java.util.ArrayList<>(elements.length); for (java.lang.String e : elements) { e = e.trim(); if ((e.length()) > 0) { list.add(e); } } return list; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAllForStorageDomain(org.ovirt.engine.core.compat.Guid storageDomainId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("storage_domain_id", storageDomainId); return getCallsHandler().executeReadList("GetAllForStorageDomain", org.ovirt.engine.core.dao.DiskImageDAOImpl.DiskImageRowMapper.instance, parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAllForStorageDomain(org.ovirt.engine.core.compat.Guid storageDomainId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("storage_domain_id", storageDomainId); return getCallsHandler().executeReadList("GetAllForStorageDomain", org.ovirt.engine.core.dao.DiskImageDaoImpl.DiskImageRowMapper.instance, parameterSource); }
public void testFilterNicsWithUnmanagedNetworksUmngmtNetRemoved() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingInterfaces = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(); for (int i = 0; i < 10; i++) { org.ovirt.engine.core.common.businessentities.network.Nic nic = new org.ovirt.engine.core.common.businessentities.network.Nic(); nic.setName(("eth" + i)); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails(true, ((i % 2) == 1)); nic.setNetworkImplementationDetails(networkImplementationDetails); existingInterfaces.add(nic); } org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator validator = new org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator(); java.util.Set<java.lang.String> removedUnmanagedNetworks = new java.util.HashSet<java.lang.String>(); removedUnmanagedNetworks.add("eth4"); removedUnmanagedNetworks.add("eth6"); removedUnmanagedNetworks.add("eth8"); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> unmanagedNicsList = validator.filterNicsWithUnmanagedNetworks(existingInterfaces, removedUnmanagedNetworks); assertEquals(2, unmanagedNicsList.size()); for (int i = 0; i < 2; i++) { assertEquals(("eth" + (i * 2)), unmanagedNicsList.get(i).getName()); } }	public void testFilterNicsWithUnmanagedNetworksUmngmtNetRemoved() { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicWithUnmanagedToBeRemoved = createNicWithNetworkImplementationDetails("eth_unmanaged1_toBeRemoved", false); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicWithUnmanaged = createNicWithNetworkImplementationDetails("eth_unmanaged", false); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicWithManagedToBeRemoved = createNicWithNetworkImplementationDetails("eth_managed_toBeRemoved", true); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicWithManaged = createNicWithNetworkImplementationDetails("eth_managed", true); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingInterfaces = java.util.Arrays.asList(nicWithUnmanagedToBeRemoved, nicWithUnmanaged, nicWithManagedToBeRemoved, nicWithManaged); java.util.Collection<java.lang.String> removedUnmanagedNetworks = java.util.Arrays.asList("eth_unmanaged1_toBeRemoved", "eth_managed_toBeRemoved"); java.util.Set<java.lang.String> unmanagedNicsSet = validator.filterNicsWithUnmanagedNetworks(existingInterfaces, removedUnmanagedNetworks); assertEquals(1, unmanagedNicsSet.size()); assertTrue(unmanagedNicsSet.contains("eth_unmanaged")); }
void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.versionAboutLabel()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.userNameAboutLabel()); }	void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); }
private void addSharedLockEntry(org.ovirt.engine.core.common.businessentities.VDS vds) { if ((sharedLockMap) == null) { sharedLockMap = new java.util.HashMap(); } sharedLockMap.put(vds.getStoragePoolId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.POOL, EngineMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }	private void addSharedLockEntry(org.ovirt.engine.core.common.businessentities.VDS vds) { if ((sharedLockMap) == null) { sharedLockMap = new java.util.HashMap(); } sharedLockMap.put(vds.getStoragePoolId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.POOL, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
@org.junit.Test public void executeCommand() { cmd = spy(new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand<org.ovirt.engine.core.common.action.gluster.GlusterHookParameters>(new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters(HOOK_ID))); setupMocks(cmd); mockBackendStatusChange(cmd, true); cmd.executeCommand(); verify(cmd, atLeast(1)).addServerHookInDb(any(org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook.class)); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_ENABLE); }	@org.junit.Test public void executeCommand() { cmd = spy(new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand<org.ovirt.engine.core.common.action.gluster.GlusterHookParameters>(new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters(HOOK_ID))); setupMocks(cmd); mockBackendStatusChange(cmd, true); cmd.executeCommand(); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_ENABLE); }
private void processVmsWithDevicesChange() { if (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(vdsManager.getGroupCompatibilityVersion()))) { if (!(vmsWithChangedDevices.isEmpty())) { java.util.ArrayList<java.lang.String> vmsToUpdate = new java.util.ArrayList(vmsWithChangedDevices.size()); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> pair : vmsWithChangedDevices) { org.ovirt.engine.core.compat.Guid vmId = pair.getFirst().getId(); org.ovirt.engine.core.vdsbroker.VmAnalyzer vmAnalyzer = vmAnalyzers.stream().filter(( analyzer) -> vmId.equals(analyzer.getVdsmVm().getVmDynamic().getId())).collect(java.util.stream.Collectors.toList()).get(0); if ((vmAnalyzer.getVmDynamicToSave()) != null) { vmAnalyzer.getVmDynamicToSave().setHash(pair.getSecond().getVmDynamic().getHash()); vmsToUpdate.add(vmId.toString()); } else { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.warn("VM '{}' not in changed list, skipping devices update.", vmId); } } updateVmDevices(vmsToUpdate); } } }	private void processVmsWithDevicesChange() { if (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(vdsManager.getGroupCompatibilityVersion()))) { if (!(vmsWithChangedDevices.isEmpty())) { java.util.ArrayList<java.lang.String> vmsToUpdate = new java.util.ArrayList(vmsWithChangedDevices.size()); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> pair : vmsWithChangedDevices) { org.ovirt.engine.core.compat.Guid vmId = pair.getFirst().getId(); org.ovirt.engine.core.vdsbroker.VmAnalyzer vmAnalyzer = vmAnalyzers.stream().filter(( analyzer) -> vmId.equals(analyzer.getVdsmVm().getVmDynamic().getId())).findFirst().orElse(null); if ((vmAnalyzer != null) && ((vmAnalyzer.getVmDynamicToSave()) != null)) { vmAnalyzer.getVmDynamicToSave().setHash(pair.getSecond().getVmDynamic().getHash()); vmsToUpdate.add(vmId.toString()); } else { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.warn("VM '{}' not in changed list, skipping devices update.", vmId); } } updateVmDevices(vmsToUpdate); } } }
private static org.ovirt.engine.core.bll.validator.RunVmValidator getRunVmValidator() { return new org.ovirt.engine.core.bll.validator.RunVmValidator(); }	private static org.ovirt.engine.core.bll.validator.RunVmValidator getRunVmValidator() { return org.ovirt.engine.core.bll.VmPoolCommandBase.runVmValidator; }
private org.ovirt.engine.core.compat.Version parseRpmVersion(java.lang.String rpmVersion) { java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(org.ovirt.engine.core.bll.GetProductVersionQuery.RPM_REG_EX); java.util.regex.Matcher matcher = pattern.matcher(rpmVersion); if (matcher.find()) { java.lang.String[] parts = matcher.group(0).split("\\.", (-1)); return new org.ovirt.engine.core.compat.Version(java.lang.Integer.parseInt(parts[0]), java.lang.Integer.parseInt(parts[1]), java.lang.Integer.parseInt(parts[2]), 0); } else { return null; } }	private org.ovirt.engine.core.compat.Version parseRpmVersion(java.lang.String rpmVersion) { java.util.regex.Matcher matcher = org.ovirt.engine.core.bll.GetProductVersionQuery.rpmRegEx.matcher(rpmVersion); if (matcher.find()) { return new org.ovirt.engine.core.compat.Version(java.lang.Integer.parseInt(matcher.group("major")), java.lang.Integer.parseInt(matcher.group("minor")), java.lang.Integer.parseInt(matcher.group("build")), 0); } else { return null; } }
private void translateVolumeType(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity) { org.ovirt.engine.ui.uicompat.Translator translator = new org.ovirt.engine.ui.uicompat.EnumTranslator(); if (translator.containsKey(volumeEntity.getVolumeType())) { getDetailModel().setVolumeTypeSilently(translator.get(volumeEntity.getVolumeType())); } }	private void translateVolumeType(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity) { org.ovirt.engine.ui.uicompat.Translator translator = org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance(); if (translator.containsKey(volumeEntity.getVolumeType())) { getDetailModel().setVolumeTypeSilently(translator.get(volumeEntity.getVolumeType())); } }
@org.junit.Test public void testMultipleNested() { org.ovirt.engine.api.types.V4Vm object = newVm().addDisks(newDisk().setId("123").setAlias("disk1")).addDisks(newDisk().setId("456").setAlias("disk2")).build(); assertEquals(("{'disks':[" + (("{'alias':'disk1','id':'123'}," + "{'alias':'disk2','id':'456'}") + "]}")), objectToJson(object)); }	@org.junit.Test public void testMultipleNested() { org.ovirt.engine.api.types.V4Vm object = vm().disks(disk().id("123").alias("disk1")).disks(disk().id("456").alias("disk2")).build(); assertEquals(("{'disks':[" + (("{'alias':'disk1','id':'123'}," + "{'alias':'disk2','id':'456'}") + "]}")), objectToJson(object)); }
private void flush() { flushedLabels.clear(); flushedLabels.addAll(computeSelcetedLabels()); }	private void flush() { flushedLabels.clear(); flushedLabels.addAll(computeSelecetedLabels()); }
private void onSaveConfirmCV(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model) { if (!(model.getVersion().getSelectedItem().equals(getSelectedItem().getcompatibility_version()))) { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().changeClusterCompatibilityVersionTitle()); confirmModel.setHelpTag(HelpTag.change_cluster_compatibility_version); confirmModel.setHashName("change_cluster_compatibility_version"); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSaveConfirmCpuThreads", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); getConfirmWindow().getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); getConfirmWindow().getCommands().add(tempVar2); checkForNonResponsiveHosts(confirmModel); } else { onSaveConfirmCpuThreads(); } }	private void onSaveConfirmCV(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model) { if (!(model.getVersion().getSelectedItem().equals(((org.ovirt.engine.core.common.businessentities.VDSGroup) (getSelectedItem())).getcompatibility_version()))) { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().changeClusterCompatibilityVersionTitle()); confirmModel.setHelpTag(HelpTag.change_cluster_compatibility_version); confirmModel.setHashName("change_cluster_compatibility_version"); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSaveConfirmCpuThreads", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); getConfirmWindow().getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); getConfirmWindow().getCommands().add(tempVar2); checkForNonResponsiveHosts(confirmModel); } else { onSaveConfirmCpuThreads(); } }
@org.junit.Test public void testNetworksUniquelyConfiguredOnHostWhenNotUniquelyConfigured() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.compat.Guid.newGuid(); java.lang.String networkName = "networkName"; org.ovirt.engine.core.common.businessentities.network.Network networkA = new org.ovirt.engine.core.common.businessentities.network.Network(); networkA.setName(networkName); networkA.setId(id); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = createNetworkAttachment(networkA); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachmentReferencingSameNetwork = createNetworkAttachment(networkA); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = createHostSetupNetworksValidator(java.util.Collections.singletonList(networkA)); assertThat(validator.networksUniquelyConfiguredOnHost(java.util.Arrays.asList(networkAttachment, networkAttachmentReferencingSameNetwork)), failsWith(VdcBllMessages.NETWORKS_ALREADY_ATTACHED_TO_IFACES, HostSetupNetworksValidator.VAR_NETWORKS_ALREADY_ATTACHED_TO_IFACES_LIST, networkName)); }	@org.junit.Test public void testNetworksUniquelyConfiguredOnHostWhenNotUniquelyConfigured() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.compat.Guid.newGuid(); java.lang.String networkName = "networkName"; org.ovirt.engine.core.common.businessentities.network.Network networkA = new org.ovirt.engine.core.common.businessentities.network.Network(); networkA.setName(networkName); networkA.setId(id); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = createNetworkAttachment(networkA); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachmentReferencingSameNetwork = createNetworkAttachment(networkA); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = createHostSetupNetworksValidator(java.util.Collections.singletonList(networkA)); assertThat(validator.networksUniquelyConfiguredOnHost(java.util.Arrays.asList(networkAttachment, networkAttachmentReferencingSameNetwork)), failsWith(EngineMessage.NETWORKS_ALREADY_ATTACHED_TO_IFACES, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostSetupNetworksValidator.VAR_NETWORKS_ALREADY_ATTACHED_TO_IFACES_LIST, networkName))); }
private void prestartVms(org.ovirt.engine.core.common.businessentities.VmPool vmPool, int numOfVmsToPrestart) { java.util.concurrent.atomic.AtomicInteger failedAttempts = new java.util.concurrent.atomic.AtomicInteger(0); java.util.concurrent.atomic.AtomicInteger prestartedVmsCounter = new java.util.concurrent.atomic.AtomicInteger(0); int maxFailedAttempts = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VmPoolMonitorMaxAttempts); java.util.Map<java.lang.String, java.util.Set<org.ovirt.engine.core.compat.Guid>> failureReasons = new java.util.HashMap<>(); java.util.Iterator<org.ovirt.engine.core.compat.Guid> iterator = vmPoolHandler.selectNonPrestartedVms(vmPool.getVmPoolId(), ( vmId, messages) -> collectVmPrestartFailureReasons(vmId, failureReasons, messages)).iterator(); while ((((failedAttempts.intValue()) < maxFailedAttempts) && ((prestartedVmsCounter.intValue()) < numOfVmsToPrestart)) && (iterator.hasNext())) { org.ovirt.engine.core.compat.Guid vmId = iterator.next(); if (prestartVm(vmId, (!(vmPool.isStateful())), vmPool.getName())) { prestartedVmsCounter.incrementAndGet(); failedAttempts.set(0); } else { failedAttempts.incrementAndGet(); } } logResultOfPrestartVms(prestartedVmsCounter.intValue(), numOfVmsToPrestart, vmPool.getVmPoolId(), failureReasons); if ((prestartedVmsCounter.intValue()) == 0) { org.ovirt.engine.core.bll.VmPoolMonitor.log.info("No VMs available for prestarting"); } }	private void prestartVms(org.ovirt.engine.core.common.businessentities.VmPool vmPool, int numOfVmsToPrestart) { int failedAttempts = 0; int prestartedVms = 0; int maxFailedAttempts = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VmPoolMonitorMaxAttempts); java.util.Map<java.lang.String, java.util.Set<org.ovirt.engine.core.compat.Guid>> failureReasons = new java.util.HashMap<>(); java.util.Iterator<org.ovirt.engine.core.compat.Guid> iterator = vmPoolHandler.selectNonPrestartedVms(vmPool.getVmPoolId(), ( vmId, messages) -> collectVmPrestartFailureReasons(vmId, failureReasons, messages)).iterator(); while (((failedAttempts < maxFailedAttempts) && (prestartedVms < numOfVmsToPrestart)) && (iterator.hasNext())) { org.ovirt.engine.core.compat.Guid vmId = iterator.next(); if (prestartVm(vmId, (!(vmPool.isStateful())), vmPool.getName())) { prestartedVms++; failedAttempts = 0; } else { failedAttempts++; } } logResultOfPrestartVms(prestartedVms, numOfVmsToPrestart, vmPool.getVmPoolId(), failureReasons); if (prestartedVms == 0) { org.ovirt.engine.core.bll.VmPoolMonitor.log.info("No VMs available for prestarting"); } }
private java.lang.String getNetworkId(java.lang.String networkName, java.lang.String clusterId) { org.ovirt.engine.core.compat.NGuid dataCenterId = getEntity(org.ovirt.engine.core.common.businessentities.VDSGroup.class, VdcQueryType.GetVdsGroupById, new org.ovirt.engine.core.common.queries.GetVdsGroupByIdParameters(asGuid(clusterId)), null).getstorage_pool_id(); org.ovirt.engine.core.common.queries.GetAllNetworkQueryParamenters params = new org.ovirt.engine.core.common.queries.GetAllNetworkQueryParamenters(asGuid(dataCenterId)); java.util.List<org.ovirt.engine.core.common.businessentities.NetworkEntity> networks = getBackendCollection(VdcQueryType.GetAllNetworks, params); for (org.ovirt.engine.core.common.businessentities.NetworkEntity nw : networks) { if (nw.getname().equals(networkName)) { return nw.getId().toString(); } } return null; }	private java.lang.String getNetworkId(java.lang.String networkName, java.lang.String clusterId) { org.ovirt.engine.core.compat.NGuid dataCenterId = getEntity(org.ovirt.engine.core.common.businessentities.VDSGroup.class, VdcQueryType.GetVdsGroupById, new org.ovirt.engine.core.common.queries.GetVdsGroupByIdParameters(asGuid(clusterId)), null).getstorage_pool_id(); org.ovirt.engine.core.common.queries.GetAllNetworkQueryParamenters params = new org.ovirt.engine.core.common.queries.GetAllNetworkQueryParamenters(asGuid(dataCenterId)); java.util.List<org.ovirt.engine.core.common.businessentities.Network> networks = getBackendCollection(VdcQueryType.GetAllNetworks, params); for (org.ovirt.engine.core.common.businessentities.Network nw : networks) { if (nw.getname().equals(networkName)) { return nw.getId().toString(); } } return null; }
private boolean isSelectedProvidersOfType(org.ovirt.engine.core.common.businessentities.ProviderType providerType) { return ((getSelectedItems()) != null) && (getSelectedItems().stream().allMatch(( provider) -> (provider.getType()) == providerType)); }	private boolean isSelectedProviderOfType(org.ovirt.engine.core.common.businessentities.ProviderType providerType) { return (((getSelectedItems()) != null) && ((getSelectedItems().size()) == 1)) && ((getSelectedItems().get(0).getType()) == providerType); }
@org.junit.Before public void setUp() { createCluster(); createParameters(); injectMocks(); createCommandContext(); createCommand(); mockBackend(); }	@org.junit.Before public void setUp() { createCluster(); createParameters(); createCommandContext(); createCommand(); mockBackend(); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity = createInterface(rs); org.ovirt.engine.core.dao.network.InterfaceDaoDbFacadeImpl.HostNetworkStatisticsRowMapper statisticsMapper = new org.ovirt.engine.core.dao.network.InterfaceDaoDbFacadeImpl.HostNetworkStatisticsRowMapper(); entity.setStatistics(statisticsMapper.mapRow(rs, rowNum)); entity.setType(((java.lang.Integer) (rs.getObject("type")))); entity.setGateway(rs.getString("gateway")); entity.setSubnet(rs.getString("subnet")); entity.setAddress(rs.getString("addr")); entity.setNetworkName(rs.getString("network_name")); entity.setName(rs.getString("name")); entity.setVdsId(getGuid(rs, "vds_id")); entity.setVdsName(rs.getString("vds_name")); entity.setId(getGuidDefaultEmpty(rs, "id")); entity.setBootProtocol(org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.forValue(rs.getInt("boot_protocol"))); entity.setMtu(rs.getInt("mtu")); entity.setBridged(rs.getBoolean("bridged")); entity.setQos(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getHostNetworkQosDao().get(entity.getId())); entity.setQosOverridden(rs.getBoolean("qos_overridden")); entity.setLabels(org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserialize(rs.getString("labels"), java.util.HashSet.class)); entity.setCustomProperties(org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserialize(rs.getString("custom_properties"), java.util.LinkedHashMap.class)); return entity; }	@java.lang.SuppressWarnings("unchecked") @java.lang.Override public org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity = createInterface(rs); entity.setStatistics(org.ovirt.engine.core.dao.network.InterfaceDaoDbFacadeImpl.HostNetworkStatisticsRowMapper.INSTANCE.mapRow(rs, rowNum)); entity.setType(((java.lang.Integer) (rs.getObject("type")))); entity.setGateway(rs.getString("gateway")); entity.setSubnet(rs.getString("subnet")); entity.setAddress(rs.getString("addr")); entity.setNetworkName(rs.getString("network_name")); entity.setName(rs.getString("name")); entity.setVdsId(getGuid(rs, "vds_id")); entity.setVdsName(rs.getString("vds_name")); entity.setId(getGuidDefaultEmpty(rs, "id")); entity.setBootProtocol(org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.forValue(rs.getInt("boot_protocol"))); entity.setMtu(rs.getInt("mtu")); entity.setBridged(rs.getBoolean("bridged")); entity.setQos(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getHostNetworkQosDao().get(entity.getId())); entity.setQosOverridden(rs.getBoolean("qos_overridden")); entity.setLabels(org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserialize(rs.getString("labels"), java.util.HashSet.class)); entity.setCustomProperties(org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserialize(rs.getString("custom_properties"), java.util.LinkedHashMap.class)); return entity; }
public void onManualRefresh() { setLoadingState(LoadingState.LOADING); }	@java.lang.Override public void onManualRefresh() { setLoadingState(LoadingState.LOADING); }
private java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceProxySourceType> getFenceProxySources() { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceProxySourceType> fenceProxySources = _vds.getFenceProxySources(); if ((fenceProxySources == null) || (fenceProxySources.isEmpty())) { fenceProxySources = org.ovirt.engine.core.common.utils.pm.FenceProxySourceTypeHelper.parseFromString(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.FenceProxyDefaultPreferences)); } return fenceProxySources; }	private java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceProxySourceType> getFenceProxySources() { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceProxySourceType> fenceProxySources = _vds.getFenceProxySources(); if (org.apache.commons.collections.CollectionUtils.isEmpty(fenceProxySources)) { fenceProxySources = org.ovirt.engine.core.common.utils.pm.FenceProxySourceTypeHelper.parseFromString(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.FenceProxyDefaultPreferences)); } return fenceProxySources; }
@java.lang.Override public void eventRaised(org.ovirt.engine.core.compat.Event ev, java.lang.Object sender, org.ovirt.engine.core.compat.EventArgs args) { org.ovirt.engine.ui.frontend.FrontendFailureEventArgs failureArgs = ((org.ovirt.engine.ui.frontend.FrontendFailureEventArgs) (args)); if ((failureArgs.getMessage()) != null) { errorPopupManager.show(org.ovirt.engine.ui.common.uicommon.ErrorMessageFormatter.formatMessage(failureArgs.getMessage())); } else if ((failureArgs.getMessages()) != null) { errorPopupManager.show(org.ovirt.engine.ui.common.uicommon.ErrorMessageFormatter.formatMessages(failureArgs.getMessages())); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.frontend.FrontendFailureEventArgs failureArgs = ((org.ovirt.engine.ui.frontend.FrontendFailureEventArgs) (args)); if ((failureArgs.getMessage()) != null) { errorPopupManager.show(org.ovirt.engine.ui.common.uicommon.FrontendFailureEventListener.MESSAGES.uiCommonRunActionFailed(org.ovirt.engine.ui.common.uicommon.ErrorMessageFormatter.formatMessage(failureArgs.getMessage()))); } else if ((failureArgs.getMessages()) != null) { errorPopupManager.show(org.ovirt.engine.ui.common.uicommon.FrontendFailureEventListener.MESSAGES.uiCommonRunActionFailed(org.ovirt.engine.ui.common.uicommon.ErrorMessageFormatter.formatMessages(failureArgs.getMessages()))); } }
private static void markTabs(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> mapping) { for (java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> entry : mapping.entrySet()) { if (invalidTabs.contains(entry.getKey())) { } else { } } }	private static void markTabs(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem> mapping) { for (java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem> entry : mapping.entrySet()) { if (invalidTabs.contains(entry.getKey())) { entry.getValue().markAsInvalid(null); } else { entry.getValue().markAsValid(); } } }
@java.lang.Override public void setListValue(java.util.List<T> value) { selectedList.clear(); selectedList.addAll(value); com.google.gwt.user.client.ui.ListBox listBox = org.ovirt.engine.ui.common.widget.editor.ListModelMultipleSelectListBox.asListBox(); if ((listBox.getSelectedIndex()) > (-1)) { listBox.setItemSelected(listBox.getSelectedIndex(), false); } for (T item : selectedList) { if (((typedItemList.indexOf(item)) > (-1)) && ((typedItemList.indexOf(item)) < (listBox.getItemCount()))) { listBox.setItemSelected(typedItemList.indexOf(item), true); } } }	@java.lang.Override public void setListValue(java.util.List<T> value) { selectedList.clear(); selectedList.addAll(value); com.google.gwt.user.client.ui.ListBox listBox = org.ovirt.engine.ui.common.widget.editor.ListModelMultipleSelectListBox.asListBox(); if ((listBox.getSelectedIndex()) > (-1)) { listBox.setItemSelected(listBox.getSelectedIndex(), false); } for (T item : selectedList) { int itemIndex = typedItemList.indexOf(item); if ((itemIndex > (-1)) && (itemIndex < (listBox.getItemCount()))) { listBox.setItemSelected(itemIndex, true); } } }
@org.junit.Test public void canDoActionThinProvisioningSpaceCheckSucceeds() throws java.lang.Exception { final int availableSize = 6; final int usedSize = 4; org.ovirt.engine.core.compat.Guid sdid = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(sdid, VolumeType.Sparse); mockVm(); mockStorageDomain(sdid, availableSize, usedSize); mockStoragePoolIsoMap(); mockMaxPciSlots(); assertTrue(command.canDoAction()); }	@org.junit.Test public void canDoActionSpaceValidationSucceeds() { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId, VolumeType.Preallocated); mockVm(); mockStorageDomain(storageId); mockStoragePoolIsoMap(); mockInterfaceList(); mockMaxPciSlots(); doReturn(org.ovirt.engine.core.bll.AddDiskToVmCommandTest.mockStorageDomainValidatorWithSpace()).when(command).createStorageDomainValidator(); assertTrue(command.canDoAction()); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("OS Version -") java.lang.String osVersionAbout();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("OS Version -") java.lang.String osVersionAbout();
public void setRow(int row) { this.row = row; }	public void setFormPanel(org.ovirt.engine.ui.common.widget.form.AbstractFormPanel formPanel) { this.formPanel = formPanel; if ((autoPlacement) && (getIsAvailable())) { this.autoPlacementRow = formPanel.getNextAvailableRow(column); } }
@org.junit.Test public void testMoveBySdId() throws java.lang.Exception { setUpEntityQueryExpectations(1); setUriInfo(setUpActionExpectations(VdcActionType.MoveDisks, org.ovirt.engine.core.common.action.MoveDisksParameters.class, new java.lang.String[]{ "ParametersList" }, new java.lang.Object[]{ java.util.Collections.singletonList(new org.ovirt.engine.core.common.action.MoveDiskParameters(GUIDS[1], org.ovirt.engine.core.compat.Guid.Empty, GUIDS[3])) })); verifyActionResponse(((org.ovirt.engine.api.resource.VmDiskResource) (resource)).move(setUpMoveParams(false))); }	@org.junit.Test public void testMoveBySdId() throws java.lang.Exception { setUpEntityQueryExpectations(VdcQueryType.GetDiskByDiskId, org.ovirt.engine.core.common.queries.GetDiskByDiskIdParameters.class, new java.lang.String[]{ "DiskId" }, new java.lang.Object[]{ GUIDS[1] }, getEntity(1)); setUriInfo(setUpActionExpectations(VdcActionType.MoveDisks, org.ovirt.engine.core.common.action.MoveDisksParameters.class, new java.lang.String[]{ "ParametersList" }, new java.lang.Object[]{ java.util.Collections.singletonList(new org.ovirt.engine.core.common.action.MoveDiskParameters(GUIDS[1], org.ovirt.engine.core.compat.Guid.Empty, GUIDS[3])) })); verifyActionResponse(((org.ovirt.engine.api.resource.VmDiskResource) (resource)).move(setUpMoveParams(false))); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel object) { driver.edit(object); diskAliasLabel.asValueBox().setValue(object.getAlias().getEntity()); diskSizeLabel.asValueBox().setValue(new org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer<java.lang.Integer>(SizeConverter.SizeUnit.GB).render(object.getSize().getEntity())); object.getVolumeType().setSelectedItem(((org.ovirt.engine.core.common.businessentities.DiskImage) (object.getDisk())).getVolumeType()); object.getVolumeFormat().setSelectedItem(((org.ovirt.engine.core.common.businessentities.DiskImage) (object.getDisk())).getVolumeFormat()); sourceStorageLabel.getElement().getElementsByTagName("input").getItem(0).getStyle().setBorderColor("transparent"); updateStyles(object.getQuota().getIsAvailable()); }	@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel object) { driver.edit(object); diskAliasLabel.asValueBox().setValue(object.getAlias().getEntity()); diskSizeLabel.asValueBox().setValue(new org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer<java.lang.Integer>(SizeConverter.SizeUnit.GiB).render(object.getSize().getEntity())); object.getVolumeType().setSelectedItem(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object.getDisk())).getVolumeType()); object.getVolumeFormat().setSelectedItem(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object.getDisk())).getVolumeFormat()); sourceStorageLabel.getElement().getElementsByTagName("input").getItem(0).getStyle().setBorderColor("transparent"); updateStyles(object.getQuota().getIsAvailable()); }
@org.junit.BeforeClass public static void beforeClass() { org.ovirt.engine.core.notifier.utils.NotificationProperties.release(); org.ovirt.engine.core.notifier.utils.NotificationProperties.setDefaults(java.lang.ClassLoader.getSystemResource("conf/notifier-prop-test.conf").getPath(), ""); org.ovirt.engine.core.notifier.utils.NotificationPropertiesTest.prop = org.ovirt.engine.core.notifier.utils.NotificationProperties.getInstance(); assertNotNull(org.ovirt.engine.core.notifier.utils.NotificationPropertiesTest.prop); }	@org.junit.BeforeClass public static void beforeClass() throws java.io.UnsupportedEncodingException { org.ovirt.engine.core.notifier.utils.NotificationProperties.release(); org.ovirt.engine.core.notifier.utils.NotificationProperties.setDefaults(java.net.URLDecoder.decode(java.lang.ClassLoader.getSystemResource("conf/notifier-prop-test.conf").getPath(), "UTF-8"), ""); org.ovirt.engine.core.notifier.utils.NotificationPropertiesTest.prop = org.ovirt.engine.core.notifier.utils.NotificationProperties.getInstance(); assertNotNull(org.ovirt.engine.core.notifier.utils.NotificationPropertiesTest.prop); }
@com.google.gwt.i18n.client.Messages.DefaultMessage("Name field is empty for host with address {0}") java.lang.String importClusterHostNameEmpty(java.lang.String address);	@org.ovirt.engine.ui.uicompat.DefaultMessage("Name field is empty for host with address {0}") java.lang.String importClusterHostNameEmpty(java.lang.String address);
public void setAttachedDirectLunsIds(java.util.Collection<java.lang.String> attachedDirectLunsIds) { this.attachedDirectLunsIds = attachedDirectLunsIds; }	public void setAttachedDirectLunDisksIds(java.util.Set<org.ovirt.engine.core.compat.Guid> attachedDirectLunDisksIds) { this.attachedDirectLunDisksIds = attachedDirectLunDisksIds; }
private org.ovirt.engine.core.bll.validator.NetworkCluster getNetworkCluster() { if ((networkCluster) == null) { org.ovirt.engine.core.bll.validator.NetworkClusterId networkClusterId = new org.ovirt.engine.core.bll.validator.NetworkClusterId(host.getClusterId(), attachment.getNetworkId()); networkCluster = networkClusterDao.get(networkClusterId); } return networkCluster; }	private org.ovirt.engine.core.common.businessentities.network.NetworkCluster getNetworkCluster() { if ((networkCluster) == null) { org.ovirt.engine.core.common.businessentities.network.NetworkClusterId networkClusterId = new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(host.getClusterId(), attachment.getNetworkId()); networkCluster = networkClusterDao.get(networkClusterId); } return networkCluster; }
private boolean checkClusterFeaturesSupported(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdss, java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> newFeaturesEnabled) { java.util.Set<java.lang.String> featuresNamesEnabled = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature : newFeaturesEnabled) { featuresNamesEnabled.add(feature.getFeature().getName()); } for (org.ovirt.engine.core.common.businessentities.VDS vds : vdss) { java.util.Set<java.lang.String> featuresSupportedByVds = getHostFeatureDao().getSupportedHostFeaturesByHostId(vds.getId()); if (!(featuresSupportedByVds.containsAll(featuresNamesEnabled))) { return false; } } return true; }	private boolean checkClusterFeaturesSupported(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdss, java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> newFeaturesEnabled) { java.util.Set<java.lang.String> featuresNamesEnabled = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature : newFeaturesEnabled) { featuresNamesEnabled.add(feature.getFeature().getName()); } for (org.ovirt.engine.core.common.businessentities.VDS vds : vdss) { java.util.Set<java.lang.String> featuresSupportedByVds = org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getSupportedHostFeatureDao().getSupportedHostFeaturesByHostId(vds.getId()); if (!(featuresSupportedByVds.containsAll(featuresNamesEnabled))) { return false; } } return true; }
@org.junit.Test public void shouldDetectEqualOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("RHEL", new org.ovirt.engine.core.compat.Version("6.3")).isEqualOs(new org.ovirt.engine.core.bll.scheduling.OS("oVirt Node", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("RHEL", new org.ovirt.engine.core.compat.Version("6.3")).isEqualOs(new org.ovirt.engine.core.bll.scheduling.OS("RHEV Hypervisor", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("oVirt Node", new org.ovirt.engine.core.compat.Version("6.3")).isEqualOs(new org.ovirt.engine.core.bll.scheduling.OS("RHEV Hypervisor", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); }	@org.junit.Test public void shouldDetectEqualOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("RHEL", new org.ovirt.engine.core.compat.Version("6.3")).isSameOsFamily(new org.ovirt.engine.core.bll.scheduling.OS("oVirt Node", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("RHEL", new org.ovirt.engine.core.compat.Version("6.3")).isSameOsFamily(new org.ovirt.engine.core.bll.scheduling.OS("RHEV Hypervisor", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("oVirt Node", new org.ovirt.engine.core.compat.Version("6.3")).isSameOsFamily(new org.ovirt.engine.core.bll.scheduling.OS("RHEV Hypervisor", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getDiskImage().getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getDiskImage().getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
@org.junit.Before public void setUp() { _sshdialog = new org.ovirt.engine.core.utils.hostinstall.SSHDialog(); _sshdialog.setHost(org.ovirt.engine.core.utils.hostinstall.SSHDialogTest.s_host, org.ovirt.engine.core.utils.hostinstall.SSHDialogTest.s_port); _sshdialog.setPassword(org.ovirt.engine.core.utils.hostinstall.SSHDialogTest.s_password); _sshdialog.setKeyPair(org.ovirt.engine.core.utils.hostinstall.SSHDialogTest.s_keyPair); _sshdialog.setSoftTimeout((10 * 1000)); _sshdialog.setHardTimeout((30 * 1000)); }	@org.junit.Before public void setUp() { _sshdialog = new org.ovirt.engine.core.utils.ssh.SSHDialog(); _sshdialog.setHost(org.ovirt.engine.core.utils.ssh.SSHDialogTest.s_host, org.ovirt.engine.core.utils.ssh.SSHDialogTest.s_port); _sshdialog.setPassword(org.ovirt.engine.core.utils.ssh.SSHDialogTest.s_password); _sshdialog.setKeyPair(org.ovirt.engine.core.utils.ssh.SSHDialogTest.s_keyPair); _sshdialog.setSoftTimeout((10 * 1000)); _sshdialog.setHardTimeout((30 * 1000)); }
@org.junit.Before public void setup() { doReturn(dbFacade).when(validator).getDbFacade(); doReturn(storageServerConnectionExtensionDao).when(dbFacade).getStorageServerConnectionExtensionDao(); doReturn(vdsDao).when(dbFacade).getVdsDao(); doReturn(new org.ovirt.engine.core.common.businessentities.VDS()).when(vdsDao).get(any(org.ovirt.engine.core.compat.Guid.class)); conn = new org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension(); conn.setHostId(org.ovirt.engine.core.compat.Guid.newGuid()); conn.setIqn("iqn1"); conn.setUserName("user1"); conn.setPassword("password1"); }	@org.junit.Before public void setup() { org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.compat.Guid.newGuid(); doReturn(dbFacade).when(validator).getDbFacade(); doReturn(storageServerConnectionExtensionDao).when(dbFacade).getStorageServerConnectionExtensionDao(); doReturn(vdsDao).when(dbFacade).getVdsDao(); doReturn(new org.ovirt.engine.core.common.businessentities.VDS()).when(vdsDao).get(hostId); conn = new org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension(); conn.setHostId(hostId); conn.setIqn("iqn1"); conn.setUserName("user1"); conn.setPassword("password1"); }
public void buildCrumbs(java.lang.String modelTitle, java.lang.String modelHref) { breadCrumbs.clear(); breadCrumbs.add(new org.gwtbootstrap3.client.ui.AnchorListItem("")); java.lang.String primaryLabel = menuLayout.getPrimaryGroupTitle(modelTitle); if (primaryLabel != null) { breadCrumbs.add(new org.gwtbootstrap3.client.ui.ListItem(primaryLabel)); } org.gwtbootstrap3.client.ui.AnchorListItem mainModelAnchor = new org.gwtbootstrap3.client.ui.AnchorListItem(modelTitle); mainModelAnchor.setHref(("#" + modelHref)); breadCrumbs.add(mainModelAnchor); if ((currentSelectedItemWidget) != null) { breadCrumbs.add(currentSelectedItemWidget); } }	@java.lang.Override public void buildCrumbs(java.lang.String modelTitle, java.lang.String modelHref) { breadCrumbs.clear(); breadCrumbs.add(new org.gwtbootstrap3.client.ui.AnchorListItem()); java.lang.String primaryLabel = menuLayout.getPrimaryGroupTitle(modelTitle); if (primaryLabel != null) { breadCrumbs.add(new org.gwtbootstrap3.client.ui.ListItem(primaryLabel)); } org.gwtbootstrap3.client.ui.AnchorListItem mainModelAnchor = new org.gwtbootstrap3.client.ui.AnchorListItem(modelTitle); mainModelAnchor.setHref(("#" + modelHref)); breadCrumbs.add(mainModelAnchor); if ((currentSelectedItemWidget) != null) { breadCrumbs.add(currentSelectedItemWidget); } }
@java.lang.Override public void update(java.util.Observable o, java.lang.Object arg) { org.ovirt.engine.core.notifier.dao.DispatchData dispatch = ((org.ovirt.engine.core.notifier.dao.DispatchData) (arg)); org.ovirt.engine.core.notifier.filter.AuditLogEvent event = ((org.ovirt.engine.core.notifier.filter.AuditLogEvent) (dispatch.getEvent())); java.sql.Connection connection = null; java.sql.CallableStatement cs = null; try { connection = ds.getConnection(); cs = connection.prepareCall("{call Insertevent_notification_hist(?,?,?,?,?,?)}"); cs.setLong(1, event.getId()); cs.setString(2, event.getLogTypeName()); cs.setString(3, dispatch.getNotificationMethod().name()); cs.setString(4, dispatch.getErrorMessage()); cs.setTimestamp(5, new java.sql.Timestamp(new java.util.Date().getTime())); cs.setBoolean(6, dispatch.isSuccess()); cs.executeUpdate(); } catch (java.sql.SQLException e) { org.ovirt.engine.core.notifier.dao.EventsManager.log.error("Could not insert event notification history event", e); } finally { org.ovirt.engine.core.utils.db.DbUtils.closeQuietly(cs, connection); } }	public void addEventNotificationHistoryRecord(org.ovirt.engine.core.common.businessentities.AuditLogEvent event, org.ovirt.engine.core.common.businessentities.AuditLogEventSubscriber subscriber, org.ovirt.engine.core.notifier.transport.EventSenderResult sendResult) { java.sql.Connection connection = null; java.sql.CallableStatement cs = null; try { connection = ds.getConnection(); cs = connection.prepareCall("{call Insertevent_notification_hist(?,?,?,?,?,?,?)}"); cs.setLong(1, event.getId()); cs.setString(2, event.getLogTypeName()); cs.setString(3, subscriber.getEventNotificationMethod().name()); cs.setString(4, sendResult.getReason()); cs.setTimestamp(5, new java.sql.Timestamp(new java.util.Date().getTime())); cs.setBoolean(6, sendResult.isSent()); cs.executeUpdate(); } catch (java.sql.SQLException e) { throw new org.ovirt.engine.core.notifier.NotificationServiceException("Could not insert event notification history event", e); } finally { org.ovirt.engine.core.utils.db.DbUtils.closeQuietly(cs, connection); } }
@org.junit.Test public void testCanDoActionDomainLocked() { testCanDoActionDomainInProcess(StorageDomainStatus.Locked); }	@org.junit.Test public void testCanDoActionMasterLocked() { validateCanDoActionDomainInProcess(StorageDomainStatus.Locked, StorageDomainStatus.Active, StorageDomainStatus.Locked); }
private boolean resumeGeoRepSessions(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> geoRepSessions) { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session : geoRepSessions) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity slaveVolume = getDbFacade().getGlusterVolumeDao().getById(session.getSlaveVolumeId()); if (slaveVolume == null) { continue; } org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = runInternalAction(VdcActionType.ResumeGeoRepSession, new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters(getGlusterVolumeId(), session.getId())); if (!(retVal.getSucceeded())) { handleVdsError(AuditLogType.GLUSTER_VOLUME_GEO_REP_RESUME_FAILED, retVal.getExecuteFailedMessages().toString()); setSucceeded(false); return false; } } return true; }	private boolean resumeGeoRepSessions(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> geoRepSessions) { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session : geoRepSessions) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity slaveVolume = getDbFacade().getGlusterVolumeDao().getById(session.getSlaveVolumeId()); if (slaveVolume == null) { continue; } try (org.ovirt.engine.core.utils.lock.EngineLock lock = acquireGeoRepSessionLock(session.getId())) { org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = runInternalAction(VdcActionType.ResumeGeoRepSession, new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters(getGlusterVolumeId(), session.getId())); if (!(retVal.getSucceeded())) { handleVdsError(AuditLogType.GLUSTER_VOLUME_GEO_REP_RESUME_FAILED, retVal.getExecuteFailedMessages().toString()); setSucceeded(false); return false; } } } return true; }
@org.junit.Test public void testExecuteCommandFailsWithClusterIdForStart() { cmd = spy(new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand(new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters(org.ovirt.engine.core.compat.Guid.newGuid(), null, org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT, org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_START))); setUpMockUpForStart(); mockBackend(false, EngineErrors.GlusterServicesActionFailed, GlusterServiceStatus.STOPPED); cmd.executeCommand(); verify(serverServiceDao, never()).updateByServerIdAndServiceType(any(org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService.class)); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_SERVICE_START_FAILED); }	@org.junit.Test public void testExecuteCommandFailsWithClusterIdForStart() { cmd = spy(new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand(new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters(org.ovirt.engine.core.compat.Guid.newGuid(), null, org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT, org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_START))); setUpMockUpForStart(); mockBackend(false, EngineError.GlusterServicesActionFailed, GlusterServiceStatus.STOPPED); cmd.executeCommand(); verify(serverServiceDao, never()).updateByServerIdAndServiceType(any(org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService.class)); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_SERVICE_START_FAILED); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet object) { return object.getDnsServers().stream().collect(java.util.stream.Collectors.joining(", ")); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet object) { return java.lang.String.join(", ", object.getDnsServers()); }
public org.ovirt.engine.api.model.RSDL loadRsdl() throws java.io.IOException { java.io.InputStream stream = this.getClass().getResourceAsStream("/rsdl.xml"); return javax.xml.bind.JAXB.unmarshal(stream, org.ovirt.engine.api.model.RSDL.class); }	public org.ovirt.engine.api.model.RSDL loadRsdl(org.ovirt.engine.core.common.mode.ApplicationMode applicationMode) throws java.io.IOException { java.io.InputStream stream = (applicationMode == (org.ovirt.engine.core.common.mode.ApplicationMode.GlusterOnly)) ? this.getClass().getResourceAsStream(org.ovirt.engine.api.rsdl.RsdlManager.GLUSTER_RSDL_FILE_NAME) : this.getClass().getResourceAsStream(org.ovirt.engine.api.rsdl.RsdlManager.RSDL_FILE_NAME); return javax.xml.bind.JAXB.unmarshal(stream, org.ovirt.engine.api.model.RSDL.class); }
private void writeListenerMap() { logger.log(Type.DEBUG, "Starting to write ListenerMap"); sw.println(); sw.println("@Override"); sw.println((("protected " + (org.ovirt.engine.ui.common.editor.UiCommonListenerMap.class.getName())) + " getListenerMap() {")); sw.indent(); sw.println(((((org.ovirt.engine.ui.common.editor.UiCommonListenerMap.class.getName()) + " listenerMap = new ") + (org.ovirt.engine.ui.common.editor.UiCommonListenerMap.class.getName())) + "();")); sw.println(); logger.log(Type.DEBUG, "Looking for top-level Editor Fields"); for (com.google.gwt.editor.rebind.model.EditorData editorData : model.getEditorData()) { logger.log(Type.DEBUG, ("Going over Field: " + editorData)); java.lang.String path = editorData.getPath(); path = (java.lang.Character.toUpperCase(path.charAt(0))) + (path.substring(1, path.length())); if ((path.length()) == 0) { continue; } if (!(editorData.isDeclaredPathNested())) { logger.log(Type.DEBUG, ("Found top-level Field: " + editorData)); sw.println("listenerMap.addListener(\"%s\", \"PropertyChanged\", new org.ovirt.engine.ui.uicompat.IEventListener() {", path); sw.indent(); sw.println("@Override"); sw.println("public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) {"); sw.indent(); sw.println("getEditor().%s.setValue(getObject()%s);", editorData.getExpression(), editorData.getGetterExpression()); sw.outdent(); sw.println("}"); sw.outdent(); sw.println("});"); sw.println(); } } sw.println("return listenerMap;"); sw.outdent(); sw.println("}"); }	private void writeListenerMap() { logger.log(Type.DEBUG, "Strating to write ListenerMap"); sw.println(); sw.println("@Override"); sw.println((("protected " + (org.ovirt.engine.ui.common.editor.UiCommonListenerMap.class.getName())) + " getListenerMap() {")); sw.indent(); sw.println(((((org.ovirt.engine.ui.common.editor.UiCommonListenerMap.class.getName()) + " listenerMap = new ") + (org.ovirt.engine.ui.common.editor.UiCommonListenerMap.class.getName())) + "();")); sw.println(); logger.log(Type.DEBUG, "Looking for top-level Editor Fields"); for (com.google.gwt.editor.rebind.model.EditorData editorData : model.getEditorData()) { logger.log(Type.DEBUG, ("Going over Field: " + editorData)); java.lang.String path = editorData.getPath(); path = (java.lang.Character.toUpperCase(path.charAt(0))) + (path.substring(1, path.length())); if ((path.length()) == 0) { continue; } if (!(editorData.isDeclaredPathNested())) { logger.log(Type.DEBUG, ("Found top-level Field: " + editorData)); sw.println("listenerMap.addListener(\"%s\", \"PropertyChanged\", new org.ovirt.engine.ui.uicompat.IEventListener() {", path); sw.indent(); sw.println("@Override"); sw.println("public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) {"); sw.indent(); sw.println("getEditor().%s.setValue(getObject()%s);", editorData.getExpression(), editorData.getGetterExpression()); sw.outdent(); sw.println("}"); sw.outdent(); sw.println("});"); sw.println(); } } sw.println("return listenerMap;"); sw.outdent(); sw.println("}"); }
@java.lang.Override public org.ovirt.engine.api.resource.ImageTransferResource getImageTransferResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendImageTransferResource(id, this)); }	@java.lang.Override public org.ovirt.engine.api.resource.ImageTransferResource getImageTransferResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendImageTransferResource(id)); }
private org.ovirt.engine.core.common.action.VdcReturnValueBase runActionImpl(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, boolean runAsInternal, org.ovirt.engine.core.bll.context.CommandContext context) { org.ovirt.engine.core.common.action.VdcReturnValueBase result; if (((!(actionType.isActionMonitored())) && (!(isActionExternal(actionType)))) && (((parameters.getJobId()) != null) || ((parameters.getStepId()) != null))) { result = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); result.getValidationMessages().add(EngineMessage.ACTION_TYPE_NON_MONITORED.toString()); result.setValid(false); result.setSucceeded(false); } else { if (!runAsInternal) { logExecution(parameters.getSessionId(), java.lang.String.format("command %s", actionType), parameters.toString()); } org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameters, context); result = runAction(command, runAsInternal); } return result; }	private org.ovirt.engine.core.common.action.VdcReturnValueBase runActionImpl(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, boolean runAsInternal, org.ovirt.engine.core.bll.context.CommandContext context) { org.ovirt.engine.core.common.action.VdcReturnValueBase result; if (((!(actionType.isActionMonitored())) && (!(isActionExternal(actionType)))) && (((parameters.getJobId()) != null) || ((parameters.getStepId()) != null))) { result = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); result.getValidationMessages().add(EngineMessage.ACTION_TYPE_NON_MONITORED.toString()); result.setValid(false); result.setSucceeded(false); } else { if (!runAsInternal) { logExecution(parameters.getSessionId(), java.lang.String.format("command %s", actionType)); } org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameters, context); result = runAction(command, runAsInternal); } return result; }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("vmsMonitoring") public void vmsMonitoring() { if (isMonitoringNeeded()) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = (getRefreshStatistics()) ? new org.ovirt.engine.core.vdsbroker.VmsStatisticsFetcher(this) : new org.ovirt.engine.core.vdsbroker.VmsListFetcher(this); fetcher.fetch(); new org.ovirt.engine.core.vdsbroker.VmsMonitoring(this, fetcher.getChangedVms(), fetcher.getVmsWithChangedDevices(), auditLogDirector).perform(); } else { setVmsMonitoringFinished(); } }	@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("vmsMonitoring") public void vmsMonitoring() { if (isMonitoringNeeded()) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = (getRefreshStatistics()) ? new org.ovirt.engine.core.vdsbroker.VmsStatisticsFetcher(this) : new org.ovirt.engine.core.vdsbroker.VmsListFetcher(this); fetcher.fetch(); new org.ovirt.engine.core.vdsbroker.VmsMonitoring(this, fetcher.getChangedVms(), fetcher.getVmsWithChangedDevices(), auditLogDirector).perform(); } }
public java.lang.String getCronExpression() { java.lang.String cronExpression = ""; switch (frequency) { case DAILY : cronExpression = org.ovirt.engine.core.compat.StringFormat.format("0 %s %s * * ? *", mins, hour); break; case WEEKLY : cronExpression = org.ovirt.engine.core.compat.StringFormat.format("0 %s %s ? * %s *", mins, hour, getDaysCron()); case NONE : cronExpression = ""; } return cronExpression; }	public java.lang.String toCronExpression() { java.lang.String cronExpression = ""; switch (frequency) { case DAILY : if (((mins) != null) && ((hour) != null)) { cronExpression = org.ovirt.engine.core.compat.StringFormat.format("0 %s %s * * ? *", mins, hour); } break; case WEEKLY : if ((((mins) != null) && ((hour) != null)) && ((days) != null)) { cronExpression = org.ovirt.engine.core.compat.StringFormat.format("0 %s %s ? * %s *", mins, hour, toDaysCron()); } break; case NONE : cronExpression = ""; } return cronExpression; }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.CommandEntity entity) { return getCustomMapSqlParameterSource().addValue("command_id", (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(entity.getId()) ? org.ovirt.engine.core.compat.Guid.Empty : entity.getId())).addValue("command_type", entity.getCommandType().getValue()).addValue("root_command_id", (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(entity.getRootCommandId()) ? org.ovirt.engine.core.compat.Guid.Empty : entity.getRootCommandId())).addValue("job_id", (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(entity.getJobId()) ? org.ovirt.engine.core.compat.Guid.Empty : entity.getJobId())).addValue("step_id", (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(entity.getStepId()) ? org.ovirt.engine.core.compat.Guid.Empty : entity.getStepId())).addValue("action_parameters", serializeParameters(entity.getActionParameters())).addValue("action_parameters_class", ((entity.getActionParameters()) == null ? null : entity.getActionParameters().getClass().getName())).addValue("status", entity.getCommandStatus().toString()).addValue("executed", entity.isExecuted()).addValue("async", entity.isAsync()).addValue("callback_enabled", entity.isCallBackEnabled()).addValue("return_value", serializeReturnValue(entity.getReturnValue())).addValue("return_value_class", ((entity.getReturnValue()) == null ? null : entity.getReturnValue().getClass().getName())); }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.CommandEntity entity) { return getCustomMapSqlParameterSource().addValue("command_id", (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(entity.getId()) ? org.ovirt.engine.core.compat.Guid.Empty : entity.getId())).addValue("command_type", entity.getCommandType().getValue()).addValue("root_command_id", (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(entity.getRootCommandId()) ? org.ovirt.engine.core.compat.Guid.Empty : entity.getRootCommandId())).addValue("job_id", (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(entity.getJobId()) ? org.ovirt.engine.core.compat.Guid.Empty : entity.getJobId())).addValue("step_id", (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(entity.getStepId()) ? org.ovirt.engine.core.compat.Guid.Empty : entity.getStepId())).addValue("action_parameters", serializeParameters(entity.getActionParameters())).addValue("action_parameters_class", ((entity.getActionParameters()) == null ? null : entity.getActionParameters().getClass().getName())).addValue("status", entity.getCommandStatus().toString()).addValue("executed", entity.isExecuted()).addValue("callback_enabled", entity.isCallBackEnabled()).addValue("return_value", serializeReturnValue(entity.getReturnValue())).addValue("return_value_class", ((entity.getReturnValue()) == null ? null : entity.getReturnValue().getClass().getName())); }
private void validateImageType() { try { final java.io.InputStream inputStream = new java.io.ByteArrayInputStream(rawImageData); final javax.imageio.stream.ImageInputStream imageInputStream = javax.imageio.ImageIO.createImageInputStream(inputStream); final java.util.Iterator<javax.imageio.ImageReader> imageReaders = javax.imageio.ImageIO.getImageReaders(imageInputStream); if (!(imageReaders.hasNext())) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.PROVIDED_VM_ICON_OF_UNKNOWN_TYPE); return; } final java.lang.String formatName = imageReaders.next().getFormatName(); imageType = org.ovirt.engine.core.bll.validator.IconValidator.FileType.getByFormatName(formatName); if ((imageType) == null) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.PROVIDED_VM_ICONS_OF_UNSUPPORTED_TYPE, ("$fileType " + formatName), ("$supportedFileTypes " + (org.ovirt.engine.core.bll.validator.IconValidator.FileType.getSupportedTypes()))); } } catch (java.io.IOException e) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.PROVIDED_VM_ICON_CANT_BE_READ); } }	private void validateImageType() { try { final java.io.InputStream inputStream = new java.io.ByteArrayInputStream(rawImageData); final javax.imageio.stream.ImageInputStream imageInputStream = javax.imageio.ImageIO.createImageInputStream(inputStream); final java.util.Iterator<javax.imageio.ImageReader> imageReaders = javax.imageio.ImageIO.getImageReaders(imageInputStream); if (!(imageReaders.hasNext())) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.PROVIDED_VM_ICON_OF_UNKNOWN_TYPE); return; } final java.lang.String formatName = imageReaders.next().getFormatName(); imageType = org.ovirt.engine.core.bll.validator.IconValidator.FileType.getByFormatName(formatName); if ((imageType) == null) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.PROVIDED_VM_ICONS_OF_UNSUPPORTED_TYPE, ("$fileType " + formatName), ("$supportedFileTypes " + (org.ovirt.engine.core.bll.validator.IconValidator.FileType.getSupportedTypes()))); } } catch (java.io.IOException e) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.PROVIDED_VM_ICON_CANT_BE_READ); } }
private void updateEnabled() { for (org.ovirt.engine.core.common.utils.Pair<T, V> item : items) { toggleEnabled(item.getSecond()); } }	private void updateEnabled() { for (org.ovirt.engine.core.common.utils.Pair<T, V> item : items) { toggleEnabled(item.getFirst(), item.getSecond()); } }
private void PrepareSanStorageForEdit(final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel model) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel storageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (getWindow())); org.ovirt.engine.core.common.businessentities.storage_domains storage = ((org.ovirt.engine.core.common.businessentities.storage_domains) (getSelectedItem())); boolean isStorageEditable = (storageModel.isStorageActive()) || (storageModel.isNewStorage()); if (isStorageEditable) { storageModel.getHost().getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { PostPrepareSanStorageForEdit(model, true); } }); } else { PostPrepareSanStorageForEdit(model, false); } }	private void PrepareSanStorageForEdit(final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel model) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel storageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (getWindow())); org.ovirt.engine.core.common.businessentities.StorageDomain storage = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (getSelectedItem())); boolean isStorageEditable = (storageModel.isStorageActive()) || (storageModel.isNewStorage()); if (isStorageEditable) { storageModel.getHost().getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { PostPrepareSanStorageForEdit(model, true); } }); } else { PostPrepareSanStorageForEdit(model, false); } }
public static long collectForHost(org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager manager, org.ovirt.engine.core.common.businessentities.VDS host) { long sumMb = 0L; for (org.ovirt.engine.core.bll.scheduling.pending.PendingMemory resource : manager.pendingHostResources(host, org.ovirt.engine.core.bll.scheduling.pending.PendingMemory.class)) { sumMb += resource.getSizeInMb(); } return sumMb; }	public static int collectForHost(org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager manager, org.ovirt.engine.core.compat.Guid host) { int sumMb = 0; for (org.ovirt.engine.core.bll.scheduling.pending.PendingMemory resource : manager.pendingHostResources(host, org.ovirt.engine.core.bll.scheduling.pending.PendingMemory.class)) { sumMb += resource.getSizeInMb(); } return sumMb; }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type} if some of the specified custom properties are not configured by the system. These keys are: ${MissingKeys}") java.lang.String ACTION_TYPE_FAILED_INVALID_CUSTOM_VM_PROPERTIES_INVALID_KEYS();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type} if some of the specified custom properties are not configured by the system. The keys are: ${MissingKeys}") java.lang.String ACTION_TYPE_FAILED_INVALID_CUSTOM_VM_PROPERTIES_INVALID_KEYS();
public void setRunTime(long runTime) { this.runTime = runTime; }	public void setRunTime(double runTime) { this.runTime = runTime; }
private static void setPropertiesFromAuditLogableBase(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { auditLog.setstorage_domain_id(auditLogable.getStorageDomainId()); auditLog.setstorage_domain_name(auditLogable.getStorageDomainName()); auditLog.setstorage_pool_id(auditLogable.getStoragePoolId()); auditLog.setstorage_pool_name(auditLogable.getStoragePoolName()); auditLog.setvds_group_id(auditLogable.getVdsGroupId()); auditLog.setvds_group_name(auditLogable.getVdsGroupName()); auditLog.setCorrelationId(auditLogable.getCorrelationId()); auditLog.setJobId(auditLogable.getJobId()); auditLog.setGlusterVolumeId(auditLogable.getGlusterVolumeId()); auditLog.setGlusterVolumeName(auditLogable.getGlusterVolumeName()); auditLog.setExternal(auditLogable.isExternal()); auditLog.setQuotaId(auditLogable.getQuotaIdForLog()); auditLog.setQuotaName(auditLogable.getQuotaNameForLog()); auditLog.setCallStack(auditLogable.getCallStack()); }	private static void setPropertiesFromAuditLogableBase(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { auditLog.setStorageDomainId(auditLogable.getStorageDomainId()); auditLog.setStorageDomainName(auditLogable.getStorageDomainName()); auditLog.setStoragePoolId(auditLogable.getStoragePoolId()); auditLog.setStoragePoolName(auditLogable.getStoragePoolName()); auditLog.setVdsGroupId(auditLogable.getVdsGroupId()); auditLog.setVdsGroupName(auditLogable.getVdsGroupName()); auditLog.setCorrelationId(auditLogable.getCorrelationId()); auditLog.setJobId(auditLogable.getJobId()); auditLog.setGlusterVolumeId(auditLogable.getGlusterVolumeId()); auditLog.setGlusterVolumeName(auditLogable.getGlusterVolumeName()); auditLog.setExternal(auditLogable.isExternal()); auditLog.setQuotaId(auditLogable.getQuotaIdForLog()); auditLog.setQuotaName(auditLogable.getQuotaNameForLog()); auditLog.setCallStack(auditLogable.getCallStack()); }
@org.junit.Test public void frontendToBackend_oneBuilder() { new org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel>(new org.ovirt.engine.ui.uicommonweb.builders.Property1Builder()).buildBackendFromFrontend(frontendModel, backendModel); assertThat(backendModel, is(equalTo(new org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel(org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutorTest.fe1, org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutorTest.be2)))); }	@org.junit.Test public void frontendToBackend_oneBuilder() { new org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel>(new org.ovirt.engine.ui.uicommonweb.builders.BackendAssert(org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutorTest.fe1, org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutorTest.be2), new org.ovirt.engine.ui.uicommonweb.builders.Property1Builder()).build(frontendModel, backendModel); }
@java.lang.Override public javax.ws.rs.core.Response undelete(org.ovirt.engine.api.model.Action action) { return performAction(VdcActionType.ClearDismissedAuditLogsBySeverity, new org.ovirt.engine.core.common.action.ClearDismissedAuditLogsBySeverityParameters(java.util.Arrays.asList(AuditLogSeverity.ERROR, AuditLogSeverity.WARNING, AuditLogSeverity.NORMAL, AuditLogSeverity.ALERT)), action, false); }	@java.lang.Override public javax.ws.rs.core.Response undelete(org.ovirt.engine.api.model.Action action) { return performAction(VdcActionType.ClearAllDismissedAuditLogs, new org.ovirt.engine.core.common.action.VdcActionParametersBase(), action, false); }
private void updateTimeoutLogableObject(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.AuditLogType logType) { int eventFloodRate = ((auditLogable.isExternal()) && ((auditLogable.getEventFloodInSec()) == 0)) ? 30 : logType.getEventFloodRate(); if (eventFloodRate > 0) { auditLogable.setEndTime(java.util.concurrent.TimeUnit.SECONDS.toMillis(eventFloodRate)); auditLogable.setTimeoutObjectId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.composeObjectId(auditLogable, logType)); } }	private void updateTimeoutLogableObject(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.AuditLogType logType) { int eventFloodRate = ((auditLogable.isExternal()) && ((auditLogable.getEventFloodInSec()) == 0)) ? 30 : logType.getEventFloodRate(); if (eventFloodRate > 0) { auditLogable.setEndTime(java.util.concurrent.TimeUnit.SECONDS.toMillis(eventFloodRate)); auditLogable.setTimeoutObjectId(composeObjectId(auditLogable, logType)); } }
@org.junit.Test public void testNoAffinityGroups() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); }	@org.junit.Test public void testNoAffinityGroups() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(scores.get(host1.getId()), scores.get(host2.getId())); }
public org.ovirt.engine.core.bll.ValidationResult notRenamingLabel(java.lang.String newLabel) { java.lang.String oldLabel = network.getLabel(); if (((oldLabel == null) || (newLabel == null)) || (oldLabel.equals(newLabel))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics = getDbFacade().getInterfaceDao().getVdsInterfacesByNetworkId(network.getId()); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface labeledNic = null; if (org.ovirt.engine.core.utils.NetworkUtils.isVlan(nic)) { labeledNic = getBaseInterface(nic); } labeledNic = (labeledNic == null) ? nic : labeledNic; if ((org.ovirt.engine.core.utils.NetworkUtils.isLabeled(labeledNic)) && (labeledNic.getLabels().contains(oldLabel))) { new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_LABEL_RENAMING_NOT_SUPPORTED); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult notRenamingLabel(java.lang.String newLabel) { java.lang.String oldLabel = network.getLabel(); if (((oldLabel == null) || (newLabel == null)) || (oldLabel.equals(newLabel))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics = getDbFacade().getInterfaceDao().getVdsInterfacesByNetworkId(network.getId()); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface labeledNic = nic; if (org.ovirt.engine.core.utils.NetworkUtils.isVlan(nic)) { labeledNic = getBaseInterface(nic); } if ((org.ovirt.engine.core.utils.NetworkUtils.isLabeled(labeledNic)) && (labeledNic.getLabels().contains(oldLabel))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_LABEL_RENAMING_NOT_SUPPORTED); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void fetchCpuProfiles(org.ovirt.engine.core.compat.Guid clusterId, final org.ovirt.engine.core.compat.Guid cpuProfileId) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetCpuProfilesByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.profiles.CpuProfile> cpuProfiles = ((java.util.List<org.ovirt.engine.core.common.businessentities.profiles.CpuProfile>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); getModel().getCpuProfiles().setItems(cpuProfiles); if (cpuProfiles != null) { for (org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile : cpuProfiles) { if (cpuProfile.getId().equals(cpuProfileId)) { getModel().getCpuProfiles().setSelectedItem(cpuProfile); } } } } })); }	private void fetchCpuProfiles(org.ovirt.engine.core.compat.Guid clusterId, final org.ovirt.engine.core.compat.Guid cpuProfileId) { if (clusterId == null) { return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetCpuProfilesByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.profiles.CpuProfile> cpuProfiles = ((java.util.List<org.ovirt.engine.core.common.businessentities.profiles.CpuProfile>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); getModel().getCpuProfiles().setItems(cpuProfiles); if (cpuProfiles != null) { for (org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile : cpuProfiles) { if (cpuProfile.getId().equals(cpuProfileId)) { getModel().getCpuProfiles().setSelectedItem(cpuProfile); break; } } } } })); }
@org.junit.Test public void testSaveOrUpdate() { existingAsyncTask.setstatus(AsyncTaskStatusEnum.aborting); existingAsyncTask.setresult(AsyncTaskResultEnum.failure); existingAsyncTask.setaction_type(VdcActionType.AddDisk); org.ovirt.engine.core.common.action.AddDiskParameters addDiskToVmParams = new org.ovirt.engine.core.common.action.AddDiskParameters(); addDiskToVmParams.setSessionId("SESSION_ID"); org.ovirt.engine.core.common.action.AddImageFromScratchParameters taskParameters = new org.ovirt.engine.core.common.action.AddImageFromScratchParameters(); taskParameters.setParentParameters(addDiskToVmParams); taskParameters.setParentCommand(VdcActionType.AddDisk); existingAsyncTask.setActionParameters(addDiskToVmParams); existingAsyncTask.setTaskParameters(taskParameters); java.util.List<org.ovirt.engine.core.common.businessentities.AsyncTasks> tasks = dao.getAll(); assertNotNull(tasks); int tasksNumber = tasks.size(); dao.saveOrUpdate(existingAsyncTask, VdcObjectType.Disk); tasks = dao.getAll(); assertEquals(tasksNumber, tasks.size()); org.ovirt.engine.core.common.businessentities.AsyncTasks taskFromDb = dao.get(existingAsyncTask.getVdsmTaskId()); assertNotNull(taskFromDb); assertEquals(taskFromDb, existingAsyncTask); dao.saveOrUpdate(newAsyncTask, VdcObjectType.Disk, org.ovirt.engine.core.compat.Guid.NewGuid()); tasks = dao.getAll(); assertNotNull(tasks); assertEquals((tasksNumber + 1), tasks.size()); taskFromDb = dao.get(newAsyncTask.getVdsmTaskId()); assertEquals(taskFromDb, newAsyncTask); }	@org.junit.Test public void testSaveOrUpdate() { existingAsyncTask.setstatus(AsyncTaskStatusEnum.aborting); existingAsyncTask.setresult(AsyncTaskResultEnum.failure); existingAsyncTask.setaction_type(VdcActionType.AddDisk); org.ovirt.engine.core.common.action.AddDiskParameters addDiskToVmParams = new org.ovirt.engine.core.common.action.AddDiskParameters(); addDiskToVmParams.setSessionId("SESSION_ID"); org.ovirt.engine.core.common.action.AddImageFromScratchParameters taskParameters = new org.ovirt.engine.core.common.action.AddImageFromScratchParameters(); taskParameters.setParentParameters(addDiskToVmParams); taskParameters.setParentCommand(VdcActionType.AddDisk); existingAsyncTask.setActionParameters(addDiskToVmParams); existingAsyncTask.setTaskParameters(taskParameters); java.util.List<org.ovirt.engine.core.common.businessentities.AsyncTasks> tasks = dao.getAll(); assertNotNull(tasks); int tasksNumber = tasks.size(); dao.saveOrUpdate(existingAsyncTask, VdcObjectType.Disk); tasks = dao.getAll(); assertEquals(tasksNumber, tasks.size()); org.ovirt.engine.core.common.businessentities.AsyncTasks taskFromDb = dao.get(existingAsyncTask.getVdsmTaskId()); assertNotNull(taskFromDb); assertEquals(taskFromDb, existingAsyncTask); dao.saveOrUpdate(newAsyncTask, VdcObjectType.Disk, org.ovirt.engine.core.compat.Guid.newGuid()); tasks = dao.getAll(); assertNotNull(tasks); assertEquals((tasksNumber + 1), tasks.size()); taskFromDb = dao.get(newAsyncTask.getVdsmTaskId()); assertEquals(taskFromDb, newAsyncTask); }
public org.ovirt.engine.core.bll.ValidationResult passthroughIsLinked() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessages.ACTION_TYPE_FAILED_UNLINKING_OF_PASSTHROUGH_VNIC_IS_NOT_SUPPORTED).when(((nic.isPassthrough()) && (!(nic.isLinked())))); }	public org.ovirt.engine.core.bll.ValidationResult passthroughIsLinked() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_UNLINKING_OF_PASSTHROUGH_VNIC_IS_NOT_SUPPORTED).when(((nic.isPassthrough()) && (!(nic.isLinked())))); }
public static java.util.List<java.lang.String> GetWindowsOsTypes() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncReturnValue<java.util.List<java.lang.String>> asyncReturnValue = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncReturnValue<java.util.List<java.lang.String>>(); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.OsRepository, new org.ovirt.engine.ui.uicommonweb.dataprovider.VdcQueryParametersBase(), asyncReturnValue); return asyncReturnValue.get(); }	public static void initWindowsOsTypes() { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(); callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsIds = ((java.util.ArrayList<java.lang.Integer>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.OsRepository, new org.ovirt.engine.core.common.queries.OsQueryParameters(OsRepositoryVerb.GetWindowsOss), callback); }
public org.ovirt.engine.core.bll.job.ExecutionContext getExecutionContext(org.ovirt.engine.core.compat.Guid stepId);	org.ovirt.engine.core.common.businessentities.AsyncTasks getAsyncTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand);
@org.junit.Test public void testRemoveWithAction() throws java.lang.Exception { org.ovirt.engine.api.model.GlusterBrick brick = new org.ovirt.engine.api.model.GlusterBrick(); org.ovirt.engine.api.model.GlusterVolume volume = new org.ovirt.engine.api.model.GlusterVolume(); brick.setName((((org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBricksResourceTest.serverName) + ":") + (org.ovirt.engine.api.restapi.resource.gluster.GlusterTestHelper.brickDir))); volume.setId(org.ovirt.engine.api.restapi.resource.gluster.GlusterTestHelper.volumeId.toString()); brick.setGlusterVolume(volume); org.ovirt.engine.api.model.GlusterBricks bricks = control.createMock(org.ovirt.engine.api.model.GlusterBricks.class); expect(bricks.getGlusterBricks()).andReturn(java.util.Collections.singletonList(brick)).anyTimes(); setUriInfo(setUpActionExpectations(VdcActionType.CommitRemoveGlusterVolumeBricks, org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, true, true)); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setBricks(bricks); collection.remove(action); }	@org.junit.Test public void testRemoveCommit() throws java.lang.Exception { setUpGetEntityExpectations(VdcQueryType.GetGlusterVolumeById, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.gluster.GlusterTestHelper.volumeId }, helper.getVolumeEntity(1)); setUriInfo(setUpActionExpectations(VdcActionType.CommitRemoveGlusterVolumeBricks, org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, true, true)); verifyRemove(collection.remove(GUIDS[0].toString())); }
private javax.ws.rs.core.Response attachDiskToVm(org.ovirt.engine.api.model.Disk disk) { boolean isDiskActive = org.apache.commons.lang.BooleanUtils.toBooleanDefaultIfNull(disk.isActive(), false); boolean isDiskReadOnly = org.apache.commons.lang.BooleanUtils.toBooleanDefaultIfNull(disk.isReadOnly(), false); org.ovirt.engine.core.common.action.AttachDettachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDettachVmDiskParameters(parentId, org.ovirt.engine.core.compat.Guid.createGuidFromString(disk.getId()), isDiskActive, isDiskReadOnly); return performAction(VdcActionType.AttachDiskToVm, params); }	private javax.ws.rs.core.Response attachDiskToVm(org.ovirt.engine.api.model.Disk disk) { boolean isDiskActive = org.apache.commons.lang.BooleanUtils.toBooleanDefaultIfNull(disk.isActive(), false); boolean isDiskReadOnly = org.apache.commons.lang.BooleanUtils.toBooleanDefaultIfNull(disk.isReadOnly(), false); org.ovirt.engine.core.common.action.AttachDettachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDettachVmDiskParameters(parentId, org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(disk.getId()), isDiskActive, isDiskReadOnly); if (disk.isSetSnapshot()) { validateParameters(disk, "snapshot.id"); params.setSnapshotId(asGuid(disk.getSnapshot().getId())); } return performAction(VdcActionType.AttachDiskToVm, params); }
boolean isLink(org.ovirt.engine.sdk.types.Identified object);	boolean isLink(java.lang.Object object);
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Import provider certificates") java.lang.String importProviderCertificatesTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Import provider certificates") java.lang.String importProviderCertificatesTitle();
public org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> getExternalHostsType() { return externalHostsType; }	public org.ovirt.engine.ui.uicommonweb.models.ListModel getExternalComputeResource() { return privateExternalComputeResource; }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Gluster volume snapshot configuration failed") java.lang.String GlusterSnapshotConfigFailedException();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Failed to configure gluster volume snapshot") java.lang.String GlusterSnapshotConfigFailedException();
public java.util.List<org.ovirt.engine.core.common.businessentities.NetworkEntity> getNetworks() { return networks; }	public java.util.List<org.ovirt.engine.core.common.businessentities.Network> getNetworks() { return networks; }
public void setGeoRepSessionSummary(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession>> geoRepSessionSummary) { this.geoRepSessionSummary = geoRepSessionSummary; }	public void setGeoRepSessionSummary(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionDetails>> geoRepSessionSummary) { this.geoRepSessionSummary = geoRepSessionSummary; }
private void UpdateVolumeDetails() { org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel innerGeneralModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumeList = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>) (result)); int volumesUp = 0; int volumesDown = 0; for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity : volumeList) { if ((volumeEntity.getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeStatus.UP)) { volumesUp++; } else { volumesDown++; } } setNoOfVolumesTotal(volumeList.size()); setNoOfVolumesUp(volumesUp); setNoOfVolumesDown(volumesDown); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetVolumeList(_asyncQuery, getEntity().getname()); }	private void UpdateVolumeDetails() { org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel innerGeneralModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumeList = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>) (result)); int volumesUp = 0; int volumesDown = 0; for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity : volumeList) { if ((volumeEntity.getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { volumesUp++; } else { volumesDown++; } } setNoOfVolumesTotal(volumeList.size()); setNoOfVolumesUp(volumesUp); setNoOfVolumesDown(volumesDown); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetVolumeList(_asyncQuery, getEntity().getname()); }
private java.util.List<java.lang.String> getAuthzNamespaces() { return namespacesMap.get(((org.ovirt.engine.core.aaa.ProfileEntry) (getProfile().getSelectedItem())).getAuthz()); }	private java.util.List<java.lang.String> getAuthzNamespaces() { org.ovirt.engine.core.aaa.ProfileEntry profileEntry = ((org.ovirt.engine.core.aaa.ProfileEntry) (getProfile().getSelectedItem())); return profileEntry != null ? namespacesMap.get(profileEntry.getAuthz()) : java.util.Collections.<java.lang.String>emptyList(); }
public static boolean isNetworkInSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.network.Network network) { return (((((network.getMtu()) == 0) || ((iface.getMtu()) == (network.getMtu()))) && (java.util.Objects.equals(iface.getVlanId(), network.getVlanId()))) && ((iface.isBridged()) == (network.isVmNetwork()))) && (java.util.Objects.equals(iface.getQos(), network.getQos())); }	public static boolean isNetworkInSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.NetworkQoS qos) { return (((((network.getMtu()) == 0) || ((iface.getMtu()) == (network.getMtu()))) && (java.util.Objects.equals(iface.getVlanId(), network.getVlanId()))) && ((iface.isBridged()) == (network.isVmNetwork()))) && (org.ovirt.engine.core.utils.NetworkUtils.isQosInSync(iface, qos)); }
@java.lang.Override public void runningSucceded() { try { getDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugPassthroughNics(); } finally { super.runningSucceded(); lockManager.releaseLock(destinationHostLock); } }	@java.lang.Override public void runningSucceded() { try { getDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugPassthroughNics(); } finally { super.runningSucceded(); } }
public org.ovirt.engine.core.bll.ValidationResult isCinderSupportedInDC() { if ((!(getStoragePool().isLocal())) && (!(org.ovirt.engine.core.common.FeatureSupported.cinderProviderSupported(getStoragePool().getCompatibilityVersion())))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.DATA_CENTER_CINDER_STORAGE_NOT_SUPPORTED_IN_CURRENT_VERSION); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult isCinderSupportedInDC() { if ((!(getStoragePool().isLocal())) && (!(org.ovirt.engine.core.common.FeatureSupported.cinderProviderSupported(getStoragePool().getCompatibilityVersion())))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.DATA_CENTER_CINDER_STORAGE_NOT_SUPPORTED_IN_CURRENT_VERSION); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if (!(hostDeviceManager.checkVmNeedsDirectPassthrough(vm))) { return hosts; } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.isHostDevicePassthroughEnabled()) { list.add(host); } else { messages.addMessage(host.getId(), EngineMessages.VAR__DETAIL__HOSTDEV_DISABLED.toString()); org.ovirt.engine.core.bll.scheduling.policyunits.HostDeviceFilterPolicyUnit.log.debug("Host '{}' does not support host device passthrough", host.getName()); } } return list; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if (!(hostDeviceManager.checkVmNeedsDirectPassthrough(vm))) { return hosts; } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.isHostDevicePassthroughEnabled()) { list.add(host); } else { messages.addMessage(host.getId(), EngineMessage.VAR__DETAIL__HOSTDEV_DISABLED.toString()); org.ovirt.engine.core.bll.scheduling.policyunits.HostDeviceFilterPolicyUnit.log.debug("Host '{}' does not support host device passthrough", host.getName()); } } return list; }
@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.canRunActionOnNonManagedVm())) { return false; } if ((!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.isInternalExecution())) && (!(org.ovirt.engine.core.utils.ObjectIdentityChecker.canUpdateField(org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm(), "clusterId", org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm().getStatus())))) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } org.ovirt.engine.core.bll.ChangeVmClusterValidator validator = new org.ovirt.engine.core.bll.ChangeVmClusterValidator(this, org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getClusterId(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getVmCustomCompatibilityVersion(), vmDeviceUtils); return validator.validate(); }	@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.canRunActionOnNonManagedVm())) { return false; } if ((!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.isInternalExecution())) && (!(org.ovirt.engine.core.utils.ObjectIdentityChecker.canUpdateField(org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm(), "clusterId", org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm().getStatus())))) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } org.ovirt.engine.core.bll.ChangeVmClusterValidator validator = new org.ovirt.engine.core.bll.ChangeVmClusterValidator(this, org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getClusterId(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getVmCustomCompatibilityVersion(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVmDeviceUtils()); return validator.validate(); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterServicesReturnForXmlRpc glusterServicesAction(org.ovirt.engine.core.compat.Guid serverId, java.lang.String[] serviceList, java.lang.String actionType) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterService.action").withParameter("serviceNames", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(serviceList))).withParameter("action", actionType).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterServicesReturnForXmlRpc(serverId, response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterServicesReturnForXmlRpc glusterServicesAction(org.ovirt.engine.core.compat.Guid serverId, java.lang.String[] serviceList, java.lang.String actionType) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterService.action").withParameter("serviceNames", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(serviceList))).withParameter("action", actionType).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterServicesReturnForXmlRpc(serverId, response); }
@org.junit.Test public void managedNetworkAddedToNic() { org.ovirt.engine.core.common.businessentities.network net = createNetwork("net"); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNic("nic0", null); mockExistingNetworks(net); mockExistingIfaces(nic); nic.setNetworkName(net.getName()); validateAndAssertNetworkModified(net, nic); }	@org.junit.Test public void managedNetworkAddedToNic() { org.ovirt.engine.core.common.businessentities.network net = createNetwork("net"); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNic("nic0", null); mockExistingNetworks(net); mockExistingIfaces(nic); nic.setNetworkName(net.getName()); org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper(createParametersForNics(nic)); validateAndAssertNetworkModified(helper, net); }
public org.ovirt.engine.ui.common.widget.table.column.TooltipCell<C> getCell() { return ((org.ovirt.engine.ui.common.widget.table.column.TooltipCell<C>) (super.getCell())); }	public org.ovirt.engine.ui.common.widget.table.cell.TooltipCell<C> getCell() { return ((org.ovirt.engine.ui.common.widget.table.cell.TooltipCell<C>) (super.getCell())); }
public org.ovirt.engine.ui.uicommonweb.UiAction getCommitNetworkChangesAction() { return new org.ovirt.engine.ui.uicommonweb.UiVdcAction(org.ovirt.engine.core.common.action.VdcActionType.CommitNetworkChanges, new org.ovirt.engine.core.common.action.VdsActionParameters(getEntity().getId()), getSetupNetworksModel(), true) { @java.lang.Override protected boolean shouldExecute() { org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> commitChanges = getSetupNetworksModel().getCommitChanges(); return commitChanges.getEntity(); } }; }	public org.ovirt.engine.ui.uicommonweb.action.UiAction getCommitNetworkChangesAction() { return new org.ovirt.engine.ui.uicommonweb.action.UiVdcAction(org.ovirt.engine.core.common.action.VdcActionType.CommitNetworkChanges, new org.ovirt.engine.core.common.action.VdsActionParameters(getEntity().getId()), this, true) { @java.lang.Override protected boolean shouldExecute() { org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> commitChanges = org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel.this.getCommitChanges(); return commitChanges.getEntity(); } }; }
public static java.lang.String getDefaultConfigurationVersion() { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; }	public static java.lang.String getDefaultConfigurationVersion() { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider._defaultConfigurationVersion; }
public boolean isClusterUpgradePolicy() { return (getFilterPositionMap()) != null ? getFilterPositionMap().containsKey(org.ovirt.engine.core.common.scheduling.ClusterPolicy.UPGRADE_POLICY_UNIT_GUID) : false; }	public boolean isClusterUpgradePolicy() { return (filters) != null ? filters.contains(org.ovirt.engine.core.common.scheduling.ClusterPolicy.UPGRADE_POLICY_UNIT_GUID) : false; }
@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, org.ovirt.engine.core.common.businessentities.VM vm) { vm.setVmtGuid(model.getTemplate().getSelectedItem().getId()); vm.setVmDescription(model.getDescription().getEntity()); vm.setComment(model.getComment().getEntity()); }	@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, org.ovirt.engine.core.common.businessentities.VM vm) { vm.setVmtGuid(model.getTemplate().getSelectedItem().getId()); vm.setCustomProperties(model.getCustomPropertySheet().serialize()); }
public static void init() { if (!(org.ovirt.engine.core.bll.gluster.GlusterJobsManager.glusterModeSupported())) { org.ovirt.engine.core.bll.gluster.GlusterJobsManager.log.debug("Gluster mode not supported. Will not schedule jobs for refreshing Gluster data."); return; } org.ovirt.engine.core.bll.gluster.GlusterJobsManager.log.debug("Initializing Gluster Jobs Manager"); org.ovirt.engine.core.utils.timer.SchedulerUtil scheduler = org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.getInstance(); scheduler.scheduleAFixedDelayJob(org.ovirt.engine.core.bll.gluster.GlusterSyncManager.getInstance(), "refreshLightWeightData", new java.lang.Class[0], new java.lang.Object[0], org.ovirt.engine.core.bll.gluster.GlusterJobsManager.getGlusterRefreshRateLight(), org.ovirt.engine.core.bll.gluster.GlusterJobsManager.getGlusterRefreshRateLight(), java.util.concurrent.TimeUnit.SECONDS); scheduler.scheduleAFixedDelayJob(org.ovirt.engine.core.bll.gluster.GlusterSyncManager.getInstance(), "refreshHeavyWeightData", new java.lang.Class[0], new java.lang.Object[0], org.ovirt.engine.core.bll.gluster.GlusterJobsManager.getGlusterRefreshRateHeavy(), org.ovirt.engine.core.bll.gluster.GlusterJobsManager.getGlusterRefreshRateHeavy(), java.util.concurrent.TimeUnit.SECONDS); }	public static void init() { if (!(org.ovirt.engine.core.bll.gluster.GlusterJobsManager.glusterModeSupported())) { org.ovirt.engine.core.bll.gluster.GlusterJobsManager.log.debug("Gluster mode not supported. Will not schedule jobs for refreshing Gluster data."); return; } org.ovirt.engine.core.bll.gluster.GlusterJobsManager.log.debug("Initializing Gluster Jobs Manager"); org.ovirt.engine.core.utils.timer.SchedulerUtil scheduler = org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.getInstance(); scheduler.scheduleAFixedDelayJob(org.ovirt.engine.core.bll.gluster.GlusterSyncJob.getInstance(), "refreshLightWeightData", new java.lang.Class[0], new java.lang.Object[0], org.ovirt.engine.core.bll.gluster.GlusterJobsManager.getGlusterRefreshRateLight(), org.ovirt.engine.core.bll.gluster.GlusterJobsManager.getGlusterRefreshRateLight(), java.util.concurrent.TimeUnit.SECONDS); scheduler.scheduleAFixedDelayJob(org.ovirt.engine.core.bll.gluster.GlusterSyncJob.getInstance(), "refreshHeavyWeightData", new java.lang.Class[0], new java.lang.Object[0], org.ovirt.engine.core.bll.gluster.GlusterJobsManager.getGlusterRefreshRateHeavy(), org.ovirt.engine.core.bll.gluster.GlusterJobsManager.getGlusterRefreshRateHeavy(), java.util.concurrent.TimeUnit.SECONDS); }
public org.ovirt.engine.core.bll.ValidationResult diskImagesNotExist() { java.util.List<java.lang.String> disksNotExistInDbIds = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages) { if (!(isDiskExists(diskImage.getId()))) { disksNotExistInDbIds.add(diskImage.getId().toString()); } } if (!(disksNotExistInDbIds.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.ACTION_TYPE_FAILED_DISKS_NOT_EXIST, java.lang.String.format("$diskIds %s", org.apache.commons.lang.StringUtils.join(disksNotExistInDbIds, ", "))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult diskImagesNotExist() { java.util.List<java.lang.String> disksNotExistInDbIds = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages) { if (!(isDiskExists(diskImage.getId()))) { disksNotExistInDbIds.add(diskImage.getId().toString()); } } if (!(disksNotExistInDbIds.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST, java.lang.String.format("$diskIds %s", org.apache.commons.lang.StringUtils.join(disksNotExistInDbIds, ", "))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void setInterface(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskInterface> diskInterfaces) { getDiskInterface().setItems(diskInterfaces); setDefaultInterface(); }	private void setInterfaces(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskInterface> diskInterfaces) { getDiskInterface().setItems(diskInterfaces); setDefaultInterface(); }
public void setCacheDevicePath(org.ovirt.engine.core.common.businessentities.CacheDevicePathType cacheDevicePath) { this.cacheDevicePath = cacheDevicePath; }	public void setCacheDevice(org.ovirt.engine.core.common.businessentities.gluster.StorageDevice cacheDevicePath) { this.cacheDevice = cacheDevicePath; }
@java.lang.Override protected void InitDetailModels() { super.InitDetailModels(); org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); list.add(new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateGeneralModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateImportInterfaceListModel()); this.templateImportDiskListModel = new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateImportDiskListModel(); list.add(templateImportDiskListModel); setDetailModels(list); }	@java.lang.Override protected void InitDetailModels() { super.InitDetailModels(); org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); list.add(new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateGeneralModel() { @java.lang.Override public void setEntity(java.lang.Object value) { super.setEntity((value == null ? null : ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData) (value)).getTemplate())); } }); list.add(new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateImportInterfaceListModel()); this.templateImportDiskListModel = new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateImportDiskListModel(); list.add(templateImportDiskListModel); setDetailModels(list); }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__ACTION__REMOVE); addValidateMessage(EngineMessage.VAR__TYPE__POLICY_UNIT); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__REMOVE); addValidationMessage(EngineMessage.VAR__TYPE__POLICY_UNIT); }
@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value, org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget widget) { super.onRemove(value, widget); model.updateKeys(); widgets.remove(widget); }	@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyLineModel value, org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget widget) { super.onRemove(value, widget); model.updateKeys(); widgets.remove(widget); }
org.ovirt.engine.core.common.businessentities.VDS get(java.lang.String name);	org.ovirt.engine.core.common.businessentities.VDS getByName(java.lang.String name);
@org.junit.Test public void testFirstVm() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); org.ovirt.engine.core.common.businessentities.VM vm1 = createVMDown(cluster); org.ovirt.engine.core.common.businessentities.VM vm2 = createVMDown(cluster); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, true, vm1, vm2, newVm)); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); affinityGroups.clear(); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, false, vm1, vm2, newVm)); scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); }	@org.junit.Test public void testFirstVm() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); org.ovirt.engine.core.common.businessentities.VM vm1 = createVMDown(cluster); org.ovirt.engine.core.common.businessentities.VM vm2 = createVMDown(cluster); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, true, vm1, vm2, newVm)); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(scores.get(host1.getId()), scores.get(host2.getId())); affinityGroups.clear(); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, false, vm1, vm2, newVm)); scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(scores.get(host1.getId()), scores.get(host2.getId())); }
private void postClustersInit() { validateAllMacs(); for (final org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData : getEntities().getItems()) { final org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs> validateMacsListener = new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { final java.lang.Boolean reassignMacs = registerVmData.getReassignMacs().getEntity(); if (reassignMacs) { clearVmMacsWarning(registerVmData); } else { validateVmMacs(java.util.Collections.singletonList(registerVmData)); } } }; registerVmData.getReassignMacs().getEntityChangedEvent().addListener(validateMacsListener); registerVmData.getCluster().getSelectedItemChangedEvent().addListener(validateMacsListener); } }	private void postClustersInit() { validateAllMacs(); for (final org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData : getEntities().getItems()) { final org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs> validateMacsListener = new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { validateVmMacs(java.util.Collections.singletonList(registerVmData)); } }; registerVmData.getReassignMacs().getEntityChangedEvent().addListener(validateMacsListener); registerVmData.getCluster().getSelectedItemChangedEvent().addListener(validateMacsListener); } }
protected boolean validateBallonDevice() { if (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isBalloonDeviceExists(org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getManagedVmDeviceMap().values()))) { return true; } org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().get(org.ovirt.engine.core.common.osinfo.OsRepository.class); if (!(osRepository.isBalloonEnabled(org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getStaticData().getOsId(), org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroup().getCompatibilityVersion()))) { addCanDoActionMessageVariable("clusterArch", org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroup().getArchitecture()); return failCanDoAction(EngineMessages.BALLOON_REQUESTED_ON_NOT_SUPPORTED_ARCH); } return true; }	protected boolean validateBallonDevice() { if (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isBalloonDeviceExists(org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getManagedVmDeviceMap().values()))) { return true; } org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().get(org.ovirt.engine.core.common.osinfo.OsRepository.class); if (!(osRepository.isBalloonEnabled(org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getStaticData().getOsId(), org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroup().getCompatibilityVersion()))) { addCanDoActionMessageVariable("clusterArch", org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroup().getArchitecture()); return failCanDoAction(EngineMessage.BALLOON_REQUESTED_ON_NOT_SUPPORTED_ARCH); } return true; }
private void AttachIso_EntityChanged() { getIsoImage().setIsChangable(((java.lang.Boolean) (getAttachIso().getEntity()))); getBootSequence().getCdromOption().setIsChangable(((java.lang.Boolean) (getAttachIso().getEntity()))); updateInitialRunFields(); }	private void attachIso_EntityChanged() { getIsoImage().setIsChangable(((java.lang.Boolean) (getAttachIso().getEntity()))); getBootSequence().getCdromOption().setIsChangable(((java.lang.Boolean) (getAttachIso().getEntity()))); updateInitialRunFields(); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.create").withParameter("volumeName", volumeName).withParameter("bricklist", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(brickList))).withParameter("replicaCount", replicaCount).withParameter("stripeCount", stripeCount).withParameter("transportList", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(transportList))).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.create").withParameter("volumeName", volumeName).withParameter("bricklist", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(brickList))).withParameter("replicaCount", replicaCount).withParameter("stripeCount", stripeCount).withParameter("transportList", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(transportList))).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(response); }
private org.ovirt.engine.ui.common.widget.MenuBar menuFor(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item) { org.ovirt.engine.ui.common.widget.MenuBar menu = rootMenu(item); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> operationMap = item.getSetupModel().commandsFor(item); for (final java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> entry : operationMap.entrySet()) { final java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = entry.getValue(); if (entry.getKey().isUnary()) { assert (commands.size()) == 1 : "Got a NetworkCommand List with more than one Unary Operation"; menu.addItem(entry.getKey().getVerb(item), () -> executeCommand(entry.getKey(), commands.get(0))); } else { org.ovirt.engine.ui.common.widget.MenuBar subMenu = subMenu(); for (final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand command : commands) { subMenu.addItem(new com.google.gwt.user.client.ui.MenuItem(command.getName(), () -> executeCommand(entry.getKey(), command))); } menu.addItem(entry.getKey().getVerb(item), subMenu); } } return menu; }	private org.ovirt.engine.ui.common.widget.MenuBar menuFor(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item) { org.ovirt.engine.ui.common.widget.MenuBar menu = rootMenu(item); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> operationMap = item.getSetupModel().commandsFor(item); for (final java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> entry : operationMap.entrySet()) { final java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = entry.getValue(); if (entry.getKey().isUnary()) { assert (commands.size()) == 1 : "Got a NetworkCommand List with more than one Unary Operation"; menu.addItem(entry.getKey().getVerb(item), () -> executeCommand(entry.getKey(), commands.get(0))); } else { java.util.Collections.sort(commands, java.util.Comparator.comparing(NetworkCommand::getName, new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator())); org.ovirt.engine.ui.common.widget.MenuBar subMenu = subMenu(); for (final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand command : commands) { subMenu.addItem(new com.google.gwt.user.client.ui.MenuItem(command.getName(), () -> executeCommand(entry.getKey(), command))); } menu.addItem(entry.getKey().getVerb(item), subMenu); } } return menu; }
private void onReplaceConfirmation() { cancelConfirmation(); org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel replaceBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel) (getWindow())); if (replaceBrickModel == null) { return; } if (!(replaceBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getEntity(); if (volumeEntity == null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity existingBrick = getSelectedItem(); if (existingBrick == null) { return; } org.ovirt.engine.core.common.businessentities.VDS server = replaceBrickModel.getServers().getSelectedItem(); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity newBrick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); newBrick.setVolumeId(volumeEntity.getId()); newBrick.setServerId(server.getId()); newBrick.setServerName(server.getHostName()); newBrick.setBrickDirectory(replaceBrickModel.getBrickDirectory().getEntity()); replaceBrickModel.startProgress(); org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters parameter = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters(volumeEntity.getId(), existingBrick, newBrick); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.ReplaceGlusterVolumeBrick, parameter, ( result) -> { org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel) (result.getState())); localModel.stopProgress(); setWindow(null); }, replaceBrickModel); }	private void onReplaceConfirmation() { cancelConfirmation(); org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel replaceBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel) (getWindow())); org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getEntity(); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity existingBrick = getSelectedItem(); if (((replaceBrickModel == null) || (volumeEntity == null)) || (existingBrick == null)) { return; } if (!(replaceBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.VDS server = replaceBrickModel.getServers().getSelectedItem(); if (server == null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity newBrick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); newBrick.setVolumeId(volumeEntity.getId()); newBrick.setServerId(server.getId()); newBrick.setServerName(server.getHostName()); newBrick.setBrickDirectory(replaceBrickModel.getBrickDirectory().getEntity()); replaceBrickModel.startProgress(); org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters parameter = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters(volumeEntity.getId(), existingBrick, newBrick); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.ReplaceGlusterVolumeBrick, parameter, ( result) -> { org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel) (result.getState())); localModel.stopProgress(); setWindow(null); }, replaceBrickModel); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if ((getSnapshot().getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterSnapshotStatus.ACTIVATED)) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_ALREADY_ACTIVATED, getSnapshot().getSnapshotName()); } return true; }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if ((getSnapshot().getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterSnapshotStatus.ACTIVATED)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_ALREADY_ACTIVATED, getSnapshot().getSnapshotName()); } return true; }
private org.ovirt.engine.core.common.businessentities.VM mockVm() { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(VMStatus.Down); vm.setVmtGuid(vmTemplateId); vm.setStaticData(getVmStatic()); vm.setClusterArch(ArchitectureType.x86_64); vm.setTemplateVersion(1); return vm; }	private org.ovirt.engine.core.common.businessentities.VM mockVm() { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(VMStatus.Down); vm.setVmtGuid(vmTemplateId); vm.setStaticData(getVmStatic()); vm.setClusterArch(ArchitectureType.x86_64); return vm; }
private void vnicProfileValidationTest(org.hamcrest.Matcher<org.ovirt.engine.core.bll.ValidationResult> matcher, boolean profileExist, boolean networkExist, boolean qosExist, boolean qosSupported) { when(dbFacade.getVnicProfileDao()).thenReturn(vnicProfileDao); when(vnicProfileDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn((profileExist ? vnicProfile : null)); when(vnicProfile.getNetworkId()).thenReturn(DEFAULT_GUID); doReturn((networkExist ? network : null)).when(validator).getNetworkByVnicProfile(vnicProfile); doReturn(networkExist).when(validator).isNetworkInCluster(any(org.ovirt.engine.core.common.businessentities.network.Network.class), any(org.ovirt.engine.core.compat.Guid.class)); when(dbFacade.getQosDao()).thenReturn(networkQosDao); when(networkQosDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn((qosExist ? networkQos : null)); mockConfigRule.mockConfigValue(ConfigValues.NetworkQoSSupported, version, qosSupported); when(nic.getVnicProfileId()).thenReturn(org.ovirt.engine.core.bll.validator.VmNicValidatorTest.VNIC_PROFILE_ID); assertThat(validator.profileValid(OTHER_GUID), matcher); }	private void vnicProfileValidationTest(org.hamcrest.Matcher<org.ovirt.engine.core.bll.ValidationResult> matcher, boolean profileExist, boolean networkExist, boolean qosNotNull, boolean qosSupported) { when(dbFacade.getVnicProfileDao()).thenReturn(vnicProfileDao); when(vnicProfileDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn((profileExist ? vnicProfile : null)); when(vnicProfile.getNetworkId()).thenReturn(DEFAULT_GUID); doReturn((networkExist ? network : null)).when(validator).getNetworkByVnicProfile(vnicProfile); doReturn(networkExist).when(validator).isNetworkInCluster(any(org.ovirt.engine.core.common.businessentities.network.Network.class), any(org.ovirt.engine.core.compat.Guid.class)); mockConfigRule.mockConfigValue(ConfigValues.NetworkQosSupported, version, qosSupported); when(vnicProfile.getNetworkQosId()).thenReturn((qosNotNull ? DEFAULT_GUID : null)); when(nic.getVnicProfileId()).thenReturn(org.ovirt.engine.core.bll.validator.VmNicValidatorTest.VNIC_PROFILE_ID); assertThat(validator.profileValid(OTHER_GUID), matcher); }
private void setAttachedTagsConverter(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags> ret = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Tags tags : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags>) (source))) { if ((tags.getType()) == (org.ovirt.engine.core.common.businessentities.TagsType.GeneralTag)) { ret.add(tags); } } return ret; } return new org.ovirt.engine.core.common.businessentities.Tags(); } }; }	private void setAttachedTagsConverter(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags> ret = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Tags tags : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags>) (source))) { if ((tags.gettype()) == (org.ovirt.engine.core.common.businessentities.TagsType.GeneralTag)) { ret.add(tags); } } return ret; } return new org.ovirt.engine.core.common.businessentities.Tags(); } }; }
@org.ovirt.engine.core.bll.VdsDeploy.CallWhen(org.ovirt.engine.core.bll.VdsDeploy.CustomizationCondition.NEUTRON_LINUX_BRIDGE_SETUP) public java.lang.Void call() throws java.lang.Exception { _parser.cliEnvironmentSet("OPENSTACK_NEUTRON_LINUXBRIDGE_CONFIG/LINUX_BRIDGE/physical_interface_mappings", _openStackAgentProperties.getAgentConfiguration().getNetworkMappings()); return null; }	@org.ovirt.engine.core.bll.VdsDeploy.CallWhen(org.ovirt.engine.core.bll.VdsDeploy.CustomizationCondition.NEUTRON_LINUX_BRIDGE_SETUP) public java.lang.Void call() throws java.lang.Exception { _setCliEnvironmentIfNecessary(((org.ovirt.ovirt_host_deploy.constants.OpenStackEnv.NEUTRON_LINUXBRIDGE_CONFIG_PREFIX) + "LINUX_BRIDGE/physical_interface_mappings"), _openStackAgentProperties.getAgentConfiguration().getNetworkMappings()); return null; }
@java.lang.Override protected boolean validate() { if ((org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm()) == null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } return true; }	@java.lang.Override protected boolean validate() { if ((org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } return true; }
@java.lang.Override public org.ovirt.engine.api.resource.LabelsResource getLabelsResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendNetworkLabelsResource(id)); }	@java.lang.Override public org.ovirt.engine.api.resource.LabelsResource getLabelsResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendNetworkLabelsResource(asGuid(id))); }
@org.junit.Test public void testAllDomainsHaveSpaceForNewDisksFailure() { setUpGeneralValidations(); setUpDiskValidations(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksList = java.util.Collections.emptyList(); doReturn(disksList).when(cmd).getDisksList(); doReturn(disksList).when(cmd).getDisksListForChecks(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(multipleStorageDomainsValidator).allDomainsHaveSpaceForNewDisks(disksList); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN); verify(multipleStorageDomainsValidator).allDomainsHaveSpaceForNewDisks(disksList); }	@org.junit.Test public void testAllDomainsHaveSpaceForNewDisksFailure() { setUpGeneralValidations(); setUpDiskValidations(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksList = java.util.Collections.emptyList(); doReturn(disksList).when(cmd).getDisksList(); doReturn(disksList).when(cmd).getDisksListForChecks(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(multipleStorageDomainsValidator).allDomainsHaveSpaceForNewDisks(disksList); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN); verify(multipleStorageDomainsValidator).allDomainsHaveSpaceForNewDisks(disksList); }
@java.lang.Override protected java.lang.String renderNullSafe(java.lang.Object object) { return object.toString(); }	@java.lang.Override protected java.lang.String renderNullSafe(java.lang.String object) { return object; }
@java.lang.Override protected void init() { super.init(); setVmId(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getVmId()); }	private void updateNextRunConfiguration() { final org.ovirt.engine.core.common.businessentities.VmStatic nextRunConfigurationStatic = getNextRunConfiguration(); if (nextRunConfigurationStatic == null) { return; } final int newMemorySize = (nextRunConfigurationStatic.getMemSizeMb()) - (getUnpluggedDeviceSize()); if (newMemorySize <= 0) { return; } if ((org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMemSizeMb()) != (nextRunConfigurationStatic.getMemSizeMb())) { return; } nextRunConfigurationStatic.setMemSizeMb(newMemorySize); if (newMemorySize < (nextRunConfigurationStatic.getMinAllocatedMem())) { nextRunConfigurationStatic.setMinAllocatedMem(newMemorySize); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { vmHandler.createNextRunSnapshot(getVm(), nextRunConfigurationStatic, null, getCompensationContext()); return null; }); }
private void detachDomainFromPool(org.ovirt.engine.core.common.businessentities.StorageDomain domain) { if ((domain.getStatus()) != (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Detaching)) { return; } for (org.ovirt.engine.core.common.businessentities.VDS hosts : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().getAllForStoragePool(_storagePoolId)) { if ((hosts.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance)) { continue; } if ((domainsVisibility.getDomainStatusByVds(domain.getId(), hosts.getId())) != (DomainVisibility.Status.MAINTENANCE)) { return; } } org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.infoFormat("Detaching domain {0} from pool", domain.getId(), _storagePoolId); org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap mapToRemove = domain.getStoragePoolIsoMapData(); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().remove(new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId(mapToRemove.getstorage_id(), mapToRemove.getstorage_pool_id())); }	private void domainRecoveredFromProblem(org.ovirt.engine.core.compat.Guid domainId, org.ovirt.engine.core.compat.Guid vdsId, java.lang.String vdsName) { java.lang.String domainIdTuple = org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.IrsProxyData.getDomainIdTuple(domainId); org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.infoFormat("Domain {0} recovered from problem. vds: {1}", domainIdTuple, vdsName); _domainsInProblem.get(domainId).remove(vdsId); if ((_domainsInProblem.get(domainId).size()) == 0) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.infoFormat(("Domain {0} has recovered from problem. No active host in the DC is reporting it as" + " problematic, so clearing the domain recovery timer."), domainIdTuple); _domainsInProblem.remove(domainId); clearTimer(domainId); } }
public void heVmManaged() { when(hostedEngineHelper.isVmManaged()).thenReturn(true); assertThat(validator.isHeVmManaged(new org.ovirt.engine.core.common.businessentities.HostedEngineDeployConfiguration(true, "")), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }	@org.junit.Test public void unsupportedHostedEngineDeployWhenClusterLevelIsUnsupported() { when(hostedEngineHelper.isVmManaged()).thenReturn(false); mockCluster(Version.v3_6); when(host.getClusterId()).thenReturn(Guid.Empty); assertThat(validator.supportsDeployingHostedEngine(new org.ovirt.engine.core.common.businessentities.HostedEngineDeployConfiguration(HostedEngineDeployConfiguration.Action.DEPLOY)), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_HOSTED_ENGINE_DEPLOYMENT_UNSUPPORTED)); }
private void filterServices() { org.ovirt.engine.core.common.businessentities.VDS selectedVds = ((org.ovirt.engine.core.common.businessentities.VDS) (hostList.getSelectedItem())); org.ovirt.engine.core.common.businessentities.gluster.ServiceType serviceType = ((org.ovirt.engine.core.common.businessentities.gluster.ServiceType) (serviceTypeList.getSelectedItem())); java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService> serviceList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService>(getActualServiceList()); java.util.Collections.sort(serviceList, new java.util.Comparator<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService>() { @java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService o1, org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService o2) { return o1.getHostName().compareTo(o2.getHostName()); } }); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService service : serviceList) { if (((selectedVds == null) || (service.getHostName().equals(selectedVds.getHostName()))) && ((serviceType == null) || ((service.getServiceType()) == serviceType))) { list.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(service)); } } getServiceList().setItems(list); }	private void filterServices() { org.ovirt.engine.core.common.businessentities.VDS selectedVds = ((org.ovirt.engine.core.common.businessentities.VDS) (hostList.getSelectedItem())); org.ovirt.engine.core.common.businessentities.gluster.ServiceType serviceType = ((org.ovirt.engine.core.common.businessentities.gluster.ServiceType) (serviceTypeList.getSelectedItem())); java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService> serviceList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService>(getActualServiceList()); java.util.Collections.sort(serviceList, new java.util.Comparator<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService>() { @java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService o1, org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService o2) { if ((o1.getHostName().compareTo(o2.getHostName())) == 0) { return o1.getServiceType().toString().compareTo(o2.getServiceType().toString()); } else { return o1.getHostName().compareTo(o2.getHostName()); } } }); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService service : serviceList) { if (((selectedVds == null) || (service.getHostName().equals(selectedVds.getHostName()))) && ((serviceType == null) || ((service.getServiceType()) == serviceType))) { list.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(service)); } } getServiceList().setItems(list); }
@java.lang.Override public void setStreams(java.io.BufferedReader incoming, java.io.PrintWriter outgoing) { _incoming = incoming; }	@java.lang.Override public void setStreams(java.io.InputStream incoming, java.io.OutputStream outgoing) { _incoming = (incoming == null) ? null : new java.io.BufferedReader(new java.io.InputStreamReader(incoming, java.nio.charset.Charset.forName("UTF-8")), org.ovirt.engine.core.bll.OVirtNodeUpgrade.BUFFER_SIZE); }
private void init() { setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editLogicalNetworkTitle()); setHashName("edit_logical_network"); getName().setEntity(getNetwork().getName()); getDescription().setEntity(getNetwork().getDescription()); getIsStpEnabled().setEntity(getNetwork().getStp()); getHasVLanTag().setEntity(((getNetwork().getVlanId()) != null)); getVLanTag().setEntity(((getNetwork().getVlanId()) == null ? 0 : getNetwork().getVlanId())); initMtu(); initIsVm(); }	private void init() { setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editLogicalNetworkTitle()); setHashName("edit_logical_network"); getName().setEntity(getNetwork().getName()); if (isManagemet()) { getName().setIsChangable(false); } getDescription().setEntity(getNetwork().getDescription()); getIsStpEnabled().setEntity(getNetwork().getStp()); getHasVLanTag().setEntity(((getNetwork().getVlanId()) != null)); getVLanTag().setEntity(((getNetwork().getVlanId()) == null ? 0 : getNetwork().getVlanId())); initMtu(); initIsVm(); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Allow to remove Data Center") java.lang.String allowToRemoveDataCenterRoleTreeTooltip();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to remove Data Center") java.lang.String allowToRemoveDataCenterRoleTreeTooltip();
@java.lang.Override public java.lang.Void runInTransaction() { addPermission(); AddVmTemplateImages(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmInterfaces = addVmInterfaces(); org.ovirt.engine.core.bll.utils.VmDeviceUtils.copyVmDevices(getVmId(), getVmTemplateId(), newDiskImages, vmInterfaces, getParameters().isSoundDeviceEnabled()); setSucceeded(true); return null; }	@java.lang.Override public java.lang.Void runInTransaction() { addPermission(); AddVmTemplateImages(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmInterfaces = addVmInterfaces(); if (isVmInDb) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.copyVmDevices(getVmId(), getVmTemplateId(), newDiskImages, vmInterfaces, getParameters().isSoundDeviceEnabled()); } else { org.ovirt.engine.core.bll.utils.VmDeviceUtils.copyVmDevices(getVmId(), getVmTemplateId(), getVm(), getVmTemplate(), true, java.util.Collections.<org.ovirt.engine.core.common.businessentities.VmDevice>emptyList(), newDiskImages, vmInterfaces, getParameters().isSoundDeviceEnabled()); } setSucceeded(true); return null; }
public void setIsPowerManagementTabValid(boolean value) { if (value) { invalidTabs.remove(org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.HostTabNames.POWER_MANAGEMENT_TAB); } else { invalidTabs.add(org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.HostTabNames.POWER_MANAGEMENT_TAB); } }	public void setDiscorveredHosts(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> value) { isDiscorveredHosts = value; }
@java.lang.Override public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem) { super.initialize(systemTreeSelectedItem); if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(pool.getVmPoolSpiceProxy()))) { getModel().getSpiceProxyEnabled().setEntity(true); getModel().getSpiceProxy().setEntity(pool.getVmPoolSpiceProxy()); getModel().getSpiceProxy().setIsChangeable(true); } instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.ExistingPoolInstanceTypeManager(getModel(), pool); instanceTypeManager.setAlwaysEnabledFieldUpdate(true); getModel().getCustomProperties().setIsChangeable(false); getModel().getCustomPropertySheet().setIsChangeable(false); getModel().getDiskAllocationTargetEnabled().setIsAvailable(java.lang.Boolean.TRUE); getModel().getDiskAllocationTargetEnabled().setIsChangeable(java.lang.Boolean.FALSE); getModel().getDiskAllocationTargetEnabled().setEntity(actualPool.isAutoStorageSelect()); }	@java.lang.Override public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem) { super.initialize(systemTreeSelectedItem); if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(pool.getVmPoolSpiceProxy()))) { getModel().getSpiceProxyEnabled().setEntity(true); getModel().getSpiceProxy().setEntity(pool.getVmPoolSpiceProxy()); getModel().getSpiceProxy().setIsChangeable(true); } instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.ExistingPoolInstanceTypeManager(getModel(), pool); instanceTypeManager.setAlwaysEnabledFieldUpdate(true); getModel().getCustomProperties().setIsChangeable(false); getModel().getCustomPropertySheet().setIsChangeable(false); }
@javax.annotation.PostConstruct void init() { entityManager = org.ovirt.engine.core.dao.jpa.EntityManagerHolder.getInstance().getThreadLocal().get(); if ((entityManager) == null) { entityManager = entityManagerFactory.createEntityManager(); org.ovirt.engine.core.dao.jpa.EntityManagerHolder.getInstance().getThreadLocal().set(entityManager); } entityName = entityManager.getMetamodel().entity(entityType).getName(); }	protected javax.persistence.EntityManager getEntityManager() { return entityManagerHolder.getEntityManager(); }
protected void adjustDisplayData(org.ovirt.engine.api.model.VM vm) { if (!(vm.getDisplay().isSetType())) { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsType> graphicsTypes = org.ovirt.engine.api.restapi.util.VmHelper.getInstance().getGraphicsTypesForEntity(new org.ovirt.engine.core.compat.Guid(vm.getId())); if (graphicsTypes.contains(GraphicsType.SPICE)) { vm.getDisplay().setType(DisplayType.SPICE.value()); } else if (graphicsTypes.contains(GraphicsType.VNC)) { vm.getDisplay().setType(DisplayType.VNC.value()); } else { vm.setDisplay(null); } } }	protected void setSoundcard(org.ovirt.engine.api.model.VM model) { model.setSoundcardEnabled((!(org.ovirt.engine.api.restapi.util.VmHelper.getSoundDevicesForEntity(this, new org.ovirt.engine.core.compat.Guid(model.getId())).isEmpty()))); }
public static void GetSANWipeAfterDelete(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Boolean) (source)).booleanValue() : false; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.SANWipeAfterDelete, org.ovirt.engine.core.common.config.ConfigCommon.defaultConfigurationVersion), aQuery); }	public static void GetSANWipeAfterDelete(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Boolean) (source)).booleanValue() : false; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.SANWipeAfterDelete, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }
private void updateTaskStatuses(java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus>> poolsAllTasksMap) { for (org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task : _tasks.values()) { if (task.getShouldPoll()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus> asyncTasksForPoolMap = poolsAllTasksMap.get(task.getStoragePoolID()); if (asyncTasksForPoolMap != null) { org.ovirt.engine.core.common.businessentities.AsyncTaskStatus cachedAsyncTaskStatus = asyncTasksForPoolMap.get(task.getVdsmTaskId()); task.updateTask(cachedAsyncTaskStatus); if (hasPartiallySubmittedRootCommand(task)) { task.setPartiallyCompletedCommandTask(true); } } } } }	private void updateTaskStatuses(java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus>> poolsAllTasksMap) { for (org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task : _tasks.values()) { if (task.getShouldPoll()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus> asyncTasksForPoolMap = poolsAllTasksMap.get(task.getStoragePoolID()); if (asyncTasksForPoolMap != null) { org.ovirt.engine.core.common.businessentities.AsyncTaskStatus cachedAsyncTaskStatus = asyncTasksForPoolMap.get(task.getVdsmTaskId()); task.updateTask(cachedAsyncTaskStatus); } } } }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessages.VAR__TYPE__STORAGE__POOL); addCanDoActionMessage(EngineMessages.VAR__ACTION__REMOVE); }	@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__TYPE__STORAGE__POOL); addCanDoActionMessage(EngineMessage.VAR__ACTION__REMOVE); }
protected boolean validateSpaceRequirements() { boolean retValue = true; if (!(isStorageDomainSpaceAboveThresholds())) { retValue = false; addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN); addCanDoActionMessage(java.lang.String.format("$%1$s %2$s", "storageName", org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getStorageDomain().getstorage_name())); } if (retValue) { org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().getSnapshots().addAll(getAllImageSnapshots()); if (!(doesStorageDomainHaveSpaceForRequest(java.lang.Math.round(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().getActualDiskWithSnapshotsSize())))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW); retValue = false; } } return retValue; }	protected boolean validateSpaceRequirements() { boolean retValue = true; if (!(isStorageDomainSpaceWithinThresholds())) { retValue = false; addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN); addCanDoActionMessage(java.lang.String.format("$%1$s %2$s", "storageName", org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getStorageDomain().getstorage_name())); } if (retValue) { org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().getSnapshots().addAll(getAllImageSnapshots()); if (!(doesStorageDomainHaveSpaceForRequest(java.lang.Math.round(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().getActualDiskWithSnapshotsSize())))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW); retValue = false; } } return retValue; }
@java.lang.Override public java.lang.Void runInTransaction() { getBaseDiskDao().save(cinderDisk); getImageDao().save(cinderDisk.getImage()); getImageStorageDomainMapDao().save(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap(cinderDisk.getImageId(), cinderDisk.getStorageIds().get(0), cinderDisk.getQuotaId(), cinderDisk.getDiskProfileId())); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic(); diskDynamic.setId(cinderDisk.getImageId()); getDiskImageDynamicDao().save(diskDynamic); if ((getVm()) != null) { addManagedDeviceForDisk(); } return null; }	@java.lang.Override public java.lang.Void runInTransaction() { getBaseDiskDao().save(cinderDisk); getImageDao().save(cinderDisk.getImage()); getImageStorageDomainMapDao().save(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap(cinderDisk.getImageId(), cinderDisk.getStorageIds().get(0), cinderDisk.getQuotaId(), cinderDisk.getDiskProfileId())); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic(); diskDynamic.setId(cinderDisk.getImageId()); getDiskImageDynamicDao().save(diskDynamic); if ((getVm()) != null) { addManagedDeviceForDisk(cinderDisk.getId()); } return null; }
public org.ovirt.engine.core.bll.ValidationResult validateAmountOfIsoAndExportDomainsInDC() { if (!(isStorageDomainOfTypeIsoOrExport())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } final org.ovirt.engine.core.common.businessentities.StorageDomainType type = storageDomainStatic.getStorageDomainType(); int count = org.ovirt.engine.core.utils.linq.LinqUtils.filter(getStorageDomainDao().getAllForStoragePool(storagePool.getId()), new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.StorageDomain a) { return (a.getStorageDomainType()) == type; } }).size(); if (count == 0) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if (type == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.ERROR_CANNOT_ATTACH_MORE_THAN_ONE_ISO_DOMAIN); } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.ERROR_CANNOT_ATTACH_MORE_THAN_ONE_EXPORT_DOMAIN); } }	public org.ovirt.engine.core.bll.ValidationResult validateAmountOfIsoAndExportDomainsInDC() { if (!(isStorageDomainOfTypeIsoOrExport())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } final org.ovirt.engine.core.common.businessentities.StorageDomainType type = storageDomainStatic.getStorageDomainType(); int count = org.ovirt.engine.core.utils.linq.LinqUtils.filter(getStorageDomainDao().getAllForStoragePool(storagePool.getId()), new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.StorageDomain a) { return (a.getStorageDomainType()) == type; } }).size(); if (count == 0) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if (type == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ERROR_CANNOT_ATTACH_MORE_THAN_ONE_ISO_DOMAIN); } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ERROR_CANNOT_ATTACH_MORE_THAN_ONE_EXPORT_DOMAIN); } }
@javax.annotation.PostConstruct abstract void postConstruct();	@javax.annotation.PostConstruct protected void postConstruct() { }
private void executeDeleteAndCallNew(final org.ovirt.engine.core.common.businessentities.VM vm) { if ((removeDiskModels.size()) == 0) { executeNewAndEdit(vm); return; } for (org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel removeDisk : removeDiskModels) { removeDisk.store(new org.ovirt.engine.ui.uicommonweb.ICommandTarget() { @java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { executeNewAndEdit(vm); } @java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand uiCommand, java.lang.Object... parameters) { executeNewAndEdit(vm); } }); } }	private void executeDeleteAndCallNew(final org.ovirt.engine.core.common.businessentities.VM vm) { if ((removeDiskModels.size()) == 0) { executeNewAndEdit(vm); return; } for (org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel removeDisk : removeDiskModels) { removeDisk.onRemove(new org.ovirt.engine.ui.uicommonweb.ICommandTarget() { @java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { executeNewAndEdit(vm); } @java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand uiCommand, java.lang.Object... parameters) { executeNewAndEdit(vm); } }); } }
private boolean isAllDisksPlugged(java.util.List<org.ovirt.engine.core.common.action.MoveDiskParameters> moveDiskParamsList) { return isAllDisksPlugged(moveDiskParamsList, true); }	private boolean areAllDisksPluggedToVm(java.util.List<org.ovirt.engine.core.common.action.MoveDiskParameters> moveDiskParamsList, boolean plugged) { for (org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters : moveDiskParamsList) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = diskMap.get(moveDiskParameters.getImageId()); if ((diskImage.getPlugged()) != plugged) { return false; } } return true; }
private org.ovirt.engine.core.bll.ValidationResult modifiedAttachmentExists(org.ovirt.engine.core.compat.Guid networkAttachmentId) { boolean doesNotReferenceExistingNetworkAttachment = networkAttachmentId == null; if (doesNotReferenceExistingNetworkAttachment) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingAttachment : existingAttachments) { if (existingAttachment.getId().equals(networkAttachmentId)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_ATTACHMENT_NOT_EXISTS, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.VAR_NETWORK_ATTACHMENT_NOT_EXISTS_ENTITY, networkAttachmentId.toString())); }	private org.ovirt.engine.core.bll.ValidationResult modifiedAttachmentExists(org.ovirt.engine.core.compat.Guid networkAttachmentId) { boolean doesNotReferenceExistingNetworkAttachment = networkAttachmentId == null; if (doesNotReferenceExistingNetworkAttachment) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingAttachment : existingAttachments) { if (existingAttachment.getId().equals(networkAttachmentId)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_ATTACHMENT_NOT_EXISTS, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.VAR_NETWORK_ATTACHMENT_NOT_EXISTS_ENTITY, networkAttachmentId.toString())); }
protected abstract boolean entititesEqualsNullSafe(java.lang.Object e1, java.lang.Object e2);	protected abstract boolean entititesEqualsNullSafe(T e1, T e2);
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.Step> getStepsByExternalId(org.ovirt.engine.core.compat.Guid externalId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("external_id", externalId); return getCallsHandler().executeReadList("GetStepsByExternalId", createEntityRowMapper(), parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.Step> getStepsByExternalId(org.ovirt.engine.core.compat.Guid externalId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("external_id", externalId); return getCallsHandler().executeReadList("GetStepsByExternalTaskId", createEntityRowMapper(), parameterSource); }
private boolean validateManagementNetworkAttachement() { final org.ovirt.engine.core.common.businessentities.network.Network managementNetwork; final org.ovirt.engine.core.compat.Guid managementNetworkId = org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getParameters().getManagementNetworkId(); if (managementNetworkId == null) { managementNetwork = getDefaultManagementNetworkFinder().findDefaultManagementNetwork(org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getVdsGroup().getStoragePoolId()); if (managementNetwork == null) { addCanDoActionMessage(EngineMessages.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } } else { managementNetwork = getNetworkDao().get(managementNetworkId); if (managementNetwork == null) { addCanDoActionMessage(EngineMessages.NETWORK_NOT_EXISTS); return false; } } managementNetworkCluster = createManagementNetworkCluster(managementNetwork); final org.ovirt.engine.core.bll.network.cluster.UpdateClusterNetworkClusterValidator networkClusterValidator = createManagementNetworkClusterValidator(); return validate(networkClusterValidator.managementNetworkChange()); }	private boolean validateManagementNetworkAttachement() { final org.ovirt.engine.core.common.businessentities.network.Network managementNetwork; final org.ovirt.engine.core.compat.Guid managementNetworkId = org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getParameters().getManagementNetworkId(); if (managementNetworkId == null) { managementNetwork = getDefaultManagementNetworkFinder().findDefaultManagementNetwork(org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getVdsGroup().getStoragePoolId()); if (managementNetwork == null) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } } else { managementNetwork = getNetworkDao().get(managementNetworkId); if (managementNetwork == null) { addCanDoActionMessage(EngineMessage.NETWORK_NOT_EXISTS); return false; } } managementNetworkCluster = createManagementNetworkCluster(managementNetwork); final org.ovirt.engine.core.bll.network.cluster.UpdateClusterNetworkClusterValidator networkClusterValidator = createManagementNetworkClusterValidator(); return validate(networkClusterValidator.managementNetworkChange()); }
@org.junit.Test public void testNetworkNotUsedByVmsWhenUsed() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network(); network.setId(org.ovirt.engine.core.compat.Guid.newGuid()); network.setName("name"); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); networkAttachment.setNetworkId(network.getId()); org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator validator = createNetworkAttachmentValidator(networkAttachment); when(vmInterfaceManager.findActiveVmsUsingNetworks(eq(host.getId()), collectionContainingOneGivenNetworkName(network.getName()))).thenReturn(java.util.Collections.singletonList("networkName")); when(networkDaoMock.get(eq(network.getId()))).thenReturn(network); assertThat(validator.networkNotUsedByVms(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessages.ACTION_TYPE_FAILED_NETWORK_IN_ONE_USE)); }	@org.junit.Test public void testNetworkNotUsedByVmsWhenUsed() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network(); network.setId(org.ovirt.engine.core.compat.Guid.newGuid()); network.setName("name"); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); networkAttachment.setNetworkId(network.getId()); org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator validator = createNetworkAttachmentValidator(networkAttachment); when(vmInterfaceManager.findActiveVmsUsingNetworks(eq(host.getId()), collectionContainingOneGivenNetworkName(network.getName()))).thenReturn(java.util.Collections.singletonList("networkName")); when(networkDaoMock.get(eq(network.getId()))).thenReturn(network); assertThat(validator.networkNotUsedByVms(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_NETWORK_IN_ONE_USE)); }
@org.junit.Test public void testMoveBySdName() throws java.lang.Exception { setUpEntityQueryExpectations(1); setUpGetEntityExpectations(("Storage: name=" + (NAMES[2])), SearchType.StorageDomain, getStorageDomainEntity(0)); setUriInfo(setUpActionExpectations(VdcActionType.MoveDisks, org.ovirt.engine.core.common.action.MoveDisksParameters.class, new java.lang.String[]{ "ParametersList" }, new java.lang.Object[]{ java.util.Collections.singletonList(new org.ovirt.engine.core.common.action.MoveDiskParameters(GUIDS[1], org.ovirt.engine.core.compat.Guid.Empty, GUIDS[3])) })); verifyActionResponse(((org.ovirt.engine.api.resource.VmDiskResource) (resource)).move(setUpMoveParams(true))); }	protected void testMoveBySdName(boolean isFiltered) throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); if (isFiltered) { setUpFilteredQueryExpectations(); setUpEntityQueryExpectations(VdcQueryType.GetAllStorageDomains, org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, java.util.Collections.singletonList(getStorageDomain(2))); } else { setUpGetEntityExpectations(("Storage: name=" + (NAMES[2])), SearchType.StorageDomain, getStorageDomain(2)); } setUpEntityQueryExpectations(VdcQueryType.GetDiskByDiskId, org.ovirt.engine.core.common.queries.GetDiskByDiskIdParameters.class, new java.lang.String[]{ "DiskId" }, new java.lang.Object[]{ GUIDS[1] }, getEntity(1)); setUriInfo(setUpActionExpectations(VdcActionType.MoveDisks, org.ovirt.engine.core.common.action.MoveDisksParameters.class, new java.lang.String[]{ "ParametersList" }, new java.lang.Object[]{ java.util.Collections.singletonList(new org.ovirt.engine.core.common.action.MoveDiskParameters(GUIDS[1], org.ovirt.engine.core.compat.Guid.Empty, GUIDS[3])) })); verifyActionResponse(((org.ovirt.engine.api.resource.VmDiskResource) (resource)).move(setUpMoveParams(true))); }
public static boolean isValidVmNetwork(org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface, org.ovirt.engine.core.compat.Guid clusterId) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.NetworkEntity> networksByName = org.ovirt.engine.core.common.businessentities.Entities.entitiesByName(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDAO().getAllForCluster(clusterId)); java.lang.String networkName = iface.getNetworkName(); return (networksByName.containsKey(networkName)) && (networksByName.get(networkName).isVmNetwork()); }	public static boolean isValidVmNetwork(org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface, org.ovirt.engine.core.compat.Guid clusterId) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.Network> networksByName = org.ovirt.engine.core.common.businessentities.Entities.entitiesByName(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDAO().getAllForCluster(clusterId)); java.lang.String networkName = iface.getNetworkName(); return (networksByName.containsKey(networkName)) && (networksByName.get(networkName).isVmNetwork()); }
@java.lang.Override protected boolean canDoAction() { if (super.canDoAction()) { return validate(getVfsConfigValidator().labelNotInVfsConfig(getLabel())); } return false; }	@java.lang.Override protected boolean canDoAction() { return (super.canDoAction()) && (validate(getVfsConfigValidator().labelNotInVfsConfig(getLabel()))); }
@org.junit.Before public void setUp() throws java.lang.Exception { manager = new org.ovirt.engine.core.bll.OvfManager(); }	@org.junit.Before public void setUp() throws java.lang.Exception { manager = new org.ovirt.engine.core.utils.ovf.OvfManager(); org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); java.util.HashMap<java.lang.Integer, java.lang.String> osIdsToNames = new java.util.HashMap<>(); when(osRepository.getUniqueOsNames()).thenReturn(osIdsToNames); }
@org.junit.Test public void executeCommandWhenFailed() { cmd = spy(new org.ovirt.engine.core.bll.gluster.RemoveGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); setUpMocksForRemove(); mockBackend(false, EngineErrors.GlusterHookRemoveFailed); cmd.executeCommand(); verify(hooksDao, never()).remove(any(org.ovirt.engine.core.compat.Guid.class)); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_REMOVE_FAILED); }	@org.junit.Test public void executeCommandWhenFailed() { cmd = spy(new org.ovirt.engine.core.bll.gluster.RemoveGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); setUpMocksForRemove(); mockBackend(false, EngineError.GlusterHookRemoveFailed); cmd.executeCommand(); verify(hooksDao, never()).remove(any(org.ovirt.engine.core.compat.Guid.class)); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_REMOVE_FAILED); }
private void UpdateCanSpecify() { org.ovirt.engine.core.common.businessentities.NetworkEntity network = ((org.ovirt.engine.core.common.businessentities.NetworkEntity) (getNetwork().getSelectedItem())); boolean isChangable = ((getIsStaticAddress()) && (network != null)) && (!(network.getId().equals(NGuid.Empty))); getAddress().setIsChangable(isChangable); getSubnet().setIsChangable(isChangable); }	private void UpdateCanSpecify() { org.ovirt.engine.core.common.businessentities.Network network = ((org.ovirt.engine.core.common.businessentities.Network) (getNetwork().getSelectedItem())); boolean isChangable = getIsStaticAddress(); getAddress().setIsChangable(isChangable); getSubnet().setIsChangable(isChangable); }
private void generateUpdateMethod(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Name helperClassName, boolean base) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) { java.lang.System.err.println((("Method \"" + method) + "\" doesn\'t have any struct parameter")); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.PUT.class); javaBuffer.addImports(mainTypeReference.getImports()); generateDoc(method); javaBuffer.addLine("@PUT"); javaBuffer.addLine("@Consumes({ %s })", generateMediaTypes()); java.lang.String parameterName = javaNames.getJavaMemberStyleName(mainParameter.getName()); if (base) { javaBuffer.addLine("default %s update(%s %s) {", mainTypeReference.getText(), mainTypeReference.getText(), parameterName); writeHelperInvocation(helperClassName, parameterName, method.getName()); javaBuffer.addLine("}"); } else { addMethod(mainTypeReference.getText(), "update(%s %s)", mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); } javaBuffer.addLine(); }	private void generateUpdateMethod(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.tool.JavaClassName helperClassName, boolean base) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = jaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) { throw new java.lang.IllegalStateException((("Method \"" + method) + "\" doesn\'t have any struct parameter")); } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.PUT.class); javaBuffer.addImports(mainTypeReference.getImports()); generateDoc(method); javaBuffer.addLine("@PUT"); javaBuffer.addLine("@Consumes({ %s })", generateMediaTypes()); java.lang.String parameterName = javaNames.getJavaMemberStyleName(mainParameter.getName()); if (base) { javaBuffer.addLine("default %s update(%s %s) {", mainTypeReference.getText(), mainTypeReference.getText(), parameterName); if (method.isMandatoryAttributeExists()) { writeHelperInvocation(helperClassName, parameterName, method.getName()); } else { javaBuffer.addLine("throw new UnsupportedOperationException();"); } javaBuffer.addLine("}"); } else { addMethod(mainTypeReference.getText(), "update(%s %s)", mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); } javaBuffer.addLine(); }
public java.lang.Boolean getKsmState() { return mVdsStatistics.getKsmState(); }	public java.lang.Boolean getKsmState() { return vdsStatistics.getKsmState(); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Override the default SPICE proxy value") java.lang.String clusterSpiceProxyInfo();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Override the default SPICE proxy value") java.lang.String clusterSpiceProxyInfo();
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.PersistentSetupNetworks, new org.ovirt.engine.core.bll.network.AddNetworksByLabelParametersBuilder(org.ovirt.engine.core.bll.network.host.LabelNicCommand.getContext()).buildParameters(getNic(), getLabel(), getClusterNetworksByLabel()), org.ovirt.engine.core.bll.network.host.LabelNicCommand.getContext().clone().withoutCompensationContext().withoutExecutionContext()); if (result.getSucceeded()) { org.ovirt.engine.core.bll.network.host.LabelNicCommand.getReturnValue().setActionReturnValue(getLabel()); } else { propagateFailure(result); } setSucceeded(result.getSucceeded()); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.PersistentSetupNetworks, new org.ovirt.engine.core.bll.network.AddNetworksByLabelParametersBuilder(org.ovirt.engine.core.bll.network.host.LabelNicCommand.getContext()).buildParameters(getNic(), getLabel(), getClusterNetworksByLabel()), org.ovirt.engine.core.bll.network.host.LabelNicCommand.cloneContextAndDetachFromParent()); if (result.getSucceeded()) { org.ovirt.engine.core.bll.network.host.LabelNicCommand.getReturnValue().setActionReturnValue(getLabel()); } else { propagateFailure(result); } setSucceeded(result.getSucceeded()); }
@org.junit.Test public void testUpdate() { java.lang.String oldName = existingVdsGroup.getName(); existingVdsGroup.setName("This is the new name"); existingVdsGroup.setVirtService(false); existingVdsGroup.setGlusterService(true); existingVdsGroup.setSchedulerOptimizeForSpeed(false); dao.update(existingVdsGroup); org.ovirt.engine.core.common.businessentities.VDSGroup result = dao.get(existingVdsGroup.getId()); assertCorrectVDSGroup(result); result = dao.getByName(oldName); assertNull(result); }	@org.junit.Test public void testUpdate() { java.lang.String oldName = existingVdsGroup.getName(); existingVdsGroup.setName("This is the new name"); existingVdsGroup.setVirtService(false); existingVdsGroup.setGlusterService(true); dao.update(existingVdsGroup); org.ovirt.engine.core.common.businessentities.VDSGroup result = dao.get(existingVdsGroup.getId()); assertCorrectVDSGroup(result); result = dao.getByName(oldName); assertNull(result); }
private void updateName(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { if (disk == null) { return; } java.lang.String diskName = disk.getDiskAlias(); java.lang.String size = java.lang.Long.toString(disk.getSize()); if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { size = java.lang.Long.toString(((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)).getSizeInGigabytes()); } java.lang.String type; if (diskExists) { type = constants.existingDisk(); } else if ((getDiskModel().getEntity()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImagesAttachDiskModel) { type = constants.attachingDisk(); } else { type = constants.creatingDisk(); } java.lang.String boot = ""; if (disk.isBoot()) { boot = constants.bootDisk(); } name.setEntity(messages.vmDialogDisk(diskName, size, type, boot)); }	private void updateName(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { if (disk == null) { return; } java.lang.String diskName = disk.getDiskAlias(); java.lang.String size = java.lang.Long.toString(disk.getSize()); if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { size = java.lang.Long.toString(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)).getSizeInGigabytes()); } java.lang.String type; if (diskExists) { type = constants.existingDisk(); } else if ((getDiskModel().getEntity()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImagesAttachDiskModel) { type = constants.attachingDisk(); } else { type = constants.creatingDisk(); } java.lang.String boot = ""; if (disk.isBoot()) { boot = constants.bootDisk(); } name.setEntity(messages.vmDialogDisk(diskName, size, type, boot)); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.DataCenterSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants, org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.AuditLog, org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel, org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterEventListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(applicationConstants.dataCenterEventSubTabLabel(), 5, modelProvider, org.ovirt.engine.ui.common.widget.Align.RIGHT); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.DataCenterSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants, org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.AuditLog, org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel, org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterEventListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(applicationConstants.dataCenterEventSubTabLabel(), 6, modelProvider, org.ovirt.engine.ui.common.widget.Align.RIGHT); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Console connection denied. Another user has already accessed the console of this VM. The VM should be rebooted to allow another user to access it, or changed by an admin not to enforce reboot between users accessing its console.") java.lang.String USER_CANNOT_FORCE_RECONNECT_TO_VM();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Console connection denied. Another user has already accessed the console of this VM. The VM should either be rebooted to allow another user to access it, or changed by an admin to not enforce a reboot between users accessing its console.") java.lang.String USER_CANNOT_FORCE_RECONNECT_TO_VM();
private void addImageHeaders() { getMethod().setRequestHeader("connection", "close"); getMethod().setRequestHeader("Storage-Pool-Id", org.ovirt.engine.core.vdsbroker.irsbroker.HttpImageTaskVDSCommand.getParameters().getStoragePoolId().toString()); getMethod().setRequestHeader("Storage-Domain-Id", org.ovirt.engine.core.vdsbroker.irsbroker.HttpImageTaskVDSCommand.getParameters().getStorageDomainId().toString()); getMethod().setRequestHeader("Image-Id", org.ovirt.engine.core.vdsbroker.irsbroker.HttpImageTaskVDSCommand.getParameters().getImageGroupId().toString()); getMethod().setRequestHeader("Volume-Id", org.ovirt.engine.core.vdsbroker.irsbroker.HttpImageTaskVDSCommand.getParameters().getImageId().toString()); }	private void addHeaders() { getMethod().setRequestHeader("connection", "close"); getMethod().setRequestHeader("Storage-Pool-Id", org.ovirt.engine.core.vdsbroker.irsbroker.HttpImageTaskVDSCommand.getParameters().getStoragePoolId().toString()); getMethod().setRequestHeader("Storage-Domain-Id", org.ovirt.engine.core.vdsbroker.irsbroker.HttpImageTaskVDSCommand.getParameters().getStorageDomainId().toString()); getMethod().setRequestHeader("Image-Id", org.ovirt.engine.core.vdsbroker.irsbroker.HttpImageTaskVDSCommand.getParameters().getImageGroupId().toString()); getMethod().setRequestHeader("Volume-Id", org.ovirt.engine.core.vdsbroker.irsbroker.HttpImageTaskVDSCommand.getParameters().getImageId().toString()); }
private org.ovirt.engine.api.restapi.resource.BackendUsersResource getUsersResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendUsersResource()); }	private org.ovirt.engine.api.restapi.resource.BackendUserResource getUserResource() { if ((this.userResource) == null) { org.ovirt.engine.api.restapi.resource.BackendUsersResource usersResource = new org.ovirt.engine.api.restapi.resource.BackendUsersResource(); inject(usersResource); org.ovirt.engine.api.resource.UserResource userResource = usersResource.getUserSubResource(""); this.userResource = ((org.ovirt.engine.api.restapi.resource.BackendUserResource) (userResource)); } return this.userResource; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Guaranty Resources") java.lang.String guarantyResourcesLabel();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Guaranty Resources") java.lang.String guarantyResourcesLabel();
private void setGraphicsDevicesToParams(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, org.ovirt.engine.core.common.action.VmTemplateParametersBase params) { org.ovirt.engine.core.common.businessentities.GraphicsDevice graphicsFromModel = getGraphicsFromModel(model); if (graphicsFromModel != null) { params.setShouldUpdateGraphicsDevice(org.ovirt.engine.core.common.businessentities.GraphicsType.fromVmDeviceType(graphicsFromModel.getVmDeviceType()), true); params.setGraphicsDevice(graphicsFromModel); } }	private void setGraphicsDevicesToParams(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, org.ovirt.engine.core.common.action.VmManagementParametersBase params) { if (((model.getDisplayType().getSelectedItem()) == null) || ((model.getGraphicsType().getSelectedItem()) == null)) { return; } for (org.ovirt.engine.core.common.businessentities.GraphicsType graphicsType : org.ovirt.engine.core.common.businessentities.GraphicsType.values()) { params.getGraphicsDevices().put(graphicsType, null); if (model.getGraphicsType().getSelectedItem().getBackingGraphicsType().contains(graphicsType)) { org.ovirt.engine.core.common.businessentities.GraphicsDevice d = new org.ovirt.engine.core.common.businessentities.GraphicsDevice(graphicsType.getCorrespondingDeviceType()); params.getGraphicsDevices().put(d.getGraphicsType(), d); } } }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("syncType", getSyncType()); }	@java.lang.Override public java.lang.String toString() { return java.lang.String.format("%s, syncType=%s", super.toString(), getSyncType()); }
@java.lang.Override public java.lang.String getDisplayStringNullSafe(java.lang.Object data) { return org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget.typeAheadNameDescriptionTemplate.input(((org.ovirt.engine.core.common.businessentities.StoragePool) (data)).getname(), ((org.ovirt.engine.core.common.businessentities.StoragePool) (data)).getdescription()).asString(); }	@java.lang.Override public java.lang.String getDisplayStringNullSafe(java.lang.Object data) { return typeAheadNameDescriptionTemplateNullSafe(((org.ovirt.engine.core.common.businessentities.StoragePool) (data)).getname(), ((org.ovirt.engine.core.common.businessentities.StoragePool) (data)).getdescription()); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.VdsStatic vds) { org.ovirt.engine.core.compat.Guid id = vds.getId(); if (id == null) { id = org.ovirt.engine.core.compat.Guid.NewGuid(); vds.setId(id); } new org.springframework.jdbc.core.simple.SimpleJdbcCall(jdbcTemplate).withProcedureName("InsertVdsStatic").execute(getInsertOrUpdateParams(vds)); }	@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.VdsStatic vds) { org.ovirt.engine.core.compat.Guid id = vds.getId(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(id)) { id = org.ovirt.engine.core.compat.Guid.NewGuid(); vds.setId(id); } new org.springframework.jdbc.core.simple.SimpleJdbcCall(jdbcTemplate).withProcedureName("InsertVdsStatic").execute(getInsertOrUpdateParams(vds)); }
@java.lang.Override protected void UpdateActionAvailability() { super.UpdateActionAvailability(); getConnectCommand().setIsExecutionAllowed(((((getEntity()) != null) && (((getEntity().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) || ((getEntity().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.PoweringDown)))) && (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsWindowsOsType(getEntity().getVmOsId())))); }	@java.lang.Override protected void updateActionAvailability() { super.updateActionAvailability(); getConnectCommand().setIsExecutionAllowed(((((getEntity()) != null) && (((getEntity().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) || ((getEntity().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.PoweringDown)))) && (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType(getEntity().getVmOsId())))); }
@java.lang.Override protected void executeVdsBrokerCommand() { if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.POLL)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().poll(); } else if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.POLL2)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().timeBoundPoll2(2, java.util.concurrent.TimeUnit.SECONDS); } else if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.CONFIRM_CONNECTIVITY)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().timeBoundPollConfirmConnectivity(2, java.util.concurrent.TimeUnit.SECONDS); } }	@java.lang.Override protected void executeVdsBrokerCommand() { if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.POLL)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().poll(); } else if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.POLL2)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().timeBoundPoll2(org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.TIMEOUT, java.util.concurrent.TimeUnit.SECONDS); } else if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.CONFIRM_CONNECTIVITY)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().timeBoundPollConfirmConnectivity(org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.TIMEOUT, java.util.concurrent.TimeUnit.SECONDS); } }
public java.lang.Integer getReservedMem() { return mVdsDynamic.getReservedMem(); }	public java.lang.Integer getReservedMem() { return vdsDynamic.getReservedMem(); }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__ACTION__SHUTDOWN); addValidateMessage(EngineMessage.VAR__TYPE__VM); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__SHUTDOWN); addValidationMessage(EngineMessage.VAR__TYPE__VM); }
public org.ovirt.engine.core.bll.ValidationResult uuidNotExist() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessages.LIBVIRT_SECRET_UUID_ALREADY_EXISTS).unless(((libvirtSecretDao.get(libvirtSecret.getId())) == null)); }	public org.ovirt.engine.core.bll.ValidationResult uuidNotExist() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.LIBVIRT_SECRET_UUID_ALREADY_EXISTS).unless(((libvirtSecretDao.get(libvirtSecret.getId())) == null)); }
protected void storageType_SelectedItemChanged() { updateStorageSelectedItem(getAvailableStorageTypeItems().getSelectedItem(), getAvailableStorageDomainTypeItems().getSelectedItem()); if ((getCurrentItem()) != null) { updateFormat(); updateHost(); } updateWipeAfterDelete(); }	protected void storageType_SelectedItemChanged() { updateCurrentStorageItem(); if ((getCurrentStorageItem()) != null) { updateFormat(); updateHost(); } updateWipeAfterDelete(); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmPool getByName(java.lang.String name) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_pool_name", name); return getCallsHandler().executeRead("GetVm_poolsByvm_pool_name", org.ovirt.engine.core.dao.VmPoolDAOImpl.VmPoolNonFullRowMapper.instance, parameterSource); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmPool getByName(java.lang.String name) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_pool_name", name); return getCallsHandler().executeRead("GetVm_poolsByvm_pool_name", org.ovirt.engine.core.dao.VmPoolDaoImpl.VmPoolNonFullRowMapper.instance, parameterSource); }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.providers.HostNetworkProviderModel model) { driver.edit(model); final org.ovirt.engine.ui.uicommonweb.models.providers.NeutronAgentModel neutronAgentModel = model.getNeutronAgentModel(); neutronAgentWidget.edit(neutronAgentModel); neutronAgentPanel.setVisible(neutronAgentModel.isPluginConfigurationAvailable().getEntity()); neutronAgentModel.isPluginConfigurationAvailable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { neutronAgentPanel.setVisible(neutronAgentModel.isPluginConfigurationAvailable().getEntity()); } }); }	@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.providers.HostNetworkProviderModel model) { driver.edit(model); final org.ovirt.engine.ui.uicommonweb.models.providers.NeutronAgentModel neutronAgentModel = model.getNeutronAgentModel(); neutronAgentWidget.edit(neutronAgentModel); neutronAgentPanel.setVisible(neutronAgentModel.isPluginConfigurationAvailable().getEntity()); neutronAgentModel.isPluginConfigurationAvailable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { neutronAgentPanel.setVisible(neutronAgentModel.isPluginConfigurationAvailable().getEntity()); } }); }
private void doTestSetupNetworksSyncsNetwork(boolean imposeNetworkConfiguration, java.util.List<java.lang.String> expectedNetworksToSync) { org.ovirt.engine.api.model.HostNIC hostNic = new org.ovirt.engine.api.model.HostNIC(); org.ovirt.engine.api.model.Network network = new org.ovirt.engine.api.model.Network(); network.setName(org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.NETWORK_NAME); hostNic.setNetwork(network); hostNic.setImposeNetworkConfiguration(imposeNetworkConfiguration); org.ovirt.engine.api.model.HostNics hostNics = control.createMock(org.ovirt.engine.api.model.HostNics.class); expect(hostNics.getHostNics()).andReturn(java.util.Collections.singletonList(hostNic)).anyTimes(); setUriInfo(setUpActionExpectations(VdcActionType.SetupNetworks, org.ovirt.engine.core.common.action.SetupNetworksParameters.class, new java.lang.String[]{ "NetworksToSync" }, new java.lang.Object[]{ expectedNetworksToSync }, true, true)); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setHostNics(hostNics); collection.setupNetworks(action); }	private void doTestSetupNetworksSyncsNetwork(boolean overrideConfiguration, java.util.List<java.lang.String> expectedNetworksToSync) { org.ovirt.engine.api.model.HostNIC hostNic = new org.ovirt.engine.api.model.HostNIC(); org.ovirt.engine.api.model.Network network = new org.ovirt.engine.api.model.Network(); network.setName(org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.NETWORK_NAME); hostNic.setNetwork(network); hostNic.setOverrideConfiguration(overrideConfiguration); org.ovirt.engine.api.model.HostNics hostNics = control.createMock(org.ovirt.engine.api.model.HostNics.class); expect(hostNics.getHostNics()).andReturn(java.util.Collections.singletonList(hostNic)).anyTimes(); setUriInfo(setUpActionExpectations(VdcActionType.SetupNetworks, org.ovirt.engine.core.common.action.SetupNetworksParameters.class, new java.lang.String[]{ "NetworksToSync" }, new java.lang.Object[]{ expectedNetworksToSync }, true, true)); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setHostNics(hostNics); collection.setupNetworks(action); }
protected static boolean canRunPoolVm(org.ovirt.engine.core.compat.Guid vmId, java.util.ArrayList<java.lang.String> messages) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(vmId); if (vm == null) { messages.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND.name()); return false; } org.ovirt.engine.core.bll.VmHandler.updateNetworkInterfacesFromDb(vm); org.ovirt.engine.core.common.action.RunVmParams runVmParams = new org.ovirt.engine.core.common.action.RunVmParams(vmId); runVmParams.setUseVnc(((OsRepositoryImpl.INSTANCE.isLinux(vm.getVmOsId())) || ((vm.getVmType()) == (org.ovirt.engine.core.common.businessentities.VmType.Server)))); org.ovirt.engine.core.bll.VdsSelector vdsSelector = new org.ovirt.engine.core.bll.VdsSelector(vm, ((runVmParams.getDestinationVdsId()) != null ? runVmParams.getDestinationVdsId() : vm.getDedicatedVmForVds()), true, new org.ovirt.engine.core.bll.VdsFreeMemoryChecker(new org.ovirt.engine.core.bll.NonWaitingDelayer())); return org.ovirt.engine.core.bll.VmRunHandler.getInstance().canRunVm(vm, messages, runVmParams, vdsSelector, new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator(), org.ovirt.engine.core.bll.VmPoolCommandBase.getVmPropertiesUtils()); }	protected static boolean canRunPoolVm(org.ovirt.engine.core.compat.Guid vmId, java.util.ArrayList<java.lang.String> messages) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(vmId); if (vm == null) { messages.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND.name()); return false; } org.ovirt.engine.core.bll.VmHandler.updateNetworkInterfacesFromDb(vm); org.ovirt.engine.core.common.action.RunVmParams runVmParams = new org.ovirt.engine.core.common.action.RunVmParams(vmId); runVmParams.setUseVnc(((OsRepositoryImpl.INSTANCE.isLinux(vm.getVmOsId())) || ((vm.getVmType()) == (org.ovirt.engine.core.common.businessentities.VmType.Server)))); org.ovirt.engine.core.bll.scheduling.VdsSelector vdsSelector = new org.ovirt.engine.core.bll.scheduling.VdsSelector(vm, ((runVmParams.getDestinationVdsId()) != null ? runVmParams.getDestinationVdsId() : vm.getDedicatedVmForVds()), new org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker(new org.ovirt.engine.core.bll.scheduling.NonWaitingDelayer())); return org.ovirt.engine.core.bll.VmPoolCommandBase.getRunVmValidator().canRunVm(vm, messages, org.ovirt.engine.core.bll.VmPoolCommandBase.getDiskDao().getAllForVm(vm.getId(), true), runVmParams.getBootSequence(), org.ovirt.engine.core.bll.VmPoolCommandBase.fetchStoragePool(vm.getStoragePoolId()), false, runVmParams.getDiskPath(), runVmParams.getFloppyPath(), runVmParams.getRunAsStateless(), vdsSelector); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.ClusterEditWarnings warnings = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); if (((!(warnings.getHostWarnings().isEmpty())) || (!(warnings.getVmWarnings().isEmpty()))) || true) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterWarningsModel confirmWindow = new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterWarningsModel(); confirmWindow.init(warnings); confirmWindow.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSaveConfirmCpuLevel", this)); confirmWindow.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("CancelConfirmation", this)); setConfirmWindow(confirmWindow); } else { onSaveConfirmCpuLevel(); } }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.ClusterEditWarnings warnings = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); if (!(warnings.isEmpty())) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterWarningsModel confirmWindow = new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterWarningsModel(); confirmWindow.init(warnings); confirmWindow.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSaveInternal", this)); confirmWindow.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("CancelConfirmation", this)); setConfirmWindow(confirmWindow); } else { onSaveInternal(); } }
private void writeImports() { javaBuffer.addLine("import org.slf4j.Logger;"); javaBuffer.addLine("import org.slf4j.LoggerFactory;"); javaBuffer.addImport(javax.xml.bind.annotation.XmlEnum.class); javaBuffer.addImport(javax.xml.bind.annotation.XmlEnumValue.class); javaBuffer.addImport(javax.xml.bind.annotation.XmlType.class); javaBuffer.addLine(); }	private void writeImports() { javaBuffer.addImport(javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter.class); javaBuffer.addImport(javax.xml.bind.annotation.XmlType.class); javaBuffer.addLine("import org.ovirt.engine.api.utils.InvalidEnumValueException;"); javaBuffer.addLine(); }
@org.junit.Test public void testFcpFoundUnregisteredDomain() { when(getQueryParameters().getStorageType()).thenReturn(StorageType.FCP); when(getQueryParameters().getVdsId()).thenReturn(org.ovirt.engine.core.compat.Guid.newGuid()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = getLUNs(storageDomainId, vgId); doReturn(java.util.Collections.emptyList()).when(lunDao).getAll(); doReturn(org.ovirt.engine.core.bll.storage.domains.GetUnregisteredBlockStorageDomainsQueryTest.createGetDeviceListReturnValue(luns)).when(getQuery()).executeGetDeviceList(any(org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters.class)); doReturn(org.ovirt.engine.core.bll.storage.domains.GetUnregisteredBlockStorageDomainsQueryTest.createGetVGInfoReturnValue(luns)).when(getQuery()).executeGetVGInfo(any(org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters.class)); doReturn(createGetStorageDomainInfoReturnValue()).when(getQuery()).executeHSMGetStorageDomainInfo(any(org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters.class)); getQuery().executeQueryCommand(); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain>, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections>> returnValue = getQuery().getQueryReturnValue().getReturnValue(); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = returnValue.getFirst(); assertEquals(1, storageDomains.size()); assertEquals(storageDomains.get(0).getId(), storageDomainId); }	@org.junit.Test public void testFcpFoundUnregisteredDomain() { when(getQueryParameters().getStorageType()).thenReturn(StorageType.FCP); when(getQueryParameters().getVdsId()).thenReturn(org.ovirt.engine.core.compat.Guid.newGuid()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = getLUNs(storageDomainId, vgId); doReturn(java.util.Collections.emptyList()).when(lunDao).getAll(); doReturn(org.ovirt.engine.core.bll.storage.domain.GetUnregisteredBlockStorageDomainsQueryTest.createGetDeviceListReturnValue(luns)).when(getQuery()).executeGetDeviceList(any(org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters.class)); doReturn(org.ovirt.engine.core.bll.storage.domain.GetUnregisteredBlockStorageDomainsQueryTest.createGetVGInfoReturnValue(luns)).when(getQuery()).executeGetVGInfo(any(org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters.class)); doReturn(createGetStorageDomainInfoReturnValue()).when(getQuery()).executeHSMGetStorageDomainInfo(any(org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters.class)); getQuery().executeQueryCommand(); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain>, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections>> returnValue = getQuery().getQueryReturnValue().getReturnValue(); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = returnValue.getFirst(); assertEquals(1, storageDomains.size()); assertEquals(storageDomains.get(0).getId(), storageDomainId); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.ReportedConfigurations.class, to = org.ovirt.engine.api.model.ReportedConfigurations.class) public static org.ovirt.engine.api.model.ReportedConfigurations map(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations entity, org.ovirt.engine.api.model.ReportedConfigurations template) { org.ovirt.engine.api.model.ReportedConfigurations model = (template == null) ? new org.ovirt.engine.api.model.ReportedConfigurations() : template; model.setInSync(entity.isNetworkInSync()); java.util.List<org.ovirt.engine.api.model.ReportedConfiguration> reportedConfigurationList = model.getReportedConfigurations(); for (org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations.ReportedConfiguration reportedConfiguration : entity.getReportedConfigurationList()) { org.ovirt.engine.api.model.ReportedConfiguration conf = new org.ovirt.engine.api.model.ReportedConfiguration(); conf.setInSync(reportedConfiguration.isInSync()); conf.setName(reportedConfiguration.getType().getName()); conf.setValue(reportedConfiguration.getValue()); reportedConfigurationList.add(conf); } return model; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.ReportedConfigurations.class, to = org.ovirt.engine.api.model.ReportedConfigurations.class) public static org.ovirt.engine.api.model.ReportedConfigurations map(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations entity, org.ovirt.engine.api.model.ReportedConfigurations template) { org.ovirt.engine.api.model.ReportedConfigurations model = (template == null) ? new org.ovirt.engine.api.model.ReportedConfigurations() : template; model.setInSync(entity.isNetworkInSync()); java.util.List<org.ovirt.engine.api.model.ReportedConfiguration> reportedConfigurationList = model.getReportedConfigurations(); for (org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration reportedConfiguration : entity.getReportedConfigurationList()) { org.ovirt.engine.api.model.ReportedConfiguration conf = new org.ovirt.engine.api.model.ReportedConfiguration(); conf.setInSync(reportedConfiguration.isInSync()); conf.setName(reportedConfiguration.getType().getName()); conf.setValue(reportedConfiguration.getValue()); reportedConfigurationList.add(conf); } return model; }
@org.junit.Test public void testValidateExternalVnicProfileMappingPositive() { final java.util.List<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> vnicProfileMappings = java.util.Arrays.asList(createMapping(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.VNIC_PROFILE_ID)); when(mockVnicProfileValidator.vnicProfileBelongsToCluster(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.VNIC_PROFILE_ID, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.CLUSTER_ID)).thenReturn(true); final java.util.Set<org.ovirt.engine.core.common.errors.EngineMessage> actual = underTest.validateExternalVnicProfileMapping(vnicProfileMappings, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.CLUSTER_ID); assertThat(actual, empty()); }	@org.junit.Test public void testValidateExternalVnicProfileMapping() { testListOfMappings(createMappings(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.VNIC_PROFILE_ID), isValid()); }
public static java.util.List<java.lang.String> assertCanDoActionMessages(java.lang.String assertionMessage, org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.errors.EngineMessages message) { java.util.List<java.lang.String> canDoActionMessages = command.getReturnValue().getCanDoActionMessages(); assertTrue(java.text.MessageFormat.format("{0}canDoAction messages doesn''t contain expected message: {1}, messages are: {2}", org.ovirt.engine.core.bll.CanDoActionTestUtils.optionalMessage(assertionMessage), message.name(), canDoActionMessages), canDoActionMessages.contains(message.name())); return canDoActionMessages; }	public static java.util.List<java.lang.String> assertCanDoActionMessages(java.lang.String assertionMessage, org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.errors.EngineMessage message) { java.util.List<java.lang.String> canDoActionMessages = command.getReturnValue().getCanDoActionMessages(); assertTrue(java.text.MessageFormat.format("{0}canDoAction messages doesn''t contain expected message: {1}, messages are: {2}", org.ovirt.engine.core.bll.CanDoActionTestUtils.optionalMessage(assertionMessage), message.name(), canDoActionMessages), canDoActionMessages.contains(message.name())); return canDoActionMessages; }
public final java.io.File getBrandingRootPath() { return brandingRootPath; }	public java.io.File getBrandingRootPath() { return brandingRootPath; }
@java.lang.Override protected void executeCommand() { getSyncJobInstance().refreshVolumeDetails(upServer, org.ovirt.engine.core.bll.gluster.RefreshGlusterVolumeDetailsCommand.getGlusterVolume()); org.ovirt.engine.core.bll.gluster.RefreshGlusterVolumeDetailsCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { getSyncJobInstance().refreshVolumeDetails(upServer, getGlusterVolume()); setSucceeded(true); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("V4") java.lang.String nfsVersion4();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("V4") java.lang.String nfsVersion4();
@java.lang.Override protected void executeVDSCommand() { try { org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxy proxyData = org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getCurrentIrsProxy(); proxyData.clearPoolTimers(); proxyData.clearCache(); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.log.error("Could not change timers for pool '{}': {}", org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getParameters().getStoragePoolId(), e.getMessage()); org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.log.debug("Exception", e); } org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getVDSReturnValue().setSucceeded(true); }	@java.lang.Override protected void executeVDSCommand() { try { org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxy proxy = org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getCurrentIrsProxy(); proxy.clearPoolTimers(); proxy.clearCache(); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.log.error("Could not change timers for pool '{}': {}", org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getParameters().getStoragePoolId(), e.getMessage()); org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.log.debug("Exception", e); } org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getVDSReturnValue().setSucceeded(true); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Host") java.lang.String xenHost();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Group Name") java.lang.String groupNameUser();
void submitEventSync(org.ovirt.engine.core.common.eventqueue.Event event, java.util.concurrent.Callable<org.ovirt.engine.core.common.eventqueue.EventResult> callable);	org.ovirt.engine.core.common.eventqueue.EventResult submitEventSync(org.ovirt.engine.core.common.eventqueue.Event event, java.util.concurrent.Callable<org.ovirt.engine.core.common.eventqueue.EventResult> callable);
private void setPropertiesFromAuditLogableBase(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { auditLog.setstorage_domain_id(auditLogable.getStorageDomainId()); auditLog.setstorage_domain_name(auditLogable.getStorageDomainName()); auditLog.setstorage_pool_id(auditLogable.getStoragePoolId()); auditLog.setstorage_pool_name(auditLogable.getStoragePoolName()); auditLog.setvds_group_id(auditLogable.getVdsGroupId()); auditLog.setvds_group_name(auditLogable.getVdsGroupName()); auditLog.setCorrelationId(auditLogable.getCorrelationId()); auditLog.setJobId(auditLogable.getJobId()); auditLog.setGlusterVolumeId(auditLogable.getGlusterVolumeId()); auditLog.setGlusterVolumeName(auditLogable.getGlusterVolumeName()); auditLog.setExternal(auditLogable.isExternal()); auditLog.setQuotaId(auditLogable.getQuotaIdForLog()); auditLog.setQuotaName(auditLogable.getQuotaNameForLog()); auditLog.setCallStack(auditLogable.getCallStack()); }	private static void setPropertiesFromAuditLogableBase(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { auditLog.setStorageDomainId(auditLogable.getStorageDomainId()); auditLog.setStorageDomainName(auditLogable.getStorageDomainName()); auditLog.setStoragePoolId(auditLogable.getStoragePoolId()); auditLog.setStoragePoolName(auditLogable.getStoragePoolName()); auditLog.setVdsGroupId(auditLogable.getVdsGroupId()); auditLog.setVdsGroupName(auditLogable.getVdsGroupName()); auditLog.setCorrelationId(auditLogable.getCorrelationId()); auditLog.setJobId(auditLogable.getJobId()); auditLog.setGlusterVolumeId(auditLogable.getGlusterVolumeId()); auditLog.setGlusterVolumeName(auditLogable.getGlusterVolumeName()); auditLog.setExternal(auditLogable.isExternal()); auditLog.setQuotaId(auditLogable.getQuotaIdForLog()); auditLog.setQuotaName(auditLogable.getQuotaNameForLog()); auditLog.setCallStack(auditLogable.getCallStack()); }
public void addDiskImageDynamicToSave(org.ovirt.engine.core.common.businessentities.DiskImageDynamic imageDynamic) { vmDiskImageDynamicToSave.add(imageDynamic); }	public void addDiskImageDynamicToSave(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.DiskImageDynamic> imageDynamicByVmId) { vmDiskImageDynamicToSave.add(imageDynamicByVmId); }
@java.lang.Override public void onSuccess(java.lang.Object model, T returnValue) { final org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if (!(queryReturnValue.getSucceeded())) { final org.ovirt.engine.ui.uicommonweb.ErrorPopupManager popupManager = ((org.ovirt.engine.ui.uicommonweb.ErrorPopupManager) (org.ovirt.engine.ui.uicommonweb.TypeResolver.getInstance().resolve(org.ovirt.engine.ui.uicommonweb.ErrorPopupManager.class))); popupManager.show(queryReturnValue.getExceptionMessage()); return; } onRealSuccessCallback.onSuccess(model, returnValue); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (!(returnValue.getSucceeded())) { final org.ovirt.engine.ui.uicommonweb.ErrorPopupManager popupManager = ((org.ovirt.engine.ui.uicommonweb.ErrorPopupManager) (org.ovirt.engine.ui.uicommonweb.TypeResolver.getInstance().resolve(org.ovirt.engine.ui.uicommonweb.ErrorPopupManager.class))); popupManager.show(returnValue.getExceptionMessage()); return; } onRealSuccessCallback.onSuccess(returnValue); }
@java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> list = returnValue.getReturnValue(); setPolicyUnits(list); fetchClusterPolicies(); if ((policyUnitModel) != null) { policyUnitModel.getPolicyUnits().setItems(sort(policyUnits)); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> list = returnValue.getReturnValue(); setPolicyUnits(list); fetchClusterPolicies(); if ((policyUnitModel) != null) { policyUnitModel.getPolicyUnits().setItems(sort(policyUnits)); } }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; org.ovirt.engine.core.common.businessentities.EngineBackupLog other = ((org.ovirt.engine.core.common.businessentities.EngineBackupLog) (obj)); return (dbName.equals(other.getDbName())) && (doneAt.equals(other.getDoneAt())); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; if (!(obj instanceof org.ovirt.engine.core.common.businessentities.EngineBackupLogId)) { return false; } org.ovirt.engine.core.common.businessentities.EngineBackupLogId other = ((org.ovirt.engine.core.common.businessentities.EngineBackupLogId) (obj)); return (dbName.equals(other.getDbName())) && (doneAt.equals(other.getDoneAt())); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.STORAGE, EngineMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.STORAGE, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
private void saveVmDevicesToDb() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> sortedVmDevices = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmDevice>(); sortedVmDevices.addAll(vmDeviceToSave.values()); sortVmDeviceList(sortedVmDevices); org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.updateAllInTransaction(sortedVmDevices, getDbFacade().getVmDeviceDAO()); if (!(removedDeviceIds.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { getDbFacade().getVmDeviceDAO().removeAll(removedDeviceIds); return null; } }); } if (!(newVmDevices.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { getDbFacade().getVmDeviceDAO().saveAll(newVmDevices); return null; } }); } }	private void saveVmDevicesToDb() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> list = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmDevice>(vmDeviceToSave.values()); java.util.Collections.sort(list); org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.updateAllInTransaction("UpdateVmDeviceRuntimeInfo", list, getDbFacade().getVmDeviceDAO()); if (!(removedDeviceIds.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { getDbFacade().getVmDeviceDAO().removeAll(removedDeviceIds); return null; } }); } if (!(newVmDevices.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { getDbFacade().getVmDeviceDAO().saveAll(newVmDevices); return null; } }); } }
@java.lang.Override public void setSelectedItems(java.util.List<org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel> items) { if ((items.size()) > 0) { org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel selectedItem = null; if ((getModel().getSelectedItem()) != null) { selectedItem = getModel().findNode(items.get(0), getModel().getSelectedItem()); } else { selectedItem = items.get(0); } getModel().setSelectedItem(selectedItem); } else { getModel().setSelectedItem(null); } }	@java.lang.Override public void setSelectedItems(java.util.List<org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel> items) { getModel().setSelectedItem(((items.size()) > 0 ? items.get(0) : null)); }
private void updateAlerts(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.cluster.SubTabClusterGeneralPresenter.ViewDef view, org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel model) { view.clearAlerts(); if (model.isConsoleAddressPartiallyOverridden()) { view.addAlert(constants.consolePartiallyOverridden()); } }	private void updateAlerts(final org.ovirt.engine.ui.webadmin.section.main.presenter.tab.cluster.SubTabClusterGeneralPresenter.ViewDef view, final org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel model) { view.clearAlerts(); if (model.getHasNewGlusterHostsAlert()) { addTextAndLinkAlert(view, messages.clusterHasNewGlusterHosts(), model.getImportNewGlusterHostsCommand(), model.getDetachNewGlusterHostsCommand()); } if (model.isConsoleAddressPartiallyOverridden()) { view.addAlert(new com.google.gwt.user.client.ui.Label(constants.consolePartiallyOverridden())); } }
@java.lang.SuppressWarnings("unchecked") java.lang.Object convert(java.lang.Class<?> type, java.lang.String value, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache) { if (type.equals(java.lang.String.class)) { return value; } if (type.equals(int.class)) { return java.lang.Integer.valueOf(value); } else if (type.equals(float.class)) { return java.lang.Float.valueOf(value); } else if (type.equals(double.class)) { return java.lang.Double.valueOf(value); } else if (type.equals(boolean.class)) { return java.lang.Boolean.valueOf(value); } else if (type.equals(long.class)) { return java.lang.Long.valueOf(value); } if ((org.ovirt.engine.core.common.businessentities.BusinessEntity.class.isAssignableFrom(type)) && (cache.containsKey(new org.ovirt.engine.core.compat.Guid(value)))) { return cache.get(new org.ovirt.engine.core.compat.Guid(value)); } try { java.lang.reflect.Method converter = type.getMethod("valueOf", java.lang.String.class); if (converter != null) { return converter.invoke(type, value); } } catch (java.lang.NoSuchMethodException | java.lang.reflect.InvocationTargetException | java.lang.IllegalAccessException ex) { } try { java.lang.reflect.Constructor<?> constructor = type.getConstructor(java.lang.String.class); if (constructor == null) { return null; } return constructor.newInstance(value); } catch (java.lang.NoSuchMethodException | java.lang.InstantiationException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException ex) { } return null; }	@java.lang.SuppressWarnings("unchecked") java.lang.Object convert(java.lang.Class<?> type, java.lang.String value, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache) throws java.text.ParseException { if (type.equals(java.lang.String.class)) { return value; } if (type.equals(int.class)) { return java.lang.Integer.valueOf(value); } else if (type.equals(float.class)) { return java.lang.Float.valueOf(value); } else if (type.equals(double.class)) { return java.lang.Double.valueOf(value); } else if (type.equals(boolean.class)) { return java.lang.Boolean.valueOf(value); } else if (type.equals(long.class)) { return java.lang.Long.valueOf(value); } else if (type.equals(java.util.Date.class)) { return org.ovirt.engine.core.bll.scheduling.policyunits.AbstractPolicyUnitTest.TIME_FORMAT.parse(value); } if ((org.ovirt.engine.core.common.businessentities.BusinessEntity.class.isAssignableFrom(type)) && (cache.containsKey(new org.ovirt.engine.core.compat.Guid(value)))) { return cache.get(new org.ovirt.engine.core.compat.Guid(value)); } try { java.lang.reflect.Method converter = type.getMethod("valueOf", java.lang.String.class); if (converter != null) { return converter.invoke(type, value); } } catch (java.lang.NoSuchMethodException | java.lang.reflect.InvocationTargetException | java.lang.IllegalAccessException ex) { } try { java.lang.reflect.Constructor<?> constructor = type.getConstructor(java.lang.String.class); if (constructor == null) { return null; } return constructor.newInstance(value); } catch (java.lang.NoSuchMethodException | java.lang.InstantiationException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException ex) { } return null; }
private boolean isVmDown(org.ovirt.engine.core.common.businessentities.VM vm) { return (vm != null) && ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down)); }	private boolean isVmDown(org.ovirt.engine.core.common.businessentities.VM vm) { return (vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down); }
private org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters buildLiveSnapshotParameters(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> filteredPluggedDisks = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks(getDisksList(), false, true, true); if (org.ovirt.engine.core.common.FeatureSupported.memorySnapshot(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getVdsGroupCompatibilityVersion())) { return new org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getId(), filteredPluggedDisks, snapshot.getMemoryVolume()); } else { return new org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getId(), filteredPluggedDisks); } }	private org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters buildLiveSnapshotParameters(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.common.businessentities.Disk> pluggedDisksForVm = org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getId(), true); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> filteredPluggedDisksForVm = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks(pluggedDisksForVm, false, true, true); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> filteredPluggedDisks = org.ovirt.engine.core.bll.ImagesHandler.imagesIntersection(filteredPluggedDisksForVm, getDisksList()); if (org.ovirt.engine.core.common.FeatureSupported.memorySnapshot(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getVdsGroupCompatibilityVersion())) { return new org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getId(), filteredPluggedDisks, snapshot.getMemoryVolume()); } else { return new org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getId(), filteredPluggedDisks); } }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((compatVersion) == null ? 0 : compatVersion.hashCode()); result = (prime * result) + ((compatibility_version) == null ? 0 : compatibility_version.hashCode()); result = (prime * result) + ((cpu_name) == null ? 0 : cpu_name.hashCode()); result = (prime * result) + (cpu_over_commit_duration_minutes); result = (prime * result) + ((description) == null ? 0 : description.hashCode()); result = (prime * result) + (high_utilization); result = (prime * result) + ((id) == null ? 0 : id.hashCode()); result = (prime * result) + (low_utilization); result = (prime * result) + (max_vds_memory_over_commit); result = (prime * result) + (countThreadsAsCores ? 1231 : 1237); result = (prime * result) + ((migrateOnError) == null ? 0 : migrateOnError.hashCode()); result = (prime * result) + ((name) == null ? 0 : name.hashCode()); result = (prime * result) + ((selection_algorithm) == null ? 0 : selection_algorithm.hashCode()); result = (prime * result) + ((storagePool) == null ? 0 : storagePool.hashCode()); result = (prime * result) + ((storagePoolName) == null ? 0 : storagePoolName.hashCode()); result = (prime * result) + (transparentHugepages ? 1231 : 1237); result = (prime * result) + (virtService ? 1231 : 1237); result = (prime * result) + (glusterService ? 1231 : 1237); return result; }	@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((compatVersion) == null ? 0 : compatVersion.hashCode()); result = (prime * result) + ((compatibility_version) == null ? 0 : compatibility_version.hashCode()); result = (prime * result) + ((cpu_name) == null ? 0 : cpu_name.hashCode()); result = (prime * result) + (cpu_over_commit_duration_minutes); result = (prime * result) + ((description) == null ? 0 : description.hashCode()); result = (prime * result) + (high_utilization); result = (prime * result) + ((id) == null ? 0 : id.hashCode()); result = (prime * result) + (low_utilization); result = (prime * result) + (max_vds_memory_over_commit); result = (prime * result) + (countThreadsAsCores ? 1231 : 1237); result = (prime * result) + ((migrateOnError) == null ? 0 : migrateOnError.hashCode()); result = (prime * result) + ((name) == null ? 0 : name.hashCode()); result = (prime * result) + ((selection_algorithm) == null ? 0 : selection_algorithm.hashCode()); result = (prime * result) + ((storagePoolId) == null ? 0 : storagePoolId.hashCode()); result = (prime * result) + ((storagePoolName) == null ? 0 : storagePoolName.hashCode()); result = (prime * result) + (transparentHugepages ? 1231 : 1237); result = (prime * result) + (virtService ? 1231 : 1237); result = (prime * result) + (glusterService ? 1231 : 1237); return result; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Boolean returnValue) { getModel().getIsSoundcardEnabled().setEntity(returnValue); }	@java.lang.Override public void onSuccess(java.lang.Boolean returnValue) { getModel().getIsSoundcardEnabled().setEntity(returnValue); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.RemoveSnapshotImagesCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_LOCKED)); }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(getImageGroupId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED)); }
private void VolumeType_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.VolumeType volumeType = ((org.ovirt.engine.core.common.businessentities.VolumeType) (getVolumeType().getSelectedItem())); org.ovirt.engine.core.common.businessentities.StorageType storageType = ((getStorageDomain().getSelectedItem()) == null) ? org.ovirt.engine.core.common.businessentities.StorageType.UNKNOWN : ((org.ovirt.engine.core.common.businessentities.StorageDomain) (getStorageDomain().getSelectedItem())).getStorageType(); updateVolumeFormat(volumeType, storageType); updateShareable(volumeType, storageType); }	private void VolumeType_SelectedItemChanged() { if (((getVolumeType().getSelectedItem()) == null) || ((getDataCenter().getSelectedItem()) == null)) { return; } org.ovirt.engine.core.common.businessentities.VolumeType volumeType = ((org.ovirt.engine.core.common.businessentities.VolumeType) (getVolumeType().getSelectedItem())); org.ovirt.engine.core.common.businessentities.StorageType storageType = ((org.ovirt.engine.core.common.businessentities.storage_pool) (getDataCenter().getSelectedItem())).getstorage_pool_type(); updateVolumeFormat(volumeType, storageType); updateShareable(volumeType, storageType); }
public java.lang.Boolean isKsmMergeAcrossNumaNodes() { return ksmMergeAcrossNumaNodes; }	public boolean isKsmMergeAcrossNumaNodes() { return ksmMergeAcrossNumaNodes; }
@java.lang.Override public org.ovirt.engine.api.resource.DevicesResource<org.ovirt.engine.api.model.Application, org.ovirt.engine.api.model.Applications> getApplicationsResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendVmApplicationsResource(guid, org.ovirt.engine.core.common.queries.VdcQueryType.GetVmByVmId, new org.ovirt.engine.core.common.queries.GetVmByVmIdParameters(guid))); }	@java.lang.Override public org.ovirt.engine.api.resource.VmApplicationsResource getApplicationsResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendVmApplicationsResource(guid)); }
public void initHandlers(com.google.gwt.event.shared.EventBus eventBus) { if ((ssoTokenHandlerRegistration) != null) { ssoTokenHandlerRegistration.removeHandler(); } ssoTokenHandlerRegistration = eventBus.addHandler(org.ovirt.engine.ui.frontend.communication.SSOTokenChangeEvent.getType(), new org.ovirt.engine.ui.frontend.communication.SSOTokenChangeEvent.SSOTokenChangeHandler() { @java.lang.Override public void onSSOTokenChange(org.ovirt.engine.ui.frontend.communication.SSOTokenChangeEvent event) { ssoToken = event.getSsoToken(); checkIfInitFinished(); } }); }	public void initHandlers(com.google.gwt.event.shared.EventBus eventBus) { if ((ssoTokenHandlerRegistration) != null) { ssoTokenHandlerRegistration.removeHandler(); } ssoTokenHandlerRegistration = eventBus.addHandler(org.ovirt.engine.ui.frontend.communication.SSOTokenChangeEvent.getType(), new org.ovirt.engine.ui.frontend.communication.SSOTokenChangeEvent.SSOTokenChangeHandler() { @java.lang.Override public void onSSOTokenChange(org.ovirt.engine.ui.frontend.communication.SSOTokenChangeEvent event) { org.ovirt.engine.ui.uicommonweb.ReportInit.this.ssoToken = event.getToken(); if ((org.ovirt.engine.ui.uicommonweb.ReportInit.this.ssoToken) == null) { org.ovirt.engine.ui.uicommonweb.ReportInit.this.ssoToken = ""; } checkIfInitFinished(); } }); }
protected java.lang.String serializeAdditionalAttributes() { return ""; }	protected java.util.Map<java.lang.String, java.lang.Object> constructStringAttributes() { java.util.Map<java.lang.String, java.lang.Object> attributes = new java.util.LinkedHashMap<>(); attributes.put("id", getId()); attributes.put("vdsId", getVdsId()); attributes.put("networkName", getNetworkName()); attributes.put("bootProtocol", getBootProtocol()); attributes.put("address", getAddress()); attributes.put("subnet", getSubnet()); attributes.put("gateway", getGateway()); attributes.put("mtu", getMtu()); attributes.put("bridged", isBridged()); attributes.put("type", getType()); attributes.put("networkImplementationDetails", getNetworkImplementationDetails()); attributes.put("qos", getQos()); attributes.put("qosOverridden", isQosOverridden()); attributes.put("customProperties", getCustomProperties()); return attributes; }
@org.junit.Test public void testIsUsingScsiReservationValidWhenSgioIsFiltered() { setupForLun(); org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk(ScsiGenericIO.FILTERED); assertThat(lunValidator.isUsingScsiReservationValid(org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(), createDiskVmElementUsingScsiReserevation(), lunDisk1), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_SGIO_IS_FILTERED)); }	@org.junit.Test public void testIsUsingScsiReservationValidWhenSgioIsFiltered() { setupForLun(); org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk(ScsiGenericIO.FILTERED); assertThat(lunValidator.isUsingScsiReservationValid(org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(), org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskVmElementUsingScsiReserevation(), lunDisk1), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_SGIO_IS_FILTERED)); }
protected void setUpGetHostIdExpectations(int idx) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest.setUpEntityExpectations(control.createMock(org.ovirt.engine.core.common.businessentities.VDS.class), control.createMock(org.ovirt.engine.core.compat.RpmVersion.class), idx); setUpGetEntityExpectations(VdcQueryType.GetVdsByName, org.ovirt.engine.core.common.queries.GetVdsByNameParameters.class, new java.lang.String[]{ "Name" }, new java.lang.Object[]{ NAMES[idx] }, host); }	protected void setUpGetHostIdExpectations(int idx) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest.setUpEntityExpectations(control.createMock(org.ovirt.engine.core.common.businessentities.VDS.class), idx); setUpGetEntityExpectations(VdcQueryType.GetVdsByName, org.ovirt.engine.core.common.queries.GetVdsByNameParameters.class, new java.lang.String[]{ "Name" }, new java.lang.Object[]{ NAMES[idx] }, host); }
public void flush(org.ovirt.engine.core.common.businessentities.Provider<org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties> provider) { org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties properties = provider.getAdditionalProperties(); if (properties == null) { properties = new org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties(); provider.setAdditionalProperties(properties); } properties.setPluginType(org.ovirt.engine.ui.uicommonweb.models.providers.NeutronPluginTranslator.getPluginNameForDisplayString(((java.lang.String) (getPluginType().getSelectedItem())))); if (((java.lang.Boolean) (isPluginTypeCustom().getEntity()))) { properties.setAgentConfiguration(null); } else { org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties.AgentConfiguration agentConfiguration = properties.getAgentConfiguration(); if (agentConfiguration == null) { agentConfiguration = new org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties.AgentConfiguration(); properties.setAgentConfiguration(agentConfiguration); } agentConfiguration.setNetworkMappings(((java.lang.String) (getInterfaceMappings().getEntity()))); org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties.QpidConfiguration qpidConfiguration = agentConfiguration.getQpidConfiguration(); if (qpidConfiguration == null) { qpidConfiguration = new org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties.QpidConfiguration(); agentConfiguration.setQpidConfiguration(qpidConfiguration); } qpidConfiguration.setAddress(((java.lang.String) (getQpidHost().getEntity()))); java.lang.String port = ((java.lang.String) (getQpidPort().getEntity())); qpidConfiguration.setPort((port == null ? null : java.lang.Integer.valueOf(port))); qpidConfiguration.setUsername(((java.lang.String) (getQpidUsername().getEntity()))); qpidConfiguration.setPassword(((java.lang.String) (getQpidPassword().getEntity()))); } }	public void flush(org.ovirt.engine.core.common.businessentities.Provider<org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties> provider) { org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties properties = provider.getAdditionalProperties(); if (properties == null) { properties = new org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties(); provider.setAdditionalProperties(properties); } properties.setPluginType(org.ovirt.engine.ui.uicommonweb.models.providers.NeutronPluginTranslator.getPluginNameForDisplayString(((java.lang.String) (getPluginType().getSelectedItem())))); if (!((java.lang.Boolean) (isPluginConfigurationAvailable().getEntity()))) { properties.setAgentConfiguration(null); } else { org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties.AgentConfiguration agentConfiguration = properties.getAgentConfiguration(); if (agentConfiguration == null) { agentConfiguration = new org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties.AgentConfiguration(); properties.setAgentConfiguration(agentConfiguration); } agentConfiguration.setNetworkMappings(((java.lang.String) (getInterfaceMappings().getEntity()))); org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties.QpidConfiguration qpidConfiguration = agentConfiguration.getQpidConfiguration(); if (qpidConfiguration == null) { qpidConfiguration = new org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties.QpidConfiguration(); agentConfiguration.setQpidConfiguration(qpidConfiguration); } qpidConfiguration.setAddress(((java.lang.String) (getQpidHost().getEntity()))); java.lang.String port = ((java.lang.String) (getQpidPort().getEntity())); qpidConfiguration.setPort((port == null ? null : java.lang.Integer.valueOf(port))); qpidConfiguration.setUsername(((java.lang.String) (getQpidUsername().getEntity()))); qpidConfiguration.setPassword(((java.lang.String) (getQpidPassword().getEntity()))); } }
public void setGuestOverhead(java.lang.Integer value) { mVdsDynamic.setGuestOverhead(value); }	public void setGuestOverhead(java.lang.Integer value) { vdsDynamic.setGuestOverhead(value); }
@java.lang.Override public void UpdateMinAllocatedMemory() { org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithClusterEntityModel dataCenterWithClusterEntityModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithClusterEntityModel) (getModel().getDataCenterWithClustersList().getSelectedItem())); if (dataCenterWithClusterEntityModel == null) { return; } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = dataCenterWithClusterEntityModel.getCluster(); if (cluster == null) { return; } if (((java.lang.Integer) (getModel().getMemSize().getEntity())) < (vm.getVmMemSizeMb())) { double overCommitFactor = 100.0 / (cluster.getmax_vds_memory_over_commit()); getModel().getMinAllocatedMemory().setEntity(((int) (((java.lang.Integer) (getModel().getMemSize().getEntity())) * overCommitFactor))); } else { getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem()); } }	@java.lang.Override public void updateMinAllocatedMemory() { org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster dataCenterWithCluster = ((org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster) (getModel().getDataCenterWithClustersList().getSelectedItem())); if (dataCenterWithCluster == null) { return; } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = dataCenterWithCluster.getCluster(); if (cluster == null) { return; } if (((java.lang.Integer) (getModel().getMemSize().getEntity())) < (vm.getVmMemSizeMb())) { double overCommitFactor = 100.0 / (cluster.getmax_vds_memory_over_commit()); getModel().getMinAllocatedMemory().setEntity(((int) (((java.lang.Integer) (getModel().getMemSize().getEntity())) * overCommitFactor))); } else { getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem()); } }
private void initNetworkList(org.ovirt.engine.core.compat.Guid dataCenterId) { startProgress(); org.ovirt.engine.core.common.queries.IdQueryParameters queryParams = new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(QueryType.GetAllNetworks, queryParams, new org.ovirt.engine.ui.uicommonweb.models.profiles.AsyncQuery<org.ovirt.engine.core.common.queries.QueryReturnValue>(( returnValue) -> { Collection<org.ovirt.engine.core.common.businessentities.network.Network> networks = returnValue.getReturnValue(); org.ovirt.engine.core.common.businessentities.network.Network oldSelectedNetwork = getNetwork().getSelectedItem(); getNetwork().setItems(networks); updateNetworks(networks); if (oldSelectedNetwork != null) { org.ovirt.engine.core.common.businessentities.network.Network newSelectedNetwork = networks.stream().filter(( network) -> java.util.Objects.equals(network.getId(), oldSelectedNetwork.getId())).findFirst().get(); if (!(getNetwork().getSelectedItem().getId().equals(newSelectedNetwork.getId()))) { getNetwork().setSelectedItem(newSelectedNetwork); } } stopProgress(); })); }	private void initNetworkList(org.ovirt.engine.core.compat.Guid dataCenterId) { startProgress(); org.ovirt.engine.core.common.queries.IdQueryParameters queryParams = new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(QueryType.GetAllNetworks, queryParams, new org.ovirt.engine.ui.uicommonweb.models.profiles.AsyncQuery<org.ovirt.engine.core.common.queries.QueryReturnValue>(( returnValue) -> { Collection<org.ovirt.engine.core.common.businessentities.network.Network> networks = returnValue.getReturnValue(); getNetwork().setItems(networks); updateNetworks(networks); stopProgress(); })); }
@java.lang.SuppressWarnings("rawtypes") @java.lang.Override public void setItems(java.lang.Iterable value) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> disks = (value != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.Disk>Cast(value) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> filteredDisks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(); org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType diskStorageType = org.ovirt.engine.ui.uicommonweb.models.disks.DiskViewType.storageValue(((org.ovirt.engine.ui.uicommonweb.models.disks.DiskViewType) (getDiskViewType().getEntity()))); for (org.ovirt.engine.core.common.businessentities.Disk disk : disks) { if ((diskStorageType == null) || (diskStorageType == (disk.getDiskStorageType()))) { filteredDisks.add(disk); } } super.setItems(filteredDisks); }	@java.lang.SuppressWarnings("rawtypes") @java.lang.Override public void setItems(java.lang.Iterable value) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> disks = (value != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.Disk>Cast(value) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> filteredDisks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(); org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType diskStorageType = ((org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType) (getDiskViewType().getEntity())); for (org.ovirt.engine.core.common.businessentities.Disk disk : disks) { if ((diskStorageType == null) || (diskStorageType == (disk.getDiskStorageType()))) { filteredDisks.add(disk); } } super.setItems(filteredDisks); }
@java.lang.Override public int increaseStoragePoolMasterVersion(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id); return getCallsHandler().executeModificationReturnResult("Increase_storage_pool_master_version", parameterSource); }	@java.lang.Override public int increaseStoragePoolMasterVersion(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id); return getCallsHandler().executeModificationReturnResult("IncreaseStoragePoolMasterVersion", parameterSource); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc setMOMPolicyParameters(java.util.Map<java.lang.String, java.lang.Object> values) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.setMOMPolicyParameters").withParameter("key_value_store", values).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc setMOMPolicyParameters(java.util.Map<java.lang.String, java.lang.Object> values) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.setMOMPolicyParameters").withParameter("key_value_store", values).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
private void _nextTerminationEntry() throws java.lang.Exception { _terminationDialog[((_terminationIndex)++)].call(); }	private void _nextTerminationEntry() throws java.lang.Exception { try { _terminationDialog[((_terminationIndex)++)].call(); } catch (java.lang.ArrayIndexOutOfBoundsException e) { throw new java.lang.RuntimeException("Protocol violation", e); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (java.lang.Boolean.TRUE.equals(getIsDiscoveredHosts().getEntity())) { discoverHostName_SelectedItemChanged(); } else if (java.lang.Boolean.FALSE.equals(getIsDiscoveredHosts().getEntity())) { hostName_SelectedItemChanged(); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (java.lang.Boolean.TRUE.equals(getIsDiscoveredHosts().getEntity())) { discoverHostName_SelectedItemChanged(); } else if (java.lang.Boolean.FALSE.equals(getIsDiscoveredHosts().getEntity())) { hostName_SelectedItemChanged(); } }
public boolean getCheckValue(java.lang.Iterable<T> items, com.google.gwt.view.client.SelectionModel selectionModel) { if (!(items.iterator().hasNext())) { return false; } boolean allSelected = true; for (T entity : items) { if (!(selectionModel.isSelected(entity))) { allSelected = false; } } return allSelected; }	public boolean getCheckValue(java.lang.Iterable<T> items, com.google.gwt.view.client.SelectionModel selectionModel) { if (!(items.iterator().hasNext())) { return false; } boolean allSelected = true; for (T entity : items) { if (!(selectionModel.isSelected(entity))) { return false; } } return true; }
@java.lang.Override protected com.google.gwt.user.client.ui.TreeItem getLeafItem(org.ovirt.engine.core.common.job.Step step) { com.google.gwt.user.client.ui.HorizontalPanel panel = new com.google.gwt.user.client.ui.HorizontalPanel(); panel.setSpacing(1); panel.setWidth("100%"); addItemToPanel(panel, new com.google.gwt.user.client.ui.Image(getStatusImage(step.getStatus())), "25px"); addTextBoxToPanel(panel, new org.ovirt.engine.ui.common.widget.label.TextBoxLabel(), step.getDescription(), ""); addValueLabelToPanel(panel, new org.ovirt.engine.ui.webadmin.widget.label.FullDateTimeLabel(), step.getStartTime(), "150px"); addTextBoxToPanel(panel, new org.ovirt.engine.ui.common.widget.label.TextBoxLabel(), ((step.getEndTime()) == null ? "" : constants.till()), "40px"); addValueLabelToPanel(panel, new org.ovirt.engine.ui.webadmin.widget.label.FullDateTimeLabel(), step.getEndTime(), "150px"); com.google.gwt.user.client.ui.TreeItem treeItem = new com.google.gwt.user.client.ui.TreeItem(panel); treeItem.setUserObject(step.getId()); return treeItem; }	@java.lang.Override protected com.google.gwt.user.client.ui.TreeItem getLeafItem(org.ovirt.engine.core.common.job.Step step) { com.google.gwt.user.client.ui.HorizontalPanel panel = new com.google.gwt.user.client.ui.HorizontalPanel(); panel.setSpacing(1); panel.setWidth("100%"); addItemToPanel(panel, new com.google.gwt.user.client.ui.Image(getStatusImage(step.getStatus())), "25px"); addTextBoxToPanel(panel, new org.ovirt.engine.ui.common.widget.label.TextBoxLabel(), step.getDescription(), ""); addValueLabelToPanel(panel, new org.ovirt.engine.ui.webadmin.widget.label.FullDateTimeLabel(), step.getStartTime(), "150px"); addTextBoxToPanel(panel, new org.ovirt.engine.ui.common.widget.label.TextBoxLabel(), ((step.getEndTime()) == null ? "" : constants.until()), "40px"); addValueLabelToPanel(panel, new org.ovirt.engine.ui.webadmin.widget.label.FullDateTimeLabel(), step.getEndTime(), "150px"); com.google.gwt.user.client.ui.TreeItem treeItem = new com.google.gwt.user.client.ui.TreeItem(panel); treeItem.setUserObject(step.getId()); return treeItem; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Cannot change Cluster in tree context") java.lang.String cannotChangeClusterInTreeContext();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Cannot change Cluster in tree context") java.lang.String cannotChangeClusterInTreeContext();
@java.lang.Override protected boolean validate() { if ((hostedEngineHelper.getStorageDomain()) != null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); } if (!(fetchStorageDomainInfo())) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); } if (!(java.util.Arrays.asList(org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.SUPPORTED_DOMAIN_TYPES).contains(heStorageDomain.getStorageType()))) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_UNSUPPORTED); } return true; }	@java.lang.Override protected boolean validate() { if ((hostedEngineHelper.getStorageDomain()) != null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); } if (!(fetchStorageDomainInfo())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); } if (!(java.util.Arrays.asList(org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.SUPPORTED_DOMAIN_TYPES).contains(heStorageDomain.getStorageType()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_UNSUPPORTED); } return true; }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.hosts.InstallModel model) { driver.edit(model); if ((model.getVds().getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallFailed)) { rbPassword.setValue(true); model.setAuthenticationMethod(AuthenticationMethod.Password); displayPasswordField(true); } else { rbPublicKey.setValue(true); model.setAuthenticationMethod(AuthenticationMethod.PublicKey); displayPasswordField(false); } rbPassword.addValueChangeHandler(new com.google.gwt.event.logical.shared.ValueChangeHandler<java.lang.Boolean>() { @java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { model.setAuthenticationMethod(AuthenticationMethod.Password); displayPasswordField(true); } }); rbPublicKey.addValueChangeHandler(new com.google.gwt.event.logical.shared.ValueChangeHandler<java.lang.Boolean>() { @java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { model.setAuthenticationMethod(AuthenticationMethod.PublicKey); displayPasswordField(false); } }); userNameEditor.setEnabled(false); networkProviderWidget.edit(model.getNetworkProviderModel()); }	@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.hosts.InstallModel model) { driver.edit(model); boolean installedFailed = (model.getVds().getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallFailed); model.setAuthenticationMethod((installedFailed ? org.ovirt.engine.core.common.action.VdsOperationActionParameters.AuthenticationMethod.Password : org.ovirt.engine.core.common.action.VdsOperationActionParameters.AuthenticationMethod.PublicKey)); displayPasswordField(installedFailed); rbPassword.setValue(installedFailed); rbPublicKey.setValue((!installedFailed)); rbPassword.addValueChangeHandler(new com.google.gwt.event.logical.shared.ValueChangeHandler<java.lang.Boolean>() { @java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { model.setAuthenticationMethod(AuthenticationMethod.Password); displayPasswordField(true); } }); rbPublicKey.addValueChangeHandler(new com.google.gwt.event.logical.shared.ValueChangeHandler<java.lang.Boolean>() { @java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { model.setAuthenticationMethod(AuthenticationMethod.PublicKey); displayPasswordField(false); } }); userNameEditor.setEnabled(false); networkProviderWidget.edit(model.getNetworkProviderModel()); }
public static void getUnknownImageList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<java.lang.String>> aQuery, org.ovirt.engine.core.compat.Guid storagePoolId, boolean forceRefresh) { org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.getIrsImageList(aQuery, storagePoolId, forceRefresh, ImageFileType.All, new org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.RepoImageToImageFileNameAsyncConverter() { @java.lang.Override protected java.lang.String transform(java.util.ArrayList<java.lang.String> fileNameList, org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.ISO_PREFIX) + (super.transform(repoImage)); } @java.lang.Override protected boolean desiredImage(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.core.common.businessentities.storage.ImageFileType.Unknown) == (repoImage.getFileType()); } }); }	public static void getUnknownImageList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<java.lang.String>> aQuery, org.ovirt.engine.core.compat.Guid storagePoolId, boolean forceRefresh) { org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.getIrsImageList(aQuery, storagePoolId, forceRefresh, ImageFileType.All, new org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.RepoImageToImageFileNameAsyncConverter() { @java.lang.Override protected java.lang.String transform(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.ISO_PREFIX) + (super.transform(repoImage)); } @java.lang.Override protected boolean desiredImage(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.core.common.businessentities.storage.ImageFileType.Unknown) == (repoImage.getFileType()); } }); }
private java.lang.String createVG() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CreateVG, new org.ovirt.engine.core.common.vdscommands.CreateVGVDSCommandParameters(org.ovirt.engine.core.bll.storage.domains.AddSANStorageDomainCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.domains.AddSANStorageDomainCommand.getStorageDomain().getId(), org.ovirt.engine.core.bll.storage.domains.AddSANStorageDomainCommand.getParameters().getLunIds(), org.ovirt.engine.core.bll.storage.domains.AddSANStorageDomainCommand.getParameters().isForce())); java.lang.String volumeGroupId = ((java.lang.String) (((returnValue.getReturnValue()) instanceof java.lang.String) ? returnValue.getReturnValue() : null)); return volumeGroupId; }	private java.lang.String createVG() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.CreateVG, new org.ovirt.engine.core.common.vdscommands.CreateVGVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getId(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getParameters().getLunIds(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getParameters().isForce())); java.lang.String volumeGroupId = ((java.lang.String) (((returnValue.getReturnValue()) instanceof java.lang.String) ? returnValue.getReturnValue() : null)); return volumeGroupId; }
org.ovirt.engine.core.common.businessentities.VM getHostedEngine();	org.ovirt.engine.core.common.businessentities.VM getHostedEngineVm();
private void loadCurrentClusterManagementNetwork() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getManagementNetwork(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<org.ovirt.engine.core.common.businessentities.network.Network>() { @java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.core.common.businessentities.network.Network managementNetwork1) { getManagementNetwork().setSelectedItem(managementNetwork1); } }), getEntity().getId()); }	private void loadCurrentClusterManagementNetwork() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getManagementNetwork(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.businessentities.network.Network>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.network.Network managementNetwork1) { getManagementNetwork().setSelectedItem(managementNetwork1); } }), getEntity().getId()); }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("lvName", lvName).append("mountPoint", mountPoint).append("storageDevices", storageDevices).append("raidParams", raidParams).append("fsType", fsType); }	@java.lang.Override public java.lang.String toString() { return java.lang.String.format("CreateBrickVDSParameters %s, lvName=%s, mountPoint=%s, storageDevices=%s, raidParams=%s, fsType=%s, ", super.toString(), lvName, mountPoint, storageDevices, raidParams, fsType); }
public org.ovirt.engine.core.bll.ValidationResult isAnyDomainInProcess() { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap> poolIsoMaps = getStoragePoolIsoMapDao().getAllForStoragePool(storagePool.getId()); for (org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainIsoMap : poolIsoMaps) { if (((domainIsoMap.getStatus()) != null) && (domainIsoMap.getStatus().isStorageDomainInProcess())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2, java.lang.String.format("$status %1$s", domainIsoMap.getStatus())); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult isAnyDomainInProcess() { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap> poolIsoMaps = getStoragePoolIsoMapDao().getAllForStoragePool(storagePool.getId()); for (org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainIsoMap : poolIsoMaps) { if (((domainIsoMap.getStatus()) != null) && (domainIsoMap.getStatus().isStorageDomainInProcess())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2, java.lang.String.format("$status %1$s", domainIsoMap.getStatus())); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
protected boolean acquireLock() { org.ovirt.engine.core.bll.LockIdNameAttribute annotation = getClass().getAnnotation(org.ovirt.engine.core.bll.LockIdNameAttribute.class); boolean returnValue = true; if (annotation != null) { isReleaseExecute = annotation.isReleaseExecute(); if (!(annotation.isWait())) { returnValue = acquireLockInternal(); } else { acquireLockAndWait(); } } return returnValue; }	protected boolean acquireLock() { org.ovirt.engine.core.bll.LockIdNameAttribute annotation = getClass().getAnnotation(org.ovirt.engine.core.bll.LockIdNameAttribute.class); boolean returnValue = true; if (annotation != null) { isReleaseExecute = annotation.isReleaseAtEndOfExecute(); if (!(annotation.isWait())) { returnValue = acquireLockInternal(); } else { acquireLockAndWait(); } } return returnValue; }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getDeviceList() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = new java.util.ArrayList<>(); org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = executeGetDeviceList(new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(org.ovirt.engine.core.bll.storage.GetUnregisteredBlockStorageDomainsQuery.getParameters().getVdsId(), org.ovirt.engine.core.bll.storage.GetUnregisteredBlockStorageDomainsQuery.getParameters().getStorageType(), false)); if (returnValue.getSucceeded()) { luns.addAll(returnValue.<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>getReturnValue()); } else { throw new java.lang.RuntimeException(java.lang.String.format("GetDeviceList execution failed. Exception message: %1$s", returnValue.getExceptionString())); } return luns; }	protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getDeviceList() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = new java.util.ArrayList<>(); org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = executeGetDeviceList(new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(org.ovirt.engine.core.bll.storage.GetUnregisteredBlockStorageDomainsQuery.getParameters().getVdsId(), org.ovirt.engine.core.bll.storage.GetUnregisteredBlockStorageDomainsQuery.getParameters().getStorageType(), false, null)); if (returnValue.getSucceeded()) { luns.addAll(returnValue.<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>getReturnValue()); } else { throw new java.lang.RuntimeException(java.lang.String.format("GetDeviceList execution failed. Exception message: %1$s", returnValue.getExceptionString())); } return luns; }
@org.junit.Test public void testStart() throws java.lang.Exception { setUpWindowsGetEntityExpectations(2, false); setUpGetPayloadExpectations(0); setUpGetBallooningExpectations(); setUriInfo(setUpActionExpectations(VdcActionType.RunVmOnce, org.ovirt.engine.core.common.action.RunVmOnceParams.class, new java.lang.String[]{ "VmId" }, new java.lang.Object[]{ GUIDS[0] })); verifyActionResponse(resource.start(new org.ovirt.engine.api.model.Action())); }	@org.junit.Test public void testStart() throws java.lang.Exception { setUpWindowsGetEntityExpectations(2, false); setUriInfo(setUpActionExpectations(VdcActionType.RunVmOnce, org.ovirt.engine.core.common.action.RunVmOnceParams.class, new java.lang.String[]{ "VmId" }, new java.lang.Object[]{ GUIDS[0] })); verifyActionResponse(resource.start(new org.ovirt.engine.api.model.Action())); }
@org.junit.Test public void testNetworksOnNicMatchMtuNetworkMtuDoesNotMatch() throws java.lang.Exception { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = java.util.Arrays.asList(createNetwork(1, false), createNetwork(2, false)); java.util.Map<java.lang.String, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>> networksOnNics = java.util.Collections.singletonMap("nicName", networks); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator hostSetupNetworksValidator = createHostSetupNetworksValidator(); assertThat(hostSetupNetworksValidator.validateMtu(networksOnNics), failsWith(VdcBllMessages.NETWORK_MTU_DIFFERENCES)); }	@org.junit.Test public void testNetworksOnNicMatchMtuNetworkMtuDoesNotMatch() throws java.lang.Exception { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = java.util.Arrays.asList(createNetwork(1, false), createNetwork(2, false)); java.util.Map<java.lang.String, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>> networksOnNics = java.util.Collections.singletonMap("nicName", networks); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator hostSetupNetworksValidator = createHostSetupNetworksValidator(); assertThat(hostSetupNetworksValidator.validateMtu(networksOnNics), failsWith(EngineMessage.NETWORK_MTU_DIFFERENCES)); }
private boolean correctStorageDomainFormat() { org.ovirt.engine.core.common.businessentities.storage_pool storagePool = org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getStoragePool(); org.ovirt.engine.core.common.businessentities.StorageFormatType storageFormat = org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getStorageDomain().getStorageFormat(); org.ovirt.engine.core.common.businessentities.StorageType storageType = org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getStorageDomain().getstorage_type(); boolean isBlockStorage = (storageType == (org.ovirt.engine.core.common.businessentities.StorageType.ISCSI)) || (storageType == (org.ovirt.engine.core.common.businessentities.StorageType.FCP)); java.util.Set<org.ovirt.engine.core.common.businessentities.StorageFormatType> supportedStorageFormats; if (storagePool != null) { supportedStorageFormats = getSupportedStorageFormatSet(storagePool.getcompatibility_version()); } else { org.ovirt.engine.core.compat.Version vdsVersion = java.util.Collections.max(org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getVds().getSupportedClusterVersionsSet()); supportedStorageFormats = getSupportedStorageFormatSet(vdsVersion); } if (!(supportedStorageFormats.contains(storageFormat))) { return false; } if (((storageFormat == (org.ovirt.engine.core.common.businessentities.StorageFormatType.V1)) && isBlockStorage) && (storagePool == null)) { return false; } if ((storageFormat == (org.ovirt.engine.core.common.businessentities.StorageFormatType.V2)) && (!isBlockStorage)) { return false; } return true; }	private boolean isStorageFormatCompatibleWithDomain() { org.ovirt.engine.core.common.businessentities.StorageFormatType storageFormat = org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getStorageDomain().getStorageFormat(); org.ovirt.engine.core.common.businessentities.StorageType storageType = org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getStorageDomain().getstorage_type(); org.ovirt.engine.core.common.businessentities.StorageDomainType storageDomainFunction = org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getStorageDomain().getstorage_domain_type(); boolean isBlockStorage = (storageType == (org.ovirt.engine.core.common.businessentities.StorageType.ISCSI)) || (storageType == (org.ovirt.engine.core.common.businessentities.StorageType.FCP)); boolean isDataStorageDomain = storageDomainFunction == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Data); if ((storageFormat == (org.ovirt.engine.core.common.businessentities.StorageFormatType.V2)) && ((!isBlockStorage) || (!isDataStorageDomain))) { return false; } if ((storageFormat == (org.ovirt.engine.core.common.businessentities.StorageFormatType.V3)) && (!isDataStorageDomain)) { return false; } return true; }
protected org.ovirt.engine.core.bll.validator.storage.StorageConnectionValidator createStorageConnectionValidator() { java.lang.String connectionId = org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getParameters().getStorageConnectionId(); org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = getStorageServerConnectionDao().get(connectionId); return new org.ovirt.engine.core.bll.validator.storage.StorageConnectionValidator(connection); }	protected org.ovirt.engine.core.bll.validator.storage.StorageConnectionValidator createStorageConnectionValidator() { java.lang.String connectionId = org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getParameters().getStorageConnectionId(); org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getStorageServerConnectionDao().get(connectionId); return new org.ovirt.engine.core.bll.validator.storage.StorageConnectionValidator(connection); }
public java.util.Date getCertificationExpirationDate();	java.util.Date getCertificationExpirationDate();
private void mockHostDevices(java.util.List<org.ovirt.engine.core.common.businessentities.HostDevice> extraDevices) { java.util.List<org.ovirt.engine.core.common.businessentities.HostDevice> devices = new java.util.ArrayList<>(); devices.add(pciDevice); devices.add(netDevice); devices.addAll(extraDevices); when(hostDeviceDao.getHostDevicesByHostId(org.ovirt.engine.core.bll.network.host.HostNicVfsConfigHelperImplTest.HOST_ID)).thenReturn(devices); when(hostDeviceDao.getAll()).thenReturn(devices); for (org.ovirt.engine.core.common.businessentities.HostDevice device : devices) { if ((device.getIommuGroup()) != null) { when(hostDeviceDao.getHostDevicesByHostIdAndIommuGroup(device.getHostId(), device.getIommuGroup())).thenReturn(java.util.Collections.singletonList(device)); } } }	private void mockHostDevices(java.util.List<org.ovirt.engine.core.common.businessentities.HostDevice> extraDevices) { java.util.List<org.ovirt.engine.core.common.businessentities.HostDevice> devices = new java.util.ArrayList<>(); devices.add(pciDevice); devices.add(netDevice); devices.addAll(extraDevices); when(hostDeviceDao.getHostDevicesByHostId(org.ovirt.engine.core.bll.network.host.HostNicVfsConfigHelperImplTest.HOST_ID)).thenReturn(devices); when(hostDeviceDao.getAll()).thenReturn(devices); }
public org.ovirt.engine.core.bll.ValidationResult isDomainHasSpaceForRequestWithoutThreshold(final long requestedSize) { if (((storageDomain.getavailable_disk_size()) != null) && (((storageDomain.getavailable_disk_size()) - requestedSize) < 0)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN, storageName()); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult isDomainHasSpaceForRequest(final long requestedSize, final boolean useThresHold) { long size = (useThresHold) ? org.ovirt.engine.core.bll.validator.StorageDomainValidator.getLowDiskSpaceThreshold() : 0L; if (((storageDomain.getAvailableDiskSize()) != null) && (((storageDomain.getAvailableDiskSize()) - requestedSize) < size)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN, storageName()); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override protected org.ovirt.engine.api.model.Template doPopulate(org.ovirt.engine.api.model.Template model, org.ovirt.engine.core.common.businessentities.VmTemplate entity) { if (!(model.isSetConsole())) { model.setConsole(new org.ovirt.engine.api.model.Console()); } model.getConsole().setEnabled((!(getConsoleDevicesForEntity(entity.getId()).isEmpty()))); if (!(model.isSetVirtioScsi())) { model.setVirtioScsi(new org.ovirt.engine.api.model.VirtIOSCSI()); } model.getVirtioScsi().setEnabled(org.ovirt.engine.api.restapi.util.VmHelper.hasVirtioScsiControllers(this, entity.getId())); setRngDevice(model); return model; }	@java.lang.Override protected org.ovirt.engine.api.model.Template doPopulate(org.ovirt.engine.api.model.Template model, org.ovirt.engine.core.common.businessentities.VmTemplate entity) { if (!(model.isSetConsole())) { model.setConsole(new org.ovirt.engine.api.model.Console()); } model.getConsole().setEnabled((!(getConsoleDevicesForEntity(entity.getId()).isEmpty()))); if (!(model.isSetVirtioScsi())) { model.setVirtioScsi(new org.ovirt.engine.api.model.VirtIOSCSI()); } model.getVirtioScsi().setEnabled((!(org.ovirt.engine.api.restapi.util.VmHelper.getVirtioScsiControllersForEntity(this, entity.getId()).isEmpty()))); model.setSoundcardEnabled(org.ovirt.engine.api.restapi.util.VmHelper.getSoundDevicesForEntity(this, entity.getId()).isEmpty()); setRngDevice(model); return model; }
public java.lang.String getSortableDbField(java.lang.String fieldName) { if (mSortableFieldDict.containsKey(fieldName)) { return mSortableFieldDict.get(fieldName); } else { return getDbFieldName(fieldName); } }	public java.lang.String getSortableDbField(java.lang.String fieldName) { if (sortableFieldDict.containsKey(fieldName)) { return sortableFieldDict.get(fieldName); } else { return getDbFieldName(fieldName); } }
private void aggregate(org.ovirt.engine.core.common.businessentities.QuotaPerUserUsageEntity aggregatedUsage, org.ovirt.engine.core.common.businessentities.QuotaPerUserUsageEntity quotaPerUserUsageEntity) { aggregatedUsage.setVcpuLimit(((quotaPerUserUsageEntity.getVcpuLimit()) + (aggregatedUsage.getVcpuLimit()))); aggregatedUsage.setVcpuUsageForUser(((quotaPerUserUsageEntity.getVcpuUsageForUser()) + (aggregatedUsage.getVcpuUsageForUser()))); aggregatedUsage.setVcpuTotalUsage(((quotaPerUserUsageEntity.getVcpuTotalUsage()) + (aggregatedUsage.getVcpuTotalUsage()))); aggregatedUsage.setMemoryLimit(((quotaPerUserUsageEntity.getMemoryLimit()) + (aggregatedUsage.getMemoryLimit()))); aggregatedUsage.setMemoryUsageForUser(((quotaPerUserUsageEntity.getMemoryUsageForUser()) + (aggregatedUsage.getMemoryUsageForUser()))); aggregatedUsage.setMemoryTotalUsage(((quotaPerUserUsageEntity.getMemoryTotalUsage()) + (aggregatedUsage.getMemoryTotalUsage()))); aggregatedUsage.setStorageLimit(((quotaPerUserUsageEntity.getStorageLimit()) + (aggregatedUsage.getStorageLimit()))); aggregatedUsage.setStorageUsageForUser(((quotaPerUserUsageEntity.getStorageUsageForUser()) + (aggregatedUsage.getStorageUsageForUser()))); aggregatedUsage.setStorageTotalUsage(((quotaPerUserUsageEntity.getStorageTotalUsage()) + (aggregatedUsage.getStorageTotalUsage()))); }	private void aggregate(org.ovirt.engine.core.common.businessentities.QuotaUsagePerUser aggregatedUsage, org.ovirt.engine.core.common.businessentities.QuotaUsagePerUser quotaPerUserUsageEntity) { aggregatedUsage.setVcpuLimit(((quotaPerUserUsageEntity.getVcpuLimit()) + (aggregatedUsage.getVcpuLimit()))); aggregatedUsage.setVcpuUsageForUser(((quotaPerUserUsageEntity.getVcpuUsageForUser()) + (aggregatedUsage.getVcpuUsageForUser()))); aggregatedUsage.setVcpuTotalUsage(((quotaPerUserUsageEntity.getVcpuTotalUsage()) + (aggregatedUsage.getVcpuTotalUsage()))); aggregatedUsage.setMemoryLimit(((quotaPerUserUsageEntity.getMemoryLimit()) + (aggregatedUsage.getMemoryLimit()))); aggregatedUsage.setMemoryUsageForUser(((quotaPerUserUsageEntity.getMemoryUsageForUser()) + (aggregatedUsage.getMemoryUsageForUser()))); aggregatedUsage.setMemoryTotalUsage(((quotaPerUserUsageEntity.getMemoryTotalUsage()) + (aggregatedUsage.getMemoryTotalUsage()))); aggregatedUsage.setStorageLimit(((quotaPerUserUsageEntity.getStorageLimit()) + (aggregatedUsage.getStorageLimit()))); aggregatedUsage.setStorageUsageForUser(((quotaPerUserUsageEntity.getStorageUsageForUser()) + (aggregatedUsage.getStorageUsageForUser()))); aggregatedUsage.setStorageTotalUsage(((quotaPerUserUsageEntity.getStorageTotalUsage()) + (aggregatedUsage.getStorageTotalUsage()))); }
private void delayPolling() { try { java.lang.Thread.sleep(org.ovirt.engine.core.bll.network.NetworkConfigurator.POLLING_BREAK_IN_MILLIS); } catch (java.lang.InterruptedException e) { } }	public org.ovirt.engine.core.common.businessentities.network.IPv4Address createIPv4Address(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { org.ovirt.engine.core.common.businessentities.network.IPv4Address result = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); result.setAddress(nic.getAddress()); result.setNetmask(nic.getSubnet()); result.setGateway(nic.getGateway()); return result; }
@java.lang.Override protected void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?, ?, ?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?, ?, ?> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params) { assert op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (op1)); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity = nic.getEntity(); entity.setBondName(null); org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel bond = nic.getBond(); if ((bond.getBonded().size()) == 2) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.BREAK_BOND.getCommand(bond, null, allNics).execute(); } }	@java.lang.Override protected void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params) { assert op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (op1)); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity = nic.getIface(); entity.setBondName(null); org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel bond = nic.getBond(); if ((bond.getBonded().size()) == 2) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.BREAK_BOND.getCommand(bond, null, allNics).execute(); } }
public static org.ovirt.engine.core.common.network.FirewallType valueOf(int value) { return org.ovirt.engine.core.common.network.FirewallType.map.get(value); }	public static org.ovirt.engine.core.common.network.FirewallType valueOf(int value) { org.ovirt.engine.core.common.network.FirewallType firewallType = org.ovirt.engine.core.common.network.FirewallType.valuesById.get(value); if (firewallType != null) { return firewallType; } throw new java.lang.IllegalArgumentException(("FirewallType does not have any mapping for value: " + value)); }
@java.lang.Override protected org.ovirt.engine.core.common.errors.VdcBllErrors getCommandError() { return org.ovirt.engine.core.common.errors.VdcBllErrors.UPLOAD_FAILURE; }	@java.lang.Override protected int getSuccessCode() { return org.apache.commons.httpclient.HttpStatus.SC_OK; }
protected org.ovirt.engine.core.common.AuditLogType getAuditLogTypeForInvalidInterfaces() { throw new org.jboss.util.NotImplementedException(); }	protected org.ovirt.engine.core.common.AuditLogType getAuditLogTypeForInvalidInterfaces() { return org.ovirt.engine.core.common.AuditLogType.UNASSIGNED; }
public void updateConfigureLocalStorageCommandAvailability() { if ((hasAdminSystemPermission) == null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoggedInUser(); if (dbUser == null) { hasAdminSystemPermission = false; updateConfigureLocalStorageCommandAvailability1(); return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetPermissionsByAdElementId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dbUser.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.core.common.queries.VdcQueryReturnValue response) { if ((response == null) || (!(response.getSucceeded()))) { hasAdminSystemPermission = false; updateConfigureLocalStorageCommandAvailability1(); } else { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Permission> permissions = response.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.Permission permission : permissions) { if (((permission.getObjectType()) == (org.ovirt.engine.core.common.VdcObjectType.System)) && ((permission.getRoleType()) == (org.ovirt.engine.core.common.businessentities.RoleType.ADMIN))) { hasAdminSystemPermission = true; break; } } updateConfigureLocalStorageCommandAvailability1(); } } }, true)); } else { updateConfigureLocalStorageCommandAvailability1(); } }	public void updateConfigureLocalStorageCommandAvailability() { if ((hasAdminSystemPermission) == null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoggedInUser(); if (dbUser == null) { hasAdminSystemPermission = false; updateConfigureLocalStorageCommandAvailability1(); return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetPermissionsByAdElementId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dbUser.getId()), new org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue response) { if ((response == null) || (!(response.getSucceeded()))) { hasAdminSystemPermission = false; updateConfigureLocalStorageCommandAvailability1(); } else { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Permission> permissions = response.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.Permission permission : permissions) { if (((permission.getObjectType()) == (org.ovirt.engine.core.common.VdcObjectType.System)) && ((permission.getRoleType()) == (org.ovirt.engine.core.common.businessentities.RoleType.ADMIN))) { hasAdminSystemPermission = true; break; } } updateConfigureLocalStorageCommandAvailability1(); } } }, true)); } else { updateConfigureLocalStorageCommandAvailability1(); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.aaa.DbGroup getByName(java.lang.String name) { return getCallsHandler().executeRead("GetGroupByName", org.ovirt.engine.core.dao.DbGroupDAOImpl.DbGroupRowMapper.instance, getCustomMapSqlParameterSource().addValue("name", name)); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.aaa.DbGroup getByName(java.lang.String name) { return getCallsHandler().executeRead("GetGroupByName", org.ovirt.engine.core.dao.DbGroupDaoImpl.DbGroupRowMapper.instance, getCustomMapSqlParameterSource().addValue("name", name)); }
private static void addCdDetails(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().get(org.ovirt.engine.core.common.osinfo.OsRepository.class); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); struct.put(VdsProperties.Index, "2"); struct.put(VdsProperties.INTERFACE, osRepository.getCdInterface(vm.getOs(), vm.getVdsGroupCompatibilityVersion())); struct.put(VdsProperties.ReadOnly, java.lang.Boolean.TRUE.toString()); struct.put(VdsProperties.Shareable, java.lang.Boolean.FALSE.toString()); }	private static void addCdDetails(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getOsRepository(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getVdsGroupCompatibilityVersion()); if ("scsi".equals(cdInterface)) { struct.put(VdsProperties.Index, "0"); } else if ("ide".equals(cdInterface)) { struct.put(VdsProperties.Index, "2"); } struct.put(VdsProperties.INTERFACE, cdInterface); struct.put(VdsProperties.ReadOnly, java.lang.Boolean.TRUE.toString()); struct.put(VdsProperties.Shareable, java.lang.Boolean.FALSE.toString()); }
public boolean validateReplicateBricks(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType volumeType) { if (volumeType == (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType.REPLICATE)) { java.util.Set<java.lang.String> servers = new java.util.HashSet<java.lang.String>(); for (java.lang.Object model : bricks.getItems()) { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (model)).getEntity())); if (servers.contains(brick.getServerName())) { return false; } else { servers.add(brick.getServerName()); } } } else if (volumeType == (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType.DISTRIBUTED_REPLICATE)) { int replicaCount = getReplicaCountValue(); java.util.Set<java.lang.String> servers = new java.util.HashSet<java.lang.String>(); int count = 0; for (java.lang.Object model : bricks.getItems()) { count++; org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (model)).getEntity())); if (servers.contains(brick.getServerName())) { return false; } else { servers.add(brick.getServerName()); } if ((count % replicaCount) == 0) { servers.clear(); } } } return true; }	public boolean validateReplicateBricks(int oldReplicaCount, java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> existingBricks) { int brickCount = (((java.util.List) (bricks.getItems())).size()) + (existingBricks != null ? existingBricks.size() : 0); int replicaCount = getReplicaCountValue(); java.util.Set<java.lang.String> servers = new java.util.HashSet<java.lang.String>(); if (replicaCount > oldReplicaCount) { int count = 0; for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : existingBricks) { servers.add(brick.getServerName()); count++; } for (java.lang.Object model : bricks.getItems()) { if (count > replicaCount) { break; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (model)).getEntity())); if (servers.contains(brick.getServerName())) { return false; } else { servers.add(brick.getServerName()); } count++; } } else { int count = 0; for (java.lang.Object model : bricks.getItems()) { count++; org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (model)).getEntity())); if (servers.contains(brick.getServerName())) { return false; } else { servers.add(brick.getServerName()); } if ((count % replicaCount) == 0) { servers.clear(); } } } return true; }
@org.junit.Test public void testDoGetHttpServletRequestHttpServletResponseLangOkay() throws java.io.IOException, javax.servlet.ServletException { javax.servlet.ServletOutputStream responseOut = mock(javax.servlet.ServletOutputStream.class); when(mockResponse.getOutputStream()).thenReturn(responseOut); when(mockRequest.getPathInfo()).thenReturn("/fr/index.html"); when(mockRequest.getServletPath()).thenReturn("/docs"); testServlet.doGet(mockRequest, mockResponse); verify(responseOut).write(((byte[]) (anyObject())), eq(0), anyInt()); }	@org.junit.Test public void testDoGet_ResponseLangOkay() throws java.io.IOException, javax.servlet.ServletException { javax.servlet.ServletOutputStream responseOut = mock(javax.servlet.ServletOutputStream.class); when(mockResponse.getOutputStream()).thenReturn(responseOut); when(mockRequest.getPathInfo()).thenReturn("/fr/index.html"); when(mockRequest.getServletPath()).thenReturn("/docs"); testServlet.doGet(mockRequest, mockResponse); verify(responseOut).write(((byte[]) (anyObject())), eq(0), anyInt()); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.RemoveVmCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, EngineMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.RemoveVmCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
protected boolean doDomainsUseConnection(org.ovirt.engine.core.common.businessentities.StorageServerConnections connection) { if (((domains) == null) || (domains.isEmpty())) { domains = getStorageDomainsByConnId(connection.geIid()); } return ((domains) != null) && (!(domains.isEmpty())); }	protected boolean doDomainsUseConnection(org.ovirt.engine.core.common.businessentities.StorageServerConnections connection) { if (((domains) == null) || (domains.isEmpty())) { domains = getStorageDomainsByConnId(connection.getId()); } return ((domains) != null) && (!(domains.isEmpty())); }
@java.lang.Override protected void postSaveAction(org.ovirt.engine.core.compat.Guid networkGuid, boolean succeeded) { super.postSaveAction(networkGuid, succeeded); if (!succeeded) { return; } org.ovirt.engine.core.compat.Guid networkId = ((getNetwork().getId()) == null) ? networkGuid : getNetwork().getId(); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> actionParameters1 = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel networkClusterModel : getClustersToAttach()) { org.ovirt.engine.core.common.businessentities.network.Network tempVar = new org.ovirt.engine.core.common.businessentities.network.Network(); tempVar.setId(networkId); tempVar.setName(getNetwork().getName()); org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = new org.ovirt.engine.core.common.businessentities.network.NetworkCluster(); networkCluster.setRequired(networkClusterModel.isRequired()); tempVar.setCluster(networkCluster); actionParameters1.add(new org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter(networkClusterModel.getEntity(), tempVar)); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.AttachNetworkToVdsGroup, actionParameters1); if ((((java.lang.Boolean) (getExport().getEntity())) && ((getSubnetModel().getName().getEntity()) != null)) && (!(getSubnetModel().getName().getEntity().isEmpty()))) { getSubnetModel().setExternalNetwork(getNetwork().getProvidedBy()); getSubnetModel().flush(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.AddSubnetToProvider, new org.ovirt.engine.core.common.action.AddExternalSubnetParameters(getSubnetModel().getSubnet(), networkId)); } }	@java.lang.Override protected void postSaveAction(org.ovirt.engine.core.compat.Guid networkGuid, boolean succeeded) { super.postSaveAction(networkGuid, succeeded); if (!succeeded) { return; } org.ovirt.engine.core.compat.Guid networkId = ((getNetwork().getId()) == null) ? networkGuid : getNetwork().getId(); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> actionParameters1 = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel networkClusterModel : getClustersToAttach()) { org.ovirt.engine.core.common.businessentities.network.Network tempVar = new org.ovirt.engine.core.common.businessentities.network.Network(); tempVar.setId(networkId); tempVar.setName(getNetwork().getName()); org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = new org.ovirt.engine.core.common.businessentities.network.NetworkCluster(); networkCluster.setRequired(networkClusterModel.isRequired()); tempVar.setCluster(networkCluster); actionParameters1.add(new org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter(networkClusterModel.getEntity(), tempVar)); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.AttachNetworkToVdsGroup, actionParameters1); if (((java.lang.Boolean) (getExport().getEntity())) && ((java.lang.Boolean) (getCreateSubnet().getEntity()))) { getSubnetModel().setExternalNetwork(getNetwork().getProvidedBy()); getSubnetModel().flush(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.AddSubnetToProvider, new org.ovirt.engine.core.common.action.AddExternalSubnetParameters(getSubnetModel().getSubnet(), networkId)); } }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("note: Permissions containig these operations should be associated with Storage Domain Object (or above)") java.lang.String notePermissionsContainigTheseOperationsShuoldAssociatSdOrAboveRoleTreeTooltip();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("note: Permissions containig these operations should be associated with Storage Domain Object (or above)") java.lang.String notePermissionsContainigTheseOperationsShuoldAssociatSdOrAboveRoleTreeTooltip();
public static void GetTemplateListByStorage(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid storageId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.dataprovider.VmTemplate> list = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.dataprovider.VmTemplate>(); if (source != null) { for (org.ovirt.engine.ui.uicommonweb.dataprovider.VmTemplate template : ((java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.dataprovider.VmTemplate>) (source))) { if ((template.getStatus()) == (VmTemplateStatus.OK)) { list.add(template); } } java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.VmTemplateByNameComparer()); } return list; } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVmTemplatesFromStorageDomain, new org.ovirt.engine.ui.uicommonweb.dataprovider.StorageDomainQueryParametersBase(storageId), aQuery); }	public static void getTemplateListByStorage(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid storageId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> list = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate>(); if (source != null) { for (org.ovirt.engine.core.common.businessentities.VmTemplate template : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate>) (source))) { if ((template.getStatus()) == (org.ovirt.engine.core.common.businessentities.VmTemplateStatus.OK)) { list.add(template); } } java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.VmTemplateByNameComparer()); } return list; } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVmTemplatesFromStorageDomain, new org.ovirt.engine.core.common.queries.IdQueryParameters(storageId), aQuery); }
@java.lang.Override public java.util.Set<java.lang.String> getConsumedEvents() { java.util.Set<java.lang.String> set = new java.util.HashSet<java.lang.String>(); set.add(BrowserEvents.CLICK); set.add(BrowserEvents.CHANGE); set.add(BrowserEvents.KEYDOWN); set.addAll(super.getConsumedEvents()); return set; }	@java.lang.Override public java.util.Set<java.lang.String> getConsumedEvents() { java.util.Set<java.lang.String> set = new java.util.HashSet(super.getConsumedEvents()); set.add(BrowserEvents.CLICK); set.add(BrowserEvents.CHANGE); set.add(BrowserEvents.KEYDOWN); return set; }
public org.ovirt.engine.core.common.businessentities.storage.ImageUploadPhase getImageUploadPhase() { return imageUploadPhase; }	public org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase getImageTransferPhase() { return imageTransferPhase; }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__ACTION__ADD); addValidateMessage(EngineMessage.VAR__TYPE__VM_TEMPLATE); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__ADD); addValidationMessage(EngineMessage.VAR__TYPE__VM_TEMPLATE); }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.aaa.LogoutUserCommand.getCurrentUser()) == null) { setCurrentUser(org.ovirt.engine.core.bll.aaa.SessionDataContainer.getInstance().getUser(org.ovirt.engine.core.bll.aaa.LogoutUserCommand.getParameters().getSessionId(), false)); } org.ovirt.engine.core.aaa.AuthenticationProfile profile = org.ovirt.engine.core.bll.aaa.SessionDataContainer.getInstance().getProfile(org.ovirt.engine.core.bll.aaa.LogoutUserCommand.getParameters().getSessionId()); if (profile == null) { org.ovirt.engine.core.bll.aaa.LogoutUserCommand.setSucceeded(false); } else { if (((profile.getAuthn().getContext().<java.lang.Long>get(Authn.ContextKeys.CAPABILITIES)) & (Authn.Capabilities.LOGOUT)) != 0) { profile.getAuthn().invoke(new org.ovirt.engine.api.extensions.ExtMap().mput(Base.InvokeKeys.COMMAND, Authn.InvokeCommands.LOGOUT).mput(Authn.InvokeKeys.PRINCIPAL, org.ovirt.engine.core.bll.aaa.SessionDataContainer.getInstance().getPrincipalName(org.ovirt.engine.core.bll.aaa.LogoutUserCommand.getParameters().getSessionId()))); } org.ovirt.engine.core.bll.aaa.SessionDataContainer.getInstance().removeSessionOnLogout(org.ovirt.engine.core.bll.aaa.LogoutUserCommand.getParameters().getSessionId()); org.ovirt.engine.core.bll.aaa.LogoutUserCommand.setSucceeded(true); } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.aaa.AuthenticationProfile profile = org.ovirt.engine.core.bll.aaa.SessionDataContainer.getInstance().getProfile(org.ovirt.engine.core.bll.aaa.LogoutUserCommand.getParameters().getSessionId()); if (profile == null) { org.ovirt.engine.core.bll.aaa.LogoutUserCommand.setSucceeded(false); } else { if (((profile.getAuthn().getContext().<java.lang.Long>get(Authn.ContextKeys.CAPABILITIES)) & (Authn.Capabilities.LOGOUT)) != 0) { profile.getAuthn().invoke(new org.ovirt.engine.api.extensions.ExtMap().mput(Base.InvokeKeys.COMMAND, Authn.InvokeCommands.LOGOUT).mput(Authn.InvokeKeys.PRINCIPAL, org.ovirt.engine.core.bll.aaa.SessionDataContainer.getInstance().getPrincipalName(org.ovirt.engine.core.bll.aaa.LogoutUserCommand.getParameters().getSessionId()))); } org.ovirt.engine.core.bll.aaa.SessionDataContainer.getInstance().removeSessionOnLogout(org.ovirt.engine.core.bll.aaa.LogoutUserCommand.getParameters().getSessionId()); org.ovirt.engine.core.bll.aaa.LogoutUserCommand.setSucceeded(true); } }
@java.lang.Override protected void executeCommand() { try { _returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); getVDSReturnValue().setSucceeded(true); executeVDSCommand(); } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.ProxyReturnValueException e) { setVdsRuntimeError(e); } catch (java.lang.RuntimeException ex) { setVdsRuntimeError(ex); logException(ex); } }	@java.lang.Override protected void executeCommand() { try { _returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); getVDSReturnValue().setSucceeded(true); executeVDSCommand(); } catch (java.lang.RuntimeException ex) { setVdsRuntimeError(ex); } }
@javax.ws.rs.Path("{action: (start|stop|shutdown|reboot|suspend|detach|migrate|export|move|ticket|cancelmigration|preview_snapshot|commit_snapshot|undo_snapshot|clone_vm)}/{oid}") public org.ovirt.engine.api.resource.ActionResource getActionSubresource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid);	@javax.ws.rs.Path("{action: (start|stop|shutdown|reboot|suspend|detach|migrate|export|move|ticket|cancelmigration|preview_snapshot|commit_snapshot|undo_snapshot|clone)}/{oid}") public org.ovirt.engine.api.resource.ActionResource getActionSubresource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid);
@java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { @java.lang.SuppressWarnings("unchecked") Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = returnValue.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog : watchdogs) { getModel().getWatchdogAction().setSelectedItem(watchdog.getAction()); getModel().getWatchdogModel().setSelectedItem(watchdog.getModel()); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { @java.lang.SuppressWarnings("unchecked") Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = returnValue.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog : watchdogs) { getModel().getWatchdogAction().setSelectedItem(watchdog.getAction()); getModel().getWatchdogModel().setSelectedItem(watchdog.getModel()); } }
public org.ovirt.engine.core.common.businessentities.gluster.GlusterMallInfo getGlusterMallInfo() { return glusterMallInfo; }	public org.ovirt.engine.core.common.businessentities.gluster.MallInfo getMallInfo() { return mallInfo; }
@org.ovirt.engine.ui.uicompat.DefaultMessage("Incorrect number of vCPUs. It is not possible to compose this number from the available Sockets and Cores per Sockets") java.lang.String incorrectVCPUNumber();	@org.ovirt.engine.ui.uicompat.DefaultMessage("Incorrect number of Total Virtual CPUs. It is not possible to compose this number from the available Virtual Sockets and Cores per Virtual Sockets") java.lang.String incorrectVCPUNumber();
private void populateVmData(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(vm.getStaticData(), true); vmDeviceUtils.setVmDevices(vm.getStaticData()); }	private void populateVmData(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(vm.getStaticData(), true); org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVmDeviceUtils().setVmDevices(vm.getStaticData()); }
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.ActivateVdsCommand.getVds()) == null) { return failCanDoAction(VdcBllMessages.VDS_CANNOT_ACTIVATE_VDS_NOT_EXIST); } if (true && ((org.ovirt.engine.core.bll.ActivateVdsCommand.getVds().getstatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { return failCanDoAction(VdcBllMessages.VDS_CANNOT_ACTIVATE_VDS_ALREADY_UP); } return true; }	@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.ActivateVdsCommand.getVds()) == null) { return failCanDoAction(VdcBllMessages.VDS_CANNOT_ACTIVATE_VDS_NOT_EXIST); } if ((org.ovirt.engine.core.bll.ActivateVdsCommand.getVds().getstatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { return failCanDoAction(VdcBllMessages.VDS_CANNOT_ACTIVATE_VDS_ALREADY_UP); } return true; }
private void doBackupCheck() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastDbBackup = engineBackupLogDao.getLastSuccessfulEngineBackup(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.DB_SCOPE); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastFilesBackup = engineBackupLogDao.getLastSuccessfulEngineBackup(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.FILES_SCOPE); if ((lastDbBackup == null) || (lastFilesBackup == null)) { auditLogDirector.log(alert, AuditLogType.ENGINE_NO_FULL_BACKUP); } else { java.lang.Integer backupAlertPeriodInDays = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BackupAlertPeriodInDays); java.util.Date lastDbBackupDate = lastDbBackup.getDoneAt(); java.util.Date lastFilesBackupDate = lastFilesBackup.getDoneAt(); java.util.Date lastFullBackupDate = ((lastDbBackupDate.compareTo(lastFilesBackupDate)) < 0) ? lastDbBackupDate : lastFilesBackupDate; long diffInDays = ((java.util.Calendar.getInstance().getTimeInMillis()) - (lastFullBackupDate.getTime())) / (java.util.concurrent.TimeUnit.DAYS.toMillis(1)); if (diffInDays > backupAlertPeriodInDays) { alert.addCustomValue("Date", lastFullBackupDate.toString()); auditLogDirector.log(alert, AuditLogType.ENGINE_NO_WARM_BACKUP); } } }	private void doBackupCheck() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastDbBackup = getLastBackupByScope(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.BackupScope.DB); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastFilesBackup = getLastBackupByScope(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.BackupScope.FILES); if ((lastDbBackup == null) || (lastFilesBackup == null)) { auditLogDirector.log(alert, AuditLogType.ENGINE_NO_FULL_BACKUP); } else { java.lang.Integer backupAlertPeriodInDays = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BackupAlertPeriodInDays); java.util.Date lastDbBackupDate = lastDbBackup.getDoneAt(); java.util.Date lastFilesBackupDate = lastFilesBackup.getDoneAt(); java.util.Date lastFullBackupDate = ((lastDbBackupDate.compareTo(lastFilesBackupDate)) < 0) ? lastDbBackupDate : lastFilesBackupDate; long diffInDays = ((java.util.Calendar.getInstance().getTimeInMillis()) - (lastFullBackupDate.getTime())) / (java.util.concurrent.TimeUnit.DAYS.toMillis(1)); if (diffInDays > backupAlertPeriodInDays) { alert.addCustomValue("Date", lastFullBackupDate.toString()); auditLogDirector.log(alert, AuditLogType.ENGINE_NO_WARM_BACKUP); } } }
private java.lang.Integer deserializeValue(java.util.Map<java.lang.String, java.lang.Object> entry, java.lang.String curveKey, long conversionRate) { java.util.Map<java.lang.String, java.lang.Long> parameters = ((java.util.Map<java.lang.String, java.lang.Long>) (entry.get(curveKey))); if (parameters == null) { return null; } java.lang.Object avg = parameters.get(VdsProperties.HOST_QOS_AVERAGE); java.lang.Long average = (avg instanceof java.lang.Long) ? ((java.lang.Long) (avg)) : java.lang.Long.valueOf(java.lang.String.valueOf(avg)); return average == null ? null : ((int) (average / conversionRate)); }	private java.lang.Integer deserializeValue(java.util.Map<java.lang.String, java.lang.Object> entry, java.lang.String curveKey, long conversionRate) { java.util.Map<java.lang.String, java.lang.Object> parameters = ((java.util.Map<java.lang.String, java.lang.Object>) (entry.get(curveKey))); if ((parameters == null) || ((parameters.get(VdsProperties.HOST_QOS_AVERAGE)) == null)) { return null; } long avg = ((java.lang.Number) (parameters.get(VdsProperties.HOST_QOS_AVERAGE))).longValue(); return ((int) (avg / conversionRate)); }
@org.junit.Test public void testActivate() throws java.lang.Exception { setUpGetEntityExpectations(1); setUriInfo(setUpActionExpectations(VdcActionType.ActivateVds, org.ovirt.engine.core.common.action.VdsActionParameters.class, new java.lang.String[]{ "VdsId" }, new java.lang.Object[]{ GUIDS[0] })); verifyActionResponse(resource.activate(new org.ovirt.engine.api.model.Action())); }	@org.junit.Test public void testActivate() throws java.lang.Exception { setUriInfo(setUpActionExpectations(VdcActionType.ActivateVds, org.ovirt.engine.core.common.action.VdsActionParameters.class, new java.lang.String[]{ "VdsId" }, new java.lang.Object[]{ GUIDS[0] })); verifyActionResponse(resource.activate(new org.ovirt.engine.api.model.Action())); }
private void onSave() { }	private void onSave() { if (((getProgress()) != null) || (!(validate()))) { return; } startProgress(null); org.ovirt.engine.core.common.businessentities.MacPool macPool = flush(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(actionType, new org.ovirt.engine.core.common.action.MacPoolParameters(macPool), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { stopProgress(); if (((result.getReturnValue()) != null) && (result.getReturnValue().getSucceeded())) { cancel(); } } }); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessages.VAR__ACTION__REMOVE); addCanDoActionMessage(EngineMessages.VAR__TYPE__GLUSTER_VOLUME); }	@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__REMOVE); addCanDoActionMessage(EngineMessage.VAR__TYPE__GLUSTER_VOLUME); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Note: To receive email notifications, ensure that the mail server is configured and the ovirt-event-notifier service is running.") java.lang.String manageEventsPopupInfoLabel();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Note: To receive email notifications, ensure that the mail server is configured and the ovirt-event-notifier service is running.") java.lang.String manageEventsPopupInfoLabel();
@java.lang.Override public javax.ws.rs.core.Response remove(org.ovirt.engine.api.model.StorageDomain storageDomain) { if (storageDomain == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("storage-domain parameter is missing"); throw new javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fault).build()); } validateParameters(storageDomain, "host.id|name"); get(); if ((storageDomain.isSetDestroy()) && (storageDomain.isDestroy())) { org.ovirt.engine.core.common.action.StorageDomainParametersBase parameters = new org.ovirt.engine.core.common.action.StorageDomainParametersBase(asGuidOr404(id)); parameters.setVdsId(getHostId(storageDomain)); return performAction(VdcActionType.ForceRemoveStorageDomain, parameters); } else { org.ovirt.engine.core.common.action.RemoveStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.RemoveStorageDomainParameters(asGuidOr404(id)); parameters.setVdsId(getHostId(storageDomain)); if (storageDomain.isSetFormat()) { parameters.setDoFormat(storageDomain.isFormat()); } return performAction(VdcActionType.RemoveStorageDomain, parameters); } }	@java.lang.Override public javax.ws.rs.core.Response remove(org.ovirt.engine.api.model.StorageDomain storageDomain) { if (storageDomain == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("storage-domain parameter is missing"); throw new javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fault).build()); } validateParameters(storageDomain, "host.id|name"); get(); if ((storageDomain.isSetDestroy()) && (storageDomain.isDestroy())) { org.ovirt.engine.core.common.action.StorageDomainParametersBase parameters = new org.ovirt.engine.core.common.action.StorageDomainParametersBase(guid); parameters.setVdsId(getHostId(storageDomain)); return performAction(VdcActionType.ForceRemoveStorageDomain, parameters); } else { org.ovirt.engine.core.common.action.RemoveStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.RemoveStorageDomainParameters(guid); parameters.setVdsId(getHostId(storageDomain)); if (storageDomain.isSetFormat()) { parameters.setDoFormat(storageDomain.isFormat()); } return performAction(VdcActionType.RemoveStorageDomain, parameters); } }
private void waitForConnect() throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { try { this.connected.await(policy.getRetryTimeOut(), policy.getTimeUnit()); if ((this.connected.getCount()) != 0) { disconnect(); throw new org.ovirt.vdsm.jsonrpc.client.ClientConnectionException("Protocol negotiation failed"); } } catch (java.lang.InterruptedException e) { disconnect(); throw new java.lang.IllegalStateException("Communication interrupted"); } }	private void waitForConnect() throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { try { this.connected.await(policy.getRetryTimeOut(), policy.getTimeUnit()); } catch (java.lang.InterruptedException e) { disconnect(); throw new java.lang.IllegalStateException("Communication interrupted"); } }
@java.lang.Override protected void executeVdsBrokerCommand() { _result = org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getBroker().getStorageDomainsList(org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStorageDomainType().getValue(), ((org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStorageType()) != null ? java.lang.Integer.valueOf(org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStorageType().getValue()).toString() : ""), ((org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getPath()) != null ? org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getPath() : "")); org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.proceedProxyReturnValue(); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> domains = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); for (java.lang.String domain : _result.storageDomainList) { domains.add(new org.ovirt.engine.core.compat.Guid(domain)); } setReturnValue(domains); }	@java.lang.Override protected void executeVdsBrokerCommand() { result = org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getBroker().getStorageDomainsList(org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStorageDomainType().getValue(), ((org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStorageType()) != null ? java.lang.Integer.valueOf(org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStorageType().getValue()).toString() : ""), ((org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getPath()) != null ? org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getPath() : "")); org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.proceedProxyReturnValue(); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> domains = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); for (java.lang.String domain : result.storageDomainList) { domains.add(new org.ovirt.engine.core.compat.Guid(domain)); } setReturnValue(domains); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured, inFenceFlow, kernelFeatures); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured, reportedDnsResolverConfiguration, inFenceFlow, kernelFeatures); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Disk.class, to = org.ovirt.engine.api.model.DiskAttachment.class) public org.ovirt.engine.api.model.DiskAttachment mapDiskToDiskAttachment(org.ovirt.engine.api.model.Disk disk, org.ovirt.engine.api.model.DiskAttachment attachment) { if (disk.isSetInterface()) { attachment.setInterface(disk.getInterface()); } if (disk.isSetBootable()) { attachment.setBootable(disk.isBootable()); } return attachment; }	private org.ovirt.engine.core.common.businessentities.storage.DiskVmElement updateDiskVmElementFromDisk(org.ovirt.engine.api.model.Disk disk, org.ovirt.engine.core.common.businessentities.storage.DiskVmElement diskVmElement) { if (disk.isSetInterface()) { diskVmElement.setDiskInterface(org.ovirt.engine.core.common.businessentities.storage.DiskInterface.forValue(disk.getInterface().name().toLowerCase())); } if (disk.isSetBootable()) { diskVmElement.setBoot(disk.isBootable()); } return diskVmElement; }
private void edit() { if ((org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.list.AffinityGroupListModel.getWindow()) != null) { return; } org.ovirt.engine.core.common.scheduling.AffinityGroup affinityGroup = org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.list.AffinityGroupListModel.getSelectedItem(); if (affinityGroup == null) { return; } sortVms(affinityGroup); org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.model.AffinityGroupModel model = new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.model.EditAffinityGroupModel(affinityGroup, this, getClusterResolver()); model.init(); setWindow(model); }	private void edit() { if ((org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.list.AffinityGroupListModel.getWindow()) != null) { return; } org.ovirt.engine.core.common.scheduling.AffinityGroup affinityGroup = org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.list.AffinityGroupListModel.getSelectedItem(); if (affinityGroup == null) { return; } org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.model.AffinityGroupModel model = new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.model.EditAffinityGroupModel(affinityGroup, this, getClusterId(), getClusterName()); model.init(); setWindow(model); }
public org.ovirt.engine.core.utils.lock.EngineLock acquireMonitorLock(org.ovirt.engine.core.common.businessentities.VDS vds, java.lang.String lockReleaseMessage, org.slf4j.Logger log) { org.ovirt.engine.core.compat.Guid vdsId = vds.getId(); org.ovirt.engine.core.utils.lock.LockManager lockManager = org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager(); java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> exclusiveLocks = java.util.Collections.singletonMap(vdsId.toString(), new org.ovirt.engine.core.common.utils.Pair(LockingGroup.VDS_INIT.name(), "")); java.lang.String closingMessage = org.ovirt.engine.core.bll.VdsLocking.calculateClosingMessage(lockReleaseMessage, vds); org.ovirt.engine.core.utils.lock.EngineLock monitoringLock = new org.ovirt.engine.core.bll.VdsLocking.VdsEngineLock(exclusiveLocks, null, closingMessage, log); log.info("Before acquiring lock in order to prevent monitoring for host '{}' from data-center '{}'", vds.getName(), vds.getStoragePoolName()); lockManager.acquireLockWait(monitoringLock); log.info("Lock acquired, from now a monitoring of host will be skipped for host '{}' from data-center '{}'", vds.getName(), vds.getStoragePoolName()); return monitoringLock; }	public org.ovirt.engine.core.utils.lock.EngineLock acquireMonitorLock(org.ovirt.engine.core.common.businessentities.VDS host, java.lang.String lockReleaseMessage, org.slf4j.Logger log) { org.ovirt.engine.core.compat.Guid hostId = host.getId(); org.ovirt.engine.core.utils.lock.LockManager lockManager = org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager(); java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> exclusiveLocks = java.util.Collections.singletonMap(hostId.toString(), new org.ovirt.engine.core.common.utils.Pair(LockingGroup.VDS_INIT.name(), "")); java.lang.String closingMessage = org.ovirt.engine.core.bll.HostLocking.calculateClosingMessage(lockReleaseMessage, host); org.ovirt.engine.core.utils.lock.EngineLock monitoringLock = new org.ovirt.engine.core.bll.HostLocking.HostEngineLock(exclusiveLocks, null, closingMessage, log); log.info("Before acquiring lock in order to prevent monitoring for host '{}' from data-center '{}'", host.getName(), host.getStoragePoolName()); lockManager.acquireLockWait(monitoringLock); log.info("Lock acquired, from now a monitoring of host will be skipped for host '{}' from data-center '{}'", host.getName(), host.getStoragePoolName()); return monitoringLock; }
@org.junit.Test public void testAddClusterNamedDataCenter() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUpEntityQueryExpectations(VdcQueryType.GetStoragePoolByDatacenterName, org.ovirt.engine.core.common.queries.NameQueryParameters.class, new java.lang.String[]{ "Name" }, new java.lang.Object[]{ NAMES[1] }, setUpStoragePool(1)); setUpCreationExpectations(VdcActionType.AddVdsGroup, org.ovirt.engine.core.common.action.AddVdsGroupOperationParameters.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, true, true, GUIDS[0], VdcQueryType.GetVdsGroupById, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[0] }, getEntity(0)); org.ovirt.engine.api.model.Cluster model = org.ovirt.engine.api.restapi.resource.BackendClustersResourceTest.getModel(0); model.getDataCenter().setName(NAMES[1]); javax.ws.rs.core.Response response = collection.add(model); assertEquals(201, response.getStatus()); assertTrue(((response.getEntity()) instanceof org.ovirt.engine.api.model.Cluster)); verifyModel(((org.ovirt.engine.api.model.Cluster) (response.getEntity())), 0); }	@org.junit.Test public void testAddClusterNamedDataCenter() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUpEntityQueryExpectations(VdcQueryType.GetStoragePoolByDatacenterName, org.ovirt.engine.core.common.queries.NameQueryParameters.class, new java.lang.String[]{ "Name" }, new java.lang.Object[]{ NAMES[1] }, setUpStoragePool(1)); setUpCreationExpectations(VdcActionType.AddVdsGroup, org.ovirt.engine.core.common.action.AddClusterOperationParameters.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, true, true, GUIDS[0], VdcQueryType.GetVdsGroupById, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[0] }, getEntity(0)); org.ovirt.engine.api.model.Cluster model = org.ovirt.engine.api.restapi.resource.BackendClustersResourceTest.getModel(0); model.getDataCenter().setName(NAMES[1]); javax.ws.rs.core.Response response = collection.add(model); assertEquals(201, response.getStatus()); assertTrue(((response.getEntity()) instanceof org.ovirt.engine.api.model.Cluster)); verifyModel(((org.ovirt.engine.api.model.Cluster) (response.getEntity())), 0); }
@java.lang.Override protected void executeVmCommand() { super.executeVmCommand(); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.setVm(null); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVm().setVmtGuid(VmTemplateHandler.BLANK_VM_TEMPLATE_ID); this.vmStaticDao.update(org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVm().getStaticData()); }	@java.lang.Override protected void executeVmCommand() { super.executeVmCommand(); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.setVm(null); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVm().setVmtGuid(VmTemplateHandler.BLANK_VM_TEMPLATE_ID); vmStaticDao.update(org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVm().getStaticData()); }
private void connect(boolean isPasswordEmpty) { if (!isPasswordEmpty) { try { model.getAutoConnectableConsoles().get(0).connect(); alreadyOpened = true; } catch (org.ovirt.engine.ui.uicommonweb.models.VmConsoles e) { errorPopupManager.show(e.getLocalizedErrorMessage()); } } unregisterModels(); }	private void connect(boolean isPasswordDelegationPossible) { if (isPasswordDelegationPossible) { try { model.getAutoConnectableConsoles().get(0).connect(); alreadyOpened = true; } catch (org.ovirt.engine.ui.uicommonweb.models.VmConsoles e) { errorPopupManager.show(e.getLocalizedErrorMessage()); } } unregisterModels(); }
private synchronized java.util.Map<java.lang.String, java.lang.String> getMessages(java.util.Locale locale) { java.util.Map<java.lang.String, java.lang.String> messages; if (standardLocale.equals(locale)) { messages = standardMessages; } else { if ((messages = messagesByLocale.get(locale)) == null) { messages = retrieveByLocale(locale); messagesByLocale.put(locale, messages); } } return messages; }	private synchronized java.util.ResourceBundle getResourceBundle(java.util.Locale locale) { java.util.ResourceBundle resourceBundle = resourceBundlesByLocale.get(locale); if (resourceBundle == null) { resourceBundle = loadResourceBundle(locale); } return resourceBundle == null ? defaultResourceBundle : resourceBundle; }
protected boolean isDetachAllowed(final boolean isRemoveLast) { boolean returnValue = true; if ((getStoragePoolIsoMap()) == null) { returnValue = false; addCanDoActionMessage(EngineMessage.STORAGE_DOMAIN_NOT_ATTACHED_TO_STORAGE_POOL); } else if ((!isRemoveLast) && (isMaster())) { boolean isLastActive = org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomainDao().getAllForStoragePool(org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomain().getStoragePoolId()).stream().anyMatch(( a) -> (a.getId().equals(getStorageDomain().getId())) && ((a.getStatus()) == StorageDomainStatus.Active)); if (!isLastActive) { returnValue = false; addCanDoActionMessage(EngineMessage.ERROR_CANNOT_DETACH_LAST_STORAGE_DOMAIN); } } return returnValue; }	protected boolean isDetachAllowed(final boolean isRemoveLast) { boolean returnValue = true; if ((getStoragePoolIsoMap()) == null) { returnValue = false; addCanDoActionMessage(EngineMessage.STORAGE_DOMAIN_NOT_ATTACHED_TO_STORAGE_POOL); } else if ((!isRemoveLast) && (isMaster())) { returnValue = false; addCanDoActionMessage(EngineMessage.ERROR_CANNOT_DETACH_LAST_STORAGE_DOMAIN); } return returnValue; }
public void testGetConsoleAware(boolean allContent) throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); if (allContent) { java.util.List<java.lang.String> populates = new java.util.ArrayList<java.lang.String>(); populates.add("true"); expect(httpHeaders.getRequestHeader(BackendResource.POPULATE)).andReturn(populates).anyTimes(); setUpGetConsoleExpectations(new int[]{ 0 }); setUpGetVirtioScsiExpectations(new int[]{ 0 }); setUpGetRngDeviceExpectations(new int[]{ 0 }); setUpGetVmOvfExpectations(new int[]{ 0 }); } setUpGetEntityExpectations(1); setUpGetPayloadExpectations(0, 1); setUpGetBallooningExpectations(); setUpGetGraphicsExpectations(1); setUpGetCertuficateExpectations(); control.replay(); org.ovirt.engine.api.model.VM response = resource.get(); verifyModel(response, 0); verifyCertificate(response); java.util.List<java.lang.String> populateHeader = httpHeaders.getRequestHeader(BackendResource.POPULATE); boolean populated = (populateHeader != null) ? populateHeader.contains("true") : false; assertTrue((populated ? response.isSetConsole() : !(response.isSetConsole()))); }	public void testGetConsoleAware(boolean allContent) throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); if (allContent) { java.util.List<java.lang.String> populates = new java.util.ArrayList<java.lang.String>(); populates.add("true"); expect(httpHeaders.getRequestHeader(BackendResource.POPULATE)).andReturn(populates).anyTimes(); setUpGetConsoleExpectations(new int[]{ 0 }); setUpGetVirtioScsiExpectations(new int[]{ 0 }); setUpGetSoundcardExpectations(new int[]{ 0 }); setUpGetRngDeviceExpectations(new int[]{ 0 }); setUpGetVmOvfExpectations(new int[]{ 0 }); } setUpGetEntityExpectations(1); setUpGetPayloadExpectations(0, 1); setUpGetBallooningExpectations(); setUpGetGraphicsExpectations(1); setUpGetCertuficateExpectations(); control.replay(); org.ovirt.engine.api.model.VM response = resource.get(); verifyModel(response, 0); verifyCertificate(response); java.util.List<java.lang.String> populateHeader = httpHeaders.getRequestHeader(BackendResource.POPULATE); boolean populated = (populateHeader != null) ? populateHeader.contains("true") : false; assertTrue((populated ? response.isSetConsole() : !(response.isSetConsole()))); }
@java.lang.Override protected void executeQueryCommand() { java.lang.String internal = org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.AdminDomain); java.util.List<org.ovirt.engine.core.authentication.AuthenticationProfile> profiles = org.ovirt.engine.core.authentication.AuthenticationProfileManager.getInstance().getProfiles(); java.util.List<java.lang.String> names = new java.util.ArrayList(profiles.size()); for (org.ovirt.engine.core.authentication.AuthenticationProfile profile : profiles) { names.add(profile.getName()); } if (org.ovirt.engine.core.bll.GetDomainListQuery.getParameters().getFilterInternalDomain()) { names.remove(internal); } java.util.Collections.sort(names, new org.ovirt.engine.core.bll.LoginDomainComparator(internal)); org.ovirt.engine.core.bll.GetDomainListQuery.getQueryReturnValue().setReturnValue(names); }	@java.lang.Override protected void executeQueryCommand() { java.lang.String internal = org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.AdminDomain); java.util.List<org.ovirt.engine.core.authentication.AuthenticationProfile> profiles = org.ovirt.engine.core.authentication.AuthenticationProfileManager.getInstance().getProfiles(); java.util.List<java.lang.String> names = new java.util.ArrayList(profiles.size()); for (org.ovirt.engine.core.authentication.AuthenticationProfile profile : profiles) { names.add(profile.getName()); } if (org.ovirt.engine.core.bll.GetDomainListQuery.getParameters().getFilterInternalDomain()) { names.remove(internal); } java.util.Collections.sort(names, new org.ovirt.engine.core.bll.LoginDomainComparator(internal)); org.ovirt.engine.core.bll.GetDomainListQuery.getQueryReturnValue().setReturnValue(names); }
@org.junit.Test public void testPosixDcAndNotMatchingCompatiblityVersion() { storagePool.setcompatibility_version(Version.v3_0); storagePool.setIsLocal(false); org.ovirt.engine.core.bll.ValidationResult result = validator.isDcMatchingPosixCompatiblityVersion(); assertFalse(result.isValid()); org.ovirt.engine.core.bll.storage.StoragePoolValidatorTest.assertMessage(result, VdcBllMessages.DATA_CENTER_POSIX_STORAGE_NOT_SUPPORTED_IN_CURRENT_VERSION); }	@org.junit.Test public void testPosixDcAndNotMatchingCompatiblityVersion() { storagePool.setcompatibility_version(Version.v3_0); storagePool.setIsLocal(false); org.ovirt.engine.core.bll.ValidationResult result = validator.isPosixSupportedInDC(); assertFalse(result.isValid()); org.ovirt.engine.core.bll.storage.StoragePoolValidatorTest.assertMessage(result, VdcBllMessages.DATA_CENTER_POSIX_STORAGE_NOT_SUPPORTED_IN_CURRENT_VERSION); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepStatus(java.lang.String volumeName, java.lang.String slaveHost, java.lang.String slaveVolumeName) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.geoRepStatus").withParameter("volName", volumeName).withParameter("remoteHost", slaveHost).withParameter("remoteVolName", slaveVolumeName).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepSessionList(java.lang.String volumeName, java.lang.String slaveHost, java.lang.String slaveVolumeName) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.geoRepSessionList").withParameter("volName", volumeName).withParameter("remoteHost", slaveHost).withParameter("remoteVolName", slaveVolumeName).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc(response); }
@java.lang.Override protected void endWithFailure() { if ((commandCoordinatorUtil.getCommandExecutionStatus(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCommandId())) != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { changeStorageDomainStatusInTransaction(loadStoragePoolIsoMap(), StorageDomainStatus.Unknown); auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_OVF_UPDATE_INCOMPLETE); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getReturnValue().setEndActionTryAgain(false); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(false); } else if (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getParameters().isForceMaintenance()) { executeDeactivateCommand(); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); } else { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Active, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getReturnValue().setEndActionTryAgain(false); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(false); } }	@java.lang.Override protected void endWithFailure() { if ((commandCoordinatorUtil.getCommandExecutionStatus(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCommandId())) != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { changeStorageDomainStatusInTransaction(loadStoragePoolIsoMap(), StorageDomainStatus.Unknown); auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_OVF_UPDATE_INCOMPLETE); } else if (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getParameters().isForceMaintenance()) { executeDeactivateCommand(); } else { auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED); } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("NUMA Support") java.lang.String numaSupportTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Random Number Generator not supported for this cluster level or is disabled in the engine config.") java.lang.String rngNotSupported();
@java.lang.Override protected void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?, ?, ?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?, ?, ?> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params) { assert op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel; assert op2 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (op1)); org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel bond = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel) (op2)); java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> networksToReatach = ((nic.getItems()) != null) ? new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(nic.getItems()) : new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.clearNetworks(nic, allNics); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.attachNetworks(bond, networksToReatach, allNics); nic.getEntity().setBondName(bond.getEntity().getName()); }	@java.lang.Override protected void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params) { assert op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel; assert op2 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (op1)); org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel bond = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel) (op2)); java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> networksToReatach = ((nic.getItems()) != null) ? new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(nic.getItems()) : new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.clearNetworks(nic, allNics); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.attachNetworks(bond, networksToReatach, allNics); nic.getIface().setBondName(bond.getIface().getName()); }
com.google.gwt.http.client.RequestBuilder createRequest(java.lang.String engineAuthToken) { com.google.gwt.http.client.RequestBuilder builder = new com.google.gwt.http.client.RequestBuilder(com.google.gwt.http.client.RequestBuilder.GET, restApiBaseUrl); if (engineAuthToken != null) { builder.setHeader(org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.ENGINE_AUTH_TOKEN_HEADER, engineAuthToken); } builder.setHeader("Session-TTL", restApiSessionTimeout); builder.setHeader("Prefer", "persistent-auth, csrf-protection"); java.lang.String sessionId = getSessionId(); if (sessionId != null) { builder.setHeader(org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.SESSION_ID_HEADER, sessionId); } return builder; }	com.google.gwt.http.client.RequestBuilder createRequest(java.lang.String engineAuthToken) { com.google.gwt.http.client.RequestBuilder builder = new com.google.gwt.http.client.RequestBuilder(com.google.gwt.http.client.RequestBuilder.GET, restApiBaseUrl); builder.setHeader("Session-TTL", restApiSessionTimeout); java.lang.String preferValue = "persistent-auth, csrf-protection"; if (engineAuthToken != null) { preferValue += ", new-auth"; builder.setHeader(org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.ENGINE_AUTH_TOKEN_HEADER, engineAuthToken); } builder.setHeader("Prefer", preferValue); java.lang.String sessionId = getSessionId(); if (sessionId != null) { builder.setHeader(org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.SESSION_ID_HEADER, sessionId); } return builder; }
public static void updateCurrentCd(org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String currentCd) { org.ovirt.engine.core.dao.VmDynamicDAO vmDynamicDao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDao(); org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vm.getDynamicData(); vmDynamic.setCurrentCd(currentCd); vmDynamicDao.update(vmDynamic); }	public static void updateCurrentCd(org.ovirt.engine.core.compat.Guid vdsId, org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String currentCd) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vm.getDynamicData(); vmDynamic.setCurrentCd(currentCd); org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.UpdateVmDynamicData, new org.ovirt.engine.core.common.vdscommands.UpdateVmDynamicDataVDSCommandParameters(vdsId, vmDynamic)); }
private java.lang.String generateTicket() { org.ovirt.engine.core.common.action.SetVmTicketParameters parameters = new org.ovirt.engine.core.common.action.SetVmTicketParameters(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getParameters().getOptions().getVmId(), null, org.ovirt.engine.core.common.console.ConsoleOptions.TICKET_VALIDITY_SECONDS, org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getParameters().getOptions().getGraphicsType()); parameters.setSessionId(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getEngineContext().getSessionId()); parameters.setParametersCurrentUser(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getUser()); org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getBackend().runAction(VdcActionType.SetVmTicket, parameters); if (result.getSucceeded()) { return result.getActionReturnValue(); } throw new org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.TicketGenerationException(result); }	private java.lang.String generateTicket() { org.ovirt.engine.core.common.action.SetVmTicketParameters parameters = new org.ovirt.engine.core.common.action.SetVmTicketParameters(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getParameters().getOptions().getVmId(), null, org.ovirt.engine.core.common.console.ConsoleOptions.TICKET_VALIDITY_SECONDS, org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getParameters().getOptions().getGraphicsType()); parameters.setSessionId(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getEngineContext().getSessionId()); parameters.setParametersCurrentUser(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getUser()); org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getBackend().runAction(VdcActionType.SetVmTicket, parameters); if (!(result.getSucceeded())) { throw new org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.TicketGenerationException(result); } return result.getActionReturnValue(); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Same action, ${action}, is already in progress.") java.lang.String SAME_ACTION_ON_ENTITY_ALREADY_IN_PROGRESS();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot perform ${action}. Another power management action is already in progress.") java.lang.String POWER_MANAGEMENT_ACTION_ON_ENTITY_ALREADY_IN_PROGRESS();
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { this.getNumaNodeList().addAll(((java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode>) (returnValue))); this.initFirstLevelDistanceSetList(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getVMsWithVNumaNodesByClusterId(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.hosts.numa.NumaSupportModel.this.setVmsWithvNumaNodeList(((java.util.List<org.ovirt.engine.core.common.businessentities.VM>) (returnValue))); org.ovirt.engine.ui.uicommonweb.models.hosts.numa.NumaSupportModel.this.initVNumaNodes(); org.ovirt.engine.ui.uicommonweb.models.hosts.numa.NumaSupportModel.this.modelReady(); } }), this.hosts.getSelectedItem().getVdsGroupId()); }	@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { this.getNumaNodeList().addAll(((java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode>) (returnValue))); this.initFirstLevelDistanceSetList(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVMsWithVNumaNodesByClusterId(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.hosts.numa.NumaSupportModel.this.setVmsWithvNumaNodeList(((java.util.List<org.ovirt.engine.core.common.businessentities.VM>) (returnValue))); org.ovirt.engine.ui.uicommonweb.models.hosts.numa.NumaSupportModel.this.modelReady(); } }), this.hosts.getSelectedItem().getVdsGroupId()); }
public static boolean macHasMultiCastBitSet(long mac) { return ((org.ovirt.engine.core.utils.MacAddressRangeUtils.MAC_ADDRESS_MULTICAST_BIT) & mac) != 0; }	public static boolean macIsMulticast(long mac) { return ((org.ovirt.engine.core.utils.MacAddressRangeUtils.MAC_ADDRESS_MULTICAST_BIT) & mac) != 0; }
protected boolean setAndValidateCpuProfile() { return validate(org.ovirt.engine.core.bll.profiles.CpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getEffectiveCompatibilityVersion())); }	protected boolean setAndValidateCpuProfile() { return validate(org.ovirt.engine.core.bll.profiles.CpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData(), getEffectiveCompatibilityVersion())); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.StorageDeviceListReturnForXmlRpc getGlusterStorageDeviceList() { try { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = vdsServer.glusterStorageDevicesList(); org.ovirt.engine.core.vdsbroker.gluster.StorageDeviceListReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.gluster.StorageDeviceListReturnForXmlRpc(xmlRpcReturnValue); return wrapper; } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.StorageDeviceListReturnForXmlRpc glusterStorageDeviceList() { try { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = vdsServer.glusterStorageDevicesList(); org.ovirt.engine.core.vdsbroker.gluster.StorageDeviceListReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.gluster.StorageDeviceListReturnForXmlRpc(xmlRpcReturnValue); return wrapper; } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
public org.ovirt.engine.core.bll.ValidationResult defaultPoolFlagIsNotSet() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessages.ACTION_TYPE_FAILED_SETTING_DEFAULT_MAC_POOL_IS_NOT_SUPPORTED).when(macPool.isDefaultPool()); }	public org.ovirt.engine.core.bll.ValidationResult defaultPoolFlagIsNotSet() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_SETTING_DEFAULT_MAC_POOL_IS_NOT_SUPPORTED).when(macPool.isDefaultPool()); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("External network provider ${providerName} is read only.") java.lang.String ACTION_TYPE_FAILED_EXTERNAL_PROVIDER_IS_READ_ONLY();	@org.ovirt.engine.ui.frontend.DefaultStringValue("External network provider ${ACTION_TYPE_FAILED_EXTERNAL_PROVIDER_IS_READ_ONLY_ENTITY} is read only.") java.lang.String ACTION_TYPE_FAILED_EXTERNAL_PROVIDER_IS_READ_ONLY();
public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getLastVmsList() { return lastVmsList; }	public java.util.List<org.ovirt.engine.core.common.businessentities.VmDynamic> getLastVmsList() { return lastVmsList; }
@javax.annotation.PostConstruct private void init() { autoStartVmsToRestart = new java.util.concurrent.CopyOnWriteArraySet<>(getInitialVmsToStart()); int autoStartVmsRunnerIntervalInSeconds = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AutoStartVmsRunnerIntervalInSeconds); executor.scheduleWithFixedDelay(() -> startFailedAutoStartVms(), autoStartVmsRunnerIntervalInSeconds, autoStartVmsRunnerIntervalInSeconds, java.util.concurrent.TimeUnit.SECONDS); }	@javax.annotation.PostConstruct private void init() { autoStartVmsToRestart = new java.util.concurrent.CopyOnWriteArraySet<>(getInitialVmsToStart()); int autoStartVmsRunnerIntervalInSeconds = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AutoStartVmsRunnerIntervalInSeconds); executor.scheduleWithFixedDelay(this::startFailedAutoStartVms, autoStartVmsRunnerIntervalInSeconds, autoStartVmsRunnerIntervalInSeconds, java.util.concurrent.TimeUnit.SECONDS); }
protected boolean canAddVm(java.util.ArrayList<java.lang.String> reasons, java.util.Collection<org.ovirt.engine.core.common.businessentities.StorageDomain> destStorages) { org.ovirt.engine.core.common.businessentities.VmStatic vmStaticFromParams = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData(); if (!(canAddVm(reasons, vmStaticFromParams.getName(), org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId(), vmStaticFromParams.getPriority()))) { return false; } if (!(validateCustomProperties(vmStaticFromParams, reasons))) { return false; } if (shouldCheckSpaceInStorageDomains()) { if (!(org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId().equals(getStoragePoolIdFromSourceImageContainer()))) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH.toString()); return false; } for (org.ovirt.engine.core.common.businessentities.StorageDomain domain : destStorages) { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); if (!(validate(storageDomainValidator.isDomainExistAndActive()))) { return false; } } if (!(validateSpaceRequirements())) { return false; } } return org.ovirt.engine.core.bll.VmHandler.validateDedicatedVdsExistOnSameCluster(vmStaticFromParams, org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getValidateMessages()); }	protected boolean canAddVm(java.util.ArrayList<java.lang.String> reasons, java.util.Collection<org.ovirt.engine.core.common.businessentities.StorageDomain> destStorages) { org.ovirt.engine.core.common.businessentities.VmStatic vmStaticFromParams = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData(); if (!(canAddVm(reasons, vmStaticFromParams.getName(), org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId(), vmStaticFromParams.getPriority()))) { return false; } if (!(validateCustomProperties(vmStaticFromParams, reasons))) { return false; } if (shouldCheckSpaceInStorageDomains()) { if (!(org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId().equals(getStoragePoolIdFromSourceImageContainer()))) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH.toString()); return false; } for (org.ovirt.engine.core.common.businessentities.StorageDomain domain : destStorages) { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); if (!(validate(storageDomainValidator.isDomainExistAndActive()))) { return false; } } if (!(validateSpaceRequirements())) { return false; } } return org.ovirt.engine.core.bll.VmHandler.validateDedicatedVdsExistOnSameCluster(vmStaticFromParams, org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getValidationMessages()); }
@java.lang.Override public boolean isValid(java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> value, javax.validation.ConstraintValidatorContext context) { java.util.Collection<java.lang.String> staticIps = new java.util.HashSet<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface networkInterface : value) { java.lang.String address = networkInterface.getAddress(); if ((((networkInterface.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.NetworkBootProtocol.StaticIp)) && (address != null)) && (!("".equals(address)))) { if (staticIps.contains(networkInterface.getAddress())) { return false; } else { staticIps.add(networkInterface.getAddress()); } } } return true; }	@java.lang.Override public boolean isValid(java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> value, javax.validation.ConstraintValidatorContext context) { java.util.Collection<java.lang.String> staticIps = new java.util.HashSet<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface networkInterface : value) { java.lang.String address = networkInterface.getAddress(); if ((((networkInterface.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.NetworkBootProtocol.StaticIp)) && (address != null)) && (!(address.isEmpty()))) { if (staticIps.contains(networkInterface.getAddress())) { return false; } else { staticIps.add(networkInterface.getAddress()); } } } return true; }
protected void closeChannel() { try (org.ovirt.vdsm.jsonrpc.client.utils.LockWrapper wrapper = new org.ovirt.vdsm.jsonrpc.client.utils.LockWrapper(this.lock)) { try { if ((this.channel) != null) { this.channel.close(); } } catch (java.io.IOException e) { } finally { this.channel = null; } } }	protected void closeChannel() { final java.util.concurrent.Callable<java.lang.Void> callable = new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { if (lock.tryLock()) { try { if ((channel) != null) { channel.close(); } } catch (java.io.IOException e) { } finally { channel = null; lock.unlock(); } } else { scheduleTask(this); } return null; } }; try { callable.call(); } catch (java.lang.Exception e) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.warn("Closing channel failed", e); } }
@java.lang.Override protected boolean canMigrateVm(org.ovirt.engine.core.common.businessentities.VM vm) { if ((org.ovirt.engine.core.bll.InternalMigrateVmCommand.getVm().getMigrationSupport()) == (org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE)) { return super.canMigrateVm(vm); } else { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NON_MIGRTABLE); } }	@java.lang.Override protected boolean canMigrateVm(org.ovirt.engine.core.common.businessentities.VM vm) { if ((vm.getMigrationSupport()) == (org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE)) { return super.canMigrateVm(vm); } return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NON_MIGRTABLE); }
protected org.ovirt.engine.core.compat.Guid defaultQuotaIfNull(org.ovirt.engine.core.compat.Guid quotaId) { if ((quotaId == null) || (Guid.Empty.equals(quotaId))) { quotaId = org.ovirt.engine.core.bll.CommandBase.getStoragePool().getDefaultQuotaId(); } return quotaId; }	protected void addValidationMessages(java.util.List<org.ovirt.engine.core.common.errors.EngineMessage> messages) { getReturnValue().getValidationMessages().addAll(messages.stream().map(( m) -> m.name()).collect(java.util.stream.Collectors.toList())); }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); if (!(super.validate())) { return false; } if (!(validate(getBrickValidator().canStopOrCommitRemoveBrick(volume, getParameters().getBricks())))) { return false; } if ((!(getGlusterTaskUtils().isTaskOfType(volume, GlusterTaskType.REMOVE_BRICK))) || (!((getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.STARTED)) || (getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.FINISHED))))) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REMOVE_BRICKS_NOT_STARTED); } return true; }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); if (!(super.validate())) { return false; } if (!(validate(getBrickValidator().canStopOrCommitRemoveBrick(volume, getParameters().getBricks())))) { return false; } if ((!(getGlusterTaskUtils().isTaskOfType(volume, GlusterTaskType.REMOVE_BRICK))) || (!((getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.STARTED)) || (getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.FINISHED))))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REMOVE_BRICKS_NOT_STARTED); } return true; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(HasEntity.entityChangedEventDefinition)) { if (((sender == (getImageSourceLocalEnabled())) || (sender == (getImagePath()))) || (sender == (getImageUri()))) { recalculateImageDerivedFields(); } } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(HasEntity.entityChangedEventDefinition)) { if (((sender == (getImageSourceLocalEnabled())) || (sender == (getImagePath()))) || (sender == (getImageUri()))) { recalculateImageDerivedFields(); } } }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Remove Permission") java.lang.String removePermissionTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Remove Permission") java.lang.String removePermissionTitle();
@java.lang.Override protected boolean canDoAction() { boolean retValue = true; if ((org.ovirt.engine.core.bll.pm.StopVdsCommand.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.VdcActionType.Unknown)) { retValue = super.canDoAction(); if (((org.ovirt.engine.core.bll.pm.StopVdsCommand.getVds()) != null) && ((org.ovirt.engine.core.bll.pm.StopVdsCommand.getVds().getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance))) { addCanDoActionMessage(EngineMessages.VDS_STATUS_NOT_VALID_FOR_STOP); retValue = false; } } org.ovirt.engine.core.bll.pm.StopVdsCommand.getReturnValue().setCanDoAction(retValue); return retValue; }	@java.lang.Override protected boolean canDoAction() { boolean retValue = true; if ((org.ovirt.engine.core.bll.pm.StopVdsCommand.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.VdcActionType.Unknown)) { retValue = super.canDoAction(); if (((org.ovirt.engine.core.bll.pm.StopVdsCommand.getVds()) != null) && ((org.ovirt.engine.core.bll.pm.StopVdsCommand.getVds().getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance))) { addCanDoActionMessage(EngineMessage.VDS_STATUS_NOT_VALID_FOR_STOP); retValue = false; } } org.ovirt.engine.core.bll.pm.StopVdsCommand.getReturnValue().setCanDoAction(retValue); return retValue; }
public static void fillBondSlaves(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { java.util.Map<java.lang.String, java.util.List<java.lang.String>> bondToSlaves = org.ovirt.engine.core.common.utils.NetworkCommonUtils.getBondNameToBondSlavesMap(nics); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { if (nic instanceof org.ovirt.engine.core.common.businessentities.network.Bond) { org.ovirt.engine.core.common.businessentities.network.Bond bond = ((org.ovirt.engine.core.common.businessentities.network.Bond) (nic)); bond.setSlaves((bondToSlaves.containsKey(bond.getName()) ? bondToSlaves.get(bond.getName()) : java.util.Collections.<java.lang.String>emptyList())); } } }	public static void fillBondSlaves(java.util.Collection<? extends org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { java.util.Map<java.lang.String, java.util.List<java.lang.String>> bondToSlaves = org.ovirt.engine.core.common.utils.NetworkCommonUtils.getBondNameToBondSlavesMap(nics); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { if (nic instanceof org.ovirt.engine.core.common.businessentities.network.Bond) { org.ovirt.engine.core.common.businessentities.network.Bond bond = ((org.ovirt.engine.core.common.businessentities.network.Bond) (nic)); bond.setSlaves((bondToSlaves.containsKey(bond.getName()) ? bondToSlaves.get(bond.getName()) : java.util.Collections.<java.lang.String>emptyList())); } } }
private void revertPreviousHandlers() { getParameters().decrementExecutionIndex(); if ((getExecutionIndex()) >= 0) { log.errorFormat("Reverting task {0}, handler: {1}", getCurrentTaskHandler().getRevertTaskType(), getCurrentTaskHandler().getClass().getName()); getParameters().setExecutionReason(CommandExecutionReason.ROLLBACK_FLOW); getCurrentTaskHandler().compensate(); if (!(hasRevertTask())) { revertPreviousHandlers(); } } }	private void revertPreviousHandlers() { getParameters().decrementExecutionIndex(); if ((getExecutionIndex()) >= 0) { log.errorFormat("Reverting task {0}, handler: {1}", getCurrentTaskHandler().getRevertTaskType().name(), getCurrentTaskHandler().getClass().getName()); getParameters().setExecutionReason(CommandExecutionReason.ROLLBACK_FLOW); getCurrentTaskHandler().compensate(); if (!(hasRevertTask())) { revertPreviousHandlers(); } } }
private org.ovirt.engine.core.utils.lock.EngineLock retrieveVdsExecutionLock() { if ((lock) == null) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> exsluciveLock = java.util.Collections.singletonMap(org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getParameters().getVdsId().toString(), new org.ovirt.engine.core.common.utils.Pair(LockingGroup.VDS_EXECUTION.toString(), VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED.toString())); lock = new org.ovirt.engine.core.utils.lock.EngineLock(null, exsluciveLock); } return lock; }	private org.ovirt.engine.core.utils.lock.EngineLock retrieveVdsExecutionLock() { if ((lock) == null) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> exsluciveLock = java.util.Collections.singletonMap(org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getParameters().getVdsId().toString(), new org.ovirt.engine.core.common.utils.Pair(LockingGroup.VDS_EXECUTION.toString(), VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED.toString())); lock = new org.ovirt.engine.core.utils.lock.EngineLock(exsluciveLock, null); } return lock; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { if (user.isAdmin()) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(constants.admin()); } if (user.isGroup()) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(constants.group()); } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(constants.user()); }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { if (user.isAdmin()) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.webadmin.widget.table.column.UserStatusColumn.constants.admin()); } if (user.isGroup()) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.webadmin.widget.table.column.UserStatusColumn.constants.group()); } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.webadmin.widget.table.column.UserStatusColumn.constants.user()); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((args == null) || (!(args instanceof org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs))) { return; } org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)); if ((e.propertyName) == "SelectedItem") { updateUsbNativeMessageVisibility(object); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (!(args instanceof org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs)) { return; } org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)); if ((e.propertyName) == "SelectedItem") { updateUsbNativeMessageVisibility(object); } }
private int calculateCpuUsage(org.ovirt.engine.core.common.businessentities.VDS o1) { return ((o1.getusage_cpu_percent()) * (org.ovirt.engine.core.bll.VdsSelector.geteffective_cpu_cores(o1))) / (o1.getvds_strength()); }	private int calculateCpuUsage(org.ovirt.engine.core.common.businessentities.VDS o1) { return ((o1.getusage_cpu_percent()) * (org.ovirt.engine.core.bll.VdsSelector.getEffectiveCpuCores(o1))) / (o1.getvds_strength()); }
private void onDeleteSnapshot() { if ((getConfirmWindow()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())); java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> paramsList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity snapshot : ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity>) (getSelectedItems()))) { org.ovirt.engine.core.common.action.gluster.GlusterVolumeSnapshotActionParameters param = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeSnapshotActionParameters(getEntity().getId(), snapshot.getSnapshotName(), true); paramsList.add(param); } model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.DeleteGlusterVolumeSnapshot, paramsList, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())); localModel.stopProgress(); setConfirmWindow(null); } }, model); }	private void onDeleteSnapshot() { if ((getConfirmWindow()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())); java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> paramsList = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity snapshot : ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity>) (getSelectedItems()))) { org.ovirt.engine.core.common.action.gluster.GlusterVolumeSnapshotActionParameters param = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeSnapshotActionParameters(getEntity().getId(), snapshot.getSnapshotName(), true); paramsList.add(param); } model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.DeleteGlusterVolumeSnapshot, paramsList, true, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())); localModel.stopProgress(); setConfirmWindow(null); } }, model); }
@java.lang.Override @org.junit.Test public void validateFailedWrongPlugStatus() throws java.lang.Exception { mockVmStatusUp(); mockInterfaceList(); cretaeDiskWrongPlug(false); assertFalse(command.validate()); assertTrue(command.getReturnValue().getValidateMessages().contains(EngineMessage.HOT_UNPLUG_DISK_IS_NOT_PLUGGED.toString())); }	@java.lang.Override @org.junit.Test public void validateFailedWrongPlugStatus() throws java.lang.Exception { mockVmStatusUp(); mockInterfaceList(); cretaeDiskWrongPlug(false); assertFalse(command.validate()); assertTrue(command.getReturnValue().getValidationMessages().contains(EngineMessage.HOT_UNPLUG_DISK_IS_NOT_PLUGGED.toString())); }
public org.ovirt.engine.core.common.businessentities.VmDevice getVmDevice() { java.util.Map<java.lang.String, java.lang.Object> specParams = new java.util.HashMap<>(); specParams.put("action", action.name()); specParams.put("model", model.name()); return new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), id), VmDeviceGeneralType.WATCHDOG, VmDeviceType.WATCHDOG.getName(), "", specParams, true, true, false, "", null, null, null); }	public org.ovirt.engine.core.common.businessentities.VmDevice getVmDevice() { java.util.Map<java.lang.String, java.lang.Object> specParams = getSpecParams(); return new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), id), VmDeviceGeneralType.WATCHDOG, VmDeviceType.WATCHDOG.getName(), "", specParams, true, true, false, "", null, null, null); }
public org.ovirt.engine.core.bll.ValidationResult isDiskInterfaceSupportReadOnly() { if ((disk.getReadOnly()) && ((disk.getDiskInterface()) == (org.ovirt.engine.core.common.businessentities.DiskInterface.IDE))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_IDE_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult isReadOnlyPropertyCompatibleWithInterface() { if ((java.lang.Boolean.TRUE.equals(disk.getReadOnly())) && ((disk.getDiskInterface()) == (org.ovirt.engine.core.common.businessentities.DiskInterface.IDE))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_IDE_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.ProviderType providerType = org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getParameters().getProviderType(); java.util.List<org.ovirt.engine.core.common.businessentities.ProviderType> providerTypes = org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getParameters().getProviderTypes(); if (providerType == null) { setReturnValue(org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getDbFacade().getProviderDao().getAll()); } else if (providerTypes != null) { setReturnValue(org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getDbFacade().getProviderDao().getAllByTypes(providerTypes)); } else { setReturnValue(org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getDbFacade().getProviderDao().getAllByType(providerType)); } }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.ProviderType[] providerTypes = org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getParameters().getProviderTypes(); if (providerTypes == null) { setReturnValue(org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getDbFacade().getProviderDao().getAll()); } else { setReturnValue(org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getDbFacade().getProviderDao().getAllByTypes(providerTypes)); } }
@java.lang.Override public java.lang.String toString() { return ((java.util.Objects.toString(getFirst(), null)) + '.') + (java.util.Objects.toString(getSecond(), null)); }	@java.lang.Override public java.lang.String toString() { return ((java.util.Objects.toString(getFirst())) + '.') + (java.util.Objects.toString(getSecond())); }
protected boolean canDoAddVmCommand() { boolean returnValue = false; returnValue = areParametersLegal(org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages()); returnValue = (returnValue && (checkNumberOfMonitors())) && (checkSingleQxlDisplay()); returnValue = ((returnValue && (checkPciAndIdeLimit(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getOs(), org.ovirt.engine.core.bll.AddVmCommand.getVdsGroup().getcompatibility_version(), org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getNumOfMonitors(), getVmInterfaces(), getVmDisks(), isVirtioScsiEnabled(), org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages()))) && (canAddVm(org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages(), destStorages.values()))) && (hostToRunExist()); return returnValue; }	protected boolean canDoAddVmCommand() { boolean returnValue = false; returnValue = areParametersLegal(org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages()); returnValue = (returnValue && (checkNumberOfMonitors())) && (checkSingleQxlDisplay()); returnValue = ((returnValue && (checkPciAndIdeLimit(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getOs(), org.ovirt.engine.core.bll.AddVmCommand.getVdsGroup().getcompatibility_version(), org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getNumOfMonitors(), getVmInterfaces(), getVmDisks(), isVirtioScsiEnabled(), hasWatchdog(), isBalloonEnabled(), org.ovirt.engine.core.bll.AddVmCommand.getParameters().isSoundDeviceEnabled(), org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages()))) && (canAddVm(org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages(), destStorages.values()))) && (hostToRunExist()); return returnValue; }
private void setSessionUser(org.ovirt.engine.api.model.Session session) { try { org.ovirt.engine.api.model.User user = getUserResource().getUserByNameAndDomain(session.getUser().getUserName(), session.getUser().getDomain().getName()); if (user != null) { session.getUser().setId(user.getId()); session.getUser().setHref(user.getHref()); session.getUser().getDomain().setId(user.getDomain().getId()); session.getUser().getDomain().setHref(user.getDomain().getHref()); } } catch (javax.ws.rs.WebApplicationException ex) { } }	private void setSessionUser(org.ovirt.engine.api.model.Session session) { org.ovirt.engine.core.common.businessentities.aaa.DbUser entity = getEntity(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class, VdcQueryType.GetDbUserByUserNameAndDomain, new org.ovirt.engine.core.common.queries.GetDbUserByUserNameAndDomainQueryParameters(session.getUser().getUserName(), session.getUser().getDomain().getName()), "", false, false); if (entity != null) { org.ovirt.engine.api.model.User user = org.ovirt.engine.api.restapi.resource.BackendApiResource.getInstance().getUsersResource().getUserResource(entity.getId().toString()).get(); if (user != null) { session.getUser().setId(user.getId()); session.getUser().setHref(user.getHref()); session.getUser().getDomain().setId(user.getDomain().getId()); session.getUser().getDomain().setHref(user.getDomain().getHref()); } } }
public java.lang.String getLabel() { return button.getText(); }	@java.lang.Override protected com.google.gwt.user.client.ui.Widget getButtonWidget() { return button; }
protected void updateMetadataDevices() { if (((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getVds().getStoragePoolId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } }	protected void updateMetadataDevices() { if (((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getVds().getId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } }
@org.junit.Test public void testListWithEveryonePermissions() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations(null); setUpGetEntityExpectations(VdcQueryType.GetDbUserByUserId, org.ovirt.engine.core.common.queries.GetDbUserByUserIdParameters.class, new java.lang.String[]{ "UserId" }, new java.lang.Object[]{ GUIDS[1] }, getUserByIdx(1), 3); setUpQueryExpectations("", null, org.ovirt.engine.api.restapi.resource.EVERYONE); collection.setUriInfo(uriInfo); verifyCollection(getCollection()); }	@org.junit.Test public void testListWithEveryonePermissions() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations(null); setUpGetEntityExpectations(VdcQueryType.GetDbUserByUserId, org.ovirt.engine.core.common.queries.GetDbUserByUserIdParameters.class, new java.lang.String[]{ "UserId" }, new java.lang.Object[]{ GUIDS[1] }, getUserByIdx(1)); setUpQueryExpectations("", null, org.ovirt.engine.api.restapi.resource.EVERYONE); collection.setUriInfo(uriInfo); verifyCollection(getCollection()); }
private java.lang.String resolveMessage(java.lang.String message, java.util.Map<java.lang.String, java.util.LinkedList<java.lang.String>> variables) { java.lang.String returnValue = message; com.google.gwt.regexp.shared.RegExp regex = com.google.gwt.regexp.shared.RegExp.compile(org.ovirt.engine.ui.frontend.ErrorTranslator.VARIABLE_PATTERN, "gi"); com.google.gwt.regexp.shared.MatchResult result; while ((returnValue.length()) > 0) { result = regex.exec(returnValue); if (result == null) { break; } java.lang.String match = result.getGroup(0); java.lang.String key = match.substring(2, ((match.length()) - 1)); if (variables.containsKey(key)) { java.util.LinkedList<java.lang.String> values = variables.get(key); java.lang.String value = ((values.size()) == 1) ? values.getFirst() : (values.size()) > 1 ? values.removeFirst() : ""; returnValue = returnValue.replace(match, value); } regex.setLastIndex(0); } return returnValue; }	private java.lang.String resolveMessage(java.lang.String message, java.util.Map<java.lang.String, java.util.LinkedList<java.lang.String>> variables) { java.lang.String returnValue = message; com.google.gwt.regexp.shared.RegExp regex = com.google.gwt.regexp.shared.RegExp.compile(org.ovirt.engine.ui.frontend.ErrorTranslator.VARIABLE_PATTERN, "gi"); com.google.gwt.regexp.shared.MatchResult result; while ((returnValue.length()) > 0) { result = regex.exec(returnValue); if (result == null) { break; } java.lang.String match = result.getGroup(0); java.lang.String key = match.substring(2, ((match.length()) - 1)); if (variables.containsKey(key)) { java.util.LinkedList<java.lang.String> values = variables.get(key); java.lang.String value = ((values.size()) == 1) ? values.getFirst() : (values.size()) > 1 ? values.removeFirst() : ""; returnValue = returnValue.replace(match, value); } else { break; } regex.setLastIndex(0); } return returnValue; }
protected boolean initVdss() { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); org.ovirt.engine.core.compat.Guid vdsToRunOn = org.ovirt.engine.core.bll.scheduling.SchedulingManager.getInstance().schedule(org.ovirt.engine.core.bll.MigrateVmCommand.getVdsGroup(), org.ovirt.engine.core.bll.MigrateVmCommand.getVm(), getVdsBlackList(), getVdsWhiteList(), getDestinationVdsId(), new java.util.ArrayList<java.lang.String>(), new org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker(this, org.ovirt.engine.core.bll.scheduling.SchedulingManager.getInstance().getPendingResourceManager()), org.ovirt.engine.core.bll.MigrateVmCommand.getCorrelationId()); setDestinationVdsId(vdsToRunOn); if ((vdsToRunOn != null) && (!(Guid.Empty.equals(vdsToRunOn)))) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn); } org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); if ((vdsToRunOn != null) && (vdsToRunOn.equals(Guid.Empty))) { return false; } if (((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } return true; }	protected boolean initVdss() { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); org.ovirt.engine.core.compat.Guid vdsToRunOn = org.ovirt.engine.core.bll.scheduling.SchedulingManager.getInstance().schedule(org.ovirt.engine.core.bll.MigrateVmCommand.getVdsGroup(), org.ovirt.engine.core.bll.MigrateVmCommand.getVm(), getVdsBlackList(), getVdsWhiteList(), getDestinationVdsId(), new java.util.ArrayList<java.lang.String>(), new org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker(this), org.ovirt.engine.core.bll.MigrateVmCommand.getCorrelationId()); setDestinationVdsId(vdsToRunOn); if ((vdsToRunOn != null) && (!(Guid.Empty.equals(vdsToRunOn)))) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn); } org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); if ((vdsToRunOn != null) && (vdsToRunOn.equals(Guid.Empty))) { return false; } if (((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } return true; }
public void setVdsNeedsReinstall(boolean vdsNeedsReinstall) { vdsStatic.setVdsNeedsReinstall(vdsNeedsReinstall); }	public void setReinstallRequired(boolean reinstallRequired) { vdsStatic.setReinstallRequired(reinstallRequired); }
private void validateNicForNotRemovingLabeledNetworks(java.lang.String network, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { org.ovirt.engine.core.common.businessentities.network.Network removedNetwork = getExistingClusterNetworks().get(network); if (((org.ovirt.engine.core.utils.NetworkUtils.isLabeled(nic)) && (removedNetwork != null)) && (nic.getLabels().contains(removedNetwork.getLabel()))) { addViolation(EngineMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_LABELED_NETWORK_FROM_NIC, network); } }	private void validateNicForNotRemovingLabeledNetworks(java.lang.String network, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { org.ovirt.engine.core.common.businessentities.network.Network removedNetwork = getExistingClusterNetworks().get(network); if (((org.ovirt.engine.core.utils.NetworkUtils.isLabeled(nic)) && (removedNetwork != null)) && (nic.getLabels().contains(removedNetwork.getLabel()))) { addViolation(EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_LABELED_NETWORK_FROM_NIC, network); } }
private void verifyLocalDataCenterNoCluster(final java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.StoragePool>> filteredDataCenters, final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterList(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters) { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(dataCenter.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } } localDataCenters.removeAll(localDataCenterWithCluster); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { filteredDataCenters.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(dataCenter)); } displayAddDataCenter(filteredDataCenters); } })); }	private void verifyLocalDataCenterNoCluster(final java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.StoragePool>> filteredDataCenters, final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterList(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters) { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(dataCenter.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } } localDataCenters.removeAll(localDataCenterWithCluster); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { filteredDataCenters.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(dataCenter)); } displayAddDataCenter(filteredDataCenters); } })); }
public void setHighlyAvailableIsConfigured(java.lang.Boolean value) { this.mVdsStatistics.setHighlyAvailableIsConfigured(value); }	public void setHighlyAvailableIsConfigured(boolean value) { this.mVdsStatistics.setHighlyAvailableIsConfigured(value); }
@java.lang.Override protected boolean validate() { if ((getProvider()) == null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST); } org.ovirt.engine.core.bll.provider.ProviderProxy providerProxy = getProviderProxy(); if (providerProxy == null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_NOT_SUPPORTED, java.lang.String.format("$providerType %1$s", getProvider().getType())); } org.ovirt.engine.core.bll.provider.ProviderValidator validator = getProviderProxy().getProviderValidator(); return (validate(validator.nameAvailable())) && (validate(validator.validateAddProvider())); }	@java.lang.Override protected boolean validate() { if ((getProvider()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST); } org.ovirt.engine.core.bll.provider.ProviderProxy providerProxy = getProviderProxy(); if (providerProxy == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_NOT_SUPPORTED, java.lang.String.format("$providerType %1$s", getProvider().getType())); } org.ovirt.engine.core.bll.provider.ProviderValidator validator = getProviderProxy().getProviderValidator(); return (validate(validator.nameAvailable())) && (validate(validator.validateAddProvider())); }
public java.lang.String getTemplate(java.lang.String docParams, org.ovirt.engine.sdk.entities.DetailedLink dl) { java.lang.StringBuilder buffer = new java.lang.StringBuilder(); java.util.List<org.ovirt.engine.sdk.entities.Parameter> urlParameters = org.ovirt.engine.sdk.codegen.utils.LinkUtils.getUrlParameters(dl); java.util.List<org.ovirt.engine.sdk.entities.Header> headers = org.ovirt.engine.sdk.codegen.utils.LinkUtils.getHeaders(dl); if (!(urlParameters.isEmpty())) { buffer.append(getTemplate(urlParameters, new java.util.ArrayList<org.ovirt.engine.sdk.entities.Header>(0), dl.getRequest().getBody().getType(), org.ovirt.engine.sdk.codegen.utils.StringUtils.combine(docParams, org.ovirt.engine.sdk.codegen.documentation.DocsGen.generateUrlParameters(dl)))); } if (!(headers.isEmpty())) { for (int i = 1; i <= (headers.size()); i++) { java.util.List<org.ovirt.engine.sdk.entities.Header> headerSublist = headers.subList(0, i); buffer.append(getTemplate(urlParameters, headerSublist, dl.getRequest().getBody().getType(), org.ovirt.engine.sdk.codegen.utils.StringUtils.combine(docParams, org.ovirt.engine.sdk.codegen.documentation.DocsGen.generateHeaders(dl), org.ovirt.engine.sdk.codegen.documentation.DocsGen.generateUrlParameters(dl)))); } } return buffer.toString(); }	public java.lang.String getTemplate(java.lang.String docParams, org.ovirt.engine.sdk.entities.DetailedLink dl) { java.lang.StringBuilder buffer = new java.lang.StringBuilder(); java.util.List<org.ovirt.engine.sdk.entities.Parameter> urlParameters = org.ovirt.engine.sdk.codegen.utils.LinkUtils.getUrlParameters(dl); java.util.List<org.ovirt.engine.sdk.entities.Header> headers = org.ovirt.engine.sdk.codegen.utils.LinkUtils.getHeaders(dl); if (!(urlParameters.isEmpty())) { buffer.append(getTemplate(urlParameters, new java.util.ArrayList<org.ovirt.engine.sdk.entities.Header>(0), dl.getRequest().getBody().getType(), org.ovirt.engine.sdk.codegen.utils.StringUtils.combine(docParams, org.ovirt.engine.sdk.codegen.documentation.DocsGen.generateUrlParameters(dl)))); } if (!(headers.isEmpty())) { for (int i = 1; i <= (headers.size()); i++) { java.util.List<org.ovirt.engine.sdk.entities.Header> headerSublist = headers.subList(0, i); buffer.append(getTemplate(urlParameters, headerSublist, dl.getRequest().getBody().getType(), org.ovirt.engine.sdk.codegen.utils.StringUtils.combine(docParams, org.ovirt.engine.sdk.codegen.documentation.DocsGen.generateHeaders(headerSublist), org.ovirt.engine.sdk.codegen.documentation.DocsGen.generateUrlParameters(dl)))); } } return buffer.toString(); }
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn mergeSnapshots(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String imgGUID, java.lang.String ancestorUUID, java.lang.String successorUUID, java.lang.String postZero, boolean discard);	org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn mergeSnapshots(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String imgGUID, java.lang.String ancestorUUID, java.lang.String successorUUID, java.lang.String postZero, java.lang.Boolean discard);
@java.lang.Override public void saveVmNumaNode(org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode, org.ovirt.engine.core.compat.Guid vmId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = createVmNumaNodeParametersMapper(vmNumaNode).addValue("vm_or_vds_guid", vmId); java.util.List<org.springframework.jdbc.core.namedparam.MapSqlParameterSource> numaNodeCpusExecutions = new java.util.ArrayList(vmNumaNode.getCpuIds().size()); for (java.lang.Integer cpuId : vmNumaNode.getCpuIds()) { numaNodeCpusExecutions.add(createVmNumaNodeCpusParametersMapper(vmNumaNode, cpuId)); } getCallsHandler().executeModification("InsertNumaNode", parameterSource); getCallsHandler().executeStoredProcAsBatch("InsertNumaNodeCpu", numaNodeCpusExecutions); }	private java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.Integer>> getAllNumaNodeCpuMap() { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> numaNodesCpus = getCallsHandler().executeReadList("GetAllFromNumaNodeCpuMap", org.ovirt.engine.core.dao.VmNumaNodeDAODbFacadeImpl.vmNumaNodeCpusRowMapper, null); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.Integer>> numaNodesCpusMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer> pair : numaNodesCpus) { if (!(numaNodesCpusMap.containsKey(pair.getFirst()))) { numaNodesCpusMap.put(pair.getFirst(), new java.util.ArrayList<java.lang.Integer>()); } numaNodesCpusMap.get(pair.getFirst()).add(pair.getSecond()); } return numaNodesCpusMap; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionList = new java.util.ArrayList<>(); permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_DISK_STORAGE)); return permissionList; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionList = new java.util.ArrayList<>(); permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_DISK_STORAGE)); return permissionList; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VM object) { return null; }	@java.lang.Override protected java.lang.String getReason(org.ovirt.engine.core.common.businessentities.VM value) { return value.getStopReason(); }
private boolean networksUniquelyConfiguredOnHost(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure) { boolean passed = true; java.util.Set<org.ovirt.engine.core.compat.Guid> networkIds = new java.util.HashSet(attachmentsToConfigure.size()); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : attachmentsToConfigure) { if (networkIds.contains(attachment.getNetworkId())) { org.ovirt.engine.core.common.businessentities.network.Network network = networkBusinessEntityMap.get(attachment.getNetworkId()); addViolation(VdcBllMessages.NETWORKS_ALREADY_ATTACHED_TO_IFACES, network.getName()); passed = false; } else { networkIds.add(attachment.getNetworkId()); } } return passed; }	private org.ovirt.engine.core.bll.ValidationResult networksUniquelyConfiguredOnHost(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure) { java.util.Set<org.ovirt.engine.core.compat.Guid> networkIds = new java.util.HashSet(attachmentsToConfigure.size()); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : attachmentsToConfigure) { if (networkIds.contains(attachment.getNetworkId())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORKS_ALREADY_ATTACHED_TO_IFACES); } else { networkIds.add(attachment.getNetworkId()); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.gluster.BrickProfileDetails object) { return object.getBrickName(); }	@java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.gluster.BrickProfileDetails object) { return object.getName(); }
@java.lang.Override public int compareTo(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<T> o) { if ((getMajorSortKey()) == (o.getMajorSortKey())) { return org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator.comp(getName(), o.getName()); } else { return (getMajorSortKey()) < (o.getMajorSortKey()) ? -1 : 1; } }	@java.lang.Override public int compareTo(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<T> o) { return org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator.comp(getName(), o.getName()); }
private void processSelectionChanged() { java.util.List<T> selectedItems = getSelectedItems(); selectedIndexes.clear(); model.getItems().forEach(( item) -> { if (selectedItems.contains(item)) { selectedIndexes.add(model.getItemsAsList().indexOf(item)); } }); updateInfoPanel(); }	private void processSelectionChanged() { java.util.List<T> selectedItems = getSelectionModel().getSelectedObjects(); selectedIndexes.clear(); model.getItems().forEach(( item) -> { if (selectedItems.contains(item)) { selectedIndexes.add(model.getItemsAsList().indexOf(item)); } }); updateInfoPanel(); }
public boolean evaluate(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm) { if (!(org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasMemoryToRunVM(vds, vm, pendingResourceManager))) { if ((org.ovirt.engine.core.bll.scheduling.pending.PendingVM.collectForHost(pendingResourceManager, vds).size()) == 0) { return false; } org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker.log.debug("not enough memory on host. throttling..."); delayer.delay(vds.getId()); vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vds.getId()); return org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasMemoryToRunVM(vds, vm, pendingResourceManager); } return true; }	public boolean evaluate(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm) { if (!(org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasMemoryToRunVM(vds, vm))) { if ((vds.getPendingVmemSize()) == 0) { return false; } org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker.log.debug("not enough memory on host. throttling..."); delayer.delay(vds.getId()); vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vds.getId()); return org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasMemoryToRunVM(vds, vm); } return true; }
@org.junit.Test public void testGetEntityNameByIdAndTypeForRole() { org.ovirt.engine.core.common.businessentities.roles role = dbFacade.getRoleDao().get(org.ovirt.engine.core.dao.DbFacadeDAOTest.ROLE_ID); assertNotNull(role); java.lang.String name = role.getname(); assertTrue(name.equals(dbFacade.getEntityNameByIdAndType(org.ovirt.engine.core.dao.DbFacadeDAOTest.ROLE_ID, VdcObjectType.Role))); }	@org.junit.Test public void testGetEntityNameByIdAndTypeForRole() { org.ovirt.engine.core.common.businessentities.Role role = dbFacade.getRoleDao().get(org.ovirt.engine.core.dao.DbFacadeDAOTest.ROLE_ID); assertNotNull(role); java.lang.String name = role.getname(); assertTrue(name.equals(dbFacade.getEntityNameByIdAndType(org.ovirt.engine.core.dao.DbFacadeDAOTest.ROLE_ID, VdcObjectType.Role))); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Num of IO Threads exceeds supported limit.") java.lang.String ACTION_TYPE_FAILED_NUM_OF_IOTHREADS_TOO_HIGH();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Num of IO Threads is not in supported limit.") java.lang.String ACTION_TYPE_FAILED_NUM_OF_IOTHREADS_INCORRECT();
protected void refreshBootParameters(org.ovirt.engine.core.common.action.RunVmParams runVmParameters) { refreshBootSequenceParameter(runVmParameters); org.ovirt.engine.core.bll.RunVmCommand.getVm().setLastStartTime(new java.util.Date()); }	protected void refreshBootParameters(org.ovirt.engine.core.common.action.RunVmParams runVmParameters) { if (runVmParameters == null) { return; } org.ovirt.engine.core.bll.RunVmCommand.getVm().setboot_sequence(org.ovirt.engine.core.bll.RunVmCommand.getVm().getdefault_boot_sequence()); }
private void refreshReposIfNeeded(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType, java.lang.Boolean forceRefresh) { org.apache.commons.lang.mutable.MutableLong lastRefreshed = domainsLastRefreshedTime.computeIfAbsent(storageDomainId, ( k) -> new org.apache.commons.lang.mutable.MutableLong((-1))); if ((shouldForceRefresh(forceRefresh)) || (shouldInvalidateCache(lastRefreshed.longValue()))) { synchronized(lastRefreshed) { if (forceRefresh || (shouldInvalidateCache(lastRefreshed.longValue()))) { boolean refreshSucceeded = refreshRepos(storageDomainId, imageType); lastRefreshed.setValue(java.lang.System.currentTimeMillis()); if (!refreshSucceeded) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IMAGES_NOT_SUPPORTED_ERROR); } } } } }	private void refreshReposIfNeeded(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType, java.lang.Boolean forceRefresh) { org.apache.commons.lang.mutable.MutableLong lastRefreshed = domainsLastRefreshedTime.computeIfAbsent(storageDomainId, ( k) -> new org.apache.commons.lang.mutable.MutableLong((-1))); if ((shouldForceRefresh(forceRefresh)) || (shouldInvalidateCache(lastRefreshed.longValue()))) { synchronized(lastRefreshed) { if ((shouldForceRefresh(forceRefresh)) || (shouldInvalidateCache(lastRefreshed.longValue()))) { boolean refreshSucceeded = refreshRepos(storageDomainId, imageType); lastRefreshed.setValue(java.lang.System.currentTimeMillis()); if (!refreshSucceeded) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IMAGES_NOT_SUPPORTED_ERROR); } } } } }
public void makeSortable(java.lang.String sortBy) { org.ovirt.engine.ui.common.widget.table.column.SortableColumn.setSortable(true); this.sortBy = sortBy; }	public void makeSortable(java.lang.String sortBy) { assert sortBy != null : "sortBy cannot be null"; this.sortBy = sortBy; this.comparator = null; org.ovirt.engine.ui.common.widget.table.column.SortableColumn.setSortable(true); }
@java.lang.Override protected void executeCommand() { final org.ovirt.engine.core.common.businessentities.StorageDomain dom = org.ovirt.engine.core.bll.storage.domains.RemoveStorageDomainCommand.getStorageDomain(); org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.bll.storage.domains.RemoveStorageDomainCommand.getVds(); boolean format = org.ovirt.engine.core.bll.storage.domains.RemoveStorageDomainCommand.getParameters().getDoFormat(); org.ovirt.engine.core.bll.storage.domains.RemoveStorageDomainCommand.setSucceeded(false); if (detachLocalStorageDomain(dom)) { return; } if (format) { org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, org.ovirt.engine.core.common.errors.EngineFault> connectResult = connectStorage(); if (!(connectResult.getFirst())) { org.ovirt.engine.core.bll.storage.domains.RemoveStorageDomainCommand.getReturnValue().setFault(connectResult.getSecond()); return; } boolean failed = !(formatStorage(dom, vds)); disconnectStorage(); if (failed) { return; } } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Object>() { @java.lang.Override public java.lang.Object runInTransaction() { getStorageHelper(dom).storageDomainRemoved(dom.getStorageStaticData()); getStorageDomainDao().remove(dom.getId()); return null; } }); org.ovirt.engine.core.bll.storage.domains.RemoveStorageDomainCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { final org.ovirt.engine.core.common.businessentities.StorageDomain dom = org.ovirt.engine.core.bll.storage.domain.RemoveStorageDomainCommand.getStorageDomain(); org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.bll.storage.domain.RemoveStorageDomainCommand.getVds(); boolean format = org.ovirt.engine.core.bll.storage.domain.RemoveStorageDomainCommand.getParameters().getDoFormat(); org.ovirt.engine.core.bll.storage.domain.RemoveStorageDomainCommand.setSucceeded(false); if (detachLocalStorageDomain(dom)) { return; } if (format) { org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, org.ovirt.engine.core.common.errors.EngineFault> connectResult = connectStorage(); if (!(connectResult.getFirst())) { org.ovirt.engine.core.bll.storage.domain.RemoveStorageDomainCommand.getReturnValue().setFault(connectResult.getSecond()); return; } boolean failed = !(formatStorage(dom, vds)); disconnectStorage(); if (failed) { return; } } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Object>() { @java.lang.Override public java.lang.Object runInTransaction() { getStorageHelper(dom).storageDomainRemoved(dom.getStorageStaticData()); getStorageDomainDao().remove(dom.getId()); return null; } }); org.ovirt.engine.core.bll.storage.domain.RemoveStorageDomainCommand.setSucceeded(true); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.Template incoming, org.ovirt.engine.core.common.businessentities.VmTemplate entity) { org.ovirt.engine.core.common.businessentities.VmTemplate updated = getMapper(modelType, org.ovirt.engine.core.common.businessentities.VmTemplate.class).map(incoming, entity); updated.setUsbPolicy(org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate(incoming.getUsb(), entity.getUsbPolicy(), lookupCluster(updated.getVdsGroupId()))); org.ovirt.engine.core.common.action.UpdateVmTemplateParameters params = new org.ovirt.engine.core.common.action.UpdateVmTemplateParameters(updated); params.setConsoleEnabled(((incoming.isSetConsoleDeviceEnabled()) && (incoming.isConsoleDeviceEnabled()))); return params; }	@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.Template incoming, org.ovirt.engine.core.common.businessentities.VmTemplate entity) { org.ovirt.engine.core.common.businessentities.VmTemplate updated = getMapper(modelType, org.ovirt.engine.core.common.businessentities.VmTemplate.class).map(incoming, entity); updated.setUsbPolicy(org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate(incoming.getUsb(), entity.getUsbPolicy(), lookupCluster(updated.getVdsGroupId()))); return getMapper(modelType, org.ovirt.engine.core.common.action.UpdateVmTemplateParameters.class).map(incoming, new org.ovirt.engine.core.common.action.UpdateVmTemplateParameters(updated)); }
@java.lang.Override public void setSanStorageModel(org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel sanStorageModel) { super.setSanStorageModel(sanStorageModel); sanStorageModel.getLunSelectionChangedEvent().getListeners().clear(); sanStorageModel.getLunSelectionChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.String description = getDescription().getEntity(); if (((description == null) || (description.isEmpty())) || ((!(description.isEmpty())) && (descriptionDerivedFromLunId))) { org.ovirt.engine.ui.uicommonweb.models.storage.LunModel selectedLunModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.ValueEventArgs<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>) (args)).getValue(); if ((selectedLunModel.getLunId()) != null) { java.lang.String newDescription = selectedLunModel.getLunId().substring(((selectedLunModel.getLunId().length()) - 4)); getDescription().setEntity(newDescription); descriptionDerivedFromLunId = true; } } } }); }	@java.lang.Override public void setSanStorageModel(org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel sanStorageModel) { super.setSanStorageModel(sanStorageModel); if (!(sanStorageModel.getLunSelectionChangedEvent().getListeners().contains(lunSelectionChangedEventListener))) { sanStorageModel.getLunSelectionChangedEvent().addListener(lunSelectionChangedEventListener); } }
public org.ovirt.engine.core.dao.gluster.GlusterBrickDao getGlusterBrickDao() { return GlusterCommandBase.getDbFacade().getGlusterBrickDao(); }	protected org.ovirt.engine.core.dao.gluster.GlusterBrickDao getGlusterBrickDao() { return GlusterCommandBase.getDbFacade().getGlusterBrickDao(); }
@java.lang.Override protected void init() { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSnapshot(); org.ovirt.engine.core.common.businessentities.VM vm = readVmFromSnapshot(snapshot); if (vm == null) { return; } setVm(vm); if ((org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getParameters().getVm()) == null) { return; } vm.setVdsGroupId(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getParameters().getVm().getVdsGroupId()); if ((org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVdsGroup()) == null) { return; } vm.setStoragePoolId(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVdsGroup().getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : getDiskImageDao().getAllSnapshotsForVmSnapshot(snapshot.getId())) { vm.getDiskMap().put(diskImage.getId(), diskImage); vm.getDiskList().add(diskImage); } org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getParameters().setVm(vm); super.init(); }	@java.lang.Override protected void init() { if ((org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getParameters().getVm()) == null) { return; } setVdsGroupId(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getParameters().getVm().getVdsGroupId()); if ((org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVdsGroup()) == null) { return; } setStoragePoolId(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVdsGroup().getStoragePoolId()); org.ovirt.engine.core.common.businessentities.VM vm = getVmFromConfiguration(); if (vm == null) { return; } vm.setVdsGroupId(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVdsGroupId()); vm.setStoragePoolId(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getStoragePoolId()); setVm(vm); org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getParameters().setVm(vm); setSnapshotName(((getSnapshot()) != null ? getSnapshot().getDescription() : null)); super.init(); }
protected org.ovirt.engine.core.vdsbroker.vdsbroker.FenceStatusReturnForXmlRpc fenceNode(org.ovirt.engine.core.common.businessentities.pm.FenceActionType actionType, boolean applyFencingPolicy) { return FenceVdsVDSCommand.getBroker().fenceNode(FenceVdsVDSCommand.getParameters().getFenceAgent().getIp(), ((FenceVdsVDSCommand.getParameters().getFenceAgent().getPort()) == null ? "" : FenceVdsVDSCommand.getParameters().getFenceAgent().getPort().toString()), FenceVdsVDSCommand.getParameters().getFenceAgent().getType(), FenceVdsVDSCommand.getParameters().getFenceAgent().getUser(), FenceVdsVDSCommand.getParameters().getFenceAgent().getPassword(), actionType.getValue(), "", FenceVdsVDSCommand.getParameters().getFenceAgent().getOptions(), (applyFencingPolicy ? FenceVdsVDSCommand.getParameters().getFencingPolicyParams() : null)); }	protected org.ovirt.engine.core.vdsbroker.vdsbroker.FenceStatusReturnForXmlRpc fenceNode(org.ovirt.engine.core.common.businessentities.pm.FenceActionType fenceAction) { org.ovirt.engine.core.common.businessentities.FenceAgent agent = FenceVdsVDSCommand.getParameters().getFenceAgent(); return FenceVdsVDSCommand.getBroker().fenceNode(agent.getIp(), ((agent.getPort()) == null ? "" : agent.getPort().toString()), agent.getType(), agent.getUser(), agent.getPassword(), fenceAction.getValue(), "", agent.getOptions(), ((FenceVdsVDSCommand.getParameters().getAction()) != (org.ovirt.engine.core.common.businessentities.pm.FenceActionType.STATUS) ? FenceVdsVDSCommand.getParameters().getFencingPolicyParams() : null)); }
@org.junit.Test public void newVnicProfileNoNetworkFilterId() { when(vnicProfile.getNetworkFilterId()).thenReturn(null); assertThat(validator.validNetworkFilterForNewVnicProfile(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }	@org.junit.Test public void testValidNetworkFilterIdUseDefaultNoFilterId() { assertThat(validator.validUseDefaultNetworkFilterFlag(true), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(dynamicMessages.ovirtVersionAbout()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.userNameAboutLabel()); }	void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(dynamicMessages.ovirtVersionAbout()); }
private void checkClusterAdditionalFeaturesSupported(org.ovirt.engine.core.common.businessentities.VDSGroup cluster, org.ovirt.engine.core.common.businessentities.VDS vds) { java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> clusterSupportedFeatures = clusterFeatureDao.getSupportedFeaturesByClusterId(cluster.getId()); java.util.Set<java.lang.String> hostSupportedFeatures = hostFeatureDao.getSupportedHostFeaturesByHostId(vds.getId()); for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature : clusterSupportedFeatures) { if ((feature.isEnabled()) && (!(hostSupportedFeatures.contains(feature.getFeature().getName())))) { java.util.Map<java.lang.String, java.lang.String> customLogValues = new java.util.HashMap<>(); customLogValues.put("UnSupportedFeature", feature.getFeature().getName()); reportNonOperationReason(NonOperationalReason.HOST_FEATURES_INCOMPATIBILE_WITH_CLUSTER, customLogValues); return; } } return; }	private void checkClusterAdditionalFeaturesSupported(org.ovirt.engine.core.common.businessentities.VDSGroup cluster, org.ovirt.engine.core.common.businessentities.VDS vds) { java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> clusterSupportedFeatures = org.ovirt.engine.core.bll.HandleVdsVersionCommand.getClusterFeatureDao().getSupportedFeaturesByClusterId(cluster.getId()); java.util.Set<java.lang.String> hostSupportedFeatures = org.ovirt.engine.core.bll.HandleVdsVersionCommand.getSupportedHostFeatureDao().getSupportedHostFeaturesByHostId(vds.getId()); for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature : clusterSupportedFeatures) { if ((feature.isEnabled()) && (!(hostSupportedFeatures.contains(feature.getFeature().getName())))) { java.util.Map<java.lang.String, java.lang.String> customLogValues = new java.util.HashMap<>(); customLogValues.put("UnSupportedFeature", feature.getFeature().getName()); reportNonOperationReason(NonOperationalReason.HOST_FEATURES_INCOMPATIBILE_WITH_CLUSTER, customLogValues); return; } } return; }
@org.junit.Test public void testTemplateOvfImportWithoutDbGenerationBackwardCompatiliblity() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmTemplate template = org.ovirt.engine.core.bll.OvfManagerTest.createVmTemplate(); java.lang.String xml = manager.ExportTemplate(template, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(), Version.v3_0); assertNotNull(xml); java.lang.String replacedXml = xml.replaceAll("Generation", "test_replaced"); final org.ovirt.engine.core.common.businessentities.VmTemplate newtemplate = new org.ovirt.engine.core.common.businessentities.VmTemplate(); manager.ImportTemplate(replacedXml, newtemplate, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(), new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>()); assertEquals("imported template is different than expected", template, newtemplate); assertTrue("imported db generation is different than expected", ((newtemplate.getDbGeneration()) == 1)); }	@org.junit.Test public void testTemplateOvfImportWithoutDbGenerationBackwardCompatiliblity() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmTemplate template = org.ovirt.engine.core.utils.ovf.OvfManagerTest.createVmTemplate(); java.lang.String xml = manager.ExportTemplate(template, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(), Version.v3_0); assertNotNull(xml); java.lang.String replacedXml = xml.replaceAll("Generation", "test_replaced"); final org.ovirt.engine.core.common.businessentities.VmTemplate newtemplate = new org.ovirt.engine.core.common.businessentities.VmTemplate(); manager.ImportTemplate(replacedXml, newtemplate, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(), new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>()); assertEquals("imported template is different than expected", template, newtemplate); assertTrue("imported db generation is different than expected", ((newtemplate.getDbGeneration()) == 1)); }
@org.junit.Test public void testHandleActionResult_isRaiseErrorModalPanel_withActionMessageSize1() { org.ovirt.engine.core.common.errors.VdcFault testFault = new org.ovirt.engine.core.common.errors.VdcFault(); when(mockEventsHandler.isRaiseErrorModalPanel(VdcActionType.AddDisk, testFault)).thenReturn(true); java.lang.Object testState = new java.lang.Object(); org.ovirt.engine.core.common.action.VdcActionParametersBase testParameters = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnValue.setFault(testFault); returnValue.setDescription("This is a description"); returnValue.getCanDoActionMessages().add("Message 1"); returnValue.setCanDoAction(false); frontend.handleActionResult(VdcActionType.AddDisk, testParameters, returnValue, mockActionCallback, testState, false); verify(mockActionCallback).executed(callbackParam.capture()); assertEquals("Parameters should match", testParameters, callbackParam.getValue().getParameters()); assertEquals("Result should match", returnValue, callbackParam.getValue().getReturnValue()); assertEquals("States should match", testState, callbackParam.getValue().getState()); assertEquals("Action type should match", VdcActionType.AddDisk, callbackParam.getValue().getActionType()); org.mockito.ArgumentCaptor<org.ovirt.engine.ui.frontend.FrontendFailureEventArgs> failureCaptor = org.mockito.ArgumentCaptor.forClass(org.ovirt.engine.ui.frontend.FrontendFailureEventArgs.class); verify(mockFrontendFailureEvent).raise(eq(org.ovirt.engine.ui.frontend.Frontend.class), failureCaptor.capture()); assertEquals("Descriptions should match", "This is a description", failureCaptor.getValue().getMessage().getDescription()); assertEquals("Text should match", "Message 1", failureCaptor.getValue().getMessage().getText()); }	@org.junit.Test public void testHandleActionResult_isRaiseErrorModalPanel_withActionMessageSize1() { org.ovirt.engine.core.common.errors.VdcFault testFault = new org.ovirt.engine.core.common.errors.VdcFault(); when(mockEventsHandler.isRaiseErrorModalPanel(VdcActionType.AddDisk, testFault)).thenReturn(true); java.lang.Object testState = new java.lang.Object(); org.ovirt.engine.core.common.action.VdcActionParametersBase testParameters = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnValue.setFault(testFault); returnValue.setDescription("This is a description"); returnValue.getCanDoActionMessages().add("Message 1"); returnValue.setCanDoAction(false); frontend.handleActionResult(VdcActionType.AddDisk, testParameters, returnValue, mockActionCallback, testState, false); verify(mockActionCallback).executed(callbackParam.capture()); assertEquals("Parameters should match", testParameters, callbackParam.getValue().getParameters()); assertEquals("Result should match", returnValue, callbackParam.getValue().getReturnValue()); assertEquals("States should match", testState, callbackParam.getValue().getState()); assertEquals("Action type should match", VdcActionType.AddDisk, callbackParam.getValue().getActionType()); org.mockito.ArgumentCaptor<org.ovirt.engine.ui.frontend.FrontendFailureEventArgs> failureCaptor = org.mockito.ArgumentCaptor.forClass(org.ovirt.engine.ui.frontend.FrontendFailureEventArgs.class); verify(mockFrontendFailureEvent).raise(eq(org.ovirt.engine.ui.frontend.Frontend.class), failureCaptor.capture()); assertEquals("Descriptions should match", "This is a description", failureCaptor.getValue().getMessage().getDescription()); assertEquals("Text should match translation", "message 1", failureCaptor.getValue().getMessage().getText()); }
@java.lang.Override public java.lang.String getNewName() { return org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getParameters().getNetwork().getName(); }	@java.lang.Override public java.lang.String getEntityNewName() { return org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getParameters().getNetwork().getName(); }
public void calculateFreeVirtualMemory() { if ((((getMemCommited()) != null) && ((getPhysicalMemMb()) != null)) && ((getReservedMem()) != null)) { maxSchedulingMemory = (((getMaxVdsMemoryOverCommit()) * (getPhysicalMemMb())) / 100.0F) - (((getMemCommited()) + (getReservedMem())) - (getPendingVmemSize())); maxSchedulingMemory = ((maxSchedulingMemory) > 0) ? maxSchedulingMemory : 0; } }	public void calculateFreeVirtualMemory() { if ((((getMemCommited()) != null) && ((getPhysicalMemMb()) != null)) && ((getReservedMem()) != null)) { maxSchedulingMemory = (((((getMaxVdsMemoryOverCommit()) * (getPhysicalMemMb())) / 100.0F) - (getMemCommited())) - (getReservedMem())) - (getPendingVmemSize()); maxSchedulingMemory = ((maxSchedulingMemory) > 0) ? maxSchedulingMemory : 0; } }
@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, org.ovirt.engine.core.common.businessentities.VmBase vm) { super.build(model, vm); vm.setAllowConsoleReconnect(model.getAllowConsoleReconnect().getEntity()); vm.setVmType(model.getVmType().getSelectedItem()); vm.setVdsGroupId(model.getSelectedCluster().getId()); vm.setTimeZone(((model.getTimeZone().getIsAvailable()) && ((model.getTimeZone().getSelectedItem()) != null) ? model.getTimeZone().getSelectedItem().getTimeZoneKey() : "")); vm.setIsoPath((model.getCdImage().getIsChangable() ? model.getCdImage().getSelectedItem() : "")); vm.setDeleteProtected(model.getIsDeleteProtected().getEntity()); vm.setOsId(model.getOSType().getSelectedItem()); vm.setVncKeyboardLayout(model.getVncKeyboardLayout().getSelectedItem()); vm.setSerialNumberPolicy(model.getSerialNumberPolicy().getSelectedSerialNumberPolicy()); vm.setCustomSerialNumber(model.getSerialNumberPolicy().getCustomSerialNumber().getEntity()); vm.setBootMenuEnabled(model.getBootMenuEnabled().getEntity()); vm.setSpiceFileTransferEnabled(model.getSpiceFileTransferEnabled().getEntity()); vm.setSpiceCopyPasteEnabled(model.getSpiceCopyPasteEnabled().getEntity()); vm.setCustomProperties(model.getCustomPropertySheet().serialize()); }	@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, org.ovirt.engine.core.common.businessentities.VmBase vm) { super.build(model, vm); vm.setAllowConsoleReconnect(model.getAllowConsoleReconnect().getEntity()); vm.setVmType(model.getVmType().getSelectedItem()); vm.setVdsGroupId(model.getSelectedCluster().getId()); vm.setTimeZone(((model.getTimeZone().getIsAvailable()) && ((model.getTimeZone().getSelectedItem()) != null) ? model.getTimeZone().getSelectedItem().getTimeZoneKey() : "")); vm.setIsoPath((model.getCdImage().getIsChangable() ? model.getCdImage().getSelectedItem() : "")); vm.setDeleteProtected(model.getIsDeleteProtected().getEntity()); vm.setOsId(model.getOSType().getSelectedItem()); vm.setVncKeyboardLayout(model.getVncKeyboardLayout().getSelectedItem()); vm.setSerialNumberPolicy(model.getSerialNumberPolicy().getSelectedSerialNumberPolicy()); vm.setCustomSerialNumber(model.getSerialNumberPolicy().getCustomSerialNumber().getEntity()); vm.setBootMenuEnabled(model.getBootMenuEnabled().getEntity()); vm.setSpiceFileTransferEnabled(model.getSpiceFileTransferEnabled().getEntity()); vm.setSpiceCopyPasteEnabled(model.getSpiceCopyPasteEnabled().getEntity()); vm.setAutoConverge(model.getAutoConverge().getSelectedItem()); vm.setMigrateCompressed(model.getMigrateCompressed().getSelectedItem()); vm.setCustomProperties(model.getCustomPropertySheet().serialize()); }
protected void onStopVmsSucceeded() { org.ovirt.engine.core.bll.RemoveVmPoolCommand.setSucceeded(((removeVmsInPool()) && (removeVmPool()))); org.ovirt.engine.core.bll.RemoveVmPoolCommand.log(); }	@java.lang.Override protected void endSuccessfully() { org.ovirt.engine.core.bll.RemoveVmPoolCommand.setSucceeded(((removeAllVmsInPool()) && (removeVmPool()))); org.ovirt.engine.core.bll.RemoveVmPoolCommand.log(); }
@org.junit.Test public void testListWithOneObject() { java.util.List<org.ovirt.engine.api.types.V4Vm> list = java.util.Collections.singletonList(newVm().build()); assertEquals("[{}]", listToJson(list.iterator())); }	@org.junit.Test public void testListWithOneObject() { java.util.List<org.ovirt.engine.api.types.V4Vm> list = java.util.Collections.singletonList(vm().build()); assertEquals("[{}]", listToJson(list.iterator())); }
public static void GetRedirectServletReportsPage(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.String) (source)) : ""; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.RedirectServletReportsPage, org.ovirt.engine.core.common.config.ConfigCommon.defaultConfigurationVersion), aQuery); }	public static void GetRedirectServletReportsPage(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.String) (source)) : ""; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.RedirectServletReportsPage, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }
@java.lang.SuppressWarnings({ "rawtypes", "unchecked" }) private static java.lang.Object parseValue(java.lang.String value, java.lang.String name, java.lang.Class<?> fieldType) { if (value == null) { return null; } try { if (fieldType == (java.lang.Integer.class)) { return java.lang.Integer.parseInt(value); } else if (fieldType == (java.lang.Boolean.class)) { return java.lang.Boolean.parseBoolean(value); } else if (fieldType == (org.ovirt.engine.core.compat.Version.class)) { return new org.ovirt.engine.core.compat.Version(value); } else if (fieldType == (java.util.Date.class)) { return new java.text.SimpleDateFormat("k:m:s").parse(value); } else if (fieldType == (java.lang.Double.class)) { return java.lang.Double.parseDouble(value); } else if (java.util.Map.class.isAssignableFrom(fieldType)) { if ((org.apache.commons.lang.StringUtils.startsWith(value, "{")) && (org.apache.commons.lang.StringUtils.endsWith(value, "}"))) { return new org.ovirt.engine.core.utils.serialization.json.JsonObjectDeserializer().deserialize(value, java.util.HashMap.class); } else { return value; } } else if (fieldType.isEnum()) { return java.lang.Enum.valueOf(((java.lang.Class<java.lang.Enum>) (fieldType)), value.toUpperCase()); } else if (fieldType == (org.ovirt.engine.core.common.businessentities.SerialNumberPolicy.class)) { return org.ovirt.engine.core.common.businessentities.SerialNumberPolicy.valueOf(value); } else { return value; } } catch (java.lang.Exception e2) { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.log.errorFormat("Could not parse option {0} value.", name); return null; } }	@java.lang.SuppressWarnings({ "rawtypes", "unchecked" }) private static java.lang.Object parseValue(java.lang.String value, java.lang.String name, java.lang.Class<?> fieldType) { if (value == null) { return null; } try { if (fieldType == (java.lang.Integer.class)) { return java.lang.Integer.parseInt(value); } else if (fieldType == (java.lang.Boolean.class)) { return java.lang.Boolean.parseBoolean(value); } else if (fieldType == (org.ovirt.engine.core.compat.Version.class)) { return new org.ovirt.engine.core.compat.Version(value); } else if (fieldType == (java.util.Date.class)) { return new java.text.SimpleDateFormat("k:m:s").parse(value); } else if (fieldType == (java.lang.Double.class)) { return java.lang.Double.parseDouble(value); } else if (java.util.Map.class.isAssignableFrom(fieldType)) { if ((org.apache.commons.lang.StringUtils.startsWith(value, "{")) && (org.apache.commons.lang.StringUtils.endsWith(value, "}"))) { return new org.ovirt.engine.core.utils.serialization.json.JsonObjectDeserializer().deserialize(value, java.util.HashMap.class); } else { return value; } } else if (fieldType.isEnum()) { return java.lang.Enum.valueOf(((java.lang.Class<java.lang.Enum>) (fieldType)), value.toUpperCase()); } else { return value; } } catch (java.lang.Exception e2) { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.log.errorFormat("Could not parse option {0} value.", name); return null; } }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase object) { driver.edit(object); initLists(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (propName.equals("IsValid")) { onIsValidPropertyChange(object); } } }); }	@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase object) { driver.edit(object); initLists(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (propName.equals("IsValid")) { onIsValidPropertyChange(object); } } }); }
protected <T> T doGetEntity(java.lang.Class<T> clz, org.ovirt.engine.core.common.queries.VdcQueryType query, org.ovirt.engine.core.common.queries.VdcQueryParametersBase queryParams, java.lang.String identifier) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = runQuery(query, queryParams); if ((!(result.getSucceeded())) || ((result.getReturnValue()) == null)) { if ((result.getExceptionString()) != null) { throw new org.ovirt.engine.api.restapi.resource.BackendFailureException(localize(result.getExceptionString()), org.ovirt.engine.api.restapi.util.ErrorMessageHelper.getErrorStatus(result.getExceptionString())); } else { throw new org.ovirt.engine.api.restapi.resource.EntityNotFoundException(identifier); } } return clz.cast(result.getReturnValue()); }	protected <T> T doGetEntity(java.lang.Class<T> clz, org.ovirt.engine.core.common.queries.VdcQueryType query, org.ovirt.engine.core.common.queries.VdcQueryParametersBase queryParams, java.lang.String identifier) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = runQuery(query, queryParams); if ((!(result.getSucceeded())) || ((result.getReturnValue()) == null)) { if ((result.getExceptionString()) != null) { backendFailure(result.getExceptionString()); } else { throw new org.ovirt.engine.api.restapi.resource.EntityNotFoundException(identifier); } } return clz.cast(result.getReturnValue()); }
protected void removeVmNetwork() { new org.ovirt.engine.core.bll.network.VmInterfaceManager().removeAllInterfacesAndMacsFromList(getVmId(), macsAdded); }	protected void removeVmNetworkInterfaces() { new org.ovirt.engine.core.bll.network.VmInterfaceManager().removeAll(getVmId()); }
@java.lang.Override protected boolean canDoAction() { if ((((!(isValidParametersList())) || (!(isLiveMigrationEnabled()))) || (!(checkImagesStatus()))) || (!(isValidSpaceRequirements()))) { return false; } for (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : getParameters().getParametersList()) { org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getReturnValue().setCanDoAction(((((isDiskNotShareable(parameters.getImageId())) && (isTemplateInDestStorageDomain(parameters.getImageId(), parameters.getStorageDomainId()))) && (validatSourceStorageDomain(parameters.getImageId()))) && (validateDestStorage(parameters.getImageId(), parameters.getStorageDomainId())))); if (!(org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getReturnValue().getCanDoAction())) { return false; } } return true; }	@java.lang.Override protected boolean canDoAction() { if ((((!(isValidParametersList())) || (!(isLiveMigrationEnabled()))) || (!(checkImagesStatus()))) || (!(isValidSpaceRequirements()))) { return false; } for (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : getParameters().getParametersList()) { org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getReturnValue().setCanDoAction(((((isDiskNotShareable(parameters.getImageId())) && (isTemplateInDestStorageDomain(parameters.getImageId(), parameters.getStorageDomainId()))) && (validateSourceStorageDomain(parameters.getImageId()))) && (validateDestStorage(parameters.getImageId(), parameters.getStorageDomainId())))); if (!(org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getReturnValue().getCanDoAction())) { return false; } } return true; }
private static boolean diskProfilePermitted(org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile, java.util.Set<org.ovirt.engine.core.compat.Guid> permittedDiskProfilesIds, org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { return (permittedDiskProfilesIds.contains(diskProfile.getId())) || ((org.ovirt.engine.core.bll.profiles.DiskProfileHelper.getPermissionDAO().getEntityPermissions(user.getId(), ActionGroup.ATTACH_DISK_PROFILE, diskProfile.getId(), VdcObjectType.DiskProfile)) != null); }	private static boolean isDiskProfilePermitted(org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile, java.util.Set<org.ovirt.engine.core.compat.Guid> permittedDiskProfilesIds, org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { return (permittedDiskProfilesIds.contains(diskProfile.getId())) || ((org.ovirt.engine.core.bll.profiles.DiskProfileHelper.getPermissionDAO().getEntityPermissions(user.getId(), ActionGroup.ATTACH_DISK_PROFILE, diskProfile.getId(), VdcObjectType.DiskProfile)) != null); }
@org.junit.Test public void testUpdateCantDo() throws java.lang.Exception { doTestBadUpdate(false, true, org.ovirt.engine.api.restapi.resource.foreman.CANT_DO); }	@org.junit.Test public void testUpdateCantDo() throws java.lang.Exception { doTestBadUpdate(false, true, org.ovirt.engine.api.restapi.resource.externalhostproviders.CANT_DO); }
@org.junit.Test public void validateSpaceNotWithinThreshold() throws java.lang.Exception { initCommand(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(storageDomainValidator).isDomainWithinThresholds(); doReturn(storageDomainValidator).when(command).createStorageDomainValidator(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); assertFalse(command.validateSpaceRequirements()); }	@org.junit.Test public void validateSpaceNotWithinThreshold() throws java.lang.Exception { initCommand(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(storageDomainValidator).isDomainWithinThresholds(); doReturn(storageDomainValidator).when(command).createStorageDomainValidator(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); assertFalse(command.validateSpaceRequirements()); }
@java.lang.Override public boolean validate() { if (!(getIsAvailable())) { return true; } getOutAverageLinkshare().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(0, org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.HOST_NETWORK_QOS_MAX_SHARES) }); org.ovirt.engine.ui.uicommonweb.validation.IValidation[] rateRangeValidation = new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(0, ((java.lang.Integer) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.MaxAverageNetworkQoSValue)))) }; getOutAverageUpperlimit().validateEntity(rateRangeValidation); getOutAverageRealtime().validateEntity(rateRangeValidation); setIsValid((((getOutAverageLinkshare().getIsValid()) && (getOutAverageUpperlimit().getIsValid())) && (getOutAverageRealtime().getIsValid()))); return getIsValid(); }	@java.lang.Override public boolean validate() { if ((!(getIsChangable())) || (!(getIsAvailable()))) { return true; } getOutAverageLinkshare().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(1, ((java.lang.Integer) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.MaxHostNetworkQosShares)))) }); org.ovirt.engine.ui.uicommonweb.validation.IValidation[] rateRangeValidation = new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(0, ((java.lang.Integer) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.MaxAverageNetworkQoSValue)))) }; getOutAverageUpperlimit().validateEntity(rateRangeValidation); getOutAverageRealtime().validateEntity(rateRangeValidation); setIsValid((((getOutAverageLinkshare().getIsValid()) && (getOutAverageUpperlimit().getIsValid())) && (getOutAverageRealtime().getIsValid()))); return getIsValid(); }
public static boolean validateDedicatedVdsExistOnSameCluster(org.ovirt.engine.core.common.businessentities.VmBase vm, java.util.ArrayList<java.lang.String> canDoActionMessages) { boolean result = true; for (org.ovirt.engine.core.compat.Guid vdsId : vm.getDedicatedVmForVdsList()) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vdsId); if (vds == null) { if (canDoActionMessages != null) { canDoActionMessages.add(EngineMessages.ACTION_TYPE_FAILED_DEDICATED_VDS_DOES_NOT_EXIST.toString()); } result = false; } else if (!(java.util.Objects.equals(vm.getVdsGroupId(), vds.getVdsGroupId()))) { if (canDoActionMessages != null) { canDoActionMessages.add(EngineMessages.ACTION_TYPE_FAILED_DEDICATED_VDS_NOT_IN_SAME_CLUSTER.toString()); } result = false; } } return result; }	public static boolean validateDedicatedVdsExistOnSameCluster(org.ovirt.engine.core.common.businessentities.VmBase vm, java.util.ArrayList<java.lang.String> canDoActionMessages) { boolean result = true; for (org.ovirt.engine.core.compat.Guid vdsId : vm.getDedicatedVmForVdsList()) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vdsId); if (vds == null) { if (canDoActionMessages != null) { canDoActionMessages.add(EngineMessage.ACTION_TYPE_FAILED_DEDICATED_VDS_DOES_NOT_EXIST.toString()); } result = false; } else if (!(java.util.Objects.equals(vm.getVdsGroupId(), vds.getVdsGroupId()))) { if (canDoActionMessages != null) { canDoActionMessages.add(EngineMessage.ACTION_TYPE_FAILED_DEDICATED_VDS_NOT_IN_SAME_CLUSTER.toString()); } result = false; } } return result; }
protected void updateUsbNativeMessageVisibility(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel object) { org.ovirt.engine.core.compat.Version compatibilityVersion = object.getEffectiveCompatibilityVersion(); changeApplicationLevelVisibility(nativeUsbWarningMessage, ((((object.getUsbPolicy().getSelectedItem()) == (org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE)) && (compatibilityVersion != null)) && (!((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.MigrationSupportForNativeUsb, compatibilityVersion.getValue())))))); }	protected void updateUsbNativeMessageVisibility(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel object) { org.ovirt.engine.core.compat.Version compatibilityVersion = object.getCompatibilityVersion(); changeApplicationLevelVisibility(nativeUsbWarningMessage, ((((object.getUsbPolicy().getSelectedItem()) == (org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE)) && (compatibilityVersion != null)) && (!((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.MigrationSupportForNativeUsb, compatibilityVersion.getValue())))))); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.dao.DbGroupDAO dao = org.ovirt.engine.core.bll.AddGroupCommand.getAdGroupDAO(); org.ovirt.engine.core.common.businessentities.DbGroup groupToAdd = org.ovirt.engine.core.bll.AddGroupCommand.getParameters().getGroupToAdd(); org.ovirt.engine.core.common.businessentities.DbGroup dbGroup = dao.getByExternalId(groupToAdd.getDomain(), groupToAdd.getExternalId()); org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.compat.Guid.newGuid(); if (dbGroup == null) { groupToAdd.setId(id); dao.save(groupToAdd); } else { groupToAdd.setId(id); dao.update(groupToAdd); } setActionReturnValue(groupToAdd.getId()); org.ovirt.engine.core.bll.AddGroupCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.dao.DbGroupDAO dao = org.ovirt.engine.core.bll.AddGroupCommand.getAdGroupDAO(); org.ovirt.engine.core.common.businessentities.DbGroup groupToAdd = org.ovirt.engine.core.bll.AddGroupCommand.getParameters().getGroupToAdd(); org.ovirt.engine.core.common.businessentities.DbGroup dbGroup = dao.getByExternalId(groupToAdd.getDomain(), groupToAdd.getExternalId()); if (dbGroup == null) { dao.save(groupToAdd); } else { dao.update(dbGroup); } setActionReturnValue(groupToAdd.getId()); org.ovirt.engine.core.bll.AddGroupCommand.setSucceeded(true); }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = createSnapshotsValidator(); if ((!(validate(snapshotsValidator.snapshotExists(getSnapshot())))) || (!(validate(snapshotsValidator.vmNotDuringSnapshot(getSnapshot().getVmId()))))) { return false; } vmFromConfiguration = getVmFromConfiguration(); if ((vmFromConfiguration) == null) { addCanDoActionMessage(EngineMessages.ACTION_TYPE_FAILED_VM_SNAPSHOT_HAS_NO_CONFIGURATION); addCanDoActionMessageVariable("VmName", org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmName()); addCanDoActionMessageVariable("SnapshotName", org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getSnapshotName()); return false; } if (!(super.canDoAction())) { return false; } if (!(checkCanDisableVirtIoScsi())) { return false; } return true; }	@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = createSnapshotsValidator(); if ((!(validate(snapshotsValidator.snapshotExists(getSnapshot())))) || (!(validate(snapshotsValidator.vmNotDuringSnapshot(getSnapshot().getVmId()))))) { return false; } vmFromConfiguration = getVmFromConfiguration(); if ((vmFromConfiguration) == null) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_VM_SNAPSHOT_HAS_NO_CONFIGURATION); addCanDoActionMessageVariable("VmName", org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmName()); addCanDoActionMessageVariable("SnapshotName", org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getSnapshotName()); return false; } if (!(super.canDoAction())) { return false; } if (!(checkCanDisableVirtIoScsi())) { return false; } return true; }
protected java.util.Map<java.lang.String, java.lang.String> extractServers(java.lang.String serversXml) { if (org.apache.commons.lang.StringUtils.isEmpty(serversXml)) { throw new java.lang.RuntimeException("Could not get the peer list!"); } try { return getServerFingerprints(org.ovirt.engine.core.utils.XmlUtils.loadXmlDoc(serversXml).getElementsByTagName(org.ovirt.engine.core.utils.gluster.GlusterUtil.PEER)); } catch (java.lang.Exception e) { log.errorFormat("Error while parsing peer list xml [{0}]!", serversXml, e); throw new java.lang.RuntimeException(e); } }	protected java.util.Set<java.lang.String> extractServers(java.lang.String serversXml) { if (org.apache.commons.lang.StringUtils.isEmpty(serversXml)) { throw new java.lang.RuntimeException("Could not get the peer list!"); } try { return getServers(org.ovirt.engine.core.utils.XmlUtils.loadXmlDoc(serversXml).getElementsByTagName(org.ovirt.engine.core.utils.gluster.GlusterUtil.PEER)); } catch (java.lang.Exception e) { log.errorFormat("Error while parsing peer list xml [{0}]!", serversXml, e); throw new java.lang.RuntimeException(e); } }
public static java.io.InputStream loadAsStream(java.lang.String fileName) { return org.ovirt.engine.api.rsdl.RsdlIOManager.class.getResourceAsStream(fileName); }	public static java.io.InputStream loadAsStream(java.lang.String resourceName) { return org.ovirt.engine.api.rsdl.RsdlIOManager.class.getResourceAsStream(resourceName); }
static void verifyModelWithIso(org.ovirt.engine.api.model.Cdrom model, java.lang.String isoPath) { assertEquals(Guid.Empty.toString(), model.getId()); assertTrue(model.isSetVm()); assertEquals(org.ovirt.engine.api.restapi.resource.BackendTemplateCdromsResourceTest.TEMPLATE_ID.toString(), model.getVm().getId()); assertTrue(model.isSetFile()); assertEquals(isoPath, model.getFile().getId()); }	private void verifyModel(org.ovirt.engine.api.model.Cdrom model) { assertEquals(Guid.Empty.toString(), model.getId()); assertTrue(model.isSetTemplate()); assertEquals(org.ovirt.engine.api.restapi.resource.BackendTemplateCdromsResourceTest.TEMPLATE_ID.toString(), model.getTemplate().getId()); assertTrue(model.isSetFile()); assertEquals(org.ovirt.engine.api.restapi.resource.BackendTemplateCdromsResourceTest.ISO_PATH, model.getFile().getId()); verifyLinks(model); }
@java.lang.Override public void init(final T model) { super.init(model); model.getPropertyChangedEvent().addListener(( ev, sender, args) -> { org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel model1 = ((org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel) (sender)); java.lang.String propertyName = args.propertyName; if ("Message".equals(propertyName)) { getView().setMessageLabel(model1.getMessage()); } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleSubnetVisibility(model.getExport().getEntity()); model.getExport().getEntityChangedEvent().addListener(( ev, sender, args) -> getView().toggleSubnetVisibility(model.getExport().getEntity())); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleProfilesVisibility(model.getProfiles().getIsAvailable()); model.getProfiles().getPropertyChangedEvent().addListener(( ev, sender, args) -> { if ("IsAvailable".equals(args.propertyName)) { getView().toggleProfilesVisibility(model.getProfiles().getIsAvailable()); } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().setCommand(model.getAddQosCommand()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().addClickHandler(( event) -> getView().getQosButton().getCommand().execute()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().addMtuEditor(); }	@java.lang.Override public void init(final T model) { super.init(model); model.getPropertyChangedEvent().addListener(( ev, sender, args) -> { org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel senderModel = ((org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel) (sender)); java.lang.String propertyName = args.propertyName; if ("Message".equals(propertyName)) { getView().setMessageLabel(senderModel.getMessage()); } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleSubnetVisibility(model.getExport().getEntity()); model.getExport().getEntityChangedEvent().addListener(( ev, sender, args) -> getView().toggleSubnetVisibility(model.getExport().getEntity())); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleProfilesVisibility(model.getProfiles().getIsAvailable()); model.getProfiles().getPropertyChangedEvent().addListener(( ev, sender, args) -> { if ("IsAvailable".equals(args.propertyName)) { getView().toggleProfilesVisibility(model.getProfiles().getIsAvailable()); } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().setCommand(model.getAddQosCommand()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().addClickHandler(( event) -> getView().getQosButton().getCommand().execute()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().addMtuEditor(); }
@java.lang.Override public int hashCode() { int result = (stateless) ? 1 : 0; result = (31 * result) + (inPreview ? 1 : 0); result = (31 * result) + ((vmType) != null ? vmType.hashCode() : 0); return result; }	@java.lang.Override public java.lang.String getTooltip(org.ovirt.engine.ui.common.CommonApplicationConstants constants) { return ""; }
void initSortHandler() { tableHeader.getColumnSortList().setLimit(1); table.getColumnSortList().setLimit(1); org.ovirt.engine.ui.common.widget.table.ActionCellTable<T> tableWithHeader = (isTableHeaderVisible()) ? tableHeader : table; tableWithHeader.addColumnSortHandler(new com.google.gwt.user.cellview.client.ColumnSortEvent.Handler() { @java.lang.Override public void onColumnSort(com.google.gwt.user.cellview.client.ColumnSortEvent event) { java.lang.Object model = getDataProvider().getModel(); com.google.gwt.user.cellview.client.Column<?, ?> column = event.getColumn(); if (model instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?> searchableModel = ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?>) (model)); java.lang.String sortBy = null; if ((column != null) && (column instanceof org.ovirt.engine.ui.common.widget.table.column.SortableColumn)) { org.ovirt.engine.ui.common.widget.table.column.SortableColumn<?, ?> sortableColumn = ((org.ovirt.engine.ui.common.widget.table.column.SortableColumn<?, ?>) (column)); sortBy = sortableColumn.getSortBy(); } searchableModel.setSortOptions(sortBy, event.isSortAscending()); com.google.gwt.user.cellview.client.ColumnSortList.ColumnSortInfo columnSortInfo = event.getColumnSortList().get(0); tableHeader.getColumnSortList().push(columnSortInfo); table.getColumnSortList().push(columnSortInfo); } } }); }	void initSortHandler() { tableHeader.getColumnSortList().setLimit(1); table.getColumnSortList().setLimit(1); org.ovirt.engine.ui.common.widget.table.ActionCellTable<T> tableWithHeader = (isTableHeaderVisible()) ? tableHeader : table; tableWithHeader.addColumnSortHandler(new com.google.gwt.user.cellview.client.ColumnSortEvent.Handler() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onColumnSort(com.google.gwt.user.cellview.client.ColumnSortEvent event) { java.lang.Object model = getDataProvider().getModel(); com.google.gwt.user.cellview.client.Column<?, ?> column = event.getColumn(); if (model instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<T> searchableModel = ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<T>) (model)); org.ovirt.engine.ui.common.widget.table.column.SortableColumn<T, ?> sortedColumn = null; if (column instanceof org.ovirt.engine.ui.common.widget.table.column.SortableColumn) { sortedColumn = ((org.ovirt.engine.ui.common.widget.table.column.SortableColumn<T, ?>) (column)); } if (searchableModel.supportsServerSideSorting()) { java.lang.String sortBy = (sortedColumn != null) ? sortedColumn.getSortBy() : null; searchableModel.updateSortOptions(sortBy, event.isSortAscending()); } else { java.util.Comparator<? super T> comparator = (sortedColumn != null) ? sortedColumn.getComparator() : null; searchableModel.setComparator(comparator, event.isSortAscending()); } com.google.gwt.user.cellview.client.ColumnSortList.ColumnSortInfo columnSortInfo = event.getColumnSortList().get(0); tableHeader.getColumnSortList().push(columnSortInfo); table.getColumnSortList().push(columnSortInfo); } } }); }
@javax.ws.rs.Path("{action: (start|stop|shutdown|reboot|suspend|detach|migrate|export|move|ticket|cancelmigration|" + "preview_snapshot|commit_snapshot|undo_snapshot|clone|maintenance)|reordermacaddresses}/{oid}") public org.ovirt.engine.api.resource.ActionResource getActionSubresource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid);	@javax.ws.rs.Path("{action: (start|stop|shutdown|reboot|suspend|detach|migrate|export|move|ticket|cancelmigration|" + "preview_snapshot|commit_snapshot|undo_snapshot|clone|maintenance|reordermacaddresses)}/{oid}") public org.ovirt.engine.api.resource.ActionResource getActionSubresource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid);
@java.lang.Override public void initSelectedProfile(org.ovirt.engine.ui.uicommonweb.models.ListModel profileList, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> profiles = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>) (profileList.getItems())); profiles = (profiles == null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() : profiles; for (org.ovirt.engine.core.common.businessentities.network.VnicProfileView profile : profiles) { if ((((getManagementNetwork()) != null) && (profile != null)) && (getManagementNetwork().getName().equals(profile.getNetworkName()))) { profileList.setSelectedItem(profile); return; } } profileList.setSelectedItem(((profiles.size()) > 0 ? profiles.get(0) : org.ovirt.engine.core.common.businessentities.network.VnicProfileView.EMPTY)); }	@java.lang.Override public void initSelectedProfile(org.ovirt.engine.ui.uicommonweb.models.ListModel profileList, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> profiles = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>) (profileList.getItems())); profiles = (profiles == null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() : profiles; for (org.ovirt.engine.core.common.businessentities.network.VnicProfileView profile : profiles) { if ((((getManagementNetworkName()) != null) && (profile != null)) && (getManagementNetworkName().equals(profile.getNetworkName()))) { profileList.setSelectedItem(profile); return; } } profileList.setSelectedItem(((profiles.size()) > 0 ? profiles.get(0) : org.ovirt.engine.core.common.businessentities.network.VnicProfileView.EMPTY)); }
@org.junit.Test public void testIsUpdInvalid() { storagePool.setStatus(StoragePoolStatus.NonResponsive); assertThat(validator.isUp(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND)); }	@org.junit.Test public void testIsUpdInvalid() { storagePool.setStatus(StoragePoolStatus.NonResponsive); assertThat(validator.isUp(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND)); }
@org.junit.Test public void appendCustomValueAppend() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String newVal = "bar"; final java.lang.String sep = "_"; b.addCustomValue(key, value); b.appendCustomValueUsingCustomSeparator(key, newVal, sep); final java.lang.String s = b.getCustomValue(key); assertEquals(((value + sep) + newVal), s); }	@org.junit.Test public void appendCustomValueAppend() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String newVal = "bar"; final java.lang.String sep = "_"; b.addCustomValue(key, value); b.appendCustomValue(key, newVal, sep); final java.lang.String s = b.getCustomValue(key); assertEquals(((value + sep) + newVal), s); }
private void updateMemoryBoxVisibility() { org.ovirt.engine.core.common.businessentities.VM vm = model.getVm(); if (vm == null) { return; } boolean archSnapshotSupported = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isSnapshotSupported(vm.getClusterArch(), vm.getVdsGroupCompatibilityVersion()); boolean memorySnapshotSupported = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.MemorySnapshotSupported, vm.getVdsGroupCompatibilityVersion().toString()))) && archSnapshotSupported; memoryEditor.setVisible((memorySnapshotSupported && (vm.isRunning()))); if (!(memoryEditor.isVisible())) { model.getMemory().setEntity(false); } }	private void updateMemoryBoxVisibility() { org.ovirt.engine.core.common.businessentities.VM vm = model.getVm(); if (vm == null) { return; } boolean memorySnapshotSupported = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isMemorySnapshotSupported(vm); memoryEditor.setVisible((memorySnapshotSupported && (vm.isRunning()))); if (!(memoryEditor.isVisible())) { model.getMemory().setEntity(false); } }
protected void addVmStatic() { logImportEvents(); getVm().getStaticData().setId(getVmId()); getVm().getStaticData().setCreationDate(new java.util.Date()); getVm().getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getClusterId()); getVm().getStaticData().setMinAllocatedMem(computeMinAllocatedMem()); getVm().getStaticData().setQuotaId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getQuotaId()); if (!(org.ovirt.engine.core.bll.VmHandler.validateDedicatedVdsExistOnSameCluster(getVm().getStaticData(), null))) { getVm().setDedicatedVmForVdsList(java.util.Collections.emptyList()); } if (((getVm().getOriginalTemplateGuid()) != null) && (!(VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getVm().getOriginalTemplateGuid())))) { org.ovirt.engine.core.common.businessentities.VmTemplate originalTemplate = org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getVmTemplateDao().get(getVm().getOriginalTemplateGuid()); if (originalTemplate != null) { getVm().getStaticData().setOriginalTemplateName(originalTemplate.getName()); } } if (org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getCopyCollapse()) { getVm().setVmtGuid(VmTemplateHandler.BLANK_VM_TEMPLATE_ID); } this.vmStaticDao.save(getVm().getStaticData()); org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCompensationContext().snapshotNewEntity(getVm().getStaticData()); }	protected void addVmStatic() { logImportEvents(); getVm().getStaticData().setId(getVmId()); getVm().getStaticData().setCreationDate(new java.util.Date()); getVm().getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getClusterId()); getVm().getStaticData().setMinAllocatedMem(computeMinAllocatedMem()); getVm().getStaticData().setQuotaId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getQuotaId()); if (!(org.ovirt.engine.core.bll.VmHandler.validateDedicatedVdsExistOnSameCluster(getVm().getStaticData(), null))) { getVm().setDedicatedVmForVdsList(java.util.Collections.emptyList()); } if (((getVm().getOriginalTemplateGuid()) != null) && (!(VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getVm().getOriginalTemplateGuid())))) { org.ovirt.engine.core.common.businessentities.VmTemplate originalTemplate = org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getVmTemplateDao().get(getVm().getOriginalTemplateGuid()); if (originalTemplate != null) { getVm().getStaticData().setOriginalTemplateName(originalTemplate.getName()); } } if (org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getCopyCollapse()) { getVm().setVmtGuid(VmTemplateHandler.BLANK_VM_TEMPLATE_ID); } vmStaticDao.save(getVm().getStaticData()); org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCompensationContext().snapshotNewEntity(getVm().getStaticData()); }
@org.junit.Test public void testStandardIsValid() { assertTrue(underTest.isValid("0123:1234:7:8:12CD:0ABC:ABcd:cdef", mockConstraintValidatorContext)); }	@org.junit.Test public void testStandardIsValid() { doTest("0123:1234:7:8:12CD:0ABC:ABcd:cdef", true); }
@java.lang.Override public void rerun() { org.ovirt.engine.core.bll.MigrateVmCommand.setVm(null); if (((org.ovirt.engine.core.bll.MigrateVmCommand.getVm()) != null) && ((org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))) { determineMigrationFailureForAuditLog(); setDestinationVdsId(null); super.rerun(); } else { failedToMigrate(); _isRerun = true; } }	@java.lang.Override public void rerun() { org.ovirt.engine.core.bll.MigrateVmCommand.setVm(null); determineMigrationFailureForAuditLog(); if (((org.ovirt.engine.core.bll.MigrateVmCommand.getVm()) != null) && ((org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))) { setDestinationVdsId(null); super.rerun(); } else { org.ovirt.engine.core.bll.MigrateVmCommand.runningFailed(); _isRerun = true; } }
@org.junit.Test public void updateSeveralConnectionsWithSamePath() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0); parameters.setStorageServerConnection(newNFSConnection); java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>(); org.ovirt.engine.core.common.businessentities.StorageServerConnections conn1 = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); conn1.setconnection(newNFSConnection.getconnection()); conn1.setid(newNFSConnection.getid()); org.ovirt.engine.core.common.businessentities.StorageServerConnections conn2 = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); conn2.setconnection(newNFSConnection.getconnection()); conn2.setid(org.ovirt.engine.core.compat.Guid.newGuid().toString()); connections.add(conn1); connections.add(conn2); when(storageConnDao.getAllForStorage(newNFSConnection.getconnection())).thenReturn(connections); when(storageConnDao.get(newNFSConnection.getid())).thenReturn(oldNFSConnection); doReturn(true).when(command).isConnWithSameDetailsExists(newNFSConnection, null); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, EngineMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ALREADY_EXISTS); }	@org.junit.Test public void updateSeveralConnectionsWithSamePath() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0); parameters.setStorageServerConnection(newNFSConnection); java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>(); org.ovirt.engine.core.common.businessentities.StorageServerConnections conn1 = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); conn1.setconnection(newNFSConnection.getconnection()); conn1.setid(newNFSConnection.getid()); org.ovirt.engine.core.common.businessentities.StorageServerConnections conn2 = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); conn2.setconnection(newNFSConnection.getconnection()); conn2.setid(org.ovirt.engine.core.compat.Guid.newGuid().toString()); connections.add(conn1); connections.add(conn2); when(storageConnDao.getAllForStorage(newNFSConnection.getconnection())).thenReturn(connections); when(storageConnDao.get(newNFSConnection.getid())).thenReturn(oldNFSConnection); doReturn(true).when(command).isConnWithSameDetailsExists(newNFSConnection, null); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ALREADY_EXISTS); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).PropertyName; if ("IsMigrationSupported".equals(propName)) { migrateEditor.setVisible(object.isMigrationSupported()); migrateInfoIcon.setVisible(object.isMigrationSupported()); warningLabel.setVisible(object.isMigrationSupported()); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).PropertyName; if ("IsMigrationSupported".equals(propName)) { migratePanel.setVisible(object.isMigrationSupported()); } }
@java.lang.Override protected void executeCommand() { if (!(moveParametersList.isEmpty())) { vdcReturnValues.addAll(org.ovirt.engine.core.bll.Backend.getInstance().RunMultipleActions(VdcActionType.MoveOrCopyDisk, new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(getMoveDisksParametersList()), false)); } if (!(vmsLiveMigrateParametersMap.isEmpty())) { vdcReturnValues.addAll(org.ovirt.engine.core.bll.Backend.getInstance().RunMultipleActions(VdcActionType.LiveMigrateDisks, new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(getLiveMigrateDisksParametersList()), false)); } handleChildReturnValue(); org.ovirt.engine.core.bll.MoveDisksCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { if (!(moveParametersList.isEmpty())) { vdcReturnValues.addAll(org.ovirt.engine.core.bll.Backend.getInstance().RunMultipleActions(VdcActionType.MoveOrCopyDisk, getMoveDisksParametersList(), false)); } if (!(vmsLiveMigrateParametersMap.isEmpty())) { vdcReturnValues.addAll(org.ovirt.engine.core.bll.Backend.getInstance().RunMultipleActions(VdcActionType.LiveMigrateVmDisks, getLiveMigrateDisksParametersList(), false)); } handleChildReturnValue(); org.ovirt.engine.core.bll.MoveDisksCommand.setSucceeded(true); }
protected boolean isUnregisteredDiskExistsForCopyTemplate() { if ((isTemplate()) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy))) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk> unregisteredDisks = unregisteredDisksDao.getByDiskIdAndStorageDomainId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()); if (!(unregisteredDisks.isEmpty())) { return true; } } return false; }	protected boolean isUnregisteredDiskExistsForCopyTemplate() { if ((isTemplate()) && (isCopyOperation())) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk> unregisteredDisks = unregisteredDisksDao.getByDiskIdAndStorageDomainId(getImage().getId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()); if (!(unregisteredDisks.isEmpty())) { return true; } } return false; }
private void onAddBricksInternal() { org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel volumeBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel) (getWindow())); cancelConfirmation(); if (!(volumeBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType selectedVolumeType = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType) (getTypeList().getSelectedItem())); if (selectedVolumeType.isReplicatedType()) { getReplicaCount().setEntity(volumeBrickModel.getReplicaCount().getEntity()); } if (selectedVolumeType.isStripedType()) { getStripeCount().setEntity(volumeBrickModel.getStripeCount().getEntity()); } java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> brickList = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); for (java.lang.Object object : volumeBrickModel.getBricks().getItems()) { org.ovirt.engine.ui.uicommonweb.models.EntityModel entityModel = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (object)); brickList.add(entityModel); } volumeBrickModel.getBricks().setItems(null); org.ovirt.engine.ui.uicommonweb.models.ListModel brickListModel = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); brickListModel.setItems(brickList); brickListModel.setSelectedItems(brickList); setBricks(brickListModel); setForceAddBricks(volumeBrickModel.getForce().getEntity()); setWindow(null); }	private void onAddBricksInternal() { org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel volumeBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel) (getWindow())); cancelConfirmation(); if (!(volumeBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType selectedVolumeType = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType) (getTypeList().getSelectedItem())); if (selectedVolumeType.isReplicatedType()) { getReplicaCount().setEntity(volumeBrickModel.getReplicaCount().getEntity()); } if (selectedVolumeType.isStripedType()) { getStripeCount().setEntity(volumeBrickModel.getStripeCount().getEntity()); } java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> brickList = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); for (java.lang.Object object : volumeBrickModel.getBricks().getItems()) { org.ovirt.engine.ui.uicommonweb.models.EntityModel entityModel = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (object)); brickList.add(entityModel); } volumeBrickModel.getBricks().setItems(null); org.ovirt.engine.ui.uicommonweb.models.ListModel brickListModel = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); brickListModel.setItems(brickList); brickListModel.setSelectedItems(brickList); setBricks(brickListModel); setForceAddBricks(((java.lang.Boolean) (volumeBrickModel.getForce().getEntity()))); setWindow(null); }
private void pauseUpload() { if ((getWindow()) != null) { return; } java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(); updates.setPhase(ImageTransferPhase.PAUSED_USER); org.ovirt.engine.core.common.action.UploadImageStatusParameters parameters = new org.ovirt.engine.core.common.action.UploadImageStatusParameters(); parameters.setUpdates(updates); parameters.setDiskId(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (item)).getId()); list.add(parameters); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.UploadImageStatus, list, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { } }, null); }	private void pauseUpload() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.pauseUploads(org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.DiskImage>cast(getSelectedItems())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionList = new java.util.ArrayList<org.ovirt.engine.core.bll.utils.PermissionSubject>(); for (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : getParameters().getParametersList()) { permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(parameters.getImageId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_DISK_STORAGE)); org.ovirt.engine.core.common.businessentities.DiskImage diskImage = getDiskImageById(parameters.getImageId()); org.ovirt.engine.core.compat.Guid storagePoolId = (diskImage != null) ? diskImage.getstorage_pool_id().getValue() : null; setStoragePoolId(storagePoolId); addStoragePermissionByQuotaMode(permissionList, storagePoolId, parameters.getStorageDomainId()); } return permissionList; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionList = new java.util.ArrayList<org.ovirt.engine.core.bll.utils.PermissionSubject>(); for (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : getParameters().getParametersList()) { permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(parameters.getImageId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_DISK_STORAGE)); setStoragePoolId(getVm().getStoragePoolId()); addStoragePermissionByQuotaMode(permissionList, org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getStoragePoolId().getValue(), parameters.getStorageDomainId()); } return permissionList; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> getActiveUnknownInActiveForStoragePool(org.ovirt.engine.core.compat.Guid pool) { return getCallsHandler().executeReadList("Getstorage_server_connectionsActiveUnknownInactiveByPoolId", org.ovirt.engine.core.dao.StorageServerConnectionDAODbFacadeImpl.mapper, getCustomMapSqlParameterSource().addValue("storage_pool_id", pool)); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> getAllConnectableStorageSeverConnection(org.ovirt.engine.core.compat.Guid pool) { return getCallsHandler().executeReadList("GetAllConnectableStorageSeverConnection", org.ovirt.engine.core.dao.StorageServerConnectionDAODbFacadeImpl.mapper, getCustomMapSqlParameterSource().addValue("storage_pool_id", pool)); }
@java.lang.Override public java.util.List<java.lang.String> getAllMacsByStoragePool(org.ovirt.engine.core.compat.Guid storagePoolId) { return getCallsHandler().executeReadList("GetMacsByStoragePoolId", macMapper, getCustomMapSqlParameterSource().addValue("storage_pool_id", storagePoolId)); }	@java.lang.Override public java.util.List<java.lang.String> getAllMacsByDataCenter(org.ovirt.engine.core.compat.Guid dataCenterId) { return getCallsHandler().executeReadList("GetMacsByDataCenterId", macMapper, getCustomMapSqlParameterSource().addValue("data_center_id", dataCenterId)); }
@java.lang.Override protected void executeVmCommand() { org.ovirt.engine.core.compat.Guid createdSnapshotId = getSnapshotDao().getId(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId(), SnapshotType.ACTIVE); getParameters().setSnapshotType(determineSnapshotType()); getSnapshotDao().updateId(createdSnapshotId, newActiveSnapshotId); setActionReturnValue(createdSnapshotId); org.ovirt.engine.core.bll.memory.MemoryImageBuilder memoryImageBuilder = getMemoryImageBuilder(); addSnapshotToDB(createdSnapshotId, memoryImageBuilder); createSnapshotsForDisks(); fastForwardDisksToActiveSnapshot(); memoryImageBuilder.build(); boolean pendingAsyncTasks = (!(getReturnValue().getVdsmTaskIdList().isEmpty())) || (!(org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getCommandId()).isEmpty())); if (!pendingAsyncTasks) { getParameters().setTaskGroupSuccess(true); incrementVmGeneration(); } org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.setSucceeded(true); }	@java.lang.Override protected void executeVmCommand() { org.ovirt.engine.core.compat.Guid createdSnapshotId = getSnapshotDao().getId(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId(), SnapshotType.ACTIVE); getParameters().setSnapshotType(determineSnapshotType()); getSnapshotDao().updateId(createdSnapshotId, newActiveSnapshotId); setActionReturnValue(createdSnapshotId); org.ovirt.engine.core.bll.memory.MemoryImageBuilder memoryImageBuilder = getMemoryImageBuilder(); createSnapshotsForDisks(); addSnapshotToDB(createdSnapshotId, memoryImageBuilder); fastForwardDisksToActiveSnapshot(); memoryImageBuilder.build(); boolean pendingAsyncTasks = (!(getTaskIdList().isEmpty())) || (!(org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getCommandId()).isEmpty())); if (!pendingAsyncTasks) { getParameters().setTaskGroupSuccess(true); incrementVmGeneration(); } org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.setSucceeded(true); }
@java.lang.Override protected javax.ws.rs.core.Response performRemove(java.lang.String id) { org.ovirt.engine.core.common.action.HostSetupNetworksParameters parameters = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(hostId); parameters.setRemovedUnmanagedNetworks(java.util.Collections.singletonList(id)); return performAction(VdcActionType.HostSetupNetworks, parameters); }	private java.util.List<org.ovirt.engine.core.common.businessentities.UnmanagedNetwork> getAllUnmanagedNetworksByVdsId() { return getBackendCollection(VdcQueryType.GetAllUnmanagedNetworksByHostId, new org.ovirt.engine.core.common.queries.IdQueryParameters(hostId)); }
private void showControls(boolean visible) { clearConcurrentGroup(); editFenceAgent.setVisible(true); up.setVisible(visible); down.setVisible(visible); orderLabel.setVisible(visible); concurrentListColumn.setVisible(((model.getConcurrentSelectList().getIsAvailable()) && (!(model.isInConcurrentGroup())))); if (concurrentListColumn.isVisible()) { labelColumn.setSize(ColumnSize.LG_5); } else { labelColumn.setSize(ColumnSize.LG_9); } }	private void showControls(boolean visible) { clearConcurrentGroup(); editFenceAgent.setVisible(visible); up.setVisible(visible); down.setVisible(visible); orderLabel.setVisible(visible); concurrentListColumn.setVisible(((model.getConcurrentSelectList().getIsAvailable()) && (!(model.isInConcurrentGroup())))); if (concurrentListColumn.isVisible()) { labelColumn.setSize(ColumnSize.LG_5); } else { labelColumn.setSize(ColumnSize.LG_9); } }
@com.google.gwt.i18n.client.Messages.DefaultMessage("Please use your VNC client to connect to this VM.<br/><br/>Use the following parameters:<br/>IP:Port -- {0}:{1}<br/><br/> Password: {2}<br/>(note: this password is valid for {3} seconds)") java.lang.String vncInfoMessage(java.lang.String hostIp, int port, java.lang.String password, int seconds);	@org.ovirt.engine.ui.uicompat.DefaultMessage("Please use your VNC client to connect to this VM.<br/><br/>Use the following parameters:<br/>IP:Port -- {0}:{1}<br/><br/> Password: {2}<br/>(note: this password is valid for {3} seconds)") java.lang.String vncInfoMessage(java.lang.String hostIp, int port, java.lang.String password, int seconds);
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>) (returnValue)); addNullNetwork(networks); java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks> nicsWithLogicalNetwork = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic : nics) { final org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks nicWithLogicalNetwork = new org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks(nic); nicWithLogicalNetwork.setItems(networks); behavior.initSelectedNetwork(nicWithLogicalNetwork, nicWithLogicalNetwork.getNetworkInterface()); nicsWithLogicalNetwork.add(nicWithLogicalNetwork); } getModel().setNicWithLogicalNetworks(nicsWithLogicalNetwork); }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>) (returnValue)); java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks> nicsWithLogicalNetwork = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks>(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = argNics; if ((argNics == null) || ((argNics.size()) == 0)) { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); networkInterface.setName(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getNewNicName(null)); nics = java.util.Arrays.asList(networkInterface); } for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic : nics) { final org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks nicWithLogicalNetwork = new org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks(nic); nicWithLogicalNetwork.setItems(networks); behavior.initSelectedNetwork(nicWithLogicalNetwork, nicWithLogicalNetwork.getNetworkInterface()); nicsWithLogicalNetwork.add(nicWithLogicalNetwork); } getModel().getNicsWithLogicalNetworks().setItems(nicsWithLogicalNetwork); getModel().getNicsWithLogicalNetworks().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(nicsWithLogicalNetwork)); }
public java.util.Map<java.lang.String, java.lang.Object> glusterDisableCliSnapshotScheduling(boolean force);	public java.util.Map<java.lang.String, java.lang.Object> glusterSnapshotScheduleOverride(boolean force);
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Architecture.class, to = org.ovirt.engine.core.common.businessentities.ArchitectureType.class) public static org.ovirt.engine.core.common.businessentities.ArchitectureType map(org.ovirt.engine.api.model.Architecture model, org.ovirt.engine.core.common.businessentities.ArchitectureType template) { if (model != null) { switch (model) { case UNDEFINED : return org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined; case X86_64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.x86_64; case PPC64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64; case S390 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.s390; default : return null; } } return null; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Architecture.class, to = org.ovirt.engine.core.common.businessentities.ArchitectureType.class) public static org.ovirt.engine.core.common.businessentities.ArchitectureType map(org.ovirt.engine.api.model.Architecture model, org.ovirt.engine.core.common.businessentities.ArchitectureType template) { if (model != null) { switch (model) { case UNDEFINED : return org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined; case X86_64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.x86_64; case PPC64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64; case S390X : return org.ovirt.engine.core.common.businessentities.ArchitectureType.s390x; default : return null; } } return null; }
public void persistAsyncTaskPlaceHolder(org.ovirt.engine.core.common.action.VdcActionType parentCommand, java.lang.String taskKey) { if (taskKeyToTaskIdMap.containsKey(taskKey)) { return; } try { org.ovirt.engine.core.common.businessentities.AsyncTasks task = createAsyncTask(new org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo(), parentCommand); org.ovirt.engine.core.compat.Guid taskId = task.getTaskId(); org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.addOrUpdateTaskInDB(task, null, org.ovirt.engine.core.bll.CommandBase.EMPTY_GUID_ARRAY); taskKeyToTaskIdMap.put(taskKey, taskId); } catch (java.lang.RuntimeException ex) { log.errorFormat("Error during persistAsyncTaskPlaceHolder for command: {0}. Exception {1}", this.getClass().getName(), ex); } }	public org.ovirt.engine.core.compat.Guid persistAsyncTaskPlaceHolder(org.ovirt.engine.core.common.action.VdcActionType parentCommand, java.lang.String taskKey) { if (taskKeyToTaskIdMap.containsKey(taskKey)) { return taskKeyToTaskIdMap.get(taskKey); } org.ovirt.engine.core.compat.Guid taskId = org.ovirt.engine.core.compat.Guid.Empty; try { org.ovirt.engine.core.common.businessentities.AsyncTasks task = createAsyncTask(new org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo(), parentCommand); taskId = task.getTaskId(); org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.addOrUpdateTaskInDB(task, null, org.ovirt.engine.core.bll.CommandBase.EMPTY_GUID_ARRAY); taskKeyToTaskIdMap.put(taskKey, taskId); addToReturnValueTaskPlaceHolderIdList(taskId); } catch (java.lang.RuntimeException ex) { log.errorFormat("Error during persistAsyncTaskPlaceHolder for command: {0}. Exception {1}", getClass().getName(), ex); } return taskId; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnaValue = runVdsCommand(VDSCommandType.StopRebalanceGlusterVolume, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeVDSParameters(upServer.getId(), getGlusterVolumeName())); setSucceeded(vdsReturnaValue.getSucceeded()); if (!(getSucceeded())) { handleVdsError(AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP_FAILED, vdsReturnaValue.getVdsError().getMessage()); return; } endStepJob(); releaseVolumeLock(); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnaValue = runVdsCommand(VDSCommandType.StopRebalanceGlusterVolume, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeVDSParameters(upServer.getId(), getGlusterVolumeName())); if (!(vdsReturnaValue.getSucceeded())) { handleVdsError(AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP_FAILED, vdsReturnaValue.getVdsError().getMessage()); setSucceeded(false); return; } endStepJob(); releaseVolumeLock(); setSucceeded(vdsReturnaValue.getSucceeded()); }
@javax.annotation.PostConstruct public void init() { setArik(java.lang.System.nanoTime()); org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(vmId); if (vmStatic != null) { updateStaticFields(vmStatic); } }	@javax.annotation.PostConstruct public void init() { setPowerOffTimeout(java.lang.System.nanoTime()); org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(vmId); if (vmStatic != null) { updateStaticFields(vmStatic); } }
private org.ovirt.engine.core.common.errors.VdcBllMessages checkRngDevice() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevs = org.ovirt.engine.core.bll.RunVmCommand.getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(org.ovirt.engine.core.bll.RunVmCommand.getVmId(), VmDeviceGeneralType.RNG, VmDeviceType.VIRTIO.getName()); if (!(rngDevs.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDev = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevs.get(0)); if (!(org.ovirt.engine.core.bll.RunVmCommand.getVdsGroup().getRequiredRngSources().contains(rngDev.getSource()))) { return org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_RNG_SOURCE_NOT_SUPPORTED; } if (!(org.ovirt.engine.core.bll.RunVmCommand.getVds().getSupportedRngSources().contains(rngDev.getSource()))) { return org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_RNG_SOURCE_NOT_SUPPORTED; } } return null; }	boolean checkRngDeviceClusterCompatibility() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevs = org.ovirt.engine.core.bll.RunVmCommand.getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(org.ovirt.engine.core.bll.RunVmCommand.getVmId(), VmDeviceGeneralType.RNG, VmDeviceType.VIRTIO.getName()); if (!(rngDevs.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDev = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevs.get(0)); if (!(org.ovirt.engine.core.bll.RunVmCommand.getVdsGroup().getRequiredRngSources().contains(rngDev.getSource()))) { return false; } } return true; }
private void newEntity() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = org.ovirt.engine.ui.uicommonweb.models.vms.NewVmInterfaceModel.createInstance(getEntity().getStaticData(), getEntity().getStatus(), getEntity().getStoragePoolId(), getEntity().getEffectiveCompatibilityVersion(), ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>) (getItems())), this); setWindow(model); }	private void newEntity() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = org.ovirt.engine.ui.uicommonweb.models.vms.NewVmInterfaceModel.createInstance(getEntity().getStaticData(), getEntity().getStatus(), getEntity().getStoragePoolId(), getEntity().getClusterCompatibilityVersion(), ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>) (getItems())), this); setWindow(model); }
private void customPreview() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (getEntity())); if (vm == null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel(); model.setVmId(vm.getId()); model.initialize(); org.ovirt.engine.core.common.businessentities.Snapshot selectedSnapshot = ((org.ovirt.engine.core.common.businessentities.Snapshot) (getSelectedItem())); if (selectedSnapshot != null) { model.setSnapshotModel(getSnapshotsMap().get(selectedSnapshot.getId())); } setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().previewSnapshotTitle()); model.setHashName("custom_preview_snapshot"); addCommands(model, "OnCustomPreview"); }	private void customPreview() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (getEntity())); if (vm == null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel(); model.setVmId(vm.getId()); model.initialize(); org.ovirt.engine.core.common.businessentities.Snapshot selectedSnapshot = ((org.ovirt.engine.core.common.businessentities.Snapshot) (getSelectedItem())); if (selectedSnapshot != null) { model.setSnapshotModel(getSnapshotsMap().get(selectedSnapshot.getId())); } setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().customPreviewSnapshotTitle()); model.setHashName("custom_preview_snapshot"); addCommands(model, "OnCustomPreview"); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.DiskImage mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.storage.DiskImage entity = null; org.ovirt.engine.core.common.businessentities.storage.DiskStorageType diskStorageType = org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.forValue(rs.getInt("disk_storage_type")); switch (diskStorageType) { case IMAGE : entity = super.mapRow(rs, rowNum); mapEntity(rs, entity); break; case CINDER : entity = org.ovirt.engine.core.dao.DiskImageDAOImpl.CinderDiskRowMapper.instance.mapRow(rs, rowNum); break; } return entity; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.DiskImage mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.storage.DiskImage entity = null; org.ovirt.engine.core.common.businessentities.storage.DiskStorageType diskStorageType = org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.forValue(rs.getInt("disk_storage_type")); switch (diskStorageType) { case IMAGE : entity = super.mapRow(rs, rowNum); mapEntity(rs, entity); break; case CINDER : entity = org.ovirt.engine.core.dao.DiskImageDaoImpl.CinderDiskRowMapper.instance.mapRow(rs, rowNum); break; } return entity; }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase, org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, vdcQueryParametersBase, asyncCallback); setIsQueryFirstTime(false); }	protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType queryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase, org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(queryType, vdcQueryParametersBase, asyncCallback); setIsQueryFirstTime(false); }
public static void GetAllAttachableDisks(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid vmId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.dataprovider.Disk>) (source)) : new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.dataprovider.Disk>(); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.GetAllAttachableDisks params = new org.ovirt.engine.ui.uicommonweb.dataprovider.GetAllAttachableDisks(storagePoolId); params.setVmId(vmId); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllAttachableDisks, params, aQuery); }	public static void getAllAttachableDisks(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid vmId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(); } }; org.ovirt.engine.core.common.queries.GetAllAttachableDisks params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisks(storagePoolId); params.setVmId(vmId); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllAttachableDisks, params, aQuery); }
private void hostName_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.VDS vds = ((org.ovirt.engine.core.common.businessentities.VDS) (getExternalHostName().getSelectedItem())); if (vds == null) { vds = new org.ovirt.engine.core.common.businessentities.VDS(); } setProtocolValue(); updateModelFromVds(vds, null, false, null); }	private void hostName_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.VDS vds = ((org.ovirt.engine.core.common.businessentities.VDS) (getExternalHostName().getSelectedItem())); if (vds != null) { setOriginalName(vds.getName()); getName().setEntity(vds.getName()); getHost().setEntity(vds.getHostName()); } }
private void setVmMacsWarning(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData vmData, java.lang.String message, java.lang.Boolean aTrue) { vmData.setWarning(message); vmData.getBadMacsExist().setEntity(aTrue); }	private void setVmMacsWarning(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData vmData, java.lang.String message, java.lang.Boolean isValid) { vmData.setWarning(message); vmData.getBadMacsExist().setEntity(isValid); }
private org.ovirt.engine.core.common.businessentities.VDSGroup mockVdsGroup() { org.ovirt.engine.core.common.businessentities.VDSGroup group = new org.ovirt.engine.core.common.businessentities.VDSGroup(); group.setvds_group_id(vdsGroupId); group.setcompatibility_version(new org.ovirt.engine.core.compat.Version()); group.setStoragePoolId(storagePoolId); group.setcpu_name("Intel Conroe Family"); group.setArchitectureType(ArchitectureType.x86_64); return group; }	private org.ovirt.engine.core.common.businessentities.VDSGroup mockVdsGroup() { org.ovirt.engine.core.common.businessentities.VDSGroup group = new org.ovirt.engine.core.common.businessentities.VDSGroup(); group.setvds_group_id(vdsGroupId); group.setcompatibility_version(new org.ovirt.engine.core.compat.Version()); group.setStoragePoolId(storagePoolId); group.setcpu_name("Intel Conroe Family"); group.setArchitecture(ArchitectureType.x86_64); return group; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> getAll() { throw new java.lang.UnsupportedOperationException(); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> getAll() { return getCallsHandler().executeReadList("GetAllVmJobs", org.ovirt.engine.core.dao.VmJobDaoImpl.VmJobRowMapper.instance, getCustomMapSqlParameterSource()); }
@org.junit.Test public void testHotsetUpdateableWhenHotsetRequestedWithStatus() { org.ovirt.engine.core.utils.ObjectIdentityChecker oic = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.utils.Jedi.class); oic.AddField(VMStatus.Down, "name"); oic.AddHotsetFields("name"); assertTrue("hot set requested for hot set fields should be true", oic.IsFieldUpdatable(VMStatus.Down, "name", null, true, false)); }	@org.junit.Test public void testHotsetUpdateableWhenHotsetRequestedWithStatus() { org.ovirt.engine.core.utils.ObjectIdentityChecker oic = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.utils.Jedi.class); oic.AddField(VMStatus.Down, "name"); oic.AddHotsetFields("name"); assertTrue("hot set requested for hot set fields should be true", oic.IsFieldUpdatable(VMStatus.Down, "name", null, true)); }
private org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback addNetworkCallback(final boolean addOnProvider) { return new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result1) { org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = result1.getReturnValue(); boolean succeeded = false; if ((retVal != null) && (retVal.getSucceeded())) { succeeded = true; } if (!succeeded) { postSaveAction(null, null, succeeded); } else if (addOnProvider) { postSaveAction(((org.ovirt.engine.core.common.businessentities.network.Network) (retVal.getActionReturnValue())), succeeded); } else { postSaveAction(((org.ovirt.engine.core.compat.Guid) (retVal.getActionReturnValue())), null, succeeded); } } }; }	private void postAddNetwork(org.ovirt.engine.core.common.action.VdcReturnValueBase retVal) { if (isActionSucceeded(retVal)) { postSaveAction(((org.ovirt.engine.core.compat.Guid) (retVal.getActionReturnValue())), null); } else { failedPostSaveAction(); } }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.compat.Guid clusterId = null; if (action.isSetCluster()) { clusterId = getClusterId(action); } org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), clusterId); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(ActionType.ImportVm, params, action); }	@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.compat.Guid clusterId = null; if (action.isSetCluster()) { clusterId = getClusterId(action); } org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), clusterId); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(ActionType.ImportVm, params, action); }
@java.lang.Override protected boolean validate() { boolean result = true; if ((org.ovirt.engine.core.bll.SetNonOperationalVdsCommand.getVds()) == null) { addValidateMessage(EngineMessage.VDS_INVALID_SERVER_ID); result = false; } return result; }	@java.lang.Override protected boolean validate() { boolean result = true; if ((org.ovirt.engine.core.bll.SetNonOperationalVdsCommand.getVds()) == null) { addValidationMessage(EngineMessage.VDS_INVALID_SERVER_ID); result = false; } return result; }
@java.lang.Override protected void executeVdsBrokerCommand() { log.info("-- executeIrsBrokerCommand: calling an image action command. parameters:"); log.info("++ spId={}", org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getStoragePoolId()); log.info("++ sdId={}", org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getStorageDomainId()); log.info("++ image group Id={}", org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getImageGroupId()); log.info("++ image Id={}", org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getImageId()); status = executeImageActionVdsBrokerCommand(org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getImageGroupId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getImageId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.proceedProxyReturnValue(); setReturnValue(status); }	@java.lang.Override protected void executeVdsBrokerCommand() { status = executeImageActionVdsBrokerCommand(org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getImageGroupId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getImageId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.proceedProxyReturnValue(); setReturnValue(status); }
@org.junit.Test public void testCanDoActionDomainInMaintenance() { getDiskStorageDomain().setStatus(StorageDomainStatus.Maintenance); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2); }	@org.junit.Test public void testCanDoActionDomainInMaintenance() { getDiskStorageDomain().setStatus(StorageDomainStatus.Maintenance); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2); }
protected void proceedStorageDomainTreatmentByDomainType(final org.ovirt.engine.core.common.businessentities.StorageDomain newMaster, final boolean lockNewMaster) { if ((org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master)) { if (newMaster != null) { newMaster.getStorageStaticData().setLastTimeUsedAsMaster(java.lang.System.currentTimeMillis()); if ((newMaster.getStorageDomainType()) != (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master)) { org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Object>() { @java.lang.Override public java.lang.Object runInTransaction() { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap newMasterMap = newMaster.getStoragePoolIsoMapData(); getCompensationContext().snapshotEntityUpdated(newMaster.getStorageStaticData()); newMaster.setStorageDomainType(StorageDomainType.Master); if (!lockNewMaster) { newMasterMap.setStatus(StorageDomainStatus.Unknown); getCompensationContext().snapshotEntityStatus(newMasterMap); newMaster.setStatus(StorageDomainStatus.Locked); getStoragePoolIsoMapDAO().updateStatus(newMasterMap.getId(), newMasterMap.getStatus()); } updateStorageDomainStaticData(newMaster.getStorageStaticData()); getCompensationContext().snapshotEntityUpdated(getStorageDomain().getStorageStaticData()); getStorageDomain().setStorageDomainType(StorageDomainType.Data); updateStorageDomainStaticData(getStorageDomain().getStorageStaticData()); getCompensationContext().stateChanged(); return null; } }); } else { updateStorageDomainStaticData(newMaster.getStorageStaticData()); } org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.updateStoragePoolMasterDomainVersionInDiffTransaction(); } else { _isLastMaster = true; } } }	protected void proceedStorageDomainTreatmentByDomainType(final org.ovirt.engine.core.common.businessentities.StorageDomain newMaster, final boolean lockNewMaster) { if (newMaster != null) { newMaster.getStorageStaticData().setLastTimeUsedAsMaster(java.lang.System.currentTimeMillis()); if ((newMaster.getStorageDomainType()) != (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master)) { org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Object>() { @java.lang.Override public java.lang.Object runInTransaction() { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap newMasterMap = newMaster.getStoragePoolIsoMapData(); getCompensationContext().snapshotEntityUpdated(newMaster.getStorageStaticData()); newMaster.setStorageDomainType(StorageDomainType.Master); if (lockNewMaster) { newMasterMap.setStatus(StorageDomainStatus.Unknown); getCompensationContext().snapshotEntityStatus(newMasterMap); newMaster.setStatus(StorageDomainStatus.Locked); getStoragePoolIsoMapDAO().updateStatus(newMasterMap.getId(), newMasterMap.getStatus()); } updateStorageDomainStaticData(newMaster.getStorageStaticData()); getCompensationContext().snapshotEntityUpdated(getStorageDomain().getStorageStaticData()); getStorageDomain().setStorageDomainType(StorageDomainType.Data); updateStorageDomainStaticData(getStorageDomain().getStorageStaticData()); getCompensationContext().stateChanged(); return null; } }); } else { updateStorageDomainStaticData(newMaster.getStorageStaticData()); } org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.updateStoragePoolMasterDomainVersionInDiffTransaction(); } else { _isLastMaster = true; } }
static org.ovirt.engine.core.common.businessentities.StorageServerConnections setUpEntityExpectations(org.ovirt.engine.core.common.businessentities.StorageServerConnections entity, int index) { expect(entity.geIid()).andReturn(GUIDS[index].toString()).anyTimes(); expect(entity.getStorageType()).andReturn(org.ovirt.engine.api.restapi.resource.BackendStorageDomainServerConnectionsResourceTest.STORAGE_TYPES_MAPPED[index]).anyTimes(); expect(entity.getConnection()).andReturn("1.1.1.255").anyTimes(); if (org.ovirt.engine.api.restapi.resource.BackendStorageDomainServerConnectionsResourceTest.STORAGE_TYPES_MAPPED[index].equals(StorageType.ISCSI)) { expect(entity.getPort()).andReturn("3260").anyTimes(); } return entity; }	static org.ovirt.engine.core.common.businessentities.StorageServerConnections setUpEntityExpectations(org.ovirt.engine.core.common.businessentities.StorageServerConnections entity, int index) { expect(entity.getId()).andReturn(GUIDS[index].toString()).anyTimes(); expect(entity.getStorageType()).andReturn(org.ovirt.engine.api.restapi.resource.BackendStorageDomainServerConnectionsResourceTest.STORAGE_TYPES_MAPPED[index]).anyTimes(); expect(entity.getConnection()).andReturn("1.1.1.255").anyTimes(); if (org.ovirt.engine.api.restapi.resource.BackendStorageDomainServerConnectionsResourceTest.STORAGE_TYPES_MAPPED[index].equals(StorageType.ISCSI)) { expect(entity.getPort()).andReturn("3260").anyTimes(); } return entity; }
@java.lang.Override protected void updateStorageDomainDiscardAfterDelete(org.ovirt.engine.core.compat.Version compatibilityVersion) { if ((org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getDiscardAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setDiscardAfterDelete(org.ovirt.engine.core.common.FeatureSupported.discardAfterDeleteSupported(compatibilityVersion)); } }	@java.lang.Override protected boolean getDefaultDiscardAfterDelete(org.ovirt.engine.core.compat.Version compatibilityVersion) { return org.ovirt.engine.core.common.FeatureSupported.discardAfterDeleteSupported(compatibilityVersion); }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession populateSession(java.util.Map<java.lang.String, java.lang.Object> innerMap) { org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession geoRepSession = getSession(innerMap); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionDetails> geoRepSessionDetails = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionDetails>(); if (innerMap.containsKey(org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc.GEO_REP_PAIRS)) { for (java.util.Map<java.lang.String, java.lang.Object> sessionPair : ((java.util.Map<java.lang.String, java.lang.Object>[]) (innerMap.get(org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc.GEO_REP_PAIRS)))) { geoRepSessionDetails.add(getSessionDetails(sessionPair, geoRepSession)); } } geoRepSession.setSessionDetails(geoRepSessionDetails); return geoRepSession; }	private org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession populateSession(java.lang.String volumeName, java.util.Map<java.lang.String, java.lang.Object> innerMap) { org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession geoRepSession = getSession(volumeName, innerMap); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionDetails> geoRepSessionDetails = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionDetails>(); if (innerMap.containsKey(org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc.GEO_REP_PAIRS)) { for (java.lang.Object sessionPair : ((java.lang.Object[]) (innerMap.get(org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc.GEO_REP_PAIRS)))) { geoRepSessionDetails.add(getSessionDetails(((java.util.Map<java.lang.String, java.lang.Object>) (sessionPair)), geoRepSession)); } } geoRepSession.setSessionDetails(geoRepSessionDetails); return geoRepSession; }
private void addDisksDeactivatedMessage(java.util.List<org.ovirt.engine.core.common.action.MoveDiskParameters> moveDiskParamsList) { setActionMessageParameters(); addCanDoActionMessageVariable("diskAliases", org.apache.commons.lang.StringUtils.join(getDisksAliases(moveDiskParamsList), ", ")); addCanDoActionMessage(EngineMessages.ACTION_TYPE_FAILED_MOVE_DISKS_MIXED_PLUGGED_STATUS); org.ovirt.engine.core.bll.MoveDisksCommand.getReturnValue().setCanDoAction(false); }	private void addDisksDeactivatedMessage(java.util.List<org.ovirt.engine.core.common.action.MoveDiskParameters> moveDiskParamsList) { setActionMessageParameters(); addCanDoActionMessageVariable("diskAliases", org.apache.commons.lang.StringUtils.join(getDisksAliases(moveDiskParamsList), ", ")); addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_MOVE_DISKS_MIXED_PLUGGED_STATUS); org.ovirt.engine.core.bll.MoveDisksCommand.getReturnValue().setCanDoAction(false); }
public boolean isSchedulerOptimizeForSpeed() { return schedulerOptimizeForSpeed; }	public org.ovirt.engine.core.common.scheduling.OptimizationType getOptimizationType() { return optimizationType; }
org.ovirt.engine.core.bll.ValidationResult validateNotRemovingUsedNetworkByVms() { java.util.Collection<java.lang.String> removedNetworks = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : removedNetworkAttachments) { removedNetworks.add(existingNetworkRelatedToAttachment(removedAttachment).getName()); } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(host.getId(), removedNetworks); if (vmNames.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, commaSeparated(vmNames)); } }	org.ovirt.engine.core.bll.ValidationResult validateNotRemovingUsedNetworkByVms() { java.util.Collection<java.lang.String> removedNetworks = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : removedNetworkAttachments) { removedNetworks.add(existingNetworkRelatedToAttachment(removedAttachment).getName()); } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(host.getId(), removedNetworks); if (vmNames.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, commaSeparated(vmNames)); } }
@java.lang.Override protected void init() { fetchStorageDomainInfo(); setVdsId(org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.getParameters().getVdsId()); rollback = new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { return null; } }; }	@java.lang.Override protected void init() { setVdsId(org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.getParameters().getVdsId()); fetchStorageDomainInfo(); }
public long getMinimum() { return privateMinimum; }	public long getMinimum() { return minimum; }
private org.ovirt.engine.core.bll.ValidationResult validateNotRemovingUsedNetworkByVms() { java.util.Collection<java.lang.String> removedNetworks = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : removedNetworkAttachments) { removedNetworks.add(existingNetworkRelatedToAttachment(removedAttachment).getName()); } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(host.getId(), removedNetworks); if (vmNames.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, commaSeparated(vmNames)); } }	private org.ovirt.engine.core.bll.ValidationResult validateNotRemovingUsedNetworkByVms() { java.util.Collection<java.lang.String> removedNetworks = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : removedNetworkAttachments) { removedNetworks.add(existingNetworkRelatedToAttachment(removedAttachment).getName()); } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(host.getId(), removedNetworks); if (vmNames.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, commaSeparated(vmNames)); } }
@org.ovirt.engine.ui.common.DefaultStringValue("Include Memory") java.lang.String includeMemory();	@org.ovirt.engine.ui.common.DefaultStringValue("Input Locale") java.lang.String inputLocaleLabel();
@java.lang.Override public void onResizeEnd(com.google.gwt.user.cellview.client.Column<T, ?> column, com.google.gwt.dom.client.Element headerElement) { super.onResizeEnd(column, headerElement); java.lang.String tableId = dataProvider.getModel().getId(); saveColumnWidth(tableId, this.getColumnIndex(column), headerElement.getClientWidth()); table.redraw(); }	@java.lang.Override public void onResizeEnd(com.google.gwt.user.cellview.client.Column<T, ?> column, com.google.gwt.dom.client.Element headerElement) { super.onResizeEnd(column, headerElement); table.redraw(); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { neutronAgentPanel.setVisible((!((java.lang.Boolean) (model.isPluginTypeCustom().getEntity())))); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { neutronAgentPanel.setVisible(((java.lang.Boolean) (model.isPluginConfigurationAvailable().getEntity()))); }
private void updateActionAvailability() { java.util.List selectedItems = getSelectedItems(); getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); boolean isAvailable = !(((getSystemTreeSelectedItem()) != null) && ((getSystemTreeSelectedItem().getType()) == (org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemType.Network))); getNewCommand().setIsAvailable(isAvailable); getRemoveCommand().setIsAvailable(isAvailable); }	private void updateActionAvailability() { java.util.List tempVar = getSelectedItems(); java.util.List selectedItems = (tempVar != null) ? tempVar : new java.util.ArrayList(); getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); boolean isAvailable = !(((getSystemTreeSelectedItem()) != null) && ((getSystemTreeSelectedItem().getType()) == (org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemType.Network))); getNewCommand().setIsAvailable(isAvailable); getRemoveCommand().setIsAvailable(isAvailable); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessages.VAR__ACTION__START); addCanDoActionMessage(EngineMessages.VAR__TYPE__GLUSTER_VOLUME); }	@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__START); addCanDoActionMessage(EngineMessage.VAR__TYPE__GLUSTER_VOLUME); }
private int getActiveUsersStat() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSystemStatisticsValue(QueryConstants.SYSTEM_STATS_USER_ENTITY, QueryConstants.SYSTEM_STATS_USER_ACTIVE_STATUS); }	private int getActiveUsersStat() { return org.ovirt.engine.core.bll.GetSystemStatisticsQuery.getDbFacade().getSystemStatisticsValue(org.ovirt.engine.core.bll.GetSystemStatisticsQuery.USER_ENTITY_NAME, org.ovirt.engine.core.bll.GetSystemStatisticsQuery.USER_ACTIVE_STATUS); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VMInfoListReturnForXmlRpc getOvaInfo(java.lang.String path) { try { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = vdsServer.getOvaInfo(path); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMInfoListReturnForXmlRpc(xmlRpcReturnValue); } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }	public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getOvaInfo(java.lang.String ovaPath) { try { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = vdsServer.getOvaInfo(ovaPath); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc(xmlRpcReturnValue); } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
private boolean validateSpaceRequirements(org.ovirt.engine.core.compat.Guid imageId, org.ovirt.engine.core.compat.Guid destDomainId) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = getDiskImageById(imageId); org.ovirt.engine.core.common.businessentities.storage_domains destDomain = getStorageDomainById(destDomainId, diskImage.getstorage_pool_id().getValue()); if (!(org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.isBelowThresholds(destDomain))) { addCanDoActionMessage(java.lang.String.format("$%1$s %2$s", "storageName", org.ovirt.engine.core.bll.lsm.LiveMigrateDisksCommand.getStorageDomain().getstorage_name())); return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN); } org.ovirt.engine.core.compat.Guid templateId = diskImage.getit_guid(); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> allImageSnapshots = org.ovirt.engine.core.bll.ImagesHandler.getAllImageSnapshots(imageId, templateId); diskImage.getSnapshots().addAll(allImageSnapshots); boolean isDomainHasSpaceForRequest = org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.hasSpaceForRequest(destDomain, java.lang.Math.round(diskImage.getActualDiskWithSnapshotsSize())); if (!isDomainHasSpaceForRequest) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW); } return true; }	private org.ovirt.engine.core.bll.validator.StorageDomainValidator getValidator(org.ovirt.engine.core.compat.Guid imageId, org.ovirt.engine.core.compat.Guid domainId) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = getDiskImageById(imageId); return new org.ovirt.engine.core.bll.validator.StorageDomainValidator(getStorageDomainById(domainId, diskImage.getstorage_pool_id().getValue())); }
protected void getDowntime() { if (((org.ovirt.engine.core.bll.MigrateVmCommand.getVm()) != null) && ((org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = runVdsCommand(VDSCommandType.MigrateStatus, new org.ovirt.engine.core.common.vdscommands.MigrateStatusVDSCommandParameters(getDestinationVdsId(), org.ovirt.engine.core.bll.MigrateVmCommand.getVmId())); if (retVal != null) { actualDowntime = ((java.lang.Integer) (retVal.getReturnValue())); } } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { migrationErrorCode = e.getErrorCode(); } } }	protected void getDowntime() { if (org.ovirt.engine.core.common.FeatureSupported.migrateDowntime(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getVdsGroupCompatibilityVersion())) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = runVdsCommand(VDSCommandType.MigrateStatus, new org.ovirt.engine.core.common.vdscommands.MigrateStatusVDSCommandParameters(getDestinationVdsId(), org.ovirt.engine.core.bll.MigrateVmCommand.getVmId())); if (retVal != null) { actualDowntime = ((java.lang.Integer) (retVal.getReturnValue())); } } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { migrationErrorCode = e.getErrorCode(); } } }
public void setSelection(java.lang.Boolean value) { if (((selection) == null) && (value == null)) { return; } if (((selection) == null) || (!(selection.equals(value)))) { selection = value; getSelectionChangedEvent().raise(this, EventArgs.empty); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("Selection")); } }	public void setSelection(java.lang.Boolean value) { if (((selection) == null) && (value == null)) { return; } if (((selection) == null) || (!(selection.equals(value)))) { selection = value; getSelectionChangedEvent().raise(this, EventArgs.EMPTY); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("Selection")); } }
public void initMocks(org.ovirt.engine.core.vdsbroker.VmTestPairs vmData, boolean run) { stubDaos(); when(vdsManager.getVdsId()).thenReturn(VmTestPairs.SRC_HOST_ID); when(vdsManager.getClusterId()).thenReturn(VmTestPairs.CLUSTER_ID); when(vdsManager.getCopyVds()).thenReturn(vdsManagerVds); when(vmManager.isColdReboot()).thenReturn(false); when(vmsMonitoring.getVmManager(any())).thenReturn(vmManager); when(vmsMonitoring.getResourceManager()).thenReturn(resourceManager); when(resourceManager.getVdsManager(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vdsManager); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(true); when(vmsMonitoring.getResourceManager().runVdsCommand(any(org.ovirt.engine.core.common.vdscommands.VDSCommandType.class), any(org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class))).thenReturn(vdsReturnValue); mockDstHostStatus(VDSStatus.Up); mockVmInDbForDstVms(vmData); vmAnalyzer = spy(new org.ovirt.engine.core.vdsbroker.VmAnalyzer(vmData.dbVm(), vmData.vdsmVm(), vmsMonitoring)); doReturn(auditLogDirector).when(vmAnalyzer).getAuditLogDirector(); doReturn(vmsMonitoring).when(vmAnalyzer).getVdsManager(); if (run) { vmAnalyzer.analyze(); } }	public void initMocks(org.ovirt.engine.core.vdsbroker.VmTestPairs vmData, boolean run) { stubDaos(); when(vdsManager.getVdsId()).thenReturn(VmTestPairs.SRC_HOST_ID); when(vdsManager.getClusterId()).thenReturn(VmTestPairs.CLUSTER_ID); when(vdsManager.getCopyVds()).thenReturn(vdsManagerVds); when(vmManager.isColdReboot()).thenReturn(false); when(vmsMonitoring.getVmManager(any())).thenReturn(vmManager); when(vmsMonitoring.getResourceManager()).thenReturn(resourceManager); when(resourceManager.getVdsManager(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vdsManager); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(true); when(vmsMonitoring.getResourceManager().runVdsCommand(any(org.ovirt.engine.core.common.vdscommands.VDSCommandType.class), any(org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class))).thenReturn(vdsReturnValue); mockDstHostStatus(VDSStatus.Up); mockVmInDbForDstVms(vmData); vmAnalyzer = spy(new org.ovirt.engine.core.vdsbroker.VmAnalyzer(vmData.dbVm(), vmData.vdsmVm(), vmsMonitoring)); doReturn(auditLogDirector).when(vmAnalyzer).getAuditLogDirector(); doReturn(vdsManager).when(vmAnalyzer).getVdsManager(); if (run) { vmAnalyzer.analyze(); } }
java.util.List<org.ovirt.engine.core.compat.Guid> GetVmIdsForVersionUpdate();	java.util.List<org.ovirt.engine.core.compat.Guid> getVmIdsForVersionUpdate(org.ovirt.engine.core.compat.Guid baseTemplateId);
private void stopRebalance() { if ((getSelectedItems()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().confirmStopVolumeRebalanceTitle()); model.setHashName("volume_rebalance_stop"); model.setHelpTag(model.getHashName(), ""); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().confirmStopVolumeRebalanceMsg()); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity item : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>cast(getSelectedItems())) { list.add(item.getName()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("onStopRebalance", this); okCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); okCommand.setIsDefault(true); model.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); cancelCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); cancelCommand.setIsCancel(true); model.getCommands().add(cancelCommand); }	private void stopRebalance() { if ((getSelectedItem()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity) (getSelectedItem())); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().confirmStopVolumeRebalanceTitle()); model.setHelpTag(HelpTag.volume_rebalance_stop); model.setHashName("volume_rebalance_stop"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().confirmStopVolumeRebalance(volumeEntity.getName())); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("onStopRebalance", this); okCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); okCommand.setIsDefault(true); model.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); cancelCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); cancelCommand.setIsCancel(true); model.getCommands().add(cancelCommand); }
private org.ovirt.engine.core.bll.ValidationResult noVmsContainBootableDisks(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { java.util.List<java.lang.String> vmsWithBoot = new java.util.ArrayList(vms.size()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { org.ovirt.engine.core.common.businessentities.storage.Disk bootDisk = org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskDao().getVmBootActiveDisk(vm.getId()); if (bootDisk != null) { vmsWithBoot.add(vm.getName()); } } if (!(vmsWithBoot.isEmpty())) { addValidateMessageVariable("VmsName", org.apache.commons.lang.StringUtils.join(vmsWithBoot.toArray(), ", ")); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VMS_BOOT_IN_USE); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	private org.ovirt.engine.core.bll.ValidationResult noVmsContainBootableDisks(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { java.util.List<java.lang.String> vmsWithBoot = new java.util.ArrayList(vms.size()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { org.ovirt.engine.core.common.businessentities.storage.Disk bootDisk = org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskDao().getVmBootActiveDisk(vm.getId()); if (bootDisk != null) { vmsWithBoot.add(vm.getName()); } } if (!(vmsWithBoot.isEmpty())) { addValidationMessageVariable("VmsName", org.apache.commons.lang.StringUtils.join(vmsWithBoot.toArray(), ", ")); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VMS_BOOT_IN_USE); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, java.lang.Boolean value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { java.lang.Object key = context.getKey(); java.lang.Boolean viewData = getViewData(key); if ((viewData != null) && (viewData.equals(value))) { clearViewData(key); viewData = null; } if ((value != null) && (viewData != null ? viewData : value)) { sb.append(org.ovirt.engine.ui.common.widget.table.cell.RadioboxCell.templates.input(id, "checked")); } else { sb.append(org.ovirt.engine.ui.common.widget.table.cell.RadioboxCell.templates.input(id, "")); } }	@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, java.lang.Boolean value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { java.lang.Object key = context.getKey(); java.lang.Boolean viewData = getViewData(key); if ((viewData != null) && (viewData.equals(value))) { clearViewData(key); viewData = null; } if ((value != null) && (viewData != null ? viewData : value)) { sb.append(org.ovirt.engine.ui.common.widget.table.cell.RadioboxCell.templates.radioChecked(id)); } else { sb.append(org.ovirt.engine.ui.common.widget.table.cell.RadioboxCell.templates.radioUnchecked(id)); } }
@java.lang.Override public void processOnVmPoweringUp(org.ovirt.engine.core.compat.Guid vmid) { org.ovirt.engine.core.common.businessentities.IVdsAsyncCommand command = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().GetAsyncCommandForVm(vmid); if (command != null) { command.onPowerringUp(); } }	@java.lang.Override public void processOnVmPoweringUp(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.IVdsAsyncCommand command = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().GetAsyncCommandForVm(vmId); if (command != null) { command.onPowerringUp(); } }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); getNewCommand().setIsExecutionAllowed(true); getAttachCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk != null) && (isSingleDiskSelected())) && (!(isDiskLocked(disk)))) && (((isVmDown()) || (!(disk.getPlugged()))) || (isExtendImageSizeEnabled())))); getRemoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isRemoveCommandAvailable()))); getSparsifyCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isSparsifyCommandAvailable()))); getMoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && ((isMoveCommandAvailable()) || (isLiveMoveCommandAvailable())))); updateScanAlignmentCommandAvailability(); getPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(true)); getUnPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(false)); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems()) != null ? ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getItems())) : null), ((getSelectedItems()) != null ? getSelectedItems() : null), getChangeQuotaCommand()); }	private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); getNewCommand().setIsExecutionAllowed(true); getAttachCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk != null) && (isSingleDiskSelected())) && (!(isDiskLocked(disk)))) && (((isVmDown()) || (!(disk.getPlugged()))) || (isExtendImageSizeEnabled())))); getRemoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isRemoveCommandAvailable()))); getSparsifyCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isSparsifyCommandAvailable()))); getMoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && ((isMoveCommandAvailable()) || (isLiveMoveCommandAvailable())))); updateScanAlignmentCommandAvailability(); getPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(true)); getUnPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(false)); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Activate/Deactivate while VM is running, is only supported for Clusters of version 3.1 and above.") java.lang.String HOT_UNPLUG_CPU_IS_NOT_SUPPORTED();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Hot un-plugging a CPU is not supported for cluster version ${clusterVersion} and architecture ${architecture}.") java.lang.String HOT_UNPLUG_CPU_IS_NOT_SUPPORTED();
public org.ovirt.engine.core.common.utils.HostUpgradeManagerResult isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { return create(host.getVdsType()).isUpdateAvailable(host); }	public org.ovirt.engine.core.common.HostUpgradeManagerResult checkForUpdates(org.ovirt.engine.core.common.businessentities.VDS host) { if (upgradeCheckInProgressMap.getOrDefault(host.getId(), false)) { java.lang.String error = java.lang.String.format("Failed to refresh host '%s' packages availability, another refresh process already running.", host.getName()); org.ovirt.engine.core.bll.host.AvailableUpdatesFinder.log.error(error); throw new java.lang.RuntimeException(error); } try { upgradeCheckInProgressMap.put(host.getId(), true); return create(host.getVdsType()).checkForUpdates(host); } finally { upgradeCheckInProgressMap.remove(host.getId()); } }
public java.util.List<java.lang.String> getAvailableKeys() { java.util.List<java.lang.String> list = ((allKeys) == null) ? new java.util.LinkedList<java.lang.String>() : new java.util.LinkedList<java.lang.String>(allKeys); list.removeAll(getUsedKeys()); if ((list.size()) > 0) { list.add(0, selectKey); } else { list.add(noKeys); } return list; }	private java.util.List<java.lang.String> getAvailableKeys() { java.util.List<java.lang.String> list = ((allKeys) == null) ? new java.util.LinkedList<java.lang.String>() : new java.util.LinkedList<java.lang.String>(allKeys); list.removeAll(getUsedKeys()); if ((list.size()) > 0) { list.add(0, selectKey); } else { list.add(noKeys); } return list; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllActiveForStorageDomain(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeReadList("GetActiveVmsByStorageDomainId", org.ovirt.engine.core.dao.VmDAOImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("storage_domain_id", id)); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllActiveForStorageDomain(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeReadList("GetActiveVmsByStorageDomainId", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("storage_domain_id", id)); }
public boolean getIsHostTabValid() { return isHostTabValid; }	public boolean getIsHostTabVisible() { return isHostTabVisible; }
protected org.ovirt.engine.core.common.vdscommands.GetVmsFromExternalProviderParameters buildGetRemoteVmsInfoParameters() { return new org.ovirt.engine.core.common.vdscommands.GetVmsFromExternalProviderParameters(getProxyHostId(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getUrl(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getUsername(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getPassword(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getOriginType(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getVmsNames()); }	private org.ovirt.engine.core.common.vdscommands.GetVmsFromExternalProviderParameters buildGetRemoteVmsInfoParameters() { return new org.ovirt.engine.core.common.vdscommands.GetVmsFromExternalProviderParameters(getProxyHostId(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getUrl(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getUsername(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getPassword(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getOriginType(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getNamesOfVms()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc list() { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.getVMList").withOptionalParameterAsList("vmList", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(new java.lang.String[]{ }))).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withResponseKey("vmList").withResponseType(java.lang.Object[].class).withSubTypeClazz(new java.util.HashMap<java.lang.String, java.lang.Object>().getClass()).withSubtypeKey("vmId"); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc list() { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.getVMList").withOptionalParameterAsList("vmList", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(new java.lang.String[]{ }))).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("vmList").withResponseType(java.lang.Object[].class).withSubTypeClazz(new java.util.HashMap<java.lang.String, java.lang.Object>().getClass()).withSubtypeKey("vmId"); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc(response); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Cannot remove more than one brick from a Replicate volume at a time") java.lang.String cannotRemoveBricksReplicateVolume();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Cannot remove more than one brick from a Replicate volume at a time") java.lang.String cannotRemoveBricksReplicateVolume();
public org.ovirt.engine.core.compat.Guid getTaskID() { return getCreationInfo().getVdsmTaskId(); }	public org.ovirt.engine.core.compat.Guid getVdsmTaskId() { return getCreationInfo().getVdsmTaskId(); }
private void injectHeaders(org.apache.http.client.methods.HttpUriRequest request) { for (java.util.Map.Entry<java.lang.String, java.lang.String> header : headers.entrySet()) { request.setHeader(header.getKey(), header.getValue()); } java.util.List<org.apache.http.Header> updated = excludeNullHeaders(request.getAllHeaders()); if ((updated != null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(new org.apache.http.Header[updated.size()])); } for (org.apache.http.NameValuePair nameValuePair : org.apache.http.client.utils.URLEncodedUtils.parse(request.getURI(), HTTP.UTF_8)) { if (nameValuePair.getName().equalsIgnoreCase("all_content")) { request.addHeader("All-Content", nameValuePair.getValue()); } } request.addHeader("Version", "4"); request.addHeader("Content-type", "application/xml"); request.addHeader("User-Agent", "JavaSDK"); request.addHeader("Accept", "application/xml"); request.addHeader("Authorization", ("Bearer " + (getAccessToken()))); }	private void injectHeaders(org.apache.http.client.methods.HttpUriRequest request) { if ((headers) != null) { for (java.util.Map.Entry<java.lang.String, java.lang.String> header : headers.entrySet()) { request.addHeader(header.getKey(), header.getValue()); } } java.util.List<org.apache.http.Header> updated = excludeNullHeaders(request.getAllHeaders()); if ((updated != null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(new org.apache.http.Header[updated.size()])); } for (org.apache.http.NameValuePair nameValuePair : org.apache.http.client.utils.URLEncodedUtils.parse(request.getURI(), HTTP.UTF_8)) { if (nameValuePair.getName().equalsIgnoreCase("all_content")) { request.addHeader("All-Content", nameValuePair.getValue()); } } request.addHeader("Version", "4"); request.addHeader("Content-type", "application/xml"); request.addHeader("User-Agent", "JavaSDK"); request.addHeader("Accept", "application/xml"); request.addHeader("Authorization", ("Bearer " + (getAccessToken()))); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Number of VMs") java.lang.String numberOfVmsCluster();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Number of VMs") java.lang.String numberOfVmsCluster();
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface getBaseInterface(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlan) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> hostNics = getDbFacade().getInterfaceDao().getAllInterfacesForVds(vlan.getVdsId()); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface hostNic : hostNics) { if (org.ovirt.engine.core.utils.NetworkUtils.interfaceBasedOn(vlan, hostNic.getName())) { return hostNic; } } return null; }	private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface getBaseInterface(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlan) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> hostNics = getDbFacade().getInterfaceDao().getAllInterfacesForVds(vlan.getVdsId()); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface hostNic : hostNics) { if (org.ovirt.engine.core.utils.NetworkUtils.interfaceBasedOn(vlan, hostNic.getName())) { return hostNic; } } throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.LABELED_NETWORK_INTERFACE_NOT_FOUND); }
public org.ovirt.engine.core.bll.ValidationResult networkNameNotUsed() { for (org.ovirt.engine.core.common.businessentities.network.Network otherNetwork : getNetworks()) { if ((otherNetwork.getName().equalsIgnoreCase(network.getName())) && (!(otherNetwork.getId().equals(network.getId())))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_NAME_IN_USE); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult networkNameNotUsed() { for (org.ovirt.engine.core.common.businessentities.network.Network otherNetwork : getNetworks()) { if ((otherNetwork.getName().equals(network.getName())) && (!(otherNetwork.getId().equals(network.getId())))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_NAME_IN_USE); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private boolean Validate() { return true; }	private boolean validate() { return true; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.NetworkQoS> networkQoSes = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.NetworkQoS>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue())); org.ovirt.engine.core.common.businessentities.network.NetworkQoS none = new org.ovirt.engine.core.common.businessentities.network.NetworkQoS(); none.setName(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().unlimitedQoSTitle()); none.setId(Guid.Empty); networkQoSes.add(0, none); getNetworkQoS().setItems(networkQoSes); setSelectedNetworkQoSId(defaultQosId); }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.NetworkQoS> networkQoSes = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.NetworkQoS>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue())); networkQoSes.add(0, org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel.getEmptyQos()); getNetworkQoS().setItems(networkQoSes); setSelectedNetworkQoSId(defaultQosId); }
public static void prepareCommandForMonitoring(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionType parentActionType, boolean runAsInternal, boolean hasCorrelationId) { org.ovirt.engine.core.bll.job.ExecutionContext context = command.getExecutionContext(); if (context == null) { context = new org.ovirt.engine.core.bll.job.ExecutionContext(); } try { boolean isMonitored = org.ovirt.engine.core.bll.job.ExecutionHandler.shouldMonitorCommand(actionType, runAsInternal, hasCorrelationId, parentActionType); if (isMonitored || (context.isJobRequired())) { org.ovirt.engine.core.common.job.Job job = org.ovirt.engine.core.bll.job.ExecutionHandler.createJob(actionType, command); org.ovirt.engine.core.bll.job.JobRepositoryFactory.getJobRepository().saveJob(job); context.setExecutionMethod(ExecutionMethod.AsJob); context.setJob(job); command.setExecutionContext(context); command.setJobId(job.getId()); context.setMonitored(true); } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.job.ExecutionHandler.log.errorFormat("Failed to prepare command of type {0} for monitoring due to error {1}", actionType.name(), org.apache.commons.lang.exception.ExceptionUtils.getMessage(e), e); } }	public static void prepareCommandForMonitoring(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.action.VdcActionType actionType, boolean runAsInternal, boolean hasCorrelationId) { org.ovirt.engine.core.bll.job.ExecutionContext context = command.getExecutionContext(); if (context == null) { context = new org.ovirt.engine.core.bll.job.ExecutionContext(); } try { boolean isMonitored = org.ovirt.engine.core.bll.job.ExecutionHandler.shouldMonitorCommand(actionType, runAsInternal, hasCorrelationId); if (isMonitored || (context.isJobRequired())) { org.ovirt.engine.core.common.job.Job job = org.ovirt.engine.core.bll.job.ExecutionHandler.createJob(actionType, command); org.ovirt.engine.core.bll.job.JobRepositoryFactory.getJobRepository().saveJob(job); context.setExecutionMethod(ExecutionMethod.AsJob); context.setJob(job); command.setExecutionContext(context); command.setJobId(job.getId()); context.setMonitored(true); } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.job.ExecutionHandler.log.errorFormat("Failed to prepare command of type {0} for monitoring due to error {1}", actionType.name(), org.apache.commons.lang.exception.ExceptionUtils.getMessage(e), e); } }
@org.junit.Test public void testLogoffAsync_ignored_failure() { java.lang.Object model = new java.lang.Object(); when(mockAsyncQuery.getModel()).thenReturn(model); org.ovirt.engine.core.common.users.VdcUser testUser = new org.ovirt.engine.core.common.users.VdcUser(); testUser.setUserName("testUser"); testUser.setPassword("testpassword"); frontend.logoffAsync(testUser, mockAsyncQuery); verify(mockService).logOff(eq(testUser), callbackAction.capture()); com.google.gwt.user.client.rpc.StatusCodeException exception = new com.google.gwt.user.client.rpc.StatusCodeException(0, "0 status code"); callbackAction.getValue().onFailure(exception); verify(mockFrontendFailureEvent, never()).raise(eq(org.ovirt.engine.ui.frontend.Frontend.class), ((org.ovirt.engine.ui.uicompat.EventArgs) (any()))); verify(mockEventsHandler, never()).runQueryFailed(null); verify(mockAsyncCallback, never()).onSuccess(model, null); }	@org.junit.Test public void testLogoffAsync_ignored_failure() { java.lang.Object model = new java.lang.Object(); when(mockAsyncQuery.getModel()).thenReturn(model); org.ovirt.engine.core.common.businessentities.DbUser testUser = new org.ovirt.engine.core.common.businessentities.DbUser(); testUser.setLoginName("testUser"); frontend.logoffAsync(testUser, mockAsyncQuery); verify(mockService).logOff(eq(testUser), callbackAction.capture()); com.google.gwt.user.client.rpc.StatusCodeException exception = new com.google.gwt.user.client.rpc.StatusCodeException(0, "0 status code"); callbackAction.getValue().onFailure(exception); verify(mockFrontendFailureEvent, never()).raise(eq(org.ovirt.engine.ui.frontend.Frontend.class), ((org.ovirt.engine.ui.uicompat.EventArgs) (any()))); verify(mockEventsHandler, never()).runQueryFailed(null); verify(mockAsyncCallback, never()).onSuccess(model, null); }
@java.lang.Override public java.lang.String render(java.util.ArrayList<com.google.gwt.user.client.ui.ValueLabel<V>> widgets) { java.lang.StringBuilder formattedStr = new java.lang.StringBuilder(""); for (int i = 0; i < (widgets.size()); i++) { formattedStr.append(widgets.get(i).getElement().getInnerHTML()).append(" ").append(delimiters[i]); if (i < ((widgets.size()) - 1)) { formattedStr.append(", "); } } return formattedStr.toString(); }	@java.lang.Override public java.lang.String render(java.util.ArrayList<com.google.gwt.user.client.ui.ValueLabel<V>> widgets) { java.lang.StringBuilder formattedStr = new java.lang.StringBuilder(); for (int i = 0; i < (widgets.size()); i++) { formattedStr.append(widgets.get(i).getElement().getInnerHTML()).append(" ").append(delimiters[i]); if (i < ((widgets.size()) - 1)) { formattedStr.append(", "); } } return formattedStr.toString(); }
@org.junit.Test public void testDiskAttachedToAnyVMFails() { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(); when(vmDao.getVmsListForDisk(org.mockito.Matchers.any(org.ovirt.engine.core.compat.Guid.class), anyBoolean())).thenReturn(java.util.Collections.singletonList(vm)); assertThat(validator.isDiskAttachedToAnyVm(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_ATTACHED_TO_VMS)); }	@org.junit.Test public void testDiskAttachedToAnyVMFails() { org.ovirt.engine.core.common.businessentities.VM vm1 = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(); org.ovirt.engine.core.common.businessentities.VM vm2 = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(); vm1.setName("Vm1"); vm2.setName("Vm2"); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = java.util.Arrays.asList(vm1, vm2); when(vmDao.getVmsListForDisk(any(org.ovirt.engine.core.compat.Guid.class), anyBoolean())).thenReturn(vmList); java.lang.String[] expectedReplacements = new java.lang.String[]{ org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(DiskValidator.DISK_NAME_VARIABLE, disk.getDiskAlias()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(DiskValidator.VM_LIST, "Vm1,Vm2") }; assertThat(validator.isDiskAttachedToAnyVm(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_ATTACHED_TO_VMS, expectedReplacements)); }
protected void setDefaultSwitchTypeIfNeeded(org.ovirt.engine.core.common.businessentities.Cluster cluster) { if ((cluster.getSwitchType()) == null) { org.ovirt.engine.core.compat.Version ovsSupportedFromVersion = new org.ovirt.engine.core.compat.Version(4, 0); boolean ovsSupported = cluster.getCompatibilityVersion().greaterOrEquals(ovsSupportedFromVersion); cluster.setSwitchType((ovsSupported ? org.ovirt.engine.core.common.SwitchType.OVS : org.ovirt.engine.core.common.SwitchType.LEGACY)); } }	protected void setDefaultSwitchTypeIfNeeded() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if ((cluster.getRequiredSwitchTypeForCluster()) == null) { org.ovirt.engine.core.common.network.SwitchType defaultSwitchType = org.ovirt.engine.core.common.network.DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } }
protected org.ovirt.engine.core.common.businessentities.LdapUser populateUserData(org.ovirt.engine.core.common.businessentities.LdapUser user, java.lang.String domain) { if (user == null) { return null; } user.setDomainControler(domain); java.util.HashMap<java.lang.String, org.ovirt.engine.core.common.businessentities.LdapGroup> groupsDict = new java.util.HashMap<java.lang.String, org.ovirt.engine.core.common.businessentities.LdapGroup>(); org.ovirt.engine.core.bll.adbroker.GroupsDNQueryGenerator generator = new org.ovirt.engine.core.bll.adbroker.GroupsDNQueryGenerator(); proceedGroupsSearchResult(null, user.getMemberof(), groupsDict, generator); user.setGroups(groupsDict); if (((user.getUserName()) != null) && (!(user.getUserName().contains("@")))) { user.setUserName((((user.getUserName()) + "@") + (user.getDomainControler()))); } if (user != null) { if (generator.getHasValues()) { java.util.List<org.ovirt.engine.core.bll.adbroker.LdapQueryData> partialQueries = generator.getLdapQueriesData(); for (org.ovirt.engine.core.bll.adbroker.LdapQueryData currQueryData : partialQueries) { populateGroup(currQueryData, getAuthenticationDomain(), groupsDict, getLoginName(), getPassword()); } } } user.setGroups(groupsDict); return user; }	protected org.ovirt.engine.core.common.businessentities.LdapUser populateUserData(org.ovirt.engine.core.common.businessentities.LdapUser user, java.lang.String domain) { return populateUserData(user, domain, true); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("refreshLightWeightData") public void refreshLightWeightData() { org.ovirt.engine.core.bll.gluster.GlusterManager.log.info("Refreshing Gluster Data [lightweight]"); java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = org.ovirt.engine.core.bll.gluster.GlusterManager.clusterDao.getAll(); for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters) { org.ovirt.engine.core.bll.gluster.GlusterManager.log.debugFormat("Refreshing Gluter Data for cluster {0}", cluster.getname()); refreshClusterData(cluster); } }	@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("refreshLightWeightData") public void refreshLightWeightData() { org.ovirt.engine.core.bll.gluster.GlusterManager.log.debug("Refreshing Gluster Data [lightweight]"); java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = getClusterDao().getAll(); for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters) { if (cluster.supportsGlusterService()) { try { refreshClusterData(cluster); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.gluster.GlusterManager.log.errorFormat("Error while refreshing Gluster lightweight data of cluster {0}!", cluster.getname(), e); continue; } } } }
@org.junit.Test public void testValidateNetworkExclusiveOnNicsVmNetworkMustBeSoleAttachedInterface2() throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface(false, java.util.Arrays.asList(NetworkType.VM, NetworkType.NON_VM), vmNetwork1, nonVmNetwork1); }	@org.junit.Test public void testValidateNetworkExclusiveOnNicsVmAndNonVmAttachedToInterface() throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface(false, java.util.Arrays.asList(NetworkType.VM, NetworkType.NON_VM), vmNetwork1, nonVmNetwork1); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> getAll() { return getCallsHandler().executeReadList("GetAllFromVmJobs", org.ovirt.engine.core.dao.VmJobDaoImpl.VmJobRowMapper.instance, getCustomMapSqlParameterSource()); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> getAll() { throw new org.apache.commons.lang.NotImplementedException(); }
private void sendTicket() { final org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser(); final boolean sent = runVdsCommand(VDSCommandType.SetVmTicket, new org.ovirt.engine.core.common.vdscommands.SetVmTicketVDSCommandParameters(org.ovirt.engine.core.bll.SetVmTicketCommand.getVdsId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVmId(), mTicket, mValidTime, user.getLoginName(), user.getId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getConsoleDisconnectAction())).getSucceeded(); if (sent) { org.ovirt.engine.core.bll.SetVmTicketCommand.setActionReturnValue(mTicket); } org.ovirt.engine.core.bll.SetVmTicketCommand.setSucceeded(sent); }	private void sendTicket() { final org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser(); final boolean sent = runVdsCommand(VDSCommandType.SetVmTicket, new org.ovirt.engine.core.common.vdscommands.SetVmTicketVDSCommandParameters(org.ovirt.engine.core.bll.SetVmTicketCommand.getVdsId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVmId(), mTicket, org.ovirt.engine.core.bll.SetVmTicketCommand.getParameters().getValidTime(), user.getLoginName(), user.getId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getParameters().getGraphicsType(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getConsoleDisconnectAction())).getSucceeded(); if (sent) { org.ovirt.engine.core.bll.SetVmTicketCommand.setActionReturnValue(mTicket); } org.ovirt.engine.core.bll.SetVmTicketCommand.setSucceeded(sent); }
public void setSupportedEngines(java.lang.String value) { mVdsDynamic.setSupportedEngines(value); }	public void setSupportedEngines(java.lang.String value) { vdsDynamic.setSupportedEngines(value); }
@org.junit.Test public void diskImagesHasDerivedDisksOnStorageDomain() { org.ovirt.engine.core.compat.Guid storageDomainId = org.ovirt.engine.core.compat.Guid.Empty; disk1.setVmEntityType(VmEntityType.TEMPLATE); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> storageDomainIds = new java.util.ArrayList<>(); storageDomainIds.add(storageDomainId); disk2.setStorageIds(storageDomainIds); when(diskImageDao.getAllSnapshotsForParent(disk1.getImageId())).thenReturn(java.util.Arrays.asList(disk2)); assertThat(validator.diskImagesHaveNoDerivedDisks(storageDomainId), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessages.ACTION_TYPE_FAILED_DETECTED_DERIVED_DISKS)); }	@org.junit.Test public void diskImagesHasDerivedDisksOnStorageDomain() { org.ovirt.engine.core.compat.Guid storageDomainId = org.ovirt.engine.core.compat.Guid.Empty; disk1.setVmEntityType(VmEntityType.TEMPLATE); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> storageDomainIds = new java.util.ArrayList<>(); storageDomainIds.add(storageDomainId); disk2.setStorageIds(storageDomainIds); when(diskImageDao.getAllSnapshotsForParent(disk1.getImageId())).thenReturn(java.util.Arrays.asList(disk2)); assertThat(validator.diskImagesHaveNoDerivedDisks(storageDomainId), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DETECTED_DERIVED_DISKS)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (sender == (getSelectAll())) { if ((getItems()) == null) { return; } boolean selectAll = getSelectAll().getEntity(); for (org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.aaa.DbUser> item : getItems()) { item.setIsSelected(selectAll); } } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (sender == (getSelectAll())) { if ((getItems()) == null) { return; } boolean selectAll = getSelectAll().getEntity(); for (org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.aaa.DbUser> item : getItems()) { item.setIsSelected(selectAll); } } }
public void setNewPassword2(java.lang.String newPassword2) { this.newPassword2 = newPassword2; }	public void setConfirmedNewCredentials(java.lang.String credentialsNew2) { this.confirmedNewCredentials = credentialsNew2; }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel object) { driver.edit(object); org.ovirt.engine.ui.uicommonweb.models.EntityModel version = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (object.getVersion().getSelectedItem())); versionListEditor.asEditor().setValue(version); pathExampleLabel.setVisible(object.getPath().getIsChangable()); object.getMountOptions().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (args.propertyName.equals("Title")) { mountOptionsEditor.setTitle(object.getMountOptions().getTitle()); } } }); }	@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel object) { driver.edit(object); org.ovirt.engine.ui.uicommonweb.models.EntityModel version = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (object.getVersion().getSelectedItem())); versionListEditor.asEditor().setValue(version); pathExampleLabel.setVisible(object.getPath().getIsChangable()); object.getMountOptions().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (args.propertyName.equals("Title")) { mountOptionsEditor.setTitle(object.getMountOptions().getTitle()); } } }); setElementVisibility(pathEditor, object.getPath().getIsAvailable()); setElementVisibility(versionListEditor, object.getVersion().getIsAvailable()); setElementVisibility(retransmissionsEditor, object.getRetransmissions().getIsAvailable()); setElementVisibility(timeoutEditor, object.getTimeout().getIsAvailable()); setElementVisibility(mountOptionsEditor, object.getTimeout().getIsAvailable()); }
private void copyUsageData(org.ovirt.engine.core.common.businessentities.Quota quota, org.ovirt.engine.core.common.businessentities.Quota quotaExternal) { if ((quota.getGlobalQuotaStorage()) != null) { quotaExternal.setGlobalQuotaStorage(copyQuotaStorageUsage(quota.getGlobalQuotaStorage())); } if ((quota.getGlobalQuotaVdsGroup()) != null) { quotaExternal.setGlobalQuotaVdsGroup(copyQuotaVdsGroupUsage(quota.getGlobalQuotaVdsGroup())); } if ((quota.getQuotaStorages()) != null) { quotaExternal.setQuotaStorages(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.QuotaStorage>()); for (org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage : quota.getQuotaStorages()) { quotaExternal.getQuotaStorages().add(copyQuotaStorageUsage(quotaStorage)); } } if ((quota.getQuotaVdsGroups()) != null) { quotaExternal.setQuotaVdsGroups(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.QuotaVdsGroup>()); for (org.ovirt.engine.core.common.businessentities.QuotaVdsGroup quotaVdsGroup : quota.getQuotaVdsGroups()) { quotaExternal.getQuotaVdsGroups().add(copyQuotaVdsGroupUsage(quotaVdsGroup)); } } }	private void copyUsageData(org.ovirt.engine.core.bll.quota.Quota quota, org.ovirt.engine.core.bll.quota.Quota quotaExternal) { if ((quota.getGlobalQuotaStorage()) != null) { quotaExternal.setGlobalQuotaStorage(copyQuotaStorageUsage(quota.getGlobalQuotaStorage())); } if ((quota.getGlobalQuotaVdsGroup()) != null) { quotaExternal.setGlobalQuotaVdsGroup(copyQuotaVdsGroupUsage(quota.getGlobalQuotaVdsGroup())); } if ((quota.getQuotaStorages()) != null) { quotaExternal.setQuotaStorages(new java.util.ArrayList<org.ovirt.engine.core.bll.quota.QuotaStorage>()); for (org.ovirt.engine.core.bll.quota.QuotaStorage quotaStorage : quota.getQuotaStorages()) { quotaExternal.getQuotaStorages().add(copyQuotaStorageUsage(quotaStorage)); } } if ((quota.getQuotaVdsGroups()) != null) { quotaExternal.setQuotaVdsGroups(new java.util.ArrayList<org.ovirt.engine.core.bll.quota.QuotaVdsGroup>()); for (org.ovirt.engine.core.bll.quota.QuotaVdsGroup quotaVdsGroup : quota.getQuotaVdsGroups()) { quotaExternal.getQuotaVdsGroups().add(copyQuotaVdsGroupUsage(quotaVdsGroup)); } } }
public static void getCompatibleCPUList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.compat.Version version) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.ServerCpu>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.ServerCpu>(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllCompatibleServerCpuList, new org.ovirt.engine.core.common.queries.GetAllCompatibleServerCpuListParameters(clusterId, version), aQuery); }	public static void getGlusterRemoveBricksStatus(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.compat.Guid volumeId, java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricks) { aQuery.setHandleFailure(true); org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksQueriesParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksQueriesParameters(clusterId, volumeId, bricks); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeRemoveBricksStatus, parameters, aQuery); }
@java.lang.SuppressWarnings("unchecked") private static java.util.Map<java.lang.String, java.lang.Object> deserializeData(java.lang.String payload) { return org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserialize(payload, java.util.HashMap.class); }	@java.lang.SuppressWarnings("unchecked") private static org.ovirt.engine.core.common.action.VdcActionParametersBase deserializeParameters(java.lang.String payload, java.lang.String className) { if (className == null) { return null; } java.lang.Class<java.io.Serializable> actionParamsClass = ((java.lang.Class<java.io.Serializable>) (org.ovirt.engine.core.utils.ReflectionUtils.getClassFor(className))); return ((org.ovirt.engine.core.common.action.VdcActionParametersBase) (org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserialize(payload, actionParamsClass))); }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getJobMessageProperties() { if ((jobProperties) == null) { jobProperties = super.getJobMessageProperties(); org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSnapshotDao().get(org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getParameters().getDstSnapshotId()); if (snapshot != null) { jobProperties.put(VdcObjectType.SnapshotName.name().toLowerCase(), snapshot.getDescription()); } } return jobProperties; }	@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getJobMessageProperties() { if ((jobProperties) == null) { jobProperties = super.getJobMessageProperties(); org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSnapshotDao().get(org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getParameters().getDstSnapshotId()); if (snapshot != null) { jobProperties.put(VdcObjectType.Snapshot.name().toLowerCase(), snapshot.getDescription()); } } return jobProperties; }
private java.util.List<org.ovirt.engine.core.common.businessentities.UserSession> searchSessions() { return genericSearch(org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getEngineSessionDao(), false).stream().map(this::injectSessionInfo).map(UserSession::new).collect(java.util.stream.Collectors.toList()); }	private java.util.List<org.ovirt.engine.core.common.businessentities.UserSession> searchSessions() { return genericSearch(org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getEngineSessionDao(), false).stream().peek(this::injectSessionInfo).map(UserSession::new).collect(java.util.stream.Collectors.toList()); }
@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksList = getParameters().getBricks(); if ((bricksList != null) && ((bricksList.size()) > 0)) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { addGlusterVolumeBricks(bricksList, getParameters().getReplicaCount(), getParameters().getStripeCount(), getParameters().isForce()); return null; } }); } postAddBrickHandleGeoRepCase(bricksList); }	@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksList = getParameters().getBricks(); org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeBeforeBrickAdd = getGlusterVolume(); if ((bricksList != null) && ((bricksList.size()) > 0)) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { addGlusterVolumeBricks(bricksList, getParameters().getReplicaCount(), getParameters().getStripeCount(), getParameters().isForce()); return null; } }); } if ((getGlusterVolume().getIsGeoRepMaster()) || (getGlusterVolume().getIsGeoRepSlave())) { java.util.Set<org.ovirt.engine.core.compat.Guid> newServerIds = findNewServers(bricksList, volumeBeforeBrickAdd); if (!(newServerIds.isEmpty())) { postAddBrickHandleGeoRepCase(bricksList, newServerIds); } } }
@org.ovirt.engine.ui.common.widget.table.column.Template("<div style=\"{0}\" class=\"{1}\">{2}</div>") com.google.gwt.safehtml.shared.SafeHtml imageContainerWithStyleClass(java.lang.String style, java.lang.String styleClass, com.google.gwt.safehtml.shared.SafeHtml imageHtml);	@org.ovirt.engine.ui.common.widget.table.column.Template("<div id=\"{0}\" style=\"{1}\" class=\"{2}\">{3}</div>") com.google.gwt.safehtml.shared.SafeHtml imageContainerWithStyleClass(java.lang.String id, java.lang.String style, java.lang.String styleClass, com.google.gwt.safehtml.shared.SafeHtml imageHtml);
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.validator.StorageConnectionValidator storageConnectionValidator = createStorageConnectionValidator(); org.ovirt.engine.core.common.businessentities.LUN_storage_server_connection_map connectionMapRecord = new org.ovirt.engine.core.common.businessentities.LUN_storage_server_connection_map(((org.ovirt.engine.core.common.AttachDetachStorageConnectionParameters.DUMMY_LUN_ID_PREFIX) + (org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getStorageDomain().getId())), org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getParameters().getStorageConnectionId()); if ((((!(validate(storageConnectionValidator.isConnectionExists()))) || (!(validate(storageConnectionValidator.isDomainOfConnectionExistsAndNonActive(org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getStorageDomain()))))) || (!(validate(storageConnectionValidator.isScsiConnectionAndDomain(org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getStorageDomain()))))) || (!(validate(storageConnectionValidator.isConnectionForDomainAlreadyExists(connectionMapRecord))))) { return false; } return true; }	@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.validator.StorageConnectionValidator storageConnectionValidator = createStorageConnectionValidator(); if (((!(validate(storageConnectionValidator.isConnectionExists()))) || (!(validate(storageConnectionValidator.isDomainOfConnectionExistsAndInactive(org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getStorageDomain()))))) || (!(validate(storageConnectionValidator.isISCSIConnectionAndDomain(org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getStorageDomain()))))) { return false; } if (storageConnectionValidator.isConnectionForISCSIDomainAttached(org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getStorageDomain())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_FOR_DOMAIN_ALREADY_EXISTS); } return true; }
public java.lang.String toStringForLogging() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); if ((correlationId) != null) { sb.append("Corrolation ID: "); sb.append(correlationId); sb.append(", "); } if ((jobId) != null) { sb.append("Job ID: "); sb.append(jobId.toString()); sb.append(", "); } if ((callStack) != null) { sb.append("Call Stack: "); sb.append(callStack); sb.append(", "); } if ((customEventId) != (-1)) { sb.append("Custom Event ID: "); sb.append(customEventId); sb.append(", "); } if ((message) != null) { sb.append("Message: "); sb.append(message); } return sb.toString(); }	public java.lang.String toStringForLogging() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append("Correlation ID: "); sb.append(correlationId); sb.append(", "); if ((jobId) != null) { sb.append("Job ID: "); sb.append(jobId.toString()); sb.append(", "); } sb.append("Call Stack: "); sb.append(callStack); sb.append(", "); sb.append("Custom Event ID: "); sb.append(customEventId); sb.append(", "); sb.append("Message: "); sb.append(message); return sb.toString(); }
@java.lang.Override protected void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?, ?, ?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?, ?, ?> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params) { assert op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel; assert op2 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel; org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkToAttach = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel) (op1)); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel targetNic = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (op2)); if (networkToAttach.isAttached()) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.DETACH_NETWORK.getCommand(op1, null, allNics).execute(); } org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanBridge = networkToAttach.attach(targetNic, true); if (vlanBridge != null) { java.util.Iterator<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> i = allNics.iterator(); while (i.hasNext()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = i.next(); if (vlanBridge.getVlanId().equals(nic.getVlanId())) { if (vlanBridge.getBaseInterface().equals(nic.getBaseInterface())) { vlanBridge.setName(nic.getName()); } i.remove(); break; } } allNics.add(vlanBridge); } }	@java.lang.Override protected void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params) { assert op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel; assert op2 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel; org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkToAttach = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel) (op1)); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel targetNic = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (op2)); if (networkToAttach.isAttached()) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.DETACH_NETWORK.getCommand(op1, null, allNics).execute(); } org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanBridge = networkToAttach.attach(targetNic, true); if (vlanBridge != null) { java.util.Iterator<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> i = allNics.iterator(); while (i.hasNext()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = i.next(); if (vlanBridge.getVlanId().equals(nic.getVlanId())) { if (vlanBridge.getBaseInterface().equals(nic.getBaseInterface())) { vlanBridge.setName(nic.getName()); } i.remove(); break; } } allNics.add(vlanBridge); } }
public boolean isRebootCommandExecutionAllowed(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { if ((vms.isEmpty()) || (!(org.ovirt.engine.core.common.VdcActionUtils.canExecutePartially(vms, VM.VmWithStatusForExclusive.class, VdcActionType.RebootVm)))) { return false; } for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { boolean guestAgentPresent = !(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(vm.getIp())); boolean acpiEnabled = java.lang.Boolean.TRUE.equals(vm.getAcpiEnable()); if (!(guestAgentPresent || acpiEnabled)) { return false; } } return true; }	public boolean isRebootCommandExecutionAllowed(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { if ((vms.isEmpty()) || (!(org.ovirt.engine.core.common.VdcActionUtils.canExecutePartially(vms, org.ovirt.engine.core.common.businessentities.VmWithStatusForExclusiveLock.class, VdcActionType.RebootVm)))) { return false; } for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { boolean guestAgentPresent = !(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(vm.getIp())); boolean acpiEnabled = java.lang.Boolean.TRUE.equals(vm.getAcpiEnable()); if (!(guestAgentPresent || acpiEnabled)) { return false; } } return true; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskSnapshotForVmSnapshot(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid vmSnapshotId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_snapshot_id", vmSnapshotId).addValue("image_group_id", diskId); return getCallsHandler().executeRead("GetDiskSnapshotForVmSnapshot", org.ovirt.engine.core.dao.DiskImageDAOImpl.DiskImageRowMapper.instance, parameterSource); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskSnapshotForVmSnapshot(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid vmSnapshotId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_snapshot_id", vmSnapshotId).addValue("image_group_id", diskId); return getCallsHandler().executeRead("GetDiskSnapshotForVmSnapshot", org.ovirt.engine.core.dao.DiskImageDaoImpl.DiskImageRowMapper.instance, parameterSource); }
public void setIsHostTabValid(boolean value) { if ((isHostTabValid) != value) { isHostTabValid = value; OnPropertyChanged(new org.ovirt.engine.core.compat.PropertyChangedEventArgs("IsHostTabValid")); } }	public void setIsHostTabVisible(boolean value) { if ((isHostTabVisible) != value) { isHostTabVisible = value; OnPropertyChanged(new org.ovirt.engine.core.compat.PropertyChangedEventArgs("IsHostTabVisible")); } }
@org.ovirt.engine.ui.uicompat.DefaultMessage("The selected snapshot will be deactivated.\n Do you want to continue?") java.lang.String confirmVolumeSnapshotDeactivate();	@org.ovirt.engine.ui.uicompat.DefaultMessage("Below snapshots would be removed. Do you want to continue?\n\n {0}") java.lang.String confirmVolumeSnapshotDeleteMessage(java.lang.String snapshotNames);
@org.junit.Test public void validateFailsOnNullHookId() { cmd = spy(new org.ovirt.engine.core.bll.gluster.RemoveGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(null))); setUpMocksForRemove(); assertFalse(cmd.validate()); assertTrue(cmd.getReturnValue().getValidateMessages().contains(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED.toString())); }	@org.junit.Test public void validateFailsOnNullHookId() { cmd = spy(new org.ovirt.engine.core.bll.gluster.RemoveGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(null))); setUpMocksForRemove(); assertFalse(cmd.validate()); assertTrue(cmd.getReturnValue().getValidationMessages().contains(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED.toString())); }
private java.lang.String findFreeVfForVnic(java.util.List<org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig> vfsConfigs, java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.String>> nicToUsedVfs, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> fetchedNics, org.ovirt.engine.core.common.businessentities.network.Network vnicNetwork, org.ovirt.engine.core.compat.Guid vmId, boolean shouldCheckDirectlyAttachedVmDevices) { for (org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig vfsConfig : vfsConfigs) { if (((vfsConfig.getNumOfVfs()) != 0) && (isNetworkInVfsConfig(vnicNetwork, vfsConfig))) { java.lang.String freeVf = getFreeVf(vfsConfig, nicToUsedVfs, fetchedNics, vmId, shouldCheckDirectlyAttachedVmDevices); if (freeVf != null) { return freeVf; } } } return null; }	private java.lang.String findFreeVfForVnic(java.util.List<org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig> vfsConfigs, java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.String>> nicToUsedVfs, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> fetchedNics, org.ovirt.engine.core.common.businessentities.network.Network vnicNetwork, org.ovirt.engine.core.compat.Guid vmId, boolean shouldCheckDirectlyAttachedVmDevices) { for (org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig vfsConfig : vfsConfigs) { if (((vfsConfig.getNumOfVfs()) != 0) && (isNetworkInVfsConfig(vnicNetwork, vfsConfig))) { java.util.List<java.lang.String> skipVfs = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.HostDevice freeVf = getFreeVf(vfsConfig, nicToUsedVfs, fetchedNics, vmId, shouldCheckDirectlyAttachedVmDevices, skipVfs); while ((freeVf != null) && ((isSharingIommuGroup(freeVf)) || (shouldCheckDirectlyAttachedVmDevices && (shouldBeDirectlyAttached(freeVf.getName(), vmId))))) { skipVfs.add(freeVf.getName()); freeVf = getFreeVf(vfsConfig, nicToUsedVfs, fetchedNics, vmId, shouldCheckDirectlyAttachedVmDevices, skipVfs); } if (freeVf != null) { return freeVf.getName(); } } } return null; }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.Disk object) { setEnumTitle(object.getVmEntityType()); return object.getVmEntityType().isVmType() ? org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.resources.vmsImage() : object.getVmEntityType().isTemplateType() ? org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.resources.templatesImage() : null; }	@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.Disk object) { setEnumTitle(object.getVmEntityType()); if ((object.getVmEntityType()) == null) { return null; } return object.getVmEntityType().isVmType() ? org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.resources.vmsImage() : object.getVmEntityType().isTemplateType() ? org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.resources.templatesImage() : null; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>) (returnValue)); allNetworks = networks; managentNetwork = org.ovirt.engine.ui.uicommonweb.Linq.findManagentNetwork(allNetworks); initNetworkModels(); initDcNetworkParams(); queryInterfaces(); }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>) (returnValue)); allNetworks = networks; initNetworkModels(); initDcNetworkParams(); queryInterfaces(); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalActionWithTasksContext(VdcActionType.UpdateVmVersion, new org.ovirt.engine.core.common.action.UpdateVmVersionParameters(org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVmId()), org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getLock()); if ((!(result.getSucceeded())) && (!(result.getValidate()))) { log.warn("Couldn't update VM '{}' ({}) version from it's template, continue with restoring stateless snapshot.", org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVmId()); org.ovirt.engine.core.bll.RestoreStatelessVmCommand.setSucceeded(restoreInitialState()); } else { setSucceeded(result.getSucceeded()); } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalActionWithTasksContext(VdcActionType.UpdateVmVersion, new org.ovirt.engine.core.common.action.UpdateVmVersionParameters(org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVmId()), org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getLock()); if ((!(result.getSucceeded())) && (!(result.isValid()))) { log.warn("Couldn't update VM '{}' ({}) version from it's template, continue with restoring stateless snapshot.", org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVmId()); org.ovirt.engine.core.bll.RestoreStatelessVmCommand.setSucceeded(restoreInitialState()); } else { setSucceeded(result.getSucceeded()); } }
public void guide() { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newClusterGuideMeTitle()); model.setHelpTag(HelpTag.new_cluster___guide_me); model.setHashName("new_cluster_-_guide_me"); if ((getGuideContext()) == null) { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.getSelectedItem(); setGuideContext(cluster.getId()); } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<org.ovirt.engine.core.common.businessentities.Cluster>() { @java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.core.common.businessentities.Cluster returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (getWindow())); model.setEntity(returnValue); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().configureLaterTitle()); tempVar.setIsDefault(true); tempVar.setIsCancel(true); model.getCommands().add(tempVar); } }), ((org.ovirt.engine.core.compat.Guid) (getGuideContext()))); }	public void guide() { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newClusterGuideMeTitle()); model.setHelpTag(HelpTag.new_cluster___guide_me); model.setHashName("new_cluster_-_guide_me"); if ((getGuideContext()) == null) { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.getSelectedItem(); setGuideContext(cluster.getId()); } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.businessentities.Cluster>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.Cluster returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (getWindow())); model.setEntity(returnValue); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().configureLaterTitle()); tempVar.setIsDefault(true); tempVar.setIsCancel(true); model.getCommands().add(tempVar); } }), ((org.ovirt.engine.core.compat.Guid) (getGuideContext()))); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Error in fetching the brick details, please try again.") java.lang.String errorInFetchingBrickAdvancedDetails();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Error in fetching the brick details, please try again.") java.lang.String errorInFetchingBrickAdvancedDetails();
@org.junit.Test public void canDoActionSucceedsOnDiskDomainCheckWhenStorageGuidInParamsMatches() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId); mockVmWithDisk(storageId); mockStorageDomain(storageId); mockStoragePoolIsoMap(); mockMaxPciSlots(); runAndAssertCanDoActionSuccess(); }	@org.junit.Test public void canDoActionSucceedsOnDiskDomainCheckWhenStorageGuidInParamsMatches() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId); mockVmWithDisk(storageId); mockStorageDomain(storageId); mockStoragePoolIsoMap(); mockInterfaceList(); mockMaxPciSlots(); runAndAssertCanDoActionSuccess(); }
public void PostOnSetupNetwork() { final org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel) (getWindow())); org.ovirt.engine.core.common.action.SetupNetworksParameters params = new org.ovirt.engine.core.common.action.SetupNetworksParameters(); params.setInterfaces(model.getAllNics()); params.setCheckConnectivity(((java.lang.Boolean) (model.getCheckConnectivity().getEntity()))); params.setConectivityTimeout(((java.lang.Integer) (model.getConnectivityTimeout().getEntity()))); params.setVdsId(getEntity().getId()); org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback callback = new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void Executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = result.getReturnValue(); if ((returnValueBase != null) && (returnValueBase.getSucceeded())) { org.ovirt.engine.ui.uicommonweb.models.EntityModel commitChanges = model.getCommitChanges(); if (((java.lang.Boolean) (commitChanges.getEntity()))) { SaveNetworkConfig(getEntity().getId(), org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel.this); } else { model.StopProgress(); Cancel(); Search(); } } else { model.StopProgress(); } } }; setcurrentModel(model); model.StartProgress(null); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.SetupNetworks, params, callback); }	public void PostOnSetupNetworks() { final org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel) (getWindow())); org.ovirt.engine.core.common.action.SetupNetworksParameters params = new org.ovirt.engine.core.common.action.SetupNetworksParameters(); params.setInterfaces(model.getAllNics()); params.setCheckConnectivity(((java.lang.Boolean) (model.getCheckConnectivity().getEntity()))); params.setConectivityTimeout(((java.lang.Integer) (model.getConnectivityTimeout().getEntity()))); params.setVdsId(getEntity().getId()); org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback callback = new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void Executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = result.getReturnValue(); if ((returnValueBase != null) && (returnValueBase.getSucceeded())) { org.ovirt.engine.ui.uicommonweb.models.EntityModel commitChanges = model.getCommitChanges(); if (((java.lang.Boolean) (commitChanges.getEntity()))) { SaveNetworkConfig(getEntity().getId(), org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel.this); } else { model.StopProgress(); Cancel(); Search(); } } else { model.StopProgress(); } } }; setcurrentModel(model); model.StartProgress(null); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.SetupNetworks, params, callback); }
public void setPmSecure(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> value) { secure = value; }	public void setPmSecure(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> value) { if (value != null) { secure = value; } }
public static void initBalloonDisabledByDefaultMatrix() { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(); callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.balloonDisabledByDefaultMatrix = ((java.util.Map<java.lang.Integer, java.util.Map<org.ovirt.engine.core.compat.Version, java.lang.Boolean>>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.OsRepository, new org.ovirt.engine.core.common.queries.OsQueryParameters(org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetBalloonDisabledByDefaultMatrix), callback); }	public static void initBalloonSupportMap() { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(); callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.balloonSupportMap = ((java.util.Map<java.lang.Integer, java.util.Map<org.ovirt.engine.core.compat.Version, java.lang.Boolean>>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new org.ovirt.engine.core.common.queries.OsQueryParameters(org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetBalloonSupportMap), callback); }
java.lang.Boolean isDuplicateMacAddressesAllowed();	boolean isDuplicateMacAddressesAllowed();
@org.ovirt.engine.ui.webadmin.DefaultStringValue("(Mega-bits per second)") java.lang.String inMegabitsNetworkQoSPopup();	@org.ovirt.engine.ui.webadmin.DefaultStringValue(" (Megabits per second)") java.lang.String inMegabitsNetworkQoSPopup();
public void getDefaultSpmPriority(org.ovirt.engine.ui.frontend.AsyncQuery<java.lang.Integer> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter(0); aQuery.getDel().onSuccess(5); }	public void getDefaultSpmPriority(org.ovirt.engine.ui.frontend.AsyncQuery<java.lang.Integer> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter(0); aQuery.getAsyncCallback().onSuccess(5); }
public org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.String> getSnapshot() { return snapshotDetail; }	public org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity getSnapshot() { return snapshot; }
public boolean isDone() { if ((map) == null) { return false; } return map.isDone(); }	public boolean isDone() { if ((this.map) == null) { return false; } return this.map.isDone(); }
public void newEntity() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.pools.PoolModel model = new org.ovirt.engine.ui.uicommonweb.models.pools.PoolModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewPoolModelBehavior()); model.setIsNew(true); model.setCustomPropertiesKeysList(getCustomPropertiesKeysList()); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newPoolTitle()); model.setHashName("new_pool"); model.setHelpTag(model.getHashName(), "Pools > New Pool"); model.getVmType().setSelectedItem(VmType.Desktop); model.initialize(getSystemTreeSelectedItem()); org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand switchModeCommand = new org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand(); switchModeCommand.init(model); model.getCommands().add(switchModeCommand); org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSave", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); command.setIsDefault(true); model.getCommands().add(command); command = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); command.setIsCancel(true); model.getCommands().add(command); }	public void newEntity() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.pools.PoolModel model = new org.ovirt.engine.ui.uicommonweb.models.pools.PoolModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewPoolModelBehavior()); model.setIsNew(true); model.setCustomPropertiesKeysList(getCustomPropertiesKeysList()); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newPoolTitle()); model.setHelpTag(HelpTag.new_pool); model.setHashName("new_pool"); model.getVmType().setSelectedItem(VmType.Desktop); model.initialize(getSystemTreeSelectedItem()); org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand switchModeCommand = new org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand(); switchModeCommand.init(model); model.getCommands().add(switchModeCommand); org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSave", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); command.setIsDefault(true); model.getCommands().add(command); command = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); command.setIsCancel(true); model.getCommands().add(command); }
protected void addVmWatchdog() { org.ovirt.engine.core.common.businessentities.VmWatchdog vmWatchdog = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getWatchdog(); if (vmWatchdog != null) { org.ovirt.engine.core.common.action.WatchdogParameters parameters = new org.ovirt.engine.core.common.action.WatchdogParameters(); parameters.setId(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmId()); parameters.setAction(vmWatchdog.getAction()); parameters.setModel(vmWatchdog.getModel()); runInternalAction(VdcActionType.AddWatchdog, parameters, org.ovirt.engine.core.bll.AddVmCommand.cloneOnlyEngineContext()); } }	protected void addVmWatchdog() { org.ovirt.engine.core.common.businessentities.VmWatchdog vmWatchdog = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getWatchdog(); if (vmWatchdog != null) { org.ovirt.engine.core.common.action.WatchdogParameters parameters = new org.ovirt.engine.core.common.action.WatchdogParameters(); parameters.setId(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmId()); parameters.setAction(vmWatchdog.getAction()); parameters.setModel(vmWatchdog.getModel()); runInternalAction(VdcActionType.AddWatchdog, parameters, org.ovirt.engine.core.bll.AddVmCommand.cloneContextAndDetachFromParent()); } }
private void activeDetailModelChanging(org.ovirt.engine.ui.uicommonweb.models.HasEntity<E> newValue, org.ovirt.engine.ui.uicommonweb.models.HasEntity<E> oldValue) { if (oldValue != null) { oldValue.setEntity(null); if (oldValue instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (oldValue)).stopRefresh(); } } if (newValue != null) { newValue.setEntity(provideDetailModelEntity(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.getSelectedItem())); } }	private void activeDetailModelChanging(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> newValue, org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> oldValue) { if (oldValue != null) { oldValue.setEntity(null); if (oldValue instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (oldValue)).stopRefresh(); } } if (newValue != null) { newValue.setEntity(provideDetailModelEntity(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.getSelectedItem())); } }
public boolean isRunning() { return running; }	public java.lang.Integer getTotalCores() { return totalCores; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForEntity(org.ovirt.engine.core.compat.Guid id, long engineSessionSeqId, boolean isFiltered, boolean allUsersWithPermission, int appMode) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id).addValue("engine_session_seq_id", engineSessionSeqId).addValue("is_filtered", isFiltered).addValue("app_mode", appMode); java.lang.String functionName = "GetPermissionsByEntityId"; if (allUsersWithPermission) { functionName = "GetAllUsersWithPermissionsOnEntityByEntityId"; } return getCallsHandler().executeReadList(functionName, org.ovirt.engine.core.dao.PermissionDAOImpl.PermissionRowMapper.instance, parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForEntity(org.ovirt.engine.core.compat.Guid id, long engineSessionSeqId, boolean isFiltered, boolean allUsersWithPermission, int appMode) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id).addValue("engine_session_seq_id", engineSessionSeqId).addValue("is_filtered", isFiltered).addValue("app_mode", appMode); java.lang.String functionName = "GetPermissionsByEntityId"; if (allUsersWithPermission) { functionName = "GetAllUsersWithPermissionsOnEntityByEntityId"; } return getCallsHandler().executeReadList(functionName, org.ovirt.engine.core.dao.PermissionDaoImpl.PermissionRowMapper.instance, parameterSource); }
private void initOsDefaultIconIds() { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(); callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { osIdToDefaultIconIdMap = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVmIcons, org.ovirt.engine.core.common.queries.GetVmIconsParameters.getDefaultIconsParameters(), callback); }	private void initOsDefaultIconIds() { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(); callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { final java.util.Map<java.lang.Integer, org.ovirt.engine.core.common.queries.VmIconIdSizePair> returnMap = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); if ((returnMap.get(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DEFAULT_OS_ID)) == null) { throw new java.lang.RuntimeException("Engine did not provide icon IDs of default OS."); } osIdToDefaultIconIdMap = java.util.Collections.unmodifiableMap(returnMap); initializeLargeToSmallIconMap(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVmIconDefaults, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), callback); }
@org.junit.Test public void testAddIncompleteParameters() throws java.lang.Exception { org.ovirt.engine.api.model.Cluster model = new org.ovirt.engine.api.model.Cluster(); model.setName(NAMES[0]); setUriInfo(setUpBasicUriExpectations()); control.replay(); try { collection.add(model); fail("expected WebApplicationException on incomplete parameters"); } catch (javax.ws.rs.WebApplicationException wae) { verifyIncompleteException(wae, "Cluster", "add", "dataCenter.name|id"); } }	@org.junit.Test public void testAddIncompleteParameters() throws java.lang.Exception { org.ovirt.engine.api.model.Cluster model = new org.ovirt.engine.api.model.Cluster(); setUriInfo(setUpBasicUriExpectations()); control.replay(); try { collection.add(model); fail("expected WebApplicationException on incomplete parameters"); } catch (javax.ws.rs.WebApplicationException wae) { verifyIncompleteException(wae, "Cluster", "add", "name"); } }
private java.util.ArrayList<java.lang.String> getLunIds(org.ovirt.engine.api.model.HostStorage storage, org.ovirt.engine.core.common.businessentities.storage.StorageType storageType, org.ovirt.engine.core.compat.Guid hostId) { java.util.List<org.ovirt.engine.api.model.LogicalUnit> logicalUnits = new java.util.ArrayList<org.ovirt.engine.api.model.LogicalUnit>(); if (storage.isSetLogicalUnits()) { logicalUnits = storage.getLogicalUnits().getLogicalUnits(); } else if ((storage.isSetVolumeGroup()) && (storage.getVolumeGroup().isSetLogicalUnits())) { logicalUnits = storage.getVolumeGroup().getLogicalUnits().getLogicalUnits(); } java.util.ArrayList<java.lang.String> lunIds = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.api.model.LogicalUnit unit : logicalUnits) { validateParameters(unit, 4, "id"); if ((storageType == (org.ovirt.engine.core.common.businessentities.storage.StorageType.ISCSI)) && (!(isConnectionAssumed(unit)))) { connectStorageToHost(hostId, storageType, unit); } lunIds.add(unit.getId()); } refreshHostStorage(hostId); return !(lunIds.isEmpty()) ? lunIds : null; }	private java.util.ArrayList<java.lang.String> getLunIds(org.ovirt.engine.api.model.HostStorage storage, org.ovirt.engine.core.common.businessentities.storage.StorageType storageType, org.ovirt.engine.core.compat.Guid hostId) { java.util.List<org.ovirt.engine.api.model.LogicalUnit> logicalUnits = new java.util.ArrayList<org.ovirt.engine.api.model.LogicalUnit>(); if ((storage.isSetLogicalUnits()) && (storage.getLogicalUnits().isSetLogicalUnits())) { logicalUnits = storage.getLogicalUnits().getLogicalUnits(); } else if (((storage.isSetVolumeGroup()) && (storage.getVolumeGroup().isSetLogicalUnits())) && (storage.getVolumeGroup().getLogicalUnits().isSetLogicalUnits())) { logicalUnits = storage.getVolumeGroup().getLogicalUnits().getLogicalUnits(); } java.util.ArrayList<java.lang.String> lunIds = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.api.model.LogicalUnit unit : logicalUnits) { validateParameters(unit, 4, "id"); if ((storageType == (org.ovirt.engine.core.common.businessentities.storage.StorageType.ISCSI)) && (!(isConnectionAssumed(unit)))) { connectStorageToHost(hostId, storageType, unit); } lunIds.add(unit.getId()); } refreshHostStorage(hostId); return !(lunIds.isEmpty()) ? lunIds : null; }
@org.junit.Test public void compositeInComposite_fromBackendToFrontend() { org.ovirt.engine.ui.uicommonweb.builders.CompositeBuilder<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel> composite1 = new org.ovirt.engine.ui.uicommonweb.builders.CompositeBuilder<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel>(new org.ovirt.engine.ui.uicommonweb.builders.Property1Builder()); org.ovirt.engine.ui.uicommonweb.builders.CompositeBuilder<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel> composite2 = new org.ovirt.engine.ui.uicommonweb.builders.CompositeBuilder<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel>(composite1); new org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel>(composite2).buildBackendFromFrontend(frontendModel, backendModel); assertThat(backendModel, is(equalTo(new org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel(org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutorTest.fe1, org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutorTest.be2)))); }	@org.junit.Test public void compositeInComposite_fromBackendToFrontend() { org.ovirt.engine.ui.uicommonweb.builders.CompositeBuilder<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel> composite1 = new org.ovirt.engine.ui.uicommonweb.builders.CompositeBuilder<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel>(new org.ovirt.engine.ui.uicommonweb.builders.Property1Builder()); org.ovirt.engine.ui.uicommonweb.builders.CompositeBuilder<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel> composite2 = new org.ovirt.engine.ui.uicommonweb.builders.CompositeBuilder<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel>(composite1); new org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel>(new org.ovirt.engine.ui.uicommonweb.builders.BackendAssert(org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutorTest.fe1, org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutorTest.be2), composite2).build(frontendModel, backendModel); }
@java.lang.Override public java.lang.String toString() { return ((((("Event [storagePoolId=" + (storagePoolId)) + ", domainId=") + (domainId)) + ", eventType=") + (eventType)) + "]"; }	public org.ovirt.engine.core.compat.Guid getVdsId() { return vdsId; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.GLUSTER_HOOK_ADDED : errorType; }	@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.gluster.AddGlusterHookCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.GLUSTER_HOOK_ADDED : errorType; }
private void revertChanges() { if ((originalNetParams) != null) { setIpv4BootProtocol(originalNetParams.getIpv4BootProtocol()); getIpv4Address().setEntity(originalNetParams.getIpv4Address()); getIpv4Subnet().setEntity(originalNetParams.getIpv4Subnet()); getIpv4Gateway().setEntity(originalNetParams.getIpv4Gateway()); setIpv6BootProtocol(originalNetParams.getIpv6BootProtocol()); getIpv6Address().setEntity(originalNetParams.getIpv6Address()); getIpv6Prefix().setEntity(originalNetParams.getIpv6Prefix()); getIpv6Gateway().setEntity(originalNetParams.getIpv6Gateway()); getQosOverridden().setEntity(originalNetParams.isQosOverridden()); getQosModel().init(originalNetParams.getQos()); getCustomPropertiesModel().deserialize(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueModel.convertProperties(originalNetParams.getCustomProperties())); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (sender == (getQosOverridden())) { qosOverriddenChanged(); } if (sender == (getIsToSync())) { isToSyncChanged(); } }
public void setFallbackProtocol() { final org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = this.vds.getStaticData(); vdsStatic.setProtocol(VdsProtocol.XML); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsStaticDao().update(vdsStatic); return null; }); }	public void setFallbackProtocol() { setFallbackProtocol(VdsProtocol.XML); fallbackTriggered = true; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Low") java.lang.String lowTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Low") java.lang.String lowTitle();
private void dontSendTicket() { final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.SetVmTicketCommand.getVm(); final org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser(); org.ovirt.engine.core.bll.SetVmTicketCommand.log.warn("Can't give console of virtual machine '{}' to user '{}', it has probably been taken by another user.", vm.getId(), user.getId()); addCanDoActionMessage(EngineMessages.ACTION_TYPE_FAILED_VM_IN_USE_BY_OTHER_USER); org.ovirt.engine.core.bll.SetVmTicketCommand.setSucceeded(false); }	private void dontSendTicket() { final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.SetVmTicketCommand.getVm(); final org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser(); org.ovirt.engine.core.bll.SetVmTicketCommand.log.warn("Can't give console of virtual machine '{}' to user '{}', it has probably been taken by another user.", vm.getId(), user.getId()); addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_VM_IN_USE_BY_OTHER_USER); org.ovirt.engine.core.bll.SetVmTicketCommand.setSucceeded(false); }
private java.lang.String nullToEmptyString(java.lang.Object obj) { return toStringNullToDefault(obj, ""); }	private static java.lang.String nullToEmptyString(java.lang.Object obj) { return java.util.Objects.toString(obj, ""); }
private void addMigratedVmsNotUpYet() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().getAllRunningForVds(getVdsId()); for (org.ovirt.engine.core.common.businessentities.VM incomingVm : vmList) { if ((incomingVm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingTo)) { vmList.add(incomingVm); } } }	private java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVmsToMoveToUnknown() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().getAllRunningForVds(getVdsId()); java.util.List<org.ovirt.engine.core.common.businessentities.VM> migratingVms = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().getAllMigratingToHost(getVdsId()); for (org.ovirt.engine.core.common.businessentities.VM incomingVm : migratingVms) { if ((incomingVm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingTo)) { vmList.add(incomingVm); } } return vmList; }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The ${type} name is already in use. please choose a unique name and try again.") java.lang.String ACTION_TYPE_FAILED_NAME_ALREADY_USED();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The ${type} name is already in use, please choose a unique name and try again.") java.lang.String ACTION_TYPE_FAILED_NAME_ALREADY_USED();
public org.ovirt.engine.core.compat.Guid getDiskOperatorUserId() { return diskOperatorUserId; }	public org.ovirt.engine.core.compat.Guid getDiskOperatorAuthzPrincipalDbId() { return diskOperatorAuthzPrincipalDbId; }
@java.lang.Override public void init(java.lang.String title, java.lang.String width, java.lang.String height, boolean resizeEnabled) { titleLabel.setText(title); asWidget().setWidth(width); asWidget().setHeight(height); asWidget().enableResizeSupport(resizeEnabled); }	@java.lang.Override public void init(java.lang.String title, java.lang.String width, java.lang.String height, boolean resizeEnabled, boolean closeIconVisible) { titleLabel.setText(title); asWidget().setWidth(width); asWidget().setHeight(height); asWidget().enableResizeSupport(resizeEnabled); asWidget().setCloseIconButtonVisible(closeIconVisible); }
public org.ovirt.engine.core.bll.ValidationResult validateCinderDisksAlreadyRegistered() { return validate(new java.util.concurrent.Callable<org.ovirt.engine.core.bll.ValidationResult>() { @java.lang.Override public org.ovirt.engine.core.bll.ValidationResult call() { for (org.ovirt.engine.core.common.businessentities.storage.CinderDisk disk : cinderDisks) { org.ovirt.engine.core.common.businessentities.storage.Disk diskFromDB = getDiskDao().get(disk.getId()); if (diskFromDB != null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.CINDER_DISK_ALREADY_REGISTERED, java.lang.String.format("$diskAlias %s", diskFromDB.getDiskAlias())); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; } }); }	public org.ovirt.engine.core.bll.ValidationResult validateCinderDisksAlreadyRegistered() { return validate(new java.util.concurrent.Callable<org.ovirt.engine.core.bll.ValidationResult>() { @java.lang.Override public org.ovirt.engine.core.bll.ValidationResult call() { for (org.ovirt.engine.core.common.businessentities.storage.CinderDisk disk : cinderDisks) { org.ovirt.engine.core.common.businessentities.storage.Disk diskFromDB = getDiskDao().get(disk.getId()); if (diskFromDB != null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CINDER_DISK_ALREADY_REGISTERED, java.lang.String.format("$diskAlias %s", diskFromDB.getDiskAlias())); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; } }); }
private org.springframework.ldap.core.support.LdapContextSource getContextSource(java.lang.String domain, org.ovirt.engine.core.ldap.LdapProviderType ldapProviderType, java.lang.String username, java.lang.String password, java.lang.String ldapServer) { org.springframework.ldap.core.support.LdapContextSource context = new org.springframework.ldap.core.support.LdapContextSource(); java.lang.String ldapBaseDn = org.ovirt.engine.core.utils.ipa.SimpleAuthenticationCheck.domainToDN(domain); java.lang.StringBuilder ldapUserDn = new java.lang.StringBuilder(); if (ldapProviderType.equals(LdapProviderType.ipa)) { ldapUserDn.append("uid=").append(username).append(",cn=Users").append(",cn=Accounts,"); } else if (ldapProviderType.equals(LdapProviderType.rhds)) { ldapUserDn.append("uid=").append(username).append(",ou=People"); } else if (ldapProviderType.equals(LdapProviderType.ibm)) { ldapUserDn.append("uid=").append(username); } else { ldapUserDn.append("CN=").append(username).append(",CN=Users,"); } ldapUserDn.append(ldapBaseDn); context.setUrl(getLdapUrl(ldapServer)); if (!(ldapProviderType.equals(LdapProviderType.ibm))) { context.setBase(ldapBaseDn); } else { context.setAnonymousReadOnly(true); } context.setUserDn(ldapUserDn.toString()); context.setPassword(password); context.setReferral("follow"); java.util.Map<java.lang.String, java.lang.String> baseEnvironmentProperties = new java.util.HashMap<java.lang.String, java.lang.String>(); baseEnvironmentProperties.put("java.naming.ldap.attributes.binary", "objectGUID"); context.setBaseEnvironmentProperties(baseEnvironmentProperties); return context; }	private org.springframework.ldap.core.support.LdapContextSource getContextSource(java.lang.String domain, org.ovirt.engine.core.ldap.LdapProviderType ldapProviderType, java.lang.String username, java.lang.String password, java.lang.String ldapServer) { org.springframework.ldap.core.support.LdapContextSource context = new org.springframework.ldap.core.support.LdapContextSource(); java.lang.String ldapBaseDn = org.ovirt.engine.core.utils.ipa.SimpleAuthenticationCheck.domainToDN(domain); java.lang.StringBuilder ldapUserDn = new java.lang.StringBuilder(); if (ldapProviderType.equals(LdapProviderType.ipa)) { ldapUserDn.append("uid=").append(username).append(",cn=Users").append(",cn=Accounts,"); } else if (ldapProviderType.equals(LdapProviderType.rhds)) { ldapUserDn.append("uid=").append(username).append(",ou=People"); } else if (ldapProviderType.equals(LdapProviderType.itds)) { ldapUserDn.append("uid=").append(username); } else { ldapUserDn.append("CN=").append(username).append(",CN=Users,"); } ldapUserDn.append(ldapBaseDn); context.setUrl(getLdapUrl(ldapServer)); if (!(ldapProviderType.equals(LdapProviderType.itds))) { context.setBase(ldapBaseDn); } else { context.setAnonymousReadOnly(true); } context.setUserDn(ldapUserDn.toString()); context.setPassword(password); context.setReferral("follow"); java.util.Map<java.lang.String, java.lang.String> baseEnvironmentProperties = new java.util.HashMap<java.lang.String, java.lang.String>(); baseEnvironmentProperties.put("java.naming.ldap.attributes.binary", "objectGUID"); context.setBaseEnvironmentProperties(baseEnvironmentProperties); return context; }
public void getClusterNetworkList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>> aQuery, org.ovirt.engine.core.compat.Guid clusterId) { if ((aQuery.converterCallback) == null) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>>() { @java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<>(); } return ((java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>) (source)); } }; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworksByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), aQuery); }	public void getClusterNetworkList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>> aQuery, org.ovirt.engine.core.compat.Guid clusterId) { if ((aQuery.converterCallback) == null) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter(); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworksByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), aQuery); }
@java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags> ret = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Tags tags : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags>) (source))) { if ((tags.getType()) == (org.ovirt.engine.core.common.businessentities.TagsType.GeneralTag)) { ret.add(tags); } } return ret; } return new org.ovirt.engine.core.common.businessentities.Tags(); }	@java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags> ret = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Tags tags : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags>) (source))) { if ((tags.gettype()) == (org.ovirt.engine.core.common.businessentities.TagsType.GeneralTag)) { ret.add(tags); } } return ret; } return new org.ovirt.engine.core.common.businessentities.Tags(); }
@org.junit.Test public void failWhenCertEnforcedAndCANotFound() { org.ovirt.engine.core.common.queries.ConfigureConsoleOptionsParams params = new org.ovirt.engine.core.common.queries.ConfigureConsoleOptionsParams(getValidOptions(GraphicsType.SPICE), false); org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery query = spy(new org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery(params)); doReturn(mockVm(GraphicsType.SPICE)).when(query).getCachedVm(); mockSpiceRelatedConfig(query); doReturn(true).when(query).getConfigValue(ConfigValues.EnableSpiceRootCertificateValidation); org.ovirt.engine.core.common.queries.VdcQueryReturnValue caResult = new org.ovirt.engine.core.common.queries.VdcQueryReturnValue(); caResult.setSucceeded(false); doReturn(caResult).when(backend).runInternalQuery(eq(VdcQueryType.GetCACertificate), any(org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class)); doReturn(backend).when(query).getBackend(); query.executeQueryCommand(); assertFalse(query.getQueryReturnValue().getSucceeded()); }	@org.junit.Test public void failWhenCertEnforcedAndCANotFound() { org.ovirt.engine.core.common.queries.ConfigureConsoleOptionsParams params = new org.ovirt.engine.core.common.queries.ConfigureConsoleOptionsParams(getValidOptions(GraphicsType.SPICE), false); org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery query = spy(new org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery(params)); doReturn(mockVm(GraphicsType.SPICE)).when(query).getCachedVm(); mockSpiceRelatedConfig(query); doReturn(true).when(query).getConfigValue(ConfigValues.EnableSpiceRootCertificateValidation); doReturn(true).when(query).getConfigValue(ConfigValues.RemapCtrlAltDelDefault); org.ovirt.engine.core.common.queries.VdcQueryReturnValue caResult = new org.ovirt.engine.core.common.queries.VdcQueryReturnValue(); caResult.setSucceeded(false); doReturn(caResult).when(backend).runInternalQuery(eq(VdcQueryType.GetCACertificate), any(org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class)); doReturn(backend).when(query).getBackend(); query.getQueryReturnValue().setSucceeded(true); query.executeQueryCommand(); assertFalse(query.getQueryReturnValue().getSucceeded()); }
private void removeVmStatelessImages(org.ovirt.engine.core.compat.Guid vmId) { if (getSnapshotDAO().exists(vmId, SnapshotType.STATELESS)) { org.ovirt.engine.core.bll.ProcessDownVmCommand.log.infoFormat("Deleting snapshot for stateless vm {0}", vmId); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.RestoreStatelessVm, new org.ovirt.engine.core.common.action.VmOperationParameterBase(vmId), org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks(org.ovirt.engine.core.bll.ProcessDownVmCommand.getExecutionContext(), org.ovirt.engine.core.bll.ProcessDownVmCommand.getLock())); } }	private void removeVmStatelessImages() { if (getSnapshotDAO().exists(org.ovirt.engine.core.bll.ProcessDownVmCommand.getVmId(), SnapshotType.STATELESS)) { org.ovirt.engine.core.bll.ProcessDownVmCommand.log.infoFormat("Deleting snapshot for stateless vm {0}", org.ovirt.engine.core.bll.ProcessDownVmCommand.getVmId()); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.RestoreStatelessVm, new org.ovirt.engine.core.common.action.VmOperationParameterBase(org.ovirt.engine.core.bll.ProcessDownVmCommand.getVmId()), org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks(org.ovirt.engine.core.bll.ProcessDownVmCommand.getExecutionContext(), org.ovirt.engine.core.bll.ProcessDownVmCommand.getLock())); } }
@org.junit.Test public void testWithNoLists() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails volDetailsEntity = new org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails(); volDetailsEntity.setBrickDetails(getBrickDetails(0, 0, 0)); org.ovirt.engine.api.model.GlusterBrickAdvancedDetails model = org.ovirt.engine.api.restapi.types.GlusterBrickDetailMapper.map(volDetailsEntity, null); assertNotNull(model); assertNull(model.getClients()); assertNull(model.getMntOptions()); }	@org.junit.Test public void testWithNoLists() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails volDetailsEntity = new org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails(); volDetailsEntity.setBrickDetails(getBrickDetails(0, 0, 0)); org.ovirt.engine.api.model.GlusterBrickAdvancedDetails model = org.ovirt.engine.api.restapi.types.GlusterBrickDetailMapper.map(volDetailsEntity, null); assertNotNull(model); assertNull(model.getGlusterClients()); assertNull(model.getMntOptions()); }
private void localize(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { bricks.setLabel(constants.selectBrickToViewFopStats()); nfsServers.setLabel(constants.selectServerToViewFopStats()); bricksTab.setLabel(constants.volumeProfileBricksTab()); nfsTab.setLabel(constants.volumeProfileNfsTab()); }	private void localize(org.ovirt.engine.ui.webadmin.ApplicationConstants constants, org.ovirt.engine.ui.webadmin.ApplicationMessages messages) { bricks.setLabel(constants.selectBrickToViewFopStats()); nfsServers.setLabel(constants.selectServerToViewFopStats()); bricksTab.setLabel(constants.volumeProfileBricksTab()); nfsTab.setLabel(constants.volumeProfileNfsTab()); bricksErrorLabel.setText(constants.brickProfileErrorMessage()); nfsErrorLabel.setText(constants.nfsProfileErrorMessage()); }
@java.lang.Override public javax.ws.rs.core.Response remove(org.ovirt.engine.api.model.Action action) { return doAction(VdcActionType.RemoveGlusterHook, new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(guid), action); }	private javax.ws.rs.core.Response copy(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters params = new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(guid); if (action.isSetHost()) { validateParameters(action.getHost(), "host.id|name"); org.ovirt.engine.core.compat.Guid hostId = getHostId(action); params.setSourceServerId(hostId); } return doAction(VdcActionType.UpdateGlusterHook, params, action); }
public void setIsGlusterPeerProbeNeeded(boolean isGlusterPeerProbeNeeded) { this.isGlusterPeerProbeNeeded = isGlusterPeerProbeNeeded; }	public void setGlusterPeerProbeNeeded(boolean glusterPeerProbeNeeded) { this.glusterPeerProbeNeeded = glusterPeerProbeNeeded; }
@org.junit.Test public void testExtendingDiskWithQuota() { org.ovirt.engine.core.compat.Guid quotaId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.storage.DiskImage oldDiskImage = createDiskImage(); oldDiskImage.setQuotaId(quotaId); oldDiskImage.setSize(getBytesByGB(3)); org.ovirt.engine.core.common.businessentities.storage.DiskImage newDiskImage = createDiskImage(); newDiskImage.setQuotaId(quotaId); newDiskImage.setSize(getBytesByGB(5)); org.ovirt.engine.core.common.action.UpdateVmDiskParameters parameters = new org.ovirt.engine.core.common.action.UpdateVmDiskParameters(vmId, diskImageGuid, newDiskImage); long diskExtendingDiffInGB = (newDiskImage.getSizeInGigabytes()) - (oldDiskImage.getSizeInGigabytes()); when(diskDao.get(diskImageGuid)).thenReturn(oldDiskImage); initializeCommand(parameters); org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter consumptionParameter = ((org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) (command.getQuotaStorageConsumptionParameters().get(0))); assertTrue(((consumptionParameter.getRequestedStorageGB()) == diskExtendingDiffInGB)); }	@org.junit.Test public void testExtendingDiskWithQuota() { org.ovirt.engine.core.compat.Guid quotaId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.storage.DiskImage oldDiskImage = createDiskImage(); oldDiskImage.setQuotaId(quotaId); oldDiskImage.setSize(org.ovirt.engine.core.common.utils.SizeConverter.convert(3, SizeConverter.SizeUnit.GB, SizeConverter.SizeUnit.BYTES).longValue()); org.ovirt.engine.core.common.businessentities.storage.DiskImage newDiskImage = createDiskImage(); newDiskImage.setQuotaId(quotaId); newDiskImage.setSize(org.ovirt.engine.core.common.utils.SizeConverter.convert(5, SizeConverter.SizeUnit.GB, SizeConverter.SizeUnit.BYTES).longValue()); org.ovirt.engine.core.common.action.UpdateVmDiskParameters parameters = new org.ovirt.engine.core.common.action.UpdateVmDiskParameters(vmId, diskImageGuid, newDiskImage); long diskExtendingDiffInGB = (newDiskImage.getSizeInGigabytes()) - (oldDiskImage.getSizeInGigabytes()); when(diskDao.get(diskImageGuid)).thenReturn(oldDiskImage); initializeCommand(parameters); org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter consumptionParameter = ((org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) (command.getQuotaStorageConsumptionParameters().get(0))); assertEquals(consumptionParameter.getRequestedStorageGB().longValue(), diskExtendingDiffInGB); }
public org.ovirt.engine.core.bll.ValidationResult validRemovableHostedEngineDisks() { return isHostedEngineDirectLunDisk() ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_HOSTED_ENGINE_DISK); }	public org.ovirt.engine.core.bll.ValidationResult validRemovableHostedEngineDisks(org.ovirt.engine.core.common.businessentities.VM vm) { return (isHostedEngineDirectLunDisk()) || (!(vm.isHostedEngine())) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_HOSTED_ENGINE_DISK); }
public java.lang.String getSupportedEngines() { return mVdsDynamic.getSupportedEngines(); }	public java.lang.String getSupportedEngines() { return vdsDynamic.getSupportedEngines(); }
@java.lang.Override protected boolean canDoAction() { boolean result = true; if (((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent()) == null) || (org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent().equals(OVIRT))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLEGAL_ORIGIN); result = false; } if (!result) { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__ADD); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__EXTERNAL_EVENT); } return result; }	@java.lang.Override protected boolean canDoAction() { boolean result = true; if (((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent()) == null) || (org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent().getOrigin().equalsIgnoreCase(OVIRT))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLEGAL_ORIGIN); result = false; } if (!result) { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__ADD); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__EXTERNAL_EVENT); } return result; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { warningLabel.setVisible((!(object.getMigrateData().getEntity()))); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { warningLabel.setVisible((!(object.getMigrateData().getEntity()))); }
private void applyNetworkChangesToHosts() { org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand<T>.SyncNetworkParametersBuilder builder = new SyncNetworkParametersBuilder(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getContext()); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = builder.buildParameters(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork(), getOldNetwork()); if (!(parameters.isEmpty())) { org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(parameters); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, parameters); } }	private void applyNetworkChangesToHosts() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = syncNetworkParametersBuilder.buildParameters(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork(), getOldNetwork()); if (!(parameters.isEmpty())) { org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(parameters); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, parameters); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.RoleGroupMap> getAllForRole(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("role_id", id); return getCallsHandler().executeReadList("Get_role_groups_By_role_id", org.ovirt.engine.core.dao.RoleGroupMapDAOImpl.RoleGroupMapRowMapper.instance, parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.RoleGroupMap> getAllForRole(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("role_id", id); return getCallsHandler().executeReadList("Get_role_groups_By_role_id", org.ovirt.engine.core.dao.RoleGroupMapDaoImpl.RoleGroupMapRowMapper.instance, parameterSource); }
private void writeType(org.ovirt.api.metamodel.concepts.Type type) { if (type instanceof org.ovirt.api.metamodel.concepts.StructType) { writeStructType(((org.ovirt.api.metamodel.concepts.StructType) (type))); } if (type instanceof org.ovirt.api.metamodel.concepts.EnumType) { writeEnumType(((org.ovirt.api.metamodel.concepts.EnumType) (type))); } }	private void writeType(org.ovirt.api.metamodel.concepts.Type type) { if (type instanceof org.ovirt.api.metamodel.concepts.PrimitiveType) { writePrimitiveType(((org.ovirt.api.metamodel.concepts.PrimitiveType) (type))); } else if (type instanceof org.ovirt.api.metamodel.concepts.StructType) { writeStructType(((org.ovirt.api.metamodel.concepts.StructType) (type))); } else if (type instanceof org.ovirt.api.metamodel.concepts.EnumType) { writeEnumType(((org.ovirt.api.metamodel.concepts.EnumType) (type))); } }
protected java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.DiskImage> getDiskToDestinationMap(org.ovirt.engine.api.model.VM vm, org.ovirt.engine.core.compat.Guid storageDomainId, boolean isDomainSet) { java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.DiskImage> diskToDestinationMap = null; if ((vm.isSetDisks()) && (vm.getDisks().isSetDisks())) { diskToDestinationMap = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.DiskImage>(); for (org.ovirt.engine.api.model.Disk disk : vm.getDisks().getDisks()) { if (disk.isSetId()) { org.ovirt.engine.core.common.businessentities.Disk sourceDisk = queryDisk(disk); if (sourceDisk.isDiskImage()) { org.ovirt.engine.core.common.businessentities.DiskImage destinationDisk = ((org.ovirt.engine.core.common.businessentities.DiskImage) (org.ovirt.engine.api.restapi.types.DiskMapper.map(disk, sourceDisk))); if (((disk.isSetStorageDomains()) && (disk.getStorageDomains().isSetStorageDomains())) && (disk.getStorageDomains().getStorageDomains().get(0).isSetId())) { destinationDisk.setStorageIds(new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>()); org.ovirt.engine.core.compat.Guid newStorageDomainId = (isDomainSet) ? storageDomainId : asGuid(disk.getStorageDomains().getStorageDomains().get(0).getId()); destinationDisk.getStorageIds().add(newStorageDomainId); } diskToDestinationMap.put(destinationDisk.getId(), destinationDisk); } } } } return diskToDestinationMap; }	protected java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.DiskImage> getDestinationTemplateDiskMap(org.ovirt.engine.api.model.VM vm, org.ovirt.engine.core.compat.Guid storageDomainId, boolean isTemplateGeneralStorageDomainSet) { java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.DiskImage> destinationTemplateDiskMap = null; if ((vm.isSetDisks()) && (vm.getDisks().isSetDisks())) { destinationTemplateDiskMap = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.DiskImage>(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.Disk> vmSourceDisks = queryVmDisksMap(vm); for (org.ovirt.engine.api.model.Disk disk : vm.getDisks().getDisks()) { if (!(disk.isSetId())) { continue; } org.ovirt.engine.core.compat.Guid currDiskID = asGuid(disk.getId()); org.ovirt.engine.core.common.businessentities.Disk sourceDisk = vmSourceDisks.get(currDiskID); if ((sourceDisk == null) || (!(isDiskImage(sourceDisk)))) { continue; } org.ovirt.engine.core.common.businessentities.DiskImage destinationDisk = ((org.ovirt.engine.core.common.businessentities.DiskImage) (org.ovirt.engine.api.restapi.types.DiskMapper.map(disk, sourceDisk))); if (isTemplateGeneralStorageDomainSet) { destinationDisk.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(storageDomainId))); } destinationDisk.setDiskProfileId(null); destinationDisk.setQuotaId(null); destinationTemplateDiskMap.put(destinationDisk.getId(), destinationDisk); } } return destinationTemplateDiskMap; }
private void updateCanSpecifyIpv6() { boolean isChangeable = (bootProtocolsAvailable) && (getIsStaticIpv6Address()); getIpv6Address().setChangeProhibitionReason((isChangeable && (!(staticIpChangeAllowed)) ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().staticIpAddressSameAsHostname() : null)); getIpv6Address().setIsChangeable((isChangeable && (staticIpChangeAllowed))); getIpv6Prefix().setIsChangeable(isChangeable); getIpv6Gateway().setIsChangeable(isChangeable); }	private void updateCanSpecifyIpv6() { boolean isChangeable = (bootProtocolsAvailable) && (getIsStaticIpv6Address()); getIpv6Address().setChangeProhibitionReason((isChangeable && (!(staticIpv6ChangeAllowed)) ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().staticIpAddressSameAsHostname() : null)); getIpv6Address().setIsChangeable((isChangeable && (staticIpv6ChangeAllowed))); getIpv6Prefix().setIsChangeable(isChangeable); getIpv6Gateway().setIsChangeable(isChangeable); }
private org.ovirt.engine.core.compat.Guid getTargetVnicProfileId(org.ovirt.engine.api.model.VnicProfileMapping model) { return model.isSetTargetVnicProfile() ? org.ovirt.engine.core.compat.Guid.createGuidFromString(model.getTargetVnicProfile().getId()) : null; }	private static org.ovirt.engine.core.compat.Guid getTargetVnicProfileId(org.ovirt.engine.api.model.VnicProfileMapping model) { return model.isSetTargetVnicProfile() ? org.ovirt.engine.core.compat.Guid.createGuidFromString(model.getTargetVnicProfile().getId()) : null; }
protected org.ovirt.engine.api.model.Templates mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> entities) { org.ovirt.engine.api.common.util.SizeBehaviour sizeBehaviour = org.ovirt.engine.api.common.util.SizeBehaviourHelper.getSizeBehaviour(getUriInfo()); if (sizeBehaviour.includeData()) { org.ovirt.engine.core.common.queries.IdsQueryParameters params = new org.ovirt.engine.core.common.queries.IdsQueryParameters(); java.util.List<org.ovirt.engine.core.compat.Guid> ids = org.ovirt.engine.core.common.businessentities.Entities.getIds(entities); params.setId(ids); org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = runQuery(VdcQueryType.GetVmsInit, params); if ((queryReturnValue.getSucceeded()) && ((queryReturnValue.getReturnValue()) != null)) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> vmInits = queryReturnValue.getReturnValue(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmInit> initMap = org.ovirt.engine.core.common.businessentities.Entities.businessEntitiesById(vmInits); for (org.ovirt.engine.core.common.businessentities.VmTemplate template : entities) { template.setVmInit(initMap.get(template.getId())); } } } org.ovirt.engine.api.model.Templates collection = new org.ovirt.engine.api.model.Templates(); if (sizeBehaviour.includeData()) { for (org.ovirt.engine.core.common.businessentities.VmTemplate entity : entities) { collection.getTemplates().add(addLinks(populate(map(entity), entity))); } } if (sizeBehaviour.includeSize()) { collection.setSize(((long) (entities.size()))); } return collection; }	protected org.ovirt.engine.api.model.Templates mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> entities) { java.util.Set<java.lang.String> details = org.ovirt.engine.api.common.util.DetailHelper.getDetails(httpHeaders, uriInfo); boolean includeData = details.contains(DetailHelper.MAIN); boolean includeSize = details.contains("size"); if (includeData) { org.ovirt.engine.core.common.queries.IdsQueryParameters params = new org.ovirt.engine.core.common.queries.IdsQueryParameters(); java.util.List<org.ovirt.engine.core.compat.Guid> ids = org.ovirt.engine.core.common.businessentities.Entities.getIds(entities); params.setId(ids); org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = runQuery(VdcQueryType.GetVmsInit, params); if ((queryReturnValue.getSucceeded()) && ((queryReturnValue.getReturnValue()) != null)) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> vmInits = queryReturnValue.getReturnValue(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmInit> initMap = org.ovirt.engine.core.common.businessentities.Entities.businessEntitiesById(vmInits); for (org.ovirt.engine.core.common.businessentities.VmTemplate template : entities) { template.setVmInit(initMap.get(template.getId())); } } } org.ovirt.engine.api.model.Templates collection = new org.ovirt.engine.api.model.Templates(); if (includeData) { for (org.ovirt.engine.core.common.businessentities.VmTemplate entity : entities) { collection.getTemplates().add(addLinks(populate(map(entity), entity))); } } if (includeSize) { collection.setSize(((long) (entities.size()))); } return collection; }
public static java.lang.String[] parse(java.lang.String id) { java.lang.String[] ids = id.split("\\."); if (((ids == null) || ((ids.length) == 0)) || ((ids.length) != 4)) { throw new java.lang.IllegalArgumentException("wrong id format"); } return ids; }	public static java.lang.String[] parse(java.lang.String id) { java.lang.String[] ids = id.split("\\|"); if (((ids == null) || ((ids.length) == 0)) || ((ids.length) != 4)) { throw new java.lang.IllegalArgumentException("wrong id format"); } return ids; }
@org.ovirt.engine.ui.common.DefaultStringValue("Image ID") java.lang.String imageIDDisk();	@org.ovirt.engine.ui.common.DefaultStringValue("Disk Snapshot ID") java.lang.String diskSnapshotIDDisk();
private void poplate(java.util.Map<java.lang.String, java.lang.Boolean> activeBonds, java.util.List<org.ovirt.engine.core.common.businessentities.NetworkEntity> clusterNetworks, java.util.List<java.lang.String> networks, java.util.Map<java.lang.String, java.util.List<java.lang.String>> bondNics, org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface) { org.ovirt.engine.core.utils.Pair<java.lang.Boolean, java.lang.String> retVal = IsNetworkInCluster(iface.getBondName(), clusterNetworks); java.lang.String networkName = retVal.getSecond(); if (retVal.getFirst()) { if (!(activeBonds.containsKey(iface.getBondName()))) { activeBonds.put(iface.getBondName(), false); } activeBonds.put(iface.getBondName(), ((activeBonds.get(iface.getBondName())) || ((iface.getStatistics().getStatus()) == (org.ovirt.engine.core.common.businessentities.InterfaceStatus.Up)))); if ((!(networks.contains(networkName))) && (!(activeBonds.containsKey(iface.getName())))) { networks.add(networkName); } else if ((networks.contains(networkName)) && (activeBonds.containsKey(iface.getBondName()))) { networks.remove(networkName); } if (!(bondNics.containsKey(iface.getBondName()))) { bondNics.put(iface.getBondName(), new java.util.ArrayList<java.lang.String>()); } bondNics.get(iface.getBondName()).add(iface.getName()); } }	private void poplate(java.util.Map<java.lang.String, java.lang.Boolean> activeBonds, java.util.List<org.ovirt.engine.core.common.businessentities.Network> clusterNetworks, java.util.List<java.lang.String> networks, java.util.Map<java.lang.String, java.util.List<java.lang.String>> bondNics, org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface) { org.ovirt.engine.core.utils.Pair<java.lang.Boolean, java.lang.String> retVal = IsNetworkInCluster(iface.getBondName(), clusterNetworks); java.lang.String networkName = retVal.getSecond(); if (retVal.getFirst()) { if (!(activeBonds.containsKey(iface.getBondName()))) { activeBonds.put(iface.getBondName(), false); } activeBonds.put(iface.getBondName(), ((activeBonds.get(iface.getBondName())) || ((iface.getStatistics().getStatus()) == (org.ovirt.engine.core.common.businessentities.InterfaceStatus.Up)))); if ((!(networks.contains(networkName))) && (!(activeBonds.containsKey(iface.getName())))) { networks.add(networkName); } else if ((networks.contains(networkName)) && (activeBonds.containsKey(iface.getBondName()))) { networks.remove(networkName); } if (!(bondNics.containsKey(iface.getBondName()))) { bondNics.put(iface.getBondName(), new java.util.ArrayList<java.lang.String>()); } bondNics.get(iface.getBondName()).add(iface.getName()); } }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.String value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult ipValidation = org.ovirt.engine.ui.uicommonweb.validation.SubnetMaskValidation.IP_VALIDATOR.validate(value); if (!(ipValidation.getSuccess())) { return ipValidation; } org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if (value != null) { result.setSuccess(validateNetMask(value)); result.setReasons(org.ovirt.engine.ui.uicommonweb.validation.SubnetMaskValidation.reasons); } return result; }	@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult ipValidation = org.ovirt.engine.ui.uicommonweb.validation.SubnetMaskValidation.IP_VALIDATOR.validate(value); if (!(ipValidation.getSuccess())) { return ipValidation; } org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if ((value != null) && (value instanceof java.lang.String)) { result.setSuccess(validateNetMask(((java.lang.String) (value)))); result.setReasons(org.ovirt.engine.ui.uicommonweb.validation.SubnetMaskValidation.reasons); } return result; }
private static void initHasSpiceSupport() { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(); callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.spiceSupportForVersionAndOs = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.OsRepository, new org.ovirt.engine.core.common.queries.OsQueryParameters(org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.HasSpiceSupportMatrix), callback); }	private static void initHasSpiceSupport() { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(); callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.spiceSupportMatrix = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.OsRepository, new org.ovirt.engine.core.common.queries.OsQueryParameters(org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetSpiceSupportMatrix), callback); }
public void setCidr(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> cidr) { this.cidr = cidr; }	private void setCidr(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> cidr) { this.cidr = cidr; }
private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus fetchedStatus) { log.debug("Detected that status of brick '{}' in volume '{}' changed from '{}' to '{}'", brick.getQualifiedName(), volume.getName(), brick.getStatus(), fetchedStatus); logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, new java.util.HashMap<java.lang.String, java.lang.String>() { { put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); put("source", "cli"); } }); if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN); } }	private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus fetchedStatus) { org.ovirt.engine.core.bll.gluster.GlusterSyncJob.log.debug("Detected that status of brick '{}' in volume '{}' changed from '{}' to '{}'", brick.getQualifiedName(), volume.getName(), brick.getStatus(), fetchedStatus); java.util.Map<java.lang.String, java.lang.String> customValues = new java.util.HashMap<>(); customValues.put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); customValues.put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); customValues.put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); customValues.put(GlusterConstants.SOURCE, GlusterConstants.SOURCE_CLI); logUtil.logAuditMessage(volume.getClusterId(), volume.getClusterName(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, customValues); if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { logUtil.logAuditMessage(volume, AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { alertDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN); } }
@java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.NetworkEntity n) { return n.getname().equals(network.getname()); }	@java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.Network n) { return n.getname().equals(network.getname()); }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass()) != (o.getClass()))) { return false; } org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages that = ((org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages) (o)); return ((pageSize) == (that.pageSize)) && (java.util.Objects.equals(getHost(), that.getHost())); }	@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass()) != (o.getClass()))) { return false; } org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages that = ((org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages) (o)); return (((pageSize) == (that.pageSize)) && (java.util.Objects.equals(getHost(), that.getHost()))) && (java.util.Objects.equals(getVm(), that.getVm())); }
@java.lang.Override public void onSuccess(java.lang.Object model, final java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> returnValue) { if ((getSystemTreeSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.Cluster selectedCluster = ((org.ovirt.engine.core.common.businessentities.Cluster) (getSystemTreeSelectedItem().getEntity())); clusterSnapshotConfigModel.getClusters().setItems(returnValue, selectedCluster); } else { if ((getSelectedItems()) != null) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getSelectedItems().get(0); if (volumeEntity != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<org.ovirt.engine.core.common.businessentities.Cluster>() { @java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.core.common.businessentities.Cluster cluster) { clusterSnapshotConfigModel.getClusters().setItems(returnValue, cluster); } }), volumeEntity.getClusterId()); } } else { clusterSnapshotConfigModel.getClusters().setItems(((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (returnValue))); } } }	@java.lang.Override public void onSuccess(final java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> returnValue) { if ((getSystemTreeSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.Cluster selectedCluster = ((org.ovirt.engine.core.common.businessentities.Cluster) (getSystemTreeSelectedItem().getEntity())); clusterSnapshotConfigModel.getClusters().setItems(returnValue, selectedCluster); } else { if ((getSelectedItems()) != null) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getSelectedItems().get(0); if (volumeEntity != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.uicommonweb.models.volumes.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.businessentities.Cluster>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.Cluster cluster) { clusterSnapshotConfigModel.getClusters().setItems(returnValue, cluster); } }), volumeEntity.getClusterId()); } } else { clusterSnapshotConfigModel.getClusters().setItems(((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (returnValue))); } } }
@java.lang.Override protected void executeCommand() { createJob(org.ovirt.engine.core.bll.AddInternalJobCommand.getParameters().getActionType(), false); if (((org.ovirt.engine.core.bll.AddInternalJobCommand.getSucceeded()) && ((org.ovirt.engine.core.bll.AddInternalJobCommand.getParameters().getJobEntityType()) != null)) && ((org.ovirt.engine.core.bll.AddInternalJobCommand.getParameters().getJobEntityId()) != null)) { org.ovirt.engine.core.bll.AddInternalJobCommand.getDbFacade().getJobSubjectEntityDao().save(((org.ovirt.engine.core.compat.Guid) (org.ovirt.engine.core.bll.AddInternalJobCommand.getActionReturnValue())), org.ovirt.engine.core.bll.AddInternalJobCommand.getParameters().getJobEntityId(), org.ovirt.engine.core.bll.AddInternalJobCommand.getParameters().getJobEntityType()); } }	@java.lang.Override protected void executeCommand() { createJob(org.ovirt.engine.core.bll.AddInternalJobCommand.getParameters().getActionType(), false); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Note: You chose to detach all VMs from the pool - this will remove the pool itself.") java.lang.String detachAllVmsWarning();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Note: You chose to detach all VMs from the pool - this will remove the pool itself.") java.lang.String detachAllVmsWarning();
private static org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VideoRAMSettings selectVideoRAMSettings(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { org.ovirt.engine.core.compat.Version clusterVersion = org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vmBase); if (clusterVersion == null) { clusterVersion = org.ovirt.engine.core.compat.Version.getLast(); } if (clusterVersion.greaterOrEquals(new org.ovirt.engine.core.compat.Version(3, 6))) { return new org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoRAMSettings(); } else { return new org.ovirt.engine.core.bll.utils.VideoDeviceSettings.LegacyVideoRAMSettings(); } }	private static org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VideoRAMSettings selectVideoRAMSettings(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { if (org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vmBase).greaterOrEquals(new org.ovirt.engine.core.compat.Version(3, 6))) { return new org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoRAMSettings(); } else { return new org.ovirt.engine.core.bll.utils.VideoDeviceSettings.LegacyVideoRAMSettings(); } }
@java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return ((clusterNetworkModel.isAttached()) && ((clusterNetworkModel.isRequired()) & (!(clusterNetworkModel.isExternal())))) && (!((multiCluster) && (isManagementOriginally(clusterNetworkModel)))); }	@java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return (((clusterNetworkModel.isAttached()) && (clusterNetworkModel.isRequired())) && (!(clusterNetworkModel.isExternal()))) && (!((multiCluster) && (isManagementOriginally(clusterNetworkModel)))); }
public void getGlusterHostsNewlyAdded(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.Map<java.lang.String, java.lang.String>> aQuery, org.ovirt.engine.core.compat.Guid clusterId, boolean isFingerprintRequired) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAddedGlusterServers, new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery); }	public void getGlusterHostsNewlyAdded(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.Map<java.lang.String, java.lang.String>> aQuery, org.ovirt.engine.core.compat.Guid clusterId, boolean isFingerprintRequired) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAddedGlusterServers, new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery); }
public static java.util.List<java.lang.String> initRange(java.lang.String start, java.lang.String end, int size) { try { long startNum = org.ovirt.engine.core.utils.MacAddressRangeUtils.macStringToLong(start); long endNum = org.ovirt.engine.core.utils.MacAddressRangeUtils.macStringToLong(end); return org.ovirt.engine.core.utils.MacAddressRangeUtils.innerInitRange(size, startNum, endNum); } catch (org.ovirt.engine.core.utils.MacAddressRangeUtils.InvalidMacString e) { org.ovirt.engine.core.utils.MacAddressRangeUtils.LOGGER.warn(e); return java.util.Collections.emptyList(); } }	public static java.util.List<java.lang.String> initRange(java.lang.String start, java.lang.String end, int size) { long startNum = org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong(start); long endNum = org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong(end); return org.ovirt.engine.core.utils.MacAddressRangeUtils.innerInitRange(size, startNum, endNum); }
public org.ovirt.engine.api.rsdl.Node build() { return node; }	public org.ovirt.engine.api.rsdl.ServiceTreeNode build() { return node; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ((org.ovirt.engine.core.common.businessentities.VDSGroup) (returnValue)); org.ovirt.engine.core.common.action.UpdateVdsActionParameters internalParam = ((org.ovirt.engine.core.common.action.UpdateVdsActionParameters) (model)); internalParam.setRebootAfterInstallation(cluster.supportsVirtService()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UpdateOvirtNode, internalParam, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue(); if ((returnValue != null) && (returnValue.getSucceeded())) { cancel(); } } }); }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ((org.ovirt.engine.core.common.businessentities.VDSGroup) (returnValue)); org.ovirt.engine.core.common.action.UpdateVdsActionParameters internalParam = ((org.ovirt.engine.core.common.action.UpdateVdsActionParameters) (model)); internalParam.setRebootAfterInstallation(cluster.supportsVirtService()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UpgradeOvirtNode, internalParam, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue(); if ((returnValue != null) && (returnValue.getSucceeded())) { cancel(); } } }); }
public void signOut() { for (org.ovirt.engine.ui.uicommonweb.models.SearchableListModel listModel : getItems()) { listModel.stopRefresh(); } getEventList().stopRefresh(); getAlertList().stopRefresh(); getTaskList().stopRefresh(); getBookmarkList().stopRefresh(); getRoleListModel().stopRefresh(); getSystemPermissionListModel().stopRefresh(); getClusterPolicyListModel().stopRefresh(); getInstanceTypeListModel().stopRefresh(); if (org.ovirt.engine.ui.frontend.Frontend.getInstance().getIsUserLoggedIn()) { org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setHandleFailure(true); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { } }; setLoggedInUser(null); getSignedOutEvent().raise(this, EventArgs.Empty); org.ovirt.engine.ui.frontend.Frontend.LogoffAsync(org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoggedInUser(), _asyncQuery); } }	public void signOut() { for (org.ovirt.engine.ui.uicommonweb.models.SearchableListModel listModel : getItems()) { listModel.stopRefresh(); } getEventList().stopRefresh(); getAlertList().stopRefresh(); getTaskList().stopRefresh(); getBookmarkList().stopRefresh(); getRoleListModel().stopRefresh(); getSystemPermissionListModel().stopRefresh(); getClusterPolicyListModel().stopRefresh(); getInstanceTypeListModel().stopRefresh(); if (org.ovirt.engine.ui.frontend.Frontend.getInstance().getIsUserLoggedIn()) { org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setHandleFailure(true); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { } }; setLoggedInUser(null); getSignedOutEvent().raise(this, EventArgs.EMPTY); org.ovirt.engine.ui.frontend.Frontend.getInstance().logoffAsync(org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoggedInUser(), _asyncQuery); } }
protected void addVmTemplateToDb() { getVmTemplate().setClusterId(getParameters().getClusterId()); if (!(vmHandler.validateDedicatedVdsExistOnSameCluster(getVmTemplate(), null))) { getVmTemplate().setDedicatedVmForVdsList(java.util.Collections.emptyList()); } getVmTemplate().setStatus(VmTemplateStatus.Locked); getVmTemplate().setQuotaId(getParameters().getQuotaId()); vmHandler.updateImportedVmUsbPolicy(getVmTemplate()); vmTemplateDao.save(getVmTemplate()); getCompensationContext().snapshotNewEntity(getVmTemplate()); int count = 1; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : getImages()) { image.setActive(true); org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap map = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.saveImage(image); getCompensationContext().snapshotNewEntity(image.getImage()); getCompensationContext().snapshotNewEntity(map); if (!(baseDiskDao.exists(image.getId()))) { image.setDiskAlias(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getSuggestedDiskAlias(image, getVmTemplateName(), count)); count++; baseDiskDao.save(image); getCompensationContext().snapshotNewEntity(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic(); diskDynamic.setId(image.getImageId()); diskDynamic.setActualSize(image.getActualSizeInBytes()); diskImageDynamicDao.save(diskDynamic); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.copyOf(image.getDiskVmElementForVm(sourceTemplateId), image.getId(), getVmTemplateId()); diskVmElementDao.save(dve); getCompensationContext().snapshotNewEntity(diskDynamic); } }	protected void addVmTemplateToDb() { getVmTemplate().setClusterId(getParameters().getClusterId()); if (!(vmHandler.validateDedicatedVdsExistOnSameCluster(getVmTemplate(), null))) { getVmTemplate().setDedicatedVmForVdsList(java.util.Collections.emptyList()); } getVmTemplate().setStatus(VmTemplateStatus.Locked); getVmTemplate().setQuotaId(getParameters().getQuotaId()); vmTemplateDao.save(getVmTemplate()); getCompensationContext().snapshotNewEntity(getVmTemplate()); int count = 1; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : getImages()) { image.setActive(true); org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap map = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.saveImage(image); getCompensationContext().snapshotNewEntity(image.getImage()); getCompensationContext().snapshotNewEntity(map); if (!(baseDiskDao.exists(image.getId()))) { image.setDiskAlias(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getSuggestedDiskAlias(image, getVmTemplateName(), count)); count++; baseDiskDao.save(image); getCompensationContext().snapshotNewEntity(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic(); diskDynamic.setId(image.getImageId()); diskDynamic.setActualSize(image.getActualSizeInBytes()); diskImageDynamicDao.save(diskDynamic); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.copyOf(image.getDiskVmElementForVm(sourceTemplateId), image.getId(), getVmTemplateId()); diskVmElementDao.save(dve); getCompensationContext().snapshotNewEntity(diskDynamic); } }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__ACTION__ADD); addValidateMessage(EngineMessage.VAR__TYPE__STORAGE__CONNECTION); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__ADD); addValidationMessage(EngineMessage.VAR__TYPE__STORAGE__CONNECTION); }
@org.junit.Test public void testInterfaceAlreadyLabeledWithWhenInterfaceIsLabeledBySameLabel() throws java.lang.Exception { java.lang.String labelA = "labelA"; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName(); vdsNetworkInterface.setLabels(java.util.Collections.singleton(labelA)); org.hamcrest.Matcher<org.ovirt.engine.core.bll.ValidationResult> matcher = org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.INTERFACE_ALREADY_LABELED, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostInterfaceValidator.VAR_LABELED_NIC, vdsNetworkInterface.getName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostInterfaceValidator.VAR_NIC_LABEL, labelA)); assertThat(new org.ovirt.engine.core.bll.validator.HostInterfaceValidator(vdsNetworkInterface).interfaceAlreadyLabeledWith(labelA), matcher); }	@org.junit.Test public void testInterfaceAlreadyLabeledWithWhenInterfaceIsLabeledBySameLabel() throws java.lang.Exception { java.lang.String labelA = "labelA"; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName(); vdsNetworkInterface.setLabels(java.util.Collections.singleton(labelA)); org.hamcrest.Matcher<org.ovirt.engine.core.bll.ValidationResult> matcher = org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.INTERFACE_ALREADY_LABELED, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostInterfaceValidator.VAR_LABELED_NIC, vdsNetworkInterface.getName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostInterfaceValidator.VAR_NIC_LABEL, labelA)); assertThat(new org.ovirt.engine.core.bll.validator.HostInterfaceValidator(vdsNetworkInterface).interfaceAlreadyLabeledWith(labelA), matcher); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase login(org.ovirt.engine.core.common.action.LoginUserParameters parameters) { switch (parameters.getActionType()) { case LoginUser : case LoginAdminUser : org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.CommandsFactory.createCommand(parameters.getActionType(), parameters); return command.executeAction(); default : return getErrorCommandReturnValue(EngineMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION); } }	@java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase login(org.ovirt.engine.core.common.action.LoginUserParameters parameters) { switch (parameters.getActionType()) { case LoginUser : case LoginAdminUser : org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.CommandsFactory.createCommand(parameters.getActionType(), parameters); return command.executeAction(); default : return getErrorCommandReturnValue(EngineMessage.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION); } }
public org.ovirt.engine.core.utils.ssh.EngineSSHClient getSSHClient() { java.lang.Long timeout = java.util.concurrent.TimeUnit.SECONDS.toMillis(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.ConnectToServerTimeoutInSeconds)); org.ovirt.engine.core.utils.ssh.EngineSSHClient sshclient = new org.ovirt.engine.core.utils.ssh.EngineSSHClient(); sshclient.setVds(org.ovirt.engine.core.bll.AddVdsCommand.getParameters().getvds()); sshclient.setHardTimeout(timeout); sshclient.setSoftTimeout(timeout); if ((org.ovirt.engine.core.bll.AddVdsCommand.getParameters().getAuthMethod()) == (org.ovirt.engine.core.common.action.VdsOperationActionParameters.AuthenticationMethod.PublicKey)) { sshclient.useDefaultKeyPair(); } else { sshclient.setPassword(org.ovirt.engine.core.bll.AddVdsCommand.getParameters().getPassword()); } return sshclient; }	public org.ovirt.engine.core.bll.utils.EngineSSHClient getSSHClient() throws java.lang.Exception { java.lang.Long timeout = java.util.concurrent.TimeUnit.SECONDS.toMillis(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.ConnectToServerTimeoutInSeconds)); org.ovirt.engine.core.bll.utils.EngineSSHClient sshclient = new org.ovirt.engine.core.bll.utils.EngineSSHClient(); sshclient.setVds(org.ovirt.engine.core.bll.AddVdsCommand.getParameters().getvds()); sshclient.setHardTimeout(timeout); sshclient.setSoftTimeout(timeout); sshclient.setPassword(org.ovirt.engine.core.bll.AddVdsCommand.getParameters().getPassword()); switch (org.ovirt.engine.core.bll.AddVdsCommand.getParameters().getAuthMethod()) { case PublicKey : sshclient.useDefaultKeyPair(); break; case Password : sshclient.setPassword(org.ovirt.engine.core.bll.AddVdsCommand.getParameters().getPassword()); break; default : throw new java.lang.Exception("Invalid authentication method value was sent to AddVdsCommand"); } return sshclient; }
@org.junit.Test public void testNfsOptions() { newServerConnection.setNfsVersion(NfsVersion.V4); newServerConnection.setNfsRetrans(((short) (5))); dao.save(newServerConnection); org.ovirt.engine.core.common.businessentities.StorageServerConnections result = dao.get(newServerConnection.geIid()); assertEquals(result.getNfsVersion(), NfsVersion.V4); assertTrue(((result.getNfsRetrans()) == 5)); assertNull(result.getNfsTimeo()); result = dao.get(existingNfsAutoConnection.geIid()); assertEquals(result.getNfsVersion(), NfsVersion.AUTO); assertTrue(((result.getNfsRetrans()) == 7)); assertTrue(((result.getNfsTimeo()) == 42)); result = dao.get(existingConnection.geIid()); assertNull(result.getNfsVersion()); assertNull(result.getNfsRetrans()); assertNull(result.getNfsTimeo()); }	@org.junit.Test public void testNfsOptions() { newServerConnection.setNfsVersion(NfsVersion.V4); newServerConnection.setNfsRetrans(((short) (5))); dao.save(newServerConnection); org.ovirt.engine.core.common.businessentities.StorageServerConnections result = dao.get(newServerConnection.getId()); assertEquals(result.getNfsVersion(), NfsVersion.V4); assertTrue(((result.getNfsRetrans()) == 5)); assertNull(result.getNfsTimeo()); result = dao.get(existingNfsAutoConnection.getId()); assertEquals(result.getNfsVersion(), NfsVersion.AUTO); assertTrue(((result.getNfsRetrans()) == 7)); assertTrue(((result.getNfsTimeo()) == 42)); result = dao.get(existingConnection.getId()); assertNull(result.getNfsVersion()); assertNull(result.getNfsRetrans()); assertNull(result.getNfsTimeo()); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Quota") java.lang.String quotaTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Quota") java.lang.String quotaTitle();
protected org.ovirt.engine.core.bll.ValidationResult networkNameStartsWithoutBond() { return getNetworkName().toLowerCase().startsWith("bond") ? new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.NETWORK_CANNOT_CONTAIN_BOND_NAME) : org.ovirt.engine.core.bll.ValidationResult.VALID; }	protected org.ovirt.engine.core.bll.ValidationResult networkPrefixValid() { return getNetworkName().toLowerCase().startsWith("bond") ? new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.NETWORK_CANNOT_CONTAIN_BOND_NAME) : org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public void onSuccess(java.lang.Object target, java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters) { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(dataCenter.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } } localDataCenters.removeAll(localDataCenterWithCluster); updateOptionsRequiredAddDataCenter((!(localDataCenters.isEmpty()))); }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters) { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(dataCenter.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } } localDataCenters.removeAll(localDataCenterWithCluster); updateOptionsRequiredAddDataCenter((!(localDataCenters.isEmpty()))); }
@java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel vmInterfaceListModel = ((org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.NetworkEntity> network_list = (returnValue != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.NetworkEntity>) (returnValue)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.NetworkEntity>(); vmInterfaceListModel.PostGetClusterNetworkList_Edit(network_list); }	@java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel vmInterfaceListModel = ((org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Network> network_list = (returnValue != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Network>) (returnValue)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Network>(); vmInterfaceListModel.PostGetClusterNetworkList_Edit(network_list); }
private org.ovirt.engine.core.common.businessentities.network.NetworkAttachment getExistingAttachmentByNetworkId(org.ovirt.engine.core.compat.Guid networkId) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingNetworkAttachment = mapNetworkAttachmentsByNetworkId().get(networkId); return existingNetworkAttachment; }	private void setVlanDeviceOnNetworkModelIfNeeded(java.lang.String baseNicName, org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel) { if (networkModel.hasVlan()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingVlanDevice = networkModel.getVlanDevice(); assert existingVlanDevice == null : "should have only one vlan device, but found " + existingVlanDevice; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanDeviceWithTheSameVlanIdAsTheNetwork = getExistingVlanDeviceByVlanId(networkModel.getVlanId()); if ((vlanDeviceWithTheSameVlanIdAsTheNetwork != null) && (baseNicName.equals(vlanDeviceWithTheSameVlanIdAsTheNetwork.getBaseInterface()))) { networkModel.setVlanDevice(vlanDeviceWithTheSameVlanIdAsTheNetwork); } } }
private void mockDiskImageDao() { when(diskImageDao.getSnapshotById(org.mockito.Matchers.any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.CommonVmPoolCommandTestAbstract.getDiskImageList().get(0)); }	private void mockDiskImageDao() { when(diskImageDao.getSnapshotById(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.CommonVmPoolCommandTestAbstract.getDiskImageList().get(0)); }
private java.util.stream.Stream<org.ovirt.engine.core.common.businessentities.VM> getAllVmsInSystem(java.util.List<org.ovirt.engine.core.compat.Guid> clustersId) { return clustersId.stream().flatMap(( clusterId) -> vmDao.getAllForCluster(clusterId).stream()); }	private java.util.stream.Stream<org.ovirt.engine.core.common.businessentities.VM> getAllVmsInClusters(java.util.List<org.ovirt.engine.core.compat.Guid> clusterIds) { return clusterIds.stream().flatMap(( clusterId) -> vmDao.getAllForCluster(clusterId).stream()); }
private boolean checkServerStatus(java.util.Set<java.lang.String> errors) { boolean isResponsive = true; java.net.HttpURLConnection engineConn = null; try { engineConn = ((javax.net.ssl.HttpsURLConnection) (serverUrl.openConnection())); if (isHttpsProtocol) { ((javax.net.ssl.HttpsURLConnection) (engineConn)).setSSLSocketFactory(sslFactory); if (sslIgnoreHostVerification) { ((javax.net.ssl.HttpsURLConnection) (engineConn)).setHostnameVerifier(org.ovirt.engine.core.notifier.EngineMonitorService.IgnoredHostnameVerifier); } } } catch (java.io.IOException e) { errors.add(e.getMessage()); isResponsive = false; } if (isResponsive) { try { int responseCode = engineConn.getResponseCode(); if (responseCode != (java.net.HttpURLConnection.HTTP_OK)) { isResponsive = false; org.ovirt.engine.core.notifier.EngineMonitorService.log.debug(java.text.MessageFormat.format("Server is non responsive with response code: {0}", responseCode)); } } catch (java.lang.Exception e) { errors.add(e.getMessage()); isResponsive = false; } finally { if (engineConn != null) { engineConn.disconnect(); engineConn = null; } } } org.ovirt.engine.core.notifier.EngineMonitorService.log.debug(("checkServerStatus return: " + isResponsive)); return isResponsive; }	private boolean checkServerStatus(java.util.Set<java.lang.String> errors) { boolean isResponsive = true; java.net.HttpURLConnection engineConn = null; try { engineConn = ((java.net.HttpURLConnection) (serverUrl.openConnection())); if (isHttpsProtocol) { ((javax.net.ssl.HttpsURLConnection) (engineConn)).setSSLSocketFactory(sslFactory); if (sslIgnoreHostVerification) { ((javax.net.ssl.HttpsURLConnection) (engineConn)).setHostnameVerifier(org.ovirt.engine.core.notifier.EngineMonitorService.IgnoredHostnameVerifier); } } } catch (java.io.IOException e) { errors.add(e.getMessage()); isResponsive = false; } if (isResponsive) { try { int responseCode = engineConn.getResponseCode(); if (responseCode != (java.net.HttpURLConnection.HTTP_OK)) { isResponsive = false; org.ovirt.engine.core.notifier.EngineMonitorService.log.debug(java.text.MessageFormat.format("Server is non responsive with response code: {0}", responseCode)); } } catch (java.lang.Exception e) { errors.add(e.getMessage()); isResponsive = false; } finally { if (engineConn != null) { engineConn.disconnect(); engineConn = null; } } } org.ovirt.engine.core.notifier.EngineMonitorService.log.debug(("checkServerStatus return: " + isResponsive)); return isResponsive; }
org.ovirt.engine.core.common.businessentities.Guid getItGuid();	org.ovirt.engine.core.compat.Guid getImageTemplateId();
private void saveDevicesToDb(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change change) { getVmDeviceDao().updateAllInBatch(change.updatedDevices); if (!(change.removedDeviceIds.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getVmDeviceDao().removeAll(change.removedDeviceIds); return null; }); } if (!(change.addedDevices.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getVmDeviceDao().saveAll(change.addedDevices); return null; }); } }	private void saveDevicesToDb(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change change) { getVmDeviceDao().updateAllInBatch(change.updatedDevices); if (!(change.removedDeviceIds.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getVmDeviceDao().removeAll(change.removedDeviceIds); return null; }); } if (!(change.addedDevices.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getVmDeviceDao().saveAll(change.addedDevices); return null; }); } if (!(change.touchedVms.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getVmDynamicDao().updateDevicesHashes(change.touchedVms.stream().map(( vmId) -> new org.ovirt.engine.core.vdsbroker.Pair<>(vmId, vmDevicesStatuses.get(vmId).getHash())).collect(java.util.stream.Collectors.toList())); return null; }); } }
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((org.ovirt.engine.ui.uicommonweb.dataprovider.VM) (source)) : null; }	@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((org.ovirt.engine.core.common.businessentities.VM) (source)) : null; }
protected void updateDefaultHost() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getModel().getSelectedCluster(); final org.ovirt.engine.ui.uicompat.UIConstants constants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants(); if (cluster == null) { getModel().getDefaultHost().setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); getModel().getDefaultHost().setSelectedItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); return; } getHostListByCluster(cluster, asyncQuery(( hosts) -> { List<org.ovirt.engine.core.common.businessentities.VDS> oldDefaultHosts = getModel().getDefaultHost().getSelectedItems(); getModel().getDefaultHost().setItems(hosts); if ((oldDefaultHosts != null) && (!(oldDefaultHosts.isEmpty()))) { Set<org.ovirt.engine.core.common.businessentities.VDS> oldSelectedIntersectionNewHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.HashSet<>(oldDefaultHosts); oldSelectedIntersectionNewHosts.retainAll(hosts); oldDefaultHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.ArrayList<>(oldSelectedIntersectionNewHosts); } List<org.ovirt.engine.core.common.businessentities.VDS> hostsToSelect = ((oldDefaultHosts != null) && (!(oldDefaultHosts.isEmpty()))) ? oldDefaultHosts : !(hosts.isEmpty()) ? java.util.Collections.singletonList(hosts.get(0)) : java.util.Collections.<org.ovirt.engine.core.common.businessentities.VDS>emptyList(); getModel().getDefaultHost().setSelectedItems(hostsToSelect); changeDefaultHost(); })); }	protected void updateDefaultHost() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getModel().getSelectedCluster(); if (cluster == null) { getModel().getDefaultHost().setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); getModel().getDefaultHost().setSelectedItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); return; } getHostListByCluster(cluster, asyncQuery(( hosts) -> { List<org.ovirt.engine.core.common.businessentities.VDS> oldDefaultHosts = getModel().getDefaultHost().getSelectedItems(); getModel().getDefaultHost().setItems(hosts); if ((oldDefaultHosts != null) && (!(oldDefaultHosts.isEmpty()))) { Set<org.ovirt.engine.core.common.businessentities.VDS> oldSelectedIntersectionNewHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.HashSet<>(oldDefaultHosts); oldSelectedIntersectionNewHosts.retainAll(hosts); oldDefaultHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.ArrayList<>(oldSelectedIntersectionNewHosts); } List<org.ovirt.engine.core.common.businessentities.VDS> hostsToSelect = ((oldDefaultHosts != null) && (!(oldDefaultHosts.isEmpty()))) ? oldDefaultHosts : !(hosts.isEmpty()) ? java.util.Collections.singletonList(hosts.get(0)) : java.util.Collections.<org.ovirt.engine.core.common.businessentities.VDS>emptyList(); getModel().getDefaultHost().setSelectedItems(hostsToSelect); changeDefaultHost(); })); }
public static org.ovirt.engine.core.common.action.VdcReturnValueBase evaluateCorrelationId(org.ovirt.engine.core.common.action.VdcActionParametersBase parameters) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = null; java.lang.String correlationId = parameters.getCorrelationId(); if (org.apache.commons.lang.StringUtils.isEmpty(correlationId)) { correlationId = org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId(); if (org.apache.commons.lang.StringUtils.isEmpty(correlationId)) { correlationId = org.ovirt.engine.core.utils.log.LoggedUtils.getObjectId(parameters); } parameters.setCorrelationId(correlationId); } else { java.util.List<java.lang.Class<?>> validationGroups = java.util.Arrays.asList(new java.lang.Class<?>[]{ org.ovirt.engine.core.common.validation.group.PreRun.class }); java.util.List<java.lang.String> messages = org.ovirt.engine.core.common.utils.ValidationUtils.validateInputs(validationGroups, parameters); if (!(messages.isEmpty())) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnErrorValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnErrorValue.setValid(false); returnErrorValue.getValidationMessages().addAll(messages); return returnErrorValue; } } return returnValue; }	public static org.ovirt.engine.core.common.action.VdcReturnValueBase evaluateCorrelationId(org.ovirt.engine.core.common.action.VdcActionParametersBase parameters) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = null; java.lang.String correlationId = parameters.getCorrelationId(); if (org.apache.commons.lang.StringUtils.isEmpty(correlationId)) { correlationId = org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId(); if (org.apache.commons.lang.StringUtils.isEmpty(correlationId)) { correlationId = org.ovirt.engine.core.utils.log.LoggedUtils.getObjectId(parameters); } parameters.setCorrelationId(correlationId); } else { java.util.List<java.lang.String> messages = org.ovirt.engine.core.common.utils.ValidationUtils.validateInputs(org.ovirt.engine.core.bll.job.ExecutionHandler.validationGroups, parameters); if (!(messages.isEmpty())) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnErrorValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnErrorValue.setValid(false); returnErrorValue.getValidationMessages().addAll(messages); return returnErrorValue; } } return returnValue; }
private static void setPropertiesFromAuditLogableBase(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { auditLog.setStorageDomainId(auditLogable.getStorageDomainId()); auditLog.setStorageDomainName(auditLogable.getStorageDomainName()); auditLog.setStoragePoolId(auditLogable.getStoragePoolId()); auditLog.setStoragePoolName(auditLogable.getStoragePoolName()); auditLog.setVdsGroupId(auditLogable.getVdsGroupId()); auditLog.setVdsGroupName(auditLogable.getVdsGroupName()); auditLog.setCorrelationId(auditLogable.getCorrelationId()); auditLog.setJobId(auditLogable.getJobId()); auditLog.setGlusterVolumeId(auditLogable.getGlusterVolumeId()); auditLog.setGlusterVolumeName(auditLogable.getGlusterVolumeName()); auditLog.setExternal(auditLogable.isExternal()); auditLog.setQuotaId(auditLogable.getQuotaIdForLog()); auditLog.setQuotaName(auditLogable.getQuotaNameForLog()); auditLog.setCallStack(auditLogable.getCallStack()); auditLog.setBrickPath(auditLogable.getBrickPath()); }	private static void setPropertiesFromAuditLogableBase(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { auditLog.setStorageDomainId(auditLogable.getStorageDomainId()); auditLog.setStorageDomainName(auditLogable.getStorageDomainName()); auditLog.setStoragePoolId(auditLogable.getStoragePoolId()); auditLog.setStoragePoolName(auditLogable.getStoragePoolName()); auditLog.setVdsGroupId(auditLogable.getVdsGroupId()); auditLog.setVdsGroupName(auditLogable.getVdsGroupName()); auditLog.setCorrelationId(auditLogable.getCorrelationId()); auditLog.setJobId(auditLogable.getJobId()); auditLog.setGlusterVolumeId(auditLogable.getGlusterVolumeId()); auditLog.setGlusterVolumeName(auditLogable.getGlusterVolumeName()); auditLog.setExternal(auditLogable.isExternal()); auditLog.setQuotaId(auditLogable.getQuotaIdForLog()); auditLog.setQuotaName(auditLogable.getQuotaNameForLog()); auditLog.setCallStack(auditLogable.getCallStack()); auditLog.setBrickId(auditLogable.getBrickId()); auditLog.setBrickPath(auditLogable.getBrickPath()); }
public org.ovirt.engine.core.bll.ValidationResult imageProvidedForOvirtNode(java.lang.String image) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessages.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE).when(((host.isOvirtNode()) && (org.apache.commons.lang.StringUtils.isBlank(image)))); }	public org.ovirt.engine.core.bll.ValidationResult imageProvidedForOvirtNode(java.lang.String image) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE).when(((host.isOvirtNode()) && (org.apache.commons.lang.StringUtils.isBlank(image)))); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Tags> getAllVmTagsWithIds(java.lang.String ids) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("tag_ids", ids); return getCallsHandler().executeReadList("GetVmTagsByTagId", org.ovirt.engine.core.dao.TagDAOImpl.TagRowMapper.instance, parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Tags> getAllVmTagsWithIds(java.lang.String ids) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("tag_ids", ids); return getCallsHandler().executeReadList("GetVmTagsByTagId", org.ovirt.engine.core.dao.TagDaoImpl.TagRowMapper.instance, parameterSource); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyInplace(org.ovirt.engine.core.compat.Guid jobId, java.util.Map<java.lang.String, java.lang.Object> volumeAddress) { throw new java.lang.UnsupportedOperationException(); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyVolume(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> volumeAddress) { throw new java.lang.UnsupportedOperationException(); }
public static void clearNetworks(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> attachedNetworks = nic.getItems(); if ((attachedNetworks.size()) > 0) { for (org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel : new java.util.ArrayList(attachedNetworks)) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.DETACH_NETWORK.getCommand(networkModel, null, allNics).execute(); } } }	private static void clearNetworks(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> attachedNetworks = nic.getItems(); if ((attachedNetworks.size()) > 0) { for (org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel : new java.util.ArrayList(attachedNetworks)) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.DETACH_NETWORK.getCommand(networkModel, null, allNics).execute(); } } }
public static boolean isCommandAllowed(org.ovirt.engine.core.common.businessentities.OriginType originType, org.ovirt.engine.core.common.action.VdcActionType actionType) { return !(((org.ovirt.engine.core.common.validation.VmActionValidator.isHostedEngine(originType)) && (!(org.ovirt.engine.core.common.validation.VmActionValidator.isCommandAllowedOnHostedEngine(actionType)))) || ((org.ovirt.engine.core.common.validation.VmActionValidator.isExternalVm(originType)) && (!(org.ovirt.engine.core.common.validation.VmActionValidator.isCommandAllowedOnExternalVms(actionType))))); }	public static boolean isCommandAllowed(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.action.VdcActionType actionType) { return !(((vm.isHostedEngine()) && (!(org.ovirt.engine.core.common.validation.VmActionByVmOriginTypeValidator.COMMANDS_ALLOWED_ON_HOSTED_ENGINE.contains(actionType)))) || ((vm.isExternalVm()) && (!(org.ovirt.engine.core.common.validation.VmActionByVmOriginTypeValidator.COMMANDS_ALLOWED_ON_EXTERNAL_VMS.contains(actionType))))); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Attach more Storage") java.lang.String dataCenterAttachMoreStorageAction();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Attach more Storage") java.lang.String dataCenterAttachMoreStorageAction();
public void UpdateMaxNumOfVmCpus() { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel().getSelectedCluster(); java.lang.String version = cluster.getcompatibility_version().toString(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetMaxNumOfVmCpus(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase) (target)); behavior.maxCpus = ((java.lang.Integer) (returnValue)); behavior.PostUpdateNumOfSockets2(); } }, getModel().getHash()), version); }	public void updateMaxNumOfVmCpus() { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel().getSelectedCluster(); java.lang.String version = cluster.getcompatibility_version().toString(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getMaxNumOfVmCpus(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase) (target)); behavior.maxCpus = ((java.lang.Integer) (returnValue)); behavior.postUpdateNumOfSockets2(); } }, getModel().getHash()), version); }
private static <T extends org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid> & org.ovirt.engine.core.common.businessentities.Nameable> boolean isNameAndIdIncoherent(org.ovirt.engine.core.compat.Guid id, java.lang.String name, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<T> map) { T entityById = map.get(id); T entityByName = map.get(name); return !(java.util.Objects.equals(entityById, entityByName)); }	org.ovirt.engine.core.bll.ValidationResult validateAttachmentAndNicReferenceSameLabelNotConflict(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { org.ovirt.engine.core.common.businessentities.network.Network network = existingNetworkRelatedToAttachment(attachment); if (!(org.ovirt.engine.core.utils.NetworkUtils.isLabeled(network))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.lang.String label = network.getLabel(); java.lang.String nicThatShouldHaveTheLabel = (nicLabelByLabel.containsKey(label)) ? nicLabelByLabel.get(label).getNicName() : null; return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.NETWORK_SHOULD_BE_ATTACHED_VIA_LABEL_TO_ANOTHER_NIC, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("NETWORK_SHOULD_BE_ATTACHED_VIA_LABEL_TO_ANOTHER_NIC_ENTITY", network.getName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("interfaceName", attachment.getNicName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("labeledInterfaceName", nicThatShouldHaveTheLabel)).unless(((nicThatShouldHaveTheLabel == null) || (nicThatShouldHaveTheLabel.equals(attachment.getNicName())))); }
protected java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> updateExternalVnicProfilesPerTargetCluster(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces, org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> result) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> clusterVnicProfileMappings; if (result.containsKey(cluster)) { clusterVnicProfileMappings = result.get(cluster); } else { clusterVnicProfileMappings = new java.util.HashSet(); result.put(cluster, clusterVnicProfileMappings); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> previousClusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { previousClusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { previousClusterVnicProfileMappings = new java.util.HashSet(); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> vmVnicProfiles = getNewVnicProfileMappings(interfaces, previousClusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); return result; }	protected abstract java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> getInterfaces(E importEntityData);
protected javax.ws.rs.core.Response performNonBlockingAction(org.ovirt.engine.core.common.action.VdcActionType task, org.ovirt.engine.core.common.action.VdcActionParametersBase params) { try { doNonBlockingAction(task, params); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setStatus(org.ovirt.engine.api.common.util.StatusUtils.create(CreationStatus.IN_PROGRESS)); return javax.ws.rs.core.Response.status(Response.Status.ACCEPTED).entity(action).build(); } catch (java.lang.Exception e) { return handleError(javax.ws.rs.core.Response.class, e, false); } }	protected javax.ws.rs.core.Response performNonBlockingAction(org.ovirt.engine.core.common.action.VdcActionType task, org.ovirt.engine.core.common.action.VdcActionParametersBase params, org.ovirt.engine.api.model.Action action) { try { doNonBlockingAction(task, params); if (action != null) { action.setStatus(org.ovirt.engine.api.common.util.StatusUtils.create(CreationStatus.IN_PROGRESS)); return javax.ws.rs.core.Response.status(Response.Status.ACCEPTED).entity(action).build(); } else { return javax.ws.rs.core.Response.status(Response.Status.ACCEPTED).build(); } } catch (java.lang.Exception e) { return handleError(javax.ws.rs.core.Response.class, e, false); } }
@org.ovirt.engine.ui.uicompat.DefaultMessage("Random Number Generator source ''{0}'' is not supported by the cluster") java.lang.String rngSourceNotSupportedByCluster(java.lang.String source);	@org.ovirt.engine.ui.uicompat.DefaultMessage("VM Boot menu is not supported in Cluster version {0}") java.lang.String bootMenuNotSupported(java.lang.String clusterVersion);
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((!(getAllowClusterWithVirtGlusterEnabled())) && (getEnableGlusterService().getEntity())) { getEnableOvirtService().setEntity(java.lang.Boolean.FALSE); } if (((!isEdit) && ((getEnableGlusterService().getEntity()) != null)) && (getEnableGlusterService().getEntity())) { getIsImportGlusterConfiguration().setIsAvailable(true); getSupportGluster37Features().setIsAvailable(getVersion().getSelectedItem().equals(Version.v3_5)); getSupportGluster37Features().setIsChangable((!isEdit)); getGlusterHostAddress().setIsAvailable(true); getGlusterHostFingerprint().setIsAvailable(true); getGlusterHostPassword().setIsAvailable(true); } else { getIsImportGlusterConfiguration().setIsAvailable(false); getSupportGluster37Features().setIsAvailable(false); getIsImportGlusterConfiguration().setEntity(false); getGlusterHostAddress().setIsAvailable(false); getGlusterHostFingerprint().setIsAvailable(false); getGlusterHostPassword().setIsAvailable(false); } if (((getEnableGlusterService().getEntity()) != null) && (getEnableGlusterService().getEntity())) { getEnableTrustedService().setEntity(false); getEnableTrustedService().setIsChangable(false); } else { if (((getEnableOvirtService().getEntity()) != null) && (getEnableOvirtService().getEntity())) { getEnableTrustedService().setIsChangable(true); } else { getEnableTrustedService().setIsChangable(false); } } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { refreshAdditionalClusterFeaturesList(); if ((!(getAllowClusterWithVirtGlusterEnabled())) && (getEnableGlusterService().getEntity())) { getEnableOvirtService().setEntity(java.lang.Boolean.FALSE); } if (((!isEdit) && ((getEnableGlusterService().getEntity()) != null)) && (getEnableGlusterService().getEntity())) { getIsImportGlusterConfiguration().setIsAvailable(true); getGlusterHostAddress().setIsAvailable(true); getGlusterHostFingerprint().setIsAvailable(true); getGlusterHostPassword().setIsAvailable(true); } else { getIsImportGlusterConfiguration().setIsAvailable(false); getIsImportGlusterConfiguration().setEntity(false); getGlusterHostAddress().setIsAvailable(false); getGlusterHostFingerprint().setIsAvailable(false); getGlusterHostPassword().setIsAvailable(false); } if (((getEnableGlusterService().getEntity()) != null) && (getEnableGlusterService().getEntity())) { getEnableTrustedService().setEntity(false); getEnableTrustedService().setIsChangeable(false); } else { if (((getEnableOvirtService().getEntity()) != null) && (getEnableOvirtService().getEntity())) { getEnableTrustedService().setIsChangeable(true); } else { getEnableTrustedService().setIsChangeable(false); } } getGlusterTunedProfile().setIsAvailable(getEnableGlusterService().getEntity()); if (getEnableGlusterService().getEntity()) { initTunedProfiles(); } }
private void updateDestinationVds(final org.ovirt.engine.core.compat.Guid dstVdsId, final org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDynamicDao().smartUpdatePartialVds(dstVdsId, 1, vm.getNumOfCpus(), vm.getMinAllocatedMem(), 0, 0); return null; } }); org.ovirt.engine.core.vdsbroker.MigrateVDSCommand.log.debugFormat("IncreasePendingVms::MigrateVm Increasing vds {0} pending vcpu count, in {1}, and pending vmem size, in {2}. Vm: {3}", dstVdsId, vm.getNumOfCpus(), vm.getMinAllocatedMem(), vm.getName()); }	private void updateDestinationVds(final org.ovirt.engine.core.compat.Guid dstVdsId, final org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(new java.lang.Runnable() { @java.lang.Override public void run() { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDynamicDao().updatePartialVdsDynamicCalc(dstVdsId, 1, vm.getNumOfCpus(), vm.getMinAllocatedMem(), 0, 0); org.ovirt.engine.core.vdsbroker.MigrateVDSCommand.log.debugFormat("IncreasePendingVms::MigrateVm Increasing vds {0} pending vcpu count, in {1}, and pending vmem size, in {2}. Vm: {3}", dstVdsId, vm.getNumOfCpus(), vm.getMinAllocatedMem(), vm.getName()); } }); }
private void refreshGlusterStorageDevices() { if (getGlusterUtil().isGlusterBrickProvisioningSupported(getVdsGroup().getCompatibilityVersion(), getVdsGroup().getId())) { try { runInternalAction(VdcActionType.SyncStorageDevices, new org.ovirt.engine.core.common.action.gluster.SyncGlusterStorageDevicesParameter(getVds().getId(), true)); } catch (org.ovirt.engine.core.bll.EngineException e) { log.error("Could not refresh storage devices from gluster host '{}'", getVds().getName()); } } }	private void refreshGlusterStorageDevices() { if (getGlusterUtil().isGlusterBrickProvisioningSupported(getVdsGroup().getcompatibility_version(), getVdsGroup().getId())) { try { runInternalAction(VdcActionType.SyncStorageDevices, new org.ovirt.engine.core.common.action.gluster.SyncGlusterStorageDevicesParameter(getVds().getId(), true)); } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { log.errorFormat("Could not refresh storage devices from gluster host '{}'", getVds().getName()); } } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Role> getAllNonAdmin() { java.lang.Integer appMode = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ApplicationMode); org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetAllNonAdminRoles", org.ovirt.engine.core.dao.RoleDaoImpl.RolesRowMapper.instance, parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Role> getAllNonAdminRoles() { java.lang.Integer appMode = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ApplicationMode); org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetAllNonAdminRoles", org.ovirt.engine.core.dao.RoleDaoImpl.RolesRowMapper.instance, parameterSource); }
@org.junit.Test public void testExportWithStorageDomainName() throws java.lang.Exception { setupGetVmExpectations(); setUpGetEntityExpectations(("Storage: name=" + (NAMES[2])), SearchType.StorageDomain, getStorageDomain(2)); org.ovirt.engine.api.model.StorageDomain storageDomain = new org.ovirt.engine.api.model.StorageDomain(); storageDomain.setName(NAMES[2]); doTestExport(storageDomain, false, false); }	@org.junit.Test public void testExportWithStorageDomainName() throws java.lang.Exception { setUpGetEntityExpectations(("Storage: name=" + (NAMES[2])), SearchType.StorageDomain, getStorageDomain(2)); org.ovirt.engine.api.model.StorageDomain storageDomain = new org.ovirt.engine.api.model.StorageDomain(); storageDomain.setName(NAMES[2]); doTestExport(storageDomain, false, false); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((args == null) || (!(args instanceof org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs))) { return; } java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName; if ("IsLinuxOS".equals(propName)) { changeApplicationLevelVisibility(linuxBootOptionsPanel, vm.getIsLinuxOS()); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (!(args instanceof org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs)) { return; } java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName; if ("IsLinuxOS".equals(propName)) { changeApplicationLevelVisibility(linuxBootOptionsPanel, vm.getIsLinuxOS()); } }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hookEntity = org.ovirt.engine.core.bll.gluster.GetGlusterHookByIdQuery.getGlusterHookDao().getById(org.ovirt.engine.core.bll.gluster.GetGlusterHookByIdQuery.getParameters().getHookId()); if ((hookEntity != null) && (org.ovirt.engine.core.bll.gluster.GetGlusterHookByIdQuery.getParameters().isIncludeSeverHooks())) { hookEntity.setServerHooks(org.ovirt.engine.core.bll.gluster.GetGlusterHookByIdQuery.getGlusterHookDao().getGlusterServerHooks(org.ovirt.engine.core.bll.gluster.GetGlusterHookByIdQuery.getParameters().getHookId())); } org.ovirt.engine.core.bll.gluster.GetGlusterHookByIdQuery.getQueryReturnValue().setReturnValue(hookEntity); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hookEntity = org.ovirt.engine.core.bll.gluster.GetGlusterHookByIdQuery.getGlusterHookDao().getById(org.ovirt.engine.core.bll.gluster.GetGlusterHookByIdQuery.getParameters().getHookId()); if ((hookEntity != null) && (org.ovirt.engine.core.bll.gluster.GetGlusterHookByIdQuery.getParameters().isIncludeServerHooks())) { hookEntity.setServerHooks(org.ovirt.engine.core.bll.gluster.GetGlusterHookByIdQuery.getGlusterHookDao().getGlusterServerHooks(org.ovirt.engine.core.bll.gluster.GetGlusterHookByIdQuery.getParameters().getHookId())); } org.ovirt.engine.core.bll.gluster.GetGlusterHookByIdQuery.getQueryReturnValue().setReturnValue(hookEntity); }
@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Failed to add VM. The reasons are: {}", java.lang.String.join(",", errorMessages)); return; } if (!(addVmLeaseIfNeeded())) { return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } }	@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Failed to add VM. The reasons are: {}", java.lang.String.join(",", errorMessages)); return; } if (!(addVmLease(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.AddVmCommand.getVmId()))) { return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } }
public void setNetworkQoS(org.ovirt.engine.core.common.businessentities.qos.NetworkQoS networkQoS) { this.networkQoS = networkQoS; }	public void setNetworkQoS(org.ovirt.engine.core.common.businessentities.network.NetworkQoS networkQoS) { this.networkQoS = networkQoS; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if ((vm.getRunOnVds()) != null) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostsToRunOn = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VDS srcVds = getVdsDAO().get(vm.getRunOnVds()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getId().equals(vm.getRunOnVds())) { org.ovirt.engine.core.bll.scheduling.policyunits.MigrationPolicyUnit.log.debug("Vm '{}' already runs on host '{}', filtering host", vm.getName(), host.getName()); continue; } if (!(validateDestinationVdsAddress(srcVds, host))) { continue; } hostsToRunOn.add(host); } return hostsToRunOn; } return hosts; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if ((vm.getRunOnVds()) != null) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostsToRunOn = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VDS srcVds = getVdsDAO().get(vm.getRunOnVds()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getId().equals(vm.getRunOnVds())) { org.ovirt.engine.core.bll.scheduling.policyunits.MigrationPolicyUnit.log.debug("Vm '{}' already runs on host '{}', filtering host", vm.getName(), host.getName()); messages.addMessage(host.getId(), VdcBllMessages.VAR__DETAIL__SAME_HOST.toString()); continue; } if (!(validateDestinationVdsAddress(srcVds, host))) { org.ovirt.engine.core.bll.scheduling.policyunits.MigrationPolicyUnit.log.debug("Host '{}' resolves to the same machine as host '{}', filtering out", srcVds.getName(), host.getName()); messages.addMessage(host.getId(), VdcBllMessages.VAR__DETAIL__SAME_HOST.toString()); continue; } hostsToRunOn.add(host); } return hostsToRunOn; } return hosts; }
java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog> getAllByUserId(org.ovirt.engine.core.compat.Guid userID, boolean isFiltered);	java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog> getAll(org.ovirt.engine.core.compat.Guid userID, boolean isFiltered);
@java.lang.Override protected void executeVdsBrokerCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfigParam> cfgParams = org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeSnapshotConfigVDSCommand.getParameters().getConfgParams(); java.lang.String volumeName = ""; java.lang.String volumeSnapMaxLimit = ""; java.lang.String clusterSnapMaxLimit = ""; java.lang.String clusterSnapMaxLimitPcnt = ""; java.lang.String clusterAutoDelete = ""; for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfigParam cfgParam : cfgParams) { if ((cfgParam.getVolumeId()) != null) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getGlusterVolumeDao().getById(cfgParam.getVolumeId()); volumeName = volume.getName(); volumeSnapMaxLimit = cfgParam.getParamValue(); } else { if (cfgParam.getParamName().equalsIgnoreCase("auto-delete")) { clusterAutoDelete = cfgParam.getParamValue(); } else if (cfgParam.getParamName().equalsIgnoreCase("snap-max-hard-limit")) { clusterSnapMaxLimit = cfgParam.getParamValue(); } else if (cfgParam.getParamName().equalsIgnoreCase("snap-max-soft-limit")) { clusterSnapMaxLimitPcnt = cfgParam.getParamValue().substring(0, ((cfgParam.getParamValue().length()) - 1)); } } } status = org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeSnapshotConfigVDSCommand.getBroker().glusterVolumeSnapshotConfigSet(volumeName, volumeSnapMaxLimit, clusterSnapMaxLimit, clusterSnapMaxLimitPcnt, clusterAutoDelete); org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeSnapshotConfigVDSCommand.proceedProxyReturnValue(); }	@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfig cfgParam = org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeSnapshotConfigVDSCommand.getParameters().getConfgParam(); if ((cfgParam.getVolumeId()) != null) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getGlusterVolumeDao().getById(cfgParam.getVolumeId()); status = org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeSnapshotConfigVDSCommand.getBroker().glusterVolumeSnapshotConfigSet(volume.getName(), cfgParam.getParamName(), cfgParam.getParamValue()); } else { status = org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeSnapshotConfigVDSCommand.getBroker().glusterSnapshotConfigSet(cfgParam.getParamName(), cfgParam.getParamValue()); } org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeSnapshotConfigVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm()) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().isRunningOrPaused()) || ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Unknown))) { return failCanDoAction(VdcBllMessages.VM_POOL_CANNOT_ADD_RUNNING_VM_TO_POOL); } if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().getVmPoolId()) != null) { return failCanDoAction(VdcBllMessages.VM_POOL_CANNOT_ADD_VM_ATTACHED_TO_POOL); } if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getParameters().getVmPoolId()) != null) { org.ovirt.engine.core.common.businessentities.VmPool pool = org.ovirt.engine.core.bll.AddVmToPoolCommand.getVmPoolDAO().get(org.ovirt.engine.core.bll.AddVmToPoolCommand.getParameters().getVmPoolId()); if (pool != null) { if (!(pool.getVdsGroupId().equals(org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().getVdsGroupId()))) { return failCanDoAction(VdcBllMessages.VM_POOL_CANNOT_ADD_VM_DIFFERENT_CLUSTER); } } } return true; }	@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm()) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().isRunningOrPaused()) || ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Unknown))) { return failCanDoAction(VdcBllMessages.VM_POOL_CANNOT_ADD_RUNNING_VM_TO_POOL); } if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().getVmPoolId()) != null) { return failCanDoAction(VdcBllMessages.VM_POOL_CANNOT_ADD_VM_ATTACHED_TO_POOL); } if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getParameters().getVmPoolId()) != null) { org.ovirt.engine.core.common.businessentities.VmPool pool = org.ovirt.engine.core.bll.AddVmToPoolCommand.getVmPoolDAO().get(org.ovirt.engine.core.bll.AddVmToPoolCommand.getParameters().getVmPoolId()); if ((pool != null) && (!(pool.getVdsGroupId().equals(org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().getVdsGroupId())))) { return failCanDoAction(VdcBllMessages.VM_POOL_CANNOT_ADD_VM_DIFFERENT_CLUSTER); } } return true; }
@org.junit.Test public void testGetAllForCluster() { java.util.List<org.ovirt.engine.core.common.businessentities.NetworkEntity> result = dao.getAllForCluster(cluster); org.ovirt.engine.core.dao.NetworkDAOTest.assertGetAllForClusterResult(result); }	@org.junit.Test public void testGetAllForCluster() { java.util.List<org.ovirt.engine.core.common.businessentities.Network> result = dao.getAllForCluster(cluster); org.ovirt.engine.core.dao.NetworkDAOTest.assertGetAllForClusterResult(result); }
@java.lang.Override public java.lang.String toString() { java.lang.String prefix = ((TotalMilliseconds) < 0) ? "-" : ""; return java.lang.String.format("%s%d.%02d:%02d:%02d.%03d", prefix, Days, Hours, Minutes, Seconds, Milliseconds); }	@java.lang.Override public java.lang.String toString() { return java.lang.String.format("%s%d.%02d:%02d:%02d.%03d", ((TotalMilliseconds) < 0 ? "-" : ""), Days, Hours, Minutes, Seconds, Milliseconds); }
private boolean removeDeprecatedOvirtEntry(final org.ovirt.engine.core.compat.Guid oVirtId) { final org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(oVirtId); if ((vds == null) || (!(org.ovirt.engine.core.bll.VdsHandler.isPendingOvirt(vds)))) { return false; } java.lang.String vdsName = org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getParameters().getVdsStaticData().getName(); log.info("Host '{}', id '{}' of type '{}' is being re-registered as Host '{}'", vds.getName(), vds.getId(), vds.getVdsType().name(), vdsName); org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<org.ovirt.engine.core.common.action.VdcReturnValueBase>() { @java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase runInTransaction() { return runInternalAction(VdcActionType.RemoveVds, new org.ovirt.engine.core.common.action.RemoveVdsParameters(oVirtId)); } }); if (!(result.getSucceeded())) { java.lang.String errors = (result.getValidate()) ? result.getFault().getError().name() : org.apache.commons.lang.StringUtils.join(result.getValidateMessages(), ","); log.warn("Failed to remove Host '{}', id '{}', re-registering it as Host '{}' fails with errors {}", vds.getName(), vds.getId(), vdsName, errors); } else { log.info("Host '{}' is now known as Host '{}'", vds.getName(), vdsName); } return result.getSucceeded(); }	private boolean removeDeprecatedOvirtEntry(final org.ovirt.engine.core.compat.Guid oVirtId) { final org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(oVirtId); if ((vds == null) || (!(org.ovirt.engine.core.bll.VdsHandler.isPendingOvirt(vds)))) { return false; } java.lang.String vdsName = org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getParameters().getVdsStaticData().getName(); log.info("Host '{}', id '{}' of type '{}' is being re-registered as Host '{}'", vds.getName(), vds.getId(), vds.getVdsType().name(), vdsName); org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<org.ovirt.engine.core.common.action.VdcReturnValueBase>() { @java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase runInTransaction() { return runInternalAction(VdcActionType.RemoveVds, new org.ovirt.engine.core.common.action.RemoveVdsParameters(oVirtId)); } }); if (!(result.getSucceeded())) { java.lang.String errors = (result.isValid()) ? result.getFault().getError().name() : org.apache.commons.lang.StringUtils.join(result.getValidationMessages(), ","); log.warn("Failed to remove Host '{}', id '{}', re-registering it as Host '{}' fails with errors {}", vds.getName(), vds.getId(), vdsName, errors); } else { log.info("Host '{}' is now known as Host '{}'", vds.getName(), vdsName); } return result.getSucceeded(); }
private void discoverGeoRepDataForVolume(org.ovirt.engine.core.common.businessentities.VDSGroup cluster, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { if (!(supportsGlusterGeoRepFeature(cluster))) { return; } if (volume == null) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.GlusterVolumeGeoRepSyncFailed, "No volume information"); } java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> sessionsMap = getSessionsFromCLI(cluster, volume.getName()); if (sessionsMap == null) { org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJob.log.debug("Error in retrieving sessions for cluster: {} from CLI, nothing to do", cluster.getName()); return; } refreshDiscoveredSessions(cluster, sessionsMap); }	private void discoverGeoRepDataInCluster(org.ovirt.engine.core.common.businessentities.VDSGroup cluster, java.lang.String volumeName) { if (!(supportsGlusterGeoRepFeature(cluster))) { return; } java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> sessionsMap = getSessionsFromCLI(cluster, volumeName); if (sessionsMap == null) { org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJob.log.debug("No sessions retrieved for cluster: {} from CLI, nothing to do", cluster.getName()); return; } updateDiscoveredSessions(cluster, sessionsMap); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { if (!(bondDialogModel.validate())) { return; } java.lang.String bondName = entity.getName(); sourceListModel.setConfirmWindow(null); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> potentialNetworks = computeLabelChanges(bondDialogModel.getLabelsModel(), nicMap.get(bondName).getItems()); if (validateLabelChanges(potentialNetworks)) { setBondOptions(entity, bondDialogModel); commitLabelChanges(bondDialogModel.getLabelsModel(), entity, potentialNetworks); redraw(); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.Bond> bondNameToBondMap = org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.byName(hostSetupNetworksParameters.getBonds()); hostSetupNetworksParameters.getBonds().remove(bondNameToBondMap.get(bondName)); hostSetupNetworksParameters.getBonds().add(((org.ovirt.engine.core.common.businessentities.network.Bond) (entity))); } else { } }	@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { if (!(bondDialogModel.validate())) { return; } sourceListModel.setConfirmWindow(null); setBondOptions(entity, bondDialogModel); }
public static org.ovirt.engine.ui.uicommonweb.UICommand createAddMacPoolCommand(org.ovirt.engine.ui.uicommonweb.ICommandTarget target) { final org.ovirt.engine.ui.uicommonweb.UICommand addMacPoolCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("AddMacPool", target); addMacPoolCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().addMacPoolButton()); return addMacPoolCommand; }	private void checkForActiveVms(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model, final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel) { org.ovirt.engine.core.compat.Guid clusterId = model.getEntity().getId(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetNumberOfActiveVmsInClusterByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.lang.Integer numOfActiveVms = returnValue.getReturnValue(); if (numOfActiveVms != 0) { confirmModel.setMessage(messages.thereAreActiveVMsRequiringRestart(numOfActiveVms)); } checkForNonResponsiveHosts(confirmModel); } })); }
public org.ovirt.engine.core.bll.ValidationResult notExternalNetwork() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessages.EXTERNAL_NETWORK_CANNOT_BE_PROVISIONED).when(getNetwork().isExternal()); }	public org.ovirt.engine.core.bll.ValidationResult notExternalNetwork() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.EXTERNAL_NETWORK_CANNOT_BE_PROVISIONED).when(getNetwork().isExternal()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturnForXmlRpc glusterVolumeRemoveBrickStatus(java.lang.String volumeName, java.lang.String[] bricksList) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.removeBrickStatus").withParameter("volumeName", volumeName).withParameter("brickList", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(bricksList))).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturnForXmlRpc glusterVolumeRemoveBrickStatus(java.lang.String volumeName, java.lang.String[] bricksList) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.removeBrickStatus").withParameter("volumeName", volumeName).withParameter("brickList", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(bricksList))).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturnForXmlRpc(response); }
@java.lang.Override public void init(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> disksImages) { setIsAliasChangable(true); setDiskImages(disksImages); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDiskList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.templates.CopyDiskModel copyDiskModel = ((org.ovirt.engine.ui.uicommonweb.models.templates.CopyDiskModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>) (returnValue)); copyDiskModel.onInitAllDisks(disks); copyDiskModel.onInitDisks(); } })); }	@java.lang.Override public void init(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksImages) { if ((disksImages.size()) > 0) { setIsAliasChangable((!(isTemplateDisk(disksImages.get(0))))); } setDiskImages(disksImages); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDiskList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.templates.CopyDiskModel copyDiskModel = ((org.ovirt.engine.ui.uicommonweb.models.templates.CopyDiskModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue)); copyDiskModel.onInitAllDisks(disks); copyDiskModel.onInitDisks(); } })); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Host ${VdsName} cannot serve as proxy. Verify its cluster compatibility version is supported.") java.lang.String ACTION_TYPE_FAILED_HOST_CANNOT_BE_PROXY_FOR_IMPORT_VM();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Host ${vdsName} cannot serve as proxy. Verify its cluster compatibility version is supported.") java.lang.String ACTION_TYPE_FAILED_HOST_CANNOT_BE_PROXY_FOR_IMPORT_VM();
public boolean isLinked() { return active; }	public boolean isLinked() { return linked; }
@java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call() { getParameters().setStorageDomainId(getMasterDomainIdFromDb()); org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainPoolMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(getParameters().getNewMasterDomainId(), getParameters().getStoragePoolId(), org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().save(domainPoolMap); getParameters().setVdsId(getVds().getId()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = getBackend().runInternalAction(VdcActionType.ReconstructMasterDomain, getParameters()); boolean reconstructVerbExecuted = ((returnVal.getActionReturnValue()) != null) ? ((java.lang.Boolean) (returnVal.getActionReturnValue())) : false; getStoragePoolDAO().updateStatus(getStoragePool().getId(), StoragePoolStatus.NonResponsive); if (!reconstructVerbExecuted) { getStoragePoolIsoMapDAO().remove(domainPoolMap.getId()); } if (returnVal.getSucceeded()) { updateStorageDomainFormat(getNewMasterDomain()); } setSucceeded(returnVal.getSucceeded()); return new org.ovirt.engine.core.common.eventqueue.EventResult(reconstructVerbExecuted, org.ovirt.engine.core.common.eventqueue.EventType.RECONSTRUCT); }	@java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call() { getParameters().setStorageDomainId(getMasterDomainIdFromDb()); org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainPoolMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(getParameters().getNewMasterDomainId(), getParameters().getStoragePoolId(), org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().save(domainPoolMap); getParameters().setVdsId(getVds().getId()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = runInternalAction(VdcActionType.ReconstructMasterDomain, getParameters(), cloneContextAndDetachFromParent()); boolean reconstructVerbExecuted = ((returnVal.getActionReturnValue()) != null) ? ((java.lang.Boolean) (returnVal.getActionReturnValue())) : false; getStoragePoolDAO().updateStatus(getStoragePool().getId(), StoragePoolStatus.NonResponsive); if (!reconstructVerbExecuted) { getStoragePoolIsoMapDAO().remove(domainPoolMap.getId()); } if (returnVal.getSucceeded()) { updateStorageDomainFormatIfNeeded(loadTargetedMasterDomain()); } setSucceeded(returnVal.getSucceeded()); return new org.ovirt.engine.core.common.eventqueue.EventResult(reconstructVerbExecuted, org.ovirt.engine.core.common.eventqueue.EventType.RECONSTRUCT); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks getValue() { org.ovirt.engine.core.common.businessentities.network.Network network = logicalNetworkEditor.asEditor().getSubEditor().getValue(); nicWithNetworks.getNetworkInterface().setNetworkName(network.getName()); return nicWithNetworks; }	@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks getValue() { org.ovirt.engine.core.common.businessentities.network.Network network = logicalNetworkEditor.asEditor().getSubEditor().getValue(); nicWithNetworks.getNetworkInterface().setNetworkName((network != null ? network.getName() : null)); return nicWithNetworks; }
void showModels(java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel> interfaceLineModels) { grid.resizeRows(interfaceLineModels.size()); int row = 0; for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel : interfaceLineModels) { setGridWidget(row, 0, createInterfacePanel(lineModel)); setGridWidget(row, 1, createBondPanel(lineModel)); setGridWidget(row, 2, createVLanPanel(lineModel)); row++; } }	void showModels(java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel> interfaceLineModels) { this.setVisible(true); grid.resizeRows(interfaceLineModels.size()); int row = 0; for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel : interfaceLineModels) { setGridWidget(row, 0, createInterfacePanel(lineModel)); setGridWidget(row, 1, createBondPanel(lineModel)); setGridWidget(row, 2, createVLanPanel(lineModel)); row++; } }
void detachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().remove(alertPanel); alertPanel.resetCount(); }	void detachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().remove(alertPanel); }
private java.lang.String getNewVolumeCinderDisk(org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk) { java.lang.String volumeId; if (cinderDisk.getActive()) { volumeId = org.ovirt.engine.core.bll.storage.CloneSingleCinderDiskCommand.getCinderBroker().cloneDisk(cinderDisk); } else { volumeId = org.ovirt.engine.core.bll.storage.CloneSingleCinderDiskCommand.getCinderBroker().cloneVolumeFromSnapshot(cinderDisk, cinderDisk.getImageId()); cinderDisk.setActive(true); cinderDisk.setParentId(Guid.Empty); cinderDisk.setVmSnapshotId(org.ovirt.engine.core.bll.storage.CloneSingleCinderDiskCommand.getParameters().getVmSnapshotId()); } return volumeId; }	private java.lang.String getNewVolumeCinderDisk(org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk) { java.lang.String volumeId; if (cinderDisk.getActive()) { volumeId = org.ovirt.engine.core.bll.storage.CloneSingleCinderDiskCommand.getCinderBroker().cloneDisk(cinderDisk); } else { volumeId = org.ovirt.engine.core.bll.storage.CloneSingleCinderDiskCommand.getCinderBroker().cloneVolumeFromSnapshot(cinderDisk, cinderDisk.getImageId()); } return volumeId; }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(IVdcQueryable quota) { boolean quotaExceeded = false; if (quota instanceof org.ovirt.engine.core.common.businessentities.QuotaStorage) { quotaExceeded = getQuotaExceeded(((org.ovirt.engine.core.common.businessentities.QuotaStorage) (quota))); } else if (quota instanceof org.ovirt.engine.core.common.businessentities.QuotaVdsGroup) { quotaExceeded = getQuotaExceeded(((org.ovirt.engine.core.common.businessentities.QuotaVdsGroup) (quota))); } else { return null; } if (quotaExceeded) { setTitle(constants.quotaExceeded()); } return quotaExceeded ? resources.alertImage() : null; }	@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(IVdcQueryable quota) { boolean quotaExceeded = false; if (quota instanceof org.ovirt.engine.core.common.businessentities.QuotaStorage) { quotaExceeded = getQuotaExceeded(((org.ovirt.engine.core.common.businessentities.QuotaStorage) (quota))); } else if (quota instanceof org.ovirt.engine.core.common.businessentities.QuotaVdsGroup) { quotaExceeded = getQuotaExceeded(((org.ovirt.engine.core.common.businessentities.QuotaVdsGroup) (quota))); } else { return null; } if (quotaExceeded) { setTitle(org.ovirt.engine.ui.webadmin.widget.table.column.QuotaUtilizationStatusColumn.constants.quotaExceeded()); } return quotaExceeded ? org.ovirt.engine.ui.webadmin.widget.table.column.QuotaUtilizationStatusColumn.resources.alertImage() : null; }
protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImage() { if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId()))) { return super.getDiskImage(); } return ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageGroupID()))); }	protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImage() { if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId()))) { setImageId(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId()); return super.getDiskImage(); } return ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageGroupID()))); }
@java.lang.Override public void onSuccess(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase> operation, final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Frontend: sucessfully executed runAction, determining result!"); handleActionResult(actionType, parameters, result, (callback != null ? callback : org.ovirt.engine.ui.frontend.Frontend.NULLABLE_ASYNC_CALLBACK), state, showErrorDialog); org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent.fire(this, state); org.ovirt.engine.ui.frontend.communication.RefreshActiveModelEvent.fire(this, true); }	@java.lang.Override public void onSuccess(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase> operation, final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Frontend: sucessfully executed runAction, determining result!"); handleActionResult(actionType, parameters, result, (callback != null ? callback : org.ovirt.engine.ui.frontend.Frontend.NULLABLE_ASYNC_CALLBACK), state, showErrorDialog); fireAsyncOperationCompleteEvent(state); org.ovirt.engine.ui.frontend.communication.RefreshActiveModelEvent.fire(this, true); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { if (getSucceeded()) { return org.ovirt.engine.core.common.AuditLogType.GLUSTER_VOLUME_SNAPSHOT_CREATED; } else { return (errorType) == null ? org.ovirt.engine.core.common.AuditLogType.GLUSTER_VOLUME_SNAPSHOT_CONFIG_UPDATE_FAILED : errorType; } }	@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { if (getSucceeded()) { if (updatesSuccessful) { return org.ovirt.engine.core.common.AuditLogType.GLUSTER_VOLUME_SNAPSHOT_CONFIG_UPDATED; } else { return org.ovirt.engine.core.common.AuditLogType.GLUSTER_VOLUME_SNAPSHOT_CONFIG_UPDATE_FAILED_PARTIALLY; } } else { return (errorType) == null ? org.ovirt.engine.core.common.AuditLogType.GLUSTER_VOLUME_SNAPSHOT_CONFIG_UPDATE_FAILED : errorType; } }
public abstract java.lang.String getVerb(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?, ?, ?> op1);	public abstract java.lang.String getVerb(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1);
protected void removeVmStatic(boolean removePermissions) { this.vmStaticDao.remove(org.ovirt.engine.core.bll.VmCommand.getVmId(), removePermissions); }	protected void removeVmStatic(boolean removePermissions) { vmStaticDao.remove(org.ovirt.engine.core.bll.VmCommand.getVmId(), removePermissions); }
@java.lang.Override protected boolean validate() { if (!(schedulingManager.getPolicyUnitsMap().containsKey(getPolicyUnitId()))) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_POLICY_UNKNOWN_POLICY_UNIT); } java.util.List<java.lang.String> clusterPoliciesNames = schedulingManager.getClusterPoliciesNamesByPolicyUnitId(getPolicyUnitId()); if ((clusterPoliciesNames != null) && ((clusterPoliciesNames.size()) > 0)) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_POLICY_UNIT_ATTACHED_TO_CLUSTER_POLICY, java.lang.String.format("$cpNames %1$s", org.apache.commons.lang.StringUtils.join(clusterPoliciesNames, ','))); } return true; }	@java.lang.Override protected boolean validate() { if (!(schedulingManager.getPolicyUnitsMap().containsKey(getPolicyUnitId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_POLICY_UNKNOWN_POLICY_UNIT); } java.util.List<java.lang.String> clusterPoliciesNames = schedulingManager.getClusterPoliciesNamesByPolicyUnitId(getPolicyUnitId()); if ((clusterPoliciesNames != null) && ((clusterPoliciesNames.size()) > 0)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_POLICY_UNIT_ATTACHED_TO_CLUSTER_POLICY, java.lang.String.format("$cpNames %1$s", org.apache.commons.lang.StringUtils.join(clusterPoliciesNames, ','))); } return true; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn copyImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String srcImgGUID, java.lang.String srcVolUUID, java.lang.String dstImgGUID, java.lang.String dstVolUUID, java.lang.String descr, java.lang.String dstSdUUID, int volType, int volFormat, int preallocate, java.lang.String postZero, boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Volume.copy").withParameter("volumeID", srcVolUUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("imageID", srcImgGUID).withParameter("dstSdUUID", dstSdUUID).withParameter("dstImgUUID", dstImgGUID).withParameter("dstVolUUID", dstVolUUID).withParameter("desc", descr).withParameter("volType", volType).withParameter("volFormat", volFormat).withParameter("preallocate", preallocate).withParameter("postZero", postZero).withParameter("discard", discard).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn copyImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String srcImgGUID, java.lang.String srcVolUUID, java.lang.String dstImgGUID, java.lang.String dstVolUUID, java.lang.String descr, java.lang.String dstSdUUID, int volType, int volFormat, int preallocate, java.lang.String postZero, java.lang.Boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Volume.copy").withParameter("volumeID", srcVolUUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("imageID", srcImgGUID).withParameter("dstSdUUID", dstSdUUID).withParameter("dstImgUUID", dstImgGUID).withParameter("dstVolUUID", dstVolUUID).withParameter("desc", descr).withParameter("volType", volType).withParameter("volFormat", volFormat).withParameter("preallocate", preallocate).withParameter("postZero", postZero).withOptionalParameter("discard", discard).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }
protected void filterVms() { for (org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData vdsmVm : vdsmVms.values()) { org.ovirt.engine.core.common.businessentities.VM dbVm = dbVms.get(vdsmVm.getVmDynamic().getId()); gatherChangedVms(dbVm, vdsmVm); gatherExternalVms(dbVm, vdsmVm); gatherVmsWithChangedDevices(dbVm, vdsmVm); } }	protected void onError() { dbVms = java.util.Collections.emptyMap(); vdsmVms = java.util.Collections.emptyMap(); }
protected int getMaxClonedNameLength(java.lang.Object object) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm(); return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType(vm.getOs()) ? org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getMaxVmNameLenghtWin() : org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getMaxVmNameLenghtNonWin(); }	protected int getMaxClonedNameLength(java.lang.Object object) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm(); return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType(vm.getOs()) ? org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getMaxVmNameLengthWin() : org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getMaxVmNameLengthNonWin(); }
@java.lang.Override protected void buildSysprepVmPayload(java.lang.String sysPrepContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setType(VmDeviceType.FLOPPY); vmPayload.setFileName(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.SYSPREP_FILE_NAME); vmPayload.setContent(org.apache.commons.codec.binary.Base64.encodeBase64String(sysPrepContent.getBytes())); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.NewGuid(), vm.getId()), VmDeviceType.DISK.getName(), VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, ""); java.util.Map struct = new java.util.HashMap(); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addFloppyDetails(vmDevice, struct); addDevice(struct, vmDevice, vm.getFloppyPath()); }	@java.lang.Override protected void buildSysprepVmPayload(java.lang.String sysPrepContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setType(VmDeviceType.FLOPPY); vmPayload.setFileName(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.SYSPREP_FILE_NAME); vmPayload.setContent(org.apache.commons.codec.binary.Base64.encodeBase64String(sysPrepContent.getBytes())); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.NewGuid(), vm.getId()), VmDeviceType.DISK.getName(), VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, ""); java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<java.lang.String, java.lang.Object>(); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addFloppyDetails(vmDevice, struct); addDevice(struct, vmDevice, vm.getFloppyPath()); }
protected org.ovirt.engine.core.dao.gluster.GlusterServerServiceDao getGlusterServerServiceDao() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getGlusterServerServiceDao(); }	private void updateService(org.ovirt.engine.core.compat.Guid serverId, java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService> fetchedServerServices) { java.util.List<org.ovirt.engine.core.compat.Guid> serviceIds = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterService srvc : getGlusterServiceDao().getByServiceType(serviceType)) { serviceIds.add(srvc.getId()); } for (org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService serverService : fetchedServerServices) { if (serviceIds.contains(serverService.getServiceId())) { serverService.setStatus(org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand.manageActionDetailsMap.get(actionType).getStatus()); getGlusterServerServiceDao().update(serverService); } else { getGlusterServerServiceDao().save(serverService); } } }
@org.junit.Test public void tooLowPct() { org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings settings = new org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings(); settings.diskSpaceFree = 6; settings.diskSpaceUsed = 4; settings.spaceThresholdGB = 5; settings.spaceThresholdPct = 70; org.ovirt.engine.core.common.businessentities.storage_domains domain = setupForSpaceTest(settings); assertFalse(org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.isAboveThresholds(domain)); }	@org.junit.Test public void tooLowPct() { org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings settings = new org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings(); settings.diskSpaceFree = 6; settings.diskSpaceUsed = 4; settings.spaceThresholdGB = 5; settings.spaceThresholdPct = 70; org.ovirt.engine.core.common.businessentities.storage_domains domain = setupForSpaceTest(settings); assertFalse(org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.isWithinThresholds(domain)); }
public org.ovirt.engine.core.common.businessentities.Snapshot addActiveSnapshot(org.ovirt.engine.core.compat.Guid snapshotId, org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String memoryVolume, org.ovirt.engine.core.compat.Guid memoryDiskId, org.ovirt.engine.core.compat.Guid metadataDiskId, final org.ovirt.engine.core.bll.context.CompensationContext compensationContext) { return addActiveSnapshot(snapshotId, vm, SnapshotStatus.OK, memoryVolume, memoryDiskId, metadataDiskId, null, compensationContext); }	public org.ovirt.engine.core.common.businessentities.Snapshot addActiveSnapshot(org.ovirt.engine.core.compat.Guid snapshotId, org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String memoryVolume, final org.ovirt.engine.core.bll.context.CompensationContext compensationContext) { return addActiveSnapshot(snapshotId, vm, SnapshotStatus.OK, memoryVolume, null, compensationContext); }
private void glusterHostRemove() { if ((clusterHasMultipleHosts()) && (!(hasVolumeBricksOnServer()))) { try (org.ovirt.engine.core.utils.lock.EngineLock lock = org.ovirt.engine.core.bll.utils.GlusterUtil.getInstance().acquireGlusterLockWait(org.ovirt.engine.core.bll.RemoveVdsCommand.getVds().getVdsGroupId())) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.RemoveGlusterServer, new org.ovirt.engine.core.common.vdscommands.gluster.RemoveGlusterServerVDSParameters(upServer.getId(), org.ovirt.engine.core.bll.RemoveVdsCommand.getVds().getHostName(), org.ovirt.engine.core.bll.RemoveVdsCommand.getParameters().isForceAction())); setSucceeded(returnValue.getSucceeded()); if (!(org.ovirt.engine.core.bll.RemoveVdsCommand.getSucceeded())) { org.ovirt.engine.core.bll.RemoveVdsCommand.getReturnValue().getFault().setError(returnValue.getVdsError().getCode()); org.ovirt.engine.core.bll.RemoveVdsCommand.getReturnValue().getFault().setMessage(returnValue.getVdsError().getMessage()); errorType = org.ovirt.engine.core.common.AuditLogType.GLUSTER_SERVER_REMOVE_FAILED; return; } } } }	private void glusterHostRemove() { if ((clusterHasMultipleHosts()) && (!(hasVolumeBricksOnServer()))) { try (org.ovirt.engine.core.utils.lock.EngineLock lock = org.ovirt.engine.core.bll.utils.GlusterUtil.getInstance().acquireGlusterLockWait(org.ovirt.engine.core.bll.RemoveVdsCommand.getVdsGroupId())) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.RemoveGlusterServer, new org.ovirt.engine.core.common.vdscommands.gluster.RemoveGlusterServerVDSParameters(upServer.getId(), org.ovirt.engine.core.bll.RemoveVdsCommand.getVds().getHostName(), org.ovirt.engine.core.bll.RemoveVdsCommand.getParameters().isForceAction())); setSucceeded(returnValue.getSucceeded()); if (!(org.ovirt.engine.core.bll.RemoveVdsCommand.getSucceeded())) { org.ovirt.engine.core.bll.RemoveVdsCommand.getReturnValue().getFault().setError(returnValue.getVdsError().getCode()); org.ovirt.engine.core.bll.RemoveVdsCommand.getReturnValue().getFault().setMessage(returnValue.getVdsError().getMessage()); errorType = org.ovirt.engine.core.common.AuditLogType.GLUSTER_SERVER_REMOVE_FAILED; return; } } } }
private org.ovirt.engine.core.bll.ValidationResult checkVmNumaCpuAssignment(int cpuCores, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) { java.util.ArrayList<java.lang.Integer> cpuIds = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { cpuIds.addAll(node.getCpuIds()); } if (cpuIds.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } int minId = java.util.Collections.min(cpuIds); int maxId = java.util.Collections.max(cpuIds); if ((minId < 0) || (maxId >= cpuCores)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_INVALID_CPU_ID, java.lang.String.format("$cpuIndex %d", (minId < 0 ? minId : maxId)), java.lang.String.format("$cpuIndexMax %d", (cpuCores - 1))); } java.util.Collections.sort(cpuIds); for (int i = 0; i < ((cpuIds.size()) - 1); ++i) { if (cpuIds.get(i).equals(cpuIds.get((i + 1)))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_DUPLICATE_CPU_ID, java.lang.String.format("$cpuIndex %d", cpuIds.get(i))); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	private org.ovirt.engine.core.bll.ValidationResult checkVmNumaCpuAssignment(int cpuCores, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) { java.util.List<java.lang.Integer> cpuIds = vmNumaNodes.stream().flatMap(( node) -> node.getCpuIds().stream()).collect(java.util.stream.Collectors.toList()); if (cpuIds.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } int minId = java.util.Collections.min(cpuIds); int maxId = java.util.Collections.max(cpuIds); if ((minId < 0) || (maxId >= cpuCores)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_INVALID_CPU_ID, java.lang.String.format("$cpuIndex %d", (minId < 0 ? minId : maxId)), java.lang.String.format("$cpuIndexMax %d", (cpuCores - 1))); } java.util.List<java.lang.Integer> duplicateIds = cpuIds.stream().collect(java.util.stream.Collectors.groupingBy(java.util.function.Function.identity(), java.util.stream.Collectors.counting())).entrySet().stream().filter(( a) -> (a.getValue()) > 1).map(java.util.Map.Entry::getKey).collect(java.util.stream.Collectors.toList()); if (!(duplicateIds.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_DUPLICATE_CPU_IDS, java.lang.String.format("$cpuIndexes %s", duplicateIds.stream().map(( i) -> i.toString()).collect(java.util.stream.Collectors.joining(", ")))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public java.lang.Object answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable { org.ovirt.engine.core.common.vdscommands.VDSCommandType commandType = ((org.ovirt.engine.core.common.vdscommands.VDSCommandType) (invocation.getArguments()[0])); assertEquals(commandType, VDSCommandType.UpdateVmPolicy); org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params = ((org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams) (invocation.getArguments()[1])); org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); retVal.setSucceeded(vdsFunction.apply(params)); return retVal; }	@java.lang.Override public java.lang.Object answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable { org.ovirt.engine.core.common.vdscommands.VDSCommandType commandType = ((org.ovirt.engine.core.common.vdscommands.VDSCommandType) (invocation.getArguments()[0])); assertEquals(commandType, VDSCommandType.UpdateVmPolicy); org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params = ((org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams) (invocation.getArguments()[1])); org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); retVal.setSucceeded(vdsFunction.eval(params)); return retVal; }
@java.lang.Override protected boolean canDoAction() { earlyUpdateVmDynamicRunOnce(); if (!(super.canDoAction())) { return false; } if (((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getSysPrepUserName()) == null) ^ ((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getSysPrepPassword()) == null)) { return failCanDoAction(VdcBllMessages.VM_CANNOT_RUN_ONCE_WITH_ILLEGAL_SYSPREP_PARAM); } if ((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit()) != null) { if ((!(OsRepositoryImpl.INSTANCE.isWindows(org.ovirt.engine.core.bll.RunVmOnceCommand.getVm().getOs()))) && (!(org.ovirt.engine.core.common.FeatureSupported.cloudInit(org.ovirt.engine.core.bll.RunVmOnceCommand.getVm().getVdsGroupCompatibilityVersion())))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLOUD_INIT_IS_NOT_SUPPORTED); } if (org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit().isPasswordAlreadyStored()) { org.ovirt.engine.core.common.businessentities.VmBase temp = new org.ovirt.engine.core.common.businessentities.VmBase(); temp.setId(org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmId()); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(temp, false); org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit().setRootPassword(temp.getVmInit().getRootPassword()); } } return true; }	@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getSysPrepUserName()) == null) ^ ((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getSysPrepPassword()) == null)) { return failCanDoAction(VdcBllMessages.VM_CANNOT_RUN_ONCE_WITH_ILLEGAL_SYSPREP_PARAM); } if ((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit()) != null) { if ((!(OsRepositoryImpl.INSTANCE.isWindows(org.ovirt.engine.core.bll.RunVmOnceCommand.getVm().getOs()))) && (!(org.ovirt.engine.core.common.FeatureSupported.cloudInit(org.ovirt.engine.core.bll.RunVmOnceCommand.getVm().getVdsGroupCompatibilityVersion())))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLOUD_INIT_IS_NOT_SUPPORTED); } if (org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit().isPasswordAlreadyStored()) { org.ovirt.engine.core.common.businessentities.VmBase temp = new org.ovirt.engine.core.common.businessentities.VmBase(); temp.setId(org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmId()); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(temp, false); org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit().setRootPassword(temp.getVmInit().getRootPassword()); } } return true; }
@java.lang.Override protected void executeCommand() { setQuotaParameter(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { getQuotaDAO().save(getQuota()); copyQuotaPermissions(); getReturnValue().setSucceeded(true); return null; } }); }	@java.lang.Override protected void executeCommand() { setQuotaParameter(); if (getParameters().isCopyPermissions()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { return executeAddQutoa(); } }); } else { executeAddQutoa(); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.AdGroups> searchAdGroups() { return adSearch(LdapQueryType.searchGroups, AdActionType.SearchGroupsByQuery); }	private java.util.List<org.ovirt.engine.core.common.businessentities.LdapGroup> searchAdGroups() { return adSearch(LdapQueryType.searchGroups, AdActionType.SearchGroupsByQuery); }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmDisksFromDB() { if ((cachedDisksFromDb) == null) { cachedDisksFromDb = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.SNAPABLE_DISKS_ONLY, org.ovirt.engine.core.bll.ACTIVE_DISKS_ONLY); cachedDisksFromDb.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVm().getDiskMap().values(), true)); } return cachedDisksFromDb; }	@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmDisksFromDB() { if ((cachedDisksFromDb) == null) { cachedDisksFromDb = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.ONLY_SNAPABLE, org.ovirt.engine.core.bll.ONLY_ACTIVE); cachedDisksFromDb.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVm().getDiskMap().values(), true)); } return cachedDisksFromDb; }
private void createDiskBasedOnLun() { final org.ovirt.engine.core.common.businessentities.LUNs lun = ((org.ovirt.engine.core.common.businessentities.LunDisk) (org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo())).getLun(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.proceedLUNInDb(lun, lun.getLunType()); getBaseDiskDao().save(getParameters().getDiskInfo()); getDiskLunMapDao().save(new org.ovirt.engine.core.common.businessentities.DiskLunMap(getParameters().getDiskInfo().getId(), lun.getLUN_id())); if ((getVm()) != null) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getParameters().getDiskInfo().getId(), getVmId()), VmDeviceType.DISK, VmDeviceType.DISK, null, ((getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down)), getParameters().getDiskInfo().isReadOnly()); } return null; } }); org.ovirt.engine.core.bll.AddDiskCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo().getId()); org.ovirt.engine.core.bll.AddDiskCommand.setSucceeded(true); }	private void createDiskBasedOnLun() { final org.ovirt.engine.core.common.businessentities.LUNs lun = ((org.ovirt.engine.core.common.businessentities.LunDisk) (org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo())).getLun(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.proceedLUNInDb(lun, lun.getLunType()); getBaseDiskDao().save(getParameters().getDiskInfo()); getDiskLunMapDao().save(new org.ovirt.engine.core.common.businessentities.DiskLunMap(getParameters().getDiskInfo().getId(), lun.getLUN_id())); if ((getVm()) != null) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getParameters().getDiskInfo().getId(), getVmId()), VmDeviceGeneralType.DISK, VmDeviceType.DISK, null, ((getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down)), java.lang.Boolean.TRUE.equals(getParameters().getDiskInfo().getReadOnly()), null); } return null; } }); org.ovirt.engine.core.bll.AddDiskCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo().getId()); org.ovirt.engine.core.bll.AddDiskCommand.setSucceeded(true); }
void addEventListener(org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.MessageListener el);	public void addEventListener(org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.MessageListener el) { eventListeners.add(el); }
public static boolean copyNonEditableFieldsToDestination(org.ovirt.engine.core.common.businessentities.VmStatic source, org.ovirt.engine.core.common.businessentities.VmStatic destination, boolean hotsetEnabled) { return org.ovirt.engine.core.bll.VmHandler.mUpdateVmsStatic.copyNonEditableFieldsToDestination(source, destination, hotsetEnabled); }	public static boolean copyNonEditableFieldsToDestination(org.ovirt.engine.core.common.businessentities.VmStatic source, org.ovirt.engine.core.common.businessentities.VmStatic destination, boolean hotSetEnabled) { return org.ovirt.engine.core.bll.VmHandler.mUpdateVmsStatic.copyNonEditableFieldsToDestination(source, destination, hotSetEnabled); }
protected void executeValidatedCommand(org.ovirt.engine.core.bll.CommandBase<?> command) { if ((((commandContext) == null) || ((commandContext.getExecutionContext()) == null)) || (commandContext.getExecutionContext().isMonitored())) { org.ovirt.engine.core.bll.job.ExecutionHandler.prepareCommandForMonitoring(command, command.getActionType(), command.isInternalExecution()); } org.ovirt.engine.core.utils.CorrelationIdTracker.setCorrelationId(command.getCorrelationId()); command.executeAction(); }	protected void executeValidatedCommand(org.ovirt.engine.core.bll.CommandBase<?> command) { commandFactory.prepareCommandForMonitoring(commandContext, command); command.executeAction(); }
private void addDataCenter() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterList(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> allDataCenters) { @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.StoragePool>> filteredDataCenters = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : allDataCenters) { if ((getEntity().getCompatibilityVersion().compareTo(dataCenter.getCompatibilityVersion())) >= 0) { if (dataCenter.isLocal()) { localDataCenters.add(dataCenter); } else { filteredDataCenters.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(dataCenter)); } } } if (localDataCenters.isEmpty()) { displayAddDataCenter(filteredDataCenters); } else { verifyLocalDataCenterNoCluster(filteredDataCenters, localDataCenters); } } })); }	private void addDataCenter() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterList(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> allDataCenters) { @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.StoragePool>> filteredDataCenters = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : allDataCenters) { if ((getEntity().getCompatibilityVersion().compareTo(dataCenter.getCompatibilityVersion())) >= 0) { if (dataCenter.isLocal()) { localDataCenters.add(dataCenter); } else { filteredDataCenters.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(dataCenter)); } } } if (localDataCenters.isEmpty()) { displayAddDataCenter(filteredDataCenters); } else { verifyLocalDataCenterNoCluster(filteredDataCenters, localDataCenters); } } })); }
public void setConfirmedFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> freeSize) { this.freeSize = freeSize; }	public void setFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> freeSize) { this.freeSize = freeSize; }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior) (array[0])); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (array[1])); java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = ((java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup>) (returnValue)); if (containsVmCluster(clusters)) { java.util.Collections.sort(clusters, new org.ovirt.engine.ui.uicommonweb.Linq.VdsGroupByNameComparer()); model.setDataCentersAndClusters(model, dataCenters, clusters, vm.getVdsGroupId().getValue()); } else { addVmCluster(dataCenters, clusters); } behavior.InitTemplate(); behavior.InitCdImage(); }	@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior) (array[0])); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (array[1])); java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = ((java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup>) (returnValue)); if (containsVmCluster(clusters)) { java.util.Collections.sort(clusters, new org.ovirt.engine.ui.uicommonweb.Linq.VdsGroupByNameComparer()); model.setDataCentersAndClusters(model, dataCenters, clusters, vm.getVdsGroupId().getValue()); } else { addVmCluster(dataCenters, clusters); } behavior.initTemplate(); behavior.initCdImage(); }
protected org.ovirt.engine.core.bll.network.macpoolmanager.MacPool getMacPool() { return poolPerDc.poolForDataCenter(getStoragePoolId()); }	protected org.ovirt.engine.core.bll.network.macpool.MacPool getMacPool() { return poolPerDc.poolForDataCenter(getStoragePoolId()); }
public void Activate() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> pb = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain a : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.StorageDomain>cast(getSelectedItems())) { pb.add(new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase(a.getId(), getEntity().getId())); } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.ActivateStorageDomain, pb, null, null); }	public void activate() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> pb = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain a : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.StorageDomain>cast(getSelectedItems())) { pb.add(new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase(a.getId(), getEntity().getId())); } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.ActivateStorageDomain, pb); }
@java.lang.Override protected void onSelectedItemChanged() { super.onSelectedItemChanged(); if ((org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.getSelectedItem()) != null) { updateDetailsAvailability(); if ((getDetailModels()) != null) { if ((((getActiveDetailModel()) != null) && (!(getActiveDetailModel().getIsAvailable()))) || ((getActiveDetailModel()) == null)) { org.ovirt.engine.ui.uicommonweb.models.HasEntity<E> model = null; for (org.ovirt.engine.ui.uicommonweb.models.HasEntity<E> item : getDetailModels()) { if (item.getIsAvailable()) { model = item; break; } } setActiveDetailModel(model); } } } else { if (((getActiveDetailModel()) != null) && ((getActiveDetailModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel)) { ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (getActiveDetailModel())).stopRefresh(); } } org.ovirt.engine.ui.uicommonweb.models.HasEntity<E> activeDetailModel = getActiveDetailModel(); if (((org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.getSelectedItem()) != null) && (activeDetailModel != null)) { if (activeDetailModel instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel) { ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel) (activeDetailModel)).setEntity(((org.ovirt.engine.core.common.businessentities.VDS) (provideDetailModelEntity(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.getSelectedItem())))); } else { activeDetailModel.setEntity(provideDetailModelEntity(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.getSelectedItem())); } } }	@java.lang.Override protected void onSelectedItemChanged() { super.onSelectedItemChanged(); if ((org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.getSelectedItem()) != null) { updateDetailsAvailability(); if ((getDetailModels()) != null) { if ((((getActiveDetailModel()) != null) && (!(getActiveDetailModel().getIsAvailable()))) || ((getActiveDetailModel()) == null)) { org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> model = null; for (org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> item : getDetailModels()) { if (item.getIsAvailable()) { model = item; break; } } setActiveDetailModel(model); } } } else { if (((getActiveDetailModel()) != null) && ((getActiveDetailModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel)) { ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (getActiveDetailModel())).stopRefresh(); } } org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> activeDetailModel = getActiveDetailModel(); if (((org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.getSelectedItem()) != null) && (activeDetailModel != null)) { if (activeDetailModel instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel) { ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel) (activeDetailModel)).setEntity(((org.ovirt.engine.core.common.businessentities.VDS) (provideDetailModelEntity(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.getSelectedItem())))); } else { activeDetailModel.setEntity(provideDetailModelEntity(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.getSelectedItem())); } } }
public static org.ovirt.engine.core.bll.ValidationResult.ValidationResultBuilder failWith(org.ovirt.engine.core.common.errors.EngineMessages expectedError, java.lang.String... replacements) { return new org.ovirt.engine.core.bll.ValidationResult.ValidationResultBuilder(expectedError, replacements); }	public static org.ovirt.engine.core.bll.ValidationResult.ValidationResultBuilder failWith(org.ovirt.engine.core.common.errors.EngineMessage expectedError, java.lang.String... replacements) { return new org.ovirt.engine.core.bll.ValidationResult.ValidationResultBuilder(expectedError, replacements); }
public boolean Validate() { getDescription().ValidateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.AsciiOrNoneValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(4000) }); return getDescription().getIsValid(); }	public boolean Validate() { getDescription().ValidateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.AsciiOrNoneValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.GENERAL_MAX_SIZE) }); return getDescription().getIsValid(); }
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.dataprovider.permissions>) (source)) : new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.dataprovider.permissions>(); }	@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.permissions>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.permissions>(); }
private org.ovirt.engine.core.bll.network.MacPoolManagerStrategy getMacPool() { return org.ovirt.engine.core.bll.network.ScopedMacPoolManager.scopeFor().storagePool(org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId()).getPool(); }	@java.lang.Override protected org.ovirt.engine.core.common.action.LockProperties applyLockProperties(org.ovirt.engine.core.common.action.LockProperties lockProperties) { return lockProperties.withScope(Scope.Command); }
public org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations reportConfigurationsOnHost() { org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result = new org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations(); result.setNetworkInSync(isNetworkInSync()); result.add(Type.MTU, iface.getMtu(), isNetworkMtuInSync()); result.add(Type.BRIDGED, iface.isBridged(), isNetworkBridgedFlagInSync()); result.add(Type.VLAN, iface.getVlanId(), isNetworkVlanIdInSync()); boolean reportHostQos = (ifaceQos) != null; if (reportHostQos) { result.add(Type.OUT_AVERAGE_LINK_SHARE, ifaceQos.getOutAverageLinkshare(), isOutAverageLinkShareInSync()); result.add(Type.OUT_AVERAGE_UPPER_LIMIT, ifaceQos.getOutAverageUpperlimit(), isOutAverageUpperLimitInSync()); result.add(Type.OUT_AVERAGE_REAL_TIME, ifaceQos.getOutAverageRealtime(), isOutAverageRealTimeInSync()); } return result; }	public org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations reportConfigurationsOnHost() { org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result = new org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations(); result.setNetworkInSync(isNetworkInSync()); result.add(ReportedConfigurationType.MTU, iface.getMtu(), isNetworkMtuInSync()); result.add(ReportedConfigurationType.BRIDGED, iface.isBridged(), isNetworkBridgedFlagInSync()); result.add(ReportedConfigurationType.VLAN, iface.getVlanId(), isNetworkVlanIdInSync()); boolean reportHostQos = (ifaceQos) != null; if (reportHostQos) { result.add(ReportedConfigurationType.OUT_AVERAGE_LINK_SHARE, ifaceQos.getOutAverageLinkshare(), isOutAverageLinkShareInSync()); result.add(ReportedConfigurationType.OUT_AVERAGE_UPPER_LIMIT, ifaceQos.getOutAverageUpperlimit(), isOutAverageUpperLimitInSync()); result.add(ReportedConfigurationType.OUT_AVERAGE_REAL_TIME, ifaceQos.getOutAverageRealtime(), isOutAverageRealTimeInSync()); } return result; }
private void handleSingleAgent(org.ovirt.engine.core.common.businessentities.VDSStatus lastStatus) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue; executor = new org.ovirt.engine.core.bll.FencingExecutor(org.ovirt.engine.core.bll.FenceVdsBaseCommand.getVds(), org.ovirt.engine.core.bll.FenceVdsBaseCommand.getParameters().getAction()); if (executor.FindVdsToFence()) { vdsReturnValue = executor.Fence(); setFencingSucceeded(vdsReturnValue.getSucceeded()); if (getFencingSucceeded()) { executor = new org.ovirt.engine.core.bll.FencingExecutor(org.ovirt.engine.core.bll.FenceVdsBaseCommand.getVds(), org.ovirt.engine.core.common.businessentities.FenceActionType.Status); if (waitForStatus(org.ovirt.engine.core.bll.FenceVdsBaseCommand.getVds().getvds_name(), org.ovirt.engine.core.bll.FenceVdsBaseCommand.getParameters().getAction(), FenceAgentOrder.Primary)) { handleSpecificCommandActions(); } else { handleWaitFailure(lastStatus); } } else { handleError(lastStatus, vdsReturnValue); } } }	private void handleSingleAgent(org.ovirt.engine.core.common.businessentities.VDSStatus lastStatus, org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue) { executor = new org.ovirt.engine.core.bll.FencingExecutor(org.ovirt.engine.core.bll.FenceVdsBaseCommand.getVds(), org.ovirt.engine.core.bll.FenceVdsBaseCommand.getParameters().getAction()); if (executor.FindVdsToFence()) { vdsReturnValue = executor.Fence(); setFencingSucceeded(vdsReturnValue.getSucceeded()); if (getFencingSucceeded()) { executor = new org.ovirt.engine.core.bll.FencingExecutor(org.ovirt.engine.core.bll.FenceVdsBaseCommand.getVds(), org.ovirt.engine.core.common.businessentities.FenceActionType.Status); if (waitForStatus(org.ovirt.engine.core.bll.FenceVdsBaseCommand.getVds().getvds_name(), org.ovirt.engine.core.bll.FenceVdsBaseCommand.getParameters().getAction(), FenceAgentOrder.Primary)) { handleSpecificCommandActions(); } else { handleWaitFailure(lastStatus); } } else { handleError(lastStatus, vdsReturnValue); } } }
com.google.gwt.user.client.ui.Grid createBlankRow(final org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { com.google.gwt.user.client.ui.Grid row = new com.google.gwt.user.client.ui.Grid(1, 4); row.getColumnFormatter().setWidth(0, org.ovirt.engine.ui.webadmin.widget.host.VLanPanel.CHECK_BOX_COLUMN_WIDTH); row.getColumnFormatter().setWidth(1, org.ovirt.engine.ui.webadmin.widget.host.VLanPanel.NETWORK_NAME_COLUMN_WIDTH); row.getColumnFormatter().setWidth(2, org.ovirt.engine.ui.webadmin.widget.host.VLanPanel.OUT_OF_SYNC_WIDTH); row.getColumnFormatter().setWidth(3, org.ovirt.engine.ui.webadmin.widget.host.VLanPanel.ADDRESS_COLUMN_WIDTH); row.setWidth("100%"); row.setHeight("100%"); row.setWidget(0, 0, new com.google.gwt.user.client.ui.Label()); com.google.gwt.user.client.ui.Label networkName = new com.google.gwt.user.client.ui.Label(lineModel.getNetworkName()); if (lineModel.getIsManagement()) { networkName.getElement().getStyle().setFontWeight(FontWeight.BOLD); networkName.setText(("* " + (lineModel.getNetworkName()))); } row.setWidget(0, 1, networkName); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = lineModel.getInterface(); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails ifaceNetworkImpDetails = (iface != null) ? iface.getNetworkImplementationDetails() : null; boolean isSYnc = (ifaceNetworkImpDetails != null) ? ifaceNetworkImpDetails.isInSync() : true; row.setWidget(0, 2, getSyncPanel(isSYnc)); row.setWidget(0, 3, new com.google.gwt.user.client.ui.Label(lineModel.getAddress())); return row; }	com.google.gwt.user.client.ui.Grid createBlankRow(final org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = (lineModel.getIsBonded()) ? lineModel.getInterface() : lineModel.getInterfaces().get(0).getInterface(); return createBaseVlanRow(new com.google.gwt.user.client.ui.Label(), lineModel.getIsManagement(), lineModel.getNetworkName(), iface.getNetworkImplementationDetails(), lineModel.getAddress()); }
@javax.ws.rs.Path("{action: (proxyticket)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:proxyticket)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
void localize(org.ovirt.engine.ui.common.CommonApplicationConstants constants) { nameEditor.setLabel(constants.makeTemplatePopupNameLabel()); descriptionEditor.setLabel(constants.makeTemplatePopupDescriptionLabel()); commentEditor.setLabel(constants.commentLabel()); clusterEditor.setLabel(constants.makeTemplateClusterLabel()); quotaEditor.setLabel(constants.makeTemplateQuotaLabel()); isTemplatePublicEditor.setLabel(constants.makeTemplateIsTemplatePublicEditorLabel()); copyVmPermissions.setLabel(constants.copyVmPermissions()); disksAllocationLabel.setText(constants.disksAllocation()); isSubTemplateEditor.setLabel(constants.createAsSubTemplate()); rootTemplateEditor.setLabel(constants.rootTemplate()); templateSubversionNameEditor.setLabel(constants.templateSubversionName()); }	void localize(org.ovirt.engine.ui.common.CommonApplicationConstants constants) { nameEditor.setLabel(constants.makeTemplatePopupNameLabel()); descriptionEditor.setLabel(constants.makeTemplatePopupDescriptionLabel()); commentEditor.setLabel(constants.commentLabel()); clusterEditor.setLabel(constants.makeTemplateClusterLabel()); quotaEditor.setLabel(constants.makeTemplateQuotaLabel()); isTemplatePublicEditor.setLabel(constants.makeTemplateIsTemplatePublicEditorLabel()); copyVmPermissions.setLabel(constants.copyVmPermissions()); disksAllocationLabel.setText(constants.disksAllocation()); isSubTemplateEditor.setLabel(constants.createAsSubTemplate()); baseTemplateEditor.setLabel(constants.baseTemplate()); templateVersionNameEditor.setLabel(constants.templateVersionName()); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Can't switch host cluster between trust cluster and non-trust cluster due to host existed in the cluster") java.lang.String trustedServiceDisabled();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Cannot change Cluster's trust support state while host/s existed in the cluster") java.lang.String trustedServiceDisabled();
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.VmTemplate vmt; org.ovirt.engine.core.common.queries.GetVmTemplateParameters params = org.ovirt.engine.core.bll.GetVmTemplateQuery.getParameters(); if ((params.getName()) != null) { org.ovirt.engine.core.compat.Guid storagePoolId = getStoragePoolId(params); vmt = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().getByName(params.getName(), storagePoolId, org.ovirt.engine.core.bll.GetVmTemplateQuery.getUserID(), params.isFiltered()); } else { vmt = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().get(org.ovirt.engine.core.bll.GetVmTemplateQuery.getParameters().getId(), org.ovirt.engine.core.bll.GetVmTemplateQuery.getUserID(), org.ovirt.engine.core.bll.GetVmTemplateQuery.getParameters().isFiltered()); } if (vmt != null) { org.ovirt.engine.core.bll.VmTemplateHandler.updateDisksFromDb(vmt); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(vmt, true); } org.ovirt.engine.core.bll.GetVmTemplateQuery.getQueryReturnValue().setReturnValue(vmt); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.VmTemplate vmt; org.ovirt.engine.core.common.queries.GetVmTemplateParameters params = org.ovirt.engine.core.bll.GetVmTemplateQuery.getParameters(); if ((params.getName()) != null) { org.ovirt.engine.core.compat.Guid storagePoolId = getStoragePoolId(); vmt = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().getByName(params.getName(), storagePoolId, org.ovirt.engine.core.bll.GetVmTemplateQuery.getUserID(), params.isFiltered()); } else { vmt = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().get(org.ovirt.engine.core.bll.GetVmTemplateQuery.getParameters().getId(), org.ovirt.engine.core.bll.GetVmTemplateQuery.getUserID(), org.ovirt.engine.core.bll.GetVmTemplateQuery.getParameters().isFiltered()); } if (vmt != null) { org.ovirt.engine.core.bll.VmTemplateHandler.updateDisksFromDb(vmt); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(vmt, true); } org.ovirt.engine.core.bll.GetVmTemplateQuery.getQueryReturnValue().setReturnValue(vmt); }
public org.ovirt.engine.core.bll.ValidationResult notRemovingUsedPool() { final org.ovirt.engine.core.dao.StoragePoolDAO storagePoolDao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolDao(); final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = storagePoolDao.getAllDataCentersByMacPoolId(macPool.getId()); final java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWithNameable("DATACENTERS_USING_MAC_POOL", dataCenters); replacements.add(VdcBllMessages.VAR__ENTITIES__STORAGE_POOLS.name()); return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_STILL_USED_MAC_POOL, replacements.toArray(new java.lang.String[0])).when(((dataCenters.size()) != 0)); }	public org.ovirt.engine.core.bll.ValidationResult notRemovingUsedPool() { final org.ovirt.engine.core.dao.StoragePoolDAO storagePoolDao = getDbFacade().getStoragePoolDao(); final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = storagePoolDao.getAllDataCentersByMacPoolId(macPool.getId()); final java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWithNameable("DATACENTERS_USING_MAC_POOL", dataCenters); replacements.add(VdcBllMessages.VAR__ENTITIES__DATA_CENTERS.name()); return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_STILL_USED_MAC_POOL, replacements.toArray(new java.lang.String[0])).when(((dataCenters.size()) != 0)); }
protected boolean checkCanBeMoveInVm() { return validate(new org.ovirt.engine.core.bll.validator.storage.DiskValidator(getImage()).isDiskPluggedToAnyNonDownVm(false)); }	protected boolean checkCanBeMoveInVm() { return validate(createDiskValidator(getImage()).isDiskPluggedToAnyNonDownVm(false)); }
@java.lang.Override public void processOnClientIpChange(final org.ovirt.engine.core.common.businessentities.VDS vds, final org.ovirt.engine.core.compat.Guid vmId) { final org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDAO().get(vmId); if (!(org.apache.commons.lang.StringUtils.isEmpty(vmDynamic.getclient_ip()))) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(new java.lang.Runnable() { @java.lang.Override public void run() { org.ovirt.engine.core.bll.RunVmCommandBase.DoCompressionCheck(vds, vmDynamic); if ((org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>GetValue(ConfigValues.PowerClientAutoMigrateToPowerClientOnConnect)) || (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>GetValue(ConfigValues.PowerClientAutoMigrateFromPowerClientToVdsWhenConnectingFromRegularClient))) { org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.PowerClientMigrateOnConnectCheck, new org.ovirt.engine.core.common.action.PowerClientMigrateOnConnectCheckParameters(false, vmDynamic.getId(), vmDynamic.getclient_ip(), vds.getId()), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); } } }); } else { vmDynamic.setguest_cur_user_id(null); vmDynamic.setguest_cur_user_name(null); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDAO().update(vmDynamic); } }	@java.lang.Override public void processOnClientIpChange(final org.ovirt.engine.core.common.businessentities.VDS vds, final org.ovirt.engine.core.compat.Guid vmId) { final org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDAO().get(vmId); if (org.apache.commons.lang.StringUtils.isNotEmpty(vmDynamic.getclient_ip())) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(new java.lang.Runnable() { @java.lang.Override public void run() { org.ovirt.engine.core.bll.RunVmCommandBase.DoCompressionCheck(vds, vmDynamic); if ((org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>GetValue(ConfigValues.PowerClientAutoMigrateToPowerClientOnConnect)) || (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>GetValue(ConfigValues.PowerClientAutoMigrateFromPowerClientToVdsWhenConnectingFromRegularClient))) { org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.PowerClientMigrateOnConnectCheck, new org.ovirt.engine.core.common.action.PowerClientMigrateOnConnectCheckParameters(false, vmDynamic.getId(), vmDynamic.getclient_ip(), vds.getId()), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); } } }); } else { vmDynamic.setguest_cur_user_id(null); vmDynamic.setguest_cur_user_name(null); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDAO().update(vmDynamic); } }
@java.lang.SuppressWarnings("unchecked") private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); if ((org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()) == null) { return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (vdsCommandsHelper.runVdsCommandWithoutFailover(VDSCommandType.GetVGInfo, params, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStoragePoolId(), null).getReturnValue())); } return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params).getReturnValue())); }	@java.lang.SuppressWarnings("unchecked") private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getVgInfo() { if ((SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVgInfo()) != null) { log.debug(("Using the virtual group's information from the command's parameters rather " + "than calling getVgInfo and getting the information directly from vdsm.")); return SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVgInfo(); } org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId(), SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params).getReturnValue())); }
protected void proceedPoolOvfUpdate(org.ovirt.engine.core.common.businessentities.StoragePool pool) { proccessedDomains = new java.util.HashSet(); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo> domainsInfo = null; if (ovfOnAnyDomainSupported(pool)) { domainsInfo = getStorageDomainOvfInfoDao().loadStorageDomainsInfoByPoolId(pool.getId()); proccessDomainsForOvfUpdate(domainsInfo); } logInfoIfNeeded(pool, "Attempting to update VM OVFs in Data Center {0}", pool.getName()); initProcessedInfoLists(); updateOvfForVmsOfStoragePool(pool); logInfoIfNeeded(pool, "Successfully updated VM OVFs in Data Center {0}", pool.getName()); logInfoIfNeeded(pool, "Attempting to update template OVFs in Data Center {0}", pool.getName()); updateOvfForTemplatesOfStoragePool(pool); logInfoIfNeeded(pool, "Successfully updated templates OVFs in Data Center {0}", pool.getName()); logInfoIfNeeded(pool, "Attempting to remove unneeded template/vm OVFs in Data Center {0}", pool.getName()); removeOvfForTemplatesAndVmsOfStoragePool(pool, domainsInfo); logInfoIfNeeded(pool, "Successfully removed unneeded template/vm OVFs in Data Center {0}", pool.getName()); if (ovfOnAnyDomainSupported(pool)) { logInfoIfNeeded(pool, "Attempting to update ovfs in domain in Data Center {0}", pool.getName()); for (org.ovirt.engine.core.compat.Guid id : proccessedDomains) { performOvfUpdateForDomain(pool.getId(), id); } } }	protected void proceedPoolOvfUpdate(org.ovirt.engine.core.common.businessentities.StoragePool pool) { proccessedDomains = new java.util.HashSet(); if (ovfOnAnyDomainSupported(pool)) { proccessDomainsForOvfUpdate(pool); } logInfoIfNeeded(pool, "Attempting to update VM OVFs in Data Center {0}", pool.getName()); initProcessedInfoLists(); updateOvfForVmsOfStoragePool(pool); logInfoIfNeeded(pool, "Successfully updated VM OVFs in Data Center {0}", pool.getName()); logInfoIfNeeded(pool, "Attempting to update template OVFs in Data Center {0}", pool.getName()); updateOvfForTemplatesOfStoragePool(pool); logInfoIfNeeded(pool, "Successfully updated templates OVFs in Data Center {0}", pool.getName()); logInfoIfNeeded(pool, "Attempting to remove unneeded template/vm OVFs in Data Center {0}", pool.getName()); removeOvfForTemplatesAndVmsOfStoragePool(pool); logInfoIfNeeded(pool, "Successfully removed unneeded template/vm OVFs in Data Center {0}", pool.getName()); }
private java.lang.String getOptions(org.ovirt.engine.core.common.businessentities.FenceAgent agent) { return org.ovirt.engine.core.utils.pm.VdsFenceOptions.getDefaultAgentOptions(agent.getType(), ((agent.getOptions()) == null ? "" : agent.getOptions()), architectureType); }	protected void auditFenceActionFailure(org.ovirt.engine.core.common.businessentities.pm.FenceActionType action, org.ovirt.engine.core.common.businessentities.FenceAgent realAgent, org.ovirt.engine.core.common.businessentities.VDS proxyHost) { getAuditLogDirector().log(createAuditLogObject(action, realAgent, proxyHost), AuditLogType.FENCE_OPERATION_USING_AGENT_AND_PROXY_FAILED); }
@java.lang.Override protected void endWithFailure() { super.endWithFailure(); }	public void onFailed() { org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.endWithFailure(); }
private boolean validateSourceStorageDomain(org.ovirt.engine.core.compat.Guid imageId, org.ovirt.engine.core.compat.Guid sourceDomainId) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = getDiskImageById(imageId); org.ovirt.engine.core.bll.validator.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.StorageDomainValidator(getStorageDomainById(sourceDomainId, diskImage.getstorage_pool_id().getValue())); return validator.isDomainExistAndActive(org.ovirt.engine.core.bll.lsm.LiveMigrateDisksCommand.getReturnValue().getCanDoActionMessages()); }	private boolean validateSourceStorageDomain(org.ovirt.engine.core.compat.Guid imageId, org.ovirt.engine.core.compat.Guid sourceDomainId) { org.ovirt.engine.core.bll.validator.StorageDomainValidator validator = getValidator(imageId, sourceDomainId); return validator.isDomainExistAndActive(org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getReturnValue().getCanDoActionMessages()); }
public java.lang.String getWWNs() { return WWNs; }	public java.util.Map<java.lang.String, java.util.List<java.util.Map<java.lang.String, java.lang.String>>> getHBAs() { return HBAs; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction(org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getVmTemplateId(), org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getCompensationContext()); if (!(getTemplateDisks().isEmpty())) { MoveOrCopyAllImageGroups(); } else { endVmTemplateRelatedOps(); } org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction(org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getVmTemplateId(), org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getCompensationContext()); org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.freeLock(); if (!(getTemplateDisks().isEmpty())) { moveOrCopyAllImageGroups(); } else { endVmTemplateRelatedOps(); } org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.setSucceeded(true); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAll() { try { com.woorea.openstack.quantum.model.Networks networks = getClient().networks().list().execute(); return map(networks.getList()); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineErrors.PROVIDER_FAILURE, e); } }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAll() { try { com.woorea.openstack.quantum.model.Networks networks = getClient().networks().list().execute(); return map(networks.getList()); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public void initializeHandlers() { super.initializeHandlers(); final org.ovirt.engine.ui.uicommonweb.models.hosts.HostGeneralModel model = getModelProvider().getModel(); updateAlerts(getView(), model); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (args.propertyName.contains("Alert")) { updateAlerts(getView(), model); } } }); }	@java.lang.Override public void initializeHandlers() { super.initializeHandlers(); final org.ovirt.engine.ui.uicommonweb.models.hosts.HostGeneralModel model = getModelProvider().getModel(); updateAlerts(getView(), model); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (args.propertyName.contains("Alert")) { updateAlerts(getView(), model); } } }); }
protected void map(java.sql.ResultSet rs, org.ovirt.engine.core.common.businessentities.HostDevice device) throws java.sql.SQLException { device.setHostId(org.ovirt.engine.core.dao.HostDeviceDaoImpl.BaseHostDeviceRowMapper.getGuid(rs, "host_id")); device.setDeviceName(rs.getString("device_name")); device.setParentDeviceName(rs.getString("parent_device_name")); device.setCapability(rs.getString("capability")); device.setIommuGroup(((java.lang.Integer) (rs.getObject("iommu_group")))); device.setProductName(rs.getString("product_name")); device.setProductId(rs.getString("product_id")); device.setVendorName(rs.getString("vendor_name")); device.setVendorId(rs.getString("vendor_id")); device.setParentPhysicalFunction(rs.getString("physfn")); device.setTotalVirtualFunctions(((java.lang.Integer) (rs.getObject("total_vfs")))); device.setNetworkInterfaceName(rs.getString("net_iface_name")); device.setAssignable(rs.getBoolean("is_assignable")); device.setVmId(org.ovirt.engine.core.dao.HostDeviceDaoImpl.BaseHostDeviceRowMapper.getGuid(rs, "vm_id")); }	protected void map(java.sql.ResultSet rs, org.ovirt.engine.core.common.businessentities.HostDevice device) throws java.sql.SQLException { device.setHostId(org.ovirt.engine.core.dao.HostDeviceDaoImpl.BaseHostDeviceRowMapper.getGuid(rs, "host_id")); device.setDeviceName(rs.getString("device_name")); device.setParentDeviceName(rs.getString("parent_device_name")); device.setCapability(rs.getString("capability")); device.setIommuGroup(((java.lang.Integer) (rs.getObject("iommu_group")))); device.setProductName(rs.getString("product_name")); device.setProductId(rs.getString("product_id")); device.setVendorName(rs.getString("vendor_name")); device.setVendorId(rs.getString("vendor_id")); device.setParentPhysicalFunction(rs.getString("physfn")); device.setTotalVirtualFunctions(((java.lang.Integer) (rs.getObject("total_vfs")))); device.setNetworkInterfaceName(rs.getString("net_iface_name")); device.setAssignable(rs.getBoolean("is_assignable")); device.setVmId(org.ovirt.engine.core.dao.HostDeviceDaoImpl.BaseHostDeviceRowMapper.getGuid(rs, "vm_id")); device.setDriver(rs.getString("driver")); }
public void setModel(M model) { this.model = model; getModel().getItemsChangedEvent().addListener(( ev, sender, args) -> { if ((selectionChangedHandler) != null) { selectionChangedHandler.removeHandler(); } getModel().getSelectionModel().clear(); List<org.ovirt.engine.ui.common.widget.listgroup.T> items = getModel().getItemsAsList(); selectedIndexes.forEach(( selectedIndex) -> { if ((selectedIndex > (-1)) && (selectedIndex < (items.size()))) { getModel().getSelectionModel().setSelected(items.get(selectedIndex), true); } }); updateInfoPanel(); selectionChangedHandler = selectionModel.addSelectionChangeHandler(( e) -> processSelectionChanged()); }); }	public void setModel(M model) { this.model = model; if ((selectionChangedHandler) != null) { selectionChangedHandler.removeHandler(); } selectionChangedHandler = getSelectionModel().addSelectionChangeHandler(( e) -> processSelectionChanged()); getSelectionModel().setDataDisplay(this.hasDataDelegate); getSelectionModel().setMultiSelectEnabled(true); getModel().getItemsChangedEvent().addListener(( ev, sender, args) -> { getSelectionModel().clear(); List<org.ovirt.engine.ui.common.widget.listgroup.T> items = getModel().getItemsAsList(); List<java.lang.Integer> itemsToSelect = selectedIndexes.stream().filter(( selectedIndex) -> (selectedIndex > (-1)) && (selectedIndex < (items.size()))).collect(java.util.stream.Collectors.toList()); itemsToSelect.forEach(( index) -> getSelectionModel().setSelected(items.get(index), true)); updateInfoPanel(); }); }
protected void updateCpuPinningVisibility() { if ((getModel().getSelectedCluster()) != null) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel().getSelectedCluster(); java.lang.String compatibilityVersion = cluster.getcompatibility_version().toString(); boolean hasCpuPinning = java.lang.Boolean.FALSE.equals(getModel().getIsAutoAssign().getEntity()); if (java.lang.Boolean.FALSE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigValuePreConverted(ConfigurationValues.CpuPinningEnabled, compatibilityVersion))) { hasCpuPinning = false; } else if ((java.lang.Boolean.FALSE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigValuePreConverted(ConfigurationValues.CpuPinMigrationEnabled, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()))) && (isVmMigratable())) { hasCpuPinning = false; } getModel().getCpuPinning().setIsChangable(hasCpuPinning); if (!hasCpuPinning) { getModel().getCpuPinning().setEntity(""); } } }	protected void updateCpuPinningVisibility() { if ((getModel().getSelectedCluster()) != null) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel().getSelectedCluster(); java.lang.String compatibilityVersion = cluster.getcompatibility_version().toString(); boolean hasCpuPinning = java.lang.Boolean.FALSE.equals(getModel().getIsAutoAssign().getEntity()); if (java.lang.Boolean.FALSE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.CpuPinningEnabled, compatibilityVersion))) { hasCpuPinning = false; } else if ((java.lang.Boolean.FALSE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.CpuPinMigrationEnabled, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()))) && (isVmMigratable())) { hasCpuPinning = false; } getModel().getCpuPinning().setIsChangable(hasCpuPinning); if (!hasCpuPinning) { getModel().getCpuPinning().setEntity(""); } } }
private org.ovirt.engine.core.common.businessentities.VM mockVm(org.ovirt.engine.core.common.businessentities.GraphicsType graphicsType) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setId(Guid.Empty); vm.getGraphicsInfos().put(graphicsType, new org.ovirt.engine.core.common.businessentities.GraphicsInfo().setIp("host").setPort(5901)); return vm; }	private org.ovirt.engine.core.common.businessentities.VM mockVm(org.ovirt.engine.core.common.businessentities.GraphicsType graphicsType) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setId(Guid.Empty); vm.getGraphicsInfos().put(graphicsType, new org.ovirt.engine.core.common.businessentities.GraphicsInfo().setIp("host").setPort(5901)); vm.setStatus(VMStatus.Up); return vm; }
public static void handleTooltipEvent(com.google.gwt.dom.client.Element parent, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event) { }	public static void handleTooltipEvent(com.google.gwt.dom.client.Element parent, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event) { if (BrowserEvents.MOUSEOVER.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.configureTooltip(parent, tooltipContent, event); } if (BrowserEvents.MOUSEOUT.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.reapAllTooltips(); } if (BrowserEvents.MOUSEDOWN.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.hideAllTooltips(); } }
@org.junit.Test public void updateWithLowerVersionThanHosts() { createCommandWithDefaultVdsGroup(); setupCpu(); VdsExistWithHigherVersion(); architectureIsUpdatable(); canDoActionFailedWithReason(EngineMessages.VDS_GROUP_CANNOT_UPDATE_COMPATIBILITY_VERSION_WITH_LOWER_HOSTS); }	@org.junit.Test public void updateWithLowerVersionThanHosts() { createCommandWithDefaultVdsGroup(); setupCpu(); VdsExistWithHigherVersion(); architectureIsUpdatable(); canDoActionFailedWithReason(EngineMessage.VDS_GROUP_CANNOT_UPDATE_COMPATIBILITY_VERSION_WITH_LOWER_HOSTS); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Remove Storage(s)") java.lang.String removeStoragesTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Remove Storage(s)") java.lang.String removeStoragesTitle();
public long getNewDiskSizeInGB() { org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk = ((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (getNewDisk())); return (cinderDisk.getSize()) / ((1024 * 1024) * 1024); }	public long getNewDiskSizeInGB() { org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk = ((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (getNewDisk())); return (cinderDisk.getSize()) / (BYTES_IN_GB); }
public static org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy getFromStorageDomainId(org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = getDbFacade().getStorageDomainStaticDao().get(storageDomainId); if (storageDomainStatic != null) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomainStatic.getStorage())); return org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy.providerProxyFactory.create(provider); } return null; }	public static org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy getFromStorageDomainId(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.bll.provider.ProviderProxyFactory providerProxyFactory) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = getDbFacade().getStorageDomainStaticDao().get(storageDomainId); if (storageDomainStatic != null) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomainStatic.getStorage())); return providerProxyFactory.create(provider); } return null; }
private java.util.Map<java.lang.String, java.lang.Object>[] getVmInfo(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change change) { if (((change.vdsId) == null) || (change.vmsToUpdate.isEmpty())) { return null; } java.util.Map<java.lang.String, java.lang.Object>[] result = new java.util.Map[0]; org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(change.vdsId); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = getResourceManager().runVdsCommand(VDSCommandType.FullList, new org.ovirt.engine.core.common.vdscommands.FullListVDSCommandParameters(vds, change.vmsToUpdate)); if (vdsReturnValue.getSucceeded()) { result = ((java.util.Map<java.lang.String, java.lang.Object>[]) (vdsReturnValue.getReturnValue())); } return result; }	private java.util.Map<java.lang.String, java.lang.Object>[] getVmInfo(org.ovirt.engine.core.compat.Guid vdsId, java.util.List<org.ovirt.engine.core.compat.Guid> vms) { if ((vdsId == null) || (vms.isEmpty())) { return null; } java.util.Map<java.lang.String, java.lang.Object>[] result = new java.util.Map[0]; org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(vdsId); java.util.List<java.lang.String> vmIds = vms.stream().map(( guid) -> guid.toString()).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = getResourceManager().runVdsCommand(VDSCommandType.FullList, new org.ovirt.engine.core.common.vdscommands.FullListVDSCommandParameters(vds, vmIds)); if (vdsReturnValue.getSucceeded()) { result = ((java.util.Map<java.lang.String, java.lang.Object>[]) (vdsReturnValue.getReturnValue())); } return result; }
protected org.ovirt.engine.core.common.businessentities.storage.Disk getDisk() { if ((disk) == null) { disk = org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskDao().get(org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getParameters().getImageId()); } return disk; }	private void initVmTemplateId() { java.util.Map<java.lang.Boolean, org.ovirt.engine.core.common.businessentities.VmTemplate> templateMap = vmTemplateDao.getAllForImage(getDiskImage().getImageId()); if (!(templateMap.isEmpty())) { setVmTemplateId(templateMap.values().iterator().next().getId()); } }
@java.lang.Override protected void endSuccessfully() { endChildCommands(); addStorageDomainOvfInfoToDbIfNeeded(((org.ovirt.engine.core.common.action.AddImageFromScratchParameters) (org.ovirt.engine.core.bll.CreateOvfVolumeForStorageDomainCommand.getParameters().getImagesParameters().get(0))).getDiskInfo().getId()); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.ProccessOvfUpdateForStorageDomain, org.ovirt.engine.core.bll.CreateOvfVolumeForStorageDomainCommand.getParameters()); org.ovirt.engine.core.bll.CreateOvfVolumeForStorageDomainCommand.setSucceeded(true); }	@java.lang.Override protected void endSuccessfully() { endChildCommands(); org.ovirt.engine.core.compat.Guid diskId = ((org.ovirt.engine.core.common.action.AddImageFromScratchParameters) (org.ovirt.engine.core.bll.CreateOvfVolumeForStorageDomainCommand.getParameters().getImagesParameters().get(0))).getDiskInfo().getId(); org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo storageDomainOvfInfoDb = getStorageDomainOvfInfoDao().get(diskId); storageDomainOvfInfoDb.setStatus(StorageDomainOvfInfoStatus.OUTDATED); getStorageDomainOvfInfoDao().update(storageDomainOvfInfoDb); org.ovirt.engine.core.bll.CreateOvfVolumeForStorageDomainCommand.getBackend().runInternalAction(VdcActionType.ProcessOvfUpdateForStorageDomain, org.ovirt.engine.core.bll.CreateOvfVolumeForStorageDomainCommand.getParameters()); org.ovirt.engine.core.bll.CreateOvfVolumeForStorageDomainCommand.setSucceeded(true); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.qos.NetworkQoS networkQoS) { return getCustomMapSqlParameterSource().addValue("id", networkQoS.getId()).addValue("name", networkQoS.getName()).addValue("storage_pool_id", networkQoS.getStoragePoolId()).addValue("inbound_average", networkQoS.getInboundAverage()).addValue("inbound_peak", networkQoS.getInboundPeak()).addValue("inbound_burst", networkQoS.getInboundBurst()).addValue("outbound_average", networkQoS.getOutboundAverage()).addValue("outbound_peak", networkQoS.getOutboundPeak()).addValue("outbound_burst", networkQoS.getOutboundBurst()); }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.NetworkQoS networkQoS) { return getCustomMapSqlParameterSource().addValue("id", networkQoS.getId()).addValue("name", networkQoS.getName()).addValue("storage_pool_id", networkQoS.getStoragePoolId()).addValue("inbound_average", networkQoS.getInboundAverage()).addValue("inbound_peak", networkQoS.getInboundPeak()).addValue("inbound_burst", networkQoS.getInboundBurst()).addValue("outbound_average", networkQoS.getOutboundAverage()).addValue("outbound_peak", networkQoS.getOutboundPeak()).addValue("outbound_burst", networkQoS.getOutboundBurst()); }
@org.junit.Test public void invalidCpuSelection() { createCommandWithDefaultVdsGroup(); canDoActionFailedWithReason(EngineMessages.ACTION_TYPE_FAILED_CPU_NOT_FOUND); }	@org.junit.Test public void invalidCpuSelection() { createCommandWithDefaultVdsGroup(); canDoActionFailedWithReason(EngineMessage.ACTION_TYPE_FAILED_CPU_NOT_FOUND); }
private boolean isaMultipleGatewaysSupported(java.lang.String version) { return (java.lang.Boolean.TRUE) == (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.MultipleGatewaysSupported, version)); }	private boolean shouldSyncNetwork(final java.lang.String networkName) { return hostSetupNetworksParametersData.getNetworksToSync().contains(networkName); }
protected org.ovirt.engine.core.common.businessentities.VmTemplate getTemplateEntity() { org.ovirt.engine.core.common.businessentities.VmTemplate entity = control.createMock(org.ovirt.engine.core.common.businessentities.VmTemplate.class); expect(entity.getId()).andReturn(GUIDS[1]).anyTimes(); expect(entity.getVdsGroupId()).andReturn(GUIDS[2]).anyTimes(); expect(entity.getName()).andReturn(NAMES[1]).anyTimes(); expect(entity.getDescription()).andReturn(DESCRIPTIONS[1]).anyTimes(); expect(entity.getNumOfCpus()).andReturn(8).anyTimes(); expect(entity.getNumOfSockets()).andReturn(2).anyTimes(); expect(entity.getDefaultDisplayType()).andReturn(DisplayType.vga).anyTimes(); expect(entity.getNumOfMonitors()).andReturn(2).anyTimes(); expect(entity.getVmType()).andReturn(VmType.Server).anyTimes(); return entity; }	protected org.ovirt.engine.core.common.businessentities.VmTemplate getTemplateEntity() { org.ovirt.engine.core.common.businessentities.VmTemplate entity = control.createMock(org.ovirt.engine.core.common.businessentities.VmTemplate.class); expect(entity.getId()).andReturn(GUIDS[1]).anyTimes(); expect(entity.getVdsGroupId()).andReturn(GUIDS[2]).anyTimes(); expect(entity.getName()).andReturn(NAMES[1]).anyTimes(); expect(entity.getDescription()).andReturn(DESCRIPTIONS[1]).anyTimes(); expect(entity.getNumOfCpus()).andReturn(8).anyTimes(); expect(entity.getNumOfSockets()).andReturn(2).anyTimes(); expect(entity.getDefaultDisplayType()).andReturn(DisplayType.cirrus).anyTimes(); expect(entity.getNumOfMonitors()).andReturn(2).anyTimes(); expect(entity.getVmType()).andReturn(VmType.Server).anyTimes(); return entity; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Tags> getAll() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource(); return getCallsHandler().executeReadList("GetAllFromtags", org.ovirt.engine.core.dao.TagDAOImpl.TagRowMapper.instance, parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Tags> getAll() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource(); return getCallsHandler().executeReadList("GetAllFromtags", org.ovirt.engine.core.dao.TagDaoImpl.TagRowMapper.instance, parameterSource); }
protected void verifyModel(org.ovirt.engine.api.model.Cdrom model, int index) { org.ovirt.engine.api.restapi.resource.BackendTemplateCdromsResourceTest.verifyModelWithIso(model, org.ovirt.engine.api.restapi.resource.BackendTemplateCdromsResourceTest.ISO_PATH); verifyLinks(model); }	@java.lang.Override protected void verifyCollection(java.util.List<org.ovirt.engine.api.model.Cdrom> collection) throws java.lang.Exception { assertNotNull(collection); assertEquals(1, collection.size()); verifyModel(collection.get(0)); }
@java.lang.Override public void render(org.ovirt.engine.ui.userportal.widget.extended.vm.Context context, org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel model, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { sb.append(org.ovirt.engine.ui.userportal.widget.extended.vm.AbstractConsoleButtonCell.template.consoleButton(id, (shouldRenderCell(model) ? enabledCss : disabledCss))); }	@java.lang.Override public void render(org.ovirt.engine.ui.userportal.widget.extended.vm.Context context, org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel model, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { sb.append(template.consoleButton(id, (shouldRenderCell(model) ? enabledCss : disabledCss))); }
private void mockJobSubjectEntityDao(org.ovirt.engine.core.compat.Guid jobId) { when(jobSubjectEntityDao.getJobSubjectEntityByJobId(eq(jobId))).thenReturn(org.ovirt.engine.core.bll.job.JobRepositoryTest.JOB_SUBJECT_ENTITIES_MAP); when(jobSubjectEntityDao.getJobIdByEntityId(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.<org.ovirt.engine.core.compat.Guid>singletonList(jobId)); }	private void mockJobSubjectEntityDao(org.ovirt.engine.core.compat.Guid jobId) { when(jobSubjectEntityDao.getJobSubjectEntityByJobId(eq(jobId))).thenReturn(org.ovirt.engine.core.bll.job.JobRepositoryTest.JOB_SUBJECT_ENTITIES_MAP); when(jobSubjectEntityDao.getJobIdByEntityId(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.singletonList(jobId)); }
public void copyKeysDataTo(ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row13Struct other) { other.var_name = this.var_name; }	public void copyKeysDataTo(ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row12Struct other) { other.key = this.key; }
public void setBalloonEnabled(boolean isBallonEnabled) { mVmStatic.setBalloonEnabled(isBallonEnabled); OnPropertyChanged(new org.ovirt.engine.core.compat.PropertyChangedEventArgs("is_balloon_enabled")); }	public void setBalloonEnabled(boolean isBallonEnabled) { balloonEnabled = isBallonEnabled; OnPropertyChanged(new org.ovirt.engine.core.compat.PropertyChangedEventArgs("is_balloon_enabled")); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass()) != (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.DbUser other = ((org.ovirt.engine.core.common.businessentities.DbUser) (obj)); return ((((((((((((org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(id, other.id)) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(department, other.department))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(desktopDevice, other.desktopDevice))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(domain, other.domain))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(email, other.email))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(groups, other.groups))) && ((lastAdminCheckStatus) == (other.lastAdminCheckStatus))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(name, other.name))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(note, other.note))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(role, other.role))) && ((status) == (other.status))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(surname, other.surname))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(username, other.username)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass()) != (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.DbUser other = ((org.ovirt.engine.core.common.businessentities.DbUser) (obj)); return (((((((((((org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(id, other.id)) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(department, other.department))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(domain, other.domain))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(email, other.email))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(groups, other.groups))) && ((lastAdminCheckStatus) == (other.lastAdminCheckStatus))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(name, other.name))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(note, other.note))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(role, other.role))) && ((status) == (other.status))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(surname, other.surname))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(username, other.username)); }
private void preview() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (getEntity())); if (vm == null) { return; } org.ovirt.engine.core.common.businessentities.Snapshot snapshot = ((org.ovirt.engine.core.common.businessentities.Snapshot) (getSelectedItem())); if ((!(isMemorySnapshotSupported())) || (snapshot.getMemoryVolume().isEmpty())) { org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.TryBackToAllSnapshotsOfVm, new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vm.getId(), snapshot.getId()), null); } else { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().previewSnapshotTitle()); model.setHashName("preview_snapshot"); model.setHelpTag(model.getHashName(), ""); model.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("OnPreview", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true)); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()).setIsCancel(true); model.getCommands().add(cancelCommand); model.setCancelCommand(cancelCommand); model.setCloseCommand(new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()).setIsCancel(true)); } }	private void preview() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (getEntity())); if (vm == null) { return; } org.ovirt.engine.core.common.businessentities.Snapshot snapshot = ((org.ovirt.engine.core.common.businessentities.Snapshot) (getSelectedItem())); if ((!(isMemorySnapshotSupported())) || (snapshot.getMemoryVolume().isEmpty())) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TryBackToAllSnapshotsOfVm, new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vm.getId(), snapshot.getId()), null); } else { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().previewSnapshotTitle()); model.setHelpTag(HelpTag.preview_snapshot); model.setHashName("preview_snapshot"); addCommands(model, "OnPreview"); } }
protected boolean hasWatchdog(org.ovirt.engine.core.compat.Guid vmId) { return getVmDeviceUtils().hasWatchdog(vmId); }	protected boolean hasWatchdog(org.ovirt.engine.core.compat.Guid vmId) { return AbstractDiskVmCommand.getVmDeviceUtils().hasWatchdog(vmId); }
@java.lang.Override protected void executeCommand() { if (shouldSkipCommandExecutionCached()) { org.ovirt.engine.core.bll.VmCommand.setSucceeded(true); return; } registerHeOvfUpdate(); executeVmCommand(); }	@java.lang.Override protected void executeCommand() { if (shouldSkipCommandExecutionCached()) { org.ovirt.engine.core.bll.VmCommand.setSucceeded(true); return; } executeVmCommand(); if (((shouldUpdateHostedEngineOvf()) && (org.ovirt.engine.core.bll.VmCommand.getVm().isHostedEngine())) && (org.ovirt.engine.core.bll.VmCommand.getSucceeded())) { updateHeOvf(); } }
@java.lang.Override protected void logToAudit() { super.logToAudit(); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLogableBase.addCustomValue("message", org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.getReturnStatus().message); auditLogDirector.log(auditLogableBase, AuditLogType.IRS_BROKER_COMMAND_FAILURE); }	@java.lang.Override protected void logToAudit() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLogableBase.addCustomValue("message", org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.getReturnStatus().message); auditLogDirector.log(auditLogableBase, AuditLogType.IRS_BROKER_COMMAND_FAILURE); }
@java.lang.Override public void updateInterface(int osId, org.ovirt.engine.core.compat.Version clusterVersion) { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { getDiskInterface().setSelectedItem(getDisk().getDiskInterface()); } }; updateInterface(osId, clusterVersion, asyncQuery); }	@java.lang.Override public void setDefaultInterface() { getDiskInterface().setSelectedItem(getDisk().getDiskInterface()); }
@org.junit.Test(expected = java.io.IOException.class) public void testCommandNonZero() throws java.lang.Exception { client.execute("false", null, null, null); }	@org.junit.Test(expected = java.io.IOException.class) public void testCommandNonZero() throws java.lang.Exception { client.executeCommand("false", null, null, null); }
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getMainModel().getGetCapabilitiesCommand(); }	@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getMainModel().getRefreshCapabilitiesCommand(); }
protected boolean checkSingleQxlDisplay() { if (!(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getSingleQxlPci())) { return true; } return org.ovirt.engine.core.bll.VmHandler.isSingleQxlDeviceLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getDefaultDisplayType(), org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getOs(), org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getValidateMessages(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); }	protected boolean checkSingleQxlDisplay() { if (!(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getSingleQxlPci())) { return true; } return org.ovirt.engine.core.bll.VmHandler.isSingleQxlDeviceLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getDefaultDisplayType(), org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getOs(), org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getValidationMessages(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); }
public static java.util.List<org.ovirt.engine.api.extensions.ExtMap> findGroupRecordsByIds(final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension, final java.lang.String namespace, final java.util.List<java.lang.String> ids, final boolean groupsResolving, final boolean groupsResolvingRecursive) { java.util.List<org.ovirt.engine.api.extensions.ExtMap> results = new java.util.ArrayList<>(); for (java.util.List<java.lang.String> batch : org.ovirt.engine.core.aaa.SearchQueryParsingUtils.getIdsBatches(extension.getContext(), ids)) { results.addAll(org.ovirt.engine.core.aaa.AuthzUtils.queryPrincipalRecords(extension, namespace, org.ovirt.engine.core.aaa.SearchQueryParsingUtils.generateQueryMap(batch, Authz.QueryEntity.GROUP), groupsResolving, groupsResolvingRecursive)); } return results; }	public static java.util.List<org.ovirt.engine.api.extensions.ExtMap> findGroupRecordsByIds(final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension, final java.lang.String namespace, final java.util.List<java.lang.String> ids, final boolean groupsResolving, final boolean groupsResolvingRecursive) { java.util.List<org.ovirt.engine.api.extensions.ExtMap> results = new java.util.ArrayList<>(); for (java.util.List<java.lang.String> batch : org.ovirt.engine.core.aaa.SearchQueryParsingUtils.getIdsBatches(extension.getContext(), ids)) { results.addAll(org.ovirt.engine.core.aaa.AuthzUtils.queryGroupRecords(extension, namespace, org.ovirt.engine.core.aaa.SearchQueryParsingUtils.generateQueryMap(batch, Authz.QueryEntity.GROUP), groupsResolving, groupsResolvingRecursive)); } return results; }
@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { updateDefaultHost(); updateCustomPropertySheet(); updateMinAllocatedMemory(); updateNumOfSockets(); if ((getModel().getTemplate().getSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel().getTemplate().getSelectedItem(); updateQuotaByCluster(template.getQuotaId(), template.getQuotaName()); } updateCpuPinningVisibility(); updateTemplate(); updateOSValues(); updateMemoryBalloon(); updateCpuSharesAvailability(); updateVirtioScsiAvailability(); }	@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { deactivateInstanceTypeManager(new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.InstanceTypeManager.ActivatedListener() { @java.lang.Override public void activated() { getInstanceTypeManager().updateAll(); } }); updateDefaultHost(); updateCustomPropertySheet(); updateMinAllocatedMemory(); updateNumOfSockets(); if ((getModel().getTemplate().getSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel().getTemplate().getSelectedItem(); updateQuotaByCluster(template.getQuotaId(), template.getQuotaName()); } updateCpuPinningVisibility(); updateTemplate(); updateOSValues(); updateMemoryBalloon(); updateCpuSharesAvailability(); updateVirtioScsiAvailability(); activateInstanceTypeManager(); }
private static org.ovirt.engine.api.model.MacPool.Ranges.Range mapRange(org.ovirt.engine.core.common.businessentities.MacRange range) { final org.ovirt.engine.api.model.MacPool.Ranges.Range model = new org.ovirt.engine.api.model.MacPool.Ranges.Range(); model.setFrom(range.getMacFrom()); model.setTo(range.getMacTo()); model.setComment(range.getComment()); return model; }	private static org.ovirt.engine.api.model.Range mapRange(org.ovirt.engine.core.common.businessentities.MacRange range) { final org.ovirt.engine.api.model.Range model = new org.ovirt.engine.api.model.Range(); model.setFrom(range.getMacFrom()); model.setTo(range.getMacTo()); return model; }
protected void updateInputTitle(java.util.ArrayList<java.lang.String> grayOutReasons, com.google.gwt.dom.client.Element input) { java.lang.StringBuilder title = new java.lang.StringBuilder(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.empty()); for (java.lang.String reason : grayOutReasons) { title.append(reason).append(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.space()); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(title.toString(), input); }	protected void updateInputTitle(java.util.ArrayList<java.lang.String> grayOutReasons, com.google.gwt.dom.client.Element input) { java.lang.StringBuilder title = new java.lang.StringBuilder(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.empty()); for (java.lang.String reason : grayOutReasons) { title.append(reason).append(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.space()); } org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipUtils.setTooltipOnElement(title.toString(), input); }
public void updateMigrationAvailability() { java.lang.Boolean haHost = getModel().getIsHighlyAvailable().getEntity(); int pinToHostSize = getModel().getDefaultHost().getItems().size(); if (haHost && (pinToHostSize < 2)) { getModel().getMigrationMode().setChangeProhibitionReason(constants.hostIsHa()); getModel().getMigrationMode().setSelectedItem(MigrationSupport.MIGRATABLE); } getModel().getMigrationMode().setIsChangeable(((!haHost) || (pinToHostSize >= 2))); }	public void updateMigrationAvailability() { java.lang.Boolean haHost = getModel().getIsHighlyAvailable().getEntity(); final java.util.Collection<org.ovirt.engine.core.common.businessentities.VDS> allowedHosts = getModel().getDefaultHost().getSelectedItems(); java.util.Collection<org.ovirt.engine.core.common.businessentities.VDS> presentHosts = getModel().getDefaultHost().getItems(); int pinToHostSize = (allowedHosts == null) ? 0 : allowedHosts.size(); java.lang.Boolean isAutoAssign = getModel().getIsAutoAssign().getEntity(); if (presentHosts == null) { presentHosts = new java.util.ArrayList(); } if ((haHost && ((pinToHostSize == 1) || ((pinToHostSize == 0) && ((presentHosts.size()) < 2)))) && ((!isAutoAssign) || ((presentHosts.size()) < 2))) { getModel().getMigrationMode().setChangeProhibitionReason(constants.hostIsHa()); getModel().getMigrationMode().setSelectedItem(MigrationSupport.MIGRATABLE); } getModel().getMigrationMode().setIsChangeable(((((!haHost) || (isAutoAssign && ((presentHosts.size()) >= 2))) || (pinToHostSize >= 2)) || ((pinToHostSize == 0) && ((presentHosts.size()) >= 2)))); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.StopGlusterVolumeProfile, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeVDSParameters(upServer.getId(), getGlusterVolumeName())); setSucceeded(returnValue.getSucceeded()); if (!(getSucceeded())) { handleVdsError(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP_FAILED, returnValue.getVdsError().getMessage()); return; } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.StopGlusterVolumeProfile, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeVDSParameters(upServer.getId(), getGlusterVolumeName())); setSucceeded(returnValue.getSucceeded()); if (!(getSucceeded())) { handleVdsError(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP_FAILED, returnValue.getVdsError().getMessage()); } }
private void detach() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().detachStorageTitle()); model.setHashName("detach_storage"); model.setHelpTag(model.getHashName(), "Storage > Data Center > Detach Storage"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().areYouSureYouWantDetachStorageFromDcsMsg()); java.util.ArrayList<java.lang.String> items = new java.util.ArrayList<java.lang.String>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.StorageDomain a = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (item)); items.add(a.getStoragePoolName()); } model.setItems(items); if (containsLocalStorage(model)) { model.getLatch().setIsAvailable(true); model.getLatch().setIsChangable(true); model.setNote(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().detachNote(getLocalStoragesFormattedString())); } org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnDetach", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }	private void detach() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().detachStorageTitle()); model.setHelpTag(HelpTag.detach_storage); model.setHashName("detach_storage"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().areYouSureYouWantDetachStorageFromDcsMsg()); java.util.ArrayList<java.lang.String> items = new java.util.ArrayList<java.lang.String>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.StorageDomain a = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (item)); items.add(a.getStoragePoolName()); } model.setItems(items); if (containsLocalStorage(model)) { model.getLatch().setIsAvailable(true); model.getLatch().setIsChangable(true); model.setNote(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().detachNote(getLocalStoragesFormattedString())); } org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnDetach", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
@java.lang.Override protected void ExecuteVdsBrokerCommand() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>GetValue(ConfigValues.SendVmTicketUID, org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getVds().getVdsGroupCompatibilityVersion().toString())) { java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>(); params.put("userName", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getUserName()); params.put("userId", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getUserId().toString()); status = org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getBroker().setVmTicket(mVmId.toString(), mTicket, java.lang.Integer.valueOf(mValidTime).toString(), connectionAction, params); } else { status = org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getBroker().setVmTicket(mVmId.toString(), mTicket, java.lang.Integer.valueOf(mValidTime).toString()); } org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.ProceedProxyReturnValue(); }	@java.lang.Override protected void ExecuteVdsBrokerCommand() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>GetValue(ConfigValues.SendVmTicketUID, org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getVds().getVdsGroupCompatibilityVersion().toString())) { java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>(); params.put("userName", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getUserName()); params.put("userId", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getUserId().toString()); status = org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getBroker().setVmTicket(mVmId.toString(), mTicket, java.lang.String.valueOf(mValidTime), connectionAction, params); } else { status = org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getBroker().setVmTicket(mVmId.toString(), mTicket, java.lang.String.valueOf(mValidTime)); } org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.ProceedProxyReturnValue(); }
public static void GetClusterServerMemoryOverCommit(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 0; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommitForServers, org.ovirt.engine.core.common.config.ConfigCommon.defaultConfigurationVersion), aQuery); }	public static void GetClusterServerMemoryOverCommit(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 0; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommitForServers, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, hostName, consoleAddress, name, otpValidity, pmEnabled, pmKdumpDetection, port, protocol, sshPort, sshUsername, serverSslEnabled, uniqueId, clusterId, vdsStrength, vdsType, disablePowerManagementPolicy, hostProviderId, currentKernelCmdline, kernelCmdlineParsable, lastStoredKernelCmdline, kernelCmdlineIommu, kernelCmdlineKvmNested, kernelCmdlinePciRealloc, kernelCmdlineUnsafeInterrupts); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, hostName, consoleAddress, name, otpValidity, pmEnabled, pmKdumpDetection, port, protocol, sshPort, sshUsername, serverSslEnabled, uniqueId, clusterId, vdsStrength, vdsType, disablePowerManagementPolicy, hostProviderId, openstackNetworkProviderId, currentKernelCmdline, kernelCmdlineParsable, lastStoredKernelCmdline, kernelCmdlineIommu, kernelCmdlineKvmNested, kernelCmdlinePciRealloc, kernelCmdlineUnsafeInterrupts); }
private static java.lang.String generateDiskDescriptionJsonEntry(java.lang.String diskDescription) { return org.ovirt.engine.core.bll.storage.disk.MetadataDiskDescriptionHandler.getInstance().generateJsonField("DiskDescription", diskDescription); }	private static java.lang.String generateDiskDescriptionJsonEntry(java.lang.String diskDescription) { return org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandler.getInstance().generateJsonField("DiskDescription", diskDescription); }
com.google.gwt.user.client.ui.HasEnabled getCustomMigrationBandwidthLimitEditor();	org.ovirt.engine.ui.common.widget.HasEnabledWithHints getCustomMigrationBandwidthLimitEditor();
private void reportServerStatus(boolean isResponsive) { boolean statusChanged; boolean lastServerStatus = isServerUp; isServerUp = isResponsive; statusChanged = lastServerStatus ^ isResponsive; if (statusChanged || (repeatNonResponsiveNotification)) { if (isResponsive) { if (statusChanged) { insertEventIntoAuditLogSafe(AuditLogType.VDC_START, AuditLogSeverity.NORMAL, org.ovirt.engine.core.notifier.EngineMonitorService.ENGINE_RESPONDING_MESSAGE, "Failed auditing event down (for responsive server)."); } } else { if (new java.io.File(pidFile).exists()) { insertEventIntoAuditLogSafe(AuditLogType.VDC_STOP, AuditLogSeverity.ERROR, org.ovirt.engine.core.notifier.EngineMonitorService.ENGINE_NOT_RESPONDING_ERROR, "Failed auditing event up (for crashed non responsive server)."); } else { insertEventIntoAuditLogSafe(AuditLogType.VDC_STOP, AuditLogSeverity.WARNING, org.ovirt.engine.core.notifier.EngineMonitorService.ENGINE_NOT_RESPONDING_ERROR, "Failed auditing event up (for stopped non responsive server)."); } } } }	private void reportServerStatus(boolean isResponsive) { boolean statusChanged; boolean lastServerStatus = isServerUp; isServerUp = isResponsive; statusChanged = lastServerStatus ^ isResponsive; if (statusChanged || (repeatNonResponsiveNotification)) { if (isResponsive) { if (statusChanged) { insertEventIntoAuditLogSafe(AuditLogType.VDC_START, AuditLogSeverity.NORMAL, org.ovirt.engine.core.notifier.EngineMonitorService.ENGINE_RESPONDING_MESSAGE, "Failed auditing event down (for responsive server)."); } } else { if (new java.io.File(pidFile).exists()) { insertEventIntoAuditLogSafe(AuditLogType.VDC_STOP, AuditLogSeverity.ERROR, org.ovirt.engine.core.notifier.EngineMonitorService.ENGINE_NOT_RESPONDING_ERROR, "Failed auditing event up (for crashed non-responsive server)."); } else { insertEventIntoAuditLogSafe(AuditLogType.VDC_STOP, AuditLogSeverity.WARNING, org.ovirt.engine.core.notifier.EngineMonitorService.ENGINE_NOT_RESPONDING_ERROR, "Failed auditing event up (for stopped non-responsive server)."); } } } }
@java.lang.Override public void onFailure(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.LoginUserParameters> operation, final java.lang.Throwable caught) { if (ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ("Failed to execute RunQuery: " + caught), caught); getEventsHandler().runQueryFailed(null); failureEventHandler(caught); if (callback.isHandleFailure()) { org.ovirt.engine.ui.frontend.Frontend.getInstance().setLoggedInUser(null); callback.getDel().onSuccess(callback.getModel(), null); } }	@java.lang.Override public void onFailure(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.LoginUserParameters> operation, final java.lang.Throwable caught) { if (ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ("Failed to login: " + caught), caught); getEventsHandler().runQueryFailed(null); failureEventHandler(caught); clearLoggedInUser(); if (callback.isHandleFailure()) { org.ovirt.engine.ui.frontend.Frontend.getInstance().setLoggedInUser(null); callback.getDel().onSuccess(callback.getModel(), null); } }
@java.lang.Override public void migrateVM(java.util.List<org.ovirt.engine.core.compat.Guid> initialHosts, org.ovirt.engine.core.compat.Guid vmToMigrate, org.ovirt.engine.core.common.migration.MigrationReason reason) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters(false, vmToMigrate, reason); parameters.setInitialHosts(new java.util.ArrayList(initialHosts)); backendInternal.runInternalAction(VdcActionType.MigrateVm, parameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); }	@java.lang.Override public void migrateVM(java.util.List<org.ovirt.engine.core.compat.Guid> initialHosts, org.ovirt.engine.core.compat.Guid vmToMigrate, java.lang.String reason) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters(false, vmToMigrate); parameters.setInitialHosts(new java.util.ArrayList(initialHosts)); parameters.setReason(reason); backendInternal.runInternalAction(VdcActionType.MigrateVm, parameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); }
@java.lang.Override protected void onReset() { if (!(placeManager.isMainSectionBasicPlaceVisible())) { header.setGuideUrl(basicGuideUrl); } else { header.setGuideUrl(extendedGuideUrl); } }	@java.lang.Override protected void onReset() { if (placeManager.isMainSectionBasicPlaceVisible()) { header.setGuideUrl(basicGuideUrl); } else { header.setGuideUrl(extendedGuideUrl); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> getVmDeviceByType(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { return getCallsHandler().executeReadList("GetVmDeviceByType", createEntityRowMapper(), getCustomMapSqlParameterSource().addValue("type", type.getValue()).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> getVmDeviceByTypeAndDevice(java.util.List<org.ovirt.engine.core.compat.Guid> vmsIds, org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type, java.lang.String device, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_ids", createArrayOfUUIDs(vmsIds)).addValue("type", type.getValue()).addValue("device", device).addValue("user_id", userID).addValue("is_filtered", isFiltered); return getCallsHandler().executeReadList("GetVmDeviceByTypeAndDevice", createEntityRowMapper(), parameterSource); }
public boolean isConfigured(java.lang.String property) { return !(org.apache.commons.lang.StringUtils.isEmpty(getProperty(property))); }	public boolean isConfigured(java.lang.String property) { return !(org.apache.commons.lang.StringUtils.isEmpty(getProperty(property, true))); }
@org.junit.Test public void testJsonDiskDescription() throws java.io.IOException { disk1.setDiskAlias("DiskAlias"); disk1.setDiskDescription("DiskDescription"); assertDiskDescriptionMap(); }	@org.junit.Test public void testJsonDiskDescription() throws java.io.IOException { disk1.setDiskAlias("DiskAlias"); disk1.setDiskDescription("DiskDescription"); org.ovirt.engine.core.bll.ImagesHandlerTest.assertDiskDescriptionMap(disk1); }
@org.junit.Test public void testCDAStoragePoolNotUp() { storagePool.setstatus(StoragePoolStatus.Uninitialized); assertFalse("canDoAction did not fail on a Storage Pool which is not up", command.canDoAction()); org.ovirt.engine.core.bll.CommandAssertUtils.checkMessagesContains(command, VdcBllMessages.CANNOT_FORCE_SELECT_SPM_STORAGE_POOL_NOT_UP); }	@org.junit.Test public void testCDAStoragePoolNotUp() { storagePool.setStatus(StoragePoolStatus.Uninitialized); assertFalse("canDoAction did not fail on a Storage Pool which is not up", command.canDoAction()); org.ovirt.engine.core.bll.CommandAssertUtils.checkMessagesContains(command, VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND); }
protected void readHardwareSection(org.ovirt.engine.core.compat.backendcompat.XmlNode section) { boolean readVirtioSerial = false; for (org.ovirt.engine.core.compat.backendcompat.XmlNode node : section.SelectNodes("Item")) { switch (node.SelectSingleNode("rasd:ResourceType", _xmlNS).innerText) { case OvfHardware.CPU : readCpuItem(node); break; case OvfHardware.Memory : readMemoryItem(node); break; case OvfHardware.DiskImage : readDiskImageItem(node); break; case OvfHardware.Network : readNetworkItem(node); break; case OvfHardware.USB : readUsbItem(node); break; case OvfHardware.Monitor : readMonitorItem(node); break; case OvfHardware.CD : readCdItem(node); break; case OvfHardware.OTHER : org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = readOtherHardwareItem(node); readVirtioSerial = (readVirtioSerial) ? true : (org.ovirt.engine.core.common.utils.VmDeviceType.VIRTIOSERIAL) == (org.ovirt.engine.core.common.utils.VmDeviceType.getByName(vmDevice.getDevice())); break; } } if (!readVirtioSerial) { addManagedVmDevice(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.createVirtioSerialDeviceForVm(vmBase.getId())); } }	protected void readHardwareSection(org.ovirt.engine.core.utils.ovf.xml.XmlNode section) { boolean readVirtioSerial = false; for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : section.SelectNodes("Item")) { switch (node.SelectSingleNode("rasd:ResourceType", _xmlNS).innerText) { case OvfHardware.CPU : readCpuItem(node); break; case OvfHardware.Memory : readMemoryItem(node); break; case OvfHardware.DiskImage : readDiskImageItem(node); break; case OvfHardware.Network : readNetworkItem(node); break; case OvfHardware.USB : readUsbItem(node); break; case OvfHardware.Monitor : readMonitorItem(node); break; case OvfHardware.CD : readCdItem(node); break; case OvfHardware.OTHER : org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = readOtherHardwareItem(node); readVirtioSerial = readVirtioSerial || (VmDeviceType.VIRTIOSERIAL.getName().equals(vmDevice.getDevice())); break; } } if (!readVirtioSerial) { addManagedVmDevice(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.createVirtioSerialDeviceForVm(vmBase.getId())); } }
public static java.lang.String getVlanDeviceName(java.lang.String underlyingNic, org.ovirt.engine.core.common.businessentities.network.Network network) { return (underlyingNic + ".") + (network.getVlanId()); }	public static java.lang.String getVlanDeviceName(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface underlyingNic, org.ovirt.engine.core.common.businessentities.network.Network network) { return ((underlyingNic.getName()) + ".") + (network.getVlanId()); }
private java.util.Set<org.ovirt.engine.core.compat.Guid> findSnapshotsWithOnlyIllegalDisks() { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> newerSnapshots = getNewerSnapshots(snapshot); java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotsToRemove = new java.util.HashSet<>(); newerSnapshots.forEach(( snapshot) -> { org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); if (vm != null) { boolean shouldRemove = (!(vm.getImages().isEmpty())) && (vm.getImages().stream().allMatch(( diskImage) -> (diskImage.getImageStatus()) == ImageStatus.ILLEGAL)); if (shouldRemove) { snapshotsToRemove.add(snapshot.getId()); } } }); return snapshotsToRemove; }	private java.util.Set<org.ovirt.engine.core.compat.Guid> findSnapshotsWithOnlyIllegalDisks() { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> newerSnapshots = getNewerSnapshots(snapshot); java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotsToRemove = new java.util.HashSet<>(); newerSnapshots.forEach(( snapshot) -> { org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); if (vm != null) { boolean shouldRemove = (vm.getImages().isEmpty()) || (vm.getImages().stream().allMatch(( diskImage) -> (diskImage.getImageStatus()) == ImageStatus.ILLEGAL)); if (shouldRemove) { snapshotsToRemove.add(snapshot.getId()); } } }); return snapshotsToRemove; }
@java.lang.Override public void setId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable) { logable.setVmTemplateId(mOldTemplate.getId()); }	@java.lang.Override public void setEntityId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable) { logable.setVmTemplateId(mOldTemplate.getId()); }
public static void GetLocalFSPath(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.String) (source)) : ""; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.RhevhLocalFSPath, org.ovirt.engine.core.common.config.ConfigCommon.defaultConfigurationVersion), aQuery); }	public static void GetLocalFSPath(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.String) (source)) : ""; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.RhevhLocalFSPath, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmDynamic, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmDynamic, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), createVmInternalData()); pair.getSecond().getVmDynamic().setStatus(VMStatus.Up); pair.getSecond().getVmDynamic().setRunOnVds(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs.DST_HOST_ID); return pair; }	@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), createVmInternalData()); pair.getSecond().getVmDynamic().setStatus(VMStatus.Up); pair.getSecond().getVmDynamic().setRunOnVds(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs.DST_HOST_ID); return pair; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmTemplate getTemplateWithLatestVersionInChain(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeRead("GetTemplateWithLatestVersionInChain", org.ovirt.engine.core.dao.VmTemplateDAOImpl.VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("template_id", id)); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmTemplate getTemplateWithLatestVersionInChain(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeRead("GetTemplateWithLatestVersionInChain", org.ovirt.engine.core.dao.VmTemplateDaoImpl.VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("template_id", id)); }
@org.ovirt.engine.ui.common.DefaultStringValue("Network") java.lang.String cloudInitNetworkLabel();	@com.google.gwt.i18n.client.Constants.DefaultStringValue("Network") java.lang.String cloudInitNetworkLabel();
@java.lang.Override protected void executeCommand() { runVdsCommand(VDSCommandType.SparsifyImage, new org.ovirt.engine.core.common.vdscommands.SparsifyImageVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getImageId(), org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getId())); }	@java.lang.Override protected void executeCommand() { lockImageInDb(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithFailover(VDSCommandType.SparsifyImage, new org.ovirt.engine.core.common.vdscommands.SparsifyImageVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getParameters().getStorageJobId(), getDiskImage().getStorageIds().get(0), getDiskImage().getId(), getDiskImage().getImageId()), getDiskImage().getStoragePoolId(), this); if (!(vdsReturnValue.getSucceeded())) { setCommandStatus(CommandStatus.FAILED); unlockImageInDb(); } setSucceeded(vdsReturnValue.getSucceeded()); }
@org.junit.Test public void differentCluster() throws java.lang.Exception { parameters.put(HostedEngineMemoryReservationFilterPolicyUnit.SPARES_COUNT, "5"); hostedEngine.setVmMemSizeMb(7000); hostedEngine.setVdsGroupId(Guid.SYSTEM); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = uut.filter(hosts, vm, parameters, messages); assertEquals(5, result.size()); }	@org.junit.Test public void testDifferentCluster() throws java.lang.Exception { parameters.put(PolicyUnitParameter.HE_SPARES_COUNT.getDbName(), "5"); hostedEngine.setVmMemSizeMb(7000); hostedEngine.setClusterId(Guid.SYSTEM); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = policyUnit.filter(cluster, hosts, vm, parameters, messages); assertEquals(5, result.size()); }
public boolean AddMessage(java.lang.String message) { boolean error = false; if (org.apache.commons.lang.StringUtils.isEmpty(message)) { return error; } java.lang.String[] msgs = message.split("[\\n]", (-1)); if ((msgs.length) > 1) { for (java.lang.String msg : msgs) { error = (AddMessage(msg)) || error; } return error; } if (org.apache.commons.lang.StringUtils.isNotEmpty(message)) { if ((message.charAt(0)) == '<') { try { error = parseMessage(message); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.InstallerMessages.log.errorFormat("Installation of Host. Received illegal XML from Host. Message: {1}, Exception: {2}", message, e.toString()); } } else { org.ovirt.engine.core.bll.InstallerMessages.log.info(("VDS message: " + message)); } } return error; }	public boolean AddMessage(java.lang.String message) { boolean error = false; if (org.apache.commons.lang.StringUtils.isEmpty(message)) { return error; } java.lang.String[] msgs = message.split("[\\n]", (-1)); if ((msgs.length) > 1) { for (java.lang.String msg : msgs) { error = (AddMessage(msg)) || error; } return error; } if (org.apache.commons.lang.StringUtils.isNotEmpty(message)) { if ((message.charAt(0)) == '<') { try { error = parseMessage(message); } catch (java.lang.RuntimeException e) { error = true; org.ovirt.engine.core.bll.InstallerMessages.log.errorFormat("Installation of Host. Received illegal XML from Host. Message: {0}", message, e); } } else { org.ovirt.engine.core.bll.InstallerMessages.log.info(("VDS message: " + message)); } } return error; }
private void UpdateVmNetworks() { if (!(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getvds_group_id().equals(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getvds_group_id()))) { java.util.List<org.ovirt.engine.core.common.businessentities.network> networks = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDAO().getAllForCluster(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getvds_group_id()); java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> interfaces = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getId()); for (final org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : interfaces) { org.ovirt.engine.core.common.businessentities.network net = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(networks, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.network>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.network n) { return iface.getNetworkName().equals(n.getname()); } }); if (net == null) { iface.setNetworkName(null); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDAO().update(iface); } } } }	private void UpdateVmNetworks() { if (!(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getvds_group_id().equals(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getvds_group_id()))) { java.util.List<org.ovirt.engine.core.common.businessentities.Network> networks = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDAO().getAllForCluster(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getvds_group_id()); java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> interfaces = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getId()); for (final org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : interfaces) { org.ovirt.engine.core.common.businessentities.Network net = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(networks, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.Network>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.Network n) { return iface.getNetworkName().equals(n.getname()); } }); if (net == null) { iface.setNetworkName(null); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDAO().update(iface); } } } }
@org.junit.Test public void vnicProfileNameTakenByDifferentVnicProfile() throws java.lang.Exception { vnicProfileAvailableTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessages.ACTION_TYPE_FAILED_VNIC_PROFILE_NAME_IN_USE), getSingletonNamedVnicProfileList(DEFAULT_VNIC_PROFILE_NAME, OTHER_GUID)); }	@org.junit.Test public void vnicProfileNameTakenByDifferentVnicProfile() throws java.lang.Exception { vnicProfileAvailableTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_VNIC_PROFILE_NAME_IN_USE), getSingletonNamedVnicProfileList(DEFAULT_VNIC_PROFILE_NAME, OTHER_GUID)); }
protected void initTableColumns(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { deviceTable.addColumn(new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.gluster.StorageDevice entity) { return entity.getName(); } }, constants.deviceName()); deviceTable.addColumnAndSetWidth(new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.gluster.StorageDevice entity) { return entity.getDevType(); } }, constants.deviceType(), "100px"); deviceTable.addColumnAndSetWidth(new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.gluster.StorageDevice entity) { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit, java.lang.Double> convertedSize = org.ovirt.engine.core.common.utils.SizeConverter.autoConvert(entity.getSize(), SizeUnit.MB); return ((formatSize(convertedSize.getSecond())) + " ") + (convertedSize.getFirst().toString()); } }, constants.size(), "100px"); }	protected void initTableColumns(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { deviceTable.addColumn(new org.ovirt.engine.ui.common.widget.table.column.TextColumnWithTooltip<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.gluster.StorageDevice entity) { return entity.getName(); } }, constants.deviceName()); deviceTable.addColumnAndSetWidth(new org.ovirt.engine.ui.common.widget.table.column.TextColumnWithTooltip<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.gluster.StorageDevice entity) { return entity.getDevType(); } }, constants.deviceType(), "100px"); deviceTable.addColumnAndSetWidth(new org.ovirt.engine.ui.common.widget.table.column.TextColumnWithTooltip<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.gluster.StorageDevice entity) { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit, java.lang.Double> convertedSize = org.ovirt.engine.core.common.utils.SizeConverter.autoConvert(entity.getSize(), SizeUnit.MB); return ((formatSize(convertedSize.getSecond())) + " ") + (convertedSize.getFirst().toString()); } }, constants.size(), "100px"); }
@java.lang.Override protected void OnEntityChanged() { super.OnEntityChanged(); if ((super.getEntity()) != null) { UpdateProperties(); } }	@java.lang.Override protected void onEntityChanged() { super.onEntityChanged(); if ((super.getEntity()) != null) { updateProperties(); } }
private void prepareVmToPassCanDoAction() { vmStatic.setName("vm1"); vmStatic.setMemSizeMb(256); vmStatic.setSingleQxlPci(false); mockVmDaoGetVm(); mockSameNameQuery(false); mockValidateCustomProperties(); mockValidatePciAndIdeLimit(); mockGraphicsDevice(); }	private void prepareVmToPassCanDoAction() { vmStatic.setName("vm1"); vmStatic.setMemSizeMb(256); vmStatic.setSingleQxlPci(false); mockVmDaoGetVm(); mockSameNameQuery(false); mockValidateCustomProperties(); mockValidatePciAndIdeLimit(); doReturn(true).when(command).setAndValidateCpuProfile(); mockGraphicsDevice(); }
private org.ovirt.engine.core.common.businessentities.network.IpConfiguration createIpConfiguration() { org.ovirt.engine.core.common.businessentities.network.IPv4Address address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); address.setAddress(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IP_ADDRESS); address.setNetmask(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.NETMASK); address.setGateway(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.GATEWAY); address.setBootProtocol(Ipv4BootProtocol.STATIC_IP); org.ovirt.engine.core.common.businessentities.network.IpConfiguration result = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); result.setIPv4Addresses(java.util.Collections.singletonList(address)); return result; }	private org.ovirt.engine.core.common.businessentities.network.IpV6Address createIpv6Address() { org.ovirt.engine.core.common.businessentities.network.IpV6Address address = new org.ovirt.engine.core.common.businessentities.network.IpV6Address(); address.setAddress(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IPV6_ADDRESS); address.setPrefix(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IPV6_PREFIX); address.setGateway(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IPV6_GATEWAY); address.setBootProtocol(Ipv4BootProtocol.STATIC_IP); return address; }
private void loadLine(java.lang.String line) throws java.io.IOException { java.util.regex.Matcher commentMatch = org.ovirt.engine.core.utils.LocalConfig.COMMENT_EXPR.matcher(line); if (commentMatch.find()) { line = (line.substring(0, commentMatch.start())) + (line.substring(commentMatch.end())); } java.util.regex.Matcher blankMatch = org.ovirt.engine.core.utils.LocalConfig.BLANK_EXPR.matcher(line); if (blankMatch.find()) { return; } java.util.regex.Matcher keyValueMatch = org.ovirt.engine.core.utils.LocalConfig.VALUE_EXPR.matcher(line); java.lang.System.out.println((("line: -" + line) + "-")); if (!(keyValueMatch.find())) { return; } java.lang.String key = keyValueMatch.group(1); java.lang.System.out.println((("key: -" + key) + "-")); java.lang.String value = keyValueMatch.group(2); java.lang.System.out.println((("value: -" + value) + "-")); if ((((value.length()) >= 2) && (value.startsWith("\""))) && (value.endsWith("\""))) { value = value.substring(1, ((value.length()) - 1)); } for (; ;) { java.util.regex.Matcher refMatch = org.ovirt.engine.core.utils.LocalConfig.REF_EXPR.matcher(value); if (!(refMatch.find())) { break; } java.lang.String refKey = refMatch.group(1); java.lang.String refValue = values.get(refKey); if (refValue == null) { break; } value = ((value.substring(0, refMatch.start())) + refValue) + (value.substring(refMatch.end())); } values.put(key, value); }	private void loadLine(java.lang.String line) throws java.io.IOException { java.util.regex.Matcher commentMatch = org.ovirt.engine.core.utils.LocalConfig.COMMENT_EXPR.matcher(line); if (commentMatch.find()) { line = (line.substring(0, commentMatch.start())) + (line.substring(commentMatch.end())); } java.util.regex.Matcher blankMatch = org.ovirt.engine.core.utils.LocalConfig.BLANK_EXPR.matcher(line); if (blankMatch.find()) { return; } java.util.regex.Matcher keyValueMatch = org.ovirt.engine.core.utils.LocalConfig.VALUE_EXPR.matcher(line); if (!(keyValueMatch.find())) { return; } java.lang.String key = keyValueMatch.group(1); java.lang.String value = keyValueMatch.group(2); if ((((value.length()) >= 2) && (value.startsWith("\""))) && (value.endsWith("\""))) { value = value.substring(1, ((value.length()) - 1)); } for (; ;) { java.util.regex.Matcher refMatch = org.ovirt.engine.core.utils.LocalConfig.REF_EXPR.matcher(value); if (!(refMatch.find())) { break; } java.lang.String refKey = refMatch.group(1); java.lang.String refValue = values.get(refKey); if (refValue == null) { break; } value = ((value.substring(0, refMatch.start())) + refValue) + (value.substring(refMatch.end())); } values.put(key, value); }
@java.lang.Override protected void onLoadingStateChanged(com.google.gwt.user.cellview.client.LoadingStateChangeEvent.LoadingState state) { super.onLoadingStateChanged(state); enforceScrollPosition(); if (state == (com.google.gwt.user.cellview.client.LoadingStateChangeEvent.LoadingState.LOADING)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { doAutoSelect = true; } }); } else if (state == (com.google.gwt.user.cellview.client.LoadingStateChangeEvent.LoadingState.LOADED)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { if ((rowVisitor) != null) { com.google.gwt.view.client.Range visibleRange = getVisibleRange(); int start = visibleRange.getStart(); int length = visibleRange.getLength(); for (int i = start; i < (start + length); i++) { com.google.gwt.dom.client.TableRowElement row = getChildElement((i - start)); T item = getVisibleItem(i); rowVisitor.visit(row, item); } } } }); } }	@java.lang.Override protected void onLoadingStateChanged(com.google.gwt.user.cellview.client.LoadingStateChangeEvent.LoadingState state) { super.onLoadingStateChanged(state); enforceScrollPosition(); if (state == (com.google.gwt.user.cellview.client.LoadingStateChangeEvent.LoadingState.LOADING)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { doAutoSelect = true; } }); } else if (state == (com.google.gwt.user.cellview.client.LoadingStateChangeEvent.LoadingState.LOADED)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { if ((rowVisitor) != null) { int count = getVisibleItemCount(); for (int i = 0; i < count; i++) { com.google.gwt.dom.client.TableRowElement row = getChildElement(i); T item = getVisibleItem(i); rowVisitor.visit(row, item); } } } }); } }
public static org.ovirt.engine.core.bll.ValidationResult canRunActionOnNonManagedVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.action.VdcActionType actionType) { org.ovirt.engine.core.bll.ValidationResult validationResult = ValidationResult.VALID; if (!(org.ovirt.engine.core.common.validation.VmActionValidator.isCommandAllowed(vm.getOrigin(), actionType))) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CANNOT_RUN_ACTION_ON_NON_MANAGED_VM); } return validationResult; }	public static org.ovirt.engine.core.bll.ValidationResult canRunActionOnNonManagedVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.action.VdcActionType actionType) { org.ovirt.engine.core.bll.ValidationResult validationResult = ValidationResult.VALID; if (!(org.ovirt.engine.core.common.validation.VmActionByVmOriginTypeValidator.isCommandAllowed(vm, actionType))) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CANNOT_RUN_ACTION_ON_NON_MANAGED_VM); } return validationResult; }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> thisLocks = java.util.Collections.singletonMap(getSourceVmFromDb().getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, EngineMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED)); java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> parentLocks = super.getExclusiveLocks(); if (parentLocks == null) { return thisLocks; } java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> union = new java.util.HashMap<>(); union.putAll(parentLocks); union.putAll(thisLocks); return union; }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> thisLocks = java.util.Collections.singletonMap(getSourceVmFromDb().getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED)); java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> parentLocks = super.getExclusiveLocks(); if (parentLocks == null) { return thisLocks; } java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> union = new java.util.HashMap<>(); union.putAll(parentLocks); union.putAll(thisLocks); return union; }
private void writeHostDevice(org.ovirt.engine.core.common.businessentities.VmHostDevice device) { java.lang.String deviceName = device.getDevice(); java.lang.String type = deviceName.substring(0, deviceName.indexOf('_')); switch (type) { case "pci" : writePciHostDevice(device); break; } }	private void writeHostDevice(org.ovirt.engine.core.common.businessentities.VmHostDevice device, org.ovirt.engine.core.common.businessentities.HostDevice hostDevice) { switch (hostDevice.getCapability()) { case "pci" : writePciHostDevice(device, hostDevice); break; case "usb" : case "usb_device" : writeUsbHostDevice(device, hostDevice); break; case "scsi" : writeScsiHostDevice(device, hostDevice); break; default : org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.log.warn("Skipping host device: {}", device.getDevice()); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> prepareSnapshotConfigWithoutImage(org.ovirt.engine.core.compat.Guid imageGroupToRemove) { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> result = new java.util.LinkedList<org.ovirt.engine.core.common.businessentities.Snapshot>(); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> snapshotDisks = org.ovirt.engine.core.bll.RemoveImageCommand.getDiskImageDao().getAllSnapshotsForImageGroup(imageGroupToRemove); for (org.ovirt.engine.core.common.businessentities.DiskImage snapshotDisk : snapshotDisks) { org.ovirt.engine.core.compat.NGuid vmSnapshotId = snapshotDisk.getvm_snapshot_id(); if ((vmSnapshotId != null) && (!(Guid.Empty.equals(vmSnapshotId.getValue())))) { lockSnapshotWithWait(vmSnapshotId.getValue()); final org.ovirt.engine.core.common.businessentities.Snapshot updated = prepareSnapshotConfigWithoutImageSingleImage(vmSnapshotId.getValue(), snapshotDisk.getImageId()); if (updated != null) { result.add(updated); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Object>() { @java.lang.Override public java.lang.Object runInTransaction() { getSnapshotDao().update(updated); return null; } }); } freeSnapshotLock(); } } return result; }	private void lockVmSnapshotsWithWait(org.ovirt.engine.core.common.businessentities.VM vm) { snapshotsEngineLock = new org.ovirt.engine.core.utils.lock.EngineLock(); java.util.Map<java.lang.String, java.lang.String> snapshotsExlusiveLockMap = java.util.Collections.singletonMap(vm.getId().toString(), LockingGroup.VM_SNAPSHOTS.name()); snapshotsEngineLock.setExclusiveLocks(snapshotsExlusiveLockMap); org.ovirt.engine.core.bll.RemoveImageCommand.getLockManager().acquireLockWait(snapshotsEngineLock); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Host") java.lang.String numaHostLabel();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Fencing Policy") java.lang.String fencingPolicyTabLabel();
public org.ovirt.engine.ui.uicommonweb.models.EntityModel getPreventDeletion() { return privatePreventDeletion; }	public org.ovirt.engine.ui.uicommonweb.models.EntityModel getIsDeleteProtected() { return privateIsDeleteProtected; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus getBrickStatus() { return (getGlusterVolume().getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP) ? org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP : org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN; }	private org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus getBrickStatus() { return getGlusterVolume().getStatus(); }
@java.lang.Override public int compare(java.lang.Comparable a, java.lang.Comparable b) { if (a == null) { return b == null ? 0 : nullFirst ? -1 : 1; } else if (b == null) { return nullFirst ? 1 : -1; } else { return a.compareTo(b); } }	@java.lang.Override public int compare(java.lang.Comparable a, java.lang.Comparable b) { if (a == null) { return b == null ? 0 : 1; } else if (b == null) { return -1; } else { return a.compareTo(b); } }
private void calculateNetworkImplementationDetailsAndAssertSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, boolean expectSync, boolean vmNet, int mtu, int vlanId, org.ovirt.engine.core.common.businessentities.network.NetworkQoS qos) { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork(vmNet, mtu, vlanId); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails = org.ovirt.engine.core.utils.NetworkUtils.calculateNetworkImplementationDetails(network, qos, iface); assertNotNull("Network implementation details should be filled.", networkImplementationDetails); assertEquals((("Network implementation details should be " + (expectSync ? "in" : "out of")) + " sync."), expectSync, networkImplementationDetails.isInSync()); }	private void calculateNetworkImplementationDetailsAndAssertSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, boolean expectSync, boolean vmNet, int mtu, int vlanId, org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos) { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork(vmNet, mtu, vlanId); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails = org.ovirt.engine.core.utils.NetworkUtils.calculateNetworkImplementationDetails(network, qos, iface); assertNotNull("Network implementation details should be filled.", networkImplementationDetails); assertEquals((("Network implementation details should be " + (expectSync ? "in" : "out of")) + " sync."), expectSync, networkImplementationDetails.isInSync()); }
private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> createHosts() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = new java.util.LinkedList<>(); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(org.ovirt.engine.core.bll.FenceProxyLocatorTest.OTHER_HOST_ID_1); vds.setVdsGroupId(org.ovirt.engine.core.bll.FenceProxyLocatorTest.OTHER_CLUSTER_ID); vds.setStoragePoolId(org.ovirt.engine.core.bll.FenceProxyLocatorTest.OTHER_DATACENTER_ID); vds.setVdsGroupCompatibilityVersion(Version.v3_5); hosts.add(vds); vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(org.ovirt.engine.core.bll.FenceProxyLocatorTest.OTHER_HOST_ID_2); vds.setVdsGroupId(org.ovirt.engine.core.bll.FenceProxyLocatorTest.OTHER_CLUSTER_ID); vds.setStoragePoolId(org.ovirt.engine.core.bll.FenceProxyLocatorTest.FENCED_HOST_DATACENTER_ID); vds.setVdsGroupCompatibilityVersion(Version.v3_5); hosts.add(vds); return hosts; }	@org.junit.Test public void preferProxyHostFromSameDatacenter() { when(vdsDao.getAll()).thenReturn(createHosts()).thenReturn(createHosts()); org.ovirt.engine.core.common.businessentities.VDS proxyHost = fenceProxyLocator.findProxyHost(false); assertNotNull(proxyHost); assertEquals(proxyHost.getId(), org.ovirt.engine.core.bll.FenceProxyLocatorTest.OTHER_HOST_ID_2); }
@java.lang.Override protected boolean validate() { if (org.apache.commons.collections.CollectionUtils.isEmpty(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce())) { failValidation(EngineMessage.ACTION_TYPE_FAILED_PARAMETERS_INVALID); } if (!(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.checkStorageDomain())) { return false; } if (!(validateReduceDeviceSupported())) { return false; } if (!(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorageType().isBlockDomain())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); } if (!(validate(validateDevices()))) { return false; } if (!(checkStorageDomainStatus(StorageDomainStatus.Maintenance))) { return false; } if (!(initializeVds())) { return false; } return true; }	@java.lang.Override protected boolean validate() { if (org.apache.commons.collections.CollectionUtils.isEmpty(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_NO_DEVICES_PROVIDED); } if (!(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.checkStorageDomain())) { return false; } if (!(validateReduceDeviceSupported())) { return false; } if (!(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageType().isBlockDomain())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); } if (!(validateDevices())) { return false; } if (!(checkStorageDomainStatus(StorageDomainStatus.Maintenance))) { return false; } if (!(initializeVds())) { return false; } return true; }
public org.ovirt.engine.core.compat.Guid getStoragePoolId() { if ((storagePoolId) == null) { if ((_storagePool) != null) { storagePoolId = _storagePool.getId(); } else if ((getStorageDomain()) != null) { storagePoolId = getStorageDomain().getStoragePoolId(); } } return storagePoolId; }	public org.ovirt.engine.core.compat.Guid getStoragePoolId() { if ((storagePoolId) == null) { if ((storagePool) != null) { storagePoolId = storagePool.getId(); } else if ((getStorageDomain()) != null) { storagePoolId = getStorageDomain().getStoragePoolId(); } } return storagePoolId; }
public static boolean isPublicKeysValid(java.lang.String publicKeys) { for (java.lang.String publicKey : publicKeys.split("\n")) { if (!(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isPublicKeyValid(publicKey))) { return false; } } return true; }	public static boolean arePublicKeysValid(java.lang.String publicKeys) { for (java.lang.String publicKey : publicKeys.split("\n")) { if (!(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isPublicKeyValid(publicKey))) { return false; } } return true; }
public org.ovirt.engine.core.bll.ValidationResult ipConfiguredForStaticBootProtocol() { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration(); boolean failWhen = ((ipConfiguration != null) && ((ipConfiguration.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP))) && (unsetAddress(ipConfiguration)); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessages.NETWORK_ADDR_MANDATORY_IN_STATIC_IP).when(failWhen); }	public org.ovirt.engine.core.bll.ValidationResult ipConfiguredForStaticBootProtocol() { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration(); boolean failWhen = ((ipConfiguration != null) && ((ipConfiguration.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP))) && (unsetAddress(ipConfiguration)); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.NETWORK_ADDR_MANDATORY_IN_STATIC_IP).when(failWhen); }
@java.lang.Override public void onSuccess(final java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase>> operationList, final java.util.List<org.ovirt.engine.core.common.action.VdcReturnValueBase> resultObject) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Frontend: successfully executed runMultipleAction, determining result!"); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> failed = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.action.VdcReturnValueBase v : resultObject) { if (!(v.getValidate())) { failed.add(v); } } if (showErrorDialog && (!(failed.isEmpty()))) { translateErrors(failed); getEventsHandler().runMultipleActionFailed(actionType, failed); } if (callback != null) { callback.executed(new org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult(actionType, parameters, resultObject, state)); } fireAsyncActionSucceededEvent(state); }	@java.lang.Override public void onSuccess(final java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase>> operationList, final java.util.List<org.ovirt.engine.core.common.action.VdcReturnValueBase> resultObject) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Frontend: successfully executed runMultipleAction, determining result!"); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> failed = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.action.VdcReturnValueBase v : resultObject) { if (!(v.isValid())) { failed.add(v); } } if (showErrorDialog && (!(failed.isEmpty()))) { translateErrors(failed); getEventsHandler().runMultipleActionFailed(actionType, failed); } if (callback != null) { callback.executed(new org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult(actionType, parameters, resultObject, state)); } fireAsyncActionSucceededEvent(state); }
org.ovirt.engine.core.compat.Guid createAsyncTask(org.ovirt.engine.core.common.action.VdcActionType parentCommand, org.ovirt.engine.core.common.VdcObjectType entityType, org.ovirt.engine.core.compat.Guid... entityIds);	org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand);
@java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call() { setStorageDomain(null); setStoragePool(null); boolean succeded = false; if (canDoAction()) { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainPoolMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(getRecoveryStoragePoolParametersData().getNewMasterDomainId(), getRecoveryStoragePoolParametersData().getStoragePoolId(), org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().save(domainPoolMap); getRecoveryStoragePoolParametersData().setVdsId(getVds().getId()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.ReconstructMasterDomain, getParameters()); succeded = ((returnVal.getActionReturnValue()) != null) ? ((java.lang.Boolean) (returnVal.getActionReturnValue())) : false; getStoragePoolDAO().updateStatus(getStoragePool().getId(), StoragePoolStatus.Problematic); } return new org.ovirt.engine.core.common.eventqueue.EventResult(succeded, org.ovirt.engine.core.common.eventqueue.EventType.RECONSTRUCT); }	@java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call() { boolean succeeded = false; org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainPoolMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(getParameters().getNewMasterDomainId(), getParameters().getStoragePoolId(), org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().save(domainPoolMap); getParameters().setVdsId(getVds().getId()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = getBackend().runInternalAction(VdcActionType.ReconstructMasterDomain, getParameters()); succeeded = ((returnVal.getActionReturnValue()) != null) ? ((java.lang.Boolean) (returnVal.getActionReturnValue())) : false; getStoragePoolDAO().updateStatus(getStoragePool().getId(), StoragePoolStatus.Problematic); return new org.ovirt.engine.core.common.eventqueue.EventResult(succeeded, org.ovirt.engine.core.common.eventqueue.EventType.RECONSTRUCT); }
public void setiqn(java.lang.String value) { this.iqn = getStringValueToSet(value); }	public void setiqn(java.lang.String value) { this.iqn = org.ovirt.engine.core.common.businessentities.StorageServerConnections.getStringValueToSet(value); }
private java.util.List<org.ovirt.engine.core.common.businessentities.VM> getSelectedVms() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>(); if ((getSelectedItems()) == null) { return vms; } for (java.lang.Object selectedItem : getSelectedItems()) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel itemModel = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel) (selectedItem)); org.ovirt.engine.core.common.businessentities.VM vm = itemModel.getVM(); if (vm == null) { continue; } vms.add(vm); } return vms; }	private java.util.List<org.ovirt.engine.core.common.businessentities.VM> getSelectedVms() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>(); if ((getSelectedItems()) == null) { return vms; } for (java.lang.Object selectedItem : getSelectedItems()) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel itemModel = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel) (selectedItem)); org.ovirt.engine.core.common.businessentities.VM vm = itemModel.getVM(); if (vm != null) { vms.add(vm); } } return vms; }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Bond (id=${id}}) does not reference nic coherently. Nic name and id references different nic: nicId=${referringId} nicName=${referringName}}.") java.lang.String BOND_REFERENCES_NICS_INCOHERENTLY();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Bond (id ${ENTITY_ID}) does not reference nic coherently. Nic name and id references different nic: nicId ${referringId} nicName ${referringName}.") java.lang.String BOND_REFERENCES_NICS_INCOHERENTLY();
public void newEntity() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel model = new org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newDataCenterTitle()); model.setHashName("new_data_center"); model.setHelpTag(model.getHashName(), "Data Center > New Data Center"); model.setIsNew(true); model.getStorageTypeList().setSelectedItem(StorageType.NFS); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSave", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }	public void newEntity() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel model = new org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newDataCenterTitle()); model.setHelpTag(HelpTag.new_data_center); model.setHashName("new_data_center"); model.setIsNew(true); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSave", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.AdGroups> setUpGroups() { java.util.List<org.ovirt.engine.core.common.businessentities.AdGroups> groups = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.AdGroups>(); for (int i = 0; i < (NAMES.length); i++) { groups.add(getEntity(i)); } return groups; }	protected java.util.List<org.ovirt.engine.core.common.businessentities.LdapGroup> setUpGroups() { java.util.List<org.ovirt.engine.core.common.businessentities.LdapGroup> groups = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.LdapGroup>(); for (int i = 0; i < (NAMES.length); i++) { groups.add(getEntity(i)); } return groups; }
public void logServerMessage(final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType) { logAuditMessage(null, null, server, logType, new java.util.HashMap<java.lang.String, java.lang.String>()); }	public void logServerMessage(final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType) { logAuditMessage(null, null, server, logType, java.util.Collections.<java.lang.String, java.lang.String>emptyMap()); }
protected void releaseLock() { org.ovirt.engine.core.bll.gluster.GlusterManager.lock.unlock(); }	protected void releaseLock(org.ovirt.engine.core.compat.Guid clusterId) { lockManager.releaseLock(getEngineLock(clusterId)); }
@org.junit.After public void tearDown() { java.util.Locale.setDefault(locale); org.ovirt.engine.api.restapi.invocation.CurrentManager.remove(); }	@org.junit.After public void tearDown() { java.util.Locale.setDefault(locale); interactions.forEach(java.lang.Runnable::run); org.ovirt.engine.api.restapi.invocation.CurrentManager.remove(); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Network ovirtmgmt is mandatory, it cannot be modified.") java.lang.String NETWORK_DEFAULT_UPDATE_NAME_INVALID();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Network '${NetworkName}' is mandatory, it cannot be modified.") java.lang.String NETWORK_DEFAULT_UPDATE_NAME_INVALID();
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { this.setWindow(null); }	@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { setWindow(null); }
private void glusterHostRemove(org.ovirt.engine.core.compat.Guid sourceClusterId) { boolean forceAction = false; if ((getClusterUtils().hasServers(sourceClusterId)) && (!(getClusterUtils().hasVolumeOnServer(org.ovirt.engine.core.bll.ChangeVDSClusterCommand.getVdsId())))) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostRemove, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterHostRemoveVDSParameters(getClusterUtils().getUpServer(sourceClusterId).getId(), org.ovirt.engine.core.bll.ChangeVDSClusterCommand.getVds().gethost_name(), forceAction)); setSucceeded(returnValue.getSucceeded()); if (!(org.ovirt.engine.core.bll.ChangeVDSClusterCommand.getSucceeded())) { org.ovirt.engine.core.bll.ChangeVDSClusterCommand.getReturnValue().getFault().setError(returnValue.getVdsError().getCode()); org.ovirt.engine.core.bll.ChangeVDSClusterCommand.getReturnValue().getFault().setMessage(returnValue.getVdsError().getMessage()); errorType = org.ovirt.engine.core.common.AuditLogType.GLUSTER_HOST_REMOVE_FAILED; return; } } else { org.ovirt.engine.core.bll.ChangeVDSClusterCommand.setSucceeded(true); } }	private boolean glusterHostRemove(org.ovirt.engine.core.compat.Guid sourceClusterId) { java.lang.String hostName = (org.ovirt.engine.core.bll.ChangeVDSClusterCommand.getVds().gethost_name().isEmpty()) ? org.ovirt.engine.core.bll.ChangeVDSClusterCommand.getVds().getManagmentIp() : org.ovirt.engine.core.bll.ChangeVDSClusterCommand.getVds().gethost_name(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostRemove, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterHostRemoveVDSParameters(getClusterUtils().getUpServer(sourceClusterId).getId(), hostName, false)); if (!(returnValue.getSucceeded())) { handleVdsError(returnValue); errorType = org.ovirt.engine.core.common.AuditLogType.GLUSTER_HOST_REMOVE_FAILED; return false; } return true; }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__HOT_SET_CPUS); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM); addCanDoActionMessage(java.lang.String.format("clusterVersion %1$s", org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getVdsGroupCompatibilityVersion())); addCanDoActionMessage(java.lang.String.format("$architecture %1$s", org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getClusterArch())); }	@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__HOT_SET_CPUS); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM); addCanDoActionMessage(java.lang.String.format("$clusterVersion %1$s", org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getVdsGroupCompatibilityVersion())); addCanDoActionMessage(java.lang.String.format("$architecture %1$s", org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getClusterArch())); }
@org.junit.Before public void setUp() { setXmlResponse("storagedomains", 200, "<storage_domains/>"); startServer(); connection = testConnection(); storageDomainsService = connection.systemService().storageDomainsService(); }	@org.junit.Before public void setUp() { setXmlResponse("storagedomains", 200, "<storage_domains/>"); setXmlResponse("storagedomains/123", 200, "<storage_domain id=\"123\"><name>testsd</name></storage_domain>"); startServer(); connection = testConnection(); storageDomainsService = connection.systemService().storageDomainsService(); }
private void addVmsStatus(java.util.List<org.ovirt.engine.core.compat.Guid> vmAndTemplatesIds, java.util.Map<java.lang.String, java.lang.Object> data) { java.util.Map<java.lang.String, java.lang.Object> vmsStatus = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid vmId : vmAndTemplatesIds) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vmDynamicDao.get(vmId); if ((vmDynamic != null) && ((vmDynamic.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { vmsStatus.put(vmId.toString(), vmDynamic.getStatus().getValue()); log.debug("OVF_STORE - Add vm id '{}' with status: '{}'", vmId, vmDynamic.getStatus()); } else { log.debug("OVF_STORE - Skip entity id '{}' with status: '{}'", vmId, vmDynamic.getStatus()); } } data.put(OvfInfoFileConstants.VmStatus, vmsStatus); }	private void addVmsStatus(java.util.List<org.ovirt.engine.core.compat.Guid> vmAndTemplatesIds, java.util.Map<java.lang.String, java.lang.Object> data) { java.util.Map<java.lang.String, java.lang.Object> vmsStatus = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid vmId : vmAndTemplatesIds) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vmDynamicDao.get(vmId); if ((vmDynamic != null) && ((vmDynamic.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { vmsStatus.put(vmId.toString(), vmDynamic.getStatus().getValue()); log.debug("OVF_STORE - Add vm id '{}' with status: '{}'", vmId, vmDynamic.getStatus()); } else { log.debug("OVF_STORE - Skip entity id '{}' with status: '{}'", vmId, (vmDynamic != null ? vmDynamic.getStatus() : "N/A")); } } data.put(OvfInfoFileConstants.VmStatus, vmsStatus); }
public boolean equals(java.lang.Object other, boolean deepCompare) { if (other == (this)) { return true; } if ((other == null) || ((other.getClass()) != (getClass()))) { return false; } org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel otherModel = ((org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel) (other)); boolean result = true; if ((!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getType(), otherModel.getType()))) || (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel.getEntity(), otherModel.getEntity())))) { result = false; } if ((result && ((!(getChildren().isEmpty())) || (!(otherModel.getChildren().isEmpty())))) && deepCompare) { if ((getChildren().size()) != (otherModel.getChildren().size())) { result = false; } else { for (int i = 0; i < (getChildren().size()); i++) { if (!(getChildren().get(i).equals(otherModel.getChildren().get(i), deepCompare))) { result = false; break; } } } } return result; }	public boolean equals(java.lang.Object other, boolean deepCompare) { if (other == (this)) { return true; } if ((other == null) || ((other.getClass()) != (getClass()))) { return false; } org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel otherModel = ((org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel) (other)); boolean result = true; if ((!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getType(), otherModel.getType()))) || (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getEntity(), otherModel.getEntity())))) { result = false; } if ((result && ((!(getChildren().isEmpty())) || (!(otherModel.getChildren().isEmpty())))) && deepCompare) { if ((getChildren().size()) != (otherModel.getChildren().size())) { result = false; } else { for (int i = 0; i < (getChildren().size()); i++) { if (!(getChildren().get(i).equals(otherModel.getChildren().get(i), deepCompare))) { result = false; break; } } } } return result; }
@java.lang.Override protected boolean validate() { if ((org.ovirt.engine.core.bll.RemoveVmPoolCommand.getVmPool()) == null) { return failValidate(EngineMessage.VM_POOL_NOT_FOUND); } return true; }	@java.lang.Override protected boolean validate() { if ((org.ovirt.engine.core.bll.RemoveVmPoolCommand.getVmPool()) == null) { return failValidation(EngineMessage.VM_POOL_NOT_FOUND); } return true; }
public void setKvmVersion(java.lang.String value) { mVdsDynamic.setKvmVersion(value); }	public void setKvmVersion(java.lang.String value) { vdsDynamic.setKvmVersion(value); }
private boolean validateManagementNetworkAttachment() { final org.ovirt.engine.core.common.businessentities.network.Network managementNetwork; final org.ovirt.engine.core.compat.Guid managementNetworkId = org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getManagementNetworkId(); if (managementNetworkId == null) { managementNetwork = getDefaultManagementNetworkFinder().findDefaultManagementNetwork(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getStoragePoolId()); if (managementNetwork == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } } else { managementNetwork = networkDao.get(managementNetworkId); if (managementNetwork == null) { addValidationMessage(EngineMessage.NETWORK_NOT_EXISTS); return false; } } managementNetworkCluster = createManagementNetworkCluster(managementNetwork); final org.ovirt.engine.core.bll.network.cluster.UpdateClusterNetworkClusterValidator networkClusterValidator = createManagementNetworkClusterValidator(); return validate(networkClusterValidator.managementNetworkChange()); }	private boolean validateManagementNetwork() { final org.ovirt.engine.core.compat.Guid managementNetworkId = org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getManagementNetworkId(); if (managementNetworkId == null) { managementNetwork = getDefaultManagementNetworkFinder().findDefaultManagementNetwork(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getStoragePoolId()); if ((managementNetwork) == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } } else { managementNetwork = networkDao.get(managementNetworkId); if ((managementNetwork) == null) { addValidationMessage(EngineMessage.NETWORK_NOT_EXISTS); return false; } } return true; }
public static org.ovirt.engine.core.common.businessentities.NetworkEntity FindNetworkByName(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.NetworkEntity> items, java.lang.String name) { for (org.ovirt.engine.core.common.businessentities.NetworkEntity n : items) { if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(n.getname(), name)) { return n; } } return null; }	public static org.ovirt.engine.core.common.businessentities.Network FindNetworkByName(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Network> items, java.lang.String name) { for (org.ovirt.engine.core.common.businessentities.Network n : items) { if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(n.getname(), name)) { return n; } } return null; }
private void addGlusterWebhook(org.ovirt.engine.core.common.businessentities.VDS vds) { try { backend.runInternalAction(VdcActionType.AddGlusterWebhookInternal, new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters(vds.getClusterId())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Could not refresh storage devices from gluster host '{}'", vds.getName()); } }	private void addGlusterWebhook(org.ovirt.engine.core.common.businessentities.VDS vds) { try { backend.runInternalAction(ActionType.AddGlusterWebhookInternal, new org.ovirt.engine.core.common.action.VdsActionParameters(vds.getId())); } catch (java.lang.RuntimeException e) { log.error("Could not add gluster webhook for gluster host '{}'", vds.getName()); log.debug("Exception", e); } }
private void addBondToSlavesMappingForNewlyCreatedBonds(java.util.Map<java.lang.String, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>> result) { for (org.ovirt.engine.core.common.businessentities.network.Bond bond : params.getBonds()) { boolean isNewBond = (bond.getId()) == null; if (isNewBond) { java.lang.String bondName = bond.getName(); for (java.lang.String slaveName : bond.getSlaves()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slave = this.existingInterfacesMap.get(slaveName); org.ovirt.engine.core.utils.collections.MultiValueMapUtils.addToMap(bondName, slave, result, new org.ovirt.engine.core.utils.collections.MultiValueMapUtils.ListCreator<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>()); } } } }	org.ovirt.engine.core.bll.ValidationResult validateQosNotPartiallyConfigured(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure) { java.util.Set<java.lang.String> someSubInterfacesHaveQos = new java.util.HashSet<>(); java.util.Set<java.lang.String> notAllSubInterfacesHaveQos = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment : attachmentsToConfigure) { org.ovirt.engine.core.common.businessentities.network.Network network = getNetworkRelatedToAttachment(networkAttachment); if (org.ovirt.engine.core.utils.NetworkUtils.qosConfiguredOnInterface(networkAttachment, network)) { someSubInterfacesHaveQos.add(networkAttachment.getNicName()); } else { notAllSubInterfacesHaveQos.add(networkAttachment.getNicName()); } } for (java.lang.String ifaceName : someSubInterfacesHaveQos) { if (notAllSubInterfacesHaveQos.contains(ifaceName)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_INTERFACES_WITHOUT_QOS, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("ACTION_TYPE_FAILED_HOST_NETWORK_QOS_INTERFACES_WITHOUT_QOS_LIST", ifaceName)); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public org.ovirt.engine.core.common.businessentities.VdsSelectionAlgorithm getClusterPolicy() { return clusterPolicy; }	public boolean getCpuThreads() { return cpuThreads; }
@java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase) (target)); java.util.HashMap<java.lang.String, java.lang.String> timeZones = behavior.getTimezones(selectedTimeZone, ((java.util.HashMap<java.lang.String, java.lang.String>) (returnValue))); cachedTimeZones.put(timezoneType, timeZones.entrySet()); behavior.PostUpdateTimeZone(selectedTimeZone); }	@java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase) (target)); java.util.Map<java.lang.String, java.lang.String> timezones = ((java.util.Map<java.lang.String, java.lang.String>) (returnValue)); timezones.put(null, ""); cachedTimeZones.put(timezoneType, timezones.entrySet()); behavior.PostUpdateTimeZone(selectedTimeZone); }
@java.lang.Override protected void postSaveAction(org.ovirt.engine.core.compat.Guid networkGuid, boolean succeeded) { super.postSaveAction(networkGuid, succeeded); if (!succeeded) { return; } org.ovirt.engine.core.compat.Guid networkId = ((getNetwork().getId()) == null) ? networkGuid : getNetwork().getId(); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> actionParameters1 = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.core.common.businessentities.VDSGroup attachNetworkToCluster : getClustersToAttach()) { org.ovirt.engine.core.common.businessentities.network.Network tempVar = new org.ovirt.engine.core.common.businessentities.network.Network(); tempVar.setId(networkId); tempVar.setName(getNetwork().getName()); org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = new org.ovirt.engine.core.common.businessentities.network.NetworkCluster(); networkCluster.setRequired(((java.lang.Boolean) (getExport().getEntity()))); tempVar.setCluster(networkCluster); actionParameters1.add(new org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter(attachNetworkToCluster, tempVar)); } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.AttachNetworkToVdsGroup, actionParameters1); }	@java.lang.Override protected void postSaveAction(org.ovirt.engine.core.compat.Guid networkGuid, boolean succeeded) { super.postSaveAction(networkGuid, succeeded); if (!succeeded) { return; } org.ovirt.engine.core.compat.Guid networkId = ((getNetwork().getId()) == null) ? networkGuid : getNetwork().getId(); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> actionParameters1 = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.core.common.businessentities.VDSGroup attachNetworkToCluster : getClustersToAttach()) { org.ovirt.engine.core.common.businessentities.network.Network tempVar = new org.ovirt.engine.core.common.businessentities.network.Network(); tempVar.setId(networkId); tempVar.setName(getNetwork().getName()); org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = new org.ovirt.engine.core.common.businessentities.network.NetworkCluster(); networkCluster.setRequired((!((java.lang.Boolean) (getExport().getEntity())))); tempVar.setCluster(networkCluster); actionParameters1.add(new org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter(attachNetworkToCluster, tempVar)); } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.AttachNetworkToVdsGroup, actionParameters1); }
private void setOvfVolumeDescription(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid volumeId, java.lang.String description) { org.ovirt.engine.core.common.vdscommands.SetVolumeDescriptionVDSCommandParameters vdsCommandParameters = new org.ovirt.engine.core.common.vdscommands.SetVolumeDescriptionVDSCommandParameters(storagePoolId, storageDomainId, diskId, volumeId, description); try { runVdsCommand(VDSCommandType.SetVolumeDescription, vdsCommandParameters); } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLogableBase.addCustomValue("DataCenterName", org.ovirt.engine.core.bll.ProcessOvfUpdateForStorageDomainCommand.getStoragePool().getName()); auditLogableBase.addCustomValue("StorageDomainName", storageDomain.getName()); auditLogableBase.addCustomValue("DiskId", diskId.toString()); auditLogDirector.log(auditLogableBase, AuditLogType.UPDATE_DESCRIPTION_FOR_OVF_STORE_FAILED); throw e; } }	private void setOvfVolumeDescription(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid volumeId, java.lang.String description) { org.ovirt.engine.core.common.vdscommands.SetVolumeDescriptionVDSCommandParameters vdsCommandParameters = new org.ovirt.engine.core.common.vdscommands.SetVolumeDescriptionVDSCommandParameters(storagePoolId, storageDomainId, diskId, volumeId, description); runVdsCommand(VDSCommandType.SetVolumeDescription, vdsCommandParameters); }
public void setIScsiInitiatorName(java.lang.String value) { mVdsDynamic.setIScsiInitiatorName(value); }	public void setIScsiInitiatorName(java.lang.String value) { vdsDynamic.setIScsiInitiatorName(value); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Target details are empty.") java.lang.String VALIDATION_STORAGE_CONNECTION_EMPTY_IQN_OR_CONN();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Target details cannot be empty.") java.lang.String VALIDATION_STORAGE_CONNECTION_EMPTY_IQN();
private void restoreConfiguration(org.ovirt.engine.core.common.businessentities.Snapshot targetSnapshot) { org.ovirt.engine.core.bll.snapshots.SnapshotsManager snapshotsManager = new org.ovirt.engine.core.bll.snapshots.SnapshotsManager(); removedSnapshotId = getSnapshotDao().getId(org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVmId(), SnapshotType.ACTIVE); snapshotsToRemove.add(removedSnapshotId); snapshotsManager.removeAllIllegalDisks(removedSnapshotId, org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVmId()); snapshotsManager.attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVm(), targetSnapshot, targetSnapshot.getId(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getParameters().getImages(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getCompensationContext(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVm().getVdsGroupCompatibilityVersion(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getCurrentUser()); getSnapshotDao().remove(targetSnapshot.getId()); snapshotsManager.addActiveSnapshot(targetSnapshot.getId(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVm(), SnapshotStatus.LOCKED, targetSnapshot.getMemoryVolume(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getParameters().getImages(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getCompensationContext()); }	private void restoreConfiguration(org.ovirt.engine.core.common.businessentities.Snapshot targetSnapshot) { org.ovirt.engine.core.bll.snapshots.SnapshotsManager snapshotsManager = new org.ovirt.engine.core.bll.snapshots.SnapshotsManager(); removedSnapshotId = getSnapshotDao().getId(org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVmId(), SnapshotType.ACTIVE); snapshotsToRemove.add(removedSnapshotId); snapshotsManager.removeAllIllegalDisks(removedSnapshotId, org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVmId()); snapshotsManager.attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVm(), targetSnapshot, targetSnapshot.getId(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getParameters().getDisks(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getCompensationContext(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVm().getVdsGroupCompatibilityVersion(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getCurrentUser()); getSnapshotDao().remove(targetSnapshot.getId()); snapshotsManager.addActiveSnapshot(targetSnapshot.getId(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVm(), SnapshotStatus.LOCKED, targetSnapshot.getMemoryVolume(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getParameters().getDisks(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getCompensationContext()); }
public java.lang.String getFingerprint(java.lang.String hostName) { org.ovirt.engine.core.utils.ssh.SSHClient client = null; try { client = connect(hostName); return client.getHostFingerprint(); } catch (java.io.IOException e) { log.error("Could not get server key"); return null; } finally { if (client != null) { client.disconnect(); } } }	public java.lang.String getFingerprint(java.lang.String hostName) { org.ovirt.engine.core.bll.utils.EngineSSHClient client = null; try { client = connect(hostName); return client.getHostFingerprint(); } catch (java.io.IOException e) { log.error("Could not get server key"); return null; } finally { if (client != null) { client.disconnect(); } } }
@org.junit.Test public void nonZeroMtuWhenNotSupported() throws java.lang.Exception { mtuValidTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessages.NETWORK_MTU_OVERRIDE_NOT_SUPPORTED), 1, false); }	@org.junit.Test public void nonZeroMtuWhenNotSupported() throws java.lang.Exception { mtuValidTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.NETWORK_MTU_OVERRIDE_NOT_SUPPORTED), 1, false); }
protected boolean checkIfDisksExist(java.lang.Iterable<org.ovirt.engine.core.common.businessentities.DiskImage> disksList) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.compat.Guid>> imagesPerStorageDomain = new java.util.HashMap<>(); java.util.List<org.ovirt.engine.core.compat.Guid> images = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.DiskImage disk : disksList) { org.ovirt.engine.core.compat.Guid targetStorageDomainId = imageToDestinationDomainMap.get(disk.getId()); if (imagesPerStorageDomain.containsKey(targetStorageDomainId)) { images = imagesPerStorageDomain.get(targetStorageDomainId); } else { org.ovirt.engine.core.common.vdscommands.VDSReturnValue runVdsCommand = org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getBackend().getResourceManager().RunVdsCommand(VDSCommandType.GetImagesList, new org.ovirt.engine.core.common.vdscommands.GetImagesListVDSCommandParameters(targetStorageDomainId)); if (runVdsCommand.getSucceeded()) { images = ((java.util.List<org.ovirt.engine.core.compat.Guid>) (runVdsCommand.getReturnValue())); imagesPerStorageDomain.put(disk.getId(), images); } else if ((runVdsCommand.getVdsError().getCode()) == (org.ovirt.engine.core.common.errors.VdcBllErrors.GetStorageDomainListError)) { addCanDoActionMessage(VdcBllMessages.ERROR_GET_STORAGE_DOMAIN_LIST); return false; } } if (images.contains(disk.getId())) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_CONTAINS_DISK); return false; } } return true; }	protected boolean checkIfDisksExist(java.lang.Iterable<org.ovirt.engine.core.common.businessentities.DiskImage> disksList) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.compat.Guid>> alreadyRetrieved = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.DiskImage disk : disksList) { org.ovirt.engine.core.compat.Guid targetStorageDomainId = imageToDestinationDomainMap.get(disk.getId()); java.util.List<org.ovirt.engine.core.compat.Guid> imagesOnStorageDomain = alreadyRetrieved.get(targetStorageDomainId); if (imagesOnStorageDomain == null) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetImagesList, new org.ovirt.engine.core.common.vdscommands.GetImagesListVDSCommandParameters(targetStorageDomainId, org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getStoragePoolId())); if (returnValue.getSucceeded()) { imagesOnStorageDomain = ((java.util.List<org.ovirt.engine.core.compat.Guid>) (returnValue.getReturnValue())); alreadyRetrieved.put(targetStorageDomainId, imagesOnStorageDomain); } else { addCanDoActionMessage(java.lang.String.format("$sdName %1$s", getStorageDomain(targetStorageDomainId).getName())); addCanDoActionMessage(VdcBllMessages.ERROR_GET_IMAGE_LIST); return false; } } if (imagesOnStorageDomain.contains(disk.getId())) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_CONTAINS_DISK); return false; } } return true; }
private void setDefaultSelectedProtocol() { for (org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol protocol : new org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol[]{ ConsoleProtocol.SPICE, ConsoleProtocol.VNC, ConsoleProtocol.RDP }) { if (canSelectProtocol(protocol)) { selectProtocol(protocol); } } }	private void setDefaultSelectedProtocol() { java.util.List<org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol> allProtocols = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol>(java.util.Arrays.asList(org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.values())); if ((selectedProtocol) != null) { allProtocols.remove(selectedProtocol); allProtocols.add(0, selectedProtocol); } for (org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol protocol : allProtocols) { if (canSelectProtocol(protocol)) { selectProtocol(protocol); break; } } }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Allow to get or set System Configuration") java.lang.String allowToGetOrSetSystemConfigurationRoleTreeTooltip();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to get or set System Configuration") java.lang.String allowToGetOrSetSystemConfigurationRoleTreeTooltip();
protected boolean isUserAuthorizedToRunAction() { if (org.ovirt.engine.core.bll.CommandBase.isInternalExecution()) { if (log.isDebugEnabled()) { log.debug("Permission check skipped for internal action {}.", getActionType()); } return true; } if (!(org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isMultilevelAdministrationOn())) { if (log.isDebugEnabled()) { log.debug("Permission check for action '{}' skipped because multilevel administration is disabled.", getActionType()); } return true; } if ((org.ovirt.engine.core.bll.CommandBase.getCurrentUser()) == null) { addValidateMessage(EngineMessage.USER_IS_NOT_LOGGED_IN); return false; } final java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permSubjects = getPermissionCheckSubjects(); if ((permSubjects == null) || (permSubjects.isEmpty())) { if (log.isDebugEnabled()) { log.debug("The set of objects to check is null or empty for action '{}'.", getActionType()); } addValidateMessage(EngineMessage.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION); return false; } if (isQuotaDependant()) { addQuotaPermissionSubject(permSubjects); } if (log.isDebugEnabled()) { java.lang.StringBuilder builder = getPermissionSubjectsAsStringBuilder(permSubjects); log.debug("Checking whether user '{}' or one of the groups he is member of, have the following permissions: {}", org.ovirt.engine.core.bll.CommandBase.getCurrentUser().getId(), builder.toString()); } return checkPermissions(permSubjects); }	protected boolean isUserAuthorizedToRunAction() { if (org.ovirt.engine.core.bll.CommandBase.isInternalExecution()) { if (log.isDebugEnabled()) { log.debug("Permission check skipped for internal action {}.", getActionType()); } return true; } if (!(org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isMultilevelAdministrationOn())) { if (log.isDebugEnabled()) { log.debug("Permission check for action '{}' skipped because multilevel administration is disabled.", getActionType()); } return true; } if ((org.ovirt.engine.core.bll.CommandBase.getCurrentUser()) == null) { addValidationMessage(EngineMessage.USER_IS_NOT_LOGGED_IN); return false; } final java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permSubjects = getPermissionCheckSubjects(); if ((permSubjects == null) || (permSubjects.isEmpty())) { if (log.isDebugEnabled()) { log.debug("The set of objects to check is null or empty for action '{}'.", getActionType()); } addValidationMessage(EngineMessage.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION); return false; } if (isQuotaDependant()) { addQuotaPermissionSubject(permSubjects); } if (log.isDebugEnabled()) { java.lang.StringBuilder builder = getPermissionSubjectsAsStringBuilder(permSubjects); log.debug("Checking whether user '{}' or one of the groups he is member of, have the following permissions: {}", org.ovirt.engine.core.bll.CommandBase.getCurrentUser().getId(), builder.toString()); } return checkPermissions(permSubjects); }
private void initAppsTable() { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel>(false, true); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String> appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String>() { @java.lang.Override public java.lang.String getValue(java.lang.String appName) { return appName; } @java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(java.lang.String object) { return null; } }; appsTable.addColumn(appNameColumn, constants.nameSnapshot()); appsTable.setRowData(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); appsTable.setWidth("100%", true); appsTable.setSelectionModel(new com.google.gwt.view.client.NoSelectionModel()); }	private void initAppsTable() { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel>(false, true); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String> appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String>() { @java.lang.Override public java.lang.String getValue(java.lang.String appName) { return appName; } }; appsTable.addColumn(appNameColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotInfoPanel.constants.nameSnapshot()); appsTable.setRowData(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); appsTable.setWidth("100%", true); appsTable.setSelectionModel(new com.google.gwt.view.client.NoSelectionModel()); }
public static void GetVmsRunningOnOrMigratingToVds(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid id) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.dataprovider.VM>(); } return source; } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVmsRunningOnOrMigratingToVds, new org.ovirt.engine.ui.uicommonweb.dataprovider.GetVmsRunningOnOrMigratingToVdsParameters(id), aQuery); }	public static void getVmsRunningOnOrMigratingToVds(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid id) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>(); } return source; } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVmsRunningOnOrMigratingToVds, new org.ovirt.engine.core.common.queries.IdQueryParameters(id), aQuery); }
public boolean discover() { boolean dbUpdated = false; java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("PolicyUnits updated for external broker."); dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Discovery returned empty result when talking to broker. Disabling external units"); java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit> failingPolicyUnits = policyUnitDao.getAll().stream().collect(java.util.stream.Collectors.toList()); markExternalPoliciesAsDisabled(failingPolicyUnits); dbUpdated = true; } return dbUpdated; }	public boolean discover() { boolean dbUpdated; java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("PolicyUnits updated for external broker."); dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Discovery returned empty result when talking to broker. Disabling external units"); java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit> failingPolicyUnits = policyUnitDao.getAll().stream().collect(java.util.stream.Collectors.toList()); markExternalPoliciesAsDisabled(failingPolicyUnits); dbUpdated = true; } return dbUpdated; }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> filterVmsInClusterNeedUpdate() { final boolean rngUpdateRequired = VmRngDevice.Source.urandomRandomUpdateRequired(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()); return vmStaticDao.getAllByCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()).stream().filter(( vm) -> ((vm.getOrigin()) != OriginType.EXTERNAL) && (!(vm.isHostedEngine()))).filter(( vm) -> ((vm.getCustomCompatibilityVersion()) == null) || rngUpdateRequired).sorted().collect(java.util.stream.Collectors.toList()); }	protected java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> filterVmsInClusterNeedUpdate() { return vmStaticDao.getAllByCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()).stream().filter(( vm) -> ((vm.getOrigin()) != OriginType.EXTERNAL) && (!(vm.isHostedEngine()))).filter(( vm) -> (vm.getCustomCompatibilityVersion()) == null).sorted().collect(java.util.stream.Collectors.toList()); }
public static org.ovirt.engine.core.bll.ValidationResult checkNumaPreferredTuneMode(org.ovirt.engine.core.common.businessentities.NumaTuneMode numaTuneMode, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes, org.ovirt.engine.core.compat.Guid vmId) { if (numaTuneMode != (org.ovirt.engine.core.common.businessentities.NumaTuneMode.PREFERRED)) { return ValidationResult.VALID; } if ((vmNumaNodes == null) && (vmId != null)) { vmNumaNodes = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNumaNodeDao().getAllVmNumaNodeByVmId(vmId); } if ((vmNumaNodes != null) && ((vmNumaNodes.size()) == 1)) { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>>> vdsNumaNodeList = vmNumaNodes.get(0).getVdsNumaNodeList(); boolean pinnedToSingleNode = (((vdsNumaNodeList != null) && ((vdsNumaNodeList.size()) == 1)) && ((vdsNumaNodeList.get(0).getSecond()) != null)) && (vdsNumaNodeList.get(0).getSecond().getFirst()); if (pinnedToSingleNode) { return ValidationResult.VALID; } } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.VM_NUMA_NODE_PREFERRED_NOT_PINNED_TO_SINGLE_NODE); }	public static org.ovirt.engine.core.bll.ValidationResult checkNumaPreferredTuneMode(org.ovirt.engine.core.common.businessentities.NumaTuneMode numaTuneMode, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes, org.ovirt.engine.core.compat.Guid vmId) { if (numaTuneMode != (org.ovirt.engine.core.common.businessentities.NumaTuneMode.PREFERRED)) { return ValidationResult.VALID; } if ((vmNumaNodes == null) && (vmId != null)) { vmNumaNodes = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNumaNodeDao().getAllVmNumaNodeByVmId(vmId); } if ((vmNumaNodes != null) && ((vmNumaNodes.size()) == 1)) { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>>> vdsNumaNodeList = vmNumaNodes.get(0).getVdsNumaNodeList(); boolean pinnedToSingleNode = (((vdsNumaNodeList != null) && ((vdsNumaNodeList.size()) == 1)) && ((vdsNumaNodeList.get(0).getSecond()) != null)) && (vdsNumaNodeList.get(0).getSecond().getFirst()); if (pinnedToSingleNode) { return ValidationResult.VALID; } } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_PREFERRED_NOT_PINNED_TO_SINGLE_NODE); }
private boolean checkQuotaStorageLimits(org.ovirt.engine.core.bll.quota.QuotaEnforcementTypeEnum quotaEnforcementTypeEnum, org.ovirt.engine.core.bll.quota.Quota quota, double limit, double storageUsagePercentage, double storageRequestPercentage, java.util.ArrayList<java.lang.String> canDoActionMessages, org.ovirt.engine.core.utils.Pair<org.ovirt.engine.core.common.AuditLogType, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase> log) { double storageTotalPercentage = storageUsagePercentage + storageRequestPercentage; if ((limit == (org.ovirt.engine.core.bll.quota.QuotaManager.UNLIMITED)) || (storageTotalPercentage <= (quota.getThresholdStoragePercentage()))) { return true; } else if (storageTotalPercentage <= 100) { log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_THRESHOLD); log.setSecond(getLoggableQuotaStorageParams(quota.getQuotaName(), (storageUsagePercentage + storageRequestPercentage), storageRequestPercentage)); } else if (storageTotalPercentage <= ((quota.getGraceStoragePercentage()) + 100)) { log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_LIMIT); log.setSecond(getLoggableQuotaStorageParams(quota.getQuotaName(), (storageUsagePercentage + storageRequestPercentage), storageRequestPercentage)); } else { log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_GRACE_LIMIT); log.setSecond(getLoggableQuotaStorageParams(quota.getQuotaName(), storageUsagePercentage, storageRequestPercentage)); if (QuotaEnforcementTypeEnum.HARD_ENFORCEMENT.equals(quotaEnforcementTypeEnum)) { canDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_STORAGE_LIMIT_EXCEEDED.toString()); return false; } } return true; }	private boolean checkQuotaStorageLimits(org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum quotaEnforcementTypeEnum, org.ovirt.engine.core.common.businessentities.Quota quota, double limit, double storageUsagePercentage, double storageRequestPercentage, java.util.ArrayList<java.lang.String> canDoActionMessages, org.ovirt.engine.core.utils.Pair<org.ovirt.engine.core.common.AuditLogType, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase> log) { double storageTotalPercentage = storageUsagePercentage + storageRequestPercentage; if ((limit == (org.ovirt.engine.core.bll.quota.QuotaManager.UNLIMITED)) || (storageTotalPercentage <= (quota.getThresholdStoragePercentage()))) { return true; } else if (storageTotalPercentage <= 100) { log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_THRESHOLD); log.setSecond(getLoggableQuotaStorageParams(quota.getQuotaName(), (storageUsagePercentage + storageRequestPercentage), storageRequestPercentage)); } else if (storageTotalPercentage <= ((quota.getGraceStoragePercentage()) + 100)) { log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_LIMIT); log.setSecond(getLoggableQuotaStorageParams(quota.getQuotaName(), (storageUsagePercentage + storageRequestPercentage), storageRequestPercentage)); } else { log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_GRACE_LIMIT); log.setSecond(getLoggableQuotaStorageParams(quota.getQuotaName(), storageUsagePercentage, storageRequestPercentage)); if (QuotaEnforcementTypeEnum.HARD_ENFORCEMENT.equals(quotaEnforcementTypeEnum)) { canDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_STORAGE_LIMIT_EXCEEDED.toString()); return false; } } return true; }
private boolean registerLibvirtSecrets(org.ovirt.engine.core.bll.context.CommandContext cmdContext, org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.compat.Guid poolId) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LibvirtSecret> libvirtSecrets = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getLibvirtSecretDao().getAllByStoragePoolIdFilteredByActiveStorageDomains(poolId); if ((!(libvirtSecrets.isEmpty())) && (!(registerLibvirtSecrets(vds, libvirtSecrets, false)))) { setNonOperational(cmdContext, vds.getId(), NonOperationalReason.LIBVIRT_SECRETS_REGISTRATION_FAILURE); return false; } return true; }	private boolean handleLibvirtSecrets(org.ovirt.engine.core.bll.context.CommandContext cmdContext, org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.compat.Guid poolId) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LibvirtSecret> libvirtSecrets = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getLibvirtSecretDao().getAllByStoragePoolIdFilteredByActiveStorageDomains(poolId); if ((!(libvirtSecrets.isEmpty())) && (!(registerLibvirtSecretsImpl(vds, libvirtSecrets, false)))) { org.ovirt.engine.core.bll.storage.CINDERStorageHelper.log.error("Failed to register libvirt secret on vds {}.", vds.getName()); setNonOperational(cmdContext, vds.getId(), NonOperationalReason.LIBVIRT_SECRETS_REGISTRATION_FAILURE); return false; } return true; }
public static java.util.Collection<java.lang.String> replaceWith(java.lang.String propertyName, java.util.Collection<?> items, java.lang.String separator, int maxNumberOfPrintedItems) { org.apache.commons.lang.Validate.isTrue((maxNumberOfPrintedItems >= 1)); org.apache.commons.lang.Validate.isTrue(org.apache.commons.lang.StringUtils.isNotEmpty(separator)); int maxNumOfItems = java.lang.Math.min(maxNumberOfPrintedItems, items.size()); java.util.List<java.lang.String> printedItems = new java.util.ArrayList<>(maxNumOfItems); java.lang.String itemPrefix = (separator == (org.ovirt.engine.core.utils.ReplacementUtils.DEFAULT_SEPARATOR)) ? "\t" : " "; for (java.lang.Object item : items) { if ((--maxNumOfItems) < 0) { break; } printedItems.add(java.lang.String.format("%s%s", itemPrefix, java.lang.String.valueOf(item))); } if ((items.size()) > maxNumberOfPrintedItems) { printedItems.add(java.lang.String.format("%s...", itemPrefix)); } java.util.ArrayList<java.lang.String> replacements = new java.util.ArrayList<>(); replacements.add(org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(propertyName, org.apache.commons.lang.StringUtils.join(printedItems, separator))); replacements.add(org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString((propertyName + (org.ovirt.engine.core.utils.ReplacementUtils.COUNTER_SUFFIX)), items.size())); return replacements; }	public static java.util.Collection<java.lang.String> replaceWith(java.lang.String propertyName, java.util.Collection<?> items, java.lang.String separator, int maxNumberOfPrintedItems) { org.apache.commons.lang.Validate.isTrue((maxNumberOfPrintedItems >= 1)); org.apache.commons.lang.Validate.isTrue(org.apache.commons.lang.StringUtils.isNotEmpty(separator)); int maxNumOfItems = java.lang.Math.min(maxNumberOfPrintedItems, items.size()); java.util.List<java.lang.String> printedItems = new java.util.ArrayList<>(maxNumOfItems); java.lang.String itemPrefix = (separator.equals(org.ovirt.engine.core.utils.ReplacementUtils.DEFAULT_SEPARATOR)) ? "\t" : " "; for (java.lang.Object item : items) { if ((--maxNumOfItems) < 0) { break; } printedItems.add(java.lang.String.format("%s%s", itemPrefix, java.lang.String.valueOf(item))); } if ((items.size()) > maxNumberOfPrintedItems) { printedItems.add(java.lang.String.format("%s...", itemPrefix)); } java.util.ArrayList<java.lang.String> replacements = new java.util.ArrayList<>(); replacements.add(org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(propertyName, org.apache.commons.lang.StringUtils.join(printedItems, separator))); replacements.add(org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString((propertyName + (org.ovirt.engine.core.utils.ReplacementUtils.COUNTER_SUFFIX)), items.size())); return replacements; }
private boolean validate(org.ovirt.engine.core.bll.ValidationResult validationResult) { if (!(validationResult.isValid())) { addViolation(validationResult.getMessage(), null); } return validationResult.isValid(); }	private java.util.Map<java.lang.String, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>> getNicNameToNetworksMap(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure) { java.util.Map<java.lang.String, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>> nicNameToNetworksMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : attachmentsToConfigure) { java.lang.String mapKey = attachment.getNicName(); org.ovirt.engine.core.common.businessentities.network.Network networkToConfigure = existingNetworkRelatedToAttachment(attachment); org.ovirt.engine.core.utils.collections.MultiValueMapUtils.addToMap(mapKey, networkToConfigure, nicNameToNetworksMap, new org.ovirt.engine.core.utils.collections.MultiValueMapUtils.ListCreator<org.ovirt.engine.core.common.businessentities.network.Network>()); } return nicNameToNetworksMap; }
@java.lang.Override public int setTabIndexes(int nextTabIndex) { sizeEditor.setTabIndex((nextTabIndex++)); sizeExtendEditor.setTabIndex((nextTabIndex++)); aliasEditor.setTabIndex((nextTabIndex++)); descriptionEditor.setTabIndex((nextTabIndex++)); interfaceEditor.setTabIndex((nextTabIndex++)); datacenterEditor.setTabIndex((nextTabIndex++)); storageDomainEditor.setTabIndex((nextTabIndex++)); volumeTypeEditor.setTabIndex((nextTabIndex++)); diskProfileEditor.setTabIndex((nextTabIndex++)); quotaEditor.setTabIndex((nextTabIndex++)); hostListEditor.setTabIndex((nextTabIndex++)); storageTypeEditor.setTabIndex((nextTabIndex++)); plugDiskToVmEditor.setTabIndex((nextTabIndex++)); wipeAfterDeleteEditor.setTabIndex((nextTabIndex++)); isBootableEditor.setTabIndex((nextTabIndex++)); isShareableEditor.setTabIndex((nextTabIndex++)); isReadOnlyEditor.setTabIndex((nextTabIndex++)); isScsiPassthroughEditor.setTabIndex((nextTabIndex++)); isSgIoUnfilteredEditor.setTabIndex((nextTabIndex++)); isScsiReservationUsedEditor.setTabIndex((nextTabIndex++)); return nextTabIndex; }	@java.lang.Override public int setTabIndexes(int nextTabIndex) { sizeEditor.setTabIndex((nextTabIndex++)); sizeExtendEditor.setTabIndex((nextTabIndex++)); aliasEditor.setTabIndex((nextTabIndex++)); descriptionEditor.setTabIndex((nextTabIndex++)); interfaceEditor.setTabIndex((nextTabIndex++)); datacenterEditor.setTabIndex((nextTabIndex++)); storageDomainEditor.setTabIndex((nextTabIndex++)); volumeTypeEditor.setTabIndex((nextTabIndex++)); cinderVolumeTypeEditor.setTabIndex((nextTabIndex++)); diskProfileEditor.setTabIndex((nextTabIndex++)); quotaEditor.setTabIndex((nextTabIndex++)); hostListEditor.setTabIndex((nextTabIndex++)); storageTypeEditor.setTabIndex((nextTabIndex++)); plugDiskToVmEditor.setTabIndex((nextTabIndex++)); wipeAfterDeleteEditor.setTabIndex((nextTabIndex++)); isBootableEditor.setTabIndex((nextTabIndex++)); isShareableEditor.setTabIndex((nextTabIndex++)); isReadOnlyEditor.setTabIndex((nextTabIndex++)); isScsiPassthroughEditor.setTabIndexes((nextTabIndex++)); isSgIoUnfilteredEditor.setTabIndex((nextTabIndex++)); isUsingScsiReservationEditor.setTabIndex((nextTabIndex++)); return nextTabIndex; }
protected void addStyles() { vlanTag.addContentWidgetStyleName(style.vlanEditor()); mtuEditor.addContentWidgetStyleName(style.mtuEditor()); networkLabel.addContentWidgetStyleName(style.mtuEditor()); isVmNetworkEditor.addContentWidgetStyleName(style.checkBox()); isVmNetworkEditor.asCheckBox().addStyleName(style.checkBox()); vlanTagging.addContentWidgetStyleName(style.checkBox()); vlanTagging.asCheckBox().addStyleName(style.checkBox()); hasMtuEditor.addContentWidgetStyleName(style.checkBox()); hasMtuEditor.asCheckBox().addStyleName(style.checkBox()); networkLabel.addLabelStyleName(style.checkBox()); networkLabel.addLabelStyleName(style.inlineLabel()); }	protected void addStyles() { vlanTag.addContentWidgetStyleName(style.valueBox()); mtuEditor.addContentWidgetStyleName(style.valueBox()); networkLabel.addContentWidgetStyleName(style.valueBox()); qosEditor.addContentWidgetStyleName(style.valueBox()); isVmNetworkEditor.addContentWidgetStyleName(style.checkBox()); isVmNetworkEditor.asCheckBox().addStyleName(style.checkBox()); vlanTagging.addContentWidgetStyleName(style.checkBox()); vlanTagging.asCheckBox().addStyleName(style.checkBox()); hasMtuEditor.addContentWidgetStyleName(style.checkBox()); hasMtuEditor.asCheckBox().addStyleName(style.checkBox()); networkLabel.addLabelStyleName(style.checkBox()); networkLabel.addLabelStyleName(style.inlineLabel()); qosEditor.addLabelStyleName(style.checkBox()); qosEditor.addLabelStyleName(style.inlineLabel()); }
private void findNegotiatingProfiles() { if ((profiles) == null) { synchronized(this) { if ((profiles) == null) { profiles = new java.util.ArrayList<org.ovirt.engine.core.aaa.AuthenticationProfile>(1); for (org.ovirt.engine.core.aaa.AuthenticationProfile profile : org.ovirt.engine.core.aaa.AuthenticationProfileRepository.getInstance().getProfiles()) { if (profile != null) { if (((((org.ovirt.engine.core.aaa.AuthenticatorProxy) (profile.getAuthenticator())).getExtension().getContext().<java.lang.Long>get(Authn.ContextKeys.CAPABILITIES).longValue()) & (Authn.Capabilities.AUTHENTICATE_NEGOTIATE)) == (Authn.Capabilities.AUTHENTICATE_NEGOTIATE)) { profiles.add(0, profile); } } } } } } }	private void findNegotiatingProfiles() { if ((profiles) == null) { synchronized(this) { if ((profiles) == null) { profiles = new java.util.ArrayList<org.ovirt.engine.core.aaa.AuthenticationProfile>(1); for (org.ovirt.engine.core.aaa.AuthenticationProfile profile : org.ovirt.engine.core.aaa.AuthenticationProfileRepository.getInstance().getProfiles()) { if (profile != null) { if (((profile.getAuthn().getContext().<java.lang.Long>get(Authn.ContextKeys.CAPABILITIES).longValue()) & (Authn.Capabilities.AUTHENTICATE_NEGOTIATE_NON_INTERACTIVE)) != 0) { profiles.add(0, profile); } } } } } } }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Allow to Add/Remove Users from the System") java.lang.String allowToAddRemoveUsersFromTheSystemRoleTreeTooltip();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to Add/Remove Users from the System") java.lang.String allowToAddRemoveUsersFromTheSystemRoleTreeTooltip();
public boolean isAsyncTask(org.ovirt.engine.core.compat.Guid cmdId) { for (org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task : _tasks.values()) { if (task.getParameters().getDbAsyncTask().getCommandId().equals(cmdId)) { return true; } } return false; }	public boolean doesCommandContainAsyncTask(org.ovirt.engine.core.compat.Guid cmdId) { for (org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task : _tasks.values()) { if (task.getParameters().getDbAsyncTask().getCommandId().equals(cmdId)) { return true; } } return false; }
public org.ovirt.engine.ui.uicommonweb.builders.BuilderList<F, B> tail() { if ((size()) >= 2) { return new org.ovirt.engine.ui.uicommonweb.builders.BuilderList<F, B>(subList(1, size())); } return new org.ovirt.engine.ui.uicommonweb.builders.BuilderList<F, B>(); }	public org.ovirt.engine.ui.uicommonweb.builders.BuilderList<S, D> tail() { if ((size()) >= 2) { return new org.ovirt.engine.ui.uicommonweb.builders.BuilderList<S, D>(subList(1, size())); } return new org.ovirt.engine.ui.uicommonweb.builders.BuilderList<S, D>(); }
public void refreshRunningVmsWithNewDiskProfile(org.ovirt.engine.core.compat.Guid diskProfileId) { refreshVmsStorageQos(getRunningVmDiskImageMapWithProfiles(java.util.Collections.singleton(diskProfileId)), storageQosDao.getQosByDiskProfileId(diskProfileId)); }	public void refreshRunningVmsWithDiskProfile(org.ovirt.engine.core.compat.Guid diskProfileId) { refreshVmsStorageQos(getRunningVmDiskImageMapWithProfiles(java.util.Collections.singleton(diskProfileId)), storageQosDao.getQosByDiskProfileId(diskProfileId)); }
@java.lang.Override public org.gwtbootstrap3.client.ui.constants.IconType getValue(org.ovirt.engine.core.common.businessentities.Erratum erratum) { if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.BUGFIX)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString("ORANGERED")); return org.gwtbootstrap3.client.ui.constants.IconType.BUG; } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.ENHANCEMENT)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString("BLUE")); return org.gwtbootstrap3.client.ui.constants.IconType.PLUS_SQUARE; } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.SECURITY)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString("DARKORANGE")); return org.gwtbootstrap3.client.ui.constants.IconType.WARNING; } return null; }	@java.lang.Override public org.gwtbootstrap3.client.ui.constants.IconType getValue(org.ovirt.engine.core.common.businessentities.Erratum erratum) { if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.BUGFIX)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(ErrataType.BUGFIX.getColor())); return org.gwtbootstrap3.client.ui.constants.IconType.BUG; } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.ENHANCEMENT)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(ErrataType.ENHANCEMENT.getColor())); return org.gwtbootstrap3.client.ui.constants.IconType.PLUS_SQUARE; } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.SECURITY)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(ErrataType.SECURITY.getColor())); return org.gwtbootstrap3.client.ui.constants.IconType.WARNING; } return null; }
@java.lang.Override public void invoke(org.ovirt.engine.api.extensions.ExtMap context, java.util.Map<java.lang.String, java.lang.Object> args) { java.util.Properties templates = org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.loadPropertiesFromJar("entity-templates.properties"); java.lang.String providedTemplate = null; if (context.containsKey(ContextKeys.SHOW_TEMPLATE)) { providedTemplate = templates.get(context.get(ContextKeys.SHOW_TEMPLATE)).toString(); } @java.lang.SuppressWarnings("unchecked") java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> results = context.get(ContextKeys.SEARCH_RESULT, java.util.Collection.class, java.util.Collections.emptyList()); for (org.ovirt.engine.api.extensions.ExtMap result : results) { java.lang.String out = (providedTemplate == null) ? result.containsKey(Authz.PrincipalRecord.ID) ? templates.get("user").toString() : templates.get("group").toString() : providedTemplate; for (java.util.Map.Entry<org.ovirt.engine.api.extensions.ExtKey, java.lang.Object> entry : result.entrySet()) { out = out.replaceAll((("@" + (entry.getKey().getUuid().getUuid().toString())) + "@"), entry.getValue().toString()); } org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.addContextMessage(context, false, out); } context.put(ContextKeys.EXIT_STATUS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.SUCCESS); }	@java.lang.Override public void invoke(org.ovirt.engine.api.extensions.ExtMap context, java.util.Map<java.lang.String, java.lang.Object> args) { java.util.Properties templates = org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.loadPropertiesFromJar("entity-templates.properties"); java.lang.String providedTemplate = null; if (context.containsKey(ContextKeys.SHOW_TEMPLATE)) { providedTemplate = templates.get(context.get(ContextKeys.SHOW_TEMPLATE)).toString(); } @java.lang.SuppressWarnings("unchecked") java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> results = context.get(ContextKeys.SEARCH_RESULT, java.util.Collection.class, java.util.Collections.emptyList()); for (org.ovirt.engine.api.extensions.ExtMap result : results) { java.lang.String out = (providedTemplate == null) ? result.containsKey(Authz.PrincipalRecord.ID) ? templates.get("user").toString() : templates.get("group").toString() : providedTemplate; for (java.util.Map.Entry<org.ovirt.engine.api.extensions.ExtKey, java.lang.Object> entry : result.entrySet()) { out = out.replaceAll((("@" + (entry.getKey().getUuid().getUuid().toString())) + "@"), formatValue(entry)); } org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.addContextMessage(context, false, out); } context.put(ContextKeys.EXIT_STATUS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.SUCCESS); }
@org.junit.Test public void testStorageNameLength() { for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType d : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { if (d != (DiskContentType.LEGACY)) { assertEquals(4, d.getStorageValue().length()); } } }	@org.junit.Test public void testStorageNameLength() { for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType d : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { assertEquals(4, d.getStorageValue().length()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs pcArgs = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)); if (PropertyChangedEventArgs.Args.PROGRESS.toString().equals(pcArgs.propertyName)) { if ((modelProvider.getModel().getProgress()) != null) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { if ((getTable()) != null) { getTable().setLoadingState(LoadingState.LOADING); } } }); } } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs pcArgs = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)); if (PropertyChangedEventArgs.PROGRESS.equals(pcArgs.propertyName)) { if ((modelProvider.getModel().getProgress()) != null) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { if ((getTable()) != null) { getTable().setLoadingState(LoadingState.LOADING); } } }); } } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { rngPanel.setVisible(object.getIsRngEnabled().getEntity()); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { rngPanel.setVisible(object.getIsRngEnabled().getEntity()); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public boolean equals(final java.lang.Object other) { if ((this) == other) { return true; } if (other == null) { return false; } if ((getClass()) != (other.getClass())) { return false; } boolean result = false; org.ovirt.engine.ui.frontend.communication.VdcOperation<T, P> otherOperation = ((org.ovirt.engine.ui.frontend.communication.VdcOperation<T, P>) (other)); result = (operationType.equals(otherOperation.getOperation())) && (parameter.equals(otherOperation.getParameter())); return result; }	@java.lang.Override public boolean equals(final java.lang.Object other) { if ((this) == other) { return true; } if (other == null) { return false; } if ((getClass()) != (other.getClass())) { return false; } boolean result = false; @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.ui.frontend.communication.VdcOperation<T, P> otherOperation = ((org.ovirt.engine.ui.frontend.communication.VdcOperation<T, P>) (other)); result = (operationType.equals(otherOperation.getOperation())) && (parameter.equals(otherOperation.getParameter())); return result; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.updateNetworkAttachment(getVdsGroupId(), getNetworkCluster(), getNetwork(), org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.this); return null; } }); if (((!(getPersistedNetwork().isExternal())) && (org.ovirt.engine.core.utils.NetworkUtils.isLabeled(getPersistedNetwork()))) && (org.ovirt.engine.core.bll.network.cluster.NetworkHelper.setupNetworkSupported(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getVdsGroup().getcompatibility_version()))) { addNetworkToHosts(); } org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.attachNetwork(getVdsGroupId(), getNetworkCluster(), getNetwork()); return null; } }); if (((!(getPersistedNetwork().isExternal())) && (org.ovirt.engine.core.utils.NetworkUtils.isLabeled(getPersistedNetwork()))) && (org.ovirt.engine.core.bll.network.cluster.NetworkHelper.setupNetworkSupported(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getVdsGroup().getcompatibility_version()))) { addNetworkToHosts(); } org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.setSucceeded(true); }
public static boolean isGraphicsAndDisplaySupported(int osId, java.util.Collection<org.ovirt.engine.core.common.businessentities.GraphicsType> graphics, org.ovirt.engine.core.common.businessentities.DisplayType displayType, java.util.List<java.lang.String> reasons, org.ovirt.engine.core.compat.Version clusterVersion) { boolean result = org.ovirt.engine.core.bll.validator.VmValidationUtils.isGraphicsAndDisplaySupported(osId, clusterVersion, graphics, displayType); if (!result) { reasons.add(EngineMessages.ACTION_TYPE_FAILED_ILLEGAL_VM_DISPLAY_TYPE_IS_NOT_SUPPORTED_BY_OS.name()); } return result; }	public static boolean isGraphicsAndDisplaySupported(int osId, java.util.Collection<org.ovirt.engine.core.common.businessentities.GraphicsType> graphics, org.ovirt.engine.core.common.businessentities.DisplayType displayType, java.util.List<java.lang.String> reasons, org.ovirt.engine.core.compat.Version clusterVersion) { boolean result = org.ovirt.engine.core.bll.validator.VmValidationUtils.isGraphicsAndDisplaySupported(osId, clusterVersion, graphics, displayType); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_VM_DISPLAY_TYPE_IS_NOT_SUPPORTED_BY_OS.name()); } return result; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ("IsCustomPropertiesTabAvailable".equals(propName)) { setupCustomPropertiesAvailability(object); } else if ("IsDisksAvailable".equals(propName)) { addDiskAllocation(object); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ("IsCustomPropertiesTabAvailable".equals(propName)) { setupCustomPropertiesAvailability(object); } else if ("IsDisksAvailable".equals(propName)) { addDiskAllocation(object); } }
private void addWarningForVmsWithAttachedDisk() { java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> vms = org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.getVmStaticDAO().getAllByStoragePoolId(org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.getStorageDomain().getStoragePoolId()); java.util.List<java.lang.String> vmNames = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmStatic vmStatic : vms) { if (org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.isVMHasAttachedDiskOrFloppy(vmStatic.getId())) { vmNames.add(vmStatic.getName()); } } if (!(vmNames.isEmpty())) { this.addCustomValue("VmNames", org.apache.commons.lang.StringUtils.join(vmNames, ",")); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(this, AuditLogType.DETACH_USED_ISO_STORAGE_DOMAIN_FROM_POOL); } }	protected java.util.List<java.lang.String> getVmsWithAttachedISO() { java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> vms = org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.getVmStaticDAO().getAllByStoragePoolId(org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.getStorageDomain().getStoragePoolId()); java.util.List<java.lang.String> vmNames = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.VmStatic vmStatic : vms) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.getVmDynamicDAO().get(vmStatic.getId()); if (((org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.getVmDynamicDAO().get(vmStatic.getId()).getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) && (!(org.apache.commons.lang.StringUtils.isEmpty(((vmDynamic.getCurrentCd()) != null ? vmDynamic.getCurrentCd() : vmStatic.getIsoPath()))))) { vmNames.add(vmStatic.getName()); } } return vmNames; }
@org.ovirt.engine.ui.common.DefaultStringValue("IO Threads:") java.lang.String ioThreadsVmPopup();	@org.ovirt.engine.ui.common.DefaultStringValue("Upload") java.lang.String uploadIconVmPopup();
public org.ovirt.engine.core.dal.VdcBllMessages getStatusMsg() { return statusMsg; }	public org.ovirt.engine.core.dao.gluster.GlusterServiceDao getGlusterServiceDao() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getGlusterServiceDao(); }
@java.lang.Override protected void executeCommand() { boolean addedGroupThatAllowsViewingChildren = false; java.util.List<org.ovirt.engine.core.common.businessentities.ActionGroup> groups = org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getParameters().getActionGroups(); for (org.ovirt.engine.core.common.businessentities.ActionGroup group : groups) { addedGroupThatAllowsViewingChildren |= group.allowsViewingChildren(); org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRoleGroupMapDAO().save(new org.ovirt.engine.core.common.businessentities.RoleGroupMap(group, org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getParameters().getRoleId())); AppendCustomValue("ActionGroup", group.toString(), ", "); } if (addedGroupThatAllowsViewingChildren) { org.ovirt.engine.core.common.businessentities.RolesEntity role = org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRole(); if (!(role.allowsViewingChildren())) { role.setAllowsViewingChildren(true); org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRoleDao().update(role); } } org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { boolean addedGroupThatAllowsViewingChildren = false; java.util.List<org.ovirt.engine.core.common.businessentities.ActionGroup> groups = org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getParameters().getActionGroups(); for (org.ovirt.engine.core.common.businessentities.ActionGroup group : groups) { addedGroupThatAllowsViewingChildren |= group.allowsViewingChildren(); org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRoleGroupMapDAO().save(new org.ovirt.engine.core.common.businessentities.RoleGroupMap(group, org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getParameters().getRoleId())); AppendCustomValue("ActionGroup", group.toString(), ", "); } if (addedGroupThatAllowsViewingChildren) { org.ovirt.engine.core.common.businessentities.Role role = org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRole(); if (!(role.allowsViewingChildren())) { role.setAllowsViewingChildren(true); org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRoleDao().update(role); } } org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.setSucceeded(true); }
@java.lang.Override public void onMouseOver(com.google.gwt.event.dom.client.MouseOverEvent event) { infoImage.setUrl(resources.dialogIconHelpRollover().getSafeUri()); }	@java.lang.Override public void onMouseOver(com.google.gwt.event.dom.client.MouseOverEvent event) { infoImage.setUrl(org.ovirt.engine.ui.common.widget.dialog.InfoIcon.resources.dialogIconHelpRollover().getSafeUri()); }
@java.lang.Override protected void onBind() { super.onBind(); org.ovirt.engine.ui.common.widget.table.OrderedMultiSelectionModel<?> tableSelectionModel = ((getTable()) != null) ? getTable().getSelectionModel() : null; if (tableSelectionModel != null) { registerHandler(tableSelectionModel.addSelectionChangeHandler(new com.google.gwt.view.client.SelectionChangeEvent.Handler() { @java.lang.Override public void onSelectionChange(com.google.gwt.view.client.SelectionChangeEvent event) { updateDetailModelSelection(); } })); } initializeHandlers(); getSelectedMainItems().registerListener(this); itemChanged(getSelectedMainItems().getMainTabSelectedItem()); }	@java.lang.Override protected void onBind() { super.onBind(); org.ovirt.engine.ui.common.widget.table.OrderedMultiSelectionModel<?> tableSelectionModel = ((getTable()) != null) ? getTable().getSelectionModel() : null; if (tableSelectionModel != null) { registerHandler(tableSelectionModel.addSelectionChangeHandler(new com.google.gwt.view.client.SelectionChangeEvent.Handler() { @java.lang.Override public void onSelectionChange(com.google.gwt.view.client.SelectionChangeEvent event) { updateDetailModelSelection(); } })); } initializeHandlers(); getSelectedMainItems().registerListener(this); itemChanged(getSelectedMainItems().getSelectedItem()); }
@org.junit.Test public void replaceProductKey_emptyKeyShouldNotRemoveTheWholeSectionForCustomScript() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "", true); assertThat(res, containsString("<ProductKey>")); assertThat(res, containsString("</ProductKey>")); }	@org.junit.Test public void replaceProductKeyEmptyKeyShouldNotRemoveTheWholeSectionForCustomScript() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "", true); assertThat(res, containsString("<ProductKey>")); assertThat(res, containsString("</ProductKey>")); }
public void setReason(java.lang.String value) { this.vmDynamic.setReason(value); }	public void setStopReason(java.lang.String value) { this.vmDynamic.setStopReason(value); }
private boolean validateAndAddViolation(org.ovirt.engine.core.bll.ValidationResult validationResult, java.lang.String violatingEntity) { if (validationResult.isValid()) { return true; } else { addViolation(validationResult.getMessage(), violatingEntity); return false; } }	private void handleCustomPropertiesError(org.ovirt.engine.core.common.utils.customprop.SimpleCustomPropertiesUtil util, java.util.List<org.ovirt.engine.core.common.utils.customprop.ValidationError> errors) { java.util.List<java.lang.String> messages = new java.util.ArrayList<>(); util.handleCustomPropertiesError(errors, messages); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.log.error(org.apache.commons.lang.StringUtils.join(translateErrorMessages(messages), ',')); }
@java.lang.Override protected boolean canDoAction() { if (((org.ovirt.engine.core.bll.ConvertVmCommand.getVds()) != null) && ((org.ovirt.engine.core.bll.ConvertVmCommand.getVds().getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { return failCanDoAction(EngineMessages.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL); } if (((org.ovirt.engine.core.bll.ConvertVmCommand.getVds()) == null) && (!(selectProxyHost()))) { return failCanDoAction(EngineMessages.ACTION_TYPE_FAILED_NO_VDS_IN_POOL); } return true; }	@java.lang.Override protected boolean canDoAction() { if (((org.ovirt.engine.core.bll.ConvertVmCommand.getVds()) != null) && ((org.ovirt.engine.core.bll.ConvertVmCommand.getVds().getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL); } if (((org.ovirt.engine.core.bll.ConvertVmCommand.getVds()) == null) && (!(selectProxyHost()))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_NO_VDS_IN_POOL); } return true; }
public static java.util.HashMap<org.ovirt.engine.core.common.utils.Pair<java.lang.Integer, org.ovirt.engine.core.compat.Version>, java.lang.Boolean> getNicHotplugSupportMap() { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.nicHotplugSupportMap; }	public static java.util.Map<org.ovirt.engine.core.common.utils.Pair<java.lang.Integer, org.ovirt.engine.core.compat.Version>, java.lang.Boolean> getNicHotplugSupportMap() { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.nicHotplugSupportMap; }
public org.ovirt.engine.core.common.errors.EngineErrors getError() { return _Error; }	public org.ovirt.engine.core.common.errors.EngineError getError() { return _Error; }
@java.lang.Override protected void readSnapshotsSection(XmlNode section) { org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = section.SelectNodes("Snapshot"); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot>(); _vm.setSnapshots(snapshots); for (XmlNode node : list) { XmlNode vmConfiguration = node.selectSingleNode("VmConfiguration", _xmlNS); org.ovirt.engine.core.common.businessentities.Snapshot snapshot = new org.ovirt.engine.core.common.businessentities.Snapshot((vmConfiguration != null)); snapshot.setId(new org.ovirt.engine.core.compat.Guid(node.attributes.get("ovf:id").getValue())); snapshot.setVmId(_vm.getId()); snapshot.setType(org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.valueOf(node.selectSingleNode("Type", _xmlNS).innerText)); snapshot.setStatus(SnapshotStatus.OK); snapshot.setDescription(node.selectSingleNode("Description", _xmlNS).innerText); XmlNode memory = node.selectSingleNode("Memory", _xmlNS); if (memory != null) { snapshot.setMemoryVolume(memory.innerText); } final java.util.Date creationDate = org.ovirt.engine.core.utils.ovf.OvfParser.utcDateStringToLocaDate(node.selectSingleNode("CreationDate", _xmlNS).innerText); if (creationDate != null) { snapshot.setCreationDate(creationDate); } snapshot.setVmConfiguration((vmConfiguration == null ? null : new java.lang.String(org.apache.commons.codec.binary.Base64.decodeBase64(vmConfiguration.innerText)))); XmlNode appList = node.selectSingleNode("ApplicationList", _xmlNS); if (appList != null) { snapshot.setAppList(appList.innerText); } snapshots.add(snapshot); } }	@java.lang.Override protected void readSnapshotsSection(XmlNode section) { org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = selectNodes(section, "Snapshot"); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot>(); _vm.setSnapshots(snapshots); for (XmlNode node : list) { XmlNode vmConfiguration = selectSingleNode(node, "VmConfiguration", _xmlNS); org.ovirt.engine.core.common.businessentities.Snapshot snapshot = new org.ovirt.engine.core.common.businessentities.Snapshot((vmConfiguration != null)); snapshot.setId(new org.ovirt.engine.core.compat.Guid(node.attributes.get("ovf:id").getValue())); snapshot.setVmId(_vm.getId()); snapshot.setType(org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.valueOf(selectSingleNode(node, "Type", _xmlNS).innerText)); snapshot.setStatus(SnapshotStatus.OK); snapshot.setDescription(selectSingleNode(node, "Description", _xmlNS).innerText); XmlNode memory = selectSingleNode(node, "Memory", _xmlNS); if (memory != null) { snapshot.setMemoryVolume(memory.innerText); } final java.util.Date creationDate = org.ovirt.engine.core.utils.ovf.OvfParser.utcDateStringToLocaDate(selectSingleNode(node, "CreationDate", _xmlNS).innerText); if (creationDate != null) { snapshot.setCreationDate(creationDate); } snapshot.setVmConfiguration((vmConfiguration == null ? null : new java.lang.String(org.apache.commons.codec.binary.Base64.decodeBase64(vmConfiguration.innerText)))); XmlNode appList = selectSingleNode(node, "ApplicationList", _xmlNS); if (appList != null) { snapshot.setAppList(appList.innerText); } snapshots.add(snapshot); } }
private org.ovirt.engine.core.common.action.LiveMigrateDiskParameters createLiveMigrateDiskParameters(org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters, org.ovirt.engine.core.compat.Guid vmId) { return new org.ovirt.engine.core.common.action.LiveMigrateDiskParameters(moveDiskParameters.getImageId(), moveDiskParameters.getSourceDomainId(), moveDiskParameters.getStorageDomainId(), vmId, moveDiskParameters.getQuotaId(), moveDiskParameters.getDiskProfileId(), org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getImageGroupID()); }	private org.ovirt.engine.core.common.action.LiveMigrateDiskParameters createLiveMigrateDiskParameters(org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters, org.ovirt.engine.core.compat.Guid vmId) { return new org.ovirt.engine.core.common.action.LiveMigrateDiskParameters(moveDiskParameters.getImageId(), moveDiskParameters.getSourceDomainId(), moveDiskParameters.getStorageDomainId(), vmId, moveDiskParameters.getQuotaId(), moveDiskParameters.getDiskProfileId(), org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters().getImageGroupID()); }
@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult isLastProfileInParentEntity() { if ((getProfileDao().getAllForCluster(getProfile().getClusterId()).size()) == 1) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.ACTION_TYPE_CANNOT_REMOVE_LAST_CPU_PROFILE_IN_CLUSTER); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult isLastProfileInParentEntity() { if ((getProfileDao().getAllForCluster(getProfile().getClusterId()).size()) == 1) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_CANNOT_REMOVE_LAST_CPU_PROFILE_IN_CLUSTER); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage(); usage.setEpoch(rs.getTimestamp(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.DATE).getTime()); usage.setStorageValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.USED)); history.add(usage); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage(); usage.setEpoch(rs.getTimestamp(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.DATE).getTime()); usage.setStorageValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.USED)); history.add(usage); }
public static org.ovirt.engine.core.common.businessentities.DiskImage isImageExist(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.common.businessentities.DiskImage image) { org.ovirt.engine.core.common.businessentities.DiskImage fromIrs = null; try { org.ovirt.engine.core.compat.Guid storageDomainId = image.getStorageIds().get(0); org.ovirt.engine.core.compat.Guid imageGroupId = ((image.getId()) != null) ? image.getId() : org.ovirt.engine.core.compat.Guid.Empty; fromIrs = ((org.ovirt.engine.core.common.businessentities.DiskImage) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.GetImageInfo, new org.ovirt.engine.core.common.vdscommands.GetImageInfoVDSCommandParameters(storagePoolId, storageDomainId, imageGroupId, image.getImageId())).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.ImagesHandler.log.debug("Unable to get image info from from storage", e); } return fromIrs; }	private static org.ovirt.engine.core.common.businessentities.DiskImage isImageExist(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.common.businessentities.DiskImage image) { org.ovirt.engine.core.common.businessentities.DiskImage fromIrs = null; try { org.ovirt.engine.core.compat.Guid storageDomainId = image.getStorageIds().get(0); org.ovirt.engine.core.compat.Guid imageGroupId = ((image.getId()) != null) ? image.getId() : org.ovirt.engine.core.compat.Guid.Empty; fromIrs = ((org.ovirt.engine.core.common.businessentities.DiskImage) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.GetImageInfo, new org.ovirt.engine.core.common.vdscommands.GetImageInfoVDSCommandParameters(storagePoolId, storageDomainId, imageGroupId, image.getImageId())).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.ImagesHandler.log.debug("Unable to get image info from from storage", e); } return fromIrs; }
@java.lang.Override protected void executeCommand() { java.util.List<java.lang.String> errors = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.compat.Guid upServerId : getUpServerIds()) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.EnableGlusterHook, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterHookVDSParameters(upServerId, getParameters().getGlusterCommand(), getParameters().getLevel(), getParameters().getHookName())); if (!(returnValue.getSucceeded())) { errors.add(returnValue.getVdsError().getMessage()); } } if (!(errors.isEmpty())) { handleVdsErrors(AuditLogType.GLUSTER_HOOK_ENABLE_FAILED, errors); } if ((getUpServerIds().size()) > (errors.size())) { UpdateHookStatusInDb(getParameters().getClusterId(), getParameters().getHookName(), GlusterHookStatus.ENABLED); setSucceeded(true); } }	@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSCommandType getStatusChangeVDSCommand() { return org.ovirt.engine.core.common.vdscommands.VDSCommandType.EnableGlusterHook; }
public org.ovirt.engine.core.compat.NGuid getInstanceTypeId() { return vmStatic.getInstanceTypeId(); }	public org.ovirt.engine.core.compat.Guid getInstanceTypeId() { return vmStatic.getInstanceTypeId(); }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.column.Context context, com.google.gwt.dom.client.Element parent, T value, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<T> valueUpdater) { super.onBrowserEvent(context, parent, value, event, valueUpdater); com.google.gwt.dom.client.EventTarget eventTarget = event.getEventTarget(); if (!(com.google.gwt.dom.client.Element.is(eventTarget))) { return; } if ("click".equals(event.getType())) { onClick(value); } }	@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.column.Context context, com.google.gwt.dom.client.Element parent, T value, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<T> valueUpdater) { super.onBrowserEvent(context, parent, value, event, valueUpdater); com.google.gwt.dom.client.EventTarget eventTarget = event.getEventTarget(); if (!(com.google.gwt.dom.client.Element.is(eventTarget))) { return; } if (BrowserEvents.CLICK.equals(event.getType())) { onClick(value); } }
private static org.ovirt.engine.api.model.IpAddressAssignment mapIpv4AddressAssignment(org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address) { org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment = new org.ovirt.engine.api.model.IpAddressAssignment(); org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); ip.setVersion(IpVersion.V4.value()); if ((iPv4Address.getAddress()) != null) { ip.setAddress(iPv4Address.getAddress()); } if ((iPv4Address.getGateway()) != null) { ip.setGateway(iPv4Address.getGateway()); } if ((iPv4Address.getNetmask()) != null) { ip.setNetmask(iPv4Address.getNetmask()); } ipAddressAssignment.setIp(ip); org.ovirt.engine.api.model.BootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(iPv4Address.getBootProtocol(), null); ipAddressAssignment.setAssignmentMethod((assignmentMethod == null ? null : assignmentMethod.value())); return ipAddressAssignment; }	private static org.ovirt.engine.api.model.IpAddressAssignment mapIpv4Address(org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address) { org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment = new org.ovirt.engine.api.model.IpAddressAssignment(); org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); ip.setVersion(IpVersion.V4); if ((iPv4Address.getAddress()) != null) { ip.setAddress(iPv4Address.getAddress()); } if ((iPv4Address.getGateway()) != null) { ip.setGateway(iPv4Address.getGateway()); } if ((iPv4Address.getNetmask()) != null) { ip.setNetmask(iPv4Address.getNetmask()); } ipAddressAssignment.setIp(ip); org.ovirt.engine.api.model.BootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(iPv4Address.getBootProtocol(), null); ipAddressAssignment.setAssignmentMethod(assignmentMethod); return ipAddressAssignment; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("CPU Architecture") java.lang.String clusterPopupArchitectureLabel();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("CPU Architecture") java.lang.String clusterPopupArchitectureLabel();
private void add() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel model = createAdElementListModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().addPermissionToUserTitle()); model.setHashName("add_permission_to_user"); model.setHelpTag(model.getHashName(), "* > Permissions > Add Permission"); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnAdd", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }	private void add() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel model = createAdElementListModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().addPermissionToUserTitle()); model.setHelpTag(HelpTag.add_permission_to_user); model.setHashName("add_permission_to_user"); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnAdd", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
@java.lang.Override public org.ovirt.engine.api.model.MacPools list() { return mapCollection(getBackendCollection(SearchType.MacPool)); }	@java.lang.Override public org.ovirt.engine.api.model.MacPools list() { return mapCollection(getBackendCollection(VdcQueryType.GetAllMacPools, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase())); }
private void setGraphicsDevicesToParams(org.ovirt.engine.ui.uicommonweb.models.pools.PoolModel model, org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters params) { if ((model.getDisplayProtocol().getSelectedItem()) == null) { return; } org.ovirt.engine.core.common.businessentities.DisplayType selectedDisplayType = model.getDisplayProtocol().getSelectedItem().getEntity(); org.ovirt.engine.core.common.businessentities.GraphicsType derivedGraphicsType = (selectedDisplayType == (org.ovirt.engine.core.common.businessentities.DisplayType.qxl)) ? org.ovirt.engine.core.common.businessentities.GraphicsType.SPICE : org.ovirt.engine.core.common.businessentities.GraphicsType.VNC; params.setShouldUpdateGraphicsDevice(derivedGraphicsType, true); org.ovirt.engine.core.common.businessentities.GraphicsDevice d = new org.ovirt.engine.core.common.businessentities.GraphicsDevice(derivedGraphicsType.getCorrespondingDeviceType()); params.setGraphicsDevice(d); }	private void setGraphicsDevicesToParams(org.ovirt.engine.ui.uicommonweb.models.pools.PoolModel model, org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters params) { if (((model.getDisplayType().getSelectedItem()) == null) || ((model.getGraphicsType().getSelectedItem()) == null)) { return; } for (org.ovirt.engine.core.common.businessentities.GraphicsType graphicsType : model.getGraphicsType().getSelectedItem().getBackingGraphicsType()) { org.ovirt.engine.core.common.businessentities.GraphicsDevice d = new org.ovirt.engine.core.common.businessentities.GraphicsDevice(graphicsType.getCorrespondingDeviceType()); params.getGraphicsDevices().add(d); } }
private void createDiskBasedOnLun() { final org.ovirt.engine.core.common.businessentities.storage.LUNs lun; if ((updatedLun) == null) { lun = ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo())).getLun(); } else { lun = updatedLun; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.proceedLUNInDb(lun, lun.getLunType()); getBaseDiskDao().save(getParameters().getDiskInfo()); getDiskLunMapDao().save(new org.ovirt.engine.core.common.businessentities.storage.DiskLunMap(getParameters().getDiskInfo().getId(), lun.getLUN_id())); if ((getVm()) != null) { addManagedDeviceForDisk(getParameters().getDiskInfo().getId(), ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (getParameters().getDiskInfo())).isUsingScsiReservation()); } return null; } }); org.ovirt.engine.core.bll.AddDiskCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo().getId()); plugDiskToVmIfNeeded(); org.ovirt.engine.core.bll.AddDiskCommand.setSucceeded(true); }	private void createDiskBasedOnLun() { final org.ovirt.engine.core.common.businessentities.storage.LUNs lun; if ((lunFromStorage) == null) { lun = ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo())).getLun(); } else { lun = lunFromStorage; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.proceedLUNInDb(lun, lun.getLunType()); getBaseDiskDao().save(getParameters().getDiskInfo()); getDiskLunMapDao().save(new org.ovirt.engine.core.common.businessentities.storage.DiskLunMap(getParameters().getDiskInfo().getId(), lun.getLUN_id())); if ((getVm()) != null) { addManagedDeviceForDisk(getParameters().getDiskInfo().getId(), ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (getParameters().getDiskInfo())).isUsingScsiReservation()); } return null; } }); org.ovirt.engine.core.bll.AddDiskCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo().getId()); plugDiskToVmIfNeeded(); org.ovirt.engine.core.bll.AddDiskCommand.setSucceeded(true); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Directory Groups") java.lang.String directoryGroupsTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Directory Groups") java.lang.String directoryGroupsTitle();
private void onSaveConfirmCpuThreads() { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel) (getWindow())); cancelConfirmation(); if (((!(model.getVersionSupportsCpuThreads().getEntity())) && (model.getCountThreadsAsCores().getEntity())) && (getSelectedItem().getCountThreadsAsCores())) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().disableClusterCpuThreadSupportTitle()); confirmModel.setHelpTag(HelpTag.disable_cpu_thread_support); confirmModel.setHashName("disable_cpu_thread_support"); confirmModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().youAreAboutChangeClusterCpuThreadSupportMsg()); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSaveConfirmCpuLevel", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); getConfirmWindow().getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); getConfirmWindow().getCommands().add(tempVar2); } else { onSaveConfirmCpuLevel(); } }	private void onSaveConfirmCpuThreads() { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel) (getWindow())); cancelConfirmation(); if (((!(model.getVersionSupportsCpuThreads().getEntity())) && (model.getCountThreadsAsCores().getEntity())) && (((org.ovirt.engine.core.common.businessentities.VDSGroup) (getSelectedItem())).getCountThreadsAsCores())) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().disableClusterCpuThreadSupportTitle()); confirmModel.setHelpTag(HelpTag.disable_cpu_thread_support); confirmModel.setHashName("disable_cpu_thread_support"); confirmModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().youAreAboutChangeClusterCpuThreadSupportMsg()); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSaveConfirmCpuLevel", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); getConfirmWindow().getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); getConfirmWindow().getCommands().add(tempVar2); } else { onSaveConfirmCpuLevel(); } }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants, org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession, org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel, org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(applicationConstants.volumeGeoRepSubTabLabel(), 1, modelProvider); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants, org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession, org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel, org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(applicationConstants.volumeGeoRepSubTabLabel(), 4, modelProvider); }
public org.ovirt.engine.core.bll.ValidationResult hostProviderExists() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessages.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST).when((((getHost().getHostProviderId()) != null) && ((getProvider()) == null))); }	public org.ovirt.engine.core.bll.ValidationResult hostProviderExists() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST).when((((getHost().getHostProviderId()) != null) && ((getProvider()) == null))); }
@java.lang.Override public java.lang.Void runInTransaction() { if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(asyncTask.getRootCommandId()))) { coco.persistCommand(asyncTask.getParentCmdEntity()); } if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(asyncTask.getCommandId()))) { coco.persistCommand(asyncTask.getChildCmdEntity()); } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAsyncTaskDao().saveOrUpdate(asyncTask); return null; }	@java.lang.Override public java.lang.Void runInTransaction() { coco.persistCommand(asyncTask.getRootCmdEntity()); coco.persistCommand(asyncTask.getChildCmdEntity()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAsyncTaskDao().saveOrUpdate(asyncTask); return null; }
protected boolean validateTemplateArchitecture() { if ((getVmTemplate().getClusterArch()) == (org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined)) { addCanDoActionMessage(EngineMessages.ACTION_TYPE_FAILED_VM_CANNOT_IMPORT_TEMPLATE_WITH_NOT_SUPPORTED_ARCHITECTURE); return false; } return true; }	protected boolean validateTemplateArchitecture() { if ((getVmTemplate().getClusterArch()) == (org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined)) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_VM_CANNOT_IMPORT_TEMPLATE_WITH_NOT_SUPPORTED_ARCHITECTURE); return false; } return true; }
@org.junit.Test public void networkLabeled() throws java.lang.Exception { when(network.getLabel()).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextPropertyString(10)); assertThat(validator.notLabeled(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessages.ACTION_TYPE_FAILED_NETWORK_ALREADY_LABELED)); }	@org.junit.Test public void networkLabeled() throws java.lang.Exception { when(network.getLabel()).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextPropertyString(10)); assertThat(validator.notLabeled(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_NETWORK_ALREADY_LABELED)); }
public static org.ovirt.engine.core.common.businessentities.VmDynamic buildVmDynamicFromEvent(org.ovirt.engine.core.common.businessentities.VmDynamic baseVmDynamic, java.util.Map<java.lang.String, java.lang.Object> xmlRpcStruct) { org.ovirt.engine.core.common.businessentities.VmDynamic clonedVmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(baseVmDynamic); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(clonedVmDynamic, xmlRpcStruct, false); return clonedVmDynamic; }	protected static org.ovirt.engine.core.common.businessentities.ArchitectureType parseArchitecture(java.util.Map<java.lang.String, java.lang.Object> xmlRpcStruct) { try { return org.ovirt.engine.core.common.businessentities.ArchitectureType.valueOf(((java.lang.String) (xmlRpcStruct.get(VdsProperties.vm_arch)))); } catch (java.lang.NullPointerException e) { return null; } }
private void runTryBackToAllSnapshotsOfVm(final org.ovirt.engine.ui.uicommonweb.models.Model model, org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot, boolean memory, java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> images) { model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TryBackToAllSnapshotsOfVm, new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vm.getId(), snapshot.getId(), memory, images), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { model.stopProgress(); cancel(); } }); }	private void runTryBackToAllSnapshotsOfVm(final org.ovirt.engine.ui.uicommonweb.models.Model model, org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot, boolean memory, java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disks) { model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TryBackToAllSnapshotsOfVm, new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vm.getId(), snapshot.getId(), memory, disks), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { model.stopProgress(); cancel(); } }); }
public java.lang.String getSessionIdBySeqId(long sessionSequenceId) { return findFirstSessionByData(sessionSequenceId, org.ovirt.engine.core.bll.aaa.SessionDataContainer.ENGINE_SESSION_SEQ_ID); }	public java.lang.String getSessionIdBySeqId(long sessionSequenceId) { java.lang.String sessionId = null; for (org.ovirt.engine.core.bll.aaa.SessionDataContainer.SessionInfo sessionInfo : sessionInfoMap.values()) { if ((sessionInfo.contentOfSession.get(org.ovirt.engine.core.bll.aaa.SessionDataContainer.ENGINE_SESSION_SEQ_ID)) == sessionSequenceId) { sessionId = ((java.lang.String) (sessionInfo.contentOfSession.get(org.ovirt.engine.core.bll.aaa.SessionDataContainer.ENGINE_SESSION_ID))); break; } } return sessionId; }
public org.ovirt.engine.api.model.HostNIC lookupNic(java.lang.String id) { java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ifaces = getCollection(); for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface : ifaces) { if (iface.getId().toString().equals(id)) { org.ovirt.engine.api.model.HostNIC hostNic = populate(map(iface, ifaces), iface); for (org.ovirt.engine.core.common.businessentities.NetworkEntity nwk : getClusterNetworks()) { if (nwk.getname().equals(iface.getNetworkName())) { hostNic.getNetwork().setId(nwk.getId().toString()); hostNic.getNetwork().setName(null); break; } } return addLinks(hostNic); } } return notFound(); }	public org.ovirt.engine.api.model.HostNIC lookupNic(java.lang.String id) { java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ifaces = getCollection(); for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface : ifaces) { if (iface.getId().toString().equals(id)) { org.ovirt.engine.api.model.HostNIC hostNic = populate(map(iface, ifaces), iface); for (org.ovirt.engine.core.common.businessentities.Network nwk : getClusterNetworks()) { if (nwk.getname().equals(iface.getNetworkName())) { hostNic.getNetwork().setId(nwk.getId().toString()); hostNic.getNetwork().setName(null); break; } } return addLinks(hostNic); } } return notFound(); }
private boolean restoreSlaveVolumesToSnapshot(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> geoRepSessions, java.lang.String snapshotName) { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session : geoRepSessions) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity slaveVolume = getDbFacade().getGlusterVolumeDao().getById(session.getSlaveVolumeId()); if (slaveVolume == null) { continue; } org.ovirt.engine.core.common.businessentities.VDS slaveUpServer = org.ovirt.engine.core.bll.utils.ClusterUtils.getInstance().getRandomUpServer(slaveVolume.getClusterId()); if (slaveUpServer == null) { handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_RESTORE_FAILED, EngineErrors.NoUpServerFoundInRemoteCluster.name()); setSucceeded(false); return false; } try (org.ovirt.engine.core.utils.lock.EngineLock lock = acquireEngineLock(session.getSlaveVolumeId(), LockingGroup.GLUSTER_SNAPSHOT)) { if (!(restoreVolumeToSnapshot(slaveUpServer.getId(), slaveVolume, getSnapshot().getSnapshotName()))) { return false; } } } return true; }	private boolean restoreSlaveVolumesToSnapshot(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> geoRepSessions, java.lang.String snapshotName) { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session : geoRepSessions) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity slaveVolume = getDbFacade().getGlusterVolumeDao().getById(session.getSlaveVolumeId()); if (slaveVolume == null) { continue; } org.ovirt.engine.core.common.businessentities.VDS slaveUpServer = org.ovirt.engine.core.bll.utils.ClusterUtils.getInstance().getRandomUpServer(slaveVolume.getClusterId()); if (slaveUpServer == null) { handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_RESTORE_FAILED, EngineError.NoUpServerFoundInRemoteCluster.name()); setSucceeded(false); return false; } try (org.ovirt.engine.core.utils.lock.EngineLock lock = acquireEngineLock(session.getSlaveVolumeId(), LockingGroup.GLUSTER_SNAPSHOT)) { if (!(restoreVolumeToSnapshot(slaveUpServer.getId(), slaveVolume, getSnapshot().getSnapshotName()))) { return false; } } } return true; }
public static void prepareCommandForMonitoring(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.action.VdcActionType actionType, boolean runAsInternal) { org.ovirt.engine.core.bll.job.ExecutionContext context = command.getExecutionContext(); if (context == null) { context = new org.ovirt.engine.core.bll.job.ExecutionContext(); } try { boolean isMonitored = org.ovirt.engine.core.bll.job.ExecutionHandler.shouldMonitorCommand(actionType, runAsInternal); if (isMonitored || (context.isJobRequired())) { org.ovirt.engine.core.common.job.Job job = org.ovirt.engine.core.bll.job.ExecutionHandler.getJob(command, actionType); context.setExecutionMethod(ExecutionMethod.AsJob); context.setJob(job); command.setExecutionContext(context); command.setJobId(job.getId()); context.setMonitored(true); } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.job.ExecutionHandler.log.error("Failed to prepare command of type '{}' for monitoring due to error '{}'", actionType.name(), org.apache.commons.lang.exception.ExceptionUtils.getMessage(e)); org.ovirt.engine.core.bll.job.ExecutionHandler.log.error("Exception", e); } }	public static void prepareCommandForMonitoring(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.action.VdcActionType actionType, boolean runAsInternal) { org.ovirt.engine.core.bll.job.ExecutionContext context = command.getExecutionContext(); if (context == null) { context = new org.ovirt.engine.core.bll.job.ExecutionContext(); } try { boolean isMonitored = org.ovirt.engine.core.bll.job.ExecutionHandler.shouldMonitorCommand(actionType, runAsInternal); if (isMonitored || (context.isJobRequired())) { org.ovirt.engine.core.common.job.Job job = org.ovirt.engine.core.bll.job.ExecutionHandler.getJob(command, actionType); context.setExecutionMethod(ExecutionMethod.AsJob); context.setJob(job); command.setExecutionContext(context); command.setJobId(job.getId()); context.setMonitored(true); } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.job.ExecutionHandler.log.error("Failed to prepare command of type '{}' for monitoring due to error '{}'", actionType.name(), e.getMessage()); org.ovirt.engine.core.bll.job.ExecutionHandler.log.debug("Exception", e); } }
public void initImportFromExportDomainModel(org.ovirt.engine.ui.uicommonweb.UICommand... commands) { model = importFromExportDomainModelProvider.get(); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().importVirtualMachinesTitle()); model.setHelpTag(HelpTag.import_virtual_machine); model.setHashName("import_virtual_machine"); for (org.ovirt.engine.ui.uicommonweb.UICommand command : commands) { model.getCommands().add(command); } }	public void initImportFromExportDomainModel(org.ovirt.engine.ui.uicommonweb.UICommand... commands) { importVmFromExportDomainModel = importFromExportDomainModelProvider.get(); importVmFromExportDomainModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().importVirtualMachinesTitle()); importVmFromExportDomainModel.setHelpTag(HelpTag.import_virtual_machine); importVmFromExportDomainModel.setHashName("import_virtual_machine"); for (org.ovirt.engine.ui.uicommonweb.UICommand command : commands) { importVmFromExportDomainModel.getCommands().add(command); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVmsListByInstanceType(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeReadList("GetVmsByInstanceTypeId", org.ovirt.engine.core.dao.VmDAOImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("instance_type_id", id)); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVmsListByInstanceType(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeReadList("GetVmsByInstanceTypeId", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("instance_type_id", id)); }
public java.util.Map refreshStoragePool(java.lang.String spUUID, java.lang.String msdUUID, java.lang.Integer masterVersion) { try { log.info("Refreshing storage pool, spUUID: {} msdUUID: {}", new java.lang.Object[]{ spUUID, msdUUID }); final org.ovirt.vdsmfake.service.DataCenter dataCenter = getDataCenterById(spUUID); dataCenter.setMasterStorageDomainId(msdUUID); dataCenter.setMasterVersion(masterVersion); final org.ovirt.vdsmfake.service.StorageDomain storageDomain = getStorageDomainById(msdUUID); dataCenter.getStorageDomainMap().put(storageDomain.getId(), storageDomain); setMasterDomain(spUUID, msdUUID); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }	public java.util.Map refreshStoragePool(java.lang.String spUUID, java.lang.String msdUUID, java.lang.Integer masterVersion) { try { log.info("Refreshing storage pool, spUUID: {} msdUUID: {}", new java.lang.Object[]{ spUUID, msdUUID }); final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); dataCenter.setMasterStorageDomainId(msdUUID); dataCenter.setMasterVersion(masterVersion); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(msdUUID); dataCenter.getStorageDomainMap().put(storageDomain.getId(), storageDomain); setMasterDomain(spUUID, msdUUID); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }
@java.lang.Override public void setItems(java.util.Collection<org.ovirt.engine.core.common.businessentities.VM> value) { consoleModelsCache.updateVmCache(value); super.setItems(value); }	@java.lang.Override public void setItems(java.util.Collection value) { consoleModelsCache.updateVmCache(value); super.setItems(value); }
@org.junit.Test public void testLong() throws java.lang.Throwable { final java.lang.String LINE = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASDSSSSSSSSSSSSSSSSSSSSSSSDDDDDD"; final int NUM = 10000; final int FACTOR = 5; java.lang.String longText = ""; for (int i = 0; i < (NUM / FACTOR); i++) { longText += LINE + "\n"; } java.util.List<java.lang.String> expect = new java.util.LinkedList<java.lang.String>(); expect.add("start"); for (int i = 0; i < NUM; i++) { expect.add(LINE); } java.util.List<java.lang.String> send = new java.util.LinkedList<java.lang.String>(); for (int i = 0; i < NUM; i++) { if ((i % (NUM / FACTOR)) == 0) { send.add(longText); } else { send.add(null); } } org.ovirt.engine.core.utils.hostinstall.SSHDialogTest.Sink sink = new org.ovirt.engine.core.utils.hostinstall.SSHDialogTest.Sink(expect.toArray(new java.lang.String[0]), send.toArray(new java.lang.String[0])); _sshdialog.connect(); _sshdialog.authenticate(); _sshdialog.executeCommand(sink, "echo start && sleep 4 && cat", null); sink.exception(); }	@org.junit.Test public void testLong() throws java.lang.Throwable { final java.lang.String LINE = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASDSSSSSSSSSSSSSSSSSSSSSSSDDDDDD"; final int NUM = 10000; final int FACTOR = 5; java.lang.String longText = ""; for (int i = 0; i < (NUM / FACTOR); i++) { longText += LINE + "\n"; } java.util.List<java.lang.String> expect = new java.util.LinkedList<java.lang.String>(); expect.add("start"); for (int i = 0; i < NUM; i++) { expect.add(LINE); } java.util.List<java.lang.String> send = new java.util.LinkedList<java.lang.String>(); for (int i = 0; i < NUM; i++) { if ((i % (NUM / FACTOR)) == 0) { send.add(longText); } else { send.add(null); } } org.ovirt.engine.core.utils.ssh.SSHDialogTest.Sink sink = new org.ovirt.engine.core.utils.ssh.SSHDialogTest.Sink(expect.toArray(new java.lang.String[0]), send.toArray(new java.lang.String[0])); _sshdialog.connect(); _sshdialog.authenticate(); _sshdialog.executeCommand(sink, "echo start && sleep 4 && cat", null); sink.exception(); }
@org.junit.Test public void unsyncedNetworkRemoved() { org.ovirt.engine.core.common.businessentities.Network net = createNetwork("net"); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNicOnNetwork("nic0", net); nic.setBridged((!(net.isVmNetwork()))); mockExistingNetworks(net); mockExistingIfaces(nic); nic.setNetworkName(null); org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper(createParametersForNics(nic)); validateAndExpectNoViolations(helper); assertNoBondsModified(helper); assertNoNetworksModified(helper); assertNetworkRemoved(helper, net.getName()); assertNoBondsRemoved(helper); }	@org.junit.Test public void unsyncedNetworkRemoved() { org.ovirt.engine.core.common.businessentities.Network net = createNetwork("net"); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNicSyncedWithNetwork("nic0", net); nic.setBridged((!(net.isVmNetwork()))); mockExistingNetworks(net); mockExistingIfaces(nic); nic.setNetworkName(null); org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper(createParametersForNics(nic)); validateAndExpectNoViolations(helper); assertNoBondsModified(helper); assertNoNetworksModified(helper); assertNetworkRemoved(helper, net.getName()); assertNoBondsRemoved(helper); }
public static boolean checkCpuSockets(int num_of_sockets, int cpu_per_socket, java.lang.String compatibility_version, java.util.List<java.lang.String> CanDoActionMessages) { boolean retValue = true; if (retValue && ((num_of_sockets * cpu_per_socket) > (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmCpus, compatibility_version)))) { CanDoActionMessages.add(EngineMessages.ACTION_TYPE_FAILED_MAX_NUM_CPU.toString()); retValue = false; } if (retValue && (num_of_sockets > (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmSockets, compatibility_version)))) { CanDoActionMessages.add(EngineMessages.ACTION_TYPE_FAILED_MAX_NUM_SOCKETS.toString()); retValue = false; } if (retValue && (cpu_per_socket > (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfCpuPerSocket, compatibility_version)))) { CanDoActionMessages.add(EngineMessages.ACTION_TYPE_FAILED_MAX_CPU_PER_SOCKET.toString()); retValue = false; } if (retValue && (cpu_per_socket < 1)) { CanDoActionMessages.add(EngineMessages.ACTION_TYPE_FAILED_MIN_CPU_PER_SOCKET.toString()); retValue = false; } if (retValue && (num_of_sockets < 1)) { CanDoActionMessages.add(EngineMessages.ACTION_TYPE_FAILED_MIN_NUM_SOCKETS.toString()); retValue = false; } return retValue; }	public static boolean checkCpuSockets(int num_of_sockets, int cpu_per_socket, java.lang.String compatibility_version, java.util.List<java.lang.String> CanDoActionMessages) { boolean retValue = true; if (retValue && ((num_of_sockets * cpu_per_socket) > (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmCpus, compatibility_version)))) { CanDoActionMessages.add(EngineMessage.ACTION_TYPE_FAILED_MAX_NUM_CPU.toString()); retValue = false; } if (retValue && (num_of_sockets > (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmSockets, compatibility_version)))) { CanDoActionMessages.add(EngineMessage.ACTION_TYPE_FAILED_MAX_NUM_SOCKETS.toString()); retValue = false; } if (retValue && (cpu_per_socket > (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfCpuPerSocket, compatibility_version)))) { CanDoActionMessages.add(EngineMessage.ACTION_TYPE_FAILED_MAX_CPU_PER_SOCKET.toString()); retValue = false; } if (retValue && (cpu_per_socket < 1)) { CanDoActionMessages.add(EngineMessage.ACTION_TYPE_FAILED_MIN_CPU_PER_SOCKET.toString()); retValue = false; } if (retValue && (num_of_sockets < 1)) { CanDoActionMessages.add(EngineMessage.ACTION_TYPE_FAILED_MIN_NUM_SOCKETS.toString()); retValue = false; } return retValue; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = ((java.util.List<org.ovirt.engine.core.common.businessentities.VM>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue())); if ((vms != null) && (!(vms.isEmpty()))) { getPortMirroring().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().portMirroringNotChangedIfUsedByVms()); getPortMirroring().setIsChangable(false); } stopProgress(); }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.Collection<org.ovirt.engine.core.common.businessentities.VM> vms = ((java.util.Collection<org.ovirt.engine.core.common.businessentities.VM>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue())); if ((vms != null) && (!(vms.isEmpty()))) { getPortMirroring().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().portMirroringNotChangedIfUsedByVms()); getPortMirroring().setIsChangable(false); } stopProgress(); }
@java.lang.Override public void runningSucceded() { try { org.ovirt.engine.core.bll.RunVmCommandBase.setSucceeded(true); setActionReturnValue(VMStatus.Up); org.ovirt.engine.core.bll.RunVmCommandBase.log(); org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.RunVmCommandBase.getExecutionContext(), false); org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(org.ovirt.engine.core.bll.RunVmCommandBase.getExecutionContext(), true); notifyHostsVmFailed(); if (((org.ovirt.engine.core.bll.RunVmCommandBase.getVm().getLastVdsRunOn()) == null) || (!(org.ovirt.engine.core.bll.RunVmCommandBase.getVm().getLastVdsRunOn().equals(getCurrentVdsId())))) { org.ovirt.engine.core.bll.RunVmCommandBase.getVm().setLastVdsRunOn(getCurrentVdsId()); } if (org.apache.commons.lang.StringUtils.isNotEmpty(org.ovirt.engine.core.bll.RunVmCommandBase.getVm().getHibernationVolHandle())) { removeVmHibernationVolumes(); org.ovirt.engine.core.bll.RunVmCommandBase.getVm().setStatus(VMStatus.Up); org.ovirt.engine.core.bll.RunVmCommandBase.getVm().setHibernationVolHandle(null); org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.UpdateVmDynamicData, new org.ovirt.engine.core.common.vdscommands.UpdateVmDynamicDataVDSCommandParameters(getCurrentVdsId(), org.ovirt.engine.core.bll.RunVmCommandBase.getVm().getDynamicData())); } } finally { org.ovirt.engine.core.bll.RunVmCommandBase.freeLock(); } }	@java.lang.Override public void runningSucceded() { try { decreasePendingVms(); org.ovirt.engine.core.bll.RunVmCommandBase.setSucceeded(true); setActionReturnValue(VMStatus.Up); org.ovirt.engine.core.bll.RunVmCommandBase.log(); org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.RunVmCommandBase.getExecutionContext(), false); org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(org.ovirt.engine.core.bll.RunVmCommandBase.getExecutionContext(), true); notifyHostsVmFailed(); if (((org.ovirt.engine.core.bll.RunVmCommandBase.getVm().getLastVdsRunOn()) == null) || (!(org.ovirt.engine.core.bll.RunVmCommandBase.getVm().getLastVdsRunOn().equals(getCurrentVdsId())))) { org.ovirt.engine.core.bll.RunVmCommandBase.getVm().setLastVdsRunOn(getCurrentVdsId()); } if (org.apache.commons.lang.StringUtils.isNotEmpty(org.ovirt.engine.core.bll.RunVmCommandBase.getVm().getHibernationVolHandle())) { removeVmHibernationVolumes(); org.ovirt.engine.core.bll.RunVmCommandBase.getVm().setStatus(VMStatus.Up); org.ovirt.engine.core.bll.RunVmCommandBase.getVm().setHibernationVolHandle(null); org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.UpdateVmDynamicData, new org.ovirt.engine.core.common.vdscommands.UpdateVmDynamicDataVDSCommandParameters(getCurrentVdsId(), org.ovirt.engine.core.bll.RunVmCommandBase.getVm().getDynamicData())); } } finally { org.ovirt.engine.core.bll.RunVmCommandBase.freeLock(); } }
@org.junit.Test public void testGetStrippedVdsUniqueIdOnlyAllowrdChars() { org.ovirt.engine.core.common.queries.RegisterVdsParameters paramsMock = getQueryParameters(); when(paramsMock.getVdsUniqueId()).thenReturn("Test_123"); java.lang.String result = getQuery().getStrippedVdsUniqueId(); assertEquals("Test_123", result); }	@org.junit.Test public void testGetStrippedVdsUniqueIdOnlyAllowrdChars() { java.lang.String result = this.gerStrippedVdsUniqueId("Test_123"); assertEquals("Vds id doesn't equal to the expected value", "Test_123", result); }
@org.junit.Test public void testUpdateIscsiServerConnection() { existingConnection.setIqn("1.2.3.4"); dao.update(existingConnection); org.ovirt.engine.core.common.businessentities.StorageServerConnections result = dao.get(existingConnection.geIid()); assertEquals(existingConnection, result); }	@org.junit.Test public void testUpdateIscsiServerConnection() { existingConnection.setIqn("1.2.3.4"); dao.update(existingConnection); org.ovirt.engine.core.common.businessentities.StorageServerConnections result = dao.get(existingConnection.getId()); assertEquals(existingConnection, result); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Cluster cluster) { validateParameters(cluster, "name"); validateEnums(org.ovirt.engine.api.model.Cluster.class, cluster); org.ovirt.engine.api.model.DataCenter dataCenter = new org.ovirt.engine.api.model.DataCenter(); dataCenter.setId(dataCenterId.toString()); cluster.setDataCenter(dataCenter); org.ovirt.engine.core.common.businessentities.StoragePool pool = org.ovirt.engine.api.restapi.resource.BackendDataCenterResource.getStoragePool(cluster.getDataCenter(), this); org.ovirt.engine.core.common.businessentities.VDSGroup entity = map(cluster, map(pool)); return performCreate(VdcActionType.AddVdsGroup, new org.ovirt.engine.core.common.action.AddVdsGroupOperationParameters(entity), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetVdsGroupById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }	@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Cluster cluster) { validateParameters(cluster, "name"); validateEnums(org.ovirt.engine.api.model.Cluster.class, cluster); org.ovirt.engine.api.model.DataCenter dataCenter = new org.ovirt.engine.api.model.DataCenter(); dataCenter.setId(dataCenterId.toString()); cluster.setDataCenter(dataCenter); org.ovirt.engine.core.common.businessentities.StoragePool pool = org.ovirt.engine.api.restapi.resource.BackendDataCenterResource.getStoragePool(cluster.getDataCenter(), this); org.ovirt.engine.core.common.businessentities.VDSGroup entity = map(cluster, map(pool)); return performCreate(VdcActionType.AddVdsGroup, new org.ovirt.engine.core.common.action.AddClusterOperationParameters(entity), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetVdsGroupById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
public void setpm_port(java.lang.Integer value) { mVdsStatic.setPmPort(value); }	public void setPmPort(java.lang.Integer value) { mVdsStatic.setPmPort(value); }
public static java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getPluggedActiveImagesForVm(org.ovirt.engine.core.compat.Guid vmId) { return org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(vmId, true), org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.NOT_SHAREABLE_DISKS_ONLY, org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.ACTIVE_DISKS_ONLY); }	public static java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getPluggedActiveImagesForVm(org.ovirt.engine.core.compat.Guid vmId) { return org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(vmId, true), org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.ONLY_ACTIVE); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmDevice mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(); vmDevice.setId(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getGuidDefaultEmpty(rs, "device_id"), getGuidDefaultEmpty(rs, "vm_id"))); vmDevice.setDevice(rs.getString("device")); vmDevice.setType(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.forValue(rs.getString("type"))); vmDevice.setAddress(rs.getString("address")); vmDevice.setBootOrder(rs.getInt("boot_order")); vmDevice.setSpecParams(org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserializeOrCreateNew(rs.getString("spec_params"), java.util.HashMap.class)); vmDevice.setIsManaged(rs.getBoolean("is_managed")); vmDevice.setIsPlugged(rs.getBoolean("is_plugged")); vmDevice.setIsReadOnly(rs.getBoolean("is_readonly")); vmDevice.setAlias(rs.getString("alias")); vmDevice.setCustomProperties(org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserializeOrCreateNew(rs.getString("custom_properties"), java.util.LinkedHashMap.class)); vmDevice.setSnapshotId(getGuid(rs, "snapshot_id")); vmDevice.setLogicalName(rs.getString("logical_name")); vmDevice.setScsiReservationUsed(rs.getBoolean("is_scsi_reservation_used")); return vmDevice; }	@java.lang.SuppressWarnings("unchecked") @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmDevice mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(); vmDevice.setId(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getGuidDefaultEmpty(rs, "device_id"), getGuidDefaultEmpty(rs, "vm_id"))); vmDevice.setDevice(rs.getString("device")); vmDevice.setType(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.forValue(rs.getString("type"))); vmDevice.setAddress(rs.getString("address")); vmDevice.setBootOrder(rs.getInt("boot_order")); vmDevice.setSpecParams(org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserializeOrCreateNew(rs.getString("spec_params"), java.util.HashMap.class)); vmDevice.setIsManaged(rs.getBoolean("is_managed")); vmDevice.setIsPlugged(rs.getBoolean("is_plugged")); vmDevice.setIsReadOnly(rs.getBoolean("is_readonly")); vmDevice.setAlias(rs.getString("alias")); vmDevice.setCustomProperties(org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserializeOrCreateNew(rs.getString("custom_properties"), java.util.LinkedHashMap.class)); vmDevice.setSnapshotId(getGuid(rs, "snapshot_id")); vmDevice.setLogicalName(rs.getString("logical_name")); vmDevice.setUsingScsiReservation(rs.getBoolean("is_using_scsi_reservation")); return vmDevice; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> list = ((java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); if (list != null) { if (isItem == null) { for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : this.getDisks()) { diskModel.getDiskProfile().setItems(list); for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile : list) { if (((diskModel.getDisk()) instanceof org.ovirt.engine.core.common.businessentities.DiskImage) && (diskProfile.getId().equals(((org.ovirt.engine.core.common.businessentities.DiskImage) (diskModel.getDisk())).getDiskProfileId()))) { diskModel.getDiskProfile().setSelectedItem(diskProfile); } } } } else { org.ovirt.engine.core.common.businessentities.profiles.DiskProfile selectedDiskProfile = null; if ((isItem.getSelectedItem()) != null) { selectedDiskProfile = isItem.getSelectedItem(); } isItem.setItems(list); if ((selectedDiskProfile != null) && ((list.size()) > 1)) { for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile : list) { if (diskProfile.getId().equals(selectedDiskProfile.getId())) { isItem.setSelectedItem(diskProfile); } } } } } }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> fetchedDiskProfiles = ((java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); this.setDiskProfilesList(diskProfiles, fetchedDiskProfiles); }
protected boolean checkTemplateInDestStorageDomain() { boolean retValue = true; if (((org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.ImageOperation.Move)) && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().getItGuid())))) { org.ovirt.engine.core.common.businessentities.DiskImage templateImage = org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getDiskImageDao().get(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().getItGuid()); if (!(templateImage.getStorageIds().contains(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()))) { retValue = false; addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return retValue; }	protected boolean checkTemplateInDestStorageDomain() { boolean retValue = true; if (((org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.ImageOperation.Move)) && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().getImageTemplateId())))) { org.ovirt.engine.core.common.businessentities.DiskImage templateImage = org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getDiskImageDao().get(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().getImageTemplateId()); if (!(templateImage.getStorageIds().contains(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()))) { retValue = false; addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return retValue; }
@org.junit.Test public void passwordNotProvidedForHostInstallation() { when(host.getVdsType()).thenReturn(VDSType.VDS); validator = createValidatorForHostInstallation(); assertThat(validator.passwordProvidedForHostInstallation(AuthenticationMethod.Password, null), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessages.VDS_CANNOT_INSTALL_EMPTY_PASSWORD)); }	@org.junit.Test public void passwordNotProvidedForHostInstallation() { when(host.getVdsType()).thenReturn(VDSType.VDS); validator = createValidatorForHostInstallation(); assertThat(validator.passwordProvidedForHostInstallation(AuthenticationMethod.Password, null), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.VDS_CANNOT_INSTALL_EMPTY_PASSWORD)); }
@java.lang.Override public java.lang.Long getRawValue(org.ovirt.engine.core.common.businessentities.StorageDomain object) { java.lang.Integer confirmedAvailableSize = object.getConfirmedAvailableDiskSize(); return confirmedAvailableSize == null ? null : java.lang.Long.valueOf(confirmedAvailableSize); }	@java.lang.Override public java.lang.Long getRawValue(org.ovirt.engine.core.common.businessentities.StorageDomain object) { java.lang.Integer confirmedAvailableSize = object.getConfirmedAvailableDiskSize(); java.lang.Long availableDiskSize = ((object.getAvailableDiskSize()) == null) ? null : java.lang.Long.valueOf(object.getAvailableDiskSize()); return confirmedAvailableSize == null ? availableDiskSize : java.lang.Long.valueOf(confirmedAvailableSize); }
public boolean containsSubResource(java.lang.String path) { if ((subResources) != null) { for (org.ovirt.engine.api.rsdl.Node node : subResources) { if (node.getPath().equals(path)) { return true; } } } return false; }	public boolean containsSubService(java.lang.String path) { if ((subServices) != null) { for (org.ovirt.engine.api.rsdl.ServiceTreeNode node : subServices) { if (node.getPath().equals(path)) { return true; } } } return false; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VDSGroup getFromCache(org.ovirt.engine.core.compat.Guid id) { return get(id); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.VDSGroup getFromCache(org.ovirt.engine.core.compat.Guid id) { return org.ovirt.engine.core.dal.EntityCache.getInstance().getFromCache(id, this); }
public void setVolumeConfigOptions(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeSnapshotConfigModel>> volumeConfigOptions) { this.volumeConfigOptions = volumeConfigOptions; }	public java.lang.String getExistingVolumeConfigValue(java.lang.String cfgName) { return existingVolumeConfigs.get(cfgName); }
@java.lang.Override public void OnSuccess(java.lang.Object model1, java.lang.Object result1) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network> networks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>(); for (org.ovirt.engine.core.common.businessentities.network.Network a : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>) (result1))) { if (((a.getCluster().getStatus()) == (org.ovirt.engine.core.common.businessentities.network.NetworkStatus.OPERATIONAL)) && (a.isVmNetwork())) { networks.add(a); } } if (hotUpdateSupported) { networks.add(null); } java.util.Collections.sort(networks, new java.util.Comparator<org.ovirt.engine.core.common.businessentities.network.Network>() { private org.ovirt.engine.core.common.utils.LexoNumericComparator lexoNumeric = new org.ovirt.engine.core.common.utils.LexoNumericComparator(); @java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.network.Network net1, org.ovirt.engine.core.common.businessentities.network.Network net2) { if (net1 == null) { return 1; } else if (net2 == null) { return -1; } else { return lexoNumeric.compare(net1.getName(), net2.getName()); } } }); getNetwork().setItems(networks); initSelectedNetwork(); okCommand.setIsExecutionAllowed(true); }	@java.lang.Override public void OnSuccess(java.lang.Object model1, java.lang.Object result1) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network> networks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>(); for (org.ovirt.engine.core.common.businessentities.network.Network a : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>) (result1))) { if (((a.getCluster().getStatus()) == (org.ovirt.engine.core.common.businessentities.network.NetworkStatus.OPERATIONAL)) && (a.isVmNetwork())) { networks.add(a); } } if (hotUpdateSupported) { networks.add(null); } java.util.Collections.sort(networks, new java.util.Comparator<org.ovirt.engine.core.common.businessentities.network.Network>() { private org.ovirt.engine.core.common.utils.LexoNumericComparator lexoNumeric = new org.ovirt.engine.core.common.utils.LexoNumericComparator(); @java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.network.Network net1, org.ovirt.engine.core.common.businessentities.network.Network net2) { if (net1 == null) { return net2 == null ? 0 : 1; } else if (net2 == null) { return -1; } return lexoNumeric.compare(net1.getName(), net2.getName()); } }); getNetwork().setItems(networks); initSelectedNetwork(); okCommand.setIsExecutionAllowed(true); }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__ACTION__CREATE); addValidateMessage(EngineMessage.VAR__TYPE__SNAPSHOT); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__CREATE); addValidationMessage(EngineMessage.VAR__TYPE__SNAPSHOT); }
protected javax.ws.rs.core.Response attachDiskToVm(org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource resource, org.ovirt.engine.api.model.DiskAttachment attachment, org.ovirt.engine.api.restapi.resource.IResolver entityResolver) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(attachment.getDisk().getId()); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = map(attachment); dve.getId().setVmId(vmId); dve.getId().setDeviceId(diskId); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve); org.ovirt.engine.api.model.Disk disk = attachment.getDisk(); boolean diskActive = isDiskActive(attachment, disk); params.setPlugUnPlug(diskActive); boolean isDiskReadOnly = false; if (disk.isSetReadOnly()) { isDiskReadOnly = org.apache.commons.lang.BooleanUtils.toBoolean(disk.isReadOnly()); } params.setReadOnly(isDiskReadOnly); if (disk.isSetSnapshot()) { validateParameters(disk, "snapshot.id"); params.setSnapshotId(asGuid(disk.getSnapshot().getId())); } return resource.performCreate(VdcActionType.AttachDiskToVm, params, entityResolver); }	protected javax.ws.rs.core.Response attachDiskToVm(org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource resource, org.ovirt.engine.api.model.DiskAttachment attachment, org.ovirt.engine.api.restapi.resource.IResolver entityResolver) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(attachment.getDisk().getId()); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = map(attachment); dve.getId().setVmId(vmId); dve.getId().setDeviceId(diskId); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve); org.ovirt.engine.api.model.Disk disk = attachment.getDisk(); boolean isDiskActive = false; if (attachment.isSetActive()) { isDiskActive = org.apache.commons.lang.BooleanUtils.toBoolean(attachment.isActive()); } params.setPlugUnPlug(isDiskActive); boolean isDiskReadOnly = false; if (disk.isSetReadOnly()) { isDiskReadOnly = org.apache.commons.lang.BooleanUtils.toBoolean(disk.isReadOnly()); } params.setReadOnly(isDiskReadOnly); if (disk.isSetSnapshot()) { validateParameters(disk, "snapshot.id"); params.setSnapshotId(asGuid(disk.getSnapshot().getId())); } return resource.performCreate(VdcActionType.AttachDiskToVm, params, entityResolver); }
@org.junit.Test public void testAddHostedEngineStorageFails() { parameters.getStorageDomain().setStorageName(StorageConstants.HOSTED_ENGINE_STORAGE_DOMAIN_NAME); when(command.getStorageDomainStaticDAO().get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdStatic = command.getStorageDomain().getStorageStaticData(); doReturn(new org.ovirt.engine.core.common.utils.Pair(sdStatic, sdStatic.getId())).when(command).executeHSMGetStorageDomainInfo(any(org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters.class)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); }	@org.junit.Test public void testAddHostedEngineStorageSucceeds() { parameters.getStorageDomain().setStorageName(StorageConstants.HOSTED_ENGINE_STORAGE_DOMAIN_NAME); when(command.getStorageDomainStaticDao().get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdStatic = command.getStorageDomain().getStorageStaticData(); doReturn(new org.ovirt.engine.core.common.utils.Pair(sdStatic, sdStatic.getId())).when(command).executeHSMGetStorageDomainInfo(any(org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters.class)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm)) { return false; } org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm other = ((org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm) (obj)); return ((((((java.util.Objects.equals(vmDynamic, other.vmDynamic)) && (java.util.Objects.equals(vmGuestAgentInterfaces, other.vmGuestAgentInterfaces))) && (java.util.Objects.equals(vmStatistics, other.vmStatistics))) && (java.util.Objects.equals(vNumaNodeStatisticsList, other.vNumaNodeStatisticsList))) && (java.util.Objects.equals(lunsMap, other.lunsMap))) && (java.util.Objects.equals(diskStatistics, other.diskStatistics))) && (java.util.Objects.equals(interfaceStatistics, other.interfaceStatistics)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm)) { return false; } org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm other = ((org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm) (obj)); return (((((java.util.Objects.equals(vmDynamic, other.vmDynamic)) && (java.util.Objects.equals(vmGuestAgentInterfaces, other.vmGuestAgentInterfaces))) && (java.util.Objects.equals(vmStatistics, other.vmStatistics))) && (java.util.Objects.equals(lunsMap, other.lunsMap))) && (java.util.Objects.equals(diskStatistics, other.diskStatistics))) && (java.util.Objects.equals(interfaceStatistics, other.interfaceStatistics)); }
public void OnRemove() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> pb = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.core.common.businessentities.NetworkEntity a : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.NetworkEntity>Cast(getSelectedItems())) { pb.add(new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(getEntity().getId(), a)); } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.RemoveNetwork, pb); Cancel(); }	public void OnRemove() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> pb = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.core.common.businessentities.Network a : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.Network>Cast(getSelectedItems())) { pb.add(new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(getEntity().getId(), a)); } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.RemoveNetwork, pb); Cancel(); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Bricks") java.lang.String bricksStatusVolume();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Bricks") java.lang.String bricksStatusVolume();
public void getGlusterHook(org.ovirt.engine.ui.frontend.AsyncQuery<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity> aQuery, org.ovirt.engine.core.compat.Guid hookId, boolean includeServerHooks) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookById, new org.ovirt.engine.core.common.queries.gluster.GlusterHookQueryParameters(hookId, includeServerHooks), aQuery); }	public void getGlusterHook(org.ovirt.engine.ui.frontend.AsyncQuery<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity> aQuery, org.ovirt.engine.core.compat.Guid hookId, boolean includeServerHooks) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookById, new org.ovirt.engine.core.common.queries.gluster.GlusterHookQueryParameters(hookId, includeServerHooks), aQuery); }
private void doDataCenterSearch() { final org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>> dcQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); dcQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>>() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> result) { setDataCenters(result); doNetworksSearch(); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterList(dcQuery, false); }	private void doDataCenterSearch() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterList(new org.ovirt.engine.ui.uicommonweb.models.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>>() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> result) { setDataCenters(result); doNetworksSearch(); } }), false); }
@java.lang.Override public org.ovirt.engine.api.model.Disk update(org.ovirt.engine.api.model.Disk resource) { org.ovirt.engine.api.restapi.resource.validation.ValidatorLocator.getValidator(org.ovirt.engine.api.model.Disk.class).validateEnums(resource); return super.update(resource); }	@java.lang.Override public org.ovirt.engine.api.model.Disk update(org.ovirt.engine.api.model.Disk resource) { validateEnums(org.ovirt.engine.api.model.Disk.class, resource); return super.update(resource); }
public java.lang.String[] listPrimaryMenuIds() { java.util.List<java.lang.String> ids = menuPresenterWidget.getPrimaryMenuIds(); return ids.toArray(new java.lang.String[ids.size()]); }	public void addPrimaryMenuContainer(java.lang.String label, java.lang.String primaryMenuId, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { menuPresenterWidget.addPrimaryMenuItemContainer(label, primaryMenuId, options.getPriority().intValue(), options.getIcon()); }
private void prepareMocks(org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommand command) { doReturn(volumeDao).when(command).getGlusterVolumeDao(); doReturn(getVds(VDSStatus.Up)).when(command).getUpServer(); doReturn(getGlusterVolume(org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.stoppedVolumeId)).when(volumeDao).getById(org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.stoppedVolumeId); doReturn(getGlusterVolume(org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.startedVolumeId)).when(volumeDao).getById(org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.startedVolumeId); doReturn(null).when(volumeDao).getById(null); }	private void prepareMocks(org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommand command) { doReturn(volumeDao).when(command).getGlusterVolumeDao(); doReturn(getVds(VDSStatus.Up)).when(command).getUpServer(); doReturn(getGlusterVolume(org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.STOPPED_VOLUME_ID)).when(volumeDao).getById(org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.STOPPED_VOLUME_ID); doReturn(getGlusterVolume(org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.STARTED_VOLUME_ID)).when(volumeDao).getById(org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.STARTED_VOLUME_ID); doReturn(null).when(volumeDao).getById(null); }
@org.junit.Before public void setup() { vm = new org.ovirt.engine.core.common.businessentities.VM(); validator = spy(new org.ovirt.engine.core.bll.validator.VmValidator(vm)); }	@org.junit.Before public void setUp() { vm = new org.ovirt.engine.core.common.businessentities.VM(); validator = new org.ovirt.engine.core.bll.validator.VmValidator(vm); }
@java.lang.Override public boolean runInThread(java.lang.Runnable runnable) { try { executorService.submit(runnable); return true; } catch (java.util.concurrent.RejectedExecutionException e) { log.error(("Task rejected due to: " + (e.getMessage())), e); return false; } }	@java.lang.Override public boolean runInThread(java.lang.Runnable runnable) { try { executorService.submit(runnable); return true; } catch (java.util.concurrent.RejectedExecutionException e) { log.error("Task rejected due to: ", e); return false; } }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { java.io.File file = org.ovirt.engine.core.utils.ServletUtils.getFileFromString(request.getPathInfo(), base); file = checkForIndex(request, response, file, request.getPathInfo()); if (null == file) { response.sendError(HttpServletResponse.SC_NOT_FOUND); } else { org.ovirt.engine.core.utils.ServletUtils.sendFile(request, response, file, type); } }	@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { java.io.File file = org.ovirt.engine.core.utils.ServletUtils.makeFileFromSanePath(request.getPathInfo(), base); file = checkForIndex(request, response, file, request.getPathInfo()); if (file == null) { response.sendError(HttpServletResponse.SC_NOT_FOUND); } else { org.ovirt.engine.core.utils.ServletUtils.sendFile(request, response, file, type); } }
@org.junit.Test public void typeMatchesProfileOnlyTypePassthrough() { typeMatchesProfileCommon(true, false); assertThat(validator.typeMatchesProfile(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessages.ACTION_TYPE_FAILED_VM_INTERFACE_TYPE_NOT_MATCH_PROFILE)); }	@org.junit.Test public void typeMatchesProfileOnlyTypePassthrough() { typeMatchesProfileCommon(true, false); assertThat(validator.typeMatchesProfile(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_VM_INTERFACE_TYPE_NOT_MATCH_PROFILE)); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Allow to configure Temlate Network") java.lang.String allowToConfigureTemlateNetworkRoleTreeTooltip();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to configure Temlate Network") java.lang.String allowToConfigureTemlateNetworkRoleTreeTooltip();
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.numa.vm.RemoveVmNumaNodesCommand.getVm()) == null) { return failCanDoAction(EngineMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND); } return true; }	@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.numa.vm.RemoveVmNumaNodesCommand.getVm()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } return true; }
@org.junit.Test public void shouldNotElectUnknownHostedEngineDomain() { prepareStorageDomainForElection(StorageDomainStatus.Unknown, org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); doReturn(true).when(cmd).isHostedEngine(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); assertEquals(null, cmd.electNewMaster()); }	@org.junit.Test public void shouldNotElectUnknownHostedEngineDomain() { prepareStorageDomainForElection(StorageDomainStatus.Unknown, org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); when(hostedEngineHelper.isHostedEngineStorageDomain(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(true); assertEquals(null, cmd.electNewMaster()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if (!(org.ovirt.engine.core.common.utils.HugePageUtils.isBackedByHugepages(vm.getStaticData()))) { return new java.util.ArrayList(hosts); } java.util.Map<java.lang.Integer, java.lang.Integer> requiredPages = org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(vm.getStaticData()); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> newHosts = new java.util.ArrayList(hosts.size()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { java.util.Map<java.lang.Integer, java.lang.Integer> availablePages = substractMaps(prepareHugePageMap(host), org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages.collectForHost(getPendingResourceManager(), host.getId())); if (!(requiredPages.entrySet().stream().allMatch(( pg) -> (availablePages.getOrDefault(pg.getKey(), 0)) >= (pg.getValue())))) { org.ovirt.engine.core.bll.scheduling.policyunits.HugePagesFilterPolicyUnit.log.debug("Host {} does not have enough free hugepages for VM {}", host.getId(), vm.getId()); messages.addMessage(host.getId(), EngineMessage.VAR__DETAIL__NOT_ENOUGH_HUGE_PAGES.name()); } else { newHosts.add(host); } } return newHosts; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if (!(org.ovirt.engine.core.common.utils.HugePageUtils.isBackedByHugepages(vm.getStaticData()))) { return new java.util.ArrayList(hosts); } java.util.Map<java.lang.Integer, java.lang.Integer> requiredPages = org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(vm.getStaticData()); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> newHosts = new java.util.ArrayList(hosts.size()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { java.util.Map<java.lang.Integer, java.lang.Integer> availablePages = subtractMaps(prepareHugePageMap(host), org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages.collectForHost(getPendingResourceManager(), host.getId())); if (!(requiredPages.entrySet().stream().allMatch(( pg) -> (availablePages.getOrDefault(pg.getKey(), 0)) >= (pg.getValue())))) { org.ovirt.engine.core.bll.scheduling.policyunits.HugePagesFilterPolicyUnit.log.debug("Host {} does not have enough free hugepages for VM {}", host.getId(), vm.getId()); messages.addMessage(host.getId(), EngineMessage.VAR__DETAIL__NOT_ENOUGH_HUGE_PAGES.name()); } else { newHosts.add(host); } } return newHosts; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog> getAllByUserId(org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("user_id", userID).addValue("is_filtered", isFiltered); return getCallsHandler().executeReadList("GetAuditLogByUserId", org.ovirt.engine.core.dao.AuditLogDAODbFacadeImpl.auditLogRowMapper, parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog> getAll(org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("user_id", userID).addValue("is_filtered", isFiltered); return getCallsHandler().executeReadList("GetAllFromAuditLog", org.ovirt.engine.core.dao.AuditLogDAODbFacadeImpl.auditLogRowMapper, parameterSource); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.utils.PairQueryable<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, org.ovirt.engine.core.common.businessentities.VDS> object) { java.util.Set<java.lang.String> lablesList = object.getFirst().getLabels(); return org.ovirt.engine.core.compat.StringHelper.join(", ", (lablesList != null ? lablesList.toArray() : null)); }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.utils.PairQueryable<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, org.ovirt.engine.core.common.businessentities.VDS> object) { return ((object.getFirst()) != null) && (getDetailModel().isInterfaceAttachedByLabel(object.getFirst())) ? com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(getDetailModel().getEntity().getLabel()) : null; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.Role get(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id); return getCallsHandler().executeRead("GetRolsByid", org.ovirt.engine.core.dao.RoleDAOImpl.RolesRowMapper.instance, parameterSource); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.Role get(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id); return getCallsHandler().executeRead("GetRolsByid", org.ovirt.engine.core.dao.RoleDaoImpl.RolesRowMapper.instance, parameterSource); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } oldMacPool = macPoolDao.get(getMacPoolId()); return (((validate(new org.ovirt.engine.core.bll.MacPoolValidator(oldMacPool).macPoolExists())) && (validate(new org.ovirt.engine.core.bll.MacPoolValidator(getMacPoolEntity()).hasUniqueName()))) && (validate(org.ovirt.engine.core.bll.UpdateMacPoolCommand.validateDefaultFlagIsNotChanged(oldMacPool, getMacPoolEntity())))) && (validate(validateDuplicatesConfiguration())); }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } oldMacPool = macPoolDao.get(getMacPoolId()); org.ovirt.engine.core.bll.MacPoolValidator validator = new org.ovirt.engine.core.bll.MacPoolValidator(getMacPoolEntity()); return (((validate(new org.ovirt.engine.core.bll.MacPoolValidator(oldMacPool).macPoolExists())) && (validate(validator.hasUniqueName()))) && (validate(validator.validateDuplicates(macPoolPerCluster)))) && (validate(org.ovirt.engine.core.bll.UpdateMacPoolCommand.validateDefaultFlagIsNotChanged(oldMacPool, getMacPoolEntity()))); }
protected void readUserDomainsSection(@java.lang.SuppressWarnings("unused") org.ovirt.engine.core.utils.ovf.xml.XmlNode section) { }	protected void readUserDomainsSection(@java.lang.SuppressWarnings("unused") org.ovirt.engine.core.utils.ovf.xml.XmlNode section) { org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = selectNodes(section, OvfProperties.USER); java.util.Set<org.ovirt.engine.core.common.businessentities.aaa.DbUser> dbUsers = new java.util.HashSet<>(); java.util.Map<java.lang.String, java.util.Set<java.lang.String>> userToRoles = new java.util.HashMap<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : list) { java.lang.String userDomain = selectSingleNode(node, OvfProperties.USER_DOMAIN, _xmlNS).innerText; org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = new org.ovirt.engine.core.common.businessentities.aaa.DbUser(); dbUser.setLoginName(userDomain.split("@")[0]); dbUser.setDomain(userDomain.split("@")[1]); dbUsers.add(dbUser); org.ovirt.engine.core.utils.ovf.xml.XmlNode rolesElement = selectSingleNode(node, OvfProperties.USER_ROLES); org.ovirt.engine.core.utils.ovf.xml.XmlNodeList roleNodes = selectNodes(rolesElement, OvfProperties.ROLE_NAME); java.util.Set<java.lang.String> roleNames = new java.util.HashSet<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode roleNode : roleNodes) { java.lang.String roleName = roleNode.innerText; roleNames.add(roleName); } userToRoles.put(dbUser.getLoginName(), roleNames); } fullEntityOvfData.setDbUsers(dbUsers); fullEntityOvfData.setUserToRoles(userToRoles); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.help.HelpTag getHashTag() { return org.ovirt.engine.ui.uicommonweb.help.HelpTag.edit_storage_qos; }	@java.lang.Override public org.ovirt.engine.ui.uicommonweb.help.HelpTag getHelpTag() { return org.ovirt.engine.ui.uicommonweb.help.HelpTag.edit_storage_qos; }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.StoragePool pool) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("description", pool.getdescription()).addValue("comment", pool.getComment()).addValue("id", pool.getId()).addValue("name", pool.getname()).addValue("storage_pool_type", pool.getstorage_pool_type()).addValue("status", pool.getstatus()).addValue("master_domain_version", pool.getmaster_domain_version()).addValue("spm_vds_id", pool.getspm_vds_id()).addValue("quota_enforcement_type", pool.getQuotaEnforcementType()).addValue("compatibility_version", pool.getcompatibility_version()); getCallsHandler().executeModification("Insertstorage_pool", parameterSource); }	@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.StoragePool pool) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("description", pool.getdescription()).addValue("free_text_comment", pool.getComment()).addValue("id", pool.getId()).addValue("name", pool.getname()).addValue("storage_pool_type", pool.getstorage_pool_type()).addValue("status", pool.getstatus()).addValue("master_domain_version", pool.getmaster_domain_version()).addValue("spm_vds_id", pool.getspm_vds_id()).addValue("quota_enforcement_type", pool.getQuotaEnforcementType()).addValue("compatibility_version", pool.getcompatibility_version()); getCallsHandler().executeModification("Insertstorage_pool", parameterSource); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("External Host") java.lang.String hostPopupExternalHosts();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("External Hosts") java.lang.String hostPopupExternalHostName();
public java.util.List<java.lang.Long> allocateAvailableMacs(int numberOfMacs) { if ((getAvailableMacsCount()) < numberOfMacs) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.MAC_POOL_NO_MACS_LEFT); } final java.util.List<java.lang.Long> result = new java.util.ArrayList<>(numberOfMacs); int remainingMacs = numberOfMacs; while (remainingMacs > 0) { final org.ovirt.engine.core.bll.network.macpoolmanager.Range rangeWithAvailableMac = getRangeWithAvailableMac(); if (rangeWithAvailableMac == null) { continue; } final java.util.List<java.lang.Long> allocatedMacs = rangeWithAvailableMac.allocateMacs(remainingMacs); remainingMacs -= allocatedMacs.size(); result.addAll(allocatedMacs); } return result; }	public java.util.List<java.lang.Long> allocateAvailableMacs(int numberOfMacs) { if ((getAvailableMacsCount()) < numberOfMacs) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.MAC_POOL_NO_MACS_LEFT); } final java.util.List<java.lang.Long> result = new java.util.ArrayList<>(numberOfMacs); int remainingMacs = numberOfMacs; while (remainingMacs > 0) { final org.ovirt.engine.core.bll.network.macpoolmanager.Range rangeWithAvailableMac = getRangeWithAvailableMac(); org.apache.commons.lang.Validate.notNull(rangeWithAvailableMac); final java.util.List<java.lang.Long> allocatedMacs = rangeWithAvailableMac.allocateMacs(remainingMacs); remainingMacs -= allocatedMacs.size(); result.addAll(allocatedMacs); } return result; }
@javax.ws.rs.POST @org.jboss.resteasy.annotations.providers.jaxb.Formatted @javax.ws.rs.Consumes({ ApiMediaType.APPLICATION_XML, ApiMediaType.APPLICATION_JSON, ApiMediaType.APPLICATION_X_YAML }) @org.ovirt.engine.api.model.Actionable @javax.ws.rs.Path("hosted_engine_maintenance") public javax.ws.rs.core.Response hostedEngineMaintenance(org.ovirt.engine.api.model.Action action);	@javax.ws.rs.POST @org.jboss.resteasy.annotations.providers.jaxb.Formatted @javax.ws.rs.Consumes({ ApiMediaType.APPLICATION_XML, ApiMediaType.APPLICATION_JSON, ApiMediaType.APPLICATION_X_YAML }) @org.ovirt.engine.api.model.Actionable @javax.ws.rs.Path("maintenance") public javax.ws.rs.core.Response maintenance(org.ovirt.engine.api.model.Action action);
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.ui.uicommonweb.models.vms.IconWithOsDefault)) return false; org.ovirt.engine.ui.uicommonweb.models.vms.IconWithOsDefault other = ((org.ovirt.engine.ui.uicommonweb.models.vms.IconWithOsDefault) (obj)); return (((java.util.Objects.equals(icon, other.icon)) && (java.util.Objects.equals(osDefaultIcon, other.osDefaultIcon))) && (java.util.Objects.equals(smallIconId, other.smallIconId))) && (java.util.Objects.equals(validationResult, other.validationResult)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.ui.uicommonweb.models.vms.IconWithOsDefault)) { return false; } org.ovirt.engine.ui.uicommonweb.models.vms.IconWithOsDefault other = ((org.ovirt.engine.ui.uicommonweb.models.vms.IconWithOsDefault) (obj)); return (((java.util.Objects.equals(icon, other.icon)) && (java.util.Objects.equals(osDefaultIcon, other.osDefaultIcon))) && (java.util.Objects.equals(smallIconId, other.smallIconId))) && (java.util.Objects.equals(validationResult, other.validationResult)); }
public void performAction() { this.sendHeartbeat(); }	public void performAction() { if (((!(this.isInInit())) && (this.policy.isOutgoingHeartbeat())) && (this.isOutgoingHeartbeatExeeded())) { this.sendHeartbeat(); } }
public void applyData(java.util.List<org.ovirt.engine.core.common.businessentities.LUNs> source, boolean isIncluded, java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>> selectedItems) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> newItems = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>(); for (org.ovirt.engine.core.common.businessentities.LUNs a : source) { if (((a.getLunType()) == (getType())) || ((a.getLunType()) == (org.ovirt.engine.core.common.businessentities.StorageType.UNKNOWN))) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel> targets = createTargetModelList(a); org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lunModel = new org.ovirt.engine.ui.uicommonweb.models.storage.LunModel(); lunModel.setLunId(a.getLUN_id()); lunModel.setVendorId(a.getVendorId()); lunModel.setProductId(a.getProductId()); lunModel.setSerial(a.getSerial()); lunModel.setMultipathing(a.getPathCount()); lunModel.setTargets(targets); lunModel.setSize(a.getDeviceSize()); lunModel.setIsAccessible(a.getAccessible()); lunModel.setStatus(a.getStatus()); lunModel.setIsIncluded(isIncluded); lunModel.setIsSelected(containsLun(lunModel, selectedItems, isIncluded)); lunModel.setEntity(a); newItems.add(lunModel); updateGrayedOut(lunModel); if (isIncluded) { includedLUNs.add(lunModel); } } } initializeItems(newItems, null); proposeDiscover(); }	public void applyData(java.util.List<org.ovirt.engine.core.common.businessentities.LUNs> source, boolean isIncluded, java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>> selectedItems) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> newItems = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>(); for (org.ovirt.engine.core.common.businessentities.LUNs a : source) { if (((a.getLunType()) == (getType())) || ((a.getLunType()) == (org.ovirt.engine.core.common.businessentities.StorageType.UNKNOWN))) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel> targets = createTargetModelList(a); org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lunModel = new org.ovirt.engine.ui.uicommonweb.models.storage.LunModel(); lunModel.setLunId(a.getLUN_id()); lunModel.setVendorId(a.getVendorId()); lunModel.setProductId(a.getProductId()); lunModel.setSerial(a.getSerial()); lunModel.setMultipathing(a.getPathCount()); lunModel.setTargets(targets); lunModel.setSize(a.getDeviceSize()); lunModel.setIsAccessible(a.getAccessible()); lunModel.setStatus(a.getStatus()); lunModel.setIsIncluded(isIncluded); lunModel.setIsSelected(containsLun(lunModel, selectedItems, isIncluded)); lunModel.setEntity(a); newItems.add(lunModel); updateGrayedOut(lunModel); if (isIncluded) { includedLUNs.add(lunModel); } } } initializeItems(newItems, null); proposeDiscover(); }
protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { return java.util.stream.IntStream.range(0, NAMES.length).filter(( x) -> !notFound).boxed().collect(java.util.stream.Collectors.toMap(this::getVmTemplateEntity, java.util.ArrayList::new)); }	protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { if (notFound) { return java.util.Collections.emptyMap(); } return java.util.stream.IntStream.range(0, NAMES.length).boxed().collect(java.util.stream.Collectors.toMap(this::getVmTemplateEntity, java.util.ArrayList::new)); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Pinned") java.lang.String numaPinnedLabel();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Storage Domain") java.lang.String diskProfileStorageDomainLabel();
@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveIsNotValid() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond(); bond.setSlaves(java.util.Arrays.asList("slaveA", "slaveB")); org.ovirt.engine.core.bll.ValidationResult cannotBeSlaveValidationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_BOND_OR_VLAN_CANNOT_BE_SLAVE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostInterfaceValidator.VAR_INTERFACE_NAME, bond.getName())); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(bond))).build(); _doTestValidateModifiedBondSlaves(spy(validator), ValidationResult.VALID, cannotBeSlaveValidationResult, failsWith(cannotBeSlaveValidationResult)); }	@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveIsNotValid() throws java.lang.Exception { org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond = createNewCreateOrUpdateBond(org.ovirt.engine.core.compat.Guid.newGuid(), "bond1", "slaveA", "slaveB"); org.ovirt.engine.core.bll.ValidationResult cannotBeSlaveValidationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_BOND_OR_VLAN_CANNOT_BE_SLAVE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostInterfaceValidator.VAR_NIC_NAME, createOrUpdateBond.getName())); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(createOrUpdateBond)).build(); doTestValidateModifiedBondSlaves(spy(validator), ValidationResult.VALID, cannotBeSlaveValidationResult, failsWith(cannotBeSlaveValidationResult)); }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel<org.ovirt.engine.core.common.businessentities.Permissions> localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel<org.ovirt.engine.core.common.businessentities.Permissions>) (result.getState())); localModel.stopProgress(); cancel(); }	@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); }
@java.lang.Override protected void OnEntityChanged() { super.OnEntityChanged(); if ((getEntity()) != null) { UpdateProperties(); } }	@java.lang.Override protected void onEntityChanged() { super.onEntityChanged(); if ((getEntity()) != null) { updateProperties(); } }
private static void chooseHostForExecution(org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase parametersBase, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.bll.CommandBase<?> executingCommand, java.util.List<org.ovirt.engine.core.compat.Guid> executedHosts, boolean failIfNoHost) { org.ovirt.engine.core.compat.Guid vdsForExecution = org.ovirt.engine.core.bll.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, executedHosts, failIfNoHost); parametersBase.setVdsId(vdsForExecution); if (executingCommand != null) { executingCommand.getParameters().setVdsRunningOn(vdsForExecution); executingCommand.persistCommand(executingCommand.getParameters().getParentCommand(), ((executingCommand.getCallBack()) != null)); } }	private static void chooseHostForExecution(org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase parametersBase, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.bll.CommandBase<?> executingCommand, java.util.List<org.ovirt.engine.core.compat.Guid> executedHosts, boolean failIfNoHost) { org.ovirt.engine.core.compat.Guid vdsForExecution = org.ovirt.engine.core.bll.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, executedHosts, failIfNoHost); parametersBase.setVdsId(vdsForExecution); if (executingCommand != null) { executingCommand.getParameters().setVdsRunningOn(vdsForExecution); executingCommand.persistCommand(executingCommand.getParameters().getParentCommand(), ((executingCommand.getCallback()) != null)); } }
@java.lang.Override protected void ExecuteVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.getBroker().diskSizeExtend(org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.getParameters().getVmId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.getParameters().getDriveSpecs(), java.lang.String.valueOf(org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.getParameters().getNewSize())); org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.ProceedProxyReturnValue(); }	@java.lang.Override protected void ExecuteVdsBrokerCommand() { result = org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.getBroker().diskSizeExtend(org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.getParameters().getVmId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.getParameters().getDriveSpecs(), java.lang.String.valueOf(org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.getParameters().getNewSize())); org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.ProceedProxyReturnValue(); if (org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.getVDSReturnValue().getSucceeded()) { setReturnValue(result.getImageSize()); } }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__ACTION__UPDATE); addValidateMessage(EngineMessage.VAR__TYPE__QUOTA); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__UPDATE); addValidationMessage(EngineMessage.VAR__TYPE__QUOTA); }
private static org.ovirt.engine.core.common.businessentities.VmTemplate cloneVmTemplate(org.ovirt.engine.core.common.businessentities.VmTemplate instance) { org.ovirt.engine.core.common.businessentities.VmTemplate obj = new org.ovirt.engine.core.common.businessentities.VmTemplate(); obj.setStoragePoolId(instance.getStoragePoolId()); obj.setStoragePoolName(instance.getStoragePoolName()); obj.setDefaultDisplayType(instance.getDefaultDisplayType()); obj.setPriority(instance.getPriority()); obj.setIsoPath(instance.getIsoPath()); obj.setOrigin(instance.getOrigin()); obj.setSizeGB(instance.getSizeGB()); obj.setDiskImageMap(instance.getDiskImageMap()); obj.setInterfaces(instance.getInterfaces()); obj.setAutoStartup(instance.isAutoStartup()); obj.setChildCount(instance.getChildCount()); obj.setCpuPerSocket(instance.getCpuPerSocket()); obj.setCreationDate(instance.getCreationDate()); obj.setDefaultBootSequence(instance.getDefaultBootSequence()); obj.setComment(instance.getComment()); obj.setDomain(instance.getDomain()); obj.setFailBack(instance.isFailBack()); obj.setStateless(instance.isStateless()); obj.setMemSizeMb(instance.getMemSizeMb()); obj.setName(instance.getName()); obj.setNiceLevel(instance.getNiceLevel()); obj.setNumOfMonitors(instance.getNumOfMonitors()); obj.setAllowConsoleReconnect(instance.isAllowConsoleReconnect()); obj.setNumOfSockets(instance.getNumOfSockets()); obj.setStatus(instance.getStatus()); obj.setTimeZone(instance.getTimeZone()); obj.setUsbPolicy(instance.getUsbPolicy()); obj.setVdsGroupId(instance.getVdsGroupId()); obj.setVdsGroupName(instance.getVdsGroupName()); obj.setVmType(instance.getVmType()); obj.setId(instance.getId()); obj.setDiskList(instance.getDiskList()); obj.setRunAndPause(instance.isRunAndPause()); obj.setArchitecture(instance.getArchitecture()); return obj; }	private static org.ovirt.engine.core.common.businessentities.VmTemplate cloneVmTemplate(org.ovirt.engine.core.common.businessentities.VmTemplate instance) { org.ovirt.engine.core.common.businessentities.VmTemplate obj = new org.ovirt.engine.core.common.businessentities.VmTemplate(); obj.setStoragePoolId(instance.getStoragePoolId()); obj.setStoragePoolName(instance.getStoragePoolName()); obj.setDefaultDisplayType(instance.getDefaultDisplayType()); obj.setPriority(instance.getPriority()); obj.setIsoPath(instance.getIsoPath()); obj.setOrigin(instance.getOrigin()); obj.setSizeGB(instance.getSizeGB()); obj.setDiskImageMap(instance.getDiskImageMap()); obj.setInterfaces(instance.getInterfaces()); obj.setAutoStartup(instance.isAutoStartup()); obj.setChildCount(instance.getChildCount()); obj.setCpuPerSocket(instance.getCpuPerSocket()); obj.setCreationDate(instance.getCreationDate()); obj.setDefaultBootSequence(instance.getDefaultBootSequence()); obj.setComment(instance.getComment()); obj.setDomain(instance.getDomain()); obj.setFailBack(instance.isFailBack()); obj.setStateless(instance.isStateless()); obj.setMemSizeMb(instance.getMemSizeMb()); obj.setName(instance.getName()); obj.setNiceLevel(instance.getNiceLevel()); obj.setNumOfMonitors(instance.getNumOfMonitors()); obj.setAllowConsoleReconnect(instance.isAllowConsoleReconnect()); obj.setNumOfSockets(instance.getNumOfSockets()); obj.setStatus(instance.getStatus()); obj.setTimeZone(instance.getTimeZone()); obj.setUsbPolicy(instance.getUsbPolicy()); obj.setVdsGroupId(instance.getVdsGroupId()); obj.setVdsGroupName(instance.getVdsGroupName()); obj.setVmType(instance.getVmType()); obj.setId(instance.getId()); obj.setDiskList(instance.getDiskList()); obj.setRunAndPause(instance.isRunAndPause()); obj.setClusterArch(instance.getClusterArch()); return obj; }
@org.junit.Test public void testValidateNetworkExclusiveOnNicAtMostOneNonVmNetworkViolated() throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface(failsWithNetworkInterfacesNotExclusivelyUsedByNetwork(nonVmNetwork1, nonVmNetwork2), nonVmNetwork1, nonVmNetwork2); }	@org.junit.Test public void testValidateNetworkExclusiveOnNicAtMostOneNonVmNetworkViolated() throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface(failsWithNetworkInterfacesNotExclusivelyUsedByNetwork(), nonVmNetwork1, nonVmNetwork2); }
public java.lang.String getIfTotalSpeed() { return mVdsDynamic.getIfTotalSpeed(); }	public java.lang.String getIfTotalSpeed() { return vdsDynamic.getIfTotalSpeed(); }
private void initClusters(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters, org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> filteredList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>(); org.ovirt.engine.core.common.businessentities.StoragePool selectedDataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (getModel().getDataCenter().getSelectedItem())); boolean listContainsVmCluster = false; for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (selectedDataCenter.getId().equals(cluster.getStoragePoolId()))) { filteredList.add(cluster); if (vm.getVdsGroupId().getValue().equals(cluster.getId())) { listContainsVmCluster = true; } } } if (!listContainsVmCluster) { addVmCluster(filteredList); } else { java.util.Collections.sort(filteredList, new org.ovirt.engine.ui.uicommonweb.Linq.VdsGroupByNameComparer()); model.setClusters(model, filteredList, vm.getVdsGroupId().getValue()); } }	private boolean containsVmCluster(java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters) { for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters) { if ((cluster.getStoragePoolId()) != null) { if (vm.getVdsGroupId().getValue().equals(cluster.getId())) { return true; } } } return false; }
@java.lang.SuppressWarnings({ "unchecked", "rawtypes" }) @java.lang.Override public java.lang.String toString() { java.util.Map<java.lang.String, java.lang.String> result = null; if ((this.getResult()) != null) { java.lang.Class<java.util.Map<java.lang.String, java.lang.String>> clazz = ((java.lang.Class) (java.util.Map.class)); result = org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse.MAPPER.convertValue(this.getResult(), clazz); if (result.containsKey("password")) { result.put("password", "XXX"); } } java.lang.String response = ((this.getResult()) != null) ? " result: " + result : " error: " + (this.getError().toString()); return (("<JsonRpcResponse id: " + (this.getId())) + response) + ">"; }	@java.lang.SuppressWarnings({ "unchecked", "rawtypes" }) @java.lang.Override public java.lang.String toString() { java.util.Map<java.lang.String, java.lang.String> result = null; if ((this.getResult()) != null) { java.lang.Class<java.util.Map<java.lang.String, java.lang.String>> clazz = ((java.lang.Class) (java.util.Map.class)); result = org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse.MAPPER.convertValue(this.getResult(), clazz); if (result.containsKey("password")) { result.put("password", "*****"); } } java.lang.String response = ((this.getResult()) != null) ? " result: " + result : " error: " + (this.getError().toString()); return (("<JsonRpcResponse id: " + (this.getId())) + response) + ">"; }
public void clearCache() { synchronized(_lockObject) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.info(("clearing cache for problematic entities in pool " + (_storagePoolId))); _timers.clear(); _domainsInProblem.clear(); _vdssInProblem.clear(); } }	public void clearCache() { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.info(("clearing cache for problematic entities in pool " + (_storagePoolId))); _timers.clear(); _domainsInProblem.clear(); _vdssInProblem.clear(); }
protected boolean verifyAddVM() { final org.ovirt.engine.core.bll.network.MacPoolManagerStrategy macPool = org.ovirt.engine.core.bll.network.ScopedMacPoolManager.scopeFor().vm(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVm()).getPool(); final java.util.List<java.lang.String> reasons = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getReturnValue().getCanDoActionMessages(); final int nicsCount = (org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmsCount()) * (org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmNicDao().getAllForTemplate(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplateId()).size()); final int priority = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().getPriority(); return org.ovirt.engine.core.bll.VmHandler.verifyAddVm(reasons, nicsCount, priority, macPool); }	protected boolean verifyAddVM() { final java.util.List<java.lang.String> reasons = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getReturnValue().getCanDoActionMessages(); final int nicsCount = (org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmsCount()) * (org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmNicDao().getAllForTemplate(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplateId()).size()); final int priority = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().getPriority(); return org.ovirt.engine.core.bll.VmHandler.verifyAddVm(reasons, nicsCount, priority, org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getMacPool()); }
protected static org.dbunit.database.IDatabaseConnection getConnection() throws java.lang.Exception { java.sql.Connection con = org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource.getConnection(); org.dbunit.database.IDatabaseConnection connection = new org.dbunit.database.DatabaseConnection(con); connection.getConfig().setProperty(DatabaseConfig.FEATURE_ALLOW_EMPTY_FIELDS, true); connection.getConfig().setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY, org.ovirt.engine.core.dao.BaseDaoTestCase.dataFactory); if (org.ovirt.engine.core.dao.BaseDaoTestCase.needInitializationSql) { try (java.sql.Statement stmt = con.createStatement()) { stmt.executeUpdate(org.ovirt.engine.core.dao.BaseDaoTestCase.initSql); } } return connection; }	protected static org.dbunit.database.IDatabaseConnection getConnection() throws java.lang.Exception { java.sql.Connection con = org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource.getConnection(); org.dbunit.database.IDatabaseConnection connection = new org.dbunit.database.DatabaseConnection(con); connection.getConfig().setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY, org.ovirt.engine.core.dao.BaseDaoTestCase.dataFactory); connection.getConfig().setProperty(DatabaseConfig.FEATURE_ALLOW_EMPTY_FIELDS, true); if (org.ovirt.engine.core.dao.BaseDaoTestCase.needInitializationSql) { try (java.sql.Statement stmt = con.createStatement()) { stmt.executeUpdate(org.ovirt.engine.core.dao.BaseDaoTestCase.initSql); } } return connection; }
public java.lang.Integer getWarningLowSpaceSize() { if ((getWarningLowSpaceIndicator()) == null) { return null; } java.lang.Integer warningLowSpaceSize = ((getTotalDiskSize()) * (getWarningLowSpaceIndicator())) / 100; return warningLowSpaceSize; }	public int getWarningLowSpaceSize() { return (getWarningLowSpaceIndicator()) == null ? 0 : ((getTotalDiskSize()) * (getWarningLowSpaceIndicator())) / 100; }
@java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call() { getParameters().setStorageDomainId(getMasterDomainIdFromDb()); org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainPoolMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(getParameters().getNewMasterDomainId(), getParameters().getStoragePoolId(), org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().save(domainPoolMap); getParameters().setVdsId(getVds().getId()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = runInternalAction(VdcActionType.ReconstructMasterDomain, getParameters(), cloneOnlyEngineContext()); boolean reconstructVerbExecuted = ((returnVal.getActionReturnValue()) != null) ? ((java.lang.Boolean) (returnVal.getActionReturnValue())) : false; getStoragePoolDAO().updateStatus(getStoragePool().getId(), StoragePoolStatus.NonResponsive); if (!reconstructVerbExecuted) { getStoragePoolIsoMapDAO().remove(domainPoolMap.getId()); } if (returnVal.getSucceeded()) { updateStorageDomainFormat(loadTargetedMasterDomain()); } setSucceeded(returnVal.getSucceeded()); return new org.ovirt.engine.core.common.eventqueue.EventResult(reconstructVerbExecuted, org.ovirt.engine.core.common.eventqueue.EventType.RECONSTRUCT); }	@java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call() { getParameters().setStorageDomainId(getMasterDomainIdFromDb()); org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainPoolMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(getParameters().getNewMasterDomainId(), getParameters().getStoragePoolId(), org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().save(domainPoolMap); getParameters().setVdsId(getVds().getId()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = runInternalAction(VdcActionType.ReconstructMasterDomain, getParameters(), cloneContextAndDetachFromParent()); boolean reconstructVerbExecuted = ((returnVal.getActionReturnValue()) != null) ? ((java.lang.Boolean) (returnVal.getActionReturnValue())) : false; getStoragePoolDAO().updateStatus(getStoragePool().getId(), StoragePoolStatus.NonResponsive); if (!reconstructVerbExecuted) { getStoragePoolIsoMapDAO().remove(domainPoolMap.getId()); } if (returnVal.getSucceeded()) { updateStorageDomainFormat(loadTargetedMasterDomain()); } setSucceeded(returnVal.getSucceeded()); return new org.ovirt.engine.core.common.eventqueue.EventResult(reconstructVerbExecuted, org.ovirt.engine.core.common.eventqueue.EventType.RECONSTRUCT); }
@java.lang.Override protected java.lang.String getText(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity) { return entity.getBrickDirectory(); }	@java.lang.Override public java.lang.String render(org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionDetails object) { return object.getEntryOpsPending().toString(); }
private void allocateAndFreeMacAndExpectGivenMac(org.ovirt.engine.core.bll.network.macpoolmanager.Range range, long expectedMac) { java.lang.Long mac = range.allocateMacs(1).get(0); logger.info("expecting that MAC {} should be obtained, got {}", expectedMac, mac); assertThat(mac, is(expectedMac)); range.freeMac(mac); }	private void allocateAndFreeMacAndExpectGivenMac(org.ovirt.engine.core.bll.network.macpoolmanager.Range range, long expectedMac) { java.lang.Long mac = range.allocateMacs(1).get(0); assertThat(mac, is(expectedMac)); range.freeMac(mac); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Unassigned Virtual Nodes") java.lang.String unassignedVNumaNodesLabel();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("QoS") java.lang.String cpuProfileQosLabel();
private java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> removeInvalidNetworkAttachmentsFromDb() { java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> networkAttachments = networkAttachmentDao.getAllForHost(hostId); for (java.util.Iterator<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> iterator = networkAttachments.iterator(); iterator.hasNext();) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = iterator.next(); if (!(networkConfiguredOnHost(networkAttachment.getNetworkId()))) { networkAttachmentDao.remove(networkAttachment.getId()); iterator.remove(); } } return networkAttachments; }	private void removeInvalidNetworkAttachmentsFromDb(java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> existingNetworkAttachments) { for (java.util.Iterator<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> iterator = existingNetworkAttachments.iterator(); iterator.hasNext();) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = iterator.next(); boolean attachmentRelatesToNetworkNotReportedOnHost = !(networkConfiguredOnHost(networkAttachment.getNetworkId())); if (attachmentRelatesToNetworkNotReportedOnHost) { networkAttachmentDao.remove(networkAttachment.getId()); iterator.remove(); } } }
public java.lang.String gethost_serial_number() { return this.host_serial_number; }	public java.lang.String getHardwareSerialNumber() { return this.hwSerialNumber; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { rngLabel.setVisible(((object.getRngRandomSourceRequired().getIsAvailable()) && (object.getRngHwrngSourceRequired().getIsAvailable()))); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { cpuThreadsPanel.setVisible(object.getVersionSupportsCpuThreads().getEntity()); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.VDSGroup> clusterModel = hostModel.getCluster(); if ((clusterModel.getSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = clusterModel.getSelectedItem(); java.lang.Boolean jsonSupported = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.JsonProtocolSupported, cluster.getcompatibility_version().toString()))); if (jsonSupported) { hostModel.getProtocol().setEntity(true); } else { hostModel.getProtocol().setEntity(false); } } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.VDSGroup> clusterModel = hostModel.getCluster(); if ((clusterModel.getSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = clusterModel.getSelectedItem(); java.lang.Boolean jsonSupported = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.JsonProtocolSupported, cluster.getcompatibility_version().toString()))); if (jsonSupported) { hostModel.getProtocol().setEntity(true); } else { hostModel.getProtocol().setEntity(false); } } }
void clearDismissedBySeverity(org.ovirt.engine.core.common.AuditLogSeverity severity);	void clearDismissedEvents();
protected java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.CommandBase<?>> buildChildCommands() { return java.util.Collections.<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.CommandBase<?>>emptyMap(); }	protected void buildChildCommandInfos() { }
private boolean hostHasPpcArchitecture() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getModel().getSelectedCluster(); if (cluster == null) { return false; } org.ovirt.engine.core.common.businessentities.ArchitectureType archType = cluster.getArchitecture(); return ((archType == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64)) || (archType == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64le))) || (archType == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppcle)); }	private boolean clusterHasPpcArchitecture() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getModel().getSelectedCluster(); return ((cluster != null) && ((cluster.getArchitecture()) != null)) && ((org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc) == (cluster.getArchitecture().getFamily())); }
private java.util.Map<java.lang.String, java.lang.Integer> buildIoTune(org.ovirt.engine.core.common.businessentities.DiskImage diskImage) { org.ovirt.engine.core.compat.Guid diskProfileId = diskImage.getDiskProfileId(); if (diskProfileId == null) { return null; } org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageQosDao().getByDiskProfile(diskProfileId); if (storageQos == null) { return null; } java.util.Map<java.lang.String, java.lang.Integer> ioTuneMap = new java.util.HashMap<>(); if ((storageQos.getMaxThroughput()) != null) { ioTuneMap.put(VdsProperties.TotalBytesSec, storageQos.getMaxThroughput()); } if ((storageQos.getMaxReadThroughput()) != null) { ioTuneMap.put(VdsProperties.ReadBytesSec, storageQos.getMaxReadThroughput()); } if ((storageQos.getMaxWriteThroughput()) != null) { ioTuneMap.put(VdsProperties.WriteBytesSec, storageQos.getMaxWriteThroughput()); } if ((storageQos.getMaxIops()) != null) { ioTuneMap.put(VdsProperties.TotalIopsSec, storageQos.getMaxIops()); } if ((storageQos.getMaxReadIops()) != null) { ioTuneMap.put(VdsProperties.ReadIopsSec, storageQos.getMaxReadIops()); } if ((storageQos.getMaxWriteIops()) != null) { ioTuneMap.put(VdsProperties.WriteIopsSec, storageQos.getMaxWriteIops()); } if ((ioTuneMap.size()) > 0) { return ioTuneMap; } return null; }	private java.util.Map<java.lang.String, java.lang.Integer> buildIoTune(org.ovirt.engine.core.common.businessentities.DiskImage diskImage, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskProfileStorageQosMap, java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<java.lang.String, java.lang.Integer>> storageQosIoTuneMap) { org.ovirt.engine.core.compat.Guid diskProfileId = diskImage.getDiskProfileId(); if (diskProfileId == null) { return null; } org.ovirt.engine.core.compat.Guid storageQosId = diskProfileStorageQosMap.get(diskProfileId); if (storageQosId == null) { org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageQosDao().getQosByDiskProfileId(diskProfileId); if (storageQos == null) { return null; } storageQosId = storageQos.getId(); diskProfileStorageQosMap.put(diskProfileId, storageQosId); storageQosIoTuneMap.put(storageQosId, buildIoTuneMap(storageQos)); } java.util.Map<java.lang.String, java.lang.Integer> ioTuneMap = storageQosIoTuneMap.get(storageQosId); if (!(ioTuneMap.isEmpty())) { return ioTuneMap; } return null; }
protected boolean isVmInUpPausedDownStatus() { if ((((org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) && ((org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) && ((org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Paused))) { return failCanDoAction(EngineMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL, org.ovirt.engine.core.bll.validator.LocalizedVmStatus.from(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getStatus())); } return true; }	protected boolean isVmInUpPausedDownStatus() { if ((((org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) && ((org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) && ((org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Paused))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL, org.ovirt.engine.core.bll.validator.LocalizedVmStatus.from(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getStatus())); } return true; }
public org.ovirt.engine.core.bll.ValidationResult anotherInterfaceAlreadyLabeledWithThisLabel(java.lang.String label, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfacesToCheck) { for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : interfacesToCheck) { boolean notTheSameNic = !(org.apache.commons.lang.StringUtils.equals(nic.getName(), iface.getName())); if (notTheSameNic) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessages.OTHER_INTERFACE_ALREADY_LABELED, ("$LabeledNic " + (nic.getName()))).when(((org.ovirt.engine.core.utils.NetworkUtils.isLabeled(nic)) && (nic.getLabels().contains(label)))); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult anotherInterfaceAlreadyLabeledWithThisLabel(java.lang.String label, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfacesToCheck) { for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : interfacesToCheck) { boolean notTheSameNic = !(org.apache.commons.lang.StringUtils.equals(nic.getName(), iface.getName())); if (notTheSameNic) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.OTHER_INTERFACE_ALREADY_LABELED, ("$LabeledNic " + (nic.getName()))).when(((org.ovirt.engine.core.utils.NetworkUtils.isLabeled(nic)) && (nic.getLabels().contains(label)))); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public void run() { try { java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> vmsToMigrate = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStaticDao().getAllWithFailbackByVds(vds.getId()); if (!(vmsToMigrate.isEmpty())) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); executionContext.setMonitored(true); org.ovirt.engine.core.bll.Backend.getInstance().runInternalMultipleActions(VdcActionType.MigrateVmToServer, new java.util.ArrayList(createMigrateVmToServerParametersList(vmsToMigrate, vds)), new org.ovirt.engine.core.bll.context.CommandContext(executionContext)); } } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.VdsEventListener.log.errorFormat("Failed to initialize Vds on up. Error: {0}", e); } }	@java.lang.Override public void run() { try { java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> vmsToMigrate = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStaticDao().getAllWithFailbackByVds(vds.getId()); if (!(vmsToMigrate.isEmpty())) { org.ovirt.engine.core.bll.context.CommandContext ctx = new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()); ctx.getExecutionContext().setMonitored(true); org.ovirt.engine.core.bll.Backend.getInstance().runInternalMultipleActions(VdcActionType.MigrateVmToServer, new java.util.ArrayList(createMigrateVmToServerParametersList(vmsToMigrate, vds)), ctx); } } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.VdsEventListener.log.errorFormat("Failed to initialize Vds on up. Error: {0}", e); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> runExternalFilters(java.util.ArrayList<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl> filters, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, java.util.List<java.lang.String> messages) { java.util.List<org.ovirt.engine.core.compat.Guid> filteredIDs = null; if (filters != null) { java.util.List<java.lang.String> filterNames = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl filter : filters) { filterNames.add(filter.getPolicyUnit().getName()); } java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hostList) { hostIDs.add(host.getId()); } filteredIDs = org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerFactory.getInstance().runFilters(filterNames, hostIDs, vm.getId(), parameters); } return intersectHosts(hostList, filteredIDs); }	private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> runExternalFilters(java.util.ArrayList<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl> filters, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, java.util.List<java.lang.String> messages, java.lang.String correlationId, org.ovirt.engine.core.bll.scheduling.SchedulingManager.SchedulingResult result) { java.util.List<org.ovirt.engine.core.compat.Guid> filteredIDs = null; if (filters != null) { java.util.List<java.lang.String> filterNames = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl filter : filters) { filterNames.add(filter.getPolicyUnit().getName()); } java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hostList) { hostIDs.add(host.getId()); } filteredIDs = org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerFactory.getInstance().runFilters(filterNames, hostIDs, vm.getId(), parameters); if (filteredIDs != null) { logFilterActions(hostList, new java.util.HashSet<org.ovirt.engine.core.compat.Guid>(filteredIDs), VdcBllMessages.VAR__FILTERTYPE__EXTERNAL, java.util.Arrays.toString(filterNames.toArray()), result, correlationId); } } return intersectHosts(hostList, filteredIDs); }
public static void mockOsTypes() { org.easymock.IMocksControl control = org.easymock.EasyMock.createNiceControl(); org.ovirt.engine.core.common.osinfo.OsRepository osRepositoryMock = control.createMock(org.ovirt.engine.core.common.osinfo.OsRepository.class); java.util.HashMap<java.lang.Integer, java.lang.String> osNames = new java.util.HashMap<>(1); osNames.put(0, "Unassigned"); expect(osRepositoryMock.getUniqueOsNames()).andReturn(osNames).anyTimes(); expect(osRepositoryMock.isBalloonDisabledByDefault(anyInt(), anyObject(org.ovirt.engine.core.compat.Version.class))).andReturn(false).anyTimes(); org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepositoryMock); control.replay(); }	public static void mockOsTypes() { org.easymock.IMocksControl control = org.easymock.EasyMock.createNiceControl(); org.ovirt.engine.core.common.osinfo.OsRepository osRepositoryMock = control.createMock(org.ovirt.engine.core.common.osinfo.OsRepository.class); java.util.HashMap<java.lang.Integer, java.lang.String> osNames = new java.util.HashMap<>(1); osNames.put(0, "Unassigned"); expect(osRepositoryMock.getUniqueOsNames()).andReturn(osNames).anyTimes(); java.util.HashMap<org.ovirt.engine.core.common.businessentities.ArchitectureType, java.lang.Integer> defaultOSes = new java.util.HashMap<org.ovirt.engine.core.common.businessentities.ArchitectureType, java.lang.Integer>(); defaultOSes.put(ArchitectureType.x86_64, 0); expect(osRepositoryMock.getDefaultOSes()).andReturn(defaultOSes); org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepositoryMock); control.replay(); }
void setWriteRateKbPerSec(int value);	void setWriteRateKbPerSec(int writeRate);
@java.lang.Override public T flush() { super.flush(); for (org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget lineWidget : widgets) { lineWidget.flush(); } return model; }	@java.lang.Override public T flush() { widgets.forEach(KeyLineWidget::flush); return super.flush(); }
private boolean validateLabelChanges(java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> potentialNetworks) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel mockSrc = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel(this); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel mockDst = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel(this); mockSrc.setEntity(new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface()); mockDst.setEntity(new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface()); mockDst.setItems(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(potentialNetworks)); boolean res = candidateOperation(mockSrc, mockDst, false, true); if (!res) { candidateOperation(mockSrc, mockDst, true, false); } return res; }	private boolean validateLabelChanges(java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> potentialNetworks) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel mockSrc = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel(this); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel mockDst = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel(this); mockSrc.setEntity(new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface()); mockDst.setEntity(new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface()); mockDst.setItems(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(potentialNetworks)); boolean res = candidateOperation(mockSrc, mockDst, false); if (!res) { candidateOperation(mockSrc, mockDst, true); } return res; }
java.util.List<org.ovirt.engine.core.common.businessentities.storage_server_connections> getStorageServerConnectionsByDomain(org.ovirt.engine.core.common.businessentities.storage_domain_static storageDomain);	java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> getStorageServerConnectionsByDomain(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain);
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessages.VAR__ACTION__IMPORT); addCanDoActionMessage(EngineMessages.VAR__TYPE__PROVIDER_CERTIFICATE); }	@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__IMPORT); addCanDoActionMessage(EngineMessage.VAR__TYPE__PROVIDER_CERTIFICATE); }
@java.lang.Override protected void ExecuteVdsBrokerCommand() { glusterTaskReturn = org.ovirt.engine.core.vdsbroker.gluster.StartRemoveGlusterVolumeBrickVDSCommand.getBroker().glusterVolumeRemoveBrickStart(org.ovirt.engine.core.vdsbroker.gluster.StartRemoveGlusterVolumeBrickVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.StartRemoveGlusterVolumeBrickVDSCommand.getParameters().getBrickDirectories().toArray(new java.lang.String[0]), org.ovirt.engine.core.vdsbroker.gluster.StartRemoveGlusterVolumeBrickVDSCommand.getParameters().getReplicaCount(), org.ovirt.engine.core.vdsbroker.gluster.StartRemoveGlusterVolumeBrickVDSCommand.getParameters().isForceRemove()); task = glusterTaskReturn.getGlusterTask(); setReturnValue(task); org.ovirt.engine.core.vdsbroker.gluster.StartRemoveGlusterVolumeBrickVDSCommand.ProceedProxyReturnValue(); }	@java.lang.Override protected void executeVdsBrokerCommand() { glusterTaskReturn = org.ovirt.engine.core.vdsbroker.gluster.StartRemoveGlusterVolumeBricksVDSCommand.getBroker().glusterVolumeRemoveBricksStart(org.ovirt.engine.core.vdsbroker.gluster.StartRemoveGlusterVolumeBricksVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.StartRemoveGlusterVolumeBricksVDSCommand.getParameters().getBrickDirectories().toArray(new java.lang.String[0]), org.ovirt.engine.core.vdsbroker.gluster.StartRemoveGlusterVolumeBricksVDSCommand.getParameters().getReplicaCount(), org.ovirt.engine.core.vdsbroker.gluster.StartRemoveGlusterVolumeBricksVDSCommand.getParameters().isForceRemove()); task = glusterTaskReturn.getGlusterTask(); org.ovirt.engine.core.vdsbroker.gluster.StartRemoveGlusterVolumeBricksVDSCommand.proceedProxyReturnValue(); setReturnValue(task); }
@java.lang.Override protected void executeCommand() { getAffinityGroup().setId(org.ovirt.engine.core.compat.Guid.newGuid()); getAffinityGroupDao().save(getAffinityGroup()); setSucceeded(true); }	@java.lang.Override protected void executeCommand() { getAffinityGroup().setId(org.ovirt.engine.core.compat.Guid.newGuid()); getAffinityGroupDao().save(getAffinityGroup()); getReturnValue().setActionReturnValue(getAffinityGroup().getId()); setSucceeded(true); }
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.dataprovider.Role>) (source)) : new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.dataprovider.Role>(); }	@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Role>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Role>(); }
@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { super.postDataCenterWithClusterSelectedItemChanged(); setupWindowModelFrom(pool.getStaticData()); getModel().getMemSize().setEntity(pool.getStaticData().getMemSizeMb()); getModel().setIsDisksAvailable(true); java.lang.Iterable<org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster> dataCenterWithClusters = getModel().getDataCenterWithClustersList().getItems(); org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster selectDataCenterWithCluster = org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(dataCenterWithClusters, new org.ovirt.engine.ui.uicommonweb.Linq.DataCenterWithClusterPredicate(pool.getStoragePoolId(), pool.getVdsGroupId())); getModel().getDataCenterWithClustersList().setSelectedItem((selectDataCenterWithCluster != null ? selectDataCenterWithCluster : org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(dataCenterWithClusters))); }	@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { super.postDataCenterWithClusterSelectedItemChanged(); setupWindowModelFrom(pool.getStaticData()); getModel().setIsDisksAvailable(true); java.lang.Iterable<org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster> dataCenterWithClusters = getModel().getDataCenterWithClustersList().getItems(); org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster selectDataCenterWithCluster = org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(dataCenterWithClusters, new org.ovirt.engine.ui.uicommonweb.Linq.DataCenterWithClusterPredicate(pool.getStoragePoolId(), pool.getVdsGroupId())); getModel().getDataCenterWithClustersList().setSelectedItem((selectDataCenterWithCluster != null ? selectDataCenterWithCluster : org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(dataCenterWithClusters))); instanceTypeManager.updateAll(); }
public java.util.HashMap<org.ovirt.engine.core.common.utils.Pair<java.lang.Integer, org.ovirt.engine.core.compat.Version>, java.lang.Boolean> getNicHotplugSupportMap();	public java.util.Map<org.ovirt.engine.core.common.utils.Pair<java.lang.Integer, org.ovirt.engine.core.compat.Version>, java.lang.Boolean> getNicHotplugSupportMap();
public org.ovirt.engine.core.bll.ValidationResult isVmReadyForUpgrade(final org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Objects.requireNonNull(vm); java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR> validationResult = checkVmReadyForUpgrade(vm); if (validationResult.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.BOUND_TO_HOST_WHILE_UPGRADING_CLUSTER, java.lang.String.format("$json %1$s", org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.VmValidation.toJson(validationResult))); } }	public org.ovirt.engine.core.bll.ValidationResult isVmReadyForUpgrade(final org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Objects.requireNonNull(vm); java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UpgradeError> validationResult = checkVmReadyForUpgrade(vm); if (validationResult.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.BOUND_TO_HOST_WHILE_UPGRADING_CLUSTER, java.lang.String.format("$json %1$s", org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.VmValidation.toJson(validationResult))); } }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper = createIdParameterMapper(networkAttachment.getId()).addValue("network_id", networkAttachment.getNetworkId()).addValue("switch_type", networkAttachment.getSwitchType().getOptionValue()).addValue("nic_id", networkAttachment.getNicId()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(networkAttachment.getProperties())); mapIpConfiguration(networkAttachment, mapper); return mapper; }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper = createIdParameterMapper(networkAttachment.getId()).addValue("network_id", networkAttachment.getNetworkId()).addValue("nic_id", networkAttachment.getNicId()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(networkAttachment.getProperties())); mapIpConfiguration(networkAttachment, mapper); return mapper; }
protected boolean validateImages() { return org.ovirt.engine.core.bll.ImagesHandler.PerformImagesChecks(org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().getCanDoActionMessages(), org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVm().getStoragePoolId(), Guid.Empty, hasImages(), hasImages(), hasImages(), hasImages(), true, true, org.ovirt.engine.core.bll.RemoveSnapshotCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVmId())); }	protected boolean validateImages() { return org.ovirt.engine.core.bll.ImagesHandler.PerformImagesChecks(org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().getCanDoActionMessages(), org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVm().getStoragePoolId(), Guid.Empty, true, true, true, true, true, true, org.ovirt.engine.core.bll.RemoveSnapshotCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVmId())); }
protected void DetachVmFromUser() { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.getVmId()); if (org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.getVmPoolId().equals(vm.getVmPoolId())) { org.ovirt.engine.core.common.businessentities.permissions perm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getPermissionDao().getForRoleAndAdElementAndObject(PredefinedRoles.ENGINE_USER.getId(), org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.getAdUserId(), vm.getId()); if (perm != null) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getPermissionDao().remove(perm.getId()); RestoreVmFromBaseSnapshot(vm); } } }	protected void DetachVmFromUser() { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.getParameters().getVmId()); if ((vm != null) && (org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.getVmPoolId().equals(vm.getVmPoolId()))) { org.ovirt.engine.core.common.businessentities.permissions perm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getPermissionDao().getForRoleAndAdElementAndObject(PredefinedRoles.ENGINE_USER.getId(), org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.getAdUserId(), vm.getId()); if (perm != null) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getPermissionDao().remove(perm.getId()); RestoreVmFromBaseSnapshot(vm); } } }
private java.util.Map<java.lang.String, java.lang.String> getAddressMapForScsiDisk(java.lang.String address, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, int controllerIndex, boolean reserveFirstAddress) { java.util.Map<java.lang.String, java.lang.String> addressMap; int availableUnit = vmInfoBuildUtils.getAvailableUnitForScsiDisk(vmDeviceUnitMap, reserveFirstAddress); if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { addressMap = org.ovirt.engine.core.utils.StringHelper.string2Map(address); int unit = java.lang.Integer.parseInt(addressMap.get(VdsProperties.Unit)); if (vmDeviceUnitMap.containsValue(unit)) { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } } else { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } updateVmDeviceAddress(addressMap.toString(), vmDevice); return addressMap; }	private java.util.Map<java.lang.String, java.lang.String> getAddressMapForScsiDisk(java.lang.String address, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, int controllerIndex, boolean reserveFirstAddress) { java.util.Map<java.lang.String, java.lang.String> addressMap; int availableUnit = vmInfoBuildUtils.getAvailableUnitForScsiDisk(vmDeviceUnitMap, reserveFirstAddress); if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { addressMap = org.ovirt.engine.core.utils.StringMapUtils.string2Map(address); int unit = java.lang.Integer.parseInt(addressMap.get(VdsProperties.Unit)); if (vmDeviceUnitMap.containsValue(unit)) { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } } else { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } updateVmDeviceAddress(addressMap.toString(), vmDevice); return addressMap; }
@org.junit.Test public void testNullClusterId() { org.ovirt.engine.core.common.businessentities.VmBase vmBase = createVmBase(cpuProfile1.getId()); vmBase.setClusterId(null); org.ovirt.engine.core.bll.ValidationResult res = cpuProfileHelper.setAndValidateCpuProfile(vmBase, org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.USER_1_ID); assertThat(res, failsWith(EngineMessage.ACTION_TYPE_CPU_PROFILE_CLUSTER_NOT_PROVIDED)); }	@org.junit.Test public void testNullClusterId() { org.ovirt.engine.core.common.businessentities.VmBase vmBase = createVmBase(cpuProfile1.getId()); vmBase.setVdsGroupId(null); org.ovirt.engine.core.bll.ValidationResult res = cpuProfileHelper.setAndValidateCpuProfile(vmBase, org.ovirt.engine.core.compat.Version.getLast(), org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.USER_1_ID); assertThat(res, failsWith(EngineMessage.ACTION_TYPE_CPU_PROFILE_CLUSTER_NOT_PROVIDED)); }
private void updateCanSpecify() { org.ovirt.engine.core.common.businessentities.network.Network network = ((org.ovirt.engine.core.common.businessentities.network.Network) (getNetwork().getSelectedItem())); boolean isChangable = (bootProtocolsAvailable) && (getIsStaticAddress()); getAddress().setIsChangable(isChangable); getSubnet().setIsChangable(isChangable); getGateway().setIsChangable(isChangable); }	private void updateCanSpecify() { boolean isChangable = (bootProtocolsAvailable) && (getIsStaticAddress()); getAddress().setIsChangable(isChangable); getSubnet().setIsChangable(isChangable); getGateway().setIsChangable(isChangable); }
private void onEdit() { org.ovirt.engine.ui.uicommonweb.models.OptionsModel.logger.info("onEdit"); org.ovirt.engine.ui.uicommonweb.models.EditOptionsModel model = new org.ovirt.engine.ui.uicommonweb.models.EditOptionsModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicommonweb.models.OptionsModel.constants.editOptionsTitle()); model.setHelpTag(HelpTag.manual_fence_are_you_sure); model.setHashName("manual_fence_are_you_sure"); org.ovirt.engine.ui.uicommonweb.models.OptionsModel.logger.info("end onEdit"); }	private void onEdit() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.EditOptionsModel model = new org.ovirt.engine.ui.uicommonweb.models.EditOptionsModel(); model.setTitle(org.ovirt.engine.ui.uicommonweb.models.OptionsModel.constants.editOptionsTitle()); model.setHashName("edit_options"); setWindow(model); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand(org.ovirt.engine.ui.uicommonweb.models.OptionsModel.constants.ok(), this); model.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand(org.ovirt.engine.ui.uicommonweb.models.OptionsModel.constants.cancel(), this); model.getCommands().add(cancelCommand); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getUserProfile(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.lang.Boolean connectAutomatically = java.lang.Boolean.TRUE; org.ovirt.engine.core.common.businessentities.UserProfile profile = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); if (profile != null) { setUserProfile(profile); connectAutomatically = profile.isUserPortalVmLoginAutomatically(); } ((org.ovirt.engine.ui.uicommonweb.models.EditOptionsModel) (model)).getEnableConnectAutomatically().setEntity(connectAutomatically); } })); }
private java.lang.String urlEncode(java.lang.String jsonTicket) { try { return java.net.URLEncoder.encode(jsonTicket, "UTF-8"); } catch (java.io.UnsupportedEncodingException ex) { throw new javax.ws.rs.WebApplicationException(ex, Response.Status.INTERNAL_SERVER_ERROR); } }	public void validateGraphicsEnum(java.lang.String consoleString) { org.ovirt.engine.api.model.GraphicsConsole console = new org.ovirt.engine.api.model.GraphicsConsole(); console.setProtocol(consoleString); validateEnums(org.ovirt.engine.api.model.GraphicsConsole.class, console); }
private void assertCanDoActionMessage(org.ovirt.engine.core.common.errors.EngineMessages msg) { assertTrue("canDoAction failed for the wrong reason", command.getReturnValue().getCanDoActionMessages().contains(msg.name())); }	private void assertCanDoActionMessage(org.ovirt.engine.core.common.errors.EngineMessage msg) { assertTrue("canDoAction failed for the wrong reason", command.getReturnValue().getCanDoActionMessages().contains(msg.name())); }
private boolean internalCanDoAction() { boolean returnValue = false; try { javax.transaction.Transaction transaction = null; if (!(isCanDoActionSupportsTransaction())) { transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); } try { returnValue = (((((isUserAuthorizedToRunAction()) && (isBackwardsCompatible())) && (validateInputs())) && (acquireLock())) && (canDoAction())) && (internalValidateAndSetQuota()); if ((!returnValue) && ((getReturnValue().getCanDoActionMessages().size()) > 0)) { java.util.List<java.lang.String> canDos = getBackend().getErrorsTranslator().TranslateErrorText(getReturnValue().getCanDoActionMessages()); log.warn("CanDoAction of action '{}' failed for user {}. Reasons: {}", getActionType(), org.ovirt.engine.core.bll.CommandBase.getUserName(), org.apache.commons.lang.StringUtils.join(canDos, ',')); } } finally { if (transaction != null) { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); } } } catch (org.springframework.dao.DataAccessException dataAccessEx) { log.error("Data access error during CanDoActionFailure.", dataAccessEx); addCanDoActionMessage(EngineMessage.CAN_DO_ACTION_DATABASE_CONNECTION_FAILURE); } catch (java.lang.RuntimeException ex) { log.error("Error during CanDoActionFailure.", ex); addCanDoActionMessage(EngineMessage.CAN_DO_ACTION_GENERAL_FAILURE); } finally { if (!returnValue) { freeLock(); } } return returnValue; }	private boolean internalCanDoAction() { boolean returnValue = false; try { javax.transaction.Transaction transaction = null; if (!(isCanDoActionSupportsTransaction())) { transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); } try { returnValue = (((((isUserAuthorizedToRunAction()) && (isBackwardsCompatible())) && (validateInputs())) && (acquireLock())) && (canDoAction())) && (internalValidateAndSetQuota()); if ((!returnValue) && ((getReturnValue().getCanDoActionMessages().size()) > 0)) { log.warn("CanDoAction of action '{}' failed for user {}. Reasons: {}", getActionType(), org.ovirt.engine.core.bll.CommandBase.getUserName(), org.apache.commons.lang.StringUtils.join(getReturnValue().getCanDoActionMessages(), ',')); } } finally { if (transaction != null) { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); } } } catch (org.springframework.dao.DataAccessException dataAccessEx) { log.error("Data access error during CanDoActionFailure.", dataAccessEx); addCanDoActionMessage(EngineMessage.CAN_DO_ACTION_DATABASE_CONNECTION_FAILURE); } catch (java.lang.RuntimeException ex) { log.error("Error during CanDoActionFailure.", ex); addCanDoActionMessage(EngineMessage.CAN_DO_ACTION_GENERAL_FAILURE); } finally { if (!returnValue) { freeLock(); } } return returnValue; }
@org.junit.Test public void testGetAllIds() { java.util.List<org.ovirt.engine.core.compat.Guid> ids = getAllJobIds(); assertTrue(ids.remove(FixturesTool.EXISTING_VM_JOB)); assertTrue(ids.remove(FixturesTool.EXISTING_VM_BLOCK_JOB)); assertTrue(ids.isEmpty()); }	@org.junit.Test public void testGetAllIds() { java.util.List<org.ovirt.engine.core.compat.Guid> ids = dao.getAllIds(); assertTrue(ids.remove(FixturesTool.EXISTING_VM_JOB)); assertTrue(ids.remove(FixturesTool.EXISTING_VM_BLOCK_JOB)); assertTrue(ids.isEmpty()); }
protected java.io.InputStream findClientOracleData(java.lang.String requestModuleBasePath, java.lang.String permutationStrongName) throws com.google.gwt.user.client.rpc.SerializationException { try { return super.findClientOracleData(requestModuleBasePath, permutationStrongName); } catch (com.google.gwt.user.client.rpc.SerializationException e) { if ((remoteOracleSource) != null) { org.apache.http.client.utils.URIBuilder builder = new org.apache.http.client.utils.URIBuilder(); builder.setScheme(org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.HTTP); builder.setHost(remoteHost); builder.setPort(remotePort); builder.setPath((((((org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.SLASH) + (getApplicationPath())) + (org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.SLASH)) + permutationStrongName) + (org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.GWT_RPC_EXT))); return remoteOracleSource.findOracleData(builder.toString()); } throw e; } }	@java.lang.Override protected java.io.InputStream findClientOracleData(java.lang.String requestModuleBasePath, java.lang.String permutationStrongName) throws com.google.gwt.user.client.rpc.SerializationException { java.lang.String applicationName = getServletContext().getInitParameter(org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.APP_NAME); try { return super.findClientOracleData(requestModuleBasePath, permutationStrongName); } catch (com.google.gwt.user.client.rpc.SerializationException e) { if (((superDevConfig) != null) && (superDevConfig.enabled)) { return findRemoteOracleData(getSuperDevOracleUrl(applicationName, permutationStrongName)); } throw e; } }
@java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior) (array[0])); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (array[1])); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>) (returnValue)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> virtServiceClusters = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>(); for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters) { if (cluster.supportsVirtService()) { virtServiceClusters.add(cluster); } } model.SetClusters(model, virtServiceClusters, null); behavior.InitTemplate(); behavior.InitCdImage(); }	@java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior) (array[0])); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (array[1])); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>) (returnValue)); model.SetClusters(model, clusters, null); behavior.InitTemplate(); behavior.InitCdImage(); }
@java.lang.Override protected boolean canDoAction() { if ((getProvider()) == null) { return failCanDoAction(EngineMessages.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST); } org.ovirt.engine.core.bll.provider.ProviderProxy providerProxy = getProviderProxy(); if (providerProxy == null) { return failCanDoAction(EngineMessages.ACTION_TYPE_FAILED_PROVIDER_NOT_SUPPORTED, java.lang.String.format("$providerType %1$s", getProvider().getType())); } org.ovirt.engine.core.bll.provider.ProviderValidator validator = getProviderProxy().getProviderValidator(); return (validate(validator.nameAvailable())) && (validate(validator.validateAddProvider())); }	@java.lang.Override protected boolean canDoAction() { if ((getProvider()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST); } org.ovirt.engine.core.bll.provider.ProviderProxy providerProxy = getProviderProxy(); if (providerProxy == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_NOT_SUPPORTED, java.lang.String.format("$providerType %1$s", getProvider().getType())); } org.ovirt.engine.core.bll.provider.ProviderValidator validator = getProviderProxy().getProviderValidator(); return (validate(validator.nameAvailable())) && (validate(validator.validateAddProvider())); }
protected void populateProfiles(java.util.List<java.lang.String> profiles) { getProfile().setItems(profiles); getProfile().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(profiles)); }	protected void populateProfiles(java.util.List<org.ovirt.engine.core.aaa.ProfileEntry> profiles) { getProfile().setItems(profiles); getProfile().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(profiles)); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.host.provider.HostProviderProxy proxy = systemProviderFinder.findSystemProvider(); if (proxy == null) { org.ovirt.engine.core.bll.GetErrataForEngineQuery.getQueryReturnValue().setSucceeded(false); org.ovirt.engine.core.bll.GetErrataForEngineQuery.getQueryReturnValue().setExceptionString(EngineMessage.NO_FOREMAN_PROVIDER_FOR_ENGINE.name()); org.ovirt.engine.core.bll.GetErrataForEngineQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.common.businessentities.ErrataData.emptyData()); } else { org.ovirt.engine.core.common.businessentities.ErrataData errataForEngine = proxy.getErrataForHost(systemProviderFinder.getSystemHostName(), org.ovirt.engine.core.bll.GetErrataForEngineQuery.getParameters().getErrataFilter()); setReturnValue(errataForEngine); } }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.host.provider.HostProviderProxy proxy = engineProviderFinder.findEngineProvider(); if (proxy == null) { org.ovirt.engine.core.bll.GetErrataForEngineQuery.getQueryReturnValue().setSucceeded(false); org.ovirt.engine.core.bll.GetErrataForEngineQuery.getQueryReturnValue().setExceptionString(EngineMessage.NO_FOREMAN_PROVIDER_FOR_ENGINE.name()); org.ovirt.engine.core.bll.GetErrataForEngineQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.common.businessentities.ErrataData.emptyData()); } else { org.ovirt.engine.core.common.businessentities.ErrataData errataForEngine = proxy.getErrataForHost(engineProviderFinder.getEngineHostName(), org.ovirt.engine.core.bll.GetErrataForEngineQuery.getParameters().getErrataFilter()); setReturnValue(errataForEngine); } }
@java.lang.Override public org.ovirt.engine.api.model.Events list() { if (isFiltered()) { return mapCollection(getBackendCollection(VdcQueryType.GetEventMessages, new org.ovirt.engine.core.common.queries.GetEventMessagesParameters())); } else { return mapCollection(getBackendCollection()); } }	@java.lang.Override public org.ovirt.engine.api.model.Events list() { if (isFiltered()) { return mapCollection(getBackendCollection(VdcQueryType.GetAllEventMessages, new org.ovirt.engine.core.common.queries.GetEventMessagesParameters())); } else { return mapCollection(getBackendCollection()); } }
@org.junit.Test(expected = java.lang.NullPointerException.class) public void appendCustomValueUsesNullSeparator() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String newVal = "bar"; final java.lang.String sep = null; b.addCustomValue(key, value); b.appendCustomValueUsingCustomSeparator(key, newVal, sep); }	@org.junit.Test public void appendCustomValueUsesNullSeparator() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String newVal = "bar"; final java.lang.String sep = null; b.addCustomValue(key, value); b.appendCustomValue(key, newVal, sep); final java.lang.String s = b.getCustomValue(key); assertEquals(((value + sep) + newVal), s); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Add") java.lang.String addBricksVolume();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Add Bricks") java.lang.String addBricksVolume();
private void addWatchdogActions(org.ovirt.engine.api.model.VersionCaps version, org.ovirt.engine.api.restapi.types.WatchdogAction[] values) { if (org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual(version, org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_2)) { version.setWatchdogActions(new org.ovirt.engine.api.model.WatchdogActions()); for (org.ovirt.engine.api.restapi.types.WatchdogAction watchdogAction : values) { version.getWatchdogActions().getWatchdogAction().add(watchdogAction.value()); } } }	private void addWatchdogActions(org.ovirt.engine.api.model.VersionCaps version, org.ovirt.engine.api.restapi.types.WatchdogAction[] values) { if (org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual(version, org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_3)) { version.setWatchdogActions(new org.ovirt.engine.api.model.WatchdogActions()); for (org.ovirt.engine.api.restapi.types.WatchdogAction watchdogAction : values) { version.getWatchdogActions().getWatchdogActions().add(watchdogAction.value()); } } }
@org.junit.Test public void canDoActionFailureOnCopyingCinderDisk() { initializeCommand(ImageOperation.Copy, new org.ovirt.engine.core.common.businessentities.storage.CinderDisk()); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, EngineMessage.ACTION_TYPE_FAILED_CINDER_DISK); }	@org.junit.Test public void canDoActionFailureOnCopyingCinderDisk() { initializeCommand(ImageOperation.Copy, new org.ovirt.engine.core.common.businessentities.storage.CinderDisk()); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, EngineMessage.ACTION_TYPE_FAILED_NOT_SUPPORTED_DISK_STORAGE_TYPE); }
public java.lang.Boolean isDiscardZeroesData() { return staticData.isDiscardZeroesData(); }	public java.lang.Boolean getSupportsDiscardZeroesData() { return supportsDiscardZeroesData; }
@java.lang.Override public boolean isApplicable(org.ovirt.engine.core.common.businessentities.Cluster oldCluster, org.ovirt.engine.core.common.businessentities.Cluster newCluster) { return !(oldCluster.getCompatibilityVersion().equals(newCluster.getCompatibilityVersion())); }	@java.lang.Override public boolean isApplicable(org.ovirt.engine.core.common.businessentities.Cluster oldCluster, org.ovirt.engine.core.common.businessentities.Cluster newCluster) { org.ovirt.engine.core.compat.Version newClusterVersion = newCluster.getCompatibilityVersion(); org.ovirt.engine.core.compat.Version oldClusterVersion = oldCluster.getCompatibilityVersion(); return !(oldClusterVersion.equals(newClusterVersion)); }
public void addDisk() { if ((getEntity()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.NewDiskModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.NewGuideDiskModel(this); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().addVirtualDiskTitle()); model.setHashName("new_virtual_disk"); model.setHelpTag(model.getHashName(), "VMs > Virtual Disks > New Virtual Disk"); model.setVm(getEntity()); setWindow(model); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); cancelCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); cancelCommand.setIsCancel(true); model.setCancelCommand(cancelCommand); model.initialize(); }	public void addDisk() { if ((getEntity()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.NewDiskModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.NewGuideDiskModel(this); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().addVirtualDiskTitle()); model.setHelpTag(HelpTag.new_virtual_disk); model.setHashName("new_virtual_disk"); model.setVm(getEntity()); setWindow(model); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); cancelCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); cancelCommand.setIsCancel(true); model.setCancelCommand(cancelCommand); model.initialize(); }
private void validateCustomProperties() { java.lang.String version = vds.getVdsGroupCompatibilityVersion().getValue(); org.ovirt.engine.core.utils.customprop.SimpleCustomPropertiesUtil util = org.ovirt.engine.core.utils.customprop.SimpleCustomPropertiesUtil.getInstance(); java.util.Map<java.lang.String, java.lang.String> validProperties = util.convertProperties(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.PreDefinedNetworkCustomProperties, version)); validProperties.putAll(util.convertProperties(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.UserDefinedNetworkCustomProperties, version))); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : params.getInterfaces()) { if ((iface.getCustomProperties()) != null) { if (!(networkCustomPropertiesSupported)) { addViolation(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_NOT_SUPPORTED, iface.getNetworkName()); } else if (!(util.validateProperties(validProperties, iface.getCustomProperties()).isEmpty())) { addViolation(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_BAD_INPUT, iface.getNetworkName()); } } } }	private void validateCustomProperties() { java.lang.String version = vds.getVdsGroupCompatibilityVersion().getValue(); org.ovirt.engine.core.utils.customprop.SimpleCustomPropertiesUtil util = org.ovirt.engine.core.utils.customprop.SimpleCustomPropertiesUtil.getInstance(); java.util.Map<java.lang.String, java.lang.String> validProperties = util.convertProperties(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.PreDefinedNetworkCustomProperties, version)); validProperties.putAll(util.convertProperties(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.UserDefinedNetworkCustomProperties, version))); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : params.getInterfaces()) { if (iface.hasCustomProperties()) { java.lang.String networkName = iface.getNetworkName(); if (org.apache.commons.lang.StringUtils.isEmpty(networkName)) { addViolation(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_NO_NETWORK, iface.getName()); } else { if (!(networkCustomPropertiesSupported)) { addViolation(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_NOT_SUPPORTED, networkName); } java.util.List<org.ovirt.engine.core.utils.customprop.ValidationError> errors = util.validateProperties(validProperties, iface.getCustomProperties()); if (!(errors.isEmpty())) { addViolation(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_BAD_INPUT, networkName); java.util.List<java.lang.String> messages = new java.util.ArrayList<>(); util.handleCustomPropertiesError(errors, messages); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper.log.error(org.apache.commons.lang.StringUtils.join(translateErrorMessages(messages), ',')); } } } } }
public void updateNetworkInterfacesByTemplate(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { org.ovirt.engine.core.common.queries.VdcQueryType queryType = (vmBase instanceof org.ovirt.engine.core.common.businessentities.VmTemplate) ? org.ovirt.engine.core.common.queries.VdcQueryType.GetTemplateInterfacesByTemplateId : org.ovirt.engine.core.common.queries.VdcQueryType.GetVmInterfacesByVmId; org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(java.lang.Object parentModel, org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue == null) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = returnValue.getReturnValue(); updateNetworkInterfaces(getNetworkProfileBehavior(), nics); } }); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(queryType, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBase.getId()), query); }	public void updateNetworkInterfacesByTemplate(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { org.ovirt.engine.core.common.queries.VdcQueryType queryType = (vmBase instanceof org.ovirt.engine.core.common.businessentities.VmTemplate) ? org.ovirt.engine.core.common.queries.VdcQueryType.GetTemplateInterfacesByTemplateId : org.ovirt.engine.core.common.queries.VdcQueryType.GetVmInterfacesByVmId; org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue == null) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = returnValue.getReturnValue(); updateNetworkInterfaces(getNetworkProfileBehavior(), nics); } }); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(queryType, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBase.getId()), query); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("refreshAllUsers") public void refreshAllUsers() { java.util.List<org.ovirt.engine.core.common.businessentities.DbUser> activeUsers = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.DbUser dbUser : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().getAll()) { if (dbUser.isActive()) { activeUsers.add(dbUser); } } for (org.ovirt.engine.core.common.businessentities.DbUser user : org.ovirt.engine.core.bll.SyncUsers.sync(activeUsers, false)) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().update(user); } }	@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("refreshAllUsers") public void refreshAllUsers() { java.util.List<org.ovirt.engine.core.common.businessentities.DbUser> activeUsers = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.DbUser dbUser : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().getAll()) { if (dbUser.isActive()) { activeUsers.add(dbUser); } } for (org.ovirt.engine.core.common.businessentities.DbUser user : org.ovirt.engine.core.bll.SyncUsers.sync(activeUsers)) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().update(user); } }
private org.ovirt.engine.core.utils.kerberos.AuthenticationResult checkAuthentication(java.lang.String username, java.lang.String password) { org.ovirt.engine.core.utils.kerberos.AuthenticationResult result = AuthenticationResult.OK; try { lc = new javax.security.auth.login.LoginContext("KerberosUtil", new org.ovirt.engine.core.utils.kerberos.KerberosConfigCheck.KerberosUtilCallbackHandler(username, password)); lc.login(); org.ovirt.engine.core.utils.kerberos.KerberosConfigCheck.log.debug("Check authentication finished successfully "); } catch (javax.security.auth.login.LoginException ex) { java.lang.String resultMessage = ex.getMessage(); java.lang.String formattedMessage = ((org.ovirt.engine.core.utils.kerberos.InstallerConstants.ERROR_PREFIX) + " exception message: ") + resultMessage; org.ovirt.engine.core.utils.kerberos.KerberosConfigCheck.log.error(formattedMessage); org.ovirt.engine.core.utils.kerberos.KerberosConfigCheck.log.debug(ex); org.ovirt.engine.core.utils.kerberos.KerberosReturnCodeParser parser = new org.ovirt.engine.core.utils.kerberos.KerberosReturnCodeParser(); result = parser.parse(resultMessage); if (result != (AuthenticationResult.OTHER)) { return result; } else { java.lang.System.out.println(formattedMessage); } } return result; }	private org.ovirt.engine.core.utils.kerberos.AuthenticationResult checkAuthentication(java.lang.String username, java.lang.String password) { org.ovirt.engine.core.utils.kerberos.AuthenticationResult result = AuthenticationResult.OK; try { lc = new javax.security.auth.login.LoginContext("KerberosUtil", new org.ovirt.engine.core.utils.kerberos.KerberosConfigCheck.KerberosUtilCallbackHandler(username, password)); lc.login(); org.ovirt.engine.core.utils.kerberos.KerberosConfigCheck.log.debug("Check authentication finished successfully "); } catch (javax.security.auth.login.LoginException ex) { java.lang.String resultMessage = ex.getMessage(); java.lang.String formattedMessage = ((org.ovirt.engine.core.utils.kerberos.InstallerConstants.ERROR_PREFIX) + " exception message: ") + resultMessage; org.ovirt.engine.core.utils.kerberos.KerberosConfigCheck.log.error(formattedMessage); org.ovirt.engine.core.utils.kerberos.KerberosConfigCheck.log.debug("", ex); org.ovirt.engine.core.utils.kerberos.KerberosReturnCodeParser parser = new org.ovirt.engine.core.utils.kerberos.KerberosReturnCodeParser(); result = parser.parse(resultMessage); if (result != (AuthenticationResult.OTHER)) { return result; } else { java.lang.System.out.println(formattedMessage); } } return result; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(super.equals(obj))) { return false; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.network.VmNic)) { return false; } org.ovirt.engine.core.common.businessentities.network.VmNic other = ((org.ovirt.engine.core.common.businessentities.network.VmNic) (obj)); if ((isPlugged()) != (other.isPlugged())) { return false; } if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getCustomProperties(), other.getCustomProperties()))) { return false; } if ((isPlugged()) != (other.isPlugged())) { return false; } if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getVmId(), other.getVmId()))) { return false; } if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getVnicProfileId(), other.getVnicProfileId()))) { return false; } if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getVmTemplateId(), other.getVmTemplateId()))) { return false; } return true; }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(super.equals(obj))) { return false; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.network.VmNic)) { return false; } org.ovirt.engine.core.common.businessentities.network.VmNic other = ((org.ovirt.engine.core.common.businessentities.network.VmNic) (obj)); if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getVmId(), other.getVmId()))) { return false; } if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getVnicProfileId(), other.getVnicProfileId()))) { return false; } if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getVmTemplateId(), other.getVmTemplateId()))) { return false; } return true; }
protected void setActionItem(org.ovirt.engine.api.model.Action action, java.lang.Object result) { java.lang.String name = result.getClass().getSimpleName().toLowerCase(); for (java.lang.reflect.Method m : action.getClass().getMethods()) { if ((m.getName().startsWith("set")) && (m.getName().replace("set", "").toLowerCase().equals(name))) { try { m.invoke(action, result); break; } catch (java.lang.Exception e) { org.ovirt.engine.api.restapi.resource.BackendResource.LOG.error("Resource to action asignment failure.", e); e.printStackTrace(); break; } } } }	protected void setActionItem(org.ovirt.engine.api.model.Action action, java.lang.Object result) { if (result == null) { return; } java.lang.String name = result.getClass().getSimpleName().toLowerCase(); for (java.lang.reflect.Method m : action.getClass().getMethods()) { if ((m.getName().startsWith("set")) && (m.getName().replace("set", "").toLowerCase().equals(name))) { try { m.invoke(action, result); break; } catch (java.lang.Exception e) { org.ovirt.engine.api.restapi.resource.BackendResource.LOG.error("Resource to action asignment failure.", e); break; } } } }
private boolean noGraphicsDevicesLeft() { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> devices = runInternalQuery(VdcQueryType.GetGraphicsDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(getParameters().getDev().getVmId())).getReturnValue(); return devices.isEmpty(); }	private boolean noGraphicsDevicesLeft() { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> devices = runInternalQuery(VdcQueryType.GetGraphicsDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(getVmBaseId())).getReturnValue(); return devices.isEmpty(); }
public static void InitDictionaries() { org.ovirt.engine.core.bll.CpuFlagsManagerHandler.log.info(("Start initializing " + (org.ovirt.engine.core.bll.CpuFlagsManagerHandler.class.getSimpleName()))); org.ovirt.engine.core.bll.CpuFlagsManagerHandler._managersDictionary.clear(); for (org.ovirt.engine.core.compat.Version ver : org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>GetValue(ConfigValues.SupportedClusterLevels)) { org.ovirt.engine.core.bll.CpuFlagsManagerHandler._managersDictionary.put(ver, new org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager(ver)); } org.ovirt.engine.core.bll.CpuFlagsManagerHandler.log.info(("Finished initializing " + (org.ovirt.engine.core.bll.CpuFlagsManagerHandler.class.getSimpleName()))); }	public static void InitDictionaries() { org.ovirt.engine.core.bll.CpuFlagsManagerHandler.log.info("Start initializing dictionaries"); org.ovirt.engine.core.bll.CpuFlagsManagerHandler._managersDictionary.clear(); for (org.ovirt.engine.core.compat.Version ver : org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>GetValue(ConfigValues.SupportedClusterLevels)) { org.ovirt.engine.core.bll.CpuFlagsManagerHandler._managersDictionary.put(ver, new org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager(ver)); } org.ovirt.engine.core.bll.CpuFlagsManagerHandler.log.info("Finished initializing dictionaries"); }
@java.lang.Override protected boolean canDoAction() { return ((((((((((isImageExist()) && (checkOperationIsCorrect())) && (isDiskUsedAsOvfStore())) && (isImageNotLocked())) && (isSourceAndDestTheSame())) && (validateSourceStorageDomain())) && (validateDestStorage())) && (checkTemplateInDestStorageDomain())) && (validateSpaceRequirements())) && (checkCanBeMoveInVm())) && (setAndValidateDiskProfiles()); }	@java.lang.Override protected boolean canDoAction() { return ((((((((((((isImageExist()) && (checkOperationIsCorrect())) && (isDiskUsedAsOvfStore())) && (isImageNotLocked())) && (isSourceAndDestTheSame())) && (validateSourceStorageDomain())) && (validateDestStorage())) && (checkTemplateInDestStorageDomain())) && (validateSpaceRequirements())) && (validateVmSnapshotStatus())) && (checkCanBeMoveInVm())) && (checkIfNeedToBeOverride())) && (setAndValidateDiskProfiles()); }
protected java.util.List<java.lang.String> missingServerCpuFlags(org.ovirt.engine.core.common.businessentities.VDS vds) { return cpuFlagsManagerHandler.missingServerCpuFlags(org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getVdsGroup().getCpuName(), vds.getCpuFlags(), org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getVdsGroup().getCompatibilityVersion()); }	protected java.util.List<java.lang.String> missingServerCpuFlags(org.ovirt.engine.core.common.businessentities.VDS vds) { return UpdateVdsGroupCommand.getCpuFlagsManagerHandler().missingServerCpuFlags(UpdateVdsGroupCommand.getVdsGroup().getCpuName(), vds.getCpuFlags(), UpdateVdsGroupCommand.getVdsGroup().getCompatibilityVersion()); }
protected boolean uniqueInterfaceName(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) { return org.ovirt.engine.core.bll.VmHandler.isNotDuplicateInterfaceName(interfaces, getInterfaceName(), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getReturnValue().getValidateMessages()); }	protected boolean uniqueInterfaceName(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) { return org.ovirt.engine.core.bll.VmHandler.isNotDuplicateInterfaceName(interfaces, getInterfaceName(), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getReturnValue().getValidationMessages()); }
protected org.ovirt.engine.core.dao.gluster.GlusterServerServiceDao getGlusterServerServoceDao() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getGlusterServerServiceDao(); }	protected org.ovirt.engine.core.dao.gluster.GlusterServerServiceDao getGlusterServerServiceDao() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getGlusterServerServiceDao(); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel) (array[0])); org.ovirt.engine.ui.uicommonweb.models.storage.RemoveStorageModel removeStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.RemoveStorageModel) (array[1])); org.ovirt.engine.core.common.businessentities.StorageDomain storage = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (storageListModel.getSelectedItem())); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); removeStorageModel.getHostList().setItems(hosts); removeStorageModel.getHostList().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(hosts)); removeStorageModel.getFormat().setEntity((!(storage.getStorageDomainType().isIsoOrImportExportDomain()))); if (hosts.isEmpty()) { org.ovirt.engine.ui.uicommonweb.UICommand tempVar = createCancelCommand("Cancel"); tempVar.setIsDefault(true); removeStorageModel.getCommands().add(tempVar); } else { org.ovirt.engine.ui.uicommonweb.UICommand command; command = createOKCommand("OnRemove"); removeStorageModel.getCommands().add(command); command = createCancelCommand("Cancel"); removeStorageModel.getCommands().add(command); } }	@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel) (array[0])); org.ovirt.engine.ui.uicommonweb.models.storage.RemoveStorageModel removeStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.RemoveStorageModel) (array[1])); org.ovirt.engine.core.common.businessentities.StorageDomain storage = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (storageListModel.getSelectedItem())); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); removeStorageModel.getHostList().setItems(hosts); removeStorageModel.getHostList().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(hosts)); removeStorageModel.getFormat().setEntity(storage.getStorageDomainType().isDataDomain()); if (hosts.isEmpty()) { org.ovirt.engine.ui.uicommonweb.UICommand tempVar = createCancelCommand("Cancel"); tempVar.setIsDefault(true); removeStorageModel.getCommands().add(tempVar); } else { org.ovirt.engine.ui.uicommonweb.UICommand command; command = createOKCommand("OnRemove"); removeStorageModel.getCommands().add(command); command = createCancelCommand("Cancel"); removeStorageModel.getCommands().add(command); } }
@org.junit.Test public void canRemoveLastBrick() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedVolume(volumeId1, 1); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(volumeEntity.getBricks(), volumeEntity, 1, false); assertFalse(validationResult.isValid()); assertTrue(((org.ovirt.engine.core.common.errors.EngineMessages.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME) == (validationResult.getMessage()))); }	@org.junit.Test public void canRemoveLastBrick() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedVolume(volumeId1, 1); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(volumeEntity.getBricks(), volumeEntity, 1, false); assertFalse(validationResult.isValid()); assertTrue(((org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME) == (validationResult.getMessage()))); }
private void addMacPool(final org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel dcModel) { org.ovirt.engine.ui.uicommonweb.models.macpool.SharedMacPoolModel macPoolModel = new org.ovirt.engine.ui.uicommonweb.models.macpool.NewSharedMacPoolModel(this, true) { @java.lang.Override protected void onActionSucceeded(org.ovirt.engine.core.compat.Guid macPoolId) { org.ovirt.engine.core.common.businessentities.MacPool macPool = getEntity(); macPool.setId(macPoolId); java.util.Collection<org.ovirt.engine.core.common.businessentities.MacPool> macPools = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.MacPool>(dcModel.getMacPoolListModel().getItems()); macPools.add(macPool); dcModel.getMacPoolListModel().setItems(macPools); dcModel.getMacPoolListModel().setSelectedItem(macPool); org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel.this.setConfirmWindow(null); } }; macPoolModel.setEntity(new org.ovirt.engine.core.common.businessentities.MacPool()); setConfirmWindow(macPoolModel); }	private void addMacPool(final org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel dcModel) { org.ovirt.engine.ui.uicommonweb.models.macpool.SharedMacPoolModel macPoolModel = new org.ovirt.engine.ui.uicommonweb.models.macpool.NewSharedMacPoolModel.ClosingWithSetConfirmWindow(this) { @java.lang.Override protected void onActionSucceeded(org.ovirt.engine.core.compat.Guid macPoolId) { org.ovirt.engine.core.common.businessentities.MacPool macPool = getEntity(); macPool.setId(macPoolId); java.util.Collection<org.ovirt.engine.core.common.businessentities.MacPool> macPools = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.MacPool>(dcModel.getMacPoolListModel().getItems()); macPools.add(macPool); dcModel.getMacPoolListModel().setItems(macPools); dcModel.getMacPoolListModel().setSelectedItem(macPool); org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel.this.setConfirmWindow(null); } }; macPoolModel.setEntity(new org.ovirt.engine.core.common.businessentities.MacPool()); setConfirmWindow(macPoolModel); }
@org.ovirt.engine.ui.uicompat.DefaultMessage("{0} Socket(s), {1} Core(s) per Socket") java.lang.String socketsCoresMessage(int sockets, int coresPerSocket);	@org.ovirt.engine.ui.uicompat.DefaultMessage("{0} ({1} Socket(s), {2} Core(s) per Socket)") java.lang.String cpuInfoMessage(int numOfCpus, int sockets, int coresPerSocket);
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessages.VAR__TYPE__HOST); addCanDoActionMessage(EngineMessages.VAR__ACTION__UPDATE); }	@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__TYPE__HOST); addCanDoActionMessage(EngineMessage.VAR__ACTION__UPDATE); }
private void checkVdsNetworkThreshold(org.ovirt.engine.core.common.businessentities.VdsStatistics stat) { java.lang.Integer maxUsedPercentageThreshold = org.ovirt.engine.core.common.config.Config.GetValue(ConfigValues.LogMaxNetworkUsedThresholdInPercentage); if ((stat.getusage_network_percent()) > maxUsedPercentageThreshold) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.setVdsId(stat.getId()); logable.AddCustomValue("HostName", _vds.getvds_name()); logable.AddCustomValue("UsedNetwork", stat.getusage_network_percent().toString()); logable.AddCustomValue("Threshold", maxUsedPercentageThreshold.toString()); auditLog(logable, AuditLogType.VDS_HIGH_NETWORK_USE); } }	private void checkVdsNetworkThreshold(org.ovirt.engine.core.common.businessentities.VdsStatistics stat) { java.lang.Integer maxUsedPercentageThreshold = org.ovirt.engine.core.common.config.Config.GetValue(ConfigValues.LogMaxNetworkUsedThresholdInPercentage); if (((stat.getusage_network_percent()) != null) && ((stat.getusage_network_percent()) > maxUsedPercentageThreshold)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(stat.getId()); logable.AddCustomValue("HostName", _vds.getvds_name()); logable.AddCustomValue("UsedNetwork", stat.getusage_network_percent().toString()); logable.AddCustomValue("Threshold", maxUsedPercentageThreshold.toString()); auditLog(logable, AuditLogType.VDS_HIGH_NETWORK_USE); } }
@java.lang.Override protected void init() { setNetworkFilterParameterWidgetVisible(true); super.init(); }	@java.lang.Override protected void init() { getNetworkFilterParameterListModel().setIsAvailable(true); super.init(); }
protected boolean isVmStatusValid(org.ovirt.engine.core.common.businessentities.VMStatus status) { return status != (org.ovirt.engine.core.common.businessentities.VMStatus.Down); }	protected boolean isVmStatusValid(org.ovirt.engine.core.common.businessentities.VMStatus status) { return status == (org.ovirt.engine.core.common.businessentities.VMStatus.Down); }
@java.lang.Override public boolean canBeSelected() { return getEntity().getGraphicsInfos().get(GraphicsType.VNC).isSet(); }	@java.lang.Override public boolean canBeSelected() { return getEntity().getGraphicsInfos().containsKey(GraphicsType.VNC); }
private void addTextAndLinkAlert(final org.ovirt.engine.ui.webadmin.section.main.presenter.tab.host.SubTabHostGeneralInfoPresenter.ViewDef view, final java.lang.String text, final org.ovirt.engine.ui.uicommonweb.UICommand command, final org.ovirt.engine.ui.webadmin.widget.alert.InLineAlertWidget.AlertType alertTtpe) { final int openIndex = text.indexOf("<a>"); final int closeIndex = text.indexOf("</a>"); if (((openIndex == (-1)) || (closeIndex == (-1))) || (closeIndex < openIndex)) { return; } final java.lang.String beforeText = text.substring(0, openIndex); final java.lang.String betweenText = text.substring((openIndex + 3), closeIndex); final java.lang.String afterText = text.substring((closeIndex + 4)); final com.google.gwt.user.client.ui.FlowPanel alertPanel = new com.google.gwt.user.client.ui.FlowPanel(); final com.google.gwt.user.client.ui.Label beforeLabel = new com.google.gwt.user.client.ui.Label(beforeText); beforeLabel.getElement().getStyle().setProperty("display", "inline"); alertPanel.add(beforeLabel); final com.google.gwt.user.client.ui.Anchor betweenAnchor = new com.google.gwt.user.client.ui.Anchor(betweenText); betweenAnchor.getElement().getStyle().setProperty("display", "inline"); alertPanel.add(betweenAnchor); betweenAnchor.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { command.execute(); } }); final com.google.gwt.user.client.ui.Label afterLabel = new com.google.gwt.user.client.ui.Label(afterText); afterLabel.getElement().getStyle().setProperty("display", "inline"); alertPanel.add(afterLabel); view.addAlert(alertPanel, alertTtpe); }	private void addTextAndLinkAlert(final org.ovirt.engine.ui.webadmin.section.main.presenter.tab.host.SubTabHostGeneralInfoPresenter.ViewDef view, final java.lang.String text, final org.ovirt.engine.ui.uicommonweb.UICommand command, final org.ovirt.engine.ui.webadmin.widget.alert.InLineAlertWidget.AlertType alertType) { final int openIndex = text.indexOf("<a>"); final int closeIndex = text.indexOf("</a>"); if (((openIndex == (-1)) || (closeIndex == (-1))) || (closeIndex < openIndex)) { return; } final java.lang.String beforeText = text.substring(0, openIndex); final java.lang.String betweenText = text.substring((openIndex + 3), closeIndex); final java.lang.String afterText = text.substring((closeIndex + 4)); final com.google.gwt.user.client.ui.FlowPanel alertPanel = new com.google.gwt.user.client.ui.FlowPanel(); final com.google.gwt.user.client.ui.Label beforeLabel = new com.google.gwt.user.client.ui.Label(beforeText); beforeLabel.getElement().getStyle().setProperty("display", "inline"); alertPanel.add(beforeLabel); final com.google.gwt.user.client.ui.Anchor betweenAnchor = new com.google.gwt.user.client.ui.Anchor(betweenText); betweenAnchor.getElement().getStyle().setProperty("display", "inline"); alertPanel.add(betweenAnchor); betweenAnchor.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { command.execute(); } }); final com.google.gwt.user.client.ui.Label afterLabel = new com.google.gwt.user.client.ui.Label(afterText); afterLabel.getElement().getStyle().setProperty("display", "inline"); alertPanel.add(afterLabel); view.addAlert(alertPanel, alertType); }
java.lang.String determineProtocolMessage(org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel item);	public java.lang.String determineProtocolMessage(org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel item);
protected com.google.gwt.user.client.ui.SplitLayoutPanel createRootPanel() { com.google.gwt.user.client.ui.SplitLayoutPanel rootPanel = new com.google.gwt.user.client.ui.SplitLayoutPanel(); rootPanel.setHeight("495px"); rootPanel.setWidth("100%"); return rootPanel; }	private com.google.gwt.user.client.ui.SplitLayoutPanel createRootPanel() { com.google.gwt.user.client.ui.SplitLayoutPanel rootPanel = new com.google.gwt.user.client.ui.SplitLayoutPanel(); rootPanel.setHeight("495px"); rootPanel.setWidth("100%"); return rootPanel; }
@org.junit.Test public void testCDAStoragePoolNotUp() { storagePool.setStatus(StoragePoolStatus.Uninitialized); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure("canDoAction did not fail on a Storage Pool which is not up", command, EngineMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND); }	@org.junit.Test public void testCDAStoragePoolNotUp() { storagePool.setStatus(StoragePoolStatus.Uninitialized); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure("canDoAction did not fail on a Storage Pool which is not up", command, EngineMessage.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND); }
public boolean isMigrateCompressed() { return migrateCompressed; }	public java.lang.Boolean getMigrateCompressed() { return migrateCompressed; }
@java.lang.Override protected void proceedProxyReturnValue() { org.ovirt.engine.core.common.errors.EngineErrors returnStatus = getReturnValueFromStatus(getReturnStatus()); switch (returnStatus) { case GetStorageDomainListError : org.ovirt.engine.core.vdsbroker.irsbroker.GetVolumesListVDSCommand.getVDSReturnValue().setVdsError(new org.ovirt.engine.core.common.errors.VDSError(returnStatus, getReturnStatus().mMessage)); org.ovirt.engine.core.vdsbroker.irsbroker.GetVolumesListVDSCommand.getVDSReturnValue().setSucceeded(false); break; default : super.proceedProxyReturnValue(); break; } }	@java.lang.Override protected void proceedProxyReturnValue() { org.ovirt.engine.core.common.errors.EngineError returnStatus = getReturnValueFromStatus(getReturnStatus()); switch (returnStatus) { case GetStorageDomainListError : org.ovirt.engine.core.vdsbroker.irsbroker.GetVolumesListVDSCommand.getVDSReturnValue().setVdsError(new org.ovirt.engine.core.common.errors.VDSError(returnStatus, getReturnStatus().mMessage)); org.ovirt.engine.core.vdsbroker.irsbroker.GetVolumesListVDSCommand.getVDSReturnValue().setSucceeded(false); break; default : super.proceedProxyReturnValue(); break; } }
@java.lang.Override public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter(java.lang.String fieldName) { if ("OS".equals(fieldName)) { return new org.ovirt.engine.core.searchbackend.OsValueAutoCompleter(); } else if ("STATUS".equals(fieldName)) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter(org.ovirt.engine.core.common.businessentities.VMStatus.class); } else if ("TYPE".equals(fieldName)) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter(org.ovirt.engine.core.common.businessentities.VmType.class); } else if ("QUOTA".equals(fieldName)) { return new org.ovirt.engine.core.searchbackend.NullableStringAutoCompleter(); } return null; }	@java.lang.Override public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter(java.lang.String fieldName) { if ("OS".equals(fieldName)) { return org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().get(org.ovirt.engine.core.searchbackend.OsValueAutoCompleter.class); } else if ("STATUS".equals(fieldName)) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter(org.ovirt.engine.core.common.businessentities.VMStatus.class); } else if ("TYPE".equals(fieldName)) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter(org.ovirt.engine.core.common.businessentities.VmType.class); } else if ("QUOTA".equals(fieldName)) { return new org.ovirt.engine.core.searchbackend.NullableStringAutoCompleter(); } return null; }
@org.junit.Test public void runSingleQuery() { org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters parameters = new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters(); org.ovirt.engine.core.common.queries.VdcQueryReturnValue value = backend.runInternalQuery(VdcQueryType.GetAllRoles, parameters); assertTrue(value.getSucceeded()); java.util.Collection<org.ovirt.engine.core.common.businessentities.RolesEntity> roles = ((java.util.Collection<org.ovirt.engine.core.common.businessentities.RolesEntity>) (value.getReturnValue())); for (org.ovirt.engine.core.common.businessentities.RolesEntity role : roles) { java.lang.System.out.println(role.getname()); } }	@org.junit.Test public void runSingleQuery() { org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters parameters = new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters(); org.ovirt.engine.core.common.queries.VdcQueryReturnValue value = backend.runInternalQuery(VdcQueryType.GetAllRoles, parameters); assertTrue(value.getSucceeded()); java.util.Collection<org.ovirt.engine.core.common.businessentities.Role> roles = ((java.util.Collection<org.ovirt.engine.core.common.businessentities.Role>) (value.getReturnValue())); for (org.ovirt.engine.core.common.businessentities.Role role : roles) { java.lang.System.out.println(role.getname()); } }
@java.lang.Override protected boolean canDoAction() { return (((super.canDoAction()) && (VdsGroupExists())) && (logicalNetworkExists())) && (changesAreClusterCompatible()); }	@java.lang.Override protected boolean canDoAction() { return (((super.canDoAction()) && (VdsGroupExists())) && (changesAreClusterCompatible())) && (logicalNetworkExists()); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Brick Directory field is mandatory") java.lang.String emptyBrickDirectoryMsg();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Brick Directory field is mandatory") java.lang.String emptyBrickDirectoryMsg();
protected java.lang.String getSessionId() { java.lang.String sessionId = null; if (((getContext()) != null) && ((getContext().getEngineContext()) != null)) { sessionId = getContext().getEngineContext().getSessionId(); } return sessionId; }	protected long getEngineSessionSeqId() { java.lang.String sessionId = getParameters().getSessionId(); if ((sessionId == null) && ((getContext()) != null)) { sessionId = getContext().getEngineContext().getSessionId(); } if (sessionId == null) { throw new java.lang.RuntimeException(("No sessionId found for command " + (getClass().getName()))); } return org.ovirt.engine.core.bll.aaa.SessionDataContainer.getInstance().getEngineSessionSeqId(sessionId); }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__ACTION__WRITE_PUB_KEYS); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__WRITE_PUB_KEYS); }
@java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand command, java.lang.Object... parameters) { super.ExecuteCommand(command); if (command == (getEditCommand())) { Edit(); } else if (command == (getEditManagementNetworkCommand())) { EditManagementNetwork(); } else if (command == (getSetupNetworksCommand())) { SetupNetworks(); } else if (command == (getBondCommand())) { executeBond(); } else if (command == (getDetachCommand())) { Detach(); } else if (command == (getSaveNetworkConfigCommand())) { SaveNetworkConfig(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnSave")) { OnSave(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnEditManagementNetwork")) { OnEditManagementNetwork(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnEditManagementNetworkConfirmation")) { OnEditManagementNetworkConfirmation(false); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnEditManagementNetworkConfirmation_Bond")) { OnEditManagementNetworkConfirmation(true); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnBond")) { OnBond(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnDetach")) { OnDetach(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnConfirmManagementDetach")) { OnConfirmManagementDetach(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "Cancel")) { Cancel(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "CancelConfirm")) { CancelConfirm(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnSaveNetworkConfig")) { OnSaveNetworkConfig(); } }	@java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand command, java.lang.Object... parameters) { super.ExecuteCommand(command); if (command == (getEditCommand())) { Edit(); } else if (command == (getEditManagementNetworkCommand())) { EditManagementNetwork(); } else if (command == (getSetupNetworksCommand())) { SetupNetworks(); } else if (command == (getBondCommand())) { bond(); } else if (command == (getDetachCommand())) { Detach(); } else if (command == (getSaveNetworkConfigCommand())) { SaveNetworkConfig(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnSave")) { OnSave(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnEditManagementNetwork")) { OnEditManagementNetwork(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnEditManagementNetworkConfirmation")) { OnEditManagementNetworkConfirmation(false); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnEditManagementNetworkConfirmation_Bond")) { OnEditManagementNetworkConfirmation(true); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnBond")) { OnBond(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnDetach")) { OnDetach(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnConfirmManagementDetach")) { OnConfirmManagementDetach(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "Cancel")) { Cancel(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "CancelConfirm")) { CancelConfirm(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnSaveNetworkConfig")) { OnSaveNetworkConfig(); } }
private void failOnDowngradingWithStorageType(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { storagePoolVersion35(); cmd.getStoragePool().setCompatibilityVersion(Version.v3_1); org.ovirt.engine.core.common.businessentities.StorageDomain sd = createStorageDomain(StorageFormatType.V3, storageType); setAttachedDomains(sd); canDoActionFailed(EngineMessages.ACTION_TYPE_FAILED_STORAGE_DOMAINS_ARE_NOT_SUPPORTED_IN_DOWNGRADED_VERSION); }	private void failOnDowngradingWithStorageType(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { storagePoolVersion35(); cmd.getStoragePool().setCompatibilityVersion(Version.v3_1); org.ovirt.engine.core.common.businessentities.StorageDomain sd = createStorageDomain(StorageFormatType.V3, storageType); setAttachedDomains(sd); canDoActionFailed(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAINS_ARE_NOT_SUPPORTED_IN_DOWNGRADED_VERSION); }
@java.lang.Override public HostJobInfo.HostJobStatus poll() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); return poller.pollImage(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getStoragePoolId(), info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId(), info.getGeneration(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getCommandId(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getActionType()); }	@java.lang.Override public HostJobInfo.HostJobStatus poll() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); return poller.pollImage(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStoragePoolId(), info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId(), info.getBaseImageGeneration(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getCommandId(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getActionType()); }
protected org.ovirt.engine.core.common.businessentities.VMStatus createVm() { initParametersForExternalNetworks(); initParametersForPassthroughVnics(); org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = ((org.ovirt.engine.core.common.businessentities.VMStatus) (org.ovirt.engine.core.bll.RunVmCommand.getVdsBroker().runAsyncVdsCommand(VDSCommandType.Create, buildCreateVmParameters(), this).getReturnValue())); memoryFromSnapshotUsed = (vmStatus.isRunning()) || (vmStatus == (org.ovirt.engine.core.common.businessentities.VMStatus.RestoringState)); return vmStatus; }	protected org.ovirt.engine.core.common.businessentities.VMStatus createVm() { updateCdPath(); if (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getParameters().getFloppyPath()))) { org.ovirt.engine.core.bll.RunVmCommand.getVm().setFloppyPath(cdPathWindowsToLinux(org.ovirt.engine.core.bll.RunVmCommand.getParameters().getFloppyPath())); } if (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getVm().getInitrdUrl()))) { org.ovirt.engine.core.bll.RunVmCommand.getVm().setInitrdUrl(getIsoPrefixFilePath(org.ovirt.engine.core.bll.RunVmCommand.getVm().getInitrdUrl())); } if (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getVm().getKernelUrl()))) { org.ovirt.engine.core.bll.RunVmCommand.getVm().setKernelUrl(getIsoPrefixFilePath(org.ovirt.engine.core.bll.RunVmCommand.getVm().getKernelUrl())); } initParametersForExternalNetworks(); initParametersForPassthroughVnics(); org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = ((org.ovirt.engine.core.common.businessentities.VMStatus) (org.ovirt.engine.core.bll.RunVmCommand.getVdsBroker().runAsyncVdsCommand(VDSCommandType.Create, buildCreateVmParameters(), this).getReturnValue())); memoryFromSnapshotUsed = (vmStatus.isRunning()) || (vmStatus == (org.ovirt.engine.core.common.businessentities.VMStatus.RestoringState)); return vmStatus; }
public org.ovirt.engine.core.bll.ValidationResult validateCinderDiskSnapshotsLimits() { return validate(new java.util.concurrent.Callable<org.ovirt.engine.core.bll.ValidationResult>() { @java.lang.Override public org.ovirt.engine.core.bll.ValidationResult call() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageMap = getRelatedCinderDisksToStorageDomainMap(); java.util.Collection<org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageCollection = relatedCinderDisksByStorageMap.values(); for (org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy relatedCinderDisksByStorage : relatedCinderDisksByStorageCollection) { com.woorea.openstack.cinder.model.Limits limits = relatedCinderDisksByStorage.getProxy().getLimits(); int numOfDisks = relatedCinderDisksByStorage.getCinderDisks().size(); if (isLimitExceeded(limits, VolumeClassification.Snapshot, numOfDisks)) { java.lang.String storageName = getStorageDomainDao().get(relatedCinderDisksByStorage.getStorageDomainId()).getStorageName(); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.CANNOT_ADD_CINDER_DISK_SNAPSHOT_LIMIT_EXCEEDED, java.lang.String.format("$maxTotalSnapshots %d", limits.getAbsolute().getMaxTotalVolumes()), java.lang.String.format("$storageName %s", storageName)); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; } }); }	public org.ovirt.engine.core.bll.ValidationResult validateCinderDiskSnapshotsLimits() { return validate(new java.util.concurrent.Callable<org.ovirt.engine.core.bll.ValidationResult>() { @java.lang.Override public org.ovirt.engine.core.bll.ValidationResult call() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageMap = getRelatedCinderDisksToStorageDomainMap(); java.util.Collection<org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageCollection = relatedCinderDisksByStorageMap.values(); for (org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy relatedCinderDisksByStorage : relatedCinderDisksByStorageCollection) { com.woorea.openstack.cinder.model.Limits limits = relatedCinderDisksByStorage.getProxy().getLimits(); int numOfDisks = relatedCinderDisksByStorage.getCinderDisks().size(); if (isLimitExceeded(limits, VolumeClassification.Snapshot, numOfDisks)) { java.lang.String storageName = getStorageDomainDao().get(relatedCinderDisksByStorage.getStorageDomainId()).getStorageName(); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_ADD_CINDER_DISK_SNAPSHOT_LIMIT_EXCEEDED, java.lang.String.format("$maxTotalSnapshots %d", limits.getAbsolute().getMaxTotalVolumes()), java.lang.String.format("$storageName %s", storageName)); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; } }); }
protected void validateVM(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, final java.lang.String vmName) { if (!(model.validate())) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isVmNameUnique(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { if ((!((java.lang.Boolean) (returnValue))) && ((vmName.compareToIgnoreCase(getcurrentVm().getName())) != 0)) { model.getName().getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason()); model.getName().setIsValid(false); model.setValidTab(TabName.GENERAL_TAB, false); } else { model.getName().getInvalidityReasons().clear(); model.getName().setIsValid(true); model.setValidTab(TabName.GENERAL_TAB, true); onSaveVM(model); } } }), vmName); }	protected void validateVm(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, final java.lang.String vmName) { if (!(model.validate())) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isVmNameUnique(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { if ((!((java.lang.Boolean) (returnValue))) && ((vmName.compareToIgnoreCase(getcurrentVm().getName())) != 0)) { model.getName().getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason()); model.getName().setIsValid(false); model.setValidTab(TabName.GENERAL_TAB, false); } else { model.getName().getInvalidityReasons().clear(); model.getName().setIsValid(true); model.setValidTab(TabName.GENERAL_TAB, true); onSaveVM(model); } } }), vmName); }
private void containerChanged() { if ((getContainer()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenter = getContainer().getDataCenter(); dataCenter.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { containerDataCenterChanged(); } }); if ((dataCenter.getSelectedItem()) != null) { containerDataCenterChanged(); } }	private void containerChanged() { if ((getContainer()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenter = getContainer().getDataCenter(); dataCenter.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { containerDataCenterChanged(); } }); if ((dataCenter.getSelectedItem()) != null) { containerDataCenterChanged(); } }
@java.lang.Override public org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> runBalance(java.lang.String balanceName, java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs, java.util.Map<java.lang.String, java.lang.String> propertiesMap) { try { org.apache.xmlrpc.client.XmlRpcClient client = new org.apache.xmlrpc.client.XmlRpcClient(); client.setConfig(config); java.lang.Object result = client.execute(org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.BALANCE, createBalanceArgs(balanceName, hostIDs, propertiesMap)); return org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerObjectBuilder.getBalanceResults(result).getResult(); } catch (org.apache.xmlrpc.XmlRpcException e) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.log.error("Error communicate with the external scheduler while balancing: {}", e.getMessage()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.log.debug("Exception", e); auditLogFailedToConnect(); return null; } }	@java.lang.Override public org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> runBalance(java.lang.String balanceName, java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs, java.util.Map<java.lang.String, java.lang.String> propertiesMap) { try { org.apache.xmlrpc.client.XmlRpcClient client = new org.apache.xmlrpc.client.XmlRpcClient(); client.setConfig(config); java.lang.Object result = client.execute(org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.BALANCE, createBalanceArgs(balanceName, hostIDs, propertiesMap)); return org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerObjectBuilder.getBalanceResults(result).getResult(); } catch (org.apache.xmlrpc.XmlRpcException e) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.log.error("Error communicating with the external scheduler while balancing: {}", e.getMessage()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.log.debug("Exception", e); auditLogFailedToConnect(); return null; } }
private void removeMemoryVolumesOfSnapshot(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = runInternalAction(VdcActionType.RemoveMemoryVolumes, new org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters(snapshot.getMemoryVolume(), org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVmId(), false), org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.cloneContextAndDetachFromParent()); if (!(retVal.getSucceeded())) { log.error("Failed to remove memory volumes of snapshot '{}' ({})", snapshot.getDescription(), snapshot.getId()); } }	private void removeMemoryVolumesOfSnapshot(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = runInternalAction(VdcActionType.RemoveMemoryVolumes, new org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters(snapshot.getMemoryVolume(), org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVmId()), org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.cloneContextAndDetachFromParent()); if (!(retVal.getSucceeded())) { log.error("Failed to remove memory volumes of snapshot '{}' ({})", snapshot.getDescription(), snapshot.getId()); } }
@java.lang.Override public void reportCompleted() { try { super.reportCompleted(); } finally { if ((getDestinationVdsId()) != null) { decreasePendingVms(getDestinationVdsId()); } org.ovirt.engine.core.bll.MigrateVmCommand.freeLock(); } }	@java.lang.Override public void reportCompleted() { try { super.reportCompleted(); } finally { if ((getDestinationVdsId()) != null) { decreasePendingVms(getDestinationVdsId()); } } }
private org.ovirt.engine.core.common.action.ImportVmParameters createImportParams(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.StorageDomain sd) { org.ovirt.engine.core.common.action.ImportVmParameters parameters = new org.ovirt.engine.core.common.action.ImportVmParameters(vm, sd.getId(), sd.getId(), sd.getStoragePoolId(), vm.getClusterId()); org.ovirt.engine.core.compat.Guid sdProfileId = diskProfileDao.getAllForStorageDomain(sd.getId()).get(0).getId(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : vm.getImages()) { image.setDiskProfileId(sdProfileId); image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(sd.getId()))); image.setVmSnapshotId(org.ovirt.engine.core.compat.Guid.newGuid()); } parameters.setImagesExistOnTargetStorageDomain(true); vm.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); org.ovirt.engine.core.common.businessentities.Cluster cluster = clusterDAO.get(vm.getClusterId()); vm.setClusterArch(cluster.getArchitecture()); vm.setVmCreationDate(new java.util.Date()); vm.setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE); vm.setVmOs(osRepository.getLinuxOss().stream().sorted().findFirst().get()); vm.setPriority(1); vm.setTimeZone(java.util.TimeZone.getDefault().getID()); return parameters; }	private org.ovirt.engine.core.common.action.ImportVmParameters createImportParams(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.StorageDomain sd) { org.ovirt.engine.core.common.action.ImportVmParameters parameters = new org.ovirt.engine.core.common.action.ImportVmParameters(vm, sd.getId(), sd.getId(), sd.getStoragePoolId(), vm.getClusterId()); org.ovirt.engine.core.compat.Guid sdProfileId = diskProfileDao.getAllForStorageDomain(sd.getId()).get(0).getId(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : vm.getImages()) { image.setDiskProfileId(sdProfileId); image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(sd.getId()))); image.setVmSnapshotId(org.ovirt.engine.core.compat.Guid.newGuid()); } parameters.setImagesExistOnTargetStorageDomain(true); vm.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); org.ovirt.engine.core.common.businessentities.Cluster cluster = clusterDAO.get(vm.getClusterId()); vm.setClusterArch(cluster.getArchitecture()); vm.setVmCreationDate(new java.util.Date()); vm.setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE); vm.setVmOs(osRepository.getLinuxOss().stream().sorted().findFirst().get()); vm.setPriority(1); org.ovirt.engine.core.bll.VmHandler.updateDefaultTimeZone(vm.getStaticData()); return parameters; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Remove Bricks Status") java.lang.String removeBricksStatusTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Remove Bricks Status") java.lang.String removeBricksStatusTitle();
public org.ovirt.engine.core.bll.ValidationResult networkExists() { return (getNetwork()) == null ? new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_NOT_EXISTS) : org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult networkExists() { return new org.ovirt.engine.core.bll.validator.NetworkValidator(getNetwork()).networkIsSet(); }
private org.ovirt.engine.core.common.businessentities.GraphicsDevice getGraphicsDevOfType(org.ovirt.engine.core.common.businessentities.GraphicsType type) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue query = org.ovirt.engine.core.bll.UpdateVmCommand.getBackend().runInternalQuery(VdcQueryType.GetGraphicsDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmId())); java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> graphicsDevices = query.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.GraphicsDevice dev : graphicsDevices) { if ((dev.getVmDeviceType()) == (type.getCorrespondingDeviceType())) { return dev; } } return null; }	private org.ovirt.engine.core.common.businessentities.GraphicsDevice getGraphicsDevOfType(org.ovirt.engine.core.common.businessentities.GraphicsType type) { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> graphicsDevices = getGraphicsDevices(); for (org.ovirt.engine.core.common.businessentities.GraphicsDevice dev : graphicsDevices) { if ((dev.getGraphicsType()) == type) { return dev; } } return null; }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type} without at least one bootable disk.\nAlternatives:\n- Create a disk for this VM, and rerun the VM.\n- Change the boot sequence using the Edit VM command (Boot Option Sub-Tab).\n- Use the Run-Once command to select a different boot option and rerun the VM.") java.lang.String VM_CANNOT_RUN_FROM_DISK_WITHOUT_DISK();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type} without at least one bootable disk.\nAlternatives:\n- Create a disk for this VM, and rerun the VM.\n- Change the boot sequence using the Edit VM command (Boot Option Sub-Tab).\n- Use the \'Run Once\' command to select a different boot option and rerun the VM.") java.lang.String VM_CANNOT_RUN_FROM_DISK_WITHOUT_DISK();
@org.junit.Test public void dontSyncNetworkAlreadyInSync() { org.ovirt.engine.core.common.businessentities.Network net = createNetwork("net"); mockExistingNetworks(net); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNicOnNetwork("nic0", net); mockExistingIfaces(nic); org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper(createParametersForSync(nic)); validateAndAssertNoChanges(helper); }	@org.junit.Test public void dontSyncNetworkAlreadyInSync() { org.ovirt.engine.core.common.businessentities.Network net = createNetwork("net"); mockExistingNetworks(net); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNicSyncedWithNetwork("nic0", net); mockExistingIfaces(nic); org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper(createParametersForSync(nic)); validateAndAssertNoChanges(helper); }
public void setMemoryStats(long totalMemory, long usedMemory) { java.lang.String totalMemoryString = messages.numaMemory(totalMemory); totalLabel.setText(totalMemoryString); java.lang.String usedMemoryString = messages.numaMemoryUsed(usedMemory); usedLabel.setText(usedMemoryString); }	public void setMemoryStats(long totalMemory, long usedMemory) { java.lang.String totalMemoryString = org.ovirt.engine.ui.common.view.popup.numa.MemorySummaryPanel.messages.numaMemory(totalMemory); totalLabel.setText(totalMemoryString); java.lang.String usedMemoryString = org.ovirt.engine.ui.common.view.popup.numa.MemorySummaryPanel.messages.numaMemoryUsed(usedMemory); usedLabel.setText(usedMemoryString); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.qos.StorageQos> qosList = (returnValue == null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.qos.StorageQos>() : ((java.util.List<org.ovirt.engine.core.common.businessentities.qos.StorageQos>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); qosList.add(0, org.ovirt.engine.ui.uicommonweb.models.profiles.DiskProfileBaseModel.EMPTY_QOS); getQos().setItems(qosList); if ((defaultQosId) != null) { for (org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos : qosList) { if (defaultQosId.equals(storageQos.getId())) { getQos().setSelectedItem(storageQos); break; } } } }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { this.initQosList((returnValue == null ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.qos.StorageQos>() : ((java.util.List<org.ovirt.engine.core.common.businessentities.qos.StorageQos>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())))); }
@org.junit.Test public void shouldKeepSameMajorWithOlderMinor() { newEnoughHost.setHostOs("RHEL - 6.0 - 1.el6"); assertThat(filter(runningVm, newEnoughHost, currentHost)).containsExactly(org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight(newEnoughHost, org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BETTER_WEIGHT), org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight(currentHost, org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BETTER_WEIGHT)); }	@org.junit.Test public void shouldKeepSameMajorWithOlderMinor() { newEnoughHost.setHostOs("RHEL - 6.0 - 1.el6"); assertThat(filter(runningVm, newEnoughHost, currentHost), hasItems(org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight(newEnoughHost, org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BETTER_WEIGHT), org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight(currentHost, org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BETTER_WEIGHT))); assertThat(filter(runningVm, newEnoughHost, currentHost), hasSize(2)); }
@java.lang.Override public void onDragLeave(com.google.gwt.event.dom.client.DragLeaveEvent event) { table.getElement().removeClassName(style.networkGroupDragOver()); eventBus.fireEvent(new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.AutoScrollDisableEvent(this)); }	@java.lang.Override public void onDragLeave(com.google.gwt.event.dom.client.DragLeaveEvent event) { (dragCounter)--; if ((dragCounter) == 0) { eventBus.fireEvent(new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.AutoScrollDisableEvent(this)); table.getElement().removeClassName(style.networkGroupDragOver()); } }
private org.ovirt.engine.core.common.vdscommands.VDSReturnValue handleVdsResult(org.ovirt.engine.core.common.vdscommands.VDSReturnValue result) { if (!(org.apache.commons.lang.StringUtils.isEmpty(result.getExceptionString()))) { org.ovirt.engine.core.common.errors.VdcBLLException exp; if ((result.getVdsError()) != null) { exp = new org.ovirt.engine.core.common.errors.VdcBLLException(result.getVdsError().getCode(), result.getExceptionString()); } else { exp = new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.ENGINE, result.getExceptionString()); } throw exp; } return result; }	private org.ovirt.engine.core.common.vdscommands.VDSReturnValue handleVdsResult(org.ovirt.engine.core.common.vdscommands.VDSReturnValue result) { if (org.apache.commons.lang.StringUtils.isNotEmpty(result.getExceptionString())) { org.ovirt.engine.core.common.errors.VdcBLLException exp; if ((result.getVdsError()) != null) { exp = new org.ovirt.engine.core.common.errors.VdcBLLException(result.getVdsError().getCode(), result.getExceptionString()); } else { exp = new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.ENGINE, result.getExceptionString()); } throw exp; } return result; }
@java.lang.Override protected void onBind() { super.onBind(); org.ovirt.engine.ui.webadmin.section.main.presenter.tab.host.SubTabHostGeneralHostErrataPresenter.logger.info(((this.getClass().toString()) + " onBind")); updateModel(currentErrataModel); getView().getTotalSecurity().setCommand(currentErrataModel.getShowSecurityCommand()); getView().getTotalBugFix().setCommand(currentErrataModel.getShowBugsCommand()); getView().getTotalEnhancement().setCommand(currentErrataModel.getShowEnhancementsCommand()); }	@java.lang.Override protected void onBind() { super.onBind(); getView().getTotalSecurity().setCommand(currentErrataCountModel.getShowSecurityCommand()); getView().getTotalBugFix().setCommand(currentErrataCountModel.getShowBugsCommand()); getView().getTotalEnhancement().setCommand(currentErrataCountModel.getShowEnhancementsCommand()); }
@org.junit.Test public void testGetLunsThatBreakPassDiscardFunctionalityFullPassDiscardFunctionalityBreaks() { createVmDiskOnSd(false, false); createVmDiskOnSd(true, true); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardSupport = createLunWithDiscardFunctionality(0L, false); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardZeroesTheDataSupport = createLunWithDiscardFunctionality(1024L, false); assertGetLunsThatBreakPassDiscardFunctionalityContainsExpectedLuns(java.util.Arrays.asList(createLunWithDiscardFunctionality(1024L, true), lunThatBreaksDiscardSupport, lunThatBreaksDiscardZeroesTheDataSupport), java.util.Arrays.asList(lunThatBreaksDiscardSupport, lunThatBreaksDiscardZeroesTheDataSupport)); }	@org.junit.Test public void testGetLunsThatBreakPassDiscardFunctionalityFullDiscardFunctionalityBreaks() { createVmDiskOnSd(false, false); createVmDiskOnSd(true, true); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardSupport = createLunWithDiscardFunctionality(0L, false); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardZeroesTheDataSupport = createLunWithDiscardFunctionality(1024L, false); assertGetLunsThatBreakPassDiscardFunctionalityContainsExpectedLuns(java.util.Arrays.asList(createLunWithDiscardFunctionality(1024L, true), lunThatBreaksDiscardSupport, lunThatBreaksDiscardZeroesTheDataSupport), java.util.Arrays.asList(lunThatBreaksDiscardSupport, lunThatBreaksDiscardZeroesTheDataSupport)); }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("description", getDescription()); }	@java.lang.Override public java.lang.String toString() { return java.lang.String.format("%s, description = %s", super.toString(), getDescription()); }
@org.junit.Test public void canDoActionSucceeds() { cmd = spy(new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters(org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommandTest.CLUSTER_ID, org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommandTest.HOOK_NAME, org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommandTest.GLUSTER_COMMAND, org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommandTest.LEVEL))); prepareMocks(cmd, getGlusterServers()); assertTrue(cmd.canDoAction()); }	@org.junit.Test public void canDoActionSucceeds() { cmd = spy(new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters(CLUSTER_ID, HOOK_ID))); setupMocks(cmd); assertTrue(cmd.canDoAction()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc destroyStoragePool(java.lang.String spUUID, int hostSpmId, java.lang.String SCSIKey) { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = irsServer.destroyStoragePool(spUUID, hostSpmId, SCSIKey); org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(xmlRpcReturnValue); return wrapper; }	public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc destroyStoragePool(java.lang.String spUUID, int hostSpmId, java.lang.String SCSIKey) { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = irsServer.destroyStoragePool(spUUID, hostSpmId, SCSIKey); org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(xmlRpcReturnValue); return wrapper; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { diskModel.getVolumeType().setSelectedItem(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (returnValue)).getVolumeType()); diskModel.getVolumeFormat().setSelectedItem(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (returnValue)).getVolumeFormat()); }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesAncestors = ((java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImage>) (returnValue)); for (java.util.Map.Entry<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImage> entry : imagesAncestors.entrySet()) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = diskModelsMap.get(entry.getKey()); diskModel.getVolumeType().setSelectedItem(entry.getValue().getVolumeType()); diskModel.getVolumeFormat().setSelectedItem(entry.getValue().getVolumeFormat()); } }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessages.VAR__ACTION__ACTIVATE); super.setActionMessageParameters(); }	@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__ACTIVATE); super.setActionMessageParameters(); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((getParameters().getAction()) == null) { return failCanDoAction(EngineMessages.WATCHDOG_ACTION_REQUIRED); } if ((getParameters().getModel()) == null) { return failCanDoAction(EngineMessages.WATCHDOG_MODEL_REQUIRED); } org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = runInternalQuery(VdcQueryType.GetWatchdog, new org.ovirt.engine.core.common.queries.IdQueryParameters(getParameters().getId())); java.util.Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = returnValue.getReturnValue(); if (!(watchdogs.isEmpty())) { return failCanDoAction(EngineMessages.WATCHDOG_ALREADY_EXISTS); } if ((!(getParameters().isClusterIndependent())) && (!(validate(validateModelCompatibleWithOs())))) { return false; } return true; }	@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((getParameters().getAction()) == null) { return failCanDoAction(EngineMessage.WATCHDOG_ACTION_REQUIRED); } if ((getParameters().getModel()) == null) { return failCanDoAction(EngineMessage.WATCHDOG_MODEL_REQUIRED); } org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = runInternalQuery(VdcQueryType.GetWatchdog, new org.ovirt.engine.core.common.queries.IdQueryParameters(getParameters().getId())); java.util.Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = returnValue.getReturnValue(); if (!(watchdogs.isEmpty())) { return failCanDoAction(EngineMessage.WATCHDOG_ALREADY_EXISTS); } if ((!(getParameters().isClusterIndependent())) && (!(validate(validateModelCompatibleWithOs())))) { return false; } return true; }
@org.junit.Test public void testVms() { testValidSql("Vms: status=Up or status=PoweringUp or status=MigratingTo or status=WaitForLaunch or status=RebootInProgress or status=PoweringDown or status=Paused or status=Unknown sortby cpu_usage desc", "SELECT * FROM (SELECT * FROM vms WHERE ( vm_guid IN (SELECT vms_with_tags.vm_guid FROM vms_with_tags WHERE ( ( ( ( ( ( ( vms_with_tags.status = '1' OR vms_with_tags.status = '2' ) OR vms_with_tags.status = '6' ) OR vms_with_tags.status = '9' ) OR vms_with_tags.status = '10' ) OR vms_with_tags.status = '16' ) OR vms_with_tags.status = '4' ) OR vms_with_tags.status = '7' ))) ORDER BY usage_cpu_percent DESC NULLS LAST,vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0"); }	@org.junit.Test public void testVms() { testValidSql("Vms:", "SELECT * FROM ((SELECT vms.* FROM vms ) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0"); testValidSql("Vms: storage.name = 111", "SELECT * FROM (SELECT * FROM vms WHERE ( vm_guid IN (SELECT vms_with_tags.vm_guid FROM vms_with_tags LEFT OUTER JOIN storage_domains_with_hosts_view ON vms_with_tags.storage_id=storage_domains_with_hosts_view.id WHERE storage_domains_with_hosts_view.storage_name LIKE 111 )) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0"); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.OpenStackVolumeProvider provider) { org.ovirt.engine.core.common.businessentities.StoragePool storagePool = (provider.isSetDataCenter()) ? getStoragePool(provider.getDataCenter()) : new org.ovirt.engine.core.common.businessentities.StoragePool(); provider.setDataCenter(org.ovirt.engine.api.restapi.types.DataCenterMapper.map(storagePool, null)); return performCreate(VdcActionType.AddProvider, new org.ovirt.engine.core.common.action.ProviderParameters(map(provider)), new org.ovirt.engine.api.restapi.resource.openstack.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetProviderById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }	@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.OpenStackVolumeProvider provider) { validateParameters(provider, "name"); if (provider.isSetDataCenter()) { org.ovirt.engine.core.common.businessentities.StoragePool storagePool = getStoragePool(provider.getDataCenter()); provider.setDataCenter(org.ovirt.engine.api.restapi.types.DataCenterMapper.map(storagePool, null)); } return performCreate(VdcActionType.AddProvider, new org.ovirt.engine.core.common.action.ProviderParameters(map(provider)), new org.ovirt.engine.api.restapi.resource.openstack.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetProviderById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
public static void GetAttachedTagsToUser(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.SetAttachedTagsConverter(aQuery); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetTagsByUserId, new org.ovirt.engine.ui.uicommonweb.dataprovider.GetTagsByUserIdParameters(id.toString()), aQuery); }	public static void getAttachedTagsToUser(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.setAttachedTagsConverter(aQuery); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetTagsByUserId, new org.ovirt.engine.core.common.queries.GetTagsByUserIdParameters(id.toString()), aQuery); }
@java.lang.Override public java.lang.String toString() { return ("StatusReturnForXmlRpc [mStatus=" + (mStatus)) + "]"; }	@java.lang.Override public java.lang.String toString() { return (((getClass().getSimpleName()) + " [mStatus=") + (mStatus)) + "]"; }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessages.VAR__ACTION__UPDATE); addCanDoActionMessage(EngineMessages.VAR__TYPE__QUOTA); }	@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__UPDATE); addCanDoActionMessage(EngineMessage.VAR__TYPE__QUOTA); }
private void initIpConfigurationAddress() { networkAttachments.get(0).getIpConfiguration().getPrimaryAddress().setAddress(org.ovirt.engine.core.bll.validator.network.NetworkAttachmentIpConfigurationValidatorTest.ADDRESS); }	private void initIpConfigurationAddress() { getTestedNetworkAttachment().getIpConfiguration().getPrimaryAddress().setAddress(org.ovirt.engine.core.bll.validator.network.NetworkAttachmentIpConfigurationValidatorTest.ADDRESS); }
public org.ovirt.engine.core.compat.Guid getServerServiceId() { return serverServiceId; }	public org.ovirt.engine.core.compat.Guid getServerId() { return serverId; }
@java.lang.Override @org.junit.Test public void testListCrashClientLocale() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations(null); locales.add(org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE); java.lang.Throwable t = new java.lang.RuntimeException(FAILURE); setUpEntityQueryExpectations(VdcQueryType.GetAllImagesList, org.ovirt.engine.core.common.queries.GetAllImagesListParameters.class, new java.lang.String[]{ "StorageDomainId" }, new java.lang.Object[]{ GUIDS[0] }, setUpFiles(), AbstractBackendCollectionResourceTest.FAILURE); collection.setUriInfo(uriInfo); setupGetStorageDomainExpectations(StorageDomainType.ISO); control.replay(); try { getCollection(); fail("expected WebApplicationException"); } catch (javax.ws.rs.WebApplicationException wae) { verifyFault(wae, org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE, t); } finally { locales.clear(); } }	@java.lang.Override @org.junit.Test public void testListCrashClientLocale() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations(null); locales.add(org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE); java.lang.Throwable t = new java.lang.RuntimeException(FAILURE); setUpEntityQueryExpectations(VdcQueryType.GetImagesList, org.ovirt.engine.core.common.queries.GetImagesListParameters.class, new java.lang.String[]{ "StorageDomainId" }, new java.lang.Object[]{ GUIDS[0] }, setUpFiles(), AbstractBackendCollectionResourceTest.FAILURE); collection.setUriInfo(uriInfo); setupGetStorageDomainExpectations(StorageDomainType.ISO); control.replay(); try { getCollection(); fail("expected WebApplicationException"); } catch (javax.ws.rs.WebApplicationException wae) { verifyFault(wae, org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE, t); } finally { locales.clear(); } }
public void logoffAsync(final org.ovirt.engine.core.common.users.VdcUser vdcUser, final org.ovirt.engine.ui.frontend.AsyncQuery callback) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Frontend: Invoking async Logoff."); org.ovirt.engine.ui.frontend.Frontend.getInstance().getOperationManager().logoutUser(vdcUser, new org.ovirt.engine.ui.frontend.communication.VdcUserCallback<org.ovirt.engine.core.common.action.VdcReturnValueBase>() { @java.lang.Override public void onSuccess(final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Succesful returned result from Logoff."); callback.getDel().onSuccess(callback.getModel(), result); if ((org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoginHandler()) != null) { org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoginHandler().onLogout(); } } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { if (ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ("Failed to execute Logoff: " + caught), caught); getEventsHandler().runQueryFailed(null); failureEventHandler(caught); callback.getDel().onSuccess(callback.getModel(), null); } }); }	public void logoffAsync(final org.ovirt.engine.core.common.businessentities.DbUser dbUser, final org.ovirt.engine.ui.frontend.AsyncQuery callback) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Frontend: Invoking async logoff."); org.ovirt.engine.ui.frontend.Frontend.getInstance().getOperationManager().logoutUser(dbUser, new org.ovirt.engine.ui.frontend.communication.UserCallback<org.ovirt.engine.core.common.action.VdcReturnValueBase>() { @java.lang.Override public void onSuccess(final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Succesful returned result from logoff."); callback.getDel().onSuccess(callback.getModel(), result); if ((org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoginHandler()) != null) { org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoginHandler().onLogout(); } } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { if (ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ("Failed to execute logoff: " + caught), caught); getEventsHandler().runQueryFailed(null); failureEventHandler(caught); callback.getDel().onSuccess(callback.getModel(), null); } }); }
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNetworkIdentification(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { org.ovirt.engine.core.compat.Guid networkId = attachment.getNetworkId(); java.lang.String networkName = attachment.getNetworkName(); org.ovirt.engine.core.compat.Guid violatingEntityId = attachment.getId(); return org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.validateCoherentIdentification((violatingEntityId == null ? null : violatingEntityId.toString()), networkId, networkName, EngineMessage.NETWORK_ATTACHMENT_REFERENCES_NETWORK_INCOHERENTLY, networkBusinessEntityMap); }	private org.ovirt.engine.core.bll.ValidationResult validateCoherentNetworkIdentification(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { org.ovirt.engine.core.compat.Guid networkId = attachment.getNetworkId(); java.lang.String networkName = attachment.getNetworkName(); org.ovirt.engine.core.compat.Guid violatingEntityId = attachment.getId(); return hostSetupNetworksValidatorHelper.validateCoherentIdentification(java.lang.String.valueOf(violatingEntityId), networkId, networkName, EngineMessage.NETWORK_ATTACHMENT_REFERENCES_NETWORK_INCOHERENTLY, networkBusinessEntityMap); }
@org.junit.Test public void qosNotSupported() throws java.lang.Exception { vnicProfileValidationTest(both(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWROK_QOS_IS_NOT_SUPPORTED)).and(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.replacements(hasItem(org.ovirt.engine.core.bll.validator.VmNicValidatorTest.CLUSTER_VERSION_REPLACEMENT))), true, true, true, false); }	@org.junit.Test public void networkQosNotSupported() throws java.lang.Exception { vnicProfileValidationTest(both(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWROK_QOS_IS_NOT_SUPPORTED)).and(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.replacements(hasItem(org.ovirt.engine.core.bll.validator.VmNicValidatorTest.CLUSTER_VERSION_REPLACEMENT))), true, true, true, false); }
private boolean networkRequiredOnVds(org.ovirt.engine.core.common.businessentities.VmNetworkInterface vmIf, java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.Network> networksByName, boolean onlyRequiredNetworks) { boolean networkRequiredOnVds = true; if (!(vmIf.isActive())) { networkRequiredOnVds = false; } else if (onlyRequiredNetworks) { networkRequiredOnVds = networksByName.get(vmIf.getNetworkName()).getCluster().isRequired(); } return networkRequiredOnVds; }	private boolean networkRequiredOnVds(org.ovirt.engine.core.common.businessentities.VmNetworkInterface vmIface, java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.Network> networksByName, boolean onlyRequiredNetworks) { boolean networkRequiredOnVds = true; if (!(vmIface.isActive())) { networkRequiredOnVds = false; } else if (onlyRequiredNetworks) { networkRequiredOnVds = networksByName.get(vmIface.getNetworkName()).getCluster().isRequired(); } return networkRequiredOnVds; }
private void showBrickAdvancedDetails() { final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity) (getEntity())); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = ((org.ovirt.engine.core.common.businessentities.VDSGroup) (returnValue)); if (((vdsGroup.getcompatibility_version()) != null) && ((Version.v3_2.compareTo(vdsGroup.getcompatibility_version())) <= 0)) { onShowBrickAdvancedDetails(volumeEntity); } else { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().advancedDetailsBrickTitle()); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().brickDetailsNotSupportedInClusterCompatibilityVersion(vdsGroup.getcompatibility_version().toString())); model.setHashName("brick_details_not_supported"); org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickListModel.this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()); command.setIsCancel(true); model.getCommands().add(command); } } }), volumeEntity.getClusterId()); }	private void showBrickAdvancedDetails() { final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity) (getEntity())); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = ((org.ovirt.engine.core.common.businessentities.VDSGroup) (returnValue)); if ((Version.v3_2.compareTo(vdsGroup.getcompatibility_version())) <= 0) { onShowBrickAdvancedDetails(volumeEntity); } else { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().advancedDetailsBrickTitle()); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().brickDetailsNotSupportedInClusterCompatibilityVersion(((vdsGroup.getcompatibility_version()) != null ? vdsGroup.getcompatibility_version().toString() : ""))); model.setHashName("brick_details_not_supported"); org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickListModel.this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()); command.setIsCancel(true); model.getCommands().add(command); } } }), volumeEntity.getClusterId()); }
public java.lang.String getName() { return (name) != null ? name : ""; }	public java.lang.String getName() { return name; }
public void setClientPolicy(org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy policy) { this.policy = policy; this.validate(); if (isOpen()) { scheduleClose("Policy reset"); } }	public void setClientPolicy(org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy policy) { this.policy = policy; this.validate(); if (!(isOpen())) { return; } try (org.ovirt.vdsm.jsonrpc.client.utils.LockWrapper wrapper = new org.ovirt.vdsm.jsonrpc.client.utils.LockWrapper(this.lock)) { if ((isOpen()) && (!(this.closing.get()))) { scheduleClose("Policy reset"); this.closing.set(true); } } }
private void verifyServiceOnServer1(org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService service) { assertEquals(org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.SERVICE1_ID, service.getServiceId().toString()); assertEquals(org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.SERVICE1_NAME, service.getServiceName()); assertEquals(org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.PID_1, service.getPid()); assertEquals(GlusterServiceStatus.RUNNING, service.getStatus()); }	private void verifyServiceOnServer1(org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService service) { assertEquals(org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.SERVICE1_ID, service.getServiceId().toString()); assertEquals(org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.SERVICE1_NAME, service.getServiceName()); assertEquals(org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.SERVICE1_TYPE, service.getServiceType()); assertEquals(org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.PID_1, service.getPid()); assertEquals(GlusterServiceStatus.RUNNING, service.getStatus()); }
public boolean validateQuotaNotDefault(org.ovirt.engine.core.compat.Guid quotaId) { if (getQuotaDao().isQuotaDefault(quotaId)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_CANNOT_CHANGE_DEFAULT); return false; } return true; }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.businessentities.Quota quota = getParameters().getQuota(); if (quota.isDefault()) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID); return false; } return ((validateQuotaNameIsUnique(quota)) && (validateQuotaStorageLimitation(quota))) && (validateQuotaClusterLimitation(quota)); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, final java.util.Comparator<? super T> comparator) { if ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity()) == null) { return; } org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity().getId()); parameters.setRefresh(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, parameters, new org.ovirt.engine.ui.uicommonweb.models.storage.SetSortedItemsAsyncQuery(comparator)); }	protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType queryType, final java.util.Comparator<? super T> comparator) { if ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity()) == null) { return; } org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity().getId()); parameters.setRefresh(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(queryType, parameters, new org.ovirt.engine.ui.uicommonweb.models.storage.SetSortedItemsAsyncQuery(comparator)); }
protected void registerModelPropertyChangeListener() { model.getPropertyChangedEvent().addListener(new org.ovirt.engine.core.compat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.core.compat.Event ev, java.lang.Object sender, org.ovirt.engine.core.compat.EventArgs args) { boolean isSelected = model.getIsSelected(); org.ovirt.engine.ui.common.widget.ModelBoundCheckBox.super.setValue(isSelected, true); } }); }	private void registerModelPropertyChangeListener() { model.getPropertyChangedEvent().addListener(new org.ovirt.engine.core.compat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.core.compat.Event ev, java.lang.Object sender, org.ovirt.engine.core.compat.EventArgs args) { boolean isSelected = model.getIsSelected(); org.ovirt.engine.ui.common.widget.ModelBoundCheckBox.super.setValue(isSelected, true); } }); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.utils.PairQueryable<org.ovirt.engine.core.common.businessentities.VDSGroup, org.ovirt.engine.core.common.businessentities.network.NetworkCluster> object) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = new java.util.LinkedHashMap<>(); if ((object.getSecond()) != null) { if (object.getSecond().isDisplay()) { imagesToText.put(displayImage, constants.displayItemInfo()); } if (object.getSecond().isMigration()) { imagesToText.put(migrationImage, constants.migrationItemInfo()); } if (object.getSecond().isManagement()) { imagesToText.put(managementImage, constants.managementItemInfo()); } } return org.ovirt.engine.ui.webadmin.widget.table.column.NetworkRoleColumnHelper.getTooltip(imagesToText); }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.utils.PairQueryable<org.ovirt.engine.core.common.businessentities.VDSGroup, org.ovirt.engine.core.common.businessentities.network.NetworkCluster> object) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = new java.util.LinkedHashMap<>(); if ((object.getSecond()) != null) { if (object.getSecond().isManagement()) { imagesToText.put(managementImage, constants.managementItemInfo()); } if (object.getSecond().isDisplay()) { imagesToText.put(displayImage, constants.displayItemInfo()); } if (object.getSecond().isMigration()) { imagesToText.put(migrationImage, constants.migrationItemInfo()); } } return org.ovirt.engine.ui.webadmin.widget.table.column.NetworkRoleColumnHelper.getTooltip(imagesToText); }
public void setValidateMessages(java.util.ArrayList<java.lang.String> value) { validateMessages = value; }	public void setValidationMessages(java.util.ArrayList<java.lang.String> value) { validationMessages = value; }
private void prepareMocks(org.ovirt.engine.core.bll.gluster.AddBricksToGlusterVolumeCommand command) { doReturn(volumeDao).when(command).getGlusterVolumeDao(); doReturn(vdsStaticDao).when(command).getVdsStaticDao(); doReturn(brickDao).when(command).getGlusterBrickDao(); doReturn(validator).when(command).createVolumeValidator(); doReturn(networkDao).when(command).getNetworkDao(); doReturn(interfaceDao).when(command).getInterfaceDao(); doReturn(getVds(VDSStatus.Up)).when(command).getUpServer(); doReturn(getSingleBrickVolume(volumeId1)).when(volumeDao).getById(volumeId1); doReturn(getMultiBrickVolume(volumeId2)).when(volumeDao).getById(volumeId2); doReturn(getBrick(volumeId1)).when(brickDao).getBrickByServerIdAndDirectory(serverId, org.ovirt.engine.core.bll.gluster.AddBricksToGlusterVolumeCommandTest.BRICK_DIRECTORY); doReturn(null).when(volumeDao).getById(null); doReturn(getVdsStatic()).when(vdsStaticDao).get(serverId); doReturn(getVDsGroup()).when(command).getVdsGroup(); doReturn(ValidationResult.VALID).when(validator).isForceCreateVolumeAllowed(Version.v3_1, false); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_ADD_BRICK_FORCE_NOT_SUPPORTED)).when(validator).isForceCreateVolumeAllowed(Version.v3_1, true); }	private void prepareMocks(org.ovirt.engine.core.bll.gluster.AddBricksToGlusterVolumeCommand command) { doReturn(volumeDao).when(command).getGlusterVolumeDao(); doReturn(vdsStaticDao).when(command).getVdsStaticDao(); doReturn(brickDao).when(command).getGlusterBrickDao(); doReturn(validator).when(command).createVolumeValidator(); doReturn(networkDao).when(command).getNetworkDao(); doReturn(interfaceDao).when(command).getInterfaceDao(); doReturn(getVds(VDSStatus.Up)).when(command).getUpServer(); doReturn(getSingleBrickVolume(volumeId1)).when(volumeDao).getById(volumeId1); doReturn(getMultiBrickVolume(volumeId2)).when(volumeDao).getById(volumeId2); doReturn(getBrick(volumeId1)).when(brickDao).getBrickByServerIdAndDirectory(serverId, org.ovirt.engine.core.bll.gluster.AddBricksToGlusterVolumeCommandTest.BRICK_DIRECTORY); doReturn(null).when(volumeDao).getById(null); doReturn(getVdsStatic()).when(vdsStaticDao).get(serverId); doReturn(getVDsGroup()).when(command).getVdsGroup(); doReturn(ValidationResult.VALID).when(validator).isForceCreateVolumeAllowed(Version.v3_1, false); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_ADD_BRICK_FORCE_NOT_SUPPORTED)).when(validator).isForceCreateVolumeAllowed(Version.v3_1, true); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValueObj) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValueObj)); java.lang.Object returnValue2 = returnValue.getReturnValue(); hostSetupNetworksParametersData.newOrModifiedNetworkAttachments = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>) (returnValue2)); queryVfsConfig(); }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValueObj) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValueObj)); java.lang.Object returnValue2 = returnValue.getReturnValue(); hostSetupNetworksParametersData.getNetworkAttachments().addAll(((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>) (returnValue2))); queryVfsConfig(); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> getCommandStepSubjectEntities() { if ((org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo()) instanceof org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) { return java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(org.ovirt.engine.core.common.VdcObjectType.Disk, ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo())).getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getJobWeight())); } return null; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> getCommandStepSubjectEntities() { if (((org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getJobWeight()) != null) && ((org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo()) instanceof org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo)) { return java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(org.ovirt.engine.core.common.VdcObjectType.Disk, ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo())).getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getJobWeight())); } return super.getCommandStepSubjectEntities(); }
private org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage cinderDisk) { org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters createParams = new org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getDiskDao().get(cinderDisk.getId()))).getImageId()); createParams.setVmSnapshotId(newActiveSnapshotId); createParams.setParentHasTasks(((!(cachedImagesDisks.isEmpty())) || (getMemoryImageBuilder().isCreateTasks()))); createParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); createParams.setDescription(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDescription()); createParams.setSnapshotType(SnapshotType.STATELESS); return withRootCommandInfo(createParams); }	private org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage cinderDisk) { org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters createParams = new org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getDiskDao().get(cinderDisk.getId()))).getImageId()); createParams.setVmSnapshotId(newActiveSnapshotId); createParams.setParentHasTasks(((!(cachedImagesDisks.isEmpty())) || (getMemoryImageBuilder().isCreateTasks()))); createParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); createParams.setDescription(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDescription()); createParams.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getSnapshotType()); return withRootCommandInfo(createParams); }
private void gatherExternalVms(org.ovirt.engine.core.common.businessentities.VM dbVm, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData vdsmVm) { if (dbVm == null) { externalVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, vdsmVm)); } }	protected void filterVms() { for (org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData vdsmVm : vdsmVms.values()) { org.ovirt.engine.core.common.businessentities.VM dbVm = dbVms.get(vdsmVm.getVmDynamic().getId()); gatherChangedVms(dbVm, vdsmVm); gatherVmsWithChangedDevices(dbVm, vdsmVm); } }
protected org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator createDomainValidator(org.ovirt.engine.core.common.businessentities.StorageDomain dom) { return new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(dom); }	protected org.ovirt.engine.core.bll.validator.storage.StorageDomainToPoolRelationValidator createDomainToPoolValidator(org.ovirt.engine.core.common.businessentities.StorageDomain dom) { return new org.ovirt.engine.core.bll.validator.storage.StorageDomainToPoolRelationValidator(dom.getStorageStaticData(), null); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromDb() { final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromDb(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }	@org.junit.Test public void canSetNumaConfigurationWithVmFromDb() { mockCommandWithVmFromDb(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(paramNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
public void setAllowOverbooking(org.ovirt.engine.ui.uicommonweb.models.EntityModel allowOverbooking) { this.allowOverbooking = allowOverbooking; }	public void setAllowOverbooking(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> allowOverbooking) { this.allowOverbooking = allowOverbooking; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc migrateCancel(java.lang.String vmId) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.migrateCancel").withParameter("vmID", vmId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc migrateCancel(java.lang.String vmId) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.migrateCancel").withParameter("vmID", vmId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__TYPE__STORAGE__DOMAIN); addValidateMessage(EngineMessage.VAR__ACTION__DETACH); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__TYPE__STORAGE__DOMAIN); addValidationMessage(EngineMessage.VAR__ACTION__DETACH); }
java.lang.String invalidAndRunningVmsWereAllFilteredOnImportVm();	java.lang.String nonRetrievedAndRunningVmsWereAllFilteredOnImportVm();
public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel.KsmPolicyForNuma> getKsmPolicyForNumaSelection() { return ksmPolicyForNumaSelection; }	public org.ovirt.engine.ui.uicommonweb.models.ListModel<java.util.List<org.ovirt.engine.core.common.businessentities.AdditionalFeature>> getAdditionalClusterFeatures() { return additionalClusterFeatures; }
@java.lang.Override protected void addVmToDb() { super.addVmToDb(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getOrigin()) == (org.ovirt.engine.core.common.businessentities.OriginType.KVM)) { importUtils.updateGraphicsDevices(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStoragePool().getCompatibilityVersion()); if (org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().isImportAsNewEntity()) { for (org.ovirt.engine.core.common.businessentities.VmDevice device : org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values()) { device.getId().setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()); } } vmDeviceDao.saveAll(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values()); if (!(vmDeviceUtils.hasCdDevice(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()))) { vmDeviceUtils.addCdDevice(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getVirtioIsoName()); } } }	@java.lang.Override protected void addVmToDb() { super.addVmToDb(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getOrigin()) == (org.ovirt.engine.core.common.businessentities.OriginType.KVM)) { importUtils.updateGraphicsDevices(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStoragePool().getCompatibilityVersion()); java.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> devices = org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values(); if (org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().isImportAsNewEntity()) { devices.forEach(( dev) -> dev.getId().setVmId(getVmId())); } vmDeviceDao.saveAll(devices); } }
private boolean canRemoveVmWithDetachDisks() { if (!(Guid.Empty.equals(org.ovirt.engine.core.bll.RemoveVmCommand.getVm().getVmtGuid()))) { return failCanDoAction(EngineMessages.VM_CANNOT_REMOVE_WITH_DETACH_DISKS_BASED_ON_TEMPLATE); } for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.RemoveVmCommand.getVm().getDiskList()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImageList = org.ovirt.engine.core.bll.RemoveVmCommand.getDiskImageDao().getAllSnapshotsForImageGroup(disk.getId()); if ((diskImageList.size()) > 1) { return failCanDoAction(EngineMessages.VM_CANNOT_REMOVE_WITH_DETACH_DISKS_SNAPSHOTS_EXIST); } } return true; }	private boolean canRemoveVmWithDetachDisks() { if (!(Guid.Empty.equals(org.ovirt.engine.core.bll.RemoveVmCommand.getVm().getVmtGuid()))) { return failCanDoAction(EngineMessage.VM_CANNOT_REMOVE_WITH_DETACH_DISKS_BASED_ON_TEMPLATE); } for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.RemoveVmCommand.getVm().getDiskList()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImageList = org.ovirt.engine.core.bll.RemoveVmCommand.getDiskImageDao().getAllSnapshotsForImageGroup(disk.getId()); if ((diskImageList.size()) > 1) { return failCanDoAction(EngineMessage.VM_CANNOT_REMOVE_WITH_DETACH_DISKS_SNAPSHOTS_EXIST); } } return true; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImageBasicView> disks = ((java.util.List<org.ovirt.engine.core.common.businessentities.DiskImageBasicView>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue())); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImageBasicView> diskList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImageBasicView>(); diskList.addAll(disks); java.util.Collections.sort(diskList, new org.ovirt.engine.ui.uicommonweb.Linq.DiskByAliasComparer()); org.ovirt.engine.ui.uicommonweb.models.SearchableListModel searchableListModel = ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (model)); searchableListModel.setItems(diskList); }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disks = ((java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue())); java.util.Collections.sort(disks, new org.ovirt.engine.ui.uicommonweb.Linq.DiskByAliasComparer()); org.ovirt.engine.ui.uicommonweb.models.SearchableListModel searchableListModel = ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (model)); searchableListModel.setItems(disks); }
protected void synchronizeNics(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.context.CompensationContext compensationContext, org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(getMacPool(vm.getStoragePoolId())); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(vm.getVdsGroupId(), vm.getStoragePoolId(), vm.getEffectiveCompatibilityVersion(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_SNAPSHOT_VM_INVALID_INTERFACES); vmInterfaceManager.removeAll(vm.getId()); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmInterface : vm.getInterfaces()) { vmInterface.setVmId(vm.getId()); if ((vmInterface.getId()) == null) { vmInterface.setId(org.ovirt.engine.core.compat.Guid.newGuid()); } vnicProfileHelper.updateNicWithVnicProfileForUser(vmInterface, user); vmInterfaceManager.add(vmInterface, compensationContext, true, vm.getOs(), vm.getEffectiveCompatibilityVersion()); } vnicProfileHelper.auditInvalidInterfaces(vm.getName()); }	protected void synchronizeNics(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.context.CompensationContext compensationContext, org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(getMacPool(vm.getStoragePoolId())); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(vm.getClusterId(), vm.getStoragePoolId(), vm.getCompatibilityVersion(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_SNAPSHOT_VM_INVALID_INTERFACES); vmInterfaceManager.removeAll(vm.getId()); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmInterface : vm.getInterfaces()) { vmInterface.setVmId(vm.getId()); if ((vmInterface.getId()) == null) { vmInterface.setId(org.ovirt.engine.core.compat.Guid.newGuid()); } vnicProfileHelper.updateNicWithVnicProfileForUser(vmInterface, user); vmInterfaceManager.add(vmInterface, compensationContext, true, vm.getOs(), vm.getCompatibilityVersion()); } vnicProfileHelper.auditInvalidInterfaces(vm.getName()); }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeSnapshotActivate(java.lang.String snapshotName, boolean force);	org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterSnapshotActivate(java.lang.String snapshotName, boolean force);
private void updateIscsiBondListAvailability(org.ovirt.engine.core.common.businessentities.StoragePool storagePool) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDataCenterStorageConnectionsByType(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>) (returnValue)); iscsiBondListModel.setIsAvailable((!(connections.isEmpty()))); } }), storagePool.getId(), StorageType.ISCSI); }	private void updateIscsiBondListAvailability(org.ovirt.engine.core.common.businessentities.StoragePool storagePool) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getStorageConnectionsByDataCenterIdAndStorageType(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { boolean hasIscsiStorage = false; java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>) (returnValue)); for (org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : connections) { if ((connection.getstorage_type()) == (org.ovirt.engine.core.common.businessentities.StorageType.ISCSI)) { hasIscsiStorage = true; break; } } iscsiBondListModel.setIsAvailable(hasIscsiStorage); } }), storagePool.getId(), StorageType.ISCSI); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.NetworkEntity getByName(java.lang.String name) { java.util.Map<java.lang.String, java.lang.Object> dbResults = dialect.createJdbcCallForQuery(jdbcTemplate).withProcedureName("GetnetworkByName").returningResultSet("RETURN_VALUE", org.ovirt.engine.core.dao.NetworkDAODbFacadeImpl.NetworkRowMapper.instance).execute(getCustomMapSqlParameterSource().addValue("networkName", name)); return ((org.ovirt.engine.core.common.businessentities.NetworkEntity) (org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.asSingleResult(((java.util.List<?>) (dbResults.get("RETURN_VALUE")))))); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.Network getByName(java.lang.String name) { java.util.Map<java.lang.String, java.lang.Object> dbResults = dialect.createJdbcCallForQuery(jdbcTemplate).withProcedureName("GetnetworkByName").returningResultSet("RETURN_VALUE", org.ovirt.engine.core.dao.NetworkDAODbFacadeImpl.NetworkRowMapper.instance).execute(getCustomMapSqlParameterSource().addValue("networkName", name)); return ((org.ovirt.engine.core.common.businessentities.Network) (org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.asSingleResult(((java.util.List<?>) (dbResults.get("RETURN_VALUE")))))); }
@org.junit.Test public void testCopyBySdName() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUpEntityQueryExpectations(VdcQueryType.GetAllStorageDomains, org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, java.util.Collections.singletonList(getStorageDomainEntity(0))); setUpEntityQueryExpectations(VdcQueryType.GetDiskByDiskId, org.ovirt.engine.core.common.queries.GetDiskByDiskIdParameters.class, new java.lang.String[]{ "DiskId" }, new java.lang.Object[]{ GUIDS[1] }, getEntity(1)); setUriInfo(setUpActionExpectations(VdcActionType.MoveOrCopyDisk, org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters.class, new java.lang.String[]{ "ImageId", "SourceDomainId", "StorageDomainId", "Operation" }, new java.lang.Object[]{ GUIDS[1], org.ovirt.engine.core.compat.Guid.Empty, GUIDS[3], org.ovirt.engine.core.common.businessentities.ImageOperation.Copy })); verifyActionResponse(resource.copy(setUpCopyParams(true))); }	protected void testCopyBySdName(boolean isFiltered) throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); if (isFiltered) { setUpFilteredQueryExpectations(); setUpEntityQueryExpectations(VdcQueryType.GetAllStorageDomains, org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, java.util.Collections.singletonList(getStorageDomainEntity(0))); } else { setUpGetEntityExpectations(("Storage: name=" + (NAMES[2])), SearchType.StorageDomain, getStorageDomainEntity(0)); } setUpEntityQueryExpectations(VdcQueryType.GetDiskByDiskId, org.ovirt.engine.core.common.queries.GetDiskByDiskIdParameters.class, new java.lang.String[]{ "DiskId" }, new java.lang.Object[]{ GUIDS[1] }, getEntity(1)); setUriInfo(setUpActionExpectations(VdcActionType.MoveOrCopyDisk, org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters.class, new java.lang.String[]{ "ImageId", "SourceDomainId", "StorageDomainId", "Operation" }, new java.lang.Object[]{ GUIDS[1], org.ovirt.engine.core.compat.Guid.Empty, GUIDS[3], org.ovirt.engine.core.common.businessentities.ImageOperation.Copy })); verifyActionResponse(resource.copy(setUpCopyParams(true))); }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__ACTION__UPDATE); addValidateMessage(EngineMessage.VAR__TYPE__VM_DISK); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__UPDATE); addValidationMessage(EngineMessage.VAR__TYPE__VM_DISK); }
public org.ovirt.engine.core.common.action.VdcReturnValueBase validateOnly() { setActionMessageParameters(); getReturnValue().setValidate(internalValidate()); java.lang.String tempVar = getDescription(); getReturnValue().setDescription((tempVar != null ? tempVar : getReturnValue().getDescription())); return _returnValue; }	public org.ovirt.engine.core.common.action.VdcReturnValueBase validateOnly() { setActionMessageParameters(); getReturnValue().setValid(internalValidate()); java.lang.String tempVar = getDescription(); getReturnValue().setDescription((tempVar != null ? tempVar : getReturnValue().getDescription())); return _returnValue; }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.StorageConnectionExtension storageConnectionExtension) { return null; }	@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.StorageConnectionExtension storageConnectionExtension) { org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension connExt = org.ovirt.engine.api.restapi.types.StorageServerConnectionExtensionMapper.map(storageConnectionExtension, null); connExt.setHostId(hostId); org.ovirt.engine.core.common.action.StorageServerConnectionExtensionParameters params = new org.ovirt.engine.core.common.action.StorageServerConnectionExtensionParameters(connExt); return performCreate(VdcActionType.AddStorageServerConnectionExtension, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetStorageServerConnectionExtensionById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { populateProfiles(((java.util.List<java.lang.String>) (result))); }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { populateProfiles(((java.util.List<org.ovirt.engine.core.aaa.ProfileEntry>) (result))); }
@org.ovirt.api.metamodel.annotations.Out types.AffinityGroup affinityGruop();	@org.ovirt.api.metamodel.annotations.Out types.AffinityGroup group();
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessages.VAR__ACTION__CREATE); super.setActionMessageParameters(); }	@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__CREATE); super.setActionMessageParameters(); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.LUNs> luns = getLunsForVgId(getVgId()); java.util.List<org.ovirt.engine.core.common.businessentities.LUNs> nonDummyLuns = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.LUNs>(); org.ovirt.engine.core.common.businessentities.StorageType storageType = getStorageType(luns); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.LUNs> lunsFromDeviceMap = getLunsFromDeviceMap(storageType); for (org.ovirt.engine.core.common.businessentities.LUNs lun : luns) { if (lun.getLUN_id().startsWith(AttachDetachStorageConnectionParameters.DUMMY_LUN_ID_PREFIX)) { continue; } nonDummyLuns.add(lun); for (org.ovirt.engine.core.common.businessentities.LUN_storage_server_connection_map map : getLunConnections(lun.getLUN_id())) { addConnection(lun, getConnection(map.getstorage_server_connection())); } org.ovirt.engine.core.common.businessentities.LUNs lunFromDeviceList = lunsFromDeviceMap.get(lun.getLUN_id()); if (lunFromDeviceList != null) { lun.setPathsDictionary(lunFromDeviceList.getPathsDictionary()); } } setReturnValue(nonDummyLuns); }	@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.LUNs> luns = getLunsForVgId(getVgId()); java.util.List<org.ovirt.engine.core.common.businessentities.LUNs> nonDummyLuns = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.LUNs>(luns.size()); org.ovirt.engine.core.common.businessentities.StorageType storageType = getStorageType(luns); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.LUNs> lunsFromDeviceMap = getLunsFromDeviceMap(storageType); for (org.ovirt.engine.core.common.businessentities.LUNs lun : luns) { if (lun.getLUN_id().startsWith(BusinessEntitiesDefinitions.DUMMY_LUN_ID_PREFIX)) { continue; } nonDummyLuns.add(lun); for (org.ovirt.engine.core.common.businessentities.LUN_storage_server_connection_map map : getLunConnections(lun.getLUN_id())) { addConnection(lun, getConnection(map.getstorage_server_connection())); } org.ovirt.engine.core.common.businessentities.LUNs lunFromDeviceList = lunsFromDeviceMap.get(lun.getLUN_id()); if (lunFromDeviceList != null) { lun.setPathsDictionary(lunFromDeviceList.getPathsDictionary()); } } setReturnValue(nonDummyLuns); }
private static boolean isWhiteListFiles(java.io.File file) { if (file == null) return false; java.lang.String fileName = file.getName(); if (org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.NotRequiredFiles).contains(fileName)) { return true; } return false; }	public static void sendFile(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response, final java.io.File file, final java.lang.String defaultType, boolean cache, boolean required) throws java.io.IOException { if (!(org.ovirt.engine.core.utils.servlet.ServletUtils.canReadFile(file))) { if (required) { org.ovirt.engine.core.utils.servlet.ServletUtils.log.error((((("Can\'t read file \"" + (file != null ? file.getAbsolutePath() : "")) + "\" for request \"") + (request.getRequestURI())) + "\", will send a 404 error response.")); } response.sendError(HttpServletResponse.SC_NOT_FOUND); } else { boolean send = true; if (cache) { java.lang.String eTag = org.ovirt.engine.core.utils.servlet.ServletUtils.getETag(file); response.setHeader("ETag", eTag); java.lang.String IfNoneMatch = request.getHeader("If-None-Match"); if ("*".equals(IfNoneMatch)) { response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED); send = false; } else if (eTag.equals(IfNoneMatch)) { response.setStatus(HttpServletResponse.SC_NOT_MODIFIED); send = false; } } if (send) { java.lang.String mime = defaultType; if (mime == null) { mime = org.ovirt.engine.core.utils.servlet.ServletUtils.mimeMap.getContentType(file); } response.setContentType(mime); response.setContentLength(((int) (org.ovirt.engine.core.utils.servlet.ServletUtils.getFileSize(file)))); org.ovirt.engine.core.utils.servlet.ServletUtils.writeFileToStream(response.getOutputStream(), file); } } }
@org.junit.Test public void checkIfDisksExistFailedVDSMReturnError() { org.ovirt.engine.core.common.action.MoveOrCopyParameters params = createParameters(true); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = createGetImageListReturnValue(false, java.util.Collections.<org.ovirt.engine.core.compat.Guid>emptyList()); org.ovirt.engine.core.bll.storage.export.MoveOrCopyTemplateCommand cmd = createCommand(params, returnValue); assertFalse(cmd.checkIfDisksExist(createImageList())); assertTrue(cmd.getReturnValue().getValidateMessages().contains(EngineMessage.ERROR_GET_IMAGE_LIST.name())); assertTrue(cmd.getReturnValue().getValidateMessages().contains("$sdName SD")); verify(cmd, times(1)).runVdsCommand(any(org.ovirt.engine.core.common.vdscommands.VDSCommandType.class), any(org.ovirt.engine.core.common.vdscommands.GetImagesListVDSCommandParameters.class)); }	@org.junit.Test public void checkIfDisksExistFailedVDSMReturnError() { org.ovirt.engine.core.common.action.MoveOrCopyParameters params = createParameters(true); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = createGetImageListReturnValue(false, java.util.Collections.<org.ovirt.engine.core.compat.Guid>emptyList()); org.ovirt.engine.core.bll.storage.export.MoveOrCopyTemplateCommand cmd = createCommand(params, returnValue); assertFalse(cmd.checkIfDisksExist(createImageList())); assertTrue(cmd.getReturnValue().getValidationMessages().contains(EngineMessage.ERROR_GET_IMAGE_LIST.name())); assertTrue(cmd.getReturnValue().getValidationMessages().contains("$sdName SD")); verify(cmd, times(1)).runVdsCommand(any(org.ovirt.engine.core.common.vdscommands.VDSCommandType.class), any(org.ovirt.engine.core.common.vdscommands.GetImagesListVDSCommandParameters.class)); }
protected boolean isStorageDomainTypeCorrect(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { if ((((storageDomain.getStorageDomainType()) != (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) && ((storageDomain.getStorageDomainType()) != (org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport))) && ((storageDomain.isLocal()) != (org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePool().isLocal()))) { addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_ATTACH_STORAGE_DOMAIN_STORAGE_TYPE_NOT_MATCH); return false; } return true; }	protected boolean isStorageDomainTypeCorrect(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { if ((!(isStorageDomainOfTypeIsoOrExport(storageDomain))) && ((storageDomain.isLocal()) != (org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePool().isLocal()))) { addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_ATTACH_STORAGE_DOMAIN_STORAGE_TYPE_NOT_MATCH); return false; } return true; }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if (!(cascadePopupPanel.isShowing())) { java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> cascadeActionButtonList = new java.util.ArrayList<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>>(); for (int i = 0; i < ((contentPanel.getWidgetCount()) - 1); i++) { if (!(contentPanel.getWidget(i).isVisible())) { cascadeActionButtonList.add(actionToolbarButtonList.get(i)); } } updateContextMenu(cascadeMenu, cascadeActionButtonList, cascadePopupPanel); cascadePopupPanel.showRelativeToAndFitToScreen(cascadeButton); } else { cascadePopupPanel.hide(); } }	@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if (!(cascadePopupPanel.isShowing())) { java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> cascadeActionButtonList = new java.util.ArrayList<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>>(); for (int i = 0; i < ((contentPanel.getWidgetCount()) - 1); i++) { if (!(contentPanel.getWidget(i).isVisible())) { cascadeActionButtonList.add(toolbarOnlyActionButtonList.get(i)); } } updateContextMenu(cascadeMenu, cascadeActionButtonList, cascadePopupPanel); cascadePopupPanel.showRelativeToAndFitToScreen(cascadeButton); } else { cascadePopupPanel.hide(); } }
@java.lang.Override public void serviceFound(org.ovirt.engine.ui.frontend.gwtservices.GenericApiGWTServiceAsync service) { service.Login(loginOperation.getParameter().getLoginName(), loginOperation.getParameter().getPassword(), loginOperation.getParameter().getProfileName(), loginOperation.getOperation(), new com.google.gwt.user.client.rpc.AsyncCallback<org.ovirt.engine.core.common.action.VdcReturnValueBase>() { @java.lang.Override public void onSuccess(final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { getXsrfRequestBuilder().setXsrfToken(null); loginOperation.getCallback().onSuccess(loginOperation, result); } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { loginOperation.getCallback().onFailure(loginOperation, caught); } }); }	@java.lang.Override public void serviceFound(org.ovirt.engine.ui.frontend.gwtservices.GenericApiGWTServiceAsync service) { service.Login(loginOperation.getParameter().getLoginName(), loginOperation.getParameter().getPassword(), loginOperation.getParameter().getProfileName(), loginOperation.getOperation(), new com.google.gwt.user.client.rpc.AsyncCallback<org.ovirt.engine.core.common.action.VdcReturnValueBase>() { @java.lang.Override public void onSuccess(final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { xsrfRequestBuilder.setXsrfToken(null); loginOperation.getCallback().onSuccess(loginOperation, result); } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { loginOperation.getCallback().onFailure(loginOperation, caught); } }); }
@org.junit.Test public void hostProviderDoesNotExist() { when(host.getHostProviderId()).thenReturn(org.ovirt.engine.core.compat.Guid.newGuid()); when(providerDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); when(dbFacade.getProviderDao()).thenReturn(providerDao); validator = new org.ovirt.engine.core.bll.validator.UpdateHostValidator(dbFacade, oldHost, host, false); assertThat(validator.hostProviderExists(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessages.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST)); }	@org.junit.Test public void hostProviderDoesNotExist() { when(host.getHostProviderId()).thenReturn(org.ovirt.engine.core.compat.Guid.newGuid()); when(providerDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); when(dbFacade.getProviderDao()).thenReturn(providerDao); validator = new org.ovirt.engine.core.bll.validator.UpdateHostValidator(dbFacade, oldHost, host, false); assertThat(validator.hostProviderExists(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST)); }
@org.junit.Test public void shouldFalbackToEl7ReleaseIdentifier() { final org.ovirt.engine.core.bll.scheduling.OS validOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - Server9 - release.el7"); assertThat(validOs.isValid()).isTrue(); assertThat(validOs.getVersion().getMajor()).isEqualTo(7); }	@org.junit.Test public void shouldFalbackToEl7ReleaseIdentifier() { final org.ovirt.engine.core.bll.scheduling.OS validOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - Server9 - release.el7"); assertThat(validOs.isValid(), is(true)); assertThat(validOs.getVersion().getMajor(), equalTo(7)); }
private void mergeValue() throws java.lang.Exception { java.lang.String key = parser.getKey(); java.lang.String value = parser.getValue(); java.lang.String version = parser.getVersion(); if (version == null) { version = startVersionDialog(key); } org.ovirt.engine.core.config.entity.ConfigKey configKey = fetchConfigKey(key, version); if ((configKey != null) && ((configKey.getKey()) != null)) { if ((!(configKey.isPasswordKey())) && ((configKey.getDisplayValue().trim().length()) > 0)) { java.lang.String val = configKey.getDisplayValue(); if (!(val.endsWith(";"))) { val += ";"; } val += value; value = val; } } boolean sucessUpdate = persist(key, value, version); if (!sucessUpdate) { org.ovirt.engine.core.config.EngineConfigLogic.log.debug((((("setValue: error concatenating " + key) + "'s value. No such entry") + (version == null ? "" : " with version " + version)) + ".")); throw new java.lang.IllegalArgumentException((((("Error setting " + key) + "'s value. No such entry") + (version == null ? "" : " with version " + version)) + ".")); } }	private void mergeValue() throws java.lang.Exception { java.lang.String key = parser.getKey(); java.lang.String value = parser.getValue(); if (!(keysConfig.getBoolean(((key + "/") + (org.ovirt.engine.core.config.EngineConfigLogic.MERGABLE_TOKEN)), false))) { org.ovirt.engine.core.config.EngineConfigLogic.console.writeFormat(org.ovirt.engine.core.config.EngineConfigLogic.MERGE_NOT_SUPPORTED_MSG, key); org.ovirt.engine.core.config.EngineConfigLogic.console.writeLine(); return; } java.lang.String version = parser.getVersion(); if (version == null) { version = startVersionDialog(key); } org.ovirt.engine.core.config.entity.ConfigKey configKey = fetchConfigKey(key, version); if (((configKey != null) && ((configKey.getKey()) != null)) && ((configKey.getDisplayValue().trim().length()) > 0)) { java.lang.String valueInDb = configKey.getDisplayValue().trim(); java.lang.String delimiter = keysConfig.getString(((key + "/") + (org.ovirt.engine.core.config.EngineConfigLogic.DELIMITER_TOKEN)), ";"); value = mergedValues(value, valueInDb, delimiter); if (valueInDb.equals(value)) { org.ovirt.engine.core.config.EngineConfigLogic.console.writeFormat(org.ovirt.engine.core.config.EngineConfigLogic.MERGE_SAME_VALUE_MSG); org.ovirt.engine.core.config.EngineConfigLogic.console.writeLine(); return; } } if (!(persist(key, value, version))) { java.lang.String msg = java.text.MessageFormat.format(org.ovirt.engine.core.config.EngineConfigLogic.MERGE_PERSIST_ERR_MSG, key, (version == null ? "" : " with version " + version)); org.ovirt.engine.core.config.EngineConfigLogic.log.debug(msg); throw new java.lang.IllegalArgumentException(msg); } }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((getGeoRepSession()) == null) { addCanDoActionMessage(EngineMessages.ACTION_TYPE_FAILED_GEOREP_SESSION_INVALID); return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = org.ovirt.engine.core.bll.gluster.GeoRepSessionCommandBase.getGlusterVolume(); if (!(volume.isOnline())) { addCanDoActionMessage(EngineMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN); addCanDoActionMessageVariable("volumeName", volume.getName()); return false; } return true; }	@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((getGeoRepSession()) == null) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_GEOREP_SESSION_INVALID); return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = org.ovirt.engine.core.bll.gluster.GeoRepSessionCommandBase.getGlusterVolume(); if (!(volume.isOnline())) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN); addCanDoActionMessageVariable("volumeName", volume.getName()); return false; } return true; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmTemplate get(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { return getCallsHandler().executeRead("GetVmTemplateByVmtGuid", org.ovirt.engine.core.dao.VmTemplateDAOImpl.VMTemplateRowMapper.instance, createIdParameterMapper(id).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmTemplate get(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { return getCallsHandler().executeRead("GetVmTemplateByVmtGuid", org.ovirt.engine.core.dao.VmTemplateDaoImpl.VMTemplateRowMapper.instance, createIdParameterMapper(id).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }
@org.junit.Test public void testAddWithStorageDomain() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUriInfo(setUpBasicUriExpectations()); setUpGetPayloadExpectations(1, 2); setUpGetBallooningExpectations(1, 2); setUpGetConsoleExpectations(new int[]{ 1, 2 }); setUpGetVmOvfExpectations(new int[]{ 2 }); setUpGetVirtioScsiExpectations(new int[]{ 2 }); setUpGetSoundcardExpectations(new int[]{ 2 }); setUpGetRngDeviceExpectations(new int[]{ 2 }); setUpGetCertuficateExpectations(1, 2); setUpEntityQueryExpectations(VdcQueryType.GetVmTemplate, org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[1] }, getTemplateEntity(0)); setUpEntityQueryExpectations(VdcQueryType.GetVdsGroupByVdsGroupId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[2] }, getVdsGroupEntity()); setUpCreationExpectations(VdcActionType.AddVm, org.ovirt.engine.core.common.action.VmManagementParametersBase.class, new java.lang.String[]{ "StorageDomainId" }, new java.lang.Object[]{ GUIDS[1] }, true, true, GUIDS[2], VdcQueryType.GetVmByVmId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[2] }, getEntity(2)); org.ovirt.engine.api.model.VM model = createModel(null); addStorageDomainToModel(model); javax.ws.rs.core.Response response = collection.add(model); assertEquals(201, response.getStatus()); assertTrue(((response.getEntity()) instanceof org.ovirt.engine.api.model.VM)); verifyModel(((org.ovirt.engine.api.model.VM) (response.getEntity())), 2); }	@org.junit.Test public void testAddWithStorageDomain() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUriInfo(setUpBasicUriExpectations()); setUpGetPayloadExpectations(1, 2); setUpGetBallooningExpectations(1, 2); setUpGetConsoleExpectations(new int[]{ 1, 2 }); setUpGetVmOvfExpectations(new int[]{ 2 }); setUpGetVirtioScsiExpectations(new int[]{ 2 }); setUpGetSoundcardExpectations(new int[]{ 2, 1 }); setUpGetRngDeviceExpectations(new int[]{ 2 }); setUpGetCertuficateExpectations(1, 2); setUpEntityQueryExpectations(VdcQueryType.GetVmTemplate, org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[1] }, getTemplateEntity(0)); setUpEntityQueryExpectations(VdcQueryType.GetVdsGroupByVdsGroupId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[2] }, getVdsGroupEntity()); setUpCreationExpectations(VdcActionType.AddVm, org.ovirt.engine.core.common.action.VmManagementParametersBase.class, new java.lang.String[]{ "StorageDomainId" }, new java.lang.Object[]{ GUIDS[1] }, true, true, GUIDS[2], VdcQueryType.GetVmByVmId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[2] }, getEntity(2)); org.ovirt.engine.api.model.VM model = createModel(null); addStorageDomainToModel(model); javax.ws.rs.core.Response response = collection.add(model); assertEquals(201, response.getStatus()); assertTrue(((response.getEntity()) instanceof org.ovirt.engine.api.model.VM)); verifyModel(((org.ovirt.engine.api.model.VM) (response.getEntity())), 2); }
@java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.ExecuteCommand(command); if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnSave")) { onSave(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "Cancel")) { cancel(); } }	@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnSave")) { onSave(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "Cancel")) { cancel(); } }
@java.lang.SuppressWarnings("unused") public boolean isDisplayNetworkAffected(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?, ?, ?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?, ?, ?> op2) { return false; }	@java.lang.SuppressWarnings("unused") public boolean isDisplayNetworkAffected(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2) { return false; }
public static void GetFloppyImageList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid storagePoolId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.dataprovider.RepoFileMetaData> repoList = ((java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.dataprovider.RepoFileMetaData>) (source)); java.util.ArrayList<java.lang.String> fileNameList = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.ui.uicommonweb.dataprovider.RepoFileMetaData RepoFileMetaData : repoList) { fileNameList.add(RepoFileMetaData.getRepoImageId()); } java.util.Collections.sort(fileNameList, new org.ovirt.engine.ui.uicommonweb.Linq.CaseInsensitiveComparer()); return fileNameList; } return new java.util.ArrayList<java.lang.String>(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetImagesListByStoragePoolId, new org.ovirt.engine.ui.uicommonweb.dataprovider.GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.Floppy), aQuery); }	public static void getFloppyImageList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid storagePoolId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoFileMetaData> repoList = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoFileMetaData>) (source)); java.util.ArrayList<java.lang.String> fileNameList = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.RepoFileMetaData RepoFileMetaData : repoList) { fileNameList.add(RepoFileMetaData.getRepoImageId()); } java.util.Collections.sort(fileNameList, new org.ovirt.engine.ui.uicommonweb.Linq.CaseInsensitiveComparer()); return fileNameList; } return new java.util.ArrayList<java.lang.String>(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetImagesListByStoragePoolId, new org.ovirt.engine.core.common.queries.GetImagesListByStoragePoolIdParameters(storagePoolId, org.ovirt.engine.core.common.businessentities.ImageFileType.Floppy), aQuery); }
@org.junit.Test public void testLong() { org.ovirt.engine.api.types.V4Vm object = newVm().setMemory((10L * (java.lang.Integer.MAX_VALUE))).build(); assertEquals("{'memory':21474836470}", objectToJson(object)); }	@org.junit.Test public void testLong() { org.ovirt.engine.api.types.V4Vm object = vm().memory((10L * (java.lang.Integer.MAX_VALUE))).build(); assertEquals("{'memory':21474836470}", objectToJson(object)); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAllSnapshotsForVmSnapshot(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_snapshot_id", id); return getCallsHandler().executeReadList("GetSnapshotsByVmSnapshotId", org.ovirt.engine.core.dao.DiskImageDAOImpl.DiskImageRowMapper.instance, parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAllSnapshotsForVmSnapshot(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_snapshot_id", id); return getCallsHandler().executeReadList("GetSnapshotsByVmSnapshotId", org.ovirt.engine.core.dao.DiskImageDaoImpl.DiskImageRowMapper.instance, parameterSource); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.AdUser.class, to = org.ovirt.engine.api.model.User.class) public static org.ovirt.engine.api.model.User map(org.ovirt.engine.core.common.businessentities.AdUser entity, org.ovirt.engine.api.model.User template) { org.ovirt.engine.api.model.User model = (template != null) ? template : new org.ovirt.engine.api.model.User(); model.setName(entity.getName()); model.setUserName(entity.getUserName()); model.setId(entity.getUserId().toString()); model.setLastName(entity.getSurName()); model.setEmail(entity.getEmail()); model.setDepartment(entity.getDepartment()); if ((entity.getGroups()) != null) { model.setGroups(new org.ovirt.engine.api.model.Groups()); for (org.ovirt.engine.core.common.businessentities.AdGroups adgroup : entity.getGroups().values()) { org.ovirt.engine.api.model.Group group = new org.ovirt.engine.api.model.Group(); group.setName(adgroup.getname()); model.getGroups().getGroups().add(group); } } if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(entity.getDomainControler()))) { org.ovirt.engine.api.model.Domain dom = new org.ovirt.engine.api.model.Domain(); dom.setName(entity.getDomainControler()); dom.setId(new org.ovirt.engine.core.compat.NGuid(entity.getDomainControler().getBytes(), true).toString()); model.setDomain(dom); } return model; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.LdapUser.class, to = org.ovirt.engine.api.model.User.class) public static org.ovirt.engine.api.model.User map(org.ovirt.engine.core.common.businessentities.LdapUser entity, org.ovirt.engine.api.model.User template) { org.ovirt.engine.api.model.User model = (template != null) ? template : new org.ovirt.engine.api.model.User(); model.setName(entity.getName()); model.setUserName(entity.getUserName()); model.setId(entity.getUserId().toString()); model.setLastName(entity.getSurName()); model.setEmail(entity.getEmail()); model.setDepartment(entity.getDepartment()); if ((entity.getGroups()) != null) { model.setGroups(new org.ovirt.engine.api.model.Groups()); for (org.ovirt.engine.core.common.businessentities.LdapGroup adgroup : entity.getGroups().values()) { org.ovirt.engine.api.model.Group group = new org.ovirt.engine.api.model.Group(); group.setName(adgroup.getname()); model.getGroups().getGroups().add(group); } } if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(entity.getDomainControler()))) { org.ovirt.engine.api.model.Domain dom = new org.ovirt.engine.api.model.Domain(); dom.setName(entity.getDomainControler()); dom.setId(new org.ovirt.engine.core.compat.NGuid(entity.getDomainControler().getBytes(), true).toString()); model.setDomain(dom); } return model; }
private static void map(org.ovirt.engine.api.model.ClusterQuotaLimit template, org.ovirt.engine.core.common.businessentities.QuotaVdsGroup quotaCluster, java.lang.String clusterId, java.lang.String dataCenterId, java.lang.String quotaId) { template.setQuota(new org.ovirt.engine.api.model.Quota()); template.getQuota().setId(quotaId); template.getQuota().setDataCenter(new org.ovirt.engine.api.model.DataCenter()); template.getQuota().getDataCenter().setId(dataCenterId); if (clusterId != null) { template.setCluster(new org.ovirt.engine.api.model.Cluster()); template.getCluster().setId(clusterId); } if ((quotaCluster.getMemSizeMB()) != null) { double value = ((quotaCluster.getMemSizeMB()) == (-1)) ? quotaCluster.getMemSizeMB() : (quotaCluster.getMemSizeMB()) / 1024.0; template.setMemoryLimit(value); } if ((quotaCluster.getMemSizeMBUsage()) != null) { template.setMemoryUsage(((quotaCluster.getMemSizeMBUsage()) / 1024.0)); } if ((quotaCluster.getVirtualCpu()) != null) { template.setVcpuLimit(quotaCluster.getVirtualCpu()); } if ((quotaCluster.getVirtualCpuUsage()) != null) { template.setVcpuUsage(quotaCluster.getVirtualCpuUsage()); } }	private static void map(org.ovirt.engine.api.model.QuotaClusterLimit template, org.ovirt.engine.core.common.businessentities.QuotaVdsGroup quotaCluster, java.lang.String clusterId, java.lang.String dataCenterId, java.lang.String quotaId) { template.setQuota(new org.ovirt.engine.api.model.Quota()); template.getQuota().setId(quotaId); template.getQuota().setDataCenter(new org.ovirt.engine.api.model.DataCenter()); template.getQuota().getDataCenter().setId(dataCenterId); if (clusterId != null) { template.setCluster(new org.ovirt.engine.api.model.Cluster()); template.getCluster().setId(clusterId); } if ((quotaCluster.getMemSizeMB()) != null) { double value = ((quotaCluster.getMemSizeMB()) == (-1)) ? quotaCluster.getMemSizeMB().doubleValue() : (quotaCluster.getMemSizeMB().doubleValue()) / 1024.0; template.setMemoryLimit(value); } if ((quotaCluster.getMemSizeMBUsage()) != null) { template.setMemoryUsage(((quotaCluster.getMemSizeMBUsage()) / 1024.0)); } if ((quotaCluster.getVirtualCpu()) != null) { template.setVcpuLimit(quotaCluster.getVirtualCpu()); } if ((quotaCluster.getVirtualCpuUsage()) != null) { template.setVcpuUsage(quotaCluster.getVirtualCpuUsage()); } }
private static <T> void setGateway(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.VDS host, T bootProtocol, org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher ipInfoFetcher, java.util.function.Consumer<java.lang.String> gatewaySetter) { if (bootProtocol == (org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.STATIC_IP)) { java.lang.String gateway = ipInfoFetcher.fetchGateway(); if (org.apache.commons.lang.StringUtils.isNotEmpty(gateway)) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGatewayIfNecessary(iface, host, gateway, gatewaySetter); } } }	private static <T, F extends org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher> void setBootProtocolAndGateway(org.ovirt.engine.core.vdsbroker.vdsbroker.BootProtocolResolver<T, F> bootProtocolResolver, F infoFetcher, java.util.function.Predicate<T> bootProtocolStaticIpPredicate, java.util.function.Consumer<T> bootProtocolSetter, java.util.function.Consumer<java.lang.String> gatewaySetter) { final T bootProtocol = bootProtocolResolver.resolve(infoFetcher); bootProtocolSetter.accept(bootProtocol); if (bootProtocolStaticIpPredicate.test(bootProtocol)) { java.lang.String gateway = infoFetcher.fetchGateway(); if (org.apache.commons.lang.StringUtils.isNotEmpty(gateway)) { gatewaySetter.accept(gateway); } } }
@org.junit.Before public void setUp() throws java.io.IOException, java.lang.Exception { client = new org.ovirt.engine.core.utils.ssh.OvirtSSH(); client.setSoftTimeout(org.ovirt.engine.core.utils.ssh.CommandTest.softTimeout); client.setHardTimeout(org.ovirt.engine.core.utils.ssh.CommandTest.hardTimeout); client.setHost(TestCommon.host, TestCommon.port); client.setUser(TestCommon.user); client.setPassword(TestCommon.password); client.connect(); }	@org.junit.Before public void setUp() throws java.io.IOException, java.lang.Exception { client = new org.ovirt.engine.core.utils.ssh.SSHClient(); client.setSoftTimeout(org.ovirt.engine.core.utils.ssh.CommandTest.softTimeout); client.setHardTimeout(org.ovirt.engine.core.utils.ssh.CommandTest.hardTimeout); client.setHost(TestCommon.host, TestCommon.port); client.setUser(TestCommon.user); client.setPassword(TestCommon.password); client.connect(); client.authenticate(); }
protected org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool() { return poolPerCluster.poolForCluster(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVdsGroupId()); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__TYPE__INTERFACE); }
public static void GetHostById(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid id) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVdsByVdsId, new org.ovirt.engine.ui.uicommonweb.dataprovider.GetVdsByVdsIdParameters(id), aQuery); }	public static void getHostById(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid id) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVdsByVdsId, new org.ovirt.engine.core.common.queries.IdQueryParameters(id), aQuery); }
private java.lang.Boolean getMigrateCompressed() { if (org.ovirt.engine.core.common.FeatureSupported.migrationCompression(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getVdsGroupCompatibilityVersion())) { return org.ovirt.engine.core.bll.MigrateVmCommand.getVm().isMigrateCompressed(); } return null; }	private java.lang.Boolean getMigrateCompressed() { if (org.ovirt.engine.core.common.FeatureSupported.migrationCompression(MigrateVmCommand.getVm().getVdsGroupCompatibilityVersion())) { if ((MigrateVmCommand.getVm().getMigrateCompressed()) != null) { return MigrateVmCommand.getVm().getMigrateCompressed(); } if ((MigrateVmCommand.getVdsGroup().getMigrateCompressed()) != null) { return MigrateVmCommand.getVdsGroup().getMigrateCompressed(); } return org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DefaultMigrationCompression); } return null; }
@org.junit.Test public void testAliasGenerationByAddVmImagesAndSnapshotsWithoutCollapse() { org.ovirt.engine.core.common.action.ImportVmParameters params = createParameters(); params.setCopyCollapse(false); org.ovirt.engine.core.bll.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> cmd = spy(new org.ovirt.engine.core.bll.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters>(params) { @java.lang.Override protected void initUser() { } @java.lang.Override public org.ovirt.engine.core.common.businessentities.Cluster getCluster() { return null; } }); cmd.postConstruct(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : params.getVm().getImages()) { doNothing().when(cmd).saveImage(image); doNothing().when(cmd).saveSnapshotIfNotExists(any(org.ovirt.engine.core.compat.Guid.class), eq(image)); doNothing().when(cmd).saveDiskImageDynamic(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImage activeDisk = params.getVm().getImages().get(1); doNothing().when(cmd).updateImage(activeDisk); doNothing().when(cmd).saveBaseDisk(activeDisk); doNothing().when(cmd).updateActiveSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); cmd.addVmImagesAndSnapshots(); assertEquals("Disk alias not generated", "testVm_Disk1", activeDisk.getDiskAlias()); }	@org.junit.Test public void testAliasGenerationByAddVmImagesAndSnapshotsWithoutCollapse() { org.ovirt.engine.core.common.action.ImportVmParameters params = createParameters(); params.setCopyCollapse(false); org.ovirt.engine.core.bll.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> cmd = spy(new org.ovirt.engine.core.bll.ImportVmCommandTest.ImportVmCommandStub(params)); cmd.poolPerDc = macPoolPerDc; cmd.postConstruct(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : params.getVm().getImages()) { doNothing().when(cmd).saveImage(image); doNothing().when(cmd).saveSnapshotIfNotExists(any(org.ovirt.engine.core.compat.Guid.class), eq(image)); doNothing().when(cmd).saveDiskImageDynamic(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImage activeDisk = params.getVm().getImages().get(1); doNothing().when(cmd).updateImage(activeDisk); doNothing().when(cmd).saveBaseDisk(activeDisk); doNothing().when(cmd).updateActiveSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); cmd.addVmImagesAndSnapshots(); assertEquals("Disk alias not generated", "testVm_Disk1", activeDisk.getDiskAlias()); }
@java.lang.Override protected void addCustomModelsDetailModelList(org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.HasEntity> list) { list.add(2, new org.ovirt.engine.ui.uicommonweb.models.templates.UserPortalTemplateDiskListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.templates.UserPortalTemplateEventListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.configure.UserPortalPermissionListModel()); }	private java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> sortTemplates(java.util.Collection<org.ovirt.engine.core.common.businessentities.VmTemplate> value) { final java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> sortedValues = new java.util.ArrayList(value); java.util.Collections.sort(sortedValues, new org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalTemplateListModel.TemplateComparator()); return sortedValues; }
public org.ovirt.engine.core.bll.ValidationResult vmNotDuringSnapshot(org.ovirt.engine.core.compat.Guid vmId) { if (getSnapshotDao().exists(vmId, SnapshotStatus.LOCKED)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT); } return org.ovirt.engine.core.bll.ValidationResult.valid; }	public org.ovirt.engine.core.bll.ValidationResult vmNotDuringSnapshot(org.ovirt.engine.core.compat.Guid vmId) { if (getSnapshotDao().exists(vmId, SnapshotStatus.LOCKED)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public void setPid(java.lang.Integer pid) { this.pid = pid; }	public void setPid(int pid) { this.pid = pid; }
@org.ovirt.engine.ui.common.widget.table.column.Template("<div style=\"{0}\" id=\"{1}\">{2}</div>") com.google.gwt.safehtml.shared.SafeHtml textContainer(java.lang.String style, java.lang.String id, com.google.gwt.safehtml.shared.SafeHtml text);	@org.ovirt.engine.ui.common.widget.table.column.Template("<div class=\"{0}\" id=\"{1}\">{2}</div>") com.google.gwt.safehtml.shared.SafeHtml textContainer(java.lang.String style, java.lang.String id, com.google.gwt.safehtml.shared.SafeHtml text);
private org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters buildCreateSnapshotParametersForEndAction() { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters parameters = buildCreateSnapshotParameters(); parameters.setImagesParameters(org.ovirt.engine.core.bll.CloneVmCommand.getParameters().getImagesParameters()); return parameters; }	protected org.ovirt.engine.core.common.businessentities.VM getSourceVmFromDb() { if ((sourceVm) == null) { sourceVm = org.ovirt.engine.core.bll.CloneVmCommand.getVmDAO().get(oldVmId); } return sourceVm; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("No Templates exist") java.lang.String templateNoExistsMsg();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("No Templates exist") java.lang.String templateNoExistsMsg();
public java.util.Map<java.lang.String, java.lang.String> getPmSecondaryOptionsMap() { return getPmOptionsMapInternal(getPmSecondaryPort(), getPmSecondarySlot(), getPmSecondarySecure(), getPmSecondaryOptions()); }	public java.util.Map<java.lang.String, java.lang.String> getPmSecondaryOptionsMap() { if (((!(isEntityModelEmpty(getPmSecondaryIp()))) || (!(isEntityModelEmpty(getPmSecondaryUserName())))) || (!(isEntityModelEmpty(getPmSecondaryPassword())))) { return getPmOptionsMapInternal(getPmSecondaryPort(), getPmSecondarySlot(), getPmSecondarySecure(), getPmSecondaryOptions()); } return new java.util.HashMap<java.lang.String, java.lang.String>(); }
@org.junit.Test public void testTemplate() { testValidSql("Template: ", "SELECT * FROM ((SELECT * FROM vm_templates_view ) ORDER BY name ASC ) as T1 OFFSET (1 -1) LIMIT 0"); }	@org.junit.Test public void testTemplate() { testValidSql("Template: ", "SELECT * FROM ((SELECT vm_templates_view.* FROM vm_templates_view ) ORDER BY name ASC ) as T1 OFFSET (1 -1) LIMIT 0"); testValidSql("Template: hosts.name = fake1", "SELECT * FROM ((SELECT vm_templates_view.* FROM vm_templates_view LEFT OUTER JOIN vms_with_tags ON vm_templates_view.vmt_guid=vms_with_tags.vmt_guid LEFT OUTER JOIN vds_with_tags ON vms_with_tags.run_on_vds=vds_with_tags.vds_id WHERE vds_with_tags.vds_name LIKE fake1 ) ORDER BY name ASC ) as T1 OFFSET (1 -1) LIMIT 0"); testValidSql("Templates: storage.name = 111", "SELECT * FROM (SELECT * FROM vm_templates_view WHERE ( vmt_guid IN (SELECT vm_templates_storage_domain.vmt_guid FROM vm_templates_storage_domain LEFT OUTER JOIN vms_with_tags ON vm_templates_storage_domain.vmt_guid=vms_with_tags.vmt_guid LEFT OUTER JOIN storage_domains_with_hosts_view ON vm_templates_storage_domain.storage_id=storage_domains_with_hosts_view.id WHERE storage_domains_with_hosts_view.storage_name LIKE 111 )) ORDER BY name ASC ) as T1 OFFSET (1 -1) LIMIT 0"); }
protected boolean isNicSupportedForPlugUnPlug() { if (osRepository.hasNicHotplugSupport(org.ovirt.engine.core.bll.VmCommand.getVm().getOs(), org.ovirt.engine.core.bll.VmCommand.getVm().getVdsGroupCompatibilityVersion())) { return true; } return failCanDoAction(EngineMessages.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); }	protected boolean isNicSupportedForPlugUnPlug() { if (osRepository.hasNicHotplugSupport(org.ovirt.engine.core.bll.VmCommand.getVm().getOs(), org.ovirt.engine.core.bll.VmCommand.getVm().getVdsGroupCompatibilityVersion())) { return true; } return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.ResetGlusterVolumeOptions, new org.ovirt.engine.core.common.vdscommands.gluster.ResetGlusterVolumeOptionsVDSParameters(upServer.getId(), getGlusterVolumeName(), getParameters().getVolumeOption(), getParameters().isForceAction())); setSucceeded(returnValue.getSucceeded()); if (getSucceeded()) { if (((getParameters().getVolumeOption()) != null) && (!(getParameters().getVolumeOption().getKey().isEmpty()))) { removeOptionInDb(getGlusterVolume().getOption(getParameters().getVolumeOption().getKey())); isResetAllOptions = false; } else { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity option : getGlusterVolume().getOptions()) { removeOptionInDb(option); } isResetAllOptions = true; } } else { handleVdsError(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, returnValue.getVdsError().getMessage()); return; } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.ResetGlusterVolumeOptions, new org.ovirt.engine.core.common.vdscommands.gluster.ResetGlusterVolumeOptionsVDSParameters(upServer.getId(), getGlusterVolumeName(), getParameters().getVolumeOption(), getParameters().isForceAction())); setSucceeded(returnValue.getSucceeded()); if (getSucceeded()) { if (((getParameters().getVolumeOption()) != null) && (!(getParameters().getVolumeOption().getKey().isEmpty()))) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity entity = getGlusterVolume().getOption(getParameters().getVolumeOption().getKey()); removeOptionInDb(entity); isResetAllOptions = false; if (entity != null) { java.lang.String optionValue = entity.getValue(); getParameters().getVolumeOption().setValue((optionValue != null ? optionValue : "")); addCustomValue(GlusterConstants.OPTION_KEY, getParameters().getVolumeOption().getKey()); addCustomValue(GlusterConstants.OPTION_VALUE, getParameters().getVolumeOption().getValue()); } } else { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity option : getGlusterVolume().getOptions()) { removeOptionInDb(option); } isResetAllOptions = true; } } else { handleVdsError(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, returnValue.getVdsError().getMessage()); return; } }
@java.lang.Override protected boolean canDoAction() { if (!(schedulingManager.getPolicyUnitsMap().containsKey(getPolicyUnitId()))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_POLICY_UNKNOWN_POLICY_UNIT); } java.util.List<java.lang.String> clusterPoliciesNames = schedulingManager.getClusterPoliciesNamesByPolicyUnitId(getPolicyUnitId()); if ((clusterPoliciesNames != null) && ((clusterPoliciesNames.size()) > 0)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_POLICY_UNIT_ATTACHED_TO_CLUSTER_POLICY, java.lang.String.format("$cpNames %1$s", org.apache.commons.lang.StringUtils.join(clusterPoliciesNames, ','))); } return true; }	@java.lang.Override protected boolean canDoAction() { if (!(schedulingManager.getPolicyUnitsMap().containsKey(getPolicyUnitId()))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_POLICY_UNKNOWN_POLICY_UNIT); } java.util.List<java.lang.String> clusterPoliciesNames = schedulingManager.getClusterPoliciesNamesByPolicyUnitId(getPolicyUnitId()); if ((clusterPoliciesNames != null) && ((clusterPoliciesNames.size()) > 0)) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_POLICY_UNIT_ATTACHED_TO_CLUSTER_POLICY, java.lang.String.format("$cpNames %1$s", org.apache.commons.lang.StringUtils.join(clusterPoliciesNames, ','))); } return true; }
private void Network_SelectedItemChanged(org.ovirt.engine.core.compat.EventArgs e) { UpdateCanSpecify(); org.ovirt.engine.core.common.businessentities.NetworkEntity network = ((org.ovirt.engine.core.common.businessentities.NetworkEntity) (getNetwork().getSelectedItem())); setBootProtocolsAvailable(((network != null) && (org.ovirt.engine.core.compat.StringHelper.stringsEqual(network.getname(), "None")) ? false : true)); if ((getNetworks()) != null) { for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface item : getNetworks()) { if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(item.getNetworkName(), network.getname())) { getAddress().setEntity((org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(item.getAddress()) ? null : item.getAddress())); getSubnet().setEntity((org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(item.getSubnet()) ? null : item.getSubnet())); setBootProtocol(((!(getNoneBootProtocolAvailable())) && ((item.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.NetworkBootProtocol.None)) ? org.ovirt.engine.core.common.businessentities.NetworkBootProtocol.Dhcp : item.getBootProtocol())); break; } } } }	private void Network_SelectedItemChanged(org.ovirt.engine.core.compat.EventArgs e) { UpdateCanSpecify(); org.ovirt.engine.core.common.businessentities.Network network = ((org.ovirt.engine.core.common.businessentities.Network) (getNetwork().getSelectedItem())); setBootProtocolsAvailable(((network != null) && (org.ovirt.engine.core.compat.StringHelper.stringsEqual(network.getname(), "None")) ? false : true)); if ((getNetworks()) != null) { for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface item : getNetworks()) { if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(item.getNetworkName(), network.getname())) { getAddress().setEntity((org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(item.getAddress()) ? null : item.getAddress())); getSubnet().setEntity((org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(item.getSubnet()) ? null : item.getSubnet())); setBootProtocol(((!(getNoneBootProtocolAvailable())) && ((item.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.NetworkBootProtocol.None)) ? org.ovirt.engine.core.common.businessentities.NetworkBootProtocol.Dhcp : item.getBootProtocol())); break; } } } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepConfigListXmlRpc glusterVolumeGeoRepConfigList(java.lang.String volumeName, java.lang.String slaveHost, java.lang.String slaveVolumeName, java.lang.String slaveUserName) { try { return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepConfigListXmlRpc(vdsServer.glusterVolumeGeoRepConfigList(volumeName, slaveHost, slaveVolumeName, slaveUserName)); } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepConfigListXmlRpc glusterVolumeGeoRepConfigList(java.lang.String volumeName, java.lang.String slaveHost, java.lang.String slaveVolumeName, java.lang.String userName) { try { return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepConfigListXmlRpc(vdsServer.glusterVolumeGeoRepConfigList(volumeName, slaveHost, slaveVolumeName, userName)); } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
@org.junit.Test public void testExecuteCommandFailsWithServerIdForStart() { cmd = spy(new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand(new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters(org.ovirt.engine.core.compat.Guid.newGuid(), null, org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT, org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_START))); setUpMockUpForStart(); mockBackend(false, EngineErrors.GlusterServicesActionFailed, GlusterServiceStatus.STOPPED); cmd.executeCommand(); verify(serverServiceDao, never()).updateByServerIdAndServiceType(any(org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService.class)); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_SERVICE_START_FAILED); }	@org.junit.Test public void testExecuteCommandFailsWithServerIdForStart() { cmd = spy(new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand(new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters(org.ovirt.engine.core.compat.Guid.newGuid(), null, org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT, org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_START))); setUpMockUpForStart(); mockBackend(false, EngineError.GlusterServicesActionFailed, GlusterServiceStatus.STOPPED); cmd.executeCommand(); verify(serverServiceDao, never()).updateByServerIdAndServiceType(any(org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService.class)); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_SERVICE_START_FAILED); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.aaa.AuthenticationProfile> profiles = org.ovirt.engine.core.aaa.AuthenticationProfileRepository.getInstance().getProfiles(); java.util.List<org.ovirt.engine.core.aaa.ProfileEntry> names = new java.util.ArrayList(profiles.size()); for (org.ovirt.engine.core.aaa.AuthenticationProfile profile : profiles) { names.add(new org.ovirt.engine.core.aaa.ProfileEntry(profile.getName(), org.ovirt.engine.core.aaa.AuthzUtils.getName(profile.getAuthz()))); } org.ovirt.engine.core.bll.GetAAAProfileListQuery.getQueryReturnValue().setReturnValue(names); }	@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.aaa.AuthenticationProfile> profiles = org.ovirt.engine.core.aaa.AuthenticationProfileRepository.getInstance().getProfiles(); java.util.List<org.ovirt.engine.core.aaa.ProfileEntry> names = new java.util.ArrayList(profiles.size()); for (org.ovirt.engine.core.aaa.AuthenticationProfile profile : profiles) { names.add(new org.ovirt.engine.core.aaa.ProfileEntry(profile.getName(), org.ovirt.engine.core.aaa.AuthzUtils.getName(profile.getAuthz()))); } java.util.Collections.sort(names, new java.util.Comparator<org.ovirt.engine.core.aaa.ProfileEntry>() { @java.lang.Override public int compare(org.ovirt.engine.core.aaa.ProfileEntry lhs, org.ovirt.engine.core.aaa.ProfileEntry rhs) { return (lhs.getProfile().compareTo(rhs.getProfile())) != 0 ? lhs.getProfile().compareTo(rhs.getProfile()) : lhs.getAuthz().compareTo(rhs.getAuthz()); } }); org.ovirt.engine.core.bll.GetAAAProfileListQuery.getQueryReturnValue().setReturnValue(names); }
@org.junit.Test public void testAllDomainsHaveSpaceForAllDisksFail() { java.util.List<org.ovirt.engine.core.compat.Guid> sdIdsForNew = java.util.Arrays.asList(sdId1, sdId2); java.util.List<org.ovirt.engine.core.compat.Guid> sdIdsForCloned = java.util.Arrays.asList(sdId2, sdId3); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksListForNew = generateDisksList(org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidatorTest.NUM_DISKS, sdIdsForNew); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksListForCloned = generateDisksList(org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidatorTest.NUM_DISKS, sdIdsForCloned); org.ovirt.engine.core.bll.validator.StorageDomainValidator storageDomainValidator = mock(org.ovirt.engine.core.bll.validator.StorageDomainValidator.class); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(storageDomainValidator).hasSpaceForAllDisks(anyList(), anyList()); org.ovirt.engine.core.bll.ValidationResult result = validator.allDomainsHaveSpaceForAllDisks(disksListForNew, disksListForCloned); assertFalse(result.isValid()); assertEquals("Wrong validation error", VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN, result.getMessage()); }	@org.junit.Test public void testAllDomainsHaveSpaceForAllDisksFail() { java.util.List<org.ovirt.engine.core.compat.Guid> sdIdsForNew = java.util.Arrays.asList(sdId1, sdId2); java.util.List<org.ovirt.engine.core.compat.Guid> sdIdsForCloned = java.util.Arrays.asList(sdId2, sdId3); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksListForNew = generateDisksList(org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidatorTest.NUM_DISKS, sdIdsForNew); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksListForCloned = generateDisksList(org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidatorTest.NUM_DISKS, sdIdsForCloned); org.ovirt.engine.core.bll.validator.StorageDomainValidator storageDomainValidator = mock(org.ovirt.engine.core.bll.validator.StorageDomainValidator.class); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(storageDomainValidator).hasSpaceForAllDisks(anyList(), anyList()); doReturn(storageDomainValidator).when(validator).getStorageDomainValidator(any(java.util.Map.Entry.class)); org.ovirt.engine.core.bll.ValidationResult result = validator.allDomainsHaveSpaceForAllDisks(disksListForNew, disksListForCloned); assertFalse(result.isValid()); assertEquals("Wrong validation error", VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN, result.getMessage()); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Name must contain alphanumeric characters or '_' (maximum length 15 characters).") java.lang.String nameMustContainAlphanumericMaxLenMsg();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Name must contain alphanumeric characters or '_' (maximum length 15 characters).") java.lang.String nameMustContainAlphanumericMaxLenMsg();
private static org.ovirt.engine.core.common.utils.Pair dnsServersOnly() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setDnsSearch("search1 search2"); vmInit.setDnsServers("nameserver1 nameserver2 nameserver3"); java.lang.String expectedOutput = "{\n" + ((((((((((((((((((((((" \"services\": [\n" + " {\n") + " \"address\": \"nameserver1\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver2\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver3\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"search1\",\n") + " \"type\": \"dns-search\"\n") + " },\n") + " {\n") + " \"address\": \"search2\",\n") + " \"type\": \"dns-search\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }	private static org.ovirt.engine.core.common.utils.Pair dnsServersOnly() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setStartOnBoot(true); vmInit.setNetworks(java.util.Arrays.asList(underTest)); vmInit.setDnsSearch("search1 search2"); vmInit.setDnsServers("nameserver1 nameserver2 nameserver3"); java.lang.String expectedOutput = "{\n" + ((((((((((((((((((((((" \"services\": [\n" + " {\n") + " \"address\": \"nameserver1\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver2\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver3\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"search1\",\n") + " \"type\": \"dns-search\"\n") + " },\n") + " {\n") + " \"address\": \"search2\",\n") + " \"type\": \"dns-search\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
private void updateActionAvailability() { java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> tempVar = getSelectedItems(); java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> selectedItems = (tempVar != null) ? tempVar : new java.util.ArrayList(); getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getForceRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getAddCommand().setIsAvailable(true); getRemoveCommand().setIsAvailable(true); getForceRemoveCommand().setIsAvailable(isSelectedProvidersOfType(ProviderType.OPENSTACK_VOLUME)); }	private void updateActionAvailability() { java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> tempVar = getSelectedItems(); java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> selectedItems = (tempVar != null) ? tempVar : new java.util.ArrayList(); getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getForceRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getAddCommand().setIsAvailable(true); getRemoveCommand().setIsAvailable(true); getForceRemoveCommand().setIsAvailable(isSelectedProviderOfType(ProviderType.OPENSTACK_VOLUME)); }
@org.junit.Test public void quotaDependencyTest() { for (org.ovirt.engine.core.common.action.VdcActionType vdcActionType : org.ovirt.engine.core.common.action.VdcActionType.values()) { if ((vdcActionType.getQuotaDependency()) != (VdcActionType.QuotaDependency.NONE)) { java.lang.Class commandClass = org.ovirt.engine.core.bll.CommandsFactory.getCommandClass(vdcActionType.name()); if (((commandClass.getAnnotation(java.lang.Deprecated.class)) != null) || ((commandClass.getAnnotation(org.ovirt.engine.core.bll.InternalCommandAttribute.class)) != null)) { continue; } switch (vdcActionType.getQuotaDependency()) { case VDS_GROUP : assertCommandIsQuotaVdsDependent(commandClass); break; case STORAGE : assertCommandIsQuotaStorageDependent(commandClass); break; case BOTH : assertCommandIsQuotaVdsDependent(commandClass); assertCommandIsQuotaStorageDependent(commandClass); break; default : break; } } } }	@org.junit.experimental.theories.Theory public void quotaDependencyTest(org.ovirt.engine.core.common.action.VdcActionType vdcActionType) { if ((vdcActionType.getQuotaDependency()) != (VdcActionType.QuotaDependency.NONE)) { java.lang.Class commandClass = org.ovirt.engine.core.bll.CommandsFactory.getCommandClass(vdcActionType.name()); if (((commandClass.getAnnotation(java.lang.Deprecated.class)) != null) || ((commandClass.getAnnotation(org.ovirt.engine.core.bll.InternalCommandAttribute.class)) != null)) { return; } switch (vdcActionType.getQuotaDependency()) { case VDS_GROUP : assertCommandIsQuotaVdsDependent(commandClass); break; case STORAGE : assertCommandIsQuotaStorageDependent(commandClass); break; case BOTH : assertCommandIsQuotaVdsDependent(commandClass); assertCommandIsQuotaStorageDependent(commandClass); break; default : break; } } }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { processVolumeStatus(result, rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.GlusterVolumeEngineDao.STATUS)); }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { processVolumeStatus(result, rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.GlusterVolumeEngineDao.STATUS), rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.GlusterVolumeEngineDao.BRICKS_NOT_UP)); }
private void addBondOptionIfMissing(java.lang.String candidateOption, boolean doesBondHaveVmNetworkAttached) { if (doesBondHaveVmNetworkAttached && (org.ovirt.engine.core.common.businessentities.network.BondMode.isBondModeValidForVmNetwork(candidateOption))) { return; } if (!(pairForBondOption.containsKey(candidateOption))) { org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> entityModel = new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>(); entityModel.setEntity(candidateOption); java.util.Map.Entry<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>> newPair = new org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>>("custom", entityModel); bondOptions.add(newPair); pairForBondOption.put(candidateOption, newPair); } }	private void addBondOptionIfMissing(java.lang.String candidateOption, boolean doesBondHaveVmNetworkAttached) { if (doesBondHaveVmNetworkAttached && (!(org.ovirt.engine.core.common.businessentities.network.BondMode.isBondModeValidForVmNetwork(candidateOption)))) { return; } if (!(pairForBondOption.containsKey(candidateOption))) { org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> entityModel = new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>(); entityModel.setEntity(candidateOption); java.util.Map.Entry<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>> newPair = new org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>>("custom", entityModel); bondOptions.add(newPair); pairForBondOption.put(candidateOption, newPair); } }
public org.ovirt.engine.core.bll.ValidationResult nameNotEmpty() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY).when(org.apache.commons.lang.StringUtils.isEmpty(host.getName())); }	public org.ovirt.engine.core.bll.ValidationResult nameNotEmpty() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY).when(org.apache.commons.lang.StringUtils.isEmpty(host.getName())); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.CloneVmModel cloneVmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.CloneVmModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>) (returnValue)); if (!(org.ovirt.engine.ui.uicommonweb.Linq.filterDisksByStorageType(disks, Disk.DiskStorageType.LUN).isEmpty())) { setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cloneVmLunsWontBeCloned()); } }	@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>) (returnValue)); if (!(org.ovirt.engine.ui.uicommonweb.Linq.filterDisksByStorageType(disks, Disk.DiskStorageType.LUN).isEmpty())) { setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cloneVmLunsWontBeCloned()); } }
public org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase.TimezoneType getTimeZoneType() { return org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase.TimezoneType.getTimezoneByOs(getModel().getIsWindowsOS()); }	public org.ovirt.engine.core.common.TimeZoneType getTimeZoneType() { org.ovirt.engine.core.common.businessentities.VmOsType vmOsType = ((org.ovirt.engine.core.common.businessentities.VmOsType) (getModel().getOSType().getSelectedItem())); return org.ovirt.engine.core.common.TimeZoneType.getTimeZoneByOs(vmOsType); }
public void onRestore() { importModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel) (getWindow())); if ((importModel.getProgress()) != null) { return; } if (!(importModel.validate())) { return; } cloneObjectMap = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.lang.Object>(); objectsToClone = new java.util.ArrayList<java.lang.Object>(); for (java.lang.Object object : ((java.util.ArrayList<java.lang.Object>) (importModel.getItems()))) { org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData item = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData) (object)); if (item.getClone().getEntity()) { objectsToClone.add(object); } } executeImportClone(); }	public void onRestore() { importModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmFromExportDomainModel) (getWindow())); if ((importModel.getProgress()) != null) { return; } if (!(importModel.validate())) { return; } cloneObjectMap = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.lang.Object>(); objectsToClone = new java.util.ArrayList<java.lang.Object>(); for (java.lang.Object object : ((java.util.ArrayList<java.lang.Object>) (importModel.getItems()))) { org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<java.lang.Object> item = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<java.lang.Object>) (object)); if (item.getClone().getEntity()) { objectsToClone.add(object); } } executeImportClone(); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } org.ovirt.engine.core.bll.validator.IscsiBondValidator validator = new org.ovirt.engine.core.bll.validator.IscsiBondValidator(); if (!(validate(validator.isIscsiBondExist(getExistingIscsiBond())))) { return false; } if ((isNameChanged()) && (!(validate(validator.iscsiBondWithTheSameNameExistInDataCenter(getIscsiBond()))))) { return false; } return true; }	@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.validator.IscsiBondValidator validator = new org.ovirt.engine.core.bll.validator.IscsiBondValidator(); if (!(validate(validator.isIscsiBondExist(getExistingIscsiBond())))) { return false; } if ((isNameChanged()) && (!(validate(validator.iscsiBondWithTheSameNameExistInDataCenter(getIscsiBond()))))) { return false; } return (validate(validator.validateAddedLogicalNetworks(getIscsiBond(), getExistingIscsiBond()))) && (validate(validator.validateAddedStorageConnections(getIscsiBond(), getExistingIscsiBond()))); }
public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl.log.error("Policy unit '{}' function is not implemented", getPolicyUnit().getName()); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> pairs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { pairs.add(new org.ovirt.engine.core.common.utils.Pair(vds.getId(), 1)); } return pairs; }	public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(@javax.validation.constraints.NotNull org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl.log.error("Policy unit '{}' function is not implemented", getPolicyUnit().getName()); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> pairs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { pairs.add(new org.ovirt.engine.core.common.utils.Pair(vds.getId(), 1)); } return pairs; }
@org.junit.Test public void checkNoHost() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0); parameters.setStorageServerConnection(newNFSConnection); parameters.setVdsId(null); parameters.setStorageServerConnection(newNFSConnection); when(storageConnDao.get(newNFSConnection.geIid())).thenReturn(oldNFSConnection); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); }	@org.junit.Test public void checkNoHost() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0); parameters.setStorageServerConnection(newNFSConnection); parameters.setVdsId(null); parameters.setStorageServerConnection(newNFSConnection); when(storageConnDao.get(newNFSConnection.getId())).thenReturn(oldNFSConnection); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); }
void save(org.ovirt.engine.core.common.businessentities.Bookmarks bookmark);	void save(org.ovirt.engine.core.common.businessentities.Bookmark bookmark);
@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { updateDefaultHost(); updateCustomPropertySheet(); updateNumOfSockets(); updateQuotaByCluster(vm.getQuotaId(), vm.getQuotaName()); updateCpuPinningVisibility(); updateMemoryBalloon(); updateCpuSharesAvailability(); updateVirtioScsiAvailability(); updateOSValues(); updateEmulatedMachines(); instanceTypeManager.updateAll(); }	@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { updateDefaultHost(); updateCustomPropertySheet(); updateNumOfSockets(); updateQuotaByCluster(vm.getQuotaId(), vm.getQuotaName()); updateCpuPinningVisibility(); updateMemoryBalloon(); updateCpuSharesAvailability(); updateVirtioScsiAvailability(); updateOSValues(); instanceTypeManager.updateAll(); }
public org.ovirt.engine.core.common.businessentities.network.IpV6Address getIpv6PrimaryAddress() { if (!(hasPrimaryIpv6AddressSet())) { throw new java.lang.IllegalStateException("IpConfiguration does not have IPv4 address set."); } return getIpV6Addresses().get(0); }	public org.ovirt.engine.core.common.businessentities.network.IpV6Address getIpv6PrimaryAddress() { if (!(hasIpv6PrimaryAddressSet())) { throw new java.lang.IllegalStateException("IpConfiguration does not have IPv6 address set."); } return getIpV6Addresses().get(0); }
protected boolean validateDestStorage() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain()); if ((!(validate(validator.isDomainExistAndActive()))) || (!(validate(validator.domainIsValidDestination())))) { return false; } boolean moveOrCopy = (isMoveOperation()) || (isCopyOperation()); if ((moveOrCopy && (getImage().isShareable())) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLUSTERFS))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS, java.lang.String.format("$%1$s %2$s", "diskAlias", getImage().getDiskAlias())); } if (isMoveOperation()) { if (getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_IS_NOT_VALID); } } return true; }	protected boolean validateDestStorage() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain()); if ((!(validate(validator.isDomainExistAndActive()))) || (!(validate(validator.domainIsValidDestination())))) { return false; } boolean moveOrCopy = (isMoveOperation()) || (isCopyOperation()); if ((moveOrCopy && (getImage().isShareable())) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLUSTERFS))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS, java.lang.String.format("$%1$s %2$s", "diskAlias", getImage().getDiskAlias())); } if (isMoveOperation()) { if (getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomainId())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_ALREADY_CONTAINS_THE_DISK); } } return true; }
public static void populateCpuUtilizationHosts(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> resourceUsage = dao.getCpuUtilizationHosts(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : resourceUsage) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed((((usage.getUsed()) * (usage.getTotal())) / 100)); entity.setTotal(usage.getTotal()); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addResource(entity); } }	public static void populateCpuUtilizationHosts(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> resourceUsage = dao.getCpuUtilizationHosts(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : resourceUsage) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed((((usage.getUsed()) * (usage.getTotal())) / 100)); entity.setTotal(usage.getTotal()); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addResource(entity); } }
@java.lang.Override public void setInputFieldsEnabled(boolean enabled) { nameEditor.setEnabled(enabled); descriptionEditor.setEnabled(enabled); isVmNetworkEditor.setEnabled(enabled); vlanTagging.setEnabled(enabled); vlanTag.setEnabled(enabled); hasMtuEditor.setEnabled(enabled); mtuEditor.setEnabled(enabled); if (enabled) { messageLabel.setVisible(false); } else { messageLabel.setVisible(true); } }	@java.lang.Override public void setInputFieldsEnabled(boolean enabled) { nameEditor.setEnabled(enabled); descriptionEditor.setEnabled(enabled); isVmNetworkEditor.setEnabled(enabled); vlanTagging.setEnabled(enabled); vlanTag.setEnabled(enabled); hasMtuEditor.setEnabled(enabled); mtuEditor.setEnabled(enabled); messageLabel.setVisible((!enabled)); }
private boolean isSparsifyCommandAvailable() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.Disk>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { if ((isDiskLocked(disk)) || ((!(isVmDown())) && (disk.getPlugged()))) { return false; } } return true; }	private boolean isSparsifyCommandAvailable() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.Disk>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { if ((isDiskLocked(disk)) || ((!(isVmDown())) && (disk.getPlugged()))) { return false; } } return true; }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = new org.ovirt.engine.core.bll.validator.VnicProfileValidator(vmDao, org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getVnicProfile()); return (((((((validate(validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileForVmNetworkOnly()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidateMessages()))) && (validate(validator.passthroughProfileContainsSupportedProperties())); }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = new org.ovirt.engine.core.bll.validator.VnicProfileValidator(vmDao, org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getVnicProfile()); return (((((((validate(validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileForVmNetworkOnly()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.passthroughProfileContainsSupportedProperties())); }
public org.ovirt.engine.core.bll.ValidationResult profileValid(org.ovirt.engine.core.compat.Guid clusterId) { if ((nic.getVnicProfileId()) != null) { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = getDbFacade().getVnicProfileDao().get(nic.getVnicProfileId()); if (vnicProfile == null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VNIC_PROFILE_NOT_EXISTS); } org.ovirt.engine.core.common.businessentities.network.Network network = getNetworkByVnicProfile(vnicProfile); if ((network == null) || (!(isNetworkInCluster(network, clusterId)))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_NOT_EXISTS_IN_CURRENT_CLUSTER); } if ((!(org.ovirt.engine.core.common.FeatureSupported.networkQoS(version))) && ((getDbFacade().getQosDao().get(vnicProfile.getNetworkQosId())) != null)) return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NETWROK_QOS_IS_NOT_SUPPORTED, clusterVersion()); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult profileValid(org.ovirt.engine.core.compat.Guid clusterId) { if ((nic.getVnicProfileId()) != null) { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = getDbFacade().getVnicProfileDao().get(nic.getVnicProfileId()); if (vnicProfile == null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VNIC_PROFILE_NOT_EXISTS); } org.ovirt.engine.core.common.businessentities.network.Network network = getNetworkByVnicProfile(vnicProfile); if ((network == null) || (!(isNetworkInCluster(network, clusterId)))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_NOT_EXISTS_IN_CURRENT_CLUSTER); } if ((!(org.ovirt.engine.core.common.FeatureSupported.networkQoS(version))) && ((vnicProfile.getNetworkQosId()) != null)) return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NETWROK_QOS_IS_NOT_SUPPORTED, clusterVersion()); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public int getGuestAgentNicHash() { return vmDynamic.getGuestAgentNicHash(); }	public int getGuestAgentNicsHash() { return vmDynamic.getGuestAgentNicsHash(); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { if (getSucceeded()) { return org.ovirt.engine.core.common.AuditLogType.GLUSTER_HOOK_ENABLE; } else { return (errorType) == null ? org.ovirt.engine.core.common.AuditLogType.GLUSTER_HOOK_ENABLE_FAILED : errorType; } }	@java.lang.Override protected org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStatus getNewStatus() { return org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStatus.ENABLED; }
protected org.ovirt.engine.core.common.businessentities.AdGroups getAdGroupWithDomain(int index) { org.ovirt.engine.core.common.businessentities.AdGroups adGroup = new org.ovirt.engine.core.common.businessentities.AdGroups(); adGroup.setid(GUIDS[index]); adGroup.setname((((DOMAIN) + "/") + (NAMES[index]))); adGroup.setdomain(org.ovirt.engine.api.restapi.resource.DOMAIN); return adGroup; }	protected org.ovirt.engine.core.common.businessentities.LdapGroup getAdGroupWithDomain(int index) { org.ovirt.engine.core.common.businessentities.LdapGroup adGroup = new org.ovirt.engine.core.common.businessentities.LdapGroup(); adGroup.setid(GUIDS[index]); adGroup.setname((((DOMAIN) + "/") + (NAMES[index]))); adGroup.setdomain(org.ovirt.engine.api.restapi.resource.DOMAIN); return adGroup; }
@java.lang.Override public org.ovirt.engine.api.model.Disk lookupEntity(org.ovirt.engine.core.compat.Guid id) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { return collection.lookupEntity(guid); }	@java.lang.Override public org.ovirt.engine.api.model.Disk lookupEntity(org.ovirt.engine.core.compat.Guid guid) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { return collection.lookupEntity(guid); }
@org.junit.Test public void testAddingNewNicWithNetworkAttachmentToExistingBondWithoutAnyAttachment() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid networkAttachmentId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.newNetworkAttachment(networkC, nicC, networkAttachmentId); allNetworkAttachments.add(networkAttachment); when(logicalNetworkModelOfNetworkC.isAttached()).thenReturn(true, false); when(networkInterfaceModelOfNicC.getItems()).thenReturn(java.util.Collections.singletonList(logicalNetworkModelOfNetworkC)); when(bondNetworkInterfaceModelA.getItems()).thenReturn(java.util.Collections.<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>emptyList()); when(bondNetworkInterfaceModelA.getEntity()).thenReturn(existingBond); NetworkOperation.ADD_TO_BOND.getTarget().executeNetworkCommand(networkInterfaceModelOfNicC, bondNetworkInterfaceModelA, allNics, allNetworkAttachments, hsnp); assertThat(hsnp.getNetworkAttachments().size(), is(1)); assertNetworkAttachment(hsnp.getNetworkAttachments().iterator().next(), networkAttachmentId, networkC.getId(), existingBondId); assertThat(hsnp.getRemovedNetworkAttachments().size(), is(0)); assertThat(hsnp.getBonds().size(), is(1)); assertBond(hsnp.getBonds().iterator().next(), existingBondId, java.util.Arrays.asList(nicA, nicB, nicC)); assertThat(hsnp.getRemovedBonds().size(), is(0)); }	@org.junit.Test public void testAddingNewNicWithNetworkAttachmentToExistingBondWithoutAnyAttachment() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid networkAttachmentId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.newNetworkAttachment(networkC, nicC, networkAttachmentId); existingNetworkAttachments.add(networkAttachment); when(logicalNetworkModelOfNetworkC.isAttached()).thenReturn(true, false); when(logicalNetworkModelOfNetworkC.getAttachedToNic()).thenReturn(networkInterfaceModelOfNicC, ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (null))); when(networkInterfaceModelOfNicC.getItems()).thenReturn(java.util.Collections.singletonList(logicalNetworkModelOfNetworkC)); when(bondNetworkInterfaceModelA.getItems()).thenReturn(java.util.Collections.<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>emptyList()); when(bondNetworkInterfaceModelA.getIface()).thenReturn(existingBond); NetworkOperation.ADD_TO_BOND.getTarget().executeNetworkCommand(networkInterfaceModelOfNicC, bondNetworkInterfaceModelA, dataFromHostSetupNetworksModel); assertThat(dataFromHostSetupNetworksModel.newOrModifiedNetworkAttachments.size(), is(1)); assertNetworkAttachment(dataFromHostSetupNetworksModel.newOrModifiedNetworkAttachments.iterator().next(), networkAttachmentId, networkC.getId(), existingBondId); assertThat(dataFromHostSetupNetworksModel.removedNetworkAttachments.size(), is(0)); assertThat(dataFromHostSetupNetworksModel.newOrModifiedBonds.size(), is(1)); assertBond(dataFromHostSetupNetworksModel.newOrModifiedBonds.iterator().next(), existingBondId, java.util.Arrays.asList(nicA, nicB, nicC)); assertThat(dataFromHostSetupNetworksModel.removedBonds.size(), is(0)); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("No active source Storage Domain is available") java.lang.String noActiveSourceStorageDomainAvailableMsg();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("No active source Storage Domain is available") java.lang.String noActiveSourceStorageDomainAvailableMsg();
public void selectHost() { final java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> clusters = new java.util.ArrayList<>(); clusters.add(getEntity()); final org.ovirt.engine.ui.uicommonweb.models.hosts.MoveHost model = new org.ovirt.engine.ui.uicommonweb.models.hosts.MoveHost(); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().selectHostTitle()); model.setHelpTag(HelpTag.select_host); model.setHashName("select_host"); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterById(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<org.ovirt.engine.core.common.businessentities.StoragePool>() { @java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.core.common.businessentities.StoragePool dataCenter) { boolean isMultiHostDC = dataCenter.isLocal(); if (isMultiHostDC) { model.setMultiSelection(false); } setWindow(model); model.getCluster().setItems(clusters); model.getCluster().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(clusters)); model.getCluster().setIsAvailable(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSelectHost", org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel.this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel.this); model.getCommands().add(tempVar2); } }), getEntity().getStoragePoolId()); }	public void selectHost() { final java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> clusters = new java.util.ArrayList<>(); clusters.add(getEntity()); final org.ovirt.engine.ui.uicommonweb.models.hosts.MoveHost model = new org.ovirt.engine.ui.uicommonweb.models.hosts.MoveHost(); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().selectHostTitle()); model.setHelpTag(HelpTag.select_host); model.setHashName("select_host"); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterById(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.businessentities.StoragePool>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.StoragePool dataCenter) { boolean isMultiHostDC = dataCenter.isLocal(); if (isMultiHostDC) { model.setMultiSelection(false); } setWindow(model); model.getCluster().setItems(clusters); model.getCluster().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(clusters)); model.getCluster().setIsAvailable(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSelectHost", org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel.this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel.this); model.getCommands().add(tempVar2); } }), getEntity().getStoragePoolId()); }
public javax.ws.rs.core.Response getActionStatus(java.lang.String action, java.lang.String oid) { java.net.URI uri = java.net.URI.create(org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(newModel(id)).getHref()); javax.ws.rs.core.Response.Status status = Response.Status.MOVED_PERMANENTLY; return javax.ws.rs.core.Response.status(status).location(uri).build(); }	public org.ovirt.engine.api.resource.ActionResource getActionResource(java.lang.String action, java.lang.String oid) { return new org.ovirt.engine.api.resource.ActionResource() { @java.lang.Override public javax.ws.rs.core.Response get() { java.net.URI uri = java.net.URI.create(org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(newModel(id)).getHref()); javax.ws.rs.core.Response.Status status = Response.Status.MOVED_PERMANENTLY; return javax.ws.rs.core.Response.status(status).location(uri).build(); } @java.lang.Override public org.ovirt.engine.api.model.Action getAction() { return null; } }; }
@java.lang.Override protected boolean validate() { if ((getNic()) == null) { return failValidate(EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST); } if ((!(org.ovirt.engine.core.utils.NetworkUtils.isLabeled(getNic()))) || (!(getNic().getLabels().contains(getLabel())))) { return failValidate(EngineMessage.INTERFACE_NOT_LABELED); } return true; }	@java.lang.Override protected boolean validate() { if ((getNic()) == null) { return failValidation(EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST); } if ((!(org.ovirt.engine.core.utils.NetworkUtils.isLabeled(getNic()))) || (!(getNic().getLabels().contains(getLabel())))) { return failValidation(EngineMessage.INTERFACE_NOT_LABELED); } return true; }
@java.lang.Override protected void executeSave() { final org.ovirt.engine.core.common.action.QosParametersBase<T> parameters = getParameters(); parameters.setQos(qos); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(getVdcAction(), parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result1) { org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = result1.getReturnValue(); boolean succeeded = false; if ((retVal != null) && (retVal.getSucceeded())) { succeeded = true; qos.setId(((org.ovirt.engine.core.compat.Guid) (retVal.getActionReturnValue()))); } postSaveAction(succeeded); } }); }	@java.lang.Override protected void executeSave() { final org.ovirt.engine.core.common.action.QosParametersBase<T> parameters = getParameters(); parameters.setQos(org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.NewQosModel.getQos()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(getVdcAction(), parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result1) { org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = result1.getReturnValue(); boolean succeeded = false; if ((retVal != null) && (retVal.getSucceeded())) { succeeded = true; getQos().setId(((org.ovirt.engine.core.compat.Guid) (retVal.getActionReturnValue()))); } postSaveAction(succeeded); } }); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.qos.NetworkQoS object) { return (object.getInboundPeak()) == null ? constants.UnlimitedNetworkQoS() : object.getInboundPeak().toString(); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.NetworkQoS object) { return (object.getInboundPeak()) == null ? constants.UnlimitedNetworkQoS() : object.getInboundPeak().toString(); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Cluster cluster) { validateParameters(cluster, "name"); validateEnums(org.ovirt.engine.api.model.Cluster.class, cluster); org.ovirt.engine.api.model.DataCenter dataCenter = new org.ovirt.engine.api.model.DataCenter(); dataCenter.setId(id.toString()); cluster.setDataCenter(dataCenter); org.ovirt.engine.core.common.businessentities.StoragePool pool = org.ovirt.engine.api.restapi.resource.BackendDataCenterResource.getStoragePool(cluster, this); org.ovirt.engine.core.common.businessentities.VDSGroup entity = map(cluster, map(pool)); return performCreate(VdcActionType.AddVdsGroup, new org.ovirt.engine.core.common.action.VdsGroupOperationParameters(entity), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetVdsGroupById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }	@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Cluster cluster) { validateParameters(cluster, "name"); validateEnums(org.ovirt.engine.api.model.Cluster.class, cluster); org.ovirt.engine.api.model.DataCenter dataCenter = new org.ovirt.engine.api.model.DataCenter(); dataCenter.setId(dataCenterId.toString()); cluster.setDataCenter(dataCenter); org.ovirt.engine.core.common.businessentities.StoragePool pool = org.ovirt.engine.api.restapi.resource.BackendDataCenterResource.getStoragePool(cluster, this); org.ovirt.engine.core.common.businessentities.VDSGroup entity = map(cluster, map(pool)); return performCreate(VdcActionType.AddVdsGroup, new org.ovirt.engine.core.common.action.VdsGroupOperationParameters(entity), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetVdsGroupById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.compat.Guid vdsgroupid = org.ovirt.engine.core.bll.GetNetworkDisplayByClusterIdQuery.getParameters().getVdsGroupId(); java.util.List<org.ovirt.engine.core.common.businessentities.network_cluster> all = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkClusterDAO().getAllForCluster(vdsgroupid); final org.ovirt.engine.core.common.businessentities.network_cluster nc = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(all, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.network_cluster>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.network_cluster network_cluster) { return network_cluster.getis_display(); } }); if (nc != null) { org.ovirt.engine.core.bll.GetNetworkDisplayByClusterIdQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDAO().getAllForCluster(vdsgroupid), new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.NetworkEntity>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.NetworkEntity network) { return network.getId().equals(nc.getnetwork_id()); } })); } }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.compat.Guid vdsgroupid = org.ovirt.engine.core.bll.GetNetworkDisplayByClusterIdQuery.getParameters().getVdsGroupId(); java.util.List<org.ovirt.engine.core.common.businessentities.network_cluster> all = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkClusterDAO().getAllForCluster(vdsgroupid); final org.ovirt.engine.core.common.businessentities.network_cluster nc = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(all, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.network_cluster>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.network_cluster network_cluster) { return network_cluster.getis_display(); } }); if (nc != null) { org.ovirt.engine.core.bll.GetNetworkDisplayByClusterIdQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDAO().getAllForCluster(vdsgroupid), new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.Network>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.Network network) { return network.getId().equals(nc.getnetwork_id()); } })); } }
protected void runCommands() { java.util.List<org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter> params = new java.util.ArrayList<>(); java.util.Set<org.ovirt.engine.core.compat.Guid> networkIds = new java.util.HashSet<>(); for (org.ovirt.engine.core.bll.CommandBase<?> command : getCommands()) { if (command.getReturnValue().getCanDoAction()) { org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter parameters = ((org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter) (command.getParameters())); params.add(parameters); org.ovirt.engine.core.common.businessentities.network.Network network = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDao().get(parameters.getNetworkCluster().getNetworkId()); if (org.ovirt.engine.core.utils.NetworkUtils.isConfiguredByLabel(network)) { networkIds.add(network.getId()); } } } if ((networkIds.size()) <= 1) { super.runCommands(); return; } if (!(params.isEmpty())) { org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(getActionToPerform(), new org.ovirt.engine.core.common.action.ClusterNetworksParameters(params.get(0).getVdsGroupId(), params)); } }	protected void runCommands() { java.util.List<org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter> params = new java.util.ArrayList<>(); java.util.Set<org.ovirt.engine.core.compat.Guid> networkIds = new java.util.HashSet<>(); for (org.ovirt.engine.core.bll.CommandBase<?> command : getCommands()) { if (command.getReturnValue().getCanDoAction()) { org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter parameters = ((org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter) (command.getParameters())); params.add(parameters); org.ovirt.engine.core.common.businessentities.network.Network network = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDao().get(parameters.getNetworkCluster().getNetworkId()); if (org.ovirt.engine.core.utils.NetworkUtils.isConfiguredByLabel(network)) { networkIds.add(network.getId()); } } } if ((networkIds.size()) <= 1) { super.runCommands(); return; } if (!(params.isEmpty())) { org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(massAction, new org.ovirt.engine.core.common.action.ClusterNetworksParameters(params.get(0).getVdsGroupId(), params)); } }
public void log(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.AuditLogType logType, java.lang.String loggerString) { updateTimeoutLogableObject(auditLogable, logType); if (auditLogable.getLegal()) { saveToDb(auditLogable, logType, loggerString); } }	public void log(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.AuditLogType logType, java.lang.String loggerString) { if (!(logType.shouldBeLogged())) { return; } updateTimeoutLogableObject(auditLogable, logType); if (auditLogable.getLegal()) { saveToDb(auditLogable, logType, loggerString); } }
private void deleteSnapshot() { if ((getSelectedItems()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity> snapshots = ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity>) (getSelectedItems())); java.lang.StringBuilder snapshotNames = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity snapshot : snapshots) { snapshotNames.append(snapshot.getSnapshotName()); snapshotNames.append("\n"); } setConfirmWindow(model); model.setTitle((((org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().confirmRemoveSnapshot()) + " - ") + (getEntity().getName()))); model.setHelpTag(HelpTag.volume_delete_snapshot_confirmation); model.setHashName("volume_delete_snapshot_confirmation"); model.setMessage((((org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().confirmVolumeSnapshotDelete()) + "\n\n") + snapshotNames)); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("onDeleteSnapshot", this); model.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("CancelConfirmation", this); model.getCommands().add(cancelCommand); }	private void deleteSnapshot() { if ((getSelectedItems()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity> snapshots = ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity>) (getSelectedItems())); java.lang.StringBuilder snapshotNames = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity snapshot : snapshots) { snapshotNames.append(snapshot.getSnapshotName()); snapshotNames.append("\n"); } setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().confirmRemoveSnapshot(getEntity().getName())); model.setHelpTag(HelpTag.volume_delete_snapshot_confirmation); model.setHashName("volume_delete_snapshot_confirmation"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().confirmVolumeSnapshotDeleteMessage(snapshotNames.toString())); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("onDeleteSnapshot", this); model.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("cancelConfirmation", this); model.getCommands().add(cancelCommand); }
@java.lang.Override public org.ovirt.engine.core.compat.Guid getMemoryDiskId() { return new org.ovirt.engine.core.compat.Guid(activeSnapshot.getMemoryVolume().split(",")[2]); }	@java.lang.Override public org.ovirt.engine.core.compat.Guid getMemoryDiskId() { return activeSnapshot.getMemoryDiskId(); }
public void setPostZero(boolean postZeros) { postZero = postZeros; }	@java.lang.Override public void setPostZero(boolean postZero) { this.postZero = postZero; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.DiskImage object) { return ((java.lang.String.valueOf(object.getSizeInGigabytes())) + " ") + (org.ovirt.engine.ui.common.widget.uicommon.template.TemplateDiskListModelTable.constants.gb()); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.DiskImage object) { return org.ovirt.engine.ui.common.widget.uicommon.template.TemplateDiskListModelTable.messages.gigabytes(java.lang.String.valueOf(object.getSizeInGigabytes())); }
public void InternalSetVmStatus(org.ovirt.engine.core.common.businessentities.VM vm, final org.ovirt.engine.core.common.businessentities.VMStatus status) { vm.setStatus(status); vm.setExitStatus(VmExitStatus.Normal); vm.setExitMessage(StringUtils.EMPTY); boolean isVmStatusDown = org.ovirt.engine.core.common.businessentities.VM.isStatusDown(status); if (isVmStatusDown || (status == (org.ovirt.engine.core.common.businessentities.VMStatus.Unknown))) { resetVmAttributes(vm); if (isVmStatusDown) { vm.setRunOnVds(null); vm.setVmPauseStatus(VmPauseStatus.NONE); } } }	public void InternalSetVmStatus(org.ovirt.engine.core.common.businessentities.VM vm, final org.ovirt.engine.core.common.businessentities.VMStatus status) { InternalSetVmStatus(vm, status, VmExitStatus.Normal, StringUtils.EMPTY); }
@org.junit.Test public void testBooleanElement() { org.ovirt.engine.api.types.V4Vm object = newVm().setDeleteProtected(true).setRunOnce(false).build(); assertEquals(("<vm>" + (("<delete_protected>true</delete_protected>" + "<run_once>false</run_once>") + "</vm>")), objectToXml(object)); }	@org.junit.Test public void testBooleanElement() { org.ovirt.engine.api.types.V4Vm object = vm().deleteProtected(true).runOnce(false).build(); assertEquals(("<vm>" + (("<delete_protected>true</delete_protected>" + "<run_once>false</run_once>") + "</vm>")), objectToXml(object)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (args.propertyName.equalsIgnoreCase("validationResult")) { getView().handleValidationErrors(model); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (args.propertyName.equalsIgnoreCase("validateAndSwitchAppropriateTab")) { getView().handleValidationErrors(model); getView().switchTabBasedOnEditorInvalidity(); } else if (args.propertyName.equalsIgnoreCase("modelPropertiesChanged")) { getView().handleValidationErrors(model); } }
private static boolean addQosForDevice(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.compat.Version vdsGroupCompatibilityVersion) { org.ovirt.engine.core.compat.Guid qosId = vnicProfile.getNetworkQosId(); if ((qosId != null) && (!(org.ovirt.engine.core.common.FeatureSupported.networkQoS(vdsGroupCompatibilityVersion)))) { return false; } java.util.Map<java.lang.String, java.lang.Object> specParams = ((java.util.Map<java.lang.String, java.lang.Object>) (struct.get(VdsProperties.SpecParams))); if (specParams == null) { specParams = new java.util.HashMap<>(); struct.put(VdsProperties.SpecParams, specParams); } org.ovirt.engine.core.common.businessentities.network.NetworkQoS networkQoS = (qosId == null) ? new org.ovirt.engine.core.common.businessentities.network.NetworkQoS() : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getQosDao().get(qosId); org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper qosMapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper(specParams, VdsProperties.QOS_INBOUND, VdsProperties.QOS_OUTBOUND); qosMapper.serialize(networkQoS); return true; }	private static boolean addQosForDevice(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.compat.Version vdsGroupCompatibilityVersion) { org.ovirt.engine.core.compat.Guid qosId = vnicProfile.getNetworkQosId(); if (!(org.ovirt.engine.core.common.FeatureSupported.networkQoS(vdsGroupCompatibilityVersion))) { return qosId == null; } java.util.Map<java.lang.String, java.lang.Object> specParams = ((java.util.Map<java.lang.String, java.lang.Object>) (struct.get(VdsProperties.SpecParams))); if (specParams == null) { specParams = new java.util.HashMap<>(); struct.put(VdsProperties.SpecParams, specParams); } org.ovirt.engine.core.common.businessentities.network.NetworkQoS networkQoS = (qosId == null) ? new org.ovirt.engine.core.common.businessentities.network.NetworkQoS() : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getQosDao().get(qosId); org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper qosMapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper(specParams, VdsProperties.QOS_INBOUND, VdsProperties.QOS_OUTBOUND); qosMapper.serialize(networkQoS); return true; }
@java.lang.Override protected void init(final org.ovirt.engine.ui.uicommonweb.models.hosts.VfsNicLabelModel model) { super.init(model); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : model.getItems()) { labelModel.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsNicLabelWidget.this, null); model.updateSuggestedLabels(); } }); } }	private void selectedLabelsChanged() { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, null); getModel().updateSuggestedLabels(); }
protected abstract void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?, ?, ?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?, ?, ?> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params);	protected abstract void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params);
private void lockDiskImagesInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { getDiskImages().forEach(( diskImage) -> { getCompensationContext().snapshotEntityStatus(diskImage.getImage()); diskImage.setImageStatus(ImageStatus.LOCKED); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(diskImage.getImageId(), ImageStatus.LOCKED); }); getCompensationContext().stateChanged(); return null; }); }	private org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters buildSealDisksVDSCommandParameters() { org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters(); parameters.setTemplateId(org.ovirt.engine.core.bll.SealVmTemplateCommand.getParameters().getVmTemplateId()); parameters.setJobId(org.ovirt.engine.core.bll.SealVmTemplateCommand.getParameters().getHostJobId()); parameters.setStoragePoolId(getDiskImages().get(0).getStoragePoolId()); getDiskImages().forEach(parameters::addImage); return parameters; }
private static void assertDbWasCalled() { assertTrue(org.ovirt.engine.core.bll.quota.QuotaManagerTest.dbWasCalled); org.ovirt.engine.core.bll.quota.QuotaManagerTest.dbWasCalled = false; }	private void assertDbWasCalled() { assertTrue(dbWasCalled); dbWasCalled = false; }
public void safeSetValue(java.lang.String value) throws java.lang.Exception, java.security.InvalidParameterException { java.lang.System.out.println(("Validation helper is " + (valueHelper.getClass().getName()))); org.ovirt.engine.core.config.entity.helper.ValidationResult validationResult = valueHelper.validate(this, value); if (!(validationResult.isOk())) { java.lang.StringBuilder invalidParamMsg = new java.lang.StringBuilder(); invalidParamMsg.append("Cannot set value ").append(value).append(" to key ").append(keyName).append(". ").append((org.apache.commons.lang.StringUtils.isNotEmpty(validationResult.getDetails()) ? validationResult.getDetails() : "")); throw new java.security.InvalidParameterException(invalidParamMsg.toString()); } this.value = valueHelper.setValue(value); }	public void safeSetValue(java.lang.String value) throws java.lang.Exception, java.security.InvalidParameterException { org.ovirt.engine.core.config.entity.helper.ValidationResult validationResult = valueHelper.validate(this, value); if (!(validationResult.isOk())) { java.lang.StringBuilder invalidParamMsg = new java.lang.StringBuilder(); invalidParamMsg.append("Cannot set value ").append(value).append(" to key ").append(keyName).append(". ").append((org.apache.commons.lang.StringUtils.isNotEmpty(validationResult.getDetails()) ? validationResult.getDetails() : "")); throw new java.security.InvalidParameterException(invalidParamMsg.toString()); } this.value = valueHelper.setValue(value); }
protected org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitecture() { if (org.apache.commons.lang.StringUtils.isNotEmpty(getVdsGroup().getCpuName())) { return cpuFlagsManagerHandler.getArchitectureByCpuName(getVdsGroup().getCpuName(), getVdsGroup().getCompatibilityVersion()); } else if ((getVdsGroup().getArchitecture()) == null) { return org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined; } return getVdsGroup().getArchitecture(); }	protected org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitecture() { if (org.apache.commons.lang.StringUtils.isNotEmpty(getVdsGroup().getCpuName())) { return org.ovirt.engine.core.bll.VdsGroupOperationCommandBase.getCpuFlagsManagerHandler().getArchitectureByCpuName(getVdsGroup().getCpuName(), getVdsGroup().getCompatibilityVersion()); } else if ((getVdsGroup().getArchitecture()) == null) { return org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined; } return getVdsGroup().getArchitecture(); }
protected java.util.List<java.lang.String> getHostNames(org.ovirt.engine.core.common.businessentities.Label label) { return new java.util.ArrayList(label.getHostNames()); }	protected java.util.List<java.lang.String> getHostNames(org.ovirt.engine.core.common.businessentities.Label label) { java.util.List<java.lang.String> hostNames = new java.util.ArrayList<>(); if ((!(entitiesNameMap.isEmpty())) && (!(label.getHosts().isEmpty()))) { label.getHosts().forEach(( id) -> { java.lang.String hostName = entitiesNameMap.get(id); if ((hostName != null) && (!(hostName.isEmpty()))) { hostNames.add(hostName); } }); java.util.Collections.sort(hostNames); } return hostNames; }
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> createGhostValue() { org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); value.setItems(flush().getSuggestedLabels()); value.setSelectedItem(""); return value; }	@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> createGhostValue() { org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); value.setSelectedItem(""); return value; }
public void setSpiceFileXferToggleEnabled(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> spiceFileXferToggleEnabled) { this.spiceFileXferToggleEnabled = spiceFileXferToggleEnabled; }	public void setSpiceCopyPasteEnabled(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.NotChangableForVmInPoolEntityModel<java.lang.Boolean> spiceCopyPasteEnabled) { this.spiceCopyPasteEnabled = spiceCopyPasteEnabled; }
@java.lang.Override public javax.ws.rs.core.Response copy(org.ovirt.engine.api.model.Action action) { validateParameters(action, "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid storageDomainId = getStorageDomainId(action); org.ovirt.engine.core.compat.Guid imageId = asGuid(getDisk().getImageId()); org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters params = new org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters(imageId, org.ovirt.engine.core.compat.Guid.Empty, storageDomainId, org.ovirt.engine.core.common.businessentities.ImageOperation.Copy); return doAction(VdcActionType.MoveOrCopyDisk, params, action); }	@java.lang.Override public javax.ws.rs.core.Response doExport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "storageDomain.id|name"); return doAction(VdcActionType.ExportRepoImage, new org.ovirt.engine.core.common.action.ExportRepoImageParameters(guid, getStorageDomainId(action)), action); }
private boolean checkDerivedVmFromTemplateExists(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { java.util.List<java.lang.String> vmNames = getNamesOfDerivedVmsFromTemplate(diskImage); if (!(vmNames.isEmpty())) { addValidateMessage(EngineMessage.VMT_CANNOT_REMOVE_DETECTED_DERIVED_VM); addValidateMessageVariable("vmsList", org.apache.commons.lang.StringUtils.join(vmNames, ",")); return false; } return true; }	private boolean checkDerivedVmFromTemplateExists(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { java.util.List<java.lang.String> vmNames = getNamesOfDerivedVmsFromTemplate(diskImage); if (!(vmNames.isEmpty())) { addValidationMessage(EngineMessage.VMT_CANNOT_REMOVE_DETECTED_DERIVED_VM); addValidationMessageVariable("vmsList", org.apache.commons.lang.StringUtils.join(vmNames, ",")); return false; } return true; }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy) ? org.ovirt.engine.core.common.errors.EngineMessage.VAR__ACTION__COPY : org.ovirt.engine.core.common.errors.EngineMessage.VAR__ACTION__MOVE)); addValidateMessage(EngineMessage.VAR__TYPE__VM_DISK); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy) ? org.ovirt.engine.core.common.errors.EngineMessage.VAR__ACTION__COPY : org.ovirt.engine.core.common.errors.EngineMessage.VAR__ACTION__MOVE)); addValidationMessage(EngineMessage.VAR__TYPE__VM_DISK); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Error in retrieving the relevant Storage Domain.") java.lang.String errorRetrievingRelevantStorageDomainMsg();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Error in retrieving the relevant Storage Domain.") java.lang.String errorRetrievingRelevantStorageDomainMsg();
private void saveNetworkFields() { if ((lastSelectedNetworkName) != null) { org.ovirt.engine.core.common.businessentities.VmInitNetwork obj = networkMap.get(lastSelectedNetworkName); if (obj != null) { obj.setBootProtocol(getNetworkBootProtocolList().getSelectedItem().getValue()); obj.setIp(getNetworkIpAddress().getEntity()); obj.setNetmask(getNetworkNetmask().getEntity()); obj.setGateway(getNetworkGateway().getEntity()); if (((getNetworkStartOnBoot().getEntity()) != null) && (getNetworkStartOnBoot().getEntity())) { networkStartOnBoot.add(lastSelectedNetworkName); } else { networkStartOnBoot.remove(lastSelectedNetworkName); } } } }	private void saveNetworkFields() { if ((lastSelectedNetworkName) != null) { org.ovirt.engine.core.common.businessentities.VmInitNetwork obj = networkMap.get(lastSelectedNetworkName); if (obj != null) { obj.setBootProtocol(getNetworkBootProtocolList().getSelectedItem()); obj.setIp(getNetworkIpAddress().getEntity()); obj.setNetmask(getNetworkNetmask().getEntity()); obj.setGateway(getNetworkGateway().getEntity()); if (((getNetworkStartOnBoot().getEntity()) != null) && (getNetworkStartOnBoot().getEntity())) { networkStartOnBoot.add(lastSelectedNetworkName); } else { networkStartOnBoot.remove(lastSelectedNetworkName); } } } }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.VDS> getXenHosts() { return hosts; }	public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.VDS> getXenProxyHosts() { return xenProxyHosts; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Configure Later") java.lang.String configureLaterTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Configure Later") java.lang.String configureLaterTitle();
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Stripe count can be increased by only one") java.lang.String addBricksStripeCountIncreaseValidationMsg();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Stripe count can be increased by only one") java.lang.String addBricksStripeCountIncreaseValidationMsg();
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineErrataPresenter.logger.info(((this.getClass().toString()) + ": bus published message that the counts changed. update view.")); org.ovirt.engine.core.common.businessentities.ErrataCounts counts = currentErrataModel.getErrataCounts(); getView().showCounts(counts); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.core.common.businessentities.ErrataCounts counts = errataCountModel.getErrataCounts(); getView().showCounts(counts); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.network.NetworkSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(ginjector.getApplicationConstants().networkGeneralSubTabLabel(), 0, ginjector.getSubTabProviderGeneralModelProvider()); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.network.NetworkSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(ginjector.getApplicationConstants().networkGeneralSubTabLabel(), 0, ginjector.getSubTabNetworkGeneralModelProvider()); }
public void setSingleSelectionOnly() { singleSelectionOnly = true; }	public boolean isSingleSelectionOnly() { return false; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Allow Change VM properties") java.lang.String allowChangeVmPropertiesRoleTreeTooltip();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow Change VM properties") java.lang.String allowChangeVmPropertiesRoleTreeTooltip();
private void InitOSType() { getOSType().setItems(java.util.Arrays.asList(org.ovirt.engine.core.common.businessentities.VmOsType.values())); getOSType().setSelectedItem(VmOsType.Unassigned); }	private void InitOSType() { java.util.List<org.ovirt.engine.core.common.businessentities.VmOsType> osList = java.util.Arrays.asList(org.ovirt.engine.core.common.businessentities.VmOsType.values()); java.util.Collections.sort(osList, new java.util.Comparator<org.ovirt.engine.core.common.businessentities.VmOsType>() { @java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.VmOsType o1, org.ovirt.engine.core.common.businessentities.VmOsType o2) { if (o1.name().equals(VmOsType.Unassigned.name())) { return -1; } if (o2.name().equals(VmOsType.Unassigned.name())) { return 1; } return o1.name().compareTo(o2.name()); } }); getOSType().setItems(osList); getOSType().setSelectedItem(VmOsType.Unassigned); }
private boolean updateVmLease() { if (java.util.Objects.equals(oldVm.getLeaseStorageDomainId(), newVmStatic.getLeaseStorageDomainId())) { return true; } if (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isNotRunning()) { if (!(addVmLease(newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()))) { return false; } } else { if ((oldVm.getLeaseStorageDomainId()) == null) { org.ovirt.engine.core.common.action.VmLeaseParameters params = new org.ovirt.engine.core.common.action.VmLeaseParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePoolId(), newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()); params.setVdsId(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds()); params.setHotPlugLease(true); return runInternalAction(ActionType.AddVmLease, params).getSucceeded(); } boolean hotUnplugSucceeded = false; try { hotUnplugSucceeded = runVdsCommand(VDSCommandType.HotUnplugLease, new org.ovirt.engine.core.common.vdscommands.LeaseVDSParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds(), oldVm.getId(), oldVm.getLeaseStorageDomainId())).getSucceeded(); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Failure in hot unplugging a lease to VM {}, message: {}", oldVm.getId(), e.getMessage()); } if (!hotUnplugSucceeded) { auditLog(this, AuditLogType.HOT_UNPLUG_LEASE_FAILED); } } removeVmLease(oldVm.getLeaseStorageDomainId(), oldVm.getId()); return true; }	private boolean updateVmLease() { if (java.util.Objects.equals(oldVm.getLeaseStorageDomainId(), newVmStatic.getLeaseStorageDomainId())) { return true; } if (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isNotRunning()) { if (!(addVmLease(newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()))) { return false; } } else { if ((oldVm.getLeaseStorageDomainId()) == null) { org.ovirt.engine.core.common.action.VmLeaseParameters params = new org.ovirt.engine.core.common.action.VmLeaseParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePoolId(), newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()); params.setVdsId(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds()); params.setHotPlugLease(true); return runInternalAction(VdcActionType.AddVmLease, params).getSucceeded(); } boolean hotUnplugSucceeded = false; try { hotUnplugSucceeded = runVdsCommand(VDSCommandType.HotUnplugLease, new org.ovirt.engine.core.common.vdscommands.LeaseVDSParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds(), oldVm.getId(), oldVm.getLeaseStorageDomainId())).getSucceeded(); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Failure in hot unplugging a lease to VM {}, message: {}", oldVm.getId(), e.getMessage()); } if (!hotUnplugSucceeded) { auditLog(this, AuditLogType.HOT_UNPLUG_LEASE_FAILED); } } removeVmLease(oldVm.getLeaseStorageDomainId(), oldVm.getId()); return true; }
protected void testStartWithHost(org.ovirt.engine.api.model.Host host, org.ovirt.engine.core.compat.Guid hostId) throws java.lang.Exception { setUpWindowsGetEntityExpectations(2, false); setUpGetPayloadExpectations(0); setUpGetBallooningExpectations(); setUriInfo(setUpActionExpectations(VdcActionType.RunVmOnce, org.ovirt.engine.core.common.action.RunVmOnceParams.class, new java.lang.String[]{ "VmId", "DestinationVdsId" }, new java.lang.Object[]{ GUIDS[0], hostId })); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setVm(new org.ovirt.engine.api.model.VM()); org.ovirt.engine.api.model.VmPlacementPolicy placementPolicy = new org.ovirt.engine.api.model.VmPlacementPolicy(); placementPolicy.setHost(host); action.getVm().setPlacementPolicy(placementPolicy); verifyActionResponse(resource.start(action)); }	protected void testStartWithHost(org.ovirt.engine.api.model.Host host, org.ovirt.engine.core.compat.Guid hostId) throws java.lang.Exception { setUpWindowsGetEntityExpectations(2, false); setUriInfo(setUpActionExpectations(VdcActionType.RunVmOnce, org.ovirt.engine.core.common.action.RunVmOnceParams.class, new java.lang.String[]{ "VmId", "DestinationVdsId" }, new java.lang.Object[]{ GUIDS[0], hostId })); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setVm(new org.ovirt.engine.api.model.VM()); org.ovirt.engine.api.model.VmPlacementPolicy placementPolicy = new org.ovirt.engine.api.model.VmPlacementPolicy(); placementPolicy.setHost(host); action.getVm().setPlacementPolicy(placementPolicy); verifyActionResponse(resource.start(action)); }
private org.ovirt.engine.core.common.vdscommands.VDSParametersBase createVDSParameters() { return org.ovirt.engine.core.bll.storage.domains.PostZeroHandler.fixParametersWithPostZero(new org.ovirt.engine.core.common.vdscommands.DestroyImageVDSCommandParameters(org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().getImageList(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().isPostZero(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().isForce())); }	private org.ovirt.engine.core.common.vdscommands.VDSParametersBase createVDSParameters() { return org.ovirt.engine.core.bll.storage.domain.PostZeroHandler.fixParametersWithPostZero(new org.ovirt.engine.core.common.vdscommands.DestroyImageVDSCommandParameters(org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().getImageList(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().isPostZero(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().isForce())); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> filterTemplatesInClusterNeedUpdate() { if (!(VmRngDevice.Source.urandomRandomUpdateRequired(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()))) { return java.util.Collections.emptyList(); } return vmTemplateDao.getAllForCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()); }	protected java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> filterTemplatesInClusterNeedUpdate() { if (!(VmRngDevice.Source.urandomRandomUpdateRequired(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()))) { return java.util.Collections.emptyList(); } return vmTemplateDao.getAllForCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()).stream().filter(( template) -> (template.getCustomCompatibilityVersion()) == null).sorted().collect(java.util.stream.Collectors.toList()); }
protected final void decreasePendingVm(org.ovirt.engine.core.common.businessentities.VmStatic vm) { org.ovirt.engine.core.compat.Guid vdsId = getCurrentVdsId(); org.ovirt.engine.core.bll.VmHandler.decreasePendingVm(vm, vdsId); getBlockingQueue(vdsId).offer(java.lang.Boolean.TRUE); }	protected final void decreasePendingVm(org.ovirt.engine.core.common.businessentities.VmStatic vm) { org.ovirt.engine.core.compat.Guid vdsId = getCurrentVdsId(); org.ovirt.engine.core.bll.scheduling.SchedulingManager.getInstance().clearPendingVm(vm); getBlockingQueue(vdsId).offer(java.lang.Boolean.TRUE); }
@java.lang.Override public org.ovirt.engine.api.model.Tags list() { if (isFiltered()) { org.ovirt.engine.core.common.queries.GetTagsByUserIdParameters params = new org.ovirt.engine.core.common.queries.GetTagsByUserIdParameters(getCurrent().get(org.ovirt.engine.core.common.users.VdcUser.class).getUserId().toString()); return mapCollection(getBackendCollection(VdcQueryType.GetTagsByUserId, params)); } else { java.util.List<org.ovirt.engine.core.common.businessentities.tags> tags = getTags(); tags.add(getRootTag()); return mapCollection(tags); } }	@java.lang.Override public org.ovirt.engine.api.model.Tags list() { java.util.List<org.ovirt.engine.core.common.businessentities.tags> tags = getTags(); tags.add(getRootTag()); return mapCollection(tags); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__HOT_PLUG); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_DISK); if ((getDiskAlias()) != null) { org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.addCanDoActionMessage(java.lang.String.format("$%1$s %2$s", "diskAliases", getDiskAlias())); } }	@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__HOT_PLUG); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_DISK); }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("deviceList", getDeviceList()).append("force", isForce()); }	@java.lang.Override public java.lang.String toString() { return java.lang.String.format("%s, deviceList=%s, force=%b", super.toString(), getDeviceList(), isForce()); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Replica count can not be reduced.") java.lang.String ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Replica count cannot be reduced when adding bricks.") java.lang.String ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT();
@org.junit.Test public void canDoActionLunsNotPartOfStorageDomain() { java.util.List lunsFromDb = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id("111"); lun1.setStorageDomainId(sdId); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id("222"); lun2.setStorageDomainId(sdId); lunsFromDb.add(lun1); lunsFromDb.add(lun2); when(lunsDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommandTest.STORAGE)).thenReturn(lunsFromDb); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessages.ACTION_TYPE_FAILED_LUNS_NOT_PART_OF_STORAGE_DOMAIN); }	@org.junit.Test public void canDoActionLunsNotPartOfStorageDomain() { java.util.List lunsFromDb = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id("111"); lun1.setStorageDomainId(sdId); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id("222"); lun2.setStorageDomainId(sdId); lunsFromDb.add(lun1); lunsFromDb.add(lun2); when(lunsDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommandTest.STORAGE)).thenReturn(lunsFromDb); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_LUNS_NOT_PART_OF_STORAGE_DOMAIN); }
public boolean validate() { leftBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.MacAddressValidation() }); rightBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.MacAddressValidation() }); if ((leftBound.getIsValid()) && (rightBound.getIsValid())) { rightBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.IValidation() { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult res = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if ((((java.lang.String) (value)).compareToIgnoreCase(leftBound.getEntity())) < 0) { res.setSuccess(false); res.getReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().invalidMacRangeRightBound()); } return res; } } }); } setIsValid(((leftBound.getIsValid()) && (rightBound.getIsValid()))); return getIsValid(); }	public boolean validate() { leftBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.MacAddressValidation() }); rightBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.MacAddressValidation() }); if ((leftBound.getIsValid()) && (rightBound.getIsValid())) { rightBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.MacRangeValidation(leftBound.getEntity()) }); } setIsValid(((leftBound.getIsValid()) && (rightBound.getIsValid()))); return getIsValid(); }
public void setSpmMap(java.lang.String spId, org.ovirt.vdsmfake.domain.Host host) { spmMap.put(spId, host); }	public void setSpmMap(java.lang.String spId, org.ovirt.vdsmfake.domain.Host host) { this.spmMap.put(spId, host); }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.VM object) { boolean isDiskPlugged = getDetailModel().isDiskPluggedToVm(object); return isDiskPlugged ? getCommonResources().upImage() : getCommonResources().downImage(); }	@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.VM object) { boolean isDiskPlugged = getDetailModel().isDiskPluggedToVm(object); return isDiskPlugged ? org.ovirt.engine.ui.webadmin.section.main.view.tab.disk.SubTabDiskVmView.resources.upImage() : org.ovirt.engine.ui.webadmin.section.main.view.tab.disk.SubTabDiskVmView.resources.downImage(); }
private org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, org.ovirt.engine.core.common.errors.EngineFault> connectStorage() { return getStorageHelper(org.ovirt.engine.core.bll.storage.domains.RemoveStorageDomainCommand.getStorageDomain()).connectStorageToDomainByVdsIdDetails(org.ovirt.engine.core.bll.storage.domains.RemoveStorageDomainCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domains.RemoveStorageDomainCommand.getVds().getId()); }	private org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, org.ovirt.engine.core.common.errors.EngineFault> connectStorage() { return getStorageHelper(org.ovirt.engine.core.bll.storage.domain.RemoveStorageDomainCommand.getStorageDomain()).connectStorageToDomainByVdsIdDetails(org.ovirt.engine.core.bll.storage.domain.RemoveStorageDomainCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.RemoveStorageDomainCommand.getVds().getId()); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Change CD") java.lang.String changeCd();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Change CD") java.lang.String changeCd();
public boolean getVdsGroupSupportsGlusterSerice() { return this.vdsGroupGlusterSerice; }	public java.lang.Boolean getVdsGroupSupportsGlusterService() { return this.vdsGroupGlusterService; }
public java.util.List<java.lang.String> getValidateMessages() { return validateMessages; }	public java.util.List<java.lang.String> getValidationMessages() { return validationMessages; }
private void localize(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { pfTab.setLabel(constants.pfTab()); vfsConfigTab.setLabel(constants.vfsConfigTab()); }	private void localize() { pfTab.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.HostNicPopupView.constants.pfTab()); vfsConfigTab.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.HostNicPopupView.constants.vfsConfigTab()); }
private void assertNumOfVfsInValidRange(int numOfVfs) { assertThat(validator.numOfVfsInValidRange(numOfVfs), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessages.ACTION_TYPE_FAILED_NUM_OF_VFS_NOT_IN_VALID_RANGE, java.lang.String.format(VfsConfigValidator.NIC_NAME_REPLACEMENT, nic.getName()), java.lang.String.format(VfsConfigValidator.NUM_OF_VFS_REPLACEMENT, numOfVfs), java.lang.String.format(VfsConfigValidator.MAX_NUM_OF_VFS_REPLACEMENT, oldVfsConfig.getMaxNumOfVfs()))); }	private void assertNumOfVfsInValidRange(int numOfVfs) { assertThat(validator.numOfVfsInValidRange(numOfVfs), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_NUM_OF_VFS_NOT_IN_VALID_RANGE, java.lang.String.format(VfsConfigValidator.NIC_NAME_REPLACEMENT, nic.getName()), java.lang.String.format(VfsConfigValidator.NUM_OF_VFS_REPLACEMENT, numOfVfs), java.lang.String.format(VfsConfigValidator.MAX_NUM_OF_VFS_REPLACEMENT, oldVfsConfig.getMaxNumOfVfs()))); }
private org.ovirt.engine.core.bll.network.host.SetupNetworksHelper createHelper(org.ovirt.engine.core.common.action.SetupNetworksParameters params, org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.compat.Version compatibilityVersion) { when(vds.getVdsGroupCompatibilityVersion()).thenReturn(compatibilityVersion); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = spy(new org.ovirt.engine.core.bll.network.host.SetupNetworksHelper(params, vds, managementNetworkUtil)); when(helper.getVmInterfaceManager()).thenReturn(vmInterfaceManager); doReturn(null).when(helper).translateErrorMessages(org.mockito.Matchers.<java.util.List<java.lang.String>>any()); org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacade = mock(org.ovirt.engine.core.dal.dbbroker.DbFacade.class); doReturn(dbFacade).when(helper).getDbFacade(); doReturn(interfaceDAO).when(dbFacade).getInterfaceDao(); doReturn(mock(org.ovirt.engine.core.dao.VdsDAO.class)).when(dbFacade).getVdsDao(); doReturn(networkDAO).when(dbFacade).getNetworkDao(); doReturn(qosDao).when(dbFacade).getNetworkQosDao(); return helper; }	private org.ovirt.engine.core.bll.network.host.SetupNetworksHelper createHelper(org.ovirt.engine.core.common.action.SetupNetworksParameters params, org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.compat.Version compatibilityVersion) { when(vds.getVdsGroupCompatibilityVersion()).thenReturn(compatibilityVersion); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = spy(new org.ovirt.engine.core.bll.network.host.SetupNetworksHelper(params, vds, managementNetworkUtil)); when(helper.getVmInterfaceManager()).thenReturn(vmInterfaceManager); doReturn(null).when(helper).translateErrorMessages(org.mockito.Matchers.<java.util.List<java.lang.String>>any()); org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacade = mock(org.ovirt.engine.core.dal.dbbroker.DbFacade.class); doReturn(dbFacade).when(helper).getDbFacade(); doReturn(interfaceDAO).when(dbFacade).getInterfaceDao(); doReturn(mock(org.ovirt.engine.core.dao.VdsDAO.class)).when(dbFacade).getVdsDao(); doReturn(networkDAO).when(dbFacade).getNetworkDao(); doReturn(qosDao).when(dbFacade).getHostNetworkQosDao(); return helper; }
@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.widget.table.cell.Context context, T value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { if (!(isVisible(value))) { return; } com.google.gwt.resources.client.ImageResource image = resources.expanderDownImage(); com.google.gwt.safehtml.shared.SafeHtml imageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(image).getHTML()); sb.append(templates.volumeActivityMenu(imageHtml, id)); }	@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.widget.table.cell.Context context, T value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { if (!(isVisible(value))) { return; } com.google.gwt.resources.client.ImageResource image = org.ovirt.engine.ui.webadmin.widget.table.cell.MenuCell.resources.expanderDownImage(); com.google.gwt.safehtml.shared.SafeHtml imageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(image).getHTML()); sb.append(org.ovirt.engine.ui.webadmin.widget.table.cell.MenuCell.templates.volumeActivityMenu(imageHtml, id)); }
public void restoreHeartbeat() { client.setIsHeartbeat(true); }	private void retryCall(final org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request, final org.ovirt.vdsm.jsonrpc.client.internal.JsonRpcCall call) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { org.ovirt.vdsm.jsonrpc.client.utils.retry.RetryPolicy policy = this.client.getRetryPolicy(); org.ovirt.vdsm.jsonrpc.client.utils.ResponseTracking tracking = new org.ovirt.vdsm.jsonrpc.client.utils.ResponseTracking(request, call, new org.ovirt.vdsm.jsonrpc.client.utils.retry.RetryContext(policy), getTimeout(policy.getRetryTimeOut(), policy.getTimeUnit()), this.client); this.tracker.registerTrackingRequest(request, tracking); }
@java.lang.Override protected boolean validate() { if (!(checkQuotaValidationCommon(getParameters().getQuota()))) { return false; } if ((getQuotaDao().getById(getParameters().getQuota().getId())) == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } return validateQuotaNotDefault(getParameters().getQuota().getId()); }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if ((getQuota()) == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } if (getQuota().isDefault()) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_DEFAULT_CANNOT_BE_CHANGED); return false; } return true; }
boolean areRequiredNetworksAvailable(final java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> vmNetworkInterfaces, final java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> allInterfacesForVds) { final java.util.List<java.lang.String> vmNetworkInterfacesStr = org.ovirt.engine.core.common.utils.ListUtils.transform(vmNetworkInterfaces, vmNetworkInterfaceToNetworkName); final java.util.List<java.lang.String> vdsNetNames = org.ovirt.engine.core.common.utils.ListUtils.transform(allInterfacesForVds, vdsNetworkInterfaceToNetworkName); return vdsNetNames.containsAll(vmNetworkInterfacesStr); }	boolean areRequiredNetworksAvailable(final java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> vmNetworkInterfaces, final java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> allInterfacesForVds) { @java.lang.SuppressWarnings("unchecked") final java.util.List<java.lang.String> vmNetworkInterfacesStr = org.apache.commons.collections.ListUtils.transformedList(vmNetworkInterfaces, org.ovirt.engine.core.bll.VdsSelector.toNetworkName); @java.lang.SuppressWarnings("unchecked") final java.util.List<java.lang.String> vdsNetNames = org.apache.commons.collections.ListUtils.transformedList(allInterfacesForVds, org.ovirt.engine.core.bll.VdsSelector.toNetworkName); return vdsNetNames.containsAll(vmNetworkInterfacesStr); }
@java.lang.Override public void loadFromLocalStorage(org.ovirt.engine.ui.uicommonweb.models.VmConsoles consoles) { java.lang.String vmId = guidToStringNullSafe(consoles.getVm().getId()); java.lang.String poolId = guidToStringNullSafe(consoles.getVm().getVmPoolId()); org.ovirt.engine.ui.common.utils.ConsoleContext context = consoles.getConsoleContext(); org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker poolKeyMaker = new org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker(poolId, true, context); loadConsolesWithKeymaker(consoles, poolKeyMaker); if (consoles instanceof org.ovirt.engine.ui.uicommonweb.models.VmConsolesImpl) { org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker vmKeyMaker = new org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker(vmId, false, context); loadConsolesWithKeymaker(consoles, vmKeyMaker); } }	@java.lang.Override public void loadFromLocalStorage(org.ovirt.engine.ui.uicommonweb.models.VmConsoles consoles) { java.lang.String vmId = guidToStringNullSafe(consoles.getVm().getId()); java.lang.String poolId = guidToStringNullSafe(consoles.getVm().getVmPoolId()); org.ovirt.engine.ui.common.utils.ConsoleContext context = consoles.getConsoleContext(); if (poolId != null) { org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker poolKeyMaker = new org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker(poolId, true, context); loadConsolesWithKeymaker(consoles, poolKeyMaker); } if (consoles instanceof org.ovirt.engine.ui.uicommonweb.models.VmConsolesImpl) { org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker vmKeyMaker = new org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker(vmId, false, context); loadConsolesWithKeymaker(consoles, vmKeyMaker); } }
public org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface getNetworkInterface(org.ovirt.engine.core.utils.ovf.xml.XmlNode node) { java.lang.String str = node.selectSingleNode("rasd:InstanceId", _xmlNS).innerText; final org.ovirt.engine.core.compat.Guid guid; org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface; if (!(org.apache.commons.lang.StringUtils.isNumeric(str))) { guid = new org.ovirt.engine.core.compat.Guid(str); iface = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(interfaces, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface) { return iface.getId().equals(guid); } }); if (iface == null) { iface = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); iface.setId(guid); } } else { iface = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); } return iface; }	public org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface getNetworkInterface(org.ovirt.engine.core.utils.ovf.xml.XmlNode node) { java.lang.String str = selectSingleNode(node, "rasd:InstanceId", _xmlNS).innerText; final org.ovirt.engine.core.compat.Guid guid; org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface; if (!(org.apache.commons.lang.StringUtils.isNumeric(str))) { guid = new org.ovirt.engine.core.compat.Guid(str); iface = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(interfaces, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface) { return iface.getId().equals(guid); } }); if (iface == null) { iface = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); iface.setId(guid); } } else { iface = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); } return iface; }
protected java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>> populateTemplatesMetadataForOvfUpdate(java.util.List<org.ovirt.engine.core.compat.Guid> idsToProcess) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>> vmsAndTemplateMetadata = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>>(); java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> templates = getVmTemplateDao().getVmTemplatesByIds(idsToProcess); for (org.ovirt.engine.core.common.businessentities.VmTemplate template : templates) { if ((org.ovirt.engine.core.common.businessentities.VmTemplateStatus.Locked) != (template.getStatus())) { updateTemplateDisksFromDb(template); boolean verifyDisksNotLocked = proccessDisks(template.getDiskList()); if (verifyDisksNotLocked) { loadTemplateData(template); java.lang.Long currentDbGeneration = getVmStaticDao().getDbGeneration(template.getId()); if ((currentDbGeneration != null) && ((template.getDbGeneration()) == currentDbGeneration)) { proccessedOvfConfigurationsInfo.add(buildMetadataDictionaryForTemplate(template, vmsAndTemplateMetadata)); proccessedIdsInfo.add(template.getId()); proccessedOvfGenerationsInfo.add(template.getDbGeneration()); } } } } return vmsAndTemplateMetadata; }	protected java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>> populateTemplatesMetadataForOvfUpdate(java.util.List<org.ovirt.engine.core.compat.Guid> idsToProcess) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>> vmsAndTemplateMetadata = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>>(); java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> templates = getVmTemplateDao().getVmTemplatesByIds(idsToProcess); for (org.ovirt.engine.core.common.businessentities.VmTemplate template : templates) { if ((org.ovirt.engine.core.common.businessentities.VmTemplateStatus.Locked) != (template.getStatus())) { updateTemplateDisksFromDb(template); boolean verifyDisksNotLocked = verifyDisksNotLocked(template.getDiskList()); if (verifyDisksNotLocked) { loadTemplateData(template); java.lang.Long currentDbGeneration = getVmStaticDao().getDbGeneration(template.getId()); if ((currentDbGeneration != null) && ((template.getDbGeneration()) == currentDbGeneration)) { proccessedOvfConfigurationsInfo.add(buildMetadataDictionaryForTemplate(template, vmsAndTemplateMetadata)); proccessedIdsInfo.add(template.getId()); proccessedOvfGenerationsInfo.add(template.getDbGeneration()); proccessDisksDomains(template.getDiskList()); } } } } return vmsAndTemplateMetadata; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (((connectAutomatically.readConnectAutomatically()) && (model.getCanConnectAutomatically())) && (!(alreadyOpened))) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel userPortalItemModel = model.GetUpVms(model.getItems()).get(0); if (userPortalItemModel != null) { org.ovirt.engine.ui.uicommonweb.models.userportal.ConsoleProtocol selectedProtocol = consoleUtils.determineConnectionProtocol(userPortalItemModel); consoleManager.connectToConsole(selectedProtocol, userPortalItemModel); alreadyOpened = true; } } unregisterModels(); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (((connectAutomatically.readConnectAutomatically()) && (model.getCanConnectAutomatically())) && (!(alreadyOpened))) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel userPortalItemModel = model.GetUpVms(model.getItems()).get(0); if (userPortalItemModel != null) { org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol selectedProtocol = consoleUtils.determineConnectionProtocol(userPortalItemModel); consoleManager.connectToConsole(selectedProtocol, userPortalItemModel); alreadyOpened = true; } } unregisterModels(); }
@org.junit.Test public void canDoActionFails() { org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters params = new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters(); params.setServerServiceId(org.ovirt.engine.core.compat.Guid.NewGuid()); params.setActionType(ManageGlusterServiceCommand.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_START); cmd = spy(new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand(params)); prepareMocks(cmd); assertFalse(cmd.canDoAction()); params.setActionType(ManageGlusterServiceCommand.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_STOP); assertFalse(cmd.canDoAction()); }	@org.junit.Test public void canDoActionSucceedsWithValidActionTypes() { org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters params = new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters(); params.setActionType(GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_START); cmd = spy(new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand(params)); prepareMocks(cmd); assertFalse(cmd.canDoAction()); params.setActionType(GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_STOP); cmd = spy(new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand(params)); prepareMocks(cmd); assertFalse(cmd.canDoAction()); params.setClusterId(org.ovirt.engine.core.compat.Guid.NewGuid()); cmd = spy(new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand(params)); prepareMocks(cmd); assertTrue(cmd.canDoAction()); params.setServerId(org.ovirt.engine.core.compat.Guid.NewGuid()); cmd = spy(new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand(params)); prepareMocks(cmd); assertTrue(cmd.canDoAction()); params.setClusterId(org.ovirt.engine.core.compat.Guid.NewGuid()); params.setServerId(org.ovirt.engine.core.compat.Guid.NewGuid()); prepareMocks(cmd); assertTrue(cmd.canDoAction()); }
void addFooterButtons(final T model) { for (int i = (model.getCommands().size()) - 1; i >= 0; i--) { org.ovirt.engine.ui.uicommonweb.UICommand command = model.getCommands().get(i); final org.ovirt.engine.ui.common.widget.HasUiCommandClickHandlers button = org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget.getView().addFooterButton(command.getTitle(), command.getName()); button.setCommand(command); registerHandler(button.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { handleCommandExecution(button.getCommand(), model); } })); } }	void addFooterButtons(T model) { for (int i = (model.getCommands().size()) - 1; i >= 0; i--) { org.ovirt.engine.ui.uicommonweb.UICommand command = model.getCommands().get(i); final org.ovirt.engine.ui.common.widget.HasUiCommandClickHandlers button = org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget.getView().addFooterButton(command.getTitle(), command.getName()); button.setCommand(command); registerHandler(button.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { getView().flush(); beforeCommandExecuted(button.getCommand()); button.getCommand().execute(); } })); } }
private static java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> flatGroups(org.ovirt.engine.api.extensions.ExtMap entity, org.ovirt.engine.api.extensions.ExtKey key, java.util.Map<java.lang.String, org.ovirt.engine.api.extensions.ExtMap> accumulator) { for (org.ovirt.engine.api.extensions.ExtMap group : entity.<java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>>get(key, java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>emptyList())) { if (!(accumulator.containsKey(group.<java.lang.String>get(GroupRecord.ID)))) { accumulator.put(group.<java.lang.String>get(GroupRecord.ID), group); org.ovirt.engine.core.bll.aaa.DirectoryUtils.flatGroups(group, GroupRecord.GROUPS, accumulator); } } return accumulator.values(); }	private static void flatGroups(org.ovirt.engine.api.extensions.ExtMap entity, org.ovirt.engine.api.extensions.ExtKey key, java.util.Map<java.lang.String, org.ovirt.engine.api.extensions.ExtMap> accumulator) { for (org.ovirt.engine.api.extensions.ExtMap group : entity.<java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>>get(key, java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>emptyList())) { if (!(accumulator.containsKey(group.<java.lang.String>get(GroupRecord.ID)))) { accumulator.put(group.<java.lang.String>get(GroupRecord.ID), group); org.ovirt.engine.core.bll.aaa.DirectoryUtils.flatGroups(group, GroupRecord.GROUPS, accumulator); } } }
@java.lang.Override public void buildVmVideoCards() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmVideoDevices = vmDeviceDao.getVmDeviceByVmIdAndType(vm.getId(), VmDeviceGeneralType.VIDEO); for (org.ovirt.engine.core.common.businessentities.VmDevice vmVideoDevice : vmVideoDevices) { if (!(vmVideoDevice.getIsManaged())) { continue; } java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, vmVideoDevice.getType().getValue()); struct.put(VdsProperties.Device, vmVideoDevice.getDevice()); vmInfoBuildHelper.addAddress(vmVideoDevice, struct); struct.put(VdsProperties.SpecParams, vmVideoDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmVideoDevice.getId().getDeviceId())); addToManagedDevices(vmVideoDevice); devices.add(struct); } }	@java.lang.Override public void buildVmVideoCards() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmVideoDevices = vmDeviceDao.getVmDeviceByVmIdAndType(vm.getId(), VmDeviceGeneralType.VIDEO); for (org.ovirt.engine.core.common.businessentities.VmDevice vmVideoDevice : vmVideoDevices) { if (!(vmVideoDevice.getIsManaged())) { continue; } java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, vmVideoDevice.getType().getValue()); struct.put(VdsProperties.Device, vmVideoDevice.getDevice()); vmInfoBuildUtils.addAddress(vmVideoDevice, struct); struct.put(VdsProperties.SpecParams, vmVideoDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmVideoDevice.getId().getDeviceId())); addToManagedDevices(vmVideoDevice); devices.add(struct); } }
@java.lang.Override @org.junit.Before public void setUp() { super.setUp(); org.ovirt.engine.core.common.action.ImportRepoImageParameters importParameters = new org.ovirt.engine.core.common.action.ImportRepoImageParameters(); importParameters.setSourceRepoImageId(getRepoImageId()); importParameters.setSourceStorageDomainId(getRepoStorageDomainId()); importParameters.setStoragePoolId(getStoragePoolId()); importParameters.setStorageDomainId(getStorageDomainId()); cmd = spy(new org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand<org.ovirt.engine.core.common.action.ImportRepoImageParameters>(importParameters, null) { @java.lang.Override protected org.ovirt.engine.core.bll.utils.VmDeviceUtils getVmDeviceUtils() { return vmDeviceUtils; } }); doReturn(getStorageDomainDao()).when(cmd).getStorageDomainDao(); doReturn(getStoragePoolDao()).when(cmd).getStoragePoolDao(); doReturn(getProviderProxy()).when(cmd).getProviderProxy(); doReturn(true).when(cmd).validateSpaceRequirements(any(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)); }	@java.lang.Override @org.junit.Before public void setUp() { super.setUp(); injectorRule.bind(org.ovirt.engine.core.bll.utils.VmDeviceUtils.class, vmDeviceUtils); org.ovirt.engine.core.common.action.ImportRepoImageParameters importParameters = new org.ovirt.engine.core.common.action.ImportRepoImageParameters(); importParameters.setSourceRepoImageId(getRepoImageId()); importParameters.setSourceStorageDomainId(getRepoStorageDomainId()); importParameters.setStoragePoolId(getStoragePoolId()); importParameters.setStorageDomainId(getStorageDomainId()); cmd = spy(new org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand(importParameters, null)); doReturn(getStorageDomainDao()).when(cmd).getStorageDomainDao(); doReturn(getStoragePoolDao()).when(cmd).getStoragePoolDao(); doReturn(getProviderProxy()).when(cmd).getProviderProxy(); doReturn(true).when(cmd).validateSpaceRequirements(any(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VdsStatistics get(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", id); return getCallsHandler().executeRead("GetVdsStatisticsByVdsId", org.ovirt.engine.core.dao.VdsStatisticsDAOImpl.VdsStatisticsRowMapper.instance, parameterSource); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.VdsStatistics get(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", id); return getCallsHandler().executeRead("GetVdsStatisticsByVdsId", org.ovirt.engine.core.dao.VdsStatisticsDaoImpl.VdsStatisticsRowMapper.instance, parameterSource); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Boolean isNameUnique) { if (isNameUnique) { postInstanceTypeNameUniqueCheck(); } else { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel VmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())); VmModel.getInvalidityReasons().clear(); VmModel.getName().getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason()); VmModel.getName().setIsValid(false); VmModel.setIsValid(false); } }	@java.lang.Override public void onSuccess(java.lang.Boolean isNameUnique) { if (isNameUnique) { postInstanceTypeNameUniqueCheck(); } else { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel VmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())); VmModel.getInvalidityReasons().clear(); VmModel.getName().getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason()); VmModel.getName().setIsValid(false); VmModel.setIsValid(false); } }
private com.google.gwt.safehtml.shared.SafeHtml getTooltip(java.util.Set<java.lang.String> labels) { com.google.gwt.safehtml.shared.SafeHtmlBuilder tooltip = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); boolean isFirst = true; if (labels == null) { return null; } java.lang.String[] sortedLabels = labels.toArray(new java.lang.String[]{ }); java.util.Arrays.sort(sortedLabels, new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator()); for (java.lang.String label : sortedLabels) { if (isFirst) { isFirst = false; } else { tooltip = tooltip.appendHtmlConstant("<BR>"); } tooltip = tooltip.appendEscaped(label); } return tooltip.toSafeHtml(); }	private com.google.gwt.safehtml.shared.SafeHtml createLabelToolTip(java.util.Set<java.lang.String> labels) { com.google.gwt.safehtml.shared.SafeHtmlBuilder tooltip = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); boolean isFirst = true; if (labels == null) { return null; } java.lang.String[] sortedLabels = labels.toArray(new java.lang.String[]{ }); java.util.Arrays.sort(sortedLabels, new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator()); for (java.lang.String label : sortedLabels) { if (isFirst) { isFirst = false; } else { tooltip = tooltip.appendHtmlConstant("<BR>"); } tooltip = tooltip.appendEscaped(label); } return tooltip.toSafeHtml(); }
private org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct generateOptions() { org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct options = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct(); options.add(VdsProperties.connectivityCheck, java.lang.Boolean.toString(org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand.getParameters().isCheckConnectivity())); if (org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand.getParameters().isCheckConnectivity()) { int connectivityTimeout = org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand.getParameters().getConectivityTimeout(); if (connectivityTimeout <= 0) { connectivityTimeout = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.NetworkConnectivityCheckTimeoutInSeconds); } options.add(VdsProperties.connectivityTimeout, connectivityTimeout); } return options; }	private org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct generateOptions() { org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct options = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct(); options.add(VdsProperties.connectivityCheck, java.lang.Boolean.toString(org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand.getParameters().isCheckConnectivity())); if (org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand.getParameters().isCheckConnectivity()) { options.add(VdsProperties.connectivityTimeout, org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand.getParameters().getConectivityTimeout()); } return options; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Provider<?>> getAllByType(org.ovirt.engine.core.common.businessentities.ProviderType providerType) { return getCallsHandler().executeReadList("GetAllFromProvidersByType", org.ovirt.engine.core.dao.provider.ProviderDaoImpl.ProviderRowMapper.INSTANCE, getCustomMapSqlParameterSource().addValue("provider_type", providerType)); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Provider<?>> getAllByTypes(org.ovirt.engine.core.common.businessentities.ProviderType... providerTypes) { if (providerTypes == null) { return java.util.Collections.emptyList(); } return getCallsHandler().executeReadList("GetAllFromProvidersByTypes", org.ovirt.engine.core.dao.provider.ProviderDaoImpl.ProviderRowMapper.INSTANCE, getCustomMapSqlParameterSource().addValue("provider_types", createArrayOf("varchar", java.util.Arrays.stream(providerTypes).map(ProviderType::name).toArray()))); }
@org.junit.Test public void qosCommitmentMissingBondSpeedMode3() { org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = qosCommitmendMissingBondSpeed(org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_MODE_3); validateAndExpectViolation(helper, EngineMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_OVERCOMMITMENT, org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME); }	@org.junit.Test public void qosCommitmentMissingBondSpeedMode3() { org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = qosCommitmendMissingBondSpeed(org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_MODE_3); validateAndExpectViolation(helper, EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_OVERCOMMITMENT, org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME); }
void setBasicAuthHeader(com.google.gwt.http.client.RequestBuilder requestBuilder, java.lang.String authString) { requestBuilder.setHeader("Authorization", ("Basic " + authString)); }	public void acquireSession(java.lang.String userNameWithDomain, java.lang.String password) { com.google.gwt.http.client.RequestBuilder requestBuilder = createRequest(); setPersistentAuthHeader(requestBuilder); requestBuilder.setUser(userNameWithDomain); requestBuilder.setPassword(password); sendRequest(requestBuilder, new org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.RestApiRequestCallback() { @java.lang.Override protected void processResponse(com.google.gwt.http.client.Response response) { java.lang.String sessionIdFromHeader = response.getHeader(org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.SESSION_ID_HEADER); if (sessionIdFromHeader != null) { setCurrentSessionId(sessionIdFromHeader); } reuseCurrentSession(); } }); }
@java.lang.Override protected boolean canDoAction() { if ((!(org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterGeoReplication(getVdsGroup().getCompatibilityVersion()))) && (!(getClusterUtils().isFeatureSupportedAsAdditionalFeature(getVdsGroup().getId(), ClusterUtils.FEATURE_GLUSTER_GEO_REPLICATION)))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GEO_REP_NOT_SUPPORTED); } slaveHost = getSlaveHost(); if ((slaveHost) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST); } if ((slaveHost.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP, java.lang.String.format("$%1$s %2$s", "VdsName", slaveHost.getName())); } slaveVolume = getSlaveVolume(); if ((slaveVolume) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_INVALID); } if ((slaveVolume.getStatus()) != (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_STARTED); } if (!(areAllRemoteServersUp())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_ONE_OR_MORE_REMOTE_HOSTS_ARE_NOT_ACCESSIBLE); } org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession geoRepSession = getGeoRepDao().getGeoRepSession(getGlusterVolumeId(), slaveHost.getId(), getParameters().getSlaveVolumeName()); if (geoRepSession != null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_GEOREP_SESSION_ALREADY_CREATED); } return super.canDoAction(); }	@java.lang.Override protected boolean canDoAction() { if (!(getGlusterUtil().isGlusterGeoReplicationSupported(getVdsGroup().getCompatibilityVersion(), getVdsGroup().getId()))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GEO_REP_NOT_SUPPORTED); } slaveHost = getSlaveHost(); if ((slaveHost) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST); } if ((slaveHost.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP, java.lang.String.format("$%1$s %2$s", "VdsName", slaveHost.getName())); } slaveVolume = getSlaveVolume(); if ((slaveVolume) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_INVALID); } if ((slaveVolume.getStatus()) != (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_STARTED); } if (!(areAllRemoteServersUp())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_ONE_OR_MORE_REMOTE_HOSTS_ARE_NOT_ACCESSIBLE); } org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession geoRepSession = getGeoRepDao().getGeoRepSession(getGlusterVolumeId(), slaveHost.getId(), getParameters().getSlaveVolumeName()); if (geoRepSession != null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_GEOREP_SESSION_ALREADY_CREATED); } return super.canDoAction(); }
public org.ovirt.engine.core.dao.network.NetworkProviderDao getNetworkProviderDao() { return getDao(org.ovirt.engine.core.dao.network.NetworkProviderDao.class); }	public org.ovirt.engine.core.dao.provider.ProviderDao getProviderDao() { return getDao(org.ovirt.engine.core.dao.provider.ProviderDao.class); }
public void setTabToSelect(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Integer> value) { tabToSelect = value; onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("SelectTab")); }	public void setValidationFailed(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> value) { validationFailed = value; onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("ValidationFailed")); }
@java.lang.Override protected void beforeLogin(org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel) { org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.init(eventBus); }	@java.lang.Override protected void beforeLogin(org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel) { org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.init(eventBus); org.ovirt.engine.ui.common.uicommon.model.ModelInitializedEvent.fire(eventBus); }
@java.lang.Override @org.ovirt.engine.api.restapi.resource.SingleEntityResource public org.ovirt.engine.api.resource.TemplateDiskResource getDeviceSubResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendTemplateDiskResource(modelType, entityType, asGuidOr404(id), this)); }	@java.lang.Override @org.ovirt.engine.api.restapi.resource.SingleEntityResource public org.ovirt.engine.api.resource.TemplateDiskResource getDeviceSubResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendTemplateDiskResource(asGuidOr404(id), this)); }
private void updateSelectedList() { java.util.Set<java.lang.Integer> indexes = new java.util.HashSet<java.lang.Integer>(); selectedList.clear(); com.google.gwt.user.client.ui.ListBox listBox = org.ovirt.engine.ui.common.widget.editor.ListModelMultipleSelectListBox.asListBox(); while ((listBox.getSelectedIndex()) >= 0) { int index = listBox.getSelectedIndex(); listBox.setItemSelected(index, false); java.lang.String selectedElem = listBox.getItemText(index); T value = getTypedValue(selectedElem); selectedList.add(value); indexes.add(index); } for (java.lang.Integer index : indexes) { listBox.setItemSelected(index, true); } }	@java.lang.Override public void setAcceptableValues(java.util.Collection<java.util.List<T>> newValues) { super.setValue(newValues.iterator().next(), false); super.setAcceptableValues(newValues); itemIndex.clear(); for (java.util.List<T> value : newValues) { addToItems(value); itemIndex.add(value.get(0)); } }
public void setuser_name(java.lang.String value) { this.username = getStringValueToSet(value); }	public void setuser_name(java.lang.String value) { this.username = org.ovirt.engine.core.common.businessentities.StorageServerConnections.getStringValueToSet(value); }
private java.lang.String getPrintableConnectionsList() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.vdscommands.storage_server_connections con : getConnectionList()) { sb.append("{ id: "); sb.append(con.getid()); sb.append(", connection: "); sb.append(con.getconnection()); sb.append(", iqn: "); sb.append(con.getiqn()); sb.append(", vfsType: "); sb.append(con.getVfsType()); sb.append(", mountOptions: "); sb.append(con.getMountOptions()); sb.append(", nfsVersion: "); sb.append(con.getNfsVersion()); sb.append(", nfsRetrans: "); sb.append(con.getNfsRetrans()); sb.append(", nfsTimeo: "); sb.append(con.getNfsTimeo()); sb.append(" };"); } return sb.toString(); }	private java.lang.String getPrintableConnectionsList() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.vdscommands.storage_server_connections con : getConnectionList()) { sb.append(con); } return sb.toString(); }
private void finalizeDownloadIfNecessary(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context, org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()) != 0) && ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()) == (upToDateImageTransfer.getBytesSent()))) && (!(upToDateImageTransfer.getActive()))) { if (!(context.entity.getActive())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer statusUpdate = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); statusUpdate.setPhase(ImageTransferPhase.FINALIZING_SUCCESS); runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId(), statusUpdate)); } } }	private void finalizeDownloadIfNecessary(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context, org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer) { if ((((upToDateImageTransfer.getBytesTotal()) != 0) && ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()) == (upToDateImageTransfer.getBytesSent()))) && (!(upToDateImageTransfer.getActive()))) { if (!(context.entity.getActive())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer statusUpdate = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); statusUpdate.setPhase(ImageTransferPhase.FINALIZING_SUCCESS); runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId(), statusUpdate)); } } }
private boolean refreshVdsmFileList(org.ovirt.engine.core.compat.Guid repoStoragePoolId, org.ovirt.engine.core.compat.Guid repoStorageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> fileStats, org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.FileListRefreshed fileListRefreshed) { if (repoStorageDomainId == null) { return false; } boolean vdsmRefreshOk = fileStats != null; org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.debug("The refresh process from VDSM, for {}, {}.", imageFileType, succeededOrFailed(vdsmRefreshOk)); if (!vdsmRefreshOk) { return false; } boolean refreshSucceeded = org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.refreshIsoFileListMetaData(repoStorageDomainId, repoStorageDom, fileStats, imageFileType); if (refreshSucceeded && (fileListRefreshed != null)) { fileListRefreshed.onFileListRefreshed(repoStoragePoolId, fileStats.keySet()); } return refreshSucceeded; }	private boolean refreshVdsmFileList(org.ovirt.engine.core.compat.Guid repoStoragePoolId, org.ovirt.engine.core.compat.Guid repoStorageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> fileStats, org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.FileListRefreshed fileListRefreshed) { if (repoStorageDomainId == null) { return false; } boolean vdsmRefreshOk = fileStats != null; org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.debug("The refresh process from VDSM, for {}, {}.", imageFileType, succeededOrFailed(vdsmRefreshOk)); if (!vdsmRefreshOk) { return false; } boolean refreshSucceeded = refreshIsoFileListMetaData(repoStorageDomainId, fileStats, imageFileType); if (refreshSucceeded && (fileListRefreshed != null)) { fileListRefreshed.onFileListRefreshed(repoStoragePoolId, fileStats.keySet()); } return refreshSucceeded; }
private java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> moveDependentToEnd(java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list) { java.util.function.Predicate<org.ovirt.engine.core.common.businessentities.VdcOption> isDependent = ( o) -> { org.ovirt.engine.core.dal.dbbroker.generic.EnumValue parsed = parseEnumValue(o.getOptionName()); if (parsed != null) { org.ovirt.engine.core.common.config.OptionBehaviourAttribute behaviour = parsed.getOptionBehaviour(); if (behaviour == null) { return false; } return (behaviour.behaviour()) == (ValueDependent); } return false; }; java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> optionsList = list.stream().filter(isDependent.negate()).collect(java.util.stream.Collectors.toList()); optionsList.addAll(list.stream().filter(isDependent).collect(java.util.stream.Collectors.toList())); return optionsList; }	private java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> moveDependentToEnd(java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list) { java.util.function.Predicate<org.ovirt.engine.core.common.businessentities.VdcOption> isDependent = ( o) -> { org.ovirt.engine.core.dal.dbbroker.generic.EnumValue parsed = parseEnumValue(o.getOptionName()); if (parsed != null) { org.ovirt.engine.core.common.config.OptionBehaviourAttribute behaviour = parsed.getOptionBehaviour(); return (behaviour != null) && ((behaviour.behaviour()) == (ValueDependent)); } return false; }; java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> optionsList = list.stream().filter(isDependent.negate()).collect(java.util.stream.Collectors.toList()); optionsList.addAll(list.stream().filter(isDependent).collect(java.util.stream.Collectors.toList())); return optionsList; }
private java.lang.String commaSeparated(java.util.Collection<?> invalidBondIds) { return org.apache.commons.lang.StringUtils.join(invalidBondIds, ", "); }	private org.ovirt.engine.core.bll.ValidationResult validateAttachmentNotReferenceVlanDevice(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = existingInterfacesMap.get(attachment.getNicName()); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ATTACHMENT_REFERENCE_VLAN_DEVICE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("ATTACHMENT_REFERENCE_VLAN_DEVICE_ENTITY", attachment.getNetworkName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("nicName", attachment.getNicName())).when(((nic != null) && (org.ovirt.engine.core.utils.NetworkUtils.isVlan(nic)))); }
public void setTitle(com.google.gwt.safehtml.shared.SafeHtml text) { setText(text.asString()); }	public void setTitle(com.google.gwt.safehtml.shared.SafeHtml text) { setTitle((text == null ? ((java.lang.String) (null)) : text.asString())); }
@org.ovirt.engine.ui.webadmin.Source("images/pause.png") com.google.gwt.resources.client.ImageResource pauseImage();	@org.ovirt.engine.ui.webadmin.Source("images/pause.gif") com.google.gwt.resources.client.ImageResource pauseImage();
private void validateDataSize() { if ((dataUrl.length()) > (org.ovirt.engine.core.bll.validator.IconValidator.MAX_DATAURL_SIZE)) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.DATA_SIZE_OF_PROVIDED_VM_ICON_TOO_LARGE, ("$maxSize " + (org.ovirt.engine.core.bll.validator.IconValidator.getSizeEstimateByDataUrlLength(org.ovirt.engine.core.bll.validator.IconValidator.MAX_DATAURL_SIZE))), ("$currentSize " + (org.ovirt.engine.core.bll.validator.IconValidator.getSizeEstimateByDataUrlLength(dataUrl.length())))); } }	private void validateDataSize() { if ((dataUrl.length()) > (org.ovirt.engine.core.bll.validator.IconValidator.MAX_DATAURL_SIZE)) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.DATA_SIZE_OF_PROVIDED_VM_ICON_TOO_LARGE, ("$maxSize " + (org.ovirt.engine.core.bll.validator.IconValidator.getSizeEstimateByDataUrlLength(org.ovirt.engine.core.bll.validator.IconValidator.MAX_DATAURL_SIZE))), ("$currentSize " + (org.ovirt.engine.core.bll.validator.IconValidator.getSizeEstimateByDataUrlLength(dataUrl.length())))); } }
public boolean isAttached() { return (reportedConfigurations) != null; }	public boolean isAttached() { return (attachedToNic) != null; }
private void collectVmPrestartFailureReasons(java.util.Map<java.lang.String, java.lang.Integer> failureReasons, java.util.List<java.lang.String> messages) { if (org.ovirt.engine.core.bll.VmPoolMonitor.log.isInfoEnabled()) { java.lang.String reason = messages.stream().filter(( msg) -> org.ovirt.engine.core.bll.VmPoolMonitor.ENGINE_MESSAGES.contains(msg)).collect(java.util.stream.Collectors.joining(", ")); java.lang.Integer count = failureReasons.get(reason); failureReasons.put(reason, (count == null ? 1 : count + 1)); } }	private void collectVmPrestartFailureReasons(java.util.Map<java.lang.String, java.lang.Integer> failureReasons, java.util.List<java.lang.String> messages) { if (org.ovirt.engine.core.bll.VmPoolMonitor.log.isInfoEnabled()) { java.lang.String reason = messages.stream().filter(EngineMessage::contains).collect(java.util.stream.Collectors.joining(", ")); java.lang.Integer count = failureReasons.get(reason); failureReasons.put(reason, (count == null ? 1 : count + 1)); } }
private void logAuditMessages(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricks) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.gluster.GlusterAuditLogUtil logUtil = org.ovirt.engine.core.dal.dbbroker.auditloghandling.gluster.GlusterAuditLogUtil.getInstance(); for (final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : bricks) { logUtil.logAuditMessage(null, null, null, AuditLogType.GLUSTER_VOLUME_BRICK_ADDED, new java.util.HashMap<java.lang.String, java.lang.String>() { { put(GlusterConstants.BRICK_PATH, brick.getBrickDirectory()); put(GlusterConstants.SERVERE_NAME, brick.getServerName()); put(GlusterConstants.VOLUME_NAME, getGlusterVolumeName()); } }); } }	private void logAuditMessages(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricks) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.gluster.GlusterAuditLogUtil logUtil = org.ovirt.engine.core.dal.dbbroker.auditloghandling.gluster.GlusterAuditLogUtil.getInstance(); for (final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : bricks) { logUtil.logAuditMessage(null, null, null, AuditLogType.GLUSTER_VOLUME_BRICK_ADDED, new java.util.HashMap<java.lang.String, java.lang.String>() { { put(GlusterConstants.BRICK_PATH, brick.getBrickDirectory()); put(GlusterConstants.SERVER_NAME, brick.getServerName()); put(GlusterConstants.VOLUME_NAME, getGlusterVolumeName()); } }); } }
public java.lang.String getSoftwareVersion() { return mVdsDynamic.getSoftwareVersion(); }	public java.lang.String getSoftwareVersion() { return vdsDynamic.getSoftwareVersion(); }
protected boolean validateDiscardAfterDeleteLegal(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator) { if (org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().isDiscardAfterDelete()) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISCARD_AFTER_DELETE_SUPPORTED_ONLY_BY_BLOCK_DOMAINS); } return true; }	protected abstract boolean validateDiscardAfterDeleteLegal(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator, org.ovirt.engine.core.compat.Version compatibilityVersion);
private static org.ovirt.engine.core.common.businessentities.Network CloneNetwork(org.ovirt.engine.core.common.businessentities.Network instance) { org.ovirt.engine.core.common.businessentities.Network obj = new org.ovirt.engine.core.common.businessentities.Network(null); obj.setaddr(instance.getaddr()); obj.setdescription(instance.getdescription()); obj.setId(instance.getId()); obj.setname(instance.getname()); obj.setsubnet(instance.getsubnet()); obj.setgateway(instance.getgateway()); obj.settype(instance.gettype()); obj.setvlan_id(instance.getvlan_id()); obj.setstp(instance.getstp()); obj.setstorage_pool_id(instance.getstorage_pool_id()); if ((instance.getCluster()) != null) { obj.setCluster(new org.ovirt.engine.core.common.businessentities.network_cluster()); obj.getCluster().setstatus(instance.getCluster().getstatus()); obj.getCluster().setis_display(instance.getCluster().getis_display()); obj.getCluster().setRequired(instance.getCluster().isRequired()); } return obj; }	private static org.ovirt.engine.core.common.businessentities.Network CloneNetwork(org.ovirt.engine.core.common.businessentities.Network instance) { org.ovirt.engine.core.common.businessentities.Network obj = new org.ovirt.engine.core.common.businessentities.Network(); obj.setaddr(instance.getaddr()); obj.setdescription(instance.getdescription()); obj.setId(instance.getId()); obj.setname(instance.getname()); obj.setsubnet(instance.getsubnet()); obj.setgateway(instance.getgateway()); obj.settype(instance.gettype()); obj.setvlan_id(instance.getvlan_id()); obj.setstp(instance.getstp()); obj.setstorage_pool_id(instance.getstorage_pool_id()); if ((instance.getCluster()) != null) { obj.setCluster(new org.ovirt.engine.core.common.businessentities.network_cluster()); obj.getCluster().setstatus(instance.getCluster().getstatus()); obj.getCluster().setis_display(instance.getCluster().getis_display()); obj.getCluster().setRequired(instance.getCluster().isRequired()); } return obj; }
@org.junit.Test public void testIsUsingScsiReservationValidWhenSgioIsFiltered() { setupForLun(); org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk(ScsiGenericIO.FILTERED, true); assertThat(lunValidator.isUsingScsiReservationValid(org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(), lunDisk1), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessages.ACTION_TYPE_FAILED_SGIO_IS_FILTERED)); }	@org.junit.Test public void testIsUsingScsiReservationValidWhenSgioIsFiltered() { setupForLun(); org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk(ScsiGenericIO.FILTERED, true); assertThat(lunValidator.isUsingScsiReservationValid(org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(), lunDisk1), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_SGIO_IS_FILTERED)); }
private void mockExistingNetworks(org.ovirt.engine.core.common.businessentities.network.Network... networks) { for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { if ((network.getCluster()) == null) { network.setCluster(new org.ovirt.engine.core.common.businessentities.network.NetworkCluster()); } } when(networkDAO.getAllForCluster(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Arrays.asList(networks)); }	private void mockExistingNetworks(org.ovirt.engine.core.common.businessentities.network.Network... networks) { when(networkDAO.getAllForCluster(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Arrays.asList(networks)); }
private org.ovirt.engine.core.common.action.LiveMigrateDiskParameters getLiveMigrateDiskParameters(org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters, org.ovirt.engine.core.compat.Guid vmId) { return new org.ovirt.engine.core.common.action.LiveMigrateDiskParameters(moveDiskParameters.getImageId(), moveDiskParameters.getSourceDomainId(), moveDiskParameters.getStorageDomainId(), vmId, moveDiskParameters.getQuotaId()); }	private org.ovirt.engine.core.common.action.LiveMigrateDiskParameters createLiveMigrateDiskParameters(org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters, org.ovirt.engine.core.compat.Guid vmId) { return new org.ovirt.engine.core.common.action.LiveMigrateDiskParameters(moveDiskParameters.getImageId(), moveDiskParameters.getSourceDomainId(), moveDiskParameters.getStorageDomainId(), vmId, moveDiskParameters.getQuotaId()); }
@org.junit.Test public void testVirtIoScsiNotSupportedByOs() { org.ovirt.engine.core.common.businessentities.DiskImage disk = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createVirtIoScsiDiskImage(); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createParameters(); parameters.setDiskInfo(disk); org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId, parameters); mockStorageDomain(storageId); mockStoragePoolIsoMap(); org.ovirt.engine.core.common.businessentities.VM vm = mockVm(); vm.setVdsGroupCompatibilityVersion(Version.v3_3); org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); java.util.HashMap<java.lang.Integer, java.lang.String> uniqueOsNames = new java.util.HashMap<java.lang.Integer, java.lang.String>(); uniqueOsNames.put(7, "RHEL5"); when(osRepository.getUniqueOsNames()).thenReturn(uniqueOsNames); mockMaxPciSlots(); vm.setVmOs(7); org.ovirt.engine.core.bll.validator.DiskValidator diskValidator = spyDiskValidator(disk); doReturn(true).when(diskValidator).isVirtioScsiControllerAttached(any(org.ovirt.engine.core.compat.Guid.class)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); }	@org.junit.Test public void testVirtIoScsiNotSupportedByOs() { org.ovirt.engine.core.common.businessentities.DiskImage disk = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createVirtIoScsiDiskImage(); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createParameters(); parameters.setDiskInfo(disk); org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId, parameters); mockStorageDomain(storageId); mockStoragePoolIsoMap(); org.ovirt.engine.core.common.businessentities.VM vm = mockVm(); vm.setVdsGroupCompatibilityVersion(Version.v3_3); mockMaxPciSlots(); when(osRepository.getDiskInterfaces(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(new java.util.ArrayList(java.util.Arrays.asList("VirtIO"))); org.ovirt.engine.core.bll.validator.DiskValidator diskValidator = spyDiskValidator(disk); doReturn(true).when(diskValidator).isVirtioScsiControllerAttached(any(org.ovirt.engine.core.compat.Guid.class)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); }
private void mockLockObjectFactoryToDisableLocking() { when(lockedObjectFactory.createLockingInstance(any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any(java.util.concurrent.locks.ReentrantReadWriteLock.class))).thenAnswer(org.mockito.AdditionalAnswers.returnsArgAt(0)); }	private void mockLockObjectFactoryToDisableLocking() { when(lockedObjectFactory.createLockingInstance(any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any(java.util.concurrent.locks.ReentrantReadWriteLock.class))).thenAnswer(( invocation) -> invocation.getArguments()[0]); }
@org.junit.Test public void onlyOutboundBurstPresent() { qos.setOutboundBurst(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH); valuesPresentTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_MISSING_VALUES)); }	@org.junit.Test public void onlyOutboundBurstPresent() { qos.setOutboundBurst(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_MEDIUM); valuesPresentTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_MISSING_VALUES)); }
public java.util.Map<java.lang.String, java.lang.Object> glusterVolumeGeoRepSessionList(java.lang.String volumeName, java.lang.String slaveHost, java.lang.String slaveVolumeName, java.lang.String slaveUserName);	public java.util.Map<java.lang.String, java.lang.Object> glusterVolumeGeoRepSessionList(java.lang.String volumeName, java.lang.String slaveHost, java.lang.String slaveVolumeName, java.lang.String userName);
private void addViolation(org.ovirt.engine.core.common.errors.VdcBllMessages violation, java.lang.String violatingEntity) { if (violatingEntity == null) { return; } java.util.List<java.lang.String> violatingEntities = violations.get(violation); if (violatingEntities == null) { violatingEntities = new java.util.ArrayList<>(); violations.put(violation, violatingEntities); } violatingEntities.add(violatingEntity); }	private org.ovirt.engine.core.common.businessentities.network.Network existingNetworkRelatedToAttachment(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { return clusterNetworks.get(attachment.getNetworkId()); }
com.google.gwt.user.cellview.client.Header<?> createHeader(com.google.gwt.user.cellview.client.Column<T, ?> column, java.lang.String headerTextOrHtml, boolean allowHtml) { com.google.gwt.safehtml.shared.SafeHtml headerHtml = (allowHtml) ? com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(headerTextOrHtml) : com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscapeAllowEntities(headerTextOrHtml)); return createHeader(column, headerHtml); }	com.google.gwt.user.cellview.client.Header<?> createHeader(com.google.gwt.user.cellview.client.Column<T, ?> column, java.lang.String headerTextOrHtml, boolean allowHtml) { com.google.gwt.safehtml.shared.SafeHtml headerHtml = (allowHtml) ? com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(headerTextOrHtml) : com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(headerTextOrHtml); return createHeader(column, headerHtml); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.AuditLog auditLog = org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getAuditLogDao().get(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getAuditLogDao().remove(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); setAuditLogDetails(auditLog); evict(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.composeSystemObjectId(this, auditLog.getLogType())); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.AuditLog auditLog = org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getAuditLogDao().get(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getAuditLogDao().remove(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); setAuditLogDetails(auditLog); evict(auditLogDirector.composeSystemObjectId(this, auditLog.getLogType())); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.setSucceeded(true); }
@org.junit.Test public void invalidNetworkProviderType() { when(provider.getType()).thenReturn(org.ovirt.engine.core.bll.provider.NetworkProviderValidatorTest.NON_NETWORK_PROVIDER_TYPE); assertThat(validator.providerTypeIsNetwork(), failsWith(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_TYPE_NOT_NETWORK)); }	@org.junit.Test public void invalidNetworkProviderType() { when(provider.getType()).thenReturn(org.ovirt.engine.core.bll.provider.NetworkProviderValidatorTest.NON_NETWORK_PROVIDER_TYPE); assertThat(validator.providerTypeIsNetwork(), failsWith(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_NOT_NETWORK)); }
private void ReturnVm() { org.ovirt.engine.core.common.businessentities.VM entity = ((org.ovirt.engine.core.common.businessentities.VM) (getItem().getEntity())); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.ShutdownVm, new org.ovirt.engine.core.common.action.ShutdownVmParameters(entity.getId(), false), Frontend.NULLABLE_ASYNC_CALLBACK, null); }	private void ReturnVm() { org.ovirt.engine.core.common.businessentities.VM entity = ((org.ovirt.engine.core.common.businessentities.VM) (getItem().getEntity())); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.ShutdownVm, new org.ovirt.engine.core.common.action.ShutdownVmParameters(entity.getId(), false), null, null); }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append(getName()).append(" {id=").append(getId()).append(", vnicProfileId=").append(getVnicProfileId()).append(", speed=").append(getSpeed()).append(", type=").append(getType()).append(", macAddress=").append(getMacAddress()).append(", plugged=").append(isPlugged()).append(", customProperties=").append(getCustomProperties()).append(", linked=").append(isLinked()).append(", vmId=").append(getVmId()).append(", vmTemplateId=").append(getVmTemplateId()).append("}"); return builder.toString(); }	@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append(getName()).append(" {id=").append(getId()).append(", vnicProfileId=").append(getVnicProfileId()).append(", speed=").append(getSpeed()).append(", type=").append(getType()).append(", macAddress=").append(getMacAddress()).append(", linked=").append(isLinked()).append(", vmId=").append(getVmId()).append(", vmTemplateId=").append(getVmTemplateId()).append("}"); return builder.toString(); }
private static java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> createTestVmNumaNodes() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> newVmNodes = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VmNumaNode newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.generateCpuList(0, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(0); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(new org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning(org.ovirt.engine.core.compat.Guid.newGuid(), true, 0)); newVmNodes.add(newVmNumaNode); newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.generateCpuList(4, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(1); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(new org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning(org.ovirt.engine.core.compat.Guid.newGuid(), true, 1)); newVmNodes.add(newVmNumaNode); return newVmNodes; }	private static java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> createTestVmNumaNodes() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> newVmNodes = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VmNumaNode newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.generateCpuList(0, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(0); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(0); newVmNodes.add(newVmNumaNode); newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.generateCpuList(4, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(1); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(1); newVmNodes.add(newVmNumaNode); return newVmNodes; }
public static org.ovirt.engine.core.bll.adbroker.RootDSE get(org.ovirt.engine.core.ldap.LdapProviderType ldapProviderType, javax.naming.directory.Attributes rootDseRecords) throws java.lang.NumberFormatException, javax.naming.NamingException { switch (ldapProviderType) { case activeDirectory : return new org.ovirt.engine.core.bll.adbroker.ADRootDSE(rootDseRecords); case ipa : return new org.ovirt.engine.core.bll.adbroker.IPARootDSE(rootDseRecords); case rhds : return new org.ovirt.engine.core.bll.adbroker.RHDSRootDSE(rootDseRecords); case itds : return new org.ovirt.engine.core.bll.adbroker.ITDSRootDSE(rootDseRecords); case openLdap : return new org.ovirt.engine.core.bll.adbroker.DefaultRootDSE(rootDseRecords); default : return new org.ovirt.engine.core.bll.adbroker.DefaultRootDSE(rootDseRecords); } }	public static org.ovirt.engine.core.bll.adbroker.RootDSE get(org.ovirt.engine.core.ldap.LdapProviderType ldapProviderType, javax.naming.directory.Attributes rootDseRecords) throws java.lang.NumberFormatException, javax.naming.NamingException { switch (ldapProviderType) { case activeDirectory : return new org.ovirt.engine.core.bll.adbroker.ADRootDSE(rootDseRecords); case ipa : return new org.ovirt.engine.core.bll.adbroker.IPARootDSE(rootDseRecords); case rhds : return new org.ovirt.engine.core.bll.adbroker.RHDSRootDSE(rootDseRecords); case itds : return new org.ovirt.engine.core.bll.adbroker.ITDSRootDSE(rootDseRecords); case openLdap : return new org.ovirt.engine.core.bll.adbroker.DefaultRootDSE(rootDseRecords); default : throw new java.lang.IllegalArgumentException("Invalid LDAP provider type."); } }
public void connectStoragePool() { java.util.Map<java.lang.String, java.lang.String> storageDomains = null; org.ovirt.engine.core.compat.Guid masterDomainId = ConnectStoragePoolVDSCommand.getMasterStorageDomain(ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId()).getId(); if (isPoolWithoutMetadata()) { storageDomains = org.ovirt.engine.core.common.utils.StoragePoolDomainHelper.getStoragePoolIsoMap(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().getAllForStoragePool(ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId())); } status = ConnectStoragePoolVDSCommand.getBroker().connectStoragePool(ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), ConnectStoragePoolVDSCommand.getParameters().getVds().getVdsSpmId(), ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), masterDomainId.toString(), ConnectStoragePoolVDSCommand.getParameters().getStoragePool().getmaster_domain_version(), storageDomains); }	public void refreshStoragePool() { status = ConnectStoragePoolVDSCommand.getBroker().refreshStoragePool(ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), ConnectStoragePoolVDSCommand.getParameters().getMasterDomainId().toString(), ConnectStoragePoolVDSCommand.getParameters().getStoragePool().getmaster_domain_version()); }
public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element elem, final T object, com.google.gwt.dom.client.NativeEvent event) { final int index = context.getIndex(); com.google.gwt.cell.client.ValueUpdater<C> valueUpdater = ((org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getFieldUpdater()) == null) ? null : new com.google.gwt.cell.client.ValueUpdater<C>() { @java.lang.Override public void update(C value) { getFieldUpdater().update(index, object, value); } }; getCell().onBrowserEvent(context, elem, org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getValue(object), org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getTooltip(object), event, valueUpdater); }	public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element elem, final T object, com.google.gwt.dom.client.NativeEvent event) { final int index = context.getIndex(); com.google.gwt.cell.client.ValueUpdater<C> valueUpdater = ((org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getFieldUpdater()) == null) ? null : new com.google.gwt.cell.client.ValueUpdater<C>() { @java.lang.Override public void update(C value) { getFieldUpdater().update(index, object, value); } }; getCell().onBrowserEvent(context, elem, org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getValue(object), getTooltip(object), event, valueUpdater); }
@org.junit.Test public void validateFailsOnNoConflictServers() { cmd = spy(new org.ovirt.engine.core.bll.gluster.AddGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook = getHookEntity(); setUpMocksForAdd(true, hook); assertFalse(cmd.validate()); assertTrue(cmd.getReturnValue().getValidateMessages().contains(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_NO_CONFLICT_SERVERS.toString())); }	@org.junit.Test public void validateFailsOnNoConflictServers() { cmd = spy(new org.ovirt.engine.core.bll.gluster.AddGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook = getHookEntity(); setUpMocksForAdd(true, hook); assertFalse(cmd.validate()); assertTrue(cmd.getReturnValue().getValidationMessages().contains(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_NO_CONFLICT_SERVERS.toString())); }
public void start() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (java.lang.Object item : org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VDS vds = ((org.ovirt.engine.core.common.businessentities.VDS) (item)); list.add(new org.ovirt.engine.core.common.action.FenceVdsActionParameters(vds.getId(), org.ovirt.engine.core.common.businessentities.FenceActionType.Start)); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.StartVds, list, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { } }, null); }	public void start() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (java.lang.Object item : org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VDS vds = ((org.ovirt.engine.core.common.businessentities.VDS) (item)); list.add(new org.ovirt.engine.core.common.action.FenceVdsActionParameters(vds.getId(), org.ovirt.engine.core.common.businessentities.pm.FenceActionType.START)); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.StartVds, list, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { } }, null); }
@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveInterfaceDoesNotExist() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond(); bond.setSlaves(java.util.Arrays.asList("slaveA", "slaveB")); org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(host.getId()); params.setBonds(java.util.Collections.singletonList(bond)); doTestValidateModifiedBondSlaves(params, null, java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>emptyList(), java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.Network>emptyList(), new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST), ValidationResult.VALID, new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST)); }	@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveInterfaceDoesNotExist() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond(); bond.setSlaves(java.util.Arrays.asList("slaveA", "slaveB")); org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(host.getId()); params.setBonds(java.util.Collections.singletonList(bond)); doTestValidateModifiedBondSlaves(params, null, java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>emptyList(), java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.Network>emptyList(), new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST), ValidationResult.VALID, new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST)); }
private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); doNothing().when(cmd).endStepJobAborted(any(java.lang.String.class)); doNothing().when(cmd).releaseVolumeLock(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } else { vdsReturnValue.setReturnValue(new org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity()); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.StopRemoveGlusterVolumeBricks), any(org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeVDSParameters.class))).thenReturn(vdsReturnValue); }	private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); doNothing().when(cmd).endStepJobAborted(any(java.lang.String.class)); doNothing().when(cmd).releaseVolumeLock(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } else { vdsReturnValue.setReturnValue(new org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity()); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.StopRemoveGlusterVolumeBricks), argThat(anyGlusterVolumeVDS()))).thenReturn(vdsReturnValue); }
private boolean equals(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?, ?, ?> item1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?, ?, ?> item2) { if ((item1 == null) && (item2 == null)) { return true; } return item1 != null ? item1.equals(item2) : item2.equals(item1); }	private boolean equals(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item2) { if ((item1 == null) && (item2 == null)) { return true; } return item1 != null ? item1.equals(item2) : item2.equals(item1); }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Nameable nameable1, org.ovirt.engine.core.common.businessentities.Nameable nameable2) { final java.lang.String name1 = nameable1.getName(); final java.lang.String name2 = nameable2.getName(); final org.ovirt.engine.core.bll.common.NumericSuffixNormalizer numericSuffixNormalizer = new org.ovirt.engine.core.bll.common.NumericSuffixNormalizer(); final java.util.List<java.lang.String> normalizedNames = numericSuffixNormalizer.normalize(name1, name2); return org.apache.commons.lang.ObjectUtils.compare(normalizedNames.get(0), normalizedNames.get(1)); }	@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Nameable nameable1, org.ovirt.engine.core.common.businessentities.Nameable nameable2) { final java.lang.String name1 = nameable1.getName(); final java.lang.String name2 = nameable2.getName(); final java.util.List<java.lang.String> normalizedNames = numericSuffixNormalizer.normalize(name1, name2); return org.apache.commons.lang.ObjectUtils.compare(normalizedNames.get(0), normalizedNames.get(1)); }
@java.lang.Override protected void executeCommand() { log.info("Creating ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); log.info("Creating {} image", getImageType()); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())) { createImage(); } else { handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { log.info("Creating ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())) { log.info("Creating {} image", getImageType()); createImage(); } else { handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> getVmInterfaces() { if ((_vmInterfaces) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmNetworkInterfaces = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao().getAllForTemplate(vmInterfacesSourceId); _vmInterfaces = (vmNetworkInterfaces != null) ? vmNetworkInterfaces : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>(); } return _vmInterfaces; }	protected java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> getVmInterfaces() { if ((_vmInterfaces) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> vmNetworkInterfaces = org.ovirt.engine.core.bll.AddVmCommand.getVmNicDao().getAllForTemplate(vmInterfacesSourceId); _vmInterfaces = (vmNetworkInterfaces == null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNic>() : vmNetworkInterfaces; } return _vmInterfaces; }
public org.ovirt.engine.ui.uicommonweb.UiAction getCloseAction() { return new org.ovirt.engine.ui.uicommonweb.UiAction(getSetupNetworksModel(), "CloseSetupNetworksDialog") { @java.lang.Override protected void onActionExecuted() { sourceListModel.setWindow(null); sourceListModel.search(); } }; }	public org.ovirt.engine.ui.uicommonweb.action.SimpleAction getCloseAction() { return new org.ovirt.engine.ui.uicommonweb.action.SimpleAction() { @java.lang.Override public void execute() { sourceListModel.setWindow(null); sourceListModel.search(); } }; }
boolean validateStoragePoolConnectionsInHost(org.ovirt.engine.core.common.businessentities.VDS vds, java.util.List<org.ovirt.engine.core.common.businessentities.storage_server_connections> connections, org.ovirt.engine.core.compat.Guid storagePoolId);	boolean validateStoragePoolConnectionsInHost(org.ovirt.engine.core.common.businessentities.VDS vds, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections, org.ovirt.engine.core.compat.Guid storagePoolId);
public org.ovirt.engine.core.bll.ValidationResult nameAvailable() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED).when(((getProviderDao().getByName(provider.getName())) != null)); }	public org.ovirt.engine.core.bll.ValidationResult nameAvailable() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_NAME_ALREADY_USED).when(((getProviderDao().getByName(provider.getName())) != null)); }
private static void updateConsoleDevice(org.ovirt.engine.core.common.businessentities.VmBase newVmBase, boolean consoleEnabled) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateConsoleDevice(newVmBase.getId(), consoleEnabled); }	private static void updateConsoleDevice(org.ovirt.engine.core.common.businessentities.VmBase newVmBase, java.lang.Boolean consoleEnabled) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateConsoleDevice(newVmBase.getId(), consoleEnabled); }
private void scanDisks() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getSelectedItem(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.ScanStorageForUnregisteredDisks, new org.ovirt.engine.core.common.action.StorageDomainParametersBase(storageDomain.getStoragePoolId(), storageDomain.getId())); }	private void scanDisks() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getSelectedItem(); if (storageDomain != null) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.ScanStorageForUnregisteredDisks, new org.ovirt.engine.core.common.action.StorageDomainParametersBase(storageDomain.getStoragePoolId(), storageDomain.getId())); } }
public void setSubResources(java.util.List<org.ovirt.engine.api.rsdl.Node> subResources) { this.subResources = subResources; }	public void setSubServices(java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> subServices) { this.subServices = subServices; }
public void setError(int value) { _Error = org.ovirt.engine.core.common.errors.EngineErrors.forValue(value); }	public void setError(int value) { _Error = org.ovirt.engine.core.common.errors.EngineError.forValue(value); }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel) (result.getState())); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = result.getReturnValue(); boolean success = (returnVal != null) && (returnVal.getSucceeded()); if (success) { storageListModel.fileConnection.setid(((java.lang.String) (returnVal.getActionReturnValue()))); if ((storageModel.getRole()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Data)) { checkFileDomainAttachedToDc("OnImportFile", storageListModel.fileConnection); } } else { postImportFileStorage(storageListModel.context, false, storageListModel.storageModel, org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().failedToRetrieveExistingStorageDomainInformationMsg()); } }	@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel) (result.getState())); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = result.getReturnValue(); boolean success = (returnVal != null) && (returnVal.getSucceeded()); if (success) { storageListModel.fileConnection.setid(((java.lang.String) (returnVal.getActionReturnValue()))); if ((storageModel.getRole()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Data)) { checkFileDomainAttachedToDc("OnImportFile", storageListModel.fileConnection); } else { getExistingStorageDomainList(); } } else { postImportFileStorage(storageListModel.context, false, storageListModel.storageModel, org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().failedToRetrieveExistingStorageDomainInformationMsg()); } }
public void setProvidedBy(org.ovirt.engine.core.compat.Guid providedBy) { this.providedBy = providedBy; }	public void setProvidedBy(org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providedBy) { this.providedBy = providedBy; }
public boolean hasPhysMemoryToRunVM(org.ovirt.engine.core.common.businessentities.VDS curVds, org.ovirt.engine.core.common.businessentities.VM vm, int pendingMemory) { if ((curVds.getMemFree()) != null) { double vmMemRequired = (vm.getVmMemSizeMb()) + (vmOverheadCalculator.getEnsuredOverhead(vm)); double vdsMemLimit = (curVds.getMemFree()) - pendingMemory; org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("hasPhysMemoryToRunVM: host '{}'; free memory is : {} MB (+ {} MB pending); free swap is: {} MB, required memory is {} MB; Guest overhead {} MB", curVds.getName(), vdsMemLimit, pendingMemory, curVds.getSwapFree(), vmMemRequired, vmOverheadCalculator.getEnsuredOverhead(vm)); if ((curVds.getSwapFree()) != null) { vdsMemLimit += curVds.getSwapFree(); } org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("{} <= ??? {}", vmMemRequired, vdsMemLimit); return vmMemRequired <= vdsMemLimit; } else { return false; } }	public boolean hasPhysMemoryToRunVM(org.ovirt.engine.core.common.businessentities.VDS curVds, org.ovirt.engine.core.common.businessentities.VM vm, int pendingMemory) { if ((curVds.getMemFree()) != null) { double vmMemRequired = (org.ovirt.engine.core.common.utils.HugePageUtils.getRequiredMemoryWithoutHugePages(vm.getStaticData())) + (vmOverheadCalculator.getStaticOverheadInMb(vm)); if (org.ovirt.engine.core.common.utils.HugePageUtils.isBackedByHugepages(vm.getStaticData())) { org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("VM uses HugePages - ignore its memory size"); } double vdsMemLimit = (curVds.getMemFree()) - pendingMemory; org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("hasPhysMemoryToRunVM: host '{}'; free memory is : {} MB (+ {} MB pending); free swap is: {} MB, required memory is {} MB; Guest overhead {} MB", curVds.getName(), vdsMemLimit, pendingMemory, curVds.getSwapFree(), vmMemRequired, vmOverheadCalculator.getStaticOverheadInMb(vm)); if ((curVds.getSwapFree()) != null) { vdsMemLimit += curVds.getSwapFree(); } org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("{} <= ??? {}", vmMemRequired, vdsMemLimit); return vmMemRequired <= vdsMemLimit; } else { return false; } }
@org.junit.Test public void validateCantUploadDiskAttached() { initializeSuppliedImage(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_ATTACHED_TO_VMS, "")).when(diskValidator).isDiskAttachedToAnyVm(); assertFailsWithValidateMessage(getCommand(), EngineMessage.ACTION_TYPE_FAILED_DISK_ATTACHED_TO_VMS); }	@org.junit.Test public void validateCantUploadDiskAttached() { initializeSuppliedImage(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_ATTACHED_TO_VMS, "")).when(diskValidator).isDiskAttachedToAnyVm(); getCommand().validate(); org.ovirt.engine.core.bll.ValidateTestUtils.assertValidationMessages("Can't start a transfer for an image that is attached to any VMs.", getCommand(), EngineMessage.ACTION_TYPE_FAILED_DISK_ATTACHED_TO_VMS); }
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, org.ovirt.engine.ui.common.widget.ImageWithDecorator value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { if (value != null) { com.google.gwt.safehtml.shared.SafeHtml mainImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(""); com.google.gwt.safehtml.shared.SafeHtml decorateImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(""); if ((value.getImage()) != null) { mainImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(value.getImage()).getHTML()); } if ((value.getDecorator()) != null) { decorateImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(value.getDecorator()).getHTML()); } sb.append(org.ovirt.engine.ui.common.widget.table.cell.DecoratedImageResourceCell.template.doubleImageContainer(mainImageHtml, decorateImageHtml, value.getDecoratorPositionLeft(), value.getDecoratorPositionTop())); } }	@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, org.ovirt.engine.ui.common.widget.ImageWithDecorator value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { if (value != null) { com.google.gwt.safehtml.shared.SafeHtml mainImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(""); com.google.gwt.safehtml.shared.SafeHtml decorateImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(""); if ((value.getImage()) != null) { mainImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(value.getImage()).getHTML()); } if ((value.getDecorator()) != null) { decorateImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(value.getDecorator()).getHTML()); } sb.append(org.ovirt.engine.ui.common.widget.table.cell.DecoratedImageResourceCell.template.doubleImageContainer(mainImageHtml, decorateImageHtml, value.getDecoratorPositionLeft(), value.getDecoratorPositionTop(), id)); } }
public static java.util.List<java.lang.reflect.Method> getMethods(java.lang.Class<?> clazz, boolean subResource) { java.util.List<java.lang.reflect.Method> methods = new java.util.ArrayList<>(); while (clazz != null) { for (java.lang.reflect.Method method : clazz.getDeclaredMethods()) { if (org.ovirt.engine.api.rsdl.ResourceTree.isBlacklist(method)) { continue; } if ((org.ovirt.engine.api.rsdl.ResourceTree.isSubResource(method)) ^ (!subResource)) { methods.add(method); } } clazz = clazz.getSuperclass(); } return methods; }	public static java.util.List<java.lang.reflect.Method> getMethods(java.lang.Class<?> clazz, boolean subService) { java.util.List<java.lang.reflect.Method> methods = new java.util.ArrayList<>(); while (clazz != null) { for (java.lang.reflect.Method method : clazz.getDeclaredMethods()) { if (org.ovirt.engine.api.rsdl.ServiceTree.isBlacklist(method)) { continue; } if ((org.ovirt.engine.api.rsdl.ServiceTree.isSubService(method)) ^ (!subService)) { methods.add(method); } } clazz = clazz.getSuperclass(); } return methods; }
@java.lang.Override public void init(javax.servlet.ServletConfig config) throws javax.servlet.ServletException { super.init(config); url = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().expandString(config.getInitParameter(org.ovirt.engine.core.utils.servlet.RedirectServlet.URL).replaceAll("%\\{", "\\${")); url404 = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().expandString(config.getInitParameter(org.ovirt.engine.core.utils.servlet.RedirectServlet.URL404).replaceAll("%\\{", "\\${")); }	@java.lang.Override public void init(javax.servlet.ServletConfig config) throws javax.servlet.ServletException { super.init(config); url = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().expandString(config.getInitParameter(org.ovirt.engine.core.utils.servlet.RedirectServlet.URL).replaceAll("%\\{", "\\${")); java.lang.String url404ConfigValue = config.getInitParameter(org.ovirt.engine.core.utils.servlet.RedirectServlet.URL404); if (org.apache.commons.lang.StringUtils.isNotEmpty(url404ConfigValue)) { url404 = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().expandString(url404ConfigValue.replaceAll("%\\{", "\\${")); } else { url404 = org.ovirt.engine.core.utils.servlet.RedirectServlet.url404Default; } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.QoS.class, to = org.ovirt.engine.core.common.businessentities.qos.QosBase.class) public static org.ovirt.engine.core.common.businessentities.qos.QosBase map(org.ovirt.engine.api.model.QoS model, org.ovirt.engine.core.common.businessentities.qos.QosBase template) { org.ovirt.engine.core.common.businessentities.qos.QosBase entity = null; if (template != null) { entity = template; } org.ovirt.engine.api.model.QosType qosType = ((model.getType()) != null) ? org.ovirt.engine.api.model.QosType.valueOf(model.getType().toUpperCase()) : entity != null ? org.ovirt.engine.api.model.QosType.valueOf(entity.getQosType().toString().toUpperCase()) : org.ovirt.engine.api.model.QosType.STORAGE; if (entity == null) { entity = org.ovirt.engine.api.restapi.types.QosMapper.createNewQosEntityForQosType(qosType); } if (model.isSetId()) { entity.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.setName(model.getName()); } if ((model.isSetDataCenter()) && (model.getDataCenter().isSetId())) { entity.setStoragePoolId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getDataCenter().getId())); } if (model.isSetDescription()) { entity.setDescription(model.getDescription()); } org.ovirt.engine.api.restapi.types.QosMapper.mapQosToEntity(model, entity, qosType); return entity; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.QoS.class, to = org.ovirt.engine.core.common.businessentities.qos.QosBase.class) public static org.ovirt.engine.core.common.businessentities.qos.QosBase map(org.ovirt.engine.api.model.QoS model, org.ovirt.engine.core.common.businessentities.qos.QosBase template) { org.ovirt.engine.core.common.businessentities.qos.QosBase entity = (template == null) ? null : template; org.ovirt.engine.api.model.QosType qosType = org.ovirt.engine.api.restapi.types.QosTypeMapper.mapQosType(model.getType(), (entity == null ? null : entity.getQosType())); if (entity == null) { entity = org.ovirt.engine.api.restapi.types.QosMapper.createNewQosEntityForQosType(qosType); } if (model.isSetId()) { entity.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.setName(model.getName()); } if ((model.isSetDataCenter()) && (model.getDataCenter().isSetId())) { entity.setStoragePoolId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getDataCenter().getId())); } if (model.isSetDescription()) { entity.setDescription(model.getDescription()); } org.ovirt.engine.api.restapi.types.QosMapper.mapQosToEntity(model, entity, qosType); return entity; }
@org.junit.Before public void setup() { createVDS(); mockDAOs(); mockCommand(); }	@org.junit.Before public void setup() { createVDS(); mockCommand(); }
@java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { eventHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(( event1) -> { com.google.gwt.dom.client.NativeEvent nativeEvent = event1.getNativeEvent(); if ((((nativeEvent.getKeyCode()) == KeyCodes.KEY_ENTER) && (((event1.getTypeInt()) == Event.ONKEYPRESS) || ((event1.getTypeInt()) == Event.ONKEYDOWN))) && (!(event1.isCanceled()))) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); event1.cancel(); if ((event1.getTypeInt()) == Event.ONKEYDOWN) { enterPressed(); } } }); }	@java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { eventHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(( e) -> { com.google.gwt.dom.client.NativeEvent nativeEvent = e.getNativeEvent(); if ((((nativeEvent.getKeyCode()) == KeyCodes.KEY_ENTER) && (((e.getTypeInt()) == Event.ONKEYPRESS) || ((e.getTypeInt()) == Event.ONKEYDOWN))) && (!(e.isCanceled()))) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); e.cancel(); if ((e.getTypeInt()) == Event.ONKEYDOWN) { enterPressed(); } } }); }
public java.lang.String getDurationUnit() { return durationUnit; }	public org.ovirt.engine.core.common.utils.Pair<java.lang.Integer, java.lang.String> getDurationFormatted() { return durationFormatted; }
@java.lang.Override protected void endSuccessfully() { org.ovirt.engine.core.bll.RemoveSnapshotImagesCommand.setSucceeded(true); }	@java.lang.Override protected void endSuccessfully() { org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { InitConnectionList(); connectStorageServer(getStoragePool().getstorage_pool_type(), getConnections()); setSucceeded(true); if (getNeedToConnectIso()) { connectStorageServer(getIsoType(), getIsoConnections()); } if (getNeedToConnectExport()) { connectStorageServer(getExportType(), getExportConnections()); } }	@java.lang.Override protected void executeCommand() { InitConnectionList(); setSucceeded(connectStorageServer(getStoragePool().getstorage_pool_type(), getConnections())); if (getNeedToConnectIso()) { if (!(connectStorageServer(getIsoType(), getIsoConnections()))) { log.infoFormat("Failed to connect host {0} to StoragePool {1} Iso domain/s connections", getVds().getName(), getStoragePool().getname()); } } if (getNeedToConnectExport()) { if (!(connectStorageServer(getExportType(), getExportConnections()))) { log.infoFormat("Failed to connect host {0} to StoragePool {1} Export domain/s connections", getVds().getName(), getStoragePool().getname()); } } if (!(getSucceeded())) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(this, AuditLogType.CONNECT_STORAGE_SERVERS_FAILED); } }
public void remove(ID id) { final T entity = entityManager.find(entityType, id); if (entity == null) { org.ovirt.engine.core.dao.jpa.AbstractJpaDao.LOG.warn("Trying to remove non-existent {} with id = '{}'", entityType.getSimpleName(), id); } else { remove(entity); } }	public void remove(ID id) { final T entity = getEntityManager().find(entityType, id); if (entity == null) { org.ovirt.engine.core.dao.jpa.AbstractJpaDao.LOG.warn("Trying to remove non-existent {} with id = '{}'", entityType.getSimpleName(), id); } else { remove(entity); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.network.NetworkLabel lookupEntity(org.ovirt.engine.core.compat.Guid id) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkLabel> labels = getNetworkLabels(networkId); if (!(labels.isEmpty())) { return labels.get(0); } return null; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.network.pseudo.NetworkLabel lookupEntity(java.lang.String id) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { java.util.List<org.ovirt.engine.core.common.businessentities.network.pseudo.NetworkLabel> labels = getNetworkLabels(networkId); if (!(labels.isEmpty())) { return labels.get(0); } return null; }
private org.ovirt.engine.core.common.businessentities.VDS getServer(org.ovirt.engine.core.compat.Guid clusterId, java.lang.String hostnameOrIp) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> servers = getVdsDao().getAllWithIpAddress(hostnameOrIp); if ((servers.size()) > 0) { return getServerOfCluster(clusterId, servers); } servers = getVdsDao().getAllForHostname(hostnameOrIp); if ((servers.size()) > 0) { return getServerOfCluster(clusterId, servers); } return null; }	private org.ovirt.engine.core.common.businessentities.VDS getServer(org.ovirt.engine.core.compat.Guid clusterId, java.lang.String hostnameOrIp) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> servers = getVdsDao().getAllForHostname(hostnameOrIp); if ((servers.size()) > 0) { return getServerOfCluster(clusterId, servers); } java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ifaces = getInterfaceDao().getAllInterfacesWithIpAddress(clusterId, hostnameOrIp); if ((ifaces.size()) == 1) { for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface : ifaces) { org.ovirt.engine.core.common.businessentities.VDS server = getVdsDao().get(iface.getVdsId()); if (server.getvds_group_id().equals(clusterId)) { return server; } } } else if ((ifaces.size()) > 1) { throw new java.lang.RuntimeException(java.lang.String.format(("There are multiple servers in DB having same IP address %1$s! " + "Cannot arrive at correct server id for bricks related to this ip address in cluster %2$s"), hostnameOrIp, clusterId)); } return null; }
@org.junit.Test public void creationTimestampIsInThePast() { java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> vmPermissions = dao.getAllForEntity(org.ovirt.engine.core.dao.PermissionDAOTest.VM_ENTITY_ID); for (org.ovirt.engine.core.common.businessentities.Permissions perms : vmPermissions) { assertTrue(((perms.getCreationDate()) < (java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds(java.lang.System.currentTimeMillis())))); } }	@org.junit.Test public void creationTimestampIsInThePast() { java.util.List<org.ovirt.engine.core.common.businessentities.Permission> vmPermissions = dao.getAllForEntity(org.ovirt.engine.core.dao.PermissionDAOTest.VM_ENTITY_ID); for (org.ovirt.engine.core.common.businessentities.Permission perms : vmPermissions) { assertTrue(((perms.getCreationDate()) < (java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds(java.lang.System.currentTimeMillis())))); } }
private boolean areDisksLocked(org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue) { return vdcReturnValue.getCanDoActionMessages().contains(EngineMessages.ACTION_TYPE_FAILED_DISKS_LOCKED.name()); }	private boolean areDisksLocked(org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue) { return vdcReturnValue.getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED.name()); }
@org.junit.Test public void fence_retryWithSameProxyAndSucceed() { mockProxyHost(false); mockFenceFailure(true); org.ovirt.engine.core.common.businessentities.FenceAgent agent = createAgent(); org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue result = executor.fence(FenceActionType.Start, agent); assertTrue(result.getSucceeded()); verify(proxyLocator).findProxyHost(true, org.ovirt.engine.core.bll.FenceExecutorTest.PROXY_HOST_ID); }	@org.junit.Test public void successfulFenceWithSameProxyRetry() { mockProxyHost(false); mockFenceFailure(true); org.ovirt.engine.core.common.businessentities.FenceAgent agent = createAgent(); org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue result = executor.fence(FenceActionType.Start, agent); assertTrue(result.getSucceeded()); verify(proxyLocator).findProxyHost(true, org.ovirt.engine.core.bll.FenceExecutorTest.PROXY_HOST_ID); }
public static org.ovirt.engine.core.common.job.Job createJob(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.bll.CommandBase<?> command) { org.ovirt.engine.core.common.job.Job job = new org.ovirt.engine.core.common.job.Job(); job.setId(org.ovirt.engine.core.compat.Guid.newGuid()); job.setActionType(actionType); job.setDescription(org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveJobMessage(actionType, command.getJobMessageProperties())); job.setJobSubjectEntities(org.ovirt.engine.core.bll.job.ExecutionHandler.getSubjectEntities(command.getPermissionCheckSubjects())); job.setOwnerId(command.getUserId()); job.setEngineSessionId(command.getContext().getEngineContext().getSessionId()); job.setStatus(JobExecutionStatus.STARTED); job.setStartTime(new java.util.Date()); job.setCorrelationId(command.getCorrelationId()); return job; }	public static org.ovirt.engine.core.common.job.Job createJob(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.bll.CommandBase<?> command) { org.ovirt.engine.core.common.job.Job job = new org.ovirt.engine.core.common.job.Job(); job.setId(org.ovirt.engine.core.compat.Guid.newGuid()); job.setActionType(actionType); job.setDescription(org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveJobMessage(actionType, command.getJobMessageProperties())); job.setJobSubjectEntities(org.ovirt.engine.core.bll.job.ExecutionHandler.getSubjectEntities(command.getPermissionCheckSubjects())); job.setOwnerId(command.getUserId()); job.setEngineSessionSeqId(command.getSessionSeqId()); job.setStatus(JobExecutionStatus.STARTED); job.setStartTime(new java.util.Date()); job.setCorrelationId(command.getCorrelationId()); return job; }
@java.lang.Override public javax.ws.rs.core.Response remove() { org.ovirt.engine.core.common.businessentities.Provider provider = org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.getProvider(this, id); org.ovirt.engine.core.common.action.ProviderParameters parameters = new org.ovirt.engine.core.common.action.ProviderParameters(provider); parameters.setForce(isForce()); return performAction(ActionType.RemoveProvider, parameters); }	@java.lang.Override public javax.ws.rs.core.Response remove() { org.ovirt.engine.core.common.businessentities.Provider provider = org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.getProvider(this, id); org.ovirt.engine.core.common.action.ProviderParameters parameters = new org.ovirt.engine.core.common.action.ProviderParameters(provider); return performAction(ActionType.RemoveProvider, parameters); }
@java.lang.Override protected void executeCommand() { try { runAnsibleLvmCachePlaybook(); } catch (java.io.IOException | java.lang.InterruptedException e) { e.printStackTrace(); } }	@java.lang.Override protected void executeCommand() { try { runAnsibleCreateBrickPlaybook(); setSucceeded(true); } catch (java.io.IOException | java.lang.InterruptedException e) { setSucceeded(false); e.printStackTrace(); } }
@org.junit.Test public void testConstructor() { org.ovirt.engine.core.common.users.VdcUser user = mock(org.ovirt.engine.core.common.users.VdcUser.class); when(user.getUserId()).thenReturn(Guid.EVERYONE); org.ovirt.engine.core.common.action.VdcActionParametersBase paramterMock = mock(org.ovirt.engine.core.common.action.VdcActionParametersBase.class); when(paramterMock.getSessionId()).thenReturn(org.ovirt.engine.core.bll.CommandBaseTest.session); org.ovirt.engine.core.bll.session.SessionDataContainer.getInstance().setUser(org.ovirt.engine.core.bll.CommandBaseTest.session, user); org.ovirt.engine.core.bll.CommandBase<org.ovirt.engine.core.common.action.VdcActionParametersBase> command = new org.ovirt.engine.core.bll.CommandBaseTest.CommandBaseDummy(paramterMock); assertEquals("wrong user id on command", user.getUserId(), command.getUserId()); assertEquals("wrong user id on threadlocal", user, org.ovirt.engine.core.utils.ThreadLocalParamsContainer.getVdcUser()); }	@org.junit.Test public void testConstructor() { session = org.apache.commons.lang.RandomStringUtils.random(10); org.ovirt.engine.core.common.users.VdcUser user = mock(org.ovirt.engine.core.common.users.VdcUser.class); when(user.getUserId()).thenReturn(Guid.EVERYONE); org.ovirt.engine.core.common.action.VdcActionParametersBase paramterMock = mock(org.ovirt.engine.core.common.action.VdcActionParametersBase.class); when(paramterMock.getSessionId()).thenReturn(session); org.ovirt.engine.core.bll.session.SessionDataContainer.getInstance().setUser(session, user); org.ovirt.engine.core.bll.CommandBase<org.ovirt.engine.core.common.action.VdcActionParametersBase> command = new org.ovirt.engine.core.bll.CommandBaseTest.CommandBaseDummy(paramterMock); assertEquals("wrong user id on command", user.getUserId(), command.getUserId()); assertEquals("wrong user id on threadlocal", user, org.ovirt.engine.core.utils.ThreadLocalParamsContainer.getVdcUser()); }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__ACTION__REMOVE); addValidateMessage(EngineMessage.VAR__TYPE__HOST_DEVICES); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__REMOVE); addValidationMessage(EngineMessage.VAR__TYPE__HOST_DEVICES); }
private boolean addInterfaceToProcessedList(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface) { if (ifaceByNames.containsKey(iface.getName())) { addViolation(EngineMessages.NETWORK_INTERFACES_ALREADY_SPECIFIED, iface.getName()); return false; } ifaceByNames.put(iface.getName(), iface); return true; }	private boolean addInterfaceToProcessedList(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface) { if (ifaceByNames.containsKey(iface.getName())) { addViolation(EngineMessage.NETWORK_INTERFACES_ALREADY_SPECIFIED, iface.getName()); return false; } ifaceByNames.put(iface.getName(), iface); return true; }
@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); dao = prepareDAO(dbFacade.getBookmarkDao()); new_bookmark = new org.ovirt.engine.core.common.businessentities.Bookmarks(); java.util.Random r = new java.util.Random(java.lang.System.currentTimeMillis()); new_bookmark.setbookmark_name(("newbookmarkname" + ((r.nextInt()) % (org.ovirt.engine.core.dao.BookmarkDAOTest.BOOKMARK_MAX_RANDOM_NUMBER)))); new_bookmark.setbookmark_value("newbookmarkvalue"); existing_bookmark = dao.get(new org.ovirt.engine.core.compat.Guid("a4affabf-7b45-4a6c-b0a9-107d0bbe265e")); }	@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); dao = prepareDAO(dbFacade.getBookmarkDao()); new_bookmark = new org.ovirt.engine.core.common.businessentities.Bookmark(); java.util.Random r = new java.util.Random(java.lang.System.currentTimeMillis()); new_bookmark.setbookmark_name(("newbookmarkname" + ((r.nextInt()) % (org.ovirt.engine.core.dao.BookmarkDAOTest.BOOKMARK_MAX_RANDOM_NUMBER)))); new_bookmark.setbookmark_value("newbookmarkvalue"); existing_bookmark = dao.get(new org.ovirt.engine.core.compat.Guid("a4affabf-7b45-4a6c-b0a9-107d0bbe265e")); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { final java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> result = new java.util.HashMap(super.getSharedLocks()); result.put(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_BEING_UPDATED).with("vmName", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()))); return result; }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { final java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> result = new java.util.HashMap(super.getExclusiveLocks()); result.put(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getDeviceId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_DEVICE, new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_MEMORY_DEVICE_IS_BEING_HOT_UNPLUGGED).with("deviceId", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getDeviceId().toString()).with("vmId", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getVmId().toString()))); return result; }
@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult validate(org.ovirt.engine.core.common.businessentities.VDS vds, java.lang.StringBuilder sb) { if (!(areRequiredNetworksAvailable(vds))) { sb.append("is missing networks required by VM nics ").append(org.ovirt.engine.core.common.businessentities.Entities.interfacesByNetworkName(getVmNICs()).keySet()); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_VDS_VM_NETWORKS); } return null; }	@java.lang.Override public org.ovirt.engine.core.dal.VdcBllMessages validate(org.ovirt.engine.core.common.businessentities.VDS vds, java.lang.StringBuilder sb) { if (!(areRequiredNetworksAvailable(vds))) { sb.append("is missing networks required by VM nics ").append(org.ovirt.engine.core.common.businessentities.Entities.interfacesByNetworkName(getVmNICs()).keySet()); return org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_VDS_VM_NETWORKS; } return null; }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Allow guests to use host threads as virtual CPU cores. Enabling this may be useful for less CPU-intensive workloads.") java.lang.String clusterPopupCpuOvercommitExplanationLabel();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Allow guests to use host threads as virtual CPU cores, utilizing AMD Clustered MultiThreading or Intel" + (" Hyper-Threading technology on the virtualization host. Enabling this option may be useful for less" + " CPU-intensive workloads, or to run guests with CPU configurations that would otherwise be restricted.")) java.lang.String clusterPopupCpuThreadsInfo();
@java.lang.Override protected org.ovirt.engine.core.common.action.VdcActionParametersBase createAddInterfaceParameter(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface editedVnic) { return new org.ovirt.engine.core.common.action.AddVmInterfaceParameters(id, editedVnic); }	@java.lang.Override protected org.ovirt.engine.core.common.action.VdcActionParametersBase createAddInterfaceParameter(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface editedVnic) { editedVnic.setVmTemplateId(null); return new org.ovirt.engine.core.common.action.AddVmInterfaceParameters(id, editedVnic); }
public org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol determineConnectionProtocol(org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel item) { if ((item == null) || (item.isPool())) { return null; } org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol selectedProtocol = item.getSelectedProtocol(); if ((((item.getAdditionalConsoleModel()) != null) && (isRDPAvailable())) && (ConsoleProtocol.RDP.equals(selectedProtocol))) { return org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.RDP; } else if ((((item.getDefaultConsoleModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel) && (isSpiceAvailable())) && (ConsoleProtocol.SPICE.equals(selectedProtocol))) { return org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.SPICE; } else if ((item.getDefaultConsoleModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel) { return org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.VNC; } return null; }	@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol determineConnectionProtocol(org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel item) { if ((item == null) || (item.isPool())) { return null; } org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol selectedProtocol = item.getUserSelectedProtocol(); if ((((item.getAdditionalConsoleModel()) != null) && (isRDPAvailable())) && (ConsoleProtocol.RDP.equals(selectedProtocol))) { return org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.RDP; } else if ((((item.getDefaultConsoleModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel) && (isSpiceAvailable())) && (ConsoleProtocol.SPICE.equals(selectedProtocol))) { return org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.SPICE; } else if ((item.getDefaultConsoleModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel) { return org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.VNC; } return null; }
private static void compose(java.lang.StringBuilder builder, java.lang.String key, java.lang.String value) { final char DELIMITER = ','; builder.append(key).append('=').append(value).append(DELIMITER); }	private static void compose(java.lang.StringBuilder builder, java.lang.String key, java.lang.String value) { final char DELIMITER = ','; final char NAME_VALUE_SEPARATOR = '='; if ((builder.length()) > 0) { builder.append(DELIMITER); } builder.append(key).append(NAME_VALUE_SEPARATOR).append(value); }
private void completeNetworkNames(org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Network> networkMap, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachments) { networkIdNetworkNameCompleter.completeNetworkAttachments(attachments, networkMap); }	private void completeNetworkNames(java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachments, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Network> networkMap) { networkIdNetworkNameCompleter.completeNetworkAttachments(attachments, networkMap); }
public static org.ovirt.engine.core.bll.context.CommandContext createInternalJobContext(org.ovirt.engine.core.utils.lock.EngineLock lock) { return org.ovirt.engine.core.bll.job.ExecutionHandler.modifyContextForIntenrakJob(lock, new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext())); }	public static org.ovirt.engine.core.bll.context.CommandContext createInternalJobContext(org.ovirt.engine.core.utils.lock.EngineLock lock) { return org.ovirt.engine.core.bll.job.ExecutionHandler.modifyContextForIntenralJob(new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()), lock); }
@java.lang.Override protected org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity fetchTaskStatusDetails() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterVolumeRemoveBricksStatus, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeRemoveBricksVDSParameters(getUpServerId(clusterId), volume.getName(), org.ovirt.engine.core.bll.gluster.GetGlusterVolumeRemoveBricksStatusQuery.getParameters().getBricks(), volume.getReplicaCount())); org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity entity = org.ovirt.engine.core.bll.gluster.GetGlusterVolumeRemoveBricksStatusQuery.setStartTime(((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity) (returnValue.getReturnValue()))); updateHostIP(entity); return entity.sort(); }	@java.lang.Override protected org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity fetchTaskStatusDetails() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterVolumeRemoveBricksStatus, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeRemoveBricksVDSParameters(getUpServerId(clusterId), volume.getName(), org.ovirt.engine.core.bll.gluster.GetGlusterVolumeRemoveBricksStatusQuery.getParameters().getBricks(), volume.getReplicaCount())); return org.ovirt.engine.core.bll.gluster.GetGlusterVolumeRemoveBricksStatusQuery.updateStatusEntity(((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity) (returnValue.getReturnValue()))); }
public java.lang.String get(org.ovirt.engine.core.compat.Guid vdsId, java.lang.String pluginType) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", vdsId).addValue("plugin_type", pluginType); return getCallsHandler().executeRead("GetHostProviderBinding", org.ovirt.engine.core.dao.provider.HostProviderBindingDaoImpl.rowMapper, parameterSource); }	public java.lang.String get(org.ovirt.engine.core.compat.Guid vdsId, java.lang.String pluginType) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", vdsId).addValue("plugin_type", pluginType); return getCallsHandler().executeRead("GetHostProviderBinding", ( rs, nowNum) -> rs.getString(1), parameterSource); }
@java.lang.Override public void execute() { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.logger.fine(((this.getClass().getName()) + ": Executing search")); syncSearch(); gettimer().stop(); gettimer().setRefreshRate(gettimer().getRefreshRate()); gettimer().start(); }	@java.lang.Override public void execute() { doGridTimerExecute(); }
public void destroy() { if ((clickHandler) != null) { clickHandler.removeHandler(); clickHandler = null; } }	public void destroy() { call(widget.getElement(), org.ovirt.engine.ui.common.widget.tooltip.Tooltip.DESTROY); if ((clickHandler) != null) { clickHandler.removeHandler(); clickHandler = null; } }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder sb = new java.lang.StringBuilder(getClass().getName()); sb.append("={id='"); sb.append(getId()); sb.append("', hostId='"); sb.append(getHostId()); sb.append("', order='"); sb.append(getOrder()); sb.append("', type='"); sb.append(getType()); sb.append("', ip='"); sb.append(getIp()); sb.append("', port='"); sb.append(getPort()); sb.append("', user='"); sb.append(getUser()); sb.append("', password='"); sb.append((((getPassword()) == null) || ((getPassword().length()) < 1) ? "" : "***")); sb.append("', options='"); sb.append(getOptions()); sb.append("'}"); return sb.toString(); }	@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", getId()).append("hostId", getHostId()).append("order", getOrder()).append("type", getType()).append("ip", getIp()).append("port", getPort()).append("user", getUser()).appendFiltered("password", getPassword()).append("encryptOptions", getEncryptOptions()).append("options", getOptions()).build(); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if ((ev.matchesDefinition(EntityModel.entityChangedEventDefinition)) && (sender == (getPath()))) { getPathChangedEvent().raise(this, EventArgs.empty); } else if ((ev.matchesDefinition(EntityModel.entityChangedEventDefinition)) && (sender == (getOverride()))) { override_EntityChanged(args); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if ((ev.matchesDefinition(EntityModel.entityChangedEventDefinition)) && (sender == (getPath()))) { getPathChangedEvent().raise(this, EventArgs.EMPTY); } else if ((ev.matchesDefinition(EntityModel.entityChangedEventDefinition)) && (sender == (getOverride()))) { override_EntityChanged(args); } }
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVm()) == null) { return failCanDoAction(EngineMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()) == null) { return failCanDoAction(EngineMessages.VM_POOL_CANNOT_DETACH_VM_NOT_ATTACHED_TO_POOL); } if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVm().isRunningOrPaused()) || ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Unknown))) { return failCanDoAction(EngineMessages.VM_POOL_CANNOT_REMOVE_RUNNING_VM_FROM_POOL); } return true; }	@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVm()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()) == null) { return failCanDoAction(EngineMessage.VM_POOL_CANNOT_DETACH_VM_NOT_ATTACHED_TO_POOL); } if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVm().isRunningOrPaused()) || ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Unknown))) { return failCanDoAction(EngineMessage.VM_POOL_CANNOT_REMOVE_RUNNING_VM_FROM_POOL); } return true; }
public java.lang.String getEncodedCertificate() { return encodedCertificate; }	public java.lang.String getCertificate() { return certificate; }
@java.lang.Override protected void setActionMessageParameters() { addValidateMessage(EngineMessage.VAR__TYPE__STORAGE__DOMAIN); addValidateMessage(EngineMessage.VAR__ACTION__ACTIVATE); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__TYPE__STORAGE__DOMAIN); addValidationMessage(EngineMessage.VAR__ACTION__ACTIVATE); }
private void createSnapshot() { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = org.ovirt.engine.core.bll.CloneVmCommand.getBackend().runInternalAction(VdcActionType.CreateAllSnapshotsFromVm, buildCreateSnapshotParameters(), createContext(StepEnum.CREATING_SNAPSHOTS)); boolean callNextExplicitly = actionPerformed(vdcReturnValue, VdcActionType.CreateAllSnapshotsFromVm, buildCreateSnapshotParametersForEndAction()); if (callNextExplicitly && (org.ovirt.engine.core.bll.CloneVmCommand.getSucceeded())) { cloneVmFromSnapshot(); } }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> locks = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.DiskImage image : org.ovirt.engine.core.bll.CloneVmCommand.getImagesToCheckDestinationStorageDomains()) { locks.put(image.getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, org.ovirt.engine.core.bll.CloneVmCommand.getDiskSharedLockMessage())); } locks.put(getSourceVmFromDb().getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_BEING_CLONED)); return locks; }
public org.ovirt.engine.core.bll.ValidationResult networkQosExistsOrNull() { return ((vnicProfile.getNetworkQosId()) == null) || ((getDbFacade().getNetworkQosDao().get(vnicProfile.getNetworkQosId())) != null) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_NOT_EXISTS); }	public org.ovirt.engine.core.bll.ValidationResult networkQosExistsOrNull() { return ((vnicProfile.getNetworkQosId()) == null) || ((getDbFacade().getQosDao().get(vnicProfile.getNetworkQosId())) != null) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_NOT_EXISTS); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (isMonitoringNeeded(vdsManager.getCopyVds().getStatus())) { org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher fetcher = new org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher(vdsManager); long fetchTime = java.lang.System.nanoTime(); if (fetcher.fetch()) { getVmsMonitoring().perform(fetcher.getChangedVms(), fetchTime, vdsManager, true); processDevices(fetcher.getVdsmVms().stream(), fetchTime); } else { org.ovirt.engine.core.vdsbroker.monitoring.PollVmStatsRefresher.log.info("Failed to fetch vms info for host '{}' - skipping VMs monitoring.", vdsManager.getVdsName()); } } }	@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (isMonitoringNeeded(vdsManager.getStatus())) { org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher fetcher = new org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher(vdsManager); long fetchTime = java.lang.System.nanoTime(); if (fetcher.fetch()) { getVmsMonitoring().perform(fetcher.getChangedVms(), fetchTime, vdsManager, true); processDevices(fetcher.getVdsmVms().stream(), fetchTime); } else { org.ovirt.engine.core.vdsbroker.monitoring.PollVmStatsRefresher.log.info("Failed to fetch vms info for host '{}' - skipping VMs monitoring.", vdsManager.getVdsName()); } } }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("You must approve the action by clicking on this checkbox.") java.lang.String youMustApproveTheActionByClickingOnThisCheckboxInvalidReason();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("You must approve the action by clicking on this checkbox.") java.lang.String youMustApproveTheActionByClickingOnThisCheckboxInvalidReason();
public boolean getVdsGroupSupportsVirtSerice() { return this.vdsGroupVirtSerice; }	public java.lang.Boolean getVdsGroupSupportsVirtService() { return this.vdsGroupVirtService; }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Tuned Profile") java.lang.String tunedProfileLabel();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Gluster Tuned Profile") java.lang.String glusterTunedProfileLabel();
public void setBytesWrite(java.lang.Integer bytesWrite) { this.bytesWrite = bytesWrite; }	public void setBytesWritten(int bytesWritten) { this.bytesWritten = bytesWritten; }
@org.junit.Test public void someAddedStorageConnectionsAreNotAnIscsi() { org.ovirt.engine.core.common.businessentities.IscsiBond iscsiBond = createIscsiBond("First", org.ovirt.engine.core.compat.Guid.newGuid()); java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> conns = new java.util.ArrayList<>(); conns.add(createStorageConnection()); doReturn(conns).when(storageServerConnectionDao).getConnectableStorageConnectionsByStorageType(iscsiBond.getStoragePoolId(), StorageType.ISCSI); iscsiBond.getStorageConnectionIds().add(conns.get(0).geIid()); iscsiBond.getStorageConnectionIds().add(org.ovirt.engine.core.compat.Guid.newGuid().toString()); org.ovirt.engine.core.bll.ValidationResult res = validator.validateAddedStorageConnections(iscsiBond); assertEquals(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTIONS_CANNOT_BE_ADDED_TO_ISCSI_BOND, res.getMessage()); assertEquals(1, res.getVariableReplacements().size()); assertEquals(("$connectionIds " + (iscsiBond.getStorageConnectionIds().get(1).toString())), res.getVariableReplacements().get(0)); }	@org.junit.Test public void someAddedStorageConnectionsAreNotAnIscsi() { org.ovirt.engine.core.common.businessentities.IscsiBond iscsiBond = createIscsiBond("First", org.ovirt.engine.core.compat.Guid.newGuid()); java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> conns = new java.util.ArrayList<>(); conns.add(createStorageConnection()); doReturn(conns).when(storageServerConnectionDao).getConnectableStorageConnectionsByStorageType(iscsiBond.getStoragePoolId(), StorageType.ISCSI); iscsiBond.getStorageConnectionIds().add(conns.get(0).getId()); iscsiBond.getStorageConnectionIds().add(org.ovirt.engine.core.compat.Guid.newGuid().toString()); org.ovirt.engine.core.bll.ValidationResult res = validator.validateAddedStorageConnections(iscsiBond); assertEquals(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTIONS_CANNOT_BE_ADDED_TO_ISCSI_BOND, res.getMessage()); assertEquals(1, res.getVariableReplacements().size()); assertEquals(("$connectionIds " + (iscsiBond.getStorageConnectionIds().get(1).toString())), res.getVariableReplacements().get(0)); }
@org.junit.Before public void setUpContainer() { when(engineSessionDao.remove(any(java.lang.Long.class))).thenReturn(1); when(ssoSessionValidator.isSessionValid(anyString())).thenReturn(true); when(ssoSessionUtils.isSessionInUse(anyString())).thenReturn(false); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); container.setSSOSessionUtils(ssoSessionUtils); container.setSSOSessionValidaor(ssoSessionValidator); container.setUser(org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID, user); }	@org.junit.Before public void setUpContainer() { when(engineSessionDao.remove(any(java.lang.Long.class))).thenReturn(1); when(ssoSessionValidator.isSessionValid(anyString())).thenReturn(true); when(ssoSessionUtils.isSessionInUse(anyLong())).thenReturn(false); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); container.setUser(org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID, user); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.DbUser.class, to = org.ovirt.engine.api.model.User.class) public static org.ovirt.engine.api.model.User map(org.ovirt.engine.core.common.businessentities.DbUser entity, org.ovirt.engine.api.model.User template) { org.ovirt.engine.api.model.User model = (template != null) ? template : new org.ovirt.engine.api.model.User(); model.setName(entity.getname()); model.setUserName(entity.getusername()); model.setId(entity.getuser_id().toString()); model.setLastName(entity.getsurname()); model.setEmail(entity.getemail()); model.setDepartment(entity.getdepartment()); if ((entity.getgroups()) != null) { model.setGroups(new org.ovirt.engine.api.model.Groups()); if ((entity.getgroups().trim().length()) > 0) { for (java.lang.String name : entity.getgroups().split(",")) { org.ovirt.engine.api.model.Group group = new org.ovirt.engine.api.model.Group(); group.setName(name); model.getGroups().getGroups().add(group); } } } if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(entity.getdomain()))) { org.ovirt.engine.api.model.Domain dom = new org.ovirt.engine.api.model.Domain(); dom.setName(entity.getdomain()); dom.setId(new org.ovirt.engine.core.compat.NGuid(entity.getdomain().getBytes(), true).toString()); model.setDomain(dom); } return model; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.DbUser.class, to = org.ovirt.engine.api.model.User.class) public static org.ovirt.engine.api.model.User map(org.ovirt.engine.core.common.businessentities.DbUser entity, org.ovirt.engine.api.model.User template) { org.ovirt.engine.api.model.User model = (template != null) ? template : new org.ovirt.engine.api.model.User(); model.setName(entity.getname()); model.setUserName(entity.getusername()); model.setId(entity.getuser_id().toString()); model.setLastName(entity.getsurname()); model.setEmail(entity.getemail()); model.setDepartment(entity.getdepartment()); if (((entity.getgroups()) != null) && ((entity.getgroups().trim().length()) > 0)) { model.setGroups(new org.ovirt.engine.api.model.Groups()); for (java.lang.String name : entity.getgroups().split(",")) { org.ovirt.engine.api.model.Group group = new org.ovirt.engine.api.model.Group(); group.setName(name); model.getGroups().getGroups().add(group); } } if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(entity.getdomain()))) { org.ovirt.engine.api.model.Domain dom = new org.ovirt.engine.api.model.Domain(); dom.setName(entity.getdomain()); dom.setId(new org.ovirt.engine.core.compat.NGuid(entity.getdomain().getBytes(), true).toString()); model.setDomain(dom); } return model; }
@java.lang.Override public org.ovirt.engine.core.aaa.DirectoryGroup findGroupById(java.lang.String id) { org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapReturnValueBase ldapResult = broker.runAdAction(AdActionType.GetAdGroupByGroupId, new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapSearchByIdParameters(getName(), new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.IdType(id))); org.ovirt.engine.core.common.businessentities.LdapGroup ldapGroup = ((org.ovirt.engine.core.common.businessentities.LdapGroup) (ldapResult.getReturnValue())); return mapGroup(ldapGroup); }	@java.lang.Override public org.ovirt.engine.core.aaa.DirectoryGroup findGroupById(java.lang.String id) { org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapReturnValueBase ldapResult = broker.runAdAction(AdActionType.GetAdGroupByGroupId, new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapSearchByIdParameters(getName(), org.ovirt.engine.core.compat.Guid.createGuidFromString(id))); org.ovirt.engine.core.common.businessentities.LdapGroup ldapGroup = ((org.ovirt.engine.core.common.businessentities.LdapGroup) (ldapResult.getReturnValue())); return mapGroup(ldapGroup); }
@org.junit.Test public void testGetTreeForEntityWithRoleTypeFilteredWithNoPermissions() { java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> result = dao.getTreeForEntity(org.ovirt.engine.core.dao.PermissionDAOTest.STORAGE_ENTITY_ID, VdcObjectType.Storage, org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID, org.ovirt.engine.core.dao.UNPRIVILEGED_USER_SESSION_ID, true); org.ovirt.engine.core.dao.PermissionDAOTest.assertInvalidGetPermissionList(result); }	@org.junit.Test public void testGetTreeForEntityWithRoleTypeFilteredWithNoPermissions() { java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> result = dao.getTreeForEntity(org.ovirt.engine.core.dao.PermissionDAOTest.STORAGE_ENTITY_ID, VdcObjectType.Storage, org.ovirt.engine.core.dao.UNPRIVILEGED_USER_SESSION_ID, true); org.ovirt.engine.core.dao.PermissionDAOTest.assertInvalidGetPermissionList(result); }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeGeoRepSessionVDSParameters parameter = org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeGeoRepSessionStatusVDSCommand.getParameters(); result = org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeGeoRepSessionStatusVDSCommand.getBroker().glusterVolumeGeoRepStatusDetail(parameter.getVolumeName(), parameter.getSlaveHost(), parameter.getSlaveVolume()); org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeGeoRepSessionStatusVDSCommand.proceedProxyReturnValue(); if (org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeGeoRepSessionStatusVDSCommand.getVDSReturnValue().getSucceeded()) { setReturnValue(result.getGeoRepDetails()); } }	@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeGeoRepSessionVDSParameters parameter = org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeGeoRepSessionStatusVDSCommand.getParameters(); result = org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeGeoRepSessionStatusVDSCommand.getBroker().glusterVolumeGeoRepSessionStatus(parameter.getVolumeName(), parameter.getSlaveHost(), parameter.getSlaveVolume()); org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeGeoRepSessionStatusVDSCommand.proceedProxyReturnValue(); if (org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeGeoRepSessionStatusVDSCommand.getVDSReturnValue().getSucceeded()) { setReturnValue(result.getGeoRepDetails()); } }
public void setGuestOsInfo(org.ovirt.engine.core.common.businessentities.VmGuestOsInfoDynamic guestOsInfo) { this.guestOsInfo = guestOsInfo; }	public void setGuestOsType(org.ovirt.engine.core.common.businessentities.OsType guestOsType) { this.guestOsType = guestOsType; }
private void UpdateVmNetworks() { if (!(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getVdsGroupId().equals(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getvds_group_id()))) { java.util.List<org.ovirt.engine.core.common.businessentities.Network> networks = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDao().getAllForCluster(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getvds_group_id()); java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> interfaces = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao().getAllForVm(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getId()); for (final org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : interfaces) { org.ovirt.engine.core.common.businessentities.Network net = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(networks, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.Network>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.Network n) { return n.getname().equals(iface.getNetworkName()); } }); if (net == null) { iface.setNetworkName(null); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao().update(iface); } } } }	private void UpdateVmNetworks() { if (!(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getVdsGroupId().equals(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getvds_group_id()))) { java.util.List<org.ovirt.engine.core.common.businessentities.Network> networks = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDao().getAllForCluster(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getvds_group_id()); java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> interfaces = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao().getAllForVm(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getId()); for (final org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : interfaces) { org.ovirt.engine.core.common.businessentities.Network net = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(networks, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.Network>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.Network n) { return n.getName().equals(iface.getNetworkName()); } }); if (net == null) { iface.setNetworkName(null); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao().update(iface); } } } }
@java.lang.Override public void template_SelectedItemChanged() { super.template_SelectedItemChanged(); org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel().getTemplate().getSelectedItem(); if (template == null) { return; } setupWindowModelFrom(template); updateOSValues(); updateHostPinning(template.getMigrationSupport()); doChangeDefautlHost(template.getDedicatedVmForVds()); }	@java.lang.Override public void template_SelectedItemChanged() { super.template_SelectedItemChanged(); org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel().getTemplate().getSelectedItem(); if (template == null) { return; } setupWindowModelFrom(template); updateHostPinning(template.getMigrationSupport()); doChangeDefautlHost(template.getDedicatedVmForVds()); }
@org.junit.Test public void canDoChangeComment() { sd.setComment(org.apache.commons.lang.StringUtils.reverse(sd.getComment())); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(cmd); }	@org.junit.Test public void validateChangeComment() { sd.setComment(org.apache.commons.lang.StringUtils.reverse(sd.getComment())); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(cmd); }
public static void assertNoRedundantKeys(java.io.File file, java.lang.Class<? extends java.lang.Enum>... template) throws java.io.IOException { org.ovirt.engine.core.utils.EnumTranslationProperties props = new org.ovirt.engine.core.utils.EnumTranslationProperties(template); try (java.io.InputStream is = new java.io.FileInputStream(file)) { props.load(is); } catch (org.ovirt.engine.core.utils.MissingEnumTranslationException exception) { fail(((("Check for redundant keys in " + (file.getAbsolutePath())) + " failed: ") + (exception.getMessage()))); } }	public static void assertNoRedundantKeys(java.io.File file, java.lang.Class<? extends java.lang.Enum<?>>... template) throws java.io.IOException { org.ovirt.engine.core.utils.EnumTranslationProperties props = new org.ovirt.engine.core.utils.EnumTranslationProperties(template); try (java.io.InputStream is = new java.io.FileInputStream(file)) { props.load(is); } catch (org.ovirt.engine.core.utils.MissingEnumTranslationException exception) { fail(((("Check for redundant keys in " + (file.getAbsolutePath())) + " failed: ") + (exception.getMessage()))); } }
public static org.ovirt.engine.api.model.RSDL loadRsdl(org.ovirt.engine.core.common.mode.ApplicationMode applicationMode) throws java.io.IOException { java.lang.String fileName = (applicationMode == (org.ovirt.engine.core.common.mode.ApplicationMode.AllModes)) ? RsdlIOManager.RSDL_FILE_NAME : RsdlIOManager.GLUSTER_RSDL_FILE_NAME; java.io.InputStream rsdlAsStrem = org.ovirt.engine.api.rsdl.RsdlIOManager.loadAsStream(fileName); return javax.xml.bind.JAXB.unmarshal(rsdlAsStrem, org.ovirt.engine.api.model.RSDL.class); }	public static org.ovirt.engine.api.model.RSDL loadRsdl(org.ovirt.engine.core.common.mode.ApplicationMode applicationMode) throws java.io.IOException { java.lang.String fileName = (applicationMode == (org.ovirt.engine.core.common.mode.ApplicationMode.AllModes)) ? "/" + (RsdlIOManager.RSDL_RESOURCE_NAME) : "/" + (RsdlIOManager.GLUSTER_RSDL_RESOURCE_NAME); java.io.InputStream rsdlAsStrem = null; try { rsdlAsStrem = org.ovirt.engine.api.rsdl.RsdlIOManager.loadAsStream(fileName); return javax.xml.bind.JAXB.unmarshal(rsdlAsStrem, org.ovirt.engine.api.model.RSDL.class); } finally { if (rsdlAsStrem != null) { rsdlAsStrem.close(); } } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> getVolumesByOptionAndVolumeType(org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status, java.lang.String optionKey, java.lang.String optionValue, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType volumeType) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = getCallsHandler().executeReadList("GetGlusterVolumesByOptionAndVolumeType", org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoDbFacadeImpl.volumeRowMapper, getCustomMapSqlParameterSource().addValue("cluster_id", clusterId).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(status)).addValue("option_key", optionKey).addValue("option_val", optionValue).addValue("vol_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volumeType))); fetchRelatedEntities(volumes); return volumes; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> getVolumesByStatusTypesAndOption(org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status, java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType> volumeTypes, java.lang.String optionKey, java.lang.String optionValue) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = getCallsHandler().executeReadList("GetGlusterVolumesByStatusTypesAndOption", org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoDbFacadeImpl.volumeRowMapper, getCustomMapSqlParameterSource().addValue("cluster_id", clusterId).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(status)).addValue("vol_types", org.apache.commons.lang.StringUtils.join(volumeTypes, ',')).addValue("option_key", optionKey).addValue("option_val", optionValue)); fetchRelatedEntities(volumes); return volumes; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; if ((getClass()) != (obj.getClass())) return false; org.ovirt.engine.core.common.scheduling.ClusterPolicy other = ((org.ovirt.engine.core.common.scheduling.ClusterPolicy) (obj)); if ((selector) == null) { if ((other.selector) != null) return false; } else if (!(selector.equals(other.selector))) return false; if ((balance) == null) { if ((other.balance) != null) return false; } else if (!(balance.equals(other.balance))) return false; if ((defaultPolicy) != (other.defaultPolicy)) return false; if ((description) == null) { if ((other.description) != null) return false; } else if (!(description.equals(other.description))) return false; if ((filterPositionMap) == null) { if ((other.filterPositionMap) != null) return false; } else if (!(filterPositionMap.equals(other.filterPositionMap))) return false; if ((filters) == null) { if ((other.filters) != null) return false; } else if (!(filters.equals(other.filters))) return false; if ((functions) == null) { if ((other.functions) != null) return false; } else if (!(functions.equals(other.functions))) return false; if ((id) == null) { if ((other.id) != null) return false; } else if (!(id.equals(other.id))) return false; if ((locked) != (other.locked)) return false; if ((name) == null) { if ((other.name) != null) return false; } else if (!(name.equals(other.name))) return false; if ((parameterMap) == null) { if ((other.parameterMap) != null) return false; } else if (!(parameterMap.equals(other.parameterMap))) return false; return true; }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.scheduling.ClusterPolicy)) { return false; } org.ovirt.engine.core.common.scheduling.ClusterPolicy other = ((org.ovirt.engine.core.common.scheduling.ClusterPolicy) (obj)); return ((((((((((java.util.Objects.equals(balance, other.balance)) && ((defaultPolicy) == (other.defaultPolicy))) && (java.util.Objects.equals(description, other.description))) && (java.util.Objects.equals(filterPositionMap, other.filterPositionMap))) && (java.util.Objects.equals(filters, other.filters))) && (java.util.Objects.equals(functions, other.functions))) && (java.util.Objects.equals(selector, other.selector))) && (java.util.Objects.equals(id, other.id))) && ((locked) == (other.locked))) && (java.util.Objects.equals(name, other.name))) && (java.util.Objects.equals(parameterMap, other.parameterMap)); }
public void ensureColumnPresent(com.google.gwt.user.cellview.client.Column<T, ?> column, java.lang.String headerText, boolean present, java.lang.String width) { ensureColumnPresent(column, new org.ovirt.engine.ui.common.widget.table.header.SafeHtmlHeader(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(headerText)), present, null); }	public void ensureColumnPresent(com.google.gwt.user.cellview.client.Column<T, ?> column, java.lang.String headerText, boolean present, java.lang.String width) { ensureColumnPresent(column, com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(headerText), present, width); }
public void setStateless(boolean value) { vmStatic.setIsStateless(value); }	public void setStateless(boolean value) { vmStatic.setStateless(value); }
private void testValidateQosNotPartiallyConfigured(boolean networkAttachment1HasQos, boolean networkAttachment2HasQos, org.hamcrest.Matcher<org.ovirt.engine.core.bll.ValidationResult> matcher) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface baseNic = createNic("baseNic"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic1 = createVlanNic(baseNic, "vlanNic1", 10); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic2 = createVlanNic(baseNic, "vlanNic2", 11); org.ovirt.engine.core.common.businessentities.network.Network network1 = createNetworkWithName("network1"); org.ovirt.engine.core.common.businessentities.network.Network network2 = createNetworkWithName("network2"); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment1 = createNetworkAttachment(network1, baseNic); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment2 = createNetworkAttachment(network2, baseNic); org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = createHostNetworkQos(10, 10, 10); if (networkAttachment1HasQos) { networkAttachment1.setHostNetworkQos(qos); } if (networkAttachment2HasQos) { networkAttachment2.setHostNetworkQos(qos); } java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> networkAttachments = java.util.Arrays.asList(networkAttachment1, networkAttachment2); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().addNetworks(network1, network2).addExistingInterfaces(baseNic, vlanNic1, vlanNic2).build(); assertThat(validator.validateQosNotPartiallyConfigured(networkAttachments), matcher); }	private void testValidateQosNotPartiallyConfigured(boolean networkAttachment1HasQos, boolean networkAttachment2HasQos, org.hamcrest.Matcher<org.ovirt.engine.core.bll.ValidationResult> matcher) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface baseNic = createNic("baseNic"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic1 = createVlanNic(baseNic, "vlanNic1", 10); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic2 = createVlanNic(baseNic, "vlanNic2", 11); org.ovirt.engine.core.common.businessentities.network.Network network1 = createNetworkWithName("network1"); org.ovirt.engine.core.common.businessentities.network.Network network2 = createNetworkWithName("network2"); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment1 = createNetworkAttachment(network1, baseNic); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment2 = createNetworkAttachment(network2, baseNic); org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos qos = createHostNetworkQos(10, 10, 10); if (networkAttachment1HasQos) { networkAttachment1.setHostNetworkQos(qos); } if (networkAttachment2HasQos) { networkAttachment2.setHostNetworkQos(qos); } java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> networkAttachments = java.util.Arrays.asList(networkAttachment1, networkAttachment2); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().addNetworks(network1, network2).addExistingInterfaces(baseNic, vlanNic1, vlanNic2).build(); assertThat(validator.validateQosNotPartiallyConfigured(networkAttachments), matcher); }
protected byte[] runHttpMethod(org.ovirt.engine.core.bll.provider.BaseProviderProxy.HttpMethodType httpMethod, java.lang.String contentType, java.lang.String body, java.net.HttpURLConnection connection) { byte[] result = null; try { connection.setRequestProperty("Content-Type", contentType); connection.setDoInput(true); connection.setDoOutput((httpMethod != (org.ovirt.engine.core.bll.provider.BaseProviderProxy.HttpMethodType.GET))); connection.setRequestMethod(httpMethod.toString()); if (body != null) { byte[] bytes = body.getBytes(java.nio.charset.StandardCharsets.UTF_8); connection.setRequestProperty(java.lang.String.valueOf(bytes.length), "Content-Length"); try (java.io.OutputStream outputStream = connection.getOutputStream()) { outputStream.write(bytes); } } result = getResponse(connection); } catch (javax.net.ssl.SSLException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_SSL_FAILURE, e.getMessage()); } catch (java.io.IOException e) { org.ovirt.engine.core.bll.provider.BaseProviderProxy.handleException(e); } finally { if (connection != null) { connection.disconnect(); } } return result; }	protected byte[] runHttpMethod(org.ovirt.engine.core.bll.provider.BaseProviderProxy.HttpMethodType httpMethod, java.lang.String contentType, java.lang.String body, java.net.HttpURLConnection connection) { byte[] result = null; try { connection.setRequestProperty("Content-Type", contentType); connection.setDoInput(true); connection.setDoOutput((httpMethod != (org.ovirt.engine.core.bll.provider.BaseProviderProxy.HttpMethodType.GET))); connection.setRequestMethod(httpMethod.toString()); if (body != null) { byte[] bytes = body.getBytes(java.nio.charset.StandardCharsets.UTF_8); connection.setRequestProperty("Content-Length", java.lang.String.valueOf(bytes.length)); try (java.io.OutputStream outputStream = connection.getOutputStream()) { outputStream.write(bytes); } } result = getResponse(connection); } catch (javax.net.ssl.SSLException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_SSL_FAILURE, e.getMessage()); } catch (java.io.IOException e) { org.ovirt.engine.core.bll.provider.BaseProviderProxy.handleException(e); } finally { if (connection != null) { connection.disconnect(); } } return result; }
protected static org.ovirt.engine.core.compat.Guid getGuidDefaultNull(java.sql.ResultSet resultSet, java.lang.String columnName) throws java.sql.SQLException { return org.ovirt.engine.core.dao.BaseDAODbFacade.getGuid(resultSet, columnName, null); }	protected static org.ovirt.engine.core.compat.Guid getGuid(java.sql.ResultSet resultSet, java.lang.String columnName) throws java.sql.SQLException { return org.ovirt.engine.core.dao.BaseDAODbFacade.getGuid(resultSet, columnName, null); }
@java.lang.Override protected void copyVmDevices() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmDevice>(vmFromConfiguration.getVmUnamagedDeviceList()); devices.addAll(vmFromConfiguration.getManagedVmDeviceMap().values()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.copyVmDevices(getVmIdFromSnapshot(), org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmId(), org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVm(), org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVm().getStaticData(), true, devices, srcDiskToTargetDiskMapping, _vmInterfaces, org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters().isSoundDeviceEnabled(), org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters().isConsoleEnabled()); }	@java.lang.Override protected void copyVmDevices() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmDevice>(vmFromConfiguration.getVmUnamagedDeviceList()); devices.addAll(vmFromConfiguration.getManagedVmDeviceMap().values()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.copyVmDevices(getVmIdFromSnapshot(), org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmId(), org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVm(), org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVm().getStaticData(), true, devices, org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getSrcDiskIdToTargetDiskIdMapping(), _vmInterfaces, org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters().isSoundDeviceEnabled(), org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters().isConsoleEnabled()); }
@org.junit.Test public void vmNetworkWithVlanNetworkDenied() { org.ovirt.engine.core.common.businessentities.network.Network net1 = createNetwork("net1"); org.ovirt.engine.core.common.businessentities.network.Network net2 = createNetwork("net2"); net2.setVlanId(100); mockExistingNetworks(net1, net2); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic("nic0", null); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic = createVlan(nic.getName(), net2.getVlanId(), net2.getName()); mockExistingIfaces(nic, vlanNic); nic.setNetworkName(net1.getName()); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(vlanNic, nic)); validateAndExpectViolation(helper, EngineMessages.NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK, nic.getName()); }	@org.junit.Test public void vmNetworkWithVlanNetworkDenied() { org.ovirt.engine.core.common.businessentities.network.Network net1 = createNetwork("net1"); org.ovirt.engine.core.common.businessentities.network.Network net2 = createNetwork("net2"); net2.setVlanId(100); mockExistingNetworks(net1, net2); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic("nic0", null); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic = createVlan(nic.getName(), net2.getVlanId(), net2.getName()); mockExistingIfaces(nic, vlanNic); nic.setNetworkName(net1.getName()); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(vlanNic, nic)); validateAndExpectViolation(helper, EngineMessage.NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK, nic.getName()); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("System Permission") java.lang.String systemPermissionTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("System Permission") java.lang.String systemPermissionTitle();
@java.lang.Override public javax.ws.rs.core.Response performRemove(java.lang.String id) { org.ovirt.engine.core.common.businessentities.network.Network entity = lookupNetwork(asGuidOr404(id)); if (entity == null) { notFound(); return null; } return performAction(removeAction, new org.ovirt.engine.core.common.action.RemoveNetworkParameters(entity.getId())); }	@java.lang.Override public javax.ws.rs.core.Response performRemove(java.lang.String id) { org.ovirt.engine.core.common.businessentities.network.Network entity = lookupNetwork(asGuidOr404(id)); if (entity == null) { notFound(); return null; } return performAction(removeAction, getRemoveParameters(entity)); }
public static org.ovirt.engine.core.common.utils.CpuVendor fromFlags(java.lang.String flags) { for (org.ovirt.engine.core.common.utils.CpuVendor vendor : org.ovirt.engine.core.common.utils.CpuVendor.values()) { if (flags.contains(vendor.flag)) { return vendor; } } throw new java.lang.RuntimeException(("Unknow processor vendor. Flags: " + flags)); }	public static org.ovirt.engine.core.common.utils.CpuVendor fromFlags(java.util.Set<java.lang.String> flags) { for (org.ovirt.engine.core.common.utils.CpuVendor vendor : org.ovirt.engine.core.common.utils.CpuVendor.values()) { if (flags.contains(vendor.flag)) { return vendor; } } return null; }
public org.ovirt.engine.core.bll.ValidationResult isMacAssignableValidator() { java.lang.Boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); boolean macIsAlreadyUsed = macPool.isMacInUse(macAddress); boolean illegalDuplicateMacUsage = macIsAlreadyUsed && (!allowDupMacs); return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.NETWORK_MAC_ADDRESS_IN_USE).when(illegalDuplicateMacUsage); }	public org.ovirt.engine.core.bll.ValidationResult isMacAssignableValidator() { java.lang.Boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); boolean macIsAlreadyUsed = macPool.isMacInUse(macAddress); boolean illegalDuplicateMacUsage = macIsAlreadyUsed && (!allowDupMacs); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.NETWORK_MAC_ADDRESS_IN_USE).when(illegalDuplicateMacUsage); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.userportal.IUserPortalListModel model) { this.model = model; editCheckBoxes(model, ctrlAltDel, enableUsbAutoshare, openInFullScreen, useLocalDrives, wanEffectsAll, wanEffectsAnimation, wanEffectsWallpaper, wanEffectsFontSmooth, wanEnabled); }	@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.userportal.IUserPortalListModel model) { this.model = model; editCheckBoxes(model, ctrlAltDel, enableUsbAutoshare, openInFullScreen, useLocalDrives, wanEnabled); }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel getSysprepScript() { return privateSysprepScript; }	public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> getSysprepScript() { return privateSysprepScript; }
public java.util.Map<java.lang.String, java.lang.Object> glusterVolumeGeoRepSessionStart(java.lang.String volumeName, java.lang.String remoteHost, java.lang.String remoteVolumeName, java.lang.String remoteUserName, java.lang.Boolean force);	public java.util.Map<java.lang.String, java.lang.Object> glusterVolumeGeoRepSessionStart(java.lang.String volumeName, java.lang.String remoteHost, java.lang.String remoteVolumeName, java.lang.String userName, java.lang.Boolean force);
private void newTemplate() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (getSelectedItem())); if (vm == null) { return; } if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewTemplateVmModelBehavior(vm)); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newTemplateTitle()); model.setHashName("new_template"); model.setHelpTag(model.getHashName(), "VMs > Make Template"); model.setIsNew(true); model.getVmType().setSelectedItem(vm.getVmType()); model.initialize(getSystemTreeSelectedItem()); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnNewTemplate", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); model.getIsHighlyAvailable().setEntity(vm.getStaticData().isAutoStartup()); }	private void newTemplate() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (getSelectedItem())); if ((vm == null) || ((getWindow()) != null)) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewTemplateVmModelBehavior(vm)); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newTemplateTitle()); model.setHelpTag(HelpTag.new_template); model.setHashName("new_template"); model.setIsNew(true); model.getVmType().setSelectedItem(vm.getVmType()); model.initialize(getSystemTreeSelectedItem()); model.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("OnNewTemplate", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true)); model.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()).setIsCancel(true)); model.getIsHighlyAvailable().setEntity(vm.getStaticData().isAutoStartup()); }
public java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> getImages() { return images; }	public java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> getDisks() { return disks; }
public java.lang.Boolean getSpiceFileXferEnabled() { return spiceFileXferEnabled; }	public java.lang.Boolean getSpiceFileTransferEnabled() { return spiceFileTransferEnabled; }
public java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSetupNetworksLock(org.ovirt.engine.core.compat.Guid hostId) { return java.util.Collections.singletonMap(((LockingGroup.HOST_NETWORK.name()) + (hostId.toString())), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.HOST_NETWORK, EngineMessage.ACTION_TYPE_FAILED_SETUP_NETWORKS_OR_REFRESH_OR_MIGRATION_IN_PROGRESS)); }	public java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSetupNetworksLock(org.ovirt.engine.core.compat.Guid hostId) { return java.util.Collections.singletonMap(((LockingGroup.HOST_NETWORK.name()) + (hostId.toString())), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.HOST_NETWORK, EngineMessage.ACTION_TYPE_FAILED_SETUP_NETWORKS_OR_REFRESH_IN_PROGRESS)); }
private boolean isProxyHostNeeded() { return ProviderType.ESXI.equals(type); }	public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> getAuthUrl() { return authUrl; }
public org.ovirt.engine.core.bll.ValidationResult validateCinderDiskLimits() { return validate(new java.util.concurrent.Callable<org.ovirt.engine.core.bll.ValidationResult>() { @java.lang.Override public org.ovirt.engine.core.bll.ValidationResult call() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageMap = getRelatedCinderDisksToStorageDomainMap(); java.util.Collection<org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageCollection = relatedCinderDisksByStorageMap.values(); for (org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy relatedCinderDisksByStorage : relatedCinderDisksByStorageCollection) { com.woorea.openstack.cinder.model.Limits limits = relatedCinderDisksByStorage.getProxy().getLimits(); int numOfDisks = relatedCinderDisksByStorage.getCinderDisks().size(); if (isLimitExceeded(limits, VolumeClassification.Volume, numOfDisks)) { java.lang.String storageName = getStorageDomainDao().get(relatedCinderDisksByStorage.getStorageDomainId()).getStorageName(); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.CANNOT_ADD_CINDER_DISK_VOLUME_LIMIT_EXCEEDED, java.lang.String.format("$maxTotalVolumes %d", limits.getAbsolute().getMaxTotalVolumes()), java.lang.String.format("$storageName %s", storageName)); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; } }); }	public org.ovirt.engine.core.bll.ValidationResult validateCinderDiskLimits() { return validate(new java.util.concurrent.Callable<org.ovirt.engine.core.bll.ValidationResult>() { @java.lang.Override public org.ovirt.engine.core.bll.ValidationResult call() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageMap = getRelatedCinderDisksToStorageDomainMap(); java.util.Collection<org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageCollection = relatedCinderDisksByStorageMap.values(); for (org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy relatedCinderDisksByStorage : relatedCinderDisksByStorageCollection) { com.woorea.openstack.cinder.model.Limits limits = relatedCinderDisksByStorage.getProxy().getLimits(); int numOfDisks = relatedCinderDisksByStorage.getCinderDisks().size(); if (isLimitExceeded(limits, VolumeClassification.Volume, numOfDisks)) { java.lang.String storageName = getStorageDomainDao().get(relatedCinderDisksByStorage.getStorageDomainId()).getStorageName(); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_ADD_CINDER_DISK_VOLUME_LIMIT_EXCEEDED, java.lang.String.format("$maxTotalVolumes %d", limits.getAbsolute().getMaxTotalVolumes()), java.lang.String.format("$storageName %s", storageName)); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; } }); }
private void updateItems(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.AuditLog> source) { if ((getItems()) == null) { return; } if (!(source.isEmpty())) { org.ovirt.engine.ui.frontend.communication.RefreshActiveModelEvent.fire(this, false); } java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog> list = ((java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog>) (getItems())); java.util.Collections.sort(source, new org.ovirt.engine.ui.uicommonweb.Linq.AuditLogComparer()); for (org.ovirt.engine.core.common.businessentities.AuditLog item : source) { if ((list.size()) == (getSearchPageSize())) { list.remove(((list.size()) - 1)); } list.add(0, item); } getItemsChangedEvent().raise(this, EventArgs.empty); setLastEvent(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(list)); if ((org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(list)) == null) { onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("LastEvent")); } }	private void updateItems(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.AuditLog> source) { if ((getItems()) == null) { return; } if (!(source.isEmpty())) { org.ovirt.engine.ui.frontend.communication.RefreshActiveModelEvent.fire(this, false); } java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog> list = ((java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog>) (getItems())); java.util.Collections.sort(source, new org.ovirt.engine.ui.uicommonweb.Linq.AuditLogComparer()); for (org.ovirt.engine.core.common.businessentities.AuditLog item : source) { if ((list.size()) == (getSearchPageSize())) { list.remove(((list.size()) - 1)); } list.add(0, item); } getItemsChangedEvent().raise(this, EventArgs.EMPTY); setLastEvent(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(list)); if ((org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(list)) == null) { onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("LastEvent")); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.StorageDomain get(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { return getCallsHandler().executeRead("Getstorage_domains_By_id", org.ovirt.engine.core.dao.StorageDomainDAOImpl.StorageDomainRowMapper.instance, getCustomMapSqlParameterSource().addValue("id", id).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.StorageDomain get(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { return getCallsHandler().executeRead("Getstorage_domains_By_id", org.ovirt.engine.core.dao.StorageDomainDaoImpl.StorageDomainRowMapper.instance, getCustomMapSqlParameterSource().addValue("id", id).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }
@org.junit.Test public void testUpdateOvfDiskNotSupported() { org.ovirt.engine.core.common.businessentities.storage.DiskImage updatedDisk = createDiskImage(); updatedDisk.setReadOnly(true); updatedDisk.setDiskInterface(DiskInterface.IDE); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskFromDB = createDiskImage(); diskFromDB.setReadOnly(false); diskFromDB.setDiskInterface(DiskInterface.IDE); diskFromDB.setContentType(DiskContentType.OVF_STORE); when(diskDao.get(diskImageGuid)).thenReturn(diskFromDB); initializeCommand(new org.ovirt.engine.core.common.action.UpdateVmDiskParameters(vmId, diskImageGuid, updatedDisk)); when(diskValidator.isDiskUsedAsOvfStore()).thenCallRealMethod(); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, EngineMessages.ACTION_TYPE_FAILED_OVF_DISK_NOT_SUPPORTED); }	@org.junit.Test public void testUpdateOvfDiskNotSupported() { org.ovirt.engine.core.common.businessentities.storage.DiskImage updatedDisk = createDiskImage(); updatedDisk.setReadOnly(true); updatedDisk.setDiskInterface(DiskInterface.IDE); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskFromDB = createDiskImage(); diskFromDB.setReadOnly(false); diskFromDB.setDiskInterface(DiskInterface.IDE); diskFromDB.setContentType(DiskContentType.OVF_STORE); when(diskDao.get(diskImageGuid)).thenReturn(diskFromDB); initializeCommand(new org.ovirt.engine.core.common.action.UpdateVmDiskParameters(vmId, diskImageGuid, updatedDisk)); when(diskValidator.isDiskUsedAsOvfStore()).thenCallRealMethod(); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, EngineMessage.ACTION_TYPE_FAILED_OVF_DISK_NOT_SUPPORTED); }
@javax.ws.rs.POST @org.jboss.resteasy.annotations.providers.jaxb.Formatted @javax.ws.rs.Consumes({ org.ovirt.engine.api.resource.ApiMediaType.APPLICATION_XML, org.ovirt.engine.api.resource.ApiMediaType.APPLICATION_JSON, org.ovirt.engine.api.resource.ApiMediaType.APPLICATION_X_YAML }) @org.ovirt.engine.api.model.Actionable @javax.ws.rs.Path("remove") public javax.ws.rs.core.Response remove(org.ovirt.engine.api.model.Action action);	@javax.ws.rs.POST @org.jboss.resteasy.annotations.providers.jaxb.Formatted @javax.ws.rs.Consumes({ org.ovirt.engine.api.resource.ApiMediaType.APPLICATION_XML, org.ovirt.engine.api.resource.ApiMediaType.APPLICATION_JSON, org.ovirt.engine.api.resource.ApiMediaType.APPLICATION_X_YAML }) @org.ovirt.engine.api.model.Actionable @javax.ws.rs.Path("resolve") public javax.ws.rs.core.Response resolve(org.ovirt.engine.api.model.Action action);
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.RolesEntity object) { return object.getname(); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Role object) { return object.getname(); }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Allow to copy Template between Storage Domains") java.lang.String allowToCopyTemplateBetweenStorageDomainsRoleTreeTooltip();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to copy Template between Storage Domains") java.lang.String allowToCopyTemplateBetweenStorageDomainsRoleTreeTooltip();
org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getExternalVmList(java.lang.String url, java.lang.String username, java.lang.String password);	org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getExternalVmList(java.lang.String uri, java.lang.String username, java.lang.String password);
private void markExpiredCommandsAsFailure() { long maxTime = org.ovirt.engine.core.compat.DateTime.getNow().addMinutes(((-1) * (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.CoCoCommandLifeInMinutes)))).getTime(); java.util.Iterator<java.util.Map.Entry<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.tasks.CommandExecutor.CommandContainer>> iterator = cmdCallbackMap.entrySet().iterator(); while (iterator.hasNext()) { java.util.Map.Entry<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.tasks.CommandExecutor.CommandContainer> entry = iterator.next(); java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds = coco.getChildCommandIds(entry.getKey()); if (childCmdIds.isEmpty()) { markExpiredCommandAsFailure(entry.getKey(), maxTime); } else { for (org.ovirt.engine.core.compat.Guid childId : childCmdIds) { markExpiredCommandAsFailure(childId, maxTime); } } } }	private void markExpiredCommandsAsFailure() { for (java.util.Map.Entry<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.tasks.CommandExecutor.CommandContainer> entry : cmdCallbackMap.entrySet()) { java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds = coco.getChildCommandIds(entry.getKey()); if (childCmdIds.isEmpty()) { markExpiredCommandAsFailure(entry.getKey()); } else { for (org.ovirt.engine.core.compat.Guid childId : childCmdIds) { markExpiredCommandAsFailure(childId); } } } }
@org.junit.Test public void NameLengthIsTooLong() { when(host.getName()).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(((org.ovirt.engine.core.bll.validator.HostValidatorTest.HOST_NAME_SIZE) * 2))); assertThat(validator.nameLengthIsLegal(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG)); }	@org.junit.Test public void NameLengthIsTooLong() { when(host.getName()).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(((org.ovirt.engine.core.bll.validator.HostValidatorTest.HOST_NAME_SIZE) * 2))); assertThat(validator.nameLengthIsLegal(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG)); }
@java.lang.Override public void selectSpiceImplementation(org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel.ClientConsoleModeSpice consoleMode) { switch (consoleMode) { case Native : spiceAutoImplRadioButton.asRadioButton().setValue(false); spicePluginImplRadioButton.asRadioButton().setValue(false); spiceNativeImplRadioButton.asRadioButton().setValue(true); break; case Plugin : spiceAutoImplRadioButton.asRadioButton().setValue(false); spicePluginImplRadioButton.asRadioButton().setValue(true); spiceNativeImplRadioButton.asRadioButton().setValue(false); break; default : spiceAutoImplRadioButton.asRadioButton().setValue(true); spicePluginImplRadioButton.asRadioButton().setValue(false); spiceNativeImplRadioButton.asRadioButton().setValue(false); break; } }	@java.lang.Override public void selectSpiceImplementation(org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel.ClientConsoleMode consoleMode) { switch (consoleMode) { case Native : spiceAutoImplRadioButton.asRadioButton().setValue(false); spicePluginImplRadioButton.asRadioButton().setValue(false); spiceNativeImplRadioButton.asRadioButton().setValue(true); break; case Plugin : spiceAutoImplRadioButton.asRadioButton().setValue(false); spicePluginImplRadioButton.asRadioButton().setValue(true); spiceNativeImplRadioButton.asRadioButton().setValue(false); break; default : spiceAutoImplRadioButton.asRadioButton().setValue(true); spicePluginImplRadioButton.asRadioButton().setValue(false); spiceNativeImplRadioButton.asRadioButton().setValue(false); break; } }
protected org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer> connect(org.ovirt.engine.core.compat.Guid vdsId) { java.util.HashMap<java.lang.String, java.lang.String> result = ((java.util.HashMap<java.lang.String, java.lang.String>) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ConnectStorageServer, new org.ovirt.engine.core.common.vdscommands.StorageServerConnectionVDSCommandParameters(vdsId, org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getParameters().getStorageServerConnection().getstorage_type(), new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>(java.util.Arrays.asList(new org.ovirt.engine.core.common.businessentities.StorageServerConnections[]{ org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getConnection() })))).getReturnValue())); return new org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>(org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getParameters().getStorageServerConnection().getstorage_type()).isConnectSucceeded(result, java.util.Arrays.asList(org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getConnection())), java.lang.Integer.parseInt(result.values().iterator().next())); }	protected org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer> connect(org.ovirt.engine.core.compat.Guid vdsId) { java.util.HashMap<java.lang.String, java.lang.String> result = ((java.util.HashMap<java.lang.String, java.lang.String>) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ConnectStorageServer, new org.ovirt.engine.core.common.vdscommands.StorageServerConnectionManagementVDSParameters(vdsId, org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getParameters().getStorageServerConnection().getstorage_type(), new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>(java.util.Arrays.asList(new org.ovirt.engine.core.common.businessentities.StorageServerConnections[]{ org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getConnection() })))).getReturnValue())); return new org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>(org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getParameters().getStorageServerConnection().getstorage_type()).isConnectSucceeded(result, java.util.Arrays.asList(org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getConnection())), java.lang.Integer.parseInt(result.values().iterator().next())); }
private void initStorageDomainDiscardAfterDelete() { if ((org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().getDiscardAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().setDiscardAfterDelete(getDefaultDiscardAfterDelete()); } }	private void initStorageDomainDiscardAfterDeleteIfNeeded() { if ((org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().getDiscardAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().setDiscardAfterDelete(getDefaultDiscardAfterDelete()); } }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((!(org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterSnapshot(org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup().getCompatibilityVersion()))) && (!(org.ovirt.engine.core.bll.utils.ClusterUtils.getInstance().isFeatureSupportedAsAdditionalFeature(org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup().getId(), ClusterUtils.FEATURE_GLUSTER_SNAPSHOT)))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VOLUME_SNAPSHOT_NOT_SUPPORTED); } return true; }	@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (!(getGlusterUtil().isGlusterSnapshotSupported(org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup().getCompatibilityVersion(), org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup().getId()))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VOLUME_SNAPSHOT_NOT_SUPPORTED); } return true; }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Invalid E-Mail address") java.lang.String invalidEmailAddressInvalidReason();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Invalid E-Mail address") java.lang.String invalidEmailAddressInvalidReason();
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface gatherBondedInterfaces(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel model, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, java.util.Iterator<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> i) { while (((nic != null) && ((nic.getBondName()) != null)) && (nic.getBondName().equals(model.getBondName()))) { model.getInterfaces().add(hostInterfaceFromNic(nic)); nic = (i.hasNext()) ? i.next() : null; } return nic; }	private java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.HostVLan> gatherVlans(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, java.util.Map<java.lang.String, java.util.List<org.ovirt.engine.core.common.businessentities.network.Vlan>> nicToVlans) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.HostVLan> hostVlanList = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.HostVLan>(); if (nicToVlans.containsKey(nic.getName())) { for (org.ovirt.engine.core.common.businessentities.network.Vlan vlan : nicToVlans.get(nic.getName())) { hostVlanList.add(hostVlanFromNic(vlan)); } } return hostVlanList; }
@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { return; } super.syncSearch(); org.ovirt.engine.core.common.businessentities.VmTemplate template = getEntity(); super.syncSearch(VdcQueryType.GetStorageDomainsByVmTemplateId, new org.ovirt.engine.core.common.queries.IdQueryParameters(template.getId())); }	@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { return; } super.syncSearch(); org.ovirt.engine.core.common.businessentities.VmTemplate template = ((org.ovirt.engine.core.common.businessentities.VmTemplate) (getEntity())); super.syncSearch(VdcQueryType.GetStorageDomainsByVmTemplateId, new org.ovirt.engine.core.common.queries.IdQueryParameters(template.getId())); }
@java.lang.Override protected void setActionMessageParameters() { if (!(org.apache.commons.lang.StringUtils.isEmpty(cdImagePath))) { addCanDoActionMessage(EngineMessages.VAR__ACTION__CHANGE_CD); } else { addCanDoActionMessage(EngineMessages.VAR__ACTION__EJECT_CD); } addCanDoActionMessage(EngineMessages.VAR__TYPE__VM); }	@java.lang.Override protected void setActionMessageParameters() { if (!(org.apache.commons.lang.StringUtils.isEmpty(cdImagePath))) { addCanDoActionMessage(EngineMessage.VAR__ACTION__CHANGE_CD); } else { addCanDoActionMessage(EngineMessage.VAR__ACTION__EJECT_CD); } addCanDoActionMessage(EngineMessage.VAR__TYPE__VM); }
public org.ovirt.engine.core.bll.ValidationResult validBond(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { if (!(java.lang.Boolean.TRUE.equals(iface.getBonded()))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } int slavesCount = getSlaveCount(nics); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessages.NETWORK_BONDS_INVALID_SLAVE_COUNT, ("$NETWORK_BONDS_INVALID_SLAVE_COUNT_LIST " + slavesCount)).when((slavesCount < 2)); }	public org.ovirt.engine.core.bll.ValidationResult validBond(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { if (!(java.lang.Boolean.TRUE.equals(iface.getBonded()))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } int slavesCount = getSlaveCount(nics); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.NETWORK_BONDS_INVALID_SLAVE_COUNT, ("$NETWORK_BONDS_INVALID_SLAVE_COUNT_LIST " + slavesCount)).when((slavesCount < 2)); }
@org.junit.experimental.theories.Theory public void testConcreateCreateTaskBackwardsComaptibility(org.ovirt.engine.core.bll.CommandBase<? extends org.ovirt.engine.core.common.action.VdcActionParametersBase> cmd) { org.ovirt.engine.core.common.action.VdcActionParametersBase params = cmd.getParameters(); params.setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.VM, org.ovirt.engine.core.compat.Guid.NewGuid())); params.setParentCommand(org.ovirt.engine.core.utils.RandomUtils.instance().nextEnum(org.ovirt.engine.core.common.action.VdcActionType.class)); params.setParentParameters(params); org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo info = org.ovirt.engine.core.bll.BackwardCompatibilityTaskCreationTest.nextAsyncTaskCreationInfo(); org.ovirt.engine.core.bll.SPMAsyncTask spmAsyncTask = cmd.concreteCreateTask(Guid.Empty, info, cmd.getParameters().getParentCommand()); assertEquals("wrong storage pool ID", info.getStoragePoolID(), spmAsyncTask.getStoragePoolID()); assertEquals("wrong task ID", info.getVdsmTaskId(), spmAsyncTask.getVdsmTaskId()); assertEquals("wrong task result", AsyncTaskResultEnum.success, spmAsyncTask.getLastTaskStatus().getResult()); assertEquals("wrong task status", AsyncTaskStatusEnum.init, spmAsyncTask.getLastTaskStatus().getStatus()); assertEquals("wrong task state", AsyncTaskState.Initializing, spmAsyncTask.getState()); assertTrue("wrong task type", (spmAsyncTask instanceof org.ovirt.engine.core.bll.EntityAsyncTask)); }	@org.junit.experimental.theories.Theory public void testConcreateCreateTaskBackwardsComaptibility(org.ovirt.engine.core.bll.CommandBase<? extends org.ovirt.engine.core.common.action.VdcActionParametersBase> cmd) { org.ovirt.engine.core.common.action.VdcActionParametersBase params = cmd.getParameters(); params.setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.VM, org.ovirt.engine.core.compat.Guid.newGuid())); params.setParentCommand(org.ovirt.engine.core.utils.RandomUtils.instance().nextEnum(org.ovirt.engine.core.common.action.VdcActionType.class)); params.setParentParameters(params); org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo info = org.ovirt.engine.core.bll.BackwardCompatibilityTaskCreationTest.nextAsyncTaskCreationInfo(); org.ovirt.engine.core.bll.SPMAsyncTask spmAsyncTask = cmd.concreteCreateTask(Guid.Empty, info, cmd.getParameters().getParentCommand()); assertEquals("wrong storage pool ID", info.getStoragePoolID(), spmAsyncTask.getStoragePoolID()); assertEquals("wrong task ID", info.getVdsmTaskId(), spmAsyncTask.getVdsmTaskId()); assertEquals("wrong task result", AsyncTaskResultEnum.success, spmAsyncTask.getLastTaskStatus().getResult()); assertEquals("wrong task status", AsyncTaskStatusEnum.init, spmAsyncTask.getLastTaskStatus().getStatus()); assertEquals("wrong task state", AsyncTaskState.Initializing, spmAsyncTask.getState()); assertTrue("wrong task type", (spmAsyncTask instanceof org.ovirt.engine.core.bll.EntityAsyncTask)); }
@org.junit.Test public void providerIsNotSet() throws java.lang.Exception { validator = new org.ovirt.engine.core.bll.provider.ProviderValidator(null); assertThat(validator.providerIsSet(), failsWith(EngineMessages.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST)); }	@org.junit.Test public void providerIsNotSet() throws java.lang.Exception { validator = new org.ovirt.engine.core.bll.provider.ProviderValidator(null); assertThat(validator.providerIsSet(), failsWith(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST)); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getExportCommand())) { export(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().exportTemplateTitle()); } else if ("Cancel".equals(command.getName())) { cancel(); } else if ("OnExport".equals(command.getName())) { onExport(); } else if ("OnSave".equals(command.getName())) { onSave(); } else if ("OnRemove".equals(command.getName())) { onRemove(); } else if ("OnExportNoTemplates".equals(command.getName())) { onExportNoTemplates(); } else if ("CancelConfirmation".equals(command.getName())) { cancelConfirmation(); } }	@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getExportCommand())) { export(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().exportTemplateTitle()); } else if ("Cancel".equals(command.getName())) { cancel(); } else if ("OnExport".equals(command.getName())) { onExport(); } else if ("OnSave".equals(command.getName())) { onSave(); } else if ("OnRemove".equals(command.getName())) { onRemove(); } else if ("OnExportNoTemplates".equals(command.getName())) { doExport(); } else if ("CancelConfirmation".equals(command.getName())) { cancelConfirmation(); } }
@java.lang.Override protected void EndSuccessfully() { setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getVmTemplateId()); for (org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getImagesParameters()) { org.ovirt.engine.core.bll.Backend.getInstance().EndAction(VdcActionType.CreateImageTemplate, p); } endDefaultOperations(); org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded(true); }	@java.lang.Override protected void EndSuccessfully() { setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getVmTemplateId()); for (org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getImagesParameters()) { org.ovirt.engine.core.bll.Backend.getInstance().EndAction(VdcActionType.CreateImageTemplate, p); } if ((reloadVmTemplateFromDB()) != null) { endDefaultOperations(); } org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded(true); }
private void createConfigurationProvider() throws org.ovirt.engine.core.domains.ManageDomainsResult { java.lang.String engineConfigProperties = createTempPropFile(); try { java.lang.String engineConfigExecutable = utilityConfiguration.getEngineConfigExecutablePath(); java.lang.String adUserName = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.AdUserName); java.lang.String domainName = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.DomainName); java.lang.String ldapSecurityAuthentication = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LDAPSecurityAuthentication); java.lang.String adUserPassword = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.AdUserPassword); java.lang.String adUserId = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.AdUserId); java.lang.String ldapServers = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LdapServers); java.lang.String ldapProviderTypes = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LDAPProviderTypes); java.lang.String ldapPort = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LDAPServerPort); if (ldapPort == null) { ldapPort = org.ovirt.engine.core.domains.ManageDomains.DEFAULT_LDAP_SERVER_PORT; } java.lang.String changePasswordUrl = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.ChangePasswordUrl); if (changePasswordUrl == null) { changePasswordUrl = ""; } configurationProvider = new org.ovirt.engine.core.domains.ConfigurationProvider(adUserName, adUserPassword, domainName, ldapSecurityAuthentication, ldapServers, adUserId, ldapProviderTypes, utilityConfiguration.getEngineConfigExecutablePath(), engineConfigProperties, ldapPort, changePasswordUrl); } catch (java.lang.Throwable e) { throw new org.ovirt.engine.core.domains.ManageDomainsResult(ManageDomainsResultEnum.FAILED_READING_CURRENT_CONFIGURATION, e.getMessage()); } }	private void createConfigurationProvider() throws org.ovirt.engine.core.domains.ManageDomainsResult { java.lang.String engineConfigProperties = createTempPropFile(); try { java.lang.String engineConfigExecutable = utilityConfiguration.getEngineConfigExecutablePath(); java.lang.String adUserName = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.AdUserName); java.lang.String domainName = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.DomainName); java.lang.String ldapSecurityAuthentication = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LDAPSecurityAuthentication); java.lang.String adUserPassword = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.AdUserPassword); java.lang.String adUserId = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.AdUserId); java.lang.String ldapServers = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LdapServers); java.lang.String ldapProviderTypes = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LDAPProviderTypes); java.lang.String ldapPort = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LDAPServerPort); if (ldapPort == null) { ldapPort = org.ovirt.engine.core.domains.ManageDomains.DEFAULT_LDAP_SERVER_PORT; } java.lang.String changePasswordUrl = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.ChangePasswordMsg); if (changePasswordUrl == null) { changePasswordUrl = ""; } configurationProvider = new org.ovirt.engine.core.domains.ConfigurationProvider(adUserName, adUserPassword, domainName, ldapSecurityAuthentication, ldapServers, adUserId, ldapProviderTypes, utilityConfiguration.getEngineConfigExecutablePath(), engineConfigProperties, ldapPort, changePasswordUrl); } catch (java.lang.Throwable e) { throw new org.ovirt.engine.core.domains.ManageDomainsResult(ManageDomainsResultEnum.FAILED_READING_CURRENT_CONFIGURATION, e.getMessage()); } }
@org.junit.Before public void setup() { cluster1 = createCluster(); cluster2 = createCluster(); when(clusterDao.getWithoutMigratingVms()).thenReturn(java.util.Arrays.asList(cluster1, cluster2)); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster1))).thenReturn(vm1); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster2))).thenReturn(vm2); when(arem.getExecutor()).thenReturn(java.util.concurrent.Executors.newScheduledThreadPool(1)); arem.wakeup(); }	@org.junit.Before public void setup() { cluster1 = createCluster(); cluster2 = createCluster(); when(clusterDao.getWithoutMigratingVms()).thenReturn(java.util.Arrays.asList(cluster1, cluster2)); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster1))).thenReturn(vm1); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster2))).thenReturn(vm2); arem.wakeup(); }
@java.lang.Override protected void doSetCallback(com.google.gwt.http.client.RequestBuilder rb, final com.google.gwt.http.client.RequestCallback callback) { rb.setCallback(new com.google.gwt.http.client.RequestCallback() { @java.lang.Override public void onResponseReceived(com.google.gwt.http.client.Request request, com.google.gwt.http.client.Response response) { java.lang.String tokenValue = response.getHeader("OVIRT-SSO-TOKEN"); if ((tokenValue != null) && (!("".equals(tokenValue)))) { org.ovirt.engine.ui.frontend.communication.SSOTokenChangeEvent.fire(eventBus, tokenValue); } callback.onResponseReceived(request, response); } @java.lang.Override public void onError(com.google.gwt.http.client.Request request, java.lang.Throwable exception) { callback.onError(request, exception); } }); }	@java.lang.Override protected void doSetCallback(com.google.gwt.http.client.RequestBuilder rb, final com.google.gwt.http.client.RequestCallback callback) { rb.setCallback(new com.google.gwt.http.client.RequestCallback() { @java.lang.Override public void onResponseReceived(com.google.gwt.http.client.Request request, com.google.gwt.http.client.Response response) { java.lang.String tokenValue = org.ovirt.engine.ui.common.utils.HttpUtils.getHeader(response, "OVIRT-SSO-TOKEN"); if (tokenValue != null) { org.ovirt.engine.ui.frontend.communication.SSOTokenChangeEvent.fire(eventBus, tokenValue); } callback.onResponseReceived(request, response); } @java.lang.Override public void onError(com.google.gwt.http.client.Request request, java.lang.Throwable exception) { callback.onError(request, exception); } }); }
public void setDurationUnit(java.lang.String durationUnit) { this.durationUnit = durationUnit; }	public void setDurationFormatted(org.ovirt.engine.core.common.utils.Pair<java.lang.Integer, java.lang.String> duration) { this.durationFormatted = duration; }
protected boolean checkUserAndGroupsAuthorization(org.ovirt.engine.core.compat.Guid userId, java.util.HashSet<org.ovirt.engine.core.compat.Guid> groupIds, final org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup, final org.ovirt.engine.core.compat.Guid object, final org.ovirt.engine.core.common.VdcObjectType type, final boolean ignoreEveryone) { if (log.isDebugEnabled()) { log.debugFormat("Checking whether user {0} has permission on {1} groups with {2} action group on {3} object with {4}", userId, org.apache.commons.lang.StringUtils.join(groupIds, ","), actionGroup, object, type.name()); } final org.ovirt.engine.core.compat.Guid permId = org.ovirt.engine.core.bll.CommandBase.getPermissionDAO().getEntityPermissionsForUserAndGroups(userId, org.apache.commons.lang.StringUtils.join(groupIds, ","), actionGroup, object, type, ignoreEveryone); if (permId != null) { if (log.isDebugEnabled()) { log.debugFormat("Found permission {0} for user when running {1}, on {2} with id {3}", permId, getActionType(), type.getVdcObjectTranslation(), object); } return true; } if (log.isDebugEnabled()) { log.debugFormat("No permission found for user when running action {0}, on object {1} for action group {2} with id {3}.", getActionType(), type.getVdcObjectTranslation(), actionGroup, object); } return false; }	protected boolean checkUserAndGroupsAuthorization(org.ovirt.engine.core.compat.Guid userId, java.util.HashSet<org.ovirt.engine.core.compat.Guid> groupIds, final org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup, final org.ovirt.engine.core.compat.Guid object, final org.ovirt.engine.core.common.VdcObjectType type, final boolean ignoreEveryone) { if (log.isDebugEnabled()) { log.debugFormat("Checking whether user {0} or groups {1} have action group {3} on object type {4}", userId, org.apache.commons.lang.StringUtils.join(groupIds, ","), actionGroup, object, type.name()); } final org.ovirt.engine.core.compat.Guid permId = org.ovirt.engine.core.bll.CommandBase.getPermissionDAO().getEntityPermissionsForUserAndGroups(userId, org.apache.commons.lang.StringUtils.join(groupIds, ","), actionGroup, object, type, ignoreEveryone); if (permId != null) { if (log.isDebugEnabled()) { log.debugFormat("Found permission {0} for user when running {1}, on {2} with id {3}", permId, getActionType(), type.getVdcObjectTranslation(), object); } return true; } if (log.isDebugEnabled()) { log.debugFormat("No permission found for user when running action {0}, on object {1} for action group {2} with id {3}.", getActionType(), type.getVdcObjectTranslation(), actionGroup, object); } return false; }
private void updateSnapshotIdOnShareableChange(org.ovirt.engine.core.common.businessentities.storage.Disk oldDisk, org.ovirt.engine.core.common.businessentities.storage.Disk newDisk) { if (((oldDisk.isShareable()) != (newDisk.isShareable())) && ((oldDisk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE))) { org.ovirt.engine.core.common.businessentities.DiskImage oldDiskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (oldDisk)); org.ovirt.engine.core.compat.Guid vmSnapshotId = (isUpdatedToShareable(oldDisk, newDisk)) ? null : org.ovirt.engine.core.bll.UpdateVmDiskCommand.getSnapshotDao().getId(org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVmId(), SnapshotType.ACTIVE); oldDiskImage.setVmSnapshotId(vmSnapshotId); } }	private void updateSnapshotIdOnShareableChange(org.ovirt.engine.core.common.businessentities.storage.Disk oldDisk, org.ovirt.engine.core.common.businessentities.storage.Disk newDisk) { if (((oldDisk.isShareable()) != (newDisk.isShareable())) && ((oldDisk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE))) { org.ovirt.engine.core.common.businessentities.storage.DiskImage oldDiskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (oldDisk)); org.ovirt.engine.core.compat.Guid vmSnapshotId = (isUpdatedToShareable(oldDisk, newDisk)) ? null : org.ovirt.engine.core.bll.UpdateVmDiskCommand.getSnapshotDao().getId(org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVmId(), SnapshotType.ACTIVE); oldDiskImage.setVmSnapshotId(vmSnapshotId); } }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { boolean discardAfterDelete = getStorageDomainDao().get(guids.get(0)).isDiscardAfterDelete(); return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), discardAfterDelete, false)); }	@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { boolean discardAfterDelete = storageDomainDao.get(guids.get(0)).isDiscardAfterDelete(); return postDeleteActionHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), discardAfterDelete, false)); }
private void updateModel(org.ovirt.engine.ui.uicommonweb.models.VmErrataCountModel model) { if ((currentSelectedVm) != null) { model.setGuid(currentSelectedVm.getId()); model.setName(currentSelectedVm.getName()); model.runQuery(currentSelectedVm.getId()); } }	private void updateModel() { if ((currentSelectedVm) != null) { errataCountModel.setGuid(currentSelectedVm.getId()); errataCountModel.setEntity(currentSelectedVm); errataCountModel.runQuery(currentSelectedVm.getId()); } }
@java.lang.Override public void onFailure(final java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.queries.VdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase>> operationList, final java.lang.Throwable caught) { try { if (ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ("Failed to execute runMultipleQueries: " + caught), caught); org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult(queryTypeList, queryParamsList, null); failureEventHandler(caught); callback.executed(f); } finally { org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent.fire(this, state); } }	@java.lang.Override public void onFailure(final java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.queries.VdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase>> operationList, final java.lang.Throwable caught) { try { if (ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ("Failed to execute runMultipleQueries: " + caught), caught); org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult(queryTypeList, queryParamsList, null); failureEventHandler(caught); callback.executed(f); } finally { fireAsyncOperationCompleteEvent(state); } }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Allow to create Storage Domain") java.lang.String allowToCreateStorageDomainRoleTreeTooltip();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to create Storage Domain") java.lang.String allowToCreateStorageDomainRoleTreeTooltip();
private void setupParentExpectations() { volumeResourceMock = control.createMock(org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumeResource.class); expect(bricksResourceMock.getParent()).andReturn(volumeResourceMock).anyTimes(); expect(volumeResourceMock.getId()).andReturn(org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBrickResourceTest.volumeId.toString()).anyTimes(); expect(bricksResourceMock.addParents(isA(org.ovirt.engine.api.model.GlusterBrick.class))).andDelegateTo(new org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBricksResource() { @java.lang.Override protected org.ovirt.engine.api.model.GlusterBrick addParents(org.ovirt.engine.api.model.GlusterBrick glusterBrick) { org.ovirt.engine.api.model.Cluster cluster = new org.ovirt.engine.api.model.Cluster(); cluster.setId(org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBrickResourceTest.clusterId.toString()); org.ovirt.engine.api.model.GlusterVolume volume = new org.ovirt.engine.api.model.GlusterVolume(); volume.setId(org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBrickResourceTest.volumeId.toString()); volume.setCluster(cluster); glusterBrick.setGlusterVolume(volume); return glusterBrick; } }).anyTimes(); }	private void setupParentExpectations() { volumeResourceMock = control.createMock(org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumeResource.class); expect(bricksResourceMock.getParent()).andReturn(volumeResourceMock).anyTimes(); expect(volumeResourceMock.getId()).andReturn(org.ovirt.engine.api.restapi.resource.gluster.GlusterTestHelper.volumeId.toString()).anyTimes(); expect(bricksResourceMock.addParents(isA(org.ovirt.engine.api.model.GlusterBrick.class))).andDelegateTo(new org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBricksResource() { @java.lang.Override protected org.ovirt.engine.api.model.GlusterBrick addParents(org.ovirt.engine.api.model.GlusterBrick glusterBrick) { org.ovirt.engine.api.model.Cluster cluster = new org.ovirt.engine.api.model.Cluster(); cluster.setId(org.ovirt.engine.api.restapi.resource.gluster.GlusterTestHelper.clusterId.toString()); org.ovirt.engine.api.model.GlusterVolume volume = new org.ovirt.engine.api.model.GlusterVolume(); volume.setId(org.ovirt.engine.api.restapi.resource.gluster.GlusterTestHelper.volumeId.toString()); volume.setCluster(cluster); glusterBrick.setGlusterVolume(volume); return glusterBrick; } }).anyTimes(); }
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { return source != null ? source : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionDetails>(); }	@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { return source != null ? source : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity>(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Disk object) { getCell().setTitle(org.ovirt.engine.ui.uicompat.external.StringUtils.join(object.getVmNames(), ", ")); if ((object.getNumberOfVms()) == 0) { return ""; } java.lang.String entityType = new org.ovirt.engine.ui.uicompat.EnumTranslator().get(object.getVmEntityType()); if ((object.getNumberOfVms()) == 1) { java.lang.String entityName = object.getVmNames().get(0); return entityName; } else { return (((object.getNumberOfVms()) + " ") + entityType) + "s"; } }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Disk object) { getCell().setTitle(org.ovirt.engine.ui.uicompat.external.StringUtils.join(object.getVmNames(), ", ")); if ((object.getNumberOfVms()) == 0) { return ""; } java.lang.String entityType = org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance().get(object.getVmEntityType()); if ((object.getNumberOfVms()) == 1) { java.lang.String entityName = object.getVmNames().get(0); return entityName; } else { return (((object.getNumberOfVms()) + " ") + entityType) + "s"; } }
private void checkVdsSwapThreshold(org.ovirt.engine.core.common.businessentities.VdsStatistics stat) { final double THRESHOLD = 0.98; java.lang.Integer minAvailableThreshold = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.LogPhysicalMemoryThresholdInMB); java.lang.Integer maxUsedPercentageThreshold = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.LogMaxPhysicalMemoryUsedThresholdInPercentage); if ((((stat.getswap_total()) == null) || ((stat.getswap_free()) == null)) || ((stat.getswap_total()) == 0)) { return; } java.lang.Long swapUsedPercent = ((stat.getswap_total()) - (stat.getswap_free())) / (stat.getswap_total()); java.lang.Long allowedMinAvailableThreshold = java.lang.Math.round(((minAvailableThreshold.doubleValue()) * THRESHOLD)); org.ovirt.engine.core.common.AuditLogType valueToLog = ((stat.getswap_free()) < allowedMinAvailableThreshold) ? org.ovirt.engine.core.common.AuditLogType.VDS_LOW_SWAP : org.ovirt.engine.core.common.AuditLogType.VDS_HIGH_SWAP_USE; if (((stat.getswap_free()) < allowedMinAvailableThreshold) || (swapUsedPercent > maxUsedPercentageThreshold)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(stat.getId()); logable.addCustomValue("HostName", _vds.getName()); logable.addCustomValue("UsedSwap", swapUsedPercent.toString()); logable.addCustomValue("AvailableSwapMemory", stat.getswap_free().toString()); logable.addCustomValue("Threshold", ((stat.getswap_free()) < allowedMinAvailableThreshold ? allowedMinAvailableThreshold.toString() : maxUsedPercentageThreshold.toString())); auditLog(logable, valueToLog); } }	private void checkVdsSwapThreshold(org.ovirt.engine.core.common.businessentities.VdsStatistics stat) { final double THRESHOLD = 0.98; java.lang.Integer minAvailableThreshold = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.LogPhysicalMemoryThresholdInMB); java.lang.Integer maxUsedPercentageThreshold = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.LogMaxPhysicalMemoryUsedThresholdInPercentage); if ((((stat.getswap_total()) == null) || ((stat.getswap_free()) == null)) || ((stat.getswap_total()) == 0)) { return; } java.lang.Long swapUsedPercent = ((stat.getswap_total()) - (stat.getswap_free())) / (stat.getswap_total()); java.lang.Long allowedMinAvailableThreshold = java.lang.Math.round(((minAvailableThreshold.doubleValue()) * THRESHOLD)); org.ovirt.engine.core.common.AuditLogType valueToLog = ((stat.getswap_free()) < allowedMinAvailableThreshold) ? org.ovirt.engine.core.common.AuditLogType.VDS_LOW_SWAP : org.ovirt.engine.core.common.AuditLogType.VDS_HIGH_SWAP_USE; if (((stat.getswap_free()) < allowedMinAvailableThreshold) || (swapUsedPercent > maxUsedPercentageThreshold)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(stat.getId()); logable.addCustomValue("HostName", _vds.getName()); logable.addCustomValue("UsedSwap", swapUsedPercent.toString()); logable.addCustomValue("AvailableSwapMemory", stat.getswap_free().toString()); logable.addCustomValue("Threshold", ((stat.getswap_free()) < allowedMinAvailableThreshold ? minAvailableThreshold.toString() : maxUsedPercentageThreshold.toString())); auditLog(logable, valueToLog); } }
@java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetCapabilities, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase(getVds())); getVdsDynamicDao().updateNetConfigDirty(getVds().getId(), getVds().getNetConfigDirty()); org.ovirt.engine.core.common.businessentities.VDS updatedHost = ((org.ovirt.engine.core.common.businessentities.VDS) (returnValue.getReturnValue())); org.ovirt.engine.core.vdsbroker.vdsbroker.CollectVdsNetworkDataVDSCommand.persistAndEnforceNetworkCompliance(updatedHost, false, null); for (org.ovirt.engine.core.common.businessentities.network.Network net : getModifiedNetworks()) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus(getVdsGroupId(), net); } return null; }	@java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.common.vdscommands.UserConfiguredNetworkData userConfiguredNetworkData = new org.ovirt.engine.core.common.vdscommands.UserConfiguredNetworkData(getParameters().getNetworkAttachments(), applyUserConfiguredNics()); hostNetworkTopologyPersister.persistAndEnforceNetworkCompliance(updatedHost, false, userConfiguredNetworkData); getVdsDynamicDao().updateNetConfigDirty(getVds().getId(), getVds().getNetConfigDirty()); for (org.ovirt.engine.core.common.businessentities.network.Network net : getModifiedNetworks()) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus(getVdsGroupId(), net); } return null; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.DbGroup.class, to = org.ovirt.engine.api.model.Group.class) public static org.ovirt.engine.api.model.Group map(org.ovirt.engine.core.common.businessentities.DbGroup entity, org.ovirt.engine.api.model.Group template) { org.ovirt.engine.api.model.Group model = (template != null) ? template : new org.ovirt.engine.api.model.Group(); model.setName(entity.getName()); model.setId(org.ovirt.engine.api.restapi.utils.DirectoryEntryIdUtils.generateId(entity.getId().toString(), entity.getDomain(), entity.getExternalId())); if (!(org.apache.commons.lang.StringUtils.isEmpty(entity.getDomain()))) { org.ovirt.engine.api.model.Domain dom = new org.ovirt.engine.api.model.Domain(); dom.setId(new org.ovirt.engine.core.compat.Guid(entity.getDomain().getBytes(), true).toString()); model.setDomain(dom); } return model; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.DbGroup.class, to = org.ovirt.engine.api.model.Group.class) public static org.ovirt.engine.api.model.Group map(org.ovirt.engine.core.common.businessentities.DbGroup entity, org.ovirt.engine.api.model.Group template) { org.ovirt.engine.api.model.Group model = (template != null) ? template : new org.ovirt.engine.api.model.Group(); model.setName(entity.getName()); model.setId(entity.getId().toString()); if (!(org.apache.commons.lang.StringUtils.isEmpty(entity.getDomain()))) { org.ovirt.engine.api.model.Domain dom = new org.ovirt.engine.api.model.Domain(); dom.setId(new org.ovirt.engine.core.compat.Guid(entity.getDomain().getBytes(), true).toString()); model.setDomain(dom); } model.setDomainEntryId(org.ovirt.engine.api.restapi.utils.DirectoryEntryIdUtils.encode(entity.getExternalId())); return model; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.initializeStorageDomain(); java.lang.String storage = ((org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage()) != null) ? org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage() : ""; org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(""); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInDb(); if (org.apache.commons.lang.StringUtils.isEmpty(storage)) { storage = createVG(); } org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(storage); if ((org.apache.commons.lang.StringUtils.isNotEmpty(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage())) && (org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInIrs())) { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.updateStorageDomainDynamicFromIrs(); proceedVGLunsInDb(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getVds().getStoragePoolId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData()); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.setSucceeded(true); } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.initializeStorageDomain(); java.lang.String storage = ((org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage()) != null) ? org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage() : ""; org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(""); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInDb(); if (org.apache.commons.lang.StringUtils.isEmpty(storage)) { storage = createVG(); } org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(storage); if ((org.apache.commons.lang.StringUtils.isNotEmpty(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage())) && (org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInIrs())) { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.updateStorageDomainDynamicFromIrs(); proceedVGLunsInDb(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getVds().getId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData()); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.setSucceeded(true); } }
public void getGlusterVolumeGeoRepRecommendationViolations(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid masterVolumeId, org.ovirt.engine.core.compat.Guid slaveVolumeId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object returnValue, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { return returnValue == null ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepNonEligibilityReason>() : ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepNonEligibilityReason>) (returnValue)); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetNonEligibilityReasonsOfVolumeForGeoRepSession, new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeGeoRepEligibilityParameters(masterVolumeId, slaveVolumeId), aQuery); }	public static void getGlusterVolumeGeoRepRecommendationViolations(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid masterVolumeId, org.ovirt.engine.core.compat.Guid slaveVolumeId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object returnValue, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { return returnValue == null ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepNonEligibilityReason>() : ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepNonEligibilityReason>) (returnValue)); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetNonEligibilityReasonsOfVolumeForGeoRepSession, new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeGeoRepEligibilityParameters(masterVolumeId, slaveVolumeId), aQuery); }
public java.lang.String getLastReport() { return (lastReport) != null ? lastReport : ""; }	public java.lang.String getLastReport() { return lastReport; }
@java.lang.Override public void addQuotaPermissionSubject(java.util.List<org.ovirt.engine.core.common.PermissionSubject> quotaPermissionList) { if ((((org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePool()) != null) && ((getQuotaId()) != null)) && (!(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePool().getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)))) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.UpdateVmCommand.getVmDAO().get(getVmId()); if ((vm != null) && (!(getQuotaId().equals(vm.getQuotaId())))) { quotaPermissionList.add(new org.ovirt.engine.core.common.PermissionSubject(getQuotaId(), org.ovirt.engine.core.common.VdcObjectType.Quota, org.ovirt.engine.core.common.businessentities.ActionGroup.CONSUME_QUOTA)); } } }	@java.lang.Override public void addQuotaPermissionSubject(java.util.List<org.ovirt.engine.core.common.PermissionSubject> quotaPermissionList) { if ((((org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePool()) != null) && ((getQuotaId()) != null)) && (!(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePool().getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)))) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.UpdateVmCommand.getVm(); if ((vm != null) && (!(getQuotaId().equals(vm.getQuotaId())))) { quotaPermissionList.add(new org.ovirt.engine.core.common.PermissionSubject(getQuotaId(), org.ovirt.engine.core.common.VdcObjectType.Quota, org.ovirt.engine.core.common.businessentities.ActionGroup.CONSUME_QUOTA)); } } }
@org.junit.Test public void testHasPeersFalse() { doReturn(org.ovirt.engine.core.bll.utils.GlusterUtilTest.OUTPUT_XML_NO_PEERS).when(glusterUtil).executePeerStatusCommand(client); assertTrue(glusterUtil.getPeers(client).isEmpty()); }	@org.junit.Test public void testHasPeersFalse() { org.ovirt.engine.core.bll.utils.GlusterUtilTest.EXPECTED_MAP.put(org.ovirt.engine.core.bll.utils.GlusterUtilTest.SERVER_NAME1, org.ovirt.engine.core.bll.utils.GlusterUtilTest.FINGER_PRINT1); doReturn(org.ovirt.engine.core.bll.utils.GlusterUtilTest.EXPECTED_MAP).when(glusterUtil).getFingerprints(any(java.util.Set.class)); doReturn(org.ovirt.engine.core.bll.utils.GlusterUtilTest.OUTPUT_XML_NO_PEERS).when(glusterUtil).executePeerStatusCommand(client); assertTrue(glusterUtil.getPeers(client).isEmpty()); }
@org.junit.Test public void testGetOperationResult_Empty() { java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<?, ?>> testOperationList = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<?, ?>> allOperationList = new java.util.ArrayList<>(); java.util.List<?> allResults = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase>(); java.util.List<?> result = testProvider.getOperationResult(testOperationList, allOperationList, allResults); assertEquals("Result should have no results", 0, result.size()); }	@org.junit.Test public void testGetOperationResult_Empty() { java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<?, ?>> testOperationList = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<?, ?>> allOperationList = new java.util.ArrayList<>(); java.util.List<?> allResults = new java.util.ArrayList<>(); java.util.List<?> result = testProvider.getOperationResult(testOperationList, allOperationList, allResults); assertEquals("Result should have no results", 0, result.size()); }
@java.lang.Override public void onKeyUp(com.google.gwt.event.dom.client.KeyUpEvent event) { storageModel.getWarningLowSpaceSize().setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().bracketsWithGB(getWarningLowSpaceSize(storageModel))); }	@java.lang.Override public void onKeyUp(com.google.gwt.event.dom.client.KeyUpEvent event) { if (!(storageModel.isNewStorage())) { storageModel.getWarningLowSpaceSize().setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().bracketsWithGB(getWarningLowSpaceSize(storageModel))); } }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Subnets") java.lang.String networkExternalSubnetSubTabLabel();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Subnets") java.lang.String networkExternalSubnetSubTabLabel();
private boolean ensureDestinationImageMap() { if (diskInfoDestinationMap.isEmpty()) { if (((org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getStorageDomainId()) != null) && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getStorageDomainId())))) { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getStorageDomainId(); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> storageIds = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); storageIds.add(storageId); for (org.ovirt.engine.core.common.businessentities.DiskImage image : org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplate().getDiskTemplateMap().values()) { image.setStorageIds(storageIds); setDestTypeAndFormat(image); diskInfoDestinationMap.put(image.getId(), image); } } else { org.ovirt.engine.core.bll.ImagesHandler.fillImagesMapBasedOnTemplate(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplate(), diskInfoDestinationMap, destStorages, false); } } if ((org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplate().getDiskTemplateMap().values().size()) != (diskInfoDestinationMap.size())) { log.error("Can not found any default active domain for one of the disks of template with id '{}'", org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplate().getId()); addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_MISSED_STORAGES_FOR_SOME_DISKS); return false; } for (org.ovirt.engine.core.common.businessentities.DiskImage diskImage : diskInfoDestinationMap.values()) { setDestTypeAndFormat(diskImage); } return true; }	private boolean ensureDestinationImageMap() { if (diskInfoDestinationMap.isEmpty()) { if (((org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getStorageDomainId()) != null) && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getStorageDomainId())))) { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getStorageDomainId(); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> storageIds = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); storageIds.add(storageId); for (org.ovirt.engine.core.common.businessentities.DiskImage image : org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplate().getDiskTemplateMap().values()) { image.setStorageIds(storageIds); diskInfoDestinationMap.put(image.getId(), image); } } else { org.ovirt.engine.core.bll.ImagesHandler.fillImagesMapBasedOnTemplate(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplate(), diskInfoDestinationMap, destStorages, false); } } if ((org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplate().getDiskTemplateMap().values().size()) != (diskInfoDestinationMap.size())) { log.error("Can not found any default active domain for one of the disks of template with id '{}'", org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplate().getId()); addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_MISSED_STORAGES_FOR_SOME_DISKS); return false; } return true; }
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteVolume(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String[] volUUID, java.lang.String postZero, boolean discard, java.lang.String force);	org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteVolume(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String[] volUUID, java.lang.String postZero, java.lang.Boolean discard, java.lang.String force);
public org.ovirt.engine.core.bll.ValidationResult isReadOnlyPropertyCompatibleWithInterface() { if (java.lang.Boolean.TRUE.equals(disk.getReadOnly())) { org.ovirt.engine.core.common.businessentities.storage.DiskInterface diskInterface = disk.getDiskInterface(); if (diskInterface == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.IDE)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.ACTION_TYPE_FAILED_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR, java.lang.String.format("$interface %1$s", diskInterface)); } if (disk.isScsiPassthrough()) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessages.SCSI_PASSTHROUGH_IS_NOT_SUPPORTED_FOR_READ_ONLY_DISK); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult isReadOnlyPropertyCompatibleWithInterface() { if (java.lang.Boolean.TRUE.equals(disk.getReadOnly())) { org.ovirt.engine.core.common.businessentities.storage.DiskInterface diskInterface = disk.getDiskInterface(); if (diskInterface == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.IDE)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR, java.lang.String.format("$interface %1$s", diskInterface)); } if (disk.isScsiPassthrough()) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.SCSI_PASSTHROUGH_IS_NOT_SUPPORTED_FOR_READ_ONLY_DISK); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private javax.ws.rs.core.Response performCreate(org.ovirt.engine.api.model.ImageTransfer imageTransfer, org.ovirt.engine.core.common.action.TransferDiskImageParameters params) { updateTransferType(imageTransfer, params); if ((imageTransfer.isSetHost()) && (imageTransfer.getHost().isSetId())) { params.setVdsId(org.ovirt.engine.core.compat.Guid.createGuidFromString(imageTransfer.getHost().getId())); } if (imageTransfer.isSetClientInactivityTimeout()) { params.setClientInactivityTimeout(imageTransfer.getClientInactivityTimeout()); } return performCreate(ActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }	private javax.ws.rs.core.Response performCreate(org.ovirt.engine.api.model.ImageTransfer imageTransfer, org.ovirt.engine.core.common.action.TransferDiskImageParameters params) { updateTransferType(imageTransfer, params); if ((imageTransfer.isSetHost()) && (imageTransfer.getHost().isSetId())) { params.setVdsId(org.ovirt.engine.core.compat.Guid.createGuidFromString(imageTransfer.getHost().getId())); } if (imageTransfer.isSetInactivityTimeout()) { params.setClientInactivityTimeout(imageTransfer.getInactivityTimeout()); } return performCreate(ActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
private org.ovirt.engine.core.common.queries.VdcQueryReturnValue getErrorQueryReturnValue(org.ovirt.engine.core.common.errors.EngineMessages errorMessage) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = new org.ovirt.engine.core.common.queries.VdcQueryReturnValue(); returnValue.setSucceeded(false); returnValue.setExceptionString(errorMessage.toString()); return returnValue; }	private org.ovirt.engine.core.common.queries.VdcQueryReturnValue getErrorQueryReturnValue(org.ovirt.engine.core.common.errors.EngineMessage errorMessage) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = new org.ovirt.engine.core.common.queries.VdcQueryReturnValue(); returnValue.setSucceeded(false); returnValue.setExceptionString(errorMessage.toString()); return returnValue; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc setSafeNetworkConfig() { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.setSafeNetworkConfig").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc setSafeNetworkConfig() { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.setSafeNetworkConfig").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@org.ovirt.engine.ui.common.DefaultStringValue("Allow all users to access this Template") java.lang.String makeTemplateIsTemplatePrivateEditorLabel();	@org.ovirt.engine.ui.common.DefaultStringValue("Allow all users to access this Template") java.lang.String makeTemplateIsTemplatePublicEditorLabel();
private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if (((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) || (!(validate(storageDomainValidator.isDiscardAfterDeleteLegalForExistingStorageDomain())))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("discardAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn("There was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }	private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if (((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) || (!(validateDiscardAfterDeleteLegal(storageDomainValidator)))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("discardAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn("There was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
private boolean checkIsDomainLocked(org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainMap) { if (domainMap.getStatus().isLocked()) { addInvalidSDStatusMessage(domainMap.getStatus()); return true; } return false; }	private boolean checkIsDomainLocked(org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainMap) { if ((org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Locked) == (domainMap.getStatus())) { addInvalidSDStatusMessage(StorageDomainStatus.Locked); return true; } return false; }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Affinity Group contradiction detected between UAG:\n${UAG}\nand negative Affinity Group:\n${negativeAR}") java.lang.String ACTION_TYPE_FAILED_AFFINITY_RULES_COLLISION();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Affinity Group contradiction detected between unified affinity group:\n${UnifiedAffinityGroups}\nand negative affinity group:\n${negativeAR}") java.lang.String ACTION_TYPE_FAILED_AFFINITY_RULES_COLLISION();
private void initVm(org.ovirt.engine.core.common.businessentities.VMStatus vmStatus, org.ovirt.engine.core.compat.NGuid runOnVds, org.ovirt.engine.core.compat.Guid diskImageId) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(vmStatus); vm.setRunOnVds(runOnVds); when(vmDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vm); when(vmDao.getVmsListForDisk(diskImageId)).thenReturn(java.util.Collections.singletonList(vm)); setVmInPreview(false); }	private void initVm(org.ovirt.engine.core.common.businessentities.VMStatus vmStatus, org.ovirt.engine.core.compat.NGuid runOnVds, org.ovirt.engine.core.compat.Guid diskImageId) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(vmStatus); vm.setRunOnVds(runOnVds); when(vmDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vm); when(vmDao.getVmsListForDisk(diskImageId)).thenReturn(java.util.Collections.singletonList(vm)); }
@org.junit.Test public void testRemoveNotFound() throws java.lang.Exception { setUpEntityQueryExpectations(VdcQueryType.GetNetworksByStoragePoolId, org.ovirt.engine.core.common.queries.StoragePoolQueryParametersBase.class, new java.lang.String[]{ "StoragePoolId" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworksResourceTest.DATA_CENTER_ID }, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>()); control.replay(); try { collection.remove(GUIDS[0].toString()); fail("expected WebApplicationException"); } catch (javax.ws.rs.WebApplicationException wae) { verifyNotFoundException(wae); } }	@org.junit.Test public void testRemoveNotFound() throws java.lang.Exception { setUpEntityQueryExpectations(VdcQueryType.GetNetworksByStoragePoolId, org.ovirt.engine.core.common.queries.StorageDomainAndPoolQueryParameters.class, new java.lang.String[]{ "StoragePoolId" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworksResourceTest.DATA_CENTER_ID }, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>()); control.replay(); try { collection.remove(GUIDS[0].toString()); fail("expected WebApplicationException"); } catch (javax.ws.rs.WebApplicationException wae) { verifyNotFoundException(wae); } }
@com.google.gwt.i18n.client.Constants.DefaultStringValue("Edit Template") java.lang.String editTemplateTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Edit Template") java.lang.String editTemplateTitle();
protected void setUpEntityQueryExpectations(org.ovirt.engine.core.common.queries.VdcQueryType query, java.lang.Class<? extends org.ovirt.engine.core.common.queries.VdcQueryParametersBase> queryClass, java.lang.String[] queryNames, java.lang.Object[] queryValues, java.lang.Object queryReturn, java.lang.Object failure) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = mock(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); when(queryResult.getSucceeded()).thenReturn((failure == null)); if (failure == null) { when(queryResult.getReturnValue()).thenReturn(queryReturn); } else { if (failure instanceof java.lang.String) { when(queryResult.getExceptionString()).thenReturn(((java.lang.String) (failure))); setUpL10nExpectations(((java.lang.String) (failure))); } else if (failure instanceof java.lang.Exception) { when(queryResult.getExceptionString()).thenThrow(((java.lang.Exception) (failure))); } } if (queryClass == (org.ovirt.engine.core.common.queries.GetPermissionsForObjectParameters.class)) { when(backend.runQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))).thenReturn(queryResult); } else { when(backend.runQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))).thenReturn(queryResult); } }	protected void setUpEntityQueryExpectations(org.ovirt.engine.core.common.queries.VdcQueryType query, java.lang.Class<? extends org.ovirt.engine.core.common.queries.VdcQueryParametersBase> queryClass, java.lang.String[] queryNames, java.lang.Object[] queryValues, java.lang.Object queryReturn, java.lang.Object failure) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = mock(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); when(queryResult.getSucceeded()).thenReturn((failure == null)); if (failure == null) { when(queryResult.getReturnValue()).thenReturn(queryReturn); } else { if (failure instanceof java.lang.String) { when(queryResult.getExceptionString()).thenReturn(((java.lang.String) (failure))); setUpL10nExpectations(((java.lang.String) (failure))); } else if (failure instanceof java.lang.Exception) { when(queryResult.getExceptionString()).thenThrow(((java.lang.Exception) (failure))); } } if (queryClass == (org.ovirt.engine.core.common.queries.GetPermissionsForObjectParameters.class)) { when(backend.runQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))).thenReturn(queryResult); } else { when(backend.runQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))).thenReturn(queryResult); enqueueInteraction(() -> verify(backend, atLeastOnce()).runQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))); } }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.businessentities.GraphicsDevice dev = org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getParameters().getDev(); if (dev == null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_DEVICE_MUST_BE_SPECIFIED); } if ((org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getParameters().isVm()) && ((org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getVm()) == null)) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((!(org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getParameters().isVm())) && ((org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getVmTemplate()) == null)) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST); } if ((dev.getGraphicsType()) == null) { return failValidate(EngineMessage.ACTION_TYPE_FAILED_GRAPHIC_TYPE_MUST_BE_SPECIFIED); } return true; }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.businessentities.GraphicsDevice dev = org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getParameters().getDev(); if (dev == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DEVICE_MUST_BE_SPECIFIED); } if ((org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getParameters().isVm()) && ((org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getVm()) == null)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((!(org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getParameters().isVm())) && ((org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getVmTemplate()) == null)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST); } if ((dev.getGraphicsType()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_GRAPHIC_TYPE_MUST_BE_SPECIFIED); } return true; }
@org.junit.Test public void testResetAllOptions() throws java.lang.Exception { setupParentExpectations(); setUpGetEntityExpectations(1); resource.setParent(volumesResourceMock); setUriInfo(setUpActionExpectations(VdcActionType.ResetGlusterVolumeOptions, org.ovirt.engine.core.common.action.gluster.ResetGlusterVolumeOptionsParameters.class, new java.lang.String[]{ "VolumeId" }, new java.lang.Object[]{ GUIDS[0] })); verifyActionResponse(resource.resetAllOptions(new org.ovirt.engine.api.model.Action())); }	@org.junit.Test public void testResetAllOptions() throws java.lang.Exception { setupParentExpectations(); resource.setParent(volumesResourceMock); setUriInfo(setUpActionExpectations(VdcActionType.ResetGlusterVolumeOptions, org.ovirt.engine.core.common.action.gluster.ResetGlusterVolumeOptionsParameters.class, new java.lang.String[]{ "VolumeId" }, new java.lang.Object[]{ GUIDS[0] })); verifyActionResponse(resource.resetAllOptions(new org.ovirt.engine.api.model.Action())); }
private void updateCachedIsoFileListFromVdsm(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { boolean isRefreshed = false; try { java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> problematicRepoFileList = new java.util.ArrayList<>(); isRefreshed = refreshIsoDomain(repoImage.getRepoDomainId(), problematicRepoFileList, repoImage.getFileType()); addRepoFileToProblematicList(problematicRepoFileList); } finally { org.ovirt.engine.core.bll.storage.domains.IsoDomainListSyncronizer.log.info("Finished automatic refresh process for '{}' file type with {}, for storage domain id '{}'.", repoImage.getFileType(), (isRefreshed ? "success" : "failure"), repoImage.getRepoDomainId()); } }	private void updateCachedIsoFileListFromVdsm(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { boolean isRefreshed = false; try { java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> problematicRepoFileList = new java.util.ArrayList<>(); isRefreshed = refreshIsoDomain(repoImage.getRepoDomainId(), problematicRepoFileList, repoImage.getFileType()); addRepoFileToProblematicList(problematicRepoFileList); } finally { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.log.info("Finished automatic refresh process for '{}' file type with {}, for storage domain id '{}'.", repoImage.getFileType(), (isRefreshed ? "success" : "failure"), repoImage.getRepoDomainId()); } }
private void setGraphicsDevicesToParams(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, org.ovirt.engine.core.common.action.VmManagementParametersBase params) { org.ovirt.engine.core.common.businessentities.GraphicsDevice graphicsFromModel = getGraphicsFromModel(model); if (graphicsFromModel != null) { params.setShouldUpdateGraphicsDevice(org.ovirt.engine.core.common.businessentities.GraphicsType.fromVmDeviceType(graphicsFromModel.getVmDeviceType()), true); params.setGraphicsDevice(graphicsFromModel); } }	private void setGraphicsDevicesToParams(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, org.ovirt.engine.core.common.action.VmTemplateParametersBase params) { if (((model.getDisplayType().getSelectedItem()) == null) || ((model.getGraphicsType().getSelectedItem()) == null)) { return; } for (org.ovirt.engine.core.common.businessentities.GraphicsType graphicsType : org.ovirt.engine.core.common.businessentities.GraphicsType.values()) { params.getGraphicsDevices().put(graphicsType, null); if (model.getGraphicsType().getSelectedItem().getBackingGraphicsType().contains(graphicsType)) { org.ovirt.engine.core.common.businessentities.GraphicsDevice d = new org.ovirt.engine.core.common.businessentities.GraphicsDevice(graphicsType.getCorrespondingDeviceType()); params.getGraphicsDevices().put(d.getGraphicsType(), d); } } }
@java.lang.Override protected org.ovirt.engine.core.common.businessentities.HostDevice generateNewEntity() { org.ovirt.engine.core.common.businessentities.HostDevice device = new org.ovirt.engine.core.common.businessentities.HostDevice(); device.setHostId(org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_HOST_ID); device.setDeviceName(((org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME) + "___child")); device.setParentDeviceName(org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME); device.setCapability("pci"); device.setAssignable(true); return device; }	@java.lang.Override protected org.ovirt.engine.core.common.businessentities.HostDevice generateNewEntity() { org.ovirt.engine.core.common.businessentities.HostDevice device = new org.ovirt.engine.core.common.businessentities.HostDevice(); device.setHostId(org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_HOST_ID); device.setDeviceName(((org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME) + "___child")); device.setParentDeviceName(org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME); device.setCapability("pci"); device.setDriver("mock driver"); device.setAssignable(true); return device; }
public void setFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> confirmedFreeSize) { this.confirmedFreeSize = confirmedFreeSize; }	public void setConfirmedFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> confirmedFreeSize) { this.confirmedFreeSize = confirmedFreeSize; }
private void processStorageOnVdsInactive(final org.ovirt.engine.core.common.businessentities.VDS vds) { if (!(Guid.Empty.equals(vds.getStoragePoolId()))) { org.ovirt.engine.core.utils.lock.EngineLock lock = new org.ovirt.engine.core.utils.lock.EngineLock(java.util.Collections.singletonMap(vds.getId().toString(), new org.ovirt.engine.core.common.utils.Pair(LockingGroup.VDS_POOL_AND_STORAGE_CONNECTIONS.toString(), EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED.toString())), null); try { org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager().acquireLockWait(lock); clearDomainCache(vds); org.ovirt.engine.core.common.businessentities.StoragePool storage_pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolDao().get(vds.getStoragePoolId()); if ((org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Uninitialized) != (storage_pool.getStatus())) { vdsBroker.RunVdsCommand(VDSCommandType.DisconnectStoragePool, new org.ovirt.engine.core.common.vdscommands.DisconnectStoragePoolVDSCommandParameters(vds.getId(), vds.getStoragePoolId(), vds.getVdsSpmId())); org.ovirt.engine.core.common.action.HostStoragePoolParametersBase params = new org.ovirt.engine.core.common.action.HostStoragePoolParametersBase(storage_pool, vds); backend.runInternalAction(VdcActionType.DisconnectHostFromStoragePoolServers, params); } } finally { org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager().releaseLock(lock); } } }	private void processStorageOnVdsInactive(final org.ovirt.engine.core.common.businessentities.VDS vds) { if (!(Guid.Empty.equals(vds.getStoragePoolId()))) { org.ovirt.engine.core.utils.lock.EngineLock lock = new org.ovirt.engine.core.utils.lock.EngineLock(java.util.Collections.singletonMap(vds.getId().toString(), new org.ovirt.engine.core.common.utils.Pair(LockingGroup.VDS_POOL_AND_STORAGE_CONNECTIONS.toString(), EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED.toString())), null); try { org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager().acquireLockWait(lock); clearDomainCache(vds); stopGlusterServices(vds); org.ovirt.engine.core.common.businessentities.StoragePool storage_pool = storagePoolDao.get(vds.getStoragePoolId()); if ((org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Uninitialized) != (storage_pool.getStatus())) { vdsBroker.RunVdsCommand(VDSCommandType.DisconnectStoragePool, new org.ovirt.engine.core.common.vdscommands.DisconnectStoragePoolVDSCommandParameters(vds.getId(), vds.getStoragePoolId(), vds.getVdsSpmId())); org.ovirt.engine.core.common.action.HostStoragePoolParametersBase params = new org.ovirt.engine.core.common.action.HostStoragePoolParametersBase(storage_pool, vds); backend.runInternalAction(VdcActionType.DisconnectHostFromStoragePoolServers, params); } } finally { org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager().releaseLock(lock); } } }
@org.junit.Test public void testIpv4IsInvalid() { org.junit.Assert.assertFalse(underTest.isValid("1.2.3.4", mockConstraintValidatorContext)); }	@org.junit.Test public void testIpv4IsInvalid() { doTest("1.2.3.4", false); }
public static java.lang.String escapeUnderScore(final java.lang.String customizedValue, final java.lang.String customizedRelation) { java.lang.String escapedValue = customizedValue; if ((customizedRelation.equalsIgnoreCase("LIKE")) || (customizedRelation.equalsIgnoreCase("ILIKE"))) { java.lang.String replaceWith = "_"; int pgMajorRelease = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PgMajorRelease); if (pgMajorRelease == (org.ovirt.engine.core.searchbackend.SyntaxChecker.PgMajorRelease.PG8.getValue())) { replaceWith = "\\\\_"; } else if (pgMajorRelease == (org.ovirt.engine.core.searchbackend.SyntaxChecker.PgMajorRelease.PG9.getValue())) { replaceWith = "\\_"; } escapedValue = customizedValue.replace("_", replaceWith); } return escapedValue; }	public static java.lang.String escapeUnderScore(final java.lang.String customizedValue, final java.lang.String customizedRelation) { java.lang.String escapedValue = customizedValue; if ((customizedRelation.equalsIgnoreCase("LIKE")) || (customizedRelation.equalsIgnoreCase("ILIKE"))) { escapedValue = customizedValue.replace("_", org.ovirt.engine.core.searchbackend.SyntaxChecker.getEscapedCharacter("_")); } return escapedValue; }
void insertCoCoCmdEntities(java.util.Collection<org.ovirt.engine.core.common.businessentities.CoCoCmdEntity> coCoCmdEntities);	void insertCommandAssociatedEntities(java.util.Collection<org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity> cmdAssociatedEntities);
private void updateVolume(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity existingVolume, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity fetchedVolume) { updateVolumeProperties(existingVolume, fetchedVolume); updateVolumeCapacityInfo(existingVolume, fetchedVolume); updateBricks(existingVolume, fetchedVolume); updateOptions(existingVolume, fetchedVolume); updateTransportTypes(existingVolume, fetchedVolume); }	private void updateVolume(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity existingVolume, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity fetchedVolume) { updateVolumeProperties(existingVolume, fetchedVolume); updateBricks(existingVolume, fetchedVolume); updateOptions(existingVolume, fetchedVolume); updateTransportTypes(existingVolume, fetchedVolume); }
private void setSelectedNetworkQoSId(org.ovirt.engine.core.compat.Guid networkQoSId) { for (java.lang.Object item : getNetworkQoS().getItems()) { if (((org.ovirt.engine.core.common.businessentities.network.NetworkQoS) (item)).getId().equals(networkQoSId)) { getNetworkQoS().setSelectedItem(item); return; } } setSelectedNetworkQoSId(Guid.Empty); }	private void setSelectedNetworkQoSId(org.ovirt.engine.core.compat.Guid networkQoSId) { for (java.lang.Object item : getNetworkQoS().getItems()) { if (((org.ovirt.engine.core.common.businessentities.network.NetworkQoS) (item)).getId().equals(networkQoSId)) { getNetworkQoS().setSelectedItem(item); return; } } getNetworkQoS().setSelectedItem(org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel.getEmptyQos()); }
public java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> buildParameters(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { org.ovirt.engine.core.common.action.PersistentHostSetupNetworksParameters setupNetworkParams = createHostSetupNetworksParameters(nic.getVdsId()); setupNetworkParams.setNetworkNames(network.getName()); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicToConfigure = getNicToConfigure(getNics(), nic.getId()); if (nicToConfigure == null) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.LABELED_NETWORK_INTERFACE_NOT_FOUND); } org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = org.ovirt.engine.core.utils.NetworkUtils.createNetworkAttachment(nicToConfigure, getVlanDevice(nicToConfigure, network.getVlanId()), network); setupNetworkParams.getNetworkAttachments().add(networkAttachment); addBootProtocolForRoleNetworkAttachment(nicToConfigure, network, networkAttachment); parameters.add(setupNetworkParams); } return parameters; }	public java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> buildParameters(org.ovirt.engine.core.common.businessentities.network.Network network, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { org.ovirt.engine.core.common.action.PersistentHostSetupNetworksParameters setupNetworkParams = createHostSetupNetworksParameters(nic.getVdsId()); setupNetworkParams.setNetworkNames(network.getName()); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicToConfigure = getNicToConfigure(getNics(nic.getVdsId()), nic.getId()); if (nicToConfigure == null) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.LABELED_NETWORK_INTERFACE_NOT_FOUND); } org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(nicToConfigure, network, org.ovirt.engine.core.utils.NetworkUtils.createIpConfigurationFromVdsNetworkInterface(getVlanDevice(nicToConfigure, network.getVlanId()))); setupNetworkParams.getNetworkAttachments().add(networkAttachment); addBootProtocolForRoleNetworkAttachment(nicToConfigure, network, networkAttachment); parameters.add(setupNetworkParams); } return parameters; }
protected abstract org.ovirt.engine.core.common.action.VdcActionParametersBase getActionParameters(org.ovirt.engine.api.model.Network network, org.ovirt.engine.core.common.businessentities.NetworkEntity entity);	protected abstract org.ovirt.engine.core.common.action.VdcActionParametersBase getActionParameters(org.ovirt.engine.api.model.Network network, org.ovirt.engine.core.common.businessentities.Network entity);
@com.gwtplatform.mvp.client.annotations.ProxyEvent public void onNetworkSelectionChange(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.StorageSelectionChangeEvent event) { updateMainTabSelection(event.getSelectedItems()); }	@com.gwtplatform.mvp.client.annotations.ProxyEvent public void onStorageSelectionChange(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.StorageSelectionChangeEvent event) { updateMainTabSelection(event.getSelectedItems()); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<E> vmListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<E>) (array[0])); org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel tagListModel = ((org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel) (array[1])); vmListModel.allAttachedTags.addAll(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags>) (returnValue))); (vmListModel.selectedItemsCounter)++; if ((vmListModel.selectedItemsCounter) == (vmListModel.getSelectedItems().size())) { postGetAttachedTags(vmListModel, tagListModel); } }	@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void> vmListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>) (array[0])); org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel tagListModel = ((org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel) (array[1])); vmListModel.allAttachedTags.addAll(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags>) (returnValue))); (vmListModel.selectedItemsCounter)++; if ((vmListModel.selectedItemsCounter) == (vmListModel.getSelectedItems().size())) { postGetAttachedTags(vmListModel, tagListModel); } }
org.ovirt.engine.core.bll.ValidationResult validateNotRemovingUsedNetworkByVms() { java.util.Collection<java.lang.String> removedNetworks = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : removedNetworkAttachments) { removedNetworks.add(existingNetworkRelatedToAttachment(removedAttachment).getName()); } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(host.getId(), removedNetworks); if (vmNames.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.VAR_NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS_LIST, vmNames)); } }	org.ovirt.engine.core.bll.ValidationResult validateNotRemovingUsedNetworkByVms() { java.util.Collection<java.lang.String> removedNetworks = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : removedNetworkAttachments) { removedNetworks.add(existingNetworkRelatedToAttachment(removedAttachment).getName()); } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(host.getId(), removedNetworks); if (vmNames.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.VAR_NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS_LIST, vmNames)); } }
@java.lang.Override public java.lang.Void call() { try { if (isPerformConnectOps && (connectVdsToNewMaster(vds))) { try { runVdsCommand(VDSCommandType.ConnectStoragePool, new org.ovirt.engine.core.common.vdscommands.ConnectStoragePoolVDSCommandParameters(vds, getStoragePool(), true)); } catch (org.ovirt.engine.core.common.errors.VdcBLLException ex) { if ((org.ovirt.engine.core.common.errors.VdcBllErrors.StoragePoolUnknown) == (ex.getVdsError().getCode())) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnVal = runVdsCommand(VDSCommandType.ConnectStoragePool, new org.ovirt.engine.core.common.vdscommands.ConnectStoragePoolVDSCommandParameters(vds, getStoragePool())); if (!(returnVal.getSucceeded())) { log.errorFormat("Post reconstruct actions (connectPool) did not complete on host {0} in the pool. error {1}", vds.getId(), returnVal.getVdsError().getMessage()); } } else { log.errorFormat(("Post reconstruct actions (refreshPool)" + " did not complete on host {0} in the pool. error {1}"), vds.getId(), ex.getMessage()); } } } } catch (java.lang.Exception e) { log.errorFormat(("Post reconstruct actions (connectPool,refreshPool,disconnect storage)" + " did not complete on host {0} in the pool. error {1}"), vds.getId(), e.getMessage()); } return null; }	@java.lang.Override public java.lang.Void call() { try { if (isPerformConnectOps && (connectVdsToNewMaster(vds))) { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap> storagePoolIsoMap = getStoragePoolIsoMapDAO().getAllForStoragePool(getStoragePool().getId()); try { runVdsCommand(VDSCommandType.ConnectStoragePool, new org.ovirt.engine.core.common.vdscommands.ConnectStoragePoolVDSCommandParameters(vds, getStoragePool(), _newMasterStorageDomainId, storagePoolIsoMap, true)); } catch (org.ovirt.engine.core.common.errors.VdcBLLException ex) { if ((org.ovirt.engine.core.common.errors.VdcBllErrors.StoragePoolUnknown) == (ex.getVdsError().getCode())) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnVal = runVdsCommand(VDSCommandType.ConnectStoragePool, new org.ovirt.engine.core.common.vdscommands.ConnectStoragePoolVDSCommandParameters(vds, getStoragePool(), _newMasterStorageDomainId, storagePoolIsoMap)); if (!(returnVal.getSucceeded())) { log.errorFormat("Post reconstruct actions (connectPool) did not complete on host {0} in the pool. error {1}", vds.getId(), returnVal.getVdsError().getMessage()); } } else { log.errorFormat(("Post reconstruct actions (refreshPool)" + " did not complete on host {0} in the pool. error {1}"), vds.getId(), ex.getMessage()); } } } } catch (java.lang.Exception e) { log.errorFormat(("Post reconstruct actions (connectPool,refreshPool,disconnect storage)" + " did not complete on host {0} in the pool. error {1}"), vds.getId(), e.getMessage()); } return null; }
@org.codehaus.jackson.annotate.JsonIgnore public java.lang.Boolean getBootMenuEnabled() { return bootMenuEnabled; }	public java.lang.Boolean getBootMenuEnabled() { return bootMenuEnabled; }
@org.junit.Test public void testCanDoActionPoolInMaintenance() { getStoragePool().setStatus(StoragePoolStatus.Maintenance); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND); }	@org.junit.Test public void testCanDoActionPoolInMaintenance() { getStoragePool().setStatus(StoragePoolStatus.Maintenance); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("VAR__TYPE__HOST_NIC_VFS_CONFIG=$type host NIC VFs configuration") java.lang.String VAR__TYPE__HOST_NIC_VFS_CONFIG();	@org.ovirt.engine.ui.frontend.DefaultStringValue("$action gluster volume snapshot config update") java.lang.String VAR__ACTION__VOLUME_SNAPSHOT_CONFIG_UPDATE();
@java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.NetworkEntity n) { return n.getname().equals(getParameters().getInterface().getNetworkName()); }	@java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.Network n) { return n.getname().equals(getParameters().getInterface().getNetworkName()); }
@java.lang.Override protected org.ovirt.engine.core.common.businessentities.network.NetworkAttachment postPopulate(org.ovirt.engine.api.model.NetworkAttachment model) { model.getIpAddressAssignments().getIpAddressAssignments().get(0).setAssignmentMethod("dhcp"); model.getQos().setType(QosType.HOSTNETWORK.name()); return super.postPopulate(model); }	@java.lang.Override protected org.ovirt.engine.core.common.businessentities.network.NetworkAttachment postPopulate(org.ovirt.engine.api.model.NetworkAttachment model) { model.getIpAddressAssignments().getIpAddressAssignments().get(0).setAssignmentMethod("dhcp"); model.getQos().setType(QosType.HOSTNETWORK.name().toLowerCase()); return super.postPopulate(model); }
@java.lang.Override protected void executeVmCommand() { if (diskShouldBeUnPlugged()) { performPlugCommand(VDSCommandType.HotUnPlugDisk, disk, vmDevice); } org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVmDeviceDao().remove(vmDevice.getId()); if ((!(disk.isDiskSnapshot())) && ((org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE) == (disk.getDiskStorageType()))) { org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getImageDao().updateImageVmSnapshotId(((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)).getImageId(), null); } org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateBootOrderInVmDeviceAndStoreToDB(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm().getStaticData()); org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVmStaticDAO().incrementDbGeneration(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm().getId()); org.ovirt.engine.core.bll.DetachDiskFromVmCommand.setSucceeded(true); }	@java.lang.Override protected void executeVmCommand() { if (diskShouldBeUnPlugged()) { performPlugCommand(VDSCommandType.HotUnPlugDisk, disk, vmDevice); } org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVmDeviceDao().remove(vmDevice.getId()); if ((!(disk.isDiskSnapshot())) && ((org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE) == (disk.getDiskStorageType()))) { org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getImageDao().updateImageVmSnapshotId(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)).getImageId(), null); } org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateBootOrderInVmDeviceAndStoreToDB(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm().getStaticData()); org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVmStaticDAO().incrementDbGeneration(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm().getId()); org.ovirt.engine.core.bll.DetachDiskFromVmCommand.setSucceeded(true); }
java.util.EnumSet<org.ovirt.engine.core.common.businessentities.VDSType> getHostType();	java.util.EnumSet<org.ovirt.engine.core.common.businessentities.VDSType> getHostTypes();
public static boolean isNetworkInSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.HostNetworkQos networkQos) { return new org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface(iface, network, networkQos).isNetworkInSync(); }	public static boolean isNetworkInSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.HostNetworkQos hostNetworkQos) { return new org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface(iface, network, hostNetworkQos).isNetworkInSync(); }
@java.lang.Override public void run() { org.ovirt.engine.core.bll.VdsEventListener.log.infoFormat("ResourceManager::vdsNotResponding entered for Host {0}, {1}", vds.getId(), vds.getHostName()); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.VdsNotRespondingTreatment, new org.ovirt.engine.core.common.action.FenceVdsActionParameters(vds.getId(), org.ovirt.engine.core.common.businessentities.FenceActionType.Restart, executeSshSoftFencing), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); }	@java.lang.Override public void run() { org.ovirt.engine.core.bll.VdsEventListener.log.infoFormat("ResourceManager::vdsNotResponding entered for Host {0}, {1}", vds.getId(), vds.getHostName()); boolean shouldExecRealFencing = true; if (executeSshSoftFencing) { org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.SshSoftFencing, new org.ovirt.engine.core.common.action.VdsActionParameters(vds.getId()), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); shouldExecRealFencing = !(retVal.getSucceeded()); } if (shouldExecRealFencing) { org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.VdsNotRespondingTreatment, new org.ovirt.engine.core.common.action.FenceVdsActionParameters(vds.getId(), org.ovirt.engine.core.common.businessentities.FenceActionType.Restart), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); } }
private static com.google.gwt.resources.client.ImageResource getPoolVmImageResource(org.ovirt.engine.core.common.businessentities.VmType vmType, boolean nextRunConfigurationExists) { switch (vmType) { case Desktop : return nextRunConfigurationExists ? org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.manyDesktopsChangesImage() : org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.manyDesktopsImage(); case Server : return nextRunConfigurationExists ? org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.manyServersChangesImage() : org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.manyServersImage(); default : return null; } }	private static com.google.gwt.resources.client.ImageResource getPoolVmImageResource(org.ovirt.engine.core.common.businessentities.VmType vmType, boolean nextRunConfigurationExists) { switch (vmType) { case Server : return nextRunConfigurationExists ? org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.manyServersChangesImage() : org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.manyServersImage(); case Desktop : default : return nextRunConfigurationExists ? org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.manyDesktopsChangesImage() : org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.manyDesktopsImage(); } }
public org.ovirt.engine.core.utils.lock.EngineLock acquireGlusterLockWait(org.ovirt.engine.core.compat.Guid clusterId) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> exclusiveLocks = new java.util.HashMap<>(); exclusiveLocks.put(clusterId.toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.GLUSTER, EngineMessages.ACTION_TYPE_FAILED_GLUSTER_OPERATION_INPROGRESS)); org.ovirt.engine.core.utils.lock.EngineLock lock = new org.ovirt.engine.core.utils.lock.EngineLock(exclusiveLocks, null); org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager().acquireLockWait(lock); return lock; }	public org.ovirt.engine.core.utils.lock.EngineLock acquireGlusterLockWait(org.ovirt.engine.core.compat.Guid clusterId) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> exclusiveLocks = new java.util.HashMap<>(); exclusiveLocks.put(clusterId.toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.GLUSTER, EngineMessage.ACTION_TYPE_FAILED_GLUSTER_OPERATION_INPROGRESS)); org.ovirt.engine.core.utils.lock.EngineLock lock = new org.ovirt.engine.core.utils.lock.EngineLock(exclusiveLocks, null); org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager().acquireLockWait(lock); return lock; }
@org.junit.Test public void testMultipleNested() { org.ovirt.engine.api.types.V4Vm object = newVm().addDisks(newDisk().setId("123").setAlias("disk1")).addDisks(newDisk().setId("456").setAlias("disk2")).build(); assertEquals(("<vm>" + (((("<disks>" + "<disk id=\"123\"><alias>disk1</alias></disk>") + "<disk id=\"456\"><alias>disk2</alias></disk>") + "</disks>") + "</vm>")), objectToXml(object)); }	@org.junit.Test public void testMultipleNested() { org.ovirt.engine.api.types.V4Vm object = vm().disks(disk().id("123").alias("disk1")).disks(disk().id("456").alias("disk2")).build(); assertEquals(("<vm>" + (((("<disks>" + "<disk id=\"123\"><alias>disk1</alias></disk>") + "<disk id=\"456\"><alias>disk2</alias></disk>") + "</disks>") + "</vm>")), objectToXml(object)); }
@java.lang.Override protected boolean canDoAction() { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksToCheck = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getDiskDao().getAllForVm(getSourceVmFromDb().getId()), true, false, true); org.ovirt.engine.core.bll.validator.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.DiskImagesValidator(disksToCheck); if (!(validate(diskImagesValidator.diskImagesNotLocked()))) { return false; } java.util.Set<org.ovirt.engine.core.compat.Guid> storageIds = org.ovirt.engine.core.bll.ImagesHandler.getAllStorageIdsForImageIds(disksToCheck); org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator storageValidator = new org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator(org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getStoragePoolId(), storageIds); if (!(validate(storageValidator.allDomainsExistAndActive()))) { return false; } if (!(validate(new org.ovirt.engine.core.bll.validator.VmValidator(getSourceVmFromDb()).vmNotLocked()))) { return false; } if (!(super.canDoAction())) { return false; } for (org.ovirt.engine.core.common.businessentities.DiskImage diskImage : getDiskImagesToBeCloned()) { if (!(shouldAdjustImageConfiguration(diskImage))) { if (!(checkImageConfiguration(diskImage))) { return false; } } } return true; }	@java.lang.Override protected boolean canDoAction() { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksToCheck = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getDiskDao().getAllForVm(getSourceVmFromDb().getId()), true, false, true); org.ovirt.engine.core.bll.validator.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.DiskImagesValidator(disksToCheck); if (!(validate(diskImagesValidator.diskImagesNotLocked()))) { return false; } java.util.Set<org.ovirt.engine.core.compat.Guid> storageIds = org.ovirt.engine.core.bll.ImagesHandler.getAllStorageIdsForImageIds(disksToCheck); org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator storageValidator = new org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator(org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getStoragePoolId(), storageIds); if (!(validate(storageValidator.allDomainsExistAndActive()))) { return false; } if (!(validate(new org.ovirt.engine.core.bll.validator.VmValidator(getSourceVmFromDb()).vmNotLocked()))) { return false; } if (!(super.canDoAction())) { return false; } for (org.ovirt.engine.core.common.businessentities.DiskImage diskImage : getDiskImagesToBeCloned()) { if (!(checkImageConfiguration(diskImage))) { return false; } } return true; }
@org.junit.Test public void testHexCompressedIsValid() { assertTrue(underTest.isValid("1234::cdef", mockConstraintValidatorContext)); }	@org.junit.Test public void testHexCompressedIsValid() { doTest("1234::cdef", true); }
public org.ovirt.engine.core.bll.ValidationResult changeProtocolAllowed() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE).when(((((getHost().getProtocol()) != (oldHost.getProtocol())) && ((oldHost.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance))) && ((oldHost.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallingOS)))); }	public org.ovirt.engine.core.bll.ValidationResult changeProtocolAllowed() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.VDS_STATUS_NOT_VALID_FOR_UPDATE).when(((((getHost().getProtocol()) != (oldHost.getProtocol())) && ((oldHost.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance))) && ((oldHost.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallingOS)))); }
private void processSingleClusterChanges(org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param) { final java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> setupNetworksParams = new java.util.ArrayList(createNetworkClustersToSetupNetworksParametersTransformer().transform(param.getAttachments(), param.getDetachments(), param.getUpdates())); org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, setupNetworksParams); }	private void processSingleClusterChanges(org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param) { final java.util.List<org.ovirt.engine.core.common.action.ActionParametersBase> setupNetworksParams = new java.util.ArrayList(createNetworkClustersToSetupNetworksParametersTransformer().transform(param.getAttachments(), param.getDetachments(), param.getUpdates())); org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); runInternalMultipleActions(ActionType.PersistentHostSetupNetworks, setupNetworksParams); }
public java.lang.Boolean getHighlyAvailableIsActive() { return highlyAvailableIsActive; }	public boolean getHighlyAvailableIsActive() { return highlyAvailableIsActive; }
@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value, org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor widget) { super.onRemove(value, widget); com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, null); model.updateSuggestedLabels(); }	@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value, org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor widget) { super.onRemove(value, widget); getModel().updateSuggestedLabels(); }
private void checkForDuplicatedPicSlot(org.ovirt.engine.core.common.businessentities.VmDevice vmDeviceToHotplug) { java.util.regex.Pattern slotSearchPattern = java.util.regex.Pattern.compile(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.PCI_SLOT_REGEX); java.lang.String slotToHotplug = getPciSlotFromDevice(vmDeviceToHotplug, slotSearchPattern); if (slotToHotplug == null) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> allVmDevices = org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVmDeviceDao().getVmDeviceByVmId(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm().getId()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : allVmDevices) { if ((vmDevice.getIsManaged()) && (!(vmDeviceToHotplug.getId().equals(vmDevice.getId())))) { java.lang.String deviceSlot = getPciSlotFromDevice(vmDevice, slotSearchPattern); if ((deviceSlot != null) && (slotToHotplug.equals(deviceSlot))) { vmDeviceToHotplug.setAddress(""); return; } } } }	private void clearAddressIfPciSlotIsDuplicated(org.ovirt.engine.core.common.businessentities.VmDevice vmDeviceToHotplug) { if (searchForDuplicatesWithExistingVmDevices(vmDeviceToHotplug)) { vmDeviceToHotplug.setAddress(""); } }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model) { this.model = model; }	@java.lang.Override public void edit(T model) { this.model = model; }
protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { return java.util.stream.IntStream.range(0, NAMES.length).filter(( x) -> !notFound).boxed().collect(java.util.stream.Collectors.toMap(this::getEntity, java.util.ArrayList::new)); }	protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { if (notFound) { return java.util.Collections.emptyMap(); } return java.util.stream.IntStream.range(0, NAMES.length).boxed().collect(java.util.stream.Collectors.toMap(this::getEntity, java.util.ArrayList::new)); }
@java.lang.Override protected java.lang.String getText(org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession entity) { return entity.getStatus().toString(); }	@java.lang.Override public java.lang.String render(org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionDetails object) { return object.getCrawlStatus().toString(); }
@java.lang.Override public org.ovirt.engine.api.resource.externalhostproviders.ErrataResource getErrataResource() { return inject(new org.ovirt.engine.api.restapi.resource.externalhostproviders.BackendHostErrataResource(id)); }	@java.lang.Override public org.ovirt.engine.api.resource.externalhostproviders.KatelloErrataResource getKatelloErrataResource() { return inject(new org.ovirt.engine.api.restapi.resource.externalhostproviders.BackendHostKatelloErrataResource(id)); }
protected void testListAllConsoleAware(boolean allContent) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.setUpUriExpectations(null); if (allContent) { java.util.List<java.lang.String> populates = new java.util.ArrayList<java.lang.String>(); populates.add("true"); expect(httpHeaders.getRequestHeader(BackendResource.POPULATE)).andReturn(populates).anyTimes(); org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.setUpGetConsoleExpectations(new int[]{ 0, 1, 2 }); setUpGetVirtioScsiExpectations(new int[]{ 0, 1, 2 }); setUpGetSoundcardExpectations(new int[]{ 0, 1, 2 }); org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.setUpGetRngDeviceExpectations(new int[]{ 0, 1, 2 }); } setUpGetGraphicsExpectations(3); setUpGetBallooningExpectations(3); org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.setUpQueryExpectations(""); collection.setUriInfo(uriInfo); verifyCollection(org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.getCollection()); }	protected void testListAllConsoleAware(boolean allContent) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.setUpUriExpectations(null); if (allContent) { java.util.List<java.lang.String> populates = new java.util.ArrayList<java.lang.String>(); populates.add("true"); expect(httpHeaders.getRequestHeader(BackendResource.POPULATE)).andReturn(populates).anyTimes(); org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.setUpGetConsoleExpectations(new int[]{ 0, 1, 2 }); setUpGetVirtioScsiExpectations(new int[]{ 0, 1, 2 }); setUpGetSoundcardExpectations(new int[]{ 0, 1, 2 }); org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.setUpGetRngDeviceExpectations(new int[]{ 0, 1, 2 }); setUpGetBallooningExpectations(3); } setUpGetGraphicsExpectations(3); org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.setUpQueryExpectations(""); collection.setUriInfo(uriInfo); verifyCollection(org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.getCollection()); }
@java.lang.Override protected void updateMoveOrCopySingleDiskParameters(java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters, org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> selectedStorageDomains = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(); if ((diskModel.getStorageDomain().getSelectedItems()) != null) { selectedStorageDomains.addAll(diskModel.getStorageDomain().getSelectedItems()); } else { selectedStorageDomains.add(((org.ovirt.engine.core.common.businessentities.StorageDomain) (diskModel.getStorageDomain().getSelectedItem()))); } for (org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain : selectedStorageDomains) { addMoveOrCopyParameters(parameters, Guid.Empty, storageDomain.getId(), ((org.ovirt.engine.core.common.businessentities.DiskImage) (diskModel.getDisk()))); } }	@java.lang.Override protected java.lang.String getNoActiveSourceDomainMessage() { return constants.noActiveSourceStorageDomainAvailableMsg(); }
public java.lang.String getpm_type() { return mVdsStatic.getPmType(); }	public java.lang.String getPmType() { return mVdsStatic.getPmType(); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> getHostsAndVmsForClusters(java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> vdsGroups) throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDSGroup> groupsById = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup : vdsGroups) { groupsById.put(vdsGroup.getId(), vdsGroup); } java.sql.Connection c = getJdbcTemplate().getDataSource().getConnection(); java.sql.Array groups = c.createArrayOf("uuid", groupsById.keySet().toArray()); java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroupHostsAndVMs> dataList = getCallsHandler().executeReadList("GetHostsAndVmsForClusters", org.ovirt.engine.core.dao.VdsGroupDAOImpl.VDSGroupHostsAndVMsRowMapper.instance, getCustomMapSqlParameterSource().addValue("vds_group_ids", groups)); c.close(); for (org.ovirt.engine.core.common.businessentities.VDSGroupHostsAndVMs groupDetail : dataList) { groupsById.get(groupDetail.getVdsGroupId()).setGroupHostsAndVms(groupDetail); } return vdsGroups; }	protected java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> getHostsAndVmsForClusters(java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> vdsGroups) throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDSGroup> groupsById = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup : vdsGroups) { groupsById.put(vdsGroup.getId(), vdsGroup); } java.sql.Connection c = getJdbcTemplate().getDataSource().getConnection(); java.sql.Array groups = c.createArrayOf("uuid", groupsById.keySet().toArray()); java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroupHostsAndVMs> dataList = getCallsHandler().executeReadList("GetHostsAndVmsForClusters", org.ovirt.engine.core.dao.VdsGroupDaoImpl.VDSGroupHostsAndVMsRowMapper.instance, getCustomMapSqlParameterSource().addValue("vds_group_ids", groups)); c.close(); for (org.ovirt.engine.core.common.businessentities.VDSGroupHostsAndVMs groupDetail : dataList) { groupsById.get(groupDetail.getVdsGroupId()).setGroupHostsAndVms(groupDetail); } return vdsGroups; }
@javax.ws.rs.PUT @org.jboss.resteasy.annotations.providers.jaxb.Formatted @java.lang.Override @javax.ws.rs.Consumes({ ApiMediaType.APPLICATION_XML, ApiMediaType.APPLICATION_JSON, ApiMediaType.APPLICATION_X_YAML }) public org.ovirt.engine.api.model.VirtualNumaNode update(org.ovirt.engine.api.model.VirtualNumaNode device);	@javax.ws.rs.PUT @org.jboss.resteasy.annotations.providers.jaxb.Formatted @javax.ws.rs.Consumes({ ApiMediaType.APPLICATION_XML, ApiMediaType.APPLICATION_JSON, ApiMediaType.APPLICATION_X_YAML }) public org.ovirt.engine.api.model.VirtualNumaNode update(org.ovirt.engine.api.model.VirtualNumaNode node);
@com.google.gwt.i18n.client.Constants.DefaultStringValue("VNIC Profiles") java.lang.String vnicProfilesTitle();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("VNIC Profiles") java.lang.String vnicProfilesTitle();
protected org.ovirt.engine.core.common.businessentities.DiskImage getDiskImage() { if ((diskImage) == null) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getDiskDao().get(org.ovirt.engine.core.bll.ExportRepoImageCommand.getParameters().getImageGroupID()); if ((disk != null) && ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE))) { diskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)); } } return diskImage; }	protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImage() { if ((diskImage) == null) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getDiskDao().get(org.ovirt.engine.core.bll.ExportRepoImageCommand.getParameters().getImageGroupID()); if ((disk != null) && ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE))) { diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); } } return diskImage; }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getJobMessageProperties() { if ((jobProperties) == null) { jobProperties = new java.util.HashMap<java.lang.String, java.lang.String>(); org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.bll.gluster.GlusterCommandBase.getVdsGroup(); jobProperties.put(VdcObjectType.VdsGroups.name().toLowerCase(), (vdsGroup == null ? null : vdsGroup.getname())); } return jobProperties; }	@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getJobMessageProperties() { if ((jobProperties) == null) { jobProperties = new java.util.HashMap<java.lang.String, java.lang.String>(); org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.bll.gluster.GlusterCommandBase.getVdsGroup(); jobProperties.put(GlusterConstants.CLUSTER, (vdsGroup == null ? null : vdsGroup.getname())); } return jobProperties; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmStatic mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { final org.ovirt.engine.core.common.businessentities.VmStatic entity = new org.ovirt.engine.core.common.businessentities.VmStatic(); map(rs, entity); entity.setId(getGuidDefaultEmpty(rs, "vm_guid")); entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id")); entity.setName(rs.getString("vm_name")); entity.setVmtGuid(getGuidDefaultEmpty(rs, "vmt_guid")); entity.setInitialized(rs.getBoolean("is_initialized")); entity.setCpuPinning(rs.getString("cpu_pinning")); entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags")); entity.setInstanceTypeId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("instance_type_id"))); entity.setImageTypeId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("image_type_id"))); entity.setOriginalTemplateName(rs.getString("original_template_name")); entity.setOriginalTemplateGuid(getGuid(rs, "original_template_id")); entity.setUseLatestVersion(((rs.getObject("template_version_number")) == (org.ovirt.engine.core.dao.VmStaticDAODbFacadeImpl.USE_LATEST_VERSION_NUMBER_INDICATOR))); entity.setIconId(getGuid(rs, org.ovirt.engine.core.dao.VmStaticDAODbFacadeImpl.ICON_ID_COLUMN)); return entity; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmStatic mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { final org.ovirt.engine.core.common.businessentities.VmStatic entity = new org.ovirt.engine.core.common.businessentities.VmStatic(); map(rs, entity); entity.setId(getGuidDefaultEmpty(rs, "vm_guid")); entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id")); entity.setName(rs.getString("vm_name")); entity.setVmtGuid(getGuidDefaultEmpty(rs, "vmt_guid")); entity.setInitialized(rs.getBoolean("is_initialized")); entity.setCpuPinning(rs.getString("cpu_pinning")); entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags")); entity.setInstanceTypeId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("instance_type_id"))); entity.setImageTypeId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("image_type_id"))); entity.setOriginalTemplateName(rs.getString("original_template_name")); entity.setOriginalTemplateGuid(getGuid(rs, "original_template_id")); entity.setUseLatestVersion(((rs.getObject("template_version_number")) == (org.ovirt.engine.core.dao.VmStaticDAODbFacadeImpl.USE_LATEST_VERSION_NUMBER_INDICATOR))); return entity; }
java.lang.String overrideRadioButtonPanelWidth();	java.lang.String additionalFeaturesExpanderContent();
@java.lang.Override protected void updateNetworkChangability() { super.updateNetworkChangability(); if (!(getNetwork().getIsChangable())) { return; } boolean isPlugged = isPluggedBeforeAndAfterEdit(); boolean isPortMirroring = ((java.lang.Boolean) (getPortMirroring().getEntity())); if ((isVmUp()) && isPlugged) { if (hotUpdateSupported) { if (isPortMirroring) { getNetwork().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hotNetworkUpdateNotSupportedWithPortMirroring()); } else if (selectedNetworkExternal()) { getNetwork().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hotNetworkUpdateNotSupportedExternalNetworks()); } else { return; } } else { getNetwork().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().hotNetworkUpdateNotSupported(getClusterCompatibilityVersion().toString())); } getNetwork().setIsChangable(false); initSelectedNetwork(); } }	@java.lang.Override protected void updateNetworkChangability() { super.updateNetworkChangability(); if (!(getNetwork().getIsChangable())) { return; } boolean isPlugged = isPluggedBeforeAndAfterEdit(); boolean isPortMirroring = ((java.lang.Boolean) (getPortMirroring().getEntity())); if ((isVmUp()) && isPlugged) { if (!(hotUpdateSupported)) { getNetwork().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().hotNetworkUpdateNotSupported(getClusterCompatibilityVersion().toString())); } else if (selectedNetworkExternal()) { getNetwork().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hotNetworkUpdateNotSupportedExternalNetworks()); } else if (isPortMirroring) { getNetwork().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hotNetworkUpdateNotSupportedWithPortMirroring()); } else { return; } getNetwork().setIsChangable(false); getNetworkBehavior().initSelectedNetwork(getNetwork(), getNic()); } }
void updateVdsNeedsReinstall(org.ovirt.engine.core.compat.Guid vdsStaticId, boolean vdsNeedsReinstall);	void updateReinstallRequired(org.ovirt.engine.core.compat.Guid vdsStaticId, boolean reinstallRequired);
protected java.lang.String buildTooltipText() { java.lang.String tooltipText = null; java.lang.StringBuilder sb = new java.lang.StringBuilder(); if (!(getCommand().getExecuteProhibitionReasons().isEmpty())) { for (java.lang.String reason : getCommand().getExecuteProhibitionReasons()) { sb.append(reason).append(", "); } tooltipText = sb.toString(); if ((tooltipText.length()) != 0) { tooltipText = tooltipText.substring(0, ((tooltipText.length()) - 2)); } } return tooltipText; }	protected java.lang.String buildTooltipText() { java.lang.StringBuilder tooltipText = new java.lang.StringBuilder(); if (!(getCommand().getExecuteProhibitionReasons().isEmpty())) { for (java.lang.String reason : getCommand().getExecuteProhibitionReasons()) { if ((tooltipText.length()) == 0) { tooltipText.append(", "); } tooltipText.append(reason); } } return tooltipText.toString(); }
protected <E> void setUpGetEntityExpectations(java.lang.String query, org.ovirt.engine.core.common.interfaces.SearchType type, E entity) throws java.lang.Exception { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = mock(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); org.ovirt.engine.core.common.queries.SearchParameters params = new org.ovirt.engine.core.common.queries.SearchParameters(query, type); when(backend.runQuery(eq(VdcQueryType.Search), eqSearchParams(params))).thenReturn(queryResult); when(queryResult.getSucceeded()).thenReturn(true); java.util.List<E> entities = new java.util.ArrayList<>(); entities.add(entity); when(queryResult.getReturnValue()).thenReturn(entities); }	protected <E> void setUpGetEntityExpectations(java.lang.String query, org.ovirt.engine.core.common.interfaces.SearchType type, E entity) throws java.lang.Exception { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = mock(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); org.ovirt.engine.core.common.queries.SearchParameters params = new org.ovirt.engine.core.common.queries.SearchParameters(query, type); when(backend.runQuery(eq(VdcQueryType.Search), eqSearchParams(params))).thenReturn(queryResult); enqueueInteraction(() -> verify(backend, atLeastOnce()).runQuery(eq(VdcQueryType.Search), eqSearchParams(params))); when(queryResult.getSucceeded()).thenReturn(true); java.util.List<E> entities = new java.util.ArrayList<>(); entities.add(entity); when(queryResult.getReturnValue()).thenReturn(entities); }
public void alertVolumeSnapshotLimitsReached(final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { if (!(alertVolumeSnapshotHardLimitReached(volume))) { alertVolumeSnapshotSoftLimitReached(volume); } }	public void alertVolumeSnapshotLimitsReached(final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { if (!(alertVolumeLimitReached(volume, true))) { alertVolumeLimitReached(volume, false); } }
private java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus> updateStatusToUnknown(java.util.Collection<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService> existingServices) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus> serviceStatusMap = new java.util.HashMap<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus>(); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService> servicesToUpdate = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService existingService : existingServices) { existingService.setStatus(GlusterServiceStatus.UNKNOWN); servicesToUpdate.add(existingService); serviceStatusMap.put(existingService.getServiceName(), existingService.getStatus()); } getGlusterServerServiceDao().updateAll(servicesToUpdate); return serviceStatusMap; }	private java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus> updateStatusToUnknown(java.util.Collection<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService> existingServices) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus> serviceStatusMap = new java.util.HashMap<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService existingService : existingServices) { existingService.setStatus(GlusterServiceStatus.UNKNOWN); serviceStatusMap.put(existingService.getServiceName(), existingService.getStatus()); } getGlusterServerServiceDao().updateAll(existingServices); return serviceStatusMap; }