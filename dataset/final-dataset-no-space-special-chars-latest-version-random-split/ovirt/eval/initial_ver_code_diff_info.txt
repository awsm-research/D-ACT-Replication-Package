private void addSELinuxModes(org.ovirt.engine.api.model.VersionCaps version, org.ovirt.engine.core.common.businessentities.SELinuxMode[] values) { if (org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual(version, org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_5)) { version.setSelinuxModes(new org.ovirt.engine.api.model.SELinuxModes()); for (org.ovirt.engine.core.common.businessentities.SELinuxMode mode : values) { version.getSelinuxModes().getSELinuxModes().add(mode.toString()<START_MOD>.toLowerCase()<END_MOD>); } } }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Option java.lang.String resetOptionVolumeTitle();
private boolean executeWithoutTransaction() { boolean functionReturnValue = false; boolean exceptionOccurred = true; try { logRunningCommand(); if (hasTaskHandlers()) { getCurrentTaskHandler().execute(); } else { executeCommand(); } functionReturnValue = getSucceeded(); exceptionOccurred = false; } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { log.error(java.lang.String.format( %1$s throw Vdc Bll exception. With error message %2$s getClass().getName(), e.getMessage())); if (log.isDebugEnabled()) { log.debug(java.lang.String.format( %1$s throw Vdc Bll exception getClass().getName()), e); } processExceptionToClient(new org.ovirt.engine.core.common.errors.VdcFault(e, e.getVdsError().getCode())); } catch (java.lang.RuntimeException e) { processExceptionToClient(new org.ovirt.engine.core.common.errors.VdcFault(e, org.ovirt.engine.core.common.errors.VdcBllErrors.ENGINE)); log.error(java.lang.String.format( %1$s throw exception getClass().getName()), e); } finally { if (<START_MOD>(!(getReturnValue().getVdsmTaskIdList().isEmpty())) && ((org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(getCommandId())) == null)) { persistCommand(getParameters().getParentCommand(), ((getCallBack()) != null)); } if (<END_MOD>!exceptionOccurred) { setCommandExecuted(); } if (exceptionOccurred || (!(getSucceeded()))) { clearChildAsyncTasksWithOutVdsmId(); setCommandStatus(CommandStatus.FAILED); setSucceeded(false); compensate(); } else { if (((((getTaskType()) == (org.ovirt.engine.core.common.asynctasks.AsyncTaskType.notSupported)) && (getReturnValue().getVdsmTaskIdList().isEmpty())) && ((getCallBack()) == null)) && ((commandStatus) == (org.ovirt.engine.core.compat.CommandStatus.ACTIVE))) { setCommandStatus(CommandStatus.SUCCEEDED); } cleanUpCompensationData(); } } return functionReturnValue; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>UpdateStorageDomainCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_UPDATE_STORAGE_DOMAIN : org.ovirt.engine.core.common.AuditLogType.USER_UPDATE_STORAGE_DOMAIN_FAILED; }
public void testCannotUpdateOSNotSupportVirtioScsi() { prepareVmToPassValidate(); group.setCompatibilityVersion(Version.v4_0); when(command.isVirtioScsiEnabledForVm(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(true); when(osRepository.getDiskInterfaces(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(new java.util.ArrayList(java.util.<START_MOD>Collections<END_MOD>.<START_MOD>singletonList<END_MOD>("VirtIO"))); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI); }
public void setHighlyAvailableIsActive(boolean value) { mVdsStatistics.setHighlyAvailableIsActive(value); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.ProcessOvfUpdateForStoragePoolCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.OVF_UPDATE, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
@org.junit.Test public void diskImagesDontExist() { doReturn(false).when(validator).isDiskExists(disk1.getId()); doReturn(false).when(validator).isDiskExists(disk2.getId()); assertThat(validator.diskImagesNotExist(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISKS_NOT_EXIST)); }
@org.junit.Test public void unmanagedVlanAddedToNic() { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic("nic0", null); mockExistingIfaces(nic); java.lang.String networkName = "net"; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(nic, createVlan(nic.getName(), 100, networkName))); validateAndExpectViolation(helper, <START_MOD>EngineMessages<END_MOD>.NETWORKS_DONT_EXIST_IN_CLUSTER, networkName); }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { java.lang.Object[] array = ((java.lang.Object[]) (result.getState())); org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel) (array[0])); org.ovirt.engine.core.common.businessentities.StorageDomain sdToAdd1 = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (array[1])); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = result.getReturnValue(); boolean success = (returnVal != null) && (returnVal.getSucceeded()); if (success) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (storageListModel.getWindow())); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = model.getDataCenter().getSelectedItem(); if (!(dataCenter.getId().equals(StorageModel.UnassignedDataCenterId))) { storageListModel.attachStorageToDataCenter(sdToAdd1.getId(), dataCenter.getId(), model.getActivateDomain().getEntity()); onFinish(storageListModel.context, true, storageListModel.storageModel, null); } else { postImportFileStorage(storageListModel.context, true, storageListModel.storageModel, null); } } else { postImportFileStorage(storageListModel.context, false, storageListModel.storageModel, ""); <START_MOD>org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.RemoveStorageServerConnection, new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase(fileConnection, hostId), null, this); <END_MOD>} }
public java.util.List<java.lang.Long> allocateAvailableMacs(int numberOfMacs) { if ((getAvailableMacsCount()) < numberOfMacs) { throw new org.ovirt.engine.core.common.errors.<START_MOD>EngineException<END_MOD>(org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD>.MAC_POOL_NO_MACS_LEFT); } final java.util.List<java.lang.Long> result = new java.util.ArrayList<>(numberOfMacs); int remainingMacs = numberOfMacs; while (remainingMacs > 0) { final org.ovirt.engine.core.bll.network.macpoolmanager.Range rangeWithAvailableMac = getRangeWithAvailableMac(); org.apache.commons.lang.Validate.notNull(rangeWithAvailableMac); final java.util.List<java.lang.Long> allocatedMacs = rangeWithAvailableMac.allocateMacs(remainingMacs); remainingMacs -= allocatedMacs.size(); result.addAll(allocatedMacs); } return result; }
private boolean stopSuspendedVm() { boolean returnVal = false; org.ovirt.engine.core.bll.StopVmCommandBase.setVm(null); org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getstatus(); <START_MOD>org.ovirt.engine.core.bll.StopVmCommandBase.getVm().setstatus(VMStatus.ImageLocked); <END_MOD>if ((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getstatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked)) { <START_MOD>updateVmStatus<END_MOD>(VMStatus.ImageLocked); if ((!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(org.ovirt.engine.core.bll.StopVmCommandBase.getVm().gethibernation_vol_handle()))) && (handleHibernatedVm(org.ovirt.engine.core.bll.StopVmCommandBase.getActionType(), false))) { returnVal = true; } else { <START_MOD>updateVmStatus<END_MOD>(vmStatus); } } return returnVal; }
public boolean isFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(isFieldUpdatable(name))) { if (((fieldContainer != null) && ((container) != null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values != null) ? values.contains(name) : false; if ((!returnValue) && hotsetEnabled) { returnValue = isHotSetField(name); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn( '{}' can not be updated when status is '{}' name, status); } } return returnValue; }
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to override the current opened Remote Log-In session") java.lang.String allowReconnectToVmRoleTreeTooltip();<END_MOD>
<START_MOD>public int getMedia_id() { return media_id; }<END_MOD>
public void isClusterEmpty(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid <START_MOD>clusterId<END_MOD>) { <START_MOD>runBooleanQueryByEntityId<END_MOD>(VdcQueryType.IsClusterEmpty, <START_MOD>aQuery<END_MOD>, <START_MOD>clusterId<END_MOD>); }
<START_MOD>@org.junit.Before public void setUp() { lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setId("lun1"); lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setId("lun2"); lun3 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun3.setId("lun3"); }<END_MOD>
@java.lang.Override public void setMainTabSelectedItem(org.ovirt.engine.core.common.businessentities.VDSGroup selectedItem) { org.ovirt.engine.ui.webadmin.section.main.view.tab.cluster.SubTabClusterGeneralView.Driver.driver.edit(getDetailModel()); formBuilder.<START_MOD>update<END_MOD>(getDetailModel()); if (selectedItem.supportsVirtService()) { if (selectedItem.getselection_algorithm().equals(VdsSelectionAlgorithm.PowerSave)) { setVisibility(true); leftSlider.setValue(selectedItem.getlow_utilization()); rightSlider.setValue(selectedItem.gethigh_utilization()); policyTimeLabel.setText((((((constants.clusterPolicyForTimeLabel()) +     + (selectedItem.getcpu_over_commit_duration_minutes())) +     + (constants.clusterPolicyMinTimeLabel()))); policyFieldLabel.setText(constants.clusterPolicyPowSaveLabel()); } else if (selectedItem.getselection_algorithm().equals(VdsSelectionAlgorithm.EvenlyDistribute)) { setVisibility(true); leftSlider.setVisible(false); leftDummySlider.setVisible(true); rightSlider.setValue(selectedItem.gethigh_utilization()); policyTimeLabel.setText((((((constants.clusterPolicyForTimeLabel()) +     + (selectedItem.getcpu_over_commit_duration_minutes())) +     + (constants.clusterPolicyMinTimeLabel()))); policyFieldLabel.setText(constants.clusterPolicyEvenDistLabel()); } else { setVisibility(false); policyFieldLabel.setText(constants.clusterPolicyNoneLabel()); } } policyPanel.setVisible(selectedItem.supportsVirtService()); volumeSummaryPanel.setVisible(selectedItem.supportsGlusterService()); }
@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { return; } super.syncSearch(); org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> domains = ((org.ovirt.engine.core.common.<START_MOD>queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue(); for (org.ovirt.engine.core.common.<END_MOD>businessentities.StorageDomain domain : domains) { java.lang.String guid = ((domain.getStoragePoolId()) != null) ? domain.getStoragePoolId().toString() : Guid.Empty.toString(); domain.setQueryableId((((domain.getId()) + "_") + guid)); } setItems(domains); setIsEmpty(((getItems().size()) == 0)); } }; org.ovirt.engine.core.common.queries.IdQueryParameters tempVar = new org.ovirt.engine.core.common.queries.IdQueryParameters(getEntity().getId()); tempVar.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainListById, tempVar, _asyncQuery); }
<START_MOD>private static boolean isVmRunningOnHost(org.ovirt.engine.core.compat.Guid hostId) { return !(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().getAllRunningForVds(hostId).isEmpty()); }<END_MOD>
<START_MOD>public void setDisablePowerManagementPolicy(boolean disablePowerManagementPolicy) { mVdsDynamic.setDisablePowerManagementPolicy(disablePowerManagementPolicy); }<END_MOD>
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { java.lang.String propName = args.propertyName; if ("IsLinuxOS".equals(propName)) { changeApplicationLevelVisibility(linuxBootOptionsPanel, vm.getIsLinuxOS()); } }
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Erratum.class, to = org.ovirt.engine.api.model.Erratum.class) public static org.ovirt.engine.api.model.Erratum map(org.ovirt.engine.api.model.Erratum model, org.ovirt.engine.core.common.businessentities.Erratum template) { org.ovirt.engine.core.common.businessentities.Erratum entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.Erratum(); if (model.isSetId()) { entity.setId(model.getId()); } if (model.isSetTitle()) { entity.setTitle(model.getTitle()); } if (model.isSetSummary()) { entity.setSummary(model.getSummary()); } if (model.isSetSolution()) { entity.setSolution(model.getSolution()); } if (model.isSetDescription()) { entity.setDescription(model.getDescription()); } if (model.isSetIssued()) { entity.setIssued(model.getIssued().toGregorianCalendar().getTime()); } if (model.isSetSeverity()) { entity.setSeverity(org.ovirt.engine.core.common.businessentities.Erratum.ErrataSeverity.byDescription(model.getSeverity())); } if (model.isSetType()) { entity.setType(org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.byDescription(model.getType())); } if ((model.isSetPackages()) && (!(model.getPackages().getPackages().isEmpty()))) { entity.setPackages(new java.util.ArrayList<java.lang.String>(model.getPackages().getPackages().size())); for (java.lang.Package p : model.getPackages().getPackages()) { entity.getPackages().add(p.getName()); } } return entity; }<END_MOD>
<START_MOD>public org.ovirt.engine.core.common.businessentities.UnmanagedNetwork getUnmanagedNetworkByName(java.lang.String networkName) { for (org.ovirt.engine.core.common.businessentities.UnmanagedNetwork unmanagedNetwork : getUnmanagedNetworks()) { if (unmanagedNetwork.getNetworkName().equals(networkName)) { return unmanagedNetwork; } } return null; }<END_MOD>
@java.lang.Override protected void onEntityChanged() { if ((getEntity()) != null) { org.ovirt.engine.core.common.businessentities.VM vm = getEntity().getVm(); setItems(vm.getInterfaces()); } else { setItems(null); } }
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultStringValue("LUN device is already in use.") java.lang.String alreadyInUseLUN();<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Role java.lang.String newRoleTitle();
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetEquallyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); assertThat(factory.createDecoratedPool(macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); assertThat(factory.createDecoratedPool(macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(macPoolDecoratorA), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor.capture()); java.util.List<java.util.concurrent.locks.ReentrantReadWriteLock> capturesValues = captor.getAllValues(); assertEquals(capturesValues.get(0), capturesValues.get(1)); }
public java.lang.String getDisplayValue() { if (isDefault()) { final java.lang.String defaultTimeZoneKey = <START_MOD>((java.lang.String) (<END_MOD>org.ovirt.engine.ui.uicommonweb.<START_MOD>dataprovider<END_MOD>.<START_MOD>AsyncDataProvider<END_MOD>.<START_MOD>getConfigValuePreConverted<END_MOD>(timeZoneType<START_MOD>.getDefaultTimeZoneConfigurationKey()))<END_MOD>); return <START_MOD>timeZoneType<END_MOD>.<START_MOD>getTimeZoneList<END_MOD>().get(defaultTimeZoneKey); } else { return <START_MOD>timeZoneType<END_MOD>.<START_MOD>getTimeZoneList<END_MOD>().get(timeZoneKey); } }
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(org.ovirt.engine.core.bll.pm.VAR__ACTION__STOP); }
@java.lang.Override protected void executeQueryCommand() { java.<START_MOD>util.List<org.ovirt.engine.core.extensions.mgr.ExtensionProxy> extensions<END_MOD> = <START_MOD>getExtensionsManager().getExtensionsByService(org.ovirt.engine.api.extensions.aaa.Authz.class.getName()); java.util.List<END_MOD><java.lang.String><START_MOD> names = new java.util.ArrayList(extensions.size()); for (<END_MOD>org.ovirt.engine.core.extensions.mgr.ExtensionProxy<START_MOD> extension : extensions) { names.add(org.ovirt.engine.core<END_MOD>.aaa.<START_MOD>AuthzUtils<END_MOD>.getName(extension<START_MOD>)); } if (org.ovirt.engine.core.bll.GetDomainListQuery.getParameters().getFilterInternalDomain()<END_MOD>) { names.<START_MOD>remove(org.ovirt.engine.core.bll.GetDomainListQuery.INTERNAL<END_MOD>); } <START_MOD>java.util.Collections.sort(names); <END_MOD>org.ovirt.engine.core.bll.GetDomainListQuery.<START_MOD>getQueryReturnValue().setReturnValue(names<END_MOD>); }
@org.junit.Test public void testInterfaceByNameExistsWhenInterfaceIsNull() throws java.lang.Exception { assertThat(new org.ovirt.engine.core.bll.validator.HostInterfaceValidator(null).interfaceByNameExists(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.HOST_NETWORK_INTERFACE_NOT_EXIST)); }
private java.lang.String getMigrationNetworkIp() { org.ovirt.engine.core.common.businessentities.network.Network migrationNetwork = null; java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> allNetworksInCluster = org.ovirt.engine.core.bll.MigrateVmCommand.getNetworkDao().getAllForCluster(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getClusterId()); for (org.ovirt.engine.core.common.businessentities.network.Network tempNetwork : allNetworksInCluster) { if (tempNetwork.getCluster().isMigration()) { migrationNetwork = tempNetwork; break; } } if (migrationNetwork != null) { <START_MOD>final java.lang.String migrationDestinationIpv4Address = findMigrationIpAddress(migrationNetwork<END_MOD>, <START_MOD>VdsNetworkInterface::getIpv4Address); if (migrationDestinationIpv4Address !=<END_MOD> null) { return <START_MOD>migrationDestinationIpv4Address; } final java.lang.String migrationDestinationIpv6Address = findMigrationIpAddress(migrationNetwork, VdsNetworkInterface::getIpv6Address); if (migrationDestinationIpv6Address != null) {<END_MOD> return <START_MOD>migrationDestinationIpv6Address; }<END_MOD> } return null; }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The Storage Pool has running tasks.") java.lang.String CANNOT_REINIT_SPM_STORAGE_POOL_HAS_RUNNING_TASKS();<END_MOD>
private java.lang.String getMigrationNetworkIp() { if (!(org.ovirt.engine.core.common.FeatureSupported.migrationNetwork(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()))) { return null; } org.ovirt.engine.core.common.businessentities.network.Network migrationNetwork = null; java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> allNetworksInCluster = org.ovirt.engine.core.bll.MigrateVmCommand.getNetworkDao().getAllForCluster(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getVdsGroupId()); for (org.ovirt.engine.core.common.businessentities.network.Network tempNetwork : allNetworksInCluster) { if (tempNetwork.getCluster().isMigration()) { migrationNetwork = tempNetwork; break; } } if (migrationNetwork != null) { if ((getMigrationNetworkAddress(org.ovirt.engine.core.bll.MigrateVmCommand.getVds().getId(), migrationNetwork.getName())) == null) { return null; } return getMigrationNetworkAddress(getDestinationVds().getId(), migrationNetwork.getName()); } return null; }
<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn setVolumeGeneration(java.lang.String jobId, java.util.Map<?, ?> volumeInfo);<END_MOD>
public static java.lang.String renderVmNamesList(java.util.List<java.lang.String> names) { return <START_MOD>names<END_MOD>.<START_MOD>stream()<END_MOD>.<START_MOD>collect(java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>stream<END_MOD>.<START_MOD>Collectors<END_MOD>.<START_MOD>joining<END_MOD>(   }
<START_MOD>protected<END_MOD> <START_MOD>void<END_MOD> <START_MOD>setForeignMenuData<END_MOD>(org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>restapi<END_MOD>.<START_MOD>HasForeignMenuData nativeImpl, java.lang.String engineCertificate<END_MOD>) <START_MOD>{ nativeImpl.setEngineHost<END_MOD>(<START_MOD>Window<END_MOD>.<START_MOD>Location.getHost()); nativeImpl.setVmId(<END_MOD>getEntity()<START_MOD>.getId()); nativeImpl.setTrustStore(engineCertificate); nativeImpl.setAdmin(org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoggedInUser().isAdmin(<END_MOD>)); }
@java.lang.Override public java.lang.Void runInTransaction() { getImageStorageDomainMapDao().remove(new org.ovirt.engine.core.common.businessentities.ImageStorageDomainMapId(getParameters().getImageId(), getParameters().getStorageDomainId())); <START_MOD>org.ovirt.engine.core.bll.ImagesHandler.updateAllDiskImageSnapshotsStatusWithCompensation<END_MOD>(<START_MOD>getRelevantDiskImage().getId(), getRelevantDiskImage().getImageStatus(), null, null<END_MOD>); return null; }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getUnderUtilizedCPUHosts(java.util.Collection<org.ovirt.engine.core.common.businessentities.VDS> relevantHosts, final int lowUtilization, final int minVmCount, final int cpuOverCommitDurationMinutes) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> underUtilizedHosts = org.ovirt.engine.core.utils.linq.LinqUtils.filter(relevantHosts, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.VDS>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.VDS p) { return ((((p.getUsageCpuPercent()) + (<START_MOD>org.ovirt.engine.core.bll.scheduling.policyunits.CpuAndMemoryBalancingPolicyUnit.<END_MOD>calcSpmCpuConsumption(p))) < lowUtilization) && ((p.getVmCount()) >= minVmCount)) && (((p.getCpuOverCommitTimestamp()) == null) || (((getTime().getTime()) - (p.getCpuOverCommitTimestamp().getTime())) < (java.util.concurrent.TimeUnit.MINUTES.toMillis(cpuOverCommitDurationMinutes)))); } }); if ((underUtilizedHosts.size()) > 1) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getVdsGroupDao().get(underUtilizedHosts.get(0).getVdsGroupId()); java.util.Collections.sort(underUtilizedHosts, new org.ovirt.engine.core.bll.scheduling.utils.VdsCpuUsageComparator(((cluster != null) && (cluster.getCountThreadsAsCores())))); } return underUtilizedHosts; }
@java.lang.Override public void templateWithVersion_SelectedItemChanged() { super.templateWithVersion_SelectedItemChanged(); org.ovirt.engine.core.common.businessentities.VmTemplate template = ((getModel().getTemplateWithVersion().getSelectedItem()) != null) ? getModel().getTemplateWithVersion().getSelectedItem().getTemplateVersion() : null; if (template == null) { return; } setupWindowModelFrom(template); doChangeDefautlHost(template.getDedicatedVmForVds()); <START_MOD>org.ovirt.engine.core.compat.Guid dedicatedHostsGuid = (template.getDedicatedVmForVdsList().isEmpty()) ? null : template.getDedicatedVmForVdsList().get(0); doChangeDefautlHost(dedicatedHostsGuid); core : enable = $missing$; org.ovirt.engine.ui.uicommonweb.models.vms.pinning to; org.ovirt.engine.ui.uicommonweb.models.vms.hosts <END_MOD>updateRngDevice<START_MOD> = <END_MOD>template.getId(); getModel().getCustomPropertySheet().deserialize(template.getCustomProperties()); }
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultStringValue("Shut down all VMs before changing the cluster version.") java.lang.String cannotClusterVersionChangeWithActiveVm();<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { if (org.ovirt.engine.core.bll.ShutdownVmCommand.shouldSkipCommandExecutionCached()) { return org.ovirt.engine.core.bll.ShutdownVmCommand.logCommandExecutionSkipped( VM } if (org.ovirt.engine.core.bll.ShutdownVmCommand.getSuspendedVm()) { <START_MOD>if (!(<END_MOD>org.ovirt.engine.core.bll.ShutdownVmCommand.getSucceeded()<START_MOD>)) { return org.ovirt.engine.core.common.AuditLogType.USER_STOP_SUSPENDED_VM_FAILED; } return (org.ovirt.engine.core.bll.ShutdownVmCommand.getReason()) == null<END_MOD> ? org.ovirt.engine.core.common.AuditLogType.USER_STOP_SUSPENDED_VM : org.ovirt.engine.core.common.AuditLogType.<START_MOD>USER_STOP_SUSPENDED_VM_WITH_REASON; } if (!(<END_MOD>org.ovirt.engine.core.bll.ShutdownVmCommand.getSucceeded()<START_MOD>)) { return org.ovirt.engine.core.common.AuditLogType.USER_FAILED_SHUTDOWN_VM; } return (org.ovirt.engine.core.bll.ShutdownVmCommand.getReason()) == null<END_MOD> ? org.ovirt.engine.core.common.AuditLogType.USER_INITIATED_SHUTDOWN_VM : org.ovirt.engine.core.common.AuditLogType.<START_MOD>USER_INITIATED_SHUTDOWN_VM_WITH_REASON; }<END_MOD>
private void queryNetworkAttachments() { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.setModel(this); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValueObj) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValueObj)); java.lang.Object returnValue2 = returnValue.getReturnValue(); <START_MOD>hostSetupNetworksParametersData.newOrModifiedNetworkAttachments<END_MOD> = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>) (returnValue2)); queryVfsConfig(); } }; org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters(vds.getId()); params.setRefresh(false); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetNetworkAttachmentsByHostId, params, asyncQuery); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterHookUpdate(java.lang.String glusterCommand, java.lang.String stage, java.lang.String hookName, java.lang.String content, java.lang.String checksum) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterHook.update").withParameter("glusterCmd", glusterCommand).withParameter("hookLevel", stage).withParameter("hookName", hookName).withParameter("hookData", content).withParameter("hookMd5Sum", checksum).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
<START_MOD>public void setGlusterVolume(org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus glusterVolume) { this.glusterVolume = glusterVolume; for (org.ovirt.engine.ui.frontend.server.dashboard.maps.GlusterVolumeStatusMap status : org.ovirt.engine.ui.frontend.server.dashboard.maps.GlusterVolumeStatusMap.values()) { java.util.List<java.lang.String> statusValues = java.util.Arrays.asList(status.getStringValues()); glusterVolume.setStatusValues(status.name().toLowerCase(), statusValues); } }<END_MOD>
@org.junit.Test public void lunAlreadyPartOfStorageDomains() { org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id(org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.GUIDS[0].toString()); lun1.setStorageDomainId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id(org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.GUIDS[1].toString()); lun2.setStorageDomainId(org.ovirt.engine.core.compat.Guid.newGuid()); doReturn(lunDao).when(cmd).getLunDao(); when(lunDao.getAll()).thenReturn(java.util.Arrays.asList(lun1, lun2)); java.util.List<java.lang.String> specifiedLunIds = java.util.Collections.singletonList(org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.GUIDS[0].toString()); assertTrue(cmd.isLunsAlreadyInUse(specifiedLunIds)); java.util.List<java.lang.String> messages = cmd.getReturnValue().getCanDoActionMessages(); assertEquals(messages.size(), 2); assertEquals(messages.get(0), <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_LUNS_ALREADY_PART_OF_STORAGE_DOMAINS.toString()); assertEquals(messages.get(1), java.lang.String.format( %1$s cmd.getFormattedLunId(lun1, lun1.getStorageDomainName()))); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), diskImages, lunDisks, interfaces, vmBase, clusterName, affinityGroups<START_MOD>, dbUsers<END_MOD>); }
<START_MOD>@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.GetDirectoryGroupsForUserQuery.getQueryReturnValue().setReturnValue(getDirectoryUser(org.ovirt.engine.core.bll.GetDirectoryGroupsForUserQuery.getDbFacade().getDbUserDao().get(org.ovirt.engine.core.bll.GetDirectoryGroupsForUserQuery.getUserID()))); }<END_MOD>
public org.ovirt.engine.core.<START_MOD>authentication<END_MOD>.<START_MOD>DirectoryEntryStatus<END_MOD> getStatus() { return status; }
public void <START_MOD>dataCenterWithClusterSelectedItemChanged() { org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithClusterEntityModel dataCenterWithClusterEntityModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithClusterEntityModel) (getModel().getDataCenterWithClustersList().getSelectedItem())); if (dataCenterWithClusterEntityModel == null) { return; } org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = dataCenterWithClusterEntityModel.getDataCenter(); if (dataCenter == null) { return; } getModel().setIsHostAvailable(((dataCenter.getstorage_pool_type()) != (org.ovirt.engine.core.common.businessentities.StorageType.LOCALFS))); if ((dataCenter.getQuotaEnforcementType()) != (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED)) { getModel().getQuota().setIsAvailable(true); } else { getModel().getQuota().setIsAvailable(false); } }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( are about to attach the network to all the selected clusters and to detach the network from all the unselected clusters. you sure you want to continue? java.lang.String youAreAboutToAttachDetachNetworkToFromTheClustersMsg();
<START_MOD>@java.lang.Override protected void endSuccessfully() { super.endSuccessfully(); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(this, AuditLogType.USER_UPDATED_MOM_POLICIES); }<END_MOD>
@java.lang.Override protected boolean canDoAction() { boolean retValue; org.ovirt.engine.core.compat.Guid subscriberId = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getsubscriber_id(); java.lang.String eventName = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getevent_up_name(); org.ovirt.engine.core.common.EventNotificationMethod eventNotificationMethod = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getevent_notification_method(); java.util.List<org.ovirt.engine.core.common.businessentities.event_subscriber> subscriptions = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getEventDao().getAllForSubscriber(subscriberId); if (org.ovirt.engine.core.bll.AddEventSubscriptionCommand.IsAlreadySubscribed(subscriptions, subscriberId, eventName, eventNotificationMethod)) { addCanDoActionMessage(VdcBllMessages.EN_ALREADY_SUBSCRIBED); retValue = false; } else { if (eventNotificationMethod != null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().get(subscriberId); if (user == null) { addCanDoActionMessage(VdcBllMessages.USER_MUST_EXIST_IN_DB); retValue = false; } else { retValue = ValidateAdd(eventNotificationMethod, org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber(), user); } } else { addCanDoActionMessage(VdcBllMessages.<START_MOD>EN_UNKNOWN_NOTIFICATION_METHOD<END_MOD>); retValue = false; } } return retValue; }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD>> getForAdElement(org.ovirt.engine.core.compat.Guid id) { org.hibernate.Query query = getSession().createQuery(( roles role, permissions perms   + ( perms.roleId = role.id   +   perms.adElementId = :id query.setParameter("id", id); return query.list(); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The following VM is actively using the Logical Network: ${VM_NAME}. Please stop the VM and try again.") java.lang.String NETWORK_CANNOT_DETACH_NETWORK_USED_BY_SINGLE_VM();<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Attached") java.lang.String attachedHost();
private boolean isNetworkDeviceFree(org.ovirt.engine.core.common.businessentities.HostDevice networkDevice) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vfNic = getNicByPciDevice(networkDevice); return ((<START_MOD>(<END_MOD>vfNic != null) && (!(isNetworkAttached(vfNic)))) && (!(isVlanDeviceAttached(vfNic)))<START_MOD>) && (!(isPartOfBond(vfNic)))<END_MOD>; }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The network interface type is not compatible with the selected operating system.") java.lang.String VM_INTERFACE_VERSION_IS_NOT_SUPPORTED();<END_MOD>
<START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.scheduling.PolicyUnit object) { java.lang.String tooltipContent = null; if (object.isInternal()) { tooltipContent = constants.internalPolicyUnit(); } else { tooltipContent = constants.externalPolicyUnit(); } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(tooltipContent); }<END_MOD>
<START_MOD>public void setPmPort(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Integer> value) { port = value; }<END_MOD>
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.<START_MOD>HostStorage<END_MOD>.class, to = org.ovirt.engine.core.common.businessentities.storage.LUNs.class) public static org.ovirt.engine.core.common.businessentities.storage.LUNs map(org.ovirt.engine.api.model.<START_MOD>HostStorage<END_MOD> model, org.ovirt.engine.core.common.businessentities.storage.LUNs template) { org.ovirt.engine.core.common.businessentities.storage.LUNs entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.storage.LUNs(); if (model.isSetLogicalUnits()) { org.ovirt.engine.api.model.LogicalUnit logicalUnit = model<START_MOD>.getLogicalUnits()<END_MOD>.getLogicalUnits().get(0); entity.setLUN_id(logicalUnit.getId()); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>(); connections.add(org.ovirt.engine.api.restapi.types.StorageLogicalUnitMapper.map(logicalUnit, null)); entity.setLunConnections(connections); } if (model.isSetType()) { org.ovirt.engine.api.model.StorageType storageType = org.ovirt.engine.api.model.StorageType.fromValue(model.getType()); if (storageType != null) { entity.setLunType(org.ovirt.engine.api.restapi.types.StorageDomainMapper.map(storageType, null)); } } return entity; }
protected void addErrorMessages(org.ovirt.engine.core.common.errors.EngineMessage messageActionTypeParameter, org.ovirt.engine.core.common.errors.EngineMessage messageReason) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__BOOKMARK); <START_MOD>addValidateMessage<END_MOD>(messageActionTypeParameter); <START_MOD>addValidateMessage<END_MOD>(messageReason); }
private static void mapQosToEntity(org.ovirt.engine.api.model.Qos model, org.ovirt.engine.core.common.businessentities.qos.QosBase entity<START_MOD>) {<END_MOD> org.ovirt.engine.api.model.QosType qosType<START_MOD> = ((model.getType()) == null) ? (entity.getQosType()) == null ? null : org.ovirt.engine.api.restapi.types.QosTypeMapper.map(entity.getQosType(), null) : model.getType(); switch (qosType<END_MOD>) { case STORAGE : org.ovirt.engine.api.restapi.types.QosMapper.mapStorageQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.qos.StorageQos) (entity))); break; case CPU : org.ovirt.engine.api.restapi.types.QosMapper.mapCpuQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.qos.CpuQos) (entity))); break; case NETWORK : org.ovirt.engine.api.restapi.types.QosMapper.mapNetworkQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.network.NetworkQoS) (entity))); break; case HOSTNETWORK : org.ovirt.engine.api.restapi.types.QosMapper.mapHostNetworkQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.network.HostNetworkQos) (entity))); break; default : break; } }
<START_MOD>@java.lang.Override protected void onBind() { super.onBind(); M listModel = listModelProvider.getModel(); listModel.getSelectedItemChangedEvent().addListener(( ev, sender, args) -> updateSelectedRows()); listModel.getSelectedItemsChangedEvent().addListener(( ev, sender, args) -> updateSelectedRows()); }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot create bond ${bond} containing network interface ${nic}. Network interface has an unmanaged network attached.") java.lang.String ACTION_TYPE_FAILED_HOST_NETWORK_CREATE_BOND_WITH_UNMANAGED_NETWORK();<END_MOD>
public java.lang.String getGroupIds() { java.<START_MOD>util.List<org.ovirt.engine.core.common.utils.ExternalId> ids = new java.util.ArrayList<org.ovirt.engine.core.common.utils.ExternalId>(mGroups.size()); for (org.ovirt.engine.core.common.businessentities.LdapGroup group : mGroups.values()) { org.ovirt.engine.core.common.utils.ExternalId id = group.getid(); if (id != null) { ids.add(id); } } java.<END_MOD>lang.<START_MOD>StringBuilder buffer = new java.lang.StringBuilder(); for (int i = 0; i < (ids.size()); i++) {<END_MOD> if (<START_MOD>i <END_MOD>> <START_MOD>0) { buffer<END_MOD>.append(<START_MOD>','); } org.ovirt.engine.core.common.utils.ExternalId id = ids.get(i); buffer.append(id); } return buffer<END_MOD>.toString()<START_MOD>; }<END_MOD>
<START_MOD>protected com.google.gwt.safehtml.shared.SafeHtml getImageSafeHtml(org.gwtbootstrap3.client.ui.constants.IconType iconType) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString((("<i class='fa " + (iconType.getCssName())) + "' style='font-size:16px;color:orange'></i>")); }<END_MOD>
@java.lang.Override public void onSuccess(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase> operation, final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer( sucessfully executed runAction, determining result! handleActionResult(actionType, parameters, result, (callback != null ? callback : org.ovirt.engine.ui.frontend.Frontend.NULLABLE_ASYNC_CALLBACK), state, showErrorDialog); org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent.fire(this, <START_MOD>new org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent.Builder(<END_MOD>state<START_MOD>, true).action(true).build()<END_MOD>); }
public static boolean isHostedEngineDomain(final org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { <START_MOD>java.util.List<<END_MOD>org.ovirt.engine.core.common.<START_MOD>businessentities<END_MOD>.<START_MOD>VM> vms = org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.<START_MOD>core.dal.dbbroker.DbFacade.getInstance<END_MOD>().<START_MOD>getVmDao().getAllForStorageDomain<END_MOD>(storageDomain.<START_MOD>getId()); if ((vms == null) || (vms.isEmpty())) { return false; } java.util.List<org.ovirt.engine.core.compat.Guid> hostedEngineVm = vms.stream().filter(( vm) -> vm.isHostedEngine()).map(VM::getId).collect(java.util.stream.Collectors.toList()); return !(hostedEngineVm.isEmpty<END_MOD>()); }
<START_MOD>@java.lang.Override public java.lang.String getOldName() { return oldVm.getVmName(); }<END_MOD>
@java.lang.Override protected void readOsSection(XmlNode section) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(section.Attributes.get("ovf:id").getValue())); XmlNode node = section.SelectSingleNode("Description"); if (node != null) { if (node.InnerText.equals(java.lang.String.valueOf(OsRepository.OLD_OTHER_ID))) { node.InnerText = java.lang.String.valueOf(OsRepository.DEFAULT_OS); } _vmTemplate.setOsId(osRepository.getOsIdByUniqueName(node.InnerText)); } <START_MOD>_vmTemplate.setArchitecture(ArchitectureType.x86_64); <END_MOD>}
private void UpdateActionAvailability() { java.util.List tempVar = getSelectedItems(); java.util.ArrayList selectedItems = ((java.util.ArrayList) ((tempVar != null) ? tempVar : new java.util.ArrayList())); boolean anyEngine = false; for (java.lang.Object item : selectedItems) { org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity <END_MOD>network = ((org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>) (item)); if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(network.getname(), org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterNetworkListModel.ENGINE_NETWORK)) { anyEngine = true; break; } } getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed((((selectedItems.size()) > 0) && (!anyEngine))); }
<START_MOD>@org.junit.Test public void testResolveNetworkExclusivenessValidatorEmptyInput() { final org.ovirt.engine.core.bll.validator.network.NetworkExclusivenessValidator actual = underTest.resolveNetworkExclusivenessValidator(java.util.Collections.<org.ovirt.engine.core.compat.Version>emptySet()); org.junit.Assert.assertThat(actual, sameInstance(legacyNetworkExclusivenessValidator)); }<END_MOD>
<START_MOD>private void initVncKeyboardLayout() { final java.util.List<java.lang.String> layouts = ((java.util.List<java.lang.String>) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.VncKeyboardLayoutValidValues))); final java.util.ArrayList<java.lang.String> vncKeyboardLayoutItems = new java.util.ArrayList<java.lang.String>(); vncKeyboardLayoutItems.add(null); vncKeyboardLayoutItems.addAll(layouts); getVncKeyboardLayout().setItems(vncKeyboardLayoutItems); getVncKeyboardLayout().setIsChangable(false); }<END_MOD>
@java.lang.Override public int compareTo(org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics o) { return org.ovirt.engine.core.common.businessentities.comparators.<START_MOD>BusinessEntityComparator<END_MOD>.<START_MOD>newGuidInstance<END_MOD>().compare(this, o); }
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultMessage("{0} bytes have been read in the current profiling interval out of {1} bytes during profiling") java.lang.String bytesReadInCurrentProfileInterval(java.lang.String currentBytesRead, java.lang.String totalBytes);<END_MOD>
<START_MOD>public void setTimeZone(java.util.TimeZone timeZone) { this.timeZone = timeZone; }<END_MOD>
<START_MOD>@java.lang.Override public void addVmToAffinityLabels() { mapAffinityLabels().forEach(( affinityLabel) -> { affinityLabel.getVms().add(getParameters().getVm().getId()); labelDao.update(affinityLabel); }); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmTemplate getByName(java.lang.String name, org.ovirt.engine.core.compat.Guid datacenterId, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { return getCallsHandler().executeRead("GetVmTemplateByVmtName", org.ovirt.engine.core.dao.<START_MOD>VmTemplateDAOImpl<END_MOD>.VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("vmt_name", name).addValue("storage_pool_id", datacenterId).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }
<START_MOD>public java.lang.String getConcurrentListUnSelectedItem() { return getConcurrentSelectList().getItems().toArray(new java.lang.String[getConcurrentSelectList().getItems().size()])[0]; }<END_MOD>
<START_MOD>protected<END_MOD> void <START_MOD>updateDefaultTimeZone() { final org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase.TimezoneType timezoneType = getTimeZoneType(); if ((cachedDefaultTimeZoneKeys.get(timezoneType)) == null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetDefaultTimeZone(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase) (target)); cachedDefaultTimeZoneKeys.put(timezoneType, (<END_MOD>(java.lang.String<START_MOD>) (returnValue))); behavior.postUpdateDefaultTimeZone(); } }, <END_MOD>getModel().<START_MOD>getHash()))<END_MOD>; } else { <START_MOD>postUpdateDefaultTimeZone(); } }<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response performRemove(java.lang.String id) { return performAction(VdcActionType.RemovePermission, new org.ovirt.engine.core.common.action.<START_MOD>PermissionsOperationsParameters<END_MOD>(getPermission(id))); }
private void doInit(org.ovirt.engine.api.extensions.ExtMap inputMap, org.ovirt.engine.api.extensions.ExtMap outputMap) { context = inputMap.<org.ovirt.engine.api.extensions.ExtMap>get(Base.InvokeKeys.CONTEXT); configuration = context.<java.util.Properties>get(Base.ContextKeys.CONFIGURATION<START_MOD>); org.ovirt.engine.extensions.aaa.builtin.kerberosldap.Config.setConfiguration(((java.util.Properties) (configuration.get("config")))<END_MOD>); broker = org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapFactory.getInstance(getAuthzName()); context.<java.util.List<java.lang.String>>get(Base.ContextKeys.CONFIGURATION_SENSITIVE_KEYS).add("config.authn.user.password"); context.mput(Base.ContextKeys.AUTHOR,   oVirt Project   Authn (Built-in)   2.0 "http://www.ovirt.org").mput(Base.ContextKeys.VERSION, "N/A").mput(Authn.ContextKeys.CAPABILITIES, Authn.Capabilities.AUTHENTICATE_PASSWORD).mput(Base.ContextKeys.BUILD_INTERFACE_VERSION, Base.INTERFACE_VERSION_CURRENT); org.ovirt.engine.extensions.aaa.builtin.kerberosldap.KerberosManager.getInstance(); org.ovirt.engine.extensions.aaa.builtin.kerberosldap.UsersDomainsCacheManagerService.getInstance().init(); }
<START_MOD>public static java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsForSession(java.lang.String engineSessionId) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.coco.getCommandIdsForSession(engineSessionId); }<END_MOD>
@java.lang.Override protected void showErrataListWithDetailsPopup(<START_MOD>java.lang.String filterCommand<END_MOD>) { <START_MOD>super.showErrataListWithDetailsPopup(filterCommand,<END_MOD> org.ovirt.engine.ui.uicommonweb.models.HostErrataCountModel.messages.errataForHost(getName())); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.Cluster model, org.ovirt.engine.api.model.Cluster transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getComment(), transform.getComment()); assertNotNull(transform.getCpu()); assertEquals(model.getCpu().getId(), transform.getCpu().getId()); assertNotNull(transform.getDataCenter()); assertEquals(model.getDataCenter().getId(), transform.getDataCenter().getId()); assertNotNull(transform.getSchedulingPolicy()); assertEquals(model.getSchedulingPolicy().getPolicy(), transform.getSchedulingPolicy().getPolicy()); assertEquals(model.getErrorHandling().getOnError(), transform.getErrorHandling().getOnError()); assertNotNull(transform.getMemoryPolicy()); assertNotNull(transform.getMemoryPolicy().getTransparentHugepages()); assertEquals(transform.getMemoryPolicy().getTransparentHugepages().isEnabled(), transform.getMemoryPolicy().getTransparentHugepages().isEnabled()); assertEquals(model.isVirtService(), transform.isVirtService()); assertEquals(model.isGlusterService(), transform.isGlusterService()); assertEquals(model.isTunnelMigration(), transform.isTunnelMigration()); assertEquals(model.isTrustedService(), transform.isTrustedService()); assertEquals(model.isBallooningEnabled(), transform.isBallooningEnabled()); assertEquals(model.<START_MOD>isKsmEnabled(), transform.isKsmEnabled()); assertEquals(model.<END_MOD>getDisplay().getProxy(), transform.getDisplay().getProxy()); }
<START_MOD>@java.lang.Override public boolean areAllVfsFree(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { java.util.List<org.ovirt.engine.core.common.businessentities.HostDevice> deviceList = getDevicesByHostId(nic.getVdsId()); org.ovirt.engine.core.common.businessentities.HostDevice pciDevice = getPciDeviceByNic(nic, deviceList); if (!(isSriovDevice(pciDevice))) { throw new java.lang.UnsupportedOperationException(); } java.util.List<org.ovirt.engine.core.common.businessentities.HostDevice> vfs = getVfs(pciDevice, deviceList); org.ovirt.engine.core.common.businessentities.HostDevice nonFreeVf = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(vfs, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.HostDevice>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.HostDevice vf) { return !(isVfFree(vf)); } }); return nonFreeVf == null; }<END_MOD>
private static boolean addQosForDevice(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.compat.Version vdsGroupCompatibilityVersion) { org.ovirt.engine.core.compat.Guid qosId = vnicProfile.getNetworkQosId(); if (qosId != null) { if (!(org.ovirt.engine.core.common.FeatureSupported.networkQoS(vdsGroupCompatibilityVersion))) { return false; } java.util.Map<java.lang.String, java.lang.Object> specParams = ((java.util.Map<java.lang.String, java.lang.Object>) (struct.get(VdsProperties.SpecParams))); if (specParams == null) { specParams = new java.util.HashMap<>(); struct.put(VdsProperties.SpecParams, specParams); } org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS networkQoS = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getQosDao().get(qosId); org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper qosMapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper(specParams, VdsProperties.QOS_INBOUND, VdsProperties.QOS_OUTBOUND); qosMapper.serialize(networkQoS); } return true; }
@java.lang.Override public void run() { try { java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> vmsToMigrate = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStaticDao().getAllWithFailbackByVds(vds.getId()); if (<START_MOD>!<END_MOD>(vmsToMigrate.<START_MOD>isEmpty())) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); executionContext.setMonitored(true); org.ovirt.engine.core.bll.Backend.getInstance().runInternalMultipleActions(VdcActionType.MigrateVmToServer, new<END_MOD> java.util.ArrayList<START_MOD>(createVmToServerParametersList<END_MOD>(vmsToMigrate, vds<START_MOD>))<END_MOD>, executionContext); } } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.VdsEventListener.log.errorFormat( to initialize Vds on up. Error: {0} e); } }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.VmDevice entity) { return createIdParameterMapper(entity.getId()).addValue("device", entity.getDevice()).addValue("type", entity.getType().getValue()).addValue("address", entity.getAddress()).addValue("boot_order", entity.getBootOrder()).addValue("spec_params", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(entity.getSpecParams())).addValue("is_managed", entity.getIsManaged()).addValue("is_plugged", entity.getIsPlugged()).addValue("is_readonly", entity.getIsReadOnly()).addValue("alias", entity.getAlias()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(entity.getCustomProperties())).addValue("snapshot_id", entity.getSnapshotId()).addValue("logical_name", entity.getLogicalName())<START_MOD>.addValue("is_scsi_reservation_used", entity.isScsiReservationUsed())<END_MOD>; }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if (!(super.<START_MOD>validate<END_MOD>())) { return false; } if (((getAllUpServers()) == null) || (getAllUpServers().isEmpty())) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_NO_UP_SERVER_FOUND); return false; } return true; }
protected void addVmNetwork() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> nics = getVmInterfaces(); org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(getMacPool()); vmInterfaceManager.sortVmNics(nics, getVmInterfaceDevices()); java.util.List<java.lang.String> macAddresses = getMacPool().allocateMacAddresses(nics.size()); for (int i = 0; i < (nics.size()); ++i) { org.ovirt.engine.core.common.businessentities.network.VmNic iface = nics.get(i); org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.compat.Guid.newGuid(); srcVmNicIdToTargetVmNicIdMapping.put(iface.getId(), id); iface.setId(id); iface.setMacAddress(macAddresses.get(i)); iface.setSpeed(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(iface.getType()).getSpeed()); iface.setVmTemplateId(null); iface.setVmId(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getId()); updateProfileOnNic(iface); org.ovirt.engine.core.bll.AddVmCommand.getVmNicDao().save(iface); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(iface); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkStatisticsDao().save(iface.getStatistics()); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(iface.getStatistics()); } }
private void oSType_SelectedItemChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.Integer osType = ((java.lang.Integer) (getOSType().getSelectedItem())); setIsWindowsOS(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType(osType)); setIsLinuxOS(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isLinuxOsType(osType)); getInitrd_path().setIsChangable(getIsLinuxOS()); getInitrd_path().setIsAvailable(getIsLinuxOS()); getKernel_path().setIsChangable(getIsLinuxOS()); getKernel_path().setIsAvailable(getIsLinuxOS()); getKernel_parameters().setIsChangable(getIsLinuxOS()); getKernel_parameters().setIsAvailable(getIsLinuxOS()); getDomain().setIsChangable(getIsWindowsOS()); getBehavior().updateDefaultTimeZone(); <START_MOD>updateWatchdogModels(osType); <END_MOD>}
<START_MOD>public static void runAndAssertValidateSuccess(org.ovirt.engine.core.bll.CommandBase<?> command) { boolean validate = command.validate(); java.util.List<java.lang.String> validateMessages = command.getReturnValue().getValidateMessages(); assertTrue(java.text.MessageFormat.format("Command''s validate expected to succeed, but failed, messages are: {0}", validateMessages), validate); assertTrue(java.text.MessageFormat.format("Command''s validate succeeded, but added the following messages: {0}", validateMessages), validateMessages.isEmpty()); }<END_MOD>
<START_MOD>@java.lang.Override public void rollback() { super.rollback(); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDC.getInstance().removePool(getMacPool().getId()); }<END_MOD>
<START_MOD>@javax.ws.rs.Path("applications") public org.ovirt.engine.api.resource.DevicesResource<org.ovirt.engine.api.model.Application, org.ovirt.engine.api.model.Applications> getApplicationsResource();<END_MOD>
@org.junit.Test public void onlyOutboundAveragePresent() { qos.setOutboundAverage(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.<START_MOD>BANDWIDTH<END_MOD>); valuesPresentTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_MISSING_VALUES)); }
<START_MOD>@org.junit.Test public void vlanIdTakenByDifferentNetwork() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network otherNetwork = new org.ovirt.engine.core.common.businessentities.network.Network(); otherNetwork.setVlanId(DEFAULT_VLAN_ID); otherNetwork.setId(new org.ovirt.engine.core.compat.Guid(OTHER_GUID)); java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>(); networks.add(otherNetwork); vlanIdAvailableTest(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.NETWORK_VLAN_IN_USE), networks); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = executeVdsCommand(); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.compat.Guid taskId = org.ovirt.engine.core.bll.SpmCommand.getAsyncTaskId(); org.ovirt.engine.core.bll.SpmCommand.getReturnValue().getInternalVdsmTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.SpmCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.SpmCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.SpmCommand.getParameters().getDestinationImageId())); org.ovirt.engine.core.bll.SpmCommand.setSucceeded(true); } }<END_MOD>
@org.junit.Test public void testIscsiLunCanBeAdded() { org.ovirt.engine.core.common.businessentities.LunDisk disk = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createISCSILunDisk(); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createParameters(); parameters.setDiskInfo(disk); initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid(), parameters); when(diskLunMapDAO.getDiskIdByLunId(disk.getLun().getLUN_id())).thenReturn(null); assertTrue( failed for valid iscsi lun command.checkIfLunDiskCanBeAdded(<START_MOD>diskValidator<END_MOD>)); }
public void setKsmCpuPercent(java.lang.Integer value) { mVdsStatistics.setKsmCpuPercent(value); }
<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.GlusterHooksListReturnForXmlRpc glusterHooksList();<END_MOD>
<START_MOD>protected void reestablishConnectionIfNeeded() { if ((((org.ovirt.engine.core.bll.VdsCommand.getVds().getProtocol()) != (org.ovirt.engine.core.common.businessentities.VdsProtocol.STOMP)) && (org.ovirt.engine.core.common.FeatureSupported.jsonProtocol(org.ovirt.engine.core.bll.VdsCommand.getVds().getVdsGroupCompatibilityVersion()))) && ((org.ovirt.engine.core.bll.VdsCommand.getVds().getHostOs()) != null)) { org.ovirt.engine.core.bll.VdsCommand.getVds().setProtocol(VdsProtocol.STOMP); org.ovirt.engine.core.bll.VdsCommand.getVdsStaticDao().save(org.ovirt.engine.core.bll.VdsCommand.getVds().getStaticData()); initializeVds(); } }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.common.DefaultStringValue("Modifying the settings below can lead to a boot failure. " + "Please consult the documentation before doing any changes.") java.lang.String kernelCmdlineWarning();<END_MOD>
<START_MOD>private void auditInvalidInterfaces(java.util.List<java.lang.String> invalidNetworkNames, java.util.List<java.lang.String> invalidIfaceNames) { if ((invalidNetworkNames.size()) > 0) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("Networks", org.apache.commons.lang.StringUtils.join(invalidNetworkNames, ',')); logable.addCustomValue("Interfaces", org.apache.commons.lang.StringUtils.join(invalidIfaceNames, ',')); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.IMPORTEXPORT_SNAPSHOT_VM_INVALID_INTERFACES); } }<END_MOD>
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = new org.ovirt.engine.core.common.action.ActionReturnValue(); final org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getVdsId(); final java.lang.String sessionId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getSessionId(); <START_MOD>returnValue = executeVdsFenceAction(vdsId, sessionId, ActionType.StopVds); <END_MOD>if (<START_MOD>(org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.ActionType.VdsNotRespondingTreatment)) { updateHostInFenceFlow(vdsId, true); } if (wasSkippedDueToPolicy(returnValue)) { org.ovirt.engine.core.bll.pm.RestartVdsResult restartVdsResult = <END_MOD>new org.ovirt.engine.core.bll.pm.<START_MOD>RestartVdsResult(); restartVdsResult.setSkippedDueToFencingPolicy(true); setActionReturnValue(restartVdsResult); org.ovirt.engine.core.bll.pm.RestartVdsCommand<END_MOD>.setSucceeded(<START_MOD>false); setVdsStatus(VDSStatus.NonResponsive); return<END_MOD>; } else <START_MOD>if (returnValue.getSucceeded()) { executeFenceVdsManuallyAction(vdsId, sessionId);<END_MOD> returnValue = executeVdsFenceAction(vdsId, sessionId, ActionType.<START_MOD>StartVds); setSucceeded(returnValue.getSucceeded()); } else { handleError(); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); }<END_MOD> if (<START_MOD>!(org.ovirt.engine.core.bll.pm.RestartVdsCommand.getSucceeded())) { log.warn( host <END_MOD>action<START_MOD> failed, updating host '{}' to '{}' vdsId, VDSStatus.NonResponsive.name()); setVdsStatus(VDSStatus.NonResponsive); }<END_MOD> updateHostInFenceFlow(vdsId, false); <START_MOD>}<END_MOD>
private void InitVdsBroker() { org.ovirt.engine.core.vdsbroker.VdsManager.log.infoFormat( vdsBroker ({0},{1}) <START_MOD>vds<END_MOD>.getHostName(), <START_MOD>vds<END_MOD>.getPort()); <START_MOD>vdsProxy<END_MOD> = new org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerWrapper(<START_MOD>vds<END_MOD>.getHostName(), <START_MOD>vds<END_MOD>.getPort()); }
java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> getAllForCluster(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered);
public static org.ovirt.engine.core.common.businessentities.LdapUser <START_MOD>getUserById<END_MOD>(org.ovirt.engine.core.<START_MOD>common<END_MOD>.<START_MOD>utils.ExternalId<END_MOD> <START_MOD>id<END_MOD>) { org.ovirt.engine.core.common.businessentities.LdapUser retVal = null; org.ovirt.engine.core.common.businessentities.DbUser dbUser = org.ovirt.engine.core.bll.adbroker.InternalBrokerUtils.getDbUserDAO().<START_MOD>getByExternalId<END_MOD>(<START_MOD>org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.AdminDomain), id<END_MOD>); if (dbUser != null) { retVal = new org.ovirt.engine.core.common.businessentities.LdapUser(dbUser); } return retVal; }
@org.junit.Test public void calculateNetworkImplementationDetailsNetworkQosOutOfSync() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice(); org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS qos = createQos(); qos.setOutboundAverage(30); qos.setOutboundPeak(30); qos.setOutboundBurst(30); calculateNetworkImplementationDetailsAndAssertSync(iface, false, iface.getNetworkName(), iface.isBridged(), iface.getMtu(), iface.getVlanId(), qos); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType parse(java.lang.CharSequence text) throws java.text.ParseException { if (org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(text.toString())) { return null; } return org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType.<START_MOD>fromValue<END_MOD>(text.toString().toUpperCase()); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.VDSGroup.class, to = org.ovirt.engine.api.model.SchedulingPolicy.class) public static org.ovirt.engine.api.model.SchedulingPolicy map(org.ovirt.engine.core.common.businessentities.VDSGroup entity, org.ovirt.engine.api.model.SchedulingPolicy template) { org.ovirt.engine.api.model.SchedulingPolicy model = (template != null) ? template : new org.ovirt.engine.api.model.SchedulingPolicy(); if ((<START_MOD>(entity.getClusterPolicyName()) != null) && (!(entity.getClusterPolicyName().toLowerCase().equals("none")))<END_MOD>) { model.setPolicy(<START_MOD>entity.getClusterPolicyName(<END_MOD>)); if (<START_MOD>(entity.getClusterPolicyProperties()) != null<END_MOD>) { model.setThresholds(new org.ovirt.engine.api.model.SchedulingPolicyThresholds()); <START_MOD>java.lang.String lowUtilization = entity.getClusterPolicyProperties().get("LowUtilization"); java.lang.String highUtilization = entity.getClusterPolicyProperties().get("HighUtilization"); java.lang.String cpuOverCommitDurationMinutes = entity.getClusterPolicyProperties().get("CpuOverCommitDurationMinutes"); if (lowUtilization != null) {<END_MOD> model.getThresholds().setLow(<START_MOD>java.lang.Integer.parseInt(lowUtilization)); } if (highUtilization != null) {<END_MOD> model.getThresholds().setHigh(<START_MOD>java.lang.Integer.parseInt(highUtilization)); } if (cpuOverCommitDurationMinutes != null) { int duration = (java.lang.Integer.parseInt(cpuOverCommitDurationMinutes)) * 60<END_MOD>; model.getThresholds().setDuration(<START_MOD>duration)<END_MOD>; } } } return model; }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.<START_MOD>VdcReturnValueBase returnValueBase = result.getReturnValue(); final org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel userPortalListModel = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel) (result.getState())); if ((returnValueBase != null) && (returnValueBase.getSucceeded())) { org.ovirt.engine.core.common.action.<END_MOD>VmManagementParametersBase param = getUpdateVmParameters(applyCpuChangesLater); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UpdateVm, param, new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModelNetworkAsyncCallback(model, defaultNetworkCreatingManager, gettempVm().getId()), this); }<START_MOD> else { userPortalListModel.getWindow().stopProgress(); } }<END_MOD>
private void activate() { for (org.ovirt.engine.core.extensions.mgr.ExtensionManager.ExtensionEntry entry : loadedEntries.values()) {<START_MOD> entry.enabled = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getBoolean(("ENGINE_EXTENSION_ENABLE_" + (entry.getName())), entry.enabled);<END_MOD> if (entry.enabled) { try { entry.extension = ((org.ovirt.engine.core.extensions.mgr.Extension) (lookupService(org.ovirt.engine.core.extensions.mgr.Extension.class, entry.getConfig().getProperty(org.ovirt.engine.core.extensions.mgr.ExtensionManager.CLASS), entry.getConfig().getProperty(org.ovirt.engine.core.extensions.mgr.ExtensionManager.MODULE)).newInstance())); entry.extension.setContext(entry.context); entry.extension.init(); activatedEntries.put(entry.getName(), entry); org.ovirt.engine.core.utils.collections.MultiValueMapUtils.addToMap(entry.getProvides(), entry, providesEntries); } catch (java.lang.Exception ex) { org.ovirt.engine.core.extensions.mgr.ExtensionManager.log.error(java.lang.String.format( in activating extension %1$s. Exception message is %2$s entry.getName(), ex.getMessage())); if (org.ovirt.engine.core.extensions.mgr.ExtensionManager.log.isDebugEnabled()) { org.ovirt.engine.core.extensions.mgr.ExtensionManager.log.error("", ex); } } } } }
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.Provider.class, to = org.ovirt.engine.api.model.ForemanHostProvider.class) public static org.ovirt.engine.api.model.ForemanHostProvider map(org.ovirt.engine.core.common.businessentities.Provider entity, org.ovirt.engine.api.model.ForemanHostProvider template) { org.ovirt.engine.api.model.ForemanHostProvider model = (template != null) ? template : new org.ovirt.engine.api.model.ForemanHostProvider(); if ((entity.getId()) != null) { model.setId(entity.getId().toString()); } if ((entity.getName()) != null) { model.setName(entity.getName()); } if ((entity.getDescription()) != null) { model.setDescription(entity.getDescription()); } if ((entity.getUrl()) != null) { model.setUrl(entity.getUrl()); } model.setRequiresAuthentication(entity.isRequiringAuthentication()); if ((entity.getUsername()) != null) { model.setUsername(entity.getUsername()); } java.util.Map<java.lang.String, java.lang.String> customProperties = entity.getCustomProperties(); if (customProperties != null) { org.ovirt.engine.api.model.Properties properties = new org.ovirt.engine.api.model.Properties(); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : customProperties.entrySet()) { org.ovirt.engine.api.model.Property property = new org.ovirt.engine.api.model.Property(); property.setName(entry.getKey()); property.setValue(entry.getValue()); properties.getProperties().add(property); } model.setProperties(properties); } return model; }<END_MOD>
public void setGroupNames(java.util.<START_MOD>Collection<END_MOD><java.lang.String> value) { groupNames = <START_MOD>new java.util.LinkedList(<END_MOD>value<START_MOD>)<END_MOD>; }
public void notifyVdsJobProgress(org.ovirt.engine.core.compat.Guid jobId, org.ovirt.engine.core.common.businessentities.VdsJob obj) { org.ovirt.engine.core.common.JobListener listener = jobListeners.get(jobId); <START_MOD>listener.progress(jobId, obj.getDescription(), obj.getProgress()); <END_MOD>}
@org.junit.Test public void sameBondNameSentTwice() { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = createBond(org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME, null); mockExistingIfaces(bond); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(bond, bond)); validateAndExpectViolation(helper, <START_MOD>EngineMessages<END_MOD>.NETWORK_INTERFACES_ALREADY_SPECIFIED, bond.getName()); }
private void UpdateVmTemplate() { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().update(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateSmartcardDevice(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplateId(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().getVmTemplateData().isSmartcardEnabled()); <START_MOD>org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateConsoleDevice(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplateId(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().isConsoleEnabled()); <END_MOD>}
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__EXPORT); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__VM_DISK); }
<START_MOD>@java.lang.Override public void removeTabWidget(com.google.gwt.user.client.ui.IsWidget tabWidget) { widgetBar.remove(tabWidget); recalculateWidgetBarMinWidth(); showScrollButtons(); }<END_MOD>
<START_MOD>protected boolean setAndValidateDiskProfiles() { setDiskProfileParameters(); return validate(new org.ovirt.engine.core.bll.profiles.DiskProfileValidator(getDiskProfileId()).isStorageDomainValid(getStorageDomainId())); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionStop(java.lang.String volumeName, java.lang.String remoteHost, java.lang.String remoteVolumeName, java.lang.Boolean force) { try { return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(vdsServer.glusterVolumeGeoRepSessionStop(volumeName, remoteVolumeName, remoteVolumeName, force)); } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }<END_MOD>
public void setHighlyAvailableIsConfigured(boolean value) { mVdsStatistics.setHighlyAvailableIsConfigured(value); }
public void setIsExecutionAllowed(boolean value) { isExecutionAllowed = value; if (value) { getExecuteProhibitionReasons().clear(); } onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("IsExecutionAllowed")); }
public static void GetClusterDesktopMemoryOverCommit(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 0; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.GetConfigurationValueParameters(ConfigurationValues.MaxVdsMemOverCommit, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }
public void remove() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeQuotaAssignmentFromUsersTitle()); model.setHashName("remove_quota_assignment_from_user");<START_MOD> model.setHelpTag(model.getHashName(),   > Users > Detach Users/Groups from Quota<END_MOD> java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.permissions item : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.permissions>cast(getSelectedItems())) { list.add(item.getOwnerName()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnRemove", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD> role) { if (role.getis_readonly()) { return getApplicationResources().lockImage(); } return null; }
static void translateErrors(java.util.List<org.ovirt.engine.core.common.action.VdcReturnValueBase> errors) { for (org.ovirt.engine.core.common.action.VdcReturnValueBase retVal : errors) { retVal.setCanDoActionMessages(org.ovirt.engine.ui.frontend.Frontend.canDoActionErrorsTranslator.translateErrorText(retVal.getCanDoActionMessages())); } }
protected void addVmInterfaces() { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(); <START_MOD>org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper<END_MOD> = new <START_MOD>org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(getVm().getVdsGroupId(), org.ovirt.engine.core.bll.ImportVmCommand.getStoragePoolId(), getVdsGroup().getcompatibility_version()); for (<END_MOD>org.ovirt.engine.core.common.businessentities.network.<START_MOD>VmNetworkInterface iface : <END_MOD>getVm().getInterfaces()) { initInterface(iface); <START_MOD>vnicProfileHelper.updateNicWithVnicProfileForUser(iface, org.ovirt.engine.core.bll.ImportVmCommand.getCurrentUser().getUserId()); <END_MOD>vmInterfaceManager.<START_MOD>add(iface, org.ovirt.engine.core.bll.ImportVmCommand.getCompensationContext(), getParameters().isImportAsNewEntity()<END_MOD>, getVdsGroup().getcompatibility_version()<START_MOD>); macsAdded.add(iface.getMacAddress()<END_MOD>); } <START_MOD>vnicProfileHelper.auditInvalidInterfaces(org.ovirt.engine.core.bll.ImportVmCommand.getVmName(), getAuditLogTypeForInvalidInterfaces<END_MOD>()); }
<START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> getAllForMac(java.lang.String macAddress);<END_MOD>
@org.junit.Test public void nameExists() { newPoolNameIsAlreadyTaken(); canDoActionFailed(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_POOL_NAME_ALREADY_EXIST); }
private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD> errorCode) { doReturn(backend).when(cmd).getBackend(); when(backend.getResourceManager()).thenReturn(vdsBrokerFrontend); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.RunVdsCommand(eq(VDSCommandType.AddGlusterHook), argThat(anyHookVDS()))).thenReturn(vdsReturnValue); }
@org.junit.Test public void clusterAlreadyInLocalFs() {<START_MOD> prepareManagementNetworkMocks();<END_MOD> createCommandWithDefaultVdsGroup(); oldGroupIsDetachedDefault(); storagePoolIsLocalFS(); cpuExists(); cpuManufacturersMatch(); allQueriesForVms(); storagePoolAlreadyHasCluster(); architectureIsUpdatable(); canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE); }
private void OSType_SelectedItemChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { <START_MOD>java.lang.Integer<END_MOD> osType = ((<START_MOD>java.lang.Integer<END_MOD>) (getOSType().getSelectedItem())); setIsWindowsOS(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsWindowsOsType(osType)); setIsLinuxOS(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsLinuxOsType(osType)); getInitrd_path().setIsChangable(getIsLinuxOS()); getInitrd_path().setIsAvailable(getIsLinuxOS()); getKernel_path().setIsChangable(getIsLinuxOS()); getKernel_path().setIsAvailable(getIsLinuxOS()); getKernel_parameters().setIsChangable(getIsLinuxOS()); getKernel_parameters().setIsAvailable(getIsLinuxOS()); getDomain().setIsChangable(getIsWindowsOS()); if ((getTimeZone().getSelectedItem()) == null) { getBehavior().updateTimeZone(); } else { getBehavior().updateTimeZone(((java.util.Map.Entry<java.lang.String, java.lang.String>) (getTimeZone().getSelectedItem())).getKey()); } }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( relevant Data-Center is not active. java.lang.String relevantDCnotActive();
private void handleInactiveStorageDomain(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType, org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { org.ovirt.engine.core.bll<START_MOD>.storage.domains<END_MOD>.IsoDomainListSyncronizer.log.debug(( domain id '{}', is not active, and therefore could not be refreshed for '{}' +   file type (Iso domain status is '{}'). storageDomainId, imageType, status); }
<START_MOD>public void setCreateSnapshotStage(org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters.CreateSnapshotStage createSnapshotStage) { this.createSnapshotStage = createSnapshotStage; }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( to configure Host Network physical interfaces (Nics) java.lang.String allowToConfigureHostsNetworkPhysicalInterfacesRoleTreeTooltip();
void localize() { pathLabel.setText(constants.storagePopupPosixPathLabel()); pathHintLabel.setText(constants.storagePopupPosixPathHintLabel()); vfsTypeLabel.setText(constants.storagePopupVfsTypeLabel()); mountOptionsLabel.setText(constants.storagePopupMountOptionsLabel()); nfsPosixAlertIcon.setTitle(constants.storagePopupPosixNfsWarningLabel()); }
<START_MOD>private boolean shouldAddVlanToNic(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlan) { return (vlan.getId()) == null; }<END_MOD>
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>> modelProvider) { return new org.ovirt.engine.ui.common.<START_MOD>uicommon<END_MOD>.<START_MOD>model<END_MOD>.<START_MOD>GroupedTabData<END_MOD>(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.SubTabVolumePermissionPresenter.constants.volumePermissionSubTabLabel(), 3); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturnForXmlRpc glusterVolumeRebalanceStatus(java.lang.String volumeName) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.rebalanceStatus").withParameter("volumeName", volumeName).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturnForXmlRpc(response); }
private java.lang.String[] <START_MOD>createIncoherentIdentificationErrorReplacements<END_MOD>(org.ovirt.engine.core.compat.Guid violatingEntityId, org.ovirt.engine.core.compat.Guid <START_MOD>referringId<END_MOD>, java.lang.String <START_MOD>referringName<END_MOD>) { return new java.lang.String[]{ java.lang.String.format( %s violatingEntityId), java.lang.String.format( %s <START_MOD>referringId<END_MOD>), java.lang.String.format( %s <START_MOD>referringName<END_MOD>) }; }
@java.lang.Override <START_MOD>protected<END_MOD> <START_MOD>org.ovirt.engine.core.common.queries.ConfigurationValues<END_MOD> <START_MOD>spiceFullScreenConfigKey<END_MOD>() { return <START_MOD>org<END_MOD>.<START_MOD>ovirt.engine.core.common.queries.ConfigurationValues.FullScreenUserportalDefault<END_MOD>; }
public void maintenance() { if ((<START_MOD>org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.<END_MOD>getConfirmWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel<START_MOD><java.lang.String><END_MOD> model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel<START_MOD><java.lang.String><END_MOD>(); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().maintenanceHostsTitle()); model.setHelpTag(HelpTag.maintenance_host); model.setHashName("maintenance_host"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().areYouSureYouWantToPlaceFollowingHostsIntoMaintenanceModeMsg()); java.util.ArrayList<java.lang.String> vdss = new java.util.ArrayList<java.lang.String>(); for (<START_MOD>org.ovirt.engine.core.common.businessentities.VDS vds<END_MOD> : <START_MOD>org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.<END_MOD>getSelectedItems()) { vdss.add(vds.getName()); } model.setItems(vdss); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnMaintenance", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirm", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
private void handleNonResponsiveHosts(java.util.List<java.lang.String> hostNotRespondingList) { if (!(hostNotRespondingList.isEmpty())) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VDS_CANNOT_MAINTENANCE_VDS_IS_NOT_RESPONDING_WITH_VMS); org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().add(java.lang.String.format( %1$s org.apache.commons.lang.StringUtils.join(hostNotRespondingList, ","))); } }
public static void GetClusterList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid dataCenterId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.VDSGroup> list = ((java.util.ArrayList<org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.VDSGroup>) (source)); java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.VdsGroupByNameComparer()); return list; } return new java.util.ArrayList<org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.VDSGroup>(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.StoragePoolQueryParametersBase(dataCenterId), aQuery); }
<START_MOD>@java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel, ?> getConfirmModelPopup(org.ovirt.engine.ui.uicommonweb.models.providers.ProviderNetworkListModel source, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand) { if (lastExecutedCommand == (getModel().getRemoveCommand())) { return removeConfirmPopupProvider.get(); } else { return super.getConfirmModelPopup(source, lastExecutedCommand); } }<END_MOD>
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.authentication.DirectoryUser.class, to = org.ovirt.engine.api.model.User.class) public static org.ovirt.engine.api.model.User map(org.ovirt.engine.core.authentication.DirectoryUser entity, org.ovirt.engine.api.model.User template) { org.ovirt.engine.api.model.User model = (template != null) ? template : new org.ovirt.engine.api.model.User(); model.setName(entity.getFirstName()); model.setUserName((((entity.getName()) + "@") + (entity.<START_MOD>getDirectoryName()))); model.setId(new org.ovirt.engine.core.compat.Guid(entity.getId().getBytes(), true).toString()); model.setLastName(entity.getLastName()); model.setEmail(entity.getEmail()); model.setDepartment(entity.getDepartment()); if ((entity.getGroups()) != null) { model.setGroups(new org.ovirt.engine.api.model.Groups()); for (org.ovirt.engine.core.authentication.DirectoryGroup directoryGroup : entity.getGroups()) { org.ovirt.engine.api.model.Group group = new org.ovirt.engine.api.model.Group(); group.setName(directoryGroup.getName()); model.getGroups().getGroups().add(group); } } if (!(org.apache.commons.lang.StringUtils.isEmpty(entity.<END_MOD>getDirectory().getName())))<START_MOD> { org.ovirt.engine.api.model.Domain dom = new org.ovirt.engine.api.model.Domain(); dom<END_MOD>.setId(new org.ovirt.engine.core.<START_MOD>compat.Guid(entity.getDirectory()<END_MOD>.getName()<START_MOD>.getBytes(), true).toString()); model.setDomain(dom<END_MOD>); } <START_MOD>return model; <END_MOD>}
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (!(getGlusterVolume().isOnline())) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN); return false; } if (((getParameters().getExistingBrick()) == null) || ((getParameters().getNewBrick()) == null)) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_BRICKS_REQUIRED); return false; } if (!(updateBrickServerAndInterfaceName(getParameters().getExistingBrick(), true))) { return false; } if (!(updateBrickServerAndInterfaceName(getParameters().getNewBrick(), true))) { return false; } if (!(isValidVolumeBrick(getParameters().getExistingBrick()))) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NOT_A_GLUSTER_VOLUME_BRICK); return false; } return true; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepConfigReset(java.lang.String volumeName, java.lang.String slaveHost, java.lang.String slaveVolumeName, java.lang.String configKey<START_MOD>, java.lang.String slaveUserName<END_MOD>);
<START_MOD>private java.util.List<java.lang.String> getNamesOfDerivedVmsFromTemplate(org.ovirt.engine.core.common.businessentities.DiskImage diskImage) { java.util.List<java.lang.String> result = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.VM vm : org.ovirt.engine.core.bll.RemoveDiskCommand.getDbFacade().getVmDao().getAllWithTemplate(org.ovirt.engine.core.bll.RemoveDiskCommand.getVmTemplateId())) { for (org.ovirt.engine.core.common.businessentities.Disk vmDisk : org.ovirt.engine.core.bll.RemoveDiskCommand.getDbFacade().getDiskDao().getAllForVm(vm.getId())) { if ((vmDisk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.DiskImage vmDiskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (vmDisk)); if (vmDiskImage.getImageTemplateId().equals(diskImage.getImageId())) { if (vmDiskImage.getStorageIds().contains(org.ovirt.engine.core.bll.RemoveDiskCommand.getParameters().getStorageDomainId())) { result.add(vm.getName()); } break; } } } } return result; }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue)); }
<START_MOD>public static java.util.Set<org.ovirt.engine.core.compat.Guid> collectForHost(org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager manager, org.ovirt.engine.core.common.businessentities.VDS host) { java.util.Set<org.ovirt.engine.core.compat.Guid> ids = new java.util.HashSet<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingVM pending : manager.pendingHostResources(host, org.ovirt.engine.core.bll.scheduling.pending.PendingVM.class)) { ids.add(pending.getVm().getId()); } return ids; }<END_MOD>
<START_MOD>private void freezeVm() { if ((!(isLiveSnapshotApplicable())) || (!(isCinderDisksExist()))) { return; } org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue; try { returnValue = runVdsCommand(VDSCommandType.Freeze, new org.ovirt.engine.core.common.vdscommands.VdsAndVmIDVDSParametersBase(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVds().getId(), org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { handleFreezeVmFailure(e); return; } if (!(returnValue.getSucceeded())) { handleFreezeVmFailure(new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.freezeErr)); } }<END_MOD>
@org.junit.Test public void testJsonNullDiskDescription() throws java.io.IOException { <START_MOD>assertDiskDescriptionMap<END_MOD>("DiskAlias", null); }
@java.lang.Override protected void executeCommand() { updateQuotaCache(); if ((<START_MOD>get_oldStoragePool()<END_MOD>.getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Up)) { if (!(org.apache.commons.lang.StringUtils.equals(<START_MOD>get_oldStoragePool()<END_MOD>.getName(), org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getName()))) { runVdsCommand(VDSCommandType.SetStoragePoolDescription, new org.ovirt.engine.core.common.vdscommands.SetStoragePoolDescriptionVDSCommandParameters(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getName())); } } org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.copyUnchangedStoragePoolProperties(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool(), <START_MOD>get_oldStoragePool()<END_MOD>); org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePoolDAO().updatePartial(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool()); updateStoragePoolFormatType(); org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.setSucceeded(true); }
<START_MOD>java.lang.String passDiscardNotSupportedForStorageType();<END_MOD>
@java.lang.Override protected org.ovirt.engine.core.common.businessentities.VmNetworkInterface setNetwork(org.ovirt.engine.api.model.NIC device, org.ovirt.engine.core.common.businessentities.VmNetworkInterface ni) { if (device.isSetNetwork()) { <START_MOD>if (((device.getNetwork().getId()) != null) || ((device.getNetwork().getName()) != null)) { <END_MOD>org.ovirt.engine.core.compat.Guid clusterId = getEntity(org.ovirt.engine.core.common.businessentities.VmTemplate.class, VdcQueryType.GetVmTemplate, new org.ovirt.engine.core.common.queries.GetVmTemplateParameters(parentId), "id").getvds_group_id(); org.ovirt.engine.core.common.businessentities.Network net = lookupClusterNetwork(clusterId, (device.getNetwork().isSetId() ? asGuid(device.getNetwork().getId()) : null), device.getNetwork().getName()); if (net != null) { ni.setNetworkName(net.getname()); } } <START_MOD>else { ni.setNetworkName(null); } } <END_MOD>return ni; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VDS getFirstUpRhelForVdsGroup(org.ovirt.engine.core.compat.Guid vdsGroupId) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vds = getCallsHandler().executeReadList("getFirstUpRhelForVdsGroupId", org.ovirt.engine.core.dao.<START_MOD>VdsDAOImpl<END_MOD>.VdsRowMapper.instance, getCustomMapSqlParameterSource().addValue("vds_group_id", vdsGroupId)); return (vds.size()) !=   ? vds.iterator().next() : null; }
public java.util.List<org.ovirt.engine.core.dal.VdcBllMessages> validate() { <START_MOD>for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface : params.getInterfaces()) { <END_MOD>java.lang.String<START_MOD> name<END_MOD> = <START_MOD>iface.getName(); if (validateInterfaceNotProcessedAlready(iface)) { if (isBond(iface)) { extractBondIfModified(iface, name); } else { if (org.apache.commons<END_MOD>.lang.<START_MOD>StringUtils.isNotBlank(iface.getBondName())) { extractBondSlave(iface); } if (!(getExistingIfaces().containsKey(org.ovirt.engine.core.utils.NetworkUtils.StripVlan(name)))) { violations.add(VdcBllMessages.NETWORK_INTERFACE_NOT_EXISTS); } } if ((violations.isEmpty()) && (org.apache.commons<END_MOD>.lang.<START_MOD>StringUtils.isNotBlank(<END_MOD>iface.getNetworkName()<START_MOD>))) { extractNetwork(iface); } } } validateBondSlavesCount(); detectSlaveChanges(); extractRemoveNetworks(); extractRemovedBonds(); return<END_MOD> violations<START_MOD>; }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.businessentities.network.Network findDefaultManagementNetwork(org.ovirt.engine.core.compat.Guid dataCenterId) { final org.ovirt.engine.core.common.businessentities.network.Network defaultEngineManagementNetwork = findDefaultEngineManagementNetwork(dataCenterId); if (defaultEngineManagementNetwork != null) { return defaultEngineManagementNetwork; } final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> managementNetworks = networkDao.getManagementNetworks(dataCenterId); if ((managementNetworks.size()) == 1) { return managementNetworks.get(0); } return null; }<END_MOD>
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if (!(super.<START_MOD>validate<END_MOD>())) { return false; } if (getGeoRepSession().getStatus().equals(GeoRepSessionStatus.STOPPED)) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GEOREP_SESSION_STOPPED); } return true; }
<START_MOD>public boolean isRngRateValid() { return rngRateValid; }<END_MOD>
@java.lang.Override public java.lang.Void runInTransaction() { curVm.guestLogoutTimeTreatmentAfterDestroy(); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDao().update(curVm.getDynamicData()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStatisticsDao().update(curVm.getStatisticsData()); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces = curVm.getInterfaces(); if ((interfaces != null) && ((interfaces.size()) > 0)) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface ifc : interfaces) { org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics stats = ifc.getStatistics(); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkStatisticsDao().update(stats); } } <START_MOD>org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDynamicDao().smartUpdatePartialVds(getVdsId(), 0, 0, 0, (<END_MOD>-(curVm.getVmMemSizeMb()))<START_MOD>, (<END_MOD>-(curVm.getNumOfCpus()))); return null; }
protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (getWatchdogs().isEmpty()) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.WATCHDOG_NOT_FOUND); } return true; }
public void setEndTime(java.util.Date value) { mUseTimeout = true; mEndTime = <START_MOD>((java.util.Date) (<END_MOD>value<START_MOD>.clone()))<END_MOD>; }
@java.lang.Override protected void executeCommand() { java.sql.Time originalExecutionTime = getSchedule().getExecutionTime();<START_MOD> try {<END_MOD> java.lang.String jobId = scheduleJob(); if (jobId != null) { setSucceeded(true); getSchedule().setJobId(jobId); getSchedule().setExecutionTime(originalExecutionTime); getGlusterVolumeSnapshotScheduleDao().save(getSchedule()); } else { setSucceeded(false); } }<START_MOD> catch (java.lang.Exception ex) { setSucceeded(false); handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_SCHEDULE_FAILED, ex.getMessage()); } }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Root") java.lang.String rootTag();
@org.junit.Test public void canDoAction() { java.util.List lunsFromDb = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id("1"); lun1.setStorageDomainId(sdId); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id("2"); lun2.setStorageDomainId(sdId); lunsFromDb.add(lun1); lunsFromDb.add(lun2); when(lunsDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.<START_MOD>disk.lun<END_MOD>.RefreshLunsSizeCommandTest.STORAGE)).thenReturn(lunsFromDb); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(cmd); }
public void backupCheck() { if (lock.tryLock()) { try { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info( check started. doBackupCheck(); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info( check completed. } finally { lock.unlock(); } } }
<START_MOD>private boolean foundBadMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics, java.util.function.Predicate<java.lang.String> badMacPredicate) { return vnics.stream().map(VmNetworkInterface::getMacAddress).filter(java.util.Objects::nonNull).anyMatch(badMacPredicate); }<END_MOD>
public void init() { org.ovirt.engine.ui.uicommonweb.ICommandTarget target = ((org.ovirt.engine.ui.uicommonweb.ICommandTarget) (getEntity())); org.ovirt.engine.ui.uicommonweb.UICommand actionCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("OnExecute", this); actionCommand.setTitle(constants.ok()); actionCommand.setIsDefault(true); getCommands().add(actionCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", target); cancelCommand.setTitle(constants.cancel()); cancelCommand.setIsCancel(true); getCommands().add(cancelCommand); <START_MOD>setSourceAvailable(true); <END_MOD>}
public java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> getVmInitByIds(java.util.List<org.ovirt.engine.core.compat.Guid> ids) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> all = vmInitDao.getVmInitByIds(ids); for (org.ovirt.engine.core.common.businessentities.VmInit vmInit : all) { vmInit.setPasswordAlreadyStored((!(org.apache.commons.lang.StringUtils.isEmpty(vmInit.getRootPassword())))); vmInit.setRootPassword(null); } return all; }
@org.junit.Test public void invalidVdsGroup() { createSimpleCommand(); when(vdsGroupDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); canDoActionFailedWithReason(<START_MOD>EngineMessages<END_MOD>.VDS_CLUSTER_IS_NOT_VALID); }
<START_MOD>public boolean isUseManualTabIndex() { return useManualTabIndex; }<END_MOD>
@java.lang.Override protected void init() { super.init(); setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getContainerId()); setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getStoragePoolId()); imageToDestinationDomainMap = org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getImageToDestinationDomainMap(); if (((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm()) != null) && ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap()) != null)) { imageList = new java.util.ArrayList(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { imageList.add(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))); } } } ensureDomainMap(imageList, org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getDestDomainId()); <START_MOD>org.ovirt.engine.core.bll.VmHandler.updateMaxMemorySize(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getEffectiveCompatibilityVersion()); <END_MOD>}
<START_MOD>public void updateVmIfChanged(org.ovirt.engine.core.compat.Guid vmId, java.lang.String vdsmHash) { if ((!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(getGroupCompatibilityVersion(vdsId)))) && (isVmDevicesChanged(vmId, vdsmHash))) { updateVm(vmId); } }<END_MOD>
private void <START_MOD>remove<END_MOD>() { <START_MOD>org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.RemoveProvider, new org.ovirt.engine.core.common.action.ProviderParameters(((org.ovirt.engine.core.common.businessentities.Provider) (getSelectedItem()))), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @<END_MOD>java.<START_MOD>lang<END_MOD>.<START_MOD>Override<END_MOD> <START_MOD>public<END_MOD> <START_MOD>void<END_MOD> <START_MOD>Executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { getSearchCommand().Execute<END_MOD>(); <START_MOD>}<END_MOD> <START_MOD>}<END_MOD>); }
@java.lang.Override protected void executeCommand() { updateVmInitPassword(); org.ovirt.engine.core.bll.VmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVdsGroup().getcompatibility_version()); org.ovirt.engine.core.compat.Guid poolId = getPoolId(); setActionReturnValue(poolId); org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().getVmtGuid(), org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getCompensationContext()); <START_MOD>addVmsToPool(poolId); org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getReturnValue().setCanDoAction(getAddVmsSucceded()); org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.setSucceeded(getAddVmsSucceded()); org.ovirt.engine.core.bll.VmTemplateHandler.unlockVmTemplate<END_MOD>(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().<START_MOD>getVmStaticData().getVmtGuid()); org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getCompensationContext().resetCompensation(<END_MOD>); }
private java.lang.String getJsonDiskDescription() throws java.io.IOException { return org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>MetadataDiskDescriptionHandler.getInstance().generateJsonDiskDescription(org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>UpdateVmDiskCommand.getParameters().getDiskInfo()); }
<START_MOD>private void addReportedIpConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { if (!(isPrimaryAddressExist())) { return; } org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol definedBootProtocol = networkDataCenterIpConfigurationDefinition.getPrimaryAddress().getBootProtocol(); result.add(ReportedConfigurationType.BOOT_PROTOCOL, iface.getBootProtocol(), definedBootProtocol); if (definedBootProtocol == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)) { result.add(ReportedConfigurationType.NETMASK, iface.getSubnet(), networkDataCenterIpConfigurationDefinition.getPrimaryAddress().getNetmask()); result.add(ReportedConfigurationType.IP_ADDRESS, iface.getAddress(), networkDataCenterIpConfigurationDefinition.getPrimaryAddress().getAddress()); } }<END_MOD>
protected boolean hostToRunExist() { java.util.List<org.ovirt.engine.core.compat.Guid> dedicatedHostsList = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getDedicatedVmForVdsList(); if (dedicatedHostsList.isEmpty()) { return true; } for (org.ovirt.engine.core.compat.Guid candidateHostGuid : dedicatedHostsList) { if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(candidateHostGuid)) == null) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_HOST_NOT_EXIST); return false; } } return true; }
<START_MOD>@java.lang.Override public void setEnabled(boolean enabled) { editFenceAgent.setEnabled(enabled); removeConcurrentGroup.setEnabled(enabled); if (enabled) { agentLabel.getElement().removeClassName(OvirtCss.LABEL_DISABLED); } else { agentLabel.getElement().addClassName(OvirtCss.LABEL_DISABLED); } }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Disk object) { if ((object.getLastAlignmentScan()) != null) { com.google.gwt.i18n.client.DateTimeFormat lastScanDateFormat = com.google.gwt.i18n.client.DateTimeFormat.getFormat("yyyy-MM-dd, HH:mm"); getCell().setTitle((((org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.constants.lastDiskAlignmentScan()) + ": ") + (lastScanDateFormat.format(object.getLastAlignmentScan())))); } else { getCell().setTitle(null); } return object.getAlignment().toString(); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.businessentities.StorageServerConnections mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.StorageServerConnections entity = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); entity.setconnection(rs.getString("connection")); entity.setid(rs.getString("id")); entity.setiqn(rs.getString("iqn")); entity.setport(rs.getString("port")); entity.setportal(rs.getString("portal")); entity.setpassword(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.decryptPassword(rs.getString("password"))); entity.setstorage_type(org.ovirt.engine.core.common.businessentities.storage.StorageType.forValue(rs.getInt("storage_type"))); entity.setuser_name(rs.getString("user_name")); entity.setMountOptions(rs.getString("mount_options")); entity.setVfsType(rs.getString("vfs_type")); entity.setNfsVersion(((rs.getString("nfs_version")) != null ? org.ovirt.engine.core.common.businessentities.NfsVersion.forValue(rs.getString("nfs_version")) : null)); entity.setNfsRetrans(org.ovirt.engine.core.dao.<START_MOD>StorageServerConnectionDAOImpl<END_MOD>.getShort(rs, "nfs_retrans")); entity.setNfsTimeo(org.ovirt.engine.core.dao.<START_MOD>StorageServerConnectionDAOImpl<END_MOD>.getShort(rs, "nfs_timeo")); return entity; }
@java.lang.Override protected void readGeneralData(org.ovirt.engine.core.compat.backendcompat.XmlNode content) { org.ovirt.engine.core.compat.backendcompat.XmlNode node = content.SelectSingleNode(<START_MOD>OvfProperties.NAME<END_MOD>); if (node != null) { _vmTemplate.setName(node.innerText); name = _vmTemplate.getName(); } node = content.SelectSingleNode(<START_MOD>OvfProperties.TEMPLATE_ID<END_MOD>); if (node != null) { if (org.apache.commons.lang.StringUtils.isNotEmpty(node.innerText)) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(node.innerText)); } } node = content.SelectSingleNode(<START_MOD>OvfProperties.IS_DISABLED<END_MOD>); if (node != null) { _vmTemplate.setDisabled(java.lang.Boolean.parseBoolean(node.innerText)); } node = content.SelectSingleNode(<START_MOD>OvfProperties.TRUSTED_SERVICE<END_MOD>); if (node != null) { _vmTemplate.setTrustedService(java.lang.Boolean.parseBoolean(node.innerText)); } node = content.SelectSingleNode(<START_MOD>OvfProperties.TEMPLATE_TYPE<END_MOD>); if (node != null) { _vmTemplate.setTemplateType(org.ovirt.engine.core.common.businessentities.VmEntityType.valueOf(node.innerText)); } node = content.SelectSingleNode(<START_MOD>OvfProperties.BASE_TEMPLATE_ID<END_MOD>); if (node != null) { _vmTemplate.setBaseTemplateId(org.ovirt.engine.core.compat.Guid.createGuidFromString(node.innerText)); } else { _vmTemplate.setBaseTemplateId(_vmTemplate.getId()); } node = content.SelectSingleNode(<START_MOD>OvfProperties.TEMPLATE_VERSION_NUMBER<END_MOD>); if (node != null) { _vmTemplate.setTemplateVersionNumber(java.lang.Integer.parseInt(node.innerText)); } node = content.SelectSingleNode(<START_MOD>OvfProperties.TEMPLATE_NAME<END_MOD>); if (node != null) { _vmTemplate.setTemplateVersionName(node.innerText); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { onExportChanged(); <START_MOD>updateMtu(); <END_MOD>}
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity selectedSlaveVolume = getSlaveVolumes().getSelectedItem(); java.util.Set<java.lang.String> hostsInCurrentVolume = new java.util.HashSet<java.lang.String>(); if ((!(getShowEligibleVolumes().getEntity())) && (selectedSlaveVolume != null)) { updateRecommendatonViolations(); } if (selectedSlaveVolume != null) { hostsInCurrentVolume = getHostNamesForVolume(selectedSlaveVolume); } getSlaveHosts().setItems(hostsInCurrentVolume); }<END_MOD>
<START_MOD>public void startNextLiveMerge(int completedChildren) { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.getParameters().getImageIds().get(completedChildren); log.infoFormat("Starting child command {0} of {1}, image {2}", (completedChildren + 1), org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.getParameters().getImageIds().size(), imageId); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveSnapshotSingleDiskLive, buildRemoveSnapshotSingleDiskLiveParameters(imageId), org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.cloneContextAndDetachFromParent()); }<END_MOD>
public <START_MOD>org.ovirt.engine.ui.uicommonweb.models.EntityModel<END_MOD> setEntity(java.lang.Object value) { if ((entity) != value) { EntityChanging(value, entity); entity = value; OnEntityChanged(); getEntityChangedEvent().raise(this, EventArgs.Empty); OnPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("Entity")); } <START_MOD>return this; <END_MOD>}
<START_MOD>public abstract com.google.gwt.event.dom.client.HasClickHandlers getCloseButton();<END_MOD>
<START_MOD>public static void getHostNumaTopologyByHostId(AsyncQuery asyncQuery, org.ovirt.engine.core.compat.Guid hostId) { List<VdsNumaNode> numaNodeList = new java.util.ArrayList<VdsNumaNode>(); numaNodeList.add(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getNumaNode(new VdsNumaNode(), 0)); numaNodeList.add(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getNumaNode(new VdsNumaNode(), 1)); numaNodeList.add(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getNumaNode(new VdsNumaNode(), 2)); numaNodeList.add(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getNumaNode(new VdsNumaNode(), 3)); asyncQuery.asyncCallback.onSuccess(asyncQuery.model, numaNodeList); }<END_MOD>
@java.lang.Override public void onLogout()<START_MOD> { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery()<END_MOD>;<START_MOD> query.setHandleFailure(true); query.setModel(this); query.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { Window.Location.reload(); } }; frontend.logoffAsync(frontend.getLoggedInUser(), query); }<END_MOD>
@org.junit.Test public void testGetAllForAdElementFilteredWithNoPermissions() { java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> result = dao.getAllForAdElement(org.ovirt.engine.core.dao.PermissionDAOTest.AD_ELEMENT_ID, org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID, <START_MOD>org.ovirt.engine.core.dao.UNPRIVILEGED_USER_SESSION_ID, <END_MOD>true); org.ovirt.engine.core.dao.PermissionDAOTest.assertInvalidGetPermissionList(result); }
private void removeUnselectableHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.compat.Guid run_on_vds, boolean allRunOnSameVds<START_MOD>, boolean hostedEngineOnlyMigration<END_MOD>) { if ((getVmsOnSameCluster()) && allRunOnSameVds) { org.ovirt.engine.core.common.businessentities.VDS runOnSameVDS = null; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getId().equals(run_on_vds)) { runOnSameVDS = host; } } hosts.remove(runOnSameVDS); } <START_MOD>if (hostedEngineOnlyMigration) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> nonHeHosts = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (!(host.isHostedEngineDeployed())) { nonHeHosts.add(host); } } hosts.removeAll(nonHeHosts); } }<END_MOD>
protected boolean migrateVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.job.ExecutionContext parentContext) { org.ovirt.engine.core.common.action.<START_MOD>MigrateVmParameters<END_MOD> parameters = new org.ovirt.engine.core.common.action.<START_MOD>MigrateVmParameters<END_MOD>(<START_MOD>false, <END_MOD>vm.getId()); parameters.<START_MOD>setReason<END_MOD>(new org.ovirt.engine.core.common.migration.MigrationReason(MigrationReason.Type.HOST_IN_MAINTENANCE)); return runInternalAction(VdcActionType.<START_MOD>MigrateVm<END_MOD>, parameters, createMigrateVmContext(parentContext, vm)).getSucceeded(); }
org.ovirt.engine.core.common.job.Step getStep(org.ovirt.engine.core.compat.Guid stepId<START_MOD>, boolean includeSubjectEntities<END_MOD>);
<START_MOD>@java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations.ReportedConfiguration reportedConfiguration) { return !(reportedConfiguration.isInSync()); }<END_MOD>
<START_MOD>@com.google.gwt.i18n.client.Constants.DefaultStringValue("Profiles") java.lang.String profilesTitle();<END_MOD>
<START_MOD>@java.lang.Override public java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> getTabNameMapping() { return tabMap; }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.businessentities.VmNetworkInterface getIfaceWithNetworkName(java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> interfaces) { return org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(interfaces, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.VmNetworkInterface>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.VmNetworkInterface vmNetworkInterface) { return hasDetachedNetworkName(vmNetworkInterface); } }); }<END_MOD>
<START_MOD>@java.lang.Override <END_MOD>public java.lang.String <START_MOD>get<END_MOD>(java.lang.Enum<?> <START_MOD>key) { try { if (key == null) { return null; }<END_MOD> java.lang.String <START_MOD>enumName<END_MOD> = <START_MOD>key.getDeclaringClass().toString(); enumName<END_MOD> = <START_MOD>enumName.substring(((enumName.lastIndexOf(".")) + 1), enumName.length()); java.lang.String translatedEnum<END_MOD> = <START_MOD>enums.getString(((enumName + "___") + (key.toString()))); return translatedEnum<END_MOD>; } catch (java.util.MissingResourceException e) { org.ovirt.engine.ui.uicompat.EnumTranslator.logger.info(( Enum resource:   + (e.getLocalizedMessage()))); return <START_MOD>key.name(); } }<END_MOD>
<START_MOD>@java.lang.Override protected void populateTabMap() { getTabNameMapping().put(ClusterModel.ClusterTabNames.GENERAL_TAB, this.generalTab); getTabNameMapping().put(ClusterModel.ClusterTabNames.CONSOLE_TAB, this.consoleTab); getTabNameMapping().put(ClusterModel.ClusterTabNames.CLUSTER_POLICY_TAB, this.clusterPolicyTab); getTabNameMapping().put(ClusterModel.ClusterTabNames.OPTIMIZATION_TAB, this.optimizationTab); getTabNameMapping().put(ClusterModel.ClusterTabNames.RESILIENCE_POLICY_TAB, this.resiliencePolicyTab); }<END_MOD>
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.HostDeviceView object) { return (object.getMdevTypes()) == null ? "" : java.lang.String.join(   object.getMdevTypes()<START_MOD>.stream().sorted().collect(java.util.stream.Collectors.toList())<END_MOD>); }
<START_MOD>public void initNetworkFilterList(org.ovirt.engine.core.compat.Version dcCompatibilityVersion) { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkFilter> networkFilters = new java.util.ArrayList(((java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkFilter>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); networkFilters.add(null); final org.ovirt.engine.core.common.businessentities.network.NetworkFilter selectedNetworkFilter = (((vnicProfile) == null) || ((vnicProfile.getNetworkFilterId()) == null)) ? null : org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(networkFilters, new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate<>(vnicProfile.getNetworkFilterId())); getNetworkFilter().setItems(networkFilters, selectedNetworkFilter); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllSupportedNetworkFiltersByVersion, new org.ovirt.engine.core.common.action.VersionQueryParameters(dcCompatibilityVersion), asyncQuery); }<END_MOD>
protected boolean isDiskPlugged() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices = getVmDeviceDao().getVmDevicesByDeviceId(getImageGroupId(), org.ovirt.engine.core.bll.<START_MOD>snapshots.<END_MOD>RemoveDiskSnapshotsCommand.getVmId()); return (!(devices.isEmpty())) && (devices.get(0).getIsPlugged()); }
private static void saveToDb(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.AuditLogType logType, java.lang.String loggerString) { <START_MOD>org.ovirt.engine.core.common.AuditLogSeverity severity<END_MOD> = <START_MOD>logType.getSeverity(); if (severity == <END_MOD>null<START_MOD>) { severity<END_MOD> = <START_MOD>org.ovirt.engine.core.common.AuditLogSeverity.NORMAL; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.infoFormat( severity for {0} audit log type, assuming Normal severity logType); } org.ovirt.engine.core.common.businessentities.AuditLog auditLog = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.createAuditLog(auditLogable, logType, loggerString, severity); if (auditLog == <END_MOD>null<START_MOD>) {<END_MOD> org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.<START_MOD>warn( to create <END_MOD>AuditLog <START_MOD>} else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.setPropertiesFromAuditLogableBase<END_MOD>(auditLogable<START_MOD>, auditLog); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getDbFacadeInstance().getAuditLogDao().save(auditLog); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.logMessage(severity, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getMessageToLog(<END_MOD>loggerString<START_MOD>, auditLog)); } }<END_MOD>
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); org.ovirt.engine.core.dao.VdsDAO vdsDAO = dbFacade.getVdsDao(); existingVds = vdsDAO.get(FixturesTool.VDS_RHEL6_NFS_SPM); org.ovirt.engine.core.dao.StoragePoolDAO storagePoolDAO = dbFacade.getStoragePoolDao(); storagePool = storagePoolDAO.get(FixturesTool.STORAGE_POOL_RHEL6_ISCSI_OTHER); dao = dbFacade.getVdsGroupDao(); existingVdsGroup = dao.get(existingVds.getVdsGroupId()); groupWithNoRunningVms = dbFacade.getVdsGroupDao().get(FixturesTool.VDS_GROUP_NO_RUNNING_VMS); newGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup(); newGroup.setName( VDS Group newGroup.setcompatibility_version(new org.ovirt.engine.core.compat.Version("3.0")); newGroup.setVirtService(true); newGroup.setGlusterService(false); newGroup.setClusterPolicyId(existingVdsGroup.getClusterPolicyId()); clusterPolicyDao = dbFacade.getClusterPolicyDao(); newGroup.setClusterPolicyName(clusterPolicyDao.get(existingVdsGroup.getClusterPolicyId()).getName()); newGroup.setClusterPolicyProperties(new java.util.LinkedHashMap<java.lang.String, java.lang.String>()); <START_MOD>newGroup.setSchedulerOptimizeForSpeed(true); <END_MOD>}
private void updateOptionsNonLocalFSData() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.VDS>><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.VDS> returnValue) { hosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); updateOptionsNonLocalFS(); } }), getEntity().getName());<END_MOD> org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostList(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.VDS>><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.VDS> returnValue) { allHosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); updateOptionsNonLocalFS(); } })); if (getEntity().supportsGlusterService()<END_MOD>) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isAnyHostUpInCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.lang.Boolean><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.<START_MOD>Boolean returnValue) { isAnyHostUpInCluster<END_MOD> = <START_MOD>returnValue; <END_MOD>updateOptionsNonLocalFS(); } }), getEntity().getName()); } }
<START_MOD>private void updateNetworkInterfacesByTemplate(org.ovirt.engine.core.common.businessentities.VmTemplate template) { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(getModel(), new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { if (returnValue == null) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); if ((nics.size()) == 0) { return; } initNetworkInterfaces(networkBehavior, nics); } }); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetTemplateInterfacesByTemplateId, new org.ovirt.engine.core.common.queries.IdQueryParameters(template.getId()), query); }<END_MOD>
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult <START_MOD>validate<END_MOD>(java.lang.String value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); try { new org.ovirt.engine.ui.uicompat.MailAddress(value); } catch (java.lang.RuntimeException e) { result.setSuccess(false); result.getReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().invalidEmailAddressInvalidReason()); } return result; }
@org.junit.Test public void testCanDoActionInstanceNameDuplicate() { cmd.getParameters().setTemplateType(VmEntityType.INSTANCE_TYPE); doReturn(true).when(cmd).isInstanceWithSameNameExists("templateName"); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NAME_ALREADY_USED); }
@java.lang.Override protected void setObjectName(java.lang.Object object, java.lang.String name, boolean isSuffix) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ((org.ovirt.engine.core.common.businessentities.VmTemplate) (object)); if (isSuffix) { template.<START_MOD>setName<END_MOD>(((template.<START_MOD>getName<END_MOD>()) + name)); } else { template.<START_MOD>setName<END_MOD>(name); } }
<START_MOD>protected org.ovirt.engine.core.common.action.AddVdsGroupOperationParameters createCommandParams(org.ovirt.engine.api.model.Cluster cluster, org.ovirt.engine.core.common.businessentities.StoragePool dataCenter) { org.ovirt.engine.core.common.businessentities.VDSGroup clusterEntity = map(cluster, map(dataCenter)); final org.ovirt.engine.core.common.action.AddVdsGroupOperationParameters taskParams = (cluster.isSetManagementNetworkId()) ? new org.ovirt.engine.core.common.action.AddVdsGroupOperationParameters(clusterEntity, org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(cluster.getManagementNetworkId())) : new org.ovirt.engine.core.common.action.AddVdsGroupOperationParameters(clusterEntity); return taskParams; }<END_MOD>
<START_MOD>private org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel createModel(org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior) { if (behavior instanceof org.ovirt.engine.ui.uicommonweb.models.templates.ExistingBlankTemplateModelBehavior) { return new org.ovirt.engine.ui.uicommonweb.models.templates.BlankTemplateModel(behavior); } return new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(behavior); }<END_MOD>
<START_MOD>@org.junit.Test(expected = javax.servlet.ServletException.class) public void testInitServletConfigNoInitParams() throws javax.servlet.ServletException { testServlet.init(testConfig); fail("Should not get here"); }<END_MOD>
@java.lang.Override protected void SortCommands() { java.util.ArrayList<org.ovirt.engine.core.bll.CommandBase<?>> commands = getCommands(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM>(commands.size()); for (org.ovirt.engine.core.bll.CommandBase<?> cmd : commands) { vms.put(cmd.getVmId(), org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(cmd.getVmId())); } java.util.Collections.sort(commands, java.util.Collections.reverseOrder(new java.util.Comparator<org.ovirt.engine.core.bll.CommandBase<?>>() { private final org.ovirt.engine.core.common.businessentities.<START_MOD>comperators.<END_MOD>VmsComparer vmComparator = new org.ovirt.engine.core.common.businessentities.<START_MOD>comperators.<END_MOD>VmsComparer(); @java.lang.Override public int compare(org.ovirt.engine.core.bll.CommandBase<?> o1, org.ovirt.engine.core.bll.CommandBase<?> o2) { org.ovirt.engine.core.common.businessentities.VM vm1 = vms.get(o1.getVmId()); org.ovirt.engine.core.common.businessentities.VM vm2 = vms.get(o2.getVmId()); return vmComparator.Compare(vm1, vm2); } })); }
protected void testAction(org.ovirt.engine.core.common.action.VdcActionType actionType, java.lang.String networkId, java.lang.String networkName) throws java.lang.Exception {<START_MOD> setupGetExpectations();<END_MOD> org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setNetwork(new org.ovirt.engine.api.model.Network()); if (networkId != null) { action.getNetwork().setId(networkId); } else { action.getNetwork().setName(networkName); } setUpEntityQueryExpectations(VdcQueryType.GetAllNetworks, org.ovirt.engine.core.common.queries.GetAllNetworkQueryParamenters.class, new java.lang.String[]{ "StoragePoolId" }, new java.lang.Object[]{ org.ovirt.engine.core.compat.Guid.Empty }, asList(org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.getNetwork())); setUpEntityQueryExpectations(); setUriInfo(setUpActionExpectations(actionType, org.ovirt.engine.core.common.action.AttachNetworkToVdsParameters.class, new java.lang.String[]{ "VdsId" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.PARENT_GUID }, true, true, null, null, true)); if (actionType == (org.ovirt.engine.core.common.action.VdcActionType.AttachNetworkToVdsInterface)) { verifyActionResponse(resource.attach(action)); } else { verifyActionResponse(resource.detach(action)); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllForVnicProfile(org.ovirt.engine.core.compat.Guid vNicProfileId) { return getCallsHandler().executeReadList("GetVmsByVnicProfileId", org.ovirt.engine.core.dao.<START_MOD>VmDAOImpl<END_MOD>.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("vnic_profile_id", vNicProfileId)); }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { model.<START_MOD>setSearchType<END_MOD>(<START_MOD>AdSearchType<END_MOD>.<START_MOD>MY_GROUPS<END_MOD>); getView().changeStateOfElementsWhenAccessIsForEveryoneOrMyGroups(false, true); getModel().getSearchMyGroupsCommand().execute(); <START_MOD>getView().userTypeChanged(UserOrGroup.User); model.setItems(null); <END_MOD>}
public <START_MOD>org.ovirt.engine.core.common.businessentities.VDS<END_MOD> refreshHost() { refreshHost(cachedVds); <START_MOD>return cachedVds; <END_MOD>}
<START_MOD>private void reportMTUDifferences(java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ifaceNetworks) { java.util.List<java.lang.String> mtuDiffNetworks = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.network.Network net : ifaceNetworks) { mtuDiffNetworks.add(java.lang.String.format("%s(%s)", net.getName(), ((net.getMtu()) == 0 ? "default" : java.lang.String.valueOf(net.getMtu())))); } addViolation(VdcBllMessages.NETWORK_MTU_DIFFERENCES, java.lang.String.format("[%s]", org.apache.commons.lang.StringUtils.join(mtuDiffNetworks, ", "))); }<END_MOD>
private static org.ovirt.engine.core.common.action.InstallVdsParameters createParameters() { org.ovirt.engine.core.common.action.InstallVdsParameters param = new org.ovirt.engine.core.common.action.InstallVdsParameters(org.ovirt.engine.core.compat.Guid.NewGuid()); param.setIsReinstallOrUpgrade(true); return param; }
@java.lang.Override public void endSuccessfully() { super.endSuccessfully(); if (getEnclosingCommand().getParameters().getImportAsTemplate()) { org.ovirt.engine.core.compat.Guid newTemplateId = createTemplate(); if (newTemplateId != null) { attachDiskToTemplate(newTemplateId); } } org.ovirt.engine.core.bll.ImagesHandler.updateImageStatus(getEnclosingCommand().getParameters().<START_MOD>getDestinationImageId<END_MOD>(), ImageStatus.OK); getEnclosingCommand().getReturnValue().setSucceeded(true); }
protected boolean updateVnicForBackwardCompatibility() { org.ovirt.engine.core.bll.network.<START_MOD>vm.VnicProfileHelper<END_MOD> <START_MOD>vnicProfileHelper<END_MOD> = new org.ovirt.engine.core.bll.network.<START_MOD>vm.VnicProfileHelper<END_MOD>(); if (!(validate(<START_MOD>vnicProfileHelper<END_MOD>.updateNicForBackwardCompatibility(org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase.getParameters().getInterface(), org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase.getVmTemplate(), org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase.getCurrentUser().getUserId())))) { return false; } return true; }
<START_MOD>private org.ovirt.engine.core.common.businessentities.Provider getOldProvider() { if ((oldProvider) == null) { oldProvider = org.ovirt.engine.core.bll.provider.UpdateProviderCommand.getDbFacade().getNetworkProviderDao().get(getProvider().getId()); } return oldProvider; }<END_MOD>
@java.lang.Override public void onPowerringUp() { decreasePendingVm(<START_MOD>this<END_MOD>.<START_MOD>vmStaticDao<END_MOD>.get(org.ovirt.engine.core.bll.RunVmCommand.getVmId())); }
private void mapIpConfiguration(org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper, org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration) { boolean hasPrimaryAddressSet = ipConfiguration.hasPrimaryAddressSet(); org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = (hasPrimaryAddressSet) ? ipConfiguration.getPrimaryAddress() : null; mapper.addValue("boot_protocol", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(<START_MOD>primaryAddress<END_MOD>.getBootProtocol())).addValue("address", (hasPrimaryAddressSet ? primaryAddress.getAddress() : null)).addValue("netmask", (hasPrimaryAddressSet ? primaryAddress.getNetmask() : null)).addValue("gateway", (hasPrimaryAddressSet ? primaryAddress.getGateway() : null)); }
<START_MOD>public void addUiPluginListModel(final java.lang.String label, java.lang.String historyToken) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<java.lang.Void, java.lang.Void> uiPluginListModel = new org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<java.lang.Void, java.lang.Void>() { @java.lang.Override protected java.lang.String getListName() { return label; } }; uiPluginListModel.setSearchString(label); uiPluginListModel.setApplicationPlace(historyToken); getItems().add(uiPluginListModel); uiPluginLabelListMap.put(historyToken, uiPluginListModel); }<END_MOD>
@java.lang.Override public java.lang.String toString() { if (!(valid)) { return <START_MOD>""<END_MOD>; } java.lang.String authority = new java.lang.String(); authority += host; if (!(port.isEmpty())) { authority += ':' + (port); } return authority; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(selectedItemChangedEventDefinition)) { if (sender == (getDataCenter())) { dataCenter_SelectedItemChanged(); } else if (sender == (getHost())) { host_SelectedItemChanged(); } else if (sender == (getAvailableStorageTypeItems())) { <START_MOD>storageType_SelectedItemChanged(); } else if (sender == (getAvailableStorageDomainTypeItems())) { org.ovirt.engine.core.common.businessentities.StorageDomainType storageDomainType = getAvailableStorageDomainTypeItems<END_MOD>().getSelectedItem()<START_MOD>; org.ovirt.engine.core.common.businessentities.storage.StorageType storageType = getAvailableStorageTypeItems().getSelectedItem(); updateStorageSelectedItem(storageType, storageDomainType<END_MOD>); } } else if (ev.matchesDefinition(<START_MOD>itemsChangedEventDefinition)) { storageItemsChanged(); } else if (ev.matchesDefinition(<END_MOD>NfsStorageModel.pathChangedEventDefinition)) { nfsStorageModel_PathChanged(sender, args); } }
<START_MOD>public void validateRepo() throws java.lang.IllegalStateException;<END_MOD>
@org.junit.Test public void testCanDoSuccessOnAddFloatingDiskWithPlugUnset() { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createDiskImage(1); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createParameters(); parameters.setDiskInfo(disk); parameters.setVmId(Guid.Empty); parameters.setPlugDiskToVm(false); org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId, parameters); mockStorageDomain(storageId); mockStoragePoolIsoMap(); org.ovirt.engine.core.bll.<START_MOD>ValidateTestUtils<END_MOD>.<START_MOD>runAndAssertValidateSuccess<END_MOD>(command); }
<START_MOD>@org.junit.Before public void setUp() { vm.setCpuPerSocket(2); vm.setNumOfSockets(2); vdsWithoutCores.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vdsWithoutCores.setCpuCores(0); vdsWithoutCores.setCpuThreads(0); vdsWithCores.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vdsWithCores.setCpuCores(2); vdsWithCores.setCpuThreads(4); cluster.setId(org.ovirt.engine.core.compat.Guid.newGuid()); when(vdsGroupDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(cluster); }<END_MOD>
<START_MOD>private static void initJavaTimeZones() { for (java.lang.String id : java.util.TimeZone.getAvailableIDs()) { java.util.TimeZone timeZone = java.util.TimeZone.getTimeZone(id); org.ovirt.engine.core.bll.GetTimeZonesQuery.javaTimezones.put(timeZone.getID(), timeZone.getDisplayName()); } }<END_MOD>
public void <START_MOD>close<END_MOD>()<START_MOD> throws java.io.IOException { try<END_MOD> { if ((_session) != null) { _session.close(true); _session = null; } if ((_client) != null) { _client.stop(); _client = null; } }<START_MOD> catch (java.lang.Exception e) { org.ovirt.engine.core.utils.ssh.SSHClient.log.error( to close session e); } }<END_MOD>
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.network.ExternalSubnet.class, to = org.ovirt.engine.api.model.OpenStackSubnet.class) public static org.ovirt.engine.api.model.OpenStackSubnet map(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet entity, org.ovirt.engine.api.model.OpenStackSubnet template) { org.ovirt.engine.api.model.OpenStackSubnet model = (template != null) ? template : new org.ovirt.engine.api.model.OpenStackSubnet(); if ((entity.getId()) != null) { model.setId(entity.getId()); } if ((entity.getName()) != null) { model.setName(entity.getName()); } if ((entity.getCidr()) != null) { model.setCidr(entity.getCidr()); } if ((entity.getIpVersion()) != null) { model.setIpVersion(org.ovirt.engine.api.restapi.types.IpVersionMapper.map(entity.getIpVersion()).value()); } if ((entity.getGateway()) != null) { model.setGateway(entity.getGateway()); } java.util.List<java.lang.String> entityDnsServers = entity.getDnsServers(); if ((entityDnsServers != null) && (!(entityDnsServers.isEmpty()))) { org.ovirt.engine.api.model.DnsServers modelDnsServers = new org.ovirt.engine.api.model.DnsServers(); for (java.lang.String entityDnsServer : entityDnsServers) { modelDnsServers.getDnsServers().<START_MOD>getDnsServers().<END_MOD>add(entityDnsServer); } model.setDnsServers(modelDnsServers); } return model; }
@java.lang.Override protected boolean canDoAction() { if ((getNic()) == null) { return failCanDoAction(VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST); } if (((getNic().getLabels()) != null) && (getNic().getLabels().contains(getLabel()))) { return failCanDoAction(VdcBllMessages.INTERFACE_ALREADY_LABELED); } if (!(org.ovirt.engine.core.common.utils.ValidationUtils.validateInputs(org.ovirt.engine.core.bll.network.host.LabelNicCommand.getValidationGroups(), getNic()).isEmpty())) { return failCanDoAction(VdcBllMessages.IMPROPER_INTERFACE_IS_LABELED); } <START_MOD>for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : getHostInterfaces()) { if (((!(org.apache.commons.lang.StringUtils.equals(nic.getName(), getNicName()))) && ((nic.getLabels()) != null)) && (nic.getLabels().contains(getLabel()))) { return failCanDoAction(VdcBllMessages.OTHER_INTERFACE_ALREADY_LABELED, (   + (nic.getName()))); } } java.util.List<java.lang.String> assignedNetworks = validateNetworksNotAssignedToIncorrectNics(); if (!(assignedNetworks.isEmpty())) { return failCanDoAction(VdcBllMessages.LABELED_NETWORK_ATTACHED_TO_WRONG_INTERFACE, (   + (org.apache.commons.lang.StringUtils.join(assignedNetworks.toArray(new java.lang.String[assignedNetworks.size()]),     } <END_MOD>return true; }
@org.junit.Test public void <START_MOD>testPositiveValidateWithDisks<END_MOD>() { setUpGeneralValidations(); setUpDiskValidations(); doReturn(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getNonEmptyDiskList()).when(cmd).getDisksList(); doReturn(org.ovirt.engine.core.compat.Guid.newGuid()).when(cmd).getStorageDomainId(); assertTrue(cmd.<START_MOD>validate<END_MOD>()); assertTrue(cmd.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().isEmpty()); }
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.CommitRemoveGlusterVolumeBricks, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeRemoveBricksVDSParameters(getUpServer().getId(), volume.getName(), volume.getBricks(), volume.getReplicaCount())); setSucceeded(returnValue.getSucceeded()); if (!(getSucceeded())) { handleVdsError(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_COMMIT_FAILED, returnValue.getVdsError().getMessage()); return; } endStepJob(); releaseVolumeLock(); getReturnValue().setActionReturnValue(returnValue.getReturnValue()); }<END_MOD>
<START_MOD>public java.util.List<org.ovirt.engine.core.compat.Guid> getVmAndTemplatesIdsWithoutAttachedImageDisks(boolean shareableDisks, boolean snapshotDisks);<END_MOD>
<START_MOD>private void init() { setDataCenter(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>()); setClusters(new org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.VDSGroup>()); getClusters().getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { clusterSelectedItemChanged(); } }); setVolumeName(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>()); setClusterConfigOptions(new org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeSnapshotConfigModel>>()); setVolumeConfigOptions(new org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeSnapshotConfigModel>>()); }<END_MOD>
<START_MOD>public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAllForNetwork(org.ovirt.engine.core.compat.Guid networkId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("network_id", networkId); return getCallsHandler().executeReadList("GetVdsByNetworkId", org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VdsRowMapper.instance, parameterSource); }<END_MOD>
<START_MOD>protected org.ovirt.engine.core.compat.Guid getNewMasterId() { return (getNewMaster()) == null ? org.ovirt.engine.core.compat.Guid.Empty : getNewMaster().getId(); }<END_MOD>
protected void addVmStatic() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData(); if ((vmStatic.getOrigin()) == null) { vmStatic.setOrigin(org.ovirt.engine.core.common.businessentities.OriginType.valueOf(org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.OriginType))); } vmStatic.setId(org.ovirt.engine.core.bll.AddVmCommand.getVmId()); vmStatic.setQuotaId(getQuotaId()); vmStatic.setCreationDate(new java.util.Date()); vmStatic.setCreatedByUserId(org.ovirt.engine.core.bll.AddVmCommand.getUserId()); org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.bll.AddVmCommand.getVdsGroupDAO().get(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getVdsGroupId()); vmStatic.setArchitecture(vdsGroup.getArchitectureType()); if ((vmStatic.getCustomProperties()) != null) { org.ovirt.engine.core.utils.customprop.VmPropertiesUtils.VMCustomProperties properties = org.ovirt.engine.core.utils.customprop.VmPropertiesUtils.getInstance().parseProperties(<START_MOD>vdsGroup<END_MOD>.getcompatibility_version(), vmStatic.getCustomProperties()); java.lang.String predefinedProperties = properties.getPredefinedProperties(); java.lang.String userDefinedProperties = properties.getUseDefinedProperties(); vmStatic.setPredefinedProperties(predefinedProperties); vmStatic.setUserDefinedProperties(userDefinedProperties); } getVmStaticDao().save(vmStatic); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(vmStatic); }
private boolean isOutAverageLinkShareInSync() { return org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(ifaceQos.getOutAverageLinkshare(), <START_MOD>hostNetworkQos<END_MOD>.getOutAverageLinkshare()); }
<START_MOD>private void updateBrickStatusDown() { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> brickEntities = org.ovirt.engine.core.bll.SetNonOperationalVdsCommand.getDbFacade().getGlusterBrickDao().getGlusterVolumeBricksByServerId(org.ovirt.engine.core.bll.SetNonOperationalVdsCommand.getVdsId()); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : brickEntities) { brick.setStatus(GlusterStatus.DOWN); } org.ovirt.engine.core.bll.SetNonOperationalVdsCommand.getDbFacade().getGlusterBrickDao().updateAll(brickEntities); }<END_MOD>
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { <START_MOD>switch<END_MOD> (disk.getDiskStorageType()) <START_MOD>{<END_MOD> <START_MOD>case <END_MOD>IMAGE <START_MOD>: return<END_MOD> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)).getImageId().toString()<START_MOD>; case CINDER<END_MOD> :<START_MOD> return ((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (disk)).getImageId().toString(); } return<END_MOD> null; }
@java.lang.Override protected void executeVmCommand() { <START_MOD>setActionReturnValue(VMStatus.Down); if (<END_MOD>(org.ovirt.engine.core.bll.RunVmCommand.getVm().<START_MOD>getStatus()) == (org.ovirt.engine.core.common.businessentities.<END_MOD>VMStatus.<START_MOD>Paused)) { resumeVm(); } else {<END_MOD> initVm(); if ((<START_MOD>(!(_isRerun)) && (java.lang.Boolean.TRUE.equals(org.ovirt.engine.core.bll.RunVmCommand.getParameters().getRunAsStateless()))) && ((<END_MOD>org.ovirt.engine.core.bll.RunVmCommand.getVm().getStatus()) <START_MOD>!=<END_MOD> (org.ovirt.engine.core.common.businessentities.VMStatus.<START_MOD>Suspended))) { if (org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskList().isEmpty()) { warnIfNotAllDisksPermitSnapshots(); runVm<END_MOD>(); } else { <START_MOD>statelessVmTreatment(); } } else <END_MOD>if (((<START_MOD>((<END_MOD>!(<START_MOD>org.ovirt.engine.core.bll.RunVmCommand.isInternalExecution())) && (!(<END_MOD>_isRerun))) && ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Suspended))) <START_MOD>&& (isStatelessSnapshotExistsForVm())) && (!(isVMPartOfManualPool()))) { removeVmStatlessImages(); } else {<END_MOD> runVm(); } <START_MOD>} }<END_MOD>
<START_MOD>@org.junit.Test public void testCDAVdsSPMPrioritySetToNever() { vds.setVdsSpmPriority(BusinessEntitiesDefinitions.HOST_MIN_SPM_PRIORITY); assertFalse("canDoAction did not fail on a VDS that is set to never be elected as SPM", command.canDoAction()); org.ovirt.engine.core.bll.CommandAssertUtils.checkMessagesContains(command, VdcBllMessages.CANNOT_REINIT_SPM_VDS_MARKED_AS_NEVER_SPM); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.ui.uicompat.ConstantsManager constantsManager() { return constantsManager; }<END_MOD>
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { return java.util.Collections.singletonMap(<START_MOD>super.<END_MOD>getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.REMOTE_VM, getVmIsBeingImportedMessage())); }
<START_MOD>@org.junit.Test public void testOperationAndComponentSubscription() { org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder holder = mock(org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder.class); when(holder.getId()).thenReturn("*.*.*.uuid"); org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder differentHolder = mock(org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder.class); when(differentHolder.getId()).thenReturn("*.*.test.*"); org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder thirdHolder = mock(org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder.class); when(thirdHolder.getId()).thenReturn("*.testcase.test2.*"); org.ovirt.vdsm.jsonrpc.client.events.SubscriptionMatcher matcher = new org.ovirt.vdsm.jsonrpc.client.events.SubscriptionMatcher(); matcher.add(holder); matcher.add(differentHolder); matcher.add(thirdHolder); org.ovirt.vdsm.jsonrpc.client.JsonRpcEvent event = mock(org.ovirt.vdsm.jsonrpc.client.JsonRpcEvent.class); when(event.getMethod()).thenReturn("localhost.testcase.test.uuid"); java.util.Set<org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder> holders = matcher.match(event); assertEquals(3, holders.size()); event = mock(org.ovirt.vdsm.jsonrpc.client.JsonRpcEvent.class); when(event.getMethod()).thenReturn("localhost.testcase.test2.uuid"); holders = matcher.match(event); assertEquals(2, holders.size()); }<END_MOD>
public void updateAll() { final org.ovirt.engine.core.compat.Guid selectedInstanceTypeId = getSelectedInstanceTypeId(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllInstanceTypes, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { <START_MOD>if (<END_MOD>(returnValue == null) || (!(<START_MOD>returnValue<END_MOD>.getSucceeded()))) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.InstanceType> instanceTypes = new java.util.ArrayList<>(); if (!(getModel().isCreateInstanceOnly())) { instanceTypes.add(CustomInstanceType.INSTANCE); } for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : ((java.lang.Iterable<org.ovirt.engine.core.common.businessentities.InstanceType>) (<START_MOD>returnValue<END_MOD>.getReturnValue()))) { instanceTypes.add(instanceType); } getModel().getInstanceTypes().setItems(instanceTypes); for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : instanceTypes) { if ((instanceType instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) && (selectedInstanceTypeId == null)) { getModel().getInstanceTypes().setSelectedItem(CustomInstanceType.INSTANCE); break; } if (((instanceType.getId()) == null) || (selectedInstanceTypeId == null)) { continue; } if (instanceType.getId().equals(selectedInstanceTypeId)) { getModel().getInstanceTypes().setSelectedItem(instanceType); break; } } if ((getModel().getInstanceTypes().getSelectedItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) { getModel().getAttachedToInstanceType().setEntity(false); } updateFields(); } })); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( System Permission(s) java.lang.String removeSystemPermissionsTitle();
@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD> object) { return object.getReadOnly(); }
void saveVmsToDb() { getDbFacade().getVmDynamicDao().updateAllInBatch(<START_MOD>vmDynamicToSave<END_MOD>.values()); getDbFacade().getVmStatisticsDao().updateAllInBatch(<START_MOD>vmStatisticsToSave<END_MOD>.values()); final java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics> allVmInterfaceStatistics = new java.util.LinkedList<org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics>(); for (java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> list : <START_MOD>vmInterfaceStatisticsToSave<END_MOD>.values()) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : list) { allVmInterfaceStatistics.add(iface.getStatistics()); } } getDbFacade().getVmNetworkStatisticsDao().updateAllInBatch(allVmInterfaceStatistics); getDbFacade().getDiskImageDynamicDao().updateAllInBatch(<START_MOD>vmDiskImageDynamicToSave<END_MOD>.values()); getDbFacade().getLunDao().updateAllInBatch(vmLunDisksToSave); saveVmDevicesToDb(); saveVmGuestAgentNetworkDevices(); getVdsEventListener().addExternallyManagedVms(<START_MOD>externalVmsToAdd<END_MOD>); }
<START_MOD>@org.junit.Test public void testGetLunsToUpdateInDbDiffLunIdSamePvId() { org.ovirt.engine.core.compat.Guid pvID = org.ovirt.engine.core.compat.Guid.newGuid(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToUpdateInDb = getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid(), pvID, pvID); assertTrue(java.util.Objects.equals(lunsToUpdateInDb.stream().map(LUNs::getPhysicalVolumeId).findFirst().orElse(null), pvID.toString())); }<END_MOD>
<START_MOD>public<END_MOD> com.google.gwt.dom.client.LabelElement getLabelElement() { return labelElement; }
<START_MOD>java.lang.String VdsTransparentHugePagesState__Always();<END_MOD>
@org.junit.Test public void testJsonNullDiskDescription() throws java.io.IOException { <START_MOD>disk1.setDiskAlias<END_MOD>("DiskAlias"<START_MOD>);<END_MOD> <START_MOD>disk1.setDiskDescription(<END_MOD>null); <START_MOD>assertDiskDescriptionMap(); <END_MOD>}
<START_MOD>public long getStatusChangedAt() { return statusChangedAt; }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult dataCenterVersionMismatch() { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = getDataCenter(); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.VDS_GROUP_CANNOT_ADD_COMPATIBILITY_VERSION_WITH_LOWER_STORAGE_POOL).when(((dataCenter != null) && (<START_MOD>cluster.supportsVirtService()) ? <END_MOD>(dataCenter.getCompatibilityVersion().compareTo(cluster.getCompatibilityVersion())) > <START_MOD>  : false<END_MOD>)); }
@java.lang.Override public void invoke(org.ovirt.engine.api.extensions.ExtMap context, java.util.Map<java.lang.String, java.lang.Object> args) { context.mput(Schema.InvokeKeys.MODIFICATION_TYPE, Sql.ModificationTypes.INSERT); context.put(Schema.InvokeKeys.ENTITY_KEYS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.getGroupKeys(args, context.get(ContextKeys.POSITIONAL, java.lang.String.class))); if (!(context.containsKey(ContextKeys.EXIT_STATUS))) { org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.commands.get("_schema-modify").invoke(context); <START_MOD>} if (!(context.containsKey(ContextKeys.EXIT_STATUS))) { <END_MOD>context.put(ContextKeys.EXIT_STATUS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.SUCCESS); } }
protected void handleError() { <START_MOD>addValidateMessage<END_MOD>(org.ovirt.engine.core.bll.pm.VDS_FENCE_OPERATION_FAILED); <START_MOD>addValidateMessage<END_MOD>(org.ovirt.engine.core.bll.pm.VAR__TYPE__HOST); <START_MOD>addValidateMessage<END_MOD>(org.ovirt.engine.core.bll.pm.VAR__ACTION__RESTART); log.error( to run RestartVdsCommand on vds '{}' org.ovirt.engine.core.bll.pm.RestartVdsCommand.getVdsName()); }
@org.junit.Test public void validateDomainNotWithinThreshold() { setupForStorageTests(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(multipleSdValidator).allDomainsWithinThresholds(); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN.toString())); verify(multipleSdValidator).allDomainsWithinThresholds(); verify(multipleSdValidator, never()).allDomainsHaveSpaceForNewDisks(anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)); }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createHAThatShutdownAbnormally(); }
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__REVERT_TO); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__SNAPSHOT); }
<START_MOD>@org.junit.Before public void setUp() { initVmTemplate(); cmd.setVmTemplate(vmTemplate); cmd.setVmTemplateId(vmTemplate.getId()); initCluster(); cmd.setClusterId(cluster.getId()); cmd.setCluster(cluster); initStoragePool(); cmd.setStoragePoolId(org.ovirt.engine.core.bll.AddVmCommandTestBase.STORAGE_POOL_ID); cmd.setStoragePool(storagePool); mockDaos(); mockOtherDependencies(); org.ovirt.engine.core.bll.AddVmCommandTestBase.doNothing().when(cmd).initTemplateDisks(); org.ovirt.engine.core.bll.AddVmCommandTestBase.doNothing().when(cmd).initCommandBase(); org.ovirt.engine.core.bll.AddVmCommandTestBase.doNothing().when(cmd).initUser(); }<END_MOD>
private void updatePlugChangeability() { if ((getVm()) == null) { return; } org.ovirt.engine.core.common.businessentities.DiskInterface diskInterface = getDiskInterface().getSelectedItem(); boolean isVmRunning = ((getVm()) != null) && ((getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)); if ((DiskInterface.IDE.equals(diskInterface)) && isVmRunning) { getIsPlugged().setChangeProhibitionReason(org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.cannotHotPlugDiskWithIdeInterface()); getIsPlugged().setIsChangable(false); getIsPlugged().setEntity(false); } else { <START_MOD>if (!(canDiskBePlugged(getVm()))) { getIsPlugged().setEntity(false); getIsPlugged().setChangeProhibitionReason(org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.cannotPlugDiskIncorrectVmStatus()); <END_MOD>getIsPlugged().setIsChangable(<START_MOD>false); } else { getIsPlugged().setIsChangable(<END_MOD>isEditEnabled()); getIsPlugged().setEntity(true); } }<START_MOD> }<END_MOD>
<START_MOD>@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { object.queryBackend(org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeProfileStatisticsPopupView.Nfs); }<END_MOD>
private org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap loadStoragePoolIsoMap() { return org.ovirt.engine.core.bll.storage<START_MOD>.domains<END_MOD>.DeactivateStorageDomainWithOvfUpdateCommand.getStoragePoolIsoMapDao().get(new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId(org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>DeactivateStorageDomainWithOvfUpdateCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>DeactivateStorageDomainWithOvfUpdateCommand.getParameters().getStoragePoolId())); }
@org.junit.Test public void <START_MOD>moveUnpluggedDiskVmDown<END_MOD>() { command.getParameters().setParametersList(createMoveDisksParameters()); <START_MOD>initDiskImage<END_MOD>(<START_MOD>diskImageId); initVm(VMStatus.Down, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageId, false); <END_MOD>command.<START_MOD>updateParameters<END_MOD>(); assertTrue(<START_MOD>((<END_MOD>command.<START_MOD>getMoveDiskParametersList<END_MOD>().<START_MOD>size<END_MOD>())<START_MOD> == 1<END_MOD>)); }
<START_MOD>@javax.annotation.PostConstruct public void init() { try { threadMXBean = java.lang.management.ManagementFactory.getThreadMXBean(); } catch (java.lang.Exception e) { throw new java.lang.IllegalStateException(("Problem getting ThreadMXBean:" + e)); } org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Initializing Thread Monitoring Service"); executor.scheduleWithFixedDelay(this::monitorEngineThreadPools, 0, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ThreadPoolMonitoringIntervalInMinutes), java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Thread Monitoring Service initialized"); }<END_MOD>
<START_MOD>public void init(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, java.util.List<org.ovirt.engine.core.compat.Guid> usedHosts) { if ((hosts == null) || (usedHosts == null)) { return; } allHostNamesMap = new java.util.HashMap(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hostsMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { allHostNamesMap.put(host.getName(), host); hostsMap.put(host.getId(), host); } java.util.Set<java.lang.String> usedHostNames = usedHosts.stream().map(( guid) -> hostsMap.get(guid).getName()).sorted().collect(java.util.stream.Collectors.toSet()); init(allHostNamesMap.keySet(), usedHostNames); }<END_MOD>
protected boolean validateUniqueVmName() { return org.ovirt.engine.core.bll.VmHandler.isVmWithSameNameExistStatic(org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getName(), org.ovirt.engine.core.bll.ImportVmCommandBase.getStoragePoolId()) ? <START_MOD>failValidate<END_MOD>(EngineMessage.VM_CANNOT_IMPORT_VM_NAME_EXISTS) : true; }
public org.ovirt.engine.core.bll.ValidationResult networksAreAttachedToThisInterface(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> hostInterfaces, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworksWithLabel) { java.util.List<java.lang.String> assignedNetworks = validateNetworksNotAssignedToIncorrectNics(hostInterfaces, clusterNetworksWithLabel); return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.LABELED_NETWORK_ATTACHED_TO_WRONG_INTERFACE, (<START_MOD>((org.ovirt.engine.core.bll.validator.HostInterfaceValidator.VAR_ASSIGNED_NETWORKS) +  <END_MOD>   + (org.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>bll<END_MOD>.<START_MOD>validator.ValidatorUtils.commaSeparated<END_MOD>(assignedNetworks<START_MOD>)))).when((!(assignedNetworks.isEmpty())));<END_MOD> }
@java.lang.Override public void onSuccess(java.lang.Object innerModel, java.lang.Object innerReturnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Quota> quotaList = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (innerReturnValue)).getReturnValue(); if ((quotaList != null) && (!(quotaList.isEmpty()))) { getQuota().setItems(quotaList); } org.ovirt.engine.core.compat.Guid <START_MOD>diskQuota = ((getDisk()) != null) ? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getQuotaId() : null; org.ovirt.engine.core.compat.Guid vmQuota = ((getVm()) != null) ? getVm().getQuotaId() : null; org.ovirt.engine.core.compat.Guid <END_MOD>defaultQuota = (<START_MOD>diskQuota<END_MOD> != null) ? <START_MOD>diskQuota : vmQuota; if (defaultQuota == null) { return; } for <END_MOD>(org.ovirt.engine.core.common.businessentities.<START_MOD>Quota quota<END_MOD> : <START_MOD>quotaList) {<END_MOD> if (<START_MOD>quota.getId().equals(<END_MOD>defaultQuota<START_MOD>)) { getQuota().setSelectedItem(quota); return; } } if (diskQuota<END_MOD> != null) { org.ovirt.engine.core.common.businessentities.Quota quota <START_MOD>= new org.ovirt.engine.core.common.businessentities.Quota(); quota.setId(diskQuota); quota.setQuotaName(getDiskImage().getQuotaName()); quotaList.add(quota);<END_MOD> getQuota().<START_MOD>setItems(quotaList); getQuota().<END_MOD>setSelectedItem(quota); <START_MOD>} }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Role java.lang.String copyRoleTitle();
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Status") java.lang.String statusStorageTree();
protected boolean validateVmProperties(org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String runOnceCustomProperties, java.util.List<java.lang.String> messages) { java.lang.String customProperties = (runOnceCustomProperties != null) ? runOnceCustomProperties : vm.getCustomProperties(); return getVmPropertiesUtils().validateVmProperties(vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), customProperties, messages); }
public org.ovirt.engine.core.dao.<START_MOD>qos<END_MOD>.<START_MOD>NetworkQosDao<END_MOD> <START_MOD>getNetworkQosDao<END_MOD>() { return getDao(org.ovirt.engine.core.dao.<START_MOD>qos<END_MOD>.<START_MOD>NetworkQosDao<END_MOD>.class); }
@org.junit.Test public void canDoActionFailsOnServerNotUp() { cmd = spy(new org.ovirt.engine.core.bll.gluster.AddGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); setUpMocksForAdd(VDSStatus.Down); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP.toString())); }
<START_MOD>public static boolean isSane(java.lang.String path) { final int lenght = path.length(); if (lenght > (org.ovirt.engine.core.utils.ServletUtils.PATH_MAX)) { org.ovirt.engine.core.utils.ServletUtils.log.error((((("The path is " + lenght) + " characters long, which is longer than the maximum allowed ") + (org.ovirt.engine.core.utils.ServletUtils.PATH_MAX)) + ".")); return false; } if (((path.contains("..")) || (path.contains("//"))) || (path.contains("./"))) { org.ovirt.engine.core.utils.ServletUtils.log.error("The path contains potentially dangerous directory navigation sequences."); return false; } return true; }<END_MOD>
private boolean isQuietTimeFromLastActionPassed() { int secondsLeftToNextPmOp = ((org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.isInternalExecution()) || ((org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.VdcActionType.RestartVds))) ?   : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAuditLogDao().getTimeToWaitForNextPmOp(org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.getVds().getName(), getRequestedAuditEvent()); if (secondsLeftToNextPmOp > 0) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VDS_FENCE_DISABLED_AT_QUIET_TIME); org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.<START_MOD>addValidateMessageVariable<END_MOD>("seconds", secondsLeftToNextPmOp); return false; } else { return true; } }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterTaskInfoReturnForXmlRpc glusterVolumeRemoveBrickStart(java.lang.String volumeName, java.lang.String[] brickDirectories, int replicaCount, java.lang.Boolean forceRemove) { try { if (forceRemove) { return new org.ovirt.engine.core.vdsbroker.gluster.GlusterTaskInfoReturnForXmlRpc(vdsServer.glusterVolumeRemoveBrickForce(volumeName, brickDirectories, replicaCount)); } else { return new org.ovirt.engine.core.vdsbroker.gluster.GlusterTaskInfoReturnForXmlRpc(vdsServer.glusterVolumeRemoveBrickStart(volumeName, brickDirectories, replicaCount)); } } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }<END_MOD>
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.StorageServerConnections paramConnection = org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getConnection(); if (org.apache.commons.lang.StringUtils.isNotEmpty(paramConnection.<START_MOD>geIid<END_MOD>())) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY); } if (!(isValidConnection(paramConnection))) { return false; } org.ovirt.engine.core.compat.Guid storagePoolId = (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getParameters().getVdsId())) ? null : org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getVds().getStoragePoolId(); if (isConnWithSameDetailsExists(paramConnection, storagePoolId)) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ALREADY_EXISTS); } if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getParameters().getVdsId()))) { if ((org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getVds()) == null) { return failCanDoAction(EngineMessage.VDS_INVALID_SERVER_ID); } if ((org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getVds().getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { return failCanDoAction(EngineMessage.VDS_ADD_STORAGE_SERVER_STATUS_MUST_BE_UP); } } return true; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Quota java.lang.String defineStorageQuotaOnDataCenterTitle();
@java.lang.Override public <START_MOD>org.ovirt.engine.ui.uicommonweb.models.EntityModel<END_MOD> setEntity(java.lang.Object value) { super.setEntity(value); UpdateIsCloneVmSupported(); <START_MOD>return this; <END_MOD>}
protected void LogSettingVmToDown(org.ovirt.engine.core.compat.Guid vdsId, org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(vdsId, vmId); <START_MOD>auditLogDirector<END_MOD>.log(logable, AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE); }
<START_MOD>private boolean skipSearchItem(org.ovirt.engine.core.searchbackend.SyntaxContainer syntax, java.lang.String item) { if ((getFilter()) != null) { for (java.lang.String value : getFilter()) { if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(value.toLowerCase(), item.toLowerCase())) { return true; } } } if (((getSearchObjectFilter()) != null) && ((syntax.getState()) == (org.ovirt.engine.core.searchbackend.SyntaxObjectType.BEGIN))) { for (java.lang.String value : getSearchObjectFilter()) { if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(value.toLowerCase(), item.toLowerCase())) { return true; } } } return false; }<END_MOD>
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.BaseDisk entity) { return createIdParameterMapper(entity.getId()).addValue("disk_alias", entity.getDiskAlias()).addValue("disk_description", entity.getDiskDescription()).addValue("disk_interface", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getDiskInterface())).addValue("wipe_after_delete", entity.isWipeAfterDelete()).addValue("propagate_errors", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getPropagateErrors())).addValue("shareable", entity.isShareable()).addValue("boot", entity.isBoot()).addValue("sgio", entity.getSgio()).addValue("alignment", entity.getAlignment()).addValue("last_alignment_scan", entity.getLastAlignmentScan())<START_MOD>.addValue("disk_storage_type", ((org.ovirt.engine.core.common.businessentities.storage.Disk) (entity)).getDiskStorageType())<END_MOD>; }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.bll.MaintenanceVdsCommand.getVds(); if ((vds.getClusterSupportsGlusterService()) && (org.ovirt.engine.core.bll.MaintenanceVdsCommand.getParameters().getIsStopGlusterProcesses())) { return new org.ovirt.engine.core.bll.HostMaintenanceCallback(); } else { return super.getCallback(); } }<END_MOD>
private void validateQueryType(javax.servlet.http.HttpServletRequest request) throws java.lang.Exception { java.lang.String queryType = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, SSOConstants.HTTP_PARAM_SEARCH_QUERY_TYPE); if ((!(directoryQueries.containsKey(queryType))) && (!(directoryPublicQueries.containsKey(queryType)))) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SSOConstants.ERR_CODE_INVALID_REQUEST, java.lang.String.format(<START_MOD>ssoContext.getLocalizationUtils().localize(SSOConstants.APP_ERROR_UNSUPPORTED_PARAMETER_IN_REQUEST,<END_MOD> request.<START_MOD>getLocale()),<END_MOD> queryType, SSOConstants.HTTP_PARAM_SEARCH_QUERY_TYPE)); } }
protected boolean isDiskPassPCIAndIDELimit(org.ovirt.engine.core.common.businessentities.Disk diskInfo) { java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> vmInterfaces = org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmNetworkInterfaceDAO().getAllForVm(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.Disk> allVmDisks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getDiskMap().values()); allVmDisks.add(diskInfo); return <START_MOD>checkPciAndIDeLimit<END_MOD>(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getnum_of_monitors(), vmInterfaces, allVmDisks, org.ovirt.engine.core.bll.AbstractDiskVmCommand.getReturnValue().getCanDoActionMessages()); }
<START_MOD>protected java.lang.String getLocaleStringFromPath(final java.lang.String path) { java.lang.String result = null; if (null != path) { if (!(path.startsWith("/"))) { throw new java.lang.IllegalArgumentException("Path should start with a '/'"); } java.lang.String[] pathElements = path.substring(1).split("/"); java.io.File localeFile = new java.io.File(base, pathElements[0]); if ((!(localeFile.exists())) || (localeFile.isDirectory())) { result = pathElements[0]; } } return result; }<END_MOD>
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { if ("IsDiskHotPlugAvailable".equals(<START_MOD>args<END_MOD>.propertyName)) { com.google.gwt.event.logical.shared.InitializeEvent.fire(plugButtonDefinition); com.google.gwt.event.logical.shared.InitializeEvent.fire(unPlugButtonDefinition); } }
<START_MOD>public<END_MOD> org.ovirt.engine.ui.uicommonweb.models.<START_MOD>bookmarks.BookmarkListModel<END_MOD> <START_MOD>getBookmarkList(<END_MOD>) { <START_MOD>return<END_MOD> <START_MOD>this.bookmarkListModelProvider.get()<END_MOD>; }
protected org.ovirt.engine.api.model.Roles mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD>> entities) { org.ovirt.engine.api.model.Roles collection = new org.ovirt.engine.api.model.Roles(); for (org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD> entity : entities) { collection.getRoles().add(addLinks(map(entity))); } return collection; }
@java.lang.Override protected void executeIrsBrokerCommand() { <START_MOD>floppyList<END_MOD> = org.ovirt.engine.core.vdsbroker.irsbroker.GetFloppyListVDSCommand.getIrsProxy().getFloppyList(org.ovirt.engine.core.vdsbroker.irsbroker.GetFloppyListVDSCommand.getParameters().getStoragePoolId().toString()); org.ovirt.engine.core.vdsbroker.irsbroker.GetFloppyListVDSCommand.proceedProxyReturnValue(); setReturnValue(<START_MOD>floppyList<END_MOD>.<START_MOD>getFileToMetadata<END_MOD>()); }
<START_MOD>@org.junit.Test public void testNotExternalNetworkWhenExternalNetworkIsProvided() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = new org.ovirt.engine.core.common.businessentities.network.Network(); externalNetwork.setProvidedBy(new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(org.ovirt.engine.core.compat.Guid.newGuid(), "")); when(networkDaoMock.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(externalNetwork); assertThat(new org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator(new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(), new org.ovirt.engine.core.common.businessentities.VDS()).notExternalNetwork(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.EXTERNAL_NETWORK_CANNOT_BE_PROVISIONED)); }<END_MOD>
@java.lang.SuppressWarnings(<START_MOD>{ <END_MOD>"unchecked"<START_MOD>, "rawtypes" }<END_MOD>) private <T extends org.ovirt.engine.core.dao.DAO> T getDao(java.lang.Class<T> daoType) { for (org.ovirt.engine.core.dao.DAO dao : daos) { if (daoType.isAssignableFrom(dao.getClass())) { <START_MOD>if (dao instanceof org.ovirt.engine.core.dao.jpa.AbstractJpaDao) { try { org.ovirt.engine.core.dao.jpa.AbstractJpaDao abstractJpaDao = ((org.ovirt.engine.core.dao.jpa.AbstractJpaDao) (createAndInjectMembers(dao))); <END_MOD>return ((T) (<START_MOD>abstractJpaDao)); } catch (java.lang.Exception e) {<END_MOD> org.ovirt.engine.core.dal.dbbroker.DbFacade.log.error(( <START_MOD>initialize an AbstractJpaDao for entity   + daoType), e); } } else { return ((T) (dao)); } } } org.ovirt.engine.core.dal.dbbroker.DbFacade.log.error(( <END_MOD>find dao for   + daoType)); return null; }
public java.lang.Integer <START_MOD>getMaxVmNameLength<END_MOD>() { java.lang.Integer <START_MOD>maxVmNameLengthNonWindows<END_MOD> = ((java.lang.Integer) (getConfigValuePreConverted(ConfigurationValues.<START_MOD>MaxVmNameLength<END_MOD>))); if (<START_MOD>maxVmNameLengthNonWindows<END_MOD> == null) { return <START_MOD>64<END_MOD>; } return <START_MOD>maxVmNameLengthNonWindows<END_MOD>; }
public org.ovirt.engine.core.bll.network.macpool.MacPool createMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool, boolean engineStartup) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges macPoolUsingRanges = new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges(macPool.getId(), org.ovirt.engine.core.utils.MacAddressRangeUtils.macPoolToRanges(macPool), macPool.isAllowDuplicateMacAddresses(), auditLogDirector); macPoolUsingRanges.initialize(engineStartup, <START_MOD>macsToAllocate<END_MOD>(macPool.getId())); return macPoolUsingRanges; }
@java.lang.Override public void finished(org.ovirt.engine.core.common.businessentities.VmBase source, org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel destination) { getModel().getIsStateless().setIsAvailable(((vm.getVmPoolId()) == null)); getModel().getIsRunAndPause().setIsAvailable(((vm.getVmPoolId()) == null)); getModel().getCpuSharesAmount().setEntity(vm.getCpuShares()); updateCpuSharesSelection(); updateRngDevice(getVm().getId()); updateTimeZone(vm.getTimeZone()); updateGraphics(); getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags()); getModel().getStorageDomain().setIsChangeable(false); getModel().getProvisioning().setIsAvailable(false); getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid())); getModel().getCpuPinning().setEntity(vm.getCpuPinning()); getModel().getCustomPropertySheet().deserialize(vm.getCustomProperties()); if (isHotSetCpuSupported()) { getModel().getTotalCPUCores().getEntityChangedEvent().removeListener(getModel()); getModel().getCoresPerSocket().getSelectedItemChangedEvent().removeListener(getModel()); getModel().getNumOfSockets().getSelectedItemChangedEvent().removeListener(getModel()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostById(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { runningOnHost = ((org.ovirt.engine.core.common.businessentities.VDS) (returnValue)); hostCpu = calculateHostCpus(); updateNumOfSockets(); } }), vm.getRunOnVds()); } updateCpuProfile(vm.getVdsGroupId(), vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), vm.getCpuProfileId()); }
@java.lang.Override protected void executeCommand() { initializeStorageDomain(); addStorageDomainInDb(); org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer> connectReturnValue = connectStorage(); if (!(connectReturnValue.getFirst())) { org.ovirt.engine.core.common.errors.VdcFault fault = new org.ovirt.engine.core.common.errors.VdcFault(); fault.setError(org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD>.forValue(connectReturnValue.getSecond())); org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getReturnValue().setFault(fault); org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.setSucceeded(false); } else if (addStorageDomainInIrs()) { updateStorageDomainDynamicFromIrs(); org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.setSucceeded(true); } }
@java.lang.Override public void onSuccess(java.lang.Object model1, java.lang.Object result1) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel) (model1)); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel unitVmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (vmListModel.getWindow())); org.ovirt.engine.core.common.action.AddVmFromTemplateParameters param = new org.ovirt.engine.core.common.action.AddVmFromTemplateParameters(vmListModel.getcurrentVm(), unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap(), org.ovirt.engine.core.compat.Guid.Empty); param.setSoundDeviceEnabled(((java.lang.Boolean) (model.getIsSoundcardEnabled().getEntity()))); param.setConsoleEnabled(((java.lang.Boolean) (model.getIsConsoleDeviceEnabled().getEntity()))); <START_MOD>param.setCopyTemplatePermissions(((java.lang.Boolean) (model.getCopyPermissions().getEntity()))); <END_MOD>org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.AddVmFromTemplate, param, new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModelNetworkAsyncCallbacks.NetworkCreateOrUpdateFrontendActionAsyncCallback(model, defaultNetworkCreatingManager), vmListModel); }
@org.junit.Test public void customPropertiesNotSupported() { org.ovirt.engine.core.common.businessentities.network.Network network = createManagementNetwork(); mockExistingNetworks(network); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork("eth0", network); mockExistingIfaces(iface); iface.setCustomProperties(createCustomProperties()); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(iface)); validateAndExpectViolation(helper, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_NOT_SUPPORTED, network.getName()); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetEquallyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); <START_MOD>org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool1 = factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool2 = factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)); <END_MOD>assertThat(<START_MOD>decoratedPool1, is(macPoolDecoratorA)); assertThat(decoratedPool2, is(macPoolDecoratorA)); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(<END_MOD>macPool<START_MOD>), eq(org.ovirt.engine.core.bll.network.macpool.MacPool<END_MOD>.class)<START_MOD>, any(<END_MOD>)); }
<START_MOD>@org.junit.Test public void testListWithCustomGlobalHeaderOverridden() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(1); headers.put("my", "local"); clustersService.list().headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }<END_MOD>
<START_MOD>@org.junit.Test public void findProxyHost_ExcludedHost() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = new java.util.LinkedList<>(); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(org.ovirt.engine.core.bll.FenceProxyLocatorTest.OTHER_HOST_ID_1); vds.setVdsGroupId(org.ovirt.engine.core.bll.FenceProxyLocatorTest.FENCED_HOST_CLUSTER_ID); hosts.add(vds); when(vdsDao.getAll()).thenReturn(hosts); org.ovirt.engine.core.common.businessentities.VDS proxyHost = fenceProxyLocator.findProxyHost(false, org.ovirt.engine.core.bll.FenceProxyLocatorTest.OTHER_HOST_ID_1); assertNull(proxyHost); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> lookupEntity(org.ovirt.engine.core.compat.Guid id) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { return lookupNetwork(id, name, dataCenterId); }
@org.junit.Test public void <START_MOD>shouldHaveNotingToMigrate<END_MOD>() { <START_MOD>when(clusterEnforcer1.chooseNextVmToMigrate()).thenReturn(null); when(clusterEnforcer2.chooseNextVmToMigrate()).thenReturn(null); verify(arem, never()).migrateVM(any(<END_MOD>org.ovirt.engine.core.common.businessentities.<START_MOD>VM<END_MOD>.<START_MOD>class<END_MOD>)); }
<START_MOD>@java.lang.Override public java.lang.Void runInTransaction() { log.infoFormat("LUN details mismatch has been detected - refresh data from the underlying storage"); refreshLunsInfo(lunsFromVgInfo, lunsFromDb); return null; }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.Collection<org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS> qos = ((java.util.Collection<org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS>) (returnValue)); getQos().setItems(qos); getQos().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.findNetworkQosById(qos, getNetwork().getQosId())); }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.authentication.Directory create(java.io.File file, org.ovirt.engine.core.authentication.Configuration config) { java.lang.String name = config.getInheritedString(org.ovirt.engine.core.authentication.nop.NopDirectoryFactory.NAME_PARAMETER); if (name == null) { org.ovirt.engine.core.authentication.nop.NopDirectoryFactory.log.error("The configuration file \"{}\" doesn\'t contain the name of the directory.", file.getAbsolutePath()); return null; } return new org.ovirt.engine.core.authentication.nop.NopDirectory(name); }<END_MOD>
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSParametersBase getVDSParameters() { return <START_MOD>org.ovirt.engine.core.bll.storage.SecureDeletionHandler.fixParametersWithSecureDeletion(<END_MOD>new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(getEnclosingCommand().getParameters().getStoragePoolId(), getEnclosingCommand().getParameters().getSourceStorageDomainId(), getEnclosingCommand().getParameters().getImageGroupID(), org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskImageDao().get(getEnclosingCommand().getParameters().getDestinationImageId()).isWipeAfterDelete(), getEnclosingCommand().getParameters().getForceDelete())<START_MOD>)<END_MOD>; }
<START_MOD>@com.google.gwt.i18n.client.Constants.DefaultStringValue("Note: the networks will only be removed from the system, they will remain intact on any external providers.") java.lang.String removeProvidedNetworksNote();<END_MOD>
private void rollback5() { org.ovirt.engine.ui.uicompat.Enlistment enlistment = context.enlistment; org.ovirt.engine.ui.uicommonweb.models.hosts.EnlistmentContext enlistmentContext = ((org.ovirt.engine.ui.uicommonweb.models.hosts.EnlistmentContext) (enlistment.getContext())); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = context.changeVDSClusterReturnValue; if ((enlistmentContext.getDataCenterId()) != null) { org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.RemoveStoragePool, new org.ovirt.engine.core.common.action.StoragePoolParametersBase(enlistmentContext.getDataCenterId())<START_MOD>, Frontend.NULLABLE_ASYNC_CALLBACK<END_MOD>); } context.enlistment = null; enlistment.Done(); }
private org.ovirt.engine.ui.webadmin.widget.table.column.MenuCell<org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport> getRemoveBrickActivityMenu(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { org.ovirt.engine.ui.webadmin.widget.table.column.MenuCell<org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport> menuCell = new org.ovirt.engine.ui.webadmin.widget.table.column.MenuCell<org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport>() { @java.lang.Override protected boolean isVisible(org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport value) { return (value.getAsyncTask().getType()) == (org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REMOVE_BRICK); } }; menuCell.addMenuItem(constants.removeBricksStop(), getDetailModel().getStopRemoveBricksCommand()); menuCell.addMenuItem(constants.removeBricksCommit(), getDetailModel().getCommitRemoveBricksCommand()); <START_MOD>menuCell.addMenuItem(constants.retainBricks(), getDetailModel().getRetainBricksCommand()); <END_MOD>return menuCell; }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Connection parameters are invalid for this storage type.") java.lang.String ACTION_TYPE_FAILED_STORAGE_CONNECTION_WRONG_PARAMETERS_FOR_STORAGE_TYPE();<END_MOD>
public static java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType> GetNicTypeList(<START_MOD>int osId<END_MOD>, boolean hasDualmode) { java.util.<START_MOD>List<java.lang.String> osSupportedNetworkDevices = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getOsNetworkDevices(osId); java.util.<END_MOD>ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType> list = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType>(<START_MOD>osSupportedNetworkDevices.size()); for (java.lang.String supportedDevice : osSupportedNetworkDevices) { org.ovirt.engine.core.common.businessentities.network.VmInterfaceType interfaceType = org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.valueOf(supportedDevice); if ((interfaceType != (org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.rtl8139_pv)) || ((osId == (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.WINDOWS_XP)) && hasDualmode)) {<END_MOD> list.<START_MOD>add(interfaceType); } } return<END_MOD> list; }
<START_MOD>private void updateItems() { java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> items = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getItems(); for (org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity vmDeviceFeEntity : items) { vmDeviceFeEntity.setBeingUnplugged(devicesBeingHotUnplugged.contains(vmDeviceFeEntity)); } setItems(items); }<END_MOD>
<START_MOD>@java.lang.Override protected void syncSearch() { updateGuestContainerList(); org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestContainerListModel.setIsQueryFirstTime(false); }<END_MOD>
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { <START_MOD>log.debug( non-compensation state, immediately releasing macs {}. java.util.Arrays.toString(macs.toArray())); <END_MOD>macs.forEach(macPool::freeMac); }
<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeRemoveBrickCommit(java.lang.String volumeName, java.lang.String[] brickList, int replicCount);<END_MOD>
<START_MOD>@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.RemoveQosModel<org.ovirt.engine.core.common.businessentities.network.HostNetworkQos> getRemoveQosModel() { return new org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.RemoveHostNetworkQos(this); }<END_MOD>
protected org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { return createTask(taskId, asyncTaskCreationInfo, parentCommand, null, <START_MOD>java.util.Collections.<org.ovirt.engine.core.compat.Guid<END_MOD>, org.ovirt.engine.core.<START_MOD>common<END_MOD>.<START_MOD>VdcObjectType>emptyMap()<END_MOD>); }
@java.lang.Override protected void buildVmSoundDevices() { if ((vm.getVmType()) == (org.ovirt.engine.core.common.businessentities.VmType.Desktop)) { <START_MOD>buildVmDevicesFromDb<END_MOD>(VmDeviceGeneralType.SOUND, <START_MOD>true<END_MOD>); } }
public org.ovirt.engine.core.bll.ValidationResult qosBaloonSupported() { org.ovirt.engine.core.compat.Version version = cluster.getCompatibilityVersion(); return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.QOS_BALLOON_NOT_SUPPORTED).when((((version != null) && ((Version.v3_3.compareTo(version)) > 0)) && (cluster.isEnableBallooning()))); }
<START_MOD>private static int getNumOfMonitors(org.ovirt.engine.core.common.businessentities.VM vm) { int maxMonitorsSpice = (vm.getSingleQxlPci()) ? 1 : vm.getNumOfMonitors(); int maxMonitorsVnc = java.lang.Math.max(1, vm.getNumOfMonitors()); return java.lang.Math.min(maxMonitorsSpice, maxMonitorsVnc); }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__DETACH); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__STORAGE__CONNECTION); }
<START_MOD>java.lang.String ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_IS_NOT_VALID();<END_MOD>
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if (!(super.<START_MOD>validate<END_MOD>())) { return false; } if (!(getGlusterUtil().isGlusterSnapshotSupported(org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup().getCompatibilityVersion(), org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup().getId()))) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_VOLUME_SNAPSHOT_NOT_SUPPORTED); } return true; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( least one transport type should be selected. java.lang.String volumeTransportTypesValidationMsg();
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( to create Disk java.lang.String allowToCreateDiskRoleTreeTooltip();
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { org.ovirt.engine.core.bll.validator.storage.StorageConnectionValidator storageConnectionValidator = createStorageConnectionValidator(); if (((!(validate(storageConnectionValidator.isConnectionExists()))) || (!(validate(storageConnectionValidator.isDomainOfConnectionExistsAndInactive(org.ovirt.engine.core.bll.storage.connection.DetachStorageConnectionFromStorageDomainCommand.getStorageDomain()))))) || (!(validate(storageConnectionValidator.isISCSIConnectionAndDomain(org.ovirt.engine.core.bll.storage.connection.DetachStorageConnectionFromStorageDomainCommand.getStorageDomain()))))) { return false; } if (!(storageConnectionValidator.isConnectionForISCSIDomainAttached(org.ovirt.engine.core.bll.storage.connection.DetachStorageConnectionFromStorageDomainCommand.getStorageDomain()))) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_FOR_DOMAIN_NOT_EXIST); } return true; }
<START_MOD>@java.lang.Override public void doPolling(org.ovirt.engine.core.compat.Guid cmdId, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { org.ovirt.engine.core.bll.RemoveVmPoolCommand<? extends org.ovirt.engine.core.common.action.VmPoolParametersBase> command = getCommand(cmdId); boolean anyFailed = false; for (org.ovirt.engine.core.compat.Guid childCmdId : childCmdIds) { org.ovirt.engine.core.common.businessentities.CommandEntity entity = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(childCmdId); switch (entity.getCommandStatus()) { case FAILED : case FAILED_RESTARTED : case UNKNOWN : anyFailed = true; break; default : break; } if ((entity.isExecuted()) && (!(entity.getReturnValue().getSucceeded()))) { anyFailed = true; } } if (anyFailed) { command.setCommandStatus(CommandStatus.FAILED); } else { org.ovirt.engine.core.common.businessentities.VmPool pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmPoolDao().get(command.getVmPoolId()); if ((pool.getRunningVmsCount()) == 0) { command.setCommandStatus(CommandStatus.SUCCEEDED); } } }<END_MOD>
<START_MOD>@org.junit.Test public void networkWithDifferentMTUAddedToNic() { org.ovirt.engine.core.common.businessentities.Network net = createNetwork("nonVmMtu5000"); net.setVmNetwork(false); net.setMtu(5000); org.ovirt.engine.core.common.businessentities.Network newNet = createNetwork("vLanVmMtu9000"); newNet.setMtu(9000); mockExistingNetworks(net, newNet); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNic("nic0", net.getName()); nic.setBridged(false); mockExistingIfaces(nic); org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper(createParametersForNics(nic, createVlan(nic.getName(), 100, newNet.getName()))); validateAndExpectViolation(helper, VdcBllMessages.NETWORK_MTU_DIFFERENCES, java.lang.String.format("[%s(%d), %s(%d)]", net.getName(), net.getMtu(), newNet.getName(), newNet.getMtu())); }<END_MOD>
<START_MOD>@org.junit.Test public void replaceProductKey_emptyKeyShouldRemoveTheWholeSection() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "", false); assertThat(res, not(containsString("<ProductKey>"))); assertThat(res, not(containsString("</ProductKey>"))); }<END_MOD>
<START_MOD>public void setOperatingsystem(org.ovirt.engine.core.bll.host.provider.foreman.ForemanOperatingSystem operationsystem) { this.operatingsystem = operationsystem; }<END_MOD>
@org.junit.Test public void insufficientStorageSpace() { setupForStorageTests(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(multipleSdValidator).allDomainsHaveSpaceForClonedDisks(anyList()); assertFalse(cmd.imagesRelatedChecks()); }
public void setIsBootSequenceTabValid(boolean value) { if (value) { <START_MOD>invalidTabs.remove<END_MOD>(org.ovirt.engine.ui.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models.vms.UnitVmModel.UnitVmTabNames.BOOT_OPTIONS_TAB); } else { invalidTabs.add<END_MOD>(<START_MOD>org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.UnitVmTabNames.BOOT_OPTIONS_TAB<END_MOD>); } }
private void managePolicyUnits() { if ((getWindow()) != null) { return; } policyUnitModel = new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ManagePolicyUnitModel(); policyUnitModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().managePolicyUnits()); policyUnitModel.setHashName("manage_policy_units"<START_MOD>); policyUnitModel.setHelpTag(policyUnitModel.getHashName(), ""<END_MOD>); policyUnitModel.setPolicyUnits(new org.ovirt.engine.ui.uicommonweb.models.ListModel()); policyUnitModel.getPolicyUnits().setItems(sort(policyUnits)); policyUnitModel.getRefreshPolicyUnitsEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { setIsQueryFirstTime(true); syncSearch(); } }); org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()); command.setIsCancel(true); policyUnitModel.getCommands().add(command); setWindow(policyUnitModel); }
@org.junit.Test public void updateChangeConnectionType() { <START_MOD>oldNFSConnection<END_MOD>.setstorage_type(StorageType.ISCSI); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_CHANGE_STORAGE_TYPE); }
@java.lang.Override protected void initDetailModels() { super.initDetailModels(); networkExternalSubnetListModel = new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkExternalSubnetListModel(); org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new org.ovirt.engine.ui.uicompat.ObservableCollection(); list.add(new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkGeneralModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkProfileListModel()); list.add(networkExternalSubnetListModel); list.add(new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkClusterListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkHostListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkVmListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkTemplateListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel()); setDetailModels(list); }
protected final void execute() { setCommandStatus(CommandStatus.ACTIVE<START_MOD>); checkPersistCommand(<END_MOD>); getReturnValue().setCanDoAction(true); getReturnValue().setIsSyncronious(true); if ((!(hasTaskHandlers())) || ((getExecutionIndex()) == 0)) { org.ovirt.engine.core.bll.job.ExecutionHandler.addStep(getExecutionContext(), StepEnum.EXECUTING, null); } try { handleTransactivity(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(scope, this); } catch (javax.ejb.TransactionRolledbackLocalException e) { log.infoFormat( was aborted in {0} this.getClass().getName()); compensate(); } finally { try { if (getCommandShouldBeLogged()) { logRenamedEntity(); logCommand(); } if (getSucceeded()) { startPollingAsyncTasks(); } } finally { if ((!(hasTasks())) && (!(org.ovirt.engine.core.bll.job.ExecutionHandler.checkIfJobHasTasks(getExecutionContext())))) { org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(getExecutionContext(), getSucceeded()); } } } }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.HostNIC model, org.ovirt.engine.api.model.HostNIC transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertNotNull(transform.getNetwork()); assertEquals(model.getNetwork().getName(), transform.getNetwork().getName()); assertNotNull(transform.getIp()); assertEquals(model.getIp().getAddress(), transform.getIp().getAddress()); assertEquals(model.getIp().getNetmask(), transform.getIp().getNetmask()); assertEquals(model.getIp().getGateway(), transform.getIp().getGateway()); assertNotNull(transform.getMac()); assertEquals(model.getMac().getAddress(), transform.getMac().getAddress()); assertNotNull(model.getBonding()); assertEquals(model.getBonding().getOptions().getOptions().size(), transform.getBonding().getOptions().getOptions().size()); for (int i = 0; i < (model.getBonding().getOptions().getOptions().size()); i++) { assertEquals(model.getBonding().getOptions().getOptions().get(i).getName(), transform.getBonding().getOptions().getOptions().get(i).getName()); assertEquals(model.getBonding().getOptions().getOptions().get(i).getValue(), transform.getBonding().getOptions().getOptions().get(i).getValue()); } <START_MOD>assertNotNull(model.getCustomProperties()); assertEquals(org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.parse(model.getCustomProperties().getCustomProperty()), org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.parse(transform.getCustomProperties().getCustomProperty())); <END_MOD>}
<START_MOD>@org.junit.Test public void testGetVmDisks() throws java.io.IOException { try { org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument(getXmlOvfData()); org.ovirt.engine.core.utils.OvfUtils.getVmDisks(xmlDocument); } catch (java.io.IOException e) { e.printStackTrace(); } catch (java.lang.Exception e) { e.printStackTrace(); } assertEquals(true, true); }<END_MOD>
<START_MOD>private void attachManagementNetwork() { org.ovirt.engine.core.common.businessentities.network.Network net = findManagementNetwork(org.ovirt.engine.core.bll.AddVdsGroupCommand.getVdsGroup(), getManagementNetworkId()); if (net != null) { org.ovirt.engine.core.dal.dbbroker.DbFacadeLocator.getDbFacade().getNetworkClusterDao().save(createNetworkCluster(net.getId())); } }<END_MOD>
<START_MOD>public java.util.List<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice> getStorageDevicesInHost(org.ovirt.engine.core.compat.Guid hostId);<END_MOD>
@org.junit.Test public void <START_MOD>validateFailWithUnsupportedDiskInterface<END_MOD>() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId); mockVm(); mockStorageDomain(storageId); mockStoragePoolIsoMap(); mockMaxPciSlots(); when(diskValidator.isReadOnlyPropertyCompatibleWithInterface()).thenReturn(ValidationResult.VALID); when(diskValidator.isDiskInterfaceSupported(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED)); when(diskValidator.isVirtIoScsiValid(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(ValidationResult.VALID); when(command.getDiskValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class))).thenReturn(diskValidator); assertFalse(command.<START_MOD>validate<END_MOD>()); assertTrue(command.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().contains(EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED.toString())); }
public int getAnonymousHugePages() { return mVdsStatistics.getAnonymousHugePages(); }
public void setpm_options(java.lang.String value) { mVdsStatic.<START_MOD>setPmOptions<END_MOD>(value); }
protected java.lang.Object resolveCreated(org.ovirt.engine.core.common.action.VdcReturnValueBase result, org.ovirt.engine.api.restapi.resource.EntityResolver entityResolver, java.lang.Class<? extends org.ovirt.engine.api.model.BaseResource> suggestedParentType) { try { return entityResolver.resolve(result.getActionReturnValue()); } catch (java.lang.Exception e) { return null; } }
public org.ovirt.engine.core.bll.tasks.SPMAsyncTask concreteCreateTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { <START_MOD>return<END_MOD> <START_MOD>createTask(internalGetTaskType(command),<END_MOD> new org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters(asyncTaskCreationInfo, getAsyncTask(taskId, command, asyncTaskCreationInfo, parentCommand)).<START_MOD>withEntityInfo<END_MOD>(command.getParameters().getEntityInfo())); }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.Quota quota) { if ((quota.getQuotaEnforcementType()) == null) { return getApplicationResources().iconDisable(); } switch (quota.getQuotaEnforcementType()) { case HARD_ENFORCEMENT : return getApplicationResources().iconEnforce(); case SOFT_ENFORCEMENT : return getApplicationResources().iconAudit(); case DISABLED : return getApplicationResources().iconDisable(); default : return getApplicationResources().iconDisable(); } }
@java.lang.Override public java.lang.String encodedId(org.ovirt.engine.<START_MOD>extensions<END_MOD>.<START_MOD>aaa<END_MOD>.<START_MOD>builtin<END_MOD>.<START_MOD>kerberosldap.IdType<END_MOD> id) { org.ovirt.engine.core.compat.Guid guid = id.<START_MOD>toGuid<END_MOD>(); return getNsUniqueIdFromGuidString(guid.toString()); }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Disk o1, org.ovirt.engine.core.common.businessentities.Disk o2) { <START_MOD>java.lang.String alias1 =<END_MOD> o1.getDiskAlias()<START_MOD>; java<END_MOD>.<START_MOD>lang.String alias2 = <END_MOD>o2.getDiskAlias()<START_MOD>; if (alias1 == null) { if (alias2 == null) { return 0; } else { return -1; } } if (alias2 == null) { return 1; } return alias1.compareTo(alias2<END_MOD>); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> getUserRequestForStorageDomainRepoFileList() { return org.ovirt.engine.core.bll.<START_MOD>storage.domains.<END_MOD>IsoDomainListSyncronizer.getInstance().getUserRequestForStorageDomainRepoFileList(getStorageDomainIdForQuery(), GetImagesListQueryBase.getParameters().getImageType(), GetImagesListQueryBase.getParameters().getForceRefresh()); }
public void setserver_SSL_enabled(boolean value) { this.mVdsStatic.<START_MOD>setServerSslEnabled<END_MOD>(value); }
@java.lang.Override public void execute(int iterationId) { org.ovirt.engine.core.common.businessentities.VDS vds = getVdss().get(iterationId); try { boolean isConnectSucceeded = org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(getStorageDomain().getStorageType()).connectStorageToDomainByVdsId(getStorageDomain(), vds.getId()); if (isConnectSucceeded) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().runVdsCommand(VDSCommandType.ConnectStoragePool, new org.ovirt.engine.core.common.vdscommands.ConnectStoragePoolVDSCommandParameters(vds, getStoragePool())); } else { org.ovirt.engine.core.bll.storage.ConntectVDSToPoolAndDomains.log.errorFormat( to connect host {0} to domain {1} vds.getName(), getStorageDomain().getStorageName()); } } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.storage.ConntectVDSToPoolAndDomains.log.errorFormat( to connect host {0} to storage pool {1}. Exception: {3} vds.getName(), getStoragePool().getName(), e); } }
public void OnRemove() { for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD> role = ((org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD>) (item)); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.RemoveRole, new org.ovirt.engine.core.common.action.RolesParameterBase(role.getId())); } Cancel(); getSearchCommand().Execute(); }
protected org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD> getAdGroup(org.ovirt.engine.api.model.Group group) { if ((group.getId()) != null) { return lookupGroupById(asGuid(group.getId())); } java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD>> adGroups = asCollection(getEntity(java.util.ArrayList.class, SearchType.AdGroup, getSearchPattern("*", getDomainName(group.getName())))); for (org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD> adGroup : adGroups) { if (adGroup.getname().equals(group.getName())) { return adGroup; } } return entityNotFound(); }
<START_MOD>private java.lang.String replaceLocaleWithUSLocale(java.lang.String originalString, java.util.Locale locale) { return originalString.replaceAll(((("/" + (locale.toLanguageTag().replaceAll("-", "\\\\-"))) + "|/") + (locale.toString())), ("/" + (java.util.Locale.US.toLanguageTag()))); }<END_MOD>
private void initNetworkModels() { java.util.Map<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> networkModels = new java.util.HashMap<<START_MOD>>(); networkLabelMap = new <END_MOD>java.<START_MOD>util.HashMap(); for (org.ovirt.engine.core.common.businessentities.network.Network network : allNetworks) {<END_MOD> org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel<START_MOD> networkModel = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel(network, this); networkModels.put(network.getName(), networkModel); if (!(network.isExternal())) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkLabelModel labelModel =<END_MOD> networkLabelMap<START_MOD>.get(network.getLabel()); if (labelModel == null) { labelModel<END_MOD> = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkLabelModel<START_MOD>(network.getLabel(), this); networkLabelMap.put(network.getLabel(), labelModel); } labelModel.getNetworks().add(<END_MOD>networkModel<START_MOD>); } } setNetworks(<END_MOD>networkModels); }
@java.lang.Override public java.lang.Object mapFromContext(java.lang.Object ctx) { if (ctx == null) { return null; } org.springframework.ldap.core.DirContextAdapter searchResult = ((org.springframework.ldap.core.DirContextAdapter) (ctx)); javax.naming.directory.Attributes attributes = searchResult.getAttributes(); if (attributes == null) { return null; } if ((attributes.get(org.ovirt.engine.extensions.aaa.builtin.kerberosldap.OpenLdapGroupAttributes.entryuuid.name())) == null) { return null; } try { java.util.List<java.lang.String> memberOf = new java.util.ArrayList<java.lang.String>(); javax.naming.directory.Attribute att = attributes.get(org.ovirt.engine.extensions.aaa.builtin.kerberosldap.OpenLdapGroupAttributes.memberof.name()); if (att != null) { javax.naming.NamingEnumeration<?> groupsNames = att.getAll(); while (groupsNames.hasMoreElements()) { memberOf.add(((java.lang.String) (groupsNames.nextElement()))); } } java.lang.String objectGuid = ((java.lang.String) (attributes.get(org.ovirt.engine.extensions.aaa.builtin.kerberosldap.OpenLdapGroupAttributes.entryuuid.name()).get(0))); java.lang.String distinguishedName = searchResult.getNameInNamespace(); distinguishedName = org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapBrokerUtils.hadleNameEscaping(distinguishedName); org.ovirt.engine.extensions.aaa.builtin.kerberosldap.GroupSearchResult groupSearchResult = new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.GroupSearchResult(new org.ovirt.engine.<START_MOD>extensions.aaa.builtin.kerberosldap.IdType(org.ovirt.engine.<END_MOD>core.compat.Guid.createGuidFromStringDefaultEmpty(objectGuid)<START_MOD>).toString(<END_MOD>), memberOf, distinguishedName); return groupSearchResult; } catch (java.lang.Exception ex) { org.ovirt.engine.extensions.aaa.builtin.kerberosldap.OpenLdapGroupContextMapper.log.error( populating group ex); return null; } }
@java.lang.Override protected boolean canDoAction() { java.lang.String sshPublicKey = org.ovirt.engine.core.bll.UserProfilesOperationCommandBase.getParameters().getUserProfile().getSshPublicKey(); if ((sshPublicKey == null) || (sshPublicKey.isEmpty())) { return true; } if (!(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isPublicKeyValid(sshPublicKey))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_INVALID_PUBLIC_SSH_KEY); } return true; }
private void cleanZombieTasks() { long maxTime = org.ovirt.engine.core.compat.DateTime.getNow().AddMinutes(((-1) * (org.ovirt.engine.core.common.config.Config.<java.lang.Integer><START_MOD>getValue<END_MOD>(ConfigValues.AsyncTaskZombieTaskLifeInMinutes)))).getTime(); for (org.ovirt.engine.core.bll.SPMAsyncTask task : _tasks.values()) { if ((task.getParameters().getDbAsyncTask().getStartTime().getTime()) < maxTime) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("CommandName", task.getParameters().getDbAsyncTask().getaction_type().toString()); logable.addCustomValue("Date", task.getParameters().getDbAsyncTask().getStartTime().toString()); if (((task.getLastTaskStatus().getStatus()) != (org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.finished)) && ((task.getLastTaskStatus().getStatus()) != (org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.unknown))) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.TASK_STOPPING_ASYNC_TASK); org.ovirt.engine.core.bll.AsyncTaskManager.log.infoFormat( zombie tasks: Stopping async task {0} that started at {1} task.getParameters().getDbAsyncTask().getaction_type(), task.getParameters().getDbAsyncTask().getStartTime()); task.stopTask(true); } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.TASK_CLEARING_ASYNC_TASK); org.ovirt.engine.core.bll.AsyncTaskManager.log.infoFormat( zombie tasks: Clearing async task {0} that started at {1} task.getParameters().getDbAsyncTask().getaction_type(), task.getParameters().getDbAsyncTask().getStartTime()); task.clearAsyncTask(true); } } } }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getVdsGroup(); if (cluster == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID); return false; } if (!(cluster.supportsGlusterService())) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_DOES_NOT_SUPPORT_GLUSTER); return false; } if (<START_MOD>volume.getVolumeType().isDispersedType()) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CREATION_OF_DISPERSE_VOLUME_NOT_SUPPORTED); return false; } if (<END_MOD>volumeNameExists(volume.getName())) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NAME_ALREADY_EXISTS); addCanDoActionMessageVariable("volumeName", volume.getName()); return false; } if (!(validate(createVolumeValidator().isForceCreateVolumeAllowed(getVdsGroup().getCompatibilityVersion(), getParameters().isForce())))) { return false; } return validateBricks(volume); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { if (((<START_MOD>!(org.ovirt.engine.core.bll.AddDiskCommand.isInternalExecution())) && (<END_MOD>(org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getVmId()) != null)<START_MOD>)<END_MOD> && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getVmId())))) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED)); } return null; }
private void UpdateProperties() { org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkView<END_MOD> <START_MOD>extendedNetwork<END_MOD> = ((org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkView<END_MOD>) (getEntity())); setName(<START_MOD>extendedNetwork.getNetwork()<END_MOD>.getName()); <START_MOD>setId(extendedNetwork.getNetwork().getId()); <END_MOD>setDescription(<START_MOD>extendedNetwork.getNetwork()<END_MOD>.getdescription()); <START_MOD>setRole<END_MOD>(<START_MOD>extendedNetwork.getNetwork()<END_MOD>.isVmNetwork()); setVlan(<START_MOD>extendedNetwork.getNetwork()<END_MOD>.getvlan_id()); <START_MOD>if ((extendedNetwork.getNetwork().getMtu()) == 0) { <END_MOD>setMtu(<START_MOD>null); } else { setMtu(extendedNetwork.getNetwork()<END_MOD>.getMtu()); }<START_MOD> }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultStringValue("String was expected") java.lang.String StringArgExpected();<END_MOD>
<START_MOD>java.lang.String GlusterDeleteWebhookException();<END_MOD>
private boolean validateAndCompleteParameters(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.AuditLogType, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase> auditLogPair) throws org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException { <START_MOD>boolean hardEnforcement = (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType()); for (org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter param : parameters.getParameters()) { boolean validQuotaId = checkAndFetchQuota(parameters, param, auditLogPair); boolean validCluster = true; boolean validStorageDomain = true; <END_MOD>if (validQuotaId<START_MOD>) { if (param instanceof org.ovirt.engine.core.bll.quota.QuotaClusterConsumptionParameter) {<END_MOD> validCluster = <START_MOD>checkClusterMatchQuota(parameters, ((org.ovirt.engine.core.bll.quota.QuotaClusterConsumptionParameter) (param))); } if (param instanceof org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) {<END_MOD> validStorageDomain = <START_MOD>checkStoragePoolMatchQuota(parameters, ((<END_MOD>org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) <START_MOD>(param))<END_MOD>); } } if (((!validQuotaId) || (!validCluster)) || (!validStorageDomain)) { if (hardEnforcement) { return false; } else { parameters.getValidationMessages().clear(); } } } parameters.getParameters().removeAll(corruptedParameters); corruptedParameters.clear(); return true; }
<START_MOD>public org.ovirt.engine.core.compat.Version getClusterCompatibilityVersion() { return clusterCompatibilityVersion; }<END_MOD>
<START_MOD>private boolean validateManagementNetwork() { final org.ovirt.engine.core.common.businessentities.network.Network managementNetwork; if ((getManagementNetworkId()) == null) { managementNetwork = defaultManagementNetworkFinder.findDefaultManagementNetwork(org.ovirt.engine.core.bll.AddVdsGroupCommand.getVdsGroup().getStoragePoolId()); if (managementNetwork == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } } else { managementNetwork = getManagementNetworkById(getManagementNetworkId()); if (managementNetwork == null) { addCanDoActionMessage(VdcBllMessages.NETWORK_NOT_EXISTS); return false; } } final org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator networkClusterValidator = createNetworkClusterValidator(); return ((validate(networkClusterValidator.networkBelongsToDataCenter(org.ovirt.engine.core.bll.AddVdsGroupCommand.getVdsGroup(), managementNetwork))) && (validate(networkClusterValidator.managementNetworkAttachment(managementNetwork)))) && (validate(networkClusterValidator.migrationPropertySupported())); }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(java.lang.Object object) { return ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).isExistsInSystem() ? org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmFromExportDomainPopupView.resources.alertImage() : null; }<END_MOD>
@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveHasNetworkAssignedWhichIsNotRemovedAsAPartOfRequest() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond(); org.ovirt.engine.core.common.businessentities.network.Network networkBeingRemoved = new org.ovirt.engine.core.common.businessentities.network.Network(); networkBeingRemoved.setName("assignedNetwork"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveA = createBondSlave(bond, "slaveA"); slaveA.setNetworkName("assignedNetwork"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveB = createBondSlave(bond, "slaveB"); bond.setSlaves(java.util.Arrays.asList(slaveA.getName(), slaveB.getName())); org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(host.getId()); params.setBonds(java.util.Collections.singletonList(bond)); doTestValidateModifiedBondSlaves(params, java.util.Arrays.asList(bond, slaveA, slaveB), java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>emptyList(), java.util.Collections.singletonList(networkBeingRemoved), ValidationResult.VALID, ValidationResult.VALID, new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE<START_MOD>, HostSetupNetworksValidator.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE_ENTITY, slaveA.getName()<END_MOD>)); }
<START_MOD>protected void postInitStorageDomains() { boolean showWarning = false; for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel disk : getDisks()) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (disk.getDisk())); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> diskStorageIds = diskImage.getstorage_ids(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage_domains> sourceStorageDomains = org.ovirt.engine.ui.uicommonweb.Linq.getStorageDomainsByIds(diskStorageIds, getActiveStorageDomains()); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage_domains> destStorageDomains = org.ovirt.engine.ui.uicommonweb.Linq.Except(getActiveStorageDomains(), sourceStorageDomains); destStorageDomains = filterStoragesByDatacenterId(destStorageDomains, diskImage.getstorage_pool_id()); boolean isDiskBasedOnTemplate = !(diskImage.getParentId().equals(NGuid.Empty)); if (isDiskBasedOnTemplate) { destStorageDomains = org.ovirt.engine.ui.uicommonweb.Linq.Except(destStorageDomains, getMissingStorages(destStorageDomains, disk)); } if ((sourceStorageDomains.isEmpty()) || (destStorageDomains.isEmpty())) { showWarning = true; addProhibitionReasons(disk, isDiskBasedOnTemplate, sourceStorageDomains.isEmpty(), destStorageDomains.isEmpty()); } java.util.Collections.sort(destStorageDomains, new org.ovirt.engine.ui.uicommonweb.Linq.StorageDomainByNameComparer()); java.util.Collections.sort(sourceStorageDomains, new org.ovirt.engine.ui.uicommonweb.Linq.StorageDomainByNameComparer()); disk.getStorageDomain().setItems(destStorageDomains); disk.getSourceStorageDomain().setItems(sourceStorageDomains); addSourceStorageDomainName(disk, sourceStorageDomains); } sortDisks(); postCopyOrMoveInit(showWarning); }<END_MOD>
private static <START_MOD>void addQoSData(<END_MOD>java.util.Map<java.lang.String, java.lang.<START_MOD>Object> specParams, java.lang.String containerName, <END_MOD>int average, int peak, int burst<START_MOD>) { if (average > 0<END_MOD>) { java.util.Map<java.lang.String, java.lang.String> qosData = new java.util.HashMap<>(); qosData.put(VdsProperties.QOS_AVERAGE, java.lang.String.valueOf(<START_MOD>(<END_MOD>average<START_MOD> * (org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.TO_KILOBITS))<END_MOD>)); qosData.put(VdsProperties.QOS_PEAK, java.lang.String.valueOf(<START_MOD>(<END_MOD>peak<START_MOD> * (org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.TO_KILOBITS))<END_MOD>)); qosData.put(VdsProperties.QOS_BURST, java.lang.String.valueOf(<START_MOD>(<END_MOD>burst<START_MOD> * (org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.TO_KILOBITS)))); specParams.put(containerName, qosData)<END_MOD>; }<START_MOD> }<END_MOD>
<START_MOD>@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getCustomValues() { int noOfBricks = 0; if ((getParameters().getBricks()) != null) { noOfBricks = getParameters().getBricks().size(); } addCustomValue(GlusterConstants.NO_OF_BRICKS, java.lang.String.valueOf(noOfBricks)); return super.getCustomValues(); }<END_MOD>
<START_MOD>public void onKernelCmdlineResetButton() { setKernelCmdlineParsable(true); kernelCmdlineListener.setEnabled(false); getKernelCmdline().setEntity(""); kernelCmdlineListener.setEnabled(true); resetKernelCmdlineCheckboxes(); }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult nameNotUsed() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NAME_ALREADY_USED).when(((hostDao.getByName(host.getName())) != null)); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Running") java.lang.String runningVm();
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.OperationCadidateEventArgs evtArgs = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.OperationCadidateEventArgs) (args)); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation candidate = evtArgs.getCandidate(); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1 = evtArgs.getOp1(); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2 = evtArgs.getOp2(); if (<START_MOD>evtArgs.isDryRun()) { return; } if (<END_MOD>candidate == null) { setErrorStatus(constants.noValidActionSetupNetwork()); } else { if (candidate.isErroneousOperation()) { setErrorStatus(candidate.getMessage(op1, op2)); } else { if (candidate.isDisplayNetworkAffected(op1, op2)) { setWarningStatus(applicationMessages.moveDisplayNetworkWarning(candidate.getMessage(op1, op2))); } else { setValidStatus(candidate.getMessage(op1, op2)); } } } }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { boolean returnValue = ((super.<START_MOD>validate<END_MOD>()) && (org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.checkStorageDomain())) && (((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)) || (checkStorageDomainStatusNotEqual(StorageDomainStatus.Active))); if ((returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master))) && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStoragePool()) != null)) { if ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.electNewMaster()) == null) { returnValue = false; <START_MOD>addValidateMessage<END_MOD>(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN); } else if (!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.initializeVds())) { returnValue = false; <START_MOD>addValidateMessage<END_MOD>(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN_HOST_NOT_ACTIVE); } } if (returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLANCE))) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.ERROR_CANNOT_MANAGE_STORAGE_DOMAIN); returnValue = false; } return returnValue; }
public static final org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractTextColumn<END_MOD><org.ovirt.engine.core.common.businessentities.Disk> getInterfaceColumn(java.lang.String sortBy) { org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractTextColumn<END_MOD><org.ovirt.engine.core.common.businessentities.Disk> column = new org.ovirt.engine.ui.common.widget.table.column.AbstractEnumColumn<org.ovirt.engine.core.common.businessentities.Disk, org.ovirt.engine.core.common.businessentities.DiskInterface>() { @java.lang.Override protected org.ovirt.engine.core.common.businessentities.DiskInterface getRawValue(org.ovirt.engine.core.common.businessentities.Disk object) { return object.getDiskInterface(); } <START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.Disk object) {<END_MOD> return <START_MOD>null; } }; return <END_MOD>org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable(column, sortBy); }
@org.junit.Test public void canDoActionFailsForGlusterServerWhenNoUpServer() throws java.lang.Exception { setupGlusterMock(true, null, false); assertFalse(commandMock.canDoAction()); assertTrue(commandMock.getReturnValue().getCanDoActionMessages().contains(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NO_GLUSTER_HOST_TO_PEER_PROBE.toString())); }
<START_MOD>@java.lang.Override public void updateVolumeCapacityInfo(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSizeInfo volumeCapacityInfo) { getCallsHandler().executeModification("UpdateGlusterVolumeCapacityInfo", getCustomMapSqlParameterSource().addValue("id", volumeCapacityInfo.getVolumeId()).addValue("total_space", volumeCapacityInfo.getTotalSize()).addValue("used_space", volumeCapacityInfo.getUsedSize()).addValue("free_space", volumeCapacityInfo.getFreeSize())); }<END_MOD>
public void setAnonymousHugePages(int value) { mVdsStatistics.setAnonymousHugePages(value); }
<START_MOD>public void setLock(org.ovirt.engine.core.common.locks.Lock lock) { this.lock = lock; }<END_MOD>
<START_MOD>public void updateImageSize(org.ovirt.engine.core.compat.Guid id, long size, java.util.Date lastModified);<END_MOD>
<START_MOD>public static org.ovirt.engine.api.model.ResumeBehavior mapResumeBehavior(org.ovirt.engine.core.common.businessentities.ResumeBehavior resumeBehavior) { if (resumeBehavior == null) { return null; } switch (resumeBehavior) { case AUTO_RESUME : return org.ovirt.engine.api.model.ResumeBehavior.AUTO_RESUME; case LEAVE_PAUSED : return org.ovirt.engine.api.model.ResumeBehavior.LEAVE_PAUSED; case KILL : return org.ovirt.engine.api.model.ResumeBehavior.KILL; default : throw new java.lang.IllegalArgumentException((("Unknown resume behavior \"" + resumeBehavior) + "\"")); } }<END_MOD>
public static boolean CheckImageConfiguration(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain, org.ovirt.engine.core.common.businessentities.DiskImageBase diskInfo, java.util.List<java.lang.String> messages) { boolean result = true; if (((((diskInfo.<START_MOD>getVolumeType<END_MOD>()) == (org.ovirt.engine.core.common.businessentities.VolumeType.Preallocated)) && ((diskInfo.<START_MOD>getVolumeFormat<END_MOD>()) == (org.ovirt.engine.core.common.businessentities.VolumeFormat.COW))) || ((((storageDomain.getstorage_type()) == (org.ovirt.engine.core.common.businessentities.StorageType.FCP)) || ((storageDomain.getstorage_type()) == (org.ovirt.engine.core.common.businessentities.StorageType.ISCSI))) && (((diskInfo.<START_MOD>getVolumeType<END_MOD>()) == (org.ovirt.engine.core.common.businessentities.VolumeType.Sparse)) && ((diskInfo.<START_MOD>getVolumeFormat<END_MOD>()) == (org.ovirt.engine.core.common.businessentities.VolumeFormat.RAW))))) || (((diskInfo.<START_MOD>getVolumeFormat<END_MOD>()) == (org.ovirt.engine.core.common.businessentities.VolumeFormat.Unassigned)) || ((diskInfo.<START_MOD>getVolumeType<END_MOD>()) == (org.ovirt.engine.core.common.businessentities.VolumeType.Unassigned)))) { result = false; messages.add(VdcBllMessages.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED.toString()); } return result; }
@java.lang.Override public void endSuccessfully() { <START_MOD>setQcowCompatForQcowImage<END_MOD>(); if (org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImportAsTemplate()) { org.ovirt.engine.core.compat.Guid newTemplateId = createTemplate(); if (newTemplateId != null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.setSucceeded(true); }
@java.lang.Override protected void initSelectedType() { getNicType().setSelectedItem(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetDefaultNicType()); }
@java.lang.Override public void onSuccess(java.lang.Object model1, java.lang.Object result1) { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>) (result1)); <START_MOD>managementNetwork = org.ovirt.engine.ui.uicommonweb.Linq.findManagentNetwork(clusterNetworks); <END_MOD>profilesQuery.setModel(clusterNetworks); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVnicProfilesByDcId(profilesQuery, dcId); }
<START_MOD>public void setData(org.ovirt.engine.core.common.utils.ParametersMap data) { this.data = data; }<END_MOD>
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.Disk object) { return (object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.LUN) ? org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.resources.externalDiskIcon() : null; }
private boolean validRemovedBonds(org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Bond> removedBonds) { java.util.Set<java.lang.String> requiredNicsNames = getRemovedBondsUsedByNetworks(removedBonds); boolean passed = true; for (org.ovirt.engine.core.common.businessentities.network.Bond removedBond : params.getRemovedBonds()) { <START_MOD>java.lang.String bondName = removedBond.getName(); <END_MOD>if (<START_MOD>bondName<END_MOD> == null) { addViolation(VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST, null); passed = false; continue; } org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingBond = existingIfaces.get(<START_MOD>bondName<END_MOD>); if (<START_MOD>validateAndAddViolation(new org.ovirt.engine.core.bll.validator.HostInterfaceValidator<END_MOD>(existingBond<START_MOD>).interfaceIsBond()<END_MOD>, <START_MOD>bondName)) {<END_MOD> passed = false; continue; } if (requiredNicsNames.contains(<START_MOD>bondName<END_MOD>)) { addViolation(VdcBllMessages.BOND_USED_BY_NETWORK_ATTACHMENTS, <START_MOD>bondName<END_MOD>); passed = false; continue; } } return passed; }
@java.lang.Override public void dispatchEvent(org.ovirt.engine.core.notifier.filter.Event event, java.lang.String address) { <START_MOD>sendQueue<END_MOD>.<START_MOD>add<END_MOD>(new org.ovirt.engine.core.notifier.transport.smtp.Smtp.<START_MOD>DispatchAttempt<END_MOD>(<START_MOD>event<END_MOD>, address)); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getDisabledHtml() { return !(showTitle) ? disabledImage : !(imageAfterTitle) ? org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.TEMPLATES.imageTextButton(disabledImage, org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.<START_MOD>getText<END_MOD>()) : org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.TEMPLATES.textImageButton(org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.<START_MOD>getText<END_MOD>(), disabledImage); }
@java.lang.Override public java.lang.Void runInTransaction() { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); <START_MOD>addGraphicsDevice(); <END_MOD>getCompensationContext().stateChanged(); return null; }
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("Out Peak") java.lang.String NetworkQoSOutboundPeak();<END_MOD>
<START_MOD>public java.lang.String getErrorNicName() { return errorNicName; }<END_MOD>
<START_MOD>private void initValueChangeListeners() { org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs> onPropertyChangeValidate = new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { validate(true); } }; getSnapshotName().getEntityChangedEvent().addListener(onPropertyChangeValidate); getDaysOfTheWeek().getSelectedItemChangedEvent().addListener(onPropertyChangeValidate); getDaysOfMonth().getSelectedItemChangedEvent().addListener(onPropertyChangeValidate); getEndDate().getEntityChangedEvent().addListener(onPropertyChangeValidate); }<END_MOD>
<START_MOD>org.ovirt.engine.core.vdsbroker.ResourceManager getResourceManager() { return org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance(); }<END_MOD>
@org.junit.Test public void canDoActionFailsMaster() { sd.setStorageDomainType(StorageDomainType.Master); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }
<START_MOD>private boolean hasStatelessSnapshot() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSnapshotDao().exists(org.ovirt.engine.core.bll.CloneVmCommand.getVmId(), Snapshot.SnapshotType.STATELESS); }<END_MOD>
<START_MOD>private void setRngAvailability() { TModel model = getModel(); org.ovirt.engine.ui.uicommonweb.models.vms.Set<org.ovirt.engine.core.common.businessentities.VmRngDevice.Source> requiredRngSources = model.getSelectedCluster().getRequiredRngSources(); model.getIsRngEnabled().setIsChangable((!(requiredRngSources.isEmpty()))); model.getIsRngEnabled().setMessage(constants.rngNotSupportedByCluster()); model.getRngPeriod().setIsChangable((!(requiredRngSources.isEmpty()))); model.getRngPeriod().setMessage(constants.rngNotSupportedByCluster()); model.getRngBytes().setIsChangable((!(requiredRngSources.isEmpty()))); model.getRngBytes().setMessage(constants.rngNotSupportedByCluster()); model.getRngSourceRandom().setIsChangable(requiredRngSources.contains(VmRngDevice.Source.RANDOM)); model.getRngSourceRandom().setMessage(messages.rngSourceNotSupportedByCluster(VmRngDevice.Source.RANDOM.toString())); model.getRngSourceHwrng().setIsChangable(requiredRngSources.contains(VmRngDevice.Source.HWRNG)); model.getRngSourceHwrng().setMessage(messages.rngSourceNotSupportedByCluster(VmRngDevice.Source.HWRNG.toString())); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String getHashName() { return "edit_network_qos"; }<END_MOD>
<START_MOD>public java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> getVolumesByVolumeType(org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType volumeType);<END_MOD>
<START_MOD>private void validateRoleMapping(org.ovirt.engine.api.model.RegistrationRoleMapping mapping) { if (!(mapping.isSetFrom())) { badRequest("Role name is missing from source."); } if (!(mapping.isSetTo())) { badRequest("Role name is missing from destination."); } }<END_MOD>
@java.lang.Override protected org.ovirt.engine.api.model.DataCenter postPopulate(org.ovirt.engine.api.model.DataCenter model) { model.setStorageFormat(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.restapi.model.StorageFormat.class).value()); <START_MOD>model.setQuotaModeType(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.QuotaModeType.class).value()); <END_MOD>return model; }
@org.junit.Test public void testQueryFailsIfServerExists() { mockQueryParameters(org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.EXISTING_SERVER, org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.PASSWORD); try { getQuery().executeQueryCommand(); fail( didn fail when the server already exists! } catch (java.lang.RuntimeException e) { assertEquals(<START_MOD>EngineMessages<END_MOD>.SERVER_ALREADY_EXISTS_IN_ANOTHER_CLUSTER.toString(), e.getMessage()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { if ("SearchString".equals(args.propertyName)) { clearSelection(); } }
<START_MOD>private boolean isSupported(org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters.ArchCapabilitiesVerb archCapabilitiesVerb, org.ovirt.engine.core.common.businessentities.ArchitectureType architecture, org.ovirt.engine.core.compat.Version version) { switch (archCapabilitiesVerb) { case GetMigrationSupport : return org.ovirt.engine.core.common.FeatureSupported.isMigrationSupported(architecture, version); case GetMemorySnapshotSupport : return org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(architecture, version); } return false; }<END_MOD>
@org.junit.Test public void <START_MOD>testGetUsingInvalidName<END_MOD>() { org.ovirt.engine.core.common.businessentities.VDS result = dao.<START_MOD>get<END_MOD>("farkle"); <START_MOD>assertNull<END_MOD>(result); }
@java.lang.Override protected org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, org.ovirt.engine.core.common.errors.EngineFault> runConnectionStorageToDomain(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain, org.ovirt.engine.core.compat.Guid vdsId, int type) { return <START_MOD>runConnectionStorageToDomain(storageDomain,<END_MOD> <START_MOD>vdsId, type<END_MOD>, null<START_MOD>, Guid.Empty<END_MOD>); }
@org.junit.Test public void testNotRemovingLabeledNetworksWhenRemovingLabeledNetworkUnrelatedToRemovedBond() throws java.lang.Exception { java.lang.String nicName = "nicName"; java.lang.String label = "label"; org.ovirt.engine.core.common.businessentities.network.Network labeledNetwork = new org.ovirt.engine.core.common.businessentities.network.Network(); labeledNetwork.<START_MOD>setName("networkName"); labeledNetwork.<END_MOD>setId(org.ovirt.engine.core.compat.Guid.newGuid()); labeledNetwork.setLabel(label); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = createNetworkAttachment(labeledNetwork); networkAttachment.setNicName(nicName); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingNic = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); existingNic.setLabels(java.util.Collections.singleton(label)); existingNic.setName(nicName); org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(host.getId()); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setHost(host).setParams(params).setExistingInterfaces(java.util.Collections.singletonList(existingNic)).setNetworkBusinessEntityMap(new org.ovirt.engine.core.common.businessentities.BusinessEntityMap(java.util.Collections.singletonList(labeledNetwork))).build(); assertThat(validator.notRemovingLabeledNetworks(networkAttachment), failsWith(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_LABELED_NETWORK_FROM_NIC<START_MOD>, HostSetupNetworksValidator.VAR_ACTION_TYPE_FAILED_CANNOT_REMOVE_LABELED_NETWORK_FROM_NIC_LIST, labeledNetwork.getName()<END_MOD>)); }
<START_MOD>private boolean noCollapseWithSnapshots() { return ((getParameters().getVm().getSnapshots().size()) > 1) && (!(getParameters().getCopyCollapse())); }<END_MOD>
<START_MOD>public org.ovirt.engine.api.rsdl.Node.Builder actions(java.util.List<java.lang.String> actions) { node.setActions(actions); return this; }<END_MOD>
public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getDcInventoryStatus(javax.sql.DataSource engineDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDAO(engineDataSource); return dao.getDcInventoryStatus(); }
protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return tsb.append("id", getId()).append("name", getName()).append("vdsId", getVdsId()).append("networkName", getNetworkName()).append("ipv4BootProtocol", getIpv4BootProtocol()).append("ipv4Address", getIpv4Address()).append("ipv4Subnet", getIpv4Subnet()).append("ipv4Gateway", getIpv4Gateway()).append("ipv6BootProtocol", getIpv6BootProtocol()).append("ipv6Address", getIpv6Address()).append("ipv6Prefix", getIpv6Prefix()).append("ipv6Gateway", getIpv6Gateway()).append("mtu", getMtu()).append("bridged", isBridged()).append(<START_MOD>"switchType", getSwitchType()).append(<END_MOD>"type", getType()).append("networkImplementationDetails", getNetworkImplementationDetails()).append("qos", getQos()); }
public void setVmCount(int value) { mVdsDynamic.setVmCount(value); }
@org.junit.Test public void <START_MOD>updateIScsiConnection<END_MOD>() { <START_MOD>newNFSConnection<END_MOD>.setstorage_type(StorageType.ISCSI); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_STORAGE); }
private void logRunningCommand() { java.lang.StringBuilder logInfo = new java.lang.StringBuilder( command:  <START_MOD> if (log.isDebugEnabled()) { logInfo.append(((getParameters()) != null ? ("(" + (getCommandParameters(getParameters()))) + ")" : org.apache.commons.lang.StringUtils.EMPTY)); }<END_MOD> if (hasTaskHandlers()) { logInfo.append( Task handler:   } logInfo.append( internal: ").append(org.ovirt.engine.core.bll.CommandBase.isInternalExecution()).append(". java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionSubjectList = getPermissionCheckSubjects(); if ((permissionSubjectList != null) && (!(permissionSubjectList.isEmpty()))) { java.lang.StringBuilder logEntityIdsInfo = new java.lang.StringBuilder(); for (org.ovirt.engine.core.bll.utils.PermissionSubject permSubject : permissionSubjectList) { if ((permSubject.getObjectId()) != null) { if ((logEntityIdsInfo.length()) != 0) { logEntityIdsInfo.append(   } logEntityIdsInfo.append( ID: ").append(permSubject.getObjectId()).append(" Type:   } } if ((logEntityIdsInfo.length()) != 0) { logInfo.append( Entities affected :   } } log.info(logInfo); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Virtual Machine(s) java.lang.String removeVirtualMachinesTitle();
private boolean isUser(org.ovirt.engine.core.common.businessentities.DbUser user) { return <START_MOD>(user != null) && (!(<END_MOD>org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(user.getusername())<START_MOD>))<END_MOD>; }
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.common.queries.VdcQueryType getProfilesByQosIdQueryType() { return org.ovirt.engine.core.common.queries.VdcQueryType.GetAllNetworksByQosId; }<END_MOD>
public void onSave() { if (!(Validate())) { return; } org.ovirt.engine.core.common.businessentities.Provider provider = new org.ovirt.engine.core.common.businessentities.Provider(); provider.setName(((java.lang.String) (privateName.getEntity()))); provider.setDescription(((java.lang.String) (privateDescription.getEntity()))); provider.setApiAddress(((java.lang.String) (privateUrl.getEntity()))); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.AddProvider, new org.ovirt.engine.core.common.action.ProviderParameters(provider)<START_MOD>, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void Executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { sourceListModel.getSearchCommand().Execute(); } }<END_MOD>); cancel(); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Details java.lang.String eventDetailsTitle();
public static void GetMaxNumOfVmSockets(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, java.lang.String version) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 1; } }; org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.GetConfigurationValueParameters tempVar = new org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.GetConfigurationValueParameters(ConfigurationValues.MaxNumOfVmSockets); tempVar.setVersion(version); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(tempVar, aQuery); }
public void show() { }
@java.lang.Override protected void executeVdsBrokerCommand() { _result = org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand.getBroker().discoverSendTargets(org.ovirt.engine.core.vdsbroker.<START_MOD>storage<END_MOD>.<START_MOD>StorageConnectionHelper<END_MOD>.createStructFromConnection(org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand.getParameters().getConnection(), null<START_MOD>, org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand.getParameters().getVdsId()<END_MOD>)); org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand.proceedProxyReturnValue(); setReturnValue((_result.isFullTargets() ? parseFullTargets(_result.getIqnList()) : parseTargets(_result.getIqnList()))); }
private void updateActionAvailability() { getEditParameterCommand().setIsExecutionAllowed((((getSelectedItems()) != null) && ((getSelectedItems().size()) == 1))); getResetParameterCommand().setIsExecutionAllowed((((getSelectedItems()) != null) && ((getSelectedItems().size()) == 1))); <START_MOD>getResetAllParameterCommand().setIsExecutionAllowed((((getItems()) != null) && ((((java.util.List) (getItems())).size()) > 0))); <END_MOD>}
@java.lang.Override protected void executeCommand() { super.executeCommand(); <START_MOD>if (org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getSucceeded()) { updatePoolVms(); } <END_MOD>org.ovirt.engine.core.bll.Backend.getInstance().triggerPoolMonitoringJob(); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue(<START_MOD>"Storage"<END_MOD>) java.lang.String storagesTitle();
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { interfaceMappings.setLabel(((java.lang.String) (behavior.getInterfaceMappingsLabel().getEntity()))); }<END_MOD>
<START_MOD>public void unpinVNode(org.ovirt.engine.core.compat.Guid sourceVMGuid, int sourceVNumaIndex) { org.ovirt.engine.ui.uicommonweb.models.hosts.numa.VNodeModel vNodeModel = getNodeModel(sourceVMGuid, sourceVNumaIndex); if (vNodeModel.isPinned()) { assignedNumaNodes.get(vNodeModel.getHostNodeIndex()).remove(vNodeModel); unassignedNumaNodes.add(vNodeModel); } vmsToUpdate.add(vNodeModel.getVm().getId()); modelReady(); }<END_MOD>
private boolean validateAndCompleteParameters(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.AuditLogType, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase> auditLogPair) throws org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException { if ((org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType())) { return true; } boolean hardEnforcement = (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType()); for (org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter param : parameters.getParameters()) { boolean validQuotaId = checkAndFetchQuota(parameters, param, auditLogPair); boolean validVdsGroup = true; boolean validStorageDomain = true; if (validQuotaId) { if (param instanceof org.ovirt.engine.core.bll.quota.QuotaVdsGroupConsumptionParameter) { validVdsGroup = checkVdsGroupMatchQuota(parameters, param); } if (param instanceof org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) { validStorageDomain = checkStoragePoolMatchQuota(parameters, param); } } if (((!validQuotaId) || (!validVdsGroup)) || (!validStorageDomain)) { if (hardEnforcement) { return false; } else { parameters.<START_MOD>getValidateMessages<END_MOD>().clear(); if ((org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType())) { auditLogPair.setFirst(null); } } } } parameters.getParameters().removeAll(corruptedParameters); corruptedParameters.clear(); return true; }
public java.lang.String getHardwareProductName() { return mVdsDynamic.getHardwareProductName(); }
<START_MOD>void save(org.ovirt.engine.core.common.job.StepSubjectEntity stepSubjectEntity);<END_MOD>
@java.lang.Override protected void proceedProxyReturnValue() { org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD> returnStatus = getReturnValueFromStatus(org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getReturnStatus()); switch (returnStatus) { case StoragePoolUnknown : case SpmStatusError : break; case TaskInProgress : org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getVDSReturnValue().setVdsError(new org.ovirt.engine.core.common.errors.VDSError(returnStatus, org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getReturnStatus().mMessage)); org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getVDSReturnValue().setSucceeded(false); break; default : super.proceedProxyReturnValue(); initializeVdsError(returnStatus); break; } }
@java.lang.Override public void updateIfNeeded(org.ovirt.engine.core.common.businessentities.VdsDynamic vdsDynamic) { org.ovirt.engine.core.common.businessentities.VdsDynamic dbData = get(vdsDynamic.getId()); if (!(dbData.equals(vdsDynamic))) { update(vdsDynamic); } else { org.ovirt.engine.core.dao.<START_MOD>VdsDynamicDAOImpl<END_MOD>.log.debug( an unneeded update of VdsDynamic } }
public void addSubTab(org.ovirt.engine.ui.webadmin.plugin.entity.EntityType entityType, java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl<START_MOD>, org.ovirt.engine.ui.common.widget.Align align<END_MOD>) { switch (entityType) { case DataCenter : addTab(DataCenterSubTabPanelPresenter.TYPE_RequestTabs, DataCenterSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl<START_MOD>, align<END_MOD>); break; case Cluster : addTab(ClusterSubTabPanelPresenter.TYPE_RequestTabs, ClusterSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl<START_MOD>, align<END_MOD>); break; case Host : addTab(HostSubTabPanelPresenter.TYPE_RequestTabs, HostSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl<START_MOD>, align<END_MOD>); break; case Storage : addTab(StorageSubTabPanelPresenter.TYPE_RequestTabs, StorageSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl<START_MOD>, align<END_MOD>); break; case Disk : addTab(DiskSubTabPanelPresenter.TYPE_RequestTabs, DiskSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl<START_MOD>, align<END_MOD>); break; case VirtualMachine : addTab(VirtualMachineSubTabPanelPresenter.TYPE_RequestTabs, VirtualMachineSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl<START_MOD>, align<END_MOD>); break; case Template : addTab(TemplateSubTabPanelPresenter.TYPE_RequestTabs, TemplateSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl<START_MOD>, align<END_MOD>); break; } }
<START_MOD>private void generateWriteOne(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getEnumName(type); java.lang.String tag = schemaNames.getSchemaTagName(type.getName()); javaBuffer.addImport(typeName); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.json.JsonWriter.class); javaBuffer.addLine("public static void writeOne(%1$s object, JsonWriter writer) {", typeName.getSimpleName()); javaBuffer.addLine(" writeOne(object, null, writer);"); javaBuffer.addLine("}"); javaBuffer.addLine(); javaBuffer.addLine("public static void writeOne(%1$s object, String name, JsonWriter writer) {", typeName.getSimpleName()); javaBuffer.addLine("if (name != null) {"); javaBuffer.addLine("writer.writeStartObject(name);"); javaBuffer.addLine("}"); javaBuffer.addLine("else {"); javaBuffer.addLine("writer.writeStartObject();"); javaBuffer.addLine("}"); javaBuffer.addLine("writer.writeString(\"%1$s\", object.value());", tag); javaBuffer.addLine("writer.writeEnd();"); javaBuffer.addLine("}"); javaBuffer.addLine(); }<END_MOD>
<START_MOD>protected void updateEmulatedMachines() { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel().getSelectedCluster(); if (cluster == null) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getEmulatedMachinesByClusterID(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.TreeSet<java.lang.String> emulatedSet = new java.util.TreeSet<java.lang.String>(((java.util.HashSet<java.lang.String>) (returnValue))); emulatedSet.add(""); java.lang.String lastEmulatedSelected = getModel().getSelectedEmulatedMachine().getEntity(); getModel().getEmulatedMachine().setItems(emulatedSet); if (((lastEmulatedSelected != null) && (!(lastEmulatedSelected.equals("")))) && (emulatedSet.contains(lastEmulatedSelected))) { getModel().getEmulatedMachine().setSelectedItem(lastEmulatedSelected); } else { getModel().getSelectedEmulatedMachine().setEntity(lastEmulatedSelected); } } }), cluster.getId()); }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("Function Modules") java.lang.String clusterPolicyFunctionLabel();<END_MOD>
<START_MOD>private org.snmp4j.security.UsmUser getUsmUser(org.ovirt.engine.core.notifier.transport.snmp.Snmp.Profile profile) { org.snmp4j.smi.OID authenticationProtocol = null; org.snmp4j.smi.OctetString authenticationPassphrase = null; org.snmp4j.smi.OID privacyProtocol = null; org.snmp4j.smi.OctetString privacyPassphrase = null; switch (profile.securityLevel) { case org.snmp4j.security.SecurityLevel.AUTH_NOPRIV : authenticationProtocol = org.snmp4j.security.AuthMD5.ID; authenticationPassphrase = profile.authPassphrase; break; case org.snmp4j.security.SecurityLevel.AUTH_PRIV : authenticationProtocol = org.snmp4j.security.AuthMD5.ID; authenticationPassphrase = profile.authPassphrase; privacyProtocol = org.snmp4j.security.PrivAES128.ID; privacyPassphrase = profile.privacyPassphrase; break; } return new org.snmp4j.security.UsmUser(profile.username, authenticationProtocol, authenticationPassphrase, privacyProtocol, privacyPassphrase); }<END_MOD>
@org.junit.Test public void vlanNetworkWithVmNetworkDenied() { org.ovirt.engine.core.common.businessentities.network.Network net1 = createNetwork("net1"); org.ovirt.engine.core.common.businessentities.network.Network net2 = createNetwork("net2"); net2.setVlanId(100); mockExistingNetworks(net1, net2); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic("nic0", null); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic = createVlan(nic.getName(), net2.getVlanId(), net2.getName()); mockExistingIfaces(nic, vlanNic); nic.setNetworkName(net1.getName()); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(nic, vlanNic)); <START_MOD>final java.util.List<org.ovirt.engine.core.bll.validator.network.NetworkType> networksOnIface = java.util.Arrays.asList(NetworkType.VM, NetworkType.VLAN); when(networkExclusivenessValidator.isNetworkExclusive(networksOnIface)).thenReturn(false); <END_MOD>validateAndExpectViolation(helper, <START_MOD>org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK_MSG<END_MOD>, nic.getName()); }
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.scheduling.PolicyUnit.class, to = org.ovirt.engine.api.model.SchedulingPolicyUnit.class) public static org.ovirt.engine.api.model.SchedulingPolicyUnit map(org.ovirt.engine.core.common.scheduling.PolicyUnit entity, org.ovirt.engine.api.model.SchedulingPolicyUnit template) { org.ovirt.engine.api.model.SchedulingPolicyUnit model = (template != null) ? template : new org.ovirt.engine.api.model.SchedulingPolicyUnit(); model.setId(entity.getId().toString()); model.setName(entity.getName()); model.setDescription(entity.getDescription()); model.setType(entity.getPolicyUnitType().name().toLowerCase()); model.setEnabled(entity.isEnabled()); model.setInternal(entity.isInternal()); if (((entity.getParameterRegExMap()) != null) && (!(entity.getParameterRegExMap().isEmpty()))) { model.setRegexValidationMap(org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.fromMap(entity.getParameterRegExMap())); } return model; }<END_MOD>
@java.lang.Override protected void setUriInfo(javax.ws.rs.core.UriInfo uriInfo) { resource.setUriInfo(uriInfo); ((org.ovirt.engine.api.restapi.resource.<START_MOD>BackendClusterSubResource<END_MOD>) (resource)).getParent().setUriInfo(uriInfo); }
protected void showErrataListWithDetailsPopup(<START_MOD>java.lang.String filterCommand, java.lang.String title) { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.HostErrataCountModel transferObj = new org.ovirt.engine.ui.uicommonweb.models.HostErrataCountModel(<END_MOD>);<START_MOD> transferObj.setFilterCommand(filterCommand); transferObj.setTitle(title); transferObj.setGuid(getGuid()); transferObj.setName(getName()); setWindow(transferObj); initCommands(transferObj); }<END_MOD>
@java.lang.Override protected boolean canDoAction() { setStoragePoolId(getVm().getStoragePoolId()); org.ovirt.engine.core.bll.validator.LiveSnapshotValidator <START_MOD>liveSnapshotValidator = new org.ovirt.engine.core.bll.<END_MOD>validator<START_MOD>.LiveSnapshotValidator(org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getStoragePool().getcompatibility_version(), org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getVds()); org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotValidator<END_MOD> = <START_MOD>createSnapshotsValidator(); if ((!(validate(liveSnapshotValidator.canDoSnapshot()))) || (!(validate(snapshotValidator.vmNotDuringSnapshot<END_MOD>(org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.<START_MOD>getVmId()))))) { return false; } if ((((!(isValidParametersList())) || (!(checkImagesStatus()))) || (!(validateSpaceRequirements()))) || (!(performVmRelatedChecks()))) { return false; } for (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : getParameters().getParametersList()) { org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getReturnValue().setCanDoAction((((((isDiskNotShareable(parameters.getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(parameters.getImageId()))) && (isTemplateInDestStorageDomain(parameters.getImageId<END_MOD>(), <START_MOD>parameters.getTargetStorageDomainId()))) && (performStorageDomainsChecks(parameters))) && (isSameSourceAndDest(parameters)))); if (!(<END_MOD>org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.<START_MOD>getReturnValue().getCanDoAction())) { return false; } }<END_MOD> if (!(<START_MOD>setAndValidateDiskProfiles(<END_MOD>))) { return false; } return true; }
private boolean isAlreadyInRequestedStatus(java.lang.String options) { boolean ret = false; org.ovirt.engine.core.common.businessentities.FenceActionType action = org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getAction(); _result = org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getBroker().fenceNode(org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getIp(), "", org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getType(), org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getUser(), org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getPassword(), "status", "", options<START_MOD>, convertFencingPolicy(org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getFencingPolicy())<END_MOD>); if ((_result.power) != null) { java.lang.String powerStatus = _result.power.toLowerCase(); if (((action == (org.ovirt.engine.core.common.businessentities.FenceActionType.Start)) && (powerStatus.equals("on"))) || ((action == (org.ovirt.engine.core.common.businessentities.FenceActionType.Stop)) && (powerStatus.equals("off")))) ret = true; } return ret; }
private boolean executeBasicAuthentication(javax.ws.rs.core.HttpHeaders headers, <START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String<END_MOD> <START_MOD>engineSessionId<END_MOD>, boolean preferPersistentAuth) { boolean successful = false; java.util.List<java.lang.String> auth = headers.getRequestHeader(HttpHeaders.AUTHORIZATION); if ((auth != null) && ((auth.size()) != 0)) { org.ovirt.engine.api.common.security.auth.Principal principal = scheme.decode(headers); if (((validator) == null) || (validator.validate(principal, engineSessionId))) { successful = true; updateAuthenticationProperties(preferPersistentAuth, principal); } } return successful; }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VM> buildFromOVFs(java.util.List<java.lang.String> ovfList) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<>(); for (java.lang.String ovf : ovfList) { try { if (!(ovfHelper.isOvfTemplate(ovf))) { vms.add(ovfHelper.readVmFromOvf(ovf)<START_MOD>.getFirst()<END_MOD>); } } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException ex) { auditLogOvfLoadError(ex.getName(), ex.getMessage()); } } return vms; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Quota(s) java.lang.String removeQuotasTitle();
@java.lang.Override public org.ovirt.engine.api.model.Templates list() { org.ovirt.engine.api.model.Templates templates = new org.ovirt.engine.api.model.Templates(); <START_MOD>if (org.ovirt.engine.api.common.util.QueryHelper.hasMatrixParam(getUriInfo(), org.ovirt.engine.api.restapi.resource.UNREGISTERED_CONSTRAINT_PARAMETER)) { java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> unregisteredTemplates = getBackendCollection(VdcQueryType.GetUnregisteredVms, new org.ovirt.engine.core.common.queries.IdAndNameQueryParameters(storageDomainId, "Template")); java.util.List<org.ovirt.engine.api.model.Template> collection = new java.util.ArrayList<org.ovirt.engine.api.model.Template>(); for (org.ovirt.engine.core.common.businessentities.VmTemplate entity : unregisteredTemplates) { org.ovirt.engine.api.model.Template vmTemplate = map(entity); collection.add(addLinks(populate(vmTemplate, entity))); } <END_MOD>templates.getTemplates().addAll(<START_MOD>collection); } templates.getTemplates().addAll(<END_MOD>getCollection()); return templates; }
<START_MOD>java.lang.String selectedAffinityLabels();<END_MOD>
@javax.ws.rs.Path( (end)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultMessage("{0} TiB") @org.ovirt.engine.ui.uicompat.AlternateMessage({ "BYTES", "{0} B", "KB", "{0} KiB", "MB", "{0} MiB", "GB", "{0} GiB", "TB", "{0} TiB" }) java.lang.String sizeUnitString(java.lang.String size, @org.ovirt.engine.ui.uicompat.Select org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit sizeUnit);<END_MOD>
@java.lang.Override public boolean execute() { java.lang.String sessionId = getSessionId(); if (sessionId != null) { sendRequest(createRequest(), new org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.RestApiRequestCallback()); return true; } else { return false; } }
<START_MOD>public java.util.List<java.lang.Boolean> readBooleans() { return read(java.lang.Boolean.class); }<END_MOD>
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.<START_MOD>uicommonweb.models.hosts.ValueEventArgs<T><END_MOD> args) { org.ovirt.engine.ui.uicommonweb.models.hosts.<START_MOD>AsyncIterator<T>.CallbackContext<T> context = ((org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIterator<T>.CallbackContext<T>) (ev.getContext())); org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIterator<T> iterator = context.getIterator(); org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIteratorPredicate<T> action = context.getAction(); T item = context.getItem(); java.lang.Object value = <END_MOD>args.getValue(); boolean callComplete = false; if (action.match(item, value)) { callComplete = true; iterator.setStopped(true); } iterator.setCounter(((iterator.getCounter()) + 1)); if ((!(iterator.getStopped())) && ((iterator.getCounter()) == (org.ovirt.engine.ui.uicommonweb.Linq.count(iterator.getSource())))) { callComplete = true; } if (callComplete && ((iterator.getComplete()) != null)) { iterator.getComplete().run(item, value); } }
public static void init(final com.google.gwt.event.shared.EventBus eventBus) { org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.commonModel = org.ovirt.engine.ui.uicommonweb.models.CommonModel.newInstance(); org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.commonModel.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.EventArgs><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.common.uicommon.model.MainModelSelectionChangeEvent.fire(eventBus, org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.commonModel.getSelectedItem()); } }); }
@java.lang.Override public java.lang.<START_MOD>String<END_MOD> <START_MOD>getValue<END_MOD>(org.ovirt.engine.core.common.businessentities.VM <START_MOD>vm) { if (((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) || ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingTo))<END_MOD>) { return <START_MOD>null; } return super<END_MOD>.<START_MOD>getValue<END_MOD>(<START_MOD>vm<END_MOD>); }
<START_MOD>@org.junit.Test public void peakLowerThanAverage() { qos.setInboundPeak(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_LOW); peakConsistentWithAverageTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_PEAK_LOWER_THAN_AVERAGE)); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.asynctasks.AsyncTaskType getRevertTaskType() { return org.ovirt.engine.core.common.asynctasks.AsyncTaskType.deleteImage; }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.Void runInTransaction() { for (final org.ovirt.engine.core.compat.Guid asyncTaskId : getReturnValue().getTaskPlaceHolderIdList()) { org.ovirt.engine.core.common.businessentities.AsyncTasks task = getAsyncTaskDao().get(asyncTaskId); if ((task != null) && (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(task.getVdsmTaskId()))) { org.ovirt.engine.core.bll.AsyncTaskManager.removeTaskFromDbByTaskId(task.getTaskId()); } } return null; }<END_MOD>
<START_MOD>public void setInstanceTypeId(org.ovirt.engine.core.compat.NGuid instanceTypeId) { this.instanceTypeId = instanceTypeId; }<END_MOD>
@org.junit.Test public void testCanDoActionPoolInMaintenance() { getStoragePool().<START_MOD>setStatus<END_MOD>(StoragePoolStatus.Maintenance); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND); }
public org.ovirt.engine.core.common.businessentities.ServerCpu findMaxServerCpuByFlags(java.lang.String flags, org.ovirt.engine.core.compat.Version ver);
<START_MOD>private void importHostedEngineVM(java.util.Map vmStruct) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmsDataFromExternalProvider(vmStruct); if (vm != null) { vm.setImages(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildDiskImagesFromDevices(vmStruct)); vm.setInterfaces(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmNetworkInterfacesFromDevices(vmStruct)); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : vm.getImages()) { vm.getDiskMap().put(org.ovirt.engine.core.compat.Guid.newGuid(), diskImage); } vm.setVdsGroupId(org.ovirt.engine.core.bll.AddExternalVmsCommand.getVdsGroupId()); vm.setRunOnVds(org.ovirt.engine.core.bll.AddExternalVmsCommand.getVdsId()); importHostedEngineVm(vm); } }<END_MOD>
private void init() { leftBound.setEntity(((macRange.getMacFrom()) == null ? "" : macRange.getMacFrom())); rightBound.setEntity(((macRange.getMacTo()) == null ? "" : macRange.getMacTo())); <START_MOD>recalculateMacsCount(); leftBound.getEntityChangedEvent().addListener(( ev, sender, args) -> onMacRangeChange()); rightBound.getEntityChangedEvent().addListener(( ev, sender, args) -> onMacRangeChange()); <END_MOD>}
<START_MOD>private java.lang.String getEffectiveEmulatedMachine() { if ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomEmulatedMachine()) != null) { return org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomEmulatedMachine(); } java.lang.String recentDefault = org.ovirt.engine.core.bll.RunVmCommand.getCluster().getEmulatedMachine(); if ((removeThisDebugSwitch) && ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomCompatibilityVersion()) != null)) { java.util.List<java.lang.String> oldSupported = org.ovirt.engine.core.common.config.Config.<java.util.List<java.lang.String>>getValue(ConfigValues.ClusterEmulatedMachines, org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomCompatibilityVersion().getValue()); java.util.Optional<java.lang.String> best = oldSupported.stream().max(( s1, s2) -> (org.apache.commons.lang.StringUtils.indexOfDifference(recentDefault, s1)) - (org.apache.commons.lang.StringUtils.indexOfDifference(recentDefault, s2))); org.ovirt.engine.core.bll.RunVmCommand.log.info("Emulated machine '{}' selected since Custom Compatibility Version is set for the '{}' VM", best.orElse(recentDefault), org.ovirt.engine.core.bll.RunVmCommand.getVm().getName()); return best.orElse(recentDefault); } return recentDefault; }<END_MOD>
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.storage.LUNs dummyLun = createDummyLun(); org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap connectionMapRecord = new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap(dummyLun.getLUN_id(), org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getParameters().getStorageConnectionId()); java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connectionsForDomain; if ((<START_MOD>getLunDao().get(dummyLun.getLUN_id())) == null) { getLunDao().save(dummyLun); connectionsForDomain = getStorageServerConnectionDao().getAllForDomain(<END_MOD>org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.<START_MOD>getStorageDomainId()); for (org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : connectionsForDomain) { saveConnection(new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap<END_MOD>(dummyLun.getLUN_id()<START_MOD>, connection.getid())); } } saveConnection(connectionMapRecord);<END_MOD> org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.<START_MOD>setSucceeded(true<END_MOD>); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.ActionVersionMap> getAllActionVersionMap() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource(); return getCallsHandler().executeReadList("GetAllFromaction_version_map", org.ovirt.engine.core.dao.<START_MOD>ActionGroupDAOImpl<END_MOD>.ActionVersionMapMapper.instance, parameterSource); }
@java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.bll.storage<START_MOD>.domains<END_MOD>.StorageDomainCommandBase.proceedLUNInDb(lun, lun.getLunType()); getBaseDiskDao().save(getParameters().getDiskInfo()); getDiskLunMapDao().save(new org.ovirt.engine.core.common.businessentities.storage.DiskLunMap(getParameters().getDiskInfo().getId(), lun.getLUN_id())); if ((getVm()) != null) { addManagedDeviceForDisk(getParameters().getDiskInfo().getId(), ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (getParameters().getDiskInfo())).isUsingScsiReservation()); } return null; }
@java.lang.Override protected boolean canDoAction() { boolean returnValue = true; if (((org.ovirt.engine.core.bll.RemoveTagCommand.getTagId()) == null) || ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().get(org.ovirt.engine.core.bll.RemoveTagCommand.getTagId())) == null)) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.TAGS_CANNOT_REMOVE_TAG_NOT_EXIST); returnValue = false; } return returnValue; }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.bll.aaa.RemoveGroupCommand.getParameters().getId(); if (isLastSuperUserGroup(id)) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE); return false; } if (MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID.equals(id)) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_CANNOT_REMOVE_BUILTIN_GROUP_EVERYONE); return false; } return true; }
protected void <START_MOD>mapFileDomain<END_MOD>(org.ovirt.engine.api.model.StorageDomain model, org.ovirt.engine.core.common.businessentities.StorageDomain entity) { final org.ovirt.engine.api.model.Storage storage = model.getStorage(); org.ovirt.engine.core.common.businessentities.StorageServerConnections cnx = getStorageServerConnection(entity.getStorage()); if (cnx.getconnection().contains(":")) { java.lang.String[] parts = cnx.getconnection().split(":"); model.getStorage().setAddress(parts[0]); model.getStorage().setPath(parts[1]); } else { model.getStorage().setPath(cnx.getconnection()); } storage.setMountOptions(cnx.getMountOptions()); storage.setVfsType(cnx.getVfsType()); if ((<START_MOD>entity.getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.NFS)) { if ((<END_MOD>cnx.getNfsRetrans()) != null) { storage.setNfsRetrans(cnx.getNfsRetrans().intValue()); } if ((cnx.getNfsTimeo()) != null) { storage.setNfsTimeo(cnx.getNfsTimeo().intValue()); } if ((cnx.getNfsVersion()) != null) { storage.setNfsVersion(org.ovirt.engine.api.restapi.types.StorageDomainMapper.map(cnx.getNfsVersion(), null)); } }<START_MOD> }<END_MOD>
<START_MOD>@org.ovirt.api.metamodel.annotations.In java.lang.Boolean volatile_();<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult isPosixSupportedInDC() { if ((!(storagePool.isLocal())) && (!(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.PosixStorageEnabled, storagePool.getCompatibilityVersion().toString())))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.DATA_CENTER_POSIX_STORAGE_NOT_SUPPORTED_IN_CURRENT_VERSION); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
<START_MOD>public static org.ovirt.engine.core.common.validation.MaskValidator getInstance() { return org.ovirt.engine.core.common.validation.MaskValidator.validator; }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookUpdate(java.lang.String url, java.lang.String bearerToken) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookUpdate").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }<END_MOD>
@org.junit.Test public void validateVmMemoryCanStartOnVdsHighPendingButSwapHelps() { vds.setSwapFree(80L); boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, true); }
<START_MOD>@org.junit.Test public void testMutliKeys() throws java.lang.Exception { assertTrue(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isPublicKeysValid(((((org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.EXTRA_SSH_KEYS[0]) + "\n") + (org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.EXTRA_SSH_KEYS[1])) + "\n"))); assertTrue(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isPublicKeysValid((((org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.EXTRA_SSH_KEYS[0]) + "\n") + (org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.EXTRA_SSH_KEYS[1])))); assertTrue(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isPublicKeysValid(((org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.EXTRA_SSH_KEYS[0]) + "\n"))); assertTrue(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isPublicKeysValid(org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.EXTRA_SSH_KEYS[0])); }<END_MOD>
protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntityPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase) {<START_MOD> if ((phase == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.PAUSED_SYSTEM)) && ((pausedBySystemReason) != null)) { auditLog(this, pausedBySystemReason); }<END_MOD> org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); updates.setPhase(phase); return updateEntity(updates); }
<START_MOD>private boolean isProviderReadOnly(org.ovirt.engine.core.common.businessentities.Provider provider) { if ((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.EXTERNAL_NETWORK)) { org.ovirt.engine.core.common.businessentities.ExternalNetworkProviderProperties properties = ((org.ovirt.engine.core.common.businessentities.ExternalNetworkProviderProperties) (provider.getAdditionalProperties())); if (properties.getReadOnly()) { return true; } } return false; }<END_MOD>
<START_MOD>com.google.gwt.user.cellview.client.Header<?> createHeader(com.google.gwt.user.cellview.client.Column<T, ?> column, java.lang.String headerTextOrHtml, boolean allowHtml) { com.google.gwt.safehtml.shared.SafeHtml text = (allowHtml) ? com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(headerTextOrHtml) : com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(headerTextOrHtml); return columnResizingEnabled ? new org.ovirt.engine.ui.common.widget.table.resize.ResizableHeader<T>(text, column, this) : createSafeHtmlHeader(text); }<END_MOD>
public org.ovirt.engine.ui.uicommonweb.models.ListModel flush() { <START_MOD>org.ovirt.engine.ui.uicommonweb.models.ListModel<END_MOD> <START_MOD>model = driver.flush<END_MOD>(); <START_MOD>flush(model); return model; <END_MOD>}
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getDismissCommand())) { dismissAlert(); } else if (command == (<START_MOD>getDisplayAllCommand())) { displayAllDismissedAlerts(); } else if (command == (<END_MOD>getClearAllCommand())) { clearAllDismissedAlerts(); } }
<START_MOD>public static java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> updateInitiators(java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> conns, org.ovirt.engine.core.compat.Guid vdsId) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> res = new java.util.ArrayList(conns); for (org.ovirt.engine.core.common.businessentities.StorageServerConnections conn : conns) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> initiators = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getInterfaceDao().getIscsiInitiatorsByVdsIdAndStorageTargetId(vdsId, conn.getid()); if ((initiators != null) && (!(initiators.isEmpty()))) { conn.setInitiatorName(initiators.remove(0).getName()); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface initiator : initiators) { org.ovirt.engine.core.common.businessentities.StorageServerConnections newConn = org.ovirt.engine.core.common.businessentities.StorageServerConnections.copyOf(conn); newConn.setid(org.ovirt.engine.core.compat.Guid.newGuid().toString()); newConn.setInitiatorName(initiator.getName()); res.add(newConn); } } } return res; }<END_MOD>
<START_MOD>@java.lang.Override public boolean isDisplayNetworkToBeChanged(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2) { final org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel bondNetworkInterfaceModel1 = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel) (op1)); final org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel bondNetworkInterfaceModel2 = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel) (op2)); return (org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.isDisplayNetworkAttached(bondNetworkInterfaceModel1.getItems())) || (org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.isDisplayNetworkAttached(bondNetworkInterfaceModel2.getItems())); }<END_MOD>
@java.lang.Override protected void perform() { <START_MOD>if (isColdReboot()) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.ShutdownVm, org.ovirt.engine.core.bll.RebootVmCommand.withRootCommandInfo(new org.ovirt.engine.core.common.action.ShutdownVmParameters(org.ovirt.engine.core.bll.RebootVmCommand.getVmId(), false)), org.ovirt.engine.core.bll.RebootVmCommand.cloneContextAndDetachFromParent()); org.ovirt.engine.core.bll.RebootVmCommand.setSucceeded(true); } else { <END_MOD>final org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.RebootVm, new org.ovirt.engine.core.common.vdscommands.VdsAndVmIDVDSParametersBase(org.ovirt.engine.core.bll.RebootVmCommand.getVdsId(), org.ovirt.engine.core.bll.RebootVmCommand.getVmId())); setActionReturnValue(returnValue.getReturnValue()); setSucceeded(returnValue.getSucceeded()); }<START_MOD> }<END_MOD>
private boolean validate() { getName().validateEntity<START_MOD>(createNameValidations()); getType().validateSelectedItem<END_MOD>(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation()<START_MOD> }); getUsername().validateEntity<END_MOD>(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); <START_MOD>getPassword<END_MOD>().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); <START_MOD>getTenantName<END_MOD>().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); <START_MOD>getUrl<END_MOD>().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.UrlValidation(org.ovirt.engine.ui.uicommonweb.Uri.SCHEME_HTTP, org.ovirt.engine.ui.uicommonweb.Uri.SCHEME_HTTPS) }); getNeutronAgentModel().validate(); return ((((((getName().getIsValid()) && (getType().getIsValid())) && (getUrl().getIsValid())) && (getUsername().getIsValid())) && (getPassword().getIsValid())) && (getTenantName().getIsValid())) && (getNeutronAgentModel().getIsValid()); }
private void importChain() { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.<START_MOD>ImportProviderCertificate<END_MOD>, new org.ovirt.engine.core.common.action.<START_MOD>ImportProviderCertificateParameters<END_MOD>(provider<START_MOD>, certificate<END_MOD>), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue(); if ((res != null) && (res.getSucceeded())) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TestProviderConnectivity, new org.ovirt.engine.core.common.action.ProviderParameters(provider), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue(); setTestResultValue(res); stopProgress(); } }, null, false); } else { setTestResultValue(res); stopProgress(); } } }); sourceListModel.setConfirmWindow(null); }
@java.lang.Override protected boolean canDoAction() { return <START_MOD>validate(<END_MOD>networkNotAttachedToCluster(org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getParameters().getNetwork())<START_MOD>)<END_MOD>; }
public boolean check(final org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.<START_MOD>common.vdscommands.TimeBoundPollVDSCommandParameters.PollTechnique pt = (org.ovirt.engine.core.common.FeatureSupported.isPing2SupportedByVdsm(host.getClusterCompatibilityVersion())) ? POLL2 : POLL; org.ovirt.engine.core.<END_MOD>bll.network.host.<START_MOD>HostPoller<END_MOD> poller = new org.ovirt.engine.core.bll.network.host.<START_MOD>HostPoller(new org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters(host.getId(), pt)<END_MOD>); final long startTime = java.lang.System.nanoTime(); while (((java.lang.System.nanoTime()) - startTime) < (org.ovirt.engine.core.bll.host.HostConnectivityChecker.VDSM_RESPONSIVENESS_PERIOD_IN_NANOS)) { if (poller.poll(<START_MOD>)) { org.ovirt.engine.core.bll.host.HostConnectivityChecker.log.info( managed to communicate with VDSM agent on host '{}' with address '{}' ('{}') host.getName(), host.getHostName(), <END_MOD>host.getId()); return true; } } return false; }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__REMOVE); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__PERMISSION); }
<START_MOD>public org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmPopupWidgetConfig withSpecialMark() { return new org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmPopupWidgetConfig(advancedOnly, alwaysHidden, true, adminOnly); }<END_MOD>
@org.junit.Test public void <START_MOD>validateValidate<END_MOD>() { setupForStorageTests(); assertTrue(command.<START_MOD>validate<END_MOD>()); }
<START_MOD>private void closeConfirmationWindow() { getConfirmWindow().stopProgress(); setConfirmWindow(null); }<END_MOD>
@org.junit.Test public void updateConnectionOfUnattachedFileDomain() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0); org.ovirt.engine.core.common.businessentities.StorageDomain domain1 = new org.ovirt.engine.core.common.businessentities.StorageDomain(); domain1.setStorage(newNFSConnection.<START_MOD>getConnection<END_MOD>()); domain1.setStatus(StorageDomainStatus.Unknown); domain1.setStorageDomainSharedStatus(StorageDomainSharedStatus.Unattached); initDomainListForConnection(newNFSConnection.<START_MOD>geIid<END_MOD>(), domain1); parameters.setStorageServerConnection(newNFSConnection); when(storageConnDao.get(newNFSConnection.<START_MOD>geIid<END_MOD>())).thenReturn(oldNFSConnection); doReturn(false).when(command).isConnWithSameDetailsExists(newNFSConnection, null); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); }
<START_MOD>private void logTaskStoppedFromCLI(org.ovirt.engine.core.common.job.Step step, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity vol) { org.ovirt.engine.core.common.AuditLogType logType; switch (step.getStepType()) { case REBALANCING_VOLUME : logType = org.ovirt.engine.core.common.AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP_DETECTED_FROM_CLI; break; case REMOVING_BRICKS : logType = org.ovirt.engine.core.common.AuditLogType.STOP_REMOVING_GLUSTER_VOLUME_BRICKS_DETECTED_FROM_CLI; break; default : logType = org.ovirt.engine.core.common.AuditLogType.UNASSIGNED; break; } getGlusterLogUtil().logAuditMessage(vol.getClusterId(), vol, null, logType, null); }<END_MOD>
<START_MOD>private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (getEntity())); @java.lang.SuppressWarnings("unchecked") java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoImage> selectedImages = ((getSelectedItems()) != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoImage>) (getSelectedItems())) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoImage>(); getDownloadImagesCommand().setIsExecutionAllowed((((storageDomain != null) && ((storageDomain.getStorageType()) == (org.ovirt.engine.core.common.businessentities.StorageType.GLANCE))) && ((selectedImages.size()) > 0))); }<END_MOD>
<START_MOD>@java.lang.Override protected javax.ws.rs.core.Response performRemove(java.lang.String id) { return javax.ws.rs.core.Response.serverError().build(); }<END_MOD>
@org.junit.Test public void testImportVMFromConfigurationXMLCouldNotGetParsed() { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntity = getOvfEntityData(); ovfEntity.setOvfData( is not a valid XML initCommand(ovfEntity); java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> ovfEntityDataList = new java.util.ArrayList<>(); ovfEntityDataList.add(ovfEntity); when(unregisteredOVFDataDao.getByEntityIdAndStorageDomain(vmId, storageDomainId)).thenReturn(ovfEntityDataList); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyList())).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED); }
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultMessage("Direct LUN disk(s) will not be a part of the cloned VM: {0}.") java.lang.String directLUNDisksWillNotBePartOfTheClone(java.lang.String diskList);<END_MOD>
@org.junit.Test public void testUpdateNetworkInfo() { when(mockTargetVnicProfileFinder.findTargetVnicProfile(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME, externalVnicProfileMappings)).thenReturn(<START_MOD>optionalVnicProfile<END_MOD>); when(mockNetworkDao.get(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_ID)).thenReturn(targetNetwork); underTest.updateNetworkInfo(mockVmNetworkInterface, externalVnicProfileMappings); verify(mockTargetVnicProfileFinder).findTargetVnicProfile(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME, externalVnicProfileMappings); verify(mockVmNetworkInterface).setVnicProfileId(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_ID); verify(mockVmNetworkInterface).setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME); verify(mockVmNetworkInterface).setNetworkName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_NAME); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Bricks") java.lang.String hostBricksTitle();
<START_MOD>public void initWidget() { com.google.gwt.user.client.Element dragger = findElementByClassName(this.getElement(), "gwt-SplitLayoutPanel-VDragger"); if (dragger != null) { dragger.setInnerHTML(org.ovirt.engine.ui.userportal.widget.extended.ExtendedViewSplitLayoutPanel.template.dragger(middleBackgroundImage).asString()); } }<END_MOD>
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if (!(checkRemoveEditValidations())) { return false; } if ((getVdsGroupDao().getClustersByClusterPolicyId(getParameters().getClusterPolicyId()).size()) > 0) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_POLICY_INUSE, java.lang.String.format( %1$s clustersListIntoTokenizedString())); } return true; }
<START_MOD>protected java.lang.String getLocaleStringFromReferer(final javax.servlet.http.HttpServletRequest request) { final java.net.URI refererURL; java.lang.String result = null; try { java.lang.String referer = request.getHeader(org.ovirt.engine.core.DocsServlet.REFERER); if (null != referer) { refererURL = new java.net.URI(referer); java.lang.String query = refererURL.getQuery(); if (null != query) { java.lang.String[] parameters = query.split("&"); for (int i = 0; i < (parameters.length); i++) { java.lang.String[] keyValues = parameters[i].split("="); if (org.ovirt.engine.core.DocsServlet.LOCALE.equalsIgnoreCase(keyValues[0])) { result = keyValues[1]; break; } } } } } catch (java.net.URISyntaxException e) { org.ovirt.engine.core.DocsServlet.log.error("Unable to determine referer URI", e); } return result; }<END_MOD>
<START_MOD>public void write(java.io.File outDir) throws java.io.IOException { java.io.File packageDir = new java.io.File(outDir, className.getPackageName().replace('.', java.io.File.separatorChar)); org.apache.commons.io.FileUtils.forceMkdir(packageDir); if (!(packageDir.exists())) { if (!(packageDir.mkdirs())) { throw new java.io.IOException((("Can\'t create directory \"" + (packageDir.getAbsolutePath())) + "\"")); } } java.io.File classFile = new java.io.File(packageDir, ((className.getSimpleName()) + ".java")); java.lang.System.out.println((("Writing class file \"" + (classFile.getAbsolutePath())) + "\".")); try (java.io.Writer writer = new java.io.FileWriter(classFile)) { writer.write(toString()); } }<END_MOD>
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm()) == null) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_NOT_FOUND); } return true; }
<START_MOD>com.google.gwt.user.cellview.client.Column<T, ?> getColumn() { return column; }<END_MOD>
<START_MOD>java.lang.String getName();<END_MOD>
<START_MOD>private void addNetworkUsages(org.ovirt.engine.api.model.VersionCaps version, org.ovirt.engine.api.restapi.types.NetworkUsage[] values) { if (org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual(version, org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_1)) { version.setNetworkUsages(new org.ovirt.engine.api.model.NetworkUsages()); for (org.ovirt.engine.api.restapi.types.NetworkUsage networkUsage : values) { version.getNetworkUsages().getNetworkUsages().add(networkUsage.value()); } } }<END_MOD>
<START_MOD>org.ovirt.engine.core.bll.VdsDeploy.CustomizationCondition value();<END_MOD>
@java.lang.Override public void onFailure(final <START_MOD>org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase> operation, final <END_MOD>java.lang.Throwable caught) { if (ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ( to execute RunAction:   + caught), caught); failureEventHandler(caught); org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult(actionType, parameters, null, state); <START_MOD>if (<END_MOD>callback<START_MOD> != null) { callback<END_MOD>.executed(f); }<START_MOD> }<END_MOD>
private boolean evaluateHostUpgradeInternalCommandProgress(java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.bll.CommandBase<?> rootCommand) { org.ovirt.engine.core.common.businessentities.CommandEntity upgradeCommand = getHostUpgradeInternalCommand(childCmdIds); if (upgradeCommand != null) { switch (upgradeCommand.getCommandStatus()) { case ACTIVE : case NOT_STARTED : return <START_MOD>true<END_MOD>; case FAILED : case FAILED_RESTARTED : case UNKNOWN : rootCommand.setCommandStatus(CommandStatus.FAILED); return true; case SUCCEEDED : rootCommand.setCommandStatus(CommandStatus.SUCCEEDED); return true; } } return false; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( migrating VM between Hosts in a Cluster java.lang.String allowMigratingVmBetweenHostsInClusterRoleTreeTooltip();
private void handleException(java.lang.Throwable e) { log.error(java.lang.String.format( to import certificate: %1$s e.getMessage())); log.debug("Exception", e); throw new org.ovirt.engine.core.common.errors.<START_MOD>EngineException<END_MOD>(org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD>.PROVIDER_IMPORT_CERTIFICATE_ERROR, e.getMessage()); }
private void discoverTargets() { if (!(validateDiscoverTargetFields())) { return; } org.ovirt.engine.core.common.businessentities.VDS host = getContainer().getHost().getSelectedItem(); org.ovirt.engine.core.common.businessentities.StorageServerConnections tempVar = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); tempVar.setConnection(getAddress().getEntity().trim()); tempVar.setPort(getPort().getEntity().trim()); tempVar.setStorageType(StorageType.ISCSI); tempVar.setUserName((getUseUserAuth().getEntity() ? getUserName().getEntity() : "")); tempVar.setPassword((getUseUserAuth().getEntity() ? getPassword().getEntity() : "")); org.ovirt.engine.core.common.queries.DiscoverSendTargetsQueryParameters parameters = new org.ovirt.engine.core.common.queries.DiscoverSendTargetsQueryParameters(host.getId(), tempVar); setMessage(null); final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase model = this; <START_MOD>org.ovirt.engine.ui.frontend.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @<END_MOD>java.lang.<START_MOD>Override public void onSuccess(java.lang.<END_MOD>Object target, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue<END_MOD>) { java.lang.Object <START_MOD>result =<END_MOD> returnValue.getReturnValue(); model.postDiscoverTargetsInternal((result != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>) (result)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>())); } }, true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.DiscoverSendTargets, parameters, asyncQuery); }
private void initCommandExecutor() { if (!(cmdExecutorInitialized)) { for (org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity : coco.getCommandsWithCallBackEnabled()) { switch (cmdEntity.getCommandStatus()) { case ACTIVE_SYNC<START_MOD> : case ACTIVE_ASYNC<END_MOD> : case NOT_STARTED : coco.retrieveCommand(cmdEntity.getId()).setCommandStatus(CommandStatus.FAILED_RESTARTED); break; default : if (!(cmdEntity.isCallBackNotified())) { addToCallBackMap(cmdEntity); } break; } } cmdExecutorInitialized = true; } }
private boolean isStoragePoolMatching(org.ovirt.engine.core.common.businessentities.VM vm) { if ((org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getStoragePoolIsoMapDao().get(new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId(getStorageDomainId(), vm.getStoragePoolId()))) == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_OF_VM_NOT_MATCH); } return true; }
<START_MOD>protected void setTabBar(com.google.gwt.user.client.ui.IsWidget content) { ((org.ovirt.engine.ui.webadmin.widget.tab.SimpleTabPanel) (getTabPanel())).setTabBar(content); }<END_MOD>
public void run() { org.ovirt.vdsm.jsonrpc.client.internal.MessageContext context = null; org.codehaus.jackson.map.ObjectMapper mapper = new org.codehaus.jackson.map.ObjectMapper(); while (true) { try { context = this.queue.take(); if ((context.getClient()) == null) { break; } org.ovirt.vdsm.jsonrpc.client.internal.ResponseWorker.log.<START_MOD>debug<END_MOD>(( received : + (new java.lang.String(context.getMessage(), UTF8)))); org.codehaus.jackson.JsonNode rootNode = mapper.readTree(context.getMessage()); if (!(rootNode.isArray())) { processIncomingObject(context.getClient(), rootNode); } else { final java.util.Iterator<org.codehaus.jackson.JsonNode> iter = rootNode.getElements(); while (iter.hasNext()) { final org.codehaus.jackson.JsonNode node = iter.next(); processIncomingObject(context.getClient(), node); } } } catch (java.lang.Exception e) { org.ovirt.vdsm.jsonrpc.client.internal.ResponseWorker.log.warn( thrown during message processing e); continue; } } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.ActionGroup.class, to = org.ovirt.engine.api.model.PermitType.class) public static org.ovirt.engine.api.model.PermitType map(org.ovirt.engine.core.common.businessentities.ActionGroup entity, org.ovirt.engine.api.model.PermitType template) { try { return org.ovirt.engine.api.model.PermitType.valueOf(entity); } catch (java.lang.IllegalArgumentException e) { org.ovirt.engine.api.restapi.types.PermitMapper.log.error( mapping <START_MOD>'{}'<END_MOD> --> <START_MOD>'{}': {} entity, <END_MOD>org.ovirt.engine.api.model.PermitType.class.getName(), e<START_MOD>.getMessage()); org.ovirt.engine.api.restapi.types.PermitMapper.log.debug("Exception", e<END_MOD>); return null; } }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { if (!(org.apache.commons.lang.StringUtils.isBlank(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm().getName()))) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm().getName(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_NAME, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_IS_BEING_UPDATED)); } return null; }
<START_MOD>@org.junit.Test public void testGetAllSnapshotsForLeaf() { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> images = dao.getAllSnapshotsForLeaf(FixturesTool.IMAGE_ID); assertFalse(images.isEmpty()); }<END_MOD>
public static java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD>> getAllGroups() { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD>>(); }
@java.lang.Override protected void onEntityChanged() { super.onEntityChanged(); if ((<START_MOD>org.ovirt.engine.ui.uicommonweb.models.vms.VmGeneralModel.<END_MOD>getEntity()) != null) { updateProperties(); } }
<START_MOD>public java.util.List<org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters.VolumeAddress> getVolumes() { return volumes; }<END_MOD>
public java.lang.String getVncKeyboardLayout() { return <START_MOD>vmDynamic<END_MOD>.getVncKeyboardLayout(); }
<START_MOD>private<END_MOD> void handleCopyResult(org.ovirt.engine.core.common.businessentities.DiskImage <START_MOD>srcDiskImage, org.ovirt.engine.core.common.businessentities.DiskImage <END_MOD>copiedDiskImage, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, org.ovirt.engine.core.common.action.VdcReturnValueBase result) { if (!(result.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.VolumeCreationError); } else { org.ovirt.engine.core.bll.ImagesHandler.addDiskImageWithNoVmDevice(copiedDiskImage); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getTaskIdList().addAll(result.getInternalVdsmTaskIdList()); <START_MOD>srcDiskToTargetDiskMapping.put(srcDiskImage.getId(), copiedDiskImage.getId()); <END_MOD>newDiskImages.add(copiedDiskImage); } }
protected void restartVdsVms() { java.util.List<org.ovirt.engine.core.compat.Guid> autoStartVmIdsToRerun = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : mVmList) { destroyVmOnDestination(vm); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.SetVmStatus, new org.ovirt.engine.core.common.vdscommands.SetVmStatusVDSCommandParameters(vm.getId(), org.ovirt.engine.core.common.businessentities.VMStatus.Down, org.ovirt.engine.core.common.businessentities.VmExitStatus.Error)); if ((returnValue != null) && (returnValue.getSucceeded())) { LogSettingVmToDown(org.ovirt.engine.core.bll.FenceVdsBaseCommand.getVds().getId(), vm.getId()); } setVmId(vm.getId()); setVmName(vm.getName()); setVm(vm); org.ovirt.engine.core.bll.<START_MOD>DownVmsHandler<END_MOD>.processVmPoolOnStopVm(vm.getId(), org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks(org.ovirt.engine.core.bll.FenceVdsBaseCommand.getExecutionContext())); if (vm.isAutoStartup()) { autoStartVmIdsToRerun.add(vm.getId()); } } if (!(autoStartVmIdsToRerun.isEmpty())) { org.ovirt.engine.core.bll.AutoStartVmsRunner.getInstance().addVmsToRun(autoStartVmIdsToRerun); } org.ovirt.engine.core.bll.FenceVdsBaseCommand.setVm(null); setVmId(Guid.Empty); org.ovirt.engine.core.bll.FenceVdsBaseCommand.setVmName(null); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (getEnabled().equals(sender)) { updateChangeability(); } <START_MOD>else if ((this.equals(sender)) && ("IsAvailable".equals(((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).PropertyName))) { updateAvailability(); <END_MOD>}<START_MOD> }<END_MOD>
private void writeEventMap() { logger.log(Type.DEBUG,   to write EventMap sw.println(); sw.println("@Override"); sw.println(((   + (org.ovirt.engine.ui.common.editor.UiCommonEventMap.class.getName())) +   getEventMap() { sw.indent(); sw.println(((((org.ovirt.engine.ui.common.editor.UiCommonEventMap.class.getName()) +   eventMap = new   + (org.ovirt.engine.ui.common.editor.UiCommonEventMap.class.getName())) + "();")); logger.log(Type.DEBUG,   for Model Fields for (com.google.gwt.editor.rebind.model.EditorData editorData : model.getEditorData()) { logger.log(Type.DEBUG, ( over Field:   + editorData)); java.lang.String path = editorData.getPath(); if ((path.length()) == 0) { continue; } com.google.gwt.core.ext.typeinfo.JClassType propertyOwnerType = eraseType(editorData.getPropertyOwnerType()); if (propertyOwnerType == (entityModelType)) { logger.log(Type.DEBUG, ( EntityModel Field:   + editorData)); sw.println(   getObject()%s.getEntityChangedEvent()); path, editorData.getBeanOwnerExpression()); } else if (propertyOwnerType == (listModelType)) { logger.log(Type.DEBUG, ( ListModel Field:   + editorData)); sw.println(   getObject()%s.getItemsChangedEvent()); path, editorData.getBeanOwnerExpression()); sw.println(   getObject()%s.getSelectedItemsChangedEvent()); path, editorData.getBeanOwnerExpression()); sw.println(   getObject()%s.getSelectedItemChangedEvent()); path, editorData.getBeanOwnerExpression()); } } sw.println( eventMap; sw.outdent(); sw.println("}"); }
<START_MOD>public void notifyVdsJobProgress(org.ovirt.engine.core.compat.Guid jobId, java.lang.Object obj) { org.ovirt.engine.core.common.JobListener listener = jobListeners.get(jobId); }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.businessentities.storage.DiskImage getDisk(org.ovirt.engine.core.compat.Guid diskId) { return org.ovirt.engine.core.bll.Backend.getInstance().runInternalQuery(VdcQueryType.GetDiskByDiskId, new org.ovirt.engine.core.common.queries.IdQueryParameters(diskId)).getReturnValue(); }<END_MOD>
<START_MOD>@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command.equals(getStartSwiftCommand())) { } else if (command.equals(getStopSwiftCommand())) { } else if (command.equals(getRestartSwiftCommand())) { } }<END_MOD>
<START_MOD>public static synchronized void setTasksMap(java.lang.String hostName, java.lang.String taskId) { org.ovirt.vdsmfake.task.TaskProcessor.tasksmap.put(hostName, taskId); }<END_MOD>
<START_MOD>@java.lang.Override protected java.lang.String getListName() { org.ovirt.engine.ui.uicommonweb.models.HostErrataListModel.logger.fine(((this.getClass().toString()) + " getListName")); return "HostErrataListModel"; }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.<START_MOD>core<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>businessentities<END_MOD>.<START_MOD>Cluster<END_MOD> <START_MOD>returnValue<END_MOD>) <START_MOD>{<END_MOD> org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (getWindow())); model.setEntity(returnValue); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", <START_MOD>this<END_MOD>); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().configureLaterTitle()); tempVar.setIsDefault(true); tempVar.setIsCancel(true); model.getCommands().add(tempVar); }
<START_MOD>public java.lang.Boolean isDisabled() { return disabled; }<END_MOD>
private org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel resolveSelectedConsoleModel(org.ovirt.engine.core.compat.Guid vmId) {<START_MOD> if (!(cachedConsoleModels.containsKey(vmId))) { return null; }<END_MOD> for (org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel model : cachedConsoleModels.get(vmId)) { if (model.isUserSelected()) { return model; } } return null; }
@java.lang.Override protected void cretaeVirtIODisk() { org.ovirt.engine.core.common.businessentities.DiskImage disk = getDiskImage(); disk.setDiskInterface(DiskInterface.VirtIO); disk.setActive(true); doReturn(diskDao).when(command).getDiskDao(); when(diskDao.get(diskImageGuid)).thenReturn(disk); <START_MOD>when(osRepository.getDiskHotpluggableInterfaces(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(org.ovirt.engine.core.bll.DISK_HOTPLUGGABLE_INTERFACES); <END_MOD>mockVmDevice(true); }
<START_MOD>@java.lang.Override <END_MOD>public void setEntity(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity value) { super.setEntity(value); }
<START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityTooltip(org.ovirt.engine.core.common.businessentities.StoragePool object) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = getSafeHtmlStringMap(object); if (!(imagesToText.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getDataCenterTooltip(imagesToText); } return null; }<END_MOD>
public boolean <START_MOD>getPostZero<END_MOD>() { return <START_MOD>postZero<END_MOD>; }
public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getEventStatus(javax.sql.DataSource dataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO(dataSource); java.util.Map<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> data = dao.getEventStatusCount(); for (java.util.Map.Entry<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> entry : data.entrySet()) { switch (entry.getKey()) { case ALERT : result.setStatusCount(AuditLogSeverity.ALERT.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; case ERROR : result.setStatusCount(AuditLogSeverity.ERROR.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; case NORMAL : break; case WARNING : result.setStatusCount(AuditLogSeverity.WARNING.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; default : break; } } return result; }
private void hasIllegalStatusMessage() { assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2.toString())); }
<START_MOD>private void upload() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = new org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel(getEntity().getId(), null); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().uploadImageTitle()); model.setHelpTag(HelpTag.upload_disk_image); model.setEntity(this); model.setHashName("upload_disk_image"); setWindow(model); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.setCancelCommand(cancelCommand); model.getCommands().add(cancelCommand); model.initialize(); }<END_MOD>
private boolean connectStorageServer(org.ovirt.engine.core.common.businessentities.StorageType type, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections) { boolean connectSucceeded = true; if ((connections != null) && ((connections.size()) > 0)) { <START_MOD>if (type == (org.ovirt.engine.core.common.businessentities.StorageType.ISCSI)) { connections = org.ovirt.engine.core.bll.storage.ISCSIStorageHelper.updateInitiators(connections, getVds().getId()); } <END_MOD>java.util.Map<java.lang.String, java.lang.String> retValues = ((java.util.HashMap<java.lang.String, java.lang.String>) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ConnectStorageServer, new org.ovirt.engine.core.common.vdscommands.StorageServerConnectionManagementVDSParameters(getVds().getId(), getStoragePool().getId(), type, connections)).getReturnValue())); connectSucceeded = org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(type).isConnectSucceeded(retValues, connections); log.infoFormat( {0} storage connection was {1}   getVds().getName(), (connectSucceeded ? "succeeded" : "failed")); } return connectSucceeded; }
<START_MOD>protected org.ovirt.engine.core.common.businessentities.VmTemplate getEntity(int index) { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate(); template.setId(org.ovirt.engine.api.restapi.resource.BackendTemplateCdromsResourceTest.TEMPLATE_ID); template.setIsoPath(org.ovirt.engine.api.restapi.resource.BackendTemplateCdromsResourceTest.ISO_PATH); return template; }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__UPDATE_VM_VERSION); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__VM); }
protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((getTemplateType()) != (org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE)) { <START_MOD>validate(getVirtioRngValidator().canAddRngDevice(getVdsGroup(),<END_MOD> <START_MOD>getParameters<END_MOD>(<START_MOD>)<END_MOD>.<START_MOD>getRngDevice())<END_MOD>); } if (!(getRngDevices().isEmpty())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_RNG_ALREADY_EXISTS); } return true; }
@java.lang.Override protected void executeVmCommand() { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retValue = runVdsCommand(VDSCommandType.ConvertVm, buildConvertParameters()); if (retValue.getSucceeded()) { getVdsManager().addV2VJobInfoForVm(org.ovirt.engine.core.bll.ConvertVmCommand.getVmId(), JobStatus.WAIT_FOR_START); <START_MOD>getVmManager().setConvertProxyHostId(org.ovirt.engine.core.bll.ConvertVmCommand.getVdsId()); <END_MOD>org.ovirt.engine.core.bll.ConvertVmCommand.setSucceeded(true); } else { org.ovirt.engine.core.bll.ConvertVmCommand.log.error( to convert VM setCommandStatus(CommandStatus.FAILED); } } catch (org.ovirt.engine.core.common.errors.EngineException e) { org.ovirt.engine.core.bll.ConvertVmCommand.log.error( to convert VM e); setCommandStatus(CommandStatus.FAILED); } }
@java.lang.Override public int getQuotaCount() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource(); return getCallsHandler().executeRead("getQuotaCount", org.ovirt.engine.core.dao.<START_MOD>QuotaDAOImpl<END_MOD>.longMapper, parameterSource).intValue(); }
@java.lang.Override public boolean isValid(java.lang.String name, javax.validation.ConstraintValidatorContext context) { return (name != null) && (<START_MOD>super<END_MOD>.<START_MOD>isValid<END_MOD>(name<START_MOD>, context<END_MOD>)); }
void handleActionResult(<START_MOD>final <END_MOD>org.ovirt.engine.core.common.action.VdcActionType actionType, <START_MOD>final <END_MOD>org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, <START_MOD>final <END_MOD>org.ovirt.engine.core.common.action.VdcReturnValueBase result, <START_MOD>final <END_MOD>org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback callback, final java.lang.Object state, final boolean showErrorDialog) { org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.FINER,   action result from RunAction. org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult(actionType, parameters, result, state); boolean success = false; if (!(result.getCanDoAction())) { callback.executed(f); } else if ((showErrorDialog && (result.getIsSyncronious())) && (!(result.getSucceeded()))) { runActionExecutionFailed(actionType, result.getFault()); callback.executed(f); success = true; } else { success = true; callback.executed(f); } if (((!success) && ((getEventsHandler()) != null)) && (getEventsHandler().isRaiseErrorModalPanel(actionType, result.getFault()))) { if ((result.getCanDoActionMessages().size()) <= 1) { java.lang.String errorMessage = ((!(result.getCanDoAction())) || (!(result.getCanDoActionMessages().isEmpty()))) ? getRunActionErrorMessage(result.getCanDoActionMessages()) : result.getFault().getMessage(); failureEventHandler(result.getDescription(), errorMessage); } else { failureEventHandler(result.getDescription(), result.getCanDoActionMessages()); } } }
<START_MOD>public static org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand, java.lang.String description, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType> entitiesMap) { return org.ovirt.engine.core.bll.tasks.CommandCoordinator.getInstance().createTask(taskId, command, asyncTaskCreationInfo, parentCommand, description, entitiesMap); }<END_MOD>
private void <START_MOD>assertValidateFailure<END_MOD>(final java.lang.String messageToVerify) { assertFalse(command.<START_MOD>validate<END_MOD>()); assertTrue(command.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().contains(messageToVerify)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel model = ((org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel) (sender)); java.lang.String propertyName = args.propertyName; if ("SelectionNodeList".equals(propertyName)) { updateTree(model); } }
@java.lang.Override protected boolean canDoAction() { <START_MOD>if (!(checkIsDomainLocked(org.ovirt.engine.core.bll.storage.ReconstructMasterDomainCommand.getStorageDomain().getStoragePoolIsoMapData()))) { return false; } <END_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap> poolDomains = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().getAllForStoragePool(org.ovirt.engine.core.bll.storage.ReconstructMasterDomainCommand.getStoragePool().getId()); for (org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap poolDomain : poolDomains) { if (<START_MOD>!(checkIsDomainLocked<END_MOD>(poolDomain<START_MOD>))) {<END_MOD> return false; } } return org.ovirt.engine.core.bll.storage.ReconstructMasterDomainCommand.initializeVds(); }
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Label.class, to = org.ovirt.engine.core.common.businessentities.network.NetworkLabel.class) public static org.ovirt.engine.core.common.businessentities.network.NetworkLabel map(org.ovirt.engine.api.model.Label model, org.ovirt.engine.core.common.businessentities.network.NetworkLabel template) { org.ovirt.engine.core.common.businessentities.network.NetworkLabel entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.network.NetworkLabel(); if (model.isSetId()) { entity.setId(model.getId()); } return entity; }<END_MOD>
public void <START_MOD>setRoleId<END_MOD>(org.ovirt.engine.core.compat.Guid value) { roleId = value; }
<START_MOD>protected com.google.gwt.safehtml.shared.SafeHtml createMigrationsTemplate(int migrations) { java.lang.String prefix; java.lang.String postfix; java.lang.String migrationsStr; com.google.gwt.safehtml.shared.SafeHtml image; if (migrations > 0) { prefix = "("; migrationsStr = java.lang.String.valueOf(migrations); image = org.ovirt.engine.ui.webadmin.widget.table.column.VmCountColumn.arrowImageHtml; postfix = ")"; } else { prefix = "\u00a0"; migrationsStr = "\u00a0"; image = com.google.gwt.safehtml.shared.SafeHtmlUtils.EMPTY_SAFE_HTML; postfix = "\u00a0"; } return org.ovirt.engine.ui.webadmin.widget.table.column.VmCountColumn.templates.vmCountInOutMigrations(prefix, migrationsStr, image, postfix); }<END_MOD>
@org.junit.Test public void executeCommandWhenFailed() { cmd = spy(new org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand<org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters>(new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters(org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID))); setupMocks(); doThrow(new org.ovirt.engine.core.common.errors.<START_MOD>EngineException<END_MOD>(org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD>.GlusterHookListException)).when(hookSyncJob).refreshHooksInCluster(getVdsGroup(), true); try { cmd.executeCommand(); fail( <START_MOD>EngineException<END_MOD> } catch (org.ovirt.engine.core.common.errors.<START_MOD>EngineException<END_MOD> e) { assertEquals(e.getErrorCode(), <START_MOD>EngineErrors<END_MOD>.GlusterHookListException); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_REFRESH_FAILED); } }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( you sure you want to reset the following option? java.lang.String resetOptionVolumeMsg();
<START_MOD>private static void populateModelWithIpv4Details(org.ovirt.engine.core.common.businessentities.VmInitNetwork entity, org.ovirt.engine.api.model.NicConfiguration model) { if ((entity.getBootProtocol()) != null) { model.setBootProtocol(org.ovirt.engine.api.restapi.types.Ipv4BootProtocolMapper.map(entity.getBootProtocol())); } model.setIp(org.ovirt.engine.api.restapi.types.InitializationMapper.createIpModel(new org.ovirt.engine.core.common.network.vm.VmInitNetworkIpv4InfoFetcher(entity))); }<END_MOD>
<START_MOD>public static java.lang.String asId(java.lang.String name) { return java.util.UUID.nameUUIDFromBytes(name.getBytes()).toString(); }<END_MOD>
private void showCheckBoxes(<START_MOD>java.util.List<T> seletedItems<END_MOD>) { for (java.util.Map.Entry<T, com.google.gwt.user.client.ui.CheckBox> currentEntry : checkBoxes.entrySet()) { wrapperPanel.add(currentEntry.getValue()); <START_MOD>if (seletedItems.contains(currentEntry.getKey())) { currentEntry.getValue().setValue(true, false); <END_MOD>} }<START_MOD> }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VMInfoListReturnForXmlRpc getVmStats(java.lang.String vmId) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.getStats").withParameter("vmID", vmId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withResponseKey("statsList"); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMInfoListReturnForXmlRpc(response); }
<START_MOD>private void setSourceVisibility(final org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model) { imageFileUploadPanel.setVisible(model.getImageSourceLocalEnabled().getEntity()); imageFileDownloadPanel.setVisible((!(model.getImageSourceLocalEnabled().getEntity()))); imageTypeEditor.setEnabled(((!(model.getImageSourceLocalEnabled().getEntity())) || (model.getBrowserSupportsUpload()))); }<END_MOD>
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createHANotRunningAndUknown() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), null); pair.getFirst().setStatus(VMStatus.Unknown); return pair; }
protected java.util.List<org.ovirt.engine.core.common.businessentities.qos.NetworkQoS> getAllQosInDc() { if ((allQos) == null) { allQos = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().<START_MOD>getNetworkQosDao<END_MOD>().getAllForStoragePoolId(qos.getStoragePoolId()); } return allQos; }
<START_MOD>@org.junit.Test public void getLunConnectionsForISCSI() { org.ovirt.engine.core.common.businessentities.LUNs lun = new org.ovirt.engine.core.common.businessentities.LUNs(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage_server_connections> connections = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage_server_connections>(); connections.add(new org.ovirt.engine.core.common.businessentities.storage_server_connections("Some LUN connection", "id", "iqn", "password", org.ovirt.engine.core.common.businessentities.StorageType.ISCSI, "Username", "port", "portal")); connections.add(new org.ovirt.engine.core.common.businessentities.storage_server_connections("Other LUN connection", "id", "iqn", "password", org.ovirt.engine.core.common.businessentities.StorageType.ISCSI, "Username", "port", "portal")); lun.setLunConnections(connections); java.util.Map<org.ovirt.engine.core.common.businessentities.StorageType, java.util.List<org.ovirt.engine.core.common.businessentities.storage_server_connections>> connectionsByType = org.ovirt.engine.core.bll.storage.StorageHelperBase.filterLUNsByStorageType(lun); assertTrue("Map of ISCSI storage connections should not be empty.", (!(connectionsByType.isEmpty()))); assertEquals("Map of ISCSI storage connections should have only one type of connections.", 1, connectionsByType.size()); assertEquals("Map of ISCSI storage connections should have only 2 ISCSI connections.", 2, connectionsByType.get(StorageType.ISCSI).size()); }<END_MOD>
<START_MOD>@java.lang.Override protected void templateInited() { super.templateInited(); setupWindowModelFrom(pool.getStaticData()); }<END_MOD>
<START_MOD>private void addEntriesToNfsCummulativeStatistics(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.FopStats> fopStats) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.FopStats>> fopStatsEntities = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.FopStats>>(); for (int i = 0; i < (fopStats.size()); i++) { org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.FopStats> fopStatEntity = new org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.FopStats>(fopStats.get(i)); fopStatsEntities.add(fopStatEntity); } getNfsServerProfileStats().setItems(fopStatsEntities); }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel hostListModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel) (model)); org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel innerHostModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel) (hostListModel.getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>) (result)); org.ovirt.engine.core.common.businessentities.VDS host = ((org.ovirt.engine.core.common.businessentities.VDS) (hostListModel.getSelectedItem())); innerHostModel.updateModelFromVds(host, dataCenters, false, getSystemTreeSelectedItem()); innerHostModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editAndApproveHostTitle()); innerHostModel.setHashName("edit_and_approve_host"); <START_MOD>innerHostModel.setHelpTag(innerHostModel.getHashName(),   > Edit/Approve Host <END_MOD>org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnApprove", hostListModel); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); innerHostModel.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", hostListModel); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); innerHostModel.getCommands().add(tempVar2); }
private void endCopyCollapseOperations(org.ovirt.engine.core.common.businessentities.VM vm) { vm.setVmtGuid(VmTemplateHandler.BlankVmTemplateId); vm.setVmtName(null); org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSnapshotDao().get(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSnapshotDao().getId(vm.getId(), SnapshotType.ACTIVE)); vm.setSnapshots(java.util.<START_MOD>Collections<END_MOD>.<START_MOD>singletonList<END_MOD>(activeSnapshot)); updateCopyVmInSpm(org.ovirt.engine.core.bll.ExportVmCommand.getVm().getStoragePoolId(), vm, org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getStorageDomainId()); }
protected boolean checkStorageConnection(java.lang.String storageDomainConnection) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domains = null; org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommon.getStorageServerConnectionDao().get(storageDomainConnection); if (connection == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_NOT_EXIST); } if (connection.getStorageType().isFileDomain()) { domains = getStorageDomainsByConnId(connection.getId()); if ((domains.size()) > 0) { java.lang.String domainNames = createDomainNamesListFromStorageDomains(domains); return prepareFailureMessageForDomains(domainNames); } } return true; }
<START_MOD>protected void createDiskDummiesForSpaceValidations(java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList, java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> dummies) { for (org.ovirt.engine.core.common.businessentities.DiskImage image : disksList) { org.ovirt.engine.core.compat.Guid targetSdId = imageToDestinationDomainMap.get(image.getId()); org.ovirt.engine.core.common.businessentities.DiskImage dummy = org.ovirt.engine.core.bll.ImagesHandler.createDummyDiskImage(image, targetSdId); dummies.add(dummy); } }<END_MOD>
private boolean isTemplateInDestStorageDomain(org.ovirt.engine.core.compat.Guid imageId, org.ovirt.engine.core.compat.Guid sourceDomainId) { org.ovirt.engine.core.compat.Guid templateId = getDiskImageByImageId(imageId).getImageTemplateId(); if (!(Guid.Empty.equals(templateId))) { org.ovirt.engine.core.common.businessentities.storage.DiskImage templateImage = org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getDiskImageDao().get(templateId); if (!(templateImage.getStorageIds().contains(sourceDomainId))) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return true; }
protected boolean proceedVdsStats() { boolean returnValue = true; try { runVdsCommand(VDSCommandType.GetStats, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase(getVds())); java.util.List<org.ovirt.engine.core.compat.Guid> problematicDomainsIds = org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.<START_MOD>getDomainsReportedAsProblematic<END_MOD>(getVds().getStoragePoolId(), getVds().getDomains()); for (org.ovirt.engine.core.compat.Guid domainId : problematicDomainsIds) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainInfo = getStorageDomainStaticDAO().get(domainId); log.errorFormat( Domain {0} of pool {1} is in problem in host {2} (domainInfo != null ? domainInfo.getStorageName() : domainId), getStoragePool().getName(), getVds().getName()); if ((domainInfo == null) || (domainInfo.getStorageDomainType().isDataDomain())) { returnValue = false; } } } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { log.errorFormat( not get Host statistics for Host {0}, Error is {1} getVds().getName(), e); returnValue = false; } return returnValue; }
private java.lang.String composeObjectId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable, org.ovirt.engine.core.common.AuditLogType logType) { final java.lang.StringBuilder builder = new java.lang.StringBuilder(); <START_MOD>compose(builder, "type", logType.toString()); compose(builder, "sd", nullToEmptyString(logable.getStorageDomainId())); compose(builder, "dc", nullToEmptyString(logable.getStoragePoolId())); compose(builder, "user", nullToEmptyString(logable.getUserId())); compose(builder, "cluster", logable.getVdsGroupId().toString()); compose(builder, "vds", logable.getVdsId().toString()); compose(builder, "vm", emptyGuidToEmptyString(logable.getVmId())); compose(builder, "template", emptyGuidToEmptyString(logable.getVmTemplateId())); compose(builder, "customId", <END_MOD>org.apache.commons.lang.StringUtils.defaultString(logable.getCustomId())); return builder.toString(); }
<START_MOD>public void getDbGroupsByUserId(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid groupId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetDbGroupsByUserId, new org.ovirt.engine.core.common.queries.IdQueryParameters(groupId), aQuery); }<END_MOD>
@org.junit.Test public void testCDAVdsIsSPM() { vds.setSpmStatus(VdsSpmStatus.SPM); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure( did not fail on a VDS that is already set as SPM command, <START_MOD>EngineMessages<END_MOD>.CANNOT_FORCE_SELECT_SPM_VDS_ALREADY_SPM); }
protected javax.ws.rs.core.Response doAction(final org.ovirt.engine.core.common.action.VdcActionType task, final org.ovirt.engine.core.common.action.VdcActionParametersBase params, final org.ovirt.engine.api.model.Action action, org.ovirt.engine.api.restapi.resource.AbstractBackendResource.PollingType pollingType) { awaitGrace(action); try { org.ovirt.engine.core.common.action.VdcReturnValueBase actionResult = doAction(task, params); if (actionResult.getHasAsyncTasks()) { if (expectBlocking(action)) { org.ovirt.engine.api.model.CreationStatus status = awaitCompletion(actionResult, pollingType); return actionStatus(status, action<START_MOD>, org.ovirt.engine.api.restapi.resource.AbstractBackendActionableResource.get()<END_MOD>); } else { return actionAsync(actionResult, action); } } else { return actionSuccess(action<START_MOD>, org.ovirt.engine.api.restapi.resource.AbstractBackendActionableResource.get()<END_MOD>); } } catch (java.lang.Exception e) { return handleError(e, action); } }
private void addCpuPinning(final java.lang.String compatibilityVersion) { final java.lang.String cpuPinning = vm.getCpuPinning(); if (((org.apache.commons.lang.StringUtils.<START_MOD>isNotEmpty(cpuPinning<END_MOD>)) && (java.lang.Boolean.TRUE.equals(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>GetValue(ConfigValues.CpuPinningEnabled, compatibilityVersion)))) && (cpuPinning != null)) { final org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct pinDict = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct(); for (java.lang.String pin : cpuPinning.split("_")) { final java.lang.String[] split = pin.split("#"); pinDict.add(split[0], split[1]); } createInfo.add(VdsProperties.cpuPinning, pinDict); } }
public boolean entityStateEqualTo(org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel other) { if (((getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VmPool) && ((other.getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VmPool)) { return getEntity().equals(other.getEntity()); } else if (((getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VM) && ((other.getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VM)) { org.ovirt.engine.core.common.businessentities.VM thisVm = ((org.ovirt.engine.core.common.businessentities.VM) (getEntity())); org.ovirt.engine.core.common.businessentities.VM otherVm = ((org.ovirt.engine.core.common.businessentities.VM) (other.getEntity())); return (<START_MOD>(<END_MOD>thisVm.getDynamicData().getStatus().equals(otherVm.getDynamicData().getStatus())) && (thisVm.<START_MOD>getDynamicData().getConsoleCurrentUserName().equals(otherVm.getDynamicData().getConsoleCurrentUserName()))) && (thisVm.<END_MOD>getStaticData().equals(otherVm.getStaticData())); } return false; }
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.ExternalStatus.class, to = org.ovirt.engine.api.model.EntityExternalStatus.class) public static org.ovirt.engine.core.common.businessentities.ExternalStatus map(org.ovirt.engine.api.model.EntityExternalStatus entityStatus, org.ovirt.engine.core.common.businessentities.ExternalStatus template) { switch (entityStatus) { case OK : return org.ovirt.engine.core.common.businessentities.ExternalStatus.Ok; case INFO : return org.ovirt.engine.core.common.businessentities.ExternalStatus.Info; case WARNING : return org.ovirt.engine.core.common.businessentities.ExternalStatus.Warning; case ERROR : return org.ovirt.engine.core.common.businessentities.ExternalStatus.Error; case FAILURE : return org.ovirt.engine.core.common.businessentities.ExternalStatus.Failure; default : return null; } }<END_MOD>
public static void GetRoleList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD>>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD>>(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllRoles, new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters(), aQuery); }
<START_MOD>@java.lang.SuppressWarnings("unchecked") protected javax.ws.rs.core.UriInfo setUpUriExpectationsWithMax() { javax.ws.rs.core.UriInfo uriInfo = control.createMock(javax.ws.rs.core.UriInfo.class); expect(uriInfo.getBaseUri()).andReturn(java.net.URI.create(org.ovirt.engine.api.restapi.resource.URI_BASE)).anyTimes(); java.util.List<javax.ws.rs.core.PathSegment> psl = new java.util.ArrayList<javax.ws.rs.core.PathSegment>(); javax.ws.rs.core.PathSegment ps = control.createMock(javax.ws.rs.core.PathSegment.class); javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> matrixParams = control.createMock(javax.ws.rs.core.MultivaluedMap.class); expect(matrixParams.isEmpty()).andReturn(false).anyTimes(); expect(matrixParams.containsKey("max")).andReturn(true).anyTimes(); java.util.List<java.lang.String> matrixParamsList = control.createMock(java.util.List.class); expect(matrixParams.get("max")).andReturn(matrixParamsList).anyTimes(); expect(ps.getMatrixParameters()).andReturn(matrixParams).anyTimes(); expect(matrixParamsList.size()).andReturn(1).anyTimes(); expect(matrixParamsList.get(0)).andReturn("2").anyTimes(); psl.add(ps); expect(uriInfo.getPathSegments()).andReturn(psl).anyTimes(); return uriInfo; }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.UpdateVmPolicy, new org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.Params(org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm().getId(), org.ovirt.engine.core.bll.VmSlaPolicyCommand.getParameters().getVm().getStaticData().getCpuLimit())); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.VmSlaPolicyCommand.setSucceeded(true); } else { org.ovirt.engine.core.common.errors.VdcFault fault = new org.ovirt.engine.core.common.errors.VdcFault(); fault.setError(vdsReturnValue.getVdsError().getCode()); fault.setMessage(vdsReturnValue.getVdsError().getMessage()); org.ovirt.engine.core.bll.VmSlaPolicyCommand.getReturnValue().setFault(fault); } }<END_MOD>
@javax.ws.rs.Path( (approve|install|fence|activate|deactivate|commitnetconfig|iscsidiscover|iscsilogin<START_MOD>|refreshcapabilities<END_MOD>)}/{oid} public org.ovirt.engine.api.resource.ActionResource getActionSubresource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid);
@org.junit.Test public void testGetClustersHavingHosts() { java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = ((org.ovirt.engine.core.dao.<START_MOD>VdsGroupDAOImpl<END_MOD>) (dao)).getClustersHavingHosts(); assertNotNull(clusters); assertThat(clusters, hasSize(4)); }
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__ADD); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__USER_PROFILE); }
<START_MOD>public void setGuestOsNamedVersion() { if ((guestOsType) == (org.ovirt.engine.core.common.businessentities.OsType.Linux)) { java.lang.String optional = ""; if (!(org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(guestOsCodename))) { optional = org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel.messages.guestOSVersionOptional(guestOsCodename); } guestOsNamedVersion = org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel.messages.guestOSVersionLinux(guestOsDistribution, guestOsVersion, optional); } else if (((guestOsType) == (org.ovirt.engine.core.common.businessentities.OsType.Windows)) && (guestOs.startsWith("Win "))) { if (guestOs.startsWith("Win 20")) { guestOsNamedVersion = org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel.messages.guestOSVersionWindowsServer(guestOs.substring(4), guestOsVersion); } else { guestOsNamedVersion = org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel.messages.guestOSVersionWindows(guestOs.substring(4), guestOsVersion); } } }<END_MOD>
protected boolean checkQuotaValidationCommon(org.ovirt.engine.core.common.businessentities.Quota quota, java.util.List<java.lang.String> messages) { if (quota == null) { messages.add(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID.toString()); return false; } if (((!(checkQuotaNameExisting(quota, messages))) || (!(org.ovirt.engine.core.bll.QuotaCRUDCommand.validateQuotaStorageLimitation(quota, messages)))) || (!(org.ovirt.engine.core.bll.QuotaCRUDCommand.validateQuotaVdsGroupLimitation(quota, messages)))) { return false; } return true; }
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getIsScsiReservationUsed() { return isScsiReservationUsed; }<END_MOD>
@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveAlreadySlavesForDifferentBond() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond("bond1"); org.ovirt.engine.core.common.businessentities.network.Bond differentBond = createBond("bond2"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveA = createBondSlave(bond, "slaveA"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveB = createBondSlave(differentBond, "slaveB"); setBondSlaves(bond, slaveA, slaveB); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ALREADY_IN_BOND; org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(<START_MOD>org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(bond)<END_MOD>)).addExistingInterfaces(bond, differentBond, slaveA, slaveB).build(); _doTestValidateModifiedBondSlaves(spy(validator), ValidationResult.VALID, ValidationResult.VALID, failsWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(engineMessage, slaveB.getName()))); }
public java.lang.Integer getVmsCoresCount() { return mVdsDynamic.getVmsCoresCount(); }
<START_MOD>@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (org.apache.commons.lang.StringUtils.isEmpty(getParameters().getSnapshotName())) { failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_NAME_IS_EMPTY); } snapshot = getGlusterVolumeSnapshotDao().getByName(getGlusterVolumeId(), getParameters().getSnapshotName()); if ((snapshot) == null) { failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_DOES_NOT_EXIST, getParameters().getSnapshotName()); } return true; }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.validator.VfsConfigValidator getVfsConfigValidator() { if ((vfsConfigValidator) == null) { vfsConfigValidator = new org.ovirt.engine.core.bll.validator.VfsConfigValidator(org.ovirt.engine.core.bll.network.host.VfsConfigCommandBase.getParameters().getNicId()); } return vfsConfigValidator; }<END_MOD>
<START_MOD>public boolean validate() { boolean res = true; for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : labelModels.getItems()) { java.lang.String label = labelModel.getSelectedItem(); java.lang.String usingIface = labelToIface.get(label); if ((usingIface != null) && (!(containedIfaces.contains(usingIface)))) { labelModel.setIsValid(false); labelModel.getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().labelInUse(label, usingIface)); res = false; } } return res; }<END_MOD>
<START_MOD>java.lang.String GlusterSyncWebhookException();<END_MOD>
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.common.scheduling.enums.AffinityEnforcementType getRawValue(org.ovirt.engine.core.common.scheduling.AffinityGroup object) { return object.getEnforcementType(); }<END_MOD>
private void restoreNetworkParameters(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters netParams = getSetupModel().getNetworkToLastDetachParams().get(getName()); if (netParams != null) { nic.setBootProtocol(netParams.getBootProtocol()); nic.setAddress(netParams.getAddress()); nic.setSubnet(netParams.getSubnet()); nic.setGateway(netParams.getGateway()); nic.setQos(netParams.getQos()); nic.setCustomProperties(netParams.getCustomProperties()); } else if ((nic.getBootProtocol()) == null) { nic.setBootProtocol((isManagement() ? org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.DHCP : org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.NONE)); } }
@java.lang.Override public void testQuery() throws java.lang.Exception { setUpGetGraphicsExpectations(3); <START_MOD>setUpGetBallooningExpectations(3); <END_MOD>super.testQuery(); }
<START_MOD>@java.lang.Override public void removeFromSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { }<END_MOD>
protected boolean checkMasterDomainIsUp() { boolean returnValue = true; java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomainDao().getAllForStoragePool(org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStoragePool().getId()); storageDomains = org.ovirt.engine.core.utils.linq.LinqUtils.filter(storageDomains, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.StorageDomain a) { return ((a.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master)) && ((a.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)); } }); if (storageDomains.isEmpty()) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_MASTER_STORAGE_DOMAIN_NOT_ACTIVE); returnValue = false; } return returnValue; }
private void applyKerberosConfiguration() throws org.ovirt.engine.core.utils.kerberos.ManageDomainsResult { try { if (org.ovirt.engine.core.utils.FileUtil.fileExists(utilityConfiguration.getkrb5confFilePath())) { java.text.SimpleDateFormat ft = new java.text.SimpleDateFormat("yyyyMMddhhmmsszzz"); java.lang.String destFileName = ((utilityConfiguration.getkrb5confFilePath()) + ".backup_") + (ft.format(new java.util.Date())); org.ovirt.engine.core.utils.kerberos.ManageDomains.log.info(( backup of kerberos configuration file to   + destFileName)); org.ovirt.engine.core.utils.FileUtil.copyFile(utilityConfiguration.getkrb5confFilePath(), destFileName); } org.ovirt.engine.core.utils.kerberos.ManageDomains.log.info( kerberos configuration org.ovirt.engine.core.utils.FileUtil.copyFile(((utilityConfiguration.getkrb5confFilePath()) + (TESTING_KRB5_CONF_SUFFIX)), utilityConfiguration.getkrb5confFilePath()); org.ovirt.engine.core.utils.FileUtil.deleteFile(((utilityConfiguration.getkrb5confFilePath()) + (TESTING_KRB5_CONF_SUFFIX))); } catch (java.io.IOException e) { throw new org.ovirt.engine.core.utils.kerberos.ManageDomainsResult(ManageDomainsResultEnum.FAILURE_WHILE_APPLYING_KERBEROS_CONFIGURATION, <START_MOD>  Connection to DB, kerberos configuration couldn been saved <END_MOD>e.getMessage()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (((connectAutomatically.readConnectAutomatically()) && (model.getCanConnectAutomatically())) && (!(alreadyOpened))) { <START_MOD>org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object<END_MOD> model<START_MOD>, java.lang.Object returnValue) { <END_MOD>connect(<START_MOD>((java.lang.Boolean) (returnValue))); } }; <END_MOD>org.ovirt.engine.ui.uicommonweb.<START_MOD>dataprovider.AsyncDataProvider.getIsPasswordDelegationPossible(asyncQuery);<END_MOD> } unregisterModels(); }
<START_MOD>org.ovirt.engine.core.common.businessentities.aaa.UserProfile getByUserId(org.ovirt.engine.core.compat.Guid userId);<END_MOD>
public java.lang.String determineProtocolMessage(org.ovirt.engine.ui.uicommonweb.models.<START_MOD>ConsoleAwareModel<END_MOD> item) { if (item.<START_MOD>isPool<END_MOD>()) { return ""; } if (!((isRDPAvailable()) || (isSpiceAvailable()))) { return BROWSER_NOT_SUPPORTED_MESSAGE; } boolean isSpice = ((item.<START_MOD>getDefaultConsoleModel<END_MOD>()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel) && (isSpiceAvailable()); boolean isRdp = (<START_MOD>(<END_MOD>item.<START_MOD>getAdditionalConsoleModel<END_MOD>()<START_MOD>) != null<END_MOD>) && (isRDPAvailable()); if ((!isSpice) && (!isRdp)) { return VNC_NOT_SUPPORTED_MESSAGE; } return ""; }
<START_MOD>public org.ovirt.engine.core.common.businessentities.network.NameServer flush() { return new org.ovirt.engine.core.common.businessentities.network.NameServer(this.nameServerEntity.getEntity()); }<END_MOD>
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.GetTagsByUserIdQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.DbFacade.getInstance().getTagDao().getAllForUsers(org.ovirt.engine.core.bll.GetTagsByUserIdQuery.getParameters().getUserId())); }
@org.junit.Test public void testStop() throws java.lang.Exception {<START_MOD> setupGetVmExpectations();<END_MOD> setUriInfo(setUpActionExpectations(VdcActionType.StopVm, org.ovirt.engine.core.common.action.StopVmParameters.class, new java.lang.String[]{ "VmId", "StopVmType" }, new java.lang.Object[]{ GUIDS[0], org.ovirt.engine.core.common.action.StopVmTypeEnum.NORMAL })); verifyActionResponse(resource.stop(new org.ovirt.engine.api.model.Action())); }
private void postExportGetMissingTemplates(java.util.ArrayList<java.lang.String> missingTemplatesFromVms) { org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel) (getWindow())); if (!(missingTemplatesFromVms.isEmpty())) { model.stopProgress(); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel<START_MOD><java.lang.String><END_MOD> confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel<START_MOD><java.lang.String><END_MOD>(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().baseTemplatesNotFoundOnExportDomainTitle()); confirmModel.setHelpTag(HelpTag.base_template_not_found_on_export_domain); confirmModel.setHashName("base_template_not_found_on_export_domain"); confirmModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().theFollowingTemplatesAreMissingOnTargetExportDomainForTemplateVersionsMsg()); confirmModel.setItems(missingTemplatesFromVms); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnExportNoTemplates", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); confirmModel.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); confirmModel.getCommands().add(tempVar2); } else { doExport(); } }
private void setNode() { _isNode = true; _deploy.getVds().setVdsType(VDSType.<START_MOD>oVirtLegacyNode<END_MOD>); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsStaticDao().update(_deploy.getVds().getStaticData()); return null; }); }
@java.lang.Override protected void endSuccessfully() { if ((org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getDestinationDiskImage()) != null) { org.ovirt.engine.core.common.businessentities.storage.DiskImage curr = org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getDestinationDiskImage(); <START_MOD>java.util.List<<END_MOD>org.ovirt.engine.core.common.businessentities.storage.DiskImage<START_MOD>> orderedCinderSnapshots = org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getDiskImageDao().getAllSnapshotsForLeaf(curr.getImageId()); if ((orderedCinderSnapshots.size()) > 1) { org.ovirt.engine.core.common.businessentities.storage.DiskImage<END_MOD> volumeBasedOnsnapshot = <START_MOD>orderedCinderSnapshots.get(1); volumeBasedOnsnapshot.setParentId<END_MOD>(curr.<START_MOD>getParentId()); org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getBaseDiskDao().update(volumeBasedOnsnapshot); org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getImageDao().update(volumeBasedOnsnapshot.getImage()); } org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getImageDao().remove(curr.<END_MOD>getImageId()); } if (!(org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getParameters().isParentHasTasks())) { org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getBackend().endAction(org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getParameters().getParentCommand(), org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getParameters().getParentParameters(), null); } org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.setSucceeded(true); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.VDS.class, to = org.ovirt.engine.api.model.HardwareInformation.class) public static org.ovirt.engine.api.model.HardwareInformation map(org.ovirt.engine.core.common.businessentities.VDS entity, org.ovirt.engine.api.model.HardwareInformation template) { org.ovirt.engine.api.model.HardwareInformation model = (template != null) ? template : new org.ovirt.engine.api.model.HardwareInformation(); model.setManufacturer(entity.getHardwareManufacturer()); model.setFamily(entity.getHardwareFamily()); model.setProductName(entity.getHardwareProductName()); model.setSerialNumber(entity.getHardwareSerialNumber()); model.setUuid(entity.getHardwareUUID()); model.setVersion(entity.getHardwareVersion()); model.setSupportedRngSources(<START_MOD>new org.ovirt.engine.api.model.HardwareInformation.SupportedRngSourcesItem()); model.getSupportedRngSources().getSupportedRngSources().addAll(<END_MOD>org.ovirt.engine.api.restapi.types.RngDeviceMapper.mapRngSources(entity.getSupportedRngSources())); return model; }
<START_MOD>public void setPmPassword(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> value) { password = value; }<END_MOD>
private org.ovirt.engine.core.bll.network.macpool.MacPool createPoolInternal(org.ovirt.engine.core.common.businessentities.MacPool macPool) { if (macPools.containsKey(macPool.getId())) { throw new java.lang.IllegalStateException(org.ovirt.engine.core.bll.network.macpool.MacPoolPerDc.UNABLE_TO_CREATE_MAC_POOL_IT_ALREADY_EXIST); } org.ovirt.engine.core.bll.network.macpool.MacPool poolForScope = new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges(macPoolToRanges(macPool), macPool.isAllowDuplicateMacAddresses()); macPools.put(macPool.getId(), org.ovirt.engine.core.bll.network.macpool.MacPoolLockingProxy<START_MOD>.createMacPoolLockingProxy<END_MOD>(poolForScope)); return poolForScope; }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.GlusterBricks bricks) { for (org.ovirt.engine.api.model.GlusterBrick brick : bricks.getGlusterBricks()) { validateParameters(brick, "serverId", "brickDir"); } java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> brickEntities = mapBricks(asGuid(getVolumeId()), bricks); <START_MOD>java.lang.Integer<END_MOD> replicaCount = <START_MOD>org.ovirt.engine.api.common.util.QueryHelper.getIntegerMatrixParameter(uriInfo, "replica_count"); java.lang.Integer stripeCount = org.ovirt.engine.api.common.util.QueryHelper.getIntegerMatrixParameter(uriInfo, "stripe_count"); return performCreationMultiple(VdcActionType.AddBricksToGlusterVolume, new org.ovirt.engine.core.common.action.gluster.GlusterVolumeBricksActionParameters(asGuid(getVolumeId()), brickEntities, (replicaCount != null<END_MOD> ? <START_MOD>replicaCount<END_MOD> : 0<START_MOD>), (<END_MOD>stripeCount <START_MOD>!= null<END_MOD> ? <START_MOD>replicaCount<END_MOD> : 0<START_MOD>)<END_MOD>, isForce()), new org.ovirt.engine.api.restapi.resource.gluster.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetGlusterBrickById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult mtuValid() { return (network.getMtu()) ==   ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_CANNOT_HAVE_MTU); }
public org.ovirt.engine.core.bll.ValidationResult isStorageDomainFormatCorrectForDC() { if (isStorageDomainOfTypeIsoOrExport()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((storagePool) != null) { if ((org.ovirt.engine.core.common.utils.VersionStorageFormatUtil.getPreferredForVersion(storagePool.getCompatibilityVersion(), storageDomainStatic.getStorageType()).compareTo(storageDomainStatic.getStorageFormat())) < 0) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_DOMAIN_FORMAT_ILLEGAL, java.lang.String.format( %1$s storageDomainStatic.getStorageFormat().toString())); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
<START_MOD>public void setUiPluginTabSelected(java.lang.String tabName) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?, ?> uiPluginListModel = uiPluginLabelListMap.get(tabName); if (uiPluginListModel != null) { setSelectedItem(uiPluginListModel); } setSearchStringPrefix(uiPluginListModel.getListName()); setSearchString(""); }<END_MOD>
@java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { <START_MOD>if (!(bondPopup.Validate())) { return; } <END_MOD>sourceListModel.setConfirmWindow(null); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = ((org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface) (bondPopup.getBond().getSelectedItem())); setBondOptions(bond, bondPopup); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic1 = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (networkCommand.getOp1())); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic2 = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (networkCommand.getOp2())); java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> networks = ((nic1.getItems().size()) != 0) ? new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(nic1.getItems()) : new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(nic2.getItems()); networkCommand.Execute(bond); redraw(); for (org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic : getNics()) { if (nic.getName().equals(bond.getName())) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.attachNetworks(nic, networks, allNics); redraw(); return; } } }
@org.junit.Before public void setup() { validator = spy(new org.ovirt.engine.core.bll.validator.VnicProfileValidator(vmDao<START_MOD>, networkFilterDao<END_MOD>, vnicProfile)); doReturn(dbFacade).when(validator).getDbFacade(); when(dbFacade.getVnicProfileDao()).thenReturn(vnicProfileDao); when(dbFacade.getNetworkDao()).thenReturn(networkDao); when(dbFacade.getNetworkQosDao()).thenReturn(networkQosDao); when(dbFacade.getVmDao()).thenReturn(vmDao); <START_MOD>initNetworkFilterDao(); <END_MOD>when(vnicProfileDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vnicProfile); when(vnicProfileDao.getAllForNetwork(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vnicProfiles); }
<START_MOD>private void setVdsmNamesInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfacesToUpdate = new java.util.LinkedList<>(); interfaces.stream().filter(( iface) -> java.util.Objects.equals(iface.getNetworkName(), network.getName())).forEach(( iface) -> { iface.setNetworkName(network.getVdsmName()); interfacesToUpdate.add(iface); }); interfaceDao.massUpdateInterfacesForVds(interfacesToUpdate); }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult isVirtIoScsiValid(org.ovirt.engine.core.common.businessentities.VM vm) { if ((org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI) != (disk.getDiskInterface())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((disk.getSgio()) != null) { if ((org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE) == (disk.getDiskStorageType())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.SCSI_GENERIC_IO_IS_NOT_SUPPORTED_FOR_IMAGE_DISK); } } if (vm != null) { if (!(org.ovirt.engine.core.common.FeatureSupported.virtIoScsi(vm.getVdsGroupCompatibilityVersion()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL); } if (!(isVirtioScsiControllerAttached(vm.getId()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.CANNOT_PERFORM_ACTION_VIRTIO_SCSI_IS_DISABLED); } return isOsSupportedForVirtIoScsi(vm); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@org.junit.Test public void failsIfImported() throws java.lang.Exception { when(hostedEngineHelper.getStorageDomain()).thenReturn(new org.ovirt.engine.core.common.businessentities.StorageDomainStatic()); cmd.<START_MOD>validate<END_MOD>(); org.ovirt.engine.core.bll.<START_MOD>ValidateTestUtils<END_MOD>.<START_MOD>assertValidateMessages<END_MOD>("", cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); verify(backend, times(0)).runInternalQuery(eq(VdcQueryType.GetExistingStorageDomainList), any(org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class)); verify(cmd, times(0)).executeCommand(); }
<START_MOD>@org.junit.Test public void executeCommandWhenFailed() { cmd = spy(new org.ovirt.engine.core.bll.gluster.AddGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); setUpMocksForAdd(); mockBackend(false, VdcBllErrors.GlusterHookAddFailed); cmd.executeCommand(); verify(hooksDao, never()).updateGlusterHook(any(org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity.class)); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_ADD_FAILED); }<END_MOD>
public void isAnyHostUpInCluster(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.lang.Boolean><END_MOD> aQuery, java.lang.String clusterName) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.lang.Boolean><END_MOD>() { @java.lang.Override public java.lang.<START_MOD>Boolean<END_MOD> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.lang.Boolean><END_MOD> _asyncQuery) { if ((source != null) && (!(((java.util.List<?>) (source)).isEmpty()))) { return true; } return false; } }; getUpHostListByCluster(aQuery, clusterName, 1); }
@java.lang.Override public void doPolling(org.ovirt.engine.core.compat.Guid cmdId, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandExecutionStatus(cmdId); if ((status != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) && ((org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandStatus(cmdId)) == (org.ovirt.engine.core.compat.CommandStatus.ACTIVE))) { return; } boolean anyFailed = false; int completedChildren = 0; org.ovirt.engine.core.bll.CommandBase<?> command = getCommand(cmdId); for (org.ovirt.engine.core.compat.Guid childCmdId : childCmdIds) { org.ovirt.engine.core.bll.CommandBase<?> child = getCommand(childCmdId); switch (org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandStatus(childCmdId)) { case NOT_STARTED : case ACTIVE : <START_MOD>logWaitingForChildCommand(childCmdId,<END_MOD> child<START_MOD>.getActionType(),<END_MOD> command<START_MOD>.getActionType(), cmdId); return; case FAILED : case FAILED_RESTARTED : if (!(child.getParameters().getShouldBeEndedByParent())) { logWaitingForChildCommand(<END_MOD>childCmdId, child.getActionType(), command.getActionType(), cmdId); return; <START_MOD>} anyFailed = true; break; case ENDED_WITH_FAILURE<END_MOD> : case UNKNOWN : anyFailed = true; break; <START_MOD>case SUCCEEDED : if (!(child.getParameters().getShouldBeEndedByParent())) { logWaitingForChildCommand(childCmdId, child.getActionType(), command.getActionType(), cmdId); return; } <END_MOD>default : ++completedChildren; break; } <START_MOD>} childCommandsExecutionEnded(<END_MOD>command<START_MOD>, anyFailed, childCmdIds, status, completedChildren)<END_MOD>; }
@java.lang.Override public <START_MOD>boolean<END_MOD> authenticate(java.lang.String name, java.lang.String password) { return <START_MOD>true<END_MOD>; }
@org.junit.Test public void testCanDoActionWithEmptySnapshotGuid() { org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters params = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vmId, org.ovirt.engine.core.compat.Guid.Empty); cmd = spy(new org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand<org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters>(params)); doNothing().when(cmd).updateVmDisksFromDb(); doReturn(snapshotDao).when(cmd).getSnapshotDao(); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_CORRUPTED_VM_SNAPSHOT_ID); }
@java.lang.Override public java.lang.Boolean runInTransaction() {<START_MOD> java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ifaces = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(getInterfaces()); ifaces.addAll(getRemovedBonds().values());<END_MOD> org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CollectVdsNetworkData, new org.ovirt.engine.core.common.vdscommands.CollectHostNetworkDataVdsCommandParameters(getVds(), <START_MOD>ifaces<END_MOD>)); for (org.ovirt.engine.core.common.businessentities.network.Network net : getNetworks()) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus(getVdsGroupId(), net); } return java.lang.Boolean.TRUE; }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__HOT_SET_CPUS); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__VM); addCanDoActionMessageVariable("clusterVersion", org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getVdsGroupCompatibilityVersion()); addCanDoActionMessageVariable("architecture", org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getClusterArch()); }
<START_MOD>java.lang.String ProviderType___ESXI();<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("High") java.lang.String highTitle();
@java.lang.Override public void initTable(org.ovirt.engine.ui.common.CommonApplicationConstants constants) { this.constants = constants; initTableOverhead(); handleRadioButtonClick(null); org.ovirt.engine.ui.common.widget.uicommon.vm.BaseVmDiskListModelTable.getModel().getItemsChangedEvent().addListener(new org.ovirt.engine.core.compat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.core.compat.Event ev, java.lang.Object sender, org.ovirt.engine.core.compat.EventArgs args) { disksViewRadioGroup.<START_MOD>setDiskViewType<END_MOD>(((org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>disks<END_MOD>.<START_MOD>DiskViewType<END_MOD>) (getModel().getDiskViewType().getEntity()))); } }); }
protected final java.util.Collection<T> sortItems(java.util.Collection<T> items) { if ((items == null) || ((comparator) == null)) { return items; } <START_MOD>return<END_MOD> new <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.ui.uicommonweb.models.SortedCollection<END_MOD><T>(comparator<START_MOD>,<END_MOD> items); }
public org.ovirt.engine.core.bll.ValidationResult validate() { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure = getAttachmentsToConfigure(); org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID; vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NicLabelValidator(params, existingInterfacesMap, bondsMap).validate(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validRemovedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedBonds(); vr = (skipValidation(vr)) ? vr : validRemovedBonds(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : attachmentsDontReferenceSameNetworkDuplicately(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : networksUniquelyConfiguredOnHost(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateNetworkExclusiveOnNics(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NetworkMtuValidator(networkBusinessEntityMap).validateMtu(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateCustomProperties(); <START_MOD>vr = (skipValidation(vr)) ? vr : validateQosOverriddenInterfaces(); vr = (skipValidation(vr)) ? vr : validateQosNotPartiallyConfigured(); vr = (skipValidation(vr)) ? vr : validateQosCommitment(attachmentsToConfigure); <END_MOD>return vr; }
@org.junit.Before public void setUp() { mappingLocator = new org.ovirt.engine.api.restapi.types.MappingLocator(); mappingLocator.populate(); java.util.HashMap<java.lang.Integer, java.lang.String> osNames = new java.util.HashMap<>(1); osNames.put(0, "Unassigned"); }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue removeImage(org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters parameters) { try { return org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.DeleteImageGroup, parameters); } catch (org.ovirt.engine.core.common.errors.<START_MOD>EngineException<END_MOD> e) { if ((e.getErrorCode()) == (org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD>.ImageDoesNotExistInDomainError)) { return createImageDoesNotExistInDomainReturnValue(); } throw e; } }
<START_MOD>@org.junit.Test public void testGetAllForTemplate() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> result = dao.getAllForTemplate(org.ovirt.engine.core.dao.network.VmNicDaoTest.TEMPLATE_ID); assertCorrectResultForTemplate(result); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( to add/remove disk to the VM java.lang.String allowToAddRemoveDiskToTheVmRoleTreeTooltip();
public static void GetMaximalVmMemSize64OS(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, java.lang.String version) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : -1; } }; org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.GetConfigurationValueParameters tempVar = new org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.GetConfigurationValueParameters(ConfigurationValues.VM64BitMaxMemorySizeInMB); tempVar.setVersion(version); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(tempVar, aQuery); }
<START_MOD>@org.junit.Test public void generateDiskDescriptionWhenDescriptionIsCompletelyTruncated() throws java.io.IOException { java.lang.String alias = org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.DISK_PROPERTY_FOR_TESTING.substring(0, 173); disk1.setDiskAlias(alias); disk1.setDiskDescription("DiskDescription"); assertDiskDescriptionMap(disk1, alias, ""); }<END_MOD>
@org.junit.Test public void canDoActionFailsPoolSpecifiedDoesNotExist() { params.setStoragePoolId(spId); when(spDao.get(spId)).thenReturn(null); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST); }
public java.util.HashSet<org.ovirt.engine.core.compat.Version> getSupportedClusterVersionsSet() { return mVdsDynamic.getSupportedClusterVersionsSet(); }
<START_MOD>void saveVmNumaNode(org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode, org.ovirt.engine.core.compat.Guid vmId);<END_MOD>
<START_MOD>@java.lang.Override public boolean isValid(java.lang.String cidr, javax.validation.ConstraintValidatorContext context) { boolean isCidrFormat = org.ovirt.engine.core.common.validation.CidrValidator.isCidrFormatValid(cidr); if (!isCidrFormat) { return false; } boolean isNetworkAddress = org.ovirt.engine.core.common.validation.CidrValidator.isCidrValidNetworkAddress(cidr); if (!isNetworkAddress) { context.disableDefaultConstraintViolation(); context.buildConstraintViolationWithTemplate("CIDR_NOT_NETWORK_ADDRESS").addNode("cidr").addConstraintViolation(); return false; } return true; }<END_MOD>
<START_MOD>@org.junit.AfterClass public static void terminate() throws java.lang.Exception { if ((org.ovirt.engine.core.utils.hostinstall.SSHDialogTest.s_sshd) != null) { org.ovirt.engine.core.utils.hostinstall.SSHDialogTest.s_sshd.stop(); } }<END_MOD>
<START_MOD>private org.ovirt.engine.api.model.RSDL getRSDL(javax.ws.rs.core.Application application) { for (java.lang.Object obj : application.getSingletons()) { if (obj instanceof org.ovirt.engine.api.restapi.resource.BackendApiResource) { org.ovirt.engine.api.restapi.resource.BackendApiResource resource = ((org.ovirt.engine.api.restapi.resource.BackendApiResource) (obj)); return resource.getRSDL(); } } return null; }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( System java.lang.String configureSystemRoleTree();
public java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> getInterfaces() { return mInterfaceList; }
<START_MOD>private void logRenamedEntity() { if ((this) instanceof org.ovirt.engine.core.bll.RenamedEntityInfoProvider) { java.lang.String entity = "UNKNOWN"; java.lang.String oldName = ""; java.lang.String newName = ""; try { entity = org.ovirt.engine.core.utils.ReflectionUtils.getMethodValue(this, "getEntityName").toString(); oldName = org.ovirt.engine.core.utils.ReflectionUtils.getMethodValue(this, "getOldName").toString(); newName = org.ovirt.engine.core.utils.ReflectionUtils.getMethodValue(this, "getNewName").toString(); if (!(oldName.equals(newName))) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.AddCustomValue("EntityName", entity); logable.AddCustomValue("OldName", oldName); logable.AddCustomValue("NewName", newName); java.lang.Class<org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase>[] partypes = new java.lang.Class[1]; partypes[0] = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase.class; java.lang.Object[] arglist = new java.lang.Object[1]; arglist[0] = logable; org.ovirt.engine.core.utils.ReflectionUtils.callMethod(this, "setId", partypes, arglist); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.ENTITY_RENAMED); } } catch (java.lang.SecurityException e) { e.printStackTrace(); } catch (java.lang.IllegalArgumentException e) { e.printStackTrace(); } catch (java.lang.NoSuchMethodException e) { e.printStackTrace(); } catch (java.lang.IllegalAccessException e) { e.printStackTrace(); } catch (java.lang.reflect.InvocationTargetException e) { e.printStackTrace(); } } }<END_MOD>
@org.junit.Test public void testHandleActionResult_SucceededFalse() { org.ovirt.engine.core.common.action.VdcActionParametersBase testParameters = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnValue.<START_MOD>setValidate<END_MOD>(true); returnValue.setIsSyncronious(true); returnValue.setSucceeded(false); org.ovirt.engine.core.common.errors.EngineFault testFault = new org.ovirt.engine.core.common.errors.EngineFault(); returnValue.setFault(testFault); frontend.handleActionResult(VdcActionType.AddDisk, testParameters, returnValue, mockActionCallback, testState, true); verify(mockActionCallback).executed(callbackParam.capture()); assertEquals( should match testParameters, callbackParam.getValue().getParameters()); assertEquals( should match returnValue, callbackParam.getValue().getReturnValue()); assertEquals( should match testState, callbackParam.getValue().getState()); assertEquals( type should match VdcActionType.AddDisk, callbackParam.getValue().getActionType()); verify(mockEventsHandler).runActionExecutionFailed(VdcActionType.AddDisk, testFault); }
<START_MOD>@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } snapshots = getGlusterVolumeSnapshotDao().getAllByVolumeId(getGlusterVolumeId()); if (((snapshots) == null) || ((snapshots.size()) == 0)) { failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NO_SNAPSHOTS_EXIST, getGlusterVolumeName()); } return true; }<END_MOD>
<START_MOD>public static org.ovirt.engine.api.extensions.ExtMap fetchPrincipalRecord(final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension, java.lang.String principal) { org.ovirt.engine.api.extensions.ExtMap input = new org.ovirt.engine.api.extensions.ExtMap().mput(Base.InvokeKeys.COMMAND, Authz.InvokeCommands.FETCH_PRINCIPAL_RECORD).mput(Authz.InvokeKeys.PRINCIPAL, principal); return org.ovirt.engine.core.aaa.AuthzUtils.fetchPrincipalRecordImpl(extension, input); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase runAction(org.ovirt.engine.core.bll.CommandBase<?> action) { return runAction(action, true, null); }<END_MOD>
public void <START_MOD>setOldClusterVersionOfSnapshotWithMemory<END_MOD>(<START_MOD>org.ovirt.engine.core.common.businessentities.VM<END_MOD> <START_MOD>vm<END_MOD>) { <START_MOD>if (!(isVMWithMemoryCompatible(vm))) { org.ovirt.engine.core.compat.Version originalClusterVersion<END_MOD> = <START_MOD>vm.getClusterCompatibilityVersionOrigin(); originalClusterVersion = (originalClusterVersion == null) ? org.ovirt.engine.core.compat.Version.v3_6 : originalClusterVersion; this.oldClusterVersionOfSnapshotWithMemory = originalClusterVersion<END_MOD>; }<START_MOD> else { this.oldClusterVersionOfSnapshotWithMemory = null; } }<END_MOD>
<START_MOD>private void updateSwitchTypeIfNeeded() { org.ovirt.engine.core.common.SwitchType switchType = org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getSwitchType(); boolean needToUpdate = !(java.util.Objects.equals(switchType, oldCluster.getSwitchType())); if (needToUpdate) { org.ovirt.engine.core.bll.UpdateClusterCommand.getClusterDao().setSwitchTypeOfAllNetworkAttachmentsInCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getClusterId(), switchType); } }<END_MOD>
private void afterVMsRefreshTreatment() { for (org.ovirt.engine.core.compat.Guid vm_guid : _vmsToRerun) { org.ovirt.engine.core.vdsbroker.<START_MOD>HostMonitoring<END_MOD>.log.errorFormat( vm {0}. Called from vds {1} vm_guid, _vds.getName()); org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().RerunFailedCommand(vm_guid, _vds.getId()); } for (org.ovirt.engine.core.compat.Guid vm_guid : _succededToRunVms) { _vdsManager.succededToRunVm(vm_guid); } _autoVmsToRun.removeAll(_vmsToRerun); getVdsEventListener().runFailedAutoStartVMs(_autoVmsToRun); for (java.util.Map.Entry<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDynamic> pair : _vmsClientIpChanged.entrySet()) { getVdsEventListener().processOnClientIpChange(_vds, pair.getValue().getId()); } for (org.ovirt.engine.core.common.businessentities.VmDynamic runningVm : _poweringUpVms) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().getEventListener().processOnVmPoweringUp(_vds.getId(), runningVm.getId(), runningVm.getDisplayIp(), runningVm.getDisplay()); } for (org.ovirt.engine.core.compat.Guid vm_guid : _vmsMovedToDown) { getVdsEventListener().processOnVmStop(vm_guid); } for (org.ovirt.engine.core.compat.Guid vm_guid : _vmsToRemoveFromAsync) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().RemoveAsyncRunningVm(vm_guid); } }
<START_MOD>@java.lang.SuppressWarnings("unchecked") @java.lang.Override protected void showSuggestions(final com.google.gwt.user.client.ui.SuggestBox suggestBox, java.util.Collection<? extends com.google.gwt.user.client.ui.SuggestOracle.Suggestion> suggestions, boolean isDisplayStringHTML, boolean isAutoSelectEnabled, org.ovirt.engine.ui.webadmin.widget.autocomplete.SuggestionCallback callback) { boolean anySuggestions = (suggestions != null) && ((suggestions.size()) > 0); if (!anySuggestions) { hideSuggestions(); return; } if ((suggestionPopup) == null) { suggestionPopup = createPopup(); } if (suggestionPopup.isAttached()) { suggestionPopup.hide(); } if (suggestBox != null) { suggestionPopup.removeAutoHidePartner(suggestBox.getElement()); suggestionPopup.addAutoHidePartner(suggestBox.getElement()); } suggestionsTable = getSuggestionCellList(((java.util.Collection<org.ovirt.engine.ui.webadmin.widget.autocomplete.SearchSuggestion>) (suggestions)), suggestBox, suggestionPopup); suggestionPopup.setWidget(suggestionsTable); suggestionPopup.showRelativeTo(suggestBox); }<END_MOD>
@org.junit.Test public void canDoActionFailure() { when(validator.isConnectionExists()).thenReturn(ValidationResult.VALID); when(validator.isConnectionForISCSIDomainAttached(domain)).thenReturn(java.lang.Boolean.FALSE); when(validator.isISCSIConnectionAndDomain(domain)).thenReturn(ValidationResult.VALID); when(validator.isDomainOfConnectionExistsAndInactive(domain)).thenReturn(ValidationResult.VALID); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_CONNECTION_FOR_DOMAIN_NOT_EXIST); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionResume(java.lang.String volumeName, java.lang.String slaveHostName, java.lang.String slaveVolumeName, <START_MOD>java.lang.String slaveUserName, <END_MOD>boolean force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.geoRepSessionResume").withParameter("volumeName", volumeName).withParameter("remoteHost", slaveHostName).withParameter("remoteVolumeName", slaveVolumeName<START_MOD>).withOptionalParameter("remoteUserName", slaveUserName<END_MOD>).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
<START_MOD>public boolean getPlugDiskToVm() { return plugDiskToVm; }<END_MOD>
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if (!(getGlusterUtil().isGlusterGeoReplicationSupported(getVdsGroup().getCompatibilityVersion(), getVdsGroup().getId()))) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GEO_REP_NOT_SUPPORTED); } slaveHost = getSlaveHost(); if ((slaveHost) == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_HOST_NOT_EXIST); } if ((slaveHost.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP, java.lang.String.format( %2$s "VdsName", slaveHost.getName())); } slaveVolume = getSlaveVolume(); if ((slaveVolume) == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_INVALID); } if ((slaveVolume.getStatus()) != (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_STARTED); } if (!(areAllRemoteServersUp())) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_ONE_OR_MORE_REMOTE_HOSTS_ARE_NOT_ACCESSIBLE); } org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession geoRepSession = getGeoRepDao().getGeoRepSession(getGlusterVolumeId(), slaveHost.getId(), getParameters().getSlaveVolumeName()); if (geoRepSession != null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_GEOREP_SESSION_ALREADY_CREATED); } return super.<START_MOD>validate(); }<END_MOD>
@java.lang.Override protected void readGeneralData(org.ovirt.engine.core.compat.backendcompat.XmlNode content) { org.ovirt.engine.core.compat.backendcompat.XmlNode node = content.SelectSingleNode("Name"); if (node != null) { _vmTemplate.setName(node.innerText); name = _vmTemplate.getName(); } node = content.SelectSingleNode("TemplateId"); if (node != null) { if (org.apache.commons.lang.StringUtils.isNotEmpty(node.innerText)) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(node.innerText)); } } node = content.SelectSingleNode("IsDisabled"); if (node != null) { _vmTemplate.setDisabled(java.lang.Boolean.parseBoolean(node.innerText)); } node = content.SelectSingleNode("TrustedService"); if (node != null) { _vmTemplate.setTrustedService(java.lang.Boolean.parseBoolean(node.innerText)); } node = content.SelectSingleNode("TemplateType"); if (node != null) { _vmTemplate.setTemplateType(org.ovirt.engine.core.common.businessentities.VmEntityType.valueOf(node.innerText)); } <START_MOD>if ((_vmTemplate.getTemplateVersion()) == null) { _vmTemplate.setTemplateVersion(1); } else { node = content.SelectSingleNode("BaseTemplateId"); if (node != null) { _vmTemplate.setBaseTemplateId(org.ovirt.engine.core.compat.Guid.createGuidFromString(node.innerText)); } } }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlListReturn getVmLeaseInfo(java.lang.String leaseUUID, java.lang.String sdUUID) { java.util.HashMap<java.lang.String, java.lang.Object> leaseDict = new java.util.HashMap<>(); leaseDict.put("lease_id", leaseUUID); leaseDict.put("sd_id", sdUUID); org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.info").withParameter("lease", leaseDict).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlListReturn(response); }<END_MOD>
@java.lang.Override public void freeMacs(java.util.List<java.lang.String> macs) {<START_MOD> org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug( mac addresses {} back to {} java.util.Arrays.toString(macs.toArray()), this);<END_MOD> for (java.lang.String mac : macs) { macsStorage.freeMac(org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong(mac)); } }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase runInternalAction(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, org.ovirt.engine.core.bll.context.CommandContext <START_MOD>inheritingContext<END_MOD>) {<START_MOD> entailContext(inheritingContext);<END_MOD> return org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(actionType, parameters, <START_MOD>inheritingContext<END_MOD>); }
<START_MOD>private void createSnapshotsForDisks() { org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeParameters parameters = new org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeParameters(); parameters.setDiskIdsToIgnoreInChecks(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIdsToIgnoreInChecks()); parameters.setDiskToImageIds(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskToImageIds()); parameters.setNewActiveSnapshotId(newActiveSnapshotId); parameters.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()); parameters.setDiskIds(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIds()); parameters.setVmId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.CreateSnapshotVolume, parameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getContext(), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getLock())); }<END_MOD>
<T extends org.ovirt.engine.core.common.businessentities.BusinessEntity<? extends org.ovirt.engine.core.compat.NGuid>> void addActionButton(java.lang.String label, final org.ovirt.engine.ui.webadmin.plugin.api.ActionButtonInterface actionButtonInterface, final org.ovirt.engine.ui.common.widget.table.ActionTable<T> table) { final org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand(label, new org.ovirt.engine.ui.uicommonweb.BaseCommandTarget() { @java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand uiCommand) { actionButtonInterface.onClick().invoke(org.ovirt.engine.ui.webadmin.plugin.entity.EntityObject.arrayFrom(table.getSelectedItems()), null); } }); table.addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<T>(label<START_MOD>, getCommandLocation(actionButtonInterface)<END_MOD>) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return command; } }); table.getSelectionModel().addSelectionChangeHandler(new com.google.gwt.view.client.SelectionChangeEvent.Handler() { @java.lang.Override public void onSelectionChange(com.google.gwt.view.client.SelectionChangeEvent event) { updateActionButtonCommand(command, actionButtonInterface, table.getSelectedItems()); } }); updateActionButtonCommand(command, actionButtonInterface, table.getSelectedItems()); }
<START_MOD>protected boolean isQuietTimeFromLastActionPassed() { int secondsLeftToNextPmOp = (org.ovirt.engine.core.bll.pm.VdsNotRespondingTreatmentCommand.isInternalExecution()) ? 0 : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAuditLogDao().getTimeToWaitForNextPmOp(org.ovirt.engine.core.bll.pm.VdsNotRespondingTreatmentCommand.getVds().getName(), AuditLogType.USER_VDS_RESTART.name()); if (secondsLeftToNextPmOp > 0) { addValidationMessage(EngineMessage.VDS_FENCE_DISABLED_AT_QUIET_TIME); org.ovirt.engine.core.bll.pm.VdsNotRespondingTreatmentCommand.addValidationMessageVariable("seconds", secondsLeftToNextPmOp); return false; } else { return true; } }<END_MOD>
<START_MOD>private void assertCorrectGetManagedInterfaceForVdsResult(org.ovirt.engine.core.common.businessentities.VdsNetworkInterface result) { assertNotNull(result); assertTrue(result.getIsManagement()); }<END_MOD>
public static void GetMaximalVmMemSize32OS(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 20480; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.VM32BitMaxMemorySizeInMB, org.ovirt.engine.core.common.config.<START_MOD>ConfigCommon.defaultConfigurationVersion<END_MOD>), aQuery); }
public boolean validate() { getName().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.AsciiNameValidation() }); <START_MOD>java.util.List<org.ovirt.engine.ui.uicommonweb.validation.IValidation> cidrValidations = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.validation.IValidation>(); cidrValidations.add(new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation()); if ((getIpVersion().getSelectedItem()) == (org.ovirt.engine.core.common.businessentities.network.ExternalSubnet.IpVersion.IPV4)) { cidrValidations.add(new org.ovirt.engine.ui.uicommonweb.validation.CidrValidation()); } <END_MOD>getCidr().validateEntity<START_MOD>(cidrValidations.toArray(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[0])); getIpVersion().validateSelectedItem<END_MOD>(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); <START_MOD>return ((getName().getIsValid()) && (getCidr().getIsValid())) && (<END_MOD>getIpVersion().<START_MOD>getIsValid());<END_MOD> }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource createInterfaceParametersMapper(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { return getCustomMapSqlParameterSource().addValue("addr", nic.getAddress()).addValue("bond_name", nic.getBondName()).addValue("bond_type", nic.getBondType()).addValue("gateway", nic.getGateway()).addValue("id", nic.getId()).addValue("is_bond", nic.getBonded()).addValue("bond_opts", nic.getBondOptions()).addValue("mac_addr", nic.getMacAddress()).addValue("name", nic.getName()).addValue("network_name", nic.getNetworkName()).addValue("speed", nic.getSpeed()).addValue("subnet", nic.getSubnet()).addValue("boot_protocol", nic.getBootProtocol()).addValue("type", nic.getType()).addValue("vds_id", nic.getVdsId()).addValue("vlan_id", nic.getVlanId()).addValue("mtu", nic.getMtu()).addValue("bridged", nic.isBridged()).addValue("qos_overridden", nic.isQosOverridden()).addValue("labels", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(nic.getLabels())).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(<START_MOD>(nic.hasCustomProperties() ? <END_MOD>nic.getCustomProperties()<START_MOD> : null)<END_MOD>)); }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource getFullParameterSource(org.ovirt.engine.core.common.businessentities.VmInit vmInit) { return getCustomMapSqlParameterSource().addValue("vm_id", vmInit.getId()).addValue("host_name", vmInit.getHostname()).addValue("domain", vmInit.getDomain()).addValue("authorized_keys", vmInit.getAuthorizedKeys()).addValue("regenerate_keys", vmInit.getRegenerateKeys()).addValue("dns_servers", vmInit.getDnsServers()).addValue("dns_search_domains", vmInit.getDnsSearch()).addValue("time_zone", vmInit.getTimeZone()).addValue("networks", org.ovirt.engine.core.utils.VmInitUtils.networkListToJson(vmInit.getNetworks())).addValue("password", org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.encryptPassword(vmInit.getRootPassword())).addValue("winkey", vmInit.getWinKey()).addValue("custom_script", vmInit.getCustomScript()).addValue("input_locale", vmInit.getInputLocale()).addValue("ui_language", vmInit.getUiLanguage()).addValue("system_locale", vmInit.getSystemLocale()).addValue("user_locale", vmInit.getUserLocale()).addValue("user_name", vmInit.getUserName())<START_MOD>.addValue("active_directory_ou", vmInit.getUserName())<END_MOD>; }
@java.lang.Override protected boolean canDoAction() { boolean returnValue = ((super.canDoAction()) && (org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>ForceRemoveStorageDomainCommand.checkStorageDomain())) && (((org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)) || (checkStorageDomainStatusNotEqual(StorageDomainStatus.Active))); if ((returnValue && ((org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master))) && ((org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>ForceRemoveStorageDomainCommand.getStoragePool()) != null)) { if ((org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>ForceRemoveStorageDomainCommand.electNewMaster()) == null) { returnValue = false; addCanDoActionMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN); } else if (!(org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>ForceRemoveStorageDomainCommand.initializeVds())) { returnValue = false; addCanDoActionMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN_HOST_NOT_ACTIVE); } } if (returnValue && ((org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>ForceRemoveStorageDomainCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLANCE))) { addCanDoActionMessage(EngineMessage.ERROR_CANNOT_MANAGE_STORAGE_DOMAIN); returnValue = false; } return returnValue; }
<START_MOD>@org.junit.Test public void testNested() { org.ovirt.engine.api.types.V4Vm object = newVm().setCpu(newCpu().setMode("mymode")).build(); assertEquals("{'cpu':{'mode':'mymode'}}", objectToJson(object)); }<END_MOD>
private static org.ovirt.engine.core.common.businessentities.VDSGroup cloneVDSGroup(org.ovirt.engine.core.common.businessentities.VDSGroup instance) { org.ovirt.engine.core.common.businessentities.VDSGroup obj = new org.ovirt.engine.core.common.businessentities.VDSGroup(); obj.setId(instance.getId()); obj.setName(instance.getName()); obj.setDescription(instance.getDescription()); obj.setComment(instance.getComment()); obj.setCpuName(instance.getCpuName()); obj.setCompatibilityVersion(instance.getCompatibilityVersion()); obj.setMigrateOnError(instance.getMigrateOnError()); obj.setTransparentHugepages(instance.getTransparentHugepages()); obj.setStoragePoolId(instance.getStoragePoolId()); obj.setMaxVdsMemoryOverCommit(instance.getMaxVdsMemoryOverCommit()); obj.setCountThreadsAsCores(instance.getCountThreadsAsCores()); obj.setEmulatedMachine(instance.getEmulatedMachine()); obj.setDetectEmulatedMachine(instance.isDetectEmulatedMachine()); obj.setArchitecture(instance.getArchitecture()); obj.setSerialNumberPolicy(instance.getSerialNumberPolicy()); obj.setCustomSerialNumber(instance.getCustomSerialNumber()); obj.setFencingPolicy(new org.ovirt.engine.core.common.businessentities.FencingPolicy(instance.getFencingPolicy())); obj.setAutoConverge(instance.getAutoConverge()); obj.setMigrateCompressed(instance.getMigrateCompressed()); <START_MOD>obj.setGluster37Support(instance.getGluster37Support()); <END_MOD>return obj; }
public static void GetDocumentationBaseURL(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.String) (source)) : ""; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.DocsURL, org.ovirt.engine.core.common.config.<START_MOD>ConfigCommon<END_MOD>.<START_MOD>defaultConfigurationVersion<END_MOD>), aQuery); }
public static java.util.<START_MOD>List<END_MOD><java.lang.String> getPresetDisplayStrings() { <START_MOD>java.util.List<java.lang.String><END_MOD> <START_MOD>list = new java.util.ArrayList<java.lang.String>(<END_MOD>org.ovirt.engine.ui.uicommonweb.models.providers.NeutronPluginTranslator.pluginForDisplay.keySet()<START_MOD>); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator()); return list<END_MOD>; }
public void calculateFreeVirtualMemory() { if ((((getmem_commited()) != null) && ((getphysical_mem_mb()) != null)) && ((getreserved_mem()) != null)) { maxSchedulingMemory = (((getmax_vds_memory_over_commit()) * (getphysical_mem_mb())) / 100.0F) - ((getmem_commited()) + (getreserved_mem())); } <START_MOD>maxSchedulingMemory = ((maxSchedulingMemory) > 0) ? maxSchedulingMemory : 0; <END_MOD>}
<START_MOD>protected org.ovirt.engine.core.common.businessentities.InstanceType getInstanceType() { if (((instanceType) == null) && ((instanceTypeId) != null)) { instanceType = AddVmCommand.getVmTemplateDAO().getInstanceType(instanceTypeId.getValue()); } return instanceType; }<END_MOD>
<START_MOD>@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { model.onKernelCmdlineResetButton(); }<END_MOD>
<START_MOD>@org.junit.Test public void canDoActionFailsNullParameterForIsoFile() { mockVdsWithOsVersion(org.ovirt.engine.core.bll.UpgradeOvirtNodeCommandTest.VALID_OVIRT_VERSION); org.ovirt.engine.core.common.action.InstallVdsParameters param = org.ovirt.engine.core.bll.UpgradeOvirtNodeCommandTest.createParameters(); param.setoVirtIsoFile(null); org.ovirt.engine.core.bll.UpgradeOvirtNodeCommand<org.ovirt.engine.core.common.action.InstallVdsParameters> command = createCommand(param); org.ovirt.engine.core.bll.UpgradeOvirtNodeCommandTest.assertFailsWithCanDoActionMessage(command, VdcBllMessages.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE); }<END_MOD>
<START_MOD>@java.lang.Override protected void ExecuteVdsBrokerCommand() { returnValue = org.ovirt.engine.core.vdsbroker.gluster.ManageGlusterServiceVDSCommand.getBroker().glusterServiceManage(org.ovirt.engine.core.vdsbroker.gluster.ManageGlusterServiceVDSCommand.getParameters().getVdsId(), ((java.lang.String[]) (org.ovirt.engine.core.vdsbroker.gluster.ManageGlusterServiceVDSCommand.getParameters().getServiceList().toArray())), org.ovirt.engine.core.vdsbroker.gluster.ManageGlusterServiceVDSCommand.getParameters().getActionType(), true); org.ovirt.engine.core.vdsbroker.gluster.ManageGlusterServiceVDSCommand.ProceedProxyReturnValue(); }<END_MOD>
<START_MOD>@java.lang.Override public int compare(T o1, T o2) { java.lang.String text1 = getValue(o1); java.lang.String text2 = getValue(o2); if (text1.equals(text2)) { return 0; } else if ((RxTxRateRenderer.NO_VALUE.equals(text1)) || (RxTxRateRenderer.NO_VALUE.equals(text2))) { return RxTxRateRenderer.NO_VALUE.equals(text1) ? -1 : 1; } else if ((RxTxRateRenderer.ZERO_VALUE.equals(text1)) || (RxTxRateRenderer.ZERO_VALUE.equals(text2))) { return RxTxRateRenderer.ZERO_VALUE.equals(text1) ? -1 : 1; } else if ((RxTxRateRenderer.SMALL_VALUE.equals(text1)) || (RxTxRateRenderer.SMALL_VALUE.equals(text2))) { return RxTxRateRenderer.SMALL_VALUE.equals(text1) ? -1 : 1; } else { return lexoNumeric.compare(text1, text2); } }<END_MOD>
@java.lang.Override public boolean validateAndSetQuota() { if (org.ovirt.engine.core.bll.RunVmOnceCommand.isInternalExecution()) { return true; } boolean quotaAcc = super.validateAndSetQuota(); if (!quotaAcc) { return false; } if (<START_MOD>java.lang.Boolean.FALSE.equals<END_MOD>(org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getRunAsStateless())) { return quotaAcc; } return org.ovirt.engine.core.bll.quota.QuotaManager.getInstance().validateAndSetStorageQuota(org.ovirt.engine.core.bll.RunVmOnceCommand.getStoragePool(), getStorageQuotaListParameters(), org.ovirt.engine.core.bll.RunVmOnceCommand.getReturnValue().getCanDoActionMessages()); }
@java.lang.Override public java.lang.String getDisplayStringNullSafe(java.lang.String data) { if ((data == null) || (data.trim().isEmpty())) { data = <START_MOD>customCpu<END_MOD>.<START_MOD>getNullReplacementString<END_MOD>(); } return typeAheadNameTemplateNullSafe(data); }
private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.Optional<org.ovirt.engine.core.compat.Version> <START_MOD>optionalVersion<END_MOD> = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(<START_MOD>java.util.Comparator.naturalOrder(<END_MOD>)); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); <START_MOD>optionalVersion.ifPresent(( version) -> dataCenters.forEach(( dataCenter) -><END_MOD> { <START_MOD>dataCenter.setStoragePoolCompatibilityLevelUpgradeNeeded(((version.compareTo(dataCenter.getCompatibilityVersion())) > 0)); dataCenter.setMacPoolId(dcSingleMacPoolFinder.find(dataCenter.getId())); })); return <END_MOD>dataCenters; }
private boolean isPrimaryAddressExist() { <START_MOD>org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = getIpConfigurationOfNetworkAttachment(); <END_MOD>return (<START_MOD>ipConfiguration<END_MOD> != null) && (<START_MOD>ipConfiguration<END_MOD>.hasIpv4PrimaryAddressSet()); }
@java.lang.Override protected void verifyModel(org.ovirt.engine.api.model.Permission model, int index) { assertEquals(GUIDS[index].toString(), model.getId()); assertTrue(model.isSetUser()); assertEquals(<START_MOD>org.ovirt.engine.api.restapi.utils.DirectoryEntryIdUtils.generateId(<END_MOD>GUIDS[1].toString(),<START_MOD>        <END_MOD> model.getUser().getId()); assertTrue(model.isSetRole()); assertEquals(GUIDS[2].toString(), model.getRole().getId()); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( change Data Center in tree context java.lang.String cannotChangeDCInTreeContext();
private org.ovirt.engine.<START_MOD>core<END_MOD>.extensions.<START_MOD>mgr.ExtensionProxy<END_MOD> loadExtension(java.util.Properties props) throws java.lang.Exception { org.ovirt.engine.core.extensions.mgr.ExtensionsManager.BindingsLoader loader = bindingsLoaders.get(props.getProperty(Base.ConfigKeys.BINDINGS_METHOD)); if (loader == null) { throw new org.ovirt.engine.core.extensions.mgr.ConfigurationException(java.lang.String.format( binding method '%1$s'. props.getProperty(Base.ConfigKeys.BINDINGS_METHOD))); } return loader.load(props); }
<START_MOD>private org.ovirt.engine.core.compat.Guid getNewMacPoolId() { return org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); }<END_MOD>
private boolean changesAreClusterCompatible() { if (!(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommand.getParameters().getNetwork().isVmNetwork())) { if (!(org.ovirt.engine.core.common.FeatureSupported.nonVmNetwork(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommand.getVdsGroup().getCompatibilityVersion()))) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.NON_VM_NETWORK_NOT_SUPPORTED_FOR_POOL_LEVEL); return false; } } return true; }
private void addInterfacesFromTemplate() { <START_MOD>java.lang.String macRegex = "^(\\p{XDigit}{2}:){5}\\p{XDigit}{2}$"; <END_MOD>org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(); for (org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : getVm().getInterfaces()) { if ((iface.getId()) == null) { iface.setId(org.ovirt.engine.core.compat.Guid.NewGuid()); } <START_MOD>if (org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(iface.getMacAddress())) { iface.setMacAddress(org.ovirt.engine.core.bll.MacPoolManager.getInstance().allocateNewMac()); } if (!(org.ovirt.engine.core.compat.Regex.IsMatch(iface.getMacAddress(), macRegex))) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.AddCustomValue("MacAddress", iface.getMacAddress()); logable.AddCustomValue("IfaceName", iface.getName()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.IMPORTEXPORT_IMPORT_INTERFACES_WITH_INVALID_MAC_ADDRESS); } <END_MOD>iface.setVmTemplateId(null); iface.setVmId(getVm().getStaticData().getId()); iface.setVmName(getVm().getvm_name()); if (getParameters().isImportAsNewEntity()) { macAdded = true; } else { macAdded = vmInterfaceManager.add(iface, getCompensationContext()); } } }
@org.junit.Test public void testVmDuringSnaoshot() { setUpGeneralValidations(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT)).when(snapshotsValidator).vmNotDuringSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList()).when(cmd).getDisksList(); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT.name())); }
public static boolean isMemorySizeLegal(org.ovirt.engine.core.common.businessentities.VmOsType osType, int memSizeInMB, java.lang.String <START_MOD>cluster_version<END_MOD>) { return (memSizeInMB >= (org.ovirt.engine.core.common.utils.VmValidationUtils.getMinMemorySizeInMb())) && (memSizeInMB <= (org.ovirt.engine.core.common.utils.VmValidationUtils.getMaxMemorySizeInMb(osType, <START_MOD>cluster_version<END_MOD>))); }
private boolean refreshVdsmFileList(org.ovirt.engine.core.compat.Guid repoStoragePoolId, org.ovirt.engine.core.compat.Guid repoStorageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> fileStats<START_MOD>, org.ovirt.engine.core.bll.IsoDomainListSyncronizer.FileListRefreshed fileListRefreshed<END_MOD>) { if (repoStorageDomainId == null) { return false; } try { boolean vdsmRefreshOk = fileStats != null; org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.debug( refresh process from VDSM, for {}, {}. imageFileType, succeededOrFailed(vdsmRefreshOk)); if (!vdsmRefreshOk) { return false; } boolean refreshSucceeded = org.ovirt.engine.core.bll.IsoDomainListSyncronizer.refreshIsoFileListMetaData(repoStorageDomainId, repoStorageDom, fileStats, imageFileType); if (refreshSucceeded && (fileListRefreshed != null)) { fileListRefreshed.onFileListRefreshed(repoStoragePoolId, fileStats.keySet()); } return refreshSucceeded; } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.warn( refresh process for {} failed: {} imageFileType, e.getMessage()); org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.debug("Exception", e); return false; } }
protected java.util.Map[] getVmInfo(java.util.List<java.lang.String> vmsToUpdate) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(vdsManager.getVdsId()); return ((java.util.Map[]) (<START_MOD>getResourceManager().runVdsCommand(VDSCommandType.FullList,<END_MOD> new org.ovirt.engine.core.common.vdscommands.FullListVDSCommandParameters(vds, vmsToUpdate)).<START_MOD>getReturnValue<END_MOD>())); }
@org.junit.Test public void encodeWhenNonAsciiAliasIsTruncated() throws java.io.IOException { java.lang.String nonAsciiDiskAlias = "ááááááááááááááááááááááááááááááááááááááááááááááá"; disk.setDiskAlias(nonAsciiDiskAlias); disk.setDiskDescription("DiskDescription"); assertDiskDescriptionMap(disk, org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>MetadataDiskDescriptionHandlerTest.generateDiskAliasJsonEntry(org.ovirt.engine.core.bll<START_MOD>.storage.disk<END_MOD>.MetadataDiskDescriptionHandlerTest.encodeString(nonAsciiDiskAlias.substring(0, 46))), org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>MetadataDiskDescriptionHandlerTest.generateEncodingJsonEntry(1)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) { if (sender == (<START_MOD>getIsoImage())) { IsoImage_SelectedItemChanged(); } else if (sender == (<END_MOD>getFloppyImage())) { FloppyImage_SelectedItemChanged(); } else if (sender == (getSysPrepDomainName())) { SysPrepDomainName_SelectedItemChanged(); } } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition)) { if (sender == (getAttachFloppy())) { AttachFloppy_EntityChanged(); } else if (sender == (getAttachIso())) { AttachIso_EntityChanged(); } else if (sender == (getIsVmFirstRun())) { IsVmFirstRun_EntityChanged(); } else if (sender == (getUseAlternateCredentials())) { UseAlternateCredentials_EntityChanged(); } else if ((sender == (getDisplayConsole_Vnc_IsSelected())) && ((java.lang.Boolean) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity()))) { getDisplayConsole_Spice_IsSelected().setEntity(false); } else if ((sender == (getDisplayConsole_Spice_IsSelected())) && ((java.lang.Boolean) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity()))) { getDisplayConsole_Vnc_IsSelected().setEntity(false); } else if (sender == (getIsAutoAssign())) { IsAutoAssign_EntityChanged(sender, args); } } }
<START_MOD>private static void mapFopStats(org.ovirt.engine.api.model.ProfileDetail profileDetail, org.ovirt.engine.core.common.businessentities.gluster.StatsInfo statsInfo) { for (org.ovirt.engine.core.common.businessentities.gluster.FopStats fopStat : statsInfo.getFopStats()) { org.ovirt.engine.api.model.FopStatistic fStat = new org.ovirt.engine.api.model.FopStatistic(); fStat.setName(fopStat.getName()); fStat.getStatistic().add(org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.MIN_LATENCY, fopStat.getMinLatency())); fStat.getStatistic().add(org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.MAX_LATENCY, fopStat.getMaxLatency())); fStat.getStatistic().add(org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.AVG_LATENCY, fopStat.getAvgLatency())); fStat.getStatistic().add(org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.HITS, fopStat.getHits())); profileDetail.getFopStatistic().add(fStat); } }<END_MOD>
@javax.annotation.PostConstruct private void initialize() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.PMHealthCheckEnabled)) { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info( initializing {} getClass().getSimpleName()); java.lang.Integer pmHealthCheckInterval = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PMHealthCheckIntervalInSec); <START_MOD>executor.scheduleWithFixedDelay(() -> pmHealthCheck()<END_MOD>, pmHealthCheckInterval, pmHealthCheckInterval, java.util.concurrent.TimeUnit.SECONDS); } recover(vdsDao.getAll()); org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info( initializing {} getClass().getSimpleName()); }
public void setStorageDomains(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>StorageDomain<END_MOD>> value) { if ((storageDomains) != value) { storageDomains = value; OnPropertyChanged(new org.ovirt.engine.core.compat.PropertyChangedEventArgs( Domains } }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc merge(java.lang.String jobId, java.util.Map topImage, java.util.Map baseImage) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.merge").withParameter("top", topImage).withParameter("base", baseImage).withParameter("job_id", jobId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.Uri uri = new org.ovirt.engine.ui.uicommonweb.Uri(((java.lang.String) (value))); org.ovirt.engine.ui.uicommonweb.validation.ValidationResult res = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if (!(uri.isValid())) { res.setSuccess(false); res.getReasons().add(getUriMessage()); return res; } res = getHostValidation().validate(uri.getAuthority().getHost()); if (!(uri.getScheme().equalsIgnoreCase(Uri.SCHEME_HTTP))) { res.setSuccess(false); res.getReasons().add(getSchemeMessage()); } return res; }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return java.lang.String.valueOf(object.getDiskList().size()); }<END_MOD>
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { java.util.List<org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.VmTemplate> list = new java.util.ArrayList<org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.VmTemplate>(); if (source != null) { org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.VmTemplate blankTemplate = null; for (org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.VmTemplate template : ((java.util.List<org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.VmTemplate>) (source))) { if (template.getId().equals(Guid.Empty)) { blankTemplate = template; } else if ((template.getStatus()) == (VmTemplateStatus.OK)) { list.add(template); } } java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.VmTemplateByNameComparer()); if (blankTemplate != null) { list.add(0, blankTemplate); } } return list; }
private boolean isVmInterfacesConfigured() { for (org.ovirt.engine.core.common.businessentities.VmNetworkInterface nic : org.ovirt.engine.core.bll.RunVmCommand.getVm().getInterfaces()) { if ((nic.getNetworkName()) == null) { if (!(org.ovirt.engine.core.<START_MOD>common<END_MOD>.<START_MOD>validation<END_MOD>.FeatureSupported.networkLinking(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVdsGroupCompatibilityVersion()))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INTERFACE_NETWORK_NOT_CONFIGURED); return false; } else { return true; } } } return true; }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = createSnapshotsValidator(); if ((!(validate(snapshotsValidator.snapshotExists(getSnapshot())))) || (!(validate(snapshotsValidator.vmNotDuringSnapshot(getSnapshot().getVmId()))))) { return false; } vmFromConfiguration = getVmFromConfiguration(); if ((vmFromConfiguration) == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_SNAPSHOT_HAS_NO_CONFIGURATION); addCanDoActionMessageVariable("VmName", org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmName()); addCanDoActionMessageVariable("SnapshotName", org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getSnapshotName()); return false; } <START_MOD>if (!(super.canDoAction())) { return false; } <END_MOD>org.ovirt.engine.core.bll.validator.VmValidator vmValidator = createVmValidator(vmFromConfiguration); if ((java.lang.Boolean.FALSE.equals(org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters().isVirtioScsiEnabled())) && (!(validate(vmValidator.canDisableVirtioScsi(getAdjustedDiskImagesFromConfiguration()))))) { return false; } return true; }
<START_MOD>private void validateRoleMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetRoleMappings())) && (action.getRegistrationConfiguration().getRoleMappings().isSetRegistrationRoleMappings())) { action.getRegistrationConfiguration().getRoleMappings().getRegistrationRoleMappings().forEach(this::validateRoleMapping); } }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Erratum> getErrataForHost(java.lang.String hostName) { org.ovirt.engine.core.bll.host.provider.foreman.ContentHost contentHost = findContentHost(hostName); if (contentHost == null) { return java.util.Collections.emptyList(); } return runErrataListMethod(java.lang.String.format(org.ovirt.engine.core.bll.host.provider.foreman.ForemanHostProviderProxy.CONTENT_HOST_ERRATA_ENTRY_POINT, contentHost.<START_MOD>getUuid<END_MOD>())); }
public static void GetDomainList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, boolean filterInternalDomain) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? new java.util.ArrayList<java.lang.String>(((java.util.ArrayList<java.lang.String>) (source))) : new java.util.ArrayList<java.lang.String>(); } }; org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.GetDomainListParameters tempVar = new org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.GetDomainListParameters(); tempVar.setFilterInternalDomain(filterInternalDomain); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetDomainList, tempVar, aQuery); }
<START_MOD>@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getEventBus().addHandler(org.ovirt.engine.ui.common.widget.tab.TabAccessibleChangeEvent.getType(), new org.ovirt.engine.ui.common.widget.tab.TabAccessibleChangeEvent.TabAccessibleChangeHandler() { @java.lang.Override public void onTabAccessibleChange(org.ovirt.engine.ui.common.widget.tab.TabAccessibleChangeEvent event) { getView().recalculateSize(); getView().showScrollButtons(); } })); registerHandler(getEventBus().addHandler(org.ovirt.engine.ui.common.system.HeaderOffsetChangeEvent.getType(), new org.ovirt.engine.ui.common.system.HeaderOffsetChangeEvent.HeaderOffsetChangeHandler() { @java.lang.Override public void onHeaderOffsetChange(org.ovirt.engine.ui.common.system.HeaderOffsetChangeEvent event) { getView().setOffset(event.getWidth()); if ((resizeHandlerRegistration) != null) { resizeHandlerRegistration.removeHandler(); } } })); resizeHandlerRegistration = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent resizeEvent) { getView().recalculateSize(); getView().showScrollButtons(); } }); }<END_MOD>
@java.lang.Override public void runningSucceded() { try {<START_MOD> org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDynamicDao().updatePartialVdsDynamicCalc(getVdsDestinationId(), 0, (-(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getVmMemSizeMb())), (-(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getNumOfCpus())), 0, 0);<END_MOD> super.runningSucceded(); } finally { org.ovirt.engine.core.bll.MigrateVmCommand.freeLock(); } }
<START_MOD>public final void setBrandingManager(final org.ovirt.engine.ui.frontend.server.gwt.branding.BrandingManager manager) { this.brandingManager = manager; }<END_MOD>
<START_MOD>@java.lang.Override protected java.util.List<java.lang.Class<?>> getValidationGroups() { org.ovirt.engine.core.bll.network.host.UnlabelNicCommand.addValidationGroup(org.ovirt.engine.core.common.validation.group.CreateEntity.class); return super.getValidationGroups(); }<END_MOD>
<START_MOD>private java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> getExistingNics() { if ((existingNics) == null) { existingNics = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getDbFacade().getInterfaceDao().getAllInterfacesForVds(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsId()); org.ovirt.engine.core.dao.network.NetworkQoSDao qosDao = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getDbFacade().getNetworkQosDao(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : existingNics) { org.ovirt.engine.core.common.businessentities.network.Network network = getClusterNetworks().get(iface.getNetworkName()); iface.setNetworkImplementationDetails(org.ovirt.engine.core.utils.NetworkUtils.calculateNetworkImplementationDetails(network, (network == null ? null : qosDao.get(network.getQosId())), iface)); } } return existingNics; }<END_MOD>
@java.lang.Override protected java.lang.String getWarning(java.util.List<java.lang.String> disks) { return messages.cannotMoveDisks(<START_MOD>disks<END_MOD>.<START_MOD>stream()<END_MOD>.<START_MOD>collect(java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>stream<END_MOD>.<START_MOD>Collectors<END_MOD>.<START_MOD>joining<END_MOD>(   }
public static void GetConfigFromCache(org.ovirt.engine.core.common.queries.GetConfigurationValueParameters parameters, AsyncQuery aQuery) { final java.util.Map.Entry<org.ovirt.engine.core.common.queries.ConfigurationValues, java.lang.String> config_key = new org.ovirt.engine.core.compat.KeyValuePairCompat<org.ovirt.engine.core.common.queries.ConfigurationValues, java.lang.String>(parameters.getConfigValue(), parameters.getVersion()); <START_MOD>java.lang.Object returnValue = null; <END_MOD>if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValues.containsKey(config_key)) { <START_MOD>returnValue<END_MOD> = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValues.get(config_key); <START_MOD>} else <END_MOD>if (<START_MOD>org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValuesPreConvert.containsKey(config_key)) { returnValue = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValuesPreConvert.get(config_key); if ((aQuery.converterCallback)<END_MOD> != null) { <START_MOD>returnValue = aQuery.converterCallback.Convert(returnValue, aQuery); } if (returnValue != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValues.put(config_key, returnValue); } } <END_MOD>aQuery.asyncCallback.OnSuccess(aQuery.getModel(), <START_MOD>returnValue); }<END_MOD>
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData) { int size = registerVmData.getVm().getVmMemSizeMb(); return <START_MOD>(<END_MOD>size +   <START_MOD>  + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterVmPopupView.constants.mb());<END_MOD> }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.TagsVmMap tagsVmMap; tagsVmMap = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVmByTagIdAndByVmId(org.ovirt.engine.core.bll.UpdateTagsVmMapDefaultDisplayTypeCommand.getParameters().getTagsVmMap().gettag_id(), org.ovirt.engine.core.bll.UpdateTagsVmMapDefaultDisplayTypeCommand.getParameters().getTagsVmMap().getvm_id()); if (tagsVmMap == null) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.TAGS_SPECIFY_TAG_IS_NOT_EXISTS); return false; } return true; }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue(); if ((res != null) && (res.getSucceeded())) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TestProviderConnectivity, new org.ovirt.engine.core.common.action.ProviderParameters(provider), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue(); <START_MOD>setTestResultValueFromCommandReturnValue<END_MOD>(res); stopProgress(); } }, null, false); } else { <START_MOD>setTestResultValueFromCommandReturnValue<END_MOD>(res); stopProgress(); } }
@java.lang.Override public void process() throws java.io.IOException, org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { final java.lang.Runnable op = pendingOperations(); if (op != null) { key.interestOps(0); this.executorService.execute(new java.lang.Runnable() { @java.lang.Override public void run() { try { op.run(); updateInterestedOps(); selector.wakeup(); } catch (org.ovirt.vdsm.jsonrpc.client.ClientConnectionException e) { org.ovirt.vdsm.jsonrpc.client.reactors.<START_MOD>tcp.<END_MOD>SSLClient.log.error( to process messages e); } } }); } if (((nioEngine) != null) && (nioEngine.handshakeInProgress())) { return; } super.process(); }
@org.junit.Test public void testClone() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUriInfo(setUpBasicUriExpectations()); setUpGetPayloadExpectations(1, 2); setUpGetBallooningExpectations(1, 2); setUpGetConsoleExpectations(new int[]{ 1, 2 }); setUpGetVmOvfExpectations(new int[]{ 2 }); setUpGetVirtioScsiExpectations(new int[]{ 2 }); <START_MOD>setUpGetSoundcardExpectations(new int[]{ 2 }); <END_MOD>setUpGetRngDeviceExpectations(new int[]{ 2 }); setUpGetCertuficateExpectations(1, 2); setUpEntityQueryExpectations(VdcQueryType.GetVmTemplate, org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[1] }, getTemplateEntity(0)); setUpEntityQueryExpectations(VdcQueryType.GetVdsGroupByVdsGroupId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[2] }, getVdsGroupEntity()); setUpCreationExpectations(VdcActionType.AddVmFromTemplate, org.ovirt.engine.core.common.action.AddVmFromTemplateParameters.class, new java.lang.String[]{ "StorageDomainId" }, new java.lang.Object[]{ GUIDS[0] }, true, true, GUIDS[2], VdcQueryType.GetVmByVmId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[2] }, getEntity(2)); javax.ws.rs.core.Response response = collection.add(createModel(new org.ovirt.engine.api.model.Disks() { { setClone(true); } })); assertEquals(201, response.getStatus()); assertTrue(((response.getEntity()) instanceof org.ovirt.engine.api.model.VM)); verifyModel(((org.ovirt.engine.api.model.VM) (response.getEntity())), 2); }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.FreezeVmCommand.getVm(); if (vm == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.FreezeVmCommand.canRunActionOnNonManagedVm())) { return false; } if ((org.ovirt.engine.core.bll.FreezeVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { return org.ovirt.engine.core.bll.FreezeVmCommand.failVmStatusIllegal(); } return true; }
private void doTestIncludes(java.lang.String <START_MOD>spec<END_MOD>, java.lang.String[] rels, boolean[] expected) throws java.lang.Exception { javax.ws.rs.core.HttpHeaders httpheaders = createMock(javax.ws.rs.core.HttpHeaders.class); java.util.List<java.lang.String> requestHeaders = new java.util.ArrayList<java.lang.String>(); expect(httpheaders.getRequestHeader("Accept")).andReturn(requestHeaders).anyTimes(); requestHeaders.add(((org.ovirt.engine.api.common.util.DetailHelperTest.ACCEPTABLE) + <START_MOD>spec)); replay(httpheaders); for (int i = 0; i < (rels.length); i++) { org.ovirt.engine.api.common.util.Details <END_MOD>details<START_MOD> = org.ovirt.engine.api.common.util.DetailsHelper.getDetails(httpheaders, null); assertEquals(expected[i], details.isIncluded<END_MOD>(rels[i])); } verify(httpheaders); }
public void remove() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeRolesTitle()); model.setHashName("remove_role"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().rolesMsg()); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD> role : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD>>Cast(getSelectedItems())) { list.add(role.getname()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnRemove", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
<START_MOD>private java.util.List<org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateWithPlugInfo> getVMTemplatesWithPlugInfo(org.ovirt.engine.core.compat.Guid imageId) { java.util.List<org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateWithPlugInfo> plugInfoList = getCallsHandler().executeReadList("GetVmTemplatesByImageId", org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateWithPlugInfoRowMapper.instance, getCustomMapSqlParameterSource().addValue("image_guid", imageId)); return plugInfoList; }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { return java.util.Collections.singletonList(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getVmId(), org.ovirt.engine.core.common.VdcObjectType.VM, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getActionType().getActionGroup())); }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo> getAll() { return null; }<END_MOD>
@java.lang.Override public void onSuccess(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.LoginUserParameters> operation, final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer( returned result from Login. setLoggedInUser(((org.ovirt.engine.core.common.users.VdcUser) (result.getActionReturnValue()))); result.setCanDoActionMessages(((java.util.ArrayList<java.lang.String>) (translateError(result)))); callback.getDel().onSuccess(callback.getModel(), result); if (((getLoginHandler()) != null) && (result.getSucceeded())) { getLoginHandler().onLoginSuccess(userName, password, domain); } }
@java.lang.Override protected void initSelectedType() { java.lang.Integer selectedNicType = getNic().getType(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType> nicTypes = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType>) (getNicType().getItems())); nicTypes = (nicTypes == null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType>() : nicTypes; if ((selectedNicType == null) || (!(nicTypes.contains(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(selectedNicType))))) { selectedNicType = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetDefaultNicType().getValue(); } getNicType().setSelectedItem(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(selectedNicType)); }
public java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmImagesFromDb(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allVmImages = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(vm.getDiskList(), <START_MOD>org.ovirt.engine.core.bll.storage.ovfstore.SNAPABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.storage.ovfstore.ACTIVE_DISKS_ONLY); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : filteredDisks) { allVmImages.addAll(getAllImageSnapshots(diskImage)); } for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : allVmImages) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskVmElementDao().get(new org.ovirt.engine.core.common.businessentities.VmDeviceId(disk.getId()<END_MOD>, <START_MOD>vm.getId())); disk.setDiskVmElements(java.util.Collections.singletonList(dve)); } return<END_MOD> allVmImages; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured, reportedDnsResolverConfiguration<START_MOD>, isInFenceFlow<END_MOD>); }
<START_MOD>private java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkLabel> getHostNicLabels(org.ovirt.engine.core.compat.Guid hostNicId) { return getBackendCollection(VdcQueryType.GetNetworkLabelsByHostNicId, new org.ovirt.engine.core.common.queries.IdQueryParameters(hostNicId)); }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Provider> getAllWithQuery(java.lang.String query) { return jdbcTemplate.query(query, org.ovirt.engine.core.dao.provider.ProviderDaoDbFacadeImpl.ProviderRowMapper.INSTANCE); }<END_MOD>
private void onSelectedHookSourceChanged() { org.ovirt.engine.ui.uicommonweb.models.EntityModel selectedItem = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (getHookSources().getSelectedItem())); if (selectedItem == null) { return; } <START_MOD>org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook selectedServer = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook) (selectedItem.getEntity())); getServerHooksList().setSelectedItem(selectedServer); if ((selectedServer.getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStatus.MISSING)) { getContentModel().getContent().setEntity(null); getContentModel().getStatus().setEntity(null); getContentModel().getMd5Checksum().setEntity(null); return; } getContentModel().getStatus().setEntity(selectedServer.getStatus()); getContentModel().getMd5Checksum().setEntity(selectedServer.getChecksum()); if ((selectedServer.getContentType()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterHookContentType.TEXT)) { <END_MOD>startProgress(null); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getGlusterHookContent(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.lang.String content = ((java.lang.String) (returnValue)); getContentModel().getContent().setEntity(content); stopProgress(); } }), getGlusterHookEntiry().getId(), selectedServer.getServerId()); <START_MOD>} }<END_MOD>
public static java.lang.String getDisplayStringForPluginName(java.lang.String pluginName) { try { return <START_MOD>new <END_MOD>org.ovirt.engine.ui.uicompat.EnumTranslator<START_MOD>()<END_MOD>.<START_MOD>get<END_MOD>(org.ovirt.engine.core.common.businessentities.OpenstackNetworkPluginType.valueOf(pluginName)); } catch (java.lang.Exception e) { return pluginName == null ? "" : pluginName; } }
<START_MOD>private java.lang.String fixLocalhostURL(java.lang.String url) { java.util.regex.Matcher m = org.ovirt.engine.core.utils.servlet.RedirectServlet.urlPattern.matcher(url); if (m.matches()) { java.lang.String host = m.group("host"); if (host != null) { if (((host.equals("localhost")) || (host.startsWith("127."))) || (host.equals("::1"))) { url = java.lang.String.format("%s%s%s", ((m.group("prefix")) != null ? m.group("prefix") : ""), org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getHost(), ((m.group("suffix")) != null ? m.group("suffix") : "")); } } } return url; }<END_MOD>
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()) != null) { vmPoolDao.removeVmFromVmPool(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmId()); if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isUpdatePrestartedVms()) { vmPoolDao.boundVmPoolPrestartedVms(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()); } <START_MOD>if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isRemovePoolUponDetachAllVMs()) { removeVmPool(); } <END_MOD>org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); } }
@java.lang.Override public void execute(int iterationId) { try { org.ovirt.engine.core.<START_MOD>bll.Backend<END_MOD>.getInstance().<START_MOD>getResourceManager().RunVdsCommand(VDSCommandType.ConnectStoragePool, new org.ovirt.engine.core.common.vdscommands.ConnectStoragePoolVDSCommandParameters(getVdss().get(iterationId), <END_MOD>getStoragePool()<START_MOD>, true<END_MOD>)); org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(getStorageDomain().getStorageType()).disconnectStorageFromDomainByVdsId(getStorageDomain(), getVdss().get(iterationId).getId()); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.storage.RefreshStoragePoolAndDisconnectAsyncOperation.log.errorFormat( to connect/refresh storagePool. Host {0} to storage pool {1}. Exception: {3} getVdss().get(iterationId).getName(), getStoragePool().getName(), e); } }
<START_MOD>public boolean getGlusterCliBasedScheduling() { return this.glusterCliBasedScheduling; }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Gluster volume snapshot set config failed") java.lang.String GlusterVolumeSnapshotSetConfigFailedException();<END_MOD>
protected boolean checkIfImageDiskCanBeAdded(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator) { if (Guid.Empty.equals(getStorageDomainId())) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_SPECIFIED); } boolean returnValue; org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = createStorageDomainValidator(); returnValue = (((((((((org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().isSkipDomainCheck()) || (validate(storageDomainValidator.isDomainExistAndActive()))) && (!(isShareableDiskOnGlusterDomain()))) && (checkImageConfiguration())) && (validate(storageDomainValidator.hasSpaceForNewDisk(getDiskImageInfo())))) && (validate(storageDomainValidator.isDomainWithinThresholds()))) && (checkExceedingMaxBlockDiskSize())) && (canAddShareableDisk())) && (validate(diskValidator.isVirtIoScsiValid(vm)))) && (validate(diskValidator.isDiskInterfaceSupported(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getVm()))); if (returnValue && (vm != null)) { org.ovirt.engine.core.common.businessentities.StoragePool sp = org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getStoragePool(); returnValue = (((validate(new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator(sp).isUp())) && (isStoragePoolMatching(vm))) && (org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.isVmNotLocked())) && (org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.isVmNotInPreviewSnapshot()); } return returnValue; }
@java.lang.Override protected void executeQueryCommand() { if ((org.ovirt.engine.core.bll.<START_MOD>storage.domains.<END_MOD>GetStorageDomainDefaultWipeAfterDeleteQuery.getParameters().getStorageType()) != null) { org.ovirt.engine.core.bll<START_MOD>.storage.domains<END_MOD>.GetStorageDomainDefaultWipeAfterDeleteQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.utils.WipeAfterDeleteUtils.getDefaultWipeAfterDeleteFlag(org.ovirt.engine.core.bll.<START_MOD>storage.domains.<END_MOD>GetStorageDomainDefaultWipeAfterDeleteQuery.getParameters().getStorageType())); } }
protected boolean validateNotificationMethod(org.ovirt.engine.core.common.EventNotificationMethod eventNotificationMethod, org.ovirt.engine.core.common.businessentities.EventSubscriber eventSubscriber, org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { boolean retValue = true; org.ovirt.engine.core.common.EventNotificationMethod notificationMethod = eventNotificationMethod; switch (notificationMethod) { case SMTP : java.lang.String mailAddress = (org.apache.commons.lang.StringUtils.isEmpty(eventSubscriber.getMethodAddress())) ? user.getEmail() : eventSubscriber.getMethodAddress(); if (!(org.ovirt.engine.core.bll.EventSubscriptionCommandBase.isEmailValid(mailAddress))) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.USER_DOES_NOT_HAVE_A_VALID_EMAIL); retValue = false; } break; default : <START_MOD>addValidateMessage<END_MOD>(EngineMessage.EN_UNKNOWN_NOTIFICATION_METHOD); retValue = false; break; } return retValue; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Provider(s) java.lang.String removeProviderTitle();
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>GetStorageDomainByNameQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.storage<START_MOD>.domains<END_MOD>.GetStorageDomainByNameQuery.getDbFacade().getStorageDomainStaticDao().getByName(org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>GetStorageDomainByNameQuery.getParameters().getName(), org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>GetStorageDomainByNameQuery.getUserID(), org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>GetStorageDomainByNameQuery.getParameters().isFiltered())); }
@org.junit.Test public void checkRemoveIscsiConnectionDomainsExist() { parameters.setStorageServerConnection(iSCSIConnection); when(storageServerConnectionDao.get(iSCSIConnection.getid())).thenReturn(iSCSIConnection); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs>(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id("3600144f09dbd05000000517e730b1212"); lun1.setStorageDomainName("storagedomain1"); lun1.setvolume_group_id("G95OWd-Wvck-vftu-pMq9-9SAC-NF3E-ulDPsQ"); luns.add(lun1); when(lunDao.getAllForStorageServerConnection(iSCSIConnection.getid())).thenReturn(luns); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS); }
<START_MOD>@java.lang.Override public void onSuccess(java.lang.Object thisModel, java.lang.Object returnValue) { if (((java.lang.Boolean) (returnValue))) { org.ovirt.engine.ui.uicommonweb.models.vms.EditNextRunConfigurationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.vms.EditNextRunConfigurationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editNextRunConfigurationTitle()); confirmModel.setHelpTag(HelpTag.edit_next_run_configuration); confirmModel.setHashName("edit_next_run_configuration"); confirmModel.setCpuChanged(((selectedItem.getCpuPerSocket()) != (getcurrentVm().getCpuPerSocket()))); confirmModel.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("updateExistingVm", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true)); confirmModel.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()).setIsCancel(true)); } else { updateExistingVm(false); } }<END_MOD>
@java.lang.Override public java.lang.Void runInTransaction() { addInterfaceToDb(<START_MOD>anInterface<END_MOD>); addInterfaceDeviceToDb(); getCompensationContext().stateChanged(); return null; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Permissions containing these operations should be associated with Disk or Storage Domain Object (or above) java.lang.String notePermissionsContainingOperationsRoleTreeTooltip();
@org.junit.Test public void testAddingIDELunExceedsSlotLimit() { org.ovirt.engine.core.common.businessentities.LunDisk disk = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createISCSILunDisk(); disk.setDiskInterface(DiskInterface.IDE); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createParameters(); parameters.setDiskInfo(disk); initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid(), parameters); when(diskLunMapDAO.getDiskIdByLunId(disk.getLun().getLUN_id())).thenReturn(null); org.ovirt.engine.core.common.businessentities.VM vm = mockVm(); <START_MOD>mockMaxPciSlots(); <END_MOD>fillDiskMap(disk, vm, ((VmCommand.MAX_IDE_SLOTS) - 1)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); vm.getDiskMap().put(org.ovirt.engine.core.compat.Guid.newGuid(), disk); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_EXCEEDED_MAX_IDE_SLOTS); }
@org.junit.Test public void gatewayChanged() { org.ovirt.engine.core.common.businessentities.network.Network net = createNetwork("net"); mockExistingNetworks(net); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNicSyncedWithNetwork("nic0", net); nic.setBootProtocol(NetworkBootProtocol.STATIC_IP); nic.setGateway(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); mockExistingIfaces(nic); nic.setGateway(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); org.ovirt.engine.core.<START_MOD>common.businessentities.VDS vds = mock(org.ovirt.engine.core.common.businessentities.VDS.class); when(vds.getId()).thenReturn(Guid.Empty); when(vds.getVdsGroupCompatibilityVersion()).thenReturn(Version.v3_3); org.ovirt.engine.core.<END_MOD>bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(nic)<START_MOD>, vds<END_MOD>); validateAndAssertNetworkModified(helper, net); }
@java.lang.Override public void onSuccess(<START_MOD>final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase> operation, <END_MOD>final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer( sucessfully executed RunAction, determining result! <START_MOD>handleActionResult(actionType, parameters, result, (callback != null ? callback : <END_MOD>org.ovirt.engine.ui.frontend.Frontend.<START_MOD>NULLABLE_ASYNC_CALLBACK)<END_MOD>, state, showErrorDialog); }
<START_MOD>private org.ovirt.engine.core.bll.ValidationResult notDefaultNetwork(org.ovirt.engine.core.common.businessentities.Network oldNetwork) { java.lang.String defaultNetwork = org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.ManagementNetwork); return (oldNetwork.getname().equals(defaultNetwork)) && (!(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetworkName().equals(defaultNetwork))) ? new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.NETWORK_CAN_NOT_REMOVE_DEFAULT_NETWORK) : org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable { if ((executedRunnables.contains(toReturn)) || ((executedRunnables.size()) < countToExecuteOnFirstRun)) { threadPool.execute(toReturn); executedRunnables.add(toReturn); } else { executedRunnables.add(toReturn); throw new java.util.concurrent.RejectedExecutionException(); } return null; }<END_MOD>
<START_MOD>private static void addConsoleDevice(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.NewGuid(), vmId), VmDeviceGeneralType.CONSOLE, VmDeviceType.CONSOLE, new java.util.HashMap<java.lang.String, java.lang.Object>(), true, false, null); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Host(s) java.lang.String removeHostsTitle();
<START_MOD>private static org.ovirt.engine.api.model.IpAddressAssignment mapIpv6AddressAssignment(org.ovirt.engine.core.common.businessentities.network.IpV6Address ipV6Address) { org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment = new org.ovirt.engine.api.model.IpAddressAssignment(); org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); ip.setVersion(IpVersion.V6.value()); if ((ipV6Address.getAddress()) != null) { ip.setAddress(ipV6Address.getAddress()); } if ((ipV6Address.getGateway()) != null) { ip.setGateway(ipV6Address.getGateway()); } if ((ipV6Address.getPrefix()) != null) { ip.setNetmask(ipV6Address.getPrefix().toString()); } ipAddressAssignment.setIp(ip); org.ovirt.engine.api.model.BootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(ipV6Address.getBootProtocol(), null); ipAddressAssignment.setAssignmentMethod((assignmentMethod == null ? null : assignmentMethod.value())); return ipAddressAssignment; }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__VM); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__HIBERNATE); }
public boolean validate() { leftBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.<START_MOD>AnyMacAddressValidation<END_MOD>() }); rightBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.<START_MOD>AnyMacAddressValidation<END_MOD>() }); if ((leftBound.getIsValid()) && (rightBound.getIsValid())) { rightBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.MacRangeValidation(leftBound.getEntity()) }); } setIsValid(((leftBound.getIsValid()) && (rightBound.getIsValid()))); return getIsValid(); }
@java.lang.Override protected org.ovirt.engine.api.model.Disk deprecatedPopulate(org.ovirt.engine.api.model.Disk model, org.ovirt.engine.core.common.businessentities.Disk entity) { <START_MOD>org.ovirt.engine.api.common.util.Details details = org.ovirt.engine.api.common.util.DetailsHelper.getDetails(httpHeaders, uriInfo); if (details.isIncluded("statistics")) {<END_MOD> addStatistics(model, entity); }<START_MOD> return model; }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( to delete Disk java.lang.String allowToDeleteDiskRoleTreeTooltip();
private void updateImportedVmDevice(org.ovirt.engine.core.common.businessentities.VmBase vmBase, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.compat.Guid deviceId, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate) { org.ovirt.engine.core.common.businessentities.VmDevice exportedDevice = vmBase.getManagedDeviceMap().get(deviceId); if (exportedDevice != null) { vmDevice.setAddress(exportedDevice.getAddress()); vmDevice.setIsPlugged(exportedDevice.getIsPlugged()); vmDevice.setIsReadOnly(exportedDevice.getIsReadOnly()); vmDevicesToUpdate.add(vmDevice); } }
public static boolean isCpuSupported(int osId, org.ovirt.engine.core.compat.Version version, java.lang.String cpuName, java.util.ArrayList<java.lang.String> canDoActionMessages) { if (org.ovirt.engine.core.bll.VmHandler.osRepository.isCpuSupported(osId, version, org.ovirt.engine.core.bll.CpuFlagsManagerHandler.getCpuId(cpuName, version))) { return true; } java.lang.String unsupportedCpus = org.ovirt.engine.core.bll.VmHandler.osRepository.getUnsupportedCpus(osId, version).toString(); canDoActionMessages.add(<START_MOD>EngineMessages<END_MOD>.CPU_TYPE_UNSUPPORTED_FOR_THE_GUEST_OS.name()); canDoActionMessages.add((   + (org.apache.commons.lang.StringUtils.strip(unsupportedCpus.toString(), "[]")))); return false; }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Mac pool does not exist.") java.lang.String MAC_POOL_DOES_NOT_EXIST();<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Messages<END_MOD>.DefaultMessage( Network will be added to the Data Center {0} as well. java.lang.String theNetworkWillBeAddedToTheDataCenterAsWell(java.lang.String dcName);
public void addMenuItem(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { final com.google.gwt.user.client.ui.MenuItem menuItem = new com.google.gwt.user.client.ui.MenuItem(buttonDef.getText(), <START_MOD>((<END_MOD>com.google.gwt.user.client.Command<START_MOD>) (<END_MOD>() <START_MOD>-><END_MOD> { menuPanelPopup.asPopupPanel().hide(); buttonDef.onClick(null); }<START_MOD>))<END_MOD>); menuItem.setEnabled(buttonDef.isEnabled(null)); buttonDef.addInitializeHandler(( event) <START_MOD>-><END_MOD> menuItem.setEnabled(buttonDef.isEnabled(null))); menuPanelPopup.getMenuBar().addItem(menuItem); }
<START_MOD>@java.lang.Override protected void verify(org.ovirt.engine.api.model.Application model, org.ovirt.engine.api.model.Application transform) { assertNotNull(transform); assertNotNull(transform.getId()); assertNotNull(transform.getAppName()); assertEquals(model.getAppName(), transform.getAppName()); }<END_MOD>
<START_MOD>public void subscribe(org.ovirt.vdsm.jsonrpc.client.events.EventSubscriber subscriber) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.getWorker().getPublisher().subscribe(subscriber); }<END_MOD>
<START_MOD>@java.lang.Override protected void endSuccessfully() { super.endSuccessfully(); }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__RESTART); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__VM); }
<START_MOD>private void addAuditLogOnRemoveFailue() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("DiskAlias", org.ovirt.engine.core.bll.MoveImageGroupCommand.getDiskImage().getDiskAlias()); logable.addCustomValue("StorageDomainName", org.ovirt.engine.core.bll.MoveImageGroupCommand.getStorageDomain().getStorageName()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.MOVE_IMAGE_GROUP_FAILED_TO_DELETE_SRC_IMAGE); }<END_MOD>
<START_MOD>private org.ovirt.engine.core.bll.job.ExecutionContext createRunVmContext(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.bll.job.ExecutionContext ctx = new org.ovirt.engine.core.bll.job.ExecutionContext(); try { java.util.Map<java.lang.String, java.lang.String> values = getVmValuesForMsgResolving(); org.ovirt.engine.core.common.job.Step step = org.ovirt.engine.core.bll.job.ExecutionHandler.addSubStep(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getExecutionContext(), org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getExecutionContext().getJob().getStep(StepEnum.EXECUTING), StepEnum.TAKING_VM_FROM_POOL, org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveStepMessage(StepEnum.TAKING_VM_FROM_POOL, values)); ctx.setStep(step); ctx.setMonitored(true); ctx.setShouldEndJob(true); } catch (java.lang.RuntimeException e) { log.errorFormat("Error when creating executing context for running stateless VM. Error is: {0} ", e.getMessage()); log.debug("", e); } return ctx; }<END_MOD>
<START_MOD>private void setupMock() { expected = getExpectedHooksList(); emptyList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity>(); doReturn(org.ovirt.engine.core.bll.gluster.GetGlusterHooksQueryTest.CLUSTER_ID).when(getQueryParameters()).getClusterId(); glusterHookDaoMock = mock(org.ovirt.engine.core.dao.gluster.GlusterHookDao.class); doReturn(glusterHookDaoMock).when(getQuery()).getGlusterHookDao(); doReturn(org.ovirt.engine.core.bll.gluster.GetGlusterHooksQueryTest.UPSERVER_ID).when(getQuery()).getUpServerId(org.ovirt.engine.core.bll.gluster.GetGlusterHooksQueryTest.CLUSTER_ID); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); returnValue.setSucceeded(true); returnValue.setReturnValue(expected); doReturn(returnValue).when(getQuery()).runVdsCommand(eq(VDSCommandType.GetGlusterHooks), any(org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class)); }<END_MOD>
<START_MOD>org.ovirt.engine.core.common.businessentities.VmOsType getOs();<END_MOD>
<START_MOD>private void setFallbackProtocol(org.ovirt.engine.core.common.businessentities.VdsProtocol protocol) { final org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = this.vds.getStaticData(); vdsStatic.setProtocol(protocol); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsStaticDao().update(vdsStatic); return null; } }); }<END_MOD>
@org.junit.Test public void addPosixNonEmptyVFSType() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, <START_MOD>"cifs"<END_MOD>, "timeo=30"); parameters.setStorageServerConnection(newPosixConnection); parameters.setVdsId(Guid.Empty); doReturn(false).when(command).isConnWithSameDetailsExists(newPosixConnection, null); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); }
private static void switchTab(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.<START_MOD>gwtbootstrap3.client.ui.TabListItem<END_MOD>> mapping, org.ovirt.engine.ui.common.view.TabbedView view) { int lowestIndex = java.lang.Integer.MAX_VALUE; java.util.List<org.<START_MOD>gwtbootstrap3.client.ui.TabListItem<END_MOD>> allTabs = view.getTabPanel().getTabs(); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if ((allTabs.indexOf(mapping.get(invalidTabName))) < lowestIndex) { lowestIndex = allTabs.indexOf(mapping.get(invalidTabName)); } } if (lowestIndex != (java.lang.Integer.MAX_VALUE)) { view.getTabPanel().switchTab(allTabs.get(lowestIndex)); } }
<START_MOD>public void commit(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface dstIface) { for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : srcIfaces) { iface.getLabels().clear(); } flush(); dstIface.setLabels(flushedLabels); }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__STOP_PROFILE); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__GLUSTER_VOLUME); }
<START_MOD>public java.util.Map<java.lang.String, java.lang.Object> glusterGetDeviceInfo();<END_MOD>
private boolean removeVm() { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.RemoveVmCommand.getVm(); hasImages = (vm.getDiskList().size()) > 0; if ((org.ovirt.engine.core.bll.RemoveVmCommand.getParameters().isRemoveDisks()) && (hasImages)) { if (!(removeVmImages(null))) { <START_MOD>prepareAuditLogMessageForDisksLeftInVm(); } }<END_MOD> org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { removeVmFromDb(); return null; } }); return true; }
<START_MOD>protected boolean isValidExportDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain domain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().getForStoragePool(org.ovirt.engine.core.bll.storage.GetAllFromExportDomainQuery.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.GetAllFromExportDomainQuery.getParameters().getStoragePoolId()); return (domain != null) && ((domain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport)); }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__REMOVE); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__DISK__SNAPSHOT); }
<START_MOD>private int calculateSiblingWidth() { int width = 0; com.google.gwt.user.client.ui.Widget parent = actionPanel.getParent(); if ((parent != null) && (parent instanceof com.google.gwt.user.client.ui.HasWidgets)) { java.util.Iterator<com.google.gwt.user.client.ui.Widget> widgetIterator = ((com.google.gwt.user.client.ui.HasWidgets) (parent)).iterator(); while (widgetIterator.hasNext()) { com.google.gwt.user.client.ui.Widget widget = widgetIterator.next(); if (widget != (actionPanel)) { width += widget.getOffsetWidth(); } } } return width; }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult notChangingDataCenterId(org.ovirt.engine.core.compat.Guid dataCenterId) { final org.ovirt.engine.core.compat.Guid oldDataCenterId = network.getDataCenterId(); return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DATA_CENTER_ID_CANNOT_BE_CHANGED).when((!(oldDataCenterId.equals(dataCenterId)))); }
<START_MOD>private double calcTimeoutToFence(java.lang.Integer vmCount, org.ovirt.engine.core.common.businessentities.VdsSpmStatus spmStatus) { java.lang.Integer spmIndicator = 0; if (spmStatus == (org.ovirt.engine.core.common.businessentities.VdsSpmStatus.SPM)) { spmIndicator = 1; } return java.util.concurrent.TimeUnit.SECONDS.toMillis((((org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.TimeoutToResetVdsInSeconds)) + ((org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.DelayResetPerStatusInSeconds)) * spmIndicator)) + ((org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.DelayResetPerVmInSeconds)) * vmCount))); }<END_MOD>
private void updateInstanceImages() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmDiskList(new org.ovirt.engine.ui.frontend.AsyncQuery(getModel(), new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel> imageLineModels = new java.util.ArrayList<>(); <START_MOD>boolean isChangeable = ((vm) == null) || (org.ovirt.engine.core.common.validation.VmActionValidator.isCommandAllowed(vm.getOrigin(), VdcActionType.UpdateVmDisk)); <END_MOD>for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue))) { org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel lineModel = new org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel(getModel().getInstanceImages()); lineModel.initialize(disk, getVm()); <START_MOD>lineModel.setEnabled(isChangeable); <END_MOD>imageLineModels.add(lineModel); } getModel().getInstanceImages().<START_MOD>setIsChangeable(isChangeable); getModel().getInstanceImages().<END_MOD>setItems(imageLineModels); getModel().getInstanceImages().setVm(getVm()); } }), getVm().getId()); }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if ((org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm()) == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN); } if ((!(org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm().isUseLatestVersion())) && ((org.ovirt.engine.core.bll.UpdateVmVersionCommand.getParameters().getNewTemplateVersion()) == null)) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_SET_FOR_LATEST); } if ((org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVmTemplate()) == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST); } if (org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVmTemplateId().equals(org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm().getVmtGuid())) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_VM_ALREADY_IN_LATEST_VERSION); } org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm().setVmtGuid(org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVmTemplate().getId()); return true; }
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getView().getAboutLink().addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { com.gwtplatform.mvp.client.proxy.RevealRootPopupContentEvent.fire(org.ovirt.engine.ui.userportal.section.main.presenter.HeaderPresenterWidget.this, aboutPopup); } })); <START_MOD>registerHandler(getView().getOptionsLink().addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalBasicListModel model = basicListProvider.getModel(); model.executeCommand(model.getEditCommand()); } })); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( of bricks should be equal to Replica Count java.lang.String replicateVolumeAddBricksMsg();
<START_MOD>private boolean isTextNotEmpty(java.lang.String text) { return !("".equals(text)); }<END_MOD>
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createVdsInterface(org.ovirt.engine.core.compat.Guid id, java.lang.String name, java.lang.Boolean bonded, java.lang.String bondName, java.lang.Integer vlanId, java.lang.String networkName, boolean bridged, java.lang.String address<START_MOD>, boolean qosOverridden<END_MOD>) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); iface.setId(id); iface.setName(name); iface.setBonded(bonded); iface.setBondName(bondName); iface.setVlanId(vlanId); iface.setNetworkName(networkName); iface.setBridged(bridged); iface.setAddress(address); <START_MOD>iface.setQosOverridden(qosOverridden); <END_MOD>return iface; }
public org.ovirt.engine.core.bll.tasks.SPMAsyncTask concreteCreateTask(<START_MOD>org.ovirt.engine.core.compat.Guid userId, <END_MOD>org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters p = new org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters(asyncTaskCreationInfo, getAsyncTask(<START_MOD>userId, <END_MOD>taskId, command, asyncTaskCreationInfo, parentCommand)); p.setEntityInfo(command.getParameters().getEntityInfo()); return createTask(internalGetTaskType(command), p); }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if (((org.ovirt.engine.core.bll.network.host.RemoveFenceAgentsByVdsIdCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.network.host.RemoveFenceAgentsByVdsIdCommand.getParameters().getVdsId()) == null)) { return <START_MOD>failValidate<END_MOD>(EngineMessage.VDS_REMOVE_FENCE_AGENTS_VDS_ID_REQUIRED); } return super.<START_MOD>validate<END_MOD>(); }
<START_MOD>public boolean isUpdated() { return updated; }<END_MOD>
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command.equals(getAddBricksCommand())) { checkUpServerAndAddBricks(); } else if (command.getName().equals("OnAddBricks")) { onAddBricks(); } else if (command.getName().equals("OnAddBricksInternal")) { onAddBricksInternal(); } else if (command.getName().equals("CancelConfirmation")) { cancelConfirmation(); } else if (command.equals(getRemoveBricksCommand())) { removeBricks(); } else if (command.getName().equals("OnRemove")) { onRemoveBricks(); } else if (command.equals(getStopRemoveBricksCommand())) { stopRemoveBricks(); } else if (command.getName().equals("OnStopRemoveBricks")) { onStopRemoveBricks(); } else if (command.equals(getCommitRemoveBricksCommand())) { commitRemoveBricks(); } else if (command.getName().equals("OnCommitRemoveBricks")) { onCommitRemoveBricks(); } else if (command.equals(<START_MOD>getStatusRemoveBricksCommand())) { showRemoveBricksStatus(); } else if (command.equals(<END_MOD>getReplaceBrickCommand())) { replaceBrick(); } else if (command.getName().equals("OnReplace")) { onReplaceBrick(); } else if (command.equals(getBrickAdvancedDetailsCommand())) { showBrickAdvancedDetails(); } else if (command.getName().equals("Cancel")) { setWindow(null); } else if (command.getName().equals("CancelConfirmation")) { setConfirmWindow(null); } }
@java.lang.Override public void setUp() { super.setUp(); generateStorageToDisksMap(); initDestSDs(); <START_MOD>mcr.mockConfigValue(ConfigValues.MaxIoThreadsPerVm, 127); mcr.mockConfigValue(ConfigValues.MaxVmNameLength, 64); mcr.mockConfigValue(ConfigValues.SupportedClusterLevels, new java.util.HashSet(java.util.Arrays.asList(new org.ovirt.engine.core.compat.Version(2, 2), new org.ovirt.engine.core.compat.Version(3, 0)))); mcr.mockConfigValue(ConfigValues.ValidNumOfMonitors, java.util.Arrays.asList("1", "2", "4")); <END_MOD>}
@org.ovirt.engine.ui.frontend.DefaultStringValue( not ${action} ${type}. The given name contains special characters. Only lower-case and upper-case letters, numbers, '_', '-'<START_MOD>, '.'<END_MOD> allowed. java.lang.String ACTION_TYPE_FAILED_NAME_MAY_NOT_CONTAIN_SPECIAL_CHARS();
private void updateHaMaintenanceAvailability(java.util.List items) { if ((items == null) || ((items.size()) != 1)) { setHaMaintenanceAvailability(false); return; } org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem(); if (((vm == null) || (!(vm.isHostedEngine()))) || ((vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>().compareTo(Version.v3_4)) < 0)) { setHaMaintenanceAvailability(false); } else { setHaMaintenanceAvailability(true); } }
<START_MOD>public static boolean isContained(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Method method2) { if (method.getName().equals(method2.getName())) { return false; } if (((method.getBase()) == null) || ((method2.getBase()) == null)) { return false; } if (!(method.getBase().getName().equals(method2.getBase().getName()))) { return false; } return (org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.isParametersContained(method.getMandatoryParameters(), method2.getMandatoryParameters())) && (org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.isAttributesContained(method.getMandatoryAttributes(), method2.getMandatoryAttributes())); }<END_MOD>
<START_MOD>public java.util.List<org.ovirt.engine.core.compat.Guid> getSelectedHostIds() { java.util.List<org.ovirt.engine.core.compat.Guid> list = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyModel : getItems()) { java.lang.String selectedItem = keyModel.getKeys().getSelectedItem(); if (isKeyValid(selectedItem)) { list.add(allHostNamesMap.get(selectedItem).getId()); } } return list; }<END_MOD>
<START_MOD>public static void removeReactorsMap(java.lang.String vmId) { org.ovirt.vdsmfake.rpc.json.JsonRpcServer.clientsMap.remove(vmId); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( to manipulate Gluster Volumes java.lang.String allowToManipulateGlusterVolumesRoleTree();
<START_MOD>protected java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> createAddVmInterfaceParams(final org.ovirt.engine.core.compat.Guid vmId, final java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks> nicsWithLogicalNetworks) { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks nicWithNetworks : nicsWithLogicalNetworks) { parameters.add(new org.ovirt.engine.core.common.action.AddVmInterfaceParameters(vmId, nicWithNetworks.getNetworkInterface())); } return parameters; }<END_MOD>
<START_MOD>@org.junit.Test public void testGetFileFromStringNullPath() { java.io.File file = new java.io.File("/etc/hosts"); java.io.File testFile = org.ovirt.engine.core.utils.ServletUtils.getFileFromString(null, file); assertEquals("new file should be same as old file", file, testFile); }<END_MOD>
private void doInit(org.ovirt.engine.api.extensions.ExtMap input<START_MOD>, org.ovirt.engine.api.extensions.ExtMap output<END_MOD>) { <START_MOD>try { <END_MOD>javax.sql.DataSource ds = new org.ovirt.engine.extension.aaa.jdbc.core.datasource.DataSourceProvider(configuration).provide(); this.authentication = new org.ovirt.engine.extension.aaa.jdbc.core.Authentication(ds); this.tasks = new org.ovirt.engine.extension.aaa.jdbc.core.Tasks(ds, this.authentication); <START_MOD>org.ovirt.engine.extension.aaa.jdbc.binding.api.ExtensionUtils.checkDbVersion(ds.getConnection(), input.<org.ovirt.engine.api.extensions.ExtMap>get(Base.InvokeKeys.CONTEXT).<java.lang.String>get(Base.ContextKeys.CONFIGURATION_FILE)); output.put(Base.InvokeKeys.RESULT, Base.InvokeResult.SUCCESS); <END_MOD>}<START_MOD> catch (java.lang.Exception ex) { org.ovirt.engine.extension.aaa.jdbc.binding.api.AuthnExtension.LOG.debug("Exception", ex); output.put(Base.InvokeKeys.RESULT, Base.InvokeResult.FAILED); output.put(Base.InvokeKeys.MESSAGE, ex.getMessage()); } }<END_MOD>
<START_MOD>private void addQuotaToMemoryQuotaList(org.ovirt.engine.core.common.businessentities.QuotaPerUserUsageEntity quotaPerUserUsageEntity) { org.ovirt.engine.ui.userportal.widget.QuotaProgressBar memoryQuotaProgressBar = new org.ovirt.engine.ui.userportal.widget.QuotaProgressBar(); if (quotaPerUserUsageEntity.isUnlimitedMemory()) { memoryQuotaProgressBar.setUnlimited(true); } else { memoryQuotaProgressBar.setValueA(((int) (quotaPerUserUsageEntity.getOthersMemoryUsagePercentage()))); memoryQuotaProgressBar.setValueB(((int) (quotaPerUserUsageEntity.getUserMemoryUsagePercentage()))); java.lang.String freeMem = ((quotaPerUserUsageEntity.getFreeMemory()) > 4096) ? ((quotaPerUserUsageEntity.getFreeMemory()) / 1024) + "GB" : (quotaPerUserUsageEntity.getFreeMemory()) + "MB"; memoryQuotaProgressBar.setTitle(((org.ovirt.engine.ui.userportal.section.main.view.tab.extended.SideTabExtendedResourceView.constants.freeMemory()) + freeMem)); if ((quotaPerUserUsageEntity.getMemoryTotalUsage()) == 0) { memoryQuotaProgressBar.setZeroValue(); } } org.ovirt.engine.ui.userportal.section.main.view.tab.extended.VerticalPanel verticalPanel = new org.ovirt.engine.ui.userportal.section.main.view.tab.extended.VerticalPanel(); org.ovirt.engine.ui.userportal.section.main.view.tab.extended.Label quotaName = new org.ovirt.engine.ui.userportal.section.main.view.tab.extended.Label(); quotaName.setText(quotaPerUserUsageEntity.getQuotaName()); verticalPanel.add(quotaName); verticalPanel.add(memoryQuotaProgressBar); verticalPanel.setWidth("100%"); memoryQuotasList.add(verticalPanel); }<END_MOD>
@java.lang.Override protected void readOsSection(XmlNode section) { _vm.getStaticData().setId(new org.ovirt.engine.core.compat.Guid(section.attributes.get("ovf:id").getValue()))<START_MOD>; this.lastReadEntry = "Description"<END_MOD>; XmlNode node = section.SelectSingleNode("Description"); if (node != null) { int osId = osRepository.getOsIdByUniqueName(node.innerText); _vm.getStaticData().setOsId(osId); _vm.setClusterArch(osRepository.getArchitectureFromOS(osId)); } else { _vm.setClusterArch(ArchitectureType.undefined); } }
@java.lang.Override public void runFailedAutoStartVMs(java.util.List<org.ovirt.engine.core.compat.Guid> vmIds) { for (org.ovirt.engine.core.compat.Guid vmId : vmIds) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVmId(vmId); <START_MOD>auditLogDirector<END_MOD>.log(event, AuditLogType.HA_VM_FAILED); org.ovirt.engine.core.bll.VdsEventListener.log.infoFormat( Available VM went down. Attempting to restart. VM Name: {0}, VM Id: {1} event.getVmName(), vmId); } org.ovirt.engine.core.bll.AutoStartVmsRunner.getInstance().addVmsToRun(vmIds); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetworkDAO().update(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork()); for (org.ovirt.engine.core.common.businessentities.network.NetworkCluster clusterAttachment : getClusterAttachments()) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus(clusterAttachment.getClusterId(), org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork()); } org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.setSucceeded(true); }
static void verify(org.ovirt.engine.api.model.Statistic statistic, java.lang.String name) { assertEquals(java.util.UUID.nameUUIDFromBytes(name.getBytes()).toString(), statistic.getId()); assertEquals(name, statistic.getName()); assertEquals(StatisticUnit.BYTES, statistic.getUnit()); assertEquals(StatisticType.GAUGE, statistic.getType()); assertTrue(statistic.isSetValues()); assertEquals(ValueType.INTEGER, statistic.<START_MOD>getValueType<END_MOD>()); }
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult nicSriovEnabled() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_NIC_IS_NOT_SRIOV_ENABLED, getNicNameReplacement()).when(((getOldVfsConfig()) == null)); }<END_MOD>
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if ((org.ovirt.engine.core.bll.RemoveUserProfileCommand.getUserProfile()) == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_PROFILE_NOT_EXIST); } return true; }
<START_MOD>public static org.ovirt.engine.core.bll.context.CommandContext createInternalJobContext(org.ovirt.engine.core.bll.context.CommandContext commandContext, org.ovirt.engine.core.utils.lock.EngineLock lock) { return org.ovirt.engine.core.bll.job.ExecutionHandler.modifyContextForIntenrakJob(lock, commandContext.clone()); }<END_MOD>
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getJobMessageProperties() { if ((jobProperties) == null) { jobProperties = new java.util.HashMap<java.lang.String, java.lang.String>(); org.ovirt.engine.core.common.businessentities.VmPool vmPool = org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getParameters().getVmPool(); java.lang.String vmPoolName = (vmPool != null) ? vmPool.<START_MOD>getName<END_MOD>() : org.apache.commons.lang.StringUtils.EMPTY; jobProperties.put(VdcObjectType.VmPool.name().toLowerCase(), vmPoolName); org.ovirt.engine.core.compat.Guid vmTemplateId = org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getVmTemplateId(); java.lang.String templateName = org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getVmTemplateName(); if (org.apache.commons.lang.StringUtils.isEmpty(templateName)) { templateName = (vmTemplateId == null) ? org.apache.commons.lang.StringUtils.EMPTY : vmTemplateId.toString(); } jobProperties.put(VdcObjectType.VmTemplate.name().toLowerCase(), templateName); } return jobProperties; }
<START_MOD>@org.junit.Test public void shouldDetectDifferentMajorVersion() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("test", new org.ovirt.engine.core.compat.Version("6.3")).isSameMajorVersion(new org.ovirt.engine.core.bll.scheduling.OS("test", new org.ovirt.engine.core.compat.Version("7.3")))).isFalse(); }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("Host") java.lang.String geoRepSessionHostName();<END_MOD>
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler(( event) -> { org.ovirt.engine.ui.webadmin.section.main.presenter.modelProvider.setSelectedItems(getSelectedItems()); fireTableSelectionChangeEvent(); if (!(isVisible())) { handlePlaceTransition(); } })); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getEventBus().addHandler(org.ovirt.engine.ui.uicommonweb.models.ApplySearchStringEvent.getType(), ( event) -> { applySearchString(event.getSearchString()); })); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setDetailPlaceTransitionHandler(this); java.lang.String searchString = searchStringCollector.getSearchStringPrefix(modelProvider.getModel().getSearchString()); if (searchString != null) { applySearchString(searchString); } <START_MOD>if (hasSearchPanelPresenterWidget()) { setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel, searchPanelPresenterWidget); } if (hasActionPanelPresenterWidget()) { setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetActionPanel, actionPanelPresenterWidget); } }<END_MOD>
<START_MOD>@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, T value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { org.gwtbootstrap3.client.ui.Icon icon = new org.gwtbootstrap3.client.ui.Icon(); org.gwtbootstrap3.client.ui.base.helper.StyleHelper.addEnumStyleName(icon, iconType); if (org.ovirt.engine.ui.common.widget.table.cell.AbstractIconButtonCell.isEnabled(value)) { icon.getElement().getStyle().setProperty("color", enabledColor); icon.getElement().getStyle().setProperty("cursor", "pointer"); } else { icon.getElement().getStyle().setProperty("color", disabledColor); icon.getElement().getStyle().setProperty("cursor", "default"); } sb.append(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(icon.toString())); }<END_MOD>
private void plugToExternalNetwork() { java.util.Map<java.lang.String, java.lang.String> runtimeProperties = getProviderProxy().allocate(getNetwork(), vnicProfile, org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic()<START_MOD>, org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVds().getHostName()<END_MOD>); if (runtimeProperties != null) { org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm().getRuntimeDeviceCustomProperties().put(vmDevice.getId(), runtimeProperties); } }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.compat.Guid getId() { return this.id; }<END_MOD>
@java.lang.Override public void OnSuccess(java.lang.Object model1, java.lang.Object result1) { org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceListModel vmInterfaceListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceListModel) (model1)); org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel vmInterfaceModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel) (vmInterfaceListModel.getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> networks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>>(); for (org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> a : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>>) (result1))) { if ((a.getStatus()) == (org.ovirt.engine.core.common.businessentities.NetworkStatus.Operational)) { networks.add(a); } } if (vmInterfaceModel.getIsNew()) { vmInterfaceModel.getNetwork().setItems(networks); vmInterfaceModel.getNetwork().setSelectedItem(((networks.size()) >   ? networks.get(0) : null)); } else { org.ovirt.engine.core.common.businessentities.VmNetworkInterface nic = ((org.ovirt.engine.core.common.businessentities.VmNetworkInterface) (vmInterfaceListModel.getSelectedItem())); vmInterfaceModel.getNetwork().setItems(networks); vmInterfaceModel.getNetwork().setSelectedItem(null); for (org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> a : networks) { if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(a.getname(), nic.getNetworkName())) { vmInterfaceModel.getNetwork().setSelectedItem(a); break; } } } okCommand.setIsExecutionAllowed(true); }
@java.lang.Override protected boolean canDoAction() { boolean result = true; if (!(canDoSnapshot(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm()))) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList = getDisksList(); if ((disksList.size()) > 0) { org.ovirt.engine.core.bll.<START_MOD>storage.StoragePoolValidator spValidator = new org.ovirt.engine.core.bll.storage.StoragePoolValidator(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getStoragePool()); org.ovirt.engine.core.bll.<END_MOD>validator.VmValidator vmValidator = new org.ovirt.engine.core.bll.validator.VmValidator(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm()); org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotValidator = new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator(); result = ((((((<START_MOD>(validate(spValidator.isUp())) && (<END_MOD>validate(snapshotValidator.vmNotDuringSnapshot(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId())))<START_MOD>)<END_MOD> && (validate(snapshotValidator.vmNotInPreview(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId())))) && (validate(vmValidator.vmNotDuringMigration()))) && (validate(vmValidator.vmNotRunningStateless()))) && (validate(vmValidator.vmNotIlegal()))) && (org.ovirt.engine.core.bll.ImagesHandler.PerformImagesChecks(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getReturnValue().getCanDoActionMessages(), org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getStoragePoolId(), Guid.Empty, true, true, true, true, true, true, disksList))) && (validate(vmValidator.vmNotLocked())); } return result; }
private static boolean verifyByteArray(java.io.DataInputStream dataInputStream) throws java.io.IOException { int length = dataInputStream.readInt(); byte[] contents = new byte[length]; int numBytes = dataInputStream.read(contents, 0, length); if (numBytes != length) { return false; } return true; }
<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeSnapshotDelete(java.lang.String snapshotName);<END_MOD>
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.VdsStatistics stats) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cpu_idle", stats.getcpu_idle()).addValue("cpu_load", stats.getcpu_load()).addValue("cpu_sys", stats.getcpu_sys()).addValue("cpu_user", stats.getcpu_user()).addValue("usage_cpu_percent", stats.getusage_cpu_percent()).addValue("usage_mem_percent", stats.getusage_mem_percent()).addValue("usage_network_percent", stats.getusage_network_percent()).addValue("vds_id", stats.getId()).addValue("mem_available", stats.getmem_available()).addValue("mem_free", stats.getMemFree()).addValue("mem_shared", stats.getmem_shared()).addValue("swap_free", stats.getswap_free()).addValue("swap_total", stats.getswap_total()).addValue("ksm_cpu_percent", stats.getksm_cpu_percent()).addValue("ksm_pages", stats.getksm_pages()).addValue("ksm_state", stats.getksm_state()).addValue("ha_score", stats.getHighlyAvailableScore())<START_MOD>.addValue("anonymousHugePages", stats.getAnonymousHugePages())<END_MOD>; getCallsHandler().executeModification("InsertVdsStatistics", parameterSource); }
private void updateAuditLog(org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand command, org.ovirt.engine.core.common.AuditLogType auditLogType, java.lang.Long imageSizeInGigabytes) { command.addCustomValue("DiskAlias", getDisk(command).getDiskAlias()); command.addCustomValue("NewSize", java.lang.String.valueOf(imageSizeInGigabytes)); <START_MOD>org.ovirt.engine.core.di.Injector.get(<END_MOD>org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector<START_MOD>.class<END_MOD>).log(command, auditLogType); }
<START_MOD>@java.lang.Override public void update(org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy) { super.update(clusterPolicy); getCallsHandler().executeModification("DeleteClusterPolicyUnitsByClusterPolicyId", getCustomMapSqlParameterSource().addValue("id", clusterPolicy.getId())); for (org.ovirt.engine.core.dao.scheduling.ClusterPolicyDaoImpl.ClusterPolicyUnit clusterPolicyUnit : getclusterPolicyUnit(clusterPolicy)) { saveClusterPolicyUnit(clusterPolicyUnit); } }<END_MOD>
@java.lang.Override protected void afterReadResponse(java.net.HttpURLConnection connection, byte[] response) throws java.lang.Exception { if (((connection.getResponseCode()) != (java.net.HttpURLConnection.HTTP_OK)) && ((connection.getResponseCode()) != (java.net.HttpURLConnection.HTTP_MOVED_TEMP))) { org.ovirt.engine.core.bll.host.provider.foreman.ForemanErrorWrapper ferr = objectMapper.readValue(response, org.ovirt.engine.core.bll.host.provider.foreman.ForemanErrorWrapper.class); java.lang.String err = org.apache.commons.lang.StringUtils.join(ferr.getForemanError().getFull_messages(),     throw new org.ovirt.engine.core.common.errors.<START_MOD>EngineException<END_MOD>(org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD>.PROVIDER_FAILURE, err); } }
private void commitLabelChanges(org.ovirt.engine.ui.uicommonweb.models.hosts.NicLabelModel labelModel, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> potentialNetworks) { labelModel.commit(iface); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel ifaceModel = nicMap.get(iface.getName()); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.clearNetworks(ifaceModel, allNics<START_MOD>, allNetworkAttachments, hostSetupNetworksParameters<END_MOD>); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.attachNetworks(ifaceModel, new java.util.ArrayList(potentialNetworks), allNics<START_MOD>, allNetworkAttachments, hostSetupNetworksParameters<END_MOD>); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { java.lang.String propName = args.propertyName; if ("IsChangable".equals(propName)) { cloudInitPasswordSetEditor.setTitle((model.getCloudInitPasswordSet().getIsChangable() ? org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmInitWidget.constants.vmInitPasswordSetToolTip() : org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmInitWidget.constants.vmInitPasswordNotSetToolTip())); } }
public final java.lang.String consoleClientResourcesUrl() { <START_MOD>java.lang.String url =<END_MOD> getString(org.ovirt.engine.ui.common.utils.DynamicMessages.DynamicMessageKey.CONSOLE_CLIENT_RESOURCES_URL); <START_MOD>boolean isAbsolute = url.contains("://"); return isAbsolute ? url : (((((Window.Location.getProtocol()) + "//") + (Window.Location.getHost())) + "/") + (org.ovirt.engine.ui.frontend.utils.BaseContextPathData.getInstance().getRelativePath())) + url; <END_MOD>}
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if ((ev.matchesDefinition(ListModel.SelectedItemChangedEventDefinition)) && (sender == (getDataCenter()))) { DataCenter_SelectedItemChanged(); } else if ((ev.matchesDefinition(ListModel.SelectedItemChangedEventDefinition)) && (sender == (getCluster()))) { Cluster_SelectedItemChanged(); } else if (<START_MOD>(ev.matchesDefinition(ListModel.SelectedItemChangedEventDefinition)) && (sender == (getHostName()))) { HostName_SelectedItemChanged(); } else if (<END_MOD>sender == (getConsoleAddressEnabled())) { consoleAddressChanged(); } }
@java.lang.Override protected void executeVmCommand() { if (diskShouldBeUnPlugged()) { performPlugCommand(VDSCommandType.HotUnPlugDisk, disk, vmDevice); } org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVmDeviceDao().remove(vmDevice.getId()); if ((!(disk.isDiskSnapshot())) && ((org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE) == (disk.getDiskStorageType()))) { <START_MOD>UpdateMetaDataDescription(); <END_MOD>org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getImageDao().updateImageVmSnapshotId(((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)).getImageId(), null); } org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateBootOrderInVmDeviceAndStoreToDB(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm().getStaticData()); org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVmStaticDAO().incrementDbGeneration(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm().getId()); org.ovirt.engine.core.bll.DetachDiskFromVmCommand.setSucceeded(true); }
<START_MOD>public static java.util.List<org.ovirt.engine.core.compat.Guid> getAttachedDataCenters(org.ovirt.engine.api.restapi.resource.BackendResource resource, org.ovirt.engine.core.compat.Guid id) { java.util.List<org.ovirt.engine.core.compat.Guid> ids = new java.util.ArrayList<>(1); org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = resource.runQuery(VdcQueryType.GetStorageDomainListById, new org.ovirt.engine.core.common.queries.IdQueryParameters(id)); if ((result != null) && (result.getSucceeded())) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = result.getReturnValue(); if (storageDomains != null) { for (org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain : storageDomains) { ids.add(storageDomain.getStoragePoolId()); } } } return ids; }<END_MOD>
<START_MOD>@java.lang.Override protected void finished(org.junit.runner.Description description) { super.finished(description); reset(mockedInjector); }<END_MOD>
private void createConcreteSSLSocketFactory() throws org.ovirt.engine.core.notifier.NotificationServiceException { <START_MOD>org.ovirt.engine.core.utils.LocalConfig config = org.ovirt.engine.core.utils.LocalConfig.getInstance(); <END_MOD>java.lang.String keystorePass = <START_MOD>config.getPKIEngineStorePassword(<END_MOD>); java.lang.String keystoreUrl = <START_MOD>config.getPKIEngineStore().getAbsolutePath(<END_MOD>); try { java.lang.String sslProtocol = prop.get(NotificationProperties.SSL_PROTOCOL); if (org.apache.commons.lang.StringUtils.isEmpty(sslProtocol)) { sslProtocol = org.ovirt.engine.core.notifier.EngineMonitorService.DEFAULT_SSL_PROTOCOL; } java.security.KeyStore keyStore = org.ovirt.engine.core.utils.crypt.EncryptionUtils.getKeyStore(keystoreUrl, keystorePass, org.ovirt.engine.core.notifier.EngineMonitorService.CERTIFICATION_TYPE); javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()); tmf.init(keyStore); javax.net.ssl.SSLContext ctx = javax.net.ssl.SSLContext.getInstance(sslProtocol); ctx.init(null, tmf.getTrustManagers(), null); sslFactory = ctx.getSocketFactory(); } catch (java.lang.Exception e) { throw new org.ovirt.engine.core.notifier.NotificationServiceException( to create SSL factory when running with SSL mode. e); } }
private void logProxySelection(java.lang.String proxy, java.lang.String origin, java.lang.String command) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("Proxy", proxy); logable.addCustomValue("Origin", origin); logable.addCustomValue("Command", command); logable.setVdsId(_vds.getId()); <START_MOD>new <END_MOD>org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector<START_MOD>()<END_MOD>.log(logable, AuditLogType.PROXY_HOST_SELECTION); org.ovirt.engine.core.bll.FenceExecutor.log.infoFormat( Host {0} from {1} as proxy to execute {2} command on Host {3} proxy, origin, command, _vds.getName()); }
public void onConfirmPMHost() { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel) (getWindow())); if (!(model.validate())) { return; } if (!((java.lang.Boolean) (model.getIsPm().getEntity()))) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().powerManagementConfigurationTitle()); confirmModel.setHashName("power_management_configuration");<START_MOD> confirmModel.setHelpTag(confirmModel.getHashName(),   > Power Management Configuration<END_MOD> confirmModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().youHavntConfigPmMsg()); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnAddHost", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); confirmModel.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmWithFocus", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); confirmModel.getCommands().add(tempVar2); } else { onAddHost(); } }
<START_MOD>private boolean isRunningConfigurationNeeded() { return (!(org.ovirt.engine.core.bll.VmHandler.isUpdateValid(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus()))) || (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isNextRunConfigurationExists()); }<END_MOD>
@org.junit.Test public void testSaveWithEntities() { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.NewGuid(); dao.save(newAsyncTask, VdcObjectType.Storage, storageId); java.util.List<org.ovirt.engine.core.compat.Guid> asyncTasks = dao.getAsyncTaskIdsByEntity(storageId); assertNotNull(asyncTasks); assertEquals(asyncTasks.size(), 1); assertEquals(asyncTasks.get(0), newAsyncTask.<START_MOD>getTaskId<END_MOD>()); }
<START_MOD>@java.lang.Override public int hashCode() { return java.util.Objects.hash(storageDomainId, imageGroupId, baseImageGeneration, baseImage, topImage); }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.Disk disk = getDisk(); if (disk != null) { permsList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(disk.getId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.SPARSIFY_DISK)); } return permsList; }<END_MOD>
protected void setVdsRuntimeError(java.lang.RuntimeException ex) { getVDSReturnValue().setSucceeded(false); getVDSReturnValue().setExceptionString(ex.toString()); getVDSReturnValue().setExceptionObject(ex); org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase vdsExp = ((org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) ((ex instanceof org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) ? ex : null)); if (vdsExp != null) { if ((vdsExp.getVdsError()) != null) { getVDSReturnValue().setVdsError(((org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) (ex)).getVdsError()); } else if ((vdsExp.getCause()) instanceof org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) { getVDSReturnValue().setVdsError(((org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) (vdsExp.getCause())).getVdsError()); } } <START_MOD>}<END_MOD>
<START_MOD>default <END_MOD>java.lang.String getDetailMessage(T entity)<START_MOD> { return null<END_MOD>;<START_MOD> }<END_MOD>
<START_MOD>private java.lang.String getDiskIsBeingMigratedMessage() { if ((cachedDiskIsBeingMigratedMessage) == null) { java.lang.StringBuilder builder = new java.lang.StringBuilder(VdcBllMessages.ACTION_TYPE_FAILED_DISK_IS_BEING_MIGRATED.name()); if ((org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage()) != null) { builder.append(java.lang.String.format("$DiskName %1$s", getDiskAlias())); } builder.append(java.lang.String.format("$OperationType %1$s", ((org.ovirt.engine.core.common.businessentities.ImageOperation.Move) == (org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters().getOperation()) ? "moved" : "copied"))); cachedDiskIsBeingMigratedMessage = builder.toString(); } return cachedDiskIsBeingMigratedMessage; }<END_MOD>
@org.junit.Test public void testIt() { org.ovirt.engine.core.compat.backendcompat.PropertyInfo pc = org.ovirt.engine.core.compat.backendcompat.TypeCompat.GetProperty(this.getClass(), "someValue"); java.lang.String result = ((java.lang.String) (pc.<START_MOD>getValue<END_MOD>(this, "JarJar"))); assertEquals("Standard", "Anakin", result); this.someValue = null; result = ((java.lang.String) (pc.<START_MOD>getValue<END_MOD>(this, "JarJar"))); assertEquals( Value "JarJar", result); }
<START_MOD>public java.lang.String generateEngineXml(org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String cpuId, java.lang.String emulatedMachine) { vm.setCpuName(cpuId); vm.setEmulatedMachine(emulatedMachine); return new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(vm, vmInfoBuildUtils).buildCreateVm(); }<END_MOD>
<START_MOD>public void retrieveValue(final java.lang.String key, final org.ovirt.engine.ui.frontend.communication.StorageCallback callback) { getOperationManager().retrieve(key, callback); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.Model, ?> getModelPopup(org.ovirt.engine.ui.uicommonweb.models.HostErrataCountModel sourceModel, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand, org.ovirt.engine.ui.uicommonweb.models.Model windowModel) { org.ovirt.engine.ui.webadmin.section.main.presenter.popup.ErrataListWithDetailsPopupPresenterWidget popup = errataPopupProvider.get(); return popup; }<END_MOD>
<START_MOD>@javax.ws.rs.Path("hostgroups") public org.ovirt.engine.api.resource.foreman.ForemanHostGroupsResource getForemanHostGroups();<END_MOD>
@java.lang.Override protected void toggleGhost(org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType value, org.ovirt.engine.ui.common.widget.profile.ProfileInstanceTypeEditor item, boolean becomingGhost) { item.profileEditor.setEnabled((!becomingGhost)); item.profileEditor.asWidget().setEnabled(true); <START_MOD>vnics.put(value.getNetworkInterface(),<END_MOD> becomingGhost); updateHeaderLabel(); }
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getStepType() { return org.ovirt.engine.core.common.job.StepEnum.STOP_REBALANCING_GLUSTER_VOLUME; }<END_MOD>
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((id) == null ?   : id.hashCode()); result = (prime * result) + ((LVER) == null ?   : LVER.hashCode()); result = (prime * result) + ((description) == null ?   : description.hashCode()); result = (prime * result) + ((comment) == null ?   : comment.hashCode()); result = (prime * result) + ((compatibilityVersion) == null ?   : compatibilityVersion.hashCode()); result = (prime * result) + (masterDomainVersion); result = (prime * result) + ((name) == null ?   : name.hashCode()); result = (prime * result) + ((recovery_mode) == null ?   : recovery_mode.hashCode()); result = (prime * result) + ((spmVdsId) == null ?   : spmVdsId.hashCode()); result = (prime * result) + ((status) == null ?   : status.hashCode()); result = (prime * result) + ((storagePoolFormatType) == null ?   : storagePoolFormatType.hashCode()); result = (prime * result) + ((quotaEnforcementType) == null ?   : quotaEnforcementType.hashCode()); return result; }
<START_MOD>public org.ovirt.engine.ui.uicommonweb.UICommand getRequestConsoleKeysCommand() { return privateRequestConsoleKeysCommand; }<END_MOD>
<START_MOD>public static boolean hasSpiceSupportCached(int osId, org.ovirt.engine.core.compat.Version version) { java.util.HashMap<java.lang.Integer, java.lang.Boolean> osIdSpiceMap = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.versionOsIdSpiceMap.get(version); return osIdSpiceMap.get(osId); }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel clusterModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel) (model)); java.util.ArrayList<org.ovirt.engine.core.compat.Version> versions = ((java.util.ArrayList<org.ovirt.engine.core.compat.Version>) (result)); clusterModel.getVersion().setItems(versions); if (!(versions.contains(clusterModel.getVersion().getSelectedItem()))) { if (versions.contains(clusterModel.getDataCenter().getSelectedItem().getcompatibility_version())) { clusterModel.getVersion().setSelectedItem(clusterModel.getDataCenter().getSelectedItem().getcompatibility_version()); } else { clusterModel.getVersion().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.selectHighestVersion(versions)); } } else if (clusterModel.getIsEdit()) { clusterModel.getVersion().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(versions, new org.ovirt.engine.ui.uicommonweb.Linq.VersionPredicate(clusterModel.getEntity().getcompatibility_version()))); } }
<START_MOD>private void initAddedLabelsParams(org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig originalVfsConfig, org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig updateVfsConfig) { for (java.lang.String label : updateVfsConfig.getLabels()) { if (!(originalVfsConfig.getLabels().contains(label))) { addedLabelsParams.add(new org.ovirt.engine.core.common.action.VfsConfigLabelParameters(originalVfsConfig.getNicId(), label)); } } }<END_MOD>
<START_MOD>protected java.util.List<java.lang.String> getLocales(java.io.File manualDir) { java.util.List<java.lang.String> locales = new java.util.ArrayList<>(); if ((!(manualDir.exists())) || (!(manualDir.canRead()))) { org.ovirt.engine.docs.utils.servlet.ContextSensitiveHelpMappingServlet.log.error(("manual directory doesn't exist: " + manualDir)); return locales; } for (java.io.File dir : manualDir.listFiles()) { if ((dir.isDirectory()) && (dir.canRead())) { java.lang.String name = dir.getName(); if (((name.length()) == 5) && ((name.indexOf("-")) == 2)) { locales.add(name); } } } return locales; }<END_MOD>
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { initializeObjectState(); if ((org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm()) == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.canRunActionOnNonManagedVm())) { return false; } org.ovirt.engine.core.bll.validator.VmValidator vmValidator = createVmValidator(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm()); if (((((((!(validate(new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getStoragePool()).isUp()))) || (!(validateVmNotDuringSnapshot()))) || (!(validateVmNotInPreview()))) || (!(validateSnapshotExists()))) || (!(validateSnapshotType()))) || (org.ovirt.engine.core.common.FeatureSupported.liveMerge(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm().getVdsGroupCompatibilityVersion()) ? (!(validate(vmValidator.vmQualifiedForSnapshotMerge()))) || (!(validate(vmValidator.vmHostCanLiveMerge()))) : !(validate(vmValidator.vmDown())))) || (!(validate(vmValidator.vmNotHavingDeviceSnapshotsAttachedToOtherVms(false))))) { return false; } if (hasImages()) { if (!(validateImages())) { return false; } if (!(validateImageNotInTemplate())) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_IMAGE_TEMPLATE); } if (!(validateStorageDomains())) { return false; } } return true; }
private org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD> getRole() { org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD> role = new org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD>(); role.setId(GUIDS[1]); return role; }
<START_MOD>@java.lang.Override <END_MOD>public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc moveImage(java.lang.String spUUID, java.lang.String srcDomUUID, java.lang.String dstDomUUID, java.lang.String imgGUID, java.lang.String vmGUID, int op, java.lang.String postZero, java.lang.String force) { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = irsServer.moveImage(spUUID, srcDomUUID, dstDomUUID, imgGUID, vmGUID, op, postZero, force); org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(xmlRpcReturnValue); return wrapper; }
<START_MOD>public void setIsGeoRepSlave(java.lang.Boolean isGeoRepSlave) { this.isGeoRepSlave = isGeoRepSlave; }<END_MOD>
<START_MOD>public boolean isCanChoseInactiveDomainAsMaster() { return canChoseInactiveDomainAsMaster; }<END_MOD>
@java.lang.Override protected void initMtu() { getHasMtu().setEntity(((getNetwork().getMtu()) != 0)); <START_MOD>if (getHasMtu().getEntity()) { <END_MOD>getMtu().setEntity(getNetwork().getMtu()); }<START_MOD> }<END_MOD>
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel getSelectedItem() { return super.getSelectedItem(); }
private boolean IsFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer) { boolean returnValue = true; if (!(IsFieldUpdatable(name))) { if (((fieldContainer != null) && ((<START_MOD>container<END_MOD>) != null)) && (!(<START_MOD>container<END_MOD>.CanUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.List<java.lang.String> values = null; if (((values = <START_MOD>dictionary<END_MOD>.get(status)) != null) && (values != null)) { returnValue = values.contains(name); } else { returnValue = false; } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.LogError(name, status); } } return returnValue; }
@java.lang.Override public void onSuccess(final java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.queries.VdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase>> operationList, final java.util.List<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> resultObject) { org.ovirt.engine.ui.frontend.Frontend.logger.finer( returned result from runMultipleQueries! org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult(queryTypeList, queryParamsList, resultObject); callback.executed(f); org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent.fire(this, <START_MOD>new org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent(<END_MOD>state<START_MOD>, true)<END_MOD>); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VM vm) { java.<START_MOD>util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.<END_MOD>lang.String<START_MOD>><END_MOD> <START_MOD>imagesToText = getSafeHtmlStringMap(vm)<END_MOD>; if (<START_MOD>!<END_MOD>(<START_MOD>imagesToText<END_MOD>.<START_MOD>isEmpty<END_MOD>())) {<START_MOD> return<END_MOD> org.ovirt.engine.ui.webadmin.widget.table.column.<START_MOD>MultiImageColumnHelper<END_MOD>.getTooltip(<START_MOD>imagesToText<END_MOD>); } return <START_MOD>null<END_MOD>; }
@java.lang.Override protected void executeCommand() { updateQuotaCache(); if ((_oldStoragePool.getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Up)) { if (!(org.apache.commons.lang.StringUtils.equals(_oldStoragePool.getName(), org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getName()))) { runVdsCommand(VDSCommandType.SetStoragePoolDescription, new org.ovirt.engine.core.common.vdscommands.SetStoragePoolDescriptionVDSCommandParameters(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getName())); } } org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.copyUnchangedStoragePoolProperties(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool(), _oldStoragePool); org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePoolDAO().updatePartial(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool()); updateStoragePoolFormatType(); org.ovirt.engine.core.bll.<START_MOD>network.ScopedMacPoolManager.scopeFor().storagePool(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getId()).modifyPool(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getMacPoolRanges()); org.ovirt.engine.core.bll.<END_MOD>storage.UpdateStoragePoolCommand.setSucceeded(true); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { if (returnValue != null) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); updateVms(java.util.Collections.singletonList(vm)); <START_MOD>clearErrorAndWarning<END_MOD>(); } else { setError(messages.failedToLoadOva(getOvaPath().getEntity())); } stopProgress(); }
@java.lang.Override protected org.ovirt.engine.core.compat.Guid getExistingEntityId() { return org.ovirt.engine.core.compat.Guid.<START_MOD>createGuidFromStringDefaultEmpty<END_MOD>("1115c1c6-cb15-4832-b2a4-023770607111"); }
@java.lang.SuppressWarnings("rawtypes") @java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc hotunplugDisk(java.util.Map info) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.hotunplugDisk").withParameter("vmID", getVmId(info)).withParameter("params", info).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { <START_MOD>clearModelSearchString<END_MOD>(); }
public org.ovirt.engine.core.common.businessentities.VDSStatus getPreviousStatus() { return mVdsDynamic.getPreviousStatus(); }
<START_MOD>@java.lang.Override public void onAcccept(final org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient client) { client.setRetryPolicy(new org.ovirt.vdsm.jsonrpc.client.utils.retry.RetryPolicy(180000, 0, 2000, 3000)); listeningClient = client; }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__REFRESH); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__HOST_DEVICES); }
<START_MOD>public boolean isAutoCleared() { return isAutoCleared; }<END_MOD>
private void initRanges(java.lang.String ranges) { java.lang.String[] rangesArray = ranges.split("[,]", (-1)); for (java.lang.String range : rangesArray) { java.lang.String[] startendArray = range.split("[-]", (-1)); if ((startendArray.length) == 2) { if (!(initRange(startendArray[0], startendArray[1]))) { org.ovirt.engine.core.bll.network.MacPoolManager.log.errorFormat( to initialize Mac Pool range. Please fix Mac Pool range: {0} range); } } else { org.ovirt.engine.core.bll.network.MacPoolManager.log.errorFormat( to initialize Mac Pool range. Please fix Mac Pool range: {0} range); } } if (<START_MOD>getAvailableMacs()<END_MOD>.isEmpty()) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.MAC_POOL_INITIALIZATION_FAILED); } }
private void HandleEndedTask() { if ((getState()) != (AsyncTaskState.Ended)) { setState(AsyncTaskState.Ended); setLastStatusAccessTime(); } if (<START_MOD>isZombieTask()) { getParameters().getDbAsyncTask().getTaskParameters().setTaskGroupSuccess(false); org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(privateParameters.getDbAsyncTask().getStepId(), JobExecutionStatus.FAILED); OnTaskEndFailure(); } if (<END_MOD>isPartiallyCompletedCommandTask()) { getParameters().getDbAsyncTask().getTaskParameters().setTaskGroupSuccess(false); org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(privateParameters.getDbAsyncTask().getStepId(), JobExecutionStatus.FAILED); OnTaskEndFailure(); } if (HasTaskEndedSuccessfully()) { org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(privateParameters.getDbAsyncTask().getStepId(), JobExecutionStatus.FINISHED); OnTaskEndSuccess(); } else if (HasTaskEndedInFailure()) { org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(privateParameters.getDbAsyncTask().getStepId(), JobExecutionStatus.FAILED); OnTaskEndFailure(); } else if (!(DoesTaskExist())) { org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(privateParameters.getDbAsyncTask().getStepId(), JobExecutionStatus.UNKNOWN); OnTaskDoesNotExist(); } }
<START_MOD>private void verifyActions(org.ovirt.engine.api.model.HostNics list) { assertNotNull(list.getActions()); assertNotNull(list.getActions().getLinks()); assertNotNull(list.getActions().getLinks().get(0)); assertEquals(list.getActions().getLinks().get(0).getHref(), org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.SETUPNETWORKS_ACTION_URL); }<END_MOD>
<START_MOD>public <P extends org.ovirt.engine.core.common.action.VdcActionParametersBase> org.ovirt.engine.core.bll.CommandBase<P> createCommand(org.ovirt.engine.core.common.action.VdcActionType action, P parameters) { return org.ovirt.engine.core.bll.CommandsFactory.getInstance().createCommand(action, parameters); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeQueryCommand() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmInit> allInit = org.ovirt.engine.core.common.businessentities.Entities.businessEntitiesById(org.ovirt.engine.core.bll.VmHandler.getAllVmInit()); if ((org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getVms()) != null) { for (org.ovirt.engine.core.common.businessentities.VM vm : org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getVms()) { vm.getStaticData().setVmInit(allInit.get(vm.getId())); } org.ovirt.engine.core.bll.GetVmsInitQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getVms()); return; } if ((org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getTemplates()) != null) { for (org.ovirt.engine.core.common.businessentities.VmTemplate template : org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getTemplates()) { template.setVmInit(allInit.get(template.getId())); } org.ovirt.engine.core.bll.GetVmsInitQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getVms()); } }<END_MOD>
@java.lang.Override public void execute() { if ((connected.getCount()) == 0) { connected = new java.util.concurrent.CountDownLatch(1); } if ((subscribed.getCount()) == 0) { subscribed = new java.util.concurrent.CountDownLatch(1); } send(new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().connect().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_ACCEPT, "1.2").<START_MOD>withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_HEART_BEAT, (( + ",") + (policy.getHeartBeat()))).<END_MOD>build()); subscribtionId = java.util.UUID.randomUUID().toString(); send(new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().subscribe().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_DESTINATION, org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompClient.RESPONSE_QUEUE).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_ID, subscribtionId).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_ACK, "client").build()); }
<START_MOD>public void runMultipleActions(final java.util.List<org.ovirt.engine.core.common.action.VdcActionType> actionTypes, final java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters, final java.util.List<org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback> callbacks, final org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback failureCallback, final java.lang.Object state, boolean aggregateErrors) { runMultipleActions(actionTypes, parameters, callbacks, failureCallback, state, aggregateErrors, (aggregateErrors ? new java.util.ArrayList<java.lang.String>() : null)); }<END_MOD>
@org.junit<START_MOD>.jupiter.api<END_MOD>.Test public void testAdd() <START_MOD>{<END_MOD> <START_MOD>try<END_MOD> { javax.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "00000001-0001-0001-0001-000000000011", "nics"); javax.ws.rs.core.Request request = mockRequest("POST"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals( correct usage, see: http: fault.getDetail()); }<START_MOD> catch (java.lang.ClassNotFoundException | java.io.IOException e) { fail(); } }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.event_subscriber> getAllForSubscriber(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("subscriber_id", id); return getCallsHandler().executeReadList("Getevent_subscriberBysubscriber_id", org.ovirt.engine.core.dao.<START_MOD>EventDAOImpl<END_MOD>.EventSubscriberRowMapper.instance, parameterSource); }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.compat.Guid ensureIconInDatabase(final java.lang.String icon) { try { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { final org.ovirt.engine.core.common.businessentities.VmIcon newIcon = new org.ovirt.engine.core.common.businessentities.VmIcon(org.ovirt.engine.core.compat.Guid.newGuid(), icon, null); save(newIcon); return null; } }); } catch (java.lang.RuntimeException ex) { } final java.util.List<org.ovirt.engine.core.common.businessentities.VmIcon> iconsOfRequiredData = getByDataUrl(icon); if ((iconsOfRequiredData.size()) != 1) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.VM_ICON_NOT_FOUND); } return iconsOfRequiredData.get(0).getId(); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { boolean succeeded = false; org.ovirt.engine.core.common.action.SetHaMaintenanceParameters params = ((org.ovirt.engine.core.common.action.SetHaMaintenanceParameters) (getParameters())); try { succeeded = runVdsCommand(VDSCommandType.SetHaMaintenanceMode, new org.ovirt.engine.core.common.vdscommands.SetHaMaintenanceModeVDSCommandParameters(getVds(), params.getMode(), params.getIsEnabled())).getSucceeded(); } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { log.errorFormat("Could not {0} {1} Hosted Engine HA maintenance mode on host {2}", (params.getIsEnabled() ? "enable" : "disable"), params.getMode().name().toLowerCase(), getVdsName()); } getReturnValue().setSucceeded(succeeded); }<END_MOD>
@java.lang.Override protected void onLoad() { super.onLoad(); if ((selectionModel.getLastSelectedRow()) == (-1)) { return; } com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { setFocus(true); <START_MOD>enforceScrollPosition(); <END_MOD>} }); }
void processOnClientIpChange(org.ovirt.engine.core.compat.Guid vmId<START_MOD>, java.lang.String newClientIp<END_MOD>);
public static void copyVmDevices(org.ovirt.engine.core.compat.Guid srcId, org.ovirt.engine.core.compat.Guid dstId, java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disks, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> ifaces<START_MOD>, boolean isConsoleEnabled<END_MOD>) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(dstId); org.ovirt.engine.core.common.businessentities.VmBase vmBase = (vm != null) ? vm.getStaticData() : null; boolean isVm = vmBase != null; if (!isVm) { vmBase = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().get(dstId); } java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.getVmDeviceByVmId(srcId); org.ovirt.engine.core.bll.utils.VmDeviceUtils.copyVmDevices(srcId, dstId, vm, vmBase, isVm, devices, disks, ifaces<START_MOD>, isConsoleEnabled<END_MOD>); }
<START_MOD>boolean isSpiceProxyDefined();<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllDirectPermissionsForAdElement(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("ad_element_id", id); return getCallsHandler().executeReadList("GetDirectPermissionsByAdElementId", org.ovirt.engine.core.dao.<START_MOD>PermissionDAOImpl<END_MOD>.PermissionRowMapper.instance, parameterSource); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.RemoveDiskCommand.getParameters().<START_MOD>getEntityInfo().getId<END_MOD>().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, getDiskIsBeingRemovedLockMessage())); }
<START_MOD>private void UpdateGrayedOut(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lunModel) { org.ovirt.engine.ui.uicompat.Constants constants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants(); org.ovirt.engine.core.common.businessentities.LUNs lun = ((org.ovirt.engine.core.common.businessentities.LUNs) (lunModel.getEntity())); if ((!(isIgnoreGrayedOut())) && (!(lun.isAttached()))) { lunModel.setIsGrayedOut(((lun.isPartitioned()) || (!(lun.getvolume_group_id().isEmpty())))); } else { lunModel.setIsGrayedOut(lun.isAttached()); } if (lun.isPartitioned()) { lunModel.getGrayedOutReasons().add(constants.partitionedLUN()); } if ((!(lun.getvolume_group_id().isEmpty())) || (lun.isAttached())) { lunModel.getGrayedOutReasons().add(constants.alreadyInUseLUN()); } }<END_MOD>
<START_MOD>public int getMemoryOverCommit() { return memoryOverCommit; }<END_MOD>
public static void ProcessVmPoolOnStopVm(org.ovirt.engine.core.compat.Guid vmId, org.ovirt.engine.core.bll.context.CommandContext context) { org.ovirt.engine.core.common.businessentities.VmPoolMap map = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmPoolDao().getVmPoolMapByVmGuid(vmId); java.util.List<org.ovirt.engine.core.common.businessentities.DbUser> users = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().getAllForVm(vmId); if (((map != null) && (users != null)) && (!(users.isEmpty()))) { org.ovirt.engine.core.common.businessentities.vm_pools pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmPoolDao().get(map.getvm_pool_id()); if ((pool != null) && ((pool.getvm_pool_type()) == (org.ovirt.engine.core.common.businessentities.VmPoolType.Automatic))) { for (org.ovirt.engine.core.common.businessentities.DbUser dbUser : users) { org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.DetachUserFromVmFromPool, new org.ovirt.engine.core.common.action.VmPoolSimpleUserParameters(map.getvm_pool_id(), dbUser.getuser_id()), context); } } } else { org.ovirt.engine.core.bll.VmPoolHandler.removeVmStatelessImages(vmId, context); } org.ovirt.engine.core.bll.quota.QuotaManager.getInstance().rollbackQuotaByVmId(vmId); org.ovirt.engine.core.bll.VmHandler.removeStatelessVmUnmanagedDevices(vmId); <START_MOD>org.ovirt.engine.core.bll.VmPoolHandler.handleProviderNetworks(vmId); <END_MOD>}
@<START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>Override<END_MOD> public void <START_MOD>setHeight<END_MOD>(<START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String<END_MOD> <START_MOD>height<END_MOD>) { <START_MOD>super<END_MOD>.<START_MOD>setHeight<END_MOD>(<START_MOD>height<END_MOD>); }
@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__REMOVE_BRICKS_START); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__GLUSTER_BRICK); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Logical Networks panel java.lang.String unassignedLogicalNetworksPanel();
protected void extractBond(java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> bonds, org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface, java.lang.String name) { if (bonds.containsKey(name)) { violations.add(VdcBllMessages.NETWORK_BOND_NAME_EXISTS); } else { bonds.put(name, iface); } }
<START_MOD>protected boolean verifyAddVM(java.util.List<java.lang.String> reasons, org.ovirt.engine.core.compat.Guid storagePoolId, int vmPriority) { return org.ovirt.engine.core.bll.VmHandler.VerifyAddVm(reasons, getVmInterfaces().size(), getVmTemplate(), storagePoolId, vmPriority); }<END_MOD>
@java.lang.Override @org.ovirt.engine.api.restapi.resource.SingleEntityResource public org.ovirt.engine.api.resource.InstanceTypeResource getInstanceTypeSubResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendInstanceTypeResource(id<START_MOD>, this<END_MOD>)); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage_pool runInTransaction() { getStoragePoolDAO().update(getStoragePool()); <START_MOD>if (context != null) { context.snapshotEntity(getStoragePool()); } <END_MOD>return null; }
@java.lang.Override protected void Perform() { if (org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(mTicket)) { mTicket = org.ovirt.engine.core.utils.Ticketing.GenerateOTP(); } final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.SetVmTicketCommand.getVm(); final org.ovirt.engine.core.common.interfaces.IVdcUser user = org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser(); vm.setConsoleUserId(user.getUserId()); <START_MOD>vm.setguest_cur_user_name((user.getUserName().contains("@") ? user.getUserName() : ((user.getUserName()) + "@") + (user.getDomainControler()))); <END_MOD>final org.ovirt.engine.core.dao.VmDynamicDAO dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDAO(); if ((vm.getAllowConsoleReconnect()) || (neededPermissions)) { dao.update(vm.getDynamicData()); sendTicket(); } else { final boolean saved = dao.updateConsoleUserWithOptimisticLocking(vm.getDynamicData()); if (saved) { sendTicket(); } else { dontSendTicket(); } } }
<START_MOD>public void setcpu_list(java.lang.String value) { this.cpu_list = value; }<END_MOD>
<START_MOD>@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_PLACEHOLDER_CREATION)) { updateStage(LiveDiskMigrateStage.VM_REPLICATE_START); replicateDiskStart(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_START); syncImageData(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END); return true; } if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END)) { completeLiveMigration(); updateStage(LiveDiskMigrateStage.SOURCE_IMAGE_DELETION); removeImage(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getSourceStorageDomainId()); return false; } return false; }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__UPDATE); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__CLUSTER_POLICY); }
protected void initGraphicsConsoles() { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getSelectedCluster(); java.lang.Integer osType = getOSType().getSelectedItem(); if ((cluster == null) || (osType == null)) { return; } initGraphicsConsoles(osType, <START_MOD>getEffectiveCompatibilityVersion<END_MOD>()); }
private void setDiskProfilesList(java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> diskProfiles) { if ((diskProfiles != null) && (!(diskProfiles.isEmpty()))) { getDiskProfile().setItems(diskProfiles); } org.ovirt.engine.core.compat.Guid defaultProfileId = (((<START_MOD>(<END_MOD>getDisk()) != null) && (<START_MOD>isExistingDisk())) && (<END_MOD>(getDisk().getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE))) ? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getDiskProfileId() : null; if (defaultProfileId != null) { for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile profile : diskProfiles) { if (profile.getId().equals(defaultProfileId)) { getDiskProfile().setSelectedItem(profile); return; } } org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile = new org.ovirt.engine.core.common.businessentities.profiles.DiskProfile(); diskProfile.setId(defaultProfileId); if ((getDisk()) != null) { diskProfile.setName(getDiskImage().getDiskProfileName()); } diskProfiles.add(diskProfile); getDiskProfile().setItems(diskProfiles); getDiskProfile().setSelectedItem(diskProfile); } }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Permit permit) { validateParameters(permit, "name|id"); <START_MOD>org.ovirt.engine.api.restapi.resource.validation.ValidatorLocator.getValidator(org.ovirt.engine.api.model.Permit.class).validateEnums(permit); <END_MOD>java.util.ArrayList<org.ovirt.engine.core.common.businessentities.ActionGroup> actionGroups = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.ActionGroup>(); actionGroups.add(map(permit)); return performCreation(VdcActionType.AttachActionGroupsToRole, new org.ovirt.engine.core.common.action.ActionGroupsToRoleParameter(roleId, actionGroups), new org.ovirt.engine.api.restapi.resource.BackendPermitsResource.PermitIdResolver(actionGroups.get(0))); }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.network.NetworkView <START_MOD>network<END_MOD> = getEntity(<START_MOD>); getNewCommand().setIsExecutionAllowed(network.isVmNetwork()<END_MOD>); getEditCommand().setIsExecutionAllowed((((getSelectedItems()) != null) && ((getSelectedItems().size()) == 1))); getRemoveCommand().setIsExecutionAllowed((((getSelectedItems()) != null) && ((getSelectedItems().size()) > 0))); }
<START_MOD>protected boolean canRunActions(java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> returnValues) { if ((getCommands().size()) == 1) { org.ovirt.engine.core.utils.CorrelationIdTracker.setCorrelationId(getCommands().get(0).getCorrelationId()); returnValues.add(getCommands().get(0).canDoActionOnly()); } else { checkCanDoActionsAsynchronously(returnValues); } if (isRunOnlyIfAllCanDoPass) { for (org.ovirt.engine.core.common.action.VdcReturnValueBase value : returnValues) { if (!(value.getCanDoAction())) { return false; } } } return true; }<END_MOD>
@java.lang.Override public void markAsValid() {<START_MOD> isValid = true;<END_MOD> applyCommonValidationStyles(); getValidatedWidgetStyle().setBorderColor("gray"); getValidatedWidget().setTitle(null); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmNetworkInterface mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.VmNetworkInterface entity = new org.ovirt.engine.core.common.businessentities.VmNetworkInterface(); entity.getStatistics().setId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("id"))); entity.getStatistics().setReceiveRate(rs.getDouble("rx_rate")); entity.getStatistics().setTransmitRate(rs.getDouble("tx_rate")); entity.getStatistics().setReceiveDropRate(rs.getDouble("rx_drop")); entity.getStatistics().setTransmitDropRate(rs.getDouble("tx_drop")); entity.getStatistics().setStatus(org.ovirt.engine.core.common.businessentities.InterfaceStatus.forValue(rs.getInt("iface_status"))); entity.setType(((java.lang.Integer) (rs.getObject("type")))); entity.setMacAddress(rs.getString("mac_addr")); entity.setNetworkName(rs.getString("network_name")); entity.setName(rs.getString("name")); entity.setVmId(org.ovirt.engine.core.compat.NGuid.createGuidFromString(rs.getString("vm_guid"))); entity.setVmTemplateId(org.ovirt.engine.core.compat.NGuid.createGuidFromString(rs.getString("vmt_guid"))); entity.setVmName(rs.getString("vm_name")); entity.setId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("id"))); entity.setSpeed(((java.lang.Integer) (rs.getObject("speed")))); entity.setActive(rs.getBoolean("is_plugged")); <START_MOD>entity.setActive(rs.getBoolean("promisc")); <END_MOD>return entity; }
@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__FREEZE); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__VM); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterHookEnable(java.lang.String glusterCommand, java.lang.String stage, java.lang.String hookName) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterHook.enable").withParameter("glusterCmd", glusterCommand).withParameter("hookLevel", stage).withParameter("hookName", hookName).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@org.junit.Test public void canDoActionFailsOnRemoveLastAdGroupWithSuperUserPrivileges() throws java.lang.Exception { mockIsLastSuperUserGroup(true); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(<START_MOD>EngineMessages<END_MOD>.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString())); }
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("Destination Cluster Host") java.lang.String volumeSubTabGeoRepSlaveClusterHostColumn();<END_MOD>
<START_MOD>public boolean isRequired() { return required; }<END_MOD>
private void onTest() { if (!(validateConnectionSettings())) { getTestResult().setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().testFailedInsufficientParams()); return; } flush(); startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TestProviderConnectivity, new org.ovirt.engine.core.common.action.ProviderParameters(provider), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue(); if (isFailedOnSSL(res)) { org.ovirt.engine.ui.frontend.AsyncQuery getCertChainQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getCertChainQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { if (result != null) { <START_MOD>certificate = ((java.lang.String) (result)); <END_MOD>org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = getImportChainConfirmationModel(<START_MOD>certificate<END_MOD>); sourceListModel.setConfirmWindow(confirmationModel); } else { stopProgress(); getTestResult().setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().testFailedUnknownErrorMsg()); } } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().<START_MOD>getProviderCertificate<END_MOD>(getCertChainQuery, provider); } else { stopProgress(); setTestResultValue(res); } } }, null, false); }
private void createImageForVmMetaData() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CreateImage, new org.ovirt.engine.core.common.vdscommands.CreateImageVDSCommandParameters(storagePool.getId(), storageDomainId, vmConfImageGroupId, MemoryUtils.METADATA_SIZE_IN_BYTES, org.ovirt.engine.core.common.businessentities.storage.VolumeType.Sparse, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.<START_MOD>RAW<END_MOD>, vmConfVolumeId, "")); if (!(retVal.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.VolumeCreationError,   to create image for vm configuration! } org.ovirt.engine.core.compat.Guid taskId = enclosingCommand.persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder.CREATE_IMAGE_FOR_VM_TASK_KEY); org.ovirt.engine.core.compat.Guid guid = enclosingCommand.createTask(taskId, retVal.getCreationInfo(), enclosingCommand.getActionType()); enclosingCommand.getTaskIdList().add(guid); }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hookEntity) { if (hookEntity.hasConflicts()) { return <START_MOD>resources<END_MOD>.alertImage(); } return null; }
<START_MOD>private void MoveVMsToUnknown() { addMigratedVmsNotUpYet(); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().getAllRunningForVds(getVdsId()); for (org.ovirt.engine.core.common.businessentities.VM vm : vmList) { destroyVmOnDestination(vm); org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().runVdsCommand(VDSCommandType.SetVmStatus, new org.ovirt.engine.core.common.vdscommands.SetVmStatusVDSCommandParameters(vm.getId(), org.ovirt.engine.core.common.businessentities.VMStatus.Unknown)); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.setVmId(vm.getId()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.VM_SET_TO_UNKNOWN_STATUS); } }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Host in Cluster java.lang.String anyHostInCluster();
@java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.Cluster> convert(java.<END_MOD>lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>><END_MOD> _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> list = getClusterByServiceList(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>) (source)), supportsVirtService, supportsGlusterService); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return list; } return new java.util.ArrayList<>(); }
<START_MOD>@org.junit.Test public void shouldDetectNumaPinning() { invalidVM.setvNumaNodeList(java.util.Arrays.asList(createVmNumaNode(1, java.util.Arrays.asList(createVdsNumaNode(1))))); assertThat(validator.isVmReadyForUpgrade(invalidVM)).contains(UPGRADE_ERROR.VM_NUMA_PINNED); }<END_MOD>
@org.junit.Test public void updateStatusOfImagesByImageGroupId() { org.ovirt.engine.core.common.businessentities.storage.Image image = dao.get(org.ovirt.engine.core.dao.ImageDaoTest.EXISTING_IMAGE_ID); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = dbFacade.getDiskImageDao().getAllSnapshotsForImageGroup(image.getDiskId()); assertFalse(((snapshots.size()) == 1)); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : snapshots) { <START_MOD>assertNotSame<END_MOD>(ImageStatus.LOCKED, diskImage.getImageStatus()); } <START_MOD>dao.updateStatusOfImagesByImageGroupId(image.getDiskId(), ImageStatus.LOCKED); snapshots = dbFacade.getDiskImageDao().getAllSnapshotsForImageGroup(image.getDiskId()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : snapshots) { assertEquals(ImageStatus.LOCKED, diskImage.getImageStatus()); <END_MOD>}<START_MOD> }<END_MOD>
<START_MOD>private com.google.gwt.safehtml.shared.SafeHtml buildWarnings(java.util.List<org.ovirt.engine.core.common.businessentities.ClusterEditWarnings.Warning> warnings) { com.google.gwt.safehtml.shared.SafeHtmlBuilder builder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); for (org.ovirt.engine.core.common.businessentities.ClusterEditWarnings.Warning warning : warnings) { builder.append(warningTemplates.warningTitle(warning.getMainMessage())); builder.append(warningTemplates.warningList(buildWarningDetails(warning.getDetailsByName()))); } return builder.toSafeHtml(); }<END_MOD>
@java.lang.Override public <START_MOD>int<END_MOD> extractOsType(org.ovirt.engine.core.common.businessentities.VmTemplate item) { return item.getOs(); }
@java.lang.Override protected boolean canDoAction() { if (org.ovirt.engine.core.bll.ChangeDiskCommand.shouldSkipCommandExecutionCached()) { return true; } if ((org.ovirt.engine.core.bll.ChangeDiskCommand.getVm()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.ChangeDiskCommand.canRunActionOnNonManagedVm())) { return false; } if (!(org.ovirt.engine.core.bll.ChangeDiskCommand.getVm().isRunningOrPaused())) { return org.ovirt.engine.core.bll.ChangeDiskCommand.failVmStatusIllegal(); } if (((org.ovirt.engine.core.bll.<START_MOD>storage.domains.<END_MOD>IsoDomainListSyncronizer.getInstance().findActiveISODomain(org.ovirt.engine.core.bll.ChangeDiskCommand.getVm().getStoragePoolId())) == null) && (!(org.apache.commons.lang.StringUtils.isEmpty(cdImagePath)))) { return failCanDoAction(EngineMessage.VM_CANNOT_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO); } if ((org.apache.commons.lang.StringUtils.isNotEmpty(cdImagePath)) && (!(org.apache.commons.lang.StringUtils.endsWithIgnoreCase(cdImagePath, ValidationUtils.ISO_SUFFIX)))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_INVALID_CDROM_DISK_FORMAT); } return true; }
<START_MOD>public void setVmName(java.lang.String VmName) { this.VmName = VmName; }<END_MOD>
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingResources(java.lang.Class<T> type) { java.util.List<T> list = new java.util.ArrayList<>(); <START_MOD>synchronized(this) { <END_MOD>for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : pendingResources.values()) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } <START_MOD>} <END_MOD>return list; }
<START_MOD>protected static void updateAllDiskImageSnapshotsStatusWithCompensation(final org.ovirt.engine.core.compat.Guid diskId, final org.ovirt.engine.core.common.businessentities.ImageStatus status, org.ovirt.engine.core.common.businessentities.ImageStatus statusForCompensation, final org.ovirt.engine.core.bll.context.CompensationContext compensationContext) { if (compensationContext != null) { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> diskSnapshots = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskImageDao().getAllSnapshotsForImageGroup(diskId); for (org.ovirt.engine.core.common.businessentities.DiskImage diskSnapshot : diskSnapshots) { diskSnapshot.setImageStatus(statusForCompensation); compensationContext.snapshotEntityStatus(diskSnapshot.getImage()); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getImageDao().updateStatusOfImagesByImageGroupId(diskId, status); compensationContext.stateChanged(); return null; } }); } else { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getImageDao().updateStatusOfImagesByImageGroupId(diskId, status); } }<END_MOD>
protected org.ovirt.engine.core.common.businessentities.VmStatic getVm(org.ovirt.engine.api.model.Template template) { org.ovirt.engine.core.common.businessentities.VM vm; if (template.getVm().isSetId()) { vm = getEntity(org.ovirt.engine.api.model.VM.class, VdcQueryType.GetVmByVmId, new org.ovirt.engine.core.common.queries.GetVmByVmIdParameters(asGuid(template.getVm().getId())), template.getVm().getId()); } else <START_MOD>if (isFiltered()) <END_MOD>{ vm = getEntity(org.ovirt.engine.api.model.VM.class, <START_MOD>VdcQueryType.GetVmByVmName, new org.ovirt.engine.core.common.queries.GetVmByVmNameParameters(template.getVm().getName()), template.getVm().getName()); } else { vm = getEntity(org.ovirt.engine.api.model.VM.class, <END_MOD>SearchType.VM, ( name= + (template.getVm().getName()))); } return vm.getStaticData(); }
void initTable(org.ovirt.engine.ui.common.widget.table.SimpleActionTable<org.ovirt.engine.core.common.businessentities.AuditLog> table) { table.addColumn(new org.ovirt.engine.ui.common.widget.table.column.AuditLogSeverityColumn(), constants.empty(), "30px"); org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractTextColumn<END_MOD><org.ovirt.engine.core.common.businessentities.AuditLog> logTimeColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractFullDateTimeColumn<org.ovirt.engine.core.common.businessentities.AuditLog>() { @java.lang.Override protected java.util.Date getRawValue(org.ovirt.engine.core.common.businessentities.AuditLog object) { return object.getLogTime(); } <START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.AuditLog object) { return null; } <END_MOD>}; table.addColumn(logTimeColumn, constants.timeEvent(), "160px"); org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractTextColumn<END_MOD><org.ovirt.engine.core.common.businessentities.AuditLog> messageColumn = new org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractTextColumn<END_MOD><org.ovirt.engine.core.common.businessentities.AuditLog>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.AuditLog object) { return object.getMessage()<START_MOD>; } @java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.AuditLog object) { return null<END_MOD>; } }; table.addColumn(messageColumn, constants.messageEvent()); }
<START_MOD>static void addIoTuneParams(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.String, java.lang.Long> ioTune) { if (org.ovirt.engine.core.common.FeatureSupported.storageQoS(vm.getVdsGroupCompatibilityVersion())) { if (ioTune != null) { if ((vmDevice.getSpecParams()) == null) { vmDevice.setSpecParams(new java.util.HashMap<java.lang.String, java.lang.Object>()); } vmDevice.getSpecParams().put(VdsProperties.Iotune, ioTune); } } }<END_MOD>
@org.junit.Test public void canDoActionMaxBlockDiskSizeCheckFails() { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskCommandTest.createParameters(); parameters.setDiskInfo(org.ovirt.engine.core.bll.AddDiskCommandTest.createDiskImage(((org.ovirt.engine.core.bll.AddDiskCommandTest.MAX_BLOCK_SIZE) * 2))); initializeCommand(storageId, parameters); mockVm(); mockStorageDomain(storageId, StorageType.ISCSI); mockStoragePoolIsoMap(); mockMaxPciSlots(); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISK_MAX_SIZE_EXCEEDED.toString())); }
public org.ovirt.engine.core.bll.ValidationResult virtIoRngSupported() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_RNG_SOURCE_NOT_SUPPORTED).unless(((cluster.getRequiredRngSources().isEmpty()) || (virtIoRngSupportedInCluster()))); }
@org.junit.Test public void <START_MOD>validateVmShareableDisk<END_MOD>() { createParameters(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); assertFalse(command.<START_MOD>validate<END_MOD>()); assertTrue(command.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().contains(EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED.toString())); }
@java.lang.Override <START_MOD>public<END_MOD> <START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt.safehtml.shared.SafeHtml<END_MOD> <START_MOD>getTooltip<END_MOD>(org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel value) { return <START_MOD>com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(<END_MOD>constants.rebootVm()<START_MOD>)<END_MOD>; }
<START_MOD>@org.junit.Test public void noAllVfsAreFree() { allVfsAreFreeTest(org.ovirt.engine.core.bll.validator.VfsConfigValidatorTest.NUM_OF_VFS, ((org.ovirt.engine.core.bll.validator.VfsConfigValidatorTest.NUM_OF_VFS) - 1)); assertThat(validator.allVfsAreFree(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NUM_OF_VFS_CANNOT_BE_CHANGED, java.lang.String.format(VfsConfigValidator.NIC_NAME_REPLACEMENT, nic.getName()))); }<END_MOD>
<START_MOD>private org.ovirt.engine.core.bll.ValidationResult isVmInterfacesAttachedToVmNetworks(final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks, java.util.Set<java.lang.String> interfaceNetworkNames) { java.util.List<java.lang.String> nonVmNetworkNames = org.ovirt.engine.core.utils.NetworkUtils.filterNonVmNetworkNames(clusterNetworks, interfaceNetworkNames); if ((nonVmNetworkNames.size()) > 0) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NOT_A_VM_NETWORK, java.lang.String.format("$networks %1$s", org.apache.commons.lang.StringUtils.join(nonVmNetworkNames, ","))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
public void migrateMacsToAnotherMacPoolIfNeeded(org.ovirt.engine.core.common.businessentities.Cluster sourceCluster, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceCluster); java.util.Objects.requireNonNull(targetMacPoolId); java.util.Objects.requireNonNull(commandContext); org.ovirt.engine.core.compat.Guid sourceMacPoolId = java.util.Objects.requireNonNull(sourceCluster.getMacPoolId()); org.ovirt.engine.core.compat.Guid clusterId = java.util.Objects.requireNonNull(sourceCluster.getId()); boolean macPoolChanged = !(sourceMacPoolId.equals(targetMacPoolId)); if (macPoolChanged) { java.util.List<java.lang.String> macsToMigrate = <START_MOD>getMacsForClusterId<END_MOD>(clusterId); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macsToMigrate, commandContext); } }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Gluster command is required.") java.lang.String ACTION_TYPE_FAILED_GLUSTER_COMMAND_IS_REQUIRED();<END_MOD>
void updateListHeader(org.ovirt.engine.ui.uicommonweb.models.storage.DisksAllocationModel model) { java.lang.String width = (showQuota) ? "85px" : "100px"; listHeader = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, ((com.google.gwt.user.cellview.client.CellTable.Resources) (com.google.gwt.core.client.GWT.create(org.ovirt.engine.ui.common.PopupSimpleTableResources.class))), true); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.aliasDisk(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.provisionedSizeDisk(), width); if (showVolumeType) listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.allocationDisk(), width); if (showSource) listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.sourceDisk(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.targetDisk(), width); <START_MOD>listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.diskProfile(), width); <END_MOD>if (showQuota) listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.quotaDisk(), width); listHeader.setRowData(new java.util.ArrayList()); listHeader.setWidth("100%", true); diskListHeaderPanel.setWidget(listHeader); }
@org.junit.Test public void canDoPass() { when(hostedEngineHelper.getStorageDomain()).thenReturn(null); org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain(); int i = new java.util.Random().nextInt(SUPPORTED_DOMAIN_TYPES.length); sd.setStorageType(org.ovirt.engine.core.bll<START_MOD>.storage.domains<END_MOD>.ImportHostedEngineStorageDomainCommand.SUPPORTED_DOMAIN_TYPES[i]); sd.setStorageName(org.ovirt.engine.core.bll.<START_MOD>storage.domains.<END_MOD>ImportHostedEngineStorageDomainCommandTest.HOSTED_STORAGE_NAME); doReturn(createQueryReturnValueWith(java.util.Arrays.asList(sd))).when(backend).runInternalQuery(eq(VdcQueryType.GetExistingStorageDomainList), any(org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class)); assertTrue(cmd.canDoAction()); }
<START_MOD>@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { result.add(new org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.NAME), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.CPU_AVERAGE), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.MEM_AVERAGE))); } }<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (((currentErrataModel.getMessage()) != null) && (!(currentErrataModel.getMessage().isEmpty()))) { org.ovirt.engine.ui.webadmin.section.main.presenter.tab.host.SubTabHostGeneralHostErrataPresenter.logger.info("bus published message that there was a query error. update view."); getView().showErrorMessage(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(currentErrataModel.getMessage())); } }<END_MOD>
@java.lang.Override protected boolean validate() { <START_MOD>return<END_MOD> org.ovirt.engine.core.bll.storage.pool.AbstractSyncLunsCommand.checkStoragePool(); }
<START_MOD>protected org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator createMultipleStorageDomainsValidator(java.util.Collection<org.ovirt.engine.core.common.businessentities.DiskImage> diskImages) { return new org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator(params.getStoragePoolId(), org.ovirt.engine.core.bll.ImagesHandler.getAllStorageIdsForImageIds(diskImages)); }<END_MOD>
public final void AddFields(java.lang.Iterable<java.lang.Enum<?>> statuses, java.lang.String<START_MOD>...<END_MOD> fields) { for (java.lang.String field : fields) { AddField(statuses, field); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listFailedAutorecoverables() { return getCallsHandler().executeReadList("GetFailingStorage_domains", org.ovirt.engine.core.dao.<START_MOD>StorageDomainDAOImpl<END_MOD>.StorageDomainRowMapper.instance, null); }
private void moveVDSToMaintenanceIfNeeded() { if ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.PreparingForMaintenance)) { if (monitoringStrategy.canMoveToMaintenance(vds)) {<START_MOD> org.ovirt.engine.core.common.businessentities.VdsDynamic dbVds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDynamicDao().get(vds.getId()); vds.setStopReason(dbVds.getMaintenanceReason());<END_MOD> vdsManager.setStatus(VDSStatus.Maintenance, vds); saveVdsDynamic = true; saveVdsStatistics = true; org.ovirt.engine.core.vdsbroker.HostMonitoring.log.info( vds status from   for Maintenance to 'Maintenance' in database, vds '{}'({}) vds.getName(), vds.getId()); } else { vdsMaintenanceTimeoutOccurred = vdsManager.isTimeToRetryMaintenance(); } } }
@org.ovirt.engine.ui.common.DefaultStringValue(<START_MOD>"SPACE"<END_MOD>) java.lang.String spice();
public void setport(int value) { this.mVdsStatic.<START_MOD>setPort<END_MOD>(value); }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume = getGlusterVolume(); if (!(super.canDoAction())) { return false; } if ((!(getGlusterTaskUtils().isTaskOfType(glusterVolume, GlusterTaskType.REBALANCE))) || (!(getGlusterTaskUtils().isTaskStatus(glusterVolume, JobExecutionStatus.STARTED)))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REBALANCE_NOT_STARTED); } return true; }
protected boolean isVmTemplateWithSameNameExist() { return <START_MOD>(<END_MOD>org.ovirt.engine.core.<START_MOD>dal<END_MOD>.<START_MOD>dbbroker<END_MOD>.<START_MOD>DbFacade.getInstance().getVmTemplateDao().getByName<END_MOD>(getParameters().getVmTemplate().getName()<START_MOD>, getParameters(<END_MOD>)<START_MOD>.getStoragePoolId(), null, false)) != null<END_MOD>; }
private <START_MOD>org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.util.Set<java.lang.String>> insertExclusiveLock(java.lang.String key, java.lang.String message, <END_MOD>boolean <START_MOD>isCheckOnly) { org.ovirt.engine.core.bll.lock.InMemoryLockManager.InternalLockView lock = locks.get(<END_MOD>key<START_MOD>); if (lock != null<END_MOD>) { return <START_MOD>new org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.util.Set<java.lang.String>>(java.lang.Boolean.FALSE, lock.getMessages())<END_MOD>; } if (!isCheckOnly) { locks.put(key, new org.ovirt.engine.core.bll.lock.InMemoryLockManager.InternalLockView(0, <START_MOD>message, <END_MOD>true)); } return <START_MOD>org.ovirt.engine.core.bll.lock.InMemoryLockManager.LOCK_INSER_SUCCESS_RESULT<END_MOD>; }
<START_MOD>private void flush() { flushedLabels.clear(); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : labelModels.getItems()) { flushedLabels.add(labelModel.getSelectedItem()); } }<END_MOD>
@java.lang.Override public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem) { super.initialize(systemTreeSelectedItem); getModel().getVmType().setIsChangeable(true); getModel().getPoolStateful().setIsChangeable(true); templateValidate(); instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.NewPoolInstanceTypeManager(getModel()); getModel().getVmInitModel().init(null); <START_MOD>getModel().getDiskAllocationTargetEnabled().setIsAvailable(java.lang.Boolean.TRUE); getModel().getDiskAllocationTargetEnabled().setIsChangeable(java.lang.Boolean.TRUE); getModel().getDiskAllocationTargetEnabled().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { getModel().getDisksAllocationModel().updateTargetChangeable((!(getModel().getDiskAllocationTargetEnabled().getEntity()))); <END_MOD>}<START_MOD> }); }<END_MOD>
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { boolean retValue; org.ovirt.engine.core.compat.Guid subscriberId = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getSubscriberId(); java.lang.String eventName = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getEventUpName(); org.ovirt.engine.core.common.EventNotificationMethod eventNotificationMethod = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getEventNotificationMethod(); java.util.List<org.ovirt.engine.core.common.businessentities.EventSubscriber> subscriptions = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getEventDao().getAllForSubscriber(subscriberId); if (org.ovirt.engine.core.bll.AddEventSubscriptionCommand.isAlreadySubscribed(subscriptions, subscriberId, eventName, eventNotificationMethod)) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.EN_ALREADY_SUBSCRIBED); retValue = false; } else if (!(eventExists(eventName))) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.EN_UNSUPPORTED_NOTIFICATION_EVENT); retValue = false; } else { if (eventNotificationMethod != null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().get(subscriberId); if (user == null) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.USER_MUST_EXIST_IN_DB); retValue = false; } else { retValue = validateAdd(eventNotificationMethod, org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber(), user); } } else { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.EN_UNKNOWN_NOTIFICATION_METHOD); retValue = false; } } return retValue; }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}: The disk interface is not supported by the VM.") java.lang.String ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED();<END_MOD>
public org.ovirt.engine.core.common.action.SetupNetworksParameters buildParameters(org.ovirt.engine.core.compat.Guid hostId, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networksToRemove, java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsBylabels) { org.ovirt.engine.core.common.action.SetupNetworksParameters parameters = createSetupNetworksParameters(hostId); for (java.<START_MOD>util.Map.Entry<java.<END_MOD>lang.String<START_MOD>, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> entry<END_MOD> : nicsBylabels.<START_MOD>entrySet<END_MOD>()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicToConfigure = getNicToConfigure(parameters.getInterfaces(), <START_MOD>entry.getValue(<END_MOD>).getId()); if (nicToConfigure == null) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.LABELED_NETWORK_INTERFACE_NOT_FOUND); } java.util.Set<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsToRemove = getNicsToRemove(parameters.getInterfaces(), networksToRemove, nicToConfigure); parameters.getInterfaces().removeAll(nicsToRemove); } return parameters; }
private static java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> findNetworkInterfaces(java.util.Map<java.lang.String, <START_MOD>org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> vdsInterfaces, boolean bridgesReported, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, java.util.Map<<END_MOD>java.lang.<START_MOD>String, java.lang.<END_MOD>Object> <START_MOD>entry) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfaces = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(); if (bridgesReported) { if (iface == null) { if (entry != null) { interfaces.addAll(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.findBridgedNetworkInterfaces(entry,<END_MOD> vdsInterfaces<START_MOD>)); } } else { interfaces.add(<END_MOD>iface<START_MOD>); } } else { interfaces.addAll(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.findBridgedNetworkInterfaces(entry,<END_MOD> vdsInterfaces)); } return interfaces; }
<START_MOD>public static org.ovirt.engine.core.common.businessentities.AsyncTasks createAsyncTask(org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { return org.ovirt.engine.core.bll.tasks.CommandCoordinator.getInstance().createAsyncTask(command, asyncTaskCreationInfo, parentCommand); }<END_MOD>
private void newTemplate() { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel selectedItem = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel) (getSelectedItem())); if (selectedItem == null) { return; } org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (selectedItem.getEntity())); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel windowModel = new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewTemplateVmModelBehavior(vm)); setWindow(windowModel); windowModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newTemplateTitle()); windowModel.setHashName("new_template");<START_MOD> windowModel.setHelpTag(windowModel.getHashName(),   > Make Template<END_MOD> windowModel.setIsNew(true); windowModel.getVmType().setSelectedItem(vm.getVmType()); windowModel.initialize(null); windowModel.getIsTemplatePublic().setEntity(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnNewTemplate", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); windowModel.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); windowModel.getCommands().add(tempVar2); }
<START_MOD>void removeEventListener(org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.MessageListener el);<END_MOD>
<START_MOD>@org.junit.experimental.theories.Theory public void testCompare(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { storageDomain1.setStorageType(storageType); for (org.ovirt.engine.core.common.businessentities.storage.StorageType storageType2 : org.ovirt.engine.core.common.businessentities.storage.StorageType.values()) { storageDomain2.setStorageType(storageType2); int compareTypes = java.lang.Boolean.compare(storageType.isShared(), storageType2.isShared()); int comparatorReturnValue = comparator.compare(storageDomain1, storageDomain2); assertEquals((compareTypes < 0), (comparatorReturnValue < 0)); assertEquals((compareTypes == 0), (comparatorReturnValue == 0)); assertEquals((compareTypes > 0), (comparatorReturnValue > 0)); } }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAllWithUniqueId(java.lang.String id) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getCallsHandler().executeReadList("GetVdsByUniqueID", org.ovirt.engine.core.dao.<START_MOD>VdsDAOImpl<END_MOD>.VdsRowMapper.instance, getCustomMapSqlParameterSource().addValue("vds_unique_id", id)); return uniteAgents(vdsList); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((id) == null ?   : id.hashCode()); result = (prime * result) + ((compatVersion) == null ?   : compatVersion.hashCode()); result = (prime * result) + ((compatibility_version) == null ?   : compatibility_version.hashCode()); result = (prime * result) + ((cpu_name) == null ?   : cpu_name.hashCode()); result = (prime * result) + ((description) == null ?   : description.hashCode()); result = (prime * result) + (max_vds_memory_over_commit); result = (prime * result) + (countThreadsAsCores ? 1231 : 1237); result = (prime * result) + ((migrateOnError) == null ?   : migrateOnError.hashCode()); result = (prime * result) + ((name) == null ?   : name.hashCode()); result = (prime * result) + ((storagePoolId) == null ?   : storagePoolId.hashCode()); result = (prime * result) + ((storagePoolName) == null ?   : storagePoolName.hashCode()); result = (prime * result) + (transparentHugepages ? 1231 : 1237); result = (prime * result) + (virtService ? 1231 : 1237); result = (prime * result) + (glusterService ? 1231 : 1237); result = (prime * result) + (tunnelMigration ? 1231 : 1237); result = (prime * result) + ((emulatedMachine) == null ?   : emulatedMachine.hashCode()); result = (prime * result) + (trustedService ? 1231 : 1237); result = (prime * result) + ((clusterPolicyName) == null ?   : clusterPolicyName.hashCode()); result = (prime * result) + ((clusterPolicyProperties) == null ?   : clusterPolicyProperties.hashCode()); result = (prime * result) + (enableBallooning ? 1231 : 1237); <START_MOD>result = (prime * result) + (schedulerOptimizeForSpeed ? 1231 : 1237); <END_MOD>return result; }
@org.junit.Test public void testStoragePoolIsNotUp() { setUpGeneralValidations(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND)).when(storagePoolValidator).isUp(); doReturn(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList()).when(cmd).getDisksList(); assertFalse(cmd.<START_MOD>validate<END_MOD>()); assertTrue(cmd.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().contains(EngineMessage.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND.name())); }
protected boolean checkTemplateInStorageDomain() { boolean retValue = validate(org.ovirt.engine.core.bll.ImportVmCommand.getImportValidator().verifyDisks(imageList, imageToDestinationDomainMap)); if ((retValue && (!(VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getVm().getVmtGuid())))) && (!(getParameters().getCopyCollapse()))) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domains = runInternalQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new org.ovirt.engine.core.common.queries.IdQueryParameters(getVm().getVmtGuid())).getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> domainsId = org.ovirt.engine.core.utils.linq.LinqUtils.transformToList(domains, new org.ovirt.engine.core.utils.linq.Function<org.ovirt.engine.core.common.businessentities.StorageDomain, org.ovirt.engine.core.compat.Guid>() { @java.lang.Override public org.ovirt.engine.core.compat.Guid eval(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomainStatic) { return storageDomainStatic.getId(); } }); if (java.util.Collections.disjoint(domainsId, imageToDestinationDomainMap.values())) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return retValue; }
<START_MOD>private org.ovirt.engine.core.common.businessentities.storage.CinderDisk cloneDiskForStateless() { org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDependentVolume = getDisk(); initCinderDependentVolume(cinderDependentVolume); cinderDependentVolume.setActive(true); java.lang.String volumeId = org.ovirt.engine.core.bll.storage.disk.cinder.CreateCinderSnapshotCommand.getCinderBroker().cloneDisk(cinderDependentVolume); org.ovirt.engine.core.compat.Guid destinationImageId = org.ovirt.engine.core.compat.Guid.createGuidFromString(volumeId); org.ovirt.engine.core.bll.storage.disk.cinder.CreateCinderSnapshotCommand.getParameters().setDestinationImageId(destinationImageId); cinderDependentVolume.setImageId(destinationImageId); return cinderDependentVolume; }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Messages<END_MOD>.DefaultMessage( that some of the selected VMs are already running on this Host and will not be migrated. java.lang.String migrateSomeVmsAlreadyRunningOnHost();
private boolean validateDestStorageAndSourceStorageOfSameTypes(org.ovirt.engine.core.common.businessentities.StorageDomain destDomain, org.ovirt.engine.core.common.businessentities.StorageDomain sourceDomain) { if ((destDomain.getStorageType().getStorageSubtype()) != (sourceDomain.getStorageType().getStorageSubtype())) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_DESTINATION_AND_SOURCE_STORAGE_SUB_TYPES_DIFFERENT); } return true; }
@org.junit.Test public void <START_MOD>allPassthroughVnicsMigratableNoVnics<END_MOD>() { <START_MOD>allPassthroughVnicsMigratableCommon<END_MOD>(vm.getId(), 0); <START_MOD>assertThatAllPassthroughVnicsMigratable<END_MOD>(true); }
<START_MOD>private void updatePassDiscardChangeabilityForDirectLun() { if (((getSanStorageModelBase()) != null) && ((getSanStorageModelBase().getAddedLuns()) != null)) { if (getSanStorageModelBase().getAddedLuns().isEmpty()) { getPassDiscard().setIsChangeable(false, null); } else { getPassDiscard().setIsChangeable(isLunSupportDiscard(getSanStorageModelBase().getAddedLuns().get(0).getEntity()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); if (!(getPassDiscard().getIsChangable())) { getPassDiscard().setEntity(false); } } } else if ((getLunDisk()) != null) { getPassDiscard().setIsChangeable(isLunSupportDiscard(getLunDisk().getLun()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); } }<END_MOD>
@org.junit.Test public void <START_MOD>validateSameSourceAndDest<END_MOD>() throws java.lang.Exception { createParameters(srcStorageId, srcStorageId); org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); assertFalse(command.<START_MOD>validate<END_MOD>()); assertTrue(command.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().contains(EngineMessage.ACTION_TYPE_FAILED_SOURCE_AND_TARGET_SAME.name())); }
public static boolean isImagesExists(java.lang.Iterable<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, org.ovirt.engine.core.compat.Guid storagePoolId) { return org.ovirt.engine.core.bll.<START_MOD>storage.disk.image.<END_MOD>ImagesHandler.isImagesExists(images, storagePoolId, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage>()); }
<START_MOD>protected boolean isEditEnabled() { return (((getVm()) != null) && (getVm().isDown())) || (!(getDisk().getPlugged())); }<END_MOD>
<START_MOD>@java.lang.Override public void scheduleFinally(org.ovirt.engine.ui.frontend.ScheduledCommand cmd) { }<END_MOD>
java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>Bookmarks<END_MOD>> getAll();
<START_MOD>@java.lang.Override public int hashCode() { return java.util.Objects.hash(getHost(), pageSize); }<END_MOD>
@org.junit.Test public void onTimerFullConfig() { org.ovirt.engine.core.common.config.Config.<java.util.Map<java.lang.String, java.lang.String>>GetValue(ConfigValues.AutoRecoveryAllowedTypes).put("hosts", java.lang.Boolean.TRUE.toString()); manager.onTimer(); verify(backendMock, times(vdss.size())).runInternalAction(eq(VdcActionType.ActivateVds), any(org.ovirt.engine.core.common.action.VdcActionParametersBase.class)); }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainStatic> filterAttachedStorageDomains() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainStatic> storageDomainStaticList = new java.util.ArrayList<>(); if ((org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>GetFileStorageDomainsWithAttachedStoragePoolGuidQuery.getParameters().getStorageDomainList()) != null) { storageDomainStaticList = getAttachedStorageDomains(org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>GetFileStorageDomainsWithAttachedStoragePoolGuidQuery.getParameters().getStorageDomainList()); } else if ((org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>GetFileStorageDomainsWithAttachedStoragePoolGuidQuery.getParameters().getStorageServerConnection()) != null) { storageDomainStaticList = getStorageDomainsByStorageServerConnections(org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>GetFileStorageDomainsWithAttachedStoragePoolGuidQuery.getParameters().getStorageServerConnection()); } return storageDomainStaticList; }
public java.util.Map createStorageDomain(java.lang.Integer storageType, java.lang.String sdUUID, java.lang.String domainName, java.lang.String typeSpecificArg, java.lang.Integer domClass, java.lang.String storageFormatType) { log.info( domain sdUUID: {}, name: {} created. sdUUID, domainName); org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.StorageDomain storageDomain = getStorageDomainById(sdUUID); storageDomain.setName(domainName); storageDomain.setConnection(typeSpecificArg); storageDomain.setDomainClass(StorageDomain.DomainClass.getByCode(domClass)); storageDomain.setStorageType(StorageDomain.StorageType.getByCode(storageType)); updateStorageDomain(storageDomain); return getOKStatus(); }
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Role> getAllForApplicationMode(int appMode) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetAllRolesByApplicationMode", org.ovirt.engine.core.dao.RoleDAODbFacadeImpl.RolesRowMapper.instance, parameterSource); }<END_MOD>
public boolean canRunVm(java.util.List<java.lang.String> messages, org.ovirt.engine.core.common.businessentities.StoragePool storagePool, java.util.List<org.ovirt.engine.core.compat.Guid> vdsBlackList, org.ovirt.engine.core.compat.Guid destVds, org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup) { if (((((((((<START_MOD>(((<END_MOD>!(validateVmProperties(vm, messages))) || (!(validate(validateBootSequence(vm, runVmParam.getBootSequence(), getVmDisks()), messages)))) || (!(validate(new org.ovirt.engine.core.bll.validator.VmValidator(vm).vmNotLocked(), messages)))) || (!(validate(getSnapshotValidator().vmNotDuringSnapshot(vm.getId()), messages)))) || (!(validate(validateVmStatusUsingMatrix(vm), messages)))) || (!(validate(<START_MOD>validateStoragePoolUp(vm, storagePool, getVmImageDisks()), messages)))) || (!(validate(<END_MOD>validateIsoPath(vm, runVmParam.getDiskPath(), runVmParam.getFloppyPath()), messages)))) || (!(validate(vmDuringInitialization(vm), messages)))) || (!(validate(validateVdsStatus(vm), messages)))) || (!(validate(validateStatelessVm(vm, getVmDisks(), runVmParam.getRunAsStateless<START_MOD>()), messages)))) || (!(validate(validateStorageDomains(vm, isInternalExecution, getVmImageDisks()), messages)))) || (!(validate(validateImagesForRunVm(vm, getVmImageDisks<END_MOD>()), messages)))) { return false; } <START_MOD>if (!(<END_MOD>org.ovirt.engine.core.bll.<START_MOD>scheduling.SchedulingManager.getInstance().canSchedule(vdsGroup, vm, vdsBlackList, null, destVds, messages<END_MOD>))) { return false; } return true; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.VM.class, to = org.ovirt.engine.api.model.VmPool.class) public static org.ovirt.engine.api.model.VmPool map(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.api.model.VmPool template) { org.ovirt.engine.api.model.VmPool model = (template != null) ? template : new org.ovirt.engine.api.model.VmPool(); org.ovirt.engine.api.model.VM vmModel = org.ovirt.engine.api.restapi.types.VmMapper.map(vm, ((org.ovirt.engine.api.model.VM) (null))); vmModel.setCluster(null); vmModel.setTemplate(null); vmModel.<START_MOD>setVmpool<END_MOD>(null); model.setVm(vmModel); return model; }
@org.junit.Test public void checkCidrNetworkAddressValidation() { runSetup(org.ovirt.engine.core.common.validation.CidrConstraintTest.TEST_CIDR, true, false, <START_MOD>EngineMessages<END_MOD>.CIDR_NOT_NETWORK_ADDRESS.name()); runVerify(org.ovirt.engine.core.common.validation.CidrConstraintTest.TEST_CIDR, <START_MOD>EngineMessages<END_MOD>.CIDR_NOT_NETWORK_ADDRESS.name()); }
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.profiles.ProfileBaseModel<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile, org.ovirt.engine.core.common.businessentities.qos.StorageQos, org.ovirt.engine.core.common.businessentities.StorageDomain> getEditProfileModel() { return new org.ovirt.engine.ui.uicommonweb.models.profiles.EditDiskProfileModel(this, getSelectedItem(), getStoragePoolId()); }
protected void updateQuery(final javax.persistence.Query query) { <START_MOD>entityManager.joinTransaction(); <END_MOD>query.executeUpdate(); }
<START_MOD>private boolean getAllowOptimizeAvailability(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { if ((volume.getReplicaCount()) == 3) { return true; } return false; }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultStringValue("Share memory pages across all available memory (best KSM effectivness)") java.lang.String shareKsmAcrossNumaNodes();<END_MOD>
<START_MOD>@org.junit.Test public void testAddHostedEngineStorageFails() { parameters.getStorageDomain().setStorageName(StorageConstants.HOSTED_ENGINE_STORAGE_DOMAIN_NAME); assertFalse(command.canAddDomain()); org.ovirt.engine.core.bll.CanDoActionTestUtils.assertCanDoActionMessages("", command, VdcBllMessages.ACTION_TYPE_FAILED_HOSTED_ENGINE_STORAGE); }<END_MOD>
public org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal getTotalCpuMemCount() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal result = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.TOTAL_CPU_MEMORY_COUNT, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @<END_MOD>java.<START_MOD>lang.Override public void onResult(java.<END_MOD>sql.<START_MOD>ResultSet rs) throws java.sql.<END_MOD>SQLException { <START_MOD>while (rs.next()) { result.setCpuTotal(rs.getInt<END_MOD>(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.<START_MOD>CPU_TOTAL)); result.setMemTotal(rs.getDouble<END_MOD>(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEM_TOTAL)); } } <START_MOD>}); <END_MOD>return result; }
@org.junit.Test public void PctThresholdMoreThan100() { org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings settings = new org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings(); settings.diskSpaceFree = 10; settings.diskSpaceUsed = 0; settings.spaceThresholdGB = 5; settings.spaceThresholdPct = 110; org.ovirt.engine.core.common.businessentities.storage_domains domain = setupForSpaceTest(settings); assertFalse(org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.<START_MOD>isAboveThresholds<END_MOD>(domain)); }
<START_MOD>@java.lang.Override public javax.ws.rs.core.Response unregisteredStorageDomains(org.ovirt.engine.api.model.Action action) { validateParameters(action, "iscsi.address"); org.ovirt.engine.api.model.IscsiDetails iscsiDetails = action.getIscsi(); java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> storageServerConnections = new java.util.ArrayList<>(); for (java.lang.String iscsiTarget : action.getIscsiTargets()) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connectionDetails = getInitializedConnectionIscsiDetails(action); connectionDetails.setiqn(iscsiTarget); storageServerConnections.add(connectionDetails); } org.ovirt.engine.core.common.queries.GetUnregisteredBlockStorageDomainsParameters unregisteredBlockStorageDomainsParameters = new org.ovirt.engine.core.common.queries.GetUnregisteredBlockStorageDomainsParameters(guid, org.ovirt.engine.core.common.businessentities.StorageType.ISCSI, storageServerConnections); try { org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain>, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections>> pair = getEntity(org.ovirt.engine.core.common.utils.Pair.class, VdcQueryType.GetUnregisteredBlockStorageDomains, unregisteredBlockStorageDomainsParameters, "GetUnregisteredBlockStorageDomains", true); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = pair.getFirst(); return actionSuccess(mapToStorageDomains(action, storageDomains)); } catch (java.lang.Exception e) { return handleError(e, false); } }<END_MOD>
private void generateRequestImplementation(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Name name = method.getName(); java.lang.String request = getRequestName(method); java.lang.String requestImpl = getRequestImplName(method); buffer.addLine( class %1$s implements %2$s { requestImpl, request); method.parameters().filter(Parameter::isIn).sorted().forEach(this::generateRequestParameterImplementation); buffer.<START_MOD>addImport(java.util.Map.class); buffer.addLine( Map<String, String> headers; buffer.addLine( %1s headers(Map<String, String> headers) { request); buffer.addLine( = headers; buffer.addLine( this; buffer.addLine("}"); buffer.addLine( Map<String, String> query; buffer.addLine( %1s query(Map<String, String> query) { request); buffer.addLine( = query; buffer.addLine( this; buffer.addLine("}"); buffer.<END_MOD>addLine( %1$s send() { getResponseName(method)); if (org.ovirt.sdk.java.ServicesImplGenerator.ADD.equals(name)) { generateAddRequestImplementation(method); } else if ((org.ovirt.sdk.java.ServicesImplGenerator.GET.equals(name)) || (org.ovirt.sdk.java.ServicesImplGenerator.LIST.equals(name))) { generateListRequestImplementation(method); } else if (org.ovirt.sdk.java.ServicesImplGenerator.REMOVE.equals(name)) { generateRemoveRequestImplementation(method); } else if (org.ovirt.sdk.java.ServicesImplGenerator.UPDATE.equals(name)) { generateUpdateRequestImplementation(method); } else { generateActionRequestImplementation(method); } buffer.addLine("}"); buffer.addLine(); buffer.addLine("}"); buffer.addLine(); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot update host's mom policy. Host is null.") java.lang.String ACTION_TYPE_FAILED_UPDATE_MOM_POLICY_UPDATE_NULL_HOST();<END_MOD>
<START_MOD>@org.junit.Test public void canDoActionFailsOnNull() { org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters params = new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters(); params.setServerServiceId(null); cmd = spy(new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand(params)); prepareMocks(cmd); assertFalse(cmd.canDoAction()); }<END_MOD>
@org.junit.Test public void testAddGroupPermission() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUpCreationExpectations(VdcActionType.AddPermission, org.ovirt.engine.core.common.action.PermissionsOperationsParameters.class, new java.lang.String[]{ "Group.Id", "Permission.ad_element_id", "Permission.ObjectId", "Permission.role_id" }, new java.lang.Object[]{ GUIDS[1], GUIDS[1], targetId, GUIDS[3] }, true, true, GUIDS[0], VdcQueryType.GetPermissionById, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[0] }, getEntity(0)); org.ovirt.engine.api.model.Permission model = new org.ovirt.engine.api.model.Permission(); model.setRole(new org.ovirt.engine.api.model.Role()); model.getRole().setId(GUIDS[3].toString()); model.setGroup(new org.ovirt.engine.api.model.Group()); model.getGroup().setId(<START_MOD>org.ovirt.engine.api.restapi.utils.DirectoryEntryIdUtils.generateId(<END_MOD>GUIDS[1].toString()<START_MOD>,        <END_MOD> javax.ws.rs.core.Response response = collection.add(model); assertEquals(201, response.getStatus()); assertTrue(((response.getEntity()) instanceof org.ovirt.engine.api.model.Permission)); verifyModel(((org.ovirt.engine.api.model.Permission) (response.getEntity())), 0); }
<START_MOD>public void setStepId(org.ovirt.engine.core.compat.NGuid stepId) { this.stepId = stepId; }<END_MOD>
private org.ovirt.engine.core.bll.network.host.SetupNetworksHelper createHelper(org.ovirt.engine.core.common.action.SetupNetworksParameters params) {<START_MOD> org.ovirt.engine.core.common.businessentities.VDS vds = mock(org.ovirt.engine.core.common.businessentities.VDS.class); when(vds.getId()).thenReturn(Guid.Empty);<END_MOD> org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = spy(new org.ovirt.engine.core.bll.network.host.SetupNetworksHelper(params, <START_MOD>vds<END_MOD>)); when(helper.getVmInterfaceManager()).thenReturn(vmInterfaceManager); org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacade = mock(org.ovirt.engine.core.dal.dbbroker.DbFacade.class); doReturn(dbFacade).when(helper).getDbFacade(); doReturn(interfaceDAO).when(dbFacade).getInterfaceDao(); doReturn(mock(org.ovirt.engine.core.dao.VdsDAO.class)).when(dbFacade).getVdsDao(); doReturn(networkDAO).when(dbFacade).getNetworkDao(); return helper; }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand.getParameters().getVdsId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VDS, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
@java.lang.Override public java.lang.Void runInTransaction() { for (org.ovirt.engine.core.common.businessentities.DiskImage disk : disks) { org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters p = new org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters(containerID, disk.getId(), disk.getImageId(), getParameters().getStorageDomainId(), getMoveOrCopyImageOperation()); p.setParentCommand(getActionType()); p.<START_MOD>setEntityInfo<END_MOD>(getParameters().<START_MOD>getEntityInfo<END_MOD>()); p.setAddImageDomainMapping(((getMoveOrCopyImageOperation()) == (org.ovirt.engine.core.common.businessentities.ImageOperation.Copy))); p.setSourceDomainId(imageFromSourceDomainMap.get(disk.getId()).getStorageIds().get(0)); p.setParentParameters(getParameters()); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = getBackend().runInternalAction(VdcActionType.MoveOrCopyImageGroup, p, org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks(getExecutionContext())); getReturnValue().getVdsmTaskIdList().addAll(vdcRetValue.getInternalVdsmTaskIdList()); } return null; }
@java.lang.Override public javax.ws.rs.core.Response deactivate(org.ovirt.engine.api.model.Action action) { <START_MOD>boolean forceMaintenance = ((action.isForce()) == null) ? false : action.isForce(); <END_MOD>return doAction(ActionType.DeactivateStorageDomainWithOvfUpdate, new org.ovirt.engine.core.common.action.<START_MOD>DeactivateStorageDomainWithOvfUpdateParameters<END_MOD>(guid, dataCenterId<START_MOD>, forceMaintenance<END_MOD>), action); }
@org.junit.Test public void canDoActionFailsOnNullHookId() { cmd = spy(new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand<org.ovirt.engine.core.common.action.gluster.GlusterHookParameters>(new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters(null))); setupMocks(cmd); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED.toString())); }
<START_MOD>@java.lang.Override public java.lang.String getValue(java.lang.Object object) { int numOfDisks = getEntity(object).getDiskList().size(); return java.lang.String.valueOf(numOfDisks); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult validateUsbDevices(org.ovirt.engine.core.common.businessentities.VmBase vm) { if ((vm.getUsbPolicy()) == (org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED)) { final java.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> usbControllers = getVmDeviceUtils().getUsbControllers(vm.getId()); final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> unmanagedControllers = usbControllers.stream().filter(( d) -> !(d.isManaged())).collect(java.util.stream.Collectors.toList()); if ((unmanagedControllers.size()) > 1) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_USB_UNMANAGED_DEV_EXCEEDED_LIMIT, java.lang.String.format("$VmName %1$s", vm.getName()), java.lang.String.format("$UnmanagedUsbDevices %1$s", unmanagedControllers)); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
void addMenuItem(int index, java.lang.String label, java.lang.String href<START_MOD>, java.lang.String primaryMenuId, java.lang.String iconCssName<END_MOD>);
@java.lang.Override public org.ovirt.engine.core.common.businessentities.AsyncTask getByVdsmTaskId(org.ovirt.engine.core.compat.Guid vdsmTaskId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vdsm_task_id", vdsmTaskId); return getCallsHandler().executeRead("GetAsyncTasksByVdsmTaskId", org.ovirt.engine.core.dao.<START_MOD>AsyncTaskDAOImpl<END_MOD>.AsyncTaskRowMapper.instance, parameterSource); }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.businessentities.Cluster getCluster() { if ((_cluster) == null) { _cluster = org.ovirt.engine.core.bll.ClusterCommandBase.getClusterDao().get(org.ovirt.engine.core.bll.ClusterCommandBase.getParameters().getClusterId()); } return _cluster; }<END_MOD>
<START_MOD>public static void cancelTasks(final org.ovirt.engine.core.bll.CommandBase command) { org.ovirt.engine.core.bll.tasks.CommandCoordinator.getInstance().cancelTasks(command); }<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response undelete(org.ovirt.engine.api.model.Action action) { return performAction(VdcActionType.<START_MOD>HandleAuditLogAlertsVisibility<END_MOD>, new org.ovirt.engine.core.common.action.<START_MOD>HandleAuditLogAlertsVisibilityParameters<END_MOD>(<START_MOD>true<END_MOD>), action, false); }
<START_MOD>@org.ovirt.engine.ui.common.Template("This is not entire kernel command line. Parameters listed below will be added to default kernel parameters.") com.google.gwt.safehtml.shared.SafeHtml kernelCmdlineInfoIcon();<END_MOD>
@org.junit.Test public void testHandleActionResult() { org.ovirt.engine.core.common.action.VdcActionParametersBase testParameters = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnValue.<START_MOD>setValidate<END_MOD>(false); frontend.handleActionResult(VdcActionType.AddDisk, testParameters, returnValue, mockActionCallback, testState, false); verify(mockActionCallback).executed(callbackParam.capture()); assertEquals( should match testParameters, callbackParam.getValue().getParameters()); assertEquals( should match returnValue, callbackParam.getValue().getReturnValue()); assertEquals( should match testState, callbackParam.getValue().getState()); assertEquals( type should match VdcActionType.AddDisk, callbackParam.getValue().getActionType()); }
@org.junit.Test public void diskImagesOnAnyApplicableDomainsValidDomains() { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Set<org.ovirt.engine.core.compat.Guid>> validDomainsForDisk = createDiskValidDomainsMap(disk1, disk2); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomainMap = createStorageDomainsMap(disk1, disk2); assertThat(validator.diskImagesOnAnyApplicableDomains(validDomainsForDisk, storageDomainMap, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NO_VALID_DOMAINS_STATUS_FOR_TEMPLATE_DISKS, java.util.EnumSet.of(StorageDomainStatus.Active)), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
public static void store(org.ovirt.vdsmfake.domain.BaseObject baseObject, java.io.File f) { <START_MOD>if ((baseObject.getName().contains("?")) && (baseObject instanceof org.ovirt.vdsmfake.domain.DataCenter)) { baseObject.setName(baseObject.getId()); } <END_MOD>java.io.ObjectOutputStream oos = null; try { oos = new java.io.ObjectOutputStream(new java.io.FileOutputStream(f)); oos.writeObject(baseObject); } catch (java.lang.Exception e) { org.ovirt.vdsmfake.PersistUtils.log.error( save object e); throw new java.lang.RuntimeException( save object e); } finally { org.apache.commons.io.IOUtils.closeQuietly(oos); baseObject.setLastUpdate(f.lastModified()); } }
private void initLoadBalance() { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> balancePolicyUnits = getBalancePolicyUnits(policyUnits); getLoadBalanceList().setItems(balancePolicyUnits); if ((clusterPolicy.getBalance()) != null) { currentLoadBalance = policyUnitsMap.get(clusterPolicy.getBalance()); } else { currentLoadBalance = policyUnitsMap.get(org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.NewClusterPolicyModel.NONE_POLICY_UNIT); } getLoadBalanceList().setIsChangable((!(clusterPolicy.isLocked()))); getLoadBalanceList().setSelectedItem(currentLoadBalance); getLoadBalanceList().getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.EventArgs><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { refreshCustomProperties(currentLoadBalance, false); currentLoadBalance = getLoadBalanceList().getSelectedItem()<START_MOD>; } }); }<END_MOD>
<START_MOD>private java.util.Collection<java.lang.String> acquireSubTemplatesLock() { final java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> lockExclusiveMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VmTemplate templateSubVersion : templateSubVersions) { lockExclusiveMap.put(templateSubVersion.getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.TEMPLATE, createSubTemplateLockMessage(templateSubVersion))); } subTemplatesLock = new org.ovirt.engine.core.utils.lock.EngineLock(lockExclusiveMap); final org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.util.Set<java.lang.String>> isLockedAndFailReason = org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getLockManager().acquireLock(subTemplatesLock); if (isLockedAndFailReason.getFirst()) { return null; } subTemplatesLock = null; java.util.List<java.lang.String> lockFailReasons = extractVariableDeclarations(isLockedAndFailReason.getSecond()); return lockFailReasons; }<END_MOD>
public static void GetWANDisableEffects(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects>(); } java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects> res = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects>(); java.lang.String fromDb = ((java.lang.String) (source)); for (java.lang.String value : fromDb.split(",")) { if (value == null) { continue; } java.lang.String trimmedValue = value.trim(); if ("".equals(trimmedValue)) { continue; } res.add(org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects.fromString(trimmedValue)); } return res; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.GetConfigurationValueParameters(ConfigurationValues.WANDisableEffects, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }
public int getPort() { return mVdsStatic.getPort(); }
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__CREATE); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__GLUSTER_VOLUME); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getExportCommand())) { export(); } else if ("Cancel".equals(command.getName())) { cancel(); } else if ("OnExport".equals(command.getName())) { onExport(); } else if ("OnSave".equals(command.getName())) { onSave(); } else if (<START_MOD>"postNameUniqueCheck".equals(command.getName())) { postNameUniqueCheck(); setConfirmWindow(null); } else if (<END_MOD>"OnRemove".equals(command.getName())) { onRemove(); } else if ("OnExportNoTemplates".equals(command.getName())) { doExport(); } else if ("CancelConfirmation".equals(command.getName())) { cancelConfirmation(); } }
@org.junit.Test public void testGetAllRolesForUserAndGroupByAdElement() { java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD>> result = dao.getAllForAdElement(org.ovirt.engine.core.dao.RoleDAOTest.USER_ID); assertNotNull(result); assertFalse(result.isEmpty()); }
public org.ovirt.engine.core.common.businessentities.AsyncTasks createAsyncTask(org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { org.ovirt.engine.core.<START_MOD>compat.Guid parentCommandId = ((command.getParameters().getParentParameters()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : command.getParameters().getParentParameters().getCommandId(); org.ovirt.engine.core.<END_MOD>common.action.VdcActionParametersBase parentParameters = command.getParentParameters(parentCommand); if (VdcActionType.Unknown.equals(command.getParameters().getCommandType())) { command.getParameters().setCommandType(command.getActionType()); } org.ovirt.engine.core.common.businessentities.AsyncTasks asyncTask = new org.ovirt.engine.core.common.businessentities.AsyncTasks(<START_MOD>org.ovirt.engine.core.common.businessentities.AsyncTaskResultEnum.success, org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.running, asyncTaskCreationInfo.getVdsmTaskId(), asyncTaskCreationInfo.getStepId(), asyncTaskCreationInfo.getStoragePoolID(), asyncTaskCreationInfo.getTaskType(), getParentCommandEntity(parentCommandId, <END_MOD>parentCommand, parentParameters<START_MOD>), getChildCommandEntity(command, parentCommand<END_MOD>)); return asyncTask; }
@org.junit.Test public void <START_MOD>allPassthroughVnicsMigratableMulitpleVmsNotValid<END_MOD>() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = initValidatorWithMultipleVms(3); <START_MOD>allPassthroughVnicsMigratableCommon<END_MOD>(vmList.get(0).getId(), 2); vmNotHavingPassthroughVnicsCommon(vmList.get(1).getId(), <START_MOD>0, 1<END_MOD>, 8); <START_MOD>allPassthroughVnicsMigratableCommon<END_MOD>(vmList.get(2).getId(), 4); assertThat(validator.<START_MOD>allPassthroughVnicsMigratable<END_MOD>(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.<START_MOD>ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED<END_MOD>)); }
public static <TSource> java.lang.Iterable<TSource> Where(java.lang.Iterable<TSource> source, org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<TSource> predicate) { java.util.ArrayList<TSource> list = new java.util.ArrayList<TSource>(); for (TSource item : source) { if (predicate.<START_MOD>match<END_MOD>(item)) { list.add(item); } } return list; }
void attachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().add(alertPanel); com.google.gwt.dom.client.Element messageDivElement = alertPanel.getMessageAt(0).getElement(); if (org.ovirt.engine.ui.common.utils.ElementUtils.detectOverflowUsingScrollWidth(messageDivElement)) { com.google.gwt.safehtml.shared.SafeHtml tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(messageDivElement.getInnerText()); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltipContent<START_MOD>.asString()<END_MOD>, alertPanel.getElement()); } }
private void vmInitLoaded(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.UserPortalExistingVmModelBehavior(vm)<START_MOD>, this<END_MOD>); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editVmTitle()); model.setHelpTag(HelpTag.edit_vm); model.setHashName("edit_vm"); model.getVmType().setSelectedItem(vm.getVmType()); model.setCustomPropertiesKeysList(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getCustomPropertiesList()); model.setIsAdvancedModeLocalStorageKey("up_vm_dialog"); setWindow(model); model.initialize(null); org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand switchModeCommand = new org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand(); switchModeCommand.init(model); model.getCommands().add(switchModeCommand); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSave", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
private org.ovirt.engine.core.bll.context.CommandContext buildCommandContext(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); <START_MOD>org.ovirt.engine.core.common.utils.PersistedCommandContext persistedCommandContext = cmdEntity.getCommandContext(); <END_MOD>if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(<START_MOD>persistedCommandContext<END_MOD>.getJobId()))) { executionContext.setJob(jobRepository.getJobWithSteps(<START_MOD>persistedCommandContext<END_MOD>.getJobId())); } else if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(<START_MOD>persistedCommandContext<END_MOD>.getStepId()))) { executionContext.setStep(jobRepository.getStep(<START_MOD>persistedCommandContext<END_MOD>.getStepId())); } <START_MOD>if (org.apache.commons.lang.StringUtils.isNotEmpty(persistedCommandContext.getExecutionMethod())) { executionContext.setExecutionMethod(ExecutionContext.ExecutionMethod.valueOf(persistedCommandContext.getExecutionMethod())); } executionContext.setCompleted(persistedCommandContext.isCompleted()); executionContext.setJobRequired(persistedCommandContext.isJobRequired()); executionContext.setMonitored(persistedCommandContext.isMonitored()); executionContext.setShouldEndJob(persistedCommandContext.shouldEndJob()); executionContext.setTasksMonitored(persistedCommandContext.isTasksMonitored()); <END_MOD>return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext); }
@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { processRefreshVdsStatsResponse(((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result")))); <START_MOD>if (!(isVdsUpOrGoingToMaintenance)) { vdsManager.setStatus(VDSStatus.Up, vds); } <END_MOD>refreshVdsRunTimeInfo(<START_MOD>isVdsUpOrGoingToMaintenance<END_MOD>); } catch (java.lang.Throwable t) { onFailure(t); } }
<START_MOD>protected<END_MOD> void <START_MOD>onAdUsersLoaded<END_MOD>(org.ovirt.engine.ui.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models.users.AdElementListModel adElementListModel) { getSearchInProgress<END_MOD>(<START_MOD>).setEntity(false); java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.aaa.DbUser>> items = new java.util.ArrayList<>(); items.addAll(getusers()); adElementListModel.getSelectAll().setEntity(false); adElementListModel.setItems(items); setIsEmpty(items.isEmpty(<END_MOD>)); }
<START_MOD>@org.junit.Before public void prepareParams() { NFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.NFS, NfsVersion.V4, 50, 0); IscsiConnection = createIscsiConnection("10.11.12.225", StorageType.ISCSI, "iqn.2013-04.myhat.com:abc-target1", "user1", "mypassword", "1"); prepareCommand(); }<END_MOD>
@java.lang.Override protected boolean canDoAction() { if (((getParameters()) == null) || ((getParameters().getQuotaId()) == null)) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } org.ovirt.engine.core.common.businessentities.Quota quota = getQuota(); if (quota == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } if (<START_MOD>(<END_MOD>getQuotaDAO().isQuotaInUse(quota<START_MOD>)) && (!(quota.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED))<END_MOD>)) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_IN_USE_BY_VM_OR_DISK); return false; } return true; }
@java.lang.Override protected void readGeneralData(org.ovirt.engine.core.compat.backendcompat.XmlNode content) { org.ovirt.engine.core.compat.backendcompat.XmlNode node = content.SelectSingleNode("Name"); if (node != null) { _vmTemplate.setname(node.InnerText); name = _vmTemplate.getname(); } node = content.SelectSingleNode("TemplateId"); if (node != null) { if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(node.InnerText))) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(node.InnerText)); } } node = content.SelectSingleNode("default_display_type"); if (node != null) { if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(node.InnerText))) { _vmTemplate.setdefault_display_type(org.ovirt.engine.core.common.businessentities.DisplayType.forValue(java.lang.Integer.parseInt(node.InnerText))); } } <START_MOD>node = content.SelectSingleNode("IsDisabled"); if (node != null) { if (!(org.apache.commons.lang.StringUtils.isEmpty(node.InnerText))) { _vmTemplate.setDisabled(java.lang.Boolean.parseBoolean(node.InnerText)); } } }<END_MOD>
private void warnIfNotAllDisksPermitSnapshots() { for (org.ovirt.engine.core.<START_MOD>bll<END_MOD>.Disk disk : org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values()) { if (!(disk.isAllowSnapshot())) { auditLogDirector.log(this, AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT); break; } } }
public void runQuery(org.ovirt.engine.core.compat.Guid guid) { startProgress("getCount"); org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncQuery<END_MOD> = new org.ovirt.engine.ui.frontend.AsyncQuery(); <START_MOD>asyncQuery<END_MOD>.setHandleFailure(true); <START_MOD>asyncQuery<END_MOD>.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { stopProgress(); org.ovirt.engine.<START_MOD>core.common.businessentities.ErrataCounts resultEntity = returnValue.getReturnValue(); setMessage(null); if ((resultEntity != null) && (returnValue.getSucceeded())) { setErrataCounts(resultEntity); } else { setMessage((((org.ovirt.engine.<END_MOD>ui.uicommonweb.models.AbstractErrataCountModel<START_MOD>.constants.katelloProblemRetrievingErrata()) +     + (returnValue.getExceptionMessage()))); } } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(getQueryType(), new<END_MOD> org.ovirt.engine.core.common.queries.<START_MOD>GetErrataCountsParameters(guid<END_MOD>), <START_MOD>asyncQuery); }<END_MOD>
<START_MOD>private java.lang.Integer calcMaxVCpu() { java.lang.Integer maxSockets = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmSockets, vm.getCompatibilityVersion().getValue()); java.lang.Integer maxVCpus = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmCpus, vm.getCompatibilityVersion().getValue()); int threadsPerCore = vm.getThreadsPerCpu(); int cpuPerSocket = vm.getCpuPerSocket(); maxVCpus = (cpuPerSocket * threadsPerCore) * (java.lang.Math.min(maxSockets, (maxVCpus / (cpuPerSocket * threadsPerCore)))); return maxVCpus; }<END_MOD>
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if ((org.ovirt.engine.core.bll.numa.vm.AbstractVmNumaNodeCommand.getVm()) == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } return validate(org.ovirt.engine.core.bll.numa.vm.NumaValidator.checkVmNumaNodesIntegrity(org.ovirt.engine.core.bll.numa.vm.AbstractVmNumaNodeCommand.getVm(), getVmNumaNodesForValidation())); }
private boolean refreshRepos(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.ImageFileType imageType, boolean forceRefresh) { boolean <START_MOD>refreshResult<END_MOD> = <START_MOD>false<END_MOD>; java.util.List<org.ovirt.engine.core.common.businessentities.RepoImage> tempProblematicRepoFileList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoImage>(); <START_MOD>org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(storageDomainId); <END_MOD>if (<START_MOD>!<END_MOD>forceRefresh) { <START_MOD>return true; } <END_MOD>if (<START_MOD>(storageDomain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) { refreshResult = <END_MOD>refreshIsoDomain(storageDomainId, tempProblematicRepoFileList, imageType)<START_MOD>; } else if ((storageDomain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Image)) { refreshResult = refreshImageDomain(storageDomain, tempProblematicRepoFileList, imageType); } else<END_MOD> { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.<START_MOD>log.errorFormat( to refresh the storage domain {0}, Storage Type {1} not supported storageDomainId, storageDomain.getStorageDomainType()); return false; } org.ovirt.engine.core.bll.IsoDomainListSyncronizer.<END_MOD>handleErrorLog(tempProblematicRepoFileList); <START_MOD>if (refreshResult) {<END_MOD> org.ovirt.engine.core.bll.IsoDomainListSyncronizer.addToAuditLogSuccessMessage(storageDomain.getStorageName(), imageType.name()); } return <START_MOD>refreshResult; }<END_MOD>
public java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> getUserRequestForStorageDomainRepoFileList(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType, boolean forceRefresh) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> repoList; if (!(isStorageDomainValid(storageDomainId, imageType, forceRefresh))) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.GetIsoListError); } repoList = getCachedIsoListByDomainId(storageDomainId, imageType); return repoList; }
<START_MOD>private static void verifyModelSpecific(org.ovirt.engine.api.model.Cdrom model, int index) { assertEquals(Guid.Empty.toString(), model.getId()); assertTrue(model.isSetTemplate()); assertEquals(org.ovirt.engine.api.restapi.resource.BackendTemplateCdromResourceTest.TEMPLATE_ID.toString(), model.getTemplate().getId()); assertTrue(model.isSetFile()); assertEquals(org.ovirt.engine.api.restapi.resource.BackendTemplateCdromResourceTest.ISO_PATH, model.getFile().getId()); }<END_MOD>
<START_MOD>public void logoutUser(final java.lang.Object userObject, final org.ovirt.engine.ui.frontend.communication.VdcUserCallback<?> callback) { loggedIn = false; processor.logoutUser(userObject, callback); }<END_MOD>
<START_MOD>protected<END_MOD> org.ovirt.engine.core.bll.job.ExecutionContext createMigrateVmContext(org.ovirt.engine.core.bll.job.ExecutionContext parentContext, org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.bll.job.ExecutionContext ctx = new org.ovirt.engine.core.bll.job.ExecutionContext(); try { java.util.Map<java.lang.String, java.lang.String> values = new java.util.HashMap<java.lang.String, java.lang.String>(); values.put(VdcObjectType.VM.name().toLowerCase(), vm.getVmName()); values.put(VdcObjectType.VDS.name().toLowerCase(), vm.getRunOnVdsName()); org.ovirt.engine.core.common.job.Step step = org.ovirt.engine.core.bll.job.ExecutionHandler.addSubStep(org.ovirt.engine.core.bll.MaintananceVdsCommand.getExecutionContext(), parentContext.getJob().getStep(StepEnum.EXECUTING), StepEnum.MIGRATE_VM, org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveStepMessage(StepEnum.MIGRATE_VM, values)); ctx.setStep(step); ctx.setMonitored(true); } catch (java.lang.RuntimeException e) { log.error( to create ExecutionContext for MigrateVmCommand e); } return ctx; }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__REMOVE); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__VM); }
private void copyTemplatePermissions(org.ovirt.engine.core.bll.UniquePermissionsSet permissionsToAdd) { org.ovirt.engine.core.dao.PermissionDAO dao = org.ovirt.engine.core.bll.AddVmCommand.getDbFacade().getPermissionDao(); java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> templatePermissions = dao.getAllForEntity(org.ovirt.engine.core.bll.AddVmCommand.getVmTemplateId(), org.ovirt.engine.core.bll.AddVmCommand.getCurrentUser().getId(), <START_MOD>org.ovirt.engine.core.bll.AddVmCommand.getSessionId(), <END_MOD>false); for (org.ovirt.engine.core.common.businessentities.Permissions templatePermission : templatePermissions) { boolean templateOwnerRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_OWNER.getId()); boolean templateUserRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_USER.getId()); if (templateOwnerRole || templateUserRole) { continue; } permissionsToAdd.addPermission(templatePermission.getad_element_id(), templatePermission.getrole_id(), org.ovirt.engine.core.bll.AddVmCommand.getVmId(), VdcObjectType.VM); } }
<START_MOD>@org.junit.Test public void testWriteFileToStreamIOException() { java.io.File file = new java.io.File("/doesnotexist/iamprettysure"); java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(); try { org.ovirt.engine.core.utils.ServletUtils.writeFileToStream(out, file); fail("Should not get here, file doesn't exist"); } catch (java.io.IOException ioe) { } }<END_MOD>
@java.lang.Override public void updateReportsPanel(java.lang.String url, java.util.Map<java.lang.String, java.util.List<java.lang.String>> params) { <START_MOD>if<END_MOD> (<START_MOD>!(org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.<START_MOD>ui<END_MOD>.<START_MOD>webadmin<END_MOD>.<START_MOD>section<END_MOD>.<START_MOD>main<END_MOD>.<START_MOD>view<END_MOD>.<START_MOD>tab<END_MOD>.<START_MOD>MainTabReportsView<END_MOD>.<START_MOD>reportsWebappDeployed<END_MOD>)) { <START_MOD>checkUpdateReportsPanel(url,<END_MOD> <START_MOD>params);<END_MOD> <START_MOD>}<END_MOD> <START_MOD>else<END_MOD> { <START_MOD>doUpdateReportsPanel<END_MOD>(<START_MOD>url<END_MOD>, <START_MOD>params<END_MOD>); } }
<START_MOD>private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getAffinityLabels(); for (org.ovirt.engine.core.common.businessentities.Label label : affinityLabels) { label.addVm(org.ovirt.engine.core.bll.AddVmCommand.getVm()); labelDao.update(label); } }<END_MOD>
<START_MOD>public org.ovirt.engine.ui.common.widget.dialog.tab.DialogTabPanel getTabPanel() { return mainTabPanel; }<END_MOD>
@org.junit.Test public void testLocalDcAndMatchingCompatiblityVersion() { storagePool.setcompatibility_version(Version.v3_0); storagePool.<START_MOD>setIsLocal<END_MOD>(<START_MOD>true<END_MOD>); assertTrue(validator.<START_MOD>isDcMatchingPosixCompatiblityVersion<END_MOD>().isValid()); }
<START_MOD>private void updateDiskProfiles(org.ovirt.engine.core.common.businessentities.StoragePool selectedItem) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getStorageDomain().getSelectedItem(); if (storageDomain == null) { return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetDiskProfilesByStorageDomainId, new org.ovirt.engine.core.common.queries.IdQueryParameters(storageDomain.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object innerModel, java.lang.Object innerReturnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> diskProfiles = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (innerReturnValue)).getReturnValue(); if ((diskProfiles != null) && (!(diskProfiles.isEmpty()))) { getDiskProfile().setItems(diskProfiles); } org.ovirt.engine.core.compat.Guid defaultProfileId = ((getDisk()) != null) ? ((org.ovirt.engine.core.common.businessentities.DiskImage) (getDisk())).getDiskProfileId() : null; if (defaultProfileId != null) { for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile profile : diskProfiles) { if (profile.getId().equals(defaultProfileId)) { getDiskProfile().setSelectedItem(profile); return; } } org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile = new org.ovirt.engine.core.common.businessentities.profiles.DiskProfile(); diskProfile.setId(defaultProfileId); if ((getDisk()) != null) { diskProfile.setName(getDiskImage().getDiskProfileName()); } diskProfiles.add(diskProfile); getDiskProfile().setItems(diskProfiles); getDiskProfile().setSelectedItem(diskProfile); } } }, getHash())); }<END_MOD>
protected void setDefaultSwitchTypeIfNeeded() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if (cluster.<START_MOD>hasRequiredSwitchType<END_MOD>(<START_MOD>null<END_MOD>)) { org.ovirt.engine.core.common.network.SwitchType defaultSwitchType = org.ovirt.engine.core.common.network.DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } }
<START_MOD>protected void addTaskIdToEntities(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.common.VdcObjectType entityType, org.ovirt.engine.core.compat.Guid... entityIds) { getAsyncTaskDao().addAsyncTaskToEntities(taskId, entityType, entityIds); }<END_MOD>
<START_MOD>@org.junit.Test public void validateCantUploadLockedImage() { initializeSuppliedImage(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED, "")).when(diskImagesValidator).diskImagesNotLocked(); assertFailsWithValidateMessage(getCommand(), EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED); }<END_MOD>
private java.lang.String createSpiceInvocationInfo() { return new org.ovirt.engine.ui.common.view.popup.ConsolePopupView.KeyValueHtmlRowMaker(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.auto(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokeAuto()).append(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.nativeClient(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.consoleInvokeNative()).append(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceHtml5(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokeHtml5()).toString(); }
public static boolean isSpecialDevice(java.lang.String device, <START_MOD>org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType<END_MOD> type) { return ((((<START_MOD>(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType<END_MOD>.SOUND<START_MOD>) == type<END_MOD>) || (VmDeviceType.USB.getName().equals(device))) || ((VmDeviceType.SMARTCARD.getName().equals(device)) && (<START_MOD>(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType<END_MOD>.SMARTCARD<START_MOD>) == type<END_MOD>))) || ((VmDeviceType.SPICEVMC.getName().equals(device)) && (<START_MOD>(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.CHANNEL) == type<END_MOD>))) || ((VmDeviceType.MEMBALLOON.getName().equals(device)) && (<START_MOD>(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType<END_MOD>.BALLOON<START_MOD>) == type<END_MOD>)); }
protected java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> getAllImageSnapshots(org.ovirt.engine.core.common.businessentities.DiskImage diskImage) { return org.ovirt.engine.core.bll.ImagesHandler.getAllImageSnapshots(diskImage.getImageId(), diskImage.<START_MOD>getItGuid<END_MOD>()); }
<START_MOD>@javax.ws.rs.POST @javax.ws.rs.Path("/{cluster:[^/]*}/{vm:[^/]*}") @javax.ws.rs.Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON) @javax.ws.rs.Consumes(javax.ws.rs.core.MediaType.APPLICATION_JSON) public java.util.Map<java.lang.String, org.ovirt.optimizer.common.ScoreResult> simpleSchedule(java.util.Map<java.lang.String, org.ovirt.optimizer.common.DebugSnapshot> snapshots, @javax.ws.rs.PathParam("cluster") java.lang.String cluster, @javax.ws.rs.PathParam("vm") java.lang.String vm) throws java.io.IOException { response.getOutputHeaders().putSingle("Access-Control-Allow-Origin", "*"); response.getOutputHeaders().putSingle("Access-Control-Allow-Methods", "POST"); response.getOutputHeaders().putSingle("Access-Control-Allow-Headers", "Content-Type"); if (!(configProvider.load().getConfig().getProperty(ConfigProvider.DEBUG_ENDPOINT_ENABLED, "false").equals("true"))) { response.sendError(403, "Debug url is disabled, please check your configuration."); return null; } org.ovirt.optimizer.service.problemspace.OptimalDistributionStepsSolution baseSolution = null; if (snapshots != null) { org.ovirt.optimizer.common.DebugSnapshot snapshot = snapshots.get(cluster); if (snapshot != null) { baseSolution = snapshot.getState(); } } return optimizer.simpleSchedule(cluster, baseSolution, vm); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Import") java.lang.String importNetworksButton();
@org.junit.Test public void testFenceStatus() throws java.lang.Exception { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); retVal.setSucceeded(true); retVal.setReturnValue(new org.ovirt.engine.core.common.businessentities.<START_MOD>pm.FenceOperationResult(FenceOperationResult.Status.SUCCESS, org.ovirt.engine.core.common.businessentities.pm.HostPowerStatus.ON<END_MOD>)); setUpEntityQueryExpectations(VdcQueryType.GetVdsFenceStatus, org.ovirt.engine.core.common.queries.VdsIdParametersBase.class, new java.lang.String[]{ "VdsId" }, new java.lang.Object[]{ GUIDS[0] }, retVal); control.replay(); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setFenceType(FenceType.STATUS.value()); verifyActionResponse(resource.fence(action)); org.ovirt.engine.api.model.PowerManagementStatus status = org.ovirt.engine.api.model.PowerManagementStatus.fromValue(action.getPowerManagement().getStatus().getState()); assertTrue(status.equals(PowerManagementStatus.ON)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { boolean isAutoAssign = object.getIsAutoAssign().getEntity(); defaultHostEditor.setEnabled((!isAutoAssign)); specificHost.setValue((!isAutoAssign)); }
@java.lang.Override protected void buildSysprepVmPayload(java.lang.String strSysPrepContent) { byte[] binarySysPrep<START_MOD>; try { binarySysPrep<END_MOD> = <START_MOD>strSysPrepContent.getBytes(<END_MOD>org.ovirt.engine.core.<START_MOD>vdsbroker<END_MOD>.<START_MOD>vdsbroker<END_MOD>.<START_MOD>VmOldInfoBuilder.UTF8_CHARSET_ENCODING<END_MOD>);<START_MOD> } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.RuntimeException( charset e); }<END_MOD> createInfo.add(VdsProperties.sysprepInf, binarySysPrep); }
<START_MOD>private void resetVmInterfaceStatistics() { loadVmNetworkInterfaces(); ifaces.stream().map(VmNetworkInterface::getStatistics).forEach(VmNetworkStatistics::resetVmStatistics); }<END_MOD>
private org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters createSetupNetworksParameters(int timeout) { org.ovirt.engine.core.common.network.SwitchType clusterSwitchType = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getCluster().getRequiredSwitchTypeForCluster(); <START_MOD>org.ovirt.engine.core.common.businessentities.network.Network managementNetworkOfThisCluster = managementNetworkUtil.getManagementNetwork(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterId()); java.util.List<org.ovirt.engine.core.common.vdscommands.HostNetwork> networksToConfigure = calculateNetworksToConfigure(managementNetworkOfThisCluster); boolean managementNetworkChanged = isManagementNetworkChanged(managementNetworkOfThisCluster, networksToConfigure); <END_MOD>final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters hostCmdParams = new org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds(), <START_MOD>networksToConfigure<END_MOD>, getAllNetworksToRemove(), org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateOrUpdateBonds(), getRemovedBondNames(), clusterSwitchType); hostCmdParams.setRollbackOnFailure(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().rollbackOnFailure()); hostCmdParams.setConnectivityTimeout(timeout); hostCmdParams.setManagementNetworkChanged(<START_MOD>managementNetworkChanged<END_MOD>); return hostCmdParams; }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Group group) { validateParameters(group, "name"); if (<START_MOD>(org.ovirt.engine.api.restapi.utils.AuthzUtils.getAuthzNameFromEntityName(group.getName())) == null<END_MOD>) { validateParameters(group, "domain.id|name"); } java.lang.String directoryName = getDirectoryName(group); org.ovirt.engine.core.aaa.DirectoryGroup directoryGroup = findDirectoryGroup(directoryName, group); if (directoryGroup == null) { return javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(((( such group:   + (group.getName())) +   in directory   + directoryName)).build(); } org.ovirt.engine.core.common.action.AddGroupParameters parameters = new org.ovirt.engine.core.common.action.AddGroupParameters(); parameters.setGroupToAdd(new org.ovirt.engine.core.common.businessentities.aaa.DbGroup(directoryGroup)); org.ovirt.engine.api.restapi.resource.aaa.QueryIdResolver<org.ovirt.engine.core.compat.Guid> resolver = new org.ovirt.engine.api.restapi.resource.aaa.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetDbGroupById, org.ovirt.engine.core.common.queries.IdQueryParameters.class); return performCreate(VdcActionType.AddGroup, parameters, resolver, org.ovirt.engine.api.model.BaseResource.class); }
<START_MOD>@org.junit.Test public void testPK() throws java.lang.Exception { client.setKeyPair(TestCommon.keyPair); client.connect(); java.io.ByteArrayOutputStream out = new org.ovirt.engine.core.utils.ssh.OvirtSSH.ConstraintByteArrayOutputStream(500); client.execute(org.ovirt.engine.core.utils.ssh.BasicTest.hello_command, null, out, null); assertEquals(org.ovirt.engine.core.utils.ssh.BasicTest.hello_result, new java.lang.String(out.toByteArray(), "UTF-8")); }<END_MOD>
public static org.ovirt.engine.core.bll.ValidationResult validateIconId(org.ovirt.engine.core.compat.Guid iconId, java.lang.String nameForErrorMessage) { if (org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmIconDao().exists(iconId)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ICON_OF_PROVIDED_ID_DOES_NOT_EXIST, (   + nameForErrorMessage)); }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); if (!(super.<START_MOD>validate<END_MOD>())) { return false; } if (!(validate(getBrickValidator().canStopOrCommitRemoveBrick(volume, getParameters().getBricks())))) { return false; } if ((!(getGlusterTaskUtils().isTaskOfType(volume, GlusterTaskType.REMOVE_BRICK))) || (!(getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.FINISHED)))) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REMOVE_BRICKS_NOT_FINISHED); } return true; }
@org.junit.Test public void testCDAVdsSPMPrioritySetToNever() { vds.setVdsSpmPriority(BusinessEntitiesDefinitions.HOST_MIN_SPM_PRIORITY); org.ovirt.engine.core.bll.<START_MOD>CanDoActionTestUtils<END_MOD>.<START_MOD>runAndAssertCanDoActionFailure<END_MOD>(command, VdcBllMessages.CANNOT_FORCE_SELECT_SPM_VDS_MARKED_AS_NEVER_SPM); }
public void connectStoragePool() { java.util.Map<java.lang.String, java.lang.String> storageDomains = null; storageDomains = org.ovirt.engine.core.vdsbroker.storage.StoragePoolDomainHelper.buildStoragePoolDomainsMap(ConnectStoragePoolVDSCommand.getParameters().getStorageDomains()<START_MOD>); log.info( with domain map: {} storageDomains<END_MOD>); status = ConnectStoragePoolVDSCommand.getBroker().connectStoragePool(ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), ConnectStoragePoolVDSCommand.getParameters().getVds().getVdsSpmId(), ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), ConnectStoragePoolVDSCommand.getParameters().getMasterDomainId().toString(), ConnectStoragePoolVDSCommand.getParameters().getStoragePool().getMasterDomainVersion(), storageDomains); }
<START_MOD>private java.util.HashMap<org.ovirt.engine.core.common.businessentities.ArchitectureType, java.util.HashMap<org.ovirt.engine.core.compat.Version, java.lang.Boolean>> getMap(org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters.ArchCapabilitiesVerb archCapabilitiesVerb) { java.util.HashMap<org.ovirt.engine.core.common.businessentities.ArchitectureType, java.util.HashMap<org.ovirt.engine.core.compat.Version, java.lang.Boolean>> supportMap = new java.util.HashMap<org.ovirt.engine.core.common.businessentities.ArchitectureType, java.util.HashMap<org.ovirt.engine.core.compat.Version, java.lang.Boolean>>(); for (org.ovirt.engine.core.common.businessentities.ArchitectureType arch : org.ovirt.engine.core.common.businessentities.ArchitectureType.values()) { java.util.HashMap<org.ovirt.engine.core.compat.Version, java.lang.Boolean> archMap = new java.util.HashMap<org.ovirt.engine.core.compat.Version, java.lang.Boolean>(); for (org.ovirt.engine.core.compat.Version version : org.ovirt.engine.core.compat.Version.ALL) { boolean isSupported = isSupported(archCapabilitiesVerb, arch, version); archMap.put(version, isSupported); } supportMap.put(arch, archMap); } return supportMap; }<END_MOD>
<START_MOD>private java.util.Set<org.ovirt.engine.core.common.businessentities.GraphicsType> getVmActiveGraphics() { java.util.Set<org.ovirt.engine.core.common.businessentities.GraphicsType> graphicsTypes = new java.util.HashSet<>(); for (java.util.Map.Entry<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.GraphicsInfo> graphics : vm.getGraphicsInfos().entrySet()) { if (graphics.getValue().isSet()) { graphicsTypes.add(graphics.getKey()); } } return graphicsTypes; }<END_MOD>
public static void GetDiskList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.DiskImage>) (source)) : new java.util.ArrayList<org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.DiskImage>(); } }; org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider.SearchParameters searchParams = new org.ovirt.engine.ui.uicommonweb.dataprovider.SearchParameters("Disks:", org.ovirt.engine.<END_MOD>core.common.<START_MOD>interfaces.SearchType.Disk);<END_MOD> searchParams<START_MOD>.setMaxCount(9999); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.Search,<END_MOD> searchParams, aQuery); }
public boolean validate() { boolean res = true; for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : getItems()) { <START_MOD>labelModel.validateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.AsciiNameValidation() }); <END_MOD>java.lang.String label = labelModel.getSelectedItem(); java.lang.String usingIface = labelToIface.get(label); if ((usingIface != null) && (!(containedIfaces.contains(usingIface)))) { labelModel.getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().labelInUse(label, usingIface)); labelModel.setIsValid(false); res = false; } } return res; }
<START_MOD>@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.cluster.ClusterSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(ginjector.getApplicationConstants().clusterHooksSubTabLabel(), 5, ginjector.getSubTabClusterGlusterHookModelProvider()); }<END_MOD>
public <START_MOD>static boolean hasVirtioScsiControllers(org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.<START_MOD>api<END_MOD>.<START_MOD>restapi.resource.BackendResource<END_MOD> <START_MOD>resource, <END_MOD>org.ovirt.engine.core.compat.Guid id) { <START_MOD>java.util.List<java.lang.String><END_MOD> <START_MOD>result = resource.<END_MOD>getEntity(java.util.List.class, VdcQueryType.GetVirtioScsiControllers, new org.ovirt.engine.core.common.queries.IdQueryParameters(id), "GetVirtioScsiControllers", true); <START_MOD>return result.isEmpty(); <END_MOD>}
public void <START_MOD>setVmGuid<END_MOD>(org.ovirt.engine.core.compat.Guid value) { this.vmId = value; }
<START_MOD>private void init() { setMasterVolume(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>()); setSlaveVolume(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>()); setSlaveHost(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>()); setForce(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean>()); setMessage(new java.lang.String()); getForce().setEntity(false); }<END_MOD>
@java.lang.Override protected boolean canDoAction() { <START_MOD>org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator validator = new org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator(getNetworkCluster()); <END_MOD>return (((vdsGroupExists()) && (changesAreClusterCompatible())) && (logicalNetworkExists())<START_MOD>) && ((!(org.ovirt.engine.core.bll.network.NetworkHelper.managementNetwork(getNetwork()))) || (validate(validator.managementNetworkAttachment(getNetworkName()))))<END_MOD>; }
@org.junit.Test public void testDeactivate() throws java.lang.Exception { <START_MOD>setUpGetEntityExpectations(VdcQueryType.GetStorageServerConnectionById, org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase.class, new java.lang.String[]{ "ServerConnectionId" }, new java.lang.Object[]{ GUIDS[0].toString() }, org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.setUpStorageServerConnection()); setUpGetEntityExpectations(); <END_MOD>setUriInfo(setUpActionExpectations(VdcActionType.DeactivateStorageDomain, org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase.class, new java.lang.String[]{ "StorageDomainId", "StoragePoolId" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.STORAGE_DOMAIN_ID, org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.DATA_CENTER_ID })); verifyActionResponse(resource.deactivate(new org.ovirt.engine.api.model.Action())); }
<START_MOD>private void plugDiskToVmIfNeeded() { if ((((org.ovirt.engine.core.bll.AddDiskCommand.getVm()) != null) && (org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getPlugDiskToVm())) && ((org.ovirt.engine.core.bll.AddDiskCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { org.ovirt.engine.core.common.action.HotPlugDiskToVmParameters params = new org.ovirt.engine.core.common.action.HotPlugDiskToVmParameters(org.ovirt.engine.core.bll.AddDiskCommand.getVmId(), org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo().getId()); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.HotPlugDiskToVm, params); } }<END_MOD>
<START_MOD>public java.lang.Boolean getHighlyAvailableIsConfigured() { return this.mVdsStatistics.getHighlyAvailableIsConfigured(); }<END_MOD>
private boolean checkInstanceTypeImagePermissions(org.ovirt.engine.core.compat.Guid id) { java.util.Collection<java.lang.String> createInstanceMessages = new java.util.ArrayList<>(); java.util.Collection<java.lang.String> actionGroupMessages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.utils.PermissionSubject createInstanceSubject = new org.ovirt.engine.core.bll.utils.PermissionSubject(id, org.ovirt.engine.core.common.VdcObjectType.VmTemplate, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_INSTANCE); org.ovirt.engine.core.bll.utils.PermissionSubject actionGroupSubject = new org.ovirt.engine.core.bll.utils.PermissionSubject(id, org.ovirt.engine.core.common.VdcObjectType.VmTemplate, org.ovirt.engine.core.bll.AddVmCommand.getActionType().getActionGroup()); if ((!(checkSinglePermission(createInstanceSubject, createInstanceMessages))) && (!(checkSinglePermission(actionGroupSubject, actionGroupMessages)))) { org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().addAll(actionGroupMessages); return false; } return true; }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { clusterId = getParameters().getClusterId(); serverId = getParameters().getServerId(); serviceType = getParameters().getServiceType(); actionType = getParameters().getActionType(); if (!(org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand.manageActionDetailsMap.keySet().contains(actionType))) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_INVALID_ACTION_TYPE); } if ((org.ovirt.engine.core.compat.Guid.isNullOrEmpty(clusterId)) && (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(serverId))) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_CLUSTERID_AND_SERVERID_BOTH_NULL); } if ((!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(clusterId))) && ((getClusterUtils().getAllUpServers(clusterId).size()) == 0)) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_NO_SERVERS_FOR_CLUSTER); } return true; }
public static java.util.Map<java.lang.String, java.lang.Object> createHotplugMemoryParamsMap(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, boolean copyAlias<START_MOD>, int minAllocatedMem<END_MOD>) { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); data.put("vmId", vmDevice.getVmId().toString()); data.put(<START_MOD>"memGuaranteedSize", minAllocatedMem); data.put(<END_MOD>"memory", org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createVmMemoryDeviceMap(vmDevice, copyAlias)); return data; }
protected void refreshLunsInfo(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) { for (org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromVgInfo : lunsFromVgInfo) { <START_MOD>updateLunInDb<END_MOD>(lunFromVgInfo<START_MOD>);<END_MOD> for (org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : lunFromVgInfo.getLunConnections()) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connectionFromDb = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageServerConnectionDao().getForIqn(connection.getIqn()); if (connectionFromDb == null) { continue; } org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap lunConnection = new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap(lunFromVgInfo.getLUNId(), connectionFromDb.getId()); if ((getStorageServerConnectionLunMapDao().get(lunConnection.getId())) == null) { getStorageServerConnectionLunMapDao().save(lunConnection); } } } for (org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDb : lunsFromDb) { if ((!(isDummyLun(lunFromDb))) && (!(containsLun(lunsFromVgInfo, lunFromDb)))) { org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getLunDao().remove(lunFromDb.getLUNId()); log.info( LUN ID '{}' lunFromDb.getLUNId()); } } }
private void initConfigurationProperties() throws org.ovirt.engine.core.notifier.NotificationServiceException { <START_MOD>daysToKeepHistory<END_MOD> = <START_MOD>getNonNegativeIntegerProperty<END_MOD>(NotificationProperties.DAYS_TO_KEEP_HISTORY); <START_MOD>daysToSendOnStartup<END_MOD> = <START_MOD>getNonNegativeIntegerProperty(NotificationProperties<END_MOD>.<START_MOD>DAYS_TO_SEND_ON_STARTUP<END_MOD>); initConnectivity(); initMethodMapper(); }
<START_MOD>@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label object) { return object.getName(); }<END_MOD>
public static void GetMinimalVmMemSize(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 1; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.VMMinMemorySizeInMB, org.ovirt.engine.core.common.config.<START_MOD>ConfigCommon.defaultConfigurationVersion<END_MOD>), aQuery); }
@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, T vm) { vm.setMemSizeMb(model.getMemSize().getEntity()); <START_MOD>if (model.getIoThreadsEnabled().getEntity()) { vm.setNumOfIoThreads(model.getNumOfIoThreads().getEntity()); } else { vm.setNumOfIoThreads(0); } <END_MOD>vm.setNumOfSockets(model.getNumOfSockets().getSelectedItem()); vm.setCpuPerSocket(((java.lang.Integer.parseInt(model.getTotalCPUCores().getEntity())) / (model.getNumOfSockets().getSelectedItem()))); vm.setDefaultDisplayType(model.getDisplayType().getSelectedItem()); vm.setNumOfMonitors(model.getNumOfMonitors().getSelectedItem()); vm.setSmartcardEnabled(model.getIsSmartcardEnabled().getEntity()); vm.setSsoMethod(model.extractSelectedSsoMethod()); vm.setMinAllocatedMem(model.getMinAllocatedMemory().getEntity()); vm.setDefaultBootSequence(model.getBootSequence()); vm.setSingleQxlPci(model.getIsSingleQxlEnabled().getEntity()); vm.setCustomEmulatedMachine(model.getEmulatedMachine().getSelectedItem()); vm.setCustomCpuName(model.getCustomCpu().getSelectedItem()); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Replica count can be reduced 1 at a time.") java.lang.String ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_MORE_THAN_ONE();<END_MOD>
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeDelete(java.lang.String volumeName) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.delete").withParameter("volumeName", volumeName).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
private boolean isIsoFileValid(java.lang.String isoFile<START_MOD>, org.ovirt.engine.core.bll.OVirtNodeInfo Info) { boolean result = false; java.lang.String pathRepo = null; java.util.List<java.lang.String> reposUpgrade = new java.util.ArrayList<java.lang.String>(); java.lang.String[] tempRepo = Info.getISOsPath().split(Info.getInfoDelimiter()); for (int i = 0; i < (tempRepo.length); i++) reposUpgrade.add(tempRepo[i]); if (org.apache.commons.lang.StringUtils.isNotBlank(isoFile)) { for (java.lang.String repo : reposUpgrade) { pathRepo = (repo + "/") + isoFile; java.io.File path = new java.io.File(pathRepo); org.ovirt.engine.core.bll.InstallVdsCommand.log.infoFormat( - Validating ISO path: {0} pathRepo); if (path.exists()) { _isoFullPath = pathRepo; result = true; org.ovirt.engine.core.bll.InstallVdsCommand.log.infoFormat( ISO found: {0} pathRepo); break; } } } org.ovirt.engine.core.bll.InstallVdsCommand.log.infoFormat( result {0} result);<END_MOD> return <START_MOD>result; }<END_MOD>
<START_MOD>private boolean isBookmarkForCurrentPlace(org.ovirt.engine.core.common.businessentities.Bookmark bookmark, org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter<?, ?, ?, ?> currentPlacePresenter) { java.lang.String searchString = bookmark.getValue(); if (searchString != null) { java.lang.String[] split = searchString.split(":"); java.lang.String result = null; if ((split.length) > 0) { java.lang.String defaultSearchString = split[0]; result = SearchStringMapping.searchToPlaceMap.get(defaultSearchString); } if ((currentPlacePresenter != null) && (currentPlacePresenter.placeMatches(result))) { return true; } } return false; }<END_MOD>
protected java.util.List<java.lang.String> listFiles() { org.ovirt.engine.core.common.queries.GetImagesListParameters queryParams = new org.ovirt.engine.core.common.queries.GetImagesListParameters(asGuid(storageDomainId), org.ovirt.engine.core.common.businessentities.ImageFileType.ISO); queryParams.setForceRefresh(true); java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>RepoImage<END_MOD>> files = getBackendCollection(org.ovirt.engine.core.common.businessentities.<START_MOD>RepoImage<END_MOD>.class, VdcQueryType.GetImagesList, queryParams); java.util.List<java.lang.String> fileNames = new java.util.LinkedList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.<START_MOD>RepoImage<END_MOD> file : files) { fileNames.add(file.getRepoImageId()); } return fileNames; }
<START_MOD>public void setPlacement(org.gwtbootstrap3.client.ui.constants.Placement placement) { this.placement = placement; }<END_MOD>
@java.lang.Override protected void initDetailModels() { super.initDetailModels(); org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.<START_MOD>HasEntity<org.ovirt.engine.core.common.scheduling.ClusterPolicy><END_MOD>> list = new org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.<START_MOD>HasEntity<org.ovirt.engine.core.common.scheduling.ClusterPolicy><END_MOD>>(); list.add(new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyClusterListModel()); setDetailModels(list); }
@java.lang.Override protected void <START_MOD>executeVdsBrokerCommand<END_MOD>() { status = org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getBroker().glusterVolumeRebalanceStart(org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getParameters().isFixLayoutOnly(), org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getParameters().isForceAction()); org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.proceedProxyReturnValue(); }
protected boolean checkExistingStorageDomain() { if ((org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>AddExistingFileStorageDomainCommand.getStorageDomainStaticDao().get(org.ovirt.engine.core.bll.storage<START_MOD>.domains<END_MOD>.AddExistingFileStorageDomainCommand.getStorageDomain().getId())) != null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); } org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid> domainFromIrs = executeHSMGetStorageDomainInfo(new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>AddExistingFileStorageDomainCommand.getVdsId(), org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>AddExistingFileStorageDomainCommand.getStorageDomain().getId())); if (domainFromIrs == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); } return concreteCheckExistingStorageDomain(domainFromIrs); }
<START_MOD>private void handleRemovedDevices(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change change, org.ovirt.engine.core.compat.Guid vmId, java.util.Set<org.ovirt.engine.core.compat.Guid> libvirtDevices, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> dbDevices) { for (org.ovirt.engine.core.common.businessentities.VmDevice device : dbDevices) { if (libvirtDevices.contains(device.getDeviceId())) { continue; } if (org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.deviceWithoutAddress(device)) { continue; } if (device.getIsManaged()) { if (device.getIsPlugged()) { device.setIsPlugged(java.lang.Boolean.FALSE); device.setAddress(""); change.updateDevice(device); org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.log.debug("VM '{}' managed pluggable device was unplugged : '{}'", vmId, device); } else if (!(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.devicePluggable(device))) { org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.log.error("VM '{}' managed non pluggable device was removed unexpectedly from libvirt: '{}'", vmId, device); } } else { change.removeDevice(device.getId()); org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.log.debug("VM '{}' unmanaged device was marked for remove : {1}", vmId, device); } } }<END_MOD>
@java.lang.Override public void init() { context.put(ExtensionProperties.AUTHOR,   oVirt Project context.put(ExtensionProperties.EXTENSION_NAME,   Authentication (Built-in) context.put(ExtensionProperties.LICENSE,   2.0 context.put(ExtensionProperties.HOME, "http://www.ovirt.org"); context.put(ExtensionProperties.VERSION, "N/A"); <START_MOD>context.put(ExtensionProperties.AAA_IS_PASSWORD_AUTH, true); <END_MOD>}
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> getVolumesSupportedAsStorageDomain() { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = getCallsHandler().executeReadList("GetGlusterVolumesSupportedAsStorageDomain", org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoImpl.volumeRowMapper, getCustomMapSqlParameterSource().addValue("replica_count", 3)); return volumes; }<END_MOD>
public java.lang.String getDuration() { return <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.<START_MOD>core.common.TimeUtils.formatTimeSpan<END_MOD>(((new java.util.Date().getTime()) - (org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().getStartTime().getTime()))); }
@java.lang.Override public void setValue(java.util.List<T> values, boolean fireEvents<START_MOD>, boolean fromClick) { if (((values != null) && ((lastValues) != null)) && (lastValues.equals(values))<END_MOD>) { return; } <START_MOD>if (fromClick) { T value = values.get(0); if (selectedList.contains(value)) { selectedList.remove(value); } else { if (value != null) { selectedList.add(value); } } } else { selectedList.clear(); <END_MOD>for (T value : values) { if (<START_MOD>value != null)<END_MOD> { selectedList.add(value); } } <START_MOD>} <END_MOD>listPanel.setSelected(selectedList); updateCurrentValue(selectedList, fireEvents); }
public void addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { addActionButton(buttonDef, <START_MOD>java.lang.Integer.MAX_VALUE<END_MOD>); }
@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult parentEntityExists() { if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsGroupDao().get(getProfile().getClusterId())) == null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_CLUSTER_CAN_NOT_BE_EMPTY); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
<START_MOD>private void updateBricksFromServer() { org.ovirt.engine.core.common.businessentities.VDS selectedServer = getServers().getSelectedItem(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getUnusedBricksFromServer(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice> bricks = ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice>) (returnValue)); java.util.List<java.lang.String> lvNames = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.gluster.StorageDevice brick : bricks) { if (((brick.getMountPoint()) != null) && (!(brick.getMountPoint().isEmpty()))) { lvNames.add(brick.getMountPoint()); } else { lvNames.add(("None - " + (brick.getName()))); } } getBricksFromServer().setItems(lvNames); } }), selectedServer.getId()); }<END_MOD>
private static java.lang.String buildDetailedAuditLogMessage(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { java.lang.String storageDomainName =   not found if ((repoImage != null) && ((repoImage.getRepoDomainId()) != null)) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(repoImage.getRepoDomainId()); if (storageDomain != null) { storageDomainName = java.lang.String.format( (%s file type) storageDomain.getStorageName(), repoImage.getFileType().name()); } } else { org.ovirt.engine.core.bll.<START_MOD>storage.domains.<END_MOD>IsoDomainListSyncronizer.log.error( file meta data not found for logging } return storageDomainName; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Hard") java.lang.String hardEnforcingAffinity();
protected boolean CanDoAddVmCommand() { boolean returnValue = false; returnValue = areParametersLegal(org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages()); returnValue = returnValue && (checkNumberOfMonitors()); returnValue = ((returnValue && (<START_MOD>checkPciAndIDeLimit<END_MOD>(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getnum_of_monitors(), getVmInterfaces(), getVmDisks(), org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages()))) && (canAddVm(org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages(), destStorages.values()))) && (hostToRunExist()); return returnValue; }
@org.junit.Test public void testChangeToExistingName() { prepareVmToPassCanDoAction(); mockSameNameQuery(true); assertFalse( should have failed with vm name already in use. command.canDoAction()); assertCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NAME_ALREADY_USED); }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.<START_MOD>networks<END_MOD>.<START_MOD>ImportNetworksModel<END_MOD> object) { driver.edit(object); }
<START_MOD>public java.lang.String getExportName() { return exportDomain.getName(); }<END_MOD>
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.network.NetworkCluster cluster) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cluster_id", cluster.getClusterId()).addValue("network_id", cluster.getNetworkId()).addValue("status", cluster.getStatus()).addValue("is_display", cluster.isDisplay()).addValue("required", cluster.isRequired()).addValue("migration", cluster.isMigration())<START_MOD>.addValue("management", cluster.isManagement())<END_MOD>; getCallsHandler().executeModification("Updatenetwork_cluster", parameterSource); }
@org.junit.Test public void testMacPoolGetByDataCenterIdExist() throws java.lang.Exception { final org.ovirt.engine.core.common.businessentities.MacPool macPool = dao.<START_MOD>getByClusterId<END_MOD>(FixturesTool.STORAGE_POOL_RHEL6_ISCSI_OTHER); assertThat(macPool, notNullValue()); assertThat(macPool.getId(), is(FixturesTool.NON_DEFAULT_MAC_POOL)); }
<START_MOD>private void assertNoNetworksRemoved(org.ovirt.engine.core.bll.SetupNetworksHelper helper) { junit.framework.Assert.assertTrue(java.text.MessageFormat.format("Expected no networks to be removed but there were. Removed networks: {0}", helper.getRemoveNetworks()), helper.getRemoveNetworks().isEmpty()); }<END_MOD>
private boolean isTaskStateError(org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue) { if (((vdsReturnValue != null) && ((vdsReturnValue.getVdsError()) != null)) && ((vdsReturnValue.getVdsError().getCode()) == (org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD>.TaskStateError))) { org.ovirt.engine.core.bll.tasks.SPMAsyncTask.log.info(( At time of attempt to clear task '{}' the response code +   was '{}' and message was '{}'. Task will not be cleaned getVdsmTaskId(), vdsReturnValue.getVdsError().getCode(), vdsReturnValue.getVdsError().getMessage()); return true; } return false; }
private boolean <START_MOD>removeHibernationVolumes<END_MOD>() { org.ovirt.engine.core.bll.StopVmCommandBase.setVm(null);<START_MOD> final<END_MOD> org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getStatus(); if (<START_MOD>vmStatus<END_MOD> <START_MOD>==<END_MOD> (org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked)) { <START_MOD>return false; } <END_MOD>updateVmStatus(VMStatus.ImageLocked); if (<START_MOD>!<END_MOD>(removeMemoryVolumes(org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getHibernationVolHandle(), org.ovirt.engine.core.bll.StopVmCommandBase.getActionType(), false))) { updateVmStatus(vmStatus); <START_MOD>return false;<END_MOD> } return <START_MOD>true<END_MOD>; }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.GetConnectionsByDataCenterAndStorageTypeQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.storage.GetConnectionsByDataCenterAndStorageTypeQuery.getDbFacade().getStorageServerConnectionDao().<START_MOD>getStorageConnectionsByStorageTypeAndStatus<END_MOD>(org.ovirt.engine.core.bll.storage.GetConnectionsByDataCenterAndStorageTypeQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.GetConnectionsByDataCenterAndStorageTypeQuery.getParameters().getStorageType()<START_MOD>, java.util.EnumSet.of(StorageDomainStatus.Active, StorageDomainStatus.Inactive, StorageDomainStatus.Unknown, StorageDomainStatus.Maintenance, StorageDomainStatus.PreparingForMaintenance)<END_MOD>)); }
@java.lang.Override <START_MOD>public<END_MOD> <START_MOD>org.ovirt.engine.api.resource.DataCenterNetworkResource getNetworkResource(<END_MOD>java.lang.String <START_MOD>id<END_MOD>) { return <START_MOD>inject(<END_MOD>new <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.api.restapi.resource.BackendDataCenterNetworkResource(dataCenterId,<END_MOD> <START_MOD>id))<END_MOD>; }
private void validateQosNotPartiallyConfigured() { java.util.Set<java.lang.String> someSubInterfacesHaveQos = new java.util.HashSet<>(); java.util.Set<java.lang.String> notAllSubInterfacesHaveQos = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : params.getInterfaces()) { java.lang.String networkName = iface.getNetworkName(); org.ovirt.engine.core.common.businessentities.network.Network network = getExistingClusterNetworks().get(networkName); org.ovirt.engine.core.common.businessentities.network.<START_MOD>NetworkAttachment networkAttachment = getNetworkAttachment<END_MOD>(iface, <START_MOD>network); java.lang.String baseIfaceName = org.ovirt.engine.core.utils.NetworkUtils.stripVlan(iface); if (network !=<END_MOD> null) <START_MOD>{<END_MOD> if (org.ovirt.engine.core.utils.NetworkUtils.qosConfiguredOnInterface(networkAttachment, network)) { someSubInterfacesHaveQos.add(baseIfaceName); } else { notAllSubInterfacesHaveQos.add(baseIfaceName); } } <START_MOD>} <END_MOD>for (java.lang.String ifaceName : someSubInterfacesHaveQos) { if (notAllSubInterfacesHaveQos.contains(ifaceName)) { addViolation(EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_INTERFACES_WITHOUT_QOS, ifaceName); } } }
<START_MOD>public void setMainTabContentUrl(java.lang.String historyToken, java.lang.String contentUrl) { org.ovirt.engine.ui.webadmin.plugin.api.SetMainTabCustomContentUrlEvent.fire(this, historyToken, contentUrl); }<END_MOD>
private static double getLast5MinutesStorageAverage(javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO(dwhDataSource); return (dao.getLast5MinutesStorageAverage()) / 1024; }
<START_MOD>private boolean hostExists(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> glusterServers, org.ovirt.engine.core.compat.Guid serverId) { for (org.ovirt.engine.core.common.businessentities.VDS vds : glusterServers) { if (vds.getId().equals(serverId)) { return true; } } return false; }<END_MOD>
protected boolean prepareFailureMessageForDomainsAndDisks(java.lang.String domainNames, java.lang.String diskNames) { org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.addCanDoActionMessageVariable("domainNames", domainNames); org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.addCanDoActionMessageVariable("diskNames", diskNames); return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS_AND_DISKS); }
<START_MOD>protected<END_MOD> void OnUserAndAdGroupsLoaded(org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel adElementListModel) { if (((adElementListModel.getusers()) != null) && ((adElementListModel.getgroups()) != null)) { getSearchInProgress().setEntity(false); java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> items = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); items.addAll(getusers()); items.addAll(getgroups()); adElementListModel.getSelectAll().setEntity(false); adElementListModel.setItems(items); setusers(null); setgroups(getusers()); setIsEmpty(items.isEmpty()); } }
@com.google.inject.Provides @com.google.inject.Singleton public org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.RepoImage, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageIsoListModel> getStorageIsoListProvider(org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector<START_MOD>, final com.google.inject.Provider<org.ovirt.engine.ui.webadmin.section.main.presenter.popup.storage.ImportExportImagePopupPresenterWidget> importExportPopupProvider<END_MOD>) { return new org.ovirt.engine.ui.common.uicommon.model.SearchableDetailTabModelProvider<org.ovirt.engine.core.common.businessentities.RepoImage, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageIsoListModel>(ginjector, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel.class, org.ovirt.engine.ui.uicommonweb.models.storage.StorageIsoListModel.class)<START_MOD> { @java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.Model, ?> getModelPopup(org.ovirt.engine.ui.uicommonweb.models.storage.StorageIsoListModel source, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand, org.ovirt.engine.ui.uicommonweb.models.Model windowModel) { if (lastExecutedCommand == (getModel().getDownloadImagesCommand())) { return importExportPopupProvider.get()<END_MOD>; }<START_MOD> else { return super.getModelPopup(source, lastExecutedCommand, windowModel); } } }; }<END_MOD>
public static void init() { final java.lang.Class<?>[] inspectedClassNames = new java.lang.Class<?>[]{ org.ovirt.engine.core.common.businessentities.VmBase.class, org.ovirt.engine.core.common.businessentities.VmTemplate.class }; org.ovirt.engine.core.bll.VmTemplateHandler.updateVmTemplate = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.bll.VmTemplateHandler.class); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>EditableVmField<END_MOD>, java.lang.reflect.Field> pair : org.ovirt.engine.core.common.backendinterfaces.BaseHandler.extractAnnotatedFields(org.ovirt.engine.core.common.businessentities.<START_MOD>EditableVmField<END_MOD>.class, inspectedClassNames)) { org.ovirt.engine.core.<START_MOD>common.businessentities.EditableVmField annotation = pair.getFirst(); java.util.List<org.ovirt.engine.core.common.businessentities.VMStatus> statusList = java.util.Arrays.asList(annotation.onStatuses()); java.lang.String fieldName = pair.getSecond().getName(); if ((statusList.isEmpty()) || (annotation.onTemplate())) { org.ovirt.engine.core.<END_MOD>bll.VmTemplateHandler.updateVmTemplate.addPermittedFields(<START_MOD>fieldName<END_MOD>); } } }
private void editConsole() { if (((<START_MOD>org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.<END_MOD>getWindow()) != null) || ((<START_MOD>org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.<END_MOD>getSelectedItem()) == null)) { return; } final org.ovirt.engine.ui.uicommonweb.models.VmConsoles activeVmConsoles = consoleModelsCache.getVmConsolesForEntity(<START_MOD>org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.<END_MOD>getSelectedItem()); final org.ovirt.engine.ui.uicommonweb.models.ConsolePopupModel model = new org.ovirt.engine.ui.uicommonweb.models.ConsolePopupModel(); model.setVmConsoles(activeVmConsoles); model.setHelpTag(HelpTag.editConsole); model.setHashName("editConsole"); setWindow(model); final org.ovirt.engine.ui.uicommonweb.UICommand saveCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("OnEditConsoleSave", this); saveCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); saveCommand.setIsDefault(true); model.getCommands().add(saveCommand); final org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); cancelCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); cancelCommand.setIsCancel(true); model.getCommands().add(cancelCommand); }
@org.junit.Test public void subnetChanged() { org.ovirt.engine.core.common.businessentities.Network net = createNetwork("net"); mockExistingNetworks(net); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = <START_MOD>createNicOnNetwork<END_MOD>("nic0", net); nic.setBootProtocol(NetworkBootProtocol.StaticIp); nic.setSubnet(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); mockExistingIfaces(nic); nic.setSubnet(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper(createParametersForNics(nic)); validateAndAssertNetworkModified(helper, net); }
<START_MOD>public int compare(org.ovirt.engine.core.aaa.AuthenticationProfile o1, org.ovirt.engine.core.aaa.AuthenticationProfile o2) { return -(new java.lang.Integer(o1.getNegotiationPriority()).compareTo(o2.getNegotiationPriority())); }<END_MOD>
void bindInfrastructure() { bindCommonInfrastructure(); bind(org.ovirt.engine.ui.webadmin.system.ApplicationInit.class).asEagerSingleton(); bind(org.ovirt.engine.ui.webadmin.system.InternalConfiguration.class).asEagerSingleton(); bind(org.ovirt.engine.ui.webadmin.system.PostMessageDispatcher.class).asEagerSingleton(); }
protected boolean checkExistingStorageDomain() { if ((org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getStorageDomainStaticDao().get(org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getStorageDomain().getId())) != null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); } org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid> domainFromIrs = executeHSMGetStorageDomainInfo(new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getVdsId(), org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getStorageDomain().getId())); if (domainFromIrs == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); } return concreteCheckExistingStorageDomain(domainFromIrs); }
@org.junit.Test public void testSaveNetworkQos() { org.ovirt.engine.core.common.businessentities.<START_MOD>qos.NetworkQoS qosD = new org.ovirt.engine.core.common.businessentities.qos.NetworkQoS(); qosD.setId(org.ovirt.engine.core.dao.<END_MOD>network.<START_MOD>NetworkQosDaoTest.qosDId); qosD.setName("qos_d"); qosD.setStoragePoolId(FixturesTool.STORAGE_POOL_NFS_2); qosD.setInboundAverage(200); qosD.setInboundPeak(200); qosD.setInboundBurst(200); qosD.setOutboundAverage(200); qosD.setOutboundPeak(200); qosD.setOutboundBurst(200); dao.save(qosD); org.ovirt.engine.core.common.businessentities.qos.<END_MOD>NetworkQoS <START_MOD>returnedD<END_MOD> = <START_MOD>dao.get(org.ovirt.engine.core.dao<END_MOD>.network.NetworkQosDaoTest.qosDId); <START_MOD>assertTrue(qosD.equals(<END_MOD>returnedD)); }
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity)<START_MOD> { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -><END_MOD> { super.update(entity); removeNameServersByDnsResolverConfigurationId(entity.getId()); saveNameServersByDnsResolverConfigurationId(entity.getId(), entity.getNameServers()); <START_MOD>return null; <END_MOD>}<START_MOD>); }<END_MOD>
@org.junit.Test public void canDoActionShareableDiskOnGlusterFails() { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.AddDiskCommandTest.createShareableDiskImage(); image.setvolumeFormat(VolumeFormat.RAW); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskCommandTest.createParameters(); parameters.setDiskInfo(image); org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId, parameters); mockVm(); mockStorageDomain(storageId, StorageType.GLUSTERFS, Version.v3_1); mockStoragePoolIsoMap(); mockMaxPciSlots(); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_SHAREABLE_DISKS_NOT_SUPPORTED_ON_GLUSTER_DOMAIN.toString())); }
private static javax.sql.DataSource createDataSource() { javax.sql.DataSource result = null; java.util.Properties properties = new java.util.Properties(); org.ovirt.engine.core.common.config.Config.setConfigUtils(new org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils(false)); try { java.lang.String job = java.lang.System.getProperty("JOB_NAME"); if (job == null) job = ""; java.lang.String number = java.lang.System.getProperty("BUILD_NUMBER"); if (number == null) number = ""; java.lang.String schemaNamePostfix = job + number; <START_MOD>java.io.InputStream is = org.ovirt.engine.core.dao.BaseDAOTestCase.class.getResourceAsStream("/test-database.properties"); <END_MOD>properties.load(<START_MOD>is); is.close(<END_MOD>); java.lang.ClassLoader.getSystemClassLoader().loadClass(properties.getProperty("database.driver")); java.lang.String dbUrl = (properties.getProperty("database.url")) + schemaNamePostfix; result = new org.springframework.jdbc.datasource.SingleConnectionDataSource(dbUrl, properties.getProperty("database.username"), properties.getProperty("database.password"), true); org.ovirt.engine.core.dao.BaseDAOTestCase.initSql = properties.getProperty("database.initsql"); org.ovirt.engine.core.dao.BaseDAOTestCase.loadDataFactory(properties.getProperty("database.testing.datafactory")); if (((org.ovirt.engine.core.dao.BaseDAOTestCase.initSql) != null) && (!(org.ovirt.engine.core.dao.BaseDAOTestCase.initSql.isEmpty()))) { org.ovirt.engine.core.dao.BaseDAOTestCase.needInitializationSql = true; } } catch (java.lang.Exception error) { error.printStackTrace(); throw new java.lang.RuntimeException( create data source error); } return result; }
private void reset() { <START_MOD>org.ovirt.engine.ui.uicommonweb.models.GridTimer.<END_MOD>currentRate = 0; repetitions = org.ovirt.engine.ui.uicommonweb.models.GridTimer.RATE.NORMAL.getRepetitions(); }
@java.lang.Override public org.ovirt.engine.api.model.Users list() { <START_MOD>if (isFiltered()) { return mapDbUserCollection(getBackendCollection(VdcQueryType.GetDbUserByUserId, new org.ovirt.engine.core.common.queries.GetDbUserByUserIdParameters(getCurrent().get(org.ovirt.engine.core.common.users.VdcUser.class).getUserId()))); } else { <END_MOD>return mapDbUserCollection(getBackendCollection(SearchType.DBUser, getSearchPattern())); }<START_MOD> }<END_MOD>
<START_MOD>@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.clusters.GlusterHookContentModel object) { org.ovirt.engine.ui.webadmin.section.main.view.popup.cluster.GlusterHookContentPopupView.Driver.driver.edit(object); }<END_MOD>
<START_MOD>private native boolean invokePlugin(org.ovirt.engine.ui.webadmin.plugin.Plugin plugin, java.lang.String functionName, com.google.gwt.core.client.JavaScriptObject contextObject);<END_MOD>
<START_MOD>@java.lang.SuppressWarnings("unchecked") public static <V> java.util.concurrent.Future<V> execute(java.util.concurrent.FutureTask<V> command) { try { return ((java.util.concurrent.Future<V>) (org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.es.submit(command))); } catch (java.util.concurrent.RejectedExecutionException e) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.log.warn("The thread pool is out of limit. A submitted task was rejected"); throw e; } }<END_MOD>
<START_MOD>private void onDeleteSnapshot() { if ((getConfirmWindow()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())); if ((model.getProgress()) != null) { return; } if ((getSelectedItems()) == null) { return; } java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> paramsList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity snapshot : ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity>) (getSelectedItems()))) { org.ovirt.engine.core.common.action.gluster.GlusterVolumeSnapshotActionParameters param = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeSnapshotActionParameters(getEntity().getId(), snapshot.getSnapshotName(), true); paramsList.add(param); } model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.DeleteGlusterVolumeSnapshot, paramsList, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())); localModel.stopProgress(); setConfirmWindow(null); } }); }<END_MOD>
<START_MOD>@org.junit.Test public void testAllDomainsHaveSpaceForNewDisksFailure() { setUpGeneralValidations(); setUpDiskValidations(); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList = org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommandTest.getNonEmptyDiskList(); doReturn(disksList).when(cmd).getDisksList(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(multipleStorageDomainsValidator).allDomainsHaveSpaceForNewDisks(disksList); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN); verify(multipleStorageDomainsValidator).allDomainsHaveSpaceForNewDisks(disksList); }<END_MOD>
public void removeNetworkFromParameters(org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters params, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.Network net) { if (org.ovirt.engine.core.utils.NetworkUtils.isVlan(net)) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlan = getVlanDevice(params.getInterfaces(), nic, net); if (vlan == null) { throw new org.ovirt.engine.core.common.errors.<START_MOD>EngineException<END_MOD>(org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD>.NETWORK_LABEL_CONFLICT); } else { params.getInterfaces().remove(vlan); } } else if (org.apache.commons.lang.StringUtils.equals(net.getName(), nic.getNetworkName())) { nic.setNetworkName(null); } }
public static <B, G extends B> java.util.List<B> upcast(java.util.<START_MOD>Collection<END_MOD><G> entities) { java.util.List<B> baseEntities = new java.util.ArrayList<B>(entities.size()); for (G entity : entities) { baseEntities.add(entity); } return baseEntities; }
@org.junit.Test public void failUpdateStats() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValueUpdate = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); returnValueUpdate.setSucceeded(false); org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(); doReturn(map).when(command).getStoragePoolIsoMap(); doReturn(returnValueUpdate).when(command).getStatsForDomain(); doReturn(true).when(command).connectToStorage(); org.ovirt.engine.core.common.businessentities.StorageDomainDynamic domainDynamic = new org.ovirt.engine.core.common.businessentities.StorageDomainDynamic(); doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Locked); doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Maintenance); doNothing().when(command).disconnectFromStorage(); command.executeCommand(); org.ovirt.engine.core.bll.CommandAssertUtils.checkSucceeded(command, false); verify(storageDomainDynamicDao, never()).update(domainDynamic); verify(storageConnDao, never()).update(<START_MOD>newNFSConnection<END_MOD>); }
<START_MOD>public void setPlugDiskToVm(boolean plugDiskToVm) { this.plugDiskToVm = plugDiskToVm; }<END_MOD>
protected boolean isDiskPassPciAndIdeLimit(org.ovirt.engine.core.common.businessentities.Disk diskInfo) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> vmInterfaces = org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmNicDao().getAllForVm(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.Disk> allVmDisks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getDiskMap().values()); allVmDisks.add(diskInfo); return checkPciAndIdeLimit(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().<START_MOD>getOs(), org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getVdsGroupCompatibilityVersion(), org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().<END_MOD>getNumOfMonitors(), vmInterfaces, allVmDisks, isVirtioScsiControllerAttached(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId()), org.ovirt.engine.core.bll.AbstractDiskVmCommand.getReturnValue().getCanDoActionMessages()); }
private void Edit() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel(); model.getMAC().setIsAvailable(false); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editNetworkInterfaceTitle()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetClusterNetworkList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel vmInterfaceListModel = ((org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> network_list = (returnValue != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>>) (returnValue)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>>(); vmInterfaceListModel.PostGetClusterNetworkList_Edit(network_list); } }), getEntityStronglyTyped().getvds_group_id()); }
private<START_MOD> static<END_MOD> java.util.ArrayList<java.lang.String> trimElements(java.lang.String... elements) { java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(elements.length); for (java.lang.String e : elements) { e = e.trim(); if ((e.length()) > 0) { list.add(e); } } return list; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAllForStorageDomain(org.ovirt.engine.core.compat.Guid storageDomainId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("storage_domain_id", storageDomainId); return getCallsHandler().executeReadList("GetAllForStorageDomain", org.ovirt.engine.core.dao.<START_MOD>DiskImageDAOImpl<END_MOD>.DiskImageRowMapper.instance, parameterSource); }
<START_MOD>public void testFilterNicsWithUnmanagedNetworksUmngmtNetRemoved() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingInterfaces = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(); for (int i = 0; i < 10; i++) { org.ovirt.engine.core.common.businessentities.network.Nic nic = new org.ovirt.engine.core.common.businessentities.network.Nic(); nic.setName(("eth" + i)); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails(true, ((i % 2) == 1)); nic.setNetworkImplementationDetails(networkImplementationDetails); existingInterfaces.add(nic); } org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator validator = new org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator(); java.util.Set<java.lang.String> removedUnmanagedNetworks = new java.util.HashSet<java.lang.String>(); removedUnmanagedNetworks.add("eth4"); removedUnmanagedNetworks.add("eth6"); removedUnmanagedNetworks.add("eth8"); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> unmanagedNicsList = validator.filterNicsWithUnmanagedNetworks(existingInterfaces, removedUnmanagedNetworks); assertEquals(2, unmanagedNicsList.size()); for (int i = 0; i < 2; i++) { assertEquals(("eth" + (i * 2)), unmanagedNicsList.get(i).getName()); } }<END_MOD>
void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(<START_MOD>org<END_MOD>.<START_MOD>ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.versionAboutLabel<END_MOD>()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.userNameAboutLabel()); }
private void addSharedLockEntry(org.ovirt.engine.core.common.businessentities.VDS vds) { if ((sharedLockMap) == null) { sharedLockMap = new java.util.HashMap(); } sharedLockMap.put(vds.getStoragePoolId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.POOL, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
@org.junit.Test public void executeCommand() { cmd = spy(new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand<START_MOD><org.ovirt.engine.core.common.action.gluster.GlusterHookParameters><END_MOD>(new org.ovirt.engine.core.common.action.gluster.<START_MOD>GlusterHookParameters<END_MOD>(HOOK_ID))); setupMocks(cmd); mockBackendStatusChange(cmd, true); cmd.executeCommand(); verify(cmd, atLeast(1)).addServerHookInDb(any(org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook.class)); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_ENABLE); }
private void processVmsWithDevicesChange() { if (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(vdsManager.getGroupCompatibilityVersion()))) { if (!(vmsWithChangedDevices.isEmpty())) { java.util.ArrayList<java.lang.String> vmsToUpdate = new java.util.ArrayList(vmsWithChangedDevices.size()); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> pair : vmsWithChangedDevices) { org.ovirt.engine.core.compat.Guid vmId = pair.getFirst().getId(); <START_MOD>org.ovirt.engine.core.vdsbroker.VmAnalyzer vmAnalyzer = vmAnalyzers.stream().filter(( analyzer) -> vmId.equals(analyzer.getVdsmVm().getVmDynamic().getId())).collect(java.util.stream.Collectors.toList()).get(0); <END_MOD>if (<START_MOD>(vmAnalyzer.getVmDynamicToSave()) != null) { vmAnalyzer.getVmDynamicToSave(<END_MOD>).setHash(pair.getSecond().getVmDynamic().getHash()); vmsToUpdate.add(vmId.toString()); } else { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.warn( '{}' not in changed list, skipping devices update. vmId); } } updateVmDevices(vmsToUpdate); } } }
<START_MOD>private<END_MOD> static org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>validator<END_MOD>.<START_MOD>RunVmValidator<END_MOD> <START_MOD>getRunVmValidator<END_MOD>() { return<START_MOD> new<END_MOD> org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>validator<END_MOD>.<START_MOD>RunVmValidator<END_MOD>(); }
<START_MOD>private org.ovirt.engine.core.compat.Version parseRpmVersion(java.lang.String rpmVersion) { java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(org.ovirt.engine.core.bll.GetProductVersionQuery.RPM_REG_EX); java.util.regex.Matcher matcher = pattern.matcher(rpmVersion); if (matcher.find()) { java.lang.String[] parts = matcher.group(0).split("\\.", (-1)); return new org.ovirt.engine.core.compat.Version(java.lang.Integer.parseInt(parts[0]), java.lang.Integer.parseInt(parts[1]), java.lang.Integer.parseInt(parts[2]), 0); } else { return null; } }<END_MOD>
private void translateVolumeType(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity) { org.ovirt.engine.ui.uicompat.Translator translator = <START_MOD>new <END_MOD>org.ovirt.engine.ui.uicompat.EnumTranslator(); if (translator.containsKey(volumeEntity.getVolumeType())) { getDetailModel().setVolumeTypeSilently(translator.get(volumeEntity.getVolumeType())); } }
<START_MOD>@org.junit.Test public void testMultipleNested() { org.ovirt.engine.api.types.V4Vm object = newVm().addDisks(newDisk().setId("123").setAlias("disk1")).addDisks(newDisk().setId("456").setAlias("disk2")).build(); assertEquals(("{'disks':[" + (("{'alias':'disk1','id':'123'}," + "{'alias':'disk2','id':'456'}") + "]}")), objectToJson(object)); }<END_MOD>
<START_MOD>private void flush() { flushedLabels.clear(); flushedLabels.addAll(computeSelcetedLabels()); }<END_MOD>
private void onSaveConfirmCV(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model) { if (!(model.getVersion().getSelectedItem().equals(getSelectedItem().getcompatibility_version()))) { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().changeClusterCompatibilityVersionTitle()); confirmModel.setHelpTag(HelpTag.change_cluster_compatibility_version); confirmModel.setHashName("change_cluster_compatibility_version"); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSaveConfirmCpuThreads", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); getConfirmWindow().getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); getConfirmWindow().getCommands().add(tempVar2); checkForNonResponsiveHosts(confirmModel); } else { onSaveConfirmCpuThreads(); } }
@org.junit.Test public void testNetworksUniquelyConfiguredOnHostWhenNotUniquelyConfigured() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.compat.Guid.newGuid(); <START_MOD>java.lang.String networkName = "networkName"; <END_MOD>org.ovirt.engine.core.common.businessentities.network.Network networkA = new org.ovirt.engine.core.common.businessentities.network.Network(); networkA.<START_MOD>setName(networkName); networkA.<END_MOD>setId(id); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = createNetworkAttachment(networkA); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachmentReferencingSameNetwork = createNetworkAttachment(networkA); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = createHostSetupNetworksValidator(java.util.Collections.singletonList(networkA)); assertThat(validator.networksUniquelyConfiguredOnHost(java.util.Arrays.asList(networkAttachment, networkAttachmentReferencingSameNetwork)), failsWith(VdcBllMessages.NETWORKS_ALREADY_ATTACHED_TO_IFACES<START_MOD>, HostSetupNetworksValidator.VAR_NETWORKS_ALREADY_ATTACHED_TO_IFACES_LIST, networkName<END_MOD>)); }
private void prestartVms(org.ovirt.engine.core.common.businessentities.VmPool vmPool, int numOfVmsToPrestart) { java.util.<START_MOD>concurrent.atomic.AtomicInteger<END_MOD> failedAttempts = <START_MOD>new java.util.concurrent.atomic.AtomicInteger(<END_MOD>0<START_MOD>); java.util.concurrent.atomic.AtomicInteger<END_MOD> prestartedVmsCounter = <START_MOD>new java.util.concurrent.atomic.AtomicInteger(<END_MOD>0<START_MOD>);<END_MOD> int maxFailedAttempts = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VmPoolMonitorMaxAttempts); java.util.Map<java.lang.String, java.util.Set<org.ovirt.engine.core.compat.Guid>> <START_MOD>failureReasons<END_MOD> = new java.util.HashMap<>(); <START_MOD>java.util.Iterator<org.ovirt.engine.core.compat.Guid> iterator = vmPoolHandler.selectNonPrestartedVms(vmPool.getVmPoolId(), ( vmId, messages) -> collectVmPrestartFailureReasons(vmId, failureReasons, messages)).iterator(); while ((((failedAttempts.intValue()) < maxFailedAttempts) && ((prestartedVmsCounter.intValue()) < numOfVmsToPrestart)) && (iterator.hasNext())) { org.ovirt.engine.core.compat.Guid vmId = iterator.next(); <END_MOD>if (<START_MOD>prestartVm(vmId, (!(vmPool.isStateful())), vmPool.getName())) { prestartedVmsCounter.incrementAndGet(); failedAttempts.set(<END_MOD>0)<START_MOD>; } else<END_MOD> { <START_MOD>failedAttempts.incrementAndGet(); } } logResultOfPrestartVms(prestartedVmsCounter.intValue(), numOfVmsToPrestart, vmPool.getVmPoolId(), failureReasons); if ((prestartedVmsCounter.intValue()) == 0) { org.ovirt.engine.core.bll.VmPoolMonitor.log.info( VMs available <END_MOD>for <START_MOD>prestarting<END_MOD> } }
private java.lang.String getNetworkId(java.lang.String networkName, java.lang.String clusterId) { org.ovirt.engine.core.compat.NGuid dataCenterId = getEntity(org.ovirt.engine.core.common.businessentities.VDSGroup.class, VdcQueryType.GetVdsGroupById, new org.ovirt.engine.core.common.queries.GetVdsGroupByIdParameters(asGuid(clusterId)), null).getstorage_pool_id(); org.ovirt.engine.core.common.queries.GetAllNetworkQueryParamenters params = new org.ovirt.engine.core.common.queries.GetAllNetworkQueryParamenters(asGuid(dataCenterId)); java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> networks = getBackendCollection(VdcQueryType.GetAllNetworks, params); for (org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> nw : networks) { if (nw.getname().equals(networkName)) { return nw.getId().toString(); } } return null; }
<START_MOD>private boolean isSelectedProvidersOfType(org.ovirt.engine.core.common.businessentities.ProviderType providerType) { return ((getSelectedItems()) != null) && (getSelectedItems().stream().allMatch(( provider) -> (provider.getType()) == providerType)); }<END_MOD>
<START_MOD>@org.junit.Before public void setUp() { createCluster(); createParameters(); injectMocks(); createCommandContext(); createCommand(); mockBackend(); }<END_MOD>
<START_MOD>@java.lang.SuppressWarnings("unchecked") @java.lang.Override public org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity = createInterface(rs); org.ovirt.engine.core.dao.network.InterfaceDaoDbFacadeImpl.HostNetworkStatisticsRowMapper statisticsMapper = new org.ovirt.engine.core.dao.network.InterfaceDaoDbFacadeImpl.HostNetworkStatisticsRowMapper(); entity.setStatistics(statisticsMapper.mapRow(rs, rowNum)); entity.setType(((java.lang.Integer) (rs.getObject("type")))); entity.setGateway(rs.getString("gateway")); entity.setSubnet(rs.getString("subnet")); entity.setAddress(rs.getString("addr")); entity.setNetworkName(rs.getString("network_name")); entity.setName(rs.getString("name")); entity.setVdsId(getGuid(rs, "vds_id")); entity.setVdsName(rs.getString("vds_name")); entity.setId(getGuidDefaultEmpty(rs, "id")); entity.setBootProtocol(org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.forValue(rs.getInt("boot_protocol"))); entity.setMtu(rs.getInt("mtu")); entity.setBridged(rs.getBoolean("bridged")); entity.setQos(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getHostNetworkQosDao().get(entity.getId())); entity.setQosOverridden(rs.getBoolean("qos_overridden")); entity.setLabels(org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserialize(rs.getString("labels"), java.util.HashSet.class)); entity.setCustomProperties(org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserialize(rs.getString("custom_properties"), java.util.LinkedHashMap.class)); return entity; }<END_MOD>
<START_MOD>public void onManualRefresh() { setLoadingState(LoadingState.LOADING); }<END_MOD>
private<START_MOD> java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceProxySourceType> getFenceProxySources() { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceProxySourceType> fenceProxySources = _vds.getFenceProxySources(); if ((fenceProxySources == null) || (fenceProxySources.isEmpty())) { fenceProxySources =<END_MOD> org.ovirt.engine.core.<START_MOD>common<END_MOD>.<START_MOD>utils<END_MOD>.<START_MOD>pm.FenceProxySourceTypeHelper.parseFromString<END_MOD>(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.FenceProxyDefaultPreferences)); } return <START_MOD>fenceProxySources<END_MOD>; }
@java.lang.Override public void eventRaised(org.ovirt.engine.core.compat.Event ev, java.lang.Object sender, org.ovirt.engine.core.compat.EventArgs args) { org.ovirt.engine.ui.frontend.FrontendFailureEventArgs failureArgs = ((org.ovirt.engine.ui.frontend.FrontendFailureEventArgs) (args)); if ((failureArgs.getMessage()) != null) { errorPopupManager.show(org.ovirt.engine.ui.common.uicommon.ErrorMessageFormatter.formatMessage(failureArgs.getMessage())); } else if ((failureArgs.getMessages()) != null) { errorPopupManager.show(org.ovirt.engine.ui.common.uicommon.ErrorMessageFormatter.formatMessages(failureArgs.getMessages())); } }
private static void markTabs(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.<START_MOD>gwtbootstrap3<END_MOD>.<START_MOD>client<END_MOD>.ui.<START_MOD>TabListItem<END_MOD>> mapping) { for (java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.TabName, org.<START_MOD>gwtbootstrap3<END_MOD>.<START_MOD>client<END_MOD>.ui.<START_MOD>TabListItem<END_MOD>> entry : mapping.entrySet()) { if (invalidTabs.contains(entry.getKey())) { } else { } } }
@java.lang.Override public void setListValue(java.util.List<T> value) { selectedList.clear(); selectedList.addAll(value); com.google.gwt.user.client.ui.ListBox listBox = org.ovirt.engine.ui.common.widget.editor.ListModelMultipleSelectListBox.asListBox(); if ((listBox.getSelectedIndex()) > (-1)) { listBox.setItemSelected(listBox.getSelectedIndex(), false); } for (T item : selectedList) { <START_MOD>if (((typedItemList.indexOf(item)) > (-1)) && ((typedItemList.indexOf(item)) < (listBox.getItemCount()))) { <END_MOD>listBox.setItemSelected(<START_MOD>typedItemList<END_MOD>.indexOf(item), true); } }<START_MOD> }<END_MOD>
@org.junit.Test public void canDoActionThinProvisioningSpaceCheckSucceeds() throws java.lang.Exception { final int availableSize = 6; final int usedSize = 4; org.ovirt.engine.core.compat.Guid sdid = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(sdid, VolumeType.Sparse); mockVm(); mockStorageDomain(sdid, availableSize, usedSize); mockStoragePoolIsoMap(); <START_MOD>mockMaxPciSlots(); <END_MOD>assertTrue(command.canDoAction()); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Version - java.lang.String osVersionAbout();
<START_MOD>public void setRow(int row) { this.row = row; }<END_MOD>
<START_MOD>@org.junit.Test public void testMoveBySdId() throws java.lang.Exception { setUpEntityQueryExpectations(1); setUriInfo(setUpActionExpectations(VdcActionType.MoveDisks, org.ovirt.engine.core.common.action.MoveDisksParameters.class, new java.lang.String[]{ "ParametersList" }, new java.lang.Object[]{ java.util.Collections.singletonList(new org.ovirt.engine.core.common.action.MoveDiskParameters(GUIDS[1], org.ovirt.engine.core.compat.Guid.Empty, GUIDS[3])) })); verifyActionResponse(((org.ovirt.engine.api.resource.VmDiskResource) (resource)).move(setUpMoveParams(false))); }<END_MOD>
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel object) { driver.edit(object); diskAliasLabel.asValueBox().setValue(object.getAlias().getEntity()); diskSizeLabel.asValueBox().setValue(new org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer<java.lang.Integer>(SizeConverter.SizeUnit.GB).render(object.getSize().getEntity())); object.getVolumeType().setSelectedItem(((org.ovirt.engine.core.common.businessentities.DiskImage) (object.getDisk())).getVolumeType()); <START_MOD>object.getVolumeFormat().setSelectedItem(((org.ovirt.engine.core.common.businessentities.DiskImage) (object.getDisk())).getVolumeFormat()); <END_MOD>sourceStorageLabel.getElement().getElementsByTagName("input").getItem(0).getStyle().setBorderColor("transparent"); updateStyles(object.getQuota().getIsAvailable()); }
@org.junit.BeforeClass public static void beforeClass() { org.ovirt.engine.core.notifier.utils.NotificationProperties.<START_MOD>release(); org.ovirt.engine.core.notifier.utils.NotificationProperties.<END_MOD>setDefaults(<START_MOD>java.lang.ClassLoader.getSystemResource("conf/notifier-prop-test.conf").getPath()<END_MOD>, <START_MOD>""<END_MOD>); org.ovirt.engine.core.notifier.utils.NotificationPropertiesTest.prop = org.ovirt.engine.core.notifier.utils.NotificationProperties.getInstance(); assertNotNull(org.ovirt.engine.core.notifier.utils.NotificationPropertiesTest.prop); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Messages<END_MOD>.DefaultMessage( field is empty for host with address {0} java.lang.String importClusterHostNameEmpty(java.lang.String address);
<START_MOD>public void setAttachedDirectLunsIds(java.util.Collection<java.lang.String> attachedDirectLunsIds) { this.attachedDirectLunsIds = attachedDirectLunsIds; }<END_MOD>
private org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>validator<END_MOD>.NetworkCluster getNetworkCluster() { if ((networkCluster) == null) { org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>validator<END_MOD>.NetworkClusterId networkClusterId = new org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>validator<END_MOD>.NetworkClusterId(host.getClusterId(), attachment.getNetworkId()); networkCluster = networkClusterDao.get(networkClusterId); } return networkCluster; }
<START_MOD>private boolean checkClusterFeaturesSupported(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdss, java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> newFeaturesEnabled) { java.util.Set<java.lang.String> featuresNamesEnabled = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature : newFeaturesEnabled) { featuresNamesEnabled.add(feature.getFeature().getName()); } for (org.ovirt.engine.core.common.businessentities.VDS vds : vdss) { java.util.Set<java.lang.String> featuresSupportedByVds = getHostFeatureDao().getSupportedHostFeaturesByHostId(vds.getId()); if (!(featuresSupportedByVds.containsAll(featuresNamesEnabled))) { return false; } } return true; }<END_MOD>
<START_MOD>@org.junit.Test public void shouldDetectEqualOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("RHEL", new org.ovirt.engine.core.compat.Version("6.3")).isEqualOs(new org.ovirt.engine.core.bll.scheduling.OS("oVirt Node", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("RHEL", new org.ovirt.engine.core.compat.Version("6.3")).isEqualOs(new org.ovirt.engine.core.bll.scheduling.OS("RHEV Hypervisor", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("oVirt Node", new org.ovirt.engine.core.compat.Version("6.3")).isEqualOs(new org.ovirt.engine.core.bll.scheduling.OS("RHEV Hypervisor", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); }<END_MOD>
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getDiskImage().getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
<START_MOD>@org.junit.Before public void setUp() { _sshdialog = new org.ovirt.engine.core.utils.hostinstall.SSHDialog(); _sshdialog.setHost(org.ovirt.engine.core.utils.hostinstall.SSHDialogTest.s_host, org.ovirt.engine.core.utils.hostinstall.SSHDialogTest.s_port); _sshdialog.setPassword(org.ovirt.engine.core.utils.hostinstall.SSHDialogTest.s_password); _sshdialog.setKeyPair(org.ovirt.engine.core.utils.hostinstall.SSHDialogTest.s_keyPair); _sshdialog.setSoftTimeout((10 * 1000)); _sshdialog.setHardTimeout((30 * 1000)); }<END_MOD>
<START_MOD>@org.junit.Before public void setup() { doReturn(dbFacade).when(validator).getDbFacade(); doReturn(storageServerConnectionExtensionDao).when(dbFacade).getStorageServerConnectionExtensionDao(); doReturn(vdsDao).when(dbFacade).getVdsDao(); doReturn(new org.ovirt.engine.core.common.businessentities.VDS()).when(vdsDao).get(any(org.ovirt.engine.core.compat.Guid.class)); conn = new org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension(); conn.setHostId(org.ovirt.engine.core.compat.Guid.newGuid()); conn.setIqn("iqn1"); conn.setUserName("user1"); conn.setPassword("password1"); }<END_MOD>
<START_MOD>public void buildCrumbs(java.lang.String modelTitle, java.lang.String modelHref) { breadCrumbs.clear(); breadCrumbs.add(new org.gwtbootstrap3.client.ui.AnchorListItem("")); java.lang.String primaryLabel = menuLayout.getPrimaryGroupTitle(modelTitle); if (primaryLabel != null) { breadCrumbs.add(new org.gwtbootstrap3.client.ui.ListItem(primaryLabel)); } org.gwtbootstrap3.client.ui.AnchorListItem mainModelAnchor = new org.gwtbootstrap3.client.ui.AnchorListItem(modelTitle); mainModelAnchor.setHref(("#" + modelHref)); breadCrumbs.add(mainModelAnchor); if ((currentSelectedItemWidget) != null) { breadCrumbs.add(currentSelectedItemWidget); } }<END_MOD>
@java.lang.Override public void update(java.util.Observable o, java.lang.Object arg) { org.ovirt.engine.core.notifier.dao.DispatchData dispatch = ((org.ovirt.engine.core.notifier.dao.DispatchData) (arg)); org.ovirt.engine.core.notifier.filter.AuditLogEvent event = ((org.ovirt.engine.core.notifier.filter.AuditLogEvent) (dispatch.getEvent())); java.sql.Connection connection = null; java.sql.CallableStatement cs = null; try { connection = ds.getConnection(); cs = connection.prepareCall( Insertevent_notification_hist(?,?,?,?,?,?)} cs.setLong(1, event.getId()); cs.setString(2, event.getLogTypeName()); cs.setString(3, dispatch.getNotificationMethod().name()); cs.setString(4, dispatch.getErrorMessage()); cs.setTimestamp(5, new java.sql.Timestamp(new java.util.Date().getTime())); cs.setBoolean(6, dispatch.isSuccess()); cs.executeUpdate(); } catch (java.sql.SQLException e) { org.ovirt.engine.core.notifier.dao.EventsManager.log.error( not insert event notification history event e); } finally { org.ovirt.engine.core.utils.db.DbUtils.closeQuietly(cs, connection); } }
@org.junit.Test public void <START_MOD>testCanDoActionDomainLocked<END_MOD>() { <START_MOD>testCanDoActionDomainInProcess<END_MOD>(StorageDomainStatus.Locked); }
<START_MOD>private boolean resumeGeoRepSessions(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> geoRepSessions) { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session : geoRepSessions) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity slaveVolume = getDbFacade().getGlusterVolumeDao().getById(session.getSlaveVolumeId()); if (slaveVolume == null) { continue; } org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = runInternalAction(VdcActionType.ResumeGeoRepSession, new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters(getGlusterVolumeId(), session.getId())); if (!(retVal.getSucceeded())) { handleVdsError(AuditLogType.GLUSTER_VOLUME_GEO_REP_RESUME_FAILED, retVal.getExecuteFailedMessages().toString()); setSucceeded(false); return false; } } return true; }<END_MOD>
@org.junit.Test public void testExecuteCommandFailsWithClusterIdForStart() { cmd = spy(new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand(new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters(org.ovirt.engine.core.compat.Guid.newGuid(), null, org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT, org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_START))); setUpMockUpForStart(); mockBackend(false, <START_MOD>EngineErrors<END_MOD>.GlusterServicesActionFailed, GlusterServiceStatus.STOPPED); cmd.executeCommand(); verify(serverServiceDao, never()).updateByServerIdAndServiceType(any(org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService.class)); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_SERVICE_START_FAILED); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet object) { return object.getDnsServers()<START_MOD>.stream().collect(java.util.stream.Collectors.joining(<END_MOD>   }
<START_MOD>public org.ovirt.engine.api.model.RSDL loadRsdl() throws java.io.IOException { java.io.InputStream stream = this.getClass().getResourceAsStream("/rsdl.xml"); return javax.xml.bind.JAXB.unmarshal(stream, org.ovirt.engine.api.model.RSDL.class); }<END_MOD>
private void writeListenerMap() { logger.log(Type.DEBUG,   to write ListenerMap sw.println(); sw.println("@Override"); sw.println(((   + (org.ovirt.engine.ui.common.editor.UiCommonListenerMap.class.getName())) +   getListenerMap() { sw.indent(); sw.println(((((org.ovirt.engine.ui.common.editor.UiCommonListenerMap.class.getName()) +   listenerMap = new   + (org.ovirt.engine.ui.common.editor.UiCommonListenerMap.class.getName())) + "();")); sw.println(); logger.log(Type.DEBUG,   for top-level Editor Fields for (com.google.gwt.editor.rebind.model.EditorData editorData : model.getEditorData()) { logger.log(Type.DEBUG, ( over Field:   + editorData)); java.lang.String path = editorData.getPath(); path = (java.lang.Character.toUpperCase(path.charAt(0))) + (path.substring(1, path.length())); if ((path.length()) == 0) { continue; } if (!(editorData.isDeclaredPathNested())) { logger.log(Type.DEBUG, ( top-level Field:   + editorData)); sw.println(   new org.ovirt.engine.ui.uicompat.IEventListener() { path); sw.indent(); sw.println("@Override"); sw.println( void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { sw.indent(); sw.println("getEditor().%s.setValue(getObject()%s);", editorData.getExpression(), editorData.getGetterExpression()); sw.outdent(); sw.println("}"); sw.outdent(); sw.println("});"); sw.println(); } } sw.println( listenerMap; sw.outdent(); sw.println("}"); }
<START_MOD>@java.lang.Override public org.ovirt.engine.api.resource.ImageTransferResource getImageTransferResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendImageTransferResource(id, this)); }<END_MOD>
private org.ovirt.engine.core.common.action.VdcReturnValueBase runActionImpl(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, boolean runAsInternal, org.ovirt.engine.core.bll.context.CommandContext context) { org.ovirt.engine.core.common.action.VdcReturnValueBase result; if (((!(actionType.isActionMonitored())) && (!(isActionExternal(actionType)))) && (((parameters.getJobId()) != null) || ((parameters.getStepId()) != null))) { result = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); result.getValidationMessages().add(EngineMessage.ACTION_TYPE_NON_MONITORED.toString()); result.setValid(false); result.setSucceeded(false); } else {<START_MOD> if (!runAsInternal) { logExecution(parameters.getSessionId(), java.lang.String.format( %s actionType), parameters.toString()); }<END_MOD> org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameters, context); result = runAction(command, runAsInternal); } return result; }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("vmsMonitoring") public void vmsMonitoring() { if (isMonitoringNeeded()) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = (getRefreshStatistics()) ? new org.ovirt.engine.core.vdsbroker.VmsStatisticsFetcher(this) : new org.ovirt.engine.core.vdsbroker.VmsListFetcher(this); fetcher.fetch(); new org.ovirt.engine.core.vdsbroker.VmsMonitoring(this, fetcher.getChangedVms(), fetcher.getVmsWithChangedDevices(), auditLogDirector).perform(); } <START_MOD>else { setVmsMonitoringFinished(); <END_MOD>}<START_MOD> }<END_MOD>
<START_MOD>public java.lang.String getCronExpression() { java.lang.String cronExpression = ""; switch (frequency) { case DAILY : cronExpression = org.ovirt.engine.core.compat.StringFormat.format("0 %s %s * * ? *", mins, hour); break; case WEEKLY : cronExpression = org.ovirt.engine.core.compat.StringFormat.format("0 %s %s ? * %s *", mins, hour, getDaysCron()); case NONE : cronExpression = ""; } return cronExpression; }<END_MOD>
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.CommandEntity entity) { return getCustomMapSqlParameterSource().addValue("command_id", (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(entity.getId()) ? org.ovirt.engine.core.compat.Guid.Empty : entity.getId())).addValue("command_type", entity.getCommandType().getValue()).addValue("root_command_id", (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(entity.getRootCommandId()) ? org.ovirt.engine.core.compat.Guid.Empty : entity.getRootCommandId())).addValue("job_id", (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(entity.getJobId()) ? org.ovirt.engine.core.compat.Guid.Empty : entity.getJobId())).addValue("step_id", (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(entity.getStepId()) ? org.ovirt.engine.core.compat.Guid.Empty : entity.getStepId())).addValue("action_parameters", serializeParameters(entity.getActionParameters())).addValue("action_parameters_class", ((entity.getActionParameters()) == null ? null : entity.getActionParameters().getClass().getName())).addValue("status", entity.getCommandStatus().toString()).addValue("executed", entity.isExecuted()).addValue(<START_MOD>"async", entity.isAsync()).addValue(<END_MOD>"callback_enabled", entity.isCallBackEnabled()).addValue("return_value", serializeReturnValue(entity.getReturnValue())).addValue("return_value_class", ((entity.getReturnValue()) == null ? null : entity.getReturnValue().getClass().getName())); }
private void validateImageType() { try { final java.io.InputStream inputStream = new java.io.ByteArrayInputStream(rawImageData); final javax.imageio.stream.ImageInputStream imageInputStream = javax.imageio.ImageIO.createImageInputStream(inputStream); final java.util.Iterator<javax.imageio.ImageReader> imageReaders = javax.imageio.ImageIO.getImageReaders(imageInputStream); if (!(imageReaders.hasNext())) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.PROVIDED_VM_ICON_OF_UNKNOWN_TYPE); return; } final java.lang.String formatName = imageReaders.next().getFormatName(); imageType = org.ovirt.engine.core.bll.validator.IconValidator.FileType.getByFormatName(formatName); if ((imageType) == null) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.PROVIDED_VM_ICONS_OF_UNSUPPORTED_TYPE, (   + formatName), (   + (org.ovirt.engine.core.bll.validator.IconValidator.FileType.getSupportedTypes()))); } } catch (java.io.IOException e) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.PROVIDED_VM_ICON_CANT_BE_READ); } }
<START_MOD>private void updateEnabled() { for (org.ovirt.engine.core.common.utils.Pair<T, V> item : items) { toggleEnabled(item.getSecond()); } }<END_MOD>
private void PrepareSanStorageForEdit(final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel model) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel storageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (getWindow())); org.ovirt.engine.core.common.businessentities.storage_domains storage = ((org.ovirt.engine.core.common.businessentities.storage_domains) (getSelectedItem())); boolean <START_MOD>isStorageEditable = (storageModel.<END_MOD>isStorageActive<START_MOD>()) || (storageModel.isNewStorage()<END_MOD>); if (<START_MOD>isStorageEditable<END_MOD>) { storageModel.getHost().getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { PostPrepareSanStorageForEdit(model, true); } }); } else { PostPrepareSanStorageForEdit(model, false); } }
<START_MOD>public static long collectForHost(org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager manager, org.ovirt.engine.core.common.businessentities.VDS host) { long sumMb = 0L; for (org.ovirt.engine.core.bll.scheduling.pending.PendingMemory resource : manager.pendingHostResources(host, org.ovirt.engine.core.bll.scheduling.pending.PendingMemory.class)) { sumMb += resource.getSizeInMb(); } return sumMb; }<END_MOD>
@org.ovirt.engine.ui.frontend.DefaultStringValue( ${action} ${type} if some of the specified custom properties are not configured by the system. These keys are: <START_MOD>${MissingKeys}<END_MOD> java.lang.String ACTION_TYPE_FAILED_INVALID_CUSTOM_VM_PROPERTIES_INVALID_KEYS();
public void setRunTime(<START_MOD>long<END_MOD> runTime) { this.runTime = runTime; }
<START_MOD>private static void setPropertiesFromAuditLogableBase(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { auditLog.setstorage_domain_id(auditLogable.getStorageDomainId()); auditLog.setstorage_domain_name(auditLogable.getStorageDomainName()); auditLog.setstorage_pool_id(auditLogable.getStoragePoolId()); auditLog.setstorage_pool_name(auditLogable.getStoragePoolName()); auditLog.setvds_group_id(auditLogable.getVdsGroupId()); auditLog.setvds_group_name(auditLogable.getVdsGroupName()); auditLog.setCorrelationId(auditLogable.getCorrelationId()); auditLog.setJobId(auditLogable.getJobId()); auditLog.setGlusterVolumeId(auditLogable.getGlusterVolumeId()); auditLog.setGlusterVolumeName(auditLogable.getGlusterVolumeName()); auditLog.setExternal(auditLogable.isExternal()); auditLog.setQuotaId(auditLogable.getQuotaIdForLog()); auditLog.setQuotaName(auditLogable.getQuotaNameForLog()); auditLog.setCallStack(auditLogable.getCallStack()); }<END_MOD>
<START_MOD>@org.junit.Test public void frontendToBackend_oneBuilder() { new org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel>(new org.ovirt.engine.ui.uicommonweb.builders.Property1Builder()).buildBackendFromFrontend(frontendModel, backendModel); assertThat(backendModel, is(equalTo(new org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel(org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutorTest.fe1, org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutorTest.be2)))); }<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response undelete(org.ovirt.engine.api.model.Action action) { return performAction(VdcActionType.<START_MOD>ClearDismissedAuditLogsBySeverity<END_MOD>, new org.ovirt.engine.core.common.action.<START_MOD>ClearDismissedAuditLogsBySeverityParameters<END_MOD>(<START_MOD>java.util.Arrays.asList(AuditLogSeverity.ERROR, AuditLogSeverity.WARNING, AuditLogSeverity.NORMAL, AuditLogSeverity.ALERT)<END_MOD>), action, false); }
private void updateTimeoutLogableObject(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.AuditLogType logType) { int eventFloodRate = ((auditLogable.isExternal()) && ((auditLogable.getEventFloodInSec()) == 0)) ? 30 : logType.getEventFloodRate(); if (eventFloodRate > 0) { auditLogable.setEndTime(java.util.concurrent.TimeUnit.SECONDS.toMillis(eventFloodRate)); auditLogable.setTimeoutObjectId(<START_MOD>org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.<END_MOD>composeObjectId(auditLogable, logType)); } }
<START_MOD>@org.junit.Test public void testNoAffinityGroups() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult notRenamingLabel(java.lang.String <START_MOD>newLabel) { java.lang.String <END_MOD>oldLabel<START_MOD> = network.getLabel();<END_MOD> if (((<START_MOD>oldLabel<END_MOD> == null) || (<START_MOD>newLabel == null)) || (<END_MOD>oldLabel.equals(<START_MOD>newLabel<END_MOD>))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics = getDbFacade().getInterfaceDao().getVdsInterfacesByNetworkId(network.getId()); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { <START_MOD>org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface labeledNic = null; <END_MOD>if (org.ovirt.engine.core.utils.NetworkUtils.<START_MOD>isVlan(nic)) { labeledNic = getBaseInterface(nic); } labeledNic = (labeledNic == null) ? nic : labeledNic; if ((org.ovirt.engine.core.utils.NetworkUtils.<END_MOD>isLabeled(<START_MOD>labeledNic<END_MOD>)) && (<START_MOD>labeledNic<END_MOD>.getLabels().contains(oldLabel))) { new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_LABEL_RENAMING_NOT_SUPPORTED); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
<START_MOD>private void fetchCpuProfiles(org.ovirt.engine.core.compat.Guid clusterId, final org.ovirt.engine.core.compat.Guid cpuProfileId) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetCpuProfilesByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.profiles.CpuProfile> cpuProfiles = ((java.util.List<org.ovirt.engine.core.common.businessentities.profiles.CpuProfile>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); getModel().getCpuProfiles().setItems(cpuProfiles); if (cpuProfiles != null) { for (org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile : cpuProfiles) { if (cpuProfile.getId().equals(cpuProfileId)) { getModel().getCpuProfiles().setSelectedItem(cpuProfile); } } } } })); }<END_MOD>
@org.junit.Test public void testSaveOrUpdate() { existingAsyncTask.setstatus(AsyncTaskStatusEnum.aborting); existingAsyncTask.setresult(AsyncTaskResultEnum.failure); existingAsyncTask.setaction_type(VdcActionType.AddDisk); org.ovirt.engine.core.common.action.AddDiskParameters addDiskToVmParams = new org.ovirt.engine.core.common.action.AddDiskParameters(); addDiskToVmParams.setSessionId("SESSION_ID"); org.ovirt.engine.core.common.action.AddImageFromScratchParameters taskParameters = new org.ovirt.engine.core.common.action.AddImageFromScratchParameters(); taskParameters.setParentParameters(addDiskToVmParams); taskParameters.setParentCommand(VdcActionType.AddDisk); existingAsyncTask.setActionParameters(addDiskToVmParams); existingAsyncTask.setTaskParameters(taskParameters); java.util.List<org.ovirt.engine.core.common.businessentities.AsyncTasks> tasks = dao.getAll(); assertNotNull(tasks); int tasksNumber = tasks.size(); dao.saveOrUpdate(existingAsyncTask, VdcObjectType.Disk); tasks = dao.getAll(); assertEquals(tasksNumber, tasks.size()); org.ovirt.engine.core.common.businessentities.AsyncTasks taskFromDb = dao.get(existingAsyncTask.<START_MOD>getVdsmTaskId<END_MOD>()); assertNotNull(taskFromDb); assertEquals(taskFromDb, existingAsyncTask); dao.saveOrUpdate(newAsyncTask, VdcObjectType.Disk, org.ovirt.engine.core.compat.Guid.NewGuid()); tasks = dao.getAll(); assertNotNull(tasks); assertEquals((tasksNumber + 1), tasks.size()); taskFromDb = dao.get(newAsyncTask.<START_MOD>getVdsmTaskId<END_MOD>()); assertEquals(taskFromDb, newAsyncTask); }
public org.ovirt.engine.core.bll.ValidationResult passthroughIsLinked() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_UNLINKING_OF_PASSTHROUGH_VNIC_IS_NOT_SUPPORTED).when(((nic.isPassthrough()) && (!(nic.isLinked())))); }
<START_MOD>public static java.util.List<java.lang.String> GetWindowsOsTypes() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncReturnValue<java.util.List<java.lang.String>> asyncReturnValue = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncReturnValue<java.util.List<java.lang.String>>(); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.OsRepository, new org.ovirt.engine.ui.uicommonweb.dataprovider.VdcQueryParametersBase(), asyncReturnValue); return asyncReturnValue.get(); }<END_MOD>
<START_MOD>public<END_MOD> org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>job<END_MOD>.<START_MOD>ExecutionContext<END_MOD> <START_MOD>getExecutionContext<END_MOD>(org.ovirt.engine.core.compat.Guid <START_MOD>stepId<END_MOD>);
<START_MOD>@org.junit.Test public void testRemoveWithAction() throws java.lang.Exception { org.ovirt.engine.api.model.GlusterBrick brick = new org.ovirt.engine.api.model.GlusterBrick(); org.ovirt.engine.api.model.GlusterVolume volume = new org.ovirt.engine.api.model.GlusterVolume(); brick.setName((((org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBricksResourceTest.serverName) + ":") + (org.ovirt.engine.api.restapi.resource.gluster.GlusterTestHelper.brickDir))); volume.setId(org.ovirt.engine.api.restapi.resource.gluster.GlusterTestHelper.volumeId.toString()); brick.setGlusterVolume(volume); org.ovirt.engine.api.model.GlusterBricks bricks = control.createMock(org.ovirt.engine.api.model.GlusterBricks.class); expect(bricks.getGlusterBricks()).andReturn(java.util.Collections.singletonList(brick)).anyTimes(); setUriInfo(setUpActionExpectations(VdcActionType.CommitRemoveGlusterVolumeBricks, org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, true, true)); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setBricks(bricks); collection.remove(action); }<END_MOD>
private javax.ws.rs.core.Response attachDiskToVm(org.ovirt.engine.api.model.Disk disk) { boolean isDiskActive = <START_MOD>org.apache.commons.lang.BooleanUtils.toBooleanDefaultIfNull<END_MOD>(disk.isActive()<START_MOD>,<END_MOD> false<START_MOD>); boolean isDiskReadOnly = org.apache.commons.lang.BooleanUtils.toBooleanDefaultIfNull(disk.isReadOnly(), false)<END_MOD>; org.ovirt.engine.core.common.action.AttachDettachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDettachVmDiskParameters(parentId, org.ovirt.engine.core.compat.Guid.createGuidFromString(disk.getId()), isDiskActive<START_MOD>, isDiskReadOnly<END_MOD>); return performAction(VdcActionType.AttachDiskToVm, params); }
boolean isLink(<START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.sdk.types.Identified<END_MOD> object);
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( provider certificates java.lang.String importProviderCertificatesTitle();
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> getExternalHostsType() { return externalHostsType; }<END_MOD>
@org.ovirt.engine.ui.frontend.DefaultStringValue( <START_MOD>volume<END_MOD> <START_MOD>snapshot<END_MOD> <START_MOD>configuration<END_MOD> <START_MOD>failed<END_MOD> java.lang.String <START_MOD>GlusterSnapshotConfigFailedException<END_MOD>();
public java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> getNetworks() { return networks; }
<START_MOD>public void setGeoRepSessionSummary(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession>> geoRepSessionSummary) { this.geoRepSessionSummary = geoRepSessionSummary; }<END_MOD>
<START_MOD>private void UpdateVolumeDetails() { org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel innerGeneralModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumeList = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>) (result)); int volumesUp = 0; int volumesDown = 0; for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity : volumeList) { if ((volumeEntity.getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeStatus.UP)) { volumesUp++; } else { volumesDown++; } } setNoOfVolumesTotal(volumeList.size()); setNoOfVolumesUp(volumesUp); setNoOfVolumesDown(volumesDown); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetVolumeList(_asyncQuery, getEntity().getname()); }<END_MOD>
<START_MOD>private java.util.List<java.lang.String> getAuthzNamespaces() { return namespacesMap.get(((org.ovirt.engine.core.aaa.ProfileEntry) (getProfile().getSelectedItem())).getAuthz()); }<END_MOD>
public static boolean isNetworkInSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.network.Network network) { return <START_MOD>(<END_MOD>((((network.getMtu()) == 0) || ((iface.getMtu()) == (network.getMtu()))) && (java.util.Objects.equals(iface.getVlanId(), network.getVlanId()))) && ((iface.isBridged()) == (network.isVmNetwork()))<START_MOD>) && (java.util.Objects.equals(iface.getQos(), network.getQos()))<END_MOD>; }
@java.lang.Override public void runningSucceded() { try { getDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugPassthroughNics(); } finally { super.runningSucceded(); <START_MOD>lockManager.releaseLock(destinationHostLock); <END_MOD>} }
public org.ovirt.engine.core.bll.ValidationResult isCinderSupportedInDC() { if ((!(getStoragePool().isLocal())) && (!(org.ovirt.engine.core.common.FeatureSupported.cinderProviderSupported(getStoragePool().getCompatibilityVersion())))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.DATA_CENTER_CINDER_STORAGE_NOT_SUPPORTED_IN_CURRENT_VERSION); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if (!(hostDeviceManager.checkVmNeedsDirectPassthrough(vm))) { return hosts; } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.isHostDevicePassthroughEnabled()) { list.add(host); } else { messages.addMessage(host.getId(), <START_MOD>EngineMessages<END_MOD>.VAR__DETAIL__HOSTDEV_DISABLED.toString()); org.ovirt.engine.core.bll.scheduling.policyunits.HostDeviceFilterPolicyUnit.log.debug( '{}' does not support host device passthrough host.getName()); } } return list; }
@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.canRunActionOnNonManagedVm())) { return false; } if ((!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.isInternalExecution())) && (!(org.ovirt.engine.core.utils.ObjectIdentityChecker.canUpdateField(org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm(), "clusterId", org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm().getStatus())))) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } org.ovirt.engine.core.bll.ChangeVmClusterValidator validator = new org.ovirt.engine.core.bll.ChangeVmClusterValidator(this, org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getClusterId(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getVmCustomCompatibilityVersion()<START_MOD>, vmDeviceUtils<END_MOD>); return validator.validate(); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterServicesReturnForXmlRpc glusterServicesAction(org.ovirt.engine.core.compat.Guid serverId, java.lang.String[] serviceList, java.lang.String actionType) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterService.action").withParameter("serviceNames", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(serviceList))).withParameter("action", actionType).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterServicesReturnForXmlRpc(serverId, response); }
@org.junit.Test public void managedNetworkAddedToNic() { org.ovirt.engine.core.common.businessentities.network net = createNetwork("net"); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNic("nic0", null); mockExistingNetworks(net); mockExistingIfaces(nic); nic.setNetworkName(net.getName()); <START_MOD>validateAndAssertNetworkModified<END_MOD>(<START_MOD>net<END_MOD>, <START_MOD>nic<END_MOD>); }
<START_MOD>public org.ovirt.engine.ui.common.widget.table.column.TooltipCell<C> getCell() { return ((org.ovirt.engine.ui.common.widget.table.column.TooltipCell<C>) (super.getCell())); }<END_MOD>
<START_MOD>public org.ovirt.engine.ui.uicommonweb.UiAction getCommitNetworkChangesAction() { return new org.ovirt.engine.ui.uicommonweb.UiVdcAction(org.ovirt.engine.core.common.action.VdcActionType.CommitNetworkChanges, new org.ovirt.engine.core.common.action.VdsActionParameters(getEntity().getId()), getSetupNetworksModel(), true) { @java.lang.Override protected boolean shouldExecute() { org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> commitChanges = getSetupNetworksModel().getCommitChanges(); return commitChanges.getEntity(); } }; }<END_MOD>
<START_MOD>public static java.lang.String getDefaultConfigurationVersion() { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; }<END_MOD>
<START_MOD>public boolean isClusterUpgradePolicy() { return (getFilterPositionMap()) != null ? getFilterPositionMap().containsKey(org.ovirt.engine.core.common.scheduling.ClusterPolicy.UPGRADE_POLICY_UNIT_GUID) : false; }<END_MOD>
<START_MOD>@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, org.ovirt.engine.core.common.businessentities.VM vm) { vm.setVmtGuid(model.getTemplate().getSelectedItem().getId()); vm.setVmDescription(model.getDescription().getEntity()); vm.setComment(model.getComment().getEntity()); }<END_MOD>
<START_MOD>public static void init() { if (!(org.ovirt.engine.core.bll.gluster.GlusterJobsManager.glusterModeSupported())) { org.ovirt.engine.core.bll.gluster.GlusterJobsManager.log.debug("Gluster mode not supported. Will not schedule jobs for refreshing Gluster data."); return; } org.ovirt.engine.core.bll.gluster.GlusterJobsManager.log.debug("Initializing Gluster Jobs Manager"); org.ovirt.engine.core.utils.timer.SchedulerUtil scheduler = org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.getInstance(); scheduler.scheduleAFixedDelayJob(org.ovirt.engine.core.bll.gluster.GlusterSyncManager.getInstance(), "refreshLightWeightData", new java.lang.Class[0], new java.lang.Object[0], org.ovirt.engine.core.bll.gluster.GlusterJobsManager.getGlusterRefreshRateLight(), org.ovirt.engine.core.bll.gluster.GlusterJobsManager.getGlusterRefreshRateLight(), java.util.concurrent.TimeUnit.SECONDS); scheduler.scheduleAFixedDelayJob(org.ovirt.engine.core.bll.gluster.GlusterSyncManager.getInstance(), "refreshHeavyWeightData", new java.lang.Class[0], new java.lang.Object[0], org.ovirt.engine.core.bll.gluster.GlusterJobsManager.getGlusterRefreshRateHeavy(), org.ovirt.engine.core.bll.gluster.GlusterJobsManager.getGlusterRefreshRateHeavy(), java.util.concurrent.TimeUnit.SECONDS); }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult diskImagesNotExist() { java.util.List<java.lang.String> disksNotExistInDbIds = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages) { if (!(isDiskExists(diskImage.getId()))) { disksNotExistInDbIds.add(diskImage.getId().toString()); } } if (!(disksNotExistInDbIds.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISKS_NOT_EXIST, java.lang.String.format( %s org.apache.commons.lang.StringUtils.join(disksNotExistInDbIds,     } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
<START_MOD>private void setInterface(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskInterface> diskInterfaces) { getDiskInterface().setItems(diskInterfaces); setDefaultInterface(); }<END_MOD>
<START_MOD>public void setCacheDevicePath(org.ovirt.engine.core.common.businessentities.CacheDevicePathType cacheDevicePath) { this.cacheDevicePath = cacheDevicePath; }<END_MOD>
@java.lang.Override protected void InitDetailModels() { super.InitDetailModels(); org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicompat<END_MOD>.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicompat<END_MOD>.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); list.add(new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateGeneralModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateImportInterfaceListModel()); this.templateImportDiskListModel = new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateImportDiskListModel(); list.add(templateImportDiskListModel); setDetailModels(list); }
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__REMOVE); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__POLICY_UNIT); }
<START_MOD>@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value, org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget widget) { super.onRemove(value, widget); model.updateKeys(); widgets.remove(widget); }<END_MOD>
org.ovirt.engine.core.common.businessentities.VDS <START_MOD>get<END_MOD>(java.lang.String name);
<START_MOD>@org.junit.Test public void testFirstVm() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); org.ovirt.engine.core.common.businessentities.VM vm1 = createVMDown(cluster); org.ovirt.engine.core.common.businessentities.VM vm2 = createVMDown(cluster); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, true, vm1, vm2, newVm)); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); affinityGroups.clear(); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, false, vm1, vm2, newVm)); scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); }<END_MOD>
<START_MOD>private void postClustersInit() { validateAllMacs(); for (final org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData : getEntities().getItems()) { final org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs> validateMacsListener = new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { final java.lang.Boolean reassignMacs = registerVmData.getReassignMacs().getEntity(); if (reassignMacs) { clearVmMacsWarning(registerVmData); } else { validateVmMacs(java.util.Collections.singletonList(registerVmData)); } } }; registerVmData.getReassignMacs().getEntityChangedEvent().addListener(validateMacsListener); registerVmData.getCluster().getSelectedItemChangedEvent().addListener(validateMacsListener); } }<END_MOD>
protected boolean validateBallonDevice() { if (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isBalloonDeviceExists(org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getManagedVmDeviceMap().values()))) { return true; } org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().get(org.ovirt.engine.core.common.osinfo.OsRepository.class); if (!(osRepository.isBalloonEnabled(org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getStaticData().getOsId(), org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroup().getCompatibilityVersion()))) { addCanDoActionMessageVariable("clusterArch", org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroup().getArchitecture()); return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.BALLOON_REQUESTED_ON_NOT_SUPPORTED_ARCH); } return true; }
private void AttachIso_EntityChanged() { getIsoImage().setIsChangable(((java.lang.Boolean) (getAttachIso().getEntity()))); getBootSequence().getCdromOption().setIsChangable(((java.lang.Boolean) (getAttachIso().getEntity()))); <START_MOD>updateInitialRunFields(); <END_MOD>}
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.create").withParameter("volumeName", volumeName).withParameter("bricklist", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(brickList))).withParameter("replicaCount", replicaCount).withParameter("stripeCount", stripeCount).withParameter("transportList", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(transportList))).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(response); }
private org.ovirt.engine.ui.common.widget.MenuBar menuFor(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item) { org.ovirt.engine.ui.common.widget.MenuBar menu = rootMenu(item); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> operationMap = item.getSetupModel().commandsFor(item); for (final java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> entry : operationMap.entrySet()) { final java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = entry.getValue(); if (entry.getKey().isUnary()) { assert (commands.size()) == 1 :   a NetworkCommand List with more than one Unary Operation menu.addItem(entry.getKey().getVerb(item), () -> executeCommand(entry.getKey(), commands.get(0))); } else { <START_MOD>org.ovirt.engine.ui.common.widget.MenuBar subMenu = subMenu(); for (final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand command : <END_MOD>commands<START_MOD>) { subMenu.addItem(new com.google.gwt.user.client.ui.MenuItem(command.<END_MOD>getName<START_MOD>(), () -> executeCommand(entry.getKey(), command))); } menu.addItem(entry.getKey().getVerb(item),<END_MOD> subMenu); } <START_MOD>} return <END_MOD>menu; }
<START_MOD>private void onReplaceConfirmation() { cancelConfirmation(); org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel replaceBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel) (getWindow())); if (replaceBrickModel == null) { return; } if (!(replaceBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getEntity(); if (volumeEntity == null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity existingBrick = getSelectedItem(); if (existingBrick == null) { return; } org.ovirt.engine.core.common.businessentities.VDS server = replaceBrickModel.getServers().getSelectedItem(); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity newBrick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); newBrick.setVolumeId(volumeEntity.getId()); newBrick.setServerId(server.getId()); newBrick.setServerName(server.getHostName()); newBrick.setBrickDirectory(replaceBrickModel.getBrickDirectory().getEntity()); replaceBrickModel.startProgress(); org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters parameter = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters(volumeEntity.getId(), existingBrick, newBrick); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.ReplaceGlusterVolumeBrick, parameter, ( result) -> { org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel) (result.getState())); localModel.stopProgress(); setWindow(null); }, replaceBrickModel); }<END_MOD>
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if (!(super.<START_MOD>validate<END_MOD>())) { return false; } if ((getSnapshot().getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterSnapshotStatus.ACTIVATED)) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_ALREADY_ACTIVATED, getSnapshot().getSnapshotName()); } return true; }
private org.ovirt.engine.core.common.businessentities.VM mockVm() { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(VMStatus.Down); vm.setVmtGuid(vmTemplateId); vm.setStaticData(getVmStatic()); vm.setClusterArch(ArchitectureType.x86_64); <START_MOD>vm.setTemplateVersion(1); <END_MOD>return vm; }
<START_MOD>private void vnicProfileValidationTest(org.hamcrest.Matcher<org.ovirt.engine.core.bll.ValidationResult> matcher, boolean profileExist, boolean networkExist, boolean qosExist, boolean qosSupported) { when(dbFacade.getVnicProfileDao()).thenReturn(vnicProfileDao); when(vnicProfileDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn((profileExist ? vnicProfile : null)); when(vnicProfile.getNetworkId()).thenReturn(DEFAULT_GUID); doReturn((networkExist ? network : null)).when(validator).getNetworkByVnicProfile(vnicProfile); doReturn(networkExist).when(validator).isNetworkInCluster(any(org.ovirt.engine.core.common.businessentities.network.Network.class), any(org.ovirt.engine.core.compat.Guid.class)); when(dbFacade.getQosDao()).thenReturn(networkQosDao); when(networkQosDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn((qosExist ? networkQos : null)); mockConfigRule.mockConfigValue(ConfigValues.NetworkQoSSupported, version, qosSupported); when(nic.getVnicProfileId()).thenReturn(org.ovirt.engine.core.bll.validator.VmNicValidatorTest.VNIC_PROFILE_ID); assertThat(validator.profileValid(OTHER_GUID), matcher); }<END_MOD>
private void setAttachedTagsConverter(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object <START_MOD>convert<END_MOD>(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags> ret = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Tags tags : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags>) (source))) { if ((tags.getType()) == (org.ovirt.engine.core.common.businessentities.TagsType.GeneralTag)) { ret.add(tags); } } return ret; } return new org.ovirt.engine.core.common.businessentities.Tags(); } }; }
<START_MOD>@org.ovirt.engine.core.bll.VdsDeploy.CallWhen(org.ovirt.engine.core.bll.VdsDeploy.CustomizationCondition.NEUTRON_LINUX_BRIDGE_SETUP) public java.lang.Void call() throws java.lang.Exception { _parser.cliEnvironmentSet("OPENSTACK_NEUTRON_LINUXBRIDGE_CONFIG/LINUX_BRIDGE/physical_interface_mappings", _openStackAgentProperties.getAgentConfiguration().getNetworkMappings()); return null; }<END_MOD>
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if ((org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm()) == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } return true; }
<START_MOD>@java.lang.Override public org.ovirt.engine.api.resource.LabelsResource getLabelsResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendNetworkLabelsResource(id)); }<END_MOD>
@org.junit.Test public void testAllDomainsHaveSpaceForNewDisksFailure() { setUpGeneralValidations(); setUpDiskValidations(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksList = java.util.Collections.emptyList(); doReturn(disksList).when(cmd).getDisksList(); doReturn(disksList).when(cmd).getDisksListForChecks(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(multipleStorageDomainsValidator).allDomainsHaveSpaceForNewDisks(disksList); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN); verify(multipleStorageDomainsValidator).allDomainsHaveSpaceForNewDisks(disksList); }
<START_MOD>@java.lang.Override protected java.lang.String renderNullSafe(java.lang.Object object) { return object.toString(); }<END_MOD>
<START_MOD>@java.lang.Override protected void init() { super.init(); setVmId(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getVmId()); }<END_MOD>
<START_MOD>private void detachDomainFromPool(org.ovirt.engine.core.common.businessentities.StorageDomain domain) { if ((domain.getStatus()) != (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Detaching)) { return; } for (org.ovirt.engine.core.common.businessentities.VDS hosts : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().getAllForStoragePool(_storagePoolId)) { if ((hosts.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance)) { continue; } if ((domainsVisibility.getDomainStatusByVds(domain.getId(), hosts.getId())) != (DomainVisibility.Status.MAINTENANCE)) { return; } } org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.infoFormat("Detaching domain {0} from pool", domain.getId(), _storagePoolId); org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap mapToRemove = domain.getStoragePoolIsoMapData(); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().remove(new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId(mapToRemove.getstorage_id(), mapToRemove.getstorage_pool_id())); }<END_MOD>
<START_MOD>public void heVmManaged() { when(hostedEngineHelper.isVmManaged()).thenReturn(true); assertThat(validator.isHeVmManaged(new org.ovirt.engine.core.common.businessentities.HostedEngineDeployConfiguration(true, "")), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }<END_MOD>
private void filterServices() { org.ovirt.engine.core.common.businessentities.VDS selectedVds = ((org.ovirt.engine.core.common.businessentities.VDS) (hostList.getSelectedItem())); org.ovirt.engine.core.common.businessentities.gluster.ServiceType serviceType = ((org.ovirt.engine.core.common.businessentities.gluster.ServiceType) (serviceTypeList.getSelectedItem())); java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService> serviceList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService>(getActualServiceList()); java.util.Collections.sort(serviceList, new java.util.Comparator<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService>() { @java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService o1, org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService o2) { return o1.getHostName().compareTo(o2.getHostName()); } }); <END_MOD>for (org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService service : <START_MOD>serviceList<END_MOD>) { if (((selectedVds == null) || (service.getHostName().equals(selectedVds.getHostName()))) && ((serviceType == null) || ((service.getServiceType()) == serviceType))) { list.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(service)); } } getServiceList().setItems(list); }
<START_MOD>@java.lang.Override public void setStreams(java.io.BufferedReader incoming, java.io.PrintWriter outgoing) { _incoming = incoming; }<END_MOD>
private void init() { setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editLogicalNetworkTitle()); setHashName("edit_logical_network"); getName().setEntity(getNetwork().getName()); getDescription().setEntity(getNetwork().getDescription()); getIsStpEnabled().setEntity(getNetwork().getStp()); getHasVLanTag().setEntity(((getNetwork().getVlanId()) != null)); getVLanTag().setEntity(((getNetwork().getVlanId()) == null ?   : getNetwork().getVlanId())); initMtu(); initIsVm(); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( to remove Data Center java.lang.String allowToRemoveDataCenterRoleTreeTooltip();
@java.lang.Override public java.lang.Void runInTransaction() { addPermission(); AddVmTemplateImages(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmInterfaces = addVmInterfaces(); org.ovirt.engine.core.bll.utils.VmDeviceUtils.copyVmDevices(getVmId(), getVmTemplateId(), newDiskImages, vmInterfaces<START_MOD>, getParameters().isSoundDeviceEnabled()<END_MOD>); setSucceeded(true); return null; }
public void setIsPowerManagementTabValid(boolean value) { if (value) { <START_MOD>invalidTabs.remove<END_MOD>(org.ovirt.engine.ui.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models.hosts.HostModel.HostTabNames.POWER_MANAGEMENT_TAB); } else { invalidTabs.add<END_MOD>(<START_MOD>org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.HostTabNames.POWER_MANAGEMENT_TAB<END_MOD>); } }
@java.lang.Override public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem) { super.initialize(systemTreeSelectedItem); if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(pool.getVmPoolSpiceProxy()))) { getModel().getSpiceProxyEnabled().setEntity(true); getModel().getSpiceProxy().setEntity(pool.getVmPoolSpiceProxy()); getModel().getSpiceProxy().setIsChangeable(true); } instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.ExistingPoolInstanceTypeManager(getModel(), pool); instanceTypeManager.setAlwaysEnabledFieldUpdate(true); getModel().getCustomProperties().setIsChangeable(false); getModel().getCustomPropertySheet().setIsChangeable(false); <START_MOD>getModel().getDiskAllocationTargetEnabled().setIsAvailable(java.lang.Boolean.TRUE); getModel().getDiskAllocationTargetEnabled().setIsChangeable(java.lang.Boolean.FALSE); getModel().getDiskAllocationTargetEnabled().setEntity(actualPool.isAutoStorageSelect()); <END_MOD>}
@javax.annotation.PostConstruct void init() {<START_MOD> entityManager = org.ovirt.engine.core.dao.jpa.EntityManagerHolder.getInstance().getThreadLocal().get(); if ((entityManager) == null) { entityManager = entityManagerFactory.createEntityManager(); org.ovirt.engine.core.dao.jpa.EntityManagerHolder.getInstance().getThreadLocal().set(entityManager); }<END_MOD> entityName = entityManager.getMetamodel().entity(entityType).getName(); }
<START_MOD>protected void adjustDisplayData(org.ovirt.engine.api.model.VM vm) { if (!(vm.getDisplay().isSetType())) { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsType> graphicsTypes = org.ovirt.engine.api.restapi.util.VmHelper.getInstance().getGraphicsTypesForEntity(new org.ovirt.engine.core.compat.Guid(vm.getId())); if (graphicsTypes.contains(GraphicsType.SPICE)) { vm.getDisplay().setType(DisplayType.SPICE.value()); } else if (graphicsTypes.contains(GraphicsType.VNC)) { vm.getDisplay().setType(DisplayType.VNC.value()); } else { vm.setDisplay(null); } } }<END_MOD>
public static void GetSANWipeAfterDelete(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Boolean) (source)).booleanValue() : false; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.SANWipeAfterDelete, org.ovirt.engine.core.common.config.<START_MOD>ConfigCommon.defaultConfigurationVersion<END_MOD>), aQuery); }
private void updateTaskStatuses(java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus>> poolsAllTasksMap) { for (org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task : _tasks.values()) { if (task.getShouldPoll()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus> asyncTasksForPoolMap = poolsAllTasksMap.get(task.getStoragePoolID()); if (asyncTasksForPoolMap != null) { org.ovirt.engine.core.common.businessentities.AsyncTaskStatus cachedAsyncTaskStatus = asyncTasksForPoolMap.get(task.getVdsmTaskId()); task.updateTask(cachedAsyncTaskStatus); <START_MOD>if (hasPartiallySubmittedRootCommand(task)) { task.setPartiallyCompletedCommandTask(true); } } } } }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__STORAGE__POOL); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__REMOVE); }
protected boolean validateSpaceRequirements() { boolean retValue = true; if (!(<START_MOD>isStorageDomainSpaceAboveThresholds<END_MOD>())) { retValue = false; addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN); addCanDoActionMessage(java.lang.String.format( %2$s "storageName", org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getStorageDomain().getstorage_name())); } if (retValue) { org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().getSnapshots().addAll(getAllImageSnapshots()); if (!(doesStorageDomainHaveSpaceForRequest(java.lang.Math.round(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().getActualDiskWithSnapshotsSize())))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW); retValue = false; } } return retValue; }
@java.lang.Override public java.lang.Void runInTransaction() { getBaseDiskDao().save(cinderDisk); getImageDao().save(cinderDisk.getImage()); getImageStorageDomainMapDao().save(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap(cinderDisk.getImageId(), cinderDisk.getStorageIds().get(0), cinderDisk.getQuotaId(), cinderDisk.getDiskProfileId())); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic(); diskDynamic.setId(cinderDisk.getImageId()); getDiskImageDynamicDao().save(diskDynamic); if ((getVm()) != null) { <START_MOD>addManagedDeviceForDisk<END_MOD>(); } return null; }
public org.ovirt.engine.core.bll.ValidationResult validateAmountOfIsoAndExportDomainsInDC() { if (!(isStorageDomainOfTypeIsoOrExport())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } final org.ovirt.engine.core.common.businessentities.StorageDomainType type = storageDomainStatic.getStorageDomainType(); int count = org.ovirt.engine.core.utils.linq.LinqUtils.filter(getStorageDomainDao().getAllForStoragePool(storagePool.getId()), new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.StorageDomain a) { return (a.getStorageDomainType()) == type; } }).size(); if (count == 0) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if (type == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ERROR_CANNOT_ATTACH_MORE_THAN_ONE_ISO_DOMAIN); } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ERROR_CANNOT_ATTACH_MORE_THAN_ONE_EXPORT_DOMAIN); } }
<START_MOD>@javax.annotation.PostConstruct abstract void postConstruct();<END_MOD>
<START_MOD>private void executeDeleteAndCallNew(final org.ovirt.engine.core.common.businessentities.VM vm) { if ((removeDiskModels.size()) == 0) { executeNewAndEdit(vm); return; } for (org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel removeDisk : removeDiskModels) { removeDisk.store(new org.ovirt.engine.ui.uicommonweb.ICommandTarget() { @java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { executeNewAndEdit(vm); } @java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand uiCommand, java.lang.Object... parameters) { executeNewAndEdit(vm); } }); } }<END_MOD>
<START_MOD>private boolean isAllDisksPlugged(java.util.List<org.ovirt.engine.core.common.action.MoveDiskParameters> moveDiskParamsList) { return isAllDisksPlugged(moveDiskParamsList, true); }<END_MOD>
private org.ovirt.engine.core.bll.ValidationResult modifiedAttachmentExists(org.ovirt.engine.core.compat.Guid networkAttachmentId) { boolean doesNotReferenceExistingNetworkAttachment = networkAttachmentId == null; if (doesNotReferenceExistingNetworkAttachment) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingAttachment : existingAttachments) { if (existingAttachment.getId().equals(networkAttachmentId)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_ATTACHMENT_NOT_EXISTS<START_MOD>, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.VAR_NETWORK_ATTACHMENT_NOT_EXISTS_ENTITY, networkAttachmentId.toString())); }<END_MOD>
<START_MOD>protected abstract boolean entititesEqualsNullSafe(java.lang.Object e1, java.lang.Object e2);<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.Step> getStepsByExternalId(org.ovirt.engine.core.compat.Guid externalId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("external_id", externalId); return getCallsHandler().executeReadList("GetStepsByExternalId", createEntityRowMapper(), parameterSource); }<END_MOD>
private boolean validateManagementNetworkAttachement() { final org.ovirt.engine.core.common.businessentities.network.Network managementNetwork; final org.ovirt.engine.core.compat.Guid managementNetworkId = org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getParameters().getManagementNetworkId(); if (managementNetworkId == null) { managementNetwork = getDefaultManagementNetworkFinder().findDefaultManagementNetwork(org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getVdsGroup().getStoragePoolId()); if (managementNetwork == null) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } } else { managementNetwork = getNetworkDao().get(managementNetworkId); if (managementNetwork == null) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.NETWORK_NOT_EXISTS); return false; } } managementNetworkCluster = createManagementNetworkCluster(managementNetwork); final org.ovirt.engine.core.bll.network.cluster.UpdateClusterNetworkClusterValidator networkClusterValidator = createManagementNetworkClusterValidator(); return validate(networkClusterValidator.managementNetworkChange()); }
@org.junit.Test public void testNetworkNotUsedByVmsWhenUsed() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network(); network.setId(org.ovirt.engine.core.compat.Guid.newGuid()); network.setName("name"); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); networkAttachment.setNetworkId(network.getId()); org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator validator = createNetworkAttachmentValidator(networkAttachment); when(vmInterfaceManager.findActiveVmsUsingNetworks(eq(host.getId()), collectionContainingOneGivenNetworkName(network.getName()))).thenReturn(java.util.Collections.singletonList("networkName")); when(networkDaoMock.get(eq(network.getId()))).thenReturn(network); assertThat(validator.networkNotUsedByVms(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NETWORK_IN_ONE_USE)); }
<START_MOD>@org.junit.Test public void testMoveBySdName() throws java.lang.Exception { setUpEntityQueryExpectations(1); setUpGetEntityExpectations(("Storage: name=" + (NAMES[2])), SearchType.StorageDomain, getStorageDomainEntity(0)); setUriInfo(setUpActionExpectations(VdcActionType.MoveDisks, org.ovirt.engine.core.common.action.MoveDisksParameters.class, new java.lang.String[]{ "ParametersList" }, new java.lang.Object[]{ java.util.Collections.singletonList(new org.ovirt.engine.core.common.action.MoveDiskParameters(GUIDS[1], org.ovirt.engine.core.compat.Guid.Empty, GUIDS[3])) })); verifyActionResponse(((org.ovirt.engine.api.resource.VmDiskResource) (resource)).move(setUpMoveParams(true))); }<END_MOD>
public static boolean isValidVmNetwork(org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface, org.ovirt.engine.core.compat.Guid clusterId) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> networksByName = org.ovirt.engine.core.common.businessentities.Entities.entitiesByName(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDAO().getAllForCluster(clusterId)); java.lang.String networkName = iface.getNetworkName(); return (networksByName.containsKey(networkName)) && (networksByName.get(networkName).isVmNetwork()); }
<START_MOD>@java.lang.Override protected boolean canDoAction() { if (super.canDoAction()) { return validate(getVfsConfigValidator().labelNotInVfsConfig(getLabel())); } return false; }<END_MOD>
@org.junit.Before public void setUp() throws java.lang.Exception { manager = new org.ovirt.engine.core.<START_MOD>bll<END_MOD>.OvfManager(); }
@org.junit.Test public void executeCommandWhenFailed() { cmd = spy(new org.ovirt.engine.core.bll.gluster.RemoveGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); setUpMocksForRemove(); mockBackend(false, <START_MOD>EngineErrors<END_MOD>.GlusterHookRemoveFailed); cmd.executeCommand(); verify(hooksDao, never()).remove(any(org.ovirt.engine.core.compat.Guid.class)); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_REMOVE_FAILED); }
private void UpdateCanSpecify() { org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> network = ((org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>) (getNetwork().getSelectedItem())); boolean isChangable = ((getIsStaticAddress()) && (network != null)) && (!(network.getId().equals(NGuid.Empty))); getAddress().setIsChangable(isChangable); getSubnet().setIsChangable(isChangable); }
private void generateUpdateMethod(org.ovirt.api.metamodel.concepts.Method method<START_MOD>,<END_MOD> org.ovirt.api.metamodel.concepts.<START_MOD>Name helperClassName, boolean base) { org.ovirt.api.metamodel.concepts.<END_MOD>Parameter mainParameter = <START_MOD>org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) { java.lang.System.err.println(((   + method) +   doesn have any struct parameter return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter<END_MOD>.getType()<START_MOD>; org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.PUT.class); javaBuffer.addImports(mainTypeReference.getImports()); generateDoc(method); javaBuffer.addLine("@PUT"); javaBuffer.addLine( %s }) generateMediaTypes()); java.lang.String parameterName = javaNames.getJavaMemberStyleName(mainParameter.getName()<END_MOD>); if (<START_MOD>base) { javaBuffer.addLine( %s update(%s %s) { mainTypeReference.getText(), mainTypeReference.getText(), parameterName); writeHelperInvocation(helperClassName, parameterName, method.getName()); javaBuffer.addLine("}"); } else {<END_MOD> addMethod(mainTypeReference.getText(),   %s) mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); <START_MOD>} javaBuffer.addLine(); }<END_MOD>
public java.lang.Boolean getKsmState() { return mVdsStatistics.getKsmState(); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( the default SPICE proxy value java.lang.String clusterSpiceProxyInfo();
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.PersistentSetupNetworks, new org.ovirt.engine.core.bll.network.AddNetworksByLabelParametersBuilder(<START_MOD>org.ovirt.engine.core.bll.network.host.LabelNicCommand.getContext()<END_MOD>).buildParameters(getNic(), getLabel(), getClusterNetworksByLabel()<START_MOD>), org.ovirt.engine.core.bll.network.host.LabelNicCommand.getContext().clone().withoutCompensationContext().withoutExecutionContext(<END_MOD>)); if (result.getSucceeded()) { org.ovirt.engine.core.bll.network.host.LabelNicCommand.getReturnValue().setActionReturnValue(getLabel()); } else { propagateFailure(result); } setSucceeded(result.getSucceeded()); }
@org.junit.Test public void testUpdate() { java.lang.String oldName = existingVdsGroup.getName(); existingVdsGroup.setName( is the new name existingVdsGroup.setVirtService(false); existingVdsGroup.setGlusterService(true<START_MOD>); existingVdsGroup.setSchedulerOptimizeForSpeed(false<END_MOD>); dao.update(existingVdsGroup); org.ovirt.engine.core.common.businessentities.VDSGroup result = dao.get(existingVdsGroup.getId()); assertCorrectVDSGroup(result); result = dao.getByName(oldName); assertNull(result); }
private void updateName(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { if (disk == null) { return; } java.lang.String diskName = disk.getDiskAlias(); java.lang.String size = java.lang.Long.toString(disk.getSize()); if ((disk.getDiskStorageType()) == (<START_MOD>org.ovirt.engine.core.common.businessentities.storage<END_MOD>.DiskStorageType.IMAGE)) { size = java.lang.Long.toString(((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)).getSizeInGigabytes()); } java.lang.String type; if (diskExists) { type = constants.existingDisk(); } else if ((getDiskModel().getEntity()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImagesAttachDiskModel) { type = constants.attachingDisk(); } else { type = constants.creatingDisk(); } java.lang.String boot = ""; if (disk.isBoot()) { boot = constants.bootDisk(); } name.setEntity(messages.vmDialogDisk(diskName, size, type, boot)); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.DataCenterSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.<START_MOD>ApplicationConstants applicationConstants, org<END_MOD>.<START_MOD>ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.AuditLog,<END_MOD> <START_MOD>org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel, org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterEventListModel> modelProvider<END_MOD>) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(<START_MOD>applicationConstants<END_MOD>.dataCenterEventSubTabLabel(), 5, <START_MOD>modelProvider<END_MOD>, org.ovirt.engine.ui.common.widget.Align.RIGHT); }
@org.ovirt.engine.ui.frontend.DefaultStringValue( connection denied. Another user has already accessed the console of this VM. The VM should be rebooted to allow another user to access it, or changed by an admin <START_MOD>not <END_MOD>to enforce reboot between users accessing its console. java.lang.String USER_CANNOT_FORCE_RECONNECT_TO_VM();
<START_MOD>private void addImageHeaders() { getMethod().setRequestHeader("connection", "close"); getMethod().setRequestHeader("Storage-Pool-Id", org.ovirt.engine.core.vdsbroker.irsbroker.HttpImageTaskVDSCommand.getParameters().getStoragePoolId().toString()); getMethod().setRequestHeader("Storage-Domain-Id", org.ovirt.engine.core.vdsbroker.irsbroker.HttpImageTaskVDSCommand.getParameters().getStorageDomainId().toString()); getMethod().setRequestHeader("Image-Id", org.ovirt.engine.core.vdsbroker.irsbroker.HttpImageTaskVDSCommand.getParameters().getImageGroupId().toString()); getMethod().setRequestHeader("Volume-Id", org.ovirt.engine.core.vdsbroker.irsbroker.HttpImageTaskVDSCommand.getParameters().getImageId().toString()); }<END_MOD>
<START_MOD>private org.ovirt.engine.api.restapi.resource.BackendUsersResource getUsersResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendUsersResource()); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Resources java.lang.String guarantyResourcesLabel();
<START_MOD>private void setGraphicsDevicesToParams(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, org.ovirt.engine.core.common.action.VmTemplateParametersBase params) { org.ovirt.engine.core.common.businessentities.GraphicsDevice graphicsFromModel = getGraphicsFromModel(model); if (graphicsFromModel != null) { params.setShouldUpdateGraphicsDevice(org.ovirt.engine.core.common.businessentities.GraphicsType.fromVmDeviceType(graphicsFromModel.getVmDeviceType()), true); params.setGraphicsDevice(graphicsFromModel); } }<END_MOD>
@java.lang.Override <START_MOD>protected<END_MOD> <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.utils.ToStringBuilder<END_MOD> <START_MOD>appendAttributes<END_MOD>(<START_MOD>org.ovirt.engine.core.common.utils.ToStringBuilder tsb<END_MOD>) { return super.<START_MOD>appendAttributes<END_MOD>(<START_MOD>tsb<END_MOD>)<START_MOD>.append("syncType"<END_MOD>, getSyncType()); }
@java.lang.Override public java.lang.String <START_MOD>getDisplayStringNullSafe<END_MOD>(java.lang.Object <START_MOD>data<END_MOD>) { return<START_MOD> org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget.typeAheadNameDescriptionTemplate.input(((org.ovirt.engine.core.common.businessentities.StoragePool) (data)).getname(),<END_MOD> ((org.ovirt.engine.core.common.businessentities.StoragePool) (<START_MOD>data<END_MOD>)).<START_MOD>getdescription()).asString<END_MOD>(); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.VdsStatic vds) { <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>compat.Guid<END_MOD> <START_MOD>id<END_MOD> =<START_MOD> vds.getId(); if (id == null) { id = org.ovirt.engine.core.compat.Guid.NewGuid(); vds.setId(id); }<END_MOD> new org.springframework.jdbc.core.simple.SimpleJdbcCall(jdbcTemplate).withProcedureName("InsertVdsStatic").execute(getInsertOrUpdateParams(vds)); }
@java.lang.Override protected void UpdateActionAvailability() { super.UpdateActionAvailability(); getConnectCommand().setIsExecutionAllowed(((((getEntity()) != null) && (((getEntity().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) || ((getEntity().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.PoweringDown)))) && (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsWindowsOsType(getEntity().<START_MOD>getVmOsId<END_MOD>())))); }
@java.lang.Override protected void executeVdsBrokerCommand() { <START_MOD>if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.POLL)) { <END_MOD>httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().poll(); }<START_MOD> else if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.POLL2)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().timeBoundPoll2(2, java.util.concurrent.TimeUnit.SECONDS); } else if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.CONFIRM_CONNECTIVITY)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().timeBoundPollConfirmConnectivity(2, java.util.concurrent.TimeUnit.SECONDS); } }<END_MOD>
public java.lang.Integer getReservedMem() { return mVdsDynamic.getReservedMem(); }
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__SHUTDOWN); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__VM); }
public org.ovirt.engine.core.bll.ValidationResult uuidNotExist() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.LIBVIRT_SECRET_UUID_ALREADY_EXISTS).unless(((libvirtSecretDao.get(libvirtSecret.getId())) == null)); }
protected void <START_MOD>storageType_SelectedItemChanged<END_MOD>() { <START_MOD>updateStorageSelectedItem(getAvailableStorageTypeItems()<END_MOD>.<START_MOD>getSelectedItem<END_MOD>(<START_MOD>), getAvailableStorageDomainTypeItems().getSelectedItem()<END_MOD>); if ((<START_MOD>getCurrentItem<END_MOD>()) != null) { updateFormat(); updateHost(); } <START_MOD>updateWipeAfterDelete(); <END_MOD>}
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmPool getByName(java.lang.String name) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_pool_name", name); return getCallsHandler().executeRead("GetVm_poolsByvm_pool_name", org.ovirt.engine.core.dao.<START_MOD>VmPoolDAOImpl<END_MOD>.VmPoolNonFullRowMapper.instance, parameterSource); }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.providers.HostNetworkProviderModel model) { driver.edit(model); final org.ovirt.engine.ui.uicommonweb.models.providers.NeutronAgentModel neutronAgentModel = model.getNeutronAgentModel(); neutronAgentWidget.edit(neutronAgentModel); neutronAgentPanel.setVisible(neutronAgentModel.isPluginConfigurationAvailable().getEntity()); neutronAgentModel.isPluginConfigurationAvailable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.EventArgs><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { neutronAgentPanel.setVisible(neutronAgentModel.isPluginConfigurationAvailable().getEntity()); } }); }
<START_MOD>private void doTestSetupNetworksSyncsNetwork(boolean imposeNetworkConfiguration, java.util.List<java.lang.String> expectedNetworksToSync) { org.ovirt.engine.api.model.HostNIC hostNic = new org.ovirt.engine.api.model.HostNIC(); org.ovirt.engine.api.model.Network network = new org.ovirt.engine.api.model.Network(); network.setName(org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.NETWORK_NAME); hostNic.setNetwork(network); hostNic.setImposeNetworkConfiguration(imposeNetworkConfiguration); org.ovirt.engine.api.model.HostNics hostNics = control.createMock(org.ovirt.engine.api.model.HostNics.class); expect(hostNics.getHostNics()).andReturn(java.util.Collections.singletonList(hostNic)).anyTimes(); setUriInfo(setUpActionExpectations(VdcActionType.SetupNetworks, org.ovirt.engine.core.common.action.SetupNetworksParameters.class, new java.lang.String[]{ "NetworksToSync" }, new java.lang.Object[]{ expectedNetworksToSync }, true, true)); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setHostNics(hostNics); collection.setupNetworks(action); }<END_MOD>
protected static boolean canRunPoolVm(org.ovirt.engine.core.compat.Guid vmId, java.util.ArrayList<java.lang.String> messages) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(vmId); if (vm == null) { messages.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND.name()); return false; } org.ovirt.engine.core.bll.VmHandler.updateNetworkInterfacesFromDb(vm); org.ovirt.engine.core.common.action.RunVmParams runVmParams = new org.ovirt.engine.core.common.action.RunVmParams(vmId); runVmParams.setUseVnc(((<START_MOD>OsRepositoryImpl.INSTANCE<END_MOD>.isLinux(<START_MOD>vm.getVmOsId()<END_MOD>)) || ((vm.getVmType()) == (org.ovirt.engine.core.common.businessentities.VmType.Server)))); org.ovirt.engine.core.bll.VdsSelector vdsSelector = new org.ovirt.engine.core.bll.VdsSelector(vm, ((runVmParams.getDestinationVdsId()) != null ? runVmParams.getDestinationVdsId() : vm.getDedicatedVmForVds()), true, new org.ovirt.engine.core.bll.VdsFreeMemoryChecker(new org.ovirt.engine.core.bll.NonWaitingDelayer())); return org.ovirt.engine.core.bll.VmRunHandler.getInstance().canRunVm(vm, messages, runVmParams, vdsSelector, new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator(), org.ovirt.engine.core.bll.VmPoolCommandBase.getVmPropertiesUtils()); }
<START_MOD>@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.ClusterEditWarnings warnings = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); if (((!(warnings.getHostWarnings().isEmpty())) || (!(warnings.getVmWarnings().isEmpty()))) || true) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterWarningsModel confirmWindow = new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterWarningsModel(); confirmWindow.init(warnings); confirmWindow.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSaveConfirmCpuLevel", this)); confirmWindow.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("CancelConfirmation", this)); setConfirmWindow(confirmWindow); } else { onSaveConfirmCpuLevel(); } }<END_MOD>
<START_MOD>private void writeImports() { javaBuffer.addLine("import org.slf4j.Logger;"); javaBuffer.addLine("import org.slf4j.LoggerFactory;"); javaBuffer.addImport(javax.xml.bind.annotation.XmlEnum.class); javaBuffer.addImport(javax.xml.bind.annotation.XmlEnumValue.class); javaBuffer.addImport(javax.xml.bind.annotation.XmlType.class); javaBuffer.addLine(); }<END_MOD>
@org.junit.Test public void testFcpFoundUnregisteredDomain() { when(getQueryParameters().getStorageType()).thenReturn(StorageType.FCP); when(getQueryParameters().getVdsId()).thenReturn(org.ovirt.engine.core.compat.Guid.newGuid()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = getLUNs(storageDomainId, vgId); doReturn(java.util.Collections.emptyList()).when(lunDao).getAll(); doReturn(org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>GetUnregisteredBlockStorageDomainsQueryTest.createGetDeviceListReturnValue(luns)).when(getQuery()).executeGetDeviceList(any(org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters.class)); doReturn(org.ovirt.engine.core.bll.storage<START_MOD>.domains<END_MOD>.GetUnregisteredBlockStorageDomainsQueryTest.createGetVGInfoReturnValue(luns)).when(getQuery()).executeGetVGInfo(any(org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters.class)); doReturn(createGetStorageDomainInfoReturnValue()).when(getQuery()).executeHSMGetStorageDomainInfo(any(org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters.class)); getQuery().executeQueryCommand(); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain>, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections>> returnValue = getQuery().getQueryReturnValue().getReturnValue(); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = returnValue.getFirst(); assertEquals(1, storageDomains.size()); assertEquals(storageDomains.get(0).getId(), storageDomainId); }
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.ReportedConfigurations.class, to = org.ovirt.engine.api.model.ReportedConfigurations.class) public static org.ovirt.engine.api.model.ReportedConfigurations map(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations entity, org.ovirt.engine.api.model.ReportedConfigurations template) { org.ovirt.engine.api.model.ReportedConfigurations model = (template == null) ? new org.ovirt.engine.api.model.ReportedConfigurations() : template; model.setInSync(entity.isNetworkInSync()); java.util.List<org.ovirt.engine.api.model.ReportedConfiguration> reportedConfigurationList = model.getReportedConfigurations(); for (org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations.ReportedConfiguration reportedConfiguration : entity.getReportedConfigurationList()) { org.ovirt.engine.api.model.ReportedConfiguration conf = new org.ovirt.engine.api.model.ReportedConfiguration(); conf.setInSync(reportedConfiguration.isInSync()); conf.setName(reportedConfiguration.getType().getName()); conf.setValue(reportedConfiguration.getValue()); reportedConfigurationList.add(conf); } return model; }<END_MOD>
<START_MOD>@org.junit.Test public void testValidateExternalVnicProfileMappingPositive() { final java.util.List<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> vnicProfileMappings = java.util.Arrays.asList(createMapping(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.VNIC_PROFILE_ID)); when(mockVnicProfileValidator.vnicProfileBelongsToCluster(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.VNIC_PROFILE_ID, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.CLUSTER_ID)).thenReturn(true); final java.util.Set<org.ovirt.engine.core.common.errors.EngineMessage> actual = underTest.validateExternalVnicProfileMapping(vnicProfileMappings, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.CLUSTER_ID); assertThat(actual, empty()); }<END_MOD>
public static java.util.List<java.lang.String> assertCanDoActionMessages(java.lang.String assertionMessage, org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD> message) { java.util.List<java.lang.String> canDoActionMessages = command.getReturnValue().getCanDoActionMessages(); assertTrue(java.text.MessageFormat.format( messages doesn''t contain expected message: {1}, messages are: {2} org.ovirt.engine.core.bll.CanDoActionTestUtils.optionalMessage(assertionMessage), message.name(), canDoActionMessages), canDoActionMessages.contains(message.name())); return canDoActionMessages; }
<START_MOD>public final java.io.File getBrandingRootPath() { return brandingRootPath; }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { getSyncJobInstance().refreshVolumeDetails(upServer, org.ovirt.engine.core.bll.gluster.RefreshGlusterVolumeDetailsCommand.getGlusterVolume()); org.ovirt.engine.core.bll.gluster.RefreshGlusterVolumeDetailsCommand.setSucceeded(true); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("V4") java.lang.String nfsVersion4();
@java.lang.Override protected void executeVDSCommand() { try { org.ovirt.engine.core.vdsbroker.irsbroker.<START_MOD>IrsProxy<END_MOD> proxyData = org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.<START_MOD>getCurrentIrsProxy<END_MOD>(); proxyData.clearPoolTimers(); proxyData.clearCache(); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.log.error( not change timers for pool '{}': {} org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getParameters().getStoragePoolId(), e.getMessage()); org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.log.debug("Exception", e); } org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getVDSReturnValue().setSucceeded(true); }
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("Host") java.lang.String xenHost();<END_MOD>
<START_MOD>void submitEventSync(org.ovirt.engine.core.common.eventqueue.Event event, java.util.concurrent.Callable<org.ovirt.engine.core.common.eventqueue.EventResult> callable);<END_MOD>
private void setPropertiesFromAuditLogableBase(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { auditLog.setstorage_domain_id(auditLogable.getStorageDomainId()); auditLog.setstorage_domain_name(auditLogable.getStorageDomainName()); auditLog.setstorage_pool_id(auditLogable.getStoragePoolId()); auditLog.setstorage_pool_name(auditLogable.getStoragePoolName()); auditLog.setvds_group_id(auditLogable.getVdsGroupId()); auditLog.setvds_group_name(auditLogable.getVdsGroupName()); auditLog.setCorrelationId(auditLogable.getCorrelationId()); auditLog.setJobId(auditLogable.getJobId()); auditLog.setGlusterVolumeId(auditLogable.getGlusterVolumeId()); auditLog.setGlusterVolumeName(auditLogable.getGlusterVolumeName()); auditLog.setExternal(auditLogable.isExternal()); auditLog.setQuotaId(auditLogable.getQuotaIdForLog()); auditLog.setQuotaName(auditLogable.getQuotaNameForLog()); auditLog.setCallStack(auditLogable.getCallStack()); }
<START_MOD>public<END_MOD> void <START_MOD>addDiskImageDynamicToSave<END_MOD>(org.ovirt.engine.core.common.businessentities.<START_MOD>DiskImageDynamic<END_MOD> <START_MOD>imageDynamic<END_MOD>) { <START_MOD>vmDiskImageDynamicToSave<END_MOD>.<START_MOD>add<END_MOD>(<START_MOD>imageDynamic<END_MOD>); }
@java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>T<END_MOD> returnValue) { final org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if (!(queryReturnValue.getSucceeded())) { final org.ovirt.engine.ui.uicommonweb.ErrorPopupManager popupManager = ((org.ovirt.engine.ui.uicommonweb.ErrorPopupManager) (org.ovirt.engine.ui.uicommonweb.TypeResolver.getInstance().resolve(org.ovirt.engine.ui.uicommonweb.ErrorPopupManager.class))); popupManager.show(queryReturnValue.getExceptionMessage()); return; } onRealSuccessCallback.onSuccess(model, returnValue); }
@java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.<START_MOD>core<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>queries<END_MOD>.<START_MOD>VdcQueryReturnValue<END_MOD> <START_MOD>returnValue<END_MOD>) <START_MOD>{<END_MOD> java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> list = returnValue.getReturnValue(); setPolicyUnits(list); fetchClusterPolicies(); if ((policyUnitModel) != null) { policyUnitModel.getPolicyUnits().setItems(sort(policyUnits)); } }
<START_MOD>@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; org.ovirt.engine.core.common.businessentities.EngineBackupLog other = ((org.ovirt.engine.core.common.businessentities.EngineBackupLog) (obj)); return (dbName.equals(other.getDbName())) && (doneAt.equals(other.getDoneAt())); }<END_MOD>
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.STORAGE, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
private void saveVmDevicesToDb() { <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> sortedVmDevices = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmDevice>(); sortedVmDevices.addAll(vmDeviceToSave.values()); sortVmDeviceList(sortedVmDevices); <END_MOD>org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.updateAllInTransaction(<START_MOD>sortedVmDevices<END_MOD>, getDbFacade().getVmDeviceDAO()); if (!(removedDeviceIds.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { getDbFacade().getVmDeviceDAO().removeAll(removedDeviceIds); return null; } }); } if (!(newVmDevices.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { getDbFacade().getVmDeviceDAO().saveAll(newVmDevices); return null; } }); } }
@java.lang.Override public void setSelectedItems(java.util.List<org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel> items) { <START_MOD>if <END_MOD>((items.size()) > <START_MOD>0)<END_MOD> <START_MOD>{<END_MOD> <START_MOD>org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel selectedItem = null; if ((getModel().getSelectedItem()) != null) { selectedItem = getModel().findNode(items.get(0), getModel().getSelectedItem()); } else { selectedItem =<END_MOD> items.get(0)<START_MOD>;<END_MOD> <START_MOD>}<END_MOD> <START_MOD>getModel(<END_MOD>)<START_MOD>.setSelectedItem(selectedItem<END_MOD>); }<START_MOD> else { getModel().setSelectedItem(null); } }<END_MOD>
<START_MOD>private void updateAlerts(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.cluster.SubTabClusterGeneralPresenter.ViewDef view, org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel model) { view.clearAlerts(); if (model.isConsoleAddressPartiallyOverridden()) { view.addAlert(constants.consolePartiallyOverridden()); } }<END_MOD>
<START_MOD>@java.lang.SuppressWarnings("unchecked") java.lang.Object convert(java.lang.Class<?> type, java.lang.String value, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache) { if (type.equals(java.lang.String.class)) { return value; } if (type.equals(int.class)) { return java.lang.Integer.valueOf(value); } else if (type.equals(float.class)) { return java.lang.Float.valueOf(value); } else if (type.equals(double.class)) { return java.lang.Double.valueOf(value); } else if (type.equals(boolean.class)) { return java.lang.Boolean.valueOf(value); } else if (type.equals(long.class)) { return java.lang.Long.valueOf(value); } if ((org.ovirt.engine.core.common.businessentities.BusinessEntity.class.isAssignableFrom(type)) && (cache.containsKey(new org.ovirt.engine.core.compat.Guid(value)))) { return cache.get(new org.ovirt.engine.core.compat.Guid(value)); } try { java.lang.reflect.Method converter = type.getMethod("valueOf", java.lang.String.class); if (converter != null) { return converter.invoke(type, value); } } catch (java.lang.NoSuchMethodException | java.lang.reflect.InvocationTargetException | java.lang.IllegalAccessException ex) { } try { java.lang.reflect.Constructor<?> constructor = type.getConstructor(java.lang.String.class); if (constructor == null) { return null; } return constructor.newInstance(value); } catch (java.lang.NoSuchMethodException | java.lang.InstantiationException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException ex) { } return null; }<END_MOD>
<START_MOD>private boolean isVmDown(org.ovirt.engine.core.common.businessentities.VM vm) { return (vm != null) && ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down)); }<END_MOD>
private org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters buildLiveSnapshotParameters(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> filteredPluggedDisks = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks(<START_MOD>getDisksList()<END_MOD>, false, true, true); if (org.ovirt.engine.core.common.FeatureSupported.memorySnapshot(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getVdsGroupCompatibilityVersion())) { return new org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getId(), filteredPluggedDisks, snapshot.getMemoryVolume()); } else { return new org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getId(), filteredPluggedDisks); } }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((compatVersion) == null ?   : compatVersion.hashCode()); result = (prime * result) + ((compatibility_version) == null ?   : compatibility_version.hashCode()); result = (prime * result) + ((cpu_name) == null ?   : cpu_name.hashCode()); result = (prime * result) + (cpu_over_commit_duration_minutes); result = (prime * result) + ((description) == null ?   : description.hashCode()); result = (prime * result) + (high_utilization); result = (prime * result) + ((id) == null ?   : id.hashCode()); result = (prime * result) + (low_utilization); result = (prime * result) + (max_vds_memory_over_commit); result = (prime * result) + (countThreadsAsCores ? 1231 : 1237); result = (prime * result) + ((migrateOnError) == null ?   : migrateOnError.hashCode()); result = (prime * result) + ((name) == null ?   : name.hashCode()); result = (prime * result) + ((selection_algorithm) == null ?   : selection_algorithm.hashCode()); result = (prime * result) + ((storagePool) == null ?   : storagePool.hashCode()); result = (prime * result) + (<START_MOD>(storagePoolName) == null ?   : storagePoolName.hashCode()); result = (prime * result) + (<END_MOD>transparentHugepages ? 1231 : 1237); result = (prime * result) + (virtService ? 1231 : 1237); result = (prime * result) + (glusterService ? 1231 : 1237); return result; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.<START_MOD>Boolean<END_MOD> returnValue) { getModel().getIsSoundcardEnabled().setEntity(returnValue); }
<START_MOD>@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.RemoveSnapshotImagesCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_LOCKED)); }<END_MOD>
<START_MOD>private void VolumeType_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.VolumeType volumeType = ((org.ovirt.engine.core.common.businessentities.VolumeType) (getVolumeType().getSelectedItem())); org.ovirt.engine.core.common.businessentities.StorageType storageType = ((getStorageDomain().getSelectedItem()) == null) ? org.ovirt.engine.core.common.businessentities.StorageType.UNKNOWN : ((org.ovirt.engine.core.common.businessentities.StorageDomain) (getStorageDomain().getSelectedItem())).getStorageType(); updateVolumeFormat(volumeType, storageType); updateShareable(volumeType, storageType); }<END_MOD>
<START_MOD>public java.lang.Boolean isKsmMergeAcrossNumaNodes() { return ksmMergeAcrossNumaNodes; }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.api.resource.DevicesResource<org.ovirt.engine.api.model.Application, org.ovirt.engine.api.model.Applications> getApplicationsResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendVmApplicationsResource(guid, org.ovirt.engine.core.common.queries.VdcQueryType.GetVmByVmId, new org.ovirt.engine.core.common.queries.GetVmByVmIdParameters(guid))); }<END_MOD>
<START_MOD>public void initHandlers(com.google.gwt.event.shared.EventBus eventBus) { if ((ssoTokenHandlerRegistration) != null) { ssoTokenHandlerRegistration.removeHandler(); } ssoTokenHandlerRegistration = eventBus.addHandler(org.ovirt.engine.ui.frontend.communication.SSOTokenChangeEvent.getType(), new org.ovirt.engine.ui.frontend.communication.SSOTokenChangeEvent.SSOTokenChangeHandler() { @java.lang.Override public void onSSOTokenChange(org.ovirt.engine.ui.frontend.communication.SSOTokenChangeEvent event) { ssoToken = event.getSsoToken(); checkIfInitFinished(); } }); }<END_MOD>
<START_MOD>protected java.lang.String serializeAdditionalAttributes() { return ""; }<END_MOD>
@org.junit.Test public void testIsUsingScsiReservationValidWhenSgioIsFiltered() { setupForLun(); org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk(ScsiGenericIO.FILTERED); assertThat(lunValidator.isUsingScsiReservationValid(org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM<START_MOD>(), createDiskVmElementUsingScsiReserevation<END_MOD>(), lunDisk1), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_SGIO_IS_FILTERED)); }
protected void setUpGetHostIdExpectations(int idx) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest.setUpEntityExpectations(control.createMock(org.ovirt.engine.core.common.businessentities.VDS.class), <START_MOD>control.createMock(org.ovirt.engine.core.compat.RpmVersion.class), <END_MOD>idx); setUpGetEntityExpectations(VdcQueryType.GetVdsByName, org.ovirt.engine.core.common.queries.GetVdsByNameParameters.class, new java.lang.String[]{ "Name" }, new java.lang.Object[]{ NAMES[idx] }, host); }
public <START_MOD>void flush(org.ovirt.engine.core.common.businessentities.Provider<org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties> provider) { org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties properties = provider.getAdditionalProperties(); if (properties == null) { properties = new org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties(); provider.setAdditionalProperties(properties); } properties.setPluginType(org.ovirt.engine.ui.uicommonweb.models.providers.NeutronPluginTranslator.getPluginNameForDisplayString(((java.lang.String) (getPluginType().getSelectedItem())))); if (((java.lang.Boolean) (isPluginTypeCustom().getEntity()))) { properties.setAgentConfiguration(null); } else { <END_MOD>org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties.AgentConfiguration <START_MOD>agentConfiguration = properties.getAgentConfiguration(); if (agentConfiguration == null<END_MOD>) { <START_MOD>agentConfiguration = new <END_MOD>org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties.AgentConfiguration<START_MOD>(); properties.setAgentConfiguration(agentConfiguration); } agentConfiguration.setNetworkMappings(((java.lang.String) (getInterfaceMappings().getEntity()))); org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties.QpidConfiguration qpidConfiguration = agentConfiguration.getQpidConfiguration(); if (qpidConfiguration == null) { qpidConfiguration<END_MOD> = new org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties.<START_MOD>QpidConfiguration(); agentConfiguration.setQpidConfiguration(qpidConfiguration); } qpidConfiguration.setAddress(((java.lang.String) (getQpidHost<END_MOD>().getEntity()))); <START_MOD>java.lang.String port = ((java.lang.String) (getQpidPort<END_MOD>().getEntity()))<START_MOD>; qpidConfiguration.setPort((<END_MOD>port <START_MOD>== null ? null : java.lang.Integer.valueOf(port))); qpidConfiguration.setUsername(((java.lang.String) (getQpidUsername<END_MOD>().getEntity()))<START_MOD>); qpidConfiguration.setPassword(((java.lang.String) (getQpidPassword<END_MOD>().getEntity()))); }<START_MOD> }<END_MOD>
public void setGuestOverhead(java.lang.Integer value) { mVdsDynamic.setGuestOverhead(value); }
@java.lang.Override public void UpdateMinAllocatedMemory() { org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.DataCenterWithClusterEntityModel dataCenterWithClusterEntityModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithClusterEntityModel) (getModel().getDataCenterWithClustersList().getSelectedItem())); if (dataCenterWithClusterEntityModel == null) { return; } org.ovirt.engine.<END_MOD>core.common.businessentities.VDSGroup cluster = <START_MOD>dataCenterWithClusterEntityModel<END_MOD>.getCluster(); if (cluster == null) { return; } if (((java.lang.Integer) (getModel().getMemSize().getEntity())) < (vm.getVmMemSizeMb())) { double overCommitFactor = 100.0 / (cluster.getmax_vds_memory_over_commit()); getModel().getMinAllocatedMemory().setEntity(((int) (((java.lang.Integer) (getModel().getMemSize().getEntity())) * overCommitFactor))); } else { getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem()); } }
private void initNetworkList(org.ovirt.engine.core.compat.Guid dataCenterId) { startProgress(); org.ovirt.engine.core.common.queries.IdQueryParameters queryParams = new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(QueryType.GetAllNetworks, queryParams, new org.ovirt.engine.ui.uicommonweb.models.profiles.AsyncQuery<org.ovirt.engine.core.common.queries.QueryReturnValue>(( returnValue) -> { Collection<org.ovirt.engine.core.common.businessentities.network.Network> networks = returnValue.getReturnValue(); <START_MOD>org.ovirt.engine.core.common.businessentities.network.Network oldSelectedNetwork = <END_MOD>getNetwork().<START_MOD>getSelectedItem(); getNetwork().<END_MOD>setItems(networks); updateNetworks(networks); <START_MOD>if (oldSelectedNetwork != null) { org.ovirt.engine.core.common.businessentities.network.Network newSelectedNetwork = networks.stream().filter(( network) -> java.util.Objects.equals(network.getId(), oldSelectedNetwork.getId())).findFirst().get(); if (!(getNetwork().getSelectedItem().getId().equals(newSelectedNetwork.getId()))) { getNetwork().setSelectedItem(newSelectedNetwork); } } <END_MOD>stopProgress(); })); }
@java.lang.SuppressWarnings("rawtypes") @java.lang.Override public void setItems(java.lang.Iterable value) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> disks = (value != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.Disk>Cast(value) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> filteredDisks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(); org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType diskStorageType = <START_MOD>org.ovirt.engine.ui.uicommonweb.models.disks.DiskViewType.storageValue(((org.ovirt.engine.ui.uicommonweb.models.disks.DiskViewType<END_MOD>) (getDiskViewType().getEntity()))<START_MOD>)<END_MOD>; for (org.ovirt.engine.core.common.businessentities.Disk disk : disks) { if ((diskStorageType == null) || (diskStorageType == (disk.getDiskStorageType()))) { filteredDisks.add(disk); } } super.setItems(filteredDisks); }
<START_MOD>@java.lang.Override public int increaseStoragePoolMasterVersion(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id); return getCallsHandler().executeModificationReturnResult("Increase_storage_pool_master_version", parameterSource); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc setMOMPolicyParameters(java.util.Map<java.lang.String, java.lang.Object> values) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.setMOMPolicyParameters").withParameter("key_value_store", values).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
<START_MOD>private void _nextTerminationEntry() throws java.lang.Exception { _terminationDialog[((_terminationIndex)++)].call(); }<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (java.lang.Boolean.TRUE.equals(getIsDiscoveredHosts().getEntity())) { discoverHostName_SelectedItemChanged(); } else if (java.lang.Boolean.FALSE.equals(getIsDiscoveredHosts().getEntity())) { hostName_SelectedItemChanged(); } }<END_MOD>
<START_MOD>public boolean getCheckValue(java.lang.Iterable<T> items, com.google.gwt.view.client.SelectionModel selectionModel) { if (!(items.iterator().hasNext())) { return false; } boolean allSelected = true; for (T entity : items) { if (!(selectionModel.isSelected(entity))) { allSelected = false; } } return allSelected; }<END_MOD>
@java.lang.Override protected com.google.gwt.user.client.ui.TreeItem getLeafItem(org.ovirt.engine.core.common.job.Step step) { com.google.gwt.user.client.ui.HorizontalPanel panel = new com.google.gwt.user.client.ui.HorizontalPanel(); panel.setSpacing(1); panel.setWidth("100%"); addItemToPanel(panel, new com.google.gwt.user.client.ui.Image(getStatusImage(step.getStatus())), "25px"); addTextBoxToPanel(panel, new org.ovirt.engine.ui.common.widget.label.TextBoxLabel(), step.getDescription(), ""); addValueLabelToPanel(panel, new org.ovirt.engine.ui.webadmin.widget.label.FullDateTimeLabel(), step.getStartTime(), "150px"); addTextBoxToPanel(panel, new org.ovirt.engine.ui.common.widget.label.TextBoxLabel(), ((step.getEndTime()) == null ? "" : <START_MOD>constants.till()<END_MOD>), "40px"); addValueLabelToPanel(panel, new org.ovirt.engine.ui.webadmin.widget.label.FullDateTimeLabel(), step.getEndTime(), "150px"); com.google.gwt.user.client.ui.TreeItem treeItem = new com.google.gwt.user.client.ui.TreeItem(panel); treeItem.setUserObject(step.getId()); return treeItem; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( change Cluster in tree context java.lang.String cannotChangeClusterInTreeContext();
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if ((hostedEngineHelper.getStorageDomain()) != null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); } if (!(fetchStorageDomainInfo())) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); } if (!(java.util.Arrays.asList(org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.SUPPORTED_DOMAIN_TYPES).contains(heStorageDomain.getStorageType()))) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_UNSUPPORTED); } return true; }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.hosts.InstallModel model) { driver.edit(model); <START_MOD>if ((model.getVds().getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallFailed)) { rbPassword.setValue(true); model.setAuthenticationMethod(AuthenticationMethod.Password); displayPasswordField(true); } else { <END_MOD>rbPublicKey.setValue(true); model.setAuthenticationMethod(AuthenticationMethod.PublicKey); <START_MOD>displayPasswordField<END_MOD>(false);<START_MOD> }<END_MOD> rbPassword.addValueChangeHandler(new com.google.gwt.event.logical.shared.ValueChangeHandler<java.lang.Boolean>() { @java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { model.setAuthenticationMethod(AuthenticationMethod.Password); <START_MOD>displayPasswordField<END_MOD>(true); } }); rbPublicKey.addValueChangeHandler(new com.google.gwt.event.logical.shared.ValueChangeHandler<java.lang.Boolean>() { @java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { model.setAuthenticationMethod(AuthenticationMethod.PublicKey); <START_MOD>displayPasswordField<END_MOD>(false); } }); userNameEditor.setEnabled(false); networkProviderWidget.edit(model.getNetworkProviderModel()); }
public static void getUnknownImageList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<java.lang.String>> aQuery, org.ovirt.engine.core.compat.Guid storagePoolId, boolean forceRefresh) { org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.getIrsImageList(aQuery, storagePoolId, forceRefresh, ImageFileType.All, new org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.RepoImageToImageFileNameAsyncConverter() { @java.lang.Override protected java.lang.String transform(java.util.ArrayList<java.lang.String> fileNameList, org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.ISO_PREFIX) + (super.transform(repoImage)); } @java.lang.Override protected boolean desiredImage(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.core.common.businessentities.storage.ImageFileType.Unknown) == (repoImage.getFileType()); } }); }
private java.lang.String createVG() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CreateVG, new org.ovirt.engine.core.common.vdscommands.CreateVGVDSCommandParameters(org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>AddSANStorageDomainCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>AddSANStorageDomainCommand.getStorageDomain().getId(), org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>AddSANStorageDomainCommand.getParameters().getLunIds(), org.ovirt.engine.core.bll.storage<START_MOD>.domains<END_MOD>.AddSANStorageDomainCommand.getParameters().isForce())); java.lang.String volumeGroupId = ((java.lang.String) (((returnValue.getReturnValue()) instanceof java.lang.String) ? returnValue.getReturnValue() : null)); return volumeGroupId; }
<START_MOD>org.ovirt.engine.core.common.businessentities.VM getHostedEngine();<END_MOD>
private void loadCurrentClusterManagementNetwork() { org.ovirt.engine.ui.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider.AsyncDataProvider.getInstance().getManagementNetwork(<END_MOD>new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.businessentities.network.Network><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.core.common.businessentities.network.Network <START_MOD>managementNetwork1<END_MOD>) <START_MOD>{<END_MOD> getManagementNetwork().setSelectedItem(<START_MOD>managementNetwork1<END_MOD>); } }), getEntity().getId()); }
@java.lang.Override <START_MOD>protected<END_MOD> <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.utils.ToStringBuilder<END_MOD> <START_MOD>appendAttributes<END_MOD>(<START_MOD>org.ovirt.engine.core.common.utils.ToStringBuilder tsb<END_MOD>) { return <START_MOD>super<END_MOD>.<START_MOD>appendAttributes(tsb)<END_MOD>.<START_MOD>append<END_MOD>(<START_MOD>"lvName"<END_MOD>, lvName<START_MOD>).append("mountPoint"<END_MOD>, mountPoint<START_MOD>).append("storageDevices"<END_MOD>, storageDevices<START_MOD>).append("raidParams"<END_MOD>, raidParams<START_MOD>)<END_MOD>.<START_MOD>append<END_MOD>(<START_MOD>"fsType"<END_MOD>, fsType); }
public org.ovirt.engine.core.bll.ValidationResult isAnyDomainInProcess() { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap> poolIsoMaps = getStoragePoolIsoMapDao().getAllForStoragePool(storagePool.getId()); for (org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainIsoMap : poolIsoMaps) { if (((domainIsoMap.getStatus()) != null) && (domainIsoMap.getStatus().isStorageDomainInProcess())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2, java.lang.String.format( %1$s domainIsoMap.getStatus())); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
protected boolean acquireLock() { org.ovirt.engine.core.bll.LockIdNameAttribute annotation = getClass().getAnnotation(org.ovirt.engine.core.bll.LockIdNameAttribute.class); boolean returnValue = true; if (annotation != null) { <START_MOD>isReleaseExecute = annotation.isReleaseExecute(); <END_MOD>if (!(annotation.isWait())) { returnValue = acquireLockInternal(); } else { acquireLockAndWait(); } } return returnValue; }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getDeviceList() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = new java.util.ArrayList<>(); org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = executeGetDeviceList(new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(org.ovirt.engine.core.bll.storage.GetUnregisteredBlockStorageDomainsQuery.getParameters().getVdsId(), org.ovirt.engine.core.bll.storage.GetUnregisteredBlockStorageDomainsQuery.getParameters().getStorageType()<START_MOD>, false<END_MOD>)); if (returnValue.getSucceeded()) { luns.addAll(returnValue.<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>getReturnValue()); } else { throw new java.lang.RuntimeException(java.lang.String.format( execution failed. Exception message: %1$s returnValue.getExceptionString())); } return luns; }
@org.junit.Test public void testStart() throws java.lang.Exception { setUpWindowsGetEntityExpectations(<START_MOD>2<END_MOD>, false<START_MOD>); setUpGetPayloadExpectations(0); setUpGetBallooningExpectations(<END_MOD>); setUriInfo(setUpActionExpectations(VdcActionType.RunVmOnce, org.ovirt.engine.core.common.action.RunVmOnceParams.class, new java.lang.String[]{ "VmId" }, new java.lang.Object[]{ GUIDS[0] })); verifyActionResponse(resource.start(new org.ovirt.engine.api.model.Action())); }
<START_MOD>@org.junit.Test public void testNetworksOnNicMatchMtuNetworkMtuDoesNotMatch() throws java.lang.Exception { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = java.util.Arrays.asList(createNetwork(1, false), createNetwork(2, false)); java.util.Map<java.lang.String, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>> networksOnNics = java.util.Collections.singletonMap("nicName", networks); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator hostSetupNetworksValidator = createHostSetupNetworksValidator(); assertThat(hostSetupNetworksValidator.validateMtu(networksOnNics), failsWith(VdcBllMessages.NETWORK_MTU_DIFFERENCES)); }<END_MOD>
private boolean correctStorageDomainFormat() { <START_MOD>org.ovirt.engine.core.common.businessentities.storage_pool storagePool = org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getStoragePool(); org.ovirt.engine.core.common.businessentities.StorageFormatType storageFormat = org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getStorageDomain().getStorageFormat(); org.ovirt.engine.core.common.businessentities.StorageType storageType = org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getStorageDomain().getstorage_type(); boolean isBlockStorage = (storageType == (org.ovirt.engine.core.common.businessentities.StorageType.ISCSI)) || (storageType == (org.ovirt.engine.core.common.businessentities.StorageType.FCP));<END_MOD> java.util.Set<org.ovirt.engine.core.common.businessentities.StorageFormatType> supportedStorageFormats<START_MOD>; if (storagePool != null) { supportedStorageFormats<END_MOD> = getSupportedStorageFormatSet(<START_MOD>storagePool.getcompatibility_version()); } else { org.ovirt.engine.core.compat.Version vdsVersion = java.util.Collections.max(<END_MOD>org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getVds().<START_MOD>getSupportedClusterVersionsSet()); supportedStorageFormats = getSupportedStorageFormatSet(vdsVersion); } if (!(supportedStorageFormats.contains(storageFormat))) { return false; } if (((storageFormat == (<END_MOD>org.ovirt.engine.core.common.businessentities.StorageFormatType<START_MOD>.V1)) && isBlockStorage) && (storagePool == null)) { return false; } if ((<END_MOD>storageFormat <START_MOD>== (org.ovirt.engine.core.common.businessentities.StorageFormatType.V2)) &&<END_MOD> (!<START_MOD>isBlockStorage<END_MOD>)) { return false; } return true; }
protected org.ovirt.engine.core.bll.validator.storage.StorageConnectionValidator createStorageConnectionValidator() { java.lang.String connectionId = org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getParameters().getStorageConnectionId(); org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = getStorageServerConnectionDao().get(connectionId); return new org.ovirt.engine.core.bll.validator.storage.StorageConnectionValidator(connection); }
<START_MOD>public java.util.Date getCertificationExpirationDate();<END_MOD>
private void mockHostDevices(java.util.List<org.ovirt.engine.core.common.businessentities.HostDevice> extraDevices) { java.util.List<org.ovirt.engine.core.common.businessentities.HostDevice> devices = new java.util.ArrayList<>(); devices.add(pciDevice); devices.add(netDevice); devices.addAll(extraDevices); when(hostDeviceDao.getHostDevicesByHostId(org.ovirt.engine.core.bll.network.host.HostNicVfsConfigHelperImplTest.HOST_ID)).thenReturn(devices); when(hostDeviceDao.getAll()).thenReturn(devices); <START_MOD>for (org.ovirt.engine.core.common.businessentities.HostDevice device : devices) { if ((device.getIommuGroup()) != null) { when(hostDeviceDao.getHostDevicesByHostIdAndIommuGroup(device.getHostId(), device.getIommuGroup())).thenReturn(java.util.Collections.singletonList(device)); <END_MOD>}<START_MOD> } }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult isDomainHasSpaceForRequestWithoutThreshold(final long requestedSize) { if (((storageDomain.getavailable_disk_size()) != null) && (((storageDomain.getavailable_disk_size()) - requestedSize) < 0)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN, storageName()); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
@java.lang.Override protected org.ovirt.engine.api.model.Template doPopulate(org.ovirt.engine.api.model.Template model, org.ovirt.engine.core.common.businessentities.VmTemplate entity) { if (!(model.isSetConsole())) { model.setConsole(new org.ovirt.engine.api.model.Console()); } model.getConsole().setEnabled((!(getConsoleDevicesForEntity(entity.getId()).isEmpty()))); if (!(model.isSetVirtioScsi())) { model.setVirtioScsi(new org.ovirt.engine.api.model.VirtIOSCSI()); } model.getVirtioScsi().setEnabled(org.ovirt.engine.api.restapi.util.VmHelper.<START_MOD>hasVirtioScsiControllers(this, <END_MOD>entity.getId())); setRngDevice(model); return model; }
<START_MOD>public java.lang.String getSortableDbField(java.lang.String fieldName) { if (mSortableFieldDict.containsKey(fieldName)) { return mSortableFieldDict.get(fieldName); } else { return getDbFieldName(fieldName); } }<END_MOD>
<START_MOD>private void aggregate(org.ovirt.engine.core.common.businessentities.QuotaPerUserUsageEntity aggregatedUsage, org.ovirt.engine.core.common.businessentities.QuotaPerUserUsageEntity quotaPerUserUsageEntity) { aggregatedUsage.setVcpuLimit(((quotaPerUserUsageEntity.getVcpuLimit()) + (aggregatedUsage.getVcpuLimit()))); aggregatedUsage.setVcpuUsageForUser(((quotaPerUserUsageEntity.getVcpuUsageForUser()) + (aggregatedUsage.getVcpuUsageForUser()))); aggregatedUsage.setVcpuTotalUsage(((quotaPerUserUsageEntity.getVcpuTotalUsage()) + (aggregatedUsage.getVcpuTotalUsage()))); aggregatedUsage.setMemoryLimit(((quotaPerUserUsageEntity.getMemoryLimit()) + (aggregatedUsage.getMemoryLimit()))); aggregatedUsage.setMemoryUsageForUser(((quotaPerUserUsageEntity.getMemoryUsageForUser()) + (aggregatedUsage.getMemoryUsageForUser()))); aggregatedUsage.setMemoryTotalUsage(((quotaPerUserUsageEntity.getMemoryTotalUsage()) + (aggregatedUsage.getMemoryTotalUsage()))); aggregatedUsage.setStorageLimit(((quotaPerUserUsageEntity.getStorageLimit()) + (aggregatedUsage.getStorageLimit()))); aggregatedUsage.setStorageUsageForUser(((quotaPerUserUsageEntity.getStorageUsageForUser()) + (aggregatedUsage.getStorageUsageForUser()))); aggregatedUsage.setStorageTotalUsage(((quotaPerUserUsageEntity.getStorageTotalUsage()) + (aggregatedUsage.getStorageTotalUsage()))); }<END_MOD>
<START_MOD>private void delayPolling() { try { java.lang.Thread.sleep(org.ovirt.engine.core.bll.network.NetworkConfigurator.POLLING_BREAK_IN_MILLIS); } catch (java.lang.InterruptedException e) { } }<END_MOD>
@java.lang.Override protected void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?<START_MOD>, ?, ?<END_MOD>> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?<START_MOD>, ?, ?<END_MOD>> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params) { assert op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (op1)); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity = nic.getEntity(); entity.setBondName(null); org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel bond = nic.getBond(); if ((bond.getBonded().size()) == 2) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.BREAK_BOND.getCommand(bond, null, allNics).execute(); } }
<START_MOD>public static org.ovirt.engine.core.common.network.FirewallType valueOf(int value) { return org.ovirt.engine.core.common.network.FirewallType.map.get(value); }<END_MOD>
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.common.errors.VdcBllErrors getCommandError() { return org.ovirt.engine.core.common.errors.VdcBllErrors.UPLOAD_FAILURE; }<END_MOD>
<START_MOD>protected org.ovirt.engine.core.common.AuditLogType getAuditLogTypeForInvalidInterfaces() { throw new org.jboss.util.NotImplementedException(); }<END_MOD>
public void updateConfigureLocalStorageCommandAvailability() { if ((hasAdminSystemPermission) == null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoggedInUser(); if (dbUser == null) { hasAdminSystemPermission = false; updateConfigureLocalStorageCommandAvailability1(); return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetPermissionsByAdElementId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dbUser.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.core.common.queries.VdcQueryReturnValue response<START_MOD>) {<END_MOD> if ((response == null) || (!(response.getSucceeded()))) { hasAdminSystemPermission = false; updateConfigureLocalStorageCommandAvailability1(); } else { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Permission> permissions = response.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.Permission permission : permissions) { if (((permission.getObjectType()) == (org.ovirt.engine.core.common.VdcObjectType.System)) && ((permission.getRoleType()) == (org.ovirt.engine.core.common.businessentities.RoleType.ADMIN))) { hasAdminSystemPermission = true; break; } } updateConfigureLocalStorageCommandAvailability1(); } } }, true)); } else { updateConfigureLocalStorageCommandAvailability1(); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.aaa.DbGroup getByName(java.lang.String name) { return getCallsHandler().executeRead("GetGroupByName", org.ovirt.engine.core.dao.<START_MOD>DbGroupDAOImpl<END_MOD>.DbGroupRowMapper.instance, getCustomMapSqlParameterSource().addValue("name", name)); }
private static void addCdDetails(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.String, java.lang.Object> struct<START_MOD>, org.ovirt.engine.core.common.businessentities.VM vm<END_MOD>) { <START_MOD>org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().get(org.ovirt.engine.core.common.osinfo.OsRepository.class); <END_MOD>struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); struct.put(VdsProperties.Index, "2"); struct.put(VdsProperties.INTERFACE, <START_MOD>osRepository.getCdInterface(vm.getOs(), vm.getVdsGroupCompatibilityVersion())<END_MOD>); struct.put(VdsProperties.ReadOnly, java.lang.Boolean.TRUE.toString()); struct.put(VdsProperties.Shareable, java.lang.Boolean.FALSE.toString()); }
<START_MOD>public boolean validateReplicateBricks(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType volumeType) { if (volumeType == (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType.REPLICATE)) { java.util.Set<java.lang.String> servers = new java.util.HashSet<java.lang.String>(); for (java.lang.Object model : bricks.getItems()) { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (model)).getEntity())); if (servers.contains(brick.getServerName())) { return false; } else { servers.add(brick.getServerName()); } } } else if (volumeType == (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType.DISTRIBUTED_REPLICATE)) { int replicaCount = getReplicaCountValue(); java.util.Set<java.lang.String> servers = new java.util.HashSet<java.lang.String>(); int count = 0; for (java.lang.Object model : bricks.getItems()) { count++; org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (model)).getEntity())); if (servers.contains(brick.getServerName())) { return false; } else { servers.add(brick.getServerName()); } if ((count % replicaCount) == 0) { servers.clear(); } } } return true; }<END_MOD>
<START_MOD>@org.junit.Test public void testDoGetHttpServletRequestHttpServletResponseLangOkay() throws java.io.IOException, javax.servlet.ServletException { javax.servlet.ServletOutputStream responseOut = mock(javax.servlet.ServletOutputStream.class); when(mockResponse.getOutputStream()).thenReturn(responseOut); when(mockRequest.getPathInfo()).thenReturn("/fr/index.html"); when(mockRequest.getServletPath()).thenReturn("/docs"); testServlet.doGet(mockRequest, mockResponse); verify(responseOut).write(((byte[]) (anyObject())), eq(0), anyInt()); }<END_MOD>
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.RemoveVmCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
protected boolean doDomainsUseConnection(org.ovirt.engine.core.common.businessentities.StorageServerConnections connection) { if (((domains) == null) || (domains.isEmpty())) { domains = getStorageDomainsByConnId(connection.<START_MOD>geIid<END_MOD>()); } return ((domains) != null) && (!(domains.isEmpty())); }
@java.lang.Override protected void postSaveAction(org.ovirt.engine.core.compat.Guid networkGuid, boolean succeeded) { super.postSaveAction(networkGuid, succeeded); if (!succeeded) { return; } org.ovirt.engine.core.compat.Guid networkId = ((getNetwork().getId()) == null) ? networkGuid : getNetwork().getId(); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> actionParameters1 = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel networkClusterModel : getClustersToAttach()) { org.ovirt.engine.core.common.businessentities.network.Network tempVar = new org.ovirt.engine.core.common.businessentities.network.Network(); tempVar.setId(networkId); tempVar.setName(getNetwork().getName()); org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = new org.ovirt.engine.core.common.businessentities.network.NetworkCluster(); networkCluster.setRequired(networkClusterModel.isRequired()); tempVar.setCluster(networkCluster); actionParameters1.add(new org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter(networkClusterModel.getEntity(), tempVar)); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.AttachNetworkToVdsGroup, actionParameters1); if ((((java.lang.Boolean) (getExport().getEntity())) && ((<START_MOD>getSubnetModel().getName<END_MOD>().getEntity()) != null)) && (!(<START_MOD>getSubnetModel().getName<END_MOD>().getEntity().isEmpty()))) { <START_MOD>getSubnetModel().setExternalNetwork(getNetwork().getProvidedBy()); getSubnetModel().flush(<END_MOD>); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.AddSubnetToProvider, new org.ovirt.engine.core.common.action.AddExternalSubnetParameters(<START_MOD>getSubnetModel().getSubnet()<END_MOD>, networkId)); } }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Permissions containig these operations should be associated with Storage Domain Object (or above) java.lang.String notePermissionsContainigTheseOperationsShuoldAssociatSdOrAboveRoleTreeTooltip();
public static void GetTemplateListByStorage(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid storageId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { java.util.ArrayList<org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.VmTemplate> list = new java.util.ArrayList<org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.VmTemplate>(); if (source != null) { for (org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.VmTemplate template : ((java.util.ArrayList<org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.VmTemplate>) (source))) { if ((template.getStatus()) == (VmTemplateStatus.OK)) { list.add(template); } } java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.VmTemplateByNameComparer()); } return list; } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVmTemplatesFromStorageDomain, new org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.StorageDomainQueryParametersBase(storageId), aQuery); }
<START_MOD>@java.lang.Override public java.util.Set<java.lang.String> getConsumedEvents() { java.util.Set<java.lang.String> set = new java.util.HashSet<java.lang.String>(); set.add(BrowserEvents.CLICK); set.add(BrowserEvents.CHANGE); set.add(BrowserEvents.KEYDOWN); set.addAll(super.getConsumedEvents()); return set; }<END_MOD>
<START_MOD>public org.ovirt.engine.core.common.businessentities.storage.ImageUploadPhase getImageUploadPhase() { return imageUploadPhase; }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__ADD); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__VM_TEMPLATE); }
@java.lang.Override protected void executeCommand() {<START_MOD> if ((org.ovirt.engine.core.bll.aaa.LogoutUserCommand.getCurrentUser()) == null) { setCurrentUser(org.ovirt.engine.core.bll.aaa.SessionDataContainer.getInstance().getUser(org.ovirt.engine.core.bll.aaa.LogoutUserCommand.getParameters().getSessionId(), false)); }<END_MOD> org.ovirt.engine.core.aaa.AuthenticationProfile profile = org.ovirt.engine.core.bll.aaa.SessionDataContainer.getInstance().getProfile(org.ovirt.engine.core.bll.aaa.LogoutUserCommand.getParameters().getSessionId()); if (profile == null) { org.ovirt.engine.core.bll.aaa.LogoutUserCommand.setSucceeded(false); } else { if (((profile.getAuthn().getContext().<java.lang.Long>get(Authn.ContextKeys.CAPABILITIES)) & (Authn.Capabilities.LOGOUT)) != 0) { profile.getAuthn().invoke(new org.ovirt.engine.api.extensions.ExtMap().mput(Base.InvokeKeys.COMMAND, Authn.InvokeCommands.LOGOUT).mput(Authn.InvokeKeys.PRINCIPAL, org.ovirt.engine.core.bll.aaa.SessionDataContainer.getInstance().getPrincipalName(org.ovirt.engine.core.bll.aaa.LogoutUserCommand.getParameters().getSessionId()))); } org.ovirt.engine.core.bll.aaa.SessionDataContainer.getInstance().removeSessionOnLogout(org.ovirt.engine.core.bll.aaa.LogoutUserCommand.getParameters().getSessionId()); org.ovirt.engine.core.bll.aaa.LogoutUserCommand.setSucceeded(true); } }
@java.lang.Override protected void executeCommand() { try { _returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); getVDSReturnValue().setSucceeded(true); executeVDSCommand(); } catch (<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.ProxyReturnValueException e) { setVdsRuntimeError(e); } catch (<END_MOD>java.lang.RuntimeException ex) { setVdsRuntimeError(ex); <START_MOD>logException(ex); <END_MOD>} }
@javax.ws.rs.Path( (start|stop|shutdown|reboot|suspend|detach|migrate|export|move|ticket|cancelmigration|preview_snapshot|commit_snapshot|undo_snapshot<START_MOD>|clone_vm<END_MOD>)}/{oid} public org.ovirt.engine.api.resource.ActionResource getActionSubresource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid);
@java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.<START_MOD>core<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>queries<END_MOD>.<START_MOD>VdcQueryReturnValue<END_MOD> <START_MOD>returnValue<END_MOD>) <START_MOD>{<END_MOD> @java.lang.SuppressWarnings("unchecked") Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = returnValue.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog : watchdogs) { <START_MOD>getModel()<END_MOD>.getWatchdogAction().setSelectedItem(watchdog.getAction()); <START_MOD>getModel()<END_MOD>.getWatchdogModel().setSelectedItem(watchdog.getModel()); } }
<START_MOD>public org.ovirt.engine.core.common.businessentities.gluster.GlusterMallInfo getGlusterMallInfo() { return glusterMallInfo; }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultMessage("Incorrect number of vCPUs. It is not possible to compose this number from the available Sockets and Cores per Sockets") java.lang.String incorrectVCPUNumber();<END_MOD>
private void populateVmData(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(vm.getStaticData(), true); <START_MOD>vmDeviceUtils<END_MOD>.setVmDevices(vm.getStaticData()); }
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.ActivateVdsCommand.getVds()) == null) { <START_MOD>return failCanDoAction<END_MOD>(VdcBllMessages.VDS_CANNOT_ACTIVATE_VDS_NOT_EXIST); } if (<START_MOD>true<END_MOD> && ((org.ovirt.engine.core.bll.ActivateVdsCommand.getVds().getstatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { <START_MOD>return failCanDoAction<END_MOD>(VdcBllMessages.VDS_CANNOT_ACTIVATE_VDS_ALREADY_UP); } return <START_MOD>true<END_MOD>; }
private void doBackupCheck() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); org.ovirt.engine.core.common.businessentities.EngineBackupLog <START_MOD>lastDbBackup<END_MOD> = engineBackupLogDao.getLastSuccessfulEngineBackup(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.<START_MOD>DB_SCOPE); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastFilesBackup = engineBackupLogDao.getLastSuccessfulEngineBackup(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.FILES_SCOPE<END_MOD>); if (<START_MOD>(lastDbBackup<END_MOD> == null<START_MOD>) || (lastFilesBackup == null)<END_MOD>) { auditLogDirector.log(alert, AuditLogType.<START_MOD>ENGINE_NO_FULL_BACKUP<END_MOD>); } else { java.lang.Integer backupAlertPeriodInDays = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BackupAlertPeriodInDays); java.util.Date <START_MOD>lastDbBackupDate = lastDbBackup<END_MOD>.getDoneAt(); <START_MOD>java.util.Date lastFilesBackupDate = lastFilesBackup.getDoneAt(); java.util.Date lastFullBackupDate = ((lastDbBackupDate.compareTo(lastFilesBackupDate)) < 0) ? lastDbBackupDate : lastFilesBackupDate; <END_MOD>long diffInDays = ((java.util.Calendar.getInstance().getTimeInMillis()) - (<START_MOD>lastFullBackupDate<END_MOD>.getTime())) / (java.util.concurrent.TimeUnit.DAYS.toMillis(1)); if (diffInDays > backupAlertPeriodInDays) { alert.addCustomValue("Date", <START_MOD>lastFullBackupDate<END_MOD>.toString()); auditLogDirector.log(alert, AuditLogType.ENGINE_NO_WARM_BACKUP); } } }
private java.lang.Integer deserializeValue(java.util.Map<java.lang.String, java.lang.Object> entry, java.lang.String curveKey, <START_MOD>long<END_MOD> conversionRate) { java.util.Map<java.lang.String, java.lang.<START_MOD>Long<END_MOD>> parameters = ((java.util.Map<java.lang.String, java.lang.<START_MOD>Long<END_MOD>>) (entry.get(curveKey))); if (parameters == null) { return null; } java.lang.<START_MOD>Object avg = parameters.get(VdsProperties.HOST_QOS_AVERAGE); java.lang.Long<END_MOD> average = <START_MOD>(avg instanceof java.lang.Long) ? ((java.lang.Long) (avg)) : java.lang.Long.valueOf(java.lang.String.valueOf(avg)<END_MOD>); return average == null ? null : <START_MOD>((int) (<END_MOD>average / conversionRate<START_MOD>))<END_MOD>; }
@org.junit.Test public void testActivate() throws java.lang.Exception {<START_MOD> setUpGetEntityExpectations(1);<END_MOD> setUriInfo(setUpActionExpectations(VdcActionType.ActivateVds, org.ovirt.engine.core.common.action.VdsActionParameters.class, new java.lang.String[]{ "VdsId" }, new java.lang.Object[]{ GUIDS[0] })); verifyActionResponse(resource.activate(new org.ovirt.engine.api.model.Action())); }
<START_MOD>private void onSave() { }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__REMOVE); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__GLUSTER_VOLUME); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( To receive email notifications, ensure that the mail server is configured and the ovirt-event-notifier service is running. java.lang.String manageEventsPopupInfoLabel();
<START_MOD>@java.lang.Override public javax.ws.rs.core.Response remove(org.ovirt.engine.api.model.StorageDomain storageDomain) { if (storageDomain == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("storage-domain parameter is missing"); throw new javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fault).build()); } validateParameters(storageDomain, "host.id|name"); get(); if ((storageDomain.isSetDestroy()) && (storageDomain.isDestroy())) { org.ovirt.engine.core.common.action.StorageDomainParametersBase parameters = new org.ovirt.engine.core.common.action.StorageDomainParametersBase(asGuidOr404(id)); parameters.setVdsId(getHostId(storageDomain)); return performAction(VdcActionType.ForceRemoveStorageDomain, parameters); } else { org.ovirt.engine.core.common.action.RemoveStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.RemoveStorageDomainParameters(asGuidOr404(id)); parameters.setVdsId(getHostId(storageDomain)); if (storageDomain.isSetFormat()) { parameters.setDoFormat(storageDomain.isFormat()); } return performAction(VdcActionType.RemoveStorageDomain, parameters); } }<END_MOD>
private void waitForConnect()<START_MOD> throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException<END_MOD> { try { this.connected.await(policy.getRetryTimeOut(), policy.getTimeUnit());<START_MOD> if ((this.connected.getCount()) != 0) { disconnect(); throw new org.ovirt.vdsm.jsonrpc.client.ClientConnectionException( negotiation failed }<END_MOD> } catch (java.lang.InterruptedException e) { disconnect(); throw new java.lang.IllegalStateException( interrupted } }
@java.lang.Override protected void executeVdsBrokerCommand() { _result = org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getBroker().getStorageDomainsList(org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStorageDomainType().getValue(), ((org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStorageType()) != null ? java.lang.Integer.valueOf(org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStorageType().getValue()).toString() : ""), ((org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getPath()) != null ? org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getPath() : "")); org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.proceedProxyReturnValue(); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> domains = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); for (java.lang.String domain : _result.<START_MOD>storageDomainList<END_MOD>) { domains.add(new org.ovirt.engine.core.compat.Guid(domain)); } setReturnValue(domains); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured, inFenceFlow, kernelFeatures); }
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Disk.class, to = org.ovirt.engine.api.model.DiskAttachment.class) public org.ovirt.engine.api.model.DiskAttachment mapDiskToDiskAttachment(org.ovirt.engine.api.model.Disk disk, org.ovirt.engine.api.model.DiskAttachment attachment) { if (disk.isSetInterface()) { attachment.setInterface(disk.getInterface()); } if (disk.isSetBootable()) { attachment.setBootable(disk.isBootable()); } return attachment; }<END_MOD>
<START_MOD>private void edit() { if ((org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.list.AffinityGroupListModel.getWindow()) != null) { return; } org.ovirt.engine.core.common.scheduling.AffinityGroup affinityGroup = org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.list.AffinityGroupListModel.getSelectedItem(); if (affinityGroup == null) { return; } sortVms(affinityGroup); org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.model.AffinityGroupModel model = new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.model.EditAffinityGroupModel(affinityGroup, this, getClusterResolver()); model.init(); setWindow(model); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.utils.lock.EngineLock acquireMonitorLock(org.ovirt.engine.core.common.businessentities.VDS vds, java.lang.String lockReleaseMessage, org.slf4j.Logger log) { org.ovirt.engine.core.compat.Guid vdsId = vds.getId(); org.ovirt.engine.core.utils.lock.LockManager lockManager = org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager(); java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> exclusiveLocks = java.util.Collections.singletonMap(vdsId.toString(), new org.ovirt.engine.core.common.utils.Pair(LockingGroup.VDS_INIT.name(), "")); java.lang.String closingMessage = org.ovirt.engine.core.bll.VdsLocking.calculateClosingMessage(lockReleaseMessage, vds); org.ovirt.engine.core.utils.lock.EngineLock monitoringLock = new org.ovirt.engine.core.bll.VdsLocking.VdsEngineLock(exclusiveLocks, null, closingMessage, log); log.info("Before acquiring lock in order to prevent monitoring for host '{}' from data-center '{}'", vds.getName(), vds.getStoragePoolName()); lockManager.acquireLockWait(monitoringLock); log.info("Lock acquired, from now a monitoring of host will be skipped for host '{}' from data-center '{}'", vds.getName(), vds.getStoragePoolName()); return monitoringLock; }<END_MOD>
@org.junit.Test public void testAddClusterNamedDataCenter() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUpEntityQueryExpectations(VdcQueryType.GetStoragePoolByDatacenterName, org.ovirt.engine.core.common.queries.NameQueryParameters.class, new java.lang.String[]{ "Name" }, new java.lang.Object[]{ NAMES[1] }, setUpStoragePool(1)); setUpCreationExpectations(VdcActionType.AddVdsGroup, org.ovirt.engine.core.common.action.<START_MOD>AddVdsGroupOperationParameters<END_MOD>.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, true, true, GUIDS[0], VdcQueryType.GetVdsGroupById, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[0] }, getEntity(0)); org.ovirt.engine.api.model.Cluster model = org.ovirt.engine.api.restapi.resource.BackendClustersResourceTest.getModel(0); model.getDataCenter().setName(NAMES[1]); javax.ws.rs.core.Response response = collection.add(model); assertEquals(201, response.getStatus()); assertTrue(((response.getEntity()) instanceof org.ovirt.engine.api.model.Cluster)); verifyModel(((org.ovirt.engine.api.model.Cluster) (response.getEntity())), 0); }
@java.lang.Override protected void executeVmCommand() { super.executeVmCommand(); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.setVm(null); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVm().setVmtGuid(VmTemplateHandler.BLANK_VM_TEMPLATE_ID); <START_MOD>this<END_MOD>.<START_MOD>vmStaticDao<END_MOD>.update(org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVm().getStaticData()); }
<START_MOD>private void connect(boolean isPasswordEmpty) { if (!isPasswordEmpty) { try { model.getAutoConnectableConsoles().get(0).connect(); alreadyOpened = true; } catch (org.ovirt.engine.ui.uicommonweb.models.VmConsoles e) { errorPopupManager.show(e.getLocalizedErrorMessage()); } } unregisterModels(); }<END_MOD>
<START_MOD>private synchronized java.util.Map<java.lang.String, java.lang.String> getMessages(java.util.Locale locale) { java.util.Map<java.lang.String, java.lang.String> messages; if (standardLocale.equals(locale)) { messages = standardMessages; } else { if ((messages = messagesByLocale.get(locale)) == null) { messages = retrieveByLocale(locale); messagesByLocale.put(locale, messages); } } return messages; }<END_MOD>
protected boolean isDetachAllowed(final boolean isRemoveLast) { boolean returnValue = true; if ((getStoragePoolIsoMap()) == null) { returnValue = false; addCanDoActionMessage(EngineMessage.STORAGE_DOMAIN_NOT_ATTACHED_TO_STORAGE_POOL); } else if ((!isRemoveLast) && (isMaster())) { <START_MOD>boolean isLastActive = <END_MOD>org.ovirt.engine.core.<START_MOD>bll.storage.StorageDomainCommandBase.getStorageDomainDao().getAllForStoragePool(<END_MOD>org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomain().getStoragePoolId())<START_MOD>.stream().anyMatch((<END_MOD> a) <START_MOD>-> (a.getId().equals(getStorageDomain().getId())) && ((a.getStatus()) == StorageDomainStatus.Active)); if (!isLastActive) { returnValue = false; addCanDoActionMessage(EngineMessage.ERROR_CANNOT_DETACH_LAST_STORAGE_DOMAIN); } }<END_MOD> return <START_MOD>returnValue; }<END_MOD>
public void testGetConsoleAware(boolean allContent) throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); if (allContent) { java.util.List<java.lang.String> populates = new java.util.ArrayList<java.lang.String>(); populates.add("true"); expect(httpHeaders.getRequestHeader(BackendResource.POPULATE)).andReturn(populates).anyTimes(); setUpGetConsoleExpectations(new int[]{   }); setUpGetVirtioScsiExpectations(new int[]{   }); setUpGetRngDeviceExpectations(new int[]{   }); setUpGetVmOvfExpectations(new int[]{   }); } setUpGetEntityExpectations(1); setUpGetPayloadExpectations(0, 1); setUpGetBallooningExpectations(); <START_MOD>setUpGetGraphicsExpectations(1); <END_MOD>setUpGetCertuficateExpectations(); control.replay(); org.ovirt.engine.api.model.VM response = resource.get(); verifyModel(response, 0); verifyCertificate(response); java.util.List<java.lang.String> populateHeader = httpHeaders.getRequestHeader(BackendResource.POPULATE); boolean populated = (populateHeader != null) ? populateHeader.contains("true") : false; assertTrue((populated ? response.isSetConsole() : !(response.isSetConsole()))); }
@java.lang.Override protected void executeQueryCommand() { java.lang.String<START_MOD> internal<END_MOD> = org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.AdminDomain); java.util.<START_MOD>List<org.ovirt.engine.core.authentication.AuthenticationProfile> profiles = org.ovirt.engine.core.authentication.AuthenticationProfileManager.getInstance().getProfiles(); java.util.List<java.lang.String> names = new java.util.ArrayList(profiles.size()); for (org.ovirt.engine.core.authentication.AuthenticationProfile profile : profiles) { names.add(profile.getName()); } if (org.ovirt.engine.core.bll.GetDomainListQuery.getParameters().getFilterInternalDomain()) { names.remove(internal); } java.util.<END_MOD>Collections.sort(<START_MOD>names<END_MOD>, new org.ovirt.engine.core.bll.LoginDomainComparator(<START_MOD>internal<END_MOD>)); org.ovirt.engine.core.bll.GetDomainListQuery.getQueryReturnValue().setReturnValue(<START_MOD>names<END_MOD>); }
@org.junit.Test public void testPosixDcAndNotMatchingCompatiblityVersion() { storagePool.setcompatibility_version(Version.v3_0); storagePool.<START_MOD>setIsLocal<END_MOD>(<START_MOD>false<END_MOD>); org.ovirt.engine.core.bll.ValidationResult result = validator.<START_MOD>isDcMatchingPosixCompatiblityVersion<END_MOD>(); assertFalse(result.isValid()); org.ovirt.engine.core.bll.storage.StoragePoolValidatorTest.assertMessage(result, VdcBllMessages.DATA_CENTER_POSIX_STORAGE_NOT_SUPPORTED_IN_CURRENT_VERSION); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepStatus(java.lang.String volumeName, java.lang.String slaveHost, java.lang.String slaveVolumeName) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.geoRepStatus").withParameter("volName", volumeName).withParameter("remoteHost", slaveHost).withParameter("remoteVolName", slaveVolumeName).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc(response); }
@java.lang.Override protected void endWithFailure() { if ((commandCoordinatorUtil.getCommandExecutionStatus(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCommandId())) != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { changeStorageDomainStatusInTransaction(loadStoragePoolIsoMap(), StorageDomainStatus.Unknown); auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_OVF_UPDATE_INCOMPLETE); <START_MOD>org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getReturnValue().setEndActionTryAgain(false); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(false); <END_MOD>} else <START_MOD>if (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getParameters().isForceMaintenance()) <END_MOD>{ <START_MOD>executeDeactivateCommand(); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); } else { <END_MOD>org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Active, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); <START_MOD>org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getReturnValue().setEndActionTryAgain(false); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(false); <END_MOD>} }
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultStringValue("NUMA Support") java.lang.String numaSupportTitle();<END_MOD>
@java.lang.Override protected void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?<START_MOD>, ?, ?<END_MOD>> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<<START_MOD>?, ?, <END_MOD>?> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params) { assert op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel; assert op2 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (op1)); org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel bond = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel) (op2)); java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> networksToReatach = ((nic.getItems()) != null) ? new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(nic.getItems()) : new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.clearNetworks(nic, allNics); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.attachNetworks(bond, networksToReatach, allNics); nic.getEntity().setBondName(bond.getEntity().getName()); }
<START_MOD>com.google.gwt.http.client.RequestBuilder createRequest(<END_MOD>java.lang.String <START_MOD>engineAuthToken<END_MOD>) { <START_MOD>com.google.gwt.http.client.RequestBuilder builder = new com.google.gwt.http.client.RequestBuilder(com.google.gwt.http.client.RequestBuilder.GET, restApiBaseUrl); if (engineAuthToken != null) { builder.setHeader(org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.ENGINE_AUTH_TOKEN_HEADER, engineAuthToken); } builder.setHeader("Session-TTL", restApiSessionTimeout); builder.setHeader("Prefer",   csrf-protection java.lang.String sessionId = getSessionId(); if (sessionId != null) { builder.setHeader(org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.SESSION_ID_HEADER, sessionId); } <END_MOD>return <START_MOD>builder<END_MOD>; }
<START_MOD>public static void updateCurrentCd(org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String currentCd) { org.ovirt.engine.core.dao.VmDynamicDAO vmDynamicDao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDao(); org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vm.getDynamicData(); vmDynamic.setCurrentCd(currentCd); vmDynamicDao.update(vmDynamic); }<END_MOD>
private java.lang.String generateTicket() { org.ovirt.engine.core.common.action.SetVmTicketParameters parameters = new org.ovirt.engine.core.common.action.SetVmTicketParameters(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getParameters().getOptions().getVmId(), null, org.ovirt.engine.core.common.console.ConsoleOptions.TICKET_VALIDITY_SECONDS, org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getParameters().getOptions().getGraphicsType()); parameters.setSessionId(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getEngineContext().getSessionId()); parameters.setParametersCurrentUser(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getUser()); org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getBackend().<START_MOD>runAction<END_MOD>(VdcActionType.SetVmTicket, parameters); if (result.getSucceeded()) { return result.getActionReturnValue(); } <START_MOD>throw new org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.TicketGenerationException(result)<END_MOD>; }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Same action, ${action}, is already in progress.") java.lang.String SAME_ACTION_ON_ENTITY_ALREADY_IN_PROGRESS();<END_MOD>
<START_MOD>@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { this.getNumaNodeList().addAll(((java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode>) (returnValue))); this.initFirstLevelDistanceSetList(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getVMsWithVNumaNodesByClusterId(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.hosts.numa.NumaSupportModel.this.setVmsWithvNumaNodeList(((java.util.List<org.ovirt.engine.core.common.businessentities.VM>) (returnValue))); org.ovirt.engine.ui.uicommonweb.models.hosts.numa.NumaSupportModel.this.initVNumaNodes(); org.ovirt.engine.ui.uicommonweb.models.hosts.numa.NumaSupportModel.this.modelReady(); } }), this.hosts.getSelectedItem().getVdsGroupId()); }<END_MOD>
<START_MOD>public static boolean macHasMultiCastBitSet(long mac) { return ((org.ovirt.engine.core.utils.MacAddressRangeUtils.MAC_ADDRESS_MULTICAST_BIT) & mac) != 0; }<END_MOD>
protected boolean setAndValidateCpuProfile() { return validate(org.ovirt.engine.core.bll.profiles.CpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.StorageDeviceListReturnForXmlRpc <START_MOD>getGlusterStorageDeviceList<END_MOD>() { try { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = vdsServer.glusterStorageDevicesList(); org.ovirt.engine.core.vdsbroker.gluster.StorageDeviceListReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.gluster.StorageDeviceListReturnForXmlRpc(xmlRpcReturnValue); return wrapper; } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
public org.ovirt.engine.core.bll.ValidationResult defaultPoolFlagIsNotSet() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_SETTING_DEFAULT_MAC_POOL_IS_NOT_SUPPORTED).when(macPool.isDefaultPool()); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("External network provider ${providerName} is read only.") java.lang.String ACTION_TYPE_FAILED_EXTERNAL_PROVIDER_IS_READ_ONLY();<END_MOD>
public java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>VM<END_MOD>> getLastVmsList() { return lastVmsList; }
@javax.annotation.PostConstruct private void init() { autoStartVmsToRestart = new java.util.concurrent.CopyOnWriteArraySet<>(getInitialVmsToStart()); int autoStartVmsRunnerIntervalInSeconds = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AutoStartVmsRunnerIntervalInSeconds); <START_MOD>executor<END_MOD>.<START_MOD>scheduleWithFixedDelay<END_MOD>(<START_MOD>()<END_MOD> <START_MOD>-><END_MOD> <START_MOD>startFailedAutoStartVms()<END_MOD>, autoStartVmsRunnerIntervalInSeconds, autoStartVmsRunnerIntervalInSeconds, java.util.concurrent.TimeUnit.SECONDS); }
protected boolean canAddVm(java.util.ArrayList<java.lang.String> reasons, java.util.Collection<org.ovirt.engine.core.common.businessentities.StorageDomain> destStorages) { org.ovirt.engine.core.common.businessentities.VmStatic vmStaticFromParams = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData(); if (!(canAddVm(reasons, vmStaticFromParams.getName(), org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId(), vmStaticFromParams.getPriority()))) { return false; } if (!(validateCustomProperties(vmStaticFromParams, reasons))) { return false; } if (shouldCheckSpaceInStorageDomains()) { if (!(org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId().equals(getStoragePoolIdFromSourceImageContainer()))) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH.toString()); return false; } for (org.ovirt.engine.core.common.businessentities.StorageDomain domain : destStorages) { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); if (!(validate(storageDomainValidator.isDomainExistAndActive()))) { return false; } } if (!(validateSpaceRequirements())) { return false; } } return org.ovirt.engine.core.bll.VmHandler.validateDedicatedVdsExistOnSameCluster(vmStaticFromParams, org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().<START_MOD>getValidateMessages()); }<END_MOD>
@java.lang.Override public boolean isValid(java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> value, javax.validation.ConstraintValidatorContext context) { java.util.Collection<java.lang.String> staticIps = new java.util.HashSet<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface networkInterface : value) { <START_MOD>java.lang.String address = networkInterface.getAddress(); <END_MOD>if (((<START_MOD>(<END_MOD>networkInterface.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.NetworkBootProtocol.StaticIp)) && (<START_MOD>address != null)) && (!("".equals(address)))) { if (staticIps.contains<END_MOD>(networkInterface.getAddress()))<START_MOD> { return false; } else { <END_MOD>staticIps.<START_MOD>add<END_MOD>(networkInterface.getAddress())<START_MOD>; } } }<END_MOD> return true; }
protected void closeChannel(<START_MOD>) { try (org.ovirt.vdsm.jsonrpc.client.utils.LockWrapper wrapper = new org.ovirt.vdsm.jsonrpc.client.utils.LockWrapper(this.lock)<END_MOD>) { try { if ((this.channel) != null) { this.channel.close(); } } catch (java.io.IOException e) { } finally { this.channel = null; } }<START_MOD> }<END_MOD>
@java.lang.Override protected boolean canMigrateVm(org.ovirt.engine.core.<START_MOD>common<END_MOD>.<START_MOD>businessentities.VM<END_MOD> <START_MOD>vm<END_MOD>) { if ((org.ovirt.engine.core.bll.InternalMigrateVmCommand.getVm().getMigrationSupport()) == (org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE)) { return super.canMigrateVm(<START_MOD>vm<END_MOD>); } else { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NON_MIGRTABLE); } }
<START_MOD>protected org.ovirt.engine.core.compat.Guid defaultQuotaIfNull(org.ovirt.engine.core.compat.Guid quotaId) { if ((quotaId == null) || (Guid.Empty.equals(quotaId))) { quotaId = org.ovirt.engine.core.bll.CommandBase.getStoragePool().getDefaultQuotaId(); } return quotaId; }<END_MOD>
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); if (!(super.<START_MOD>validate<END_MOD>())) { return false; } if (!(validate(getBrickValidator().canStopOrCommitRemoveBrick(volume, getParameters().getBricks())))) { return false; } if ((!(getGlusterTaskUtils().isTaskOfType(volume, GlusterTaskType.REMOVE_BRICK))) || (!((getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.STARTED)) || (getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.FINISHED))))) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REMOVE_BRICKS_NOT_STARTED); } return true; }
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(HasEntity.entityChangedEventDefinition)) { if (((sender == (getImageSourceLocalEnabled())) || (sender == (getImagePath()))) || (sender == (getImageUri()))) { recalculateImageDerivedFields(); } } }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Permission java.lang.String removePermissionTitle();
@java.lang.Override protected boolean canDoAction() { boolean retValue = true; if ((org.ovirt.engine.core.bll.pm.StopVdsCommand.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.VdcActionType.Unknown)) { retValue = super.canDoAction(); if (((org.ovirt.engine.core.bll.pm.StopVdsCommand.getVds()) != null) && ((org.ovirt.engine.core.bll.pm.StopVdsCommand.getVds().getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance))) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VDS_STATUS_NOT_VALID_FOR_STOP); retValue = false; } } org.ovirt.engine.core.bll.pm.StopVdsCommand.getReturnValue().setCanDoAction(retValue); return retValue; }
<START_MOD>public static void fillBondSlaves(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { java.util.Map<java.lang.String, java.util.List<java.lang.String>> bondToSlaves = org.ovirt.engine.core.common.utils.NetworkCommonUtils.getBondNameToBondSlavesMap(nics); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { if (nic instanceof org.ovirt.engine.core.common.businessentities.network.Bond) { org.ovirt.engine.core.common.businessentities.network.Bond bond = ((org.ovirt.engine.core.common.businessentities.network.Bond) (nic)); bond.setSlaves((bondToSlaves.containsKey(bond.getName()) ? bondToSlaves.get(bond.getName()) : java.util.Collections.<java.lang.String>emptyList())); } } }<END_MOD>
private void revertPreviousHandlers() { getParameters().decrementExecutionIndex(); if ((getExecutionIndex()) >= 0) { log.errorFormat( task <START_MOD>{0}, <END_MOD>handler: {<START_MOD>1<END_MOD>}<START_MOD> getCurrentTaskHandler().getRevertTaskType(),<END_MOD> getCurrentTaskHandler().getClass().getName()); getParameters().setExecutionReason(CommandExecutionReason.ROLLBACK_FLOW); getCurrentTaskHandler().compensate(); if (!(hasRevertTask())) { revertPreviousHandlers(); } } }
<START_MOD>private org.ovirt.engine.core.utils.lock.EngineLock retrieveVdsExecutionLock() { if ((lock) == null) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> exsluciveLock = java.util.Collections.singletonMap(org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getParameters().getVdsId().toString(), new org.ovirt.engine.core.common.utils.Pair(LockingGroup.VDS_EXECUTION.toString(), VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED.toString())); lock = new org.ovirt.engine.core.utils.lock.EngineLock(null, exsluciveLock); } return lock; }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { if (user.isAdmin()) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(constants.admin()); } if (user.isGroup()) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(constants.group()); } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(constants.user()); }<END_MOD>
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) {<START_MOD> if ((args == null) || (!(args instanceof org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs))) { return; }<END_MOD> org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)); if ((e.propertyName) == "SelectedItem") { updateUsbNativeMessageVisibility(object); } }
private int calculateCpuUsage(org.ovirt.engine.core.common.businessentities.VDS o1) { return ((o1.getusage_cpu_percent()) * (<START_MOD>org.ovirt.engine.core.bll.VdsSelector.geteffective_cpu_cores(<END_MOD>o1))) / (o1.getvds_strength()); }
<START_MOD>private void onDeleteSnapshot() { if ((getConfirmWindow()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())); java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> paramsList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity snapshot : ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity>) (getSelectedItems()))) { org.ovirt.engine.core.common.action.gluster.GlusterVolumeSnapshotActionParameters param = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeSnapshotActionParameters(getEntity().getId(), snapshot.getSnapshotName(), true); paramsList.add(param); } model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.DeleteGlusterVolumeSnapshot, paramsList, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())); localModel.stopProgress(); setConfirmWindow(null); } }, model); }<END_MOD>
@java.lang.Override @org.junit.Test public void <START_MOD>validateFailedWrongPlugStatus<END_MOD>() throws java.lang.Exception { mockVmStatusUp(); mockInterfaceList(); cretaeDiskWrongPlug(false); assertFalse(command.<START_MOD>validate<END_MOD>()); assertTrue(command.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().contains(EngineMessage.HOT_UNPLUG_DISK_IS_NOT_PLUGGED.toString())); }
<START_MOD>public org.ovirt.engine.core.common.businessentities.VmDevice getVmDevice() { java.util.Map<java.lang.String, java.lang.Object> specParams = new java.util.HashMap<>(); specParams.put("action", action.name()); specParams.put("model", model.name()); return new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), id), VmDeviceGeneralType.WATCHDOG, VmDeviceType.WATCHDOG.getName(), "", specParams, true, true, false, "", null, null, null); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult isDiskInterfaceSupportReadOnly() { if ((disk.getReadOnly()) && ((disk.getDiskInterface()) == (org.ovirt.engine.core.common.businessentities.DiskInterface.IDE))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_IDE_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.ProviderType providerType = org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getParameters().getProviderType(); <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.ProviderType> providerTypes = org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getParameters().getProviderTypes(); <END_MOD>if (providerType == null) { setReturnValue(org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getDbFacade().getProviderDao().getAll()); } else <START_MOD>if (providerTypes != null) <END_MOD>{ setReturnValue(org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getDbFacade().getProviderDao().<START_MOD>getAllByTypes(providerTypes)); } else { setReturnValue(org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getDbFacade().getProviderDao().<END_MOD>getAllByType(providerType)); } }
@java.lang.Override public java.lang.String toString() { return ((<START_MOD>java.util.Objects.toString<END_MOD>(getFirst()<START_MOD>, null<END_MOD>)) + '.') + (<START_MOD>java.util.Objects.toString<END_MOD>(getSecond()<START_MOD>, null<END_MOD>)); }
protected boolean canDoAddVmCommand() { boolean returnValue = false; returnValue = areParametersLegal(org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages()); returnValue = (returnValue && (checkNumberOfMonitors())) && (checkSingleQxlDisplay()); returnValue = ((returnValue && (checkPciAndIdeLimit(org.ovirt.engine.core.bll.AddVmCommand.getParameters().<START_MOD>getVm().getOs(), org.ovirt.engine.core.bll.AddVmCommand.getVdsGroup().getcompatibility_version(), org.ovirt.engine.core.bll.AddVmCommand.getParameters().<END_MOD>getVmStaticData().getNumOfMonitors(), getVmInterfaces(), getVmDisks(), isVirtioScsiEnabled(), org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages()))) && (canAddVm(org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages(), destStorages.values()))) && (hostToRunExist()); return returnValue; }
private void setSessionUser(org.ovirt.engine.api.model.Session session)<START_MOD> { try<END_MOD> { org.ovirt.engine.api.model.User user = getUserResource().getUserByNameAndDomain(session.getUser().getUserName(), session.getUser().getDomain().getName()); if (user != null) { session.getUser().setId(user.getId()); session.getUser().setHref(user.getHref()); session.getUser().getDomain().setId(user.getDomain().getId()); session.getUser().getDomain().setHref(user.getDomain().getHref()); } }<START_MOD> catch (javax.ws.rs.WebApplicationException ex) { } }<END_MOD>
<START_MOD>public java.lang.String getLabel() { return button.getText(); }<END_MOD>
protected void updateMetadataDevices() { if (((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getVds().<START_MOD>getStoragePoolId<END_MOD>()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } }
@org.junit.Test public void testListWithEveryonePermissions() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations(null); setUpGetEntityExpectations(VdcQueryType.GetDbUserByUserId, org.ovirt.engine.core.common.queries.GetDbUserByUserIdParameters.class, new java.lang.String[]{ "UserId" }, new java.lang.Object[]{ GUIDS[1] }, getUserByIdx(1)<START_MOD>, 3<END_MOD>); setUpQueryExpectations("", null, org.ovirt.engine.api.restapi.resource.EVERYONE); collection.setUriInfo(uriInfo); verifyCollection(getCollection()); }
private java.lang.String resolveMessage(java.lang.String message, java.util.Map<java.lang.String, java.util.LinkedList<java.lang.String>> variables) { java.lang.String returnValue = message; com.google.gwt.regexp.shared.RegExp regex = com.google.gwt.regexp.shared.RegExp.compile(org.ovirt.engine.ui.frontend.ErrorTranslator.VARIABLE_PATTERN, "gi"); <START_MOD>com.google.gwt.regexp.shared.MatchResult result; while ((returnValue.length()) ><END_MOD> 0<START_MOD>) {<END_MOD> result<START_MOD> = regex.exec(returnValue); if (result == null<END_MOD>) { break; } java.lang.String match = result.getGroup(0); java.lang.String key = match.substring(2, ((match.length()) - 1)); if (variables.containsKey(key)) { java.util.LinkedList<java.lang.String> values = variables.get(key); java.lang.String value = ((values.size()) == 1) ? values.getFirst() : (values.size()) > 1 ? values.removeFirst() : ""; returnValue = returnValue.replace(match, value); } <START_MOD>regex.setLastIndex(0); <END_MOD>} return returnValue; }
protected boolean initVdss() { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); org.ovirt.engine.core.compat.Guid vdsToRunOn = org.ovirt.engine.core.bll.scheduling.SchedulingManager.getInstance().schedule(org.ovirt.engine.core.bll.MigrateVmCommand.getVdsGroup(), org.ovirt.engine.core.bll.MigrateVmCommand.getVm(), getVdsBlackList(), getVdsWhiteList(), getDestinationVdsId(), new java.util.ArrayList<java.lang.String>(), new org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker(this<START_MOD>, org.ovirt.engine.core.bll.scheduling.SchedulingManager.getInstance().getPendingResourceManager()<END_MOD>), org.ovirt.engine.core.bll.MigrateVmCommand.getCorrelationId()); setDestinationVdsId(vdsToRunOn); if ((vdsToRunOn != null) && (!(Guid.Empty.equals(vdsToRunOn)))) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn); } org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); if ((vdsToRunOn != null) && (vdsToRunOn.equals(Guid.Empty))) { return false; } if (((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } return true; }
<START_MOD>public void setVdsNeedsReinstall(boolean vdsNeedsReinstall) { vdsStatic.setVdsNeedsReinstall(vdsNeedsReinstall); }<END_MOD>
private void validateNicForNotRemovingLabeledNetworks(java.lang.String network, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { org.ovirt.engine.core.common.businessentities.network.Network removedNetwork = getExistingClusterNetworks().get(network); if (((org.ovirt.engine.core.utils.NetworkUtils.isLabeled(nic)) && (removedNetwork != null)) && (nic.getLabels().contains(removedNetwork.getLabel()))) { addViolation(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_CANNOT_REMOVE_LABELED_NETWORK_FROM_NIC, network); } }
private void verifyLocalDataCenterNoCluster(final java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.StoragePool>> filteredDataCenters, final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterList(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>Cluster> clusters) { java.util.List<org.ovirt.engine.core.common.businessentities.<END_MOD>StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); <START_MOD>for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (<END_MOD>org.ovirt.engine.core.common.businessentities.Cluster<START_MOD> cluster :<END_MOD> clusters<START_MOD>) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(dataCenter.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } } localDataCenters.removeAll(localDataCenterWithCluster<END_MOD>); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { <START_MOD>filteredDataCenters.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<END_MOD>(dataCenter<START_MOD>)); } displayAddDataCenter(<END_MOD>filteredDataCenters<START_MOD>); } })); }<END_MOD>
<START_MOD>public void setHighlyAvailableIsConfigured(java.lang.Boolean value) { this.mVdsStatistics.setHighlyAvailableIsConfigured(value); }<END_MOD>
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if ((getProvider()) == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST); } org.ovirt.engine.core.bll.provider.ProviderProxy providerProxy = getProviderProxy(); if (providerProxy == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_NOT_SUPPORTED, java.lang.String.format( %1$s getProvider().getType())); } org.ovirt.engine.core.bll.provider.ProviderValidator validator = getProviderProxy().getProviderValidator(); return (validate(validator.nameAvailable())) && (validate(validator.validateAddProvider())); }
public java.lang.String getTemplate(java.lang.String docParams, org.ovirt.engine.sdk.entities.DetailedLink <START_MOD>dl<END_MOD>) { java.lang.<START_MOD>StringBuilder buffer<END_MOD> = new java.lang.<START_MOD>StringBuilder(); java.util.List<org.ovirt.engine.sdk.entities.Parameter> urlParameters<END_MOD> = <START_MOD>org.ovirt.engine.sdk.codegen.utils.LinkUtils.getUrlParameters(dl); java.util.List<org.ovirt.engine.sdk.entities.Header> headers = org.ovirt.engine.sdk.codegen.utils.LinkUtils.getHeaders(dl); if (!(urlParameters.isEmpty())) { buffer.append(getTemplate(urlParameters, <END_MOD>new java.<START_MOD>util.ArrayList<org.ovirt.engine.sdk.entities.Header>(0), dl.getRequest().getBody().getType(), org.ovirt.engine.sdk.codegen.utils.StringUtils.combine(docParams, org.ovirt.engine.sdk.codegen.documentation.DocsGen.generateUrlParameters(dl)))); } if (!(headers.isEmpty())) { for (int i<END_MOD> = <START_MOD>1; i <= (headers.size()); i++) { java.util.List<org.ovirt.engine.sdk.entities.Header> headerSublist<END_MOD> = <START_MOD>headers.subList(0, i); buffer.append(getTemplate(urlParameters, headerSublist, dl<END_MOD>.getRequest().<START_MOD>getBody().getType(), org.ovirt.engine.sdk.codegen.utils.StringUtils.combine(docParams, org.ovirt.engine.sdk.codegen.documentation.DocsGen.generateHeaders(dl), org.ovirt.engine.sdk.codegen.documentation.DocsGen.generateUrlParameters(dl)))<END_MOD>); } } <START_MOD>return buffer.toString(); <END_MOD>}
<START_MOD>org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn mergeSnapshots(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String imgGUID, java.lang.String ancestorUUID, java.lang.String successorUUID, java.lang.String postZero, boolean discard);<END_MOD>
<START_MOD>@java.lang.Override public void saveVmNumaNode(org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode, org.ovirt.engine.core.compat.Guid vmId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = createVmNumaNodeParametersMapper(vmNumaNode).addValue("vm_or_vds_guid", vmId); java.util.List<org.springframework.jdbc.core.namedparam.MapSqlParameterSource> numaNodeCpusExecutions = new java.util.ArrayList(vmNumaNode.getCpuIds().size()); for (java.lang.Integer cpuId : vmNumaNode.getCpuIds()) { numaNodeCpusExecutions.add(createVmNumaNodeCpusParametersMapper(vmNumaNode, cpuId)); } getCallsHandler().executeModification("InsertNumaNode", parameterSource); getCallsHandler().executeStoredProcAsBatch("InsertNumaNodeCpu", numaNodeCpusExecutions); }<END_MOD>
<START_MOD>@<END_MOD>java.<START_MOD>lang<END_MOD>.<START_MOD>Override public<END_MOD> java.util.List<org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>utils<END_MOD>.<START_MOD>PermissionSubject<END_MOD>> <START_MOD>getPermissionCheckSubjects<END_MOD>() <START_MOD>{<END_MOD> java.util.List<org.ovirt.engine.core.<START_MOD>bll.utils.PermissionSubject> permissionList = new java.util.ArrayList<>(); permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.<END_MOD>common.<START_MOD>VdcObjectType<END_MOD>.<START_MOD>Disk,<END_MOD> org.ovirt.engine.core.common.businessentities.<START_MOD>ActionGroup<END_MOD>.<START_MOD>CONFIGURE_DISK_STORAGE<END_MOD>)); <START_MOD>return<END_MOD> <START_MOD>permissionList<END_MOD>; }
<START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VM object) { return null; }<END_MOD>
private boolean networksUniquelyConfiguredOnHost(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure) { boolean passed = true; java.util.Set<org.ovirt.engine.core.compat.Guid> networkIds = new java.util.HashSet(attachmentsToConfigure.size()); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : attachmentsToConfigure) { if (networkIds.contains(attachment.getNetworkId())) { org.ovirt.engine.core.common.businessentities.network.Network network = <START_MOD>networkBusinessEntityMap<END_MOD>.get(attachment.getNetworkId()); addViolation(VdcBllMessages.NETWORKS_ALREADY_ATTACHED_TO_IFACES, network.getName()); passed = false; } else { networkIds.add(attachment.getNetworkId()); } } return passed; }
<START_MOD>@java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.gluster.BrickProfileDetails object) { return object.getBrickName(); }<END_MOD>
@java.lang.Override public int compareTo(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<T> o) { <START_MOD>if ((getMajorSortKey()) == (o.getMajorSortKey())) { <END_MOD>return org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator.comp(getName(), o.getName()); }<START_MOD> else { return (getMajorSortKey()) < (o.getMajorSortKey()) ? -1 : 1; } }<END_MOD>
<START_MOD>private void processSelectionChanged() { java.util.List<T> selectedItems = getSelectedItems(); selectedIndexes.clear(); model.getItems().forEach(( item) -> { if (selectedItems.contains(item)) { selectedIndexes.add(model.getItemsAsList().indexOf(item)); } }); updateInfoPanel(); }<END_MOD>
public boolean evaluate(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm) { if (!(org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasMemoryToRunVM(vds, vm<START_MOD>, pendingResourceManager<END_MOD>))) { if ((<START_MOD>org.ovirt.engine.core.bll.scheduling.pending.PendingVM.collectForHost(pendingResourceManager, vds).size<END_MOD>()) == 0) { return false; } org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker.log.debug( enough memory on host. throttling... delayer.delay(vds.getId()); vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vds.getId()); return org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasMemoryToRunVM(vds, vm<START_MOD>, pendingResourceManager<END_MOD>); } return true; }
@org.junit.Test public void testGetEntityNameByIdAndTypeForRole() { org.ovirt.engine.core.common.businessentities.roles role = dbFacade.<START_MOD>getRoleDao<END_MOD>().get(org.ovirt.engine.core.dao.DbFacadeDAOTest.ROLE_ID); assertNotNull(role); java.lang.String name = role.getname(); assertTrue(name.equals(dbFacade.getEntityNameByIdAndType(org.ovirt.engine.core.dao.DbFacadeDAOTest.ROLE_ID, VdcObjectType.Role))); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Num of IO Threads exceeds supported limit.") java.lang.String ACTION_TYPE_FAILED_NUM_OF_IOTHREADS_TOO_HIGH();<END_MOD>
<START_MOD>protected<END_MOD> void refreshBootParameters(org.ovirt.engine.core.common.action.RunVmParams runVmParameters) { refreshBootSequenceParameter(runVmParameters); org.ovirt.engine.core.bll.RunVmCommand.getVm().setLastStartTime(new java.util.Date()); }
private void refreshReposIfNeeded(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType, <START_MOD>java.lang.Boolean<END_MOD> forceRefresh) { org.apache.commons.lang.mutable.MutableLong lastRefreshed = domainsLastRefreshedTime.computeIfAbsent(storageDomainId, ( k) -> new org.apache.commons.lang.mutable.MutableLong((-1))); if (<START_MOD>(shouldForceRefresh(<END_MOD>forceRefresh<START_MOD>))<END_MOD> || (shouldInvalidateCache(lastRefreshed.longValue()))) { synchronized(lastRefreshed) { if (forceRefresh || (shouldInvalidateCache(lastRefreshed.longValue()))) { boolean refreshSucceeded = refreshRepos(storageDomainId, imageType); lastRefreshed.setValue(java.lang.System.currentTimeMillis()); if (!refreshSucceeded) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IMAGES_NOT_SUPPORTED_ERROR); } } } } }
<START_MOD>public void makeSortable(java.lang.String sortBy) { org.ovirt.engine.ui.common.widget.table.column.SortableColumn.setSortable(true); this.sortBy = sortBy; }<END_MOD>
@java.lang.Override protected void executeCommand() { final org.ovirt.engine.core.common.businessentities.StorageDomain dom = org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>RemoveStorageDomainCommand.getStorageDomain(); org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>RemoveStorageDomainCommand.getVds(); boolean format = org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>RemoveStorageDomainCommand.getParameters().getDoFormat(); org.ovirt.engine.core.bll.storage<START_MOD>.domains<END_MOD>.RemoveStorageDomainCommand.setSucceeded(false); if (detachLocalStorageDomain(dom)) { return; } if (format) { org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, org.ovirt.engine.core.common.errors.EngineFault> connectResult = connectStorage(); if (!(connectResult.getFirst())) { org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>RemoveStorageDomainCommand.getReturnValue().setFault(connectResult.getSecond()); return; } boolean failed = !(formatStorage(dom, vds)); disconnectStorage(); if (failed) { return; } } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Object>() { @java.lang.Override public java.lang.Object runInTransaction() { getStorageHelper(dom).storageDomainRemoved(dom.getStorageStaticData()); getStorageDomainDao().remove(dom.getId()); return null; } }); org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>RemoveStorageDomainCommand.setSucceeded(true); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.Template incoming, org.ovirt.engine.core.common.businessentities.VmTemplate entity) { org.ovirt.engine.core.common.businessentities.VmTemplate updated = getMapper(modelType, org.ovirt.engine.core.common.businessentities.VmTemplate.class).map(incoming, entity); updated.setUsbPolicy(org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate(incoming.getUsb(), entity.getUsbPolicy(), lookupCluster(updated.getVdsGroupId()))); <START_MOD>org.ovirt.engine.core.common.action.UpdateVmTemplateParameters params = new org.ovirt.engine.core.common.action.UpdateVmTemplateParameters(updated); params.setConsoleEnabled(((incoming.isSetConsoleDeviceEnabled()) && (incoming.isConsoleDeviceEnabled()))); <END_MOD>return <START_MOD>params<END_MOD>; }
<START_MOD>@java.lang.Override public void setSanStorageModel(org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel sanStorageModel) { super.setSanStorageModel(sanStorageModel); sanStorageModel.getLunSelectionChangedEvent().getListeners().clear(); sanStorageModel.getLunSelectionChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.String description = getDescription().getEntity(); if (((description == null) || (description.isEmpty())) || ((!(description.isEmpty())) && (descriptionDerivedFromLunId))) { org.ovirt.engine.ui.uicommonweb.models.storage.LunModel selectedLunModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.ValueEventArgs<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>) (args)).getValue(); if ((selectedLunModel.getLunId()) != null) { java.lang.String newDescription = selectedLunModel.getLunId().substring(((selectedLunModel.getLunId().length()) - 4)); getDescription().setEntity(newDescription); descriptionDerivedFromLunId = true; } } } }); }<END_MOD>
<START_MOD>public<END_MOD> org.ovirt.engine.core.dao.gluster.GlusterBrickDao getGlusterBrickDao() { return GlusterCommandBase.getDbFacade().getGlusterBrickDao(); }
<START_MOD>@java.lang.Override protected void init() { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSnapshot(); org.ovirt.engine.core.common.businessentities.VM vm = readVmFromSnapshot(snapshot); if (vm == null) { return; } setVm(vm); if ((org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getParameters().getVm()) == null) { return; } vm.setVdsGroupId(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getParameters().getVm().getVdsGroupId()); if ((org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVdsGroup()) == null) { return; } vm.setStoragePoolId(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVdsGroup().getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : getDiskImageDao().getAllSnapshotsForVmSnapshot(snapshot.getId())) { vm.getDiskMap().put(diskImage.getId(), diskImage); vm.getDiskList().add(diskImage); } org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getParameters().setVm(vm); super.init(); }<END_MOD>
protected org.ovirt.engine.core.vdsbroker.vdsbroker.FenceStatusReturnForXmlRpc fenceNode(org.ovirt.engine.core.common.businessentities.pm.FenceActionType actionType, boolean applyFencingPolicy) { return FenceVdsVDSCommand.getBroker().fenceNode(FenceVdsVDSCommand.getParameters().getFenceAgent().getIp(), ((FenceVdsVDSCommand.getParameters().getFenceAgent().getPort()) == null ? "" : FenceVdsVDSCommand.getParameters().getFenceAgent().getPort().toString()), FenceVdsVDSCommand.getParameters().getFenceAgent().getType(), FenceVdsVDSCommand.getParameters().getFenceAgent().getUser(), FenceVdsVDSCommand.getParameters().getFenceAgent().getPassword(), actionType.getValue(), "", FenceVdsVDSCommand.getParameters().getFenceAgent().getOptions(), (applyFencingPolicy ? <START_MOD>FenceVdsVDSCommand.getParameters().getFencingPolicyParams<END_MOD>() : null)); }
<START_MOD>@org.junit.Test public void newVnicProfileNoNetworkFilterId() { when(vnicProfile.getNetworkFilterId()).thenReturn(null); assertThat(validator.validNetworkFilterForNewVnicProfile(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }<END_MOD>
void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(dynamicMessages.ovirtVersionAbout()); <START_MOD>userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.userNameAboutLabel()); <END_MOD>}
<START_MOD>private void checkClusterAdditionalFeaturesSupported(org.ovirt.engine.core.common.businessentities.VDSGroup cluster, org.ovirt.engine.core.common.businessentities.VDS vds) { java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> clusterSupportedFeatures = clusterFeatureDao.getSupportedFeaturesByClusterId(cluster.getId()); java.util.Set<java.lang.String> hostSupportedFeatures = hostFeatureDao.getSupportedHostFeaturesByHostId(vds.getId()); for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature : clusterSupportedFeatures) { if ((feature.isEnabled()) && (!(hostSupportedFeatures.contains(feature.getFeature().getName())))) { java.util.Map<java.lang.String, java.lang.String> customLogValues = new java.util.HashMap<>(); customLogValues.put("UnSupportedFeature", feature.getFeature().getName()); reportNonOperationReason(NonOperationalReason.HOST_FEATURES_INCOMPATIBILE_WITH_CLUSTER, customLogValues); return; } } return; }<END_MOD>
@org.junit.Test public void testTemplateOvfImportWithoutDbGenerationBackwardCompatiliblity() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmTemplate template = org.ovirt.engine.core.<START_MOD>bll<END_MOD>.OvfManagerTest.createVmTemplate(); java.lang.String xml = manager.ExportTemplate(template, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(), Version.v3_0); assertNotNull(xml); java.lang.String replacedXml = xml.replaceAll("Generation", "test_replaced"); final org.ovirt.engine.core.common.businessentities.VmTemplate newtemplate = new org.ovirt.engine.core.common.businessentities.VmTemplate(); manager.ImportTemplate(replacedXml, newtemplate, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(), new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>()); assertEquals( template is different than expected template, newtemplate); assertTrue( db generation is different than expected ((newtemplate.getDbGeneration()) == 1)); }
@org.junit.Test public void testHandleActionResult_isRaiseErrorModalPanel_withActionMessageSize1() { org.ovirt.engine.core.common.errors.VdcFault testFault = new org.ovirt.engine.core.common.errors.VdcFault(); when(mockEventsHandler.isRaiseErrorModalPanel(VdcActionType.AddDisk, testFault)).thenReturn(true); java.lang.Object testState = new java.lang.Object(); org.ovirt.engine.core.common.action.VdcActionParametersBase testParameters = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnValue.setFault(testFault); returnValue.setDescription( is a description returnValue.getCanDoActionMessages().add( 1 returnValue.setCanDoAction(false); frontend.handleActionResult(VdcActionType.AddDisk, testParameters, returnValue, mockActionCallback, testState, false); verify(mockActionCallback).executed(callbackParam.capture()); assertEquals( should match testParameters, callbackParam.getValue().getParameters()); assertEquals( should match returnValue, callbackParam.getValue().getReturnValue()); assertEquals( should match testState, callbackParam.getValue().getState()); assertEquals( type should match VdcActionType.AddDisk, callbackParam.getValue().getActionType()); org.mockito.ArgumentCaptor<org.ovirt.engine.ui.frontend.FrontendFailureEventArgs> failureCaptor = org.mockito.ArgumentCaptor.forClass(org.ovirt.engine.ui.frontend.FrontendFailureEventArgs.class); verify(mockFrontendFailureEvent).raise(eq(org.ovirt.engine.ui.frontend.Frontend.class), failureCaptor.capture()); assertEquals( should match   is a description failureCaptor.getValue().getMessage().getDescription()); assertEquals( should match   1 failureCaptor.getValue().getMessage().getText()); }
<START_MOD>@java.lang.Override public java.lang.String getNewName() { return org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getParameters().getNetwork().getName(); }<END_MOD>
public void calculateFreeVirtualMemory() { if ((((getMemCommited()) != null) && ((getPhysicalMemMb()) != null)) && ((getReservedMem()) != null)) { maxSchedulingMemory = (((getMaxVdsMemoryOverCommit()) * (getPhysicalMemMb())) / 100.0F) - ((<START_MOD>(<END_MOD>getMemCommited()) + (getReservedMem<START_MOD>())) - (getPendingVmemSize<END_MOD>())); maxSchedulingMemory = ((maxSchedulingMemory) > 0) ? maxSchedulingMemory : 0; } }
@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, org.ovirt.engine.core.common.businessentities.VmBase vm) { super.build(model, vm); vm.setAllowConsoleReconnect(model.getAllowConsoleReconnect().getEntity()); vm.setVmType(model.getVmType().getSelectedItem()); vm.setVdsGroupId(model.getSelectedCluster().getId()); vm.setTimeZone(((model.getTimeZone().getIsAvailable()) && ((model.getTimeZone().getSelectedItem()) != null) ? model.getTimeZone().getSelectedItem().getTimeZoneKey() : "")); vm.setIsoPath((model.getCdImage().getIsChangable() ? model.getCdImage().getSelectedItem() : "")); vm.setDeleteProtected(model.getIsDeleteProtected().getEntity()); vm.setOsId(model.getOSType().getSelectedItem()); vm.setVncKeyboardLayout(model.getVncKeyboardLayout().getSelectedItem()); vm.setSerialNumberPolicy(model.getSerialNumberPolicy().getSelectedSerialNumberPolicy()); vm.setCustomSerialNumber(model.getSerialNumberPolicy().getCustomSerialNumber().getEntity()); vm.setBootMenuEnabled(model.getBootMenuEnabled().getEntity()); vm.setSpiceFileTransferEnabled(model.getSpiceFileTransferEnabled().getEntity()); vm.setSpiceCopyPasteEnabled(model.getSpiceCopyPasteEnabled().getEntity()); <START_MOD>vm.setCustomProperties(model.getCustomPropertySheet().serialize()); <END_MOD>}
<START_MOD>protected void onStopVmsSucceeded() { org.ovirt.engine.core.bll.RemoveVmPoolCommand.setSucceeded(((removeVmsInPool()) && (removeVmPool()))); org.ovirt.engine.core.bll.RemoveVmPoolCommand.log(); }<END_MOD>
<START_MOD>@org.junit.Test public void testListWithOneObject() { java.util.List<org.ovirt.engine.api.types.V4Vm> list = java.util.Collections.singletonList(newVm().build()); assertEquals("[{}]", listToJson(list.iterator())); }<END_MOD>
public static void GetRedirectServletReportsPage(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.String) (source)) : ""; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.RedirectServletReportsPage, org.ovirt.engine.core.common.config.<START_MOD>ConfigCommon<END_MOD>.<START_MOD>defaultConfigurationVersion<END_MOD>), aQuery); }
@java.lang.SuppressWarnings({ "rawtypes", "unchecked" }) private static java.lang.Object parseValue(java.lang.String value, java.lang.String name, java.lang.Class<?> fieldType) { if (value == null) { return null; } try { if (fieldType == (java.lang.Integer.class)) { return java.lang.Integer.parseInt(value); } else if (fieldType == (java.lang.Boolean.class)) { return java.lang.Boolean.parseBoolean(value); } else if (fieldType == (org.ovirt.engine.core.compat.Version.class)) { return new org.ovirt.engine.core.compat.Version(value); } else if (fieldType == (java.util.Date.class)) { return new java.text.SimpleDateFormat("k:m:s").parse(value); } else if (fieldType == (java.lang.Double.class)) { return java.lang.Double.parseDouble(value); } else if (java.util.Map.class.isAssignableFrom(fieldType)) { if ((org.apache.commons.lang.StringUtils.startsWith(value, "{")) && (org.apache.commons.lang.StringUtils.endsWith(value, "}"))) { return new org.ovirt.engine.core.utils.serialization.json.JsonObjectDeserializer().deserialize(value, java.util.HashMap.class); } else { return value; } } else if (fieldType.isEnum()) { return java.lang.Enum.valueOf(((java.lang.Class<java.lang.Enum>) (fieldType)), value.toUpperCase()); } else <START_MOD>if (fieldType == (org.ovirt.engine.core.common.businessentities.SerialNumberPolicy.class)) { return org.ovirt.engine.core.common.businessentities.SerialNumberPolicy.valueOf(value); } else <END_MOD>{ return value; } } catch (java.lang.Exception e2) { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.log.errorFormat( not parse option {0} value. name); return null; } }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase object) { driver.edit(object); initLists(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { java.lang.String propName = args.propertyName; if (propName.equals("IsValid")) { onIsValidPropertyChange(object); } } }); }
protected <T> T doGetEntity(java.lang.Class<T> clz, org.ovirt.engine.core.common.queries.VdcQueryType query, org.ovirt.engine.core.common.queries.VdcQueryParametersBase queryParams, java.lang.String identifier) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = runQuery(query, queryParams); if ((!(result.getSucceeded())) || ((result.getReturnValue()) == null)) { if ((result.getExceptionString()) != null) { throw new org.ovirt.engine.api.restapi.resource.BackendFailureException(localize(result.getExceptionString())<START_MOD>, org.ovirt.engine.api.restapi.util.ErrorMessageHelper.getErrorStatus(result.getExceptionString())<END_MOD>); } else { throw new org.ovirt.engine.api.restapi.resource.EntityNotFoundException(identifier); } } return clz.cast(result.getReturnValue()); }
protected void removeVmNetwork() { new org.ovirt.engine.core.bll.network.VmInterfaceManager().<START_MOD>removeAllInterfacesAndMacsFromList<END_MOD>(getVmId()<START_MOD>, macsAdded<END_MOD>); }
@java.lang.Override protected boolean canDoAction() { if ((((!(isValidParametersList())) || (!(isLiveMigrationEnabled()))) || (!(checkImagesStatus()))) || (!(isValidSpaceRequirements()))) { return false; } for (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : getParameters().getParametersList()) { org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getReturnValue().setCanDoAction(((((isDiskNotShareable(parameters.getImageId())) && (isTemplateInDestStorageDomain(parameters.getImageId(), parameters.getStorageDomainId()))) && (<START_MOD>validatSourceStorageDomain(parameters.getImageId()))) && (validateDestStorage<END_MOD>(parameters.getImageId(), parameters.getStorageDomainId())))); if (!(org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getReturnValue().getCanDoAction())) { return false; } } return true; }
<START_MOD>private static boolean diskProfilePermitted(org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile, java.util.Set<org.ovirt.engine.core.compat.Guid> permittedDiskProfilesIds, org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { return (permittedDiskProfilesIds.contains(diskProfile.getId())) || ((org.ovirt.engine.core.bll.profiles.DiskProfileHelper.getPermissionDAO().getEntityPermissions(user.getId(), ActionGroup.ATTACH_DISK_PROFILE, diskProfile.getId(), VdcObjectType.DiskProfile)) != null); }<END_MOD>
<START_MOD>@org.junit.Test public void testUpdateCantDo() throws java.lang.Exception { doTestBadUpdate(false, true, org.ovirt.engine.api.restapi.resource.foreman.CANT_DO); }<END_MOD>
@org.junit.Test public void validateSpaceNotWithinThreshold() throws java.lang.Exception { initCommand(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(storageDomainValidator).isDomainWithinThresholds(); doReturn(storageDomainValidator).when(command).createStorageDomainValidator(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); assertFalse(command.validateSpaceRequirements()); }
<START_MOD>@java.lang.Override public boolean validate() { if (!(getIsAvailable())) { return true; } getOutAverageLinkshare().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(0, org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.HOST_NETWORK_QOS_MAX_SHARES) }); org.ovirt.engine.ui.uicommonweb.validation.IValidation[] rateRangeValidation = new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(0, ((java.lang.Integer) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.MaxAverageNetworkQoSValue)))) }; getOutAverageUpperlimit().validateEntity(rateRangeValidation); getOutAverageRealtime().validateEntity(rateRangeValidation); setIsValid((((getOutAverageLinkshare().getIsValid()) && (getOutAverageUpperlimit().getIsValid())) && (getOutAverageRealtime().getIsValid()))); return getIsValid(); }<END_MOD>
public static boolean validateDedicatedVdsExistOnSameCluster(org.ovirt.engine.core.common.businessentities.VmBase vm, java.util.ArrayList<java.lang.String> canDoActionMessages) { boolean result = true; for (org.ovirt.engine.core.compat.Guid vdsId : vm.getDedicatedVmForVdsList()) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vdsId); if (vds == null) { if (canDoActionMessages != null) { canDoActionMessages.add(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DEDICATED_VDS_DOES_NOT_EXIST.toString()); } result = false; } else if (!(java.util.Objects.equals(vm.getVdsGroupId(), vds.getVdsGroupId()))) { if (canDoActionMessages != null) { canDoActionMessages.add(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DEDICATED_VDS_NOT_IN_SAME_CLUSTER.toString()); } result = false; } } return result; }
protected void updateUsbNativeMessageVisibility(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel object) { org.ovirt.engine.core.compat.Version <START_MOD>compatibilityVersion<END_MOD> = <START_MOD>object.getEffectiveCompatibilityVersion<END_MOD>(); changeApplicationLevelVisibility(nativeUsbWarningMessage, ((((object.getUsbPolicy().getSelectedItem()) == (org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE)) && (<START_MOD>compatibilityVersion<END_MOD> != null)) && (!((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.MigrationSupportForNativeUsb, <START_MOD>compatibilityVersion<END_MOD>.getValue())))))); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.dao.DbGroupDAO dao = org.ovirt.engine.core.bll.AddGroupCommand.getAdGroupDAO(); org.ovirt.engine.core.common.businessentities.DbGroup <START_MOD>groupToAdd = org.ovirt.engine.core.bll.AddGroupCommand.getParameters().getGroupToAdd(); org.ovirt.engine.core.common.businessentities.DbGroup <END_MOD>dbGroup = dao.getByExternalId(<START_MOD>groupToAdd.getDomain(), groupToAdd.getExternalId()); org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.compat.Guid.newGuid(); if (dbGroup == null) { groupToAdd.setId(id); dao.save(groupToAdd); } else { groupToAdd.setId(id); dao.update(groupToAdd); } setActionReturnValue(groupToAdd.getId()); <END_MOD>org.ovirt.engine.core.bll.AddGroupCommand.<START_MOD>setSucceeded(true<END_MOD>); }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = createSnapshotsValidator(); if ((!(validate(snapshotsValidator.snapshotExists(getSnapshot())))) || (!(validate(snapshotsValidator.vmNotDuringSnapshot(getSnapshot().getVmId()))))) { return false; } vmFromConfiguration = getVmFromConfiguration(); if ((vmFromConfiguration) == null) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_SNAPSHOT_HAS_NO_CONFIGURATION); addCanDoActionMessageVariable("VmName", org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmName()); addCanDoActionMessageVariable("SnapshotName", org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getSnapshotName()); return false; } if (!(super.canDoAction())) { return false; } if (!(checkCanDisableVirtIoScsi())) { return false; } return true; }
<START_MOD>protected java.util.Map<java.lang.String, java.lang.String> extractServers(java.lang.String serversXml) { if (org.apache.commons.lang.StringUtils.isEmpty(serversXml)) { throw new java.lang.RuntimeException("Could not get the peer list!"); } try { return getServerFingerprints(org.ovirt.engine.core.utils.XmlUtils.loadXmlDoc(serversXml).getElementsByTagName(org.ovirt.engine.core.utils.gluster.GlusterUtil.PEER)); } catch (java.lang.Exception e) { log.errorFormat("Error while parsing peer list xml [{0}]!", serversXml, e); throw new java.lang.RuntimeException(e); } }<END_MOD>
<START_MOD>public static java.io.InputStream loadAsStream(java.lang.String fileName) { return org.ovirt.engine.api.rsdl.RsdlIOManager.class.getResourceAsStream(fileName); }<END_MOD>
<START_MOD>static void verifyModelWithIso(org.ovirt.engine.api.model.Cdrom model, java.lang.String isoPath) { assertEquals(Guid.Empty.toString(), model.getId()); assertTrue(model.isSetVm()); assertEquals(org.ovirt.engine.api.restapi.resource.BackendTemplateCdromsResourceTest.TEMPLATE_ID.toString(), model.getVm().getId()); assertTrue(model.isSetFile()); assertEquals(isoPath, model.getFile().getId()); }<END_MOD>
@java.lang.Override public void init(final T model) { super.init(model); model.getPropertyChangedEvent().addListener(<START_MOD>( ev, sender, args) -><END_MOD> { <START_MOD>org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel model1 = ((org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel) (sender)); <END_MOD>java.lang.<START_MOD>String propertyName = args.propertyName; if ("Message".equals(propertyName)) { getView().setMessageLabel(model1.getMessage()); } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleSubnetVisibility(model.getExport().getEntity()); model.getExport().getEntityChangedEvent().addListener((<END_MOD> ev, sender, args) <START_MOD>-> getView().toggleSubnetVisibility(model.getExport().getEntity())); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleProfilesVisibility(model.getProfiles().getIsAvailable()); model.getProfiles().getPropertyChangedEvent().addListener(( ev, sender, args) -> <END_MOD>{ <START_MOD>if ("IsAvailable".equals(args.<END_MOD>propertyName)) { getView().<START_MOD>toggleProfilesVisibility(model.getProfiles().getIsAvailable<END_MOD>()); } }<START_MOD>); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().setCommand(model.getAddQosCommand()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().addClickHandler(( event) -> getView().getQosButton().getCommand().execute()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().addMtuEditor();<END_MOD> }
<START_MOD>@java.lang.Override public int hashCode() { int result = (stateless) ? 1 : 0; result = (31 * result) + (inPreview ? 1 : 0); result = (31 * result) + ((vmType) != null ? vmType.hashCode() : 0); return result; }<END_MOD>
<START_MOD>void initSortHandler() { tableHeader.getColumnSortList().setLimit(1); table.getColumnSortList().setLimit(1); org.ovirt.engine.ui.common.widget.table.ActionCellTable<T> tableWithHeader = (isTableHeaderVisible()) ? tableHeader : table; tableWithHeader.addColumnSortHandler(new com.google.gwt.user.cellview.client.ColumnSortEvent.Handler() { @java.lang.Override public void onColumnSort(com.google.gwt.user.cellview.client.ColumnSortEvent event) { java.lang.Object model = getDataProvider().getModel(); com.google.gwt.user.cellview.client.Column<?, ?> column = event.getColumn(); if (model instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?> searchableModel = ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?>) (model)); java.lang.String sortBy = null; if ((column != null) && (column instanceof org.ovirt.engine.ui.common.widget.table.column.SortableColumn)) { org.ovirt.engine.ui.common.widget.table.column.SortableColumn<?, ?> sortableColumn = ((org.ovirt.engine.ui.common.widget.table.column.SortableColumn<?, ?>) (column)); sortBy = sortableColumn.getSortBy(); } searchableModel.setSortOptions(sortBy, event.isSortAscending()); com.google.gwt.user.cellview.client.ColumnSortList.ColumnSortInfo columnSortInfo = event.getColumnSortList().get(0); tableHeader.getColumnSortList().push(columnSortInfo); table.getColumnSortList().push(columnSortInfo); } } }); }<END_MOD>
@javax.ws.rs.Path( (start|stop|shutdown|reboot|suspend|detach|migrate|export|move|ticket|cancelmigration|<START_MOD> + "preview_snapshot|commit_snapshot|undo_snapshot|clone|maintenance)|reordermacaddresses}/{oid}"<END_MOD>) public org.ovirt.engine.api.resource.ActionResource getActionSubresource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid);
@java.lang.Override public void initSelectedProfile(org.ovirt.engine.ui.uicommonweb.models.ListModel profileList, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> profiles = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>) (profileList.getItems())); profiles = (profiles == null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() : profiles; for (org.ovirt.engine.core.common.businessentities.network.VnicProfileView profile : profiles) { if ((((<START_MOD>getManagementNetwork()<END_MOD>) != null) && (profile != null)) && (<START_MOD>getManagementNetwork().getName()<END_MOD>.equals(profile.getNetworkName()))) { profileList.setSelectedItem(profile); return; } } profileList.setSelectedItem(((profiles.size()) >   ? profiles.get(0) : org.ovirt.engine.core.common.businessentities.network.VnicProfileView.EMPTY)); }
@org.junit.Test public void testIsUpdInvalid() { storagePool.setStatus(StoragePoolStatus.NonResponsive); assertThat(validator.isUp(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND)); }
@org.junit.Test public void appendCustomValueAppend() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String newVal = "bar"; final java.lang.String sep = "_"; b.addCustomValue(key, value); b.<START_MOD>appendCustomValueUsingCustomSeparator<END_MOD>(key, newVal, sep); final java.lang.String s = b.getCustomValue(key); assertEquals(((value + sep) + newVal), s); }
private void updateMemoryBoxVisibility() { org.ovirt.engine.core.common.businessentities.VM vm = model.getVm(); if (vm == null) { return; } boolean <START_MOD>archSnapshotSupported = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isSnapshotSupported(vm.getClusterArch(), vm.getVdsGroupCompatibilityVersion()); boolean <END_MOD>memorySnapshotSupported = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.MemorySnapshotSupported, vm.getVdsGroupCompatibilityVersion().toString())))<START_MOD> && archSnapshotSupported<END_MOD>; memoryEditor.setVisible((memorySnapshotSupported && (vm.isRunning()))); if (!(memoryEditor.isVisible())) { model.getMemory().setEntity(false); } }
protected void addVmStatic() { logImportEvents(); getVm().getStaticData().setId(getVmId()); getVm().getStaticData().setCreationDate(new java.util.Date()); getVm().getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getClusterId()); getVm().getStaticData().setMinAllocatedMem(computeMinAllocatedMem()); getVm().getStaticData().setQuotaId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getQuotaId()); if (!(org.ovirt.engine.core.bll.VmHandler.validateDedicatedVdsExistOnSameCluster(getVm().getStaticData(), null))) { getVm().setDedicatedVmForVdsList(java.util.Collections.emptyList()); } if (((getVm().getOriginalTemplateGuid()) != null) && (!(VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getVm().getOriginalTemplateGuid())))) { org.ovirt.engine.core.common.businessentities.VmTemplate originalTemplate = org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getVmTemplateDao().get(getVm().getOriginalTemplateGuid()); if (originalTemplate != null) { getVm().getStaticData().setOriginalTemplateName(originalTemplate.getName()); } } if (org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getCopyCollapse()) { getVm().setVmtGuid(VmTemplateHandler.BLANK_VM_TEMPLATE_ID); } <START_MOD>this.vmStaticDao.save(getVm().getStaticData()); <END_MOD>org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCompensationContext().snapshotNewEntity(getVm().getStaticData()); }
<START_MOD>@org.junit.Test public void testStandardIsValid() { assertTrue(underTest.isValid("0123:1234:7:8:12CD:0ABC:ABcd:cdef", mockConstraintValidatorContext)); }<END_MOD>
@java.lang.Override public void rerun() { org.ovirt.engine.core.bll.MigrateVmCommand.setVm(null); if (((org.ovirt.engine.core.bll.MigrateVmCommand.getVm()) != null) && ((org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))) { determineMigrationFailureForAuditLog(); <START_MOD>setDestinationVdsId<END_MOD>(null); super.rerun(); } else { failedToMigrate(); _isRerun = true; } }
@org.junit.Test public void updateSeveralConnectionsWithSamePath() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0); parameters.setStorageServerConnection(newNFSConnection); java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>(); org.ovirt.engine.core.common.businessentities.StorageServerConnections conn1 = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); conn1.setconnection(newNFSConnection.getconnection()); conn1.setid(newNFSConnection.getid()); org.ovirt.engine.core.common.businessentities.StorageServerConnections conn2 = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); conn2.setconnection(newNFSConnection.getconnection()); conn2.setid(org.ovirt.engine.core.compat.Guid.newGuid().toString()); connections.add(conn1); connections.add(conn2); when(storageConnDao.getAllForStorage(newNFSConnection.getconnection())).thenReturn(connections); when(storageConnDao.get(newNFSConnection.getid())).thenReturn(oldNFSConnection); doReturn(true).when(command).isConnWithSameDetailsExists(newNFSConnection, null); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ALREADY_EXISTS); }
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).PropertyName; if ("IsMigrationSupported".equals(propName)) { migrateEditor.setVisible(object.isMigrationSupported()); migrateInfoIcon.setVisible(object.isMigrationSupported()); warningLabel.setVisible(object.isMigrationSupported()); } }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { if (!(moveParametersList.isEmpty())) { vdcReturnValues.addAll(org.ovirt.engine.core.bll.Backend.getInstance().RunMultipleActions(VdcActionType.MoveOrCopyDisk, new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(getMoveDisksParametersList()), false)); } if (!(vmsLiveMigrateParametersMap.isEmpty())) { vdcReturnValues.addAll(org.ovirt.engine.core.bll.Backend.getInstance().RunMultipleActions(VdcActionType.LiveMigrateDisks, new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(getLiveMigrateDisksParametersList()), false)); } handleChildReturnValue(); org.ovirt.engine.core.bll.MoveDisksCommand.setSucceeded(true); }<END_MOD>
protected boolean isUnregisteredDiskExistsForCopyTemplate() { if ((isTemplate()) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy))) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk> unregisteredDisks = unregisteredDisksDao.getByDiskIdAndStorageDomainId(<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()); if (!(unregisteredDisks.isEmpty())) { return true; } } return false; }
private void onAddBricksInternal() { org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel volumeBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel) (getWindow())); cancelConfirmation(); if (!(volumeBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType selectedVolumeType = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType) (getTypeList().getSelectedItem())); if (selectedVolumeType.isReplicatedType()) { getReplicaCount().setEntity(volumeBrickModel.getReplicaCount().getEntity()); } if (selectedVolumeType.isStripedType()) { getStripeCount().setEntity(volumeBrickModel.getStripeCount().getEntity()); } java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> brickList = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); for (java.lang.Object object : volumeBrickModel.getBricks().getItems()) { org.ovirt.engine.ui.uicommonweb.models.EntityModel entityModel = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (object)); brickList.add(entityModel); } volumeBrickModel.getBricks().setItems(null); org.ovirt.engine.ui.uicommonweb.models.ListModel brickListModel = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); brickListModel.setItems(brickList); brickListModel.setSelectedItems(brickList); setBricks(brickListModel); <START_MOD>setForceAddBricks(volumeBrickModel.getForce().getEntity()); <END_MOD>setWindow(null); }
<START_MOD>private void pauseUpload() { if ((getWindow()) != null) { return; } java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(); updates.setPhase(ImageTransferPhase.PAUSED_USER); org.ovirt.engine.core.common.action.UploadImageStatusParameters parameters = new org.ovirt.engine.core.common.action.UploadImageStatusParameters(); parameters.setUpdates(updates); parameters.setDiskId(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (item)).getId()); list.add(parameters); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.UploadImageStatus, list, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { } }, null); }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionList = new java.util.ArrayList<org.ovirt.engine.core.bll.utils.PermissionSubject>(); for (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : getParameters().getParametersList()) { permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(parameters.getImageId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_DISK_STORAGE)); org.ovirt.engine.core.common.businessentities.DiskImage diskImage = getDiskImageById(parameters.getImageId()); org.ovirt.engine.core.compat.Guid storagePoolId = (diskImage != null) ? diskImage.getstorage_pool_id().getValue() : null; setStoragePoolId(storagePoolId); addStoragePermissionByQuotaMode(permissionList, storagePoolId, parameters.getStorageDomainId()); } return permissionList; }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> <START_MOD>getActiveUnknownInActiveForStoragePool<END_MOD>(org.ovirt.engine.core.compat.Guid pool) { return getCallsHandler().executeReadList(<START_MOD>"Getstorage_server_connectionsActiveUnknownInactiveByPoolId"<END_MOD>, org.ovirt.engine.core.dao.StorageServerConnectionDAODbFacadeImpl.mapper, getCustomMapSqlParameterSource().addValue("storage_pool_id", pool)); }
<START_MOD>@java.lang.Override public java.util.List<java.lang.String> getAllMacsByStoragePool(org.ovirt.engine.core.compat.Guid storagePoolId) { return getCallsHandler().executeReadList("GetMacsByStoragePoolId", macMapper, getCustomMapSqlParameterSource().addValue("storage_pool_id", storagePoolId)); }<END_MOD>
@java.lang.Override protected void executeVmCommand() { org.ovirt.engine.core.compat.Guid createdSnapshotId = getSnapshotDao().getId(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId(), SnapshotType.ACTIVE); getParameters().setSnapshotType(determineSnapshotType()); getSnapshotDao().updateId(createdSnapshotId, newActiveSnapshotId); setActionReturnValue(createdSnapshotId); org.ovirt.engine.core.bll.memory.MemoryImageBuilder memoryImageBuilder = getMemoryImageBuilder(); addSnapshotToDB(createdSnapshotId, memoryImageBuilder); createSnapshotsForDisks(); fastForwardDisksToActiveSnapshot(); memoryImageBuilder.build(); <START_MOD>boolean pendingAsyncTasks = (!(getReturnValue().getVdsmTaskIdList().isEmpty())) || (!(org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getCommandId()).isEmpty())); <END_MOD>if (<START_MOD>!pendingAsyncTasks<END_MOD>) { getParameters().setTaskGroupSuccess(true); incrementVmGeneration(); } org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.setSucceeded(true); }
<START_MOD>@java.lang.Override protected javax.ws.rs.core.Response performRemove(java.lang.String id) { org.ovirt.engine.core.common.action.HostSetupNetworksParameters parameters = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(hostId); parameters.setRemovedUnmanagedNetworks(java.util.Collections.singletonList(id)); return performAction(VdcActionType.HostSetupNetworks, parameters); }<END_MOD>
<START_MOD>private void showControls(boolean visible) { clearConcurrentGroup(); editFenceAgent.setVisible(true); up.setVisible(visible); down.setVisible(visible); orderLabel.setVisible(visible); concurrentListColumn.setVisible(((model.getConcurrentSelectList().getIsAvailable()) && (!(model.isInConcurrentGroup())))); if (concurrentListColumn.isVisible()) { labelColumn.setSize(ColumnSize.LG_5); } else { labelColumn.setSize(ColumnSize.LG_9); } }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Messages<END_MOD>.DefaultMessage( use your VNC client to connect to this VM.<br/><br/>Use the following parameters:<br/>IP:Port -- {0}:{1}<br/><br/> Password: {2}<br/>(note: this password is valid for {3} seconds) java.lang.String vncInfoMessage(java.lang.String hostIp, int port, java.lang.String password, int seconds);
<START_MOD>@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>) (returnValue)); addNullNetwork(networks); java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks> nicsWithLogicalNetwork = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic : nics) { final org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks nicWithLogicalNetwork = new org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks(nic); nicWithLogicalNetwork.setItems(networks); behavior.initSelectedNetwork(nicWithLogicalNetwork, nicWithLogicalNetwork.getNetworkInterface()); nicsWithLogicalNetwork.add(nicWithLogicalNetwork); } getModel().setNicWithLogicalNetworks(nicsWithLogicalNetwork); }<END_MOD>
<START_MOD>public java.util.Map<java.lang.String, java.lang.Object> glusterDisableCliSnapshotScheduling(boolean force);<END_MOD>
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Architecture.class, to = org.ovirt.engine.core.common.businessentities.ArchitectureType.class) public static org.ovirt.engine.core.common.businessentities.ArchitectureType map(org.ovirt.engine.api.model.Architecture model, org.ovirt.engine.core.common.businessentities.ArchitectureType template) { if (model != null) { switch (model) { case UNDEFINED : return org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined; case X86_64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.x86_64; case PPC64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64; <START_MOD>case S390 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.s390; <END_MOD>default : return null; } } return null; }
<START_MOD>public void persistAsyncTaskPlaceHolder(org.ovirt.engine.core.common.action.VdcActionType parentCommand, java.lang.String taskKey) { if (taskKeyToTaskIdMap.containsKey(taskKey)) { return; } try { org.ovirt.engine.core.common.businessentities.AsyncTasks task = createAsyncTask(new org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo(), parentCommand); org.ovirt.engine.core.compat.Guid taskId = task.getTaskId(); org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.addOrUpdateTaskInDB(task, null, org.ovirt.engine.core.bll.CommandBase.EMPTY_GUID_ARRAY); taskKeyToTaskIdMap.put(taskKey, taskId); } catch (java.lang.RuntimeException ex) { log.errorFormat("Error during persistAsyncTaskPlaceHolder for command: {0}. Exception {1}", this.getClass().getName(), ex); } }<END_MOD>
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnaValue = runVdsCommand(VDSCommandType.StopRebalanceGlusterVolume, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeVDSParameters(upServer.getId(), getGlusterVolumeName())); setSucceeded(vdsReturnaValue.getSucceeded()); if (!(getSucceeded())) { handleVdsError(AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP_FAILED, vdsReturnaValue.getVdsError().getMessage()); return; } endStepJob(); releaseVolumeLock(); }
@javax.annotation.PostConstruct public void init() {<START_MOD> setArik(java.lang.System.nanoTime());<END_MOD> org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(vmId); if (vmStatic != null) { updateStaticFields(vmStatic); } }
<START_MOD>private org.ovirt.engine.core.common.errors.VdcBllMessages checkRngDevice() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevs = org.ovirt.engine.core.bll.RunVmCommand.getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(org.ovirt.engine.core.bll.RunVmCommand.getVmId(), VmDeviceGeneralType.RNG, VmDeviceType.VIRTIO.getName()); if (!(rngDevs.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDev = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevs.get(0)); if (!(org.ovirt.engine.core.bll.RunVmCommand.getVdsGroup().getRequiredRngSources().contains(rngDev.getSource()))) { return org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_RNG_SOURCE_NOT_SUPPORTED; } if (!(org.ovirt.engine.core.bll.RunVmCommand.getVds().getSupportedRngSources().contains(rngDev.getSource()))) { return org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_RNG_SOURCE_NOT_SUPPORTED; } } return null; }<END_MOD>
private void newEntity() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = org.ovirt.engine.ui.uicommonweb.models.vms.NewVmInterfaceModel.createInstance(getEntity().getStaticData(), getEntity().getStatus(), getEntity().getStoragePoolId(), getEntity().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>) (getItems())), this); setWindow(model); }
<START_MOD>private void customPreview() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (getEntity())); if (vm == null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel(); model.setVmId(vm.getId()); model.initialize(); org.ovirt.engine.core.common.businessentities.Snapshot selectedSnapshot = ((org.ovirt.engine.core.common.businessentities.Snapshot) (getSelectedItem())); if (selectedSnapshot != null) { model.setSnapshotModel(getSnapshotsMap().get(selectedSnapshot.getId())); } setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().previewSnapshotTitle()); model.setHashName("custom_preview_snapshot"); addCommands(model, "OnCustomPreview"); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.DiskImage mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.storage.DiskImage entity = null; org.ovirt.engine.core.common.businessentities.storage.DiskStorageType diskStorageType = org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.forValue(rs.getInt("disk_storage_type")); switch (diskStorageType) { case IMAGE : entity = super.mapRow(rs, rowNum); mapEntity(rs, entity); break; case CINDER : entity = org.ovirt.engine.core.dao.<START_MOD>DiskImageDAOImpl<END_MOD>.CinderDiskRowMapper.instance.mapRow(rs, rowNum); break; } return entity; }
protected void syncSearch(org.ovirt.engine.core.common.queries.<START_MOD>QueryType<END_MOD> vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase, org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, vdcQueryParametersBase, asyncCallback); setIsQueryFirstTime(false); }
public static void GetAllAttachableDisks(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid vmId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.Disk>) (source)) : new java.util.ArrayList<org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.Disk>(); } }; org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.GetAllAttachableDisks params = new org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.GetAllAttachableDisks(storagePoolId); params.setVmId(vmId); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllAttachableDisks, params, aQuery); }
private void hostName_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.VDS vds = ((org.ovirt.engine.core.common.businessentities.VDS) (getExternalHostName().getSelectedItem())); if (vds == null) { vds = new org.ovirt.engine.core.common.businessentities.VDS(); } <START_MOD>setProtocolValue(); <END_MOD>updateModelFromVds(vds, null, false, null); }
<START_MOD>private void setVmMacsWarning(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData vmData, java.lang.String message, java.lang.Boolean aTrue) { vmData.setWarning(message); vmData.getBadMacsExist().setEntity(aTrue); }<END_MOD>
private org.ovirt.engine.core.common.businessentities.VDSGroup mockVdsGroup() { org.ovirt.engine.core.common.businessentities.VDSGroup group = new org.ovirt.engine.core.common.businessentities.VDSGroup(); group.setvds_group_id(vdsGroupId); group.setcompatibility_version(new org.ovirt.engine.core.compat.Version()); group.setStoragePoolId(storagePoolId); <START_MOD>group.setcpu_name( Conroe Family group.setArchitectureType(ArchitectureType.x86_64); <END_MOD>return group; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> getAll() { throw new <START_MOD>java<END_MOD>.lang.<START_MOD>UnsupportedOperationException<END_MOD>(); }
@org.junit.Test public void testHotsetUpdateableWhenHotsetRequestedWithStatus() { org.ovirt.engine.core.utils.ObjectIdentityChecker oic = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.utils.Jedi.class); oic.AddField(VMStatus.Down, "name"); oic.AddHotsetFields("name"); assertTrue( set requested for hot set fields should be true oic.IsFieldUpdatable(VMStatus.Down, "name", null, true<START_MOD>, false<END_MOD>)); }
<START_MOD>private org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback addNetworkCallback(final boolean addOnProvider) { return new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result1) { org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = result1.getReturnValue(); boolean succeeded = false; if ((retVal != null) && (retVal.getSucceeded())) { succeeded = true; } if (!succeeded) { postSaveAction(null, null, succeeded); } else if (addOnProvider) { postSaveAction(((org.ovirt.engine.core.common.businessentities.network.Network) (retVal.getActionReturnValue())), succeeded); } else { postSaveAction(((org.ovirt.engine.core.compat.Guid) (retVal.getActionReturnValue())), null, succeeded); } } }; }<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.<START_MOD>compat.Guid clusterId = null; if (action.isSetCluster()) { clusterId = getClusterId(action); } org.ovirt.engine.core.<END_MOD>common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), <START_MOD>clusterId<END_MOD>); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(ActionType.ImportVm, params, action); }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { boolean result = true; if ((org.ovirt.engine.core.bll.SetNonOperationalVdsCommand.getVds()) == null) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VDS_INVALID_SERVER_ID); result = false; } return result; }
<START_MOD>@java.lang.Override protected void executeVdsBrokerCommand() { log.info("-- executeIrsBrokerCommand: calling an image action command. parameters:"); log.info("++ spId={}", org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getStoragePoolId()); log.info("++ sdId={}", org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getStorageDomainId()); log.info("++ image group Id={}", org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getImageGroupId()); log.info("++ image Id={}", org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getImageId()); status = executeImageActionVdsBrokerCommand(org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getImageGroupId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getImageId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.proceedProxyReturnValue(); setReturnValue(status); }<END_MOD>
@org.junit.Test public void testCanDoActionDomainInMaintenance() { getDiskStorageDomain().setStatus(StorageDomainStatus.Maintenance); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2); }
<START_MOD>protected void proceedStorageDomainTreatmentByDomainType(final org.ovirt.engine.core.common.businessentities.StorageDomain newMaster, final boolean lockNewMaster) { if ((org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master)) { if (newMaster != null) { newMaster.getStorageStaticData().setLastTimeUsedAsMaster(java.lang.System.currentTimeMillis()); if ((newMaster.getStorageDomainType()) != (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master)) { org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Object>() { @java.lang.Override public java.lang.Object runInTransaction() { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap newMasterMap = newMaster.getStoragePoolIsoMapData(); getCompensationContext().snapshotEntityUpdated(newMaster.getStorageStaticData()); newMaster.setStorageDomainType(StorageDomainType.Master); if (!lockNewMaster) { newMasterMap.setStatus(StorageDomainStatus.Unknown); getCompensationContext().snapshotEntityStatus(newMasterMap); newMaster.setStatus(StorageDomainStatus.Locked); getStoragePoolIsoMapDAO().updateStatus(newMasterMap.getId(), newMasterMap.getStatus()); } updateStorageDomainStaticData(newMaster.getStorageStaticData()); getCompensationContext().snapshotEntityUpdated(getStorageDomain().getStorageStaticData()); getStorageDomain().setStorageDomainType(StorageDomainType.Data); updateStorageDomainStaticData(getStorageDomain().getStorageStaticData()); getCompensationContext().stateChanged(); return null; } }); } else { updateStorageDomainStaticData(newMaster.getStorageStaticData()); } org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.updateStoragePoolMasterDomainVersionInDiffTransaction(); } else { _isLastMaster = true; } } }<END_MOD>
static org.ovirt.engine.core.common.businessentities.StorageServerConnections setUpEntityExpectations(org.ovirt.engine.core.common.businessentities.StorageServerConnections entity, int index) { expect(entity.<START_MOD>geIid<END_MOD>()).andReturn(GUIDS[index].toString()).anyTimes(); expect(entity.<START_MOD>getStorageType<END_MOD>()).andReturn(org.ovirt.engine.api.restapi.resource.BackendStorageDomainServerConnectionsResourceTest.STORAGE_TYPES_MAPPED[index]).anyTimes(); expect(entity.<START_MOD>getConnection<END_MOD>()).andReturn("1.1.1.255").anyTimes(); if (org.ovirt.engine.api.restapi.resource.BackendStorageDomainServerConnectionsResourceTest.STORAGE_TYPES_MAPPED[index].equals(StorageType.ISCSI)) { expect(entity.<START_MOD>getPort<END_MOD>()).andReturn("3260").anyTimes(); } return entity; }
<START_MOD>@java.lang.Override protected void updateStorageDomainDiscardAfterDelete(org.ovirt.engine.core.compat.Version compatibilityVersion) { if ((org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getDiscardAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setDiscardAfterDelete(org.ovirt.engine.core.common.FeatureSupported.discardAfterDeleteSupported(compatibilityVersion)); } }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession populateSession(java.util.Map<java.lang.String, java.lang.Object> innerMap) { org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession geoRepSession = getSession(innerMap); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionDetails> geoRepSessionDetails = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionDetails>(); if (innerMap.containsKey(org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc.GEO_REP_PAIRS)) { for (java.util.Map<java.lang.String, java.lang.Object> sessionPair : ((java.util.Map<java.lang.String, java.lang.Object>[]) (innerMap.get(org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc.GEO_REP_PAIRS)))) { geoRepSessionDetails.add(getSessionDetails(sessionPair, geoRepSession)); } } geoRepSession.setSessionDetails(geoRepSessionDetails); return geoRepSession; }<END_MOD>
private void addDisksDeactivatedMessage(java.util.List<org.ovirt.engine.core.common.action.MoveDiskParameters> moveDiskParamsList) { setActionMessageParameters(); addCanDoActionMessageVariable("diskAliases", org.apache.commons.lang.StringUtils.join(getDisksAliases(moveDiskParamsList),     addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_MOVE_DISKS_MIXED_PLUGGED_STATUS); org.ovirt.engine.core.bll.MoveDisksCommand.getReturnValue().setCanDoAction(false); }
<START_MOD>public boolean isSchedulerOptimizeForSpeed() { return schedulerOptimizeForSpeed; }<END_MOD>
org.ovirt.engine.core.bll.ValidationResult validateNotRemovingUsedNetworkByVms() { java.util.Collection<java.lang.String> removedNetworks = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : removedNetworkAttachments) { removedNetworks.add(existingNetworkRelatedToAttachment(removedAttachment).getName()); } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(host.getId(), removedNetworks); if (vmNames.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, commaSeparated(vmNames)); } }
@java.lang.Override protected void init() { fetchStorageDomainInfo(); setVdsId(org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.getParameters().getVdsId()); <START_MOD>rollback = new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { return null; <END_MOD>}<START_MOD> }; }<END_MOD>
<START_MOD>public long getMinimum() { return privateMinimum; }<END_MOD>
private org.ovirt.engine.core.bll.ValidationResult validateNotRemovingUsedNetworkByVms() { java.util.Collection<java.lang.String> removedNetworks = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : removedNetworkAttachments) { removedNetworks.add(existingNetworkRelatedToAttachment(removedAttachment).getName()); } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(host.getId(), removedNetworks); if (vmNames.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, commaSeparated(vmNames)); } }
<START_MOD>@org.ovirt.engine.ui.common.DefaultStringValue("Include Memory") java.lang.String includeMemory();<END_MOD>
@java.lang.Override public void onResizeEnd(com.google.gwt.user.cellview.client.Column<T, ?> column, com.google.gwt.dom.client.Element headerElement) { super.onResizeEnd(column, headerElement); <START_MOD>java.lang.String tableId = dataProvider.getModel().getId(); saveColumnWidth(tableId, this.getColumnIndex(column), headerElement.getClientWidth()); <END_MOD>table.redraw(); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { neutronAgentPanel.setVisible(<START_MOD>(!((java.lang.Boolean) (<END_MOD>model.<START_MOD>isPluginTypeCustom<END_MOD>(<START_MOD>).getEntity()))<END_MOD>)); }
private void updateActionAvailability() { java.util.List <START_MOD>selectedItems<END_MOD> = getSelectedItems(); getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) <START_MOD>==<END_MOD> <START_MOD>1<END_MOD>)); boolean isAvailable = !(((getSystemTreeSelectedItem()) != null) && ((getSystemTreeSelectedItem().getType()) == (org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemType.Network))); getNewCommand().setIsAvailable(isAvailable); getRemoveCommand().setIsAvailable(isAvailable); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__START); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__GLUSTER_VOLUME); }
<START_MOD>private int getActiveUsersStat() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSystemStatisticsValue(QueryConstants.SYSTEM_STATS_USER_ENTITY, QueryConstants.SYSTEM_STATS_USER_ACTIVE_STATUS); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VMInfoListReturnForXmlRpc getOvaInfo(java.lang.String path) { try { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = vdsServer.getOvaInfo(path); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMInfoListReturnForXmlRpc(xmlRpcReturnValue); } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }<END_MOD>
<START_MOD>private boolean validateSpaceRequirements(org.ovirt.engine.core.compat.Guid imageId, org.ovirt.engine.core.compat.Guid destDomainId) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = getDiskImageById(imageId); org.ovirt.engine.core.common.businessentities.storage_domains destDomain = getStorageDomainById(destDomainId, diskImage.getstorage_pool_id().getValue()); if (!(org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.isBelowThresholds(destDomain))) { addCanDoActionMessage(java.lang.String.format("$%1$s %2$s", "storageName", org.ovirt.engine.core.bll.lsm.LiveMigrateDisksCommand.getStorageDomain().getstorage_name())); return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN); } org.ovirt.engine.core.compat.Guid templateId = diskImage.getit_guid(); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> allImageSnapshots = org.ovirt.engine.core.bll.ImagesHandler.getAllImageSnapshots(imageId, templateId); diskImage.getSnapshots().addAll(allImageSnapshots); boolean isDomainHasSpaceForRequest = org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.hasSpaceForRequest(destDomain, java.lang.Math.round(diskImage.getActualDiskWithSnapshotsSize())); if (!isDomainHasSpaceForRequest) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW); } return true; }<END_MOD>
<START_MOD>protected void getDowntime() { if (((org.ovirt.engine.core.bll.MigrateVmCommand.getVm()) != null) && ((org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = runVdsCommand(VDSCommandType.MigrateStatus, new org.ovirt.engine.core.common.vdscommands.MigrateStatusVDSCommandParameters(getDestinationVdsId(), org.ovirt.engine.core.bll.MigrateVmCommand.getVmId())); if (retVal != null) { actualDowntime = ((java.lang.Integer) (retVal.getReturnValue())); } } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { migrationErrorCode = e.getErrorCode(); } } }<END_MOD>
public void setSelection(java.lang.Boolean value) { if (((selection) == null) && (value == null)) { return; } if (((selection) == null) || (!(selection.equals(value)))) { selection = value; getSelectionChangedEvent().raise(this, EventArgs.<START_MOD>empty<END_MOD>); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("Selection")); } }
public void initMocks(org.ovirt.engine.core.vdsbroker.VmTestPairs vmData, boolean run) { stubDaos(); when(vdsManager.getVdsId()).thenReturn(VmTestPairs.SRC_HOST_ID); when(vdsManager.getClusterId()).thenReturn(VmTestPairs.CLUSTER_ID); when(vdsManager.getCopyVds()).thenReturn(vdsManagerVds); when(vmManager.isColdReboot()).thenReturn(false); when(vmsMonitoring.<START_MOD>getVmManager(any())).thenReturn(vmManager); when(vmsMonitoring.getResourceManager()).thenReturn(resourceManager); when(resourceManager.<END_MOD>getVdsManager(<START_MOD>any(org.ovirt.engine.core.compat.Guid.class)<END_MOD>)).thenReturn(vdsManager); <START_MOD>org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(true); when(vmsMonitoring.getResourceManager().runVdsCommand<END_MOD>(any(<START_MOD>org.ovirt.engine.core.common.vdscommands.VDSCommandType.class), any(org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class))).thenReturn(vdsReturnValue); mockDstHostStatus(VDSStatus.Up); mockVmInDbForDstVms(vmData); vmAnalyzer = spy(new org.ovirt.engine.core.vdsbroker.VmAnalyzer(vmData.dbVm(), vmData.vdsmVm(), vmsMonitoring)); doReturn(auditLogDirector).when(vmAnalyzer).getAuditLogDirector(); doReturn(vmsMonitoring).when(vmAnalyzer)<END_MOD>.getVdsManager(<START_MOD>); if (run) {<END_MOD> vmAnalyzer.analyze(); } }
<START_MOD>java.util.List<org.ovirt.engine.core.compat.Guid> GetVmIdsForVersionUpdate();<END_MOD>
private void stopRebalance() { if ((getSelectedItems()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().confirmStopVolumeRebalanceTitle()); model.setHashName("volume_rebalance_stop"<START_MOD>); model.setHelpTag(model.getHashName(), ""<END_MOD>); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().confirmStopVolumeRebalanceMsg()); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity item : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>cast(getSelectedItems())) { list.add(item.getName()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("onStopRebalance", this); okCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); okCommand.setIsDefault(true); model.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); cancelCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); cancelCommand.setIsCancel(true); model.getCommands().add(cancelCommand); }
private org.ovirt.engine.core.bll.ValidationResult noVmsContainBootableDisks(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { java.util.List<java.lang.String> vmsWithBoot = new java.util.ArrayList(vms.size()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { org.ovirt.engine.core.common.businessentities.storage.Disk bootDisk = org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskDao().getVmBootActiveDisk(vm.getId()); if (bootDisk != null) { vmsWithBoot.add(vm.getName()); } } if (!(vmsWithBoot.isEmpty())) { <START_MOD>addValidateMessageVariable<END_MOD>("VmsName", org.apache.commons.lang.StringUtils.join(vmsWithBoot.toArray(),     return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VMS_BOOT_IN_USE); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, java.lang.Boolean value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb<START_MOD>, java.lang.String id<END_MOD>) { java.lang.Object key = context.getKey(); java.lang.Boolean viewData = getViewData(key); if ((viewData != null) && (viewData.equals(value))) { clearViewData(key); viewData = null; } if ((value != null) && (viewData != null ? viewData : value)) { sb.append(org.ovirt.engine.ui.common.widget.table.cell.RadioboxCell.<START_MOD>templates.input(id, "checked")<END_MOD>); } else { sb.append(org.ovirt.engine.ui.common.widget.table.cell.RadioboxCell.<START_MOD>templates.input(id, "")); } }<END_MOD>
@java.lang.Override public void processOnVmPoweringUp(org.ovirt.engine.core.compat.Guid vmid) { org.ovirt.engine.core.common.businessentities.IVdsAsyncCommand command = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().GetAsyncCommandForVm(vmid); if (command != null) { command.onPowerringUp(); } }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); getNewCommand().setIsExecutionAllowed(true); getAttachCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk != null) && (isSingleDiskSelected())) && (!(isDiskLocked(disk)))) && (((isVmDown()) || (!(disk.getPlugged()))) || (isExtendImageSizeEnabled())))); getRemoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isRemoveCommandAvailable()))); getSparsifyCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isSparsifyCommandAvailable()))); getMoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && ((isMoveCommandAvailable()) || (isLiveMoveCommandAvailable())))); updateScanAlignmentCommandAvailability(); getPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(true)); getUnPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(false)); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems()) != null ? ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getItems())) : null), ((getSelectedItems()) != null ? getSelectedItems() : null), getChangeQuotaCommand()); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Activate/Deactivate while VM is running, is only supported for Clusters of version 3.1 and above.") java.lang.String HOT_UNPLUG_CPU_IS_NOT_SUPPORTED();<END_MOD>
public <START_MOD>org.ovirt.engine.core.common.utils.HostUpgradeManagerResult<END_MOD> isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { return create(host.getVdsType()).isUpdateAvailable(host); }
<START_MOD>public java.util.List<java.lang.String> getAvailableKeys() { java.util.List<java.lang.String> list = ((allKeys) == null) ? new java.util.LinkedList<java.lang.String>() : new java.util.LinkedList<java.lang.String>(allKeys); list.removeAll(getUsedKeys()); if ((list.size()) > 0) { list.add(0, selectKey); } else { list.add(noKeys); } return list; }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllActiveForStorageDomain(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeReadList("GetActiveVmsByStorageDomainId", org.ovirt.engine.core.dao.<START_MOD>VmDAOImpl<END_MOD>.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("storage_domain_id", id)); }
<START_MOD>public boolean getIsHostTabValid() { return isHostTabValid; }<END_MOD>
<START_MOD>protected<END_MOD> org.ovirt.engine.core.common.vdscommands.GetVmsFromExternalProviderParameters buildGetRemoteVmsInfoParameters() { return new org.ovirt.engine.core.common.vdscommands.GetVmsFromExternalProviderParameters(getProxyHostId(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getUrl(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getUsername(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getPassword(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getOriginType()<START_MOD>, org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getVmsNames()<END_MOD>); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc list() { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.getVMList").withOptionalParameterAsList("vmList", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(new java.lang.String[]{ }))).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withResponseKey("vmList").withResponseType(java.lang.Object[].class).withSubTypeClazz(new java.util.HashMap<java.lang.String, java.lang.Object>().getClass()).withSubtypeKey("vmId"); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc(response); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( remove more than one brick from a Replicate volume at a time java.lang.String cannotRemoveBricksReplicateVolume();
public org.ovirt.engine.core.compat.Guid getTaskID() { return getCreationInfo().<START_MOD>getVdsmTaskId<END_MOD>(); }
private void injectHeaders(org.apache.http.client.methods.HttpUriRequest request) {<START_MOD> for (java.util.Map.Entry<java.lang.String, java.lang.String> header : headers.entrySet()) { request.setHeader(header.getKey(), header.getValue()); }<END_MOD> java.util.List<org.apache.http.Header> updated = excludeNullHeaders(request.getAllHeaders()); if ((updated != null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(new org.apache.http.Header[updated.size()])); } for (org.apache.http.NameValuePair nameValuePair : org.apache.http.client.utils.URLEncodedUtils.parse(request.getURI(), HTTP.UTF_8)) { if (nameValuePair.getName().equalsIgnoreCase("all_content")) { request.addHeader("All-Content", nameValuePair.getValue()); } } request.addHeader("Version", "4"); request.addHeader("Content-type", "application/xml"); request.addHeader("User-Agent", "JavaSDK"); request.addHeader("Accept", "application/xml"); request.addHeader("Authorization", (   + (getAccessToken()))); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( of VMs java.lang.String numberOfVmsCluster();
<START_MOD>private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface getBaseInterface(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlan) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> hostNics = getDbFacade().getInterfaceDao().getAllInterfacesForVds(vlan.getVdsId()); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface hostNic : hostNics) { if (org.ovirt.engine.core.utils.NetworkUtils.interfaceBasedOn(vlan, hostNic.getName())) { return hostNic; } } return null; }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult networkNameNotUsed() { for (org.ovirt.engine.core.common.businessentities.network.Network otherNetwork : getNetworks()) { if ((otherNetwork.getName().equalsIgnoreCase(network.getName())) && (!(otherNetwork.getId().equals(network.getId())))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_NAME_IN_USE); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
<START_MOD>private<END_MOD> boolean Validate() { return true; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.NetworkQoS> networkQoSes = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.NetworkQoS>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue())); org.ovirt.engine.core.common.businessentities.network.NetworkQoS none = new org.ovirt.engine.core.common.businessentities.network.NetworkQoS(); none.setName(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().unlimitedQoSTitle()); none.setId(Guid.Empty); networkQoSes.add(0, none); getNetworkQoS().setItems(networkQoSes); setSelectedNetworkQoSId(<START_MOD>defaultQosId<END_MOD>); }
public static void prepareCommandForMonitoring(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.action.VdcActionType actionType, <START_MOD>org.ovirt.engine.core.common.action.VdcActionType parentActionType, <END_MOD>boolean runAsInternal, boolean hasCorrelationId) { org.ovirt.engine.core.bll.job.ExecutionContext context = command.getExecutionContext(); if (context == null) { context = new org.ovirt.engine.core.bll.job.ExecutionContext(); } try { boolean isMonitored = org.ovirt.engine.core.bll.job.ExecutionHandler.shouldMonitorCommand(actionType, runAsInternal, hasCorrelationId<START_MOD>, parentActionType<END_MOD>); if (isMonitored || (context.isJobRequired())) { org.ovirt.engine.core.common.job.Job job = org.ovirt.engine.core.bll.job.ExecutionHandler.createJob(actionType, command); org.ovirt.engine.core.bll.job.JobRepositoryFactory.getJobRepository().saveJob(job); context.setExecutionMethod(ExecutionMethod.AsJob); context.setJob(job); command.setExecutionContext(context); command.setJobId(job.getId()); context.setMonitored(true); } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.job.ExecutionHandler.log.errorFormat( to prepare command of type {0} for monitoring due to error {1} actionType.name(), org.apache.commons.lang.exception.ExceptionUtils.getMessage(e), e); } }
@org.junit.Test public void testLogoffAsync_ignored_failure() { java.lang.Object model = new java.lang.Object(); when(mockAsyncQuery.getModel()).thenReturn(model); org.ovirt.engine.core.common.users.VdcUser testUser = new org.ovirt.engine.core.common.users.VdcUser(); testUser.setUserName("testUser"); testUser.setPassword("testpassword"); <START_MOD>frontend.logoffAsync(testUser, mockAsyncQuery); verify(mockService).logOff(eq(testUser), callbackAction.capture()); com.google.gwt.user.client.rpc.StatusCodeException exception = new com.google.gwt.user.client.rpc.StatusCodeException(0,   status code callbackAction.getValue().onFailure(exception); verify(mockFrontendFailureEvent, never()).raise(eq(<END_MOD>org.ovirt.engine.ui.frontend.Frontend.<START_MOD>class), ((org.ovirt.engine.ui.uicompat.EventArgs) (any()))); verify(mockEventsHandler<END_MOD>, never()).<START_MOD>runQueryFailed(null); verify(mockAsyncCallback<END_MOD>, never()).<START_MOD>onSuccess(model, <END_MOD>null); }
@java.lang.Override public java.lang.String render(java.util.ArrayList<com.google.gwt.user.client.ui.ValueLabel<V>> widgets) { java.lang.<START_MOD>StringBuilder<END_MOD> formattedStr = <START_MOD>new java.lang.StringBuilder(<END_MOD>""<START_MOD>)<END_MOD>; for (int i = 0; i < (widgets.size()); i++) { formattedStr<START_MOD>.append<END_MOD>(widgets.get(i).getElement().getInnerHTML())<START_MOD>.append(<END_MOD>   if (i < ((widgets.size()) - 1)) { formattedStr<START_MOD>.append(<END_MOD>   } } return formattedStr<START_MOD>.toString()<END_MOD>; }
<START_MOD>@org.junit.Test public void testDiskAttachedToAnyVMFails() { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(); when(vmDao.getVmsListForDisk(org.mockito.Matchers.any(org.ovirt.engine.core.compat.Guid.class), anyBoolean())).thenReturn(java.util.Collections.singletonList(vm)); assertThat(validator.isDiskAttachedToAnyVm(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_ATTACHED_TO_VMS)); }<END_MOD>
<START_MOD>protected void setDefaultSwitchTypeIfNeeded(org.ovirt.engine.core.common.businessentities.Cluster cluster) { if ((cluster.getSwitchType()) == null) { org.ovirt.engine.core.compat.Version ovsSupportedFromVersion = new org.ovirt.engine.core.compat.Version(4, 0); boolean ovsSupported = cluster.getCompatibilityVersion().greaterOrEquals(ovsSupportedFromVersion); cluster.setSwitchType((ovsSupported ? org.ovirt.engine.core.common.SwitchType.OVS : org.ovirt.engine.core.common.SwitchType.LEGACY)); } }<END_MOD>
protected org.ovirt.engine.core.common.businessentities.LdapUser populateUserData(org.ovirt.engine.core.common.businessentities.LdapUser user, java.lang.String domain) { if (user == null) { return null; } user.setDomainControler(domain); java.util.HashMap<java.lang.String, org.ovirt.engine.core.common.businessentities.LdapGroup> groupsDict = new java.util.HashMap<java.lang.String, org.ovirt.engine.core.common.businessentities.LdapGroup>(); org.ovirt.engine.core.bll.adbroker.GroupsDNQueryGenerator generator = new org.ovirt.engine.core.bll.adbroker.GroupsDNQueryGenerator(); proceedGroupsSearchResult(<START_MOD>null, <END_MOD>user.getMemberof(), groupsDict, generator); user.setGroups(groupsDict); if (((user.getUserName()) != null) && (!(user.getUserName().contains("@")))) { user.setUserName((((user.getUserName()) + "@") + (user.getDomainControler()))); } <START_MOD>if (user != null) { if (generator.getHasValues()) { java.util.List<org.ovirt.engine.core.bll.adbroker.LdapQueryData> partialQueries = generator.getLdapQueriesData(); for (org.ovirt.engine.core.bll.adbroker.LdapQueryData currQueryData : partialQueries) { populateGroup(currQueryData, getAuthenticationDomain(), groupsDict, getLoginName(), getPassword()); } } } user.setGroups(groupsDict); <END_MOD>return user; }
<START_MOD>@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("refreshLightWeightData") public void refreshLightWeightData() { org.ovirt.engine.core.bll.gluster.GlusterManager.log.info("Refreshing Gluster Data [lightweight]"); java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = org.ovirt.engine.core.bll.gluster.GlusterManager.clusterDao.getAll(); for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters) { org.ovirt.engine.core.bll.gluster.GlusterManager.log.debugFormat("Refreshing Gluter Data for cluster {0}", cluster.getname()); refreshClusterData(cluster); } }<END_MOD>
@org.junit.Test public void testValidateNetworkExclusiveOnNicsVmNetworkMustBeSoleAttachedInterface2() throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface(<START_MOD>false, java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>Arrays<END_MOD>.<START_MOD>asList(NetworkType<END_MOD>.<START_MOD>VM, NetworkType<END_MOD>.<START_MOD>NON_VM<END_MOD>), vmNetwork1, nonVmNetwork1); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> getAll() { <START_MOD>return<END_MOD> <START_MOD>getCallsHandler().executeReadList("GetAllFromVmJobs",<END_MOD> org.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>dao.VmJobDaoImpl.VmJobRowMapper.instance, getCustomMapSqlParameterSource<END_MOD>(<START_MOD>)<END_MOD>); }
private void sendTicket() { final org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser(); final boolean sent = runVdsCommand(VDSCommandType.SetVmTicket, new org.ovirt.engine.core.common.vdscommands.SetVmTicketVDSCommandParameters(org.ovirt.engine.core.bll.SetVmTicketCommand.getVdsId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVmId(), mTicket, mValidTime, user.getLoginName(), user.getId()<START_MOD>, org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getConsoleDisconnectAction()<END_MOD>)).getSucceeded(); if (sent) { org.ovirt.engine.core.bll.SetVmTicketCommand.setActionReturnValue(mTicket); } org.ovirt.engine.core.bll.SetVmTicketCommand.setSucceeded(sent); }
public void setSupportedEngines(java.lang.String value) { mVdsDynamic.setSupportedEngines(value); }
@org.junit.Test public void diskImagesHasDerivedDisksOnStorageDomain() { org.ovirt.engine.core.compat.Guid storageDomainId = org.ovirt.engine.core.compat.Guid.Empty; disk1.setVmEntityType(VmEntityType.TEMPLATE); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> storageDomainIds = new java.util.ArrayList<>(); storageDomainIds.add(storageDomainId); disk2.setStorageIds(storageDomainIds); when(diskImageDao.getAllSnapshotsForParent(disk1.getImageId())).thenReturn(java.util.Arrays.asList(disk2)); assertThat(validator.diskImagesHaveNoDerivedDisks(storageDomainId), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DETECTED_DERIVED_DISKS)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (sender == (getSelectAll())) { if ((getItems()) == null) { return; } boolean selectAll = getSelectAll().getEntity(); for (org.ovirt.engine.ui.uicommonweb.models.EntityModel<START_MOD><org.ovirt.engine.core.common.businessentities.aaa.DbUser> item : getItems()<END_MOD>) <START_MOD>{ <END_MOD>item.setIsSelected(selectAll); } } }
<START_MOD>public void setNewPassword2(java.lang.String newPassword2) { this.newPassword2 = newPassword2; }<END_MOD>
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel object) { driver.edit(object); org.ovirt.engine.ui.uicommonweb.models.EntityModel version = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (object.getVersion().getSelectedItem())); <START_MOD>versionListEditor.asEditor<END_MOD>().setValue(version); pathExampleLabel.setVisible(object.getPath().getIsChangable()); object.getMountOptions().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (args.propertyName.equals("Title")) { mountOptionsEditor.setTitle(object.getMountOptions().getTitle()); } } }); <START_MOD>}<END_MOD>
<START_MOD>private void copyUsageData(org.ovirt.engine.core.common.businessentities.Quota quota, org.ovirt.engine.core.common.businessentities.Quota quotaExternal) { if ((quota.getGlobalQuotaStorage()) != null) { quotaExternal.setGlobalQuotaStorage(copyQuotaStorageUsage(quota.getGlobalQuotaStorage())); } if ((quota.getGlobalQuotaVdsGroup()) != null) { quotaExternal.setGlobalQuotaVdsGroup(copyQuotaVdsGroupUsage(quota.getGlobalQuotaVdsGroup())); } if ((quota.getQuotaStorages()) != null) { quotaExternal.setQuotaStorages(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.QuotaStorage>()); for (org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage : quota.getQuotaStorages()) { quotaExternal.getQuotaStorages().add(copyQuotaStorageUsage(quotaStorage)); } } if ((quota.getQuotaVdsGroups()) != null) { quotaExternal.setQuotaVdsGroups(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.QuotaVdsGroup>()); for (org.ovirt.engine.core.common.businessentities.QuotaVdsGroup quotaVdsGroup : quota.getQuotaVdsGroups()) { quotaExternal.getQuotaVdsGroups().add(copyQuotaVdsGroupUsage(quotaVdsGroup)); } } }<END_MOD>
<START_MOD>public static void getCompatibleCPUList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.compat.Version version) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.ServerCpu>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.ServerCpu>(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllCompatibleServerCpuList, new org.ovirt.engine.core.common.queries.GetAllCompatibleServerCpuListParameters(clusterId, version), aQuery); }<END_MOD>
<START_MOD>@java.lang.SuppressWarnings("unchecked") private static java.util.Map<java.lang.String, java.lang.Object> deserializeData(java.lang.String payload) { return org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserialize(payload, java.util.HashMap.class); }<END_MOD>
<START_MOD>@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getJobMessageProperties() { if ((jobProperties) == null) { jobProperties = super.getJobMessageProperties(); org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSnapshotDao().get(org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getParameters().getDstSnapshotId()); if (snapshot != null) { jobProperties.put(VdcObjectType.SnapshotName.name().toLowerCase(), snapshot.getDescription()); } } return jobProperties; }<END_MOD>
private java.util.List<org.ovirt.engine.core.common.businessentities.UserSession> searchSessions() { return genericSearch(org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getEngineSessionDao(), false).stream().map(<START_MOD>this::injectSessionInfo).map(<END_MOD>UserSession::new).collect(java.util.stream.Collectors.toList()); }
@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksList = getParameters().getBricks(); if ((bricksList != null) && ((bricksList.size()) > 0)) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { addGlusterVolumeBricks(bricksList, getParameters().getReplicaCount(), getParameters().getStripeCount(), getParameters().isForce()); return null; } }); } <START_MOD>postAddBrickHandleGeoRepCase(bricksList); }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.common.widget.table.column.Template("<div style=\"{0}\" class=\"{1}\">{2}</div>") com.google.gwt.safehtml.shared.SafeHtml imageContainerWithStyleClass(java.lang.String style, java.lang.String styleClass, com.google.gwt.safehtml.shared.SafeHtml imageHtml);<END_MOD>
<START_MOD>@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.validator.StorageConnectionValidator storageConnectionValidator = createStorageConnectionValidator(); org.ovirt.engine.core.common.businessentities.LUN_storage_server_connection_map connectionMapRecord = new org.ovirt.engine.core.common.businessentities.LUN_storage_server_connection_map(((org.ovirt.engine.core.common.AttachDetachStorageConnectionParameters.DUMMY_LUN_ID_PREFIX) + (org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getStorageDomain().getId())), org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getParameters().getStorageConnectionId()); if ((((!(validate(storageConnectionValidator.isConnectionExists()))) || (!(validate(storageConnectionValidator.isDomainOfConnectionExistsAndNonActive(org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getStorageDomain()))))) || (!(validate(storageConnectionValidator.isScsiConnectionAndDomain(org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getStorageDomain()))))) || (!(validate(storageConnectionValidator.isConnectionForDomainAlreadyExists(connectionMapRecord))))) { return false; } return true; }<END_MOD>
<START_MOD>public java.lang.String toStringForLogging() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); if ((correlationId) != null) { sb.append("Corrolation ID: "); sb.append(correlationId); sb.append(", "); } if ((jobId) != null) { sb.append("Job ID: "); sb.append(jobId.toString()); sb.append(", "); } if ((callStack) != null) { sb.append("Call Stack: "); sb.append(callStack); sb.append(", "); } if ((customEventId) != (-1)) { sb.append("Custom Event ID: "); sb.append(customEventId); sb.append(", "); } if ((message) != null) { sb.append("Message: "); sb.append(message); } return sb.toString(); }<END_MOD>
@java.lang.Override protected void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?<START_MOD>, ?, ?<END_MOD>> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?<START_MOD>, ?, ?<END_MOD>> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params) { assert op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel; assert op2 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel; org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkToAttach = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel) (op1)); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel targetNic = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (op2)); if (networkToAttach.isAttached()) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.DETACH_NETWORK.getCommand(op1, null, allNics).execute(); } org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanBridge = networkToAttach.attach(targetNic, true); if (vlanBridge != null) { java.util.Iterator<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> i = allNics.iterator(); while (i.hasNext()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = i.next(); if (vlanBridge.getVlanId().equals(nic.getVlanId())) { if (vlanBridge.getBaseInterface().equals(nic.getBaseInterface())) { vlanBridge.setName(nic.getName()); } i.remove(); break; } } allNics.add(vlanBridge); } }
public boolean isRebootCommandExecutionAllowed(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { if ((vms.isEmpty()) || (!(org.ovirt.engine.core.common.VdcActionUtils.canExecutePartially(vms, VM<START_MOD>.VmWithStatusForExclusive<END_MOD>.class, VdcActionType.RebootVm)))) { return false; } for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { boolean guestAgentPresent = !(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(vm.getIp())); boolean acpiEnabled = java.lang.Boolean.TRUE.equals(vm.getAcpiEnable()); if (!(guestAgentPresent || acpiEnabled)) { return false; } } return true; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskSnapshotForVmSnapshot(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid vmSnapshotId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_snapshot_id", vmSnapshotId).addValue("image_group_id", diskId); return getCallsHandler().executeRead("GetDiskSnapshotForVmSnapshot", org.ovirt.engine.core.dao.<START_MOD>DiskImageDAOImpl<END_MOD>.DiskImageRowMapper.instance, parameterSource); }
<START_MOD>public void setIsHostTabValid(boolean value) { if ((isHostTabValid) != value) { isHostTabValid = value; OnPropertyChanged(new org.ovirt.engine.core.compat.PropertyChangedEventArgs("IsHostTabValid")); } }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultMessage("The selected snapshot will be deactivated.\n Do you want to continue?") java.lang.String confirmVolumeSnapshotDeactivate();<END_MOD>
@org.junit.Test public void <START_MOD>validateFailsOnNullHookId<END_MOD>() { cmd = spy(new org.ovirt.engine.core.bll.gluster.RemoveGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(null))); setUpMocksForRemove(); assertFalse(cmd.<START_MOD>validate<END_MOD>()); assertTrue(cmd.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().contains(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED.toString())); }
private java.lang.String findFreeVfForVnic(java.util.List<org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig> vfsConfigs, java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.String>> nicToUsedVfs, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> fetchedNics, org.ovirt.engine.core.common.businessentities.network.Network vnicNetwork<START_MOD>, org.ovirt.engine.core.compat.Guid vmId, boolean shouldCheckDirectlyAttachedVmDevices<END_MOD>) { for (org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig vfsConfig : vfsConfigs) { if (((vfsConfig.getNumOfVfs()) != 0) && (isNetworkInVfsConfig(vnicNetwork, vfsConfig))) { java.lang.String freeVf = getFreeVf(vfsConfig, nicToUsedVfs, fetchedNics<START_MOD>, vmId, shouldCheckDirectlyAttachedVmDevices<END_MOD>); if (freeVf != null) { return freeVf; } } } return null; }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.Disk object) { setEnumTitle(object.getVmEntityType()); return object.getVmEntityType()<START_MOD>.isVmType<END_MOD>() ? org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.resources.vmsImage() : object.getVmEntityType()<START_MOD>.isTemplateType<END_MOD>() ? org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.resources.templatesImage() : null; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>) (returnValue)); allNetworks = networks; <START_MOD>managentNetwork = org.ovirt.engine.ui.uicommonweb.Linq.findManagentNetwork(allNetworks); <END_MOD>initNetworkModels(); initDcNetworkParams(); queryInterfaces(); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalActionWithTasksContext(VdcActionType.UpdateVmVersion, new org.ovirt.engine.core.common.action.UpdateVmVersionParameters(org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVmId()), org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getLock()); if ((!(result.getSucceeded())) && (!(result.<START_MOD>getValidate<END_MOD>()))) { log.warn( update VM '{}' ({}) version from it template, continue with restoring stateless snapshot. org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVmId()); org.ovirt.engine.core.bll.RestoreStatelessVmCommand.setSucceeded(restoreInitialState()); } else { setSucceeded(result.getSucceeded()); } }
public void guide() { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newClusterGuideMeTitle()); model.setHelpTag(HelpTag.new_cluster___guide_me); model.setHashName("new_cluster_-_guide_me"); if ((getGuideContext()) == null) { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.getSelectedItem(); setGuideContext(cluster.getId()); } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.businessentities.Cluster><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org.ovirt.engine.core.common.businessentities.Cluster<END_MOD> returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.<START_MOD>ClusterGuideModel model<END_MOD> = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel<START_MOD>) (<END_MOD>getWindow())); model.setEntity(returnValue); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", <START_MOD>org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.this<END_MOD>); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().configureLaterTitle()); tempVar.setIsDefault(true); tempVar.setIsCancel(true); model.getCommands().add(tempVar); } }), ((org.ovirt.engine.core.compat.Guid) (getGuideContext()))); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( in fetching the brick details, please try again. java.lang.String errorInFetchingBrickAdvancedDetails();
@org.junit.Test public void canDoActionSucceedsOnDiskDomainCheckWhenStorageGuidInParamsMatches() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId); mockVmWithDisk(storageId); mockStorageDomain(storageId); mockStoragePoolIsoMap(); <START_MOD>mockMaxPciSlots(); <END_MOD>runAndAssertCanDoActionSuccess(); }
<START_MOD>public void PostOnSetupNetwork() { final org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel) (getWindow())); org.ovirt.engine.core.common.action.SetupNetworksParameters params = new org.ovirt.engine.core.common.action.SetupNetworksParameters(); params.setInterfaces(model.getAllNics()); params.setCheckConnectivity(((java.lang.Boolean) (model.getCheckConnectivity().getEntity()))); params.setConectivityTimeout(((java.lang.Integer) (model.getConnectivityTimeout().getEntity()))); params.setVdsId(getEntity().getId()); org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback callback = new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void Executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = result.getReturnValue(); if ((returnValueBase != null) && (returnValueBase.getSucceeded())) { org.ovirt.engine.ui.uicommonweb.models.EntityModel commitChanges = model.getCommitChanges(); if (((java.lang.Boolean) (commitChanges.getEntity()))) { SaveNetworkConfig(getEntity().getId(), org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel.this); } else { model.StopProgress(); Cancel(); Search(); } } else { model.StopProgress(); } } }; setcurrentModel(model); model.StartProgress(null); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.SetupNetworks, params, callback); }<END_MOD>
<START_MOD>public void setPmSecure(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> value) { secure = value; }<END_MOD>
<START_MOD>public static void initBalloonDisabledByDefaultMatrix() { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(); callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.balloonDisabledByDefaultMatrix = ((java.util.Map<java.lang.Integer, java.util.Map<org.ovirt.engine.core.compat.Version, java.lang.Boolean>>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.OsRepository, new org.ovirt.engine.core.common.queries.OsQueryParameters(org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetBalloonDisabledByDefaultMatrix), callback); }<END_MOD>
<START_MOD>java.lang.Boolean isDuplicateMacAddressesAllowed();<END_MOD>
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("(Mega-bits per second)") java.lang.String inMegabitsNetworkQoSPopup();<END_MOD>
public void getDefaultSpmPriority(<START_MOD>org.ovirt.engine.ui.frontend.<END_MOD>AsyncQuery<java.lang.Integer> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter(0); aQuery.<START_MOD>getDel()<END_MOD>.onSuccess(5); }
<START_MOD>public org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.String> getSnapshot() { return snapshotDetail; }<END_MOD>
public boolean isDone() { if ((map) == null) { return false; } return map.isDone(); }
public void newEntity() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.pools.PoolModel model = new org.ovirt.engine.ui.uicommonweb.models.pools.PoolModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewPoolModelBehavior()); model.setIsNew(true); model.setCustomPropertiesKeysList(getCustomPropertiesKeysList()); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newPoolTitle()); model.setHashName("new_pool");<START_MOD> model.setHelpTag(model.getHashName(),   > New Pool<END_MOD> model.getVmType().setSelectedItem(VmType.Desktop); model.initialize(getSystemTreeSelectedItem()); org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand switchModeCommand = new org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand(); switchModeCommand.init(model); model.getCommands().add(switchModeCommand); org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSave", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); command.setIsDefault(true); model.getCommands().add(command); command = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); command.setIsCancel(true); model.getCommands().add(command); }
protected void addVmWatchdog() { org.ovirt.engine.core.common.businessentities.VmWatchdog vmWatchdog = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getWatchdog(); if (vmWatchdog != null) { org.ovirt.engine.core.common.action.WatchdogParameters parameters = new org.ovirt.engine.core.common.action.WatchdogParameters(); parameters.setId(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmId()); parameters.setAction(vmWatchdog.getAction()); parameters.setModel(vmWatchdog.getModel()); <START_MOD>runInternalAction(VdcActionType.AddWatchdog, parameters, <END_MOD>org.ovirt.engine.core.bll.AddVmCommand.<START_MOD>cloneOnlyEngineContext<END_MOD>()); } }
private void activeDetailModelChanging(org.ovirt.engine.ui.uicommonweb.models.<START_MOD>HasEntity<E><END_MOD> newValue, org.ovirt.engine.ui.uicommonweb.models.<START_MOD>HasEntity<E><END_MOD> oldValue) { if (oldValue != null) { oldValue.setEntity(null); if (oldValue instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (oldValue)).stopRefresh(); } } if (newValue != null) { newValue.setEntity(provideDetailModelEntity(<START_MOD>org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.<END_MOD>getSelectedItem())); } }
<START_MOD>public boolean isRunning() { return running; }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForEntity(org.ovirt.engine.core.compat.Guid id, long engineSessionSeqId, boolean isFiltered, boolean allUsersWithPermission, int appMode) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id).addValue("engine_session_seq_id", engineSessionSeqId).addValue("is_filtered", isFiltered).addValue("app_mode", appMode); java.lang.String functionName = "GetPermissionsByEntityId"; if (allUsersWithPermission) { functionName = "GetAllUsersWithPermissionsOnEntityByEntityId"; } return getCallsHandler().executeReadList(functionName, org.ovirt.engine.core.dao.<START_MOD>PermissionDAOImpl<END_MOD>.PermissionRowMapper.instance, parameterSource); }
<START_MOD>private void initOsDefaultIconIds() { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(); callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { osIdToDefaultIconIdMap = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVmIcons, org.ovirt.engine.core.common.queries.GetVmIconsParameters.getDefaultIconsParameters(), callback); }<END_MOD>
<START_MOD>@org.junit.Test public void testAddIncompleteParameters() throws java.lang.Exception { org.ovirt.engine.api.model.Cluster model = new org.ovirt.engine.api.model.Cluster(); model.setName(NAMES[0]); setUriInfo(setUpBasicUriExpectations()); control.replay(); try { collection.add(model); fail("expected WebApplicationException on incomplete parameters"); } catch (javax.ws.rs.WebApplicationException wae) { verifyIncompleteException(wae, "Cluster", "add", "dataCenter.name|id"); } }<END_MOD>
private java.util.ArrayList<java.lang.String> getLunIds(org.ovirt.engine.api.model.<START_MOD>HostStorage<END_MOD> storage, org.ovirt.engine.core.common.businessentities.storage.StorageType storageType, org.ovirt.engine.core.compat.Guid hostId) { java.util.List<org.ovirt.engine.api.model.LogicalUnit> logicalUnits = new java.util.ArrayList<org.ovirt.engine.api.model.LogicalUnit>(); if (storage.isSetLogicalUnits()) { logicalUnits = storage.getLogicalUnits()<START_MOD>.getLogicalUnits()<END_MOD>; } else if ((storage.isSetVolumeGroup()) && (storage.getVolumeGroup().isSetLogicalUnits())) { logicalUnits = storage.getVolumeGroup().getLogicalUnits()<START_MOD>.getLogicalUnits()<END_MOD>; } java.util.ArrayList<java.lang.String> lunIds = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.api.model.LogicalUnit unit : logicalUnits) { validateParameters(unit, 4, "id"); if ((storageType == (org.ovirt.engine.core.common.businessentities.storage.StorageType.ISCSI)) && (!(isConnectionAssumed(unit)))) { connectStorageToHost(hostId, storageType, unit); } lunIds.add(unit.getId()); } refreshHostStorage(hostId); return !(lunIds.isEmpty()) ? lunIds : null; }
<START_MOD>@org.junit.Test public void compositeInComposite_fromBackendToFrontend() { org.ovirt.engine.ui.uicommonweb.builders.CompositeBuilder<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel> composite1 = new org.ovirt.engine.ui.uicommonweb.builders.CompositeBuilder<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel>(new org.ovirt.engine.ui.uicommonweb.builders.Property1Builder()); org.ovirt.engine.ui.uicommonweb.builders.CompositeBuilder<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel> composite2 = new org.ovirt.engine.ui.uicommonweb.builders.CompositeBuilder<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel>(composite1); new org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel>(composite2).buildBackendFromFrontend(frontendModel, backendModel); assertThat(backendModel, is(equalTo(new org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel(org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutorTest.fe1, org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutorTest.be2)))); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String toString() { return ((((("Event [storagePoolId=" + (storagePoolId)) + ", domainId=") + (domainId)) + ", eventType=") + (eventType)) + "]"; }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.GLUSTER_HOOK_ADDED : errorType; }<END_MOD>
private void revertChanges() { if ((originalNetParams) != null) { setIpv4BootProtocol(originalNetParams.<START_MOD>getIpv4BootProtocol<END_MOD>()); getIpv4Address().setEntity(originalNetParams.<START_MOD>getIpv4Address<END_MOD>()); getIpv4Subnet().setEntity(originalNetParams.<START_MOD>getIpv4Subnet<END_MOD>()); getIpv4Gateway().setEntity(originalNetParams.<START_MOD>getIpv4Gateway()); setIpv6BootProtocol(originalNetParams.getIpv6BootProtocol()); getIpv6Address().setEntity(originalNetParams.getIpv6Address()); getIpv6Prefix().setEntity(originalNetParams.getIpv6Prefix()); getIpv6Gateway().setEntity(originalNetParams.getIpv6Gateway<END_MOD>()); getQosOverridden().setEntity(originalNetParams.isQosOverridden()); getQosModel().init(originalNetParams.getQos()); getCustomPropertiesModel().deserialize(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueModel.convertProperties(originalNetParams.getCustomProperties())); } }
public void setFallbackProtocol() { final org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = this.vds.getStaticData(); vdsStatic.setProtocol(VdsProtocol.XML); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() <START_MOD>-><END_MOD> { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsStaticDao().update(vdsStatic); return null; }); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Low") java.lang.String lowTitle();
private void dontSendTicket() { final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.SetVmTicketCommand.getVm(); final org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser(); org.ovirt.engine.core.bll.SetVmTicketCommand.log.warn( give console of virtual machine '{}' to user '{}', it has probably been taken by another user. vm.getId(), user.getId()); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_IN_USE_BY_OTHER_USER); org.ovirt.engine.core.bll.SetVmTicketCommand.setSucceeded(false); }
private java.lang.String nullToEmptyString(java.lang.Object obj) { return toStringNullToDefault(obj, ""); }
<START_MOD>private void addMigratedVmsNotUpYet() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().getAllRunningForVds(getVdsId()); for (org.ovirt.engine.core.common.businessentities.VM incomingVm : vmList) { if ((incomingVm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingTo)) { vmList.add(incomingVm); } } }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The ${type} name is already in use. please choose a unique name and try again.") java.lang.String ACTION_TYPE_FAILED_NAME_ALREADY_USED();<END_MOD>
<START_MOD>public org.ovirt.engine.core.compat.Guid getDiskOperatorUserId() { return diskOperatorUserId; }<END_MOD>
<START_MOD>@java.lang.Override public void init(java.lang.String title, java.lang.String width, java.lang.String height, boolean resizeEnabled) { titleLabel.setText(title); asWidget().setWidth(width); asWidget().setHeight(height); asWidget().enableResizeSupport(resizeEnabled); }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult validateCinderDisksAlreadyRegistered() { return validate(new java.util.concurrent.Callable<org.ovirt.engine.core.bll.ValidationResult>() { @java.lang.Override public org.ovirt.engine.core.bll.ValidationResult call() { for (org.ovirt.engine.core.common.businessentities.storage.CinderDisk disk : cinderDisks) { org.ovirt.engine.core.common.businessentities.storage.Disk diskFromDB = getDiskDao().get(disk.getId()); if (diskFromDB != null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.CINDER_DISK_ALREADY_REGISTERED, java.lang.String.format( %s diskFromDB.getDiskAlias())); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; } }); }
private org.springframework.ldap.core.support.LdapContextSource getContextSource(java.lang.String domain, <START_MOD>org.ovirt.engine.core.ldap.LdapProviderType ldapProviderType, <END_MOD>java.lang.String username, java.lang.String password, java.lang.String ldapServer) { org.springframework.ldap.core.support.LdapContextSource context = new org.springframework.ldap.core.support.LdapContextSource(); java.lang.String ldapBaseDn = org.ovirt.engine.core.utils.ipa.SimpleAuthenticationCheck.domainToDN(domain); java.lang.StringBuilder ldapUserDn = new java.lang.StringBuilder(); if (ldapProviderType.equals(LdapProviderType.ipa)) { ldapUserDn.append("uid=").append(username).append(",cn=Users").append(",cn=Accounts,"); } else if (ldapProviderType.equals(LdapProviderType.rhds)) { ldapUserDn.append("uid=").append(username).append(",ou=People"); } else <START_MOD>if (ldapProviderType.equals(LdapProviderType.ibm)) { ldapUserDn.append("uid=").append(username); } else <END_MOD>{ ldapUserDn.append("CN=").append(username).append(",CN=Users,"); } ldapUserDn.append(ldapBaseDn); context.setUrl(getLdapUrl(ldapServer)); <START_MOD>if (!(ldapProviderType.equals(LdapProviderType.ibm))) { <END_MOD>context.setBase(ldapBaseDn);<START_MOD> } else { context.setAnonymousReadOnly(true); }<END_MOD> context.setUserDn(ldapUserDn.toString()); context.setPassword(password); context.setReferral("follow"); java.util.Map<java.lang.String, java.lang.String> baseEnvironmentProperties = new java.util.HashMap<java.lang.String, java.lang.String>(); baseEnvironmentProperties.put("java.naming.ldap.attributes.binary", "objectGUID"); context.setBaseEnvironmentProperties(baseEnvironmentProperties); return context; }
public void getClusterNetworkList(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>><END_MOD> aQuery, org.ovirt.engine.core.compat.Guid clusterId) { if ((aQuery.converterCallback) == null) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>><END_MOD>() { @java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.network.Network><END_MOD> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<<START_MOD>>(); } return ((java.util.List<<END_MOD>org.ovirt.engine.core.common.businessentities.network.Network><START_MOD>) (<END_MOD>source<START_MOD>))<END_MOD>; } }; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworksByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), aQuery); }
@java.lang.Override public java.lang.Object <START_MOD>convert<END_MOD>(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags> ret = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Tags tags : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags>) (source))) { if ((tags.getType()) == (org.ovirt.engine.core.common.businessentities.TagsType.GeneralTag)) { ret.add(tags); } } return ret; } return new org.ovirt.engine.core.common.businessentities.Tags(); }
<START_MOD>@org.junit.Test public void failWhenCertEnforcedAndCANotFound() { org.ovirt.engine.core.common.queries.ConfigureConsoleOptionsParams params = new org.ovirt.engine.core.common.queries.ConfigureConsoleOptionsParams(getValidOptions(GraphicsType.SPICE), false); org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery query = spy(new org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery(params)); doReturn(mockVm(GraphicsType.SPICE)).when(query).getCachedVm(); mockSpiceRelatedConfig(query); doReturn(true).when(query).getConfigValue(ConfigValues.EnableSpiceRootCertificateValidation); org.ovirt.engine.core.common.queries.VdcQueryReturnValue caResult = new org.ovirt.engine.core.common.queries.VdcQueryReturnValue(); caResult.setSucceeded(false); doReturn(caResult).when(backend).runInternalQuery(eq(VdcQueryType.GetCACertificate), any(org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class)); doReturn(backend).when(query).getBackend(); query.executeQueryCommand(); assertFalse(query.getQueryReturnValue().getSucceeded()); }<END_MOD>
<START_MOD>private<END_MOD> void removeVmStatelessImages(org.ovirt.engine.core.compat.Guid vmId) { if (<START_MOD>getSnapshotDAO<END_MOD>().exists(vmId, SnapshotType.STATELESS)) { org.ovirt.engine.core.bll.ProcessDownVmCommand.log.infoFormat( snapshot for stateless vm {0} vmId); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.RestoreStatelessVm, new org.ovirt.engine.core.common.action.VmOperationParameterBase(vmId), <START_MOD>org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks(org.ovirt.engine.core.bll.ProcessDownVmCommand.getExecutionContext(), org.ovirt.engine.core.bll.ProcessDownVmCommand.getLock())<END_MOD>); } }
<START_MOD>@org.junit.Test public void testWithNoLists() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails volDetailsEntity = new org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails(); volDetailsEntity.setBrickDetails(getBrickDetails(0, 0, 0)); org.ovirt.engine.api.model.GlusterBrickAdvancedDetails model = org.ovirt.engine.api.restapi.types.GlusterBrickDetailMapper.map(volDetailsEntity, null); assertNotNull(model); assertNull(model.getClients()); assertNull(model.getMntOptions()); }<END_MOD>
<START_MOD>private void localize(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { bricks.setLabel(constants.selectBrickToViewFopStats()); nfsServers.setLabel(constants.selectServerToViewFopStats()); bricksTab.setLabel(constants.volumeProfileBricksTab()); nfsTab.setLabel(constants.volumeProfileNfsTab()); }<END_MOD>
<START_MOD>@java.lang.Override public javax.ws.rs.core.Response remove(org.ovirt.engine.api.model.Action action) { return doAction(VdcActionType.RemoveGlusterHook, new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(guid), action); }<END_MOD>
<START_MOD>public void setIsGlusterPeerProbeNeeded(boolean isGlusterPeerProbeNeeded) { this.isGlusterPeerProbeNeeded = isGlusterPeerProbeNeeded; }<END_MOD>
<START_MOD>@org.junit.Test public void testExtendingDiskWithQuota() { org.ovirt.engine.core.compat.Guid quotaId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.storage.DiskImage oldDiskImage = createDiskImage(); oldDiskImage.setQuotaId(quotaId); oldDiskImage.setSize(getBytesByGB(3)); org.ovirt.engine.core.common.businessentities.storage.DiskImage newDiskImage = createDiskImage(); newDiskImage.setQuotaId(quotaId); newDiskImage.setSize(getBytesByGB(5)); org.ovirt.engine.core.common.action.UpdateVmDiskParameters parameters = new org.ovirt.engine.core.common.action.UpdateVmDiskParameters(vmId, diskImageGuid, newDiskImage); long diskExtendingDiffInGB = (newDiskImage.getSizeInGigabytes()) - (oldDiskImage.getSizeInGigabytes()); when(diskDao.get(diskImageGuid)).thenReturn(oldDiskImage); initializeCommand(parameters); org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter consumptionParameter = ((org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) (command.getQuotaStorageConsumptionParameters().get(0))); assertTrue(((consumptionParameter.getRequestedStorageGB()) == diskExtendingDiffInGB)); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult validRemovableHostedEngineDisks() { return isHostedEngineDirectLunDisk() ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_HOSTED_ENGINE_DISK); }<END_MOD>
public java.lang.String getSupportedEngines() { return mVdsDynamic.getSupportedEngines(); }
<START_MOD>@java.lang.Override protected boolean canDoAction() { boolean result = true; if (((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent()) == null) || (org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent().equals(OVIRT))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLEGAL_ORIGIN); result = false; } if (!result) { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__ADD); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__EXTERNAL_EVENT); } return result; }<END_MOD>
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { warningLabel.setVisible((!(object.getMigrateData().getEntity()))); }
private void applyNetworkChangesToHosts() { org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand<T>.SyncNetworkParametersBuilder builder = new SyncNetworkParametersBuilder(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getContext()); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = builder.buildParameters(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork(), getOldNetwork()); if (!(parameters.isEmpty())) { org.ovirt.engine.core.bll.network.<START_MOD>HostSetupNetworksParametersBuilder<END_MOD>.updateParametersSequencing(parameters); runInternalMultipleActions(VdcActionType.<START_MOD>PersistentHostSetupNetworks<END_MOD>, parameters); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.RoleGroupMap> getAllForRole(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("role_id", id); return getCallsHandler().executeReadList("Get_role_groups_By_role_id", org.ovirt.engine.core.dao.<START_MOD>RoleGroupMapDAOImpl<END_MOD>.RoleGroupMapRowMapper.instance, parameterSource); }
<START_MOD>private void writeType(org.ovirt.api.metamodel.concepts.Type type) { if (type instanceof org.ovirt.api.metamodel.concepts.StructType) { writeStructType(((org.ovirt.api.metamodel.concepts.StructType) (type))); } if (type instanceof org.ovirt.api.metamodel.concepts.EnumType) { writeEnumType(((org.ovirt.api.metamodel.concepts.EnumType) (type))); } }<END_MOD>
protected java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.DiskImage> getDiskToDestinationMap(org.ovirt.engine.api.model.VM vm, org.ovirt.engine.core.compat.Guid storageDomainId, boolean isDomainSet) { java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.DiskImage> diskToDestinationMap = null; if ((vm.isSetDisks()) && (vm.getDisks().isSetDisks())) { diskToDestinationMap = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.DiskImage>(); for (org.ovirt.engine.api.model.Disk disk : vm.getDisks().getDisks()) { if (disk.isSetId()) <START_MOD>{ org.ovirt.engine.core.common.businessentities.Disk sourceDisk = queryDisk(disk); if (sourceDisk.isDiskImage()) { org.ovirt.engine.core.common.businessentities.DiskImage destinationDisk = ((org.ovirt.engine.core.common.businessentities.DiskImage) (org.ovirt.engine.api.restapi.types.DiskMapper.map(disk, sourceDisk))); if (((disk.isSetStorageDomains()) <END_MOD>&& (disk.<START_MOD>getStorageDomains().<END_MOD>isSetStorageDomains())) && (disk.getStorageDomains().getStorageDomains().get(0).isSetId())) { <START_MOD>destinationDisk<END_MOD>.setStorageIds(new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>()); org.ovirt.engine.core.compat.Guid newStorageDomainId = (isDomainSet) ? storageDomainId : asGuid(disk.getStorageDomains().getStorageDomains().get(0).getId()); <START_MOD>destinationDisk<END_MOD>.getStorageIds().add(newStorageDomainId); <START_MOD>} <END_MOD>diskToDestinationMap.put(<START_MOD>destinationDisk<END_MOD>.getId(), <START_MOD>destinationDisk<END_MOD>); } } } <START_MOD>} <END_MOD>return diskToDestinationMap; }
<START_MOD>private void updateCanSpecifyIpv6() { boolean isChangeable = (bootProtocolsAvailable) && (getIsStaticIpv6Address()); getIpv6Address().setChangeProhibitionReason((isChangeable && (!(staticIpChangeAllowed)) ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().staticIpAddressSameAsHostname() : null)); getIpv6Address().setIsChangeable((isChangeable && (staticIpChangeAllowed))); getIpv6Prefix().setIsChangeable(isChangeable); getIpv6Gateway().setIsChangeable(isChangeable); }<END_MOD>
<START_MOD>private org.ovirt.engine.core.compat.Guid getTargetVnicProfileId(org.ovirt.engine.api.model.VnicProfileMapping model) { return model.isSetTargetVnicProfile() ? org.ovirt.engine.core.compat.Guid.createGuidFromString(model.getTargetVnicProfile().getId()) : null; }<END_MOD>
protected org.ovirt.engine.api.model.Templates mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> entities) { org.ovirt.engine.<START_MOD>api.common.util.SizeBehaviour sizeBehaviour = org.ovirt.engine.api.common.util.SizeBehaviourHelper.getSizeBehaviour(getUriInfo()); if (sizeBehaviour.includeData()) { org.ovirt.engine.<END_MOD>core.common.queries.IdsQueryParameters params = new org.ovirt.engine.core.common.queries.IdsQueryParameters(); java.util.List<org.ovirt.engine.core.compat.Guid> ids = org.ovirt.engine.core.common.businessentities.Entities.getIds(entities); params.setId(ids); org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = runQuery(VdcQueryType.GetVmsInit, params); if ((queryReturnValue.getSucceeded()) && ((queryReturnValue.getReturnValue()) != null)) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> vmInits = queryReturnValue.getReturnValue(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmInit> initMap = org.ovirt.engine.core.common.businessentities.Entities.businessEntitiesById(vmInits); for (org.ovirt.engine.core.common.businessentities.VmTemplate template : entities) { template.setVmInit(initMap.get(template.getId())); } } <START_MOD>} <END_MOD>org.ovirt.engine.api.model.Templates collection = new org.ovirt.engine.api.model.Templates(); <START_MOD>if (sizeBehaviour.includeData()) { <END_MOD>for (org.ovirt.engine.core.common.businessentities.VmTemplate entity : entities) { collection.getTemplates().add(addLinks(populate(map(entity), entity))); } <START_MOD>} if (sizeBehaviour.includeSize()) { collection.setSize(((long) (entities.size()))); } <END_MOD>return collection; }
<START_MOD>public static java.lang.String[] parse(java.lang.String id) { java.lang.String[] ids = id.split("\\."); if (((ids == null) || ((ids.length) == 0)) || ((ids.length) != 4)) { throw new java.lang.IllegalArgumentException("wrong id format"); } return ids; }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.common.DefaultStringValue("Image ID") java.lang.String imageIDDisk();<END_MOD>
private void poplate(java.util.Map<java.lang.String, java.lang.Boolean> activeBonds, java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> clusterNetworks, java.util.List<java.lang.String> networks, java.util.Map<java.lang.String, java.util.List<java.lang.String>> bondNics, org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface) { org.ovirt.engine.core.utils.Pair<java.lang.Boolean, java.lang.String> retVal = IsNetworkInCluster(iface.getBondName(), clusterNetworks); java.lang.String networkName = retVal.getSecond(); if (retVal.getFirst()) { if (!(activeBonds.containsKey(iface.getBondName()))) { activeBonds.put(iface.getBondName(), false); } activeBonds.put(iface.getBondName(), ((activeBonds.get(iface.getBondName())) || ((iface.getStatistics().getStatus()) == (org.ovirt.engine.core.common.businessentities.InterfaceStatus.Up)))); if ((!(networks.contains(networkName))) && (!(activeBonds.containsKey(iface.getName())))) { networks.add(networkName); } else if ((networks.contains(networkName)) && (activeBonds.containsKey(iface.getBondName()))) { networks.remove(networkName); } if (!(bondNics.containsKey(iface.getBondName()))) { bondNics.put(iface.getBondName(), new java.util.ArrayList<java.lang.String>()); } bondNics.get(iface.getBondName()).add(iface.getName()); } }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult <START_MOD>validate<END_MOD>(java.lang.String value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult ipValidation = org.ovirt.engine.ui.uicommonweb.validation.SubnetMaskValidation.IP_VALIDATOR.<START_MOD>validate<END_MOD>(value); if (!(ipValidation.getSuccess())) { return ipValidation; } org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if (value != null) { result.setSuccess(validateNetMask(value)); result.setReasons(org.ovirt.engine.ui.uicommonweb.validation.SubnetMaskValidation.reasons); } return result; }
<START_MOD>private static void initHasSpiceSupport() { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(); callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.spiceSupportForVersionAndOs = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.OsRepository, new org.ovirt.engine.core.common.queries.OsQueryParameters(org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.HasSpiceSupportMatrix), callback); }<END_MOD>
<START_MOD>public void setCidr(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> cidr) { this.cidr = cidr; }<END_MOD>
private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus fetchedStatus) { log.debug( that status of brick '{}' in volume '{}' changed from '{}' to '{}' brick.getQualifiedName(), volume.getName(), brick.getStatus(), fetchedStatus); logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, new java.util.HashMap<java.lang.String, java.lang.String>() { { put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); <START_MOD>put("source", "cli"); <END_MOD>} }); if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN); } }
@java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> n) { return n.getname().equals(network.getname()); }
<START_MOD>@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass()) != (o.getClass()))) { return false; } org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages that = ((org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages) (o)); return ((pageSize) == (that.pageSize)) && (java.util.Objects.equals(getHost(), that.getHost())); }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object model, final java.util.List<org.ovirt.engine.core.common.businessentities.Cluster><START_MOD> <END_MOD>returnValue)<START_MOD> { if ((getSystemTreeSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.Cluster<END_MOD> selectedCluster<START_MOD> = ((org.ovirt.engine.core.common.businessentities.Cluster) (getSystemTreeSelectedItem().getEntity())); clusterSnapshotConfigModel.getClusters().setItems(returnValue, selectedCluster<END_MOD>); } else { if ((getSelectedItems()) != null) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getSelectedItems().get(0); if (volumeEntity != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.businessentities.Cluster><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.businessentities.Cluster cluster) { clusterSnapshotConfigModel.getClusters().setItems(returnValue, cluster); } }), volumeEntity.getClusterId()); } } else<END_MOD> { clusterSnapshotConfigModel.getClusters().setItems(((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (returnValue))<START_MOD>); } } }<END_MOD>
@java.lang.Override protected void executeCommand() { createJob(org.ovirt.engine.core.bll.AddInternalJobCommand.getParameters().getActionType(), false); <START_MOD>if (((org.ovirt.engine.core.bll.AddInternalJobCommand.getSucceeded()) && ((org.ovirt.engine.core.bll.AddInternalJobCommand.getParameters().getJobEntityType()) != null)) && ((org.ovirt.engine.core.bll.AddInternalJobCommand.getParameters().getJobEntityId()) != null)) { org.ovirt.engine.core.bll.AddInternalJobCommand.getDbFacade().getJobSubjectEntityDao().save(((org.ovirt.engine.core.compat.Guid) (org.ovirt.engine.core.bll.AddInternalJobCommand.getActionReturnValue())), org.ovirt.engine.core.bll.AddInternalJobCommand.getParameters().getJobEntityId(), org.ovirt.engine.core.bll.AddInternalJobCommand.getParameters().getJobEntityType()); <END_MOD>}<START_MOD> }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( You chose to detach all VMs from the pool - this will remove the pool itself. java.lang.String detachAllVmsWarning();
<START_MOD>private static org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VideoRAMSettings selectVideoRAMSettings(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { org.ovirt.engine.core.compat.Version clusterVersion = org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vmBase); if (clusterVersion == null) { clusterVersion = org.ovirt.engine.core.compat.Version.getLast(); } if (clusterVersion.greaterOrEquals(new org.ovirt.engine.core.compat.Version(3, 6))) { return new org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoRAMSettings(); } else { return new org.ovirt.engine.core.bll.utils.VideoDeviceSettings.LegacyVideoRAMSettings(); } }<END_MOD>
@java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return ((clusterNetworkModel.isAttached()) && (<START_MOD>(clusterNetworkModel.isRequired()) & (<END_MOD>!(clusterNetworkModel.isExternal(<START_MOD>)<END_MOD>)))) && (!((multiCluster) && (isManagementOriginally(clusterNetworkModel)))); }
public void getGlusterHostsNewlyAdded(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.Map<java.lang.String, java.lang.String>><END_MOD> aQuery, org.ovirt.engine.core.compat.Guid clusterId, boolean isFingerprintRequired) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAddedGlusterServers, new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery); }
public static java.util.List<java.lang.String> initRange(java.lang.String start, java.lang.String end, int size) { <START_MOD>try { long startNum = org.ovirt.engine.core.utils.MacAddressRangeUtils.macStringToLong(start); long endNum = org.ovirt.engine.core.utils.MacAddressRangeUtils.macStringToLong(end); <END_MOD>return org.ovirt.engine.core.utils.MacAddressRangeUtils.innerInitRange(<START_MOD>size<END_MOD>, <START_MOD>startNum<END_MOD>, <START_MOD>endNum<END_MOD>); }<START_MOD> catch (org.ovirt.engine.core.utils.MacAddressRangeUtils.InvalidMacString e) { org.ovirt.engine.core.utils.MacAddressRangeUtils.LOGGER.warn(e); return java.util.Collections.emptyList(); } }<END_MOD>
<START_MOD>public org.ovirt.engine.api.rsdl.Node build() { return node; }<END_MOD>
<START_MOD>@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ((org.ovirt.engine.core.common.businessentities.VDSGroup) (returnValue)); org.ovirt.engine.core.common.action.UpdateVdsActionParameters internalParam = ((org.ovirt.engine.core.common.action.UpdateVdsActionParameters) (model)); internalParam.setRebootAfterInstallation(cluster.supportsVirtService()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UpdateOvirtNode, internalParam, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue(); if ((returnValue != null) && (returnValue.getSucceeded())) { cancel(); } } }); }<END_MOD>
public void signOut() { for (org.ovirt.engine.ui.uicommonweb.models.SearchableListModel listModel : getItems()) { listModel.stopRefresh(); } getEventList().stopRefresh(); getAlertList().stopRefresh(); getTaskList().stopRefresh(); getBookmarkList().stopRefresh(); getRoleListModel().stopRefresh(); getSystemPermissionListModel().stopRefresh(); getClusterPolicyListModel<START_MOD>().stopRefresh(); getInstanceTypeListModel<END_MOD>().stopRefresh(); if (org.ovirt.engine.ui.frontend.Frontend.getInstance().getIsUserLoggedIn()) { org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setHandleFailure(true); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { } }; setLoggedInUser(null); getSignedOutEvent().raise(this, EventArgs.Empty); org.ovirt.engine.ui.frontend.Frontend.LogoffAsync(org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoggedInUser(), _asyncQuery); } }
protected void addVmTemplateToDb() { getVmTemplate().setClusterId(getParameters().getClusterId()); if (!(<START_MOD>vmHandler<END_MOD>.validateDedicatedVdsExistOnSameCluster(getVmTemplate(), null))) { getVmTemplate().setDedicatedVmForVdsList(java.util.Collections.emptyList()); } getVmTemplate().setStatus(VmTemplateStatus.Locked); getVmTemplate().setQuotaId(getParameters().getQuotaId()); <START_MOD>vmHandler<END_MOD>.updateImportedVmUsbPolicy(getVmTemplate()); vmTemplateDao.save(getVmTemplate()); getCompensationContext().snapshotNewEntity(getVmTemplate()); int count = 1; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : getImages()) { image.setActive(true); org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap map = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.saveImage(image); getCompensationContext().snapshotNewEntity(image.getImage()); getCompensationContext().snapshotNewEntity(map); if (!(baseDiskDao.exists(image.getId()))) { image.setDiskAlias(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getSuggestedDiskAlias(image, getVmTemplateName(), count)); count++; baseDiskDao.save(image); getCompensationContext().snapshotNewEntity(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic(); diskDynamic.setId(image.getImageId()); diskDynamic.setActualSize(image.getActualSizeInBytes()); diskImageDynamicDao.save(diskDynamic); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.copyOf(image.getDiskVmElementForVm(sourceTemplateId), image.getId(), getVmTemplateId()); diskVmElementDao.save(dve); getCompensationContext().snapshotNewEntity(diskDynamic); } }
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__ADD); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__STORAGE__CONNECTION); }
@org.junit.Test public void testInterfaceAlreadyLabeledWithWhenInterfaceIsLabeledBySameLabel() throws java.lang.Exception { <START_MOD>java.lang.String labelA = "labelA"; <END_MOD>org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName(); vdsNetworkInterface.setLabels(java.util.Collections.singleton(<START_MOD>labelA)); org.hamcrest.Matcher<org.ovirt.engine.core.bll.ValidationResult> matcher = org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.INTERFACE_ALREADY_LABELED, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostInterfaceValidator.VAR_LABELED_NIC, vdsNetworkInterface.getName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostInterfaceValidator.VAR_NIC_LABEL, labelA<END_MOD>)); assertThat(new org.ovirt.engine.core.bll.validator.HostInterfaceValidator(vdsNetworkInterface).interfaceAlreadyLabeledWith(<START_MOD>labelA), matcher<END_MOD>); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase login(org.ovirt.engine.core.common.action.LoginUserParameters parameters) { switch (parameters.getActionType()) { case LoginUser : case LoginAdminUser : org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.CommandsFactory.createCommand(parameters.getActionType(), parameters); return command.executeAction(); default : return getErrorCommandReturnValue(<START_MOD>EngineMessages<END_MOD>.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION); } }
public org.ovirt.engine.core.utils.ssh.EngineSSHClient getSSHClient() { java.lang.Long timeout = java.util.concurrent.TimeUnit.SECONDS.toMillis(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.ConnectToServerTimeoutInSeconds)); org.ovirt.engine.core.utils.ssh.EngineSSHClient sshclient = new org.ovirt.engine.core.utils.ssh.EngineSSHClient(); <START_MOD>sshclient.setVds(org.ovirt.engine.core.bll.AddVdsCommand.getParameters().getvds()); sshclient.setHardTimeout(timeout); sshclient.setSoftTimeout(timeout); <END_MOD>if (<START_MOD>(<END_MOD>org.ovirt.engine.core.bll.AddVdsCommand.getParameters().<START_MOD>getAuthMethod()) == (org.ovirt.engine.core.common.action.VdsOperationActionParameters.AuthenticationMethod.PublicKey<END_MOD>)) { sshclient.<START_MOD>useDefaultKeyPair(); } else { sshclient.setPassword<END_MOD>(org.ovirt.engine.core.bll.AddVdsCommand.getParameters().<START_MOD>getPassword<END_MOD>()); } <START_MOD>return sshclient<END_MOD>; }
@org.junit.Test public void testNfsOptions() { newServerConnection.setNfsVersion(NfsVersion.V4); newServerConnection.setNfsRetrans(((short) (5))); dao.save(newServerConnection); org.ovirt.engine.core.common.businessentities.StorageServerConnections result = dao.get(newServerConnection.<START_MOD>geIid<END_MOD>()); assertEquals(result.getNfsVersion(), NfsVersion.V4); assertTrue(((result.getNfsRetrans()) == 5)); assertNull(result.getNfsTimeo()); result = dao.get(existingNfsAutoConnection.<START_MOD>geIid<END_MOD>()); assertEquals(result.getNfsVersion(), NfsVersion.AUTO); assertTrue(((result.getNfsRetrans()) == 7)); assertTrue(((result.getNfsTimeo()) == 42)); result = dao.get(existingConnection.<START_MOD>geIid<END_MOD>()); assertNull(result.getNfsVersion()); assertNull(result.getNfsRetrans()); assertNull(result.getNfsTimeo()); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Quota") java.lang.String quotaTitle();
<START_MOD>protected org.ovirt.engine.core.bll.ValidationResult networkNameStartsWithoutBond() { return getNetworkName().toLowerCase().startsWith("bond") ? new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.NETWORK_CANNOT_CONTAIN_BOND_NAME) : org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object target, java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.Cluster> <END_MOD>clusters<START_MOD>) {<END_MOD> java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); <START_MOD>for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (<END_MOD>org.ovirt.engine.core.common.businessentities.Cluster<START_MOD> cluster :<END_MOD> clusters<START_MOD>) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(<END_MOD>dataCenter<START_MOD>.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } }<END_MOD> localDataCenters<START_MOD>.removeAll(<END_MOD>localDataCenterWithCluster<START_MOD>); updateOptionsRequiredAddDataCenter((!(<END_MOD>localDataCenters.isEmpty()))); }
@java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel vmInterfaceListModel = ((org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> network_list = (returnValue != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>>) (returnValue)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>>(); vmInterfaceListModel.PostGetClusterNetworkList_Edit(network_list); }
private org.ovirt.engine.core.common.businessentities.network.NetworkAttachment getExistingAttachmentByNetworkId(org.ovirt.engine.core.compat.Guid networkId) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingNetworkAttachment = <START_MOD>mapNetworkAttachmentsByNetworkId<END_MOD>().get(networkId); return existingNetworkAttachment; }
private void mockDiskImageDao() { when(diskImageDao.getSnapshotById(org.mockito.Matchers.any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.CommonVmPoolCommandTestAbstract.getDiskImageList().get(0)); }
<START_MOD>private java.util.stream.Stream<org.ovirt.engine.core.common.businessentities.VM> getAllVmsInSystem(java.util.List<org.ovirt.engine.core.compat.Guid> clustersId) { return clustersId.stream().flatMap(( clusterId) -> vmDao.getAllForCluster(clusterId).stream()); }<END_MOD>
private boolean checkServerStatus(java.util.Set<java.lang.String> errors) { boolean isResponsive = true; java.net.HttpURLConnection engineConn = null; <START_MOD>try { engineConn = ((javax.net.ssl.HttpsURLConnection) (serverUrl.openConnection())); if (isHttpsProtocol) { ((javax.net.ssl.HttpsURLConnection) (engineConn)).setSSLSocketFactory(sslFactory); if (sslIgnoreHostVerification) { ((javax.net.ssl.HttpsURLConnection) (engineConn)).setHostnameVerifier(org.ovirt.<END_MOD>engine.core.notifier.EngineMonitorService.IgnoredHostnameVerifier); } } } catch (java.io.IOException e) { errors.add(e.getMessage()); isResponsive = false; } if (isResponsive) { try { int responseCode = engineConn.getResponseCode(); if (responseCode != (java.net.HttpURLConnection.HTTP_OK)) { isResponsive = false; org.ovirt.engine.core.notifier.EngineMonitorService.log.debug(java.text.MessageFormat.format( is non responsive with response code: {0} responseCode)); } } catch (java.lang.Exception e) { errors.add(e.getMessage()); isResponsive = false; } finally { if (engineConn != null) { engineConn.disconnect(); engineConn = null; } } } org.ovirt.engine.core.notifier.EngineMonitorService.log.debug(( return:   + isResponsive)); return isResponsive; }
org.ovirt.engine.core.common.businessentities.Guid <START_MOD>getItGuid<END_MOD>();
<START_MOD>private void saveDevicesToDb(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change change) { getVmDeviceDao().updateAllInBatch(change.updatedDevices); if (!(change.removedDeviceIds.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getVmDeviceDao().removeAll(change.removedDeviceIds); return null; }); } if (!(change.addedDevices.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getVmDeviceDao().saveAll(change.addedDevices); return null; }); } }<END_MOD>
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.VM) (source)) : null; }
protected void updateDefaultHost() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getModel().getSelectedCluster(); final org.ovirt.engine.ui.uicompat.UIConstants constants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants(); if (cluster == null) { getModel().getDefaultHost().setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); getModel().getDefaultHost().setSelectedItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); return; } getHostListByCluster(cluster, asyncQuery(( hosts) -> { List<org.ovirt.engine.core.common.businessentities.VDS> oldDefaultHosts = getModel().getDefaultHost().getSelectedItems(); <START_MOD>getModel().getDefaultHost().setItems(hosts); <END_MOD>if ((<START_MOD>oldDefaultHosts<END_MOD> != null) && (<START_MOD>!(oldDefaultHosts.isEmpty())<END_MOD>)) { <START_MOD>Set<org.ovirt.engine.core.common.businessentities.VDS> oldSelectedIntersectionNewHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.HashSet<>(oldDefaultHosts); oldSelectedIntersectionNewHosts.retainAll(hosts); oldDefaultHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.ArrayList<>(oldSelectedIntersectionNewHosts); } List<org.ovirt.engine.core.common.businessentities.VDS> hostsToSelect = ((oldDefaultHosts != null) && (!(oldDefaultHosts.isEmpty()))) ? oldDefaultHosts<END_MOD> : <START_MOD>!(<END_MOD>hosts<START_MOD>.isEmpty()) ? java.util.Collections.singletonList(hosts.get(0)) : java.util.Collections.<org.ovirt.engine.core.common.businessentities.VDS>emptyList();<END_MOD> getModel().getDefaultHost().setSelectedItems(<START_MOD>hostsToSelect); changeDefaultHost()<END_MOD>; }<START_MOD>));<END_MOD> }
public static org.ovirt.engine.core.common.action.VdcReturnValueBase evaluateCorrelationId(org.ovirt.engine.core.common.action.VdcActionParametersBase parameters) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = null; java.lang.String correlationId = parameters.getCorrelationId(); if (org.apache.commons.lang.StringUtils.isEmpty(correlationId)) { correlationId = org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId(); if (org.apache.commons.lang.StringUtils.isEmpty(correlationId)) { correlationId = org.ovirt.engine.core.utils.log.LoggedUtils.getObjectId(parameters); } parameters.setCorrelationId(correlationId); } else { java.util.List<java.lang.<START_MOD>Class<?>> validationGroups = java.util.Arrays.asList(new java.lang.Class<?>[]{ org.ovirt.engine.core.common.validation.group.PreRun.class }); java.util.List<java.lang.<END_MOD>String> messages = org.ovirt.engine.core.common.utils.ValidationUtils.validateInputs(validationGroups, parameters); if (!(messages.isEmpty())) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnErrorValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnErrorValue.setValid(false); returnErrorValue.getValidationMessages().addAll(messages); return returnErrorValue; } } return returnValue; }
private static void setPropertiesFromAuditLogableBase(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { auditLog.setStorageDomainId(auditLogable.getStorageDomainId()); auditLog.setStorageDomainName(auditLogable.getStorageDomainName()); auditLog.setStoragePoolId(auditLogable.getStoragePoolId()); auditLog.setStoragePoolName(auditLogable.getStoragePoolName()); auditLog.setVdsGroupId(auditLogable.getVdsGroupId()); auditLog.setVdsGroupName(auditLogable.getVdsGroupName()); auditLog.setCorrelationId(auditLogable.getCorrelationId()); auditLog.setJobId(auditLogable.getJobId()); auditLog.setGlusterVolumeId(auditLogable.getGlusterVolumeId()); auditLog.setGlusterVolumeName(auditLogable.getGlusterVolumeName()); auditLog.setExternal(auditLogable.isExternal()); auditLog.setQuotaId(auditLogable.getQuotaIdForLog()); auditLog.setQuotaName(auditLogable.getQuotaNameForLog()); auditLog.setCallStack(auditLogable.getCallStack()); <START_MOD>auditLog.setBrickPath(auditLogable.getBrickPath()); <END_MOD>}
public org.ovirt.engine.core.bll.ValidationResult imageProvidedForOvirtNode(java.lang.String image) { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE).when(((host.isOvirtNode()) && (org.apache.commons.lang.StringUtils.isBlank(image)))); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Tags> getAllVmTagsWithIds(java.lang.String ids) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("tag_ids", ids); return getCallsHandler().executeReadList("GetVmTagsByTagId", org.ovirt.engine.core.dao.<START_MOD>TagDAOImpl<END_MOD>.TagRowMapper.instance, parameterSource); }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyInplace(org.ovirt.engine.core.compat.Guid jobId, java.util.Map<java.lang.String, java.lang.Object> volumeAddress) { throw new java.lang.UnsupportedOperationException(); }<END_MOD>
public static void clearNetworks(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> attachedNetworks = nic.getItems(); if ((attachedNetworks.size()) > 0) { for (org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel : new java.util.ArrayList(attachedNetworks)) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.DETACH_NETWORK.getCommand(networkModel, null, allNics).execute(); } } }
<START_MOD>public static boolean isCommandAllowed(org.ovirt.engine.core.common.businessentities.OriginType originType, org.ovirt.engine.core.common.action.VdcActionType actionType) { return !(((org.ovirt.engine.core.common.validation.VmActionValidator.isHostedEngine(originType)) && (!(org.ovirt.engine.core.common.validation.VmActionValidator.isCommandAllowedOnHostedEngine(actionType)))) || ((org.ovirt.engine.core.common.validation.VmActionValidator.isExternalVm(originType)) && (!(org.ovirt.engine.core.common.validation.VmActionValidator.isCommandAllowedOnExternalVms(actionType))))); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( more Storage java.lang.String dataCenterAttachMoreStorageAction();
public void UpdateMaxNumOfVmCpus() { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel().<START_MOD>getSelectedCluster(<END_MOD>); java.lang.String version = cluster.getcompatibility_version().toString(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetMaxNumOfVmCpus(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase) (target)); behavior.maxCpus = ((java.lang.Integer) (returnValue)); behavior.PostUpdateNumOfSockets2(); } }, getModel().getHash()), version); }
private<START_MOD> static<END_MOD> <T extends org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid> & org.ovirt.engine.core.common.businessentities.Nameable> boolean isNameAndIdIncoherent(org.ovirt.engine.core.compat.Guid id, java.lang.String name, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<T> map) { T entityById = map.get(id); T entityByName = map.get(name); return !(java.util.Objects.equals(entityById, entityByName)); }
<START_MOD>protected java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> updateExternalVnicProfilesPerTargetCluster(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces, org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> result) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> clusterVnicProfileMappings; if (result.containsKey(cluster)) { clusterVnicProfileMappings = result.get(cluster); } else { clusterVnicProfileMappings = new java.util.HashSet(); result.put(cluster, clusterVnicProfileMappings); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> previousClusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { previousClusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { previousClusterVnicProfileMappings = new java.util.HashSet(); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> vmVnicProfiles = getNewVnicProfileMappings(interfaces, previousClusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); return result; }<END_MOD>
protected javax.ws.rs.core.Response performNonBlockingAction(org.ovirt.engine.core.common.action.VdcActionType task, org.ovirt.engine.core.common.action.VdcActionParametersBase params) { try { doNonBlockingAction(task, params); <START_MOD>org.ovirt.engine.api.model.Action<END_MOD> action <START_MOD>=<END_MOD> <START_MOD>new org.ovirt.engine.api.model.Action(<END_MOD>)<START_MOD>;<END_MOD> action.setStatus(org.ovirt.engine.api.common.util.StatusUtils.create(CreationStatus.IN_PROGRESS)); return javax.ws.rs.core.Response.status(Response.Status.ACCEPTED).entity(action).build(); } catch (java.lang.Exception e) { return handleError(javax.ws.rs.core.Response.class, e, false); } }
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultMessage("Random Number Generator source ''{0}'' is not supported by the cluster") java.lang.String rngSourceNotSupportedByCluster(java.lang.String source);<END_MOD>
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((!(getAllowClusterWithVirtGlusterEnabled())) && (getEnableGlusterService().getEntity())) { getEnableOvirtService().setEntity(java.lang.Boolean.FALSE); } if (((!isEdit) && ((getEnableGlusterService().getEntity()) != null)) && (getEnableGlusterService().getEntity())) { getIsImportGlusterConfiguration().setIsAvailable(true); <START_MOD>getSupportGluster37Features().setIsAvailable(getVersion().getSelectedItem().equals(Version.v3_5)); getSupportGluster37Features().setIsChangable((!isEdit)); <END_MOD>getGlusterHostAddress().setIsAvailable(true); getGlusterHostFingerprint().setIsAvailable(true); getGlusterHostPassword().setIsAvailable(true); } else { getIsImportGlusterConfiguration().setIsAvailable(false); <START_MOD>getSupportGluster37Features().setIsAvailable(false); <END_MOD>getIsImportGlusterConfiguration().setEntity(false); getGlusterHostAddress().setIsAvailable(false); getGlusterHostFingerprint().setIsAvailable(false); getGlusterHostPassword().setIsAvailable(false); } if (((getEnableGlusterService().getEntity()) != null) && (getEnableGlusterService().getEntity())) { getEnableTrustedService().setEntity(false); getEnableTrustedService().setIsChangable(false); } else { if (((getEnableOvirtService().getEntity()) != null) && (getEnableOvirtService().getEntity())) { getEnableTrustedService().setIsChangable(true); } else { getEnableTrustedService().setIsChangable(false); } } }
private void <START_MOD>updateDestinationVds<END_MOD>(final org.ovirt.engine.core.<START_MOD>compat.Guid dstVdsId, final org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDynamicDao().smartUpdatePartialVds(dstVdsId, 1, vm.getNumOfCpus(), vm.getMinAllocatedMem(), 0, 0); return null; } }); org.ovirt.engine.core.<END_MOD>vdsbroker.<START_MOD>MigrateVDSCommand.log.debugFormat( Increasing<END_MOD> vds <START_MOD>{0} pending vcpu count, in {<END_MOD>1<START_MOD>}, and<END_MOD> pending vmem size, <START_MOD>in<END_MOD> {2}. Vm: {3} <START_MOD>dstVdsId, vm.getNumOfCpus(), vm.getMinAllocatedMem(), vm<END_MOD>.getName()<START_MOD>); }<END_MOD>
<START_MOD>private void refreshGlusterStorageDevices() { if (getGlusterUtil().isGlusterBrickProvisioningSupported(getVdsGroup().getCompatibilityVersion(), getVdsGroup().getId())) { try { runInternalAction(VdcActionType.SyncStorageDevices, new org.ovirt.engine.core.common.action.gluster.SyncGlusterStorageDevicesParameter(getVds().getId(), true)); } catch (org.ovirt.engine.core.bll.EngineException e) { log.error("Could not refresh storage devices from gluster host '{}'", getVds().getName()); } } }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Role> getAllNonAdmin() { java.lang.Integer appMode = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ApplicationMode); org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetAllNonAdminRoles", org.ovirt.engine.core.dao.RoleDaoImpl.RolesRowMapper.instance, parameterSource); }<END_MOD>
@org.junit.Test public void testExportWithStorageDomainName() throws java.lang.Exception {<START_MOD> setupGetVmExpectations();<END_MOD> setUpGetEntityExpectations(( name= + (NAMES[2])), SearchType.StorageDomain, getStorageDomain(2)); org.ovirt.engine.api.model.StorageDomain storageDomain = new org.ovirt.engine.api.model.StorageDomain(); storageDomain.setName(NAMES[2]); doTestExport(storageDomain, false, false); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) {<START_MOD> if ((args == null) || (!(args instanceof org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs))) { return; }<END_MOD> java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName; if ("IsLinuxOS".equals(propName)) { changeApplicationLevelVisibility(linuxBootOptionsPanel, vm.getIsLinuxOS()); } }
<START_MOD>@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hookEntity = org.ovirt.engine.core.bll.gluster.GetGlusterHookByIdQuery.getGlusterHookDao().getById(org.ovirt.engine.core.bll.gluster.GetGlusterHookByIdQuery.getParameters().getHookId()); if ((hookEntity != null) && (org.ovirt.engine.core.bll.gluster.GetGlusterHookByIdQuery.getParameters().isIncludeSeverHooks())) { hookEntity.setServerHooks(org.ovirt.engine.core.bll.gluster.GetGlusterHookByIdQuery.getGlusterHookDao().getGlusterServerHooks(org.ovirt.engine.core.bll.gluster.GetGlusterHookByIdQuery.getParameters().getHookId())); } org.ovirt.engine.core.bll.gluster.GetGlusterHookByIdQuery.getQueryReturnValue().setReturnValue(hookEntity); }<END_MOD>
@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error( to add VM. The reasons are: {} java.lang.String.join(",", errorMessages)); return; } <START_MOD>if (!(addVmLeaseIfNeeded())) { return; } <END_MOD>org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } }
public void setNetworkQoS(org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS networkQoS) { this.networkQoS = networkQoS; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if ((vm.getRunOnVds()) != null) { <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostsToRunOn = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VDS srcVds = getVdsDAO().get(vm.getRunOnVds()); <END_MOD>for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getId().equals(vm.getRunOnVds())) { org.ovirt.engine.core.bll.scheduling.policyunits.MigrationPolicyUnit.log.debug( '{}' <START_MOD>already runs<END_MOD> on host '{}', filtering host vm.getName(), host.getName()); <START_MOD>continue; } if (!(validateDestinationVdsAddress(srcVds, host))) { continue; } hostsToRunOn.add(host); } return hostsToRunOn; } return <END_MOD>hosts<START_MOD>; }<END_MOD>
<START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog> getAllByUserId(org.ovirt.engine.core.compat.Guid userID, boolean isFiltered);<END_MOD>
<START_MOD>@java.lang.Override protected void executeVdsBrokerCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfigParam> cfgParams = org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeSnapshotConfigVDSCommand.getParameters().getConfgParams(); java.lang.String volumeName = ""; java.lang.String volumeSnapMaxLimit = ""; java.lang.String clusterSnapMaxLimit = ""; java.lang.String clusterSnapMaxLimitPcnt = ""; java.lang.String clusterAutoDelete = ""; for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfigParam cfgParam : cfgParams) { if ((cfgParam.getVolumeId()) != null) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getGlusterVolumeDao().getById(cfgParam.getVolumeId()); volumeName = volume.getName(); volumeSnapMaxLimit = cfgParam.getParamValue(); } else { if (cfgParam.getParamName().equalsIgnoreCase("auto-delete")) { clusterAutoDelete = cfgParam.getParamValue(); } else if (cfgParam.getParamName().equalsIgnoreCase("snap-max-hard-limit")) { clusterSnapMaxLimit = cfgParam.getParamValue(); } else if (cfgParam.getParamName().equalsIgnoreCase("snap-max-soft-limit")) { clusterSnapMaxLimitPcnt = cfgParam.getParamValue().substring(0, ((cfgParam.getParamValue().length()) - 1)); } } } status = org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeSnapshotConfigVDSCommand.getBroker().glusterVolumeSnapshotConfigSet(volumeName, volumeSnapMaxLimit, clusterSnapMaxLimit, clusterSnapMaxLimitPcnt, clusterAutoDelete); org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeSnapshotConfigVDSCommand.proceedProxyReturnValue(); }<END_MOD>
@java.lang.Override protected boolean canDoAction() { if (<START_MOD>(org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm()) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().isRunningOrPaused()) || ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Unknown))) { return failCanDoAction(VdcBllMessages.VM_POOL_CANNOT_ADD_RUNNING_VM_TO_POOL); } if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().getVmPoolId()) != null) { return failCanDoAction(VdcBllMessages.VM_POOL_CANNOT_ADD_VM_ATTACHED_TO_POOL); } if (<END_MOD>(org.ovirt.engine.core.bll.AddVmToPoolCommand.getParameters().<START_MOD>getVmPoolId()) != null) { org.ovirt.engine.core.common.businessentities.VmPool pool = org.ovirt.engine.core.bll.AddVmToPoolCommand.getVmPoolDAO().get(org.ovirt.engine.core.bll.AddVmToPoolCommand.getParameters().getVmPoolId()); if (pool != null) { if (!(pool.getVdsGroupId().equals(org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().getVdsGroupId()<END_MOD>))) { return failCanDoAction(VdcBllMessages.VM_POOL_CANNOT_ADD_VM_DIFFERENT_CLUSTER); } } } return true; }
@org.junit.Test public void testGetAllForCluster() { java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> result = dao.getAllForCluster(cluster); org.ovirt.engine.core.dao.NetworkDAOTest.assertGetAllForClusterResult(result); }
@java.lang.Override public java.lang.String toString() { java.lang.String prefix = ((TotalMilliseconds) < 0) <START_MOD>?<END_MOD> "-"<START_MOD> : ""<END_MOD>; return java.lang.String.format("%s%d.%02d:%02d:%02d.%03d", prefix, Days, Hours, Minutes, Seconds, Milliseconds); }
private boolean removeDeprecatedOvirtEntry(final org.ovirt.engine.core.compat.Guid oVirtId) { final org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(oVirtId); if ((vds == null) || (!(org.ovirt.engine.core.bll.VdsHandler.isPendingOvirt(vds)))) { return false; } java.lang.String vdsName = org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getParameters().getVdsStaticData().getName(); log.info( '{}', id '{}' of type '{}' is being re-registered as Host '{}' vds.getName(), vds.getId(), vds.getVdsType().name(), vdsName); org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<org.ovirt.engine.core.common.action.VdcReturnValueBase>() { @java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase runInTransaction() { return runInternalAction(VdcActionType.RemoveVds, new org.ovirt.engine.core.common.action.RemoveVdsParameters(oVirtId)); } }); if (!(result.getSucceeded())) { java.lang.String errors = (result.<START_MOD>getValidate<END_MOD>()) ? result.getFault().getError().name() : org.apache.commons.lang.StringUtils.join(result.<START_MOD>getValidateMessages<END_MOD>(), ","); log.warn( to remove Host '{}', id '{}', re-registering it as Host '{}' fails with errors {} vds.getName(), vds.getId(), vdsName, errors); } else { log.info( '{}' is now known as Host '{}' vds.getName(), vdsName); } return result.getSucceeded(); }
<START_MOD>private void discoverGeoRepDataForVolume(org.ovirt.engine.core.common.businessentities.VDSGroup cluster, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { if (!(supportsGlusterGeoRepFeature(cluster))) { return; } if (volume == null) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.GlusterVolumeGeoRepSyncFailed, "No volume information"); } java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> sessionsMap = getSessionsFromCLI(cluster, volume.getName()); if (sessionsMap == null) { org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJob.log.debug("Error in retrieving sessions for cluster: {} from CLI, nothing to do", cluster.getName()); return; } refreshDiscoveredSessions(cluster, sessionsMap); }<END_MOD>
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { if (!(bondDialogModel.validate())) { return; }<START_MOD> java.lang.String bondName = entity.getName();<END_MOD> sourceListModel.setConfirmWindow(null); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> potentialNetworks = computeLabelChanges(bondDialogModel.getLabelsModel(), nicMap.get(<START_MOD>bondName<END_MOD>).getItems()); if (validateLabelChanges(potentialNetworks)) { setBondOptions(entity, bondDialogModel); commitLabelChanges(bondDialogModel.getLabelsModel(), entity, potentialNetworks); redraw(); <START_MOD>java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.Bond> bondNameToBondMap = org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.byName(hostSetupNetworksParameters.getBonds()); hostSetupNetworksParameters.getBonds().remove(bondNameToBondMap.get(bondName)); hostSetupNetworksParameters.getBonds().add(((org.ovirt.engine.core.common.businessentities.network.Bond) (entity))); } else { } }<END_MOD>
<START_MOD>public static org.ovirt.engine.ui.uicommonweb.UICommand createAddMacPoolCommand(org.ovirt.engine.ui.uicommonweb.ICommandTarget target) { final org.ovirt.engine.ui.uicommonweb.UICommand addMacPoolCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("AddMacPool", target); addMacPoolCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().addMacPoolButton()); return addMacPoolCommand; }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult notExternalNetwork() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.EXTERNAL_NETWORK_CANNOT_BE_PROVISIONED).when(getNetwork().isExternal()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturnForXmlRpc glusterVolumeRemoveBrickStatus(java.lang.String volumeName, java.lang.String[] bricksList) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.removeBrickStatus").withParameter("volumeName", volumeName).withParameter("brickList", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(bricksList))).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturnForXmlRpc(response); }
@java.lang.Override public void init(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> disksImages) { <START_MOD>setIsAliasChangable(true); <END_MOD>setDiskImages(disksImages); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDiskList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.templates.CopyDiskModel copyDiskModel = ((org.ovirt.engine.ui.uicommonweb.models.templates.CopyDiskModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>) (returnValue)); copyDiskModel.onInitAllDisks(disks); copyDiskModel.onInitDisks(); } })); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Host ${VdsName} cannot serve as proxy. Verify its cluster compatibility version is supported.") java.lang.String ACTION_TYPE_FAILED_HOST_CANNOT_BE_PROXY_FOR_IMPORT_VM();<END_MOD>
<START_MOD>public boolean isLinked() { return active; }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call() { getParameters().setStorageDomainId(getMasterDomainIdFromDb()); org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainPoolMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(getParameters().getNewMasterDomainId(), getParameters().getStoragePoolId(), org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().save(domainPoolMap); getParameters().setVdsId(getVds().getId()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = getBackend().runInternalAction(VdcActionType.ReconstructMasterDomain, getParameters()); boolean reconstructVerbExecuted = ((returnVal.getActionReturnValue()) != null) ? ((java.lang.Boolean) (returnVal.getActionReturnValue())) : false; getStoragePoolDAO().updateStatus(getStoragePool().getId(), StoragePoolStatus.NonResponsive); if (!reconstructVerbExecuted) { getStoragePoolIsoMapDAO().remove(domainPoolMap.getId()); } if (returnVal.getSucceeded()) { updateStorageDomainFormat(<START_MOD>getNewMasterDomain<END_MOD>()); } setSucceeded(returnVal.getSucceeded()); return new org.ovirt.engine.core.common.eventqueue.EventResult(reconstructVerbExecuted, org.ovirt.engine.core.common.eventqueue.EventType.RECONSTRUCT); }
<START_MOD>@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks getValue() { org.ovirt.engine.core.common.businessentities.network.Network network = logicalNetworkEditor.asEditor().getSubEditor().getValue(); nicWithNetworks.getNetworkInterface().setNetworkName(network.getName()); return nicWithNetworks; }<END_MOD>
void showModels(java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel> interfaceLineModels) { grid.resizeRows(interfaceLineModels.size()); int row = 0; for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel : interfaceLineModels) { setGridWidget(row, 0, createInterfacePanel(lineModel)); setGridWidget(row, 1, createBondPanel(lineModel)); setGridWidget(row, 2, createVLanPanel(lineModel)); row++; } }
void detachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().remove(alertPanel); <START_MOD>alertPanel.resetCount(); <END_MOD>}
<START_MOD>private java.lang.String getNewVolumeCinderDisk(org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk) { java.lang.String volumeId; if (cinderDisk.getActive()) { volumeId = org.ovirt.engine.core.bll.storage.CloneSingleCinderDiskCommand.getCinderBroker().cloneDisk(cinderDisk); } else { volumeId = org.ovirt.engine.core.bll.storage.CloneSingleCinderDiskCommand.getCinderBroker().cloneVolumeFromSnapshot(cinderDisk, cinderDisk.getImageId()); cinderDisk.setActive(true); cinderDisk.setParentId(Guid.Empty); cinderDisk.setVmSnapshotId(org.ovirt.engine.core.bll.storage.CloneSingleCinderDiskCommand.getParameters().getVmSnapshotId()); } return volumeId; }<END_MOD>
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(IVdcQueryable quota) { boolean quotaExceeded = false; if (quota instanceof org.ovirt.engine.core.common.businessentities.QuotaStorage) { quotaExceeded = getQuotaExceeded(((org.ovirt.engine.core.common.businessentities.QuotaStorage) (quota))); } else if (quota instanceof org.ovirt.engine.core.common.businessentities.QuotaVdsGroup) { quotaExceeded = getQuotaExceeded(((org.ovirt.engine.core.common.businessentities.QuotaVdsGroup) (quota))); } else { return null; } if (quotaExceeded) { setTitle(<START_MOD>constants<END_MOD>.quotaExceeded()); } return quotaExceeded ? <START_MOD>resources<END_MOD>.alertImage() : null; }
<START_MOD>protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImage() { if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId()))) { return super.getDiskImage(); } return ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageGroupID()))); }<END_MOD>
@java.lang.Override public void onSuccess(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase> operation, final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer( sucessfully executed runAction, determining result! handleActionResult(actionType, parameters, result, (callback != null ? callback : org.ovirt.engine.ui.frontend.Frontend.NULLABLE_ASYNC_CALLBACK), state, showErrorDialog); org.ovirt.engine.ui.frontend.communication.<START_MOD>AsyncOperationCompleteEvent.fire(this, state); org.ovirt.engine.ui.frontend.communication.<END_MOD>RefreshActiveModelEvent.fire(this, true); }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { if (getSucceeded()) { return org.ovirt.engine.core.common.AuditLogType.GLUSTER_VOLUME_SNAPSHOT_CREATED; } else { return (errorType) == null ? org.ovirt.engine.core.common.AuditLogType.GLUSTER_VOLUME_SNAPSHOT_CONFIG_UPDATE_FAILED : errorType; } }<END_MOD>
public abstract java.lang.String getVerb(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?<START_MOD>, ?, ?<END_MOD>> op1);
protected void removeVmStatic(boolean removePermissions) { <START_MOD>this<END_MOD>.<START_MOD>vmStaticDao<END_MOD>.remove(org.ovirt.engine.core.bll.VmCommand.getVmId(), removePermissions); }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if (!(schedulingManager.getPolicyUnitsMap().containsKey(getPolicyUnitId()))) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_POLICY_UNKNOWN_POLICY_UNIT); } java.util.List<java.lang.String> clusterPoliciesNames = schedulingManager.getClusterPoliciesNamesByPolicyUnitId(getPolicyUnitId()); if ((clusterPoliciesNames != null) && ((clusterPoliciesNames.size()) > 0)) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_POLICY_UNIT_ATTACHED_TO_CLUSTER_POLICY, java.lang.String.format( %1$s org.apache.commons.lang.StringUtils.join(clusterPoliciesNames, ','))); } return true; }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn copyImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String srcImgGUID, java.lang.String srcVolUUID, java.lang.String dstImgGUID, java.lang.String dstVolUUID, java.lang.String descr, java.lang.String dstSdUUID, int volType, int volFormat, int preallocate, java.lang.String postZero, boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Volume.copy").withParameter("volumeID", srcVolUUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("imageID", srcImgGUID).withParameter("dstSdUUID", dstSdUUID).withParameter("dstImgUUID", dstImgGUID).withParameter("dstVolUUID", dstVolUUID).withParameter("desc", descr).withParameter("volType", volType).withParameter("volFormat", volFormat).withParameter("preallocate", preallocate).withParameter("postZero", postZero).withParameter("discard", discard).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }<END_MOD>
<START_MOD>protected void filterVms() { for (org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData vdsmVm : vdsmVms.values()) { org.ovirt.engine.core.common.businessentities.VM dbVm = dbVms.get(vdsmVm.getVmDynamic().getId()); gatherChangedVms(dbVm, vdsmVm); gatherExternalVms(dbVm, vdsmVm); gatherVmsWithChangedDevices(dbVm, vdsmVm); } }<END_MOD>
protected int getMaxClonedNameLength(java.lang.Object object) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm(); return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType(vm.getOs()) ? org.ovirt.engine.ui.uicommonweb.<START_MOD>dataprovider<END_MOD>.<START_MOD>AsyncDataProvider<END_MOD>.<START_MOD>getMaxVmNameLenghtWin()<END_MOD> : org.ovirt.engine.ui.uicommonweb.<START_MOD>dataprovider<END_MOD>.<START_MOD>AsyncDataProvider<END_MOD>.<START_MOD>getMaxVmNameLenghtNonWin()<END_MOD>; }
@java.lang.Override protected void buildSysprepVmPayload(java.lang.String sysPrepContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setType(VmDeviceType.FLOPPY); vmPayload.setFileName(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.SYSPREP_FILE_NAME); vmPayload.setContent(org.apache.commons.codec.binary.Base64.encodeBase64String(sysPrepContent.getBytes())); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.NewGuid(), vm.getId()), VmDeviceType.DISK.getName(), VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, ""); <START_MOD>java.util.Map struct = new java.util.HashMap(); <END_MOD>org.ovirt.engine.core.vdsbroker.<START_MOD>vdsbroker.VmInfoBuilder.addFloppyDetails(vmDevice,<END_MOD> struct<START_MOD>); addDevice(struct, <END_MOD>vmDevice, vm.getFloppyPath()); }
<START_MOD>protected org.ovirt.engine.core.dao.gluster.GlusterServerServiceDao getGlusterServerServiceDao() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getGlusterServerServiceDao(); }<END_MOD>
@org.junit.Test public void tooLowPct() { org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings settings = new org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings(); settings.diskSpaceFree = 6; settings.diskSpaceUsed = 4; settings.spaceThresholdGB = 5; settings.spaceThresholdPct = 70; org.ovirt.engine.core.common.businessentities.storage_domains domain = setupForSpaceTest(settings); assertFalse(org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.<START_MOD>isAboveThresholds<END_MOD>(domain)); }
public org.ovirt.engine.core.common.businessentities.Snapshot addActiveSnapshot(org.ovirt.engine.core.compat.Guid snapshotId, org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String memoryVolume, <START_MOD>org.ovirt.engine.core.compat.Guid memoryDiskId, org.ovirt.engine.core.compat.Guid metadataDiskId, <END_MOD>final org.ovirt.engine.core.bll.context.CompensationContext compensationContext) { return addActiveSnapshot(snapshotId, vm, SnapshotStatus.OK, memoryVolume, <START_MOD>memoryDiskId, metadataDiskId, <END_MOD>null, compensationContext); }
private void glusterHostRemove() { if ((clusterHasMultipleHosts()) && (!(hasVolumeBricksOnServer()<START_MOD>))) { try (org.ovirt.engine.core.utils.lock.EngineLock lock = org.ovirt.engine.core.bll.utils.GlusterUtil.getInstance().acquireGlusterLockWait(org.ovirt.engine.core.bll.RemoveVdsCommand.getVds().getVdsGroupId(<END_MOD>))) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.RemoveGlusterServer, new org.ovirt.engine.core.common.vdscommands.gluster.RemoveGlusterServerVDSParameters(upServer.getId(), org.ovirt.engine.core.bll.RemoveVdsCommand.getVds().getHostName(), org.ovirt.engine.core.bll.RemoveVdsCommand.getParameters().isForceAction())); setSucceeded(returnValue.getSucceeded()); if (!(org.ovirt.engine.core.bll.RemoveVdsCommand.getSucceeded())) { org.ovirt.engine.core.bll.RemoveVdsCommand.getReturnValue().getFault().setError(returnValue.getVdsError().getCode()); org.ovirt.engine.core.bll.RemoveVdsCommand.getReturnValue().getFault().setMessage(returnValue.getVdsError().getMessage()); errorType = org.ovirt.engine.core.common.AuditLogType.GLUSTER_SERVER_REMOVE_FAILED; return; } } }<START_MOD> }<END_MOD>
<START_MOD>private org.ovirt.engine.core.bll.ValidationResult checkVmNumaCpuAssignment(int cpuCores, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) { java.util.ArrayList<java.lang.Integer> cpuIds = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { cpuIds.addAll(node.getCpuIds()); } if (cpuIds.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } int minId = java.util.Collections.min(cpuIds); int maxId = java.util.Collections.max(cpuIds); if ((minId < 0) || (maxId >= cpuCores)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_INVALID_CPU_ID, java.lang.String.format("$cpuIndex %d", (minId < 0 ? minId : maxId)), java.lang.String.format("$cpuIndexMax %d", (cpuCores - 1))); } java.util.Collections.sort(cpuIds); for (int i = 0; i < ((cpuIds.size()) - 1); ++i) { if (cpuIds.get(i).equals(cpuIds.get((i + 1)))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_DUPLICATE_CPU_ID, java.lang.String.format("$cpuIndex %d", cpuIds.get(i))); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.Object answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable { org.ovirt.engine.core.common.vdscommands.VDSCommandType commandType = ((org.ovirt.engine.core.common.vdscommands.VDSCommandType) (invocation.getArguments()[0])); assertEquals(commandType, VDSCommandType.UpdateVmPolicy); org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params = ((org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams) (invocation.getArguments()[1])); org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); retVal.setSucceeded(vdsFunction.apply(params)); return retVal; }<END_MOD>
@java.lang.Override protected boolean canDoAction() { <START_MOD>earlyUpdateVmDynamicRunOnce(); <END_MOD>if (!(super.canDoAction())) { return false; } if (((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getSysPrepUserName()) == null) ^ ((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getSysPrepPassword()) == null)) { return failCanDoAction(VdcBllMessages.VM_CANNOT_RUN_ONCE_WITH_ILLEGAL_SYSPREP_PARAM); } if ((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit()) != null) { if ((!(OsRepositoryImpl.INSTANCE.isWindows(org.ovirt.engine.core.bll.RunVmOnceCommand.getVm().getOs()))) && (!(org.ovirt.engine.core.common.FeatureSupported.cloudInit(org.ovirt.engine.core.bll.RunVmOnceCommand.getVm().getVdsGroupCompatibilityVersion())))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLOUD_INIT_IS_NOT_SUPPORTED); } if (org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit().isPasswordAlreadyStored()) { org.ovirt.engine.core.common.businessentities.VmBase temp = new org.ovirt.engine.core.common.businessentities.VmBase(); temp.setId(org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmId()); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(temp, false); org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit().setRootPassword(temp.getVmInit().getRootPassword()); } } return true; }
@java.lang.Override protected void executeCommand() { setQuotaParameter(); <START_MOD>org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { <END_MOD>getQuotaDAO().save(getQuota()<START_MOD>); copyQuotaPermissions(<END_MOD>); getReturnValue().setSucceeded(true); <START_MOD>return null; <END_MOD>}<START_MOD> }); }<END_MOD>
private java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD>> searchAdGroups() { return adSearch(LdapQueryType.searchGroups, AdActionType.SearchGroupsByQuery); }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmDisksFromDB() { if ((cachedDisksFromDb) == null) { cachedDisksFromDb = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVm().getDiskMap().values(), <START_MOD>org.ovirt.engine.core.bll.SNAPABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.ACTIVE_DISKS_ONLY<END_MOD>); cachedDisksFromDb.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVm().getDiskMap().values(), true)); } return cachedDisksFromDb; }
private void createDiskBasedOnLun() { final org.ovirt.engine.core.common.businessentities.LUNs lun = ((org.ovirt.engine.core.common.businessentities.LunDisk) (org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo())).getLun(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.proceedLUNInDb(lun, lun.getLunType()); getBaseDiskDao().save(getParameters().getDiskInfo()); getDiskLunMapDao().save(new org.ovirt.engine.core.common.businessentities.DiskLunMap(getParameters().getDiskInfo().getId(), lun.getLUN_id())); if ((getVm()) != null) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getParameters().getDiskInfo().getId(), getVmId()), VmDeviceType.DISK, VmDeviceType.DISK, null, ((getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down)), <START_MOD>getParameters().getDiskInfo().isReadOnly()<END_MOD>); } return null; } }); org.ovirt.engine.core.bll.AddDiskCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo().getId()); org.ovirt.engine.core.bll.AddDiskCommand.setSucceeded(true); }
<START_MOD>void addEventListener(org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.MessageListener el);<END_MOD>
public static boolean copyNonEditableFieldsToDestination(org.ovirt.engine.core.common.businessentities.VmStatic source, org.ovirt.engine.core.common.businessentities.VmStatic destination<START_MOD>, boolean hotsetEnabled<END_MOD>) { return org.ovirt.engine.core.bll.VmHandler.mUpdateVmsStatic.copyNonEditableFieldsToDestination(source, destination<START_MOD>, hotsetEnabled<END_MOD>); }
<START_MOD>protected void executeValidatedCommand(org.ovirt.engine.core.bll.CommandBase<?> command) { if ((((commandContext) == null) || ((commandContext.getExecutionContext()) == null)) || (commandContext.getExecutionContext().isMonitored())) { org.ovirt.engine.core.bll.job.ExecutionHandler.prepareCommandForMonitoring(command, command.getActionType(), command.isInternalExecution()); } org.ovirt.engine.core.utils.CorrelationIdTracker.setCorrelationId(command.getCorrelationId()); command.executeAction(); }<END_MOD>
private void addDataCenter() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterList(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.StoragePool> allDataCenters) { @java.<END_MOD>lang.<START_MOD>SuppressWarnings("unchecked") java.util.List<<END_MOD>org.ovirt.engine.ui.uicommonweb.models.<START_MOD>EntityModel<org.ovirt.engine.core.common.businessentities.StoragePool>> filteredDataCenters<END_MOD> = <START_MOD>new java.util.ArrayList<>();<END_MOD> java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> <START_MOD>localDataCenters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : <END_MOD>allDataCenters) { if ((getEntity().getCompatibilityVersion().compareTo(dataCenter.getCompatibilityVersion())) >= 0) { if (dataCenter.isLocal()) { localDataCenters.add(dataCenter); } else { filteredDataCenters.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(dataCenter)); } } } if (localDataCenters.isEmpty()) { displayAddDataCenter(filteredDataCenters); } else { verifyLocalDataCenterNoCluster(filteredDataCenters, localDataCenters); } } })); }
<START_MOD>public void setConfirmedFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> freeSize) { this.freeSize = freeSize; }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior) (array[0])); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (array[1])); java.util.<START_MOD>List<END_MOD><org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = ((java.util.<START_MOD>List<END_MOD><org.ovirt.engine.core.common.businessentities.VDSGroup>) (returnValue)); <START_MOD>if (containsVmCluster(clusters)) { java.util.Collections.sort(clusters, new org.ovirt.engine.ui.uicommonweb.Linq.VdsGroupByNameComparer());<END_MOD> model<START_MOD>.setDataCentersAndClusters(model, dataCenters, clusters, vm.getVdsGroupId().getValue()); } else { addVmCluster(dataCenters, clusters); }<END_MOD> behavior.InitTemplate(); behavior.InitCdImage(); }
protected org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPool<END_MOD> getMacPool() { return poolPerDc.poolForDataCenter(getStoragePoolId()); }
public void Activate() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> pb = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain a : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.StorageDomain>cast(getSelectedItems())) { pb.add(new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase(a.getId(), getEntity().getId())); } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.ActivateStorageDomain, pb<START_MOD>, null, null<END_MOD>); }
@java.lang.Override protected void onSelectedItemChanged() { super.onSelectedItemChanged(); if ((<START_MOD>org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.<END_MOD>getSelectedItem()) != null) { updateDetailsAvailability(); if ((getDetailModels()) != null) { if ((((getActiveDetailModel()) != null) && (!(getActiveDetailModel().getIsAvailable()))) || ((getActiveDetailModel()) == null)) { org.ovirt.engine.ui.uicommonweb.models.<START_MOD>HasEntity<E><END_MOD> model = null; for (org.ovirt.engine.ui.uicommonweb.models.<START_MOD>HasEntity<E><END_MOD> item : getDetailModels()) { if (item.getIsAvailable()) { model = item; break; } } setActiveDetailModel(model); } } } else { if (((getActiveDetailModel()) != null) && ((getActiveDetailModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel)) { ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (getActiveDetailModel())).stopRefresh(); } } org.ovirt.engine.ui.uicommonweb.models.<START_MOD>HasEntity<E><END_MOD> activeDetailModel = getActiveDetailModel(); if (((<START_MOD>org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.<END_MOD>getSelectedItem()) != null) && (activeDetailModel != null)) { if (activeDetailModel instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel) { ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel) (activeDetailModel)).setEntity(((org.ovirt.engine.core.common.businessentities.VDS) (provideDetailModelEntity(<START_MOD>org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.<END_MOD>getSelectedItem())))); } else { activeDetailModel.setEntity(provideDetailModelEntity(<START_MOD>org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.<END_MOD>getSelectedItem())); } } }
public static org.ovirt.engine.core.bll.ValidationResult.ValidationResultBuilder failWith(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD> expectedError, java.lang.String... replacements) { return new org.ovirt.engine.core.bll.ValidationResult.ValidationResultBuilder(expectedError, replacements); }
public boolean Validate() { getDescription().ValidateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.AsciiOrNoneValidation()<START_MOD>, new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(4000)<END_MOD> }); return getDescription().getIsValid(); }
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.permissions>) (source)) : new java.util.ArrayList<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.permissions>(); }
<START_MOD>private org.ovirt.engine.core.bll.network.MacPoolManagerStrategy getMacPool() { return org.ovirt.engine.core.bll.network.ScopedMacPoolManager.scopeFor().storagePool(org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId()).getPool(); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations reportConfigurationsOnHost() { org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result = new org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations(); result.setNetworkInSync(isNetworkInSync()); result.add(Type.MTU, iface.getMtu(), isNetworkMtuInSync()); result.add(Type.BRIDGED, iface.isBridged(), isNetworkBridgedFlagInSync()); result.add(Type.VLAN, iface.getVlanId(), isNetworkVlanIdInSync()); boolean reportHostQos = (ifaceQos) != null; if (reportHostQos) { result.add(Type.OUT_AVERAGE_LINK_SHARE, ifaceQos.getOutAverageLinkshare(), isOutAverageLinkShareInSync()); result.add(Type.OUT_AVERAGE_UPPER_LIMIT, ifaceQos.getOutAverageUpperlimit(), isOutAverageUpperLimitInSync()); result.add(Type.OUT_AVERAGE_REAL_TIME, ifaceQos.getOutAverageRealtime(), isOutAverageRealTimeInSync()); } return result; }<END_MOD>
<START_MOD>private void handleSingleAgent(org.ovirt.engine.core.common.businessentities.VDSStatus lastStatus) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue; executor = new org.ovirt.engine.core.bll.FencingExecutor(org.ovirt.engine.core.bll.FenceVdsBaseCommand.getVds(), org.ovirt.engine.core.bll.FenceVdsBaseCommand.getParameters().getAction()); if (executor.FindVdsToFence()) { vdsReturnValue = executor.Fence(); setFencingSucceeded(vdsReturnValue.getSucceeded()); if (getFencingSucceeded()) { executor = new org.ovirt.engine.core.bll.FencingExecutor(org.ovirt.engine.core.bll.FenceVdsBaseCommand.getVds(), org.ovirt.engine.core.common.businessentities.FenceActionType.Status); if (waitForStatus(org.ovirt.engine.core.bll.FenceVdsBaseCommand.getVds().getvds_name(), org.ovirt.engine.core.bll.FenceVdsBaseCommand.getParameters().getAction(), FenceAgentOrder.Primary)) { handleSpecificCommandActions(); } else { handleWaitFailure(lastStatus); } } else { handleError(lastStatus, vdsReturnValue); } } }<END_MOD>
com.google.gwt.user.client.ui.Grid createBlankRow(final org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { com.google.gwt.user.client.ui.Grid row = new com.google.gwt.user.client.ui.Grid(1, <START_MOD>4); row.getColumnFormatter().setWidth(0, org.ovirt.engine.ui.webadmin.widget.host.VLanPanel.CHECK_BOX_COLUMN_WIDTH); row.getColumnFormatter().setWidth(1, org.ovirt.engine.ui.webadmin.widget.host.VLanPanel.NETWORK_NAME_COLUMN_WIDTH); row.getColumnFormatter().setWidth(2, org.ovirt.engine.ui.webadmin.widget.host.VLanPanel.OUT_OF_SYNC_WIDTH); row.getColumnFormatter().setWidth(<END_MOD>3<START_MOD>, org.ovirt.engine.ui.webadmin.widget.host.VLanPanel.ADDRESS_COLUMN_WIDTH); row<END_MOD>.setWidth(<START_MOD>"100%"); row.setHeight("100%"); row.setWidget(<END_MOD>0, <START_MOD>0, new com.google.gwt.user.client.ui.Label()); com.google.gwt.user.client.ui.Label networkName = new com.google.gwt.user.client.ui.Label(lineModel.getNetworkName()); if (lineModel.getIsManagement()) { networkName.getElement().getStyle().setFontWeight(FontWeight.BOLD); networkName.setText((   + (lineModel.getNetworkName()))); } row.setWidget(0, <END_MOD>1, <START_MOD>networkName); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = lineModel.getInterface(); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails ifaceNetworkImpDetails = (iface != null) ? iface.getNetworkImplementationDetails() : null; boolean isSYnc = (ifaceNetworkImpDetails != null) ? ifaceNetworkImpDetails.isInSync() : true; row.setWidget(0, <END_MOD>2, <START_MOD>getSyncPanel(isSYnc)<END_MOD>); row.setWidget(0, <START_MOD>3<END_MOD>, new com.google.gwt.user.client.ui.Label(lineModel.<START_MOD>getAddress())); return row<END_MOD>; }
@javax.ws.rs.Path( (proxyticket)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
void localize(org.ovirt.engine.ui.common.CommonApplicationConstants constants) { nameEditor.setLabel(constants.makeTemplatePopupNameLabel()); descriptionEditor.setLabel(constants.makeTemplatePopupDescriptionLabel()); commentEditor.setLabel(constants.commentLabel()); clusterEditor.setLabel(constants.makeTemplateClusterLabel()); quotaEditor.setLabel(constants.makeTemplateQuotaLabel()); isTemplatePublicEditor.setLabel(constants.makeTemplateIsTemplatePublicEditorLabel()); copyVmPermissions.setLabel(constants.copyVmPermissions()); disksAllocationLabel.setText(constants.disksAllocation()); <START_MOD>isSubTemplateEditor.setLabel(constants.createAsSubTemplate()); rootTemplateEditor.setLabel(constants.rootTemplate()); templateSubversionNameEditor.setLabel(constants.templateSubversionName()); <END_MOD>}
@org.ovirt.engine.ui.uicompat.DefaultStringValue( switch host cluster between trust cluster and non-trust cluster due to host existed in the cluster java.lang.String trustedServiceDisabled();
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.VmTemplate vmt; <START_MOD>org.ovirt.engine.core.common.queries.GetVmTemplateParameters params = org.ovirt.engine.core.bll.GetVmTemplateQuery.getParameters(); <END_MOD>if ((<START_MOD>params.getName()) != null) { org.ovirt.engine.core.compat.Guid storagePoolId = getStoragePoolId(params); vmt = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().getByName(params.getName(), storagePoolId, org.ovirt.engine.core.bll.GetVmTemplateQuery.getUserID(), params.isFiltered()); } else { vmt = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().get(<END_MOD>org.ovirt.engine.core.bll.GetVmTemplateQuery.getParameters().<START_MOD>getId(), org.ovirt.engine.core.bll.GetVmTemplateQuery.getUserID(), org.ovirt.engine.core.bll.GetVmTemplateQuery.getParameters().isFiltered()); } if (vmt<END_MOD> != null) { <START_MOD>org.ovirt.engine.core.bll.VmTemplateHandler.updateDisksFromDb(vmt); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(vmt, true<END_MOD>); } <START_MOD>org.ovirt.engine.core.bll.GetVmTemplateQuery.getQueryReturnValue().setReturnValue(vmt<END_MOD>); }
public org.ovirt.engine.core.bll.ValidationResult notRemovingUsedPool() { final <START_MOD>org.ovirt.engine.core.dao.StoragePoolDAO storagePoolDao<END_MOD> = <START_MOD>org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolDao(); final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = storagePoolDao.getAllDataCentersByMacPoolId<END_MOD>(macPool.getId()); <START_MOD>final java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWithNameable("DATACENTERS_USING_MAC_POOL", dataCenters); replacements.add(VdcBllMessages.VAR__ENTITIES__STORAGE_POOLS.name()); <END_MOD>return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_STILL_USED_MAC_POOL<START_MOD>, replacements.toArray(new java.lang.String[0])<END_MOD>).when((<START_MOD>(dataCenters.size())<END_MOD> != 0)); }
protected boolean checkCanBeMoveInVm() { return validate(new org.ovirt.engine.core.bll.validator.storage.DiskValidator(getImage()).<START_MOD>isDiskPluggedToAnyNonDownVm<END_MOD>(false)); }
@java.lang.Override public void processOnClientIpChange(final org.ovirt.engine.core.common.businessentities.VDS vds, final org.ovirt.engine.core.compat.Guid vmId) { final org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDAO().get(vmId); if (!(org.<START_MOD>apache.commons.lang.StringUtils.isEmpty<END_MOD>(vmDynamic.getclient_ip()))) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(new java.lang.Runnable() { @java.lang.Override public void run() { org.ovirt.engine.core.bll.RunVmCommandBase.DoCompressionCheck(vds, vmDynamic); if ((org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>GetValue(ConfigValues.PowerClientAutoMigrateToPowerClientOnConnect)) || (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>GetValue(ConfigValues.PowerClientAutoMigrateFromPowerClientToVdsWhenConnectingFromRegularClient))) { org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.PowerClientMigrateOnConnectCheck, new org.ovirt.engine.core.common.action.PowerClientMigrateOnConnectCheckParameters(false, vmDynamic.getId(), vmDynamic.getclient_ip(), vds.getId()), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); } } }); } else { vmDynamic.setguest_cur_user_id(null); vmDynamic.setguest_cur_user_name(null); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDAO().update(vmDynamic); } }
@java.lang.SuppressWarnings("unchecked") private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); if ((org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()) == null) { return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (<START_MOD>vdsCommandsHelper<END_MOD>.runVdsCommandWithoutFailover(VDSCommandType.GetVGInfo, params, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStoragePoolId(), null).getReturnValue())); } return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params).getReturnValue())); }
<START_MOD>protected void proceedPoolOvfUpdate(org.ovirt.engine.core.common.businessentities.StoragePool pool) { proccessedDomains = new java.util.HashSet(); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo> domainsInfo = null; if (ovfOnAnyDomainSupported(pool)) { domainsInfo = getStorageDomainOvfInfoDao().loadStorageDomainsInfoByPoolId(pool.getId()); proccessDomainsForOvfUpdate(domainsInfo); } logInfoIfNeeded(pool, "Attempting to update VM OVFs in Data Center {0}", pool.getName()); initProcessedInfoLists(); updateOvfForVmsOfStoragePool(pool); logInfoIfNeeded(pool, "Successfully updated VM OVFs in Data Center {0}", pool.getName()); logInfoIfNeeded(pool, "Attempting to update template OVFs in Data Center {0}", pool.getName()); updateOvfForTemplatesOfStoragePool(pool); logInfoIfNeeded(pool, "Successfully updated templates OVFs in Data Center {0}", pool.getName()); logInfoIfNeeded(pool, "Attempting to remove unneeded template/vm OVFs in Data Center {0}", pool.getName()); removeOvfForTemplatesAndVmsOfStoragePool(pool, domainsInfo); logInfoIfNeeded(pool, "Successfully removed unneeded template/vm OVFs in Data Center {0}", pool.getName()); if (ovfOnAnyDomainSupported(pool)) { logInfoIfNeeded(pool, "Attempting to update ovfs in domain in Data Center {0}", pool.getName()); for (org.ovirt.engine.core.compat.Guid id : proccessedDomains) { performOvfUpdateForDomain(pool.getId(), id); } } }<END_MOD>
<START_MOD>private java.lang.String getOptions(org.ovirt.engine.core.common.businessentities.FenceAgent agent) { return org.ovirt.engine.core.utils.pm.VdsFenceOptions.getDefaultAgentOptions(agent.getType(), ((agent.getOptions()) == null ? "" : agent.getOptions()), architectureType); }<END_MOD>
<START_MOD>@java.lang.Override protected void endWithFailure() { super.endWithFailure(); }<END_MOD>
<START_MOD>private boolean validateSourceStorageDomain(org.ovirt.engine.core.compat.Guid imageId, org.ovirt.engine.core.compat.Guid sourceDomainId) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = getDiskImageById(imageId); org.ovirt.engine.core.bll.validator.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.StorageDomainValidator(getStorageDomainById(sourceDomainId, diskImage.getstorage_pool_id().getValue())); return validator.isDomainExistAndActive(org.ovirt.engine.core.bll.lsm.LiveMigrateDisksCommand.getReturnValue().getCanDoActionMessages()); }<END_MOD>
<START_MOD>public java.lang.String getWWNs() { return WWNs; }<END_MOD>
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction(org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getVmTemplateId(), org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getCompensationContext()); if (!(getTemplateDisks().isEmpty())) { MoveOrCopyAllImageGroups(); } else { endVmTemplateRelatedOps(); } org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.setSucceeded(true); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAll() { try { com.woorea.openstack.quantum.model.Networks networks = getClient().networks().list().execute(); return map(networks.getList()); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.<START_MOD>EngineException<END_MOD>(org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD>.PROVIDER_FAILURE, e); } }
@java.lang.Override public void initializeHandlers() { super.initializeHandlers(); final org.ovirt.engine.ui.uicommonweb.models.hosts.HostGeneralModel model = getModelProvider().getModel(); updateAlerts(getView(), model); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { if (args.propertyName.contains("Alert")) { updateAlerts(getView(), model); } } }); }
protected void map(java.sql.ResultSet rs, org.ovirt.engine.core.common.businessentities.HostDevice device) throws java.sql.SQLException { device.setHostId(org.ovirt.engine.core.dao.HostDeviceDaoImpl.BaseHostDeviceRowMapper.getGuid(rs, "host_id")); device.setDeviceName(rs.getString("device_name")); device.setParentDeviceName(rs.getString("parent_device_name")); device.setCapability(rs.getString("capability")); device.setIommuGroup(((java.lang.Integer) (rs.getObject("iommu_group")))); device.setProductName(rs.getString("product_name")); device.setProductId(rs.getString("product_id")); device.setVendorName(rs.getString("vendor_name")); device.setVendorId(rs.getString("vendor_id")); device.setParentPhysicalFunction(rs.getString("physfn")); device.setTotalVirtualFunctions(((java.lang.Integer) (rs.getObject("total_vfs")))); device.setNetworkInterfaceName(rs.getString("net_iface_name")); device.<START_MOD>setAssignable(rs.getBoolean("is_assignable")); device.<END_MOD>setVmId(org.ovirt.engine.core.dao.HostDeviceDaoImpl.BaseHostDeviceRowMapper.getGuid(rs, "vm_id")); }
public void setModel(M model) { this.model = model; getModel().<START_MOD>getItemsChangedEvent<END_MOD>().addListener(( ev, sender, args) -> <START_MOD>{ if ((selectionChangedHandler) != null) { selectionChangedHandler.removeHandler(); } getModel().getSelectionModel().clear(); List<org.ovirt.engine.ui.common.widget.listgroup.T> items = getModel().getItemsAsList(); selectedIndexes.forEach(( selectedIndex) -> { if ((selectedIndex > (-1)) && (selectedIndex < (items.size()))) { getModel().getSelectionModel().setSelected(items.get(selectedIndex), true); } }); <END_MOD>updateInfoPanel()<START_MOD>; selectionChangedHandler = selectionModel.addSelectionChangeHandler(( e<END_MOD>) -> <START_MOD>processSelectionChanged()); }); }<END_MOD>
protected void updateCpuPinningVisibility() { if ((getModel().<START_MOD>getSelectedCluster<END_MOD>()) != null) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = <START_MOD>getModel().getSelectedCluster(<END_MOD>); java.lang.String compatibilityVersion = cluster.getcompatibility_version().toString(); boolean hasCpuPinning = java.lang.Boolean.FALSE.equals(getModel().getIsAutoAssign().getEntity()); if (java.lang.Boolean.FALSE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigValuePreConverted(ConfigurationValues.CpuPinningEnabled, compatibilityVersion))) { hasCpuPinning = false; } else if ((java.lang.Boolean.FALSE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigValuePreConverted(ConfigurationValues.CpuPinMigrationEnabled, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()))) && (isVmMigratable())) { hasCpuPinning = false; } getModel().getCpuPinning().setIsChangable(hasCpuPinning); if (!hasCpuPinning) { getModel().getCpuPinning().setEntity(""); } } }
<START_MOD>private org.ovirt.engine.core.common.businessentities.VM mockVm(org.ovirt.engine.core.common.businessentities.GraphicsType graphicsType) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setId(Guid.Empty); vm.getGraphicsInfos().put(graphicsType, new org.ovirt.engine.core.common.businessentities.GraphicsInfo().setIp("host").setPort(5901)); return vm; }<END_MOD>
public static void handleTooltipEvent(com.google.gwt.dom.client.Element parent, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event) { }
@org.junit.Test public void updateWithLowerVersionThanHosts() { createCommandWithDefaultVdsGroup(); setupCpu(); VdsExistWithHigherVersion(); architectureIsUpdatable(); canDoActionFailedWithReason(<START_MOD>EngineMessages<END_MOD>.VDS_GROUP_CANNOT_UPDATE_COMPATIBILITY_VERSION_WITH_LOWER_HOSTS); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Storage(s) java.lang.String removeStoragesTitle();
<START_MOD>public long getNewDiskSizeInGB() { org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk = ((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (getNewDisk())); return (cinderDisk.getSize()) / ((1024 * 1024) * 1024); }<END_MOD>
public static org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy getFromStorageDomainId(org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = getDbFacade().getStorageDomainStaticDao().get(storageDomainId); if (storageDomainStatic != null) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomainStatic.getStorage())); return org.ovirt.engine.core.bll.provider.<START_MOD>storage<END_MOD>.<START_MOD>OpenStackImageProviderProxy.providerProxyFactory<END_MOD>.create(provider); } return null; }
<START_MOD>private java.util.Map<java.lang.String, java.lang.Object>[] getVmInfo(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change change) { if (((change.vdsId) == null) || (change.vmsToUpdate.isEmpty())) { return null; } java.util.Map<java.lang.String, java.lang.Object>[] result = new java.util.Map[0]; org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(change.vdsId); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = getResourceManager().runVdsCommand(VDSCommandType.FullList, new org.ovirt.engine.core.common.vdscommands.FullListVDSCommandParameters(vds, change.vmsToUpdate)); if (vdsReturnValue.getSucceeded()) { result = ((java.util.Map<java.lang.String, java.lang.Object>[]) (vdsReturnValue.getReturnValue())); } return result; }<END_MOD>
<START_MOD>protected org.ovirt.engine.core.common.businessentities.storage.Disk getDisk() { if ((disk) == null) { disk = org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskDao().get(org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getParameters().getImageId()); } return disk; }<END_MOD>
<START_MOD>@java.lang.Override protected void endSuccessfully() { endChildCommands(); addStorageDomainOvfInfoToDbIfNeeded(((org.ovirt.engine.core.common.action.AddImageFromScratchParameters) (org.ovirt.engine.core.bll.CreateOvfVolumeForStorageDomainCommand.getParameters().getImagesParameters().get(0))).getDiskInfo().getId()); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.ProccessOvfUpdateForStorageDomain, org.ovirt.engine.core.bll.CreateOvfVolumeForStorageDomainCommand.getParameters()); org.ovirt.engine.core.bll.CreateOvfVolumeForStorageDomainCommand.setSucceeded(true); }<END_MOD>
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS networkQoS) { return getCustomMapSqlParameterSource().addValue("id", networkQoS.getId()).addValue("name", networkQoS.getName()).addValue("storage_pool_id", networkQoS.getStoragePoolId()).addValue("inbound_average", networkQoS.getInboundAverage()).addValue("inbound_peak", networkQoS.getInboundPeak()).addValue("inbound_burst", networkQoS.getInboundBurst()).addValue("outbound_average", networkQoS.getOutboundAverage()).addValue("outbound_peak", networkQoS.getOutboundPeak()).addValue("outbound_burst", networkQoS.getOutboundBurst()); }
@org.junit.Test public void invalidCpuSelection() { createCommandWithDefaultVdsGroup(); canDoActionFailedWithReason(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_CPU_NOT_FOUND); }
<START_MOD>private boolean isaMultipleGatewaysSupported(java.lang.String version) { return (java.lang.Boolean.TRUE) == (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.MultipleGatewaysSupported, version)); }<END_MOD>
protected org.ovirt.engine.core.common.businessentities.VmTemplate getTemplateEntity() { org.ovirt.engine.core.common.businessentities.VmTemplate entity = control.createMock(org.ovirt.engine.core.common.businessentities.VmTemplate.class); expect(entity.getId()).andReturn(GUIDS[1]).anyTimes(); expect(entity.getVdsGroupId()).andReturn(GUIDS[2]).anyTimes(); expect(entity.getName()).andReturn(NAMES[1]).anyTimes(); expect(entity.getDescription()).andReturn(DESCRIPTIONS[1]).anyTimes(); expect(entity.getNumOfCpus()).andReturn(8).anyTimes(); expect(entity.getNumOfSockets()).andReturn(2).anyTimes(); expect(entity.getDefaultDisplayType()).andReturn(DisplayType.<START_MOD>vga<END_MOD>).anyTimes(); expect(entity.getNumOfMonitors()).andReturn(2).anyTimes(); expect(entity.getVmType()).andReturn(VmType.Server).anyTimes(); return entity; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Tags> getAll() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource(); return getCallsHandler().executeReadList("GetAllFromtags", org.ovirt.engine.core.dao.<START_MOD>TagDAOImpl<END_MOD>.TagRowMapper.instance, parameterSource); }
<START_MOD>protected void verifyModel(org.ovirt.engine.api.model.Cdrom model, int index) { org.ovirt.engine.api.restapi.resource.BackendTemplateCdromsResourceTest.verifyModelWithIso(model, org.ovirt.engine.api.restapi.resource.BackendTemplateCdromsResourceTest.ISO_PATH); verifyLinks(model); }<END_MOD>
@java.lang.Override public void render(org.ovirt.engine.ui.userportal.widget.extended.vm.Context context, org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel model, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb<START_MOD>, java.lang.String id<END_MOD>) { sb.append(org.ovirt.engine.ui.userportal.widget.extended.vm.AbstractConsoleButtonCell.template.consoleButton(<START_MOD>id<END_MOD>, (shouldRenderCell(model) ? enabledCss : disabledCss))); }
private void mockJobSubjectEntityDao(org.ovirt.engine.core.compat.Guid jobId) { when(jobSubjectEntityDao.getJobSubjectEntityByJobId(eq(jobId))).thenReturn(org.ovirt.engine.core.bll.job.JobRepositoryTest.JOB_SUBJECT_ENTITIES_MAP); when(jobSubjectEntityDao.getJobIdByEntityId(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.<START_MOD>Collections<END_MOD>.<org.ovirt.engine.core.compat.Guid><START_MOD>singletonList<END_MOD>(jobId)); }
<START_MOD>public void copyKeysDataTo(ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row13Struct other) { other.var_name = this.var_name; }<END_MOD>
<START_MOD>public void setBalloonEnabled(boolean isBallonEnabled) { mVmStatic.setBalloonEnabled(isBallonEnabled); OnPropertyChanged(new org.ovirt.engine.core.compat.PropertyChangedEventArgs("is_balloon_enabled")); }<END_MOD>
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass()) != (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.DbUser other = ((org.ovirt.engine.core.common.businessentities.DbUser) (obj)); return ((((((((((((org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(id, other.id)) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(department, other.department))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(desktopDevice, other.desktopDevice))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(domain, other.domain))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(email, other.email))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(groups, other.groups))) && ((lastAdminCheckStatus) == (other.lastAdminCheckStatus))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(name, other.name))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(note, other.note))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(role, other.role))) && ((status) == (other.status))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(surname, other.surname))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(username, other.username)); }
private void preview() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (getEntity())); if (vm == null) { return; } org.ovirt.engine.core.common.businessentities.Snapshot snapshot = ((org.ovirt.engine.core.common.businessentities.Snapshot) (getSelectedItem())); if ((!(isMemorySnapshotSupported())) || (snapshot.getMemoryVolume().isEmpty())) { org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.TryBackToAllSnapshotsOfVm, new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vm.getId(), snapshot.getId()), null); } else { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().previewSnapshotTitle()); model.setHashName("preview_snapshot"); model.<START_MOD>setHelpTag(model.getHashName(), ""); model.<END_MOD>getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("OnPreview", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true)); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()).setIsCancel(true); model.getCommands().add(cancelCommand); model.setCancelCommand(cancelCommand); model.setCloseCommand(new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()).setIsCancel(true)); } }
protected boolean hasWatchdog(org.ovirt.engine.core.compat.Guid vmId) { return <START_MOD>getVmDeviceUtils()<END_MOD>.hasWatchdog(vmId); }
@java.lang.Override protected void executeCommand() { if (shouldSkipCommandExecutionCached()) { org.ovirt.engine.core.bll.VmCommand.setSucceeded(true); return; } <START_MOD>registerHeOvfUpdate(); <END_MOD>executeVmCommand(); }
@java.lang.Override protected void logToAudit() {<START_MOD> super.logToAudit();<END_MOD> org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLogableBase.addCustomValue("message", org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.getReturnStatus().message); auditLogDirector.log(auditLogableBase, AuditLogType.IRS_BROKER_COMMAND_FAILURE); }
@java.lang.Override public void updateInterface(<START_MOD>int osId, <END_MOD>org.ovirt.engine.core.compat.Version clusterVersion) { <START_MOD>org<END_MOD>.<START_MOD>ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery<END_MOD>();<START_MOD> asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) {<END_MOD> getDiskInterface().setSelectedItem(getDisk().getDiskInterface()); }<START_MOD> }; updateInterface(osId, clusterVersion, asyncQuery); }<END_MOD>
<START_MOD>@org.junit.Test(expected = java.io.IOException.class) public void testCommandNonZero() throws java.lang.Exception { client.execute("false", null, null, null); }<END_MOD>
<START_MOD>@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getMainModel().getGetCapabilitiesCommand(); }<END_MOD>
protected boolean checkSingleQxlDisplay() { if (!(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getSingleQxlPci())) { return true; } return org.ovirt.engine.core.bll.VmHandler.isSingleQxlDeviceLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getDefaultDisplayType(), org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getOs(), org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().<START_MOD>getValidateMessages<END_MOD>(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); }
public static java.util.List<org.ovirt.engine.<START_MOD>api.extensions.ExtMap> findGroupRecordsByIds(final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension, final java.lang.String namespace, final java.util.List<java.lang.String> ids, final boolean groupsResolving, final boolean groupsResolvingRecursive) { java.util.List<org.ovirt.engine.api.extensions.ExtMap> results = new java.util.ArrayList<>(); for (java.util.List<java.lang.String> batch : org.ovirt.engine.<END_MOD>core.aaa.<START_MOD>SearchQueryParsingUtils.getIdsBatches(<END_MOD>extension<START_MOD>.getContext(), ids)) { results.addAll(org.ovirt.engine.core.aaa.AuthzUtils.queryPrincipalRecords(extension,<END_MOD> namespace, org.ovirt.engine.core.aaa.<START_MOD>SearchQueryParsingUtils.generateQueryMap(<END_MOD>batch<START_MOD>, Authz.<END_MOD>QueryEntity.GROUP), <START_MOD>groupsResolving, groupsResolvingRecursive<END_MOD>)); } return results; }
@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { updateDefaultHost(); updateCustomPropertySheet(); updateMinAllocatedMemory(); updateNumOfSockets(); if ((getModel().getTemplate().getSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel().getTemplate().getSelectedItem(); updateQuotaByCluster(template.getQuotaId(), template.getQuotaName()); } updateCpuPinningVisibility(); updateTemplate(); updateOSValues(); updateMemoryBalloon(); updateCpuSharesAvailability(); updateVirtioScsiAvailability(); }
<START_MOD>private static org.ovirt.engine.api.model.MacPool.Ranges.Range mapRange(org.ovirt.engine.core.common.businessentities.MacRange range) { final org.ovirt.engine.api.model.MacPool.Ranges.Range model = new org.ovirt.engine.api.model.MacPool.Ranges.Range(); model.setFrom(range.getMacFrom()); model.setTo(range.getMacTo()); model.setComment(range.getComment()); return model; }<END_MOD>
protected void updateInputTitle(java.util.ArrayList<java.lang.String> grayOutReasons, com.google.gwt.dom.client.Element input) { java.lang.StringBuilder title = new java.lang.StringBuilder(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.empty()); for (java.lang.String reason : grayOutReasons) { title.append(reason).append(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.space()); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(title.toString(), input); }
public void updateMigrationAvailability() { java.lang.Boolean haHost = getModel().getIsHighlyAvailable().getEntity(); <START_MOD>int pinToHostSize = getModel().getDefaultHost().getItems().size(); <END_MOD>if (haHost<START_MOD> && (pinToHostSize < 2)<END_MOD>) { getModel().getMigrationMode().setChangeProhibitionReason(constants.hostIsHa()); getModel().getMigrationMode().setSelectedItem(MigrationSupport.MIGRATABLE); } getModel().getMigrationMode().setIsChangeable((<START_MOD>(<END_MOD>!haHost<START_MOD>) || (pinToHostSize >= 2)<END_MOD>)); }
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.StopGlusterVolumeProfile, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeVDSParameters(upServer.getId(), getGlusterVolumeName())); setSucceeded(returnValue.getSucceeded()); if (!(getSucceeded())) { handleVdsError(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP_FAILED, returnValue.getVdsError().getMessage()); return; } }<END_MOD>
private void detach() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().detachStorageTitle()); model.setHashName("detach_storage");<START_MOD> model.setHelpTag(model.getHashName(),   > Data Center > Detach Storage<END_MOD> model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().areYouSureYouWantDetachStorageFromDcsMsg()); java.util.ArrayList<java.lang.String> items = new java.util.ArrayList<java.lang.String>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.StorageDomain a = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (item)); items.add(a.getStoragePoolName()); } model.setItems(items); if (containsLocalStorage(model)) { model.getLatch().setIsAvailable(true); model.getLatch().setIsChangable(true); model.setNote(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().detachNote(getLocalStoragesFormattedString())); } org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnDetach", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
@java.lang.Override protected void ExecuteVdsBrokerCommand() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>GetValue(ConfigValues.SendVmTicketUID, org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getVds().getVdsGroupCompatibilityVersion().toString())) { java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>(); params.put("userName", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getUserName()); params.put("userId", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getUserId().toString()); status = org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getBroker().setVmTicket(mVmId.toString(), mTicket, java.lang.Integer<START_MOD>.valueOf<END_MOD>(mValidTime).toString(), connectionAction, params); } else { status = org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getBroker().setVmTicket(mVmId.toString(), mTicket, java.lang.Integer<START_MOD>.valueOf<END_MOD>(mValidTime).toString()); } org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.ProceedProxyReturnValue(); }
public static void GetClusterServerMemoryOverCommit(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 0; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommitForServers, org.ovirt.engine.core.common.config.<START_MOD>ConfigCommon.defaultConfigurationVersion<END_MOD>), aQuery); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, hostName, consoleAddress, name, otpValidity, pmEnabled, pmKdumpDetection, port, protocol, sshPort, sshUsername, serverSslEnabled, uniqueId, clusterId, vdsStrength, vdsType, disablePowerManagementPolicy, hostProviderId<START_MOD>, currentKernelCmdline, kernelCmdlineParsable, lastStoredKernelCmdline, kernelCmdlineIommu, kernelCmdlineKvmNested, kernelCmdlinePciRealloc, kernelCmdlineUnsafeInterrupts<END_MOD>); }
private static java.lang.String generateDiskDescriptionJsonEntry(java.lang.String diskDescription) { return org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>MetadataDiskDescriptionHandler.getInstance().generateJsonField("DiskDescription", diskDescription); }
<START_MOD>com.google.gwt.user.client.ui.HasEnabled getCustomMigrationBandwidthLimitEditor();<END_MOD>
private void reportServerStatus(boolean isResponsive) { boolean statusChanged; boolean lastServerStatus = isServerUp; isServerUp = isResponsive; statusChanged = lastServerStatus ^ isResponsive; if (statusChanged || (repeatNonResponsiveNotification)) { if (isResponsive) { if (statusChanged) { insertEventIntoAuditLogSafe(AuditLogType.VDC_START, AuditLogSeverity.NORMAL, org.ovirt.engine.core.notifier.EngineMonitorService.ENGINE_RESPONDING_MESSAGE,   auditing event down (for responsive server). } } else { if (new java.io.File(pidFile).exists()) { insertEventIntoAuditLogSafe(AuditLogType.VDC_STOP, AuditLogSeverity.ERROR, org.ovirt.engine.core.notifier.EngineMonitorService.ENGINE_NOT_RESPONDING_ERROR,   auditing event up (for crashed non<START_MOD> <END_MOD>responsive server). } else { insertEventIntoAuditLogSafe(AuditLogType.VDC_STOP, AuditLogSeverity.WARNING, org.ovirt.engine.core.notifier.EngineMonitorService.ENGINE_NOT_RESPONDING_ERROR,   auditing event up (for stopped non<START_MOD> <END_MOD>responsive server). } } } }
@java.lang.Override public void onFailure(final <START_MOD>org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.LoginUserParameters> operation, final <END_MOD>java.lang.Throwable caught) { if (ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ( to execute RunQuery:   + caught), caught); <START_MOD>getEventsHandler().runQueryFailed(null); failureEventHandler(caught); if (callback.isHandleFailure()) { <END_MOD>org.ovirt.engine.ui.frontend.Frontend.<START_MOD>getInstance().setLoggedInUser<END_MOD>(null); callback.<START_MOD>getDel().onSuccess(callback.getModel(), <END_MOD>null); } }
@java.lang.Override public void migrateVM(java.util.List<org.ovirt.engine.core.compat.Guid> initialHosts, org.ovirt.engine.core.compat.Guid vmToMigrate<START_MOD>, org.ovirt.engine.core.common.migration.MigrationReason reason<END_MOD>) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters(false, vmToMigrate<START_MOD>, reason<END_MOD>); parameters.setInitialHosts(new java.util.ArrayList(initialHosts)); backendInternal.runInternalAction(VdcActionType.MigrateVm, parameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); }
<START_MOD>@java.lang.Override protected void onReset() { if (!(placeManager.isMainSectionBasicPlaceVisible())) { header.setGuideUrl(basicGuideUrl); } else { header.setGuideUrl(extendedGuideUrl); } }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> getVmDeviceByType(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { return getCallsHandler().executeReadList("GetVmDeviceByType", createEntityRowMapper(), getCustomMapSqlParameterSource().addValue("type", type.getValue()).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }<END_MOD>
<START_MOD>public boolean isConfigured(java.lang.String property) { return !(org.apache.commons.lang.StringUtils.isEmpty(getProperty(property))); }<END_MOD>
@org.junit.Test public void testJsonDiskDescription() throws java.io.IOException { <START_MOD>disk1.setDiskAlias<END_MOD>("DiskAlias"<START_MOD>);<END_MOD> <START_MOD>disk1.setDiskDescription(<END_MOD>"DiskDescription"); <START_MOD>assertDiskDescriptionMap(); <END_MOD>}
<START_MOD>@org.junit.Test public void testCDAStoragePoolNotUp() { storagePool.setstatus(StoragePoolStatus.Uninitialized); assertFalse("canDoAction did not fail on a Storage Pool which is not up", command.canDoAction()); org.ovirt.engine.core.bll.CommandAssertUtils.checkMessagesContains(command, VdcBllMessages.CANNOT_FORCE_SELECT_SPM_STORAGE_POOL_NOT_UP); }<END_MOD>
protected void readHardwareSection(org.ovirt.engine.core.compat.backendcompat.XmlNode section) {<START_MOD> boolean readVirtioSerial = false;<END_MOD> for (org.ovirt.engine.core.compat.backendcompat.XmlNode node : section.SelectNodes("Item")) { switch (node.SelectSingleNode("rasd:ResourceType", _xmlNS).innerText) { case OvfHardware.CPU : readCpuItem(node); break; case OvfHardware.Memory : readMemoryItem(node); break; case OvfHardware.DiskImage : readDiskImageItem(node); break; case OvfHardware.Network : readNetworkItem(node); break; case OvfHardware.USB : readUsbItem(node); break; case OvfHardware.Monitor : readMonitorItem(node); break; case OvfHardware.CD : readCdItem(node); break; case OvfHardware.OTHER : <START_MOD>org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = <END_MOD>readOtherHardwareItem(node); <START_MOD>readVirtioSerial = (readVirtioSerial) ? true : (org.ovirt.engine.core.common.utils.VmDeviceType.VIRTIOSERIAL) == (org.ovirt.engine.core.common.utils.VmDeviceType.getByName(vmDevice.getDevice())); <END_MOD>break; } } <START_MOD>if (!readVirtioSerial) { addManagedVmDevice(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.createVirtioSerialDeviceForVm(vmBase.getId())); <END_MOD>}<START_MOD> }<END_MOD>
<START_MOD>public static java.lang.String getVlanDeviceName(java.lang.String underlyingNic, org.ovirt.engine.core.common.businessentities.network.Network network) { return (underlyingNic + ".") + (network.getVlanId()); }<END_MOD>
<START_MOD>private java.util.Set<org.ovirt.engine.core.compat.Guid> findSnapshotsWithOnlyIllegalDisks() { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> newerSnapshots = getNewerSnapshots(snapshot); java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotsToRemove = new java.util.HashSet<>(); newerSnapshots.forEach(( snapshot) -> { org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); if (vm != null) { boolean shouldRemove = (!(vm.getImages().isEmpty())) && (vm.getImages().stream().allMatch(( diskImage) -> (diskImage.getImageStatus()) == ImageStatus.ILLEGAL)); if (shouldRemove) { snapshotsToRemove.add(snapshot.getId()); } } }); return snapshotsToRemove; }<END_MOD>
<START_MOD>@java.lang.Override public void setId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable) { logable.setVmTemplateId(mOldTemplate.getId()); }<END_MOD>
public static void GetLocalFSPath(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.String) (source)) : ""; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.RhevhLocalFSPath, org.ovirt.engine.core.common.config.<START_MOD>ConfigCommon<END_MOD>.<START_MOD>defaultConfigurationVersion<END_MOD>), aQuery); }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), createVmInternalData()); pair.getSecond().getVmDynamic().setStatus(VMStatus.Up); pair.getSecond().getVmDynamic().setRunOnVds(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs.DST_HOST_ID); return pair; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmTemplate getTemplateWithLatestVersionInChain(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeRead("GetTemplateWithLatestVersionInChain", org.ovirt.engine.core.dao.<START_MOD>VmTemplateDAOImpl<END_MOD>.VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("template_id", id)); }
<START_MOD>@org.ovirt.engine.ui.common.DefaultStringValue("Network") java.lang.String cloudInitNetworkLabel();<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { runVdsCommand(VDSCommandType.SparsifyImage, new org.ovirt.engine.core.common.vdscommands.SparsifyImageVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getImageId(), org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getId())); }<END_MOD>
<START_MOD>@org.junit.Test public void differentCluster() throws java.lang.Exception { parameters.put(HostedEngineMemoryReservationFilterPolicyUnit.SPARES_COUNT, "5"); hostedEngine.setVmMemSizeMb(7000); hostedEngine.setVdsGroupId(Guid.SYSTEM); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = uut.filter(hosts, vm, parameters, messages); assertEquals(5, result.size()); }<END_MOD>
public <START_MOD>boolean<END_MOD> AddMessage(java.lang.String message) { <START_MOD>boolean error = false; <END_MOD>if (org.apache.commons.lang.StringUtils.isEmpty(message)) { return<START_MOD> error<END_MOD>; } java.lang.String[] msgs = message.split("[\\n]", (-1)); if ((msgs.length) > 1) { for (java.lang.String msg : msgs) { <START_MOD>error = (<END_MOD>AddMessage(msg)<START_MOD>) || error<END_MOD>; } return<START_MOD> error<END_MOD>; } if (org.apache.commons.lang.StringUtils.isNotEmpty(message)) { if ((message.charAt(0)) == '<') { try {<START_MOD> error =<END_MOD> parseMessage(message); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.InstallerMessages.log.errorFormat( of Host. Received illegal XML from Host. Message: {1}, Exception: {2} message, e.toString()); } } else { org.ovirt.engine.core.bll.InstallerMessages.log.info(( message:   + message)); } } <START_MOD>return error; }<END_MOD>
private void UpdateVmNetworks() { <START_MOD>if (!<END_MOD>(org.ovirt.engine.core.bll.UpdateVmCommand.<START_MOD>getVm()<END_MOD>.getvds_group_id().equals(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getvds_group_id()))) { java.util.List<org.ovirt.engine.core.common.businessentities.network> networks = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDAO().getAllForCluster(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getvds_group_id()); java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> interfaces = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getId()); for (final org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : interfaces) { org.ovirt.engine.core.common.businessentities.network net = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(networks, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.network>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.network n) { return iface.getNetworkName().equals(n.getname()); } }); if (net == null) { iface.setNetworkName(null); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDAO().update(iface); } } } }
@org.junit.Test public void vnicProfileNameTakenByDifferentVnicProfile() throws java.lang.Exception { vnicProfileAvailableTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VNIC_PROFILE_NAME_IN_USE), getSingletonNamedVnicProfileList(DEFAULT_VNIC_PROFILE_NAME, OTHER_GUID)); }
<START_MOD>protected void initTableColumns(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { deviceTable.addColumn(new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.gluster.StorageDevice entity) { return entity.getName(); } }, constants.deviceName()); deviceTable.addColumnAndSetWidth(new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.gluster.StorageDevice entity) { return entity.getDevType(); } }, constants.deviceType(), "100px"); deviceTable.addColumnAndSetWidth(new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.gluster.StorageDevice entity) { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit, java.lang.Double> convertedSize = org.ovirt.engine.core.common.utils.SizeConverter.autoConvert(entity.getSize(), SizeUnit.MB); return ((formatSize(convertedSize.getSecond())) + " ") + (convertedSize.getFirst().toString()); } }, constants.size(), "100px"); }<END_MOD>
<START_MOD>@java.lang.Override protected void OnEntityChanged() { super.OnEntityChanged(); if ((super.getEntity()) != null) { UpdateProperties(); } }<END_MOD>
private void prepareVmToPassCanDoAction() { vmStatic.setName("vm1"); vmStatic.setMemSizeMb(256); vmStatic.setSingleQxlPci(false); mockVmDaoGetVm(); mockSameNameQuery(false); mockValidateCustomProperties(); mockValidatePciAndIdeLimit(); <START_MOD>mockGraphicsDevice(); <END_MOD>}
private org.ovirt.engine.core.common.businessentities.network.IpConfiguration createIpConfiguration() { org.ovirt.engine.core.common.businessentities.network.IPv4Address address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); address.setAddress(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IP_ADDRESS); address.setNetmask(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.NETMASK); address.setGateway(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.GATEWAY); address.setBootProtocol(<START_MOD>Ipv4BootProtocol<END_MOD>.STATIC_IP); org.ovirt.engine.core.common.businessentities.network.IpConfiguration result = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); result.setIPv4Addresses(java.util.Collections.singletonList(address)); return result; }
<START_MOD>private void loadLine(java.lang.String line) throws java.io.IOException { java.util.regex.Matcher commentMatch = org.ovirt.engine.core.utils.LocalConfig.COMMENT_EXPR.matcher(line); if (commentMatch.find()) { line = (line.substring(0, commentMatch.start())) + (line.substring(commentMatch.end())); } java.util.regex.Matcher blankMatch = org.ovirt.engine.core.utils.LocalConfig.BLANK_EXPR.matcher(line); if (blankMatch.find()) { return; } java.util.regex.Matcher keyValueMatch = org.ovirt.engine.core.utils.LocalConfig.VALUE_EXPR.matcher(line); java.lang.System.out.println((("line: -" + line) + "-")); if (!(keyValueMatch.find())) { return; } java.lang.String key = keyValueMatch.group(1); java.lang.System.out.println((("key: -" + key) + "-")); java.lang.String value = keyValueMatch.group(2); java.lang.System.out.println((("value: -" + value) + "-")); if ((((value.length()) >= 2) && (value.startsWith("\""))) && (value.endsWith("\""))) { value = value.substring(1, ((value.length()) - 1)); } for (; ;) { java.util.regex.Matcher refMatch = org.ovirt.engine.core.utils.LocalConfig.REF_EXPR.matcher(value); if (!(refMatch.find())) { break; } java.lang.String refKey = refMatch.group(1); java.lang.String refValue = values.get(refKey); if (refValue == null) { break; } value = ((value.substring(0, refMatch.start())) + refValue) + (value.substring(refMatch.end())); } values.put(key, value); }<END_MOD>
@java.lang.Override protected void onLoadingStateChanged(com.google.gwt.user.cellview.client.LoadingStateChangeEvent.LoadingState state) { super.onLoadingStateChanged(state); enforceScrollPosition(); if (state == (com.google.gwt.user.cellview.client.LoadingStateChangeEvent.LoadingState.LOADING)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { doAutoSelect = true; } }); } <START_MOD>else if (state == (com.google.gwt.user.cellview.client.LoadingStateChangeEvent.LoadingState.LOADED)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { if ((rowVisitor) != null) { com.google.gwt.view.client.Range visibleRange = getVisibleRange(); int start = visibleRange.getStart(); int length = visibleRange.getLength(); for (int i = start; i < (start + length); i++) { com.google.gwt.dom.client.TableRowElement row = getChildElement((i - start)); T item = getVisibleItem(i); rowVisitor.visit(row, item); } } } }); } }<END_MOD>
public static org.ovirt.engine.core.bll.ValidationResult canRunActionOnNonManagedVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.action.VdcActionType actionType) { org.ovirt.engine.core.bll.ValidationResult validationResult = ValidationResult.VALID; if (!(org.ovirt.engine.core.<START_MOD>common<END_MOD>.<START_MOD>validation<END_MOD>.<START_MOD>VmActionValidator<END_MOD>.<START_MOD>isCommandAllowed<END_MOD>(vm.<START_MOD>getOrigin<END_MOD>()<START_MOD>,<END_MOD> actionType))) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CANNOT_RUN_ACTION_ON_NON_MANAGED_VM); } return validationResult; }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> thisLocks = java.util.Collections.singletonMap(getSourceVmFromDb().getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_OBJECT_LOCKED)); java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> parentLocks = super.getExclusiveLocks(); if (parentLocks == null) { return thisLocks; } java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> union = new java.util.HashMap<>(); union.putAll(parentLocks); union.putAll(thisLocks); return union; }
<START_MOD>private void writeHostDevice(org.ovirt.engine.core.common.businessentities.VmHostDevice device) { java.lang.String deviceName = device.getDevice(); java.lang.String type = deviceName.substring(0, deviceName.indexOf('_')); switch (type) { case "pci" : writePciHostDevice(device); break; } }<END_MOD>
private java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> prepareSnapshotConfigWithoutImage(org.ovirt.engine.core.compat.Guid imageGroupToRemove) { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> result = new java.util.LinkedList<org.ovirt.engine.core.common.businessentities.Snapshot>(); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> snapshotDisks = org.ovirt.engine.core.bll.RemoveImageCommand.getDiskImageDao().getAllSnapshotsForImageGroup(imageGroupToRemove); for (org.ovirt.engine.core.common.businessentities.DiskImage snapshotDisk : snapshotDisks) { org.ovirt.engine.core.compat.NGuid vmSnapshotId = snapshotDisk.getvm_snapshot_id(); if ((vmSnapshotId != null) && (!(Guid.Empty.equals(vmSnapshotId.getValue())))) { <START_MOD>lockSnapshotWithWait(vmSnapshotId.getValue()); final <END_MOD>org.ovirt.engine.core.common.businessentities.Snapshot updated = prepareSnapshotConfigWithoutImageSingleImage(vmSnapshotId.getValue(), snapshotDisk.getImageId()); if (updated != null) { result.add(updated); <START_MOD>org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Object>() { @java.lang.Override public java.lang.Object runInTransaction() { getSnapshotDao().update(updated);<END_MOD> return <START_MOD>null; } }); } freeSnapshotLock(); } } return <END_MOD>result; }
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("Host") java.lang.String numaHostLabel();<END_MOD>
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.EntityModel getPreventDeletion() { return privatePreventDeletion; }<END_MOD>
private org.ovirt.engine.core.common.businessentities.gluster.<START_MOD>GlusterStatus<END_MOD> getBrickStatus() { return (getGlusterVolume().getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.<START_MOD>GlusterStatus<END_MOD>.UP) ? org.ovirt.engine.core.common.businessentities.gluster.<START_MOD>GlusterStatus<END_MOD>.UP : org.ovirt.engine.core.common.businessentities.gluster.<START_MOD>GlusterStatus<END_MOD>.DOWN; }
<START_MOD>@java.lang.Override public int compare(java.lang.Comparable a, java.lang.Comparable b) { if (a == null) { return b == null ? 0 : nullFirst ? -1 : 1; } else if (b == null) { return nullFirst ? 1 : -1; } else { return a.compareTo(b); } }<END_MOD>
private void calculateNetworkImplementationDetailsAndAssertSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, boolean expectSync, boolean vmNet, int mtu, int vlanId, org.ovirt.engine.core.common.businessentities.network.NetworkQoS qos) { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork(vmNet, mtu, vlanId); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails = org.ovirt.engine.core.utils.NetworkUtils.calculateNetworkImplementationDetails(network, qos, iface); assertNotNull( implementation details should be filled. networkImplementationDetails); assertEquals((( implementation details should be   + (expectSync ? "in" :   of +   sync. expectSync, networkImplementationDetails.isInSync()); }
<START_MOD>private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> createHosts() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = new java.util.LinkedList<>(); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(org.ovirt.engine.core.bll.FenceProxyLocatorTest.OTHER_HOST_ID_1); vds.setVdsGroupId(org.ovirt.engine.core.bll.FenceProxyLocatorTest.OTHER_CLUSTER_ID); vds.setStoragePoolId(org.ovirt.engine.core.bll.FenceProxyLocatorTest.OTHER_DATACENTER_ID); vds.setVdsGroupCompatibilityVersion(Version.v3_5); hosts.add(vds); vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(org.ovirt.engine.core.bll.FenceProxyLocatorTest.OTHER_HOST_ID_2); vds.setVdsGroupId(org.ovirt.engine.core.bll.FenceProxyLocatorTest.OTHER_CLUSTER_ID); vds.setStoragePoolId(org.ovirt.engine.core.bll.FenceProxyLocatorTest.FENCED_HOST_DATACENTER_ID); vds.setVdsGroupCompatibilityVersion(Version.v3_5); hosts.add(vds); return hosts; }<END_MOD>
<START_MOD>@java.lang.Override protected boolean validate() { if (org.apache.commons.collections.CollectionUtils.isEmpty(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce())) { failValidation(EngineMessage.ACTION_TYPE_FAILED_PARAMETERS_INVALID); } if (!(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.checkStorageDomain())) { return false; } if (!(validateReduceDeviceSupported())) { return false; } if (!(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorageType().isBlockDomain())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); } if (!(validate(validateDevices()))) { return false; } if (!(checkStorageDomainStatus(StorageDomainStatus.Maintenance))) { return false; } if (!(initializeVds())) { return false; } return true; }<END_MOD>
public org.ovirt.engine.core.compat.Guid getStoragePoolId() { if ((<START_MOD>storagePoolId<END_MOD>) == null) { if ((_storagePool) != null) { <START_MOD>storagePoolId<END_MOD> = _storagePool.getId(); } else if ((getStorageDomain()) != null) { <START_MOD>storagePoolId<END_MOD> = getStorageDomain().getStoragePoolId(); } } return <START_MOD>storagePoolId<END_MOD>; }
<START_MOD>public static boolean isPublicKeysValid(java.lang.String publicKeys) { for (java.lang.String publicKey : publicKeys.split("\n")) { if (!(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isPublicKeyValid(publicKey))) { return false; } } return true; }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult ipConfiguredForStaticBootProtocol() { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration(); boolean failWhen = ((ipConfiguration != null) && ((ipConfiguration.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP))) && (unsetAddress(ipConfiguration)); return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.NETWORK_ADDR_MANDATORY_IN_STATIC_IP).when(failWhen); }
@java.lang.Override public void onSuccess(final java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase>> operationList, final java.util.List<org.ovirt.engine.core.common.action.VdcReturnValueBase> resultObject) { org.ovirt.engine.ui.frontend.Frontend.logger.finer( successfully executed runMultipleAction, determining result! java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> failed = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.action.VdcReturnValueBase v : resultObject) { if (!(v.<START_MOD>getValidate<END_MOD>())) { failed.add(v); } } if (showErrorDialog && (!(failed.isEmpty()))) { translateErrors(failed); getEventsHandler().runMultipleActionFailed(actionType, failed); } if (callback != null) { callback.executed(new org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult(actionType, parameters, resultObject, state)); } fireAsyncActionSucceededEvent(state); }
<START_MOD>org.ovirt.engine.core.compat.Guid createAsyncTask(org.ovirt.engine.core.common.action.VdcActionType parentCommand, org.ovirt.engine.core.common.VdcObjectType entityType, org.ovirt.engine.core.compat.Guid... entityIds);<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call() { setStorageDomain(null); setStoragePool(null); <START_MOD>boolean succeded = false; <END_MOD>if (canDoAction()) { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainPoolMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(getRecoveryStoragePoolParametersData().getNewMasterDomainId(), getRecoveryStoragePoolParametersData().getStoragePoolId(), org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().save(domainPoolMap); <START_MOD>getRecoveryStoragePoolParametersData().setVdsId(getVds().getId()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.ReconstructMasterDomain, getParameters()); succeded = ((returnVal.getActionReturnValue()) != null) ? ((java.lang.Boolean) (returnVal.getActionReturnValue())) : false; getStoragePoolDAO().updateStatus(<END_MOD>getStoragePool().<START_MOD>getId(), <END_MOD>StoragePoolStatus.Problematic); } return new org.ovirt.engine.core.common.eventqueue.EventResult(<START_MOD>succeded<END_MOD>, org.ovirt.engine.core.common.eventqueue.EventType.RECONSTRUCT); }
public void setiqn(java.lang.String value) { this.iqn = <START_MOD>getStringValueToSet(<END_MOD>value<START_MOD>)<END_MOD>; }
<START_MOD>private java.util.List<org.ovirt.engine.core.common.businessentities.VM> getSelectedVms() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>(); if ((getSelectedItems()) == null) { return vms; } for (java.lang.Object selectedItem : getSelectedItems()) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel itemModel = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel) (selectedItem)); org.ovirt.engine.core.common.businessentities.VM vm = itemModel.getVM(); if (vm == null) { continue; } vms.add(vm); } return vms; }<END_MOD>
@org.ovirt.engine.ui.frontend.DefaultStringValue( ${action} ${type}. Bond (id=${id}}) does not reference nic coherently. Nic name and id references different nic: nicId=${<START_MOD>referringId<END_MOD>} nicName=${<START_MOD>referringName<END_MOD>}}. java.lang.String BOND_REFERENCES_NICS_INCOHERENTLY();
public void newEntity() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel model = new org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newDataCenterTitle()); model.setHashName("new_data_center");<START_MOD> model.setHelpTag(model.getHashName(),   Center > New Data Center<END_MOD> model.setIsNew(true); model.getStorageTypeList().setSelectedItem(StorageType.NFS); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSave", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD>> setUpGroups() { java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD>> groups = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD>>(); for (int i = 0; i < (NAMES.length); i++) { groups.add(getEntity(i)); } return groups; }
public void logServerMessage(final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType) { logAuditMessage(null, null, server, logType, <START_MOD>new java.util.HashMap<java.lang.String, java.lang.String>()<END_MOD>); }
<START_MOD>protected void releaseLock() { org.ovirt.engine.core.bll.gluster.GlusterManager.lock.unlock(); }<END_MOD>
@org.junit.After public void tearDown() { java.util.Locale.setDefault(locale); org.ovirt.engine.api.restapi.invocation.CurrentManager.remove(); }
@org.ovirt.engine.ui.frontend.DefaultStringValue( <START_MOD>ovirtmgmt<END_MOD> is mandatory, it cannot be modified. java.lang.String NETWORK_DEFAULT_UPDATE_NAME_INVALID();
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { <START_MOD>this<END_MOD>.setWindow(null); }
<START_MOD>private void glusterHostRemove(org.ovirt.engine.core.compat.Guid sourceClusterId) { boolean forceAction = false; if ((getClusterUtils().hasServers(sourceClusterId)) && (!(getClusterUtils().hasVolumeOnServer(org.ovirt.engine.core.bll.ChangeVDSClusterCommand.getVdsId())))) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostRemove, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterHostRemoveVDSParameters(getClusterUtils().getUpServer(sourceClusterId).getId(), org.ovirt.engine.core.bll.ChangeVDSClusterCommand.getVds().gethost_name(), forceAction)); setSucceeded(returnValue.getSucceeded()); if (!(org.ovirt.engine.core.bll.ChangeVDSClusterCommand.getSucceeded())) { org.ovirt.engine.core.bll.ChangeVDSClusterCommand.getReturnValue().getFault().setError(returnValue.getVdsError().getCode()); org.ovirt.engine.core.bll.ChangeVDSClusterCommand.getReturnValue().getFault().setMessage(returnValue.getVdsError().getMessage()); errorType = org.ovirt.engine.core.common.AuditLogType.GLUSTER_HOST_REMOVE_FAILED; return; } } else { org.ovirt.engine.core.bll.ChangeVDSClusterCommand.setSucceeded(true); } }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__HOT_SET_CPUS); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM); <START_MOD>addCanDoActionMessage(java.lang.String.format( %1$s org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getVdsGroupCompatibilityVersion())); addCanDoActionMessage(java.lang.String.format( %1$s org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getClusterArch())); <END_MOD>}
<START_MOD>@org.junit.Before public void setUp() { setXmlResponse("storagedomains", 200, "<storage_domains/>"); startServer(); connection = testConnection(); storageDomainsService = connection.systemService().storageDomainsService(); }<END_MOD>
private void addVmsStatus(java.util.List<org.ovirt.engine.core.compat.Guid> vmAndTemplatesIds, java.util.Map<java.lang.String, java.lang.Object> data) { java.util.Map<java.lang.String, java.lang.Object> vmsStatus = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid vmId : vmAndTemplatesIds) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vmDynamicDao.get(vmId); if ((vmDynamic != <START_MOD>null) && ((vmDynamic.getStatus()) != <END_MOD>(org.ovirt.engine.core.common.businessentities.VMStatus.Down<START_MOD>)<END_MOD>)) { vmsStatus.put(vmId.toString(), vmDynamic.getStatus().getValue()); log.debug( - Add vm id '{}' with status: '{}' vmId, vmDynamic.getStatus()); } else { log.debug( - Skip <START_MOD>entity<END_MOD> id '{}' with status: '{}' vmId, vmDynamic.getStatus()); } } data.put(OvfInfoFileConstants.VmStatus, vmsStatus); }
public boolean equals(java.lang.Object other, boolean deepCompare) { if (other == (this)) { return true; } if ((other == null) || ((other.getClass()) != (getClass()))) { return false; } org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel otherModel = ((org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel) (other)); boolean result = true; if ((!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getType(), otherModel.getType()))) || (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(<START_MOD>org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel.<END_MOD>getEntity(), otherModel.getEntity())))) { result = false; } if ((result && ((!(getChildren().isEmpty())) || (!(otherModel.getChildren().isEmpty())))) && deepCompare) { if ((getChildren().size()) != (otherModel.getChildren().size())) { result = false; } else { for (int i = 0; i < (getChildren().size()); i++) { if (!(getChildren().get(i).equals(otherModel.getChildren().get(i), deepCompare))) { result = false; break; } } } } return result; }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if ((org.ovirt.engine.core.bll.RemoveVmPoolCommand.getVmPool()) == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.VM_POOL_NOT_FOUND); } return true; }
public void setKvmVersion(java.lang.String value) { mVdsDynamic.setKvmVersion(value); }
private boolean <START_MOD>validateManagementNetworkAttachment<END_MOD>() { final org.ovirt.engine.core.common.businessentities.network.Network managementNetwork; final org.ovirt.engine.core.compat.Guid managementNetworkId = org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getManagementNetworkId(); if (managementNetworkId == null) { managementNetwork = getDefaultManagementNetworkFinder().findDefaultManagementNetwork(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getStoragePoolId()); if (managementNetwork == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } } else { managementNetwork = networkDao.get(managementNetworkId); if (managementNetwork == null) { addValidationMessage(EngineMessage.NETWORK_NOT_EXISTS); return false; } } managementNetworkCluster = createManagementNetworkCluster(managementNetwork); final org.ovirt.engine.core.bll.network.cluster.UpdateClusterNetworkClusterValidator networkClusterValidator = createManagementNetworkClusterValidator(); return validate(networkClusterValidator.managementNetworkChange()); }
public static org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> FindNetworkByName(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> items, java.lang.String name) { for (org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> n : items) { if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(n.getname(), name)) { return n; } } return null; }
<START_MOD>private void addGlusterWebhook(org.ovirt.engine.core.common.businessentities.VDS vds) { try { backend.runInternalAction(VdcActionType.AddGlusterWebhookInternal, new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters(vds.getClusterId())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Could not refresh storage devices from gluster host '{}'", vds.getName()); } }<END_MOD>
<START_MOD>private void addBondToSlavesMappingForNewlyCreatedBonds(java.util.Map<java.lang.String, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>> result) { for (org.ovirt.engine.core.common.businessentities.network.Bond bond : params.getBonds()) { boolean isNewBond = (bond.getId()) == null; if (isNewBond) { java.lang.String bondName = bond.getName(); for (java.lang.String slaveName : bond.getSlaves()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slave = this.existingInterfacesMap.get(slaveName); org.ovirt.engine.core.utils.collections.MultiValueMapUtils.addToMap(bondName, slave, result, new org.ovirt.engine.core.utils.collections.MultiValueMapUtils.ListCreator<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>()); } } } }<END_MOD>
<START_MOD>public org.ovirt.engine.core.common.businessentities.VdsSelectionAlgorithm getClusterPolicy() { return clusterPolicy; }<END_MOD>
@java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase) (target)); java.util.HashMap<java.lang.String, java.lang.String> timeZones = <START_MOD>behavior.getTimezones(selectedTimeZone, <END_MOD>((java.util.HashMap<java.lang.String, java.lang.String>) (returnValue<START_MOD>)<END_MOD>)); cachedTimeZones.put(timezoneType, timeZones.entrySet()); behavior.PostUpdateTimeZone(selectedTimeZone); }
@java.lang.Override protected void postSaveAction(org.ovirt.engine.core.compat.Guid networkGuid, boolean succeeded) { super.postSaveAction(networkGuid, succeeded); if (!succeeded) { return; } org.ovirt.engine.core.compat.Guid networkId = ((getNetwork().getId()) == null) ? networkGuid : getNetwork().getId(); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> actionParameters1 = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.core.common.businessentities.VDSGroup attachNetworkToCluster : getClustersToAttach()) { org.ovirt.engine.core.common.businessentities.network.Network tempVar = new org.ovirt.engine.core.common.businessentities.network.Network(); tempVar.setId(networkId); tempVar.setName(getNetwork().getName()); <START_MOD>org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = new org.ovirt.engine.core.common.businessentities.network.NetworkCluster(); networkCluster.setRequired(((java.lang.Boolean) (getExport().getEntity()))); <END_MOD>tempVar.setCluster(<START_MOD>networkCluster<END_MOD>); actionParameters1.add(new org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter(attachNetworkToCluster, tempVar)); } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.AttachNetworkToVdsGroup, actionParameters1); }
private void setOvfVolumeDescription(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid volumeId, java.lang.String description) { org.ovirt.engine.core.common.vdscommands.SetVolumeDescriptionVDSCommandParameters vdsCommandParameters = new org.ovirt.engine.core.common.vdscommands.SetVolumeDescriptionVDSCommandParameters(storagePoolId, storageDomainId, diskId, volumeId, description); try { runVdsCommand(VDSCommandType.SetVolumeDescription, vdsCommandParameters); } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLogableBase.addCustomValue("DataCenterName", org.ovirt.engine.core.bll.ProcessOvfUpdateForStorageDomainCommand.getStoragePool().getName()); auditLogableBase.addCustomValue("StorageDomainName", storageDomain.getName()); auditLogableBase.addCustomValue("DiskId", diskId.toString()); <START_MOD>auditLogDirector<END_MOD>.log(auditLogableBase, AuditLogType.UPDATE_DESCRIPTION_FOR_OVF_STORE_FAILED); throw e; } }
public void setIScsiInitiatorName(java.lang.String value) { mVdsDynamic.setIScsiInitiatorName(value); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Target details are empty.") java.lang.String VALIDATION_STORAGE_CONNECTION_EMPTY_IQN_OR_CONN();<END_MOD>
private void restoreConfiguration(org.ovirt.engine.core.common.businessentities.Snapshot targetSnapshot) { org.ovirt.engine.core.bll.snapshots.SnapshotsManager snapshotsManager = new org.ovirt.engine.core.bll.snapshots.SnapshotsManager(); removedSnapshotId = getSnapshotDao().getId(org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVmId(), SnapshotType.ACTIVE); snapshotsToRemove.add(removedSnapshotId); snapshotsManager.removeAllIllegalDisks(removedSnapshotId, org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVmId()); snapshotsManager.attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVm(), targetSnapshot, targetSnapshot.getId(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.<START_MOD>getParameters().getImages(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.<END_MOD>getCompensationContext(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVm().getVdsGroupCompatibilityVersion(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getCurrentUser()); getSnapshotDao().remove(targetSnapshot.getId()); snapshotsManager.addActiveSnapshot(targetSnapshot.getId(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVm(), SnapshotStatus.LOCKED, targetSnapshot.getMemoryVolume(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.<START_MOD>getParameters().getImages(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.<END_MOD>getCompensationContext()); }
public java.lang.String getFingerprint(java.lang.String hostName) { org.ovirt.engine.core.utils.ssh.<START_MOD>SSHClient<END_MOD> client = null; try { client = connect(hostName); return client.getHostFingerprint(); } catch (java.io.IOException e) { log.error( not get server key return null; } finally { if (client != null) { client.disconnect(); } } }
@org.junit.Test public void nonZeroMtuWhenNotSupported() throws java.lang.Exception { mtuValidTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.NETWORK_MTU_OVERRIDE_NOT_SUPPORTED), 1, false); }
protected boolean checkIfDisksExist(java.lang.Iterable<org.ovirt.engine.core.common.businessentities.DiskImage> disksList) { <START_MOD>java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.compat.Guid>> imagesPerStorageDomain = new java.util.HashMap<>(); java.util.List<org.ovirt.engine.core.compat.Guid> images = new java.util.ArrayList<>(); <END_MOD>for (org.ovirt.engine.core.common.businessentities.DiskImage disk : disksList) { org.ovirt.engine.core.<START_MOD>compat.Guid targetStorageDomainId = imageToDestinationDomainMap.get(disk.getId()); if (imagesPerStorageDomain.containsKey(targetStorageDomainId)) { images = imagesPerStorageDomain.get(targetStorageDomainId); } else { org.ovirt.engine.core.<END_MOD>common.vdscommands.VDSReturnValue runVdsCommand = org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getBackend().getResourceManager().RunVdsCommand(VDSCommandType.<START_MOD>GetImagesList<END_MOD>, new org.ovirt.engine.core.common.vdscommands.<START_MOD>GetImagesListVDSCommandParameters(targetStorageDomainId)); if (runVdsCommand.getSucceeded()) { images = ((java.util.List<org.ovirt.engine.core.compat.Guid>) (runVdsCommand.getReturnValue())); imagesPerStorageDomain.put(disk<END_MOD>.getId(), <START_MOD>images); } else if ((runVdsCommand.getVdsError().getCode()) == (org.ovirt.engine.core.common.errors.VdcBllErrors.GetStorageDomainListError)) { addCanDoActionMessage(VdcBllMessages.ERROR_GET_STORAGE_DOMAIN_LIST); return false; } } if (images.contains(<END_MOD>disk.getId())) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_CONTAINS_DISK); return false; } } return true; }
<START_MOD>private void setDefaultSelectedProtocol() { for (org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol protocol : new org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol[]{ ConsoleProtocol.SPICE, ConsoleProtocol.VNC, ConsoleProtocol.RDP }) { if (canSelectProtocol(protocol)) { selectProtocol(protocol); } } }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( to get or set System Configuration java.lang.String allowToGetOrSetSystemConfigurationRoleTreeTooltip();
protected boolean isUserAuthorizedToRunAction() { if (org.ovirt.engine.core.bll.CommandBase.isInternalExecution()) { if (log.isDebugEnabled()) { log.debug( check skipped for internal action {}. getActionType()); } return true; } if (!(org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isMultilevelAdministrationOn())) { if (log.isDebugEnabled()) { log.debug( check for action '{}' skipped because multilevel administration is disabled. getActionType()); } return true; } if ((org.ovirt.engine.core.bll.CommandBase.getCurrentUser()) == null) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.USER_IS_NOT_LOGGED_IN); return false; } final java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permSubjects = getPermissionCheckSubjects(); if ((permSubjects == null) || (permSubjects.isEmpty())) { if (log.isDebugEnabled()) { log.debug( set of objects to check is null or empty for action '{}'. getActionType()); } <START_MOD>addValidateMessage<END_MOD>(EngineMessage.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION); return false; } if (isQuotaDependant()) { addQuotaPermissionSubject(permSubjects); } if (log.isDebugEnabled()) { java.lang.StringBuilder builder = getPermissionSubjectsAsStringBuilder(permSubjects); log.debug( whether user '{}' or one of the groups he is member of, have the following permissions: {} org.ovirt.engine.core.bll.CommandBase.getCurrentUser().getId(), builder.toString()); } return checkPermissions(permSubjects); }
private void initAppsTable() { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel>(false, true); org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractTextColumn<END_MOD><java.lang.String> appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractTextColumn<END_MOD><java.lang.String>() { @java.lang.Override public java.lang.String getValue(java.lang.String appName) { return appName<START_MOD>; } @java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(java.lang.String object) { return null<END_MOD>; } }; appsTable.addColumn(appNameColumn, constants.nameSnapshot()); appsTable.setRowData(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); appsTable.setWidth("100%", true); appsTable.setSelectionModel(new com.google.gwt.view.client.NoSelectionModel()); }
public static void GetVmsRunningOnOrMigratingToVds(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid id) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.VM>(); } return source; } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVmsRunningOnOrMigratingToVds, new org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.GetVmsRunningOnOrMigratingToVdsParameters(id), aQuery); }
public boolean discover() { boolean dbUpdated = false; java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug( updated for external broker. dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn( returned empty result when talking to broker. Disabling external units java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit> failingPolicyUnits = policyUnitDao.getAll().stream().collect(java.util.stream.Collectors.toList()); markExternalPoliciesAsDisabled(failingPolicyUnits); dbUpdated = true; } return dbUpdated; }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> filterVmsInClusterNeedUpdate() {<START_MOD> final boolean rngUpdateRequired = VmRngDevice.Source.urandomRandomUpdateRequired(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion());<END_MOD> return vmStaticDao.getAllByCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()).stream().filter(( vm) -> ((vm.getOrigin()) != OriginType.EXTERNAL) && (!(vm.isHostedEngine()))).filter(( vm) -> (<START_MOD>(<END_MOD>vm.getCustomCompatibilityVersion()) == null<START_MOD>) || rngUpdateRequired<END_MOD>).sorted().collect(java.util.stream.Collectors.toList()); }
public static org.ovirt.engine.core.bll.ValidationResult checkNumaPreferredTuneMode(org.ovirt.engine.core.common.businessentities.NumaTuneMode numaTuneMode, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes, org.ovirt.engine.core.compat.Guid vmId) { if (numaTuneMode != (org.ovirt.engine.core.common.businessentities.NumaTuneMode.PREFERRED)) { return ValidationResult.VALID; } if ((vmNumaNodes == null) && (vmId != null)) { vmNumaNodes = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNumaNodeDao().getAllVmNumaNodeByVmId(vmId); } if ((vmNumaNodes != null) && ((vmNumaNodes.size()) == 1)) { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>>> vdsNumaNodeList = vmNumaNodes.get(0).getVdsNumaNodeList(); boolean pinnedToSingleNode = (((vdsNumaNodeList != null) && ((vdsNumaNodeList.size()) == 1)) && ((vdsNumaNodeList.get(0).getSecond()) != null)) && (vdsNumaNodeList.get(0).getSecond().getFirst()); if (pinnedToSingleNode) { return ValidationResult.VALID; } } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.VM_NUMA_NODE_PREFERRED_NOT_PINNED_TO_SINGLE_NODE); }
private boolean checkQuotaStorageLimits(org.ovirt.engine.core.<START_MOD>bll.quota<END_MOD>.QuotaEnforcementTypeEnum quotaEnforcementTypeEnum, org.ovirt.engine.core.<START_MOD>bll.quota<END_MOD>.Quota quota, double limit, double storageUsagePercentage<START_MOD>, double storageRequestPercentage<END_MOD>, java.util.ArrayList<java.lang.String> canDoActionMessages, org.ovirt.engine.core.utils.Pair<org.ovirt.engine.core.common.AuditLogType, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase> log) { <START_MOD>double storageTotalPercentage = storageUsagePercentage + storageRequestPercentage; <END_MOD>if ((limit == (org.ovirt.engine.core.bll.quota.QuotaManager.UNLIMITED)) || (<START_MOD>storageTotalPercentage<END_MOD> <= (quota.getThresholdStoragePercentage()))) { return true; } else if (<START_MOD>storageTotalPercentage<END_MOD> <= 100) { log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_THRESHOLD); log.setSecond(getLoggableQuotaStorageParams(quota.getQuotaName(), <START_MOD>(storageUsagePercentage + storageRequestPercentage), storageRequestPercentage<END_MOD>)); } else if (<START_MOD>storageTotalPercentage<END_MOD> <= (<START_MOD>(<END_MOD>quota.getGraceStoragePercentage())<START_MOD> + 100)<END_MOD>) { log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_LIMIT); log.setSecond(getLoggableQuotaStorageParams(quota.getQuotaName(), <START_MOD>(storageUsagePercentage + storageRequestPercentage), storageRequestPercentage<END_MOD>)); } else { log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_GRACE_LIMIT); log.setSecond(getLoggableQuotaStorageParams(quota.getQuotaName(), storageUsagePercentage<START_MOD>, storageRequestPercentage<END_MOD>)); if (QuotaEnforcementTypeEnum.HARD_ENFORCEMENT.equals(quotaEnforcementTypeEnum)) { canDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_STORAGE_LIMIT_EXCEEDED.toString()); return false; } } return true; }
<START_MOD>private boolean registerLibvirtSecrets(org.ovirt.engine.core.bll.context.CommandContext cmdContext, org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.compat.Guid poolId) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LibvirtSecret> libvirtSecrets = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getLibvirtSecretDao().getAllByStoragePoolIdFilteredByActiveStorageDomains(poolId); if ((!(libvirtSecrets.isEmpty())) && (!(registerLibvirtSecrets(vds, libvirtSecrets, false)))) { setNonOperational(cmdContext, vds.getId(), NonOperationalReason.LIBVIRT_SECRETS_REGISTRATION_FAILURE); return false; } return true; }<END_MOD>
public static java.util.Collection<java.lang.String> replaceWith(java.lang.String propertyName, java.util.Collection<?> items, java.lang.String separator, int maxNumberOfPrintedItems) { org.apache.commons.lang.Validate.isTrue((maxNumberOfPrintedItems >= 1)); org.apache.commons.lang.Validate.isTrue(org.apache.commons.lang.StringUtils.isNotEmpty(separator)); int maxNumOfItems = java.lang.Math.min(maxNumberOfPrintedItems, items.size()); java.util.List<java.lang.String> printedItems = new java.util.ArrayList<>(maxNumOfItems);<START_MOD> java.lang.String itemPrefix = (separator == (org.ovirt.engine.core.utils.ReplacementUtils.DEFAULT_SEPARATOR)) ? "\t" :    <END_MOD> for (java.lang.Object item : items) { if ((--maxNumOfItems) < 0) { break; } printedItems.add(java.lang.String.format(<START_MOD>"%s%s", itemPrefix<END_MOD>, java.lang.String.valueOf(item))); } if ((items.size()) > maxNumberOfPrintedItems) { printedItems.add(<START_MOD>java.lang.String.format("%s...", itemPrefix)<END_MOD>); } java.util.ArrayList<java.lang.String> replacements = new java.util.ArrayList<>(); replacements.add(org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(propertyName, org.apache.commons.lang.StringUtils.join(printedItems, separator))); replacements.add(org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString((propertyName + (org.ovirt.engine.core.utils.ReplacementUtils.COUNTER_SUFFIX)), items.size())); return replacements; }
<START_MOD>private boolean validate(org.ovirt.engine.core.bll.ValidationResult validationResult) { if (!(validationResult.isValid())) { addViolation(validationResult.getMessage(), null); } return validationResult.isValid(); }<END_MOD>
@java.lang.Override public int setTabIndexes(int nextTabIndex) { sizeEditor.setTabIndex((nextTabIndex++)); sizeExtendEditor.setTabIndex((nextTabIndex++)); aliasEditor.setTabIndex((nextTabIndex++)); descriptionEditor.setTabIndex((nextTabIndex++)); interfaceEditor.setTabIndex((nextTabIndex++)); datacenterEditor.setTabIndex((nextTabIndex++)); storageDomainEditor.setTabIndex((nextTabIndex++)); volumeTypeEditor.setTabIndex((nextTabIndex++)); diskProfileEditor.setTabIndex((nextTabIndex++)); quotaEditor.setTabIndex((nextTabIndex++)); hostListEditor.setTabIndex((nextTabIndex++)); storageTypeEditor.setTabIndex((nextTabIndex++)); plugDiskToVmEditor.setTabIndex((nextTabIndex++)); wipeAfterDeleteEditor.setTabIndex((nextTabIndex++)); isBootableEditor.setTabIndex((nextTabIndex++)); isShareableEditor.setTabIndex((nextTabIndex++)); isReadOnlyEditor.setTabIndex((nextTabIndex++)); isScsiPassthroughEditor.setTabIndex((nextTabIndex++)); isSgIoUnfilteredEditor.setTabIndex((nextTabIndex++)); <START_MOD>isScsiReservationUsedEditor.setTabIndex((nextTabIndex++)); <END_MOD>return nextTabIndex; }
protected void addStyles() { vlanTag.addContentWidgetStyleName(style.vlanEditor()); mtuEditor<START_MOD>.addContentWidgetStyleName(style.mtuEditor()); networkLabel<END_MOD>.addContentWidgetStyleName(style.mtuEditor()); isVmNetworkEditor.addContentWidgetStyleName(style.checkBox()); isVmNetworkEditor.asCheckBox().addStyleName(style.checkBox()); vlanTagging.addContentWidgetStyleName(style.checkBox()); vlanTagging.asCheckBox().addStyleName(style.checkBox()); hasMtuEditor.addContentWidgetStyleName(style.checkBox()); hasMtuEditor.asCheckBox().addStyleName(style.checkBox()); <START_MOD>networkLabel.addLabelStyleName(style.checkBox()); networkLabel.addLabelStyleName(style.inlineLabel()); <END_MOD>}
private void findNegotiatingProfiles() { if ((profiles) == null) { synchronized(this) { if ((profiles) == null) { profiles = new java.util.ArrayList<org.ovirt.engine.core.aaa.AuthenticationProfile>(1); for (org.ovirt.engine.core.aaa.AuthenticationProfile profile : org.ovirt.engine.core.aaa.AuthenticationProfileRepository.getInstance().getProfiles()) { if (profile != null) { <START_MOD>if (((((org.ovirt.engine.core.aaa.AuthenticatorProxy) (<END_MOD>profile.getAuthenticator()<START_MOD>)).getExtension().getContext().<java.lang.Long>get(Authn.ContextKeys.CAPABILITIES).longValue()) & (Authn.Capabilities.AUTHENTICATE_NEGOTIATE)) == (Authn.Capabilities.AUTHENTICATE_NEGOTIATE<END_MOD>)) { profiles.add(0, profile); } } } } } } }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( to Add/Remove Users from the System java.lang.String allowToAddRemoveUsersFromTheSystemRoleTreeTooltip();
<START_MOD>public boolean isAsyncTask(org.ovirt.engine.core.compat.Guid cmdId) { for (org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task : _tasks.values()) { if (task.getParameters().getDbAsyncTask().getCommandId().equals(cmdId)) { return true; } } return false; }<END_MOD>
<START_MOD>public org.ovirt.engine.ui.uicommonweb.builders.BuilderList<F, B> tail() { if ((size()) >= 2) { return new org.ovirt.engine.ui.uicommonweb.builders.BuilderList<F, B>(subList(1, size())); } return new org.ovirt.engine.ui.uicommonweb.builders.BuilderList<F, B>(); }<END_MOD>
<START_MOD>public void refreshRunningVmsWithNewDiskProfile(org.ovirt.engine.core.compat.Guid diskProfileId) { refreshVmsStorageQos(getRunningVmDiskImageMapWithProfiles(java.util.Collections.singleton(diskProfileId)), storageQosDao.getQosByDiskProfileId(diskProfileId)); }<END_MOD>
@java.lang.Override public <START_MOD>org.gwtbootstrap3.client.ui.constants.IconType getValue(org.ovirt.engine.core.common.businessentities.Erratum erratum) { if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.BUGFIX)) { getCell().setColor(<END_MOD>com.google.gwt.<START_MOD>safehtml.shared.SafeHtmlUtils.fromTrustedString("ORANGERED")); return org.gwtbootstrap3.client.ui.constants.IconType.BUG; } else<END_MOD> if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.<START_MOD>ENHANCEMENT)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString("BLUE")); return org.gwtbootstrap3.client.ui.constants.IconType.PLUS_SQUARE<END_MOD>; } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.SECURITY)) { <START_MOD>getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString("DARKORANGE")); return org.gwtbootstrap3.client.ui.constants.IconType.WARNING<END_MOD>; } return null; }
<START_MOD>@java.lang.Override public void invoke(org.ovirt.engine.api.extensions.ExtMap context, java.util.Map<java.lang.String, java.lang.Object> args) { java.util.Properties templates = org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.loadPropertiesFromJar("entity-templates.properties"); java.lang.String providedTemplate = null; if (context.containsKey(ContextKeys.SHOW_TEMPLATE)) { providedTemplate = templates.get(context.get(ContextKeys.SHOW_TEMPLATE)).toString(); } @java.lang.SuppressWarnings("unchecked") java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> results = context.get(ContextKeys.SEARCH_RESULT, java.util.Collection.class, java.util.Collections.emptyList()); for (org.ovirt.engine.api.extensions.ExtMap result : results) { java.lang.String out = (providedTemplate == null) ? result.containsKey(Authz.PrincipalRecord.ID) ? templates.get("user").toString() : templates.get("group").toString() : providedTemplate; for (java.util.Map.Entry<org.ovirt.engine.api.extensions.ExtKey, java.lang.Object> entry : result.entrySet()) { out = out.replaceAll((("@" + (entry.getKey().getUuid().getUuid().toString())) + "@"), entry.getValue().toString()); } org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.addContextMessage(context, false, out); } context.put(ContextKeys.EXIT_STATUS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.SUCCESS); }<END_MOD>
<START_MOD>@org.junit.Test public void testStorageNameLength() { for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType d : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { if (d != (DiskContentType.LEGACY)) { assertEquals(4, d.getStorageValue().length()); } } }<END_MOD>
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs pcArgs = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)); if (PropertyChangedEventArgs.Args.PROGRESS.toString().equals(pcArgs.propertyName)) { if ((modelProvider.getModel().getProgress()) != null) { <START_MOD>com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { <END_MOD>if ((getTable()) != null) { getTable().setLoadingState(LoadingState.LOADING); } } }<START_MOD>); } } }<END_MOD>
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { rngPanel.setVisible(object.getIsRngEnabled().getEntity()); }
@java.lang.<START_MOD>SuppressWarnings("unchecked")<END_MOD> @java.lang.<START_MOD>Override public boolean equals(final java.lang.Object other) { if ((this) == other) { return true; } if (other == null) { return false; } if ((getClass()) != (other.getClass())) { return false; } boolean result = false;<END_MOD> org.ovirt.engine.ui.frontend.communication.VdcOperation<T, P> otherOperation = ((org.ovirt.engine.ui.frontend.communication.VdcOperation<T, P>) (other)); result = (operationType.equals(otherOperation.getOperation())) && (parameter.equals(otherOperation.getParameter())); return result; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.updateNetworkAttachment(getVdsGroupId(), getNetworkCluster(), getNetwork()<START_MOD>, org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.this<END_MOD>); return null; } }); if (((!(getPersistedNetwork().isExternal())) && (org.ovirt.engine.core.utils.NetworkUtils.isLabeled(getPersistedNetwork()))) && (org.ovirt.engine.core.bll.network.cluster.NetworkHelper.setupNetworkSupported(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getVdsGroup().getcompatibility_version()))) { addNetworkToHosts(); } org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.setSucceeded(true); }
public static boolean isGraphicsAndDisplaySupported(int osId, java.util.Collection<org.ovirt.engine.core.common.businessentities.GraphicsType> graphics, org.ovirt.engine.core.common.businessentities.DisplayType displayType, java.util.List<java.lang.String> reasons, org.ovirt.engine.core.compat.Version clusterVersion) { boolean result = org.ovirt.engine.core.bll.validator.VmValidationUtils.isGraphicsAndDisplaySupported(osId, clusterVersion, graphics, displayType); if (!result) { reasons.add(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_ILLEGAL_VM_DISPLAY_TYPE_IS_NOT_SUPPORTED_BY_OS.name()); } return result; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { java.lang.String propName = args.propertyName; if ("IsCustomPropertiesTabAvailable".equals(propName)) { setupCustomPropertiesAvailability(object); } else if ("IsDisksAvailable".equals(propName)) { addDiskAllocation(object); } }
<START_MOD>private void addWarningForVmsWithAttachedDisk() { java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> vms = org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.getVmStaticDAO().getAllByStoragePoolId(org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.getStorageDomain().getStoragePoolId()); java.util.List<java.lang.String> vmNames = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmStatic vmStatic : vms) { if (org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.isVMHasAttachedDiskOrFloppy(vmStatic.getId())) { vmNames.add(vmStatic.getName()); } } if (!(vmNames.isEmpty())) { this.addCustomValue("VmNames", org.apache.commons.lang.StringUtils.join(vmNames, ",")); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(this, AuditLogType.DETACH_USED_ISO_STORAGE_DOMAIN_FROM_POOL); } }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.common.DefaultStringValue("IO Threads:") java.lang.String ioThreadsVmPopup();<END_MOD>
<START_MOD>public org.ovirt.engine.core.dal.VdcBllMessages getStatusMsg() { return statusMsg; }<END_MOD>
@java.lang.Override protected void executeCommand() { boolean addedGroupThatAllowsViewingChildren = false; java.util.List<org.ovirt.engine.core.common.businessentities.ActionGroup> groups = org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getParameters().getActionGroups(); for (org.ovirt.engine.core.common.businessentities.ActionGroup group : groups) { addedGroupThatAllowsViewingChildren |= group.allowsViewingChildren(); org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRoleGroupMapDAO().save(new org.ovirt.engine.core.common.businessentities.RoleGroupMap(group, org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getParameters().getRoleId())); AppendCustomValue("ActionGroup", group.toString(),     } if (addedGroupThatAllowsViewingChildren) { org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD> role = org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRole(); if (!(role.allowsViewingChildren())) { role.setAllowsViewingChildren(true); org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRoleDao().update(role); } } org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.setSucceeded(true); }
@java.lang.Override public void onMouseOver(com.google.gwt.event.dom.client.MouseOverEvent event) { <START_MOD>infoImage.setUrl<END_MOD>(<START_MOD>resources.dialogIconHelpRollover(<END_MOD>).<START_MOD>getSafeUri<END_MOD>(<START_MOD>)<END_MOD>); }
@java.lang.Override protected void onBind() { super.onBind(); org.ovirt.engine.ui.common.widget.table.OrderedMultiSelectionModel<?> tableSelectionModel = ((getTable()) != null) ? getTable().getSelectionModel() : null; if (tableSelectionModel != null) { registerHandler(tableSelectionModel.addSelectionChangeHandler(new com.google.gwt.view.client.SelectionChangeEvent.Handler() { @java.lang.Override public void onSelectionChange(com.google.gwt.view.client.SelectionChangeEvent event) { updateDetailModelSelection(); } })); } initializeHandlers(); <START_MOD>getSelectedMainItems().registerListener(this); itemChanged(getSelectedMainItems().getMainTabSelectedItem()); <END_MOD>}
<START_MOD>@org.junit.Test public void replaceProductKey_emptyKeyShouldNotRemoveTheWholeSectionForCustomScript() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "", true); assertThat(res, containsString("<ProductKey>")); assertThat(res, containsString("</ProductKey>")); }<END_MOD>
<START_MOD>public void setReason(java.lang.String value) { this.vmDynamic.setReason(value); }<END_MOD>
<START_MOD>private boolean validateAndAddViolation(org.ovirt.engine.core.bll.ValidationResult validationResult, java.lang.String violatingEntity) { if (validationResult.isValid()) { return true; } else { addViolation(validationResult.getMessage(), violatingEntity); return false; } }<END_MOD>
@java.lang.Override protected boolean canDoAction() { if (((org.ovirt.engine.core.bll.ConvertVmCommand.getVds()) != null) && ((org.ovirt.engine.core.bll.ConvertVmCommand.getVds().getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL); } if (((org.ovirt.engine.core.bll.ConvertVmCommand.getVds()) == null) && (!(selectProxyHost()))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NO_VDS_IN_POOL); } return true; }
<START_MOD>public static java.util.HashMap<org.ovirt.engine.core.common.utils.Pair<java.lang.Integer, org.ovirt.engine.core.compat.Version>, java.lang.Boolean> getNicHotplugSupportMap() { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.nicHotplugSupportMap; }<END_MOD>
public org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD> getError() { return _Error; }
@java.lang.Override protected void readSnapshotsSection(XmlNode section) { org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = section.SelectNodes("Snapshot"); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot>(); _vm.setSnapshots(snapshots); for (XmlNode node : list) { XmlNode vmConfiguration = node.<START_MOD>selectSingleNode<END_MOD>("VmConfiguration", _xmlNS); org.ovirt.engine.core.common.businessentities.Snapshot snapshot = new org.ovirt.engine.core.common.businessentities.Snapshot((vmConfiguration != null)); snapshot.setId(new org.ovirt.engine.core.compat.Guid(node.attributes.get("ovf:id").getValue())); snapshot.setVmId(_vm.getId()); snapshot.setType(org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.valueOf(node.<START_MOD>selectSingleNode<END_MOD>("Type", _xmlNS).innerText)); snapshot.setStatus(SnapshotStatus.OK); snapshot.setDescription(node.<START_MOD>selectSingleNode<END_MOD>("Description", _xmlNS).innerText); XmlNode memory = node.<START_MOD>selectSingleNode<END_MOD>("Memory", _xmlNS); if (memory != null) { snapshot.setMemoryVolume(memory.innerText); } final java.util.Date creationDate = org.ovirt.engine.core.utils.ovf.OvfParser.utcDateStringToLocaDate(node.<START_MOD>selectSingleNode<END_MOD>("CreationDate", _xmlNS).innerText); if (creationDate != null) { snapshot.setCreationDate(creationDate); } snapshot.setVmConfiguration((vmConfiguration == null ? null : new java.lang.String(org.apache.commons.codec.binary.Base64.decodeBase64(vmConfiguration.innerText)))); XmlNode appList = node.<START_MOD>selectSingleNode<END_MOD>("ApplicationList", _xmlNS); if (appList != null) { snapshot.setAppList(appList.innerText); } snapshots.add(snapshot); } }
private org.ovirt.engine.core.common.action.LiveMigrateDiskParameters createLiveMigrateDiskParameters(org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters, org.ovirt.engine.core.compat.Guid vmId) { return new org.ovirt.engine.core.common.action.LiveMigrateDiskParameters(moveDiskParameters.getImageId(), moveDiskParameters.getSourceDomainId(), moveDiskParameters.getStorageDomainId(), vmId, moveDiskParameters.getQuotaId(), moveDiskParameters.getDiskProfileId(), <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.bll.storage.disk.MoveDisksCommand.getParameters<END_MOD>().<START_MOD>getImageGroupID<END_MOD>()); }
@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult isLastProfileInParentEntity() { if ((getProfileDao().getAllForCluster(getProfile().getClusterId()).size()) == 1) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_CANNOT_REMOVE_LAST_CPU_PROFILE_IN_CLUSTER); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
<START_MOD>@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage(); usage.setEpoch(rs.getTimestamp(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.DATE).getTime()); usage.setStorageValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.USED)); history.add(usage); } }<END_MOD>
<START_MOD>public<END_MOD> static org.ovirt.engine.core.common.businessentities.DiskImage isImageExist(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.common.businessentities.DiskImage image) { org.ovirt.engine.core.common.businessentities.DiskImage fromIrs = null; try { org.ovirt.engine.core.compat.Guid storageDomainId = image.getStorageIds().get(0); org.ovirt.engine.core.compat.Guid imageGroupId = ((image.getId()) != null) ? image.getId() : org.ovirt.engine.core.compat.Guid.Empty; fromIrs = ((org.ovirt.engine.core.common.businessentities.DiskImage) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.GetImageInfo, new org.ovirt.engine.core.common.vdscommands.GetImageInfoVDSCommandParameters(storagePoolId, storageDomainId, imageGroupId, image.getImageId())).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.ImagesHandler.log.debug( to get image info from from storage e); } return fromIrs; }
<START_MOD>@java.lang.Override protected void executeCommand() { java.util.List<java.lang.String> errors = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.compat.Guid upServerId : getUpServerIds()) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.EnableGlusterHook, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterHookVDSParameters(upServerId, getParameters().getGlusterCommand(), getParameters().getLevel(), getParameters().getHookName())); if (!(returnValue.getSucceeded())) { errors.add(returnValue.getVdsError().getMessage()); } } if (!(errors.isEmpty())) { handleVdsErrors(AuditLogType.GLUSTER_HOOK_ENABLE_FAILED, errors); } if ((getUpServerIds().size()) > (errors.size())) { UpdateHookStatusInDb(getParameters().getClusterId(), getParameters().getHookName(), GlusterHookStatus.ENABLED); setSucceeded(true); } }<END_MOD>
<START_MOD>public org.ovirt.engine.core.compat.NGuid getInstanceTypeId() { return vmStatic.getInstanceTypeId(); }<END_MOD>
<START_MOD>@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.column.Context context, com.google.gwt.dom.client.Element parent, T value, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<T> valueUpdater) { super.onBrowserEvent(context, parent, value, event, valueUpdater); com.google.gwt.dom.client.EventTarget eventTarget = event.getEventTarget(); if (!(com.google.gwt.dom.client.Element.is(eventTarget))) { return; } if ("click".equals(event.getType())) { onClick(value); } }<END_MOD>
private static org.ovirt.engine.api.model.IpAddressAssignment <START_MOD>mapIpv4AddressAssignment<END_MOD>(org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address) { org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment = new org.ovirt.engine.api.model.IpAddressAssignment(); org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); <START_MOD>ip.setVersion(IpVersion.V4.value()); <END_MOD>if ((iPv4Address.getAddress()) != null) { ip.setAddress(iPv4Address.getAddress()); } if ((iPv4Address.getGateway()) != null) { ip.setGateway(iPv4Address.getGateway()); } if ((iPv4Address.getNetmask()) != null) { ip.setNetmask(iPv4Address.getNetmask()); } ipAddressAssignment.setIp(ip); org.ovirt.engine.api.model.BootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(iPv4Address.getBootProtocol(), null); ipAddressAssignment.setAssignmentMethod((assignmentMethod == null ? null : assignmentMethod.value())); return ipAddressAssignment; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Architecture java.lang.String clusterPopupArchitectureLabel();
private void add() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel model = createAdElementListModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().addPermissionToUserTitle()); model.setHashName("add_permission_to_user");<START_MOD> model.setHelpTag(model.getHashName(),   > Permissions > Add Permission<END_MOD> org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnAdd", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
<START_MOD>@java.lang.Override public org.ovirt.engine.api.model.MacPools list() { return mapCollection(getBackendCollection(SearchType.MacPool)); }<END_MOD>
<START_MOD>private void setGraphicsDevicesToParams(org.ovirt.engine.ui.uicommonweb.models.pools.PoolModel model, org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters params) { if ((model.getDisplayProtocol().getSelectedItem()) == null) { return; } org.ovirt.engine.core.common.businessentities.DisplayType selectedDisplayType = model.getDisplayProtocol().getSelectedItem().getEntity(); org.ovirt.engine.core.common.businessentities.GraphicsType derivedGraphicsType = (selectedDisplayType == (org.ovirt.engine.core.common.businessentities.DisplayType.qxl)) ? org.ovirt.engine.core.common.businessentities.GraphicsType.SPICE : org.ovirt.engine.core.common.businessentities.GraphicsType.VNC; params.setShouldUpdateGraphicsDevice(derivedGraphicsType, true); org.ovirt.engine.core.common.businessentities.GraphicsDevice d = new org.ovirt.engine.core.common.businessentities.GraphicsDevice(derivedGraphicsType.getCorrespondingDeviceType()); params.setGraphicsDevice(d); }<END_MOD>
private void createDiskBasedOnLun() { final org.ovirt.engine.core.common.businessentities.storage.LUNs lun<START_MOD>; if ((updatedLun) == null) { lun<END_MOD> = ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo())).getLun();<START_MOD> } else { lun = updatedLun; }<END_MOD> org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.proceedLUNInDb(lun, lun.getLunType()); getBaseDiskDao().save(getParameters().getDiskInfo()); getDiskLunMapDao().save(new org.ovirt.engine.core.common.businessentities.storage.DiskLunMap(getParameters().getDiskInfo().getId(), lun.getLUN_id())); if ((getVm()) != null) { addManagedDeviceForDisk(getParameters().getDiskInfo().getId(), ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (getParameters().getDiskInfo())).isUsingScsiReservation()); } return null; } }); org.ovirt.engine.core.bll.AddDiskCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo().getId()); plugDiskToVmIfNeeded(); org.ovirt.engine.core.bll.AddDiskCommand.setSucceeded(true); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Groups java.lang.String directoryGroupsTitle();
private void onSaveConfirmCpuThreads() { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel) (getWindow())); cancelConfirmation(); if (((!(model.getVersionSupportsCpuThreads().getEntity())) && (model.getCountThreadsAsCores().getEntity())) && (getSelectedItem().getCountThreadsAsCores())) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().disableClusterCpuThreadSupportTitle()); confirmModel.setHelpTag(HelpTag.disable_cpu_thread_support); confirmModel.setHashName("disable_cpu_thread_support"); confirmModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().youAreAboutChangeClusterCpuThreadSupportMsg()); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSaveConfirmCpuLevel", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); getConfirmWindow().getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); getConfirmWindow().getCommands().add(tempVar2); } else { onSaveConfirmCpuLevel(); } }
<START_MOD>@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants, org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession, org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel, org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(applicationConstants.volumeGeoRepSubTabLabel(), 1, modelProvider); }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult hostProviderExists() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST).when((((getHost().getHostProviderId()) != null) && ((getProvider()) == null))); }
@java.lang.Override public java.lang.Void runInTransaction() { if (<START_MOD>!<END_MOD>(org.ovirt.engine.core.<START_MOD>compat<END_MOD>.<START_MOD>Guid<END_MOD>.<START_MOD>isNullOrEmpty(asyncTask<END_MOD>.<START_MOD>getRootCommandId())<END_MOD>)) { <START_MOD>coco<END_MOD>.<START_MOD>persistCommand<END_MOD>(<START_MOD>asyncTask<END_MOD>.<START_MOD>getParentCmdEntity()<END_MOD>); } <START_MOD>if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(asyncTask.getCommandId()))) { <END_MOD>coco.persistCommand(<START_MOD>asyncTask.getChildCmdEntity<END_MOD>());<START_MOD> }<END_MOD> org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAsyncTaskDao().saveOrUpdate(asyncTask); return null; }
protected boolean validateTemplateArchitecture() { if ((getVmTemplate().getClusterArch()) == (org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined)) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_CANNOT_IMPORT_TEMPLATE_WITH_NOT_SUPPORTED_ARCHITECTURE); return false; } return true; }
@org.junit.Test public void networkLabeled() throws java.lang.Exception { when(network.getLabel()).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextPropertyString(10)); assertThat(validator.notLabeled(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NETWORK_ALREADY_LABELED)); }
public static org.ovirt.engine.core.common.businessentities.VmDynamic buildVmDynamicFromEvent(org.ovirt.engine.core.common.businessentities.VmDynamic baseVmDynamic, java.util.Map<java.lang.String, java.lang.Object> xmlRpcStruct) { org.ovirt.engine.core.common.businessentities.VmDynamic clonedVmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(baseVmDynamic); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.<START_MOD>updateVMDynamicData<END_MOD>(<START_MOD>clonedVmDynamic,<END_MOD> xmlRpcStruct<START_MOD>, false<END_MOD>); return clonedVmDynamic; }
<START_MOD>private void runTryBackToAllSnapshotsOfVm(final org.ovirt.engine.ui.uicommonweb.models.Model model, org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot, boolean memory, java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> images) { model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TryBackToAllSnapshotsOfVm, new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vm.getId(), snapshot.getId(), memory, images), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { model.stopProgress(); cancel(); } }); }<END_MOD>
<START_MOD>public java.lang.String getSessionIdBySeqId(long sessionSequenceId) { return findFirstSessionByData(sessionSequenceId, org.ovirt.engine.core.bll.aaa.SessionDataContainer.ENGINE_SESSION_SEQ_ID); }<END_MOD>
public org.ovirt.engine.api.model.HostNIC lookupNic(java.lang.String id) { java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ifaces = getCollection(); for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface : ifaces) { if (iface.getId().toString().equals(id)) { org.ovirt.engine.api.model.HostNIC hostNic = populate(map(iface, ifaces), iface); for (org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> nwk : getClusterNetworks()) { if (nwk.getname().equals(iface.getNetworkName())) { hostNic.getNetwork().setId(nwk.getId().toString()); hostNic.getNetwork().setName(null); break; } } return addLinks(hostNic); } } return notFound(); }
private boolean restoreSlaveVolumesToSnapshot(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> geoRepSessions, java.lang.String snapshotName) { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session : geoRepSessions) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity slaveVolume = getDbFacade().getGlusterVolumeDao().getById(session.getSlaveVolumeId()); if (slaveVolume == null) { continue; } org.ovirt.engine.core.common.businessentities.VDS slaveUpServer = org.ovirt.engine.core.bll.utils.ClusterUtils.getInstance().getRandomUpServer(slaveVolume.getClusterId()); if (slaveUpServer == null) { handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_RESTORE_FAILED, <START_MOD>EngineErrors<END_MOD>.NoUpServerFoundInRemoteCluster.name()); setSucceeded(false); return false; } try (org.ovirt.engine.core.utils.lock.EngineLock lock = acquireEngineLock(session.getSlaveVolumeId(), LockingGroup.GLUSTER_SNAPSHOT)) { if (!(restoreVolumeToSnapshot(slaveUpServer.getId(), slaveVolume, getSnapshot().getSnapshotName()))) { return false; } } } return true; }
public static void prepareCommandForMonitoring(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.action.VdcActionType actionType, boolean runAsInternal) { org.ovirt.engine.core.bll.job.ExecutionContext context = command.getExecutionContext(); if (context == null) { context = new org.ovirt.engine.core.bll.job.ExecutionContext(); } try { boolean isMonitored = org.ovirt.engine.core.bll.job.ExecutionHandler.shouldMonitorCommand(actionType, runAsInternal); if (isMonitored || (context.isJobRequired())) { org.ovirt.engine.core.common.job.Job job = org.ovirt.engine.core.bll.job.ExecutionHandler.getJob(command, actionType); context.setExecutionMethod(ExecutionMethod.AsJob); context.setJob(job); command.setExecutionContext(context); command.setJobId(job.getId()); context.setMonitored(true); } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.job.ExecutionHandler.log.<START_MOD>error<END_MOD>( to prepare command of type <START_MOD>'{}'<END_MOD> for monitoring due to error <START_MOD>'{}'<END_MOD> actionType.name(), org.apache.commons.lang.exception.ExceptionUtils.getMessage(e)<START_MOD>); org.ovirt.engine.core.bll.job.ExecutionHandler.log.error("Exception"<END_MOD>, e); } }
<START_MOD>public void initImportFromExportDomainModel(org.ovirt.engine.ui.uicommonweb.UICommand... commands) { model = importFromExportDomainModelProvider.get(); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().importVirtualMachinesTitle()); model.setHelpTag(HelpTag.import_virtual_machine); model.setHashName("import_virtual_machine"); for (org.ovirt.engine.ui.uicommonweb.UICommand command : commands) { model.getCommands().add(command); } }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVmsListByInstanceType(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeReadList("GetVmsByInstanceTypeId", org.ovirt.engine.core.dao.<START_MOD>VmDAOImpl<END_MOD>.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("instance_type_id", id)); }
public java.util.Map refreshStoragePool(java.lang.String spUUID, java.lang.String msdUUID, java.lang.Integer masterVersion) { try { log.info( storage pool, spUUID: {} msdUUID: {} new java.lang.Object[]{ spUUID, msdUUID }); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.DataCenter dataCenter = getDataCenterById(spUUID); dataCenter.setMasterStorageDomainId(msdUUID); dataCenter.setMasterVersion(masterVersion); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.StorageDomain storageDomain = getStorageDomainById(msdUUID); dataCenter.getStorageDomainMap().put(storageDomain.getId(), storageDomain); setMasterDomain(spUUID, msdUUID); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }
@java.lang.Override public void setItems(java.util.Collection<START_MOD><org.ovirt.engine.core.common.businessentities.VM><END_MOD> value) { consoleModelsCache.updateVmCache(value); super.setItems(value); }
<START_MOD>@org.junit.Test public void testLong() throws java.lang.Throwable { final java.lang.String LINE = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASDSSSSSSSSSSSSSSSSSSSSSSSDDDDDD"; final int NUM = 10000; final int FACTOR = 5; java.lang.String longText = ""; for (int i = 0; i < (NUM / FACTOR); i++) { longText += LINE + "\n"; } java.util.List<java.lang.String> expect = new java.util.LinkedList<java.lang.String>(); expect.add("start"); for (int i = 0; i < NUM; i++) { expect.add(LINE); } java.util.List<java.lang.String> send = new java.util.LinkedList<java.lang.String>(); for (int i = 0; i < NUM; i++) { if ((i % (NUM / FACTOR)) == 0) { send.add(longText); } else { send.add(null); } } org.ovirt.engine.core.utils.hostinstall.SSHDialogTest.Sink sink = new org.ovirt.engine.core.utils.hostinstall.SSHDialogTest.Sink(expect.toArray(new java.lang.String[0]), send.toArray(new java.lang.String[0])); _sshdialog.connect(); _sshdialog.authenticate(); _sshdialog.executeCommand(sink, "echo start && sleep 4 && cat", null); sink.exception(); }<END_MOD>
<START_MOD>@org.junit.Test public void unsyncedNetworkRemoved() { org.ovirt.engine.core.common.businessentities.Network net = createNetwork("net"); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNicOnNetwork("nic0", net); nic.setBridged((!(net.isVmNetwork()))); mockExistingNetworks(net); mockExistingIfaces(nic); nic.setNetworkName(null); org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper(createParametersForNics(nic)); validateAndExpectNoViolations(helper); assertNoBondsModified(helper); assertNoNetworksModified(helper); assertNetworkRemoved(helper, net.getName()); assertNoBondsRemoved(helper); }<END_MOD>
public static boolean checkCpuSockets(int num_of_sockets, int cpu_per_socket, java.lang.String compatibility_version, java.util.List<java.lang.String> CanDoActionMessages) { boolean retValue = true; if (retValue && ((num_of_sockets * cpu_per_socket) > (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmCpus, compatibility_version)))) { CanDoActionMessages.add(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_MAX_NUM_CPU.toString()); retValue = false; } if (retValue && (num_of_sockets > (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmSockets, compatibility_version)))) { CanDoActionMessages.add(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_MAX_NUM_SOCKETS.toString()); retValue = false; } if (retValue && (cpu_per_socket > (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfCpuPerSocket, compatibility_version)))) { CanDoActionMessages.add(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_MAX_CPU_PER_SOCKET.toString()); retValue = false; } if (retValue && (cpu_per_socket < 1)) { CanDoActionMessages.add(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_MIN_CPU_PER_SOCKET.toString()); retValue = false; } if (retValue && (num_of_sockets < 1)) { CanDoActionMessages.add(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_MIN_NUM_SOCKETS.toString()); retValue = false; } return retValue; }
<START_MOD>@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = ((java.util.List<org.ovirt.engine.core.common.businessentities.VM>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue())); if ((vms != null) && (!(vms.isEmpty()))) { getPortMirroring().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().portMirroringNotChangedIfUsedByVms()); getPortMirroring().setIsChangable(false); } stopProgress(); }<END_MOD>
@java.lang.Override public void runningSucceded() { <START_MOD>try { <END_MOD>org.ovirt.engine.core.bll.RunVmCommandBase.setSucceeded(true); setActionReturnValue(VMStatus.Up); org.ovirt.engine.core.bll.RunVmCommandBase.log(); org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.RunVmCommandBase.getExecutionContext(), false); org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(org.ovirt.engine.core.bll.RunVmCommandBase.getExecutionContext(), true); notifyHostsVmFailed(); if (((org.ovirt.engine.core.bll.RunVmCommandBase.getVm().getLastVdsRunOn()) == null) || (!(org.ovirt.engine.core.bll.RunVmCommandBase.getVm().getLastVdsRunOn().equals(getCurrentVdsId())))) { org.ovirt.engine.core.bll.RunVmCommandBase.getVm().setLastVdsRunOn(getCurrentVdsId()); } if (org.apache.commons.lang.StringUtils.isNotEmpty(org.ovirt.engine.core.bll.RunVmCommandBase.getVm().getHibernationVolHandle())) { removeVmHibernationVolumes(); org.ovirt.engine.core.bll.RunVmCommandBase.getVm().setStatus(VMStatus.Up); org.ovirt.engine.core.bll.RunVmCommandBase.getVm().setHibernationVolHandle(null); org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.UpdateVmDynamicData, new org.ovirt.engine.core.common.vdscommands.UpdateVmDynamicDataVDSCommandParameters(getCurrentVdsId(), org.ovirt.engine.core.bll.RunVmCommandBase.getVm().getDynamicData())); } }<START_MOD> finally { org.ovirt.engine.core.bll.RunVmCommandBase.freeLock(); } }<END_MOD>
<START_MOD>@org.junit.Test public void testGetStrippedVdsUniqueIdOnlyAllowrdChars() { org.ovirt.engine.core.common.queries.RegisterVdsParameters paramsMock = getQueryParameters(); when(paramsMock.getVdsUniqueId()).thenReturn("Test_123"); java.lang.String result = getQuery().getStrippedVdsUniqueId(); assertEquals("Test_123", result); }<END_MOD>
@org.junit.Test public void testUpdateIscsiServerConnection() { existingConnection.<START_MOD>setIqn<END_MOD>("1.2.3.4"); dao.update(existingConnection); org.ovirt.engine.core.common.businessentities.StorageServerConnections result = dao.get(existingConnection.<START_MOD>geIid<END_MOD>()); assertEquals(existingConnection, result); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Cluster cluster) { validateParameters(cluster, "name"); validateEnums(org.ovirt.engine.api.model.Cluster.class, cluster); org.ovirt.engine.api.model.DataCenter dataCenter = new org.ovirt.engine.api.model.DataCenter(); dataCenter.setId(dataCenterId.toString()); cluster.setDataCenter(dataCenter); org.ovirt.engine.core.common.businessentities.StoragePool pool = org.ovirt.engine.api.restapi.resource.BackendDataCenterResource.getStoragePool(cluster.getDataCenter(), this); org.ovirt.engine.core.common.businessentities.VDSGroup entity = map(cluster, map(pool)); return performCreate(VdcActionType.AddVdsGroup, new org.ovirt.engine.core.common.action.<START_MOD>AddVdsGroupOperationParameters<END_MOD>(entity), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetVdsGroupById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
public void setpm_port(java.lang.Integer value) { mVdsStatic.<START_MOD>setPmPort<END_MOD>(value); }
public static java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getPluggedActiveImagesForVm(org.ovirt.engine.core.compat.Guid vmId) { return org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(vmId, true), <START_MOD>org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.NOT_SHAREABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.ACTIVE_DISKS_ONLY<END_MOD>); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmDevice mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(); vmDevice.setId(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getGuidDefaultEmpty(rs, "device_id"), getGuidDefaultEmpty(rs, "vm_id"))); vmDevice.setDevice(rs.getString("device")); vmDevice.setType(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.forValue(rs.getString("type"))); vmDevice.setAddress(rs.getString("address")); vmDevice.setBootOrder(rs.getInt("boot_order")); vmDevice.setSpecParams(org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserializeOrCreateNew(rs.getString("spec_params"), java.util.HashMap.class)); vmDevice.setIsManaged(rs.getBoolean("is_managed")); vmDevice.setIsPlugged(rs.getBoolean("is_plugged")); vmDevice.setIsReadOnly(rs.getBoolean("is_readonly")); vmDevice.setAlias(rs.getString("alias")); vmDevice.setCustomProperties(org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserializeOrCreateNew(rs.getString("custom_properties"), java.util.LinkedHashMap.class)); vmDevice.setSnapshotId(getGuid(rs, "snapshot_id")); vmDevice.setLogicalName(rs.getString("logical_name")); <START_MOD>vmDevice.setScsiReservationUsed(rs.getBoolean("is_scsi_reservation_used")); <END_MOD>return vmDevice; }
<START_MOD>@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> list = ((java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); if (list != null) { if (isItem == null) { for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : this.getDisks()) { diskModel.getDiskProfile().setItems(list); for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile : list) { if (((diskModel.getDisk()) instanceof org.ovirt.engine.core.common.businessentities.DiskImage) && (diskProfile.getId().equals(((org.ovirt.engine.core.common.businessentities.DiskImage) (diskModel.getDisk())).getDiskProfileId()))) { diskModel.getDiskProfile().setSelectedItem(diskProfile); } } } } else { org.ovirt.engine.core.common.businessentities.profiles.DiskProfile selectedDiskProfile = null; if ((isItem.getSelectedItem()) != null) { selectedDiskProfile = isItem.getSelectedItem(); } isItem.setItems(list); if ((selectedDiskProfile != null) && ((list.size()) > 1)) { for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile : list) { if (diskProfile.getId().equals(selectedDiskProfile.getId())) { isItem.setSelectedItem(diskProfile); } } } } } }<END_MOD>
protected boolean checkTemplateInDestStorageDomain() { boolean retValue = true; if (((org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.ImageOperation.Move)) && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().<START_MOD>getItGuid<END_MOD>())))) { org.ovirt.engine.core.common.businessentities.DiskImage templateImage = org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getDiskImageDao().get(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().<START_MOD>getItGuid<END_MOD>()); if (!(templateImage.<START_MOD>getStorageIds<END_MOD>().contains(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()))) { retValue = false; addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return retValue; }
@org.junit.Test public void passwordNotProvidedForHostInstallation() { when(host.getVdsType()).thenReturn(VDSType.VDS); validator = createValidatorForHostInstallation(); assertThat(validator.passwordProvidedForHostInstallation(AuthenticationMethod.Password, null), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.VDS_CANNOT_INSTALL_EMPTY_PASSWORD)); }
<START_MOD>@java.lang.Override public java.lang.Long getRawValue(org.ovirt.engine.core.common.businessentities.StorageDomain object) { java.lang.Integer confirmedAvailableSize = object.getConfirmedAvailableDiskSize(); return confirmedAvailableSize == null ? null : java.lang.Long.valueOf(confirmedAvailableSize); }<END_MOD>
<START_MOD>public boolean containsSubResource(java.lang.String path) { if ((subResources) != null) { for (org.ovirt.engine.api.rsdl.Node node : subResources) { if (node.getPath().equals(path)) { return true; } } } return false; }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.businessentities.VDSGroup getFromCache(org.ovirt.engine.core.compat.Guid id) { return get(id); }<END_MOD>
<START_MOD>public void setVolumeConfigOptions(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeSnapshotConfigModel>> volumeConfigOptions) { this.volumeConfigOptions = volumeConfigOptions; }<END_MOD>
@java.lang.Override public void OnSuccess(java.lang.Object model1, java.lang.Object result1) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network> networks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>(); for (org.ovirt.engine.core.common.businessentities.network.Network a : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>) (result1))) { if (((a.getCluster().getStatus()) == (org.ovirt.engine.core.common.businessentities.network.NetworkStatus.OPERATIONAL)) && (a.isVmNetwork())) { networks.add(a); } } if (hotUpdateSupported) { networks.add(null); } <START_MOD>java.util.Collections.sort(networks, new java.util.Comparator<org.ovirt.engine.core.common.businessentities.network.Network>() { private org.ovirt.engine.core.common.utils.LexoNumericComparator lexoNumeric = new org.ovirt.engine.core.common.utils.LexoNumericComparator(); @java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.network.Network net1, org.ovirt.engine.core.common.businessentities.network.Network net2) { if (net1 == null) { return 1; } else if (net2 == null) { return -1; } else { return lexoNumeric.compare(net1.getName(), net2.getName()); } } }); <END_MOD>getNetwork().setItems(networks); initSelectedNetwork(); okCommand.setIsExecutionAllowed(true); }
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__CREATE); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__SNAPSHOT); }
protected javax.ws.rs.core.Response attachDiskToVm(org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource resource, org.ovirt.engine.api.model.DiskAttachment attachment, org.ovirt.engine.api.restapi.resource.IResolver entityResolver) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(attachment.getDisk().getId()); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = map(attachment); dve.getId().setVmId(vmId); dve.getId().setDeviceId(diskId); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve); org.ovirt.engine.api.model.Disk disk = attachment.getDisk(); boolean <START_MOD>diskActive = <END_MOD>isDiskActive<START_MOD>(attachment, disk); params.setPlugUnPlug(diskActive); boolean isDiskReadOnly<END_MOD> = false; if (<START_MOD>disk.isSetReadOnly<END_MOD>()) { <START_MOD>isDiskReadOnly<END_MOD> = org.apache.commons.lang.BooleanUtils.toBoolean(<START_MOD>disk.isReadOnly<END_MOD>()); } params.<START_MOD>setReadOnly(<END_MOD>isDiskReadOnly<START_MOD>)<END_MOD>; if (disk.<START_MOD>isSetSnapshot<END_MOD>()) { <START_MOD>validateParameters(disk, "snapshot.id"); params.setSnapshotId(asGuid(disk.getSnapshot().getId()<END_MOD>)); } <START_MOD>return resource.performCreate(VdcActionType.AttachDiskToVm, params, entityResolver<END_MOD>); }
@org.junit.Test public void testAddHostedEngineStorageFails() { parameters.getStorageDomain().setStorageName(StorageConstants.HOSTED_ENGINE_STORAGE_DOMAIN_NAME); when(command.getStorageDomainStaticDAO().get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdStatic = command.getStorageDomain().getStorageStaticData(); doReturn(new org.ovirt.engine.core.common.utils.Pair(sdStatic, sdStatic.getId())).when(command).executeHSMGetStorageDomainInfo(any(org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters.class)); org.ovirt.engine.core.bll.CanDoActionTestUtils.<START_MOD>runAndAssertCanDoActionSuccess<END_MOD>(command); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm)) { return false; } org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm other = ((org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm) (obj)); return (((((<START_MOD>(<END_MOD>java.util.Objects.equals(vmDynamic, other.vmDynamic)) && (java.util.Objects.equals(vmGuestAgentInterfaces, other.vmGuestAgentInterfaces))) && (java.util.Objects.equals(vmStatistics, other.vmStatistics))) && (java.util.Objects.equals(vNumaNodeStatisticsList, other.vNumaNodeStatisticsList))) && (java.util.Objects.equals(lunsMap, other.lunsMap))) && (java.util.Objects.equals(<START_MOD>diskStatistics, other.diskStatistics))) && (java.util.Objects.equals(<END_MOD>interfaceStatistics, other.interfaceStatistics)); }
public void OnRemove() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> pb = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> a : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>>Cast(getSelectedItems())) { pb.add(new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(getEntity().getId(), a)); } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.RemoveNetwork, pb); Cancel(); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Bricks") java.lang.String bricksStatusVolume();
public void getGlusterHook(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity><END_MOD> aQuery, org.ovirt.engine.core.compat.Guid hookId, boolean includeServerHooks) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookById, new org.ovirt.engine.core.common.queries.gluster.GlusterHookQueryParameters(hookId, includeServerHooks), aQuery); }
private void doDataCenterSearch() { final org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>><END_MOD> dcQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); dcQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>><END_MOD>() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.StoragePool><END_MOD> result) { setDataCenters(result); doNetworksSearch(); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterList(dcQuery, false); }
@java.lang.Override public org.ovirt.engine.api.model.Disk update(org.ovirt.engine.api.model.Disk resource) { <START_MOD>org.ovirt.engine.api.restapi.resource.validation.ValidatorLocator.getValidator(org.ovirt.engine.api.model.Disk.class).validateEnums(resource); <END_MOD>return super.update(resource); }
<START_MOD>public java.lang.String[] listPrimaryMenuIds() { java.util.List<java.lang.String> ids = menuPresenterWidget.getPrimaryMenuIds(); return ids.toArray(new java.lang.String[ids.size()]); }<END_MOD>
<START_MOD>private void prepareMocks(org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommand command) { doReturn(volumeDao).when(command).getGlusterVolumeDao(); doReturn(getVds(VDSStatus.Up)).when(command).getUpServer(); doReturn(getGlusterVolume(org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.stoppedVolumeId)).when(volumeDao).getById(org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.stoppedVolumeId); doReturn(getGlusterVolume(org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.startedVolumeId)).when(volumeDao).getById(org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.startedVolumeId); doReturn(null).when(volumeDao).getById(null); }<END_MOD>
<START_MOD>@org.junit.Before public void setup() { vm = new org.ovirt.engine.core.common.businessentities.VM(); validator = spy(new org.ovirt.engine.core.bll.validator.VmValidator(vm)); }<END_MOD>
@java.lang.Override public boolean runInThread(java.lang.Runnable runnable) { try { executorService.submit(runnable); return true; } catch (java.util.concurrent.RejectedExecutionException e) { <START_MOD>log.error(( rejected due to:   + (e.getMessage())), e); <END_MOD>return false; } }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { java.io.File file = org.ovirt.engine.core.utils.ServletUtils.<START_MOD>getFileFromString(request.getPathInfo<END_MOD>()<START_MOD>, base); file = checkForIndex(request, response, file, request<END_MOD>.<START_MOD>getPathInfo<END_MOD>(<START_MOD>)); if (null == <END_MOD>file<START_MOD>) { response.sendError(HttpServletResponse.SC_NOT_FOUND<END_MOD>); }<START_MOD> else {<END_MOD> org.ovirt.engine.core.utils.ServletUtils.sendFile(request, response, file, <START_MOD>type<END_MOD>); }<START_MOD> }<END_MOD>
@org.junit.Test public void typeMatchesProfileOnlyTypePassthrough() { typeMatchesProfileCommon(true, false); assertThat(validator.typeMatchesProfile(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_INTERFACE_TYPE_NOT_MATCH_PROFILE)); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( to configure Temlate Network java.lang.String allowToConfigureTemlateNetworkRoleTreeTooltip();
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.numa.vm.RemoveVmNumaNodesCommand.getVm()) == null) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_NOT_FOUND); } return true; }
@org.junit.Test public void shouldNotElectUnknownHostedEngineDomain() { prepareStorageDomainForElection(StorageDomainStatus.Unknown, org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); <START_MOD>doReturn(true).when(cmd).isHostedEngine(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); <END_MOD>assertEquals(null, cmd.electNewMaster()); }
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if (!(org.ovirt.engine.core.common.utils.HugePageUtils.isBackedByHugepages(vm.getStaticData()))) { return new java.util.ArrayList(hosts); } java.util.Map<java.lang.Integer, java.lang.Integer> requiredPages = org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(vm.getStaticData()); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> newHosts = new java.util.ArrayList(hosts.size()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { java.util.Map<java.lang.Integer, java.lang.Integer> availablePages = substractMaps(prepareHugePageMap(host), org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages.collectForHost(getPendingResourceManager(), host.getId())); if (!(requiredPages.entrySet().stream().allMatch(( pg) -> (availablePages.getOrDefault(pg.getKey(), 0)) >= (pg.getValue())))) { org.ovirt.engine.core.bll.scheduling.policyunits.HugePagesFilterPolicyUnit.log.debug("Host {} does not have enough free hugepages for VM {}", host.getId(), vm.getId()); messages.addMessage(host.getId(), EngineMessage.VAR__DETAIL__NOT_ENOUGH_HUGE_PAGES.name()); } else { newHosts.add(host); } } return newHosts; }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog> getAllByUserId(org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("user_id", userID).addValue("is_filtered", isFiltered); return getCallsHandler().executeReadList("GetAuditLogByUserId", org.ovirt.engine.core.dao.AuditLogDAODbFacadeImpl.auditLogRowMapper, parameterSource); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.utils.PairQueryable<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, org.ovirt.engine.core.common.businessentities.VDS> object) { java.util.Set<java.lang.String> lablesList = object.getFirst().getLabels(); return org.ovirt.engine.core.compat.StringHelper.join(", ", (lablesList != null ? lablesList.toArray() : null)); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.businessentities.Role get(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id); return getCallsHandler().executeRead("GetRolsByid", org.ovirt.engine.core.dao.<START_MOD>RoleDAOImpl<END_MOD>.RolesRowMapper.instance, parameterSource); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } oldMacPool = macPoolDao.get(getMacPoolId()); return <START_MOD>(<END_MOD>((validate(new org.ovirt.engine.core.bll.MacPoolValidator(oldMacPool).macPoolExists())) && (validate(new org.ovirt.engine.core.bll.MacPoolValidator(getMacPoolEntity()).hasUniqueName()))) && (validate(org.ovirt.engine.core.bll.UpdateMacPoolCommand.validateDefaultFlagIsNotChanged(oldMacPool, getMacPoolEntity())))<START_MOD>) && (validate(validateDuplicatesConfiguration()))<END_MOD>; }
<START_MOD>protected void readUserDomainsSection(@java.lang.SuppressWarnings("unused") org.ovirt.engine.core.utils.ovf.xml.XmlNode section) { }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.ui.uicommonweb.help.HelpTag getHashTag() { return org.ovirt.engine.ui.uicommonweb.help.HelpTag.edit_storage_qos; }<END_MOD>
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.StoragePool pool) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("description", pool.getdescription<START_MOD>()).addValue("comment", pool.getComment<END_MOD>()).addValue("id", pool.getId()).addValue("name", pool.getname()).addValue("storage_pool_type", pool.getstorage_pool_type()).addValue("status", pool.getstatus()).addValue("master_domain_version", pool.getmaster_domain_version()).addValue("spm_vds_id", pool.getspm_vds_id()).addValue("quota_enforcement_type", pool.getQuotaEnforcementType()).addValue("compatibility_version", pool.getcompatibility_version()); getCallsHandler().executeModification("Insertstorage_pool", parameterSource); }
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("External Host") java.lang.String hostPopupExternalHosts();<END_MOD>
public java.util.List<java.lang.Long> allocateAvailableMacs(int numberOfMacs) { if ((getAvailableMacsCount()) < numberOfMacs) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.MAC_POOL_NO_MACS_LEFT); } final java.util.List<java.lang.Long> result = new java.util.ArrayList<>(numberOfMacs); int remainingMacs = numberOfMacs; while (remainingMacs > 0) { final <START_MOD>org.ovirt.engine.core.bll.network.macpoolmanager.Range rangeWithAvailableMac = getRangeWithAvailableMac(); if (rangeWithAvailableMac == null) { continue; } final <END_MOD>java.util.List<java.lang.Long> allocatedMacs = <START_MOD>rangeWithAvailableMac<END_MOD>.allocateMacs(remainingMacs); remainingMacs -= allocatedMacs.size(); result.addAll(allocatedMacs); } return result; }
<START_MOD>@javax.ws.rs.POST @org.jboss.resteasy.annotations.providers.jaxb.Formatted @javax.ws.rs.Consumes({ ApiMediaType.APPLICATION_XML, ApiMediaType.APPLICATION_JSON, ApiMediaType.APPLICATION_X_YAML }) @org.ovirt.engine.api.model.Actionable @javax.ws.rs.Path("hosted_engine_maintenance") public javax.ws.rs.core.Response hostedEngineMaintenance(org.ovirt.engine.api.model.Action action);<END_MOD>
@java.lang.Override public boolean equals(java.lang.Object <START_MOD>obj<END_MOD>) { if ((this) == <START_MOD>obj) {<END_MOD> return true; <START_MOD>} <END_MOD>if (<START_MOD>!(obj instanceof org.ovirt.engine.ui.uicommonweb.models.vms.IconWithOsDefault<END_MOD>)) return false; org.ovirt.engine.ui.uicommonweb.models.vms.IconWithOsDefault <START_MOD>other<END_MOD> = ((org.ovirt.engine.ui.uicommonweb.models.vms.IconWithOsDefault) (<START_MOD>obj<END_MOD>)); return (((java.util.Objects.equals(icon, <START_MOD>other<END_MOD>.icon)) && (java.util.Objects.equals(osDefaultIcon, <START_MOD>other<END_MOD>.osDefaultIcon))) && (java.util.Objects.equals(smallIconId, <START_MOD>other<END_MOD>.smallIconId))) && (java.util.Objects.equals(validationResult, <START_MOD>other<END_MOD>.validationResult)); }
<START_MOD>public void performAction() { this.sendHeartbeat(); }<END_MOD>
public void applyData(java.util.List<org.ovirt.engine.core.common.businessentities.LUNs> source, boolean isIncluded<START_MOD>, java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>> selectedItems<END_MOD>) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> newItems = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>(); for (org.ovirt.engine.core.common.businessentities.LUNs a : source) { if (((a.getLunType()) == (getType())) || ((a.getLunType()) == (org.ovirt.engine.core.common.businessentities.StorageType.UNKNOWN))) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel> targets = createTargetModelList(a); org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lunModel = new org.ovirt.engine.ui.uicommonweb.models.storage.LunModel(); lunModel.setLunId(a.getLUN_id()); lunModel.setVendorId(a.getVendorId()); lunModel.setProductId(a.getProductId()); lunModel.setSerial(a.getSerial()); lunModel.setMultipathing(a.getPathCount()); lunModel.setTargets(targets); lunModel.setSize(a.getDeviceSize()); lunModel.setIsAccessible(a.getAccessible()); lunModel.setStatus(a.getStatus()); lunModel.setIsIncluded(isIncluded); lunModel.setIsSelected(<START_MOD>containsLun(lunModel, selectedItems, <END_MOD>isIncluded<START_MOD>)<END_MOD>); lunModel.setEntity(a); newItems.add(lunModel); updateGrayedOut(lunModel); if (isIncluded) { includedLUNs.add(lunModel); } } } initializeItems(newItems, null); proposeDiscover(); }
protected java.util.<START_MOD>Map<END_MOD><org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { return java.util.stream.IntStream.range(0, NAMES.length).filter(( x) -> !notFound).boxed().collect(java.util.stream.Collectors.toMap(this::getVmTemplateEntity, java.util.ArrayList::new)); }
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("Pinned") java.lang.String numaPinnedLabel();<END_MOD>
@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveIsNotValid() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond(); bond.setSlaves(java.util.Arrays.asList("slaveA", "slaveB")); org.ovirt.engine.core.bll.ValidationResult cannotBeSlaveValidationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_BOND_OR_VLAN_CANNOT_BE_SLAVE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostInterfaceValidator.VAR_INTERFACE_NAME, bond.getName())); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(<START_MOD>org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(bond)<END_MOD>)).build(); _doTestValidateModifiedBondSlaves(spy(validator), ValidationResult.VALID, cannotBeSlaveValidationResult, failsWith(cannotBeSlaveValidationResult)); }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel<START_MOD><org.ovirt.engine.core.common.businessentities.Permissions><END_MOD> localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel<START_MOD><org.ovirt.engine.core.common.businessentities.Permissions><END_MOD>) (result.getState())); localModel.stopProgress(); cancel(); }
@java.lang.Override protected void OnEntityChanged() { super.OnEntityChanged(); if ((getEntity()) != null) { UpdateProperties(); } }
<START_MOD>private static void chooseHostForExecution(org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase parametersBase, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.bll.CommandBase<?> executingCommand, java.util.List<org.ovirt.engine.core.compat.Guid> executedHosts, boolean failIfNoHost) { org.ovirt.engine.core.compat.Guid vdsForExecution = org.ovirt.engine.core.bll.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, executedHosts, failIfNoHost); parametersBase.setVdsId(vdsForExecution); if (executingCommand != null) { executingCommand.getParameters().setVdsRunningOn(vdsForExecution); executingCommand.persistCommand(executingCommand.getParameters().getParentCommand(), ((executingCommand.getCallBack()) != null)); } }<END_MOD>
<START_MOD>@java.lang.Override protected void ExecuteVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.getBroker().diskSizeExtend(org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.getParameters().getVmId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.getParameters().getDriveSpecs(), java.lang.String.valueOf(org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.getParameters().getNewSize())); org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.ProceedProxyReturnValue(); }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__UPDATE); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__QUOTA); }
private static org.ovirt.engine.core.common.businessentities.VmTemplate cloneVmTemplate(org.ovirt.engine.core.common.businessentities.VmTemplate instance) { org.ovirt.engine.core.common.businessentities.VmTemplate obj = new org.ovirt.engine.core.common.businessentities.VmTemplate(); obj.setStoragePoolId(instance.getStoragePoolId()); obj.setStoragePoolName(instance.getStoragePoolName()); obj.setDefaultDisplayType(instance.getDefaultDisplayType()); obj.setPriority(instance.getPriority()); obj.setIsoPath(instance.getIsoPath()); obj.setOrigin(instance.getOrigin()); obj.setSizeGB(instance.getSizeGB()); obj.setDiskImageMap(instance.getDiskImageMap()); obj.setInterfaces(instance.getInterfaces()); obj.setAutoStartup(instance.isAutoStartup()); obj.setChildCount(instance.getChildCount()); obj.setCpuPerSocket(instance.getCpuPerSocket()); obj.setCreationDate(instance.getCreationDate()); obj.setDefaultBootSequence(instance.getDefaultBootSequence()); obj.setComment(instance.getComment()); obj.setDomain(instance.getDomain()); obj.setFailBack(instance.isFailBack()); obj.setStateless(instance.isStateless()); obj.setMemSizeMb(instance.getMemSizeMb()); obj.setName(instance.getName()); obj.setNiceLevel(instance.getNiceLevel()); obj.setNumOfMonitors(instance.getNumOfMonitors()); obj.setAllowConsoleReconnect(instance.isAllowConsoleReconnect()); obj.setNumOfSockets(instance.getNumOfSockets()); obj.setStatus(instance.getStatus()); obj.setTimeZone(instance.getTimeZone()); obj.setUsbPolicy(instance.getUsbPolicy()); obj.setVdsGroupId(instance.getVdsGroupId()); obj.setVdsGroupName(instance.getVdsGroupName()); obj.setVmType(instance.getVmType()); obj.setId(instance.getId()); obj.setDiskList(instance.getDiskList()); obj.setRunAndPause(instance.isRunAndPause()); <START_MOD>obj.setArchitecture(instance.getArchitecture()); <END_MOD>return obj; }
@org.junit.Test public void testValidateNetworkExclusiveOnNicAtMostOneNonVmNetworkViolated() throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface(<START_MOD>failsWithNetworkInterfacesNotExclusivelyUsedByNetwork<END_MOD>(<START_MOD>nonVmNetwork1, nonVmNetwork2<END_MOD>), nonVmNetwork1, nonVmNetwork2); }
public java.lang.String getIfTotalSpeed() { return mVdsDynamic.getIfTotalSpeed(); }
private void initClusters(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters, org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> filteredList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>(); org.ovirt.engine.core.common.businessentities.StoragePool selectedDataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (getModel().getDataCenter().getSelectedItem())); boolean listContainsVmCluster = false; for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (selectedDataCenter.getId().equals(cluster.getStoragePoolId()))) { filteredList.add(cluster); if (<START_MOD>vm.getVdsGroupId().getValue().equals<END_MOD>(cluster.getId())) { listContainsVmCluster = true; } } } if (!listContainsVmCluster) { addVmCluster(filteredList); } else { java.util.Collections.sort(filteredList, new org.ovirt.engine.ui.uicommonweb.Linq.VdsGroupByNameComparer()); model.setClusters(model, filteredList, vm.getVdsGroupId().getValue()); } }
@java.lang.<START_MOD>SuppressWarnings({ "unchecked", "rawtypes" }) @java.lang.<END_MOD>Override public java.lang.String toString() { java.<START_MOD>util.Map<java.lang.String, java.lang.String> result = null; if ((this.getResult()) != null) { java.lang.Class<java.util.Map<java.lang.String, java.lang.String>> clazz = ((java.lang.Class) (java.util.Map.class)); result = org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse.MAPPER.convertValue(this.getResult(), clazz); if (result.containsKey("password")) { result.put("password", "XXX"); } } java.<END_MOD>lang.String response = ((this.getResult()) != null) ?   result:   + <START_MOD>result :   error:   + (this.getError<END_MOD>().toString()); return (( id:   + (this.getId())) + response) + ">"; }
public void clearCache() { synchronized(_lockObject) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.info(( cache for problematic entities in pool   + (_storagePoolId))); _timers.clear(); _domainsInProblem.clear(); _vdssInProblem.clear(); } }
protected boolean verifyAddVM() { <START_MOD>final org.ovirt.engine.core.bll.network.MacPoolManagerStrategy macPool = org.ovirt.engine.core.bll.network.ScopedMacPoolManager.scopeFor().vm(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVm()).getPool(); final java.util.List<java.lang.String> reasons = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getReturnValue().getCanDoActionMessages(); final int nicsCount = (org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmsCount()) * (org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmNicDao().getAllForTemplate(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplateId()).size()); final int priority = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().getPriority(); <END_MOD>return org.ovirt.engine.core.bll.VmHandler.verifyAddVm(<START_MOD>reasons<END_MOD>, <START_MOD>nicsCount<END_MOD>, <START_MOD>priority, macPool<END_MOD>); }
protected static org.dbunit.database.IDatabaseConnection getConnection() throws java.lang.Exception { java.sql.Connection con = org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource.getConnection(); org.dbunit.database.IDatabaseConnection connection = new org.dbunit.database.DatabaseConnection(con<START_MOD>); connection.getConfig().setProperty(DatabaseConfig.FEATURE_ALLOW_EMPTY_FIELDS, true<END_MOD>); connection.getConfig().setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY, org.ovirt.engine.core.dao.BaseDaoTestCase.dataFactory); if (org.ovirt.engine.core.dao.BaseDaoTestCase.needInitializationSql) { try (java.sql.Statement stmt = con.createStatement()) { stmt.executeUpdate(org.ovirt.engine.core.dao.BaseDaoTestCase.initSql); } } return connection; }
<START_MOD>public java.lang.Integer getWarningLowSpaceSize() { if ((getWarningLowSpaceIndicator()) == null) { return null; } java.lang.Integer warningLowSpaceSize = ((getTotalDiskSize()) * (getWarningLowSpaceIndicator())) / 100; return warningLowSpaceSize; }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call() { getParameters().setStorageDomainId(getMasterDomainIdFromDb()); org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainPoolMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(getParameters().getNewMasterDomainId(), getParameters().getStoragePoolId(), org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().save(domainPoolMap); getParameters().setVdsId(getVds().getId()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = runInternalAction(VdcActionType.ReconstructMasterDomain, getParameters<START_MOD>(), cloneOnlyEngineContext<END_MOD>()); boolean reconstructVerbExecuted = ((returnVal.getActionReturnValue()) != null) ? ((java.lang.Boolean) (returnVal.getActionReturnValue())) : false; getStoragePoolDAO().updateStatus(getStoragePool().getId(), StoragePoolStatus.NonResponsive); if (!reconstructVerbExecuted) { getStoragePoolIsoMapDAO().remove(domainPoolMap.getId()); } if (returnVal.getSucceeded()) { updateStorageDomainFormat(loadTargetedMasterDomain()); } setSucceeded(returnVal.getSucceeded()); return new org.ovirt.engine.core.common.eventqueue.EventResult(reconstructVerbExecuted, org.ovirt.engine.core.common.eventqueue.EventType.RECONSTRUCT); }
<START_MOD>@java.lang.Override protected java.lang.String getText(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity) { return entity.getBrickDirectory(); }<END_MOD>
<START_MOD>private void allocateAndFreeMacAndExpectGivenMac(org.ovirt.engine.core.bll.network.macpoolmanager.Range range, long expectedMac) { java.lang.Long mac = range.allocateMacs(1).get(0); logger.info("expecting that MAC {} should be obtained, got {}", expectedMac, mac); assertThat(mac, is(expectedMac)); range.freeMac(mac); }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("Unassigned Virtual Nodes") java.lang.String unassignedVNumaNodesLabel();<END_MOD>
private java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> <START_MOD>removeInvalidNetworkAttachmentsFromDb<END_MOD>() { <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment><END_MOD> <START_MOD>networkAttachments<END_MOD> = networkAttachmentDao.getAllForHost(hostId); <START_MOD>for (java.util.Iterator<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> iterator = networkAttachments.iterator(); iterator.hasNext();) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = iterator.next(); if (!(networkConfiguredOnHost(networkAttachment.getNetworkId()))) { networkAttachmentDao.remove(networkAttachment.getId()); iterator.remove(); } <END_MOD>} return <START_MOD>networkAttachments<END_MOD>; }
<START_MOD>public java.lang.String gethost_serial_number() { return this.host_serial_number; }<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { rngLabel.setVisible(((object.getRngRandomSourceRequired().getIsAvailable()) && (object.getRngHwrngSourceRequired().getIsAvailable()))); }<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.VDSGroup> clusterModel = hostModel.getCluster(); if ((clusterModel.getSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = clusterModel.getSelectedItem(); java.lang.Boolean jsonSupported = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.JsonProtocolSupported, cluster.getcompatibility_version().toString()))); if (jsonSupported) { hostModel.getProtocol().setEntity(true); } else { hostModel.getProtocol().setEntity(false); } } }<END_MOD>
void <START_MOD>clearDismissedBySeverity<END_MOD>(<START_MOD>org.ovirt.engine.core.common.AuditLogSeverity severity<END_MOD>);
<START_MOD>protected java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.CommandBase<?>> buildChildCommands() { return java.util.Collections.<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.CommandBase<?>>emptyMap(); }<END_MOD>
<START_MOD>private boolean hostHasPpcArchitecture() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getModel().getSelectedCluster(); if (cluster == null) { return false; } org.ovirt.engine.core.common.businessentities.ArchitectureType archType = cluster.getArchitecture(); return ((archType == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64)) || (archType == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64le))) || (archType == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppcle)); }<END_MOD>
<START_MOD>private java.util.Map<java.lang.String, java.lang.Integer> buildIoTune(org.ovirt.engine.core.common.businessentities.DiskImage diskImage) { org.ovirt.engine.core.compat.Guid diskProfileId = diskImage.getDiskProfileId(); if (diskProfileId == null) { return null; } org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageQosDao().getByDiskProfile(diskProfileId); if (storageQos == null) { return null; } java.util.Map<java.lang.String, java.lang.Integer> ioTuneMap = new java.util.HashMap<>(); if ((storageQos.getMaxThroughput()) != null) { ioTuneMap.put(VdsProperties.TotalBytesSec, storageQos.getMaxThroughput()); } if ((storageQos.getMaxReadThroughput()) != null) { ioTuneMap.put(VdsProperties.ReadBytesSec, storageQos.getMaxReadThroughput()); } if ((storageQos.getMaxWriteThroughput()) != null) { ioTuneMap.put(VdsProperties.WriteBytesSec, storageQos.getMaxWriteThroughput()); } if ((storageQos.getMaxIops()) != null) { ioTuneMap.put(VdsProperties.TotalIopsSec, storageQos.getMaxIops()); } if ((storageQos.getMaxReadIops()) != null) { ioTuneMap.put(VdsProperties.ReadIopsSec, storageQos.getMaxReadIops()); } if ((storageQos.getMaxWriteIops()) != null) { ioTuneMap.put(VdsProperties.WriteIopsSec, storageQos.getMaxWriteIops()); } if ((ioTuneMap.size()) > 0) { return ioTuneMap; } return null; }<END_MOD>
protected boolean isVmInUpPausedDownStatus() { if ((((org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) && ((org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) && ((org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Paused))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL, org.ovirt.engine.core.bll.validator.LocalizedVmStatus.from(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getStatus())); } return true; }
public org.ovirt.engine.core.bll.ValidationResult anotherInterfaceAlreadyLabeledWithThisLabel(java.lang.String label, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfacesToCheck) { for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : interfacesToCheck) { boolean notTheSameNic = !(org.apache.commons.lang.StringUtils.equals(nic.getName(), iface.getName())); if (notTheSameNic) { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.OTHER_INTERFACE_ALREADY_LABELED, (   + (nic.getName()))).when(((org.ovirt.engine.core.utils.NetworkUtils.isLabeled(nic)) && (nic.getLabels().contains(label)))); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public void run() { try { java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> vmsToMigrate = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStaticDao().getAllWithFailbackByVds(vds.getId()); if (!(vmsToMigrate.isEmpty())) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); executionContext.setMonitored(true); org.ovirt.engine.core.bll.Backend.getInstance().runInternalMultipleActions(VdcActionType.MigrateVmToServer, new java.util.ArrayList(createMigrateVmToServerParametersList(vmsToMigrate, vds)), <START_MOD>new org.ovirt.engine.core.bll.context.CommandContext(<END_MOD>executionContext<START_MOD>)<END_MOD>); } } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.VdsEventListener.log.errorFormat( to initialize Vds on up. Error: {0} e); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> runExternalFilters(java.util.ArrayList<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl> filters, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, java.util.List<java.lang.String> messages) { java.util.List<org.ovirt.engine.core.compat.Guid> filteredIDs = null; if (filters != null) { java.util.List<java.lang.String> filterNames = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl filter : filters) { filterNames.add(filter.<START_MOD>getPolicyUnit().<END_MOD>getName()); } java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hostList) { hostIDs.add(host.getId()); } filteredIDs = org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerFactory.getInstance().runFilters(filterNames, hostIDs, vm.getId(), parameters); } return intersectHosts(hostList, filteredIDs); }
public static void mockOsTypes() { org.easymock.IMocksControl control = org.easymock.EasyMock.createNiceControl(); org.ovirt.engine.core.common.osinfo.OsRepository osRepositoryMock = control.createMock(org.ovirt.engine.core.common.osinfo.OsRepository.class); java.util.HashMap<java.lang.Integer, java.lang.String> osNames = new java.util.HashMap<>(1); osNames.put(0, "Unassigned"); expect(osRepositoryMock.getUniqueOsNames()).andReturn(osNames).anyTimes(); <START_MOD>expect(osRepositoryMock.isBalloonDisabledByDefault(anyInt(), anyObject(org.ovirt.engine.core.compat.Version.class))).andReturn(false).anyTimes(); <END_MOD>org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepositoryMock); control.replay(); }
void <START_MOD>setWriteRateKbPerSec<END_MOD>(int value);
<START_MOD>@java.lang.Override public T flush() { super.flush(); for (org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget lineWidget : widgets) { lineWidget.flush(); } return model; }<END_MOD>
private boolean validateLabelChanges(java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> potentialNetworks) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel mockSrc = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel(this); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel mockDst = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel(this); mockSrc.setEntity(new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface()); mockDst.setEntity(new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface()); mockDst.setItems(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(potentialNetworks)); boolean res = candidateOperation(mockSrc, mockDst, false<START_MOD>, true<END_MOD>); if (!res) { candidateOperation(mockSrc, mockDst, true<START_MOD>, false<END_MOD>); } return res; }
java.util.List<org.ovirt.engine.core.common.businessentities.storage_server_connections> <START_MOD>getStorageServerConnectionsByDomain<END_MOD>(org.ovirt.engine.core.common.businessentities.storage_domain_static storageDomain);
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__IMPORT); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__PROVIDER_CERTIFICATE); }
<START_MOD>@java.lang.Override protected void ExecuteVdsBrokerCommand() { glusterTaskReturn = org.ovirt.engine.core.vdsbroker.gluster.StartRemoveGlusterVolumeBrickVDSCommand.getBroker().glusterVolumeRemoveBrickStart(org.ovirt.engine.core.vdsbroker.gluster.StartRemoveGlusterVolumeBrickVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.StartRemoveGlusterVolumeBrickVDSCommand.getParameters().getBrickDirectories().toArray(new java.lang.String[0]), org.ovirt.engine.core.vdsbroker.gluster.StartRemoveGlusterVolumeBrickVDSCommand.getParameters().getReplicaCount(), org.ovirt.engine.core.vdsbroker.gluster.StartRemoveGlusterVolumeBrickVDSCommand.getParameters().isForceRemove()); task = glusterTaskReturn.getGlusterTask(); setReturnValue(task); org.ovirt.engine.core.vdsbroker.gluster.StartRemoveGlusterVolumeBrickVDSCommand.ProceedProxyReturnValue(); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { getAffinityGroup().setId(org.ovirt.engine.core.compat.Guid.newGuid()); getAffinityGroupDao().save(getAffinityGroup()); setSucceeded(true); }<END_MOD>
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.Role>) (source)) : new java.util.ArrayList<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.Role>(); }
@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { super.postDataCenterWithClusterSelectedItemChanged(); setupWindowModelFrom(pool.getStaticData()); getModel().<START_MOD>getMemSize().setEntity(pool.getStaticData().getMemSizeMb()); getModel().<END_MOD>setIsDisksAvailable(true); java.lang.Iterable<org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster> dataCenterWithClusters = getModel().getDataCenterWithClustersList().getItems(); org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster selectDataCenterWithCluster = org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(dataCenterWithClusters, new org.ovirt.engine.ui.uicommonweb.Linq.DataCenterWithClusterPredicate(pool.getStoragePoolId(), pool.getVdsGroupId())); getModel().getDataCenterWithClustersList().setSelectedItem((selectDataCenterWithCluster != null ? selectDataCenterWithCluster : org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(dataCenterWithClusters))); }
<START_MOD>public java.util.HashMap<org.ovirt.engine.core.common.utils.Pair<java.lang.Integer, org.ovirt.engine.core.compat.Version>, java.lang.Boolean> getNicHotplugSupportMap();<END_MOD>
public org.ovirt.engine.core.bll.<START_MOD>ValidationResult<END_MOD> isVmReadyForUpgrade(final org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Objects.requireNonNull(vm); java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR> <START_MOD>validationResult<END_MOD> = <START_MOD>checkVmReadyForUpgrade<END_MOD>(<START_MOD>vm<END_MOD>); if (<START_MOD>validationResult<END_MOD>.<START_MOD>isEmpty<END_MOD>()) { <START_MOD>return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.<END_MOD>errors.<START_MOD>EngineMessage.BOUND_TO_HOST_WHILE_UPGRADING_CLUSTER, java.lang.String.format<END_MOD>(<START_MOD> %1$s <END_MOD>org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.<START_MOD>VmValidation<END_MOD>.<START_MOD>toJson(validationResult))<END_MOD>); } }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper = createIdParameterMapper(networkAttachment.getId()).addValue("network_id", networkAttachment.getNetworkId()).addValue(<START_MOD>"switch_type", networkAttachment.getSwitchType().getOptionValue()).addValue(<END_MOD>"nic_id", networkAttachment.getNicId()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(networkAttachment.getProperties())); mapIpConfiguration(networkAttachment, mapper); return mapper; }
protected boolean <START_MOD>validateImages<END_MOD>() { return org.ovirt.engine.core.bll.ImagesHandler.PerformImagesChecks(org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().getCanDoActionMessages(), org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVm().getStoragePoolId(), Guid.Empty, hasImages(), hasImages(), hasImages(), hasImages(), true, true, org.ovirt.engine.core.bll.RemoveSnapshotCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVmId())); }
protected void <START_MOD>DetachVmFromUser<END_MOD>() { org.ovirt.engine.core.common.businessentities.VM<START_MOD> vm<END_MOD> = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().<START_MOD>get<END_MOD>(org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.<START_MOD>getVmId()); if (org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.getVmPoolId().equals(vm.getVmPoolId())) { org.ovirt.engine.core.common.businessentities.permissions perm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getPermissionDao().getForRoleAndAdElementAndObject(PredefinedRoles.ENGINE_USER.getId(), org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.<END_MOD>getAdUserId()<START_MOD>, vm.getId()); if (perm != null<END_MOD>) { <START_MOD>org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getPermissionDao().remove(<END_MOD>perm.getId()); RestoreVmFromBaseSnapshot(vm); } } }
private java.util.Map<java.lang.String, java.lang.String> getAddressMapForScsiDisk(java.lang.String address, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, int controllerIndex, boolean reserveFirstAddress) { java.util.Map<java.lang.String, java.lang.String> addressMap; int availableUnit = vmInfoBuildUtils.getAvailableUnitForScsiDisk(vmDeviceUnitMap, reserveFirstAddress); if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { addressMap = org.ovirt.engine.core.<START_MOD>utils.StringHelper<END_MOD>.string2Map(address); int unit = java.lang.Integer.parseInt(addressMap.get(VdsProperties.Unit)); if (vmDeviceUnitMap.containsValue(unit)) { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } } else { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } updateVmDeviceAddress(addressMap.toString(), vmDevice); return addressMap; }
<START_MOD>@org.junit.Test public void testNullClusterId() { org.ovirt.engine.core.common.businessentities.VmBase vmBase = createVmBase(cpuProfile1.getId()); vmBase.setClusterId(null); org.ovirt.engine.core.bll.ValidationResult res = cpuProfileHelper.setAndValidateCpuProfile(vmBase, org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.USER_1_ID); assertThat(res, failsWith(EngineMessage.ACTION_TYPE_CPU_PROFILE_CLUSTER_NOT_PROVIDED)); }<END_MOD>
private void updateCanSpecify() { org.ovirt.engine.core.common.businessentities.network.Network network = ((org.ovirt.engine.core.common.businessentities.network.Network) (getNetwork().getSelectedItem())); boolean isChangable = (bootProtocolsAvailable) && (getIsStaticAddress()); getAddress().setIsChangable(isChangable); getSubnet().setIsChangable(isChangable); <START_MOD>getGateway().setIsChangable(isChangable); <END_MOD>}
<START_MOD>private void onEdit() { org.ovirt.engine.ui.uicommonweb.models.OptionsModel.logger.info("onEdit"); org.ovirt.engine.ui.uicommonweb.models.EditOptionsModel model = new org.ovirt.engine.ui.uicommonweb.models.EditOptionsModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicommonweb.models.OptionsModel.constants.editOptionsTitle()); model.setHelpTag(HelpTag.manual_fence_are_you_sure); model.setHashName("manual_fence_are_you_sure"); org.ovirt.engine.ui.uicommonweb.models.OptionsModel.logger.info("end onEdit"); }<END_MOD>
<START_MOD>private java.lang.String urlEncode(java.lang.String jsonTicket) { try { return java.net.URLEncoder.encode(jsonTicket, "UTF-8"); } catch (java.io.UnsupportedEncodingException ex) { throw new javax.ws.rs.WebApplicationException(ex, Response.Status.INTERNAL_SERVER_ERROR); } }<END_MOD>
private void assertCanDoActionMessage(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD> msg) { assertTrue( failed for the wrong reason command.getReturnValue().getCanDoActionMessages().contains(msg.name())); }
private boolean internalCanDoAction() { boolean returnValue = false; try { javax.transaction.Transaction transaction = null; if (!(isCanDoActionSupportsTransaction())) { transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); } try { returnValue = (((((isUserAuthorizedToRunAction()) && (isBackwardsCompatible())) && (validateInputs())) && (acquireLock())) && (canDoAction())) && (internalValidateAndSetQuota()); if ((!returnValue) && ((getReturnValue().getCanDoActionMessages().size()) > 0)) { <START_MOD>java.util.List<java.lang.String> canDos = getBackend().getErrorsTranslator().TranslateErrorText(getReturnValue().getCanDoActionMessages()); <END_MOD>log.warn( of action '{}' failed for user {}. Reasons: {} getActionType(), org.ovirt.engine.core.bll.CommandBase.getUserName(), org.apache.commons.lang.StringUtils.join(<START_MOD>canDos<END_MOD>, ',')); } } finally { if (transaction != null) { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); } } } catch (org.springframework.dao.DataAccessException dataAccessEx) { log.error( access error during CanDoActionFailure. dataAccessEx); addCanDoActionMessage(EngineMessage.CAN_DO_ACTION_DATABASE_CONNECTION_FAILURE); } catch (java.lang.RuntimeException ex) { log.error( during CanDoActionFailure. ex); addCanDoActionMessage(EngineMessage.CAN_DO_ACTION_GENERAL_FAILURE); } finally { if (!returnValue) { freeLock(); } } return returnValue; }
@org.junit.Test public void testGetAllIds() { java.util.List<org.ovirt.engine.core.compat.Guid> ids = <START_MOD>getAllJobIds<END_MOD>(); assertTrue(ids.remove(FixturesTool.EXISTING_VM_JOB)); assertTrue(ids.remove(FixturesTool.EXISTING_VM_BLOCK_JOB)); assertTrue(ids.isEmpty()); }
<START_MOD>protected java.io.InputStream findClientOracleData(java.lang.String requestModuleBasePath, java.lang.String permutationStrongName) throws com.google.gwt.user.client.rpc.SerializationException { try { return super.findClientOracleData(requestModuleBasePath, permutationStrongName); } catch (com.google.gwt.user.client.rpc.SerializationException e) { if ((remoteOracleSource) != null) { org.apache.http.client.utils.URIBuilder builder = new org.apache.http.client.utils.URIBuilder(); builder.setScheme(org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.HTTP); builder.setHost(remoteHost); builder.setPort(remotePort); builder.setPath((((((org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.SLASH) + (getApplicationPath())) + (org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.SLASH)) + permutationStrongName) + (org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.GWT_RPC_EXT))); return remoteOracleSource.findOracleData(builder.toString()); } throw e; } }<END_MOD>
@java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior) (array[0])); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (array[1])); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>) (returnValue)); <START_MOD>java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> virtServiceClusters = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>(); for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters) { if (cluster.supportsVirtService()) { virtServiceClusters.add(cluster); } } <END_MOD>model.SetClusters(model, <START_MOD>virtServiceClusters<END_MOD>, null); behavior.InitTemplate(); behavior.InitCdImage(); }
@java.lang.Override protected boolean canDoAction() { if ((getProvider()) == null) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST); } org.ovirt.engine.core.bll.provider.ProviderProxy providerProxy = getProviderProxy(); if (providerProxy == null) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_PROVIDER_NOT_SUPPORTED, java.lang.String.format( %1$s getProvider().getType())); } org.ovirt.engine.core.bll.provider.ProviderValidator validator = getProviderProxy().getProviderValidator(); return (validate(validator.nameAvailable())) && (validate(validator.validateAddProvider())); }
protected void <START_MOD>populateProfiles<END_MOD>(java.util.List<java.lang.String> <START_MOD>profiles<END_MOD>) { <START_MOD>getProfile<END_MOD>().setItems(<START_MOD>profiles<END_MOD>); <START_MOD>getProfile<END_MOD>().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(<START_MOD>profiles<END_MOD>)); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.host.provider.HostProviderProxy proxy = systemProviderFinder.findSystemProvider(); if (proxy == null) { org.ovirt.engine.core.bll.GetErrataForEngineQuery.getQueryReturnValue().setSucceeded(false); org.ovirt.engine.core.bll.GetErrataForEngineQuery.getQueryReturnValue().setExceptionString(EngineMessage.NO_FOREMAN_PROVIDER_FOR_ENGINE.name()); <START_MOD>org.ovirt.engine.core.bll.GetErrataForEngineQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.common.businessentities.ErrataData.emptyData()); <END_MOD>} else { <START_MOD>org.ovirt.engine.core.common.businessentities.ErrataData errataForEngine = proxy.getErrataForHost(systemProviderFinder.getSystemHostName(), org.ovirt.engine.core.bll.GetErrataForEngineQuery.getParameters().getErrataFilter()); <END_MOD>setReturnValue(<START_MOD>errataForEngine<END_MOD>); } }
@java.lang.Override public org.ovirt.engine.api.model.Events list() { <START_MOD>if (isFiltered()) { return mapCollection(getBackendCollection(VdcQueryType.GetEventMessages, new org.ovirt.engine.core.common.queries.GetEventMessagesParameters())); } else { <END_MOD>return mapCollection(getBackendCollection()); }<START_MOD> }<END_MOD>
@org.junit.Test(expected = java.lang.NullPointerException.class) public void appendCustomValueUsesNullSeparator() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String newVal = "bar"; final java.lang.String sep = null; b.addCustomValue(key, value); b.<START_MOD>appendCustomValueUsingCustomSeparator<END_MOD>(key, newVal, sep); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue(<START_MOD>"Add")<END_MOD> java.lang.String addBricksVolume();
<START_MOD>private void addWatchdogActions(org.ovirt.engine.api.model.VersionCaps version, org.ovirt.engine.api.restapi.types.WatchdogAction[] values) { if (org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual(version, org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_2)) { version.setWatchdogActions(new org.ovirt.engine.api.model.WatchdogActions()); for (org.ovirt.engine.api.restapi.types.WatchdogAction watchdogAction : values) { version.getWatchdogActions().getWatchdogAction().add(watchdogAction.value()); } } }<END_MOD>
<START_MOD>@org.junit.Test public void canDoActionFailureOnCopyingCinderDisk() { initializeCommand(ImageOperation.Copy, new org.ovirt.engine.core.common.businessentities.storage.CinderDisk()); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, EngineMessage.ACTION_TYPE_FAILED_CINDER_DISK); }<END_MOD>
<START_MOD>public java.lang.Boolean isDiscardZeroesData() { return staticData.isDiscardZeroesData(); }<END_MOD>
<START_MOD>@java.lang.Override public boolean isApplicable(org.ovirt.engine.core.common.businessentities.Cluster oldCluster, org.ovirt.engine.core.common.businessentities.Cluster newCluster) { return !(oldCluster.getCompatibilityVersion().equals(newCluster.getCompatibilityVersion())); }<END_MOD>
public void addDisk() { if ((getEntity()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.NewDiskModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.NewGuideDiskModel(this); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().addVirtualDiskTitle()); model.setHashName("new_virtual_disk");<START_MOD> model.setHelpTag(model.getHashName(),   > Virtual Disks > New Virtual Disk<END_MOD> model.setVm(getEntity()); setWindow(model); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); cancelCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); cancelCommand.setIsCancel(true); model.setCancelCommand(cancelCommand); model.initialize(); }
<START_MOD>private void validateCustomProperties() { java.lang.String version = vds.getVdsGroupCompatibilityVersion().getValue(); org.ovirt.engine.core.utils.customprop.SimpleCustomPropertiesUtil util = org.ovirt.engine.core.utils.customprop.SimpleCustomPropertiesUtil.getInstance(); java.util.Map<java.lang.String, java.lang.String> validProperties = util.convertProperties(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.PreDefinedNetworkCustomProperties, version)); validProperties.putAll(util.convertProperties(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.UserDefinedNetworkCustomProperties, version))); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : params.getInterfaces()) { if ((iface.getCustomProperties()) != null) { if (!(networkCustomPropertiesSupported)) { addViolation(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_NOT_SUPPORTED, iface.getNetworkName()); } else if (!(util.validateProperties(validProperties, iface.getCustomProperties()).isEmpty())) { addViolation(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_BAD_INPUT, iface.getNetworkName()); } } } }<END_MOD>
public void updateNetworkInterfacesByTemplate(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { org.ovirt.engine.core.common.queries.VdcQueryType queryType = (vmBase instanceof org.ovirt.engine.core.common.businessentities.VmTemplate) ? org.ovirt.engine.core.common.queries.VdcQueryType.GetTemplateInterfacesByTemplateId : org.ovirt.engine.core.common.queries.VdcQueryType.GetVmInterfacesByVmId; org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object parentModel, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { if (returnValue == null) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = returnValue.getReturnValue(); updateNetworkInterfaces(getNetworkProfileBehavior(), nics); } }); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(queryType, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBase.getId()), query); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("refreshAllUsers") public void refreshAllUsers() { java.util.List<org.ovirt.engine.core.common.businessentities.DbUser> activeUsers = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.DbUser dbUser : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().getAll()) { if (dbUser.isActive()) { activeUsers.add(dbUser); } } for (org.ovirt.engine.core.common.businessentities.DbUser user : org.ovirt.engine.core.bll.SyncUsers.sync(activeUsers<START_MOD>, false<END_MOD>)) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().update(user); } }
private org.ovirt.engine.core.utils.kerberos.AuthenticationResult checkAuthentication(java.lang.String username, java.lang.String password) { org.ovirt.engine.core.utils.kerberos.AuthenticationResult result = AuthenticationResult.OK; try { lc = new javax.security.auth.login.LoginContext("KerberosUtil", new org.ovirt.engine.core.utils.kerberos.KerberosConfigCheck.KerberosUtilCallbackHandler(username, password)); lc.login(); org.ovirt.engine.core.utils.kerberos.KerberosConfigCheck.log.debug( authentication finished successfully   } catch (javax.security.auth.login.LoginException ex) { java.lang.String resultMessage = ex.getMessage(); java.lang.String formattedMessage = ((org.ovirt.engine.core.utils.kerberos.InstallerConstants.ERROR_PREFIX) +   exception message:   + resultMessage; org.ovirt.engine.core.utils.kerberos.KerberosConfigCheck.log.error(formattedMessage); org.ovirt.engine.core.utils.kerberos.<START_MOD>KerberosConfigCheck.log.debug(ex); org.ovirt.engine.core.utils.kerberos.<END_MOD>KerberosReturnCodeParser parser = new org.ovirt.engine.core.utils.kerberos.KerberosReturnCodeParser(); result = parser.parse(resultMessage); if (result != (AuthenticationResult.OTHER)) { return result; } else { java.lang.System.out.println(formattedMessage); } } return result; }
<START_MOD>@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(super.equals(obj))) { return false; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.network.VmNic)) { return false; } org.ovirt.engine.core.common.businessentities.network.VmNic other = ((org.ovirt.engine.core.common.businessentities.network.VmNic) (obj)); if ((isPlugged()) != (other.isPlugged())) { return false; } if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getCustomProperties(), other.getCustomProperties()))) { return false; } if ((isPlugged()) != (other.isPlugged())) { return false; } if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getVmId(), other.getVmId()))) { return false; } if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getVnicProfileId(), other.getVnicProfileId()))) { return false; } if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getVmTemplateId(), other.getVmTemplateId()))) { return false; } return true; }<END_MOD>
<START_MOD>protected void setActionItem(org.ovirt.engine.api.model.Action action, java.lang.Object result) { java.lang.String name = result.getClass().getSimpleName().toLowerCase(); for (java.lang.reflect.Method m : action.getClass().getMethods()) { if ((m.getName().startsWith("set")) && (m.getName().replace("set", "").toLowerCase().equals(name))) { try { m.invoke(action, result); break; } catch (java.lang.Exception e) { org.ovirt.engine.api.restapi.resource.BackendResource.LOG.error("Resource to action asignment failure.", e); e.printStackTrace(); break; } } } }<END_MOD>
<START_MOD>private boolean noGraphicsDevicesLeft() { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> devices = runInternalQuery(VdcQueryType.GetGraphicsDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(getParameters().getDev().getVmId())).getReturnValue(); return devices.isEmpty(); }<END_MOD>
public static void InitDictionaries() {<START_MOD> org.ovirt.engine.core.bll.CpuFlagsManagerHandler.log.info(( initializing   + (org.ovirt.engine.core.bll.CpuFlagsManagerHandler.class.getSimpleName())));<END_MOD> org.ovirt.engine.core.bll.CpuFlagsManagerHandler._managersDictionary.clear(); for (org.ovirt.engine.core.compat.Version ver : org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>GetValue(ConfigValues.SupportedClusterLevels)) { org.ovirt.engine.core.bll.CpuFlagsManagerHandler._managersDictionary.put(ver, new org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager(ver)); } <START_MOD>org.ovirt.engine.core.bll.CpuFlagsManagerHandler.log.info(( initializing   + (org.ovirt.engine.core.bll.CpuFlagsManagerHandler.class.getSimpleName()))); <END_MOD>}
@java.lang.Override protected boolean canDoAction() { return ((((((((((isImageExist()) && (checkOperationIsCorrect())) && (isDiskUsedAsOvfStore())) && (isImageNotLocked())) && (isSourceAndDestTheSame())) && (validateSourceStorageDomain())) && (validateDestStorage())) && (checkTemplateInDestStorageDomain())) && (validateSpaceRequirements())) && (checkCanBeMoveInVm())) && (setAndValidateDiskProfiles()); }
protected java.util.List<java.lang.String> missingServerCpuFlags(org.ovirt.engine.core.common.businessentities.VDS vds) { return <START_MOD>cpuFlagsManagerHandler<END_MOD>.missingServerCpuFlags(org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getVdsGroup().getCpuName(), vds.getCpuFlags(), org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getVdsGroup().getCompatibilityVersion()); }
protected boolean uniqueInterfaceName(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) { return org.ovirt.engine.core.bll.VmHandler.isNotDuplicateInterfaceName(interfaces, getInterfaceName(), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getReturnValue().<START_MOD>getValidateMessages<END_MOD>()); }
<START_MOD>protected org.ovirt.engine.core.dao.gluster.GlusterServerServiceDao getGlusterServerServoceDao() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getGlusterServerServiceDao(); }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel) (array[0])); org.ovirt.engine.ui.uicommonweb.models.storage.RemoveStorageModel removeStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.RemoveStorageModel) (array[1])); org.ovirt.engine.core.common.businessentities.StorageDomain storage = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (storageListModel.getSelectedItem())); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); removeStorageModel.getHostList().setItems(hosts); removeStorageModel.getHostList().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(hosts)); removeStorageModel.getFormat().<START_MOD>setEntity((!<END_MOD>(storage.getStorageDomainType().isIsoOrImportExportDomain())<START_MOD>))<END_MOD>; if (hosts.isEmpty()) { org.ovirt.engine.ui.uicommonweb.UICommand tempVar = createCancelCommand("Cancel"); tempVar.setIsDefault(true); removeStorageModel.getCommands().add(tempVar); } else { org.ovirt.engine.ui.uicommonweb.UICommand command; command = createOKCommand("OnRemove"); removeStorageModel.getCommands().add(command); command = createCancelCommand("Cancel"); removeStorageModel.getCommands().add(command); } }
@org.junit.Test public void canRemoveLastBrick() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedVolume(volumeId1, 1); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(volumeEntity.getBricks(), volumeEntity, 1, false); assertFalse(validationResult.isValid()); assertTrue(((org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME) == (validationResult.getMessage()))); }
private void addMacPool(final org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel dcModel) { org.ovirt.engine.ui.uicommonweb.models.macpool.SharedMacPoolModel macPoolModel = new org.ovirt.engine.ui.uicommonweb.models.macpool.NewSharedMacPoolModel(this<START_MOD>, true<END_MOD>) { @java.lang.Override protected void onActionSucceeded(org.ovirt.engine.core.compat.Guid macPoolId) { org.ovirt.engine.core.common.businessentities.MacPool macPool = getEntity(); macPool.setId(macPoolId); java.util.Collection<org.ovirt.engine.core.common.businessentities.MacPool> macPools = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.MacPool>(dcModel.getMacPoolListModel().getItems()); macPools.add(macPool); dcModel.getMacPoolListModel().setItems(macPools); dcModel.getMacPoolListModel().setSelectedItem(macPool); org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel.this.setConfirmWindow(null); } }; macPoolModel.setEntity(new org.ovirt.engine.core.common.businessentities.MacPool()); setConfirmWindow(macPoolModel); }
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultMessage("{0} Socket(s), {1} Core(s) per Socket") java.lang.String socketsCoresMessage(int sockets, int coresPerSocket);<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__HOST); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__UPDATE); }
<START_MOD>private void checkVdsNetworkThreshold(org.ovirt.engine.core.common.businessentities.VdsStatistics stat) { java.lang.Integer maxUsedPercentageThreshold = org.ovirt.engine.core.common.config.Config.GetValue(ConfigValues.LogMaxNetworkUsedThresholdInPercentage); if ((stat.getusage_network_percent()) > maxUsedPercentageThreshold) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.setVdsId(stat.getId()); logable.AddCustomValue("HostName", _vds.getvds_name()); logable.AddCustomValue("UsedNetwork", stat.getusage_network_percent().toString()); logable.AddCustomValue("Threshold", maxUsedPercentageThreshold.toString()); auditLog(logable, AuditLogType.VDS_HIGH_NETWORK_USE); } }<END_MOD>
<START_MOD>@java.lang.Override protected void init() { setNetworkFilterParameterWidgetVisible(true); super.init(); }<END_MOD>
<START_MOD>protected boolean isVmStatusValid(org.ovirt.engine.core.common.businessentities.VMStatus status) { return status != (org.ovirt.engine.core.common.businessentities.VMStatus.Down); }<END_MOD>
@java.lang.Override public boolean canBeSelected() { <START_MOD>return<END_MOD> getEntity().<START_MOD>getGraphicsInfos<END_MOD>().<START_MOD>get(GraphicsType.VNC).isSet<END_MOD>(); }
<START_MOD>private void addTextAndLinkAlert(final org.ovirt.engine.ui.webadmin.section.main.presenter.tab.host.SubTabHostGeneralInfoPresenter.ViewDef view, final java.lang.String text, final org.ovirt.engine.ui.uicommonweb.UICommand command, final org.ovirt.engine.ui.webadmin.widget.alert.InLineAlertWidget.AlertType alertTtpe) { final int openIndex = text.indexOf("<a>"); final int closeIndex = text.indexOf("</a>"); if (((openIndex == (-1)) || (closeIndex == (-1))) || (closeIndex < openIndex)) { return; } final java.lang.String beforeText = text.substring(0, openIndex); final java.lang.String betweenText = text.substring((openIndex + 3), closeIndex); final java.lang.String afterText = text.substring((closeIndex + 4)); final com.google.gwt.user.client.ui.FlowPanel alertPanel = new com.google.gwt.user.client.ui.FlowPanel(); final com.google.gwt.user.client.ui.Label beforeLabel = new com.google.gwt.user.client.ui.Label(beforeText); beforeLabel.getElement().getStyle().setProperty("display", "inline"); alertPanel.add(beforeLabel); final com.google.gwt.user.client.ui.Anchor betweenAnchor = new com.google.gwt.user.client.ui.Anchor(betweenText); betweenAnchor.getElement().getStyle().setProperty("display", "inline"); alertPanel.add(betweenAnchor); betweenAnchor.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { command.execute(); } }); final com.google.gwt.user.client.ui.Label afterLabel = new com.google.gwt.user.client.ui.Label(afterText); afterLabel.getElement().getStyle().setProperty("display", "inline"); alertPanel.add(afterLabel); view.addAlert(alertPanel, alertTtpe); }<END_MOD>
<START_MOD>java.lang.String determineProtocolMessage(org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel item);<END_MOD>
<START_MOD>protected com.google.gwt.user.client.ui.SplitLayoutPanel createRootPanel() { com.google.gwt.user.client.ui.SplitLayoutPanel rootPanel = new com.google.gwt.user.client.ui.SplitLayoutPanel(); rootPanel.setHeight("495px"); rootPanel.setWidth("100%"); return rootPanel; }<END_MOD>
@org.junit.Test public void testCDAStoragePoolNotUp() { storagePool.setStatus(StoragePoolStatus.Uninitialized); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure( did not fail on a Storage Pool which is not up command, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND); }
<START_MOD>public boolean isMigrateCompressed() { return migrateCompressed; }<END_MOD>
@java.lang.Override protected void proceedProxyReturnValue() { org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD> returnStatus = getReturnValueFromStatus(getReturnStatus()); switch (returnStatus) { case GetStorageDomainListError : org.ovirt.engine.core.vdsbroker.irsbroker.GetVolumesListVDSCommand.getVDSReturnValue().setVdsError(new org.ovirt.engine.core.common.errors.VDSError(returnStatus, getReturnStatus().mMessage)); org.ovirt.engine.core.vdsbroker.irsbroker.GetVolumesListVDSCommand.getVDSReturnValue().setSucceeded(false); break; default : super.proceedProxyReturnValue(); break; } }
@java.lang.Override public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter(java.lang.String fieldName) { if ("OS".equals(fieldName)) { return new org.ovirt.engine.core.searchbackend.<START_MOD>OsValueAutoCompleter(); } else if ("STATUS".equals(fieldName)) { return new org.ovirt.engine.core.searchbackend.<END_MOD>EnumValueAutoCompleter(org.ovirt.engine.core.common.businessentities.<START_MOD>VMStatus<END_MOD>.class); } else if (<START_MOD>"TYPE"<END_MOD>.equals(fieldName)) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter(org.ovirt.engine.core.common.businessentities.<START_MOD>VmType<END_MOD>.class); } else if ("QUOTA".equals(fieldName)) { return new org.ovirt.engine.core.searchbackend.NullableStringAutoCompleter(); } return null; }
@org.junit.Test public void runSingleQuery() { org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters parameters = new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters(); org.ovirt.engine.core.common.queries.VdcQueryReturnValue value = backend.runInternalQuery(VdcQueryType.GetAllRoles, parameters); assertTrue(value.getSucceeded()); java.util.Collection<org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD>> roles = ((java.util.Collection<org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity>) (value.getReturnValue())); for (org.ovirt.engine.core.common.businessentities.RolesEntity role : <END_MOD>roles<START_MOD>) { java.lang.System.out.println(<END_MOD>role.getname()); } }
@java.lang.Override protected boolean canDoAction() { return ((<START_MOD>(<END_MOD>super.canDoAction()) && (VdsGroupExists())) && (<START_MOD>logicalNetworkExists())) && (<END_MOD>changesAreClusterCompatible()); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Directory field is mandatory java.lang.String emptyBrickDirectoryMsg();
<START_MOD>protected java.lang.String getSessionId() { java.lang.String sessionId = null; if (((getContext()) != null) && ((getContext().getEngineContext()) != null)) { sessionId = getContext().getEngineContext().getSessionId(); } return sessionId; }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__WRITE_PUB_KEYS); }
@java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand command, java.lang.Object... parameters) { super.ExecuteCommand(command); if (command == (getEditCommand())) { Edit(); } else if (command == (getEditManagementNetworkCommand())) { EditManagementNetwork(); } else if (command == (getSetupNetworksCommand())) { SetupNetworks(); } else if (command == (getBondCommand())) { <START_MOD>executeBond<END_MOD>(); } else if (command == (getDetachCommand())) { Detach(); } else if (command == (getSaveNetworkConfigCommand())) { SaveNetworkConfig(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnSave")) { OnSave(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnEditManagementNetwork")) { OnEditManagementNetwork(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnEditManagementNetworkConfirmation")) { OnEditManagementNetworkConfirmation(false); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnEditManagementNetworkConfirmation_Bond")) { OnEditManagementNetworkConfirmation(true); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnBond")) { OnBond(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnDetach")) { OnDetach(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnConfirmManagementDetach")) { OnConfirmManagementDetach(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "Cancel")) { Cancel(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "CancelConfirm")) { CancelConfirm(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnSaveNetworkConfig")) { OnSaveNetworkConfig(); } }
private void failOnDowngradingWithStorageType(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { storagePoolVersion35(); cmd.getStoragePool().setCompatibilityVersion(Version.v3_1); org.ovirt.engine.core.common.businessentities.StorageDomain sd = createStorageDomain(StorageFormatType.V3, storageType); setAttachedDomains(sd); canDoActionFailed(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_DOMAINS_ARE_NOT_SUPPORTED_IN_DOWNGRADED_VERSION); }
<START_MOD>@java.lang.Override public HostJobInfo.HostJobStatus poll() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); return poller.pollImage(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getStoragePoolId(), info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId(), info.getGeneration(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getCommandId(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getActionType()); }<END_MOD>
protected org.ovirt.engine.core.common.businessentities.VMStatus createVm() { initParametersForExternalNetworks(); initParametersForPassthroughVnics(); org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = ((org.ovirt.engine.core.common.businessentities.VMStatus) (org.ovirt.engine.core.bll.RunVmCommand.getVdsBroker().runAsyncVdsCommand(VDSCommandType.Create, buildCreateVmParameters(), this).getReturnValue())); memoryFromSnapshotUsed = (vmStatus.isRunning()) || (vmStatus == (org.ovirt.engine.core.common.businessentities.VMStatus.RestoringState)); return vmStatus; }
public org.ovirt.engine.core.bll.ValidationResult validateCinderDiskSnapshotsLimits() { return validate(new java.util.concurrent.Callable<org.ovirt.engine.core.bll.ValidationResult>() { @java.lang.Override public org.ovirt.engine.core.bll.ValidationResult call() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageMap = getRelatedCinderDisksToStorageDomainMap(); java.util.Collection<org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageCollection = relatedCinderDisksByStorageMap.values(); for (org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy relatedCinderDisksByStorage : relatedCinderDisksByStorageCollection) { com.woorea.openstack.cinder.model.Limits limits = relatedCinderDisksByStorage.getProxy().getLimits(); int numOfDisks = relatedCinderDisksByStorage.getCinderDisks().size(); if (isLimitExceeded(limits, VolumeClassification.Snapshot, numOfDisks)) { java.lang.String storageName = getStorageDomainDao().get(relatedCinderDisksByStorage.getStorageDomainId()).getStorageName(); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.CANNOT_ADD_CINDER_DISK_SNAPSHOT_LIMIT_EXCEEDED, java.lang.String.format( %d limits.getAbsolute().getMaxTotalVolumes()), java.lang.String.format( %s storageName)); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; } }); }
<START_MOD>protected void validateVM(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, final java.lang.String vmName) { if (!(model.validate())) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isVmNameUnique(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { if ((!((java.lang.Boolean) (returnValue))) && ((vmName.compareToIgnoreCase(getcurrentVm().getName())) != 0)) { model.getName().getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason()); model.getName().setIsValid(false); model.setValidTab(TabName.GENERAL_TAB, false); } else { model.getName().getInvalidityReasons().clear(); model.getName().setIsValid(true); model.setValidTab(TabName.GENERAL_TAB, true); onSaveVM(model); } } }), vmName); }<END_MOD>
private void containerChanged() { if ((getContainer()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenter = getContainer().getDataCenter(); dataCenter.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.EventArgs><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { containerDataCenterChanged(); } }); if ((dataCenter.getSelectedItem()) != null) { containerDataCenterChanged(); } }
@java.lang.Override public org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> runBalance(java.lang.String balanceName, java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs, java.util.Map<java.lang.String, java.lang.String> propertiesMap) { try { org.apache.xmlrpc.client.XmlRpcClient client = new org.apache.xmlrpc.client.XmlRpcClient(); client.setConfig(config); java.lang.Object result = client.execute(org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.BALANCE, createBalanceArgs(balanceName, hostIDs, propertiesMap)); return org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerObjectBuilder.getBalanceResults(result).getResult(); } catch (org.apache.xmlrpc.XmlRpcException e) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.log.error( communicate with the external scheduler while balancing<START_MOD>: {}<END_MOD> e<START_MOD>.getMessage()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.log.debug("Exception", e<END_MOD>); auditLogFailedToConnect(); return null; } }
private void removeMemoryVolumesOfSnapshot(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = runInternalAction(VdcActionType.RemoveMemoryVolumes, new org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters(snapshot.getMemoryVolume(), org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVmId()<START_MOD>, false<END_MOD>), org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.cloneContextAndDetachFromParent()); if (!(retVal.getSucceeded())) { log.error( to remove memory volumes of snapshot '{}' ({}) snapshot.getDescription(), snapshot.getId()); } }
@java.lang.Override public void reportCompleted() { try { super.reportCompleted(); } finally { if ((<START_MOD>getDestinationVdsId<END_MOD>()) != null) { decreasePendingVms(<START_MOD>getDestinationVdsId<END_MOD>()); } org.ovirt.engine.core.bll.MigrateVmCommand.freeLock(); } }
private org.ovirt.engine.core.common.action.ImportVmParameters createImportParams(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.StorageDomain sd) { org.ovirt.engine.core.common.action.ImportVmParameters parameters = new org.ovirt.engine.core.common.action.ImportVmParameters(vm, sd.getId(), sd.getId(), sd.getStoragePoolId(), vm.getClusterId()); org.ovirt.engine.core.compat.Guid sdProfileId = diskProfileDao.getAllForStorageDomain(sd.getId()).get(0).getId(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : vm.getImages()) { image.setDiskProfileId(sdProfileId); image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(sd.getId()))); image.setVmSnapshotId(org.ovirt.engine.core.compat.Guid.newGuid()); } parameters.setImagesExistOnTargetStorageDomain(true); vm.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); org.ovirt.engine.core.common.businessentities.Cluster cluster = clusterDAO.get(vm.getClusterId()); vm.setClusterArch(cluster.getArchitecture()); vm.setVmCreationDate(new java.util.Date()); vm.setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE); vm.setVmOs(osRepository.getLinuxOss().stream().sorted().findFirst().get()); <START_MOD>vm.setPriority(1); vm.setTimeZone(java.util.TimeZone.getDefault().getID()); <END_MOD>return parameters; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Bricks Status java.lang.String removeBricksStatusTitle();
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult networkExists() { return (getNetwork()) == null ? new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_NOT_EXISTS) : org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.businessentities.GraphicsDevice getGraphicsDevOfType(org.ovirt.engine.core.common.businessentities.GraphicsType type) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue query = org.ovirt.engine.core.bll.UpdateVmCommand.getBackend().runInternalQuery(VdcQueryType.GetGraphicsDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmId())); java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> graphicsDevices = query.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.GraphicsDevice dev : graphicsDevices) { if ((dev.getVmDeviceType()) == (type.getCorrespondingDeviceType())) { return dev; } } return null; }<END_MOD>
@org.ovirt.engine.ui.frontend.DefaultStringValue( ${action} ${type} without at least one bootable disk. <START_MOD>Create <END_MOD>a disk for this VM, and rerun the VM.<START_MOD> Change<END_MOD> the boot sequence using the Edit VM command (Boot Option Sub-Tab). <START_MOD>Use <END_MOD>the <START_MOD>Run-<END_MOD>Once command to select a different boot option and rerun the VM. java.lang.String VM_CANNOT_RUN_FROM_DISK_WITHOUT_DISK();
<START_MOD>@org.junit.Test public void dontSyncNetworkAlreadyInSync() { org.ovirt.engine.core.common.businessentities.Network net = createNetwork("net"); mockExistingNetworks(net); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNicOnNetwork("nic0", net); mockExistingIfaces(nic); org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper(createParametersForSync(nic)); validateAndAssertNoChanges(helper); }<END_MOD>
public void setMemoryStats(long totalMemory, long usedMemory) { java.lang.String totalMemoryString = messages.numaMemory(totalMemory); totalLabel.setText(totalMemoryString); java.lang.String usedMemoryString = messages.numaMemoryUsed(usedMemory); usedLabel.setText(usedMemoryString); }
<START_MOD>@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.qos.StorageQos> qosList = (returnValue == null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.qos.StorageQos>() : ((java.util.List<org.ovirt.engine.core.common.businessentities.qos.StorageQos>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); qosList.add(0, org.ovirt.engine.ui.uicommonweb.models.profiles.DiskProfileBaseModel.EMPTY_QOS); getQos().setItems(qosList); if ((defaultQosId) != null) { for (org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos : qosList) { if (defaultQosId.equals(storageQos.getId())) { getQos().setSelectedItem(storageQos); break; } } } }<END_MOD>
<START_MOD>@org.junit.Test public void shouldKeepSameMajorWithOlderMinor() { newEnoughHost.setHostOs("RHEL - 6.0 - 1.el6"); assertThat(filter(runningVm, newEnoughHost, currentHost)).containsExactly(org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight(newEnoughHost, org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BETTER_WEIGHT), org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight(currentHost, org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BETTER_WEIGHT)); }<END_MOD>
@java.lang.Override public void onDragLeave(com.google.gwt.event.dom.client.DragLeaveEvent event) { table.getElement().removeClassName(style.networkGroupDragOver()); <START_MOD>eventBus.fireEvent(new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.AutoScrollDisableEvent(this)); <END_MOD>}
private org.ovirt.engine.core.common.vdscommands.VDSReturnValue handleVdsResult(org.ovirt.engine.core.common.vdscommands.VDSReturnValue result) { if (!(org.<START_MOD>apache.commons.lang.StringUtils.isEmpty<END_MOD>(result.getExceptionString()))) { org.ovirt.engine.core.common.errors.VdcBLLException exp; if ((result.getVdsError()) != null) { exp = new org.ovirt.engine.core.common.errors.VdcBLLException(result.getVdsError().getCode(), result.getExceptionString()); } else { exp = new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.ENGINE, result.getExceptionString()); } throw exp; } return result; }
<START_MOD>@java.lang.Override protected void onBind() { super.onBind(); org.ovirt.engine.ui.webadmin.section.main.presenter.tab.host.SubTabHostGeneralHostErrataPresenter.logger.info(((this.getClass().toString()) + " onBind")); updateModel(currentErrataModel); getView().getTotalSecurity().setCommand(currentErrataModel.getShowSecurityCommand()); getView().getTotalBugFix().setCommand(currentErrataModel.getShowBugsCommand()); getView().getTotalEnhancement().setCommand(currentErrataModel.getShowEnhancementsCommand()); }<END_MOD>
@org.junit.Test public void <START_MOD>testGetLunsThatBreakPassDiscardFunctionalityFullPassDiscardFunctionalityBreaks<END_MOD>() { createVmDiskOnSd(false, false); createVmDiskOnSd(true, true); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardSupport = createLunWithDiscardFunctionality(0L, false); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardZeroesTheDataSupport = createLunWithDiscardFunctionality(1024L, false); <START_MOD>assertGetLunsThatBreakPassDiscardFunctionalityContainsExpectedLuns<END_MOD>(java.util.Arrays.asList(createLunWithDiscardFunctionality(1024L, true), lunThatBreaksDiscardSupport, lunThatBreaksDiscardZeroesTheDataSupport), java.util.Arrays.asList(lunThatBreaksDiscardSupport, lunThatBreaksDiscardZeroesTheDataSupport)); }
@java.lang.Override <START_MOD>protected<END_MOD> <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.utils.ToStringBuilder<END_MOD> <START_MOD>appendAttributes<END_MOD>(<START_MOD>org.ovirt.engine.core.common.utils.ToStringBuilder tsb<END_MOD>) { return super.<START_MOD>appendAttributes<END_MOD>(<START_MOD>tsb<END_MOD>)<START_MOD>.append("description"<END_MOD>, getDescription()); }
<START_MOD>@org.junit.Test public void canDoActionSucceeds() { cmd = spy(new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters(org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommandTest.CLUSTER_ID, org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommandTest.HOOK_NAME, org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommandTest.GLUSTER_COMMAND, org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommandTest.LEVEL))); prepareMocks(cmd, getGlusterServers()); assertTrue(cmd.canDoAction()); }<END_MOD>
<START_MOD>@java.lang.Override <END_MOD>public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc destroyStoragePool(java.lang.String spUUID, int hostSpmId, java.lang.String SCSIKey) { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = irsServer.destroyStoragePool(spUUID, hostSpmId, SCSIKey); org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(xmlRpcReturnValue); return wrapper; }
<START_MOD>@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { diskModel.getVolumeType().setSelectedItem(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (returnValue)).getVolumeType()); diskModel.getVolumeFormat().setSelectedItem(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (returnValue)).getVolumeFormat()); }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__ACTIVATE); super.setActionMessageParameters(); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((getParameters().getAction()) == null) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.WATCHDOG_ACTION_REQUIRED); } if ((getParameters().getModel()) == null) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.WATCHDOG_MODEL_REQUIRED); } org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = runInternalQuery(VdcQueryType.GetWatchdog, new org.ovirt.engine.core.common.queries.IdQueryParameters(getParameters().getId())); java.util.Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = returnValue.getReturnValue(); if (!(watchdogs.isEmpty())) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.WATCHDOG_ALREADY_EXISTS); } if ((!(getParameters().isClusterIndependent())) && (!(validate(validateModelCompatibleWithOs())))) { return false; } return true; }
<START_MOD>@org.junit.Test public void testVms() { testValidSql("Vms: status=Up or status=PoweringUp or status=MigratingTo or status=WaitForLaunch or status=RebootInProgress or status=PoweringDown or status=Paused or status=Unknown sortby cpu_usage desc", "SELECT * FROM (SELECT * FROM vms WHERE ( vm_guid IN (SELECT vms_with_tags.vm_guid FROM vms_with_tags WHERE ( ( ( ( ( ( ( vms_with_tags.status = '1' OR vms_with_tags.status = '2' ) OR vms_with_tags.status = '6' ) OR vms_with_tags.status = '9' ) OR vms_with_tags.status = '10' ) OR vms_with_tags.status = '16' ) OR vms_with_tags.status = '4' ) OR vms_with_tags.status = '7' ))) ORDER BY usage_cpu_percent DESC NULLS LAST,vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0"); }<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.OpenStackVolumeProvider provider) { org.ovirt.engine.core.common.businessentities.StoragePool storagePool = <START_MOD>(provider.isSetDataCenter()) ? <END_MOD>getStoragePool(provider.getDataCenter()<START_MOD>) : new org.ovirt.engine.core.common.businessentities.StoragePool(<END_MOD>); provider.setDataCenter(org.ovirt.engine.api.restapi.types.DataCenterMapper.map(storagePool, null)); return performCreate(VdcActionType.AddProvider, new org.ovirt.engine.core.common.action.ProviderParameters(map(provider)), new org.ovirt.engine.api.restapi.resource.openstack.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetProviderById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
public static void GetAttachedTagsToUser(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.SetAttachedTagsConverter(aQuery); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetTagsByUserId, new org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.GetTagsByUserIdParameters(id.toString()), aQuery); }
@java.lang.Override public java.lang.String toString() { return (<START_MOD> [mStatus= + (mStatus<END_MOD>)<START_MOD>) + "]"<END_MOD>; }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__UPDATE); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__QUOTA); }
<START_MOD>private void initIpConfigurationAddress() { networkAttachments.get(0).getIpConfiguration().getPrimaryAddress().setAddress(org.ovirt.engine.core.bll.validator.network.NetworkAttachmentIpConfigurationValidatorTest.ADDRESS); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.compat.Guid getServerServiceId() { return serverServiceId; }<END_MOD>
@java.lang.Override @org.junit.Test public void testListCrashClientLocale() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations(null); locales.add(org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE); java.lang.Throwable t = new java.lang.RuntimeException(FAILURE); setUpEntityQueryExpectations(VdcQueryType.GetAllImagesList, org.ovirt.engine.core.common.queries.<START_MOD>GetAllImagesListParameters<END_MOD>.class, new java.lang.String[]{ "StorageDomainId" }, new java.lang.Object[]{ GUIDS[0] }, setUpFiles(), AbstractBackendCollectionResourceTest.FAILURE); collection.setUriInfo(uriInfo); setupGetStorageDomainExpectations(StorageDomainType.ISO); control.replay(); try { getCollection(); fail( WebApplicationException } catch (javax.ws.rs.WebApplicationException wae) { verifyFault(wae, org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE, t); } finally { locales.clear(); } }
<START_MOD>public<END_MOD> void <START_MOD>logoffAsync(final <END_MOD>org.ovirt.engine.core.common.users.VdcUser vdcUser, final org.ovirt.engine.ui.frontend.AsyncQuery callback) { org.ovirt.engine.ui.frontend.Frontend.logger.finer( Invoking async Logoff. <START_MOD>org.ovirt.engine.ui.frontend.Frontend.getInstance().getOperationManager().logoutUser<END_MOD>(vdcUser, new <START_MOD>org.ovirt.engine.ui.frontend.communication.VdcUserCallback<END_MOD><org.ovirt.engine.core.common.action.VdcReturnValueBase>() { @java.lang.Override public void onSuccess(final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer( returned result from Logoff. callback.getDel().onSuccess(callback.getModel(), result); if ((org.ovirt.engine.ui.frontend.Frontend.<START_MOD>getInstance().<END_MOD>getLoginHandler()) != null) { org.ovirt.engine.ui.frontend.Frontend<START_MOD>.getInstance()<END_MOD>.getLoginHandler().onLogout(); } } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { if (ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ( to execute Logoff:   + caught), caught); getEventsHandler().runQueryFailed(null); failureEventHandler(caught); callback.getDel().onSuccess(callback.getModel(), null); } }); }
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNetworkIdentification(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { org.ovirt.engine.core.compat.Guid networkId = attachment.getNetworkId(); java.lang.String networkName = attachment.getNetworkName(); org.ovirt.engine.core.compat.Guid violatingEntityId = attachment.getId(); return <START_MOD>org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.<END_MOD>validateCoherentIdentification((violatingEntityId == null ? null : violatingEntityId.toString()), networkId, networkName, EngineMessage.NETWORK_ATTACHMENT_REFERENCES_NETWORK_INCOHERENTLY, networkBusinessEntityMap); }
<START_MOD>@org.junit.Test public void qosNotSupported() throws java.lang.Exception { vnicProfileValidationTest(both(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWROK_QOS_IS_NOT_SUPPORTED)).and(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.replacements(hasItem(org.ovirt.engine.core.bll.validator.VmNicValidatorTest.CLUSTER_VERSION_REPLACEMENT))), true, true, true, false); }<END_MOD>
<START_MOD>private boolean networkRequiredOnVds(org.ovirt.engine.core.common.businessentities.VmNetworkInterface vmIf, java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.Network> networksByName, boolean onlyRequiredNetworks) { boolean networkRequiredOnVds = true; if (!(vmIf.isActive())) { networkRequiredOnVds = false; } else if (onlyRequiredNetworks) { networkRequiredOnVds = networksByName.get(vmIf.getNetworkName()).getCluster().isRequired(); } return networkRequiredOnVds; }<END_MOD>
private void showBrickAdvancedDetails() { <START_MOD>final <END_MOD>org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity) (getEntity())); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.<START_MOD>GetClusterById<END_MOD>(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object <START_MOD>target<END_MOD>, java.lang.Object <START_MOD>returnValue<END_MOD>) { org.ovirt.engine.core.common.<START_MOD>businessentities.VDSGroup vdsGroup = ((org.ovirt.engine.core.common.businessentities.VDSGroup) (<END_MOD>returnValue<START_MOD>)); if (((vdsGroup.getcompatibility_version()) != null) && ((Version.v3_2.compareTo(vdsGroup.getcompatibility_version())) <= 0)) { onShowBrickAdvancedDetails(volumeEntity); } else { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model<END_MOD> = <START_MOD>new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().advancedDetailsBrickTitle()); model<END_MOD>.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().<START_MOD>getMessages().brickDetailsNotSupportedInClusterCompatibilityVersion(vdsGroup.getcompatibility_version().toString())); model.setHashName("brick_details_not_supported"<END_MOD>); org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", <START_MOD>org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickListModel.<END_MOD>this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()); command.<START_MOD>setIsCancel<END_MOD>(true); <START_MOD>model<END_MOD>.getCommands().add(command); }<START_MOD> } }), volumeEntity.getClusterId()); }<END_MOD>
public java.lang.String getName() { return <START_MOD>(<END_MOD>name<START_MOD>) != null ? name : ""<END_MOD>; }
public void setClientPolicy(org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy policy) { this.policy = policy; this.validate(); if (isOpen()) { <START_MOD>scheduleClose<END_MOD>( reset } }
private void verifyServiceOnServer1(org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService service) { assertEquals(org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.SERVICE1_ID, service.getServiceId().toString()); assertEquals(org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.<START_MOD>SERVICE1_NAME, service.getServiceName()); assertEquals(org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.<END_MOD>PID_1, service.getPid()); assertEquals(GlusterServiceStatus.RUNNING, service.getStatus()); }
<START_MOD>public boolean validateQuotaNotDefault(org.ovirt.engine.core.compat.Guid quotaId) { if (getQuotaDao().isQuotaDefault(quotaId)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_CANNOT_CHANGE_DEFAULT); return false; } return true; }<END_MOD>
protected void syncSearch(org.ovirt.engine.core.common.queries.<START_MOD>QueryType<END_MOD> vdcQueryType, final java.util.Comparator<? super T> comparator) { if ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity()) == null) { return; } org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity().getId()); parameters.setRefresh(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, parameters, new org.ovirt.engine.ui.uicommonweb.models.storage.SetSortedItemsAsyncQuery(comparator)); }
<START_MOD>protected<END_MOD> void registerModelPropertyChangeListener() { model.getPropertyChangedEvent().addListener(new org.ovirt.engine.core.compat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.core.compat.Event ev, java.lang.Object sender, org.ovirt.engine.core.compat.EventArgs args) { boolean isSelected = model.getIsSelected(); org.ovirt.engine.ui.common.widget.ModelBoundCheckBox.super.setValue(isSelected, true); } }); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.utils.PairQueryable<org.ovirt.engine.core.common.businessentities.VDSGroup, org.ovirt.engine.core.common.businessentities.network.NetworkCluster> object) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = new java.util.LinkedHashMap<>(); if ((object.getSecond()) != null) { if (object.getSecond().isDisplay()) { imagesToText.put(displayImage, constants.displayItemInfo()); } if (object.getSecond().isMigration()) { imagesToText.put(migrationImage, constants.migrationItemInfo()); } <START_MOD>if (object.getSecond().isManagement()) { imagesToText.put(managementImage, constants.managementItemInfo()); } <END_MOD>} return org.ovirt.engine.ui.webadmin.widget.table.column.NetworkRoleColumnHelper.getTooltip(imagesToText); }
public void <START_MOD>setValidateMessages<END_MOD>(java.util.ArrayList<java.lang.String> value) { <START_MOD>validateMessages<END_MOD> = value; }
private void prepareMocks(org.ovirt.engine.core.bll.gluster.AddBricksToGlusterVolumeCommand command) { doReturn(volumeDao).when(command).getGlusterVolumeDao(); doReturn(vdsStaticDao).when(command).getVdsStaticDao(); doReturn(brickDao).when(command).getGlusterBrickDao(); doReturn(validator).when(command).createVolumeValidator(); doReturn(networkDao).when(command).getNetworkDao(); doReturn(interfaceDao).when(command).getInterfaceDao(); doReturn(getVds(VDSStatus.Up)).when(command).getUpServer(); doReturn(getSingleBrickVolume(volumeId1)).when(volumeDao).getById(volumeId1); doReturn(getMultiBrickVolume(volumeId2)).when(volumeDao).getById(volumeId2); doReturn(getBrick(volumeId1)).when(brickDao).getBrickByServerIdAndDirectory(serverId, org.ovirt.engine.core.bll.gluster.AddBricksToGlusterVolumeCommandTest.BRICK_DIRECTORY); doReturn(null).when(volumeDao).getById(null); doReturn(getVdsStatic()).when(vdsStaticDao).get(serverId); doReturn(getVDsGroup()).when(command).getVdsGroup(); doReturn(ValidationResult.VALID).when(validator).isForceCreateVolumeAllowed(Version.v3_1, false); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_GLUSTER_VOLUME_ADD_BRICK_FORCE_NOT_SUPPORTED)).when(validator).isForceCreateVolumeAllowed(Version.v3_1, true); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValueObj) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValueObj)); java.lang.Object returnValue2 = returnValue.getReturnValue(); <START_MOD>hostSetupNetworksParametersData<END_MOD>.<START_MOD>newOrModifiedNetworkAttachments<END_MOD> = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>) (returnValue2)); queryVfsConfig(); }
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> getCommandStepSubjectEntities() { if ((org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo()) instanceof org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) { return java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(org.ovirt.engine.core.common.VdcObjectType.Disk, ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo())).getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getJobWeight())); } return null; }<END_MOD>
private org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage cinderDisk) { org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters createParams = new org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getDiskDao().get(cinderDisk.getId()))).getImageId()); createParams.setVmSnapshotId(newActiveSnapshotId); createParams.setParentHasTasks(((!(cachedImagesDisks.isEmpty())) || (getMemoryImageBuilder().isCreateTasks()))); createParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); createParams.setDescription(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDescription()); <START_MOD>createParams.setSnapshotType(SnapshotType.STATELESS); <END_MOD>return withRootCommandInfo(createParams); }
<START_MOD>private void gatherExternalVms(org.ovirt.engine.core.common.businessentities.VM dbVm, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData vdsmVm) { if (dbVm == null) { externalVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, vdsmVm)); } }<END_MOD>
<START_MOD>protected org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator createDomainValidator(org.ovirt.engine.core.common.businessentities.StorageDomain dom) { return new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(dom); }<END_MOD>
@org.junit.Test public void canSetNumaConfigurationWithVmFromDb() { final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromDb(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
<START_MOD>public void setAllowOverbooking(org.ovirt.engine.ui.uicommonweb.models.EntityModel allowOverbooking) { this.allowOverbooking = allowOverbooking; }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc migrateCancel(java.lang.String vmId) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.migrateCancel").withParameter("vmID", vmId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__STORAGE__DOMAIN); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__DETACH); }
<START_MOD>java.lang.String invalidAndRunningVmsWereAllFilteredOnImportVm();<END_MOD>
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel.KsmPolicyForNuma> getKsmPolicyForNumaSelection() { return ksmPolicyForNumaSelection; }<END_MOD>
@java.lang.Override protected void addVmToDb() { super.addVmToDb(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getOrigin()) == (org.ovirt.engine.core.common.businessentities.OriginType.KVM)) { importUtils.updateGraphicsDevices(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStoragePool().getCompatibilityVersion()); if (org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().isImportAsNewEntity()) { for (org.ovirt.engine.core.common.businessentities.VmDevice device : org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values()) { device.getId().setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()); } } vmDeviceDao.saveAll(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values()); <START_MOD>if (!(vmDeviceUtils.hasCdDevice(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()))) { vmDeviceUtils.addCdDevice(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getVirtioIsoName()); } } }<END_MOD>
private boolean canRemoveVmWithDetachDisks() { if (!(Guid.Empty.equals(org.ovirt.engine.core.bll.RemoveVmCommand.getVm().getVmtGuid()))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.VM_CANNOT_REMOVE_WITH_DETACH_DISKS_BASED_ON_TEMPLATE); } for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.RemoveVmCommand.getVm().getDiskList()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImageList = org.ovirt.engine.core.bll.RemoveVmCommand.getDiskImageDao().getAllSnapshotsForImageGroup(disk.getId()); if ((diskImageList.size()) > 1) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.VM_CANNOT_REMOVE_WITH_DETACH_DISKS_SNAPSHOTS_EXIST); } } return true; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>DiskImageBasicView<END_MOD>> disks = ((java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>DiskImageBasicView<END_MOD>>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue())); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>DiskImageBasicView<END_MOD>> diskList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>DiskImageBasicView<END_MOD>>(); diskList.addAll(disks); java.util.Collections.sort(diskList, new org.ovirt.engine.ui.uicommonweb.Linq.DiskByAliasComparer()); org.ovirt.engine.ui.uicommonweb.models.SearchableListModel searchableListModel = ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (model)); searchableListModel.setItems(diskList); }
protected void synchronizeNics(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.context.CompensationContext compensationContext, org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(getMacPool(vm.getStoragePoolId())); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(vm.getVdsGroupId(), vm.getStoragePoolId(), vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_SNAPSHOT_VM_INVALID_INTERFACES); vmInterfaceManager.removeAll(vm.getId()); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmInterface : vm.getInterfaces()) { vmInterface.setVmId(vm.getId()); if ((vmInterface.getId()) == null) { vmInterface.setId(org.ovirt.engine.core.compat.Guid.newGuid()); } vnicProfileHelper.updateNicWithVnicProfileForUser(vmInterface, user); vmInterfaceManager.add(vmInterface, compensationContext, true, vm.getOs(), vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()); } vnicProfileHelper.auditInvalidInterfaces(vm.getName()); }
<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeSnapshotActivate(java.lang.String snapshotName, boolean force);<END_MOD>
private void updateIscsiBondListAvailability(org.ovirt.engine.core.common.businessentities.StoragePool storagePool) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.<START_MOD>getDataCenterStorageConnectionsByType<END_MOD>(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>) (returnValue)); <START_MOD>iscsiBondListModel.setIsAvailable((!(<END_MOD>connections<START_MOD>.isEmpty()))); } }), storagePool.getId(), <END_MOD>StorageType.ISCSI); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> getByName(java.lang.String name) { java.util.Map<java.lang.String, java.lang.Object> dbResults = dialect.createJdbcCallForQuery(jdbcTemplate).withProcedureName("GetnetworkByName").returningResultSet("RETURN_VALUE", org.ovirt.engine.core.dao.NetworkDAODbFacadeImpl.NetworkRowMapper.instance).execute(getCustomMapSqlParameterSource().addValue("networkName", name)); return ((org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>) (org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.asSingleResult(((java.util.List<?>) (dbResults.get("RETURN_VALUE")))))); }
@org.junit.Test public void testCopyBySdName() throws java.lang.Exception { <START_MOD>setUriInfo(setUpBasicUriExpectations()); <END_MOD>setUpEntityQueryExpectations(<START_MOD>VdcQueryType.GetAllStorageDomains, org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, java.util.Collections.singletonList(getStorageDomainEntity(0))); setUpEntityQueryExpectations(VdcQueryType.GetDiskByDiskId, org.ovirt.engine.core.common.queries.GetDiskByDiskIdParameters.class, new java.lang.String[]{ "DiskId" }, new java.lang.Object[]{ GUIDS[<END_MOD>1<START_MOD>] }, getEntity(1<END_MOD>)); setUriInfo(setUpActionExpectations(VdcActionType.MoveOrCopyDisk, org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters.class, new java.lang.String[]{ "ImageId", "SourceDomainId", "StorageDomainId", "Operation" }, new java.lang.Object[]{ GUIDS[1], org.ovirt.engine.core.compat.Guid.Empty, GUIDS[3], org.ovirt.engine.core.common.businessentities.ImageOperation.Copy })); verifyActionResponse(resource.copy(setUpCopyParams(true))); }
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__UPDATE); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__VM_DISK); }
public org.ovirt.engine.core.common.action.VdcReturnValueBase <START_MOD>validateOnly<END_MOD>() { setActionMessageParameters(); getReturnValue().<START_MOD>setValidate<END_MOD>(<START_MOD>internalValidate<END_MOD>()); java.lang.String tempVar = getDescription(); getReturnValue().setDescription((tempVar != null ? tempVar : getReturnValue().getDescription())); return _returnValue; }
<START_MOD>@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.StorageConnectionExtension storageConnectionExtension) { return null; }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { <START_MOD>populateProfiles<END_MOD>(((java.util.List<java.lang.String>) (result))); }
<START_MOD>@org.ovirt.api.metamodel.annotations.Out types.AffinityGroup affinityGruop();<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__CREATE); super.setActionMessageParameters(); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.LUNs> luns = getLunsForVgId(getVgId()); <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.LUNs> nonDummyLuns = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.LUNs>(); <END_MOD>org.ovirt.engine.core.common.businessentities.StorageType storageType = getStorageType(luns); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.LUNs> lunsFromDeviceMap = getLunsFromDeviceMap(storageType); for (org.ovirt.engine.core.common.businessentities.LUNs lun : luns) { <START_MOD>if (lun.getLUN_id().startsWith(AttachDetachStorageConnectionParameters.DUMMY_LUN_ID_PREFIX)) { continue; } nonDummyLuns.add(lun); <END_MOD>for (org.ovirt.engine.core.common.businessentities.LUN_storage_server_connection_map map : getLunConnections(lun.getLUN_id())) { addConnection(lun, getConnection(map.getstorage_server_connection())); } org.ovirt.engine.core.common.businessentities.LUNs lunFromDeviceList = lunsFromDeviceMap.get(lun.getLUN_id()); if (lunFromDeviceList != null) { lun.setPathsDictionary(lunFromDeviceList.getPathsDictionary()); } } setReturnValue(<START_MOD>nonDummyLuns); }<END_MOD>
<START_MOD>private static boolean isWhiteListFiles(java.io.File file) { if (file == null) return false; java.lang.String fileName = file.getName(); if (org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.NotRequiredFiles).contains(fileName)) { return true; } return false; }<END_MOD>
@org.junit.Test public void checkIfDisksExistFailedVDSMReturnError() { org.ovirt.engine.core.common.action.MoveOrCopyParameters params = createParameters(true); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = createGetImageListReturnValue(false, java.util.Collections.<org.ovirt.engine.core.compat.Guid>emptyList()); org.ovirt.engine.core.bll.storage.export.MoveOrCopyTemplateCommand cmd = createCommand(params, returnValue); assertFalse(cmd.checkIfDisksExist(createImageList())); assertTrue(cmd.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().contains(EngineMessage.ERROR_GET_IMAGE_LIST.name())); assertTrue(cmd.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().contains( SD verify(cmd, times(1)).runVdsCommand(any(org.ovirt.engine.core.common.vdscommands.VDSCommandType.class), any(org.ovirt.engine.core.common.vdscommands.GetImagesListVDSCommandParameters.class)); }
protected boolean isStorageDomainTypeCorrect(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { if<START_MOD> ((((storageDomain.getStorageDomainType()) != (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) && ((storageDomain.getStorageDomainType()) != (org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport))) &&<END_MOD> ((storageDomain.isLocal()) != (org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePool().isLocal()))<START_MOD>)<END_MOD> { addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_ATTACH_STORAGE_DOMAIN_STORAGE_TYPE_NOT_MATCH); return false; } return true; }
<START_MOD>@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if (!(cascadePopupPanel.isShowing())) { java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> cascadeActionButtonList = new java.util.ArrayList<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>>(); for (int i = 0; i < ((contentPanel.getWidgetCount()) - 1); i++) { if (!(contentPanel.getWidget(i).isVisible())) { cascadeActionButtonList.add(actionToolbarButtonList.get(i)); } } updateContextMenu(cascadeMenu, cascadeActionButtonList, cascadePopupPanel); cascadePopupPanel.showRelativeToAndFitToScreen(cascadeButton); } else { cascadePopupPanel.hide(); } }<END_MOD>
<START_MOD>@java.lang.Override public void serviceFound(org.ovirt.engine.ui.frontend.gwtservices.GenericApiGWTServiceAsync service) { service.Login(loginOperation.getParameter().getLoginName(), loginOperation.getParameter().getPassword(), loginOperation.getParameter().getProfileName(), loginOperation.getOperation(), new com.google.gwt.user.client.rpc.AsyncCallback<org.ovirt.engine.core.common.action.VdcReturnValueBase>() { @java.lang.Override public void onSuccess(final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { getXsrfRequestBuilder().setXsrfToken(null); loginOperation.getCallback().onSuccess(loginOperation, result); } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { loginOperation.getCallback().onFailure(loginOperation, caught); } }); }<END_MOD>
@org.junit.Test public void hostProviderDoesNotExist() { when(host.getHostProviderId()).thenReturn(org.ovirt.engine.core.compat.Guid.newGuid()); when(providerDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); when(dbFacade.getProviderDao()).thenReturn(providerDao); validator = new org.ovirt.engine.core.bll.validator.UpdateHostValidator(dbFacade, oldHost, host, false); assertThat(validator.hostProviderExists(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST)); }
<START_MOD>@org.junit.Test public void shouldFalbackToEl7ReleaseIdentifier() { final org.ovirt.engine.core.bll.scheduling.OS validOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - Server9 - release.el7"); assertThat(validOs.isValid()).isTrue(); assertThat(validOs.getVersion().getMajor()).isEqualTo(7); }<END_MOD>
<START_MOD>private void mergeValue() throws java.lang.Exception { java.lang.String key = parser.getKey(); java.lang.String value = parser.getValue(); java.lang.String version = parser.getVersion(); if (version == null) { version = startVersionDialog(key); } org.ovirt.engine.core.config.entity.ConfigKey configKey = fetchConfigKey(key, version); if ((configKey != null) && ((configKey.getKey()) != null)) { if ((!(configKey.isPasswordKey())) && ((configKey.getDisplayValue().trim().length()) > 0)) { java.lang.String val = configKey.getDisplayValue(); if (!(val.endsWith(";"))) { val += ";"; } val += value; value = val; } } boolean sucessUpdate = persist(key, value, version); if (!sucessUpdate) { org.ovirt.engine.core.config.EngineConfigLogic.log.debug((((("setValue: error concatenating " + key) + "'s value. No such entry") + (version == null ? "" : " with version " + version)) + ".")); throw new java.lang.IllegalArgumentException((((("Error setting " + key) + "'s value. No such entry") + (version == null ? "" : " with version " + version)) + ".")); } }<END_MOD>
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((getGeoRepSession()) == null) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_GEOREP_SESSION_INVALID); return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = org.ovirt.engine.core.bll.gluster.GeoRepSessionCommandBase.getGlusterVolume(); if (!(volume.isOnline())) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN); addCanDoActionMessageVariable("volumeName", volume.getName()); return false; } return true; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmTemplate get(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { return getCallsHandler().executeRead("GetVmTemplateByVmtGuid", org.ovirt.engine.core.dao.<START_MOD>VmTemplateDAOImpl<END_MOD>.VMTemplateRowMapper.instance, createIdParameterMapper(id).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }
@org.junit.Test public void testAddWithStorageDomain() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUriInfo(setUpBasicUriExpectations()); setUpGetPayloadExpectations(1, 2); setUpGetBallooningExpectations(1, 2); setUpGetConsoleExpectations(new int[]{ 1, 2 }); setUpGetVmOvfExpectations(new int[]{ 2 }); setUpGetVirtioScsiExpectations(new int[]{ 2 }); <START_MOD>setUpGetSoundcardExpectations(new int[]{ 2 }); <END_MOD>setUpGetRngDeviceExpectations(new int[]{ 2 }); setUpGetCertuficateExpectations(1, 2); setUpEntityQueryExpectations(VdcQueryType.GetVmTemplate, org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[1] }, getTemplateEntity(0)); setUpEntityQueryExpectations(VdcQueryType.GetVdsGroupByVdsGroupId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[2] }, getVdsGroupEntity()); setUpCreationExpectations(VdcActionType.AddVm, org.ovirt.engine.core.common.action.VmManagementParametersBase.class, new java.lang.String[]{ "StorageDomainId" }, new java.lang.Object[]{ GUIDS[1] }, true, true, GUIDS[2], VdcQueryType.GetVmByVmId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[2] }, getEntity(2)); org.ovirt.engine.api.model.VM model = createModel(null); addStorageDomainToModel(model); javax.ws.rs.core.Response response = collection.add(model); assertEquals(201, response.getStatus()); assertTrue(((response.getEntity()) instanceof org.ovirt.engine.api.model.VM)); verifyModel(((org.ovirt.engine.api.model.VM) (response.getEntity())), 2); }
<START_MOD>@java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.ExecuteCommand(command); if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnSave")) { onSave(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "Cancel")) { cancel(); } }<END_MOD>
@java.lang.SuppressWarnings("unused") public boolean isDisplayNetworkAffected(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?<START_MOD>, ?, ?<END_MOD>> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?<START_MOD>, ?, ?<END_MOD>> op2) { return false; }
public static void GetFloppyImageList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid storagePoolId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.RepoFileMetaData> repoList = ((java.util.ArrayList<org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.RepoFileMetaData>) (source)); java.util.ArrayList<java.lang.String> fileNameList = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.RepoFileMetaData RepoFileMetaData : repoList) { fileNameList.add(RepoFileMetaData.getRepoImageId()); } java.util.Collections.sort(fileNameList, new org.ovirt.engine.ui.uicommonweb.Linq.CaseInsensitiveComparer()); return fileNameList; } return new java.util.ArrayList<java.lang.String>(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetImagesListByStoragePoolId, new org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.Floppy), aQuery); }
<START_MOD>@org.junit.Test public void testLong() { org.ovirt.engine.api.types.V4Vm object = newVm().setMemory((10L * (java.lang.Integer.MAX_VALUE))).build(); assertEquals("{'memory':21474836470}", objectToJson(object)); }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAllSnapshotsForVmSnapshot(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_snapshot_id", id); return getCallsHandler().executeReadList("GetSnapshotsByVmSnapshotId", org.ovirt.engine.core.dao.<START_MOD>DiskImageDAOImpl<END_MOD>.DiskImageRowMapper.instance, parameterSource); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.AdUser.class, to = org.ovirt.engine.api.model.User.class) public static org.ovirt.engine.api.model.User map(org.ovirt.engine.core.common.businessentities.AdUser entity, org.ovirt.engine.api.model.User template) { org.ovirt.engine.api.model.User model = (template != null) ? template : new org.ovirt.engine.api.model.User(); model.setName(entity.getName()); model.setUserName(entity.getUserName()); model.setId(entity.getUserId().toString()); model.setLastName(entity.getSurName()); model.setEmail(entity.getEmail()); model.setDepartment(entity.getDepartment()); if ((entity.getGroups()) != null) { model.setGroups(new org.ovirt.engine.api.model.Groups()); for (org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD> adgroup : entity.getGroups().values()) { org.ovirt.engine.api.model.Group group = new org.ovirt.engine.api.model.Group(); group.setName(adgroup.getname()); model.getGroups().getGroups().add(group); } } if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(entity.getDomainControler()))) { org.ovirt.engine.api.model.Domain dom = new org.ovirt.engine.api.model.Domain(); dom.setName(entity.getDomainControler()); dom.setId(new org.ovirt.engine.core.compat.NGuid(entity.getDomainControler().getBytes(), true).toString()); model.setDomain(dom); } return model; }
<START_MOD>private static void map(org.ovirt.engine.api.model.ClusterQuotaLimit template, org.ovirt.engine.core.common.businessentities.QuotaVdsGroup quotaCluster, java.lang.String clusterId, java.lang.String dataCenterId, java.lang.String quotaId) { template.setQuota(new org.ovirt.engine.api.model.Quota()); template.getQuota().setId(quotaId); template.getQuota().setDataCenter(new org.ovirt.engine.api.model.DataCenter()); template.getQuota().getDataCenter().setId(dataCenterId); if (clusterId != null) { template.setCluster(new org.ovirt.engine.api.model.Cluster()); template.getCluster().setId(clusterId); } if ((quotaCluster.getMemSizeMB()) != null) { double value = ((quotaCluster.getMemSizeMB()) == (-1)) ? quotaCluster.getMemSizeMB() : (quotaCluster.getMemSizeMB()) / 1024.0; template.setMemoryLimit(value); } if ((quotaCluster.getMemSizeMBUsage()) != null) { template.setMemoryUsage(((quotaCluster.getMemSizeMBUsage()) / 1024.0)); } if ((quotaCluster.getVirtualCpu()) != null) { template.setVcpuLimit(quotaCluster.getVirtualCpu()); } if ((quotaCluster.getVirtualCpuUsage()) != null) { template.setVcpuUsage(quotaCluster.getVirtualCpuUsage()); } }<END_MOD>
private static<START_MOD> <T><END_MOD> void setGateway(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.VDS host, <START_MOD>T<END_MOD> bootProtocol, org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher ipInfoFetcher, java.util.function.Consumer<java.lang.String> gatewaySetter) { if (bootProtocol == (org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.STATIC_IP)) { java.lang.String gateway = ipInfoFetcher.fetchGateway(); if (org.apache.commons.lang.StringUtils.isNotEmpty(gateway)) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGatewayIfNecessary(iface, host, gateway, gatewaySetter); } } }
<START_MOD>@org.junit.Before public void setUp() throws java.io.IOException, java.lang.Exception { client = new org.ovirt.engine.core.utils.ssh.OvirtSSH(); client.setSoftTimeout(org.ovirt.engine.core.utils.ssh.CommandTest.softTimeout); client.setHardTimeout(org.ovirt.engine.core.utils.ssh.CommandTest.hardTimeout); client.setHost(TestCommon.host, TestCommon.port); client.setUser(TestCommon.user); client.setPassword(TestCommon.password); client.connect(); }<END_MOD>
protected org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool() { return <START_MOD>poolPerCluster<END_MOD>.<START_MOD>poolForCluster<END_MOD>(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.<START_MOD>getVdsGroupId<END_MOD>()); }
public static void GetHostById(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid id) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVdsByVdsId, new org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.GetVdsByVdsIdParameters(id), aQuery); }
<START_MOD>private java.lang.Boolean getMigrateCompressed() { if (org.ovirt.engine.core.common.FeatureSupported.migrationCompression(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getVdsGroupCompatibilityVersion())) { return org.ovirt.engine.core.bll.MigrateVmCommand.getVm().isMigrateCompressed(); } return null; }<END_MOD>
@org.junit.Test public void testAliasGenerationByAddVmImagesAndSnapshotsWithoutCollapse() { org.ovirt.engine.core.common.action.ImportVmParameters params = createParameters(); params.setCopyCollapse(false); org.ovirt.engine.core.bll.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> cmd = spy(new org.ovirt.engine.core.bll.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters>(params) { @java.lang.Override protected void initUser() { } @java.lang.Override public org.ovirt.engine.core.common.businessentities.<START_MOD>Cluster getCluster<END_MOD>() { return null; } }); cmd.postConstruct(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : params.getVm().getImages()) { doNothing().when(cmd).saveImage(image); doNothing().when(cmd).saveSnapshotIfNotExists(any(org.ovirt.engine.core.compat.Guid.class), eq(image)); doNothing().when(cmd).saveDiskImageDynamic(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImage activeDisk = params.getVm().getImages().get(1); doNothing().when(cmd).updateImage(activeDisk); doNothing().when(cmd).saveBaseDisk(activeDisk); doNothing().when(cmd).updateActiveSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); cmd.addVmImagesAndSnapshots(); assertEquals( alias not generated "testVm_Disk1", activeDisk.getDiskAlias()); }
@java.lang.Override protected void addCustomModelsDetailModelList(org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.<START_MOD>HasEntity<END_MOD>> list) { list.add(2, new org.ovirt.engine.ui.uicommonweb.models.templates.UserPortalTemplateDiskListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.templates.UserPortalTemplateEventListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.configure.UserPortalPermissionListModel()); }
public org.ovirt.engine.core.bll.ValidationResult vmNotDuringSnapshot(org.ovirt.engine.core.compat.Guid vmId) { if (getSnapshotDao().exists(vmId, SnapshotStatus.LOCKED)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT); } return org.ovirt.engine.core.bll.ValidationResult<START_MOD>.valid<END_MOD>; }
<START_MOD>public void setPid(java.lang.Integer pid) { this.pid = pid; }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.common.widget.table.column.Template("<div style=\"{0}\" id=\"{1}\">{2}</div>") com.google.gwt.safehtml.shared.SafeHtml textContainer(java.lang.String style, java.lang.String id, com.google.gwt.safehtml.shared.SafeHtml text);<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters buildCreateSnapshotParametersForEndAction() { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters parameters = buildCreateSnapshotParameters(); parameters.setImagesParameters(org.ovirt.engine.core.bll.CloneVmCommand.getParameters().getImagesParameters()); return parameters; }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Templates exist java.lang.String templateNoExistsMsg();
<START_MOD>public java.util.Map<java.lang.String, java.lang.String> getPmSecondaryOptionsMap() { return getPmOptionsMapInternal(getPmSecondaryPort(), getPmSecondarySlot(), getPmSecondarySecure(), getPmSecondaryOptions()); }<END_MOD>
<START_MOD>@org.junit.Test public void testTemplate() { testValidSql("Template: ", "SELECT * FROM ((SELECT * FROM vm_templates_view ) ORDER BY name ASC ) as T1 OFFSET (1 -1) LIMIT 0"); }<END_MOD>
protected boolean isNicSupportedForPlugUnPlug() { if (osRepository.hasNicHotplugSupport(org.ovirt.engine.core.bll.VmCommand.getVm().getOs(), org.ovirt.engine.core.bll.VmCommand.getVm().getVdsGroupCompatibilityVersion())) { return true; } return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.ResetGlusterVolumeOptions, new org.ovirt.engine.core.common.vdscommands.gluster.ResetGlusterVolumeOptionsVDSParameters(upServer.getId(), getGlusterVolumeName(), getParameters().getVolumeOption(), getParameters().isForceAction())); setSucceeded(returnValue.getSucceeded()); if (getSucceeded()) { if (((getParameters().getVolumeOption()) != null) && (!(getParameters().getVolumeOption().<START_MOD>getKey().<END_MOD>isEmpty()))) { removeOptionInDb(getGlusterVolume().getOption(getParameters().getVolumeOption()<START_MOD>.getKey())); isResetAllOptions = false<END_MOD>; } else { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity option : getGlusterVolume().getOptions()) { removeOptionInDb(option); } <START_MOD>isResetAllOptions = true; <END_MOD>} } else { handleVdsError(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, returnValue.getVdsError().getMessage()); return; } }
@java.lang.Override protected boolean canDoAction() { if (!(<START_MOD>schedulingManager<END_MOD>.getPolicyUnitsMap().containsKey(getPolicyUnitId()))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_POLICY_UNKNOWN_POLICY_UNIT); } java.util.List<java.lang.String> clusterPoliciesNames = <START_MOD>schedulingManager<END_MOD>.getClusterPoliciesNamesByPolicyUnitId(getPolicyUnitId()); if ((clusterPoliciesNames != null) && ((clusterPoliciesNames.size()) > 0)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_POLICY_UNIT_ATTACHED_TO_CLUSTER_POLICY, java.lang.String.format( %1$s org.apache.commons.lang.StringUtils.join(clusterPoliciesNames, ','))); } return true; }
private void Network_SelectedItemChanged(org.ovirt.engine.core.compat.EventArgs e) { UpdateCanSpecify(); org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity <END_MOD>network <START_MOD>= ((org.ovirt.engine.core.common.businessentities.NetworkEntity) (getNetwork().getSelectedItem())); setBootProtocolsAvailable(((<END_MOD>network <START_MOD>!= null) && (org.ovirt.engine.core.compat.StringHelper.stringsEqual(<END_MOD>network<START_MOD>.getname(), "None")) ? false : true)); if ((getNetworks()) != null) { for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface item : getNetworks()) { if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(item.getNetworkName(), <END_MOD>network<START_MOD>.getname())) { getAddress().setEntity((org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(item.getAddress()) ?<END_MOD> null<START_MOD> : item.getAddress())); getSubnet().setEntity((org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(item.getSubnet()) ? null : item.getSubnet())); setBootProtocol(((!(getNoneBootProtocolAvailable())<END_MOD>) && (<START_MOD>(item.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.NetworkBootProtocol.None<END_MOD>)) ? <START_MOD>org.ovirt.engine.core.common.businessentities.NetworkBootProtocol.Dhcp : <END_MOD>item.getBootProtocol())); break; } } } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepConfigListXmlRpc glusterVolumeGeoRepConfigList(java.lang.String volumeName, java.lang.String slaveHost, java.lang.String slaveVolumeName<START_MOD>, java.lang.String slaveUserName<END_MOD>) { try { return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepConfigListXmlRpc(vdsServer.glusterVolumeGeoRepConfigList(volumeName, slaveHost, slaveVolumeName<START_MOD>, slaveUserName<END_MOD>)); } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
@org.junit.Test public void testExecuteCommandFailsWithServerIdForStart() { cmd = spy(new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand(new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters(org.ovirt.engine.core.compat.Guid.newGuid(), null, org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT, org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_START))); setUpMockUpForStart(); mockBackend(false, <START_MOD>EngineErrors<END_MOD>.GlusterServicesActionFailed, GlusterServiceStatus.STOPPED); cmd.executeCommand(); verify(serverServiceDao, never()).updateByServerIdAndServiceType(any(org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService.class)); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_SERVICE_START_FAILED); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.aaa.AuthenticationProfile> profiles = org.ovirt.engine.core.aaa.AuthenticationProfileRepository.getInstance().getProfiles(); java.util.List<<START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.aaa.ProfileEntry<END_MOD>> names = new java.util.ArrayList(profiles.size()); for (org.ovirt.engine.core.aaa.AuthenticationProfile profile : profiles) { names.add(<START_MOD>new org.ovirt.engine.core.aaa.ProfileEntry(<END_MOD>profile.getName(<START_MOD>), org.ovirt.engine.core.aaa.AuthzUtils.getName(profile.getAuthz())<END_MOD>)); } org.ovirt.engine.core.bll.GetAAAProfileListQuery.getQueryReturnValue().setReturnValue(names); }
@org.junit.Test public void <START_MOD>testAllDomainsHaveSpaceForAllDisksFail<END_MOD>() { java.util.List<org.ovirt.engine.core.<START_MOD>compat.Guid> sdIdsForNew = java.util.Arrays.asList(sdId1, sdId2); java.util.List<org.ovirt.engine.core.compat.Guid> sdIdsForCloned = java.util.Arrays.asList(sdId2, sdId3); java.util.List<org.ovirt.engine.core.<END_MOD>common.businessentities.DiskImage> <START_MOD>disksListForNew<END_MOD> = generateDisksList(org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidatorTest.NUM_DISKS<START_MOD>, sdIdsForNew); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksListForCloned = generateDisksList(org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidatorTest.NUM_DISKS, sdIdsForCloned<END_MOD>); org.ovirt.engine.core.bll.validator.StorageDomainValidator storageDomainValidator = mock(org.ovirt.engine.core.bll.validator.StorageDomainValidator.class); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(storageDomainValidator).<START_MOD>hasSpaceForAllDisks<END_MOD>(anyList()<START_MOD>, anyList()<END_MOD>); org.ovirt.engine.core.bll.ValidationResult result = validator.<START_MOD>allDomainsHaveSpaceForAllDisks(disksListForNew, disksListForCloned<END_MOD>); assertFalse(result.isValid()); assertEquals( validation error VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN, result.getMessage()); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( must contain alphanumeric characters or '_' (maximum length 15 characters). java.lang.String nameMustContainAlphanumericMaxLenMsg();
<START_MOD>private static org.ovirt.engine.core.common.utils.Pair dnsServersOnly() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setDnsSearch("search1 search2"); vmInit.setDnsServers("nameserver1 nameserver2 nameserver3"); java.lang.String expectedOutput = "{\n" + ((((((((((((((((((((((" \"services\": [\n" + " {\n") + " \"address\": \"nameserver1\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver2\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver3\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"search1\",\n") + " \"type\": \"dns-search\"\n") + " },\n") + " {\n") + " \"address\": \"search2\",\n") + " \"type\": \"dns-search\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }<END_MOD>
private void updateActionAvailability() { java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> tempVar = getSelectedItems(); java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> selectedItems = (tempVar != null) ? tempVar : new java.util.ArrayList(); getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); <START_MOD>getForceRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); <END_MOD>getAddCommand().setIsAvailable(true); getRemoveCommand().setIsAvailable(true); <START_MOD>getForceRemoveCommand().setIsAvailable(isSelectedProvidersOfType(ProviderType.OPENSTACK_VOLUME)); <END_MOD>}
<START_MOD>@org.junit.Test public void quotaDependencyTest() { for (org.ovirt.engine.core.common.action.VdcActionType vdcActionType : org.ovirt.engine.core.common.action.VdcActionType.values()) { if ((vdcActionType.getQuotaDependency()) != (VdcActionType.QuotaDependency.NONE)) { java.lang.Class commandClass = org.ovirt.engine.core.bll.CommandsFactory.getCommandClass(vdcActionType.name()); if (((commandClass.getAnnotation(java.lang.Deprecated.class)) != null) || ((commandClass.getAnnotation(org.ovirt.engine.core.bll.InternalCommandAttribute.class)) != null)) { continue; } switch (vdcActionType.getQuotaDependency()) { case VDS_GROUP : assertCommandIsQuotaVdsDependent(commandClass); break; case STORAGE : assertCommandIsQuotaStorageDependent(commandClass); break; case BOTH : assertCommandIsQuotaVdsDependent(commandClass); assertCommandIsQuotaStorageDependent(commandClass); break; default : break; } } } }<END_MOD>
<START_MOD>@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { processVolumeStatus(result, rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.GlusterVolumeEngineDao.STATUS)); }<END_MOD>
private void addBondOptionIfMissing(java.lang.String candidateOption, boolean doesBondHaveVmNetworkAttached) { <START_MOD>if (doesBondHaveVmNetworkAttached && (org.ovirt.engine.core.common.businessentities.network.BondMode.isBondModeValidForVmNetwork(candidateOption))) { return; } if (!(pairForBondOption.containsKey(candidateOption))) { org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> entityModel<END_MOD> = <START_MOD>new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>(); entityModel.setEntity(candidateOption); java.util.Map.Entry<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>> newPair = new <END_MOD>org.ovirt.engine.core.<START_MOD>compat.KeyValuePairCompat<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>>("custom", entityModel); bondOptions.add(newPair); pairForBondOption.put(candidateOption, newPair)<END_MOD>; } }
public org.ovirt.engine.core.bll.ValidationResult nameNotEmpty() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY).when(org.apache.commons.lang.StringUtils.isEmpty(host.getName())); }
<START_MOD>@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.CloneVmModel cloneVmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.CloneVmModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>) (returnValue)); if (!(org.ovirt.engine.ui.uicommonweb.Linq.filterDisksByStorageType(disks, Disk.DiskStorageType.LUN).isEmpty())) { setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cloneVmLunsWontBeCloned()); } }<END_MOD>
public <START_MOD>org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase.TimezoneType<END_MOD> <START_MOD>getTimeZoneType<END_MOD>() { <START_MOD>return org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase.TimezoneType.getTimezoneByOs<END_MOD>(<START_MOD>getModel().getIsWindowsOS()<END_MOD>); }
public void onRestore() { importModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel) (getWindow())); if ((importModel.getProgress()) != null) { return; } if (!(importModel.validate())) { return; } cloneObjectMap = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.lang.Object>(); objectsToClone = new java.util.ArrayList<java.lang.Object>(); for (java.lang.Object object : ((java.util.ArrayList<java.lang.Object>) (importModel.getItems()))) { org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData item = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData) (object)); if (item.getClone().getEntity()) { objectsToClone.add(object); } } executeImportClone(); }
@java.lang.Override protected boolean canDoAction() {<START_MOD> if (!(super.canDoAction())) { return false; }<END_MOD> org.ovirt.engine.core.bll.validator.IscsiBondValidator validator = new org.ovirt.engine.core.bll.validator.IscsiBondValidator(); if (!(validate(validator.isIscsiBondExist(getExistingIscsiBond())))) { return false; } if ((isNameChanged()) && (!(validate(validator.iscsiBondWithTheSameNameExistInDataCenter(getIscsiBond()))))) { return false; } return true; }
public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(<START_MOD>org.ovirt.engine.core.common.businessentities.Cluster cluster, <END_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl.log.error( unit '{}' function is not implemented getPolicyUnit().getName()); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> pairs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { pairs.add(new org.ovirt.engine.core.common.utils.Pair(vds.getId(), 1)); } return pairs; }
@org.junit.Test public void checkNoHost() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0); parameters.setStorageServerConnection(newNFSConnection); parameters.setVdsId(null); parameters.setStorageServerConnection(newNFSConnection); when(storageConnDao.get(newNFSConnection.<START_MOD>geIid<END_MOD>())).thenReturn(oldNFSConnection); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); }
void save(org.ovirt.engine.core.common.businessentities.<START_MOD>Bookmarks<END_MOD> bookmark);
@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { updateDefaultHost(); updateCustomPropertySheet(); updateNumOfSockets(); updateQuotaByCluster(vm.getQuotaId(), vm.getQuotaName()); updateCpuPinningVisibility(); updateMemoryBalloon(); updateCpuSharesAvailability(); updateVirtioScsiAvailability(); updateOSValues(); <START_MOD>updateEmulatedMachines(); <END_MOD>instanceTypeManager.updateAll(); }
<START_MOD>public org.ovirt.engine.core.common.businessentities.network.IpV6Address getIpv6PrimaryAddress() { if (!(hasPrimaryIpv6AddressSet())) { throw new java.lang.IllegalStateException("IpConfiguration does not have IPv4 address set."); } return getIpV6Addresses().get(0); }<END_MOD>
protected boolean validateDestStorage() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain()); if ((!(validate(validator.isDomainExistAndActive()))) || (!(validate(validator.domainIsValidDestination())))) { return false; } boolean moveOrCopy = (isMoveOperation()) || (isCopyOperation()); if ((moveOrCopy && (getImage().isShareable())) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLUSTERFS))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS, java.lang.String.format( %2$s "diskAlias", getImage().getDiskAlias())); } <START_MOD>if (isMoveOperation()) { if (getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId())) { <END_MOD>return <START_MOD>failValidation(EngineMessage.ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_IS_NOT_VALID); } } return <END_MOD>true; }
public static void populateCpuUtilizationHosts(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> resourceUsage = dao.getCpuUtilizationHosts(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : resourceUsage) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed((((usage.getUsed()) * (usage.getTotal())) / 100)); entity.setTotal(usage.getTotal()); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addResource(entity); } }
@java.lang.Override public void setInputFieldsEnabled(boolean enabled) { nameEditor.setEnabled(enabled); descriptionEditor.setEnabled(enabled); isVmNetworkEditor.setEnabled(enabled); vlanTagging.setEnabled(enabled); vlanTag.setEnabled(enabled); hasMtuEditor.setEnabled(enabled); mtuEditor.setEnabled(enabled); <START_MOD>if (enabled) { messageLabel.setVisible(false); <END_MOD>}<START_MOD> else { messageLabel.setVisible(true); } }<END_MOD>
<START_MOD>private boolean isSparsifyCommandAvailable() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.Disk>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { if ((isDiskLocked(disk)) || ((!(isVmDown())) && (disk.getPlugged()))) { return false; } } return true; }<END_MOD>
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = new org.ovirt.engine.core.bll.validator.VnicProfileValidator(vmDao, org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getVnicProfile()); return (((((((validate(validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileForVmNetworkOnly()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().<START_MOD>getValidateMessages<END_MOD>()))) && (validate(validator.passthroughProfileContainsSupportedProperties())); }
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult profileValid(org.ovirt.engine.core.compat.Guid clusterId) { if ((nic.getVnicProfileId()) != null) { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = getDbFacade().getVnicProfileDao().get(nic.getVnicProfileId()); if (vnicProfile == null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VNIC_PROFILE_NOT_EXISTS); } org.ovirt.engine.core.common.businessentities.network.Network network = getNetworkByVnicProfile(vnicProfile); if ((network == null) || (!(isNetworkInCluster(network, clusterId)))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_NOT_EXISTS_IN_CURRENT_CLUSTER); } if ((!(org.ovirt.engine.core.common.FeatureSupported.networkQoS(version))) && ((getDbFacade().getQosDao().get(vnicProfile.getNetworkQosId())) != null)) return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NETWROK_QOS_IS_NOT_SUPPORTED, clusterVersion()); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
<START_MOD>public int getGuestAgentNicHash() { return vmDynamic.getGuestAgentNicHash(); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { if (getSucceeded()) { return org.ovirt.engine.core.common.AuditLogType.GLUSTER_HOOK_ENABLE; } else { return (errorType) == null ? org.ovirt.engine.core.common.AuditLogType.GLUSTER_HOOK_ENABLE_FAILED : errorType; } }<END_MOD>
protected org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD> getAdGroupWithDomain(int index) { org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD> adGroup = new org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD>(); adGroup.setid(GUIDS[index]); adGroup.setname((((DOMAIN) + "/") + (NAMES[index]))); adGroup.setdomain(org.ovirt.engine.api.restapi.resource.DOMAIN); return adGroup; }
<START_MOD>@java.lang.Override <END_MOD>public org.ovirt.engine.api.model.Disk lookupEntity(org.ovirt.engine.core.compat.Guid <START_MOD>id<END_MOD>) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { return collection.lookupEntity(guid); }
<START_MOD>@org.junit.Test public void testAddingNewNicWithNetworkAttachmentToExistingBondWithoutAnyAttachment() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid networkAttachmentId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.newNetworkAttachment(networkC, nicC, networkAttachmentId); allNetworkAttachments.add(networkAttachment); when(logicalNetworkModelOfNetworkC.isAttached()).thenReturn(true, false); when(networkInterfaceModelOfNicC.getItems()).thenReturn(java.util.Collections.singletonList(logicalNetworkModelOfNetworkC)); when(bondNetworkInterfaceModelA.getItems()).thenReturn(java.util.Collections.<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>emptyList()); when(bondNetworkInterfaceModelA.getEntity()).thenReturn(existingBond); NetworkOperation.ADD_TO_BOND.getTarget().executeNetworkCommand(networkInterfaceModelOfNicC, bondNetworkInterfaceModelA, allNics, allNetworkAttachments, hsnp); assertThat(hsnp.getNetworkAttachments().size(), is(1)); assertNetworkAttachment(hsnp.getNetworkAttachments().iterator().next(), networkAttachmentId, networkC.getId(), existingBondId); assertThat(hsnp.getRemovedNetworkAttachments().size(), is(0)); assertThat(hsnp.getBonds().size(), is(1)); assertBond(hsnp.getBonds().iterator().next(), existingBondId, java.util.Arrays.asList(nicA, nicB, nicC)); assertThat(hsnp.getRemovedBonds().size(), is(0)); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( active source Storage Domain is available java.lang.String noActiveSourceStorageDomainAvailableMsg();
public void selectHost() { final java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> clusters = new java.util.ArrayList<>(); clusters.add(getEntity()); final org.ovirt.engine.ui.uicommonweb.models.hosts.MoveHost model = new org.ovirt.engine.ui.uicommonweb.models.hosts.MoveHost(); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().selectHostTitle()); model.setHelpTag(HelpTag.select_host); model.setHashName("select_host"); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterById(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.businessentities.StoragePool><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org.ovirt.engine.core.common.businessentities.StoragePool dataCenter<END_MOD>) { boolean isMultiHostDC = dataCenter.isLocal(); if (isMultiHostDC) { model.setMultiSelection(false); } setWindow(model); model.getCluster().setItems(clusters); model.getCluster().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(clusters)); model.getCluster().setIsAvailable(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSelectHost", org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel.this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel.this); model.getCommands().add(tempVar2); } }), getEntity().getStoragePoolId()); }
public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(java.lang.String action, java.lang.String oid) { java.net.URI uri = java.net.URI.create(org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(newModel(id)).getHref()); javax.ws.rs.core.Response.Status status = Response.Status.MOVED_PERMANENTLY; return javax.ws.rs.core.Response.status(status).location(uri).build(); }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if ((getNic()) == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST); } if ((!(org.ovirt.engine.core.utils.NetworkUtils.isLabeled(getNic()))) || (!(getNic().getLabels().contains(getLabel())))) { return <START_MOD>failValidate<END_MOD>(EngineMessage.INTERFACE_NOT_LABELED); } return true; }
<START_MOD>@java.lang.Override protected void executeSave() { final org.ovirt.engine.core.common.action.QosParametersBase<T> parameters = getParameters(); parameters.setQos(qos); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(getVdcAction(), parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result1) { org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = result1.getReturnValue(); boolean succeeded = false; if ((retVal != null) && (retVal.getSucceeded())) { succeeded = true; qos.setId(((org.ovirt.engine.core.compat.Guid) (retVal.getActionReturnValue()))); } postSaveAction(succeeded); } }); }<END_MOD>
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS object) { return (object.getInboundPeak()) == null ? constants.UnlimitedNetworkQoS() : object.getInboundPeak().toString(); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Cluster cluster) { validateParameters(cluster, "name"); validateEnums(org.ovirt.engine.api.model.Cluster.class, cluster); org.ovirt.engine.api.model.DataCenter dataCenter = new org.ovirt.engine.api.model.DataCenter(); dataCenter.setId(<START_MOD>id<END_MOD>.toString()); cluster.setDataCenter(dataCenter); org.ovirt.engine.core.common.businessentities.StoragePool pool = org.ovirt.engine.api.restapi.resource.BackendDataCenterResource.getStoragePool(cluster, this); org.ovirt.engine.core.common.businessentities.VDSGroup entity = map(cluster, map(pool)); return performCreate(VdcActionType.AddVdsGroup, new org.ovirt.engine.core.common.action.VdsGroupOperationParameters(entity), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetVdsGroupById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.compat.Guid vdsgroupid = org.ovirt.engine.core.bll.GetNetworkDisplayByClusterIdQuery.getParameters().getVdsGroupId(); java.util.List<org.ovirt.engine.core.common.businessentities.network_cluster> all = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkClusterDAO().getAllForCluster(vdsgroupid); final org.ovirt.engine.core.common.businessentities.network_cluster nc = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(all, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.network_cluster>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.network_cluster network_cluster) { return network_cluster.getis_display(); } }); if (nc != null) { org.ovirt.engine.core.bll.GetNetworkDisplayByClusterIdQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDAO().getAllForCluster(vdsgroupid), new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity <END_MOD>network<START_MOD>) { return<END_MOD> network.getId().equals(nc.getnetwork_id()); } })); } }
protected void runCommands() { java.util.List<org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter> params = new java.util.ArrayList<>(); java.util.Set<org.ovirt.engine.core.compat.Guid> networkIds = new java.util.HashSet<>(); for (org.ovirt.engine.core.bll.CommandBase<?> command : getCommands()) { if (command.getReturnValue().getCanDoAction()) { org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter parameters = ((org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter) (command.getParameters())); params.add(parameters); org.ovirt.engine.core.common.businessentities.network.Network network = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDao().get(parameters.getNetworkCluster().getNetworkId()); if (org.ovirt.engine.core.utils.NetworkUtils.isConfiguredByLabel(network)) { networkIds.add(network.getId()); } } } if ((networkIds.size()) <= 1) { super.runCommands(); return; } if (!(params.isEmpty())) { org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(<START_MOD>getActionToPerform()<END_MOD>, new org.ovirt.engine.core.common.action.ClusterNetworksParameters(params.get(0).getVdsGroupId(), params)); } }
public void log(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.AuditLogType logType, java.lang.String loggerString) { updateTimeoutLogableObject(auditLogable, logType); if (auditLogable.getLegal()) { saveToDb(auditLogable, logType, loggerString); } }
<START_MOD>private void deleteSnapshot() { if ((getSelectedItems()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity> snapshots = ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity>) (getSelectedItems())); java.lang.StringBuilder snapshotNames = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity snapshot : snapshots) { snapshotNames.append(snapshot.getSnapshotName()); snapshotNames.append("\n"); } setConfirmWindow(model); model.setTitle((((org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().confirmRemoveSnapshot()) + " - ") + (getEntity().getName()))); model.setHelpTag(HelpTag.volume_delete_snapshot_confirmation); model.setHashName("volume_delete_snapshot_confirmation"); model.setMessage((((org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().confirmVolumeSnapshotDelete()) + "\n\n") + snapshotNames)); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("onDeleteSnapshot", this); model.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("CancelConfirmation", this); model.getCommands().add(cancelCommand); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.compat.Guid getMemoryDiskId() { return new org.ovirt.engine.core.compat.Guid(activeSnapshot.getMemoryVolume().split(",")[2]); }<END_MOD>
<START_MOD>public<END_MOD> void <START_MOD>setPostZero<END_MOD>(boolean <START_MOD>postZeros<END_MOD>) { <START_MOD>postZero<END_MOD> = <START_MOD>postZeros<END_MOD>; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.DiskImage object) { return (<START_MOD>(<END_MOD>java.lang.String.valueOf(object.getSizeInGigabytes())) +   <START_MOD>  + (org.ovirt.engine.ui.common.widget.uicommon.template.TemplateDiskListModelTable.constants.gb());<END_MOD> }
public void InternalSetVmStatus(org.ovirt.engine.core.common.businessentities.VM vm, final org.ovirt.engine.core.common.businessentities.VMStatus status) { vm.setStatus(status<START_MOD>); vm.setExitStatus(VmExitStatus.Normal); vm.setExitMessage(StringUtils.EMPTY<END_MOD>); boolean isVmStatusDown = org.ovirt.engine.core.common.businessentities.VM.isStatusDown(status); if (isVmStatusDown || (status == (org.ovirt.engine.core.common.businessentities.VMStatus.Unknown))) { resetVmAttributes(vm); if (isVmStatusDown) { vm.setRunOnVds(null); vm.setVmPauseStatus(VmPauseStatus.NONE); } } }
<START_MOD>@org.junit.Test public void testBooleanElement() { org.ovirt.engine.api.types.V4Vm object = newVm().setDeleteProtected(true).setRunOnce(false).build(); assertEquals(("<vm>" + (("<delete_protected>true</delete_protected>" + "<run_once>false</run_once>") + "</vm>")), objectToXml(object)); }<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (args.propertyName.equalsIgnoreCase("validationResult")) { getView().handleValidationErrors(model); } }<END_MOD>
private static boolean addQosForDevice(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.compat.Version vdsGroupCompatibilityVersion) { org.ovirt.engine.core.compat.Guid qosId = vnicProfile.getNetworkQosId(); if (<START_MOD>(<END_MOD>qosId != null) <START_MOD>&&<END_MOD> (!(org.ovirt.engine.core.common.FeatureSupported.networkQoS(vdsGroupCompatibilityVersion<START_MOD>)<END_MOD>))) { return false; } java.util.Map<java.lang.String, java.lang.Object> specParams = ((java.util.Map<java.lang.String, java.lang.Object>) (struct.get(VdsProperties.SpecParams))); if (specParams == null) { specParams = new java.util.HashMap<>(); struct.put(VdsProperties.SpecParams, specParams); } org.ovirt.engine.core.common.businessentities.network.NetworkQoS networkQoS = <START_MOD>(qosId == null) ? new org.ovirt.engine.core.common.businessentities.network.NetworkQoS() : <END_MOD>org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getQosDao().get(qosId); org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper qosMapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper(specParams, VdsProperties.QOS_INBOUND, VdsProperties.QOS_OUTBOUND); qosMapper.serialize(networkQoS); <START_MOD>return true; <END_MOD>}
@java.lang.Override protected void init(<START_MOD>final <END_MOD>org.ovirt.engine.ui.uicommonweb.models.hosts.VfsNicLabelModel model) { super.init(model); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : model.getItems()) { labelModel.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsNicLabelWidget.this, null); <START_MOD>model.updateSuggestedLabels(); } }); } }<END_MOD>
protected abstract void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?<START_MOD>, ?, ?<END_MOD>> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<<START_MOD>?, ?, <END_MOD>?> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params);
<START_MOD>private void lockDiskImagesInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { getDiskImages().forEach(( diskImage) -> { getCompensationContext().snapshotEntityStatus(diskImage.getImage()); diskImage.setImageStatus(ImageStatus.LOCKED); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(diskImage.getImageId(), ImageStatus.LOCKED); }); getCompensationContext().stateChanged(); return null; }); }<END_MOD>
<START_MOD>private<END_MOD> <START_MOD>static<END_MOD> void <START_MOD>assertDbWasCalled<END_MOD>() { <START_MOD>assertTrue<END_MOD>(org.ovirt.engine.core.bll.quota.QuotaManagerTest.<START_MOD>dbWasCalled<END_MOD>); org.ovirt.engine.core.bll.quota.QuotaManagerTest.<START_MOD>dbWasCalled<END_MOD> <START_MOD>=<END_MOD> <START_MOD>false<END_MOD>; }
public void safeSetValue(java.lang.String value) throws java.lang.Exception, java.security.InvalidParameterException { <START_MOD>java.lang.System.out.println(( helper is   + (valueHelper.getClass().getName()))); org.ovirt.engine.core.config.entity.helper.ValidationResult validationResult = <END_MOD>valueHelper.validate(this, value)<START_MOD>; if (!(validationResult.isOk()<END_MOD>)) { <START_MOD>java.lang.StringBuilder invalidParamMsg = new java.lang.StringBuilder(); invalidParamMsg.append( set value ").append(value).append(" to key ").append(keyName).append(".   ? validationResult.getDetails() : "")); <END_MOD>throw new java.security.InvalidParameterException(<START_MOD>invalidParamMsg.toString(<END_MOD>)); } this.value = valueHelper.setValue(value); }
protected org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitecture() { if (org.apache.commons.lang.StringUtils.isNotEmpty(getVdsGroup().getCpuName())) { return <START_MOD>cpuFlagsManagerHandler<END_MOD>.getArchitectureByCpuName(getVdsGroup().getCpuName(), getVdsGroup().getCompatibilityVersion()); } else if ((getVdsGroup().getArchitecture()) == null) { return org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined; } return getVdsGroup().getArchitecture(); }
<START_MOD>protected java.util.List<java.lang.String> getHostNames(org.ovirt.engine.core.common.businessentities.Label label) { return new java.util.ArrayList(label.getHostNames()); }<END_MOD>
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> createGhostValue() { org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); value.setItems(<START_MOD>flush().getSuggestedLabels()<END_MOD>); value.setSelectedItem(""); return value; }
<START_MOD>public void setSpiceFileXferToggleEnabled(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> spiceFileXferToggleEnabled) { this.spiceFileXferToggleEnabled = spiceFileXferToggleEnabled; }<END_MOD>
<START_MOD>@java.lang.Override public javax.ws.rs.core.Response copy(org.ovirt.engine.api.model.Action action) { validateParameters(action, "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid storageDomainId = getStorageDomainId(action); org.ovirt.engine.core.compat.Guid imageId = asGuid(getDisk().getImageId()); org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters params = new org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters(imageId, org.ovirt.engine.core.compat.Guid.Empty, storageDomainId, org.ovirt.engine.core.common.businessentities.ImageOperation.Copy); return doAction(VdcActionType.MoveOrCopyDisk, params, action); }<END_MOD>
private boolean checkDerivedVmFromTemplateExists(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { java.util.List<java.lang.String> vmNames = getNamesOfDerivedVmsFromTemplate(diskImage); if (!(vmNames.isEmpty())) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VMT_CANNOT_REMOVE_DETECTED_DERIVED_VM); <START_MOD>addValidateMessageVariable<END_MOD>("vmsList", org.apache.commons.lang.StringUtils.join(vmNames, ",")); return false; } return true; }
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy) ? org.ovirt.engine.core.common.errors.EngineMessage.VAR__ACTION__COPY : org.ovirt.engine.core.common.errors.EngineMessage.VAR__ACTION__MOVE)); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__VM_DISK); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( in retrieving the relevant Storage Domain. java.lang.String errorRetrievingRelevantStorageDomainMsg();
private void saveNetworkFields() { if ((lastSelectedNetworkName) != null) { org.ovirt.engine.core.common.businessentities.VmInitNetwork obj = networkMap.get(lastSelectedNetworkName); if (obj != null) { obj.setBootProtocol(<START_MOD>getNetworkBootProtocolList<END_MOD>().<START_MOD>getSelectedItem<END_MOD>().<START_MOD>getValue<END_MOD>()); obj.setIp(getNetworkIpAddress().getEntity()); obj.setNetmask(getNetworkNetmask().getEntity()); obj.setGateway(getNetworkGateway().getEntity()); if (((getNetworkStartOnBoot().getEntity()) != null) && (getNetworkStartOnBoot().getEntity())) { networkStartOnBoot.add(lastSelectedNetworkName); } else { networkStartOnBoot.remove(lastSelectedNetworkName); } } } }
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.VDS> getXenHosts() { return hosts; }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Later java.lang.String configureLaterTitle();
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( count can be increased by only one java.lang.String addBricksStripeCountIncreaseValidationMsg();
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineErrataPresenter.logger.info(((this.getClass().toString()) + ": bus published message that the counts changed. update view.")); org.ovirt.engine.core.common.businessentities.ErrataCounts counts = currentErrataModel.getErrataCounts(); getView().showCounts(counts); }<END_MOD>
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.network.NetworkSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(ginjector.getApplicationConstants().networkGeneralSubTabLabel(), 0, ginjector.<START_MOD>getSubTabProviderGeneralModelProvider<END_MOD>()); }
<START_MOD>public void setSingleSelectionOnly() { singleSelectionOnly = true; }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Change VM properties java.lang.String allowChangeVmPropertiesRoleTreeTooltip();
private void InitOSType() { getOSType().setItems(<START_MOD>java.util.Arrays.asList(<END_MOD>org.ovirt.engine.<START_MOD>core<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>businessentities<END_MOD>.<START_MOD>VmOsType.values<END_MOD>(<START_MOD>)<END_MOD>)); getOSType().setSelectedItem(VmOsType.Unassigned); }
private boolean updateVmLease() { if (java.util.Objects.equals(oldVm.getLeaseStorageDomainId(), newVmStatic.getLeaseStorageDomainId())) { return true; } if (<START_MOD>org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isNotRunning()) { if (<END_MOD>!(addVmLease(newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()))) { return false; } <START_MOD>} else { if ((oldVm.getLeaseStorageDomainId()) == null) { org.ovirt.engine.core.common.action.VmLeaseParameters params = new org.ovirt.engine.core.common.action.VmLeaseParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePoolId(), newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()); params.setVdsId(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds()); params.setHotPlugLease(true); return runInternalAction(ActionType.AddVmLease, params).getSucceeded(); } boolean hotUnplugSucceeded = false; try { hotUnplugSucceeded = runVdsCommand(VDSCommandType.HotUnplugLease, new org.ovirt.engine.core.common.vdscommands.LeaseVDSParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds(), oldVm.getId(), oldVm.getLeaseStorageDomainId())).getSucceeded(); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error( in hot unplugging a lease to VM {}, message: {} oldVm.getId(), e.getMessage()); } if (!hotUnplugSucceeded) { auditLog(this, AuditLogType.HOT_UNPLUG_LEASE_FAILED); } } <END_MOD>removeVmLease(oldVm.getLeaseStorageDomainId(), oldVm.getId()); return true; }
protected void testStartWithHost(org.ovirt.engine.api.model.Host host, org.ovirt.engine.core.compat.Guid hostId) throws java.lang.Exception { setUpWindowsGetEntityExpectations(<START_MOD>2<END_MOD>, false<START_MOD>); setUpGetPayloadExpectations(0); setUpGetBallooningExpectations(<END_MOD>); setUriInfo(setUpActionExpectations(VdcActionType.RunVmOnce, org.ovirt.engine.core.common.action.RunVmOnceParams.class, new java.lang.String[]{ "VmId", "DestinationVdsId" }, new java.lang.Object[]{ GUIDS[0], hostId })); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setVm(new org.ovirt.engine.api.model.VM()); org.ovirt.engine.api.model.VmPlacementPolicy placementPolicy = new org.ovirt.engine.api.model.VmPlacementPolicy(); placementPolicy.setHost(host); action.getVm().setPlacementPolicy(placementPolicy); verifyActionResponse(resource.start(action)); }
private org.ovirt.engine.core.common.vdscommands.VDSParametersBase createVDSParameters() { return org.ovirt.engine.core.bll.storage<START_MOD>.domains<END_MOD>.PostZeroHandler.fixParametersWithPostZero(new org.ovirt.engine.core.common.vdscommands.DestroyImageVDSCommandParameters(org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().getImageList(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().isPostZero(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().isForce())); }
<START_MOD>protected java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> filterTemplatesInClusterNeedUpdate() { if (!(VmRngDevice.Source.urandomRandomUpdateRequired(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()))) { return java.util.Collections.emptyList(); } return vmTemplateDao.getAllForCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()); }<END_MOD>
protected final void decreasePendingVm(org.ovirt.engine.core.common.businessentities.VmStatic vm) { org.ovirt.engine.core.compat.Guid vdsId = getCurrentVdsId(); org.ovirt.engine.core.bll.VmHandler.decreasePendingVm(vm, vdsId); getBlockingQueue(vdsId).offer(java.lang.Boolean.TRUE); }
@java.lang.Override public org.ovirt.engine.api.model.Tags list()<START_MOD> { if (isFiltered()) { org.ovirt.engine.core.common.queries.GetTagsByUserIdParameters params = new org.ovirt.engine.core.common.queries.GetTagsByUserIdParameters(getCurrent().get(org.ovirt.engine.core.common.users.VdcUser.class).getUserId().toString()); return mapCollection(getBackendCollection(VdcQueryType.GetTagsByUserId, params)); } else<END_MOD> { java.util.List<org.ovirt.engine.core.common.businessentities.tags> tags = getTags(); tags.add(getRootTag()); return mapCollection(tags); }<START_MOD> }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__HOT_PLUG); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_DISK); <START_MOD>if ((getDiskAlias()) != null) { org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.addCanDoActionMessage(java.lang.String.format( %2$s "diskAliases", getDiskAlias())); <END_MOD>}<START_MOD> }<END_MOD>
@java.lang.Override <START_MOD>protected<END_MOD> <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.utils.ToStringBuilder<END_MOD> <START_MOD>appendAttributes<END_MOD>(<START_MOD>org.ovirt.engine.core.common.utils.ToStringBuilder tsb<END_MOD>) { return super.<START_MOD>appendAttributes<END_MOD>(<START_MOD>tsb<END_MOD>)<START_MOD>.append("deviceList"<END_MOD>, getDeviceList()<START_MOD>).append("force"<END_MOD>, isForce()); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Replica count can not be reduced.") java.lang.String ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT();<END_MOD>
@org.junit.Test public void canDoActionLunsNotPartOfStorageDomain() { java.util.List lunsFromDb = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id("111"); lun1.setStorageDomainId(sdId); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id("222"); lun2.setStorageDomainId(sdId); lunsFromDb.add(lun1); lunsFromDb.add(lun2); when(lunsDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommandTest.STORAGE)).thenReturn(lunsFromDb); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_LUNS_NOT_PART_OF_STORAGE_DOMAIN); }
<START_MOD>public boolean validate() { leftBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.MacAddressValidation() }); rightBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.MacAddressValidation() }); if ((leftBound.getIsValid()) && (rightBound.getIsValid())) { rightBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.IValidation() { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult res = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if ((((java.lang.String) (value)).compareToIgnoreCase(leftBound.getEntity())) < 0) { res.setSuccess(false); res.getReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().invalidMacRangeRightBound()); } return res; } } }); } setIsValid(((leftBound.getIsValid()) && (rightBound.getIsValid()))); return getIsValid(); }<END_MOD>
<START_MOD>public void setSpmMap(java.lang.String spId, org.ovirt.vdsmfake.domain.Host host) { spmMap.put(spId, host); }<END_MOD>
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.VM object) { boolean isDiskPlugged = getDetailModel().isDiskPluggedToVm(object); return isDiskPlugged ? getCommonResources().upImage() : getCommonResources().downImage(); }
private org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, org.ovirt.engine.core.common.errors.EngineFault> connectStorage() { return getStorageHelper(org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>RemoveStorageDomainCommand.getStorageDomain()).connectStorageToDomainByVdsIdDetails(org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>RemoveStorageDomainCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>RemoveStorageDomainCommand.getVds().getId()); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( CD java.lang.String changeCd();
<START_MOD>public boolean getVdsGroupSupportsGlusterSerice() { return this.vdsGroupGlusterSerice; }<END_MOD>
public java.util.List<java.lang.String> <START_MOD>getValidateMessages<END_MOD>() { return <START_MOD>validateMessages<END_MOD>; }
<START_MOD>private void localize(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { pfTab.setLabel(constants.pfTab()); vfsConfigTab.setLabel(constants.vfsConfigTab()); }<END_MOD>
private void assertNumOfVfsInValidRange(int numOfVfs) { assertThat(validator.numOfVfsInValidRange(numOfVfs), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NUM_OF_VFS_NOT_IN_VALID_RANGE, java.lang.String.format(VfsConfigValidator.NIC_NAME_REPLACEMENT, nic.getName()), java.lang.String.format(VfsConfigValidator.NUM_OF_VFS_REPLACEMENT, numOfVfs), java.lang.String.format(VfsConfigValidator.MAX_NUM_OF_VFS_REPLACEMENT, oldVfsConfig.getMaxNumOfVfs()))); }
private org.ovirt.engine.core.bll.network.host.SetupNetworksHelper createHelper(org.ovirt.engine.core.common.action.SetupNetworksParameters params, org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.compat.Version compatibilityVersion) { when(vds.getVdsGroupCompatibilityVersion()).thenReturn(compatibilityVersion); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = spy(new org.ovirt.engine.core.bll.network.host.SetupNetworksHelper(params, vds<START_MOD>, managementNetworkUtil<END_MOD>)); when(helper.getVmInterfaceManager()).thenReturn(vmInterfaceManager); doReturn(null).when(helper).translateErrorMessages(<START_MOD>org.mockito.Matchers.<java.util.List<java.lang.String>><END_MOD>any(<START_MOD>)); org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacade = mock(org.ovirt.engine.core.dal.dbbroker.DbFacade<END_MOD>.class)<START_MOD>; doReturn(dbFacade).when(helper).getDbFacade(); doReturn(interfaceDAO).when(dbFacade).getInterfaceDao(); doReturn(<END_MOD>mock(org.ovirt.engine.core.<START_MOD>dao.VdsDAO<END_MOD>.class)).when(dbFacade).getVdsDao(); doReturn(networkDAO).when(dbFacade).getNetworkDao(); doReturn(qosDao).when(dbFacade).getNetworkQosDao(); return helper; }
@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.widget.table.cell.Context context, T value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb<START_MOD>, java.lang.String id<END_MOD>) { if (!(isVisible(value))) { return; } com.google.gwt.resources.client.ImageResource image = resources.expanderDownImage(); com.google.gwt.safehtml.shared.SafeHtml imageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(image).getHTML()); sb.append(templates.volumeActivityMenu(imageHtml<START_MOD>, id<END_MOD>)); }
<START_MOD>public void restoreHeartbeat() { client.setIsHeartbeat(true); }<END_MOD>
@java.lang.Override protected boolean validate() { if (!(checkQuotaValidationCommon(getParameters().getQuota()))) { return false; } if ((getQuotaDao().getById(getParameters().getQuota().getId())) == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } return <START_MOD>validateQuotaNotDefault(getParameters().getQuota().getId())<END_MOD>; }
boolean areRequiredNetworksAvailable(final java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> vmNetworkInterfaces, final java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> allInterfacesForVds) { <START_MOD>final<END_MOD> <START_MOD>java.util.List<java.lang.String> vmNetworkInterfacesStr =<END_MOD> org.ovirt.engine.core.common.<START_MOD>utils<END_MOD>.<START_MOD>ListUtils.transform(vmNetworkInterfaces,<END_MOD> <START_MOD>vmNetworkInterfaceToNetworkName);<END_MOD> <START_MOD>final<END_MOD> <START_MOD>java.util.List<java.lang.String><END_MOD> <START_MOD>vdsNetNames<END_MOD> = org.ovirt.engine.core.common.<START_MOD>utils<END_MOD>.<START_MOD>ListUtils.transform(<END_MOD>allInterfacesForVds, <START_MOD>vdsNetworkInterfaceToNetworkName<END_MOD>); <START_MOD>return vdsNetNames.containsAll(vmNetworkInterfacesStr)<END_MOD>; }
@java.lang.Override public void loadFromLocalStorage(org.ovirt.engine.ui.uicommonweb.models.VmConsoles <START_MOD>consoles<END_MOD>) { java.lang.String vmId = <START_MOD>guidToStringNullSafe(consoles<END_MOD>.getVm().getId()<START_MOD>); java.lang.String poolId = guidToStringNullSafe(consoles.getVm().getVmPoolId()<END_MOD>); org.ovirt.engine.ui.common.utils.ConsoleContext context = <START_MOD>consoles<END_MOD>.getConsoleContext(); org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker <START_MOD>poolKeyMaker<END_MOD> = new org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker(<START_MOD>poolId, true, context); loadConsolesWithKeymaker(consoles, poolKeyMaker); if (consoles instanceof org.ovirt.engine.ui.uicommonweb.models.VmConsolesImpl) { org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker vmKeyMaker = new org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker(<END_MOD>vmId, <START_MOD>false, <END_MOD>context); <START_MOD>loadConsolesWithKeymaker(consoles, vmKeyMaker)<END_MOD>; } }
public org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface getNetworkInterface(org.ovirt.engine.core.utils.ovf.xml.XmlNode node) { java.lang.String str = node.<START_MOD>selectSingleNode<END_MOD>("rasd:InstanceId", _xmlNS).innerText; final org.ovirt.engine.core.compat.Guid guid; org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface; if (!(org.apache.commons.lang.StringUtils.isNumeric(str))) { guid = new org.ovirt.engine.core.compat.Guid(str); iface = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(interfaces, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface) { return iface.getId().equals(guid); } }); if (iface == null) { iface = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); iface.setId(guid); } } else { iface = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); } return iface; }
protected java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>> populateTemplatesMetadataForOvfUpdate(java.util.List<org.ovirt.engine.core.compat.Guid> idsToProcess) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>> vmsAndTemplateMetadata = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>>(); java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> templates = getVmTemplateDao().getVmTemplatesByIds(idsToProcess); for (org.ovirt.engine.core.common.businessentities.VmTemplate template : templates) { if ((org.ovirt.engine.core.common.businessentities.VmTemplateStatus.Locked) != (template.getStatus())) { updateTemplateDisksFromDb(template); boolean verifyDisksNotLocked = <START_MOD>proccessDisks(template.getDiskList()); if (<END_MOD>verifyDisksNotLocked<START_MOD>) { loadTemplateData(template); java.lang.Long currentDbGeneration = getVmStaticDao().getDbGeneration(template.getId<END_MOD>()); if (<START_MOD>(currentDbGeneration != null) && ((template.getDbGeneration()) == currentDbGeneration)<END_MOD>) { <START_MOD>proccessedOvfConfigurationsInfo.add(buildMetadataDictionaryForTemplate(template, vmsAndTemplateMetadata)); proccessedIdsInfo.add(template.getId()); proccessedOvfGenerationsInfo.add(template<END_MOD>.getDbGeneration(<START_MOD>)); } } } } return<END_MOD> vmsAndTemplateMetadata; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (((connectAutomatically.readConnectAutomatically()) && (model.getCanConnectAutomatically())) && (!(alreadyOpened))) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel userPortalItemModel = model.GetUpVms(model.getItems()).get(0); if (userPortalItemModel != null) { <START_MOD>org.ovirt.engine.ui.uicommonweb.models.userportal.ConsoleProtocol selectedProtocol = consoleUtils.determineConnectionProtocol(<END_MOD>userPortalItemModel<START_MOD>); consoleManager<END_MOD>.<START_MOD>connectToConsole<END_MOD>(<START_MOD>selectedProtocol, userPortalItemModel<END_MOD>); alreadyOpened = true; } } unregisterModels(); }
<START_MOD>@org.junit.Test public void canDoActionFails() { org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters params = new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters(); params.setServerServiceId(org.ovirt.engine.core.compat.Guid.NewGuid()); params.setActionType(ManageGlusterServiceCommand.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_START); cmd = spy(new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand(params)); prepareMocks(cmd); assertFalse(cmd.canDoAction()); params.setActionType(ManageGlusterServiceCommand.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_STOP); assertFalse(cmd.canDoAction()); }<END_MOD>
<START_MOD>void addFooterButtons(final T model) { for (int i = (model.getCommands().size()) - 1; i >= 0; i--) { org.ovirt.engine.ui.uicommonweb.UICommand command = model.getCommands().get(i); final org.ovirt.engine.ui.common.widget.HasUiCommandClickHandlers button = org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget.getView().addFooterButton(command.getTitle(), command.getName()); button.setCommand(command); registerHandler(button.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { handleCommandExecution(button.getCommand(), model); } })); } }<END_MOD>
private static java.util.<START_MOD>Collection<END_MOD><org.ovirt.engine.api.extensions.ExtMap> flatGroups(org.ovirt.engine.api.extensions.ExtMap entity, org.ovirt.engine.api.extensions.ExtKey key, java.util.<START_MOD>Map<java.lang.String, <END_MOD>org.ovirt.engine.api.extensions.ExtMap> accumulator) { for (org.ovirt.engine.api.extensions.ExtMap group : entity.<java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>>get(key, java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>emptyList())) { <START_MOD>if (!(accumulator.containsKey(group.<java.lang.String>get(GroupRecord.ID)))) { accumulator.put(group.<java.lang.String>get(GroupRecord.ID), <END_MOD>group); org.ovirt.engine.core.bll.aaa.DirectoryUtils.flatGroups(group, GroupRecord.GROUPS, accumulator); } <START_MOD>} <END_MOD>return accumulator<START_MOD>.values()<END_MOD>; }
@java.lang.Override <START_MOD>public<END_MOD> void buildVmVideoCards() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmVideoDevices = vmDeviceDao.getVmDeviceByVmIdAndType(vm.getId(), VmDeviceGeneralType.VIDEO); for (org.ovirt.engine.core.common.businessentities.VmDevice vmVideoDevice : vmVideoDevices) { if (!(vmVideoDevice.getIsManaged())) { continue; } java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, vmVideoDevice.getType().getValue()); struct.put(VdsProperties.Device, vmVideoDevice.getDevice()); <START_MOD>vmInfoBuildHelper<END_MOD>.addAddress(vmVideoDevice, struct); struct.put(VdsProperties.SpecParams, vmVideoDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmVideoDevice.getId().getDeviceId())); addToManagedDevices(vmVideoDevice); devices.add(struct); } }
@java.lang.Override @org.junit.Before public void setUp() { super.setUp(); org.ovirt.engine.core.common.action.ImportRepoImageParameters importParameters = new org.ovirt.engine.core.common.action.ImportRepoImageParameters(); importParameters.setSourceRepoImageId(getRepoImageId()); importParameters.setSourceStorageDomainId(getRepoStorageDomainId()); importParameters.setStoragePoolId(getStoragePoolId()); importParameters.setStorageDomainId(getStorageDomainId()); cmd = spy(new org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand<START_MOD><org.ovirt.engine.core.common.action.ImportRepoImageParameters><END_MOD>(importParameters, null)<START_MOD> { @java.lang.Override protected org.ovirt.engine.core.bll.utils.VmDeviceUtils getVmDeviceUtils() { return vmDeviceUtils; } }<END_MOD>); doReturn(getStorageDomainDao()).when(cmd).getStorageDomainDao(); doReturn(getStoragePoolDao()).when(cmd).getStoragePoolDao(); doReturn(getProviderProxy()).when(cmd).getProviderProxy(); doReturn(true).when(cmd).validateSpaceRequirements(any(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VdsStatistics get(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", id); return getCallsHandler().executeRead("GetVdsStatisticsByVdsId", org.ovirt.engine.core.dao.<START_MOD>VdsStatisticsDAOImpl<END_MOD>.VdsStatisticsRowMapper.instance, parameterSource); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.<START_MOD>Boolean<END_MOD> <START_MOD>isNameUnique<END_MOD>) { if (isNameUnique) { postInstanceTypeNameUniqueCheck(); } else { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel VmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())); VmModel.getInvalidityReasons().clear(); VmModel.getName().getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason()); VmModel.getName().setIsValid(false); VmModel.setIsValid(false); } }
private com.google.gwt.safehtml.shared.SafeHtml <START_MOD>getTooltip<END_MOD>(java.util.Set<java.lang.String> labels) { com.google.gwt.safehtml.shared.SafeHtmlBuilder tooltip = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); boolean isFirst = true; if (labels == null) { return null; } java.lang.String[] sortedLabels = labels.toArray(new java.lang.String[]{ }); java.util.Arrays.sort(sortedLabels, new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator()); for (java.lang.String label : sortedLabels) { if (isFirst) { isFirst = false; } else { tooltip = tooltip.appendHtmlConstant("<BR>"); } tooltip = tooltip.appendEscaped(label); } return tooltip.toSafeHtml(); }
private org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct generateOptions() { org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct options = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct(); options.add(VdsProperties.connectivityCheck, java.lang.Boolean.toString(org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand.getParameters().isCheckConnectivity())); if (org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand.getParameters().<START_MOD>isCheckConnectivity()) { int connectivityTimeout = org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand.getParameters().<END_MOD>getConectivityTimeout()<START_MOD>; if (connectivityTimeout <=<END_MOD> 0) { <START_MOD>connectivityTimeout = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.NetworkConnectivityCheckTimeoutInSeconds); } <END_MOD>options.add(VdsProperties.connectivityTimeout, <START_MOD>connectivityTimeout<END_MOD>); } return options; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Provider<?>> getAllByType(org.ovirt.engine.core.common.businessentities.ProviderType providerType) { return getCallsHandler().executeReadList("GetAllFromProvidersByType", org.ovirt.engine.core.dao.provider.ProviderDaoImpl.ProviderRowMapper.INSTANCE, getCustomMapSqlParameterSource().addValue("provider_type", providerType)); }
@org.junit.Test public void qosCommitmentMissingBondSpeedMode3() { org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = qosCommitmendMissingBondSpeed(org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_MODE_3); validateAndExpectViolation(helper, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_OVERCOMMITMENT, org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME); }
<START_MOD>void setBasicAuthHeader(com.google.gwt.http.client.RequestBuilder requestBuilder, java.lang.String authString) { requestBuilder.setHeader("Authorization", ("Basic " + authString)); }<END_MOD>
@java.lang.Override protected boolean canDoAction() { if (<START_MOD>(<END_MOD>!(org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterGeoReplication(getVdsGroup().getCompatibilityVersion(<START_MOD>)))) && (!(getClusterUtils().isFeatureSupportedAsAdditionalFeature(getVdsGroup().getId(), ClusterUtils.FEATURE_GLUSTER_GEO_REPLICATION<END_MOD>)))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GEO_REP_NOT_SUPPORTED); } slaveHost = getSlaveHost(); if ((slaveHost) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST); } if ((slaveHost.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP, java.lang.String.format( %2$s "VdsName", slaveHost.getName())); } slaveVolume = getSlaveVolume(); if ((slaveVolume) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_INVALID); } if ((slaveVolume.getStatus()) != (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_STARTED); } if (!(areAllRemoteServersUp())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_ONE_OR_MORE_REMOTE_HOSTS_ARE_NOT_ACCESSIBLE); } org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession geoRepSession = getGeoRepDao().getGeoRepSession(getGlusterVolumeId(), slaveHost.getId(), getParameters().getSlaveVolumeName()); if (geoRepSession != null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_GEOREP_SESSION_ALREADY_CREATED); } return super.canDoAction(); }
<START_MOD>public org.ovirt.engine.core.dao.network.NetworkProviderDao getNetworkProviderDao() { return getDao(org.ovirt.engine.core.dao.network.NetworkProviderDao.class); }<END_MOD>
<START_MOD>public void setTabToSelect(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Integer> value) { tabToSelect = value; onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("SelectTab")); }<END_MOD>
@java.lang.Override protected void <START_MOD>beforeLogin<END_MOD>(org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel) { org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.init(eventBus); }
@java.lang.Override @org.ovirt.engine.api.restapi.resource.SingleEntityResource public org.ovirt.engine.api.resource.<START_MOD>TemplateDiskResource<END_MOD> getDeviceSubResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.<START_MOD>BackendTemplateDiskResource<END_MOD>(modelType, entityType, asGuidOr404(id), this)); }
<START_MOD>private void updateSelectedList() { java.util.Set<java.lang.Integer> indexes = new java.util.HashSet<java.lang.Integer>(); selectedList.clear(); com.google.gwt.user.client.ui.ListBox listBox = org.ovirt.engine.ui.common.widget.editor.ListModelMultipleSelectListBox.asListBox(); while ((listBox.getSelectedIndex()) >= 0) { int index = listBox.getSelectedIndex(); listBox.setItemSelected(index, false); java.lang.String selectedElem = listBox.getItemText(index); T value = getTypedValue(selectedElem); selectedList.add(value); indexes.add(index); } for (java.lang.Integer index : indexes) { listBox.setItemSelected(index, true); } }<END_MOD>
public void setuser_name(java.lang.String value) { this.username = <START_MOD>getStringValueToSet(<END_MOD>value<START_MOD>)<END_MOD>; }
private java.lang.String getPrintableConnectionsList() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.vdscommands.storage_server_connections con : getConnectionList()) { sb.append( id:   sb.append(con.getid()); sb.append( connection:   sb.append(con.getconnection()); sb.append( <START_MOD>iqn:   sb.append(con.getiqn()); sb.append( vfsType:   sb.append(con.getVfsType()); sb.append( mountOptions:   sb.append(con.getMountOptions()); sb.append( nfsVersion:   sb.append(con.getNfsVersion()); sb.append( nfsRetrans:   sb.append(con.getNfsRetrans()); sb.append( nfsTimeo:   sb.append(con.getNfsTimeo()); sb.append( <END_MOD>}; } return sb.toString(); }
private void finalizeDownloadIfNecessary(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context, org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer) { if ((((<START_MOD>org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize<END_MOD>()) != 0) && (<START_MOD>(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()) == <END_MOD>(upToDateImageTransfer.getBytesSent()))) && (!(upToDateImageTransfer.getActive()))) { if (!(context.entity.getActive())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer statusUpdate = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); statusUpdate.setPhase(ImageTransferPhase.FINALIZING_SUCCESS); runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId(), statusUpdate)); } } }
private boolean refreshVdsmFileList(org.ovirt.engine.core.compat.Guid repoStoragePoolId, org.ovirt.engine.core.compat.Guid repoStorageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> fileStats, org.ovirt.engine.core.bll.storage.domain.<START_MOD>IsoDomainListSynchronizer<END_MOD>.FileListRefreshed fileListRefreshed) { if (repoStorageDomainId == null) { return false; } boolean vdsmRefreshOk = fileStats != null; org.ovirt.engine.core.bll.storage.domain.<START_MOD>IsoDomainListSynchronizer<END_MOD>.log.debug( refresh process from VDSM, for {}, {}. imageFileType, succeededOrFailed(vdsmRefreshOk)); if (!vdsmRefreshOk) { return false; } boolean refreshSucceeded = org.ovirt.engine.core.bll.storage.domain.<START_MOD>IsoDomainListSynchronizer<END_MOD>.refreshIsoFileListMetaData(repoStorageDomainId, repoStorageDom, fileStats, imageFileType); if (refreshSucceeded && (fileListRefreshed != null)) { fileListRefreshed.onFileListRefreshed(repoStoragePoolId, fileStats.keySet()); } return refreshSucceeded; }
<START_MOD>private java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> moveDependentToEnd(java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list) { java.util.function.Predicate<org.ovirt.engine.core.common.businessentities.VdcOption> isDependent = ( o) -> { org.ovirt.engine.core.dal.dbbroker.generic.EnumValue parsed = parseEnumValue(o.getOptionName()); if (parsed != null) { org.ovirt.engine.core.common.config.OptionBehaviourAttribute behaviour = parsed.getOptionBehaviour(); if (behaviour == null) { return false; } return (behaviour.behaviour()) == (ValueDependent); } return false; }; java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> optionsList = list.stream().filter(isDependent.negate()).collect(java.util.stream.Collectors.toList()); optionsList.addAll(list.stream().filter(isDependent).collect(java.util.stream.Collectors.toList())); return optionsList; }<END_MOD>
private java.lang.String commaSeparated(java.util.<START_MOD>Collection<END_MOD><?> invalidBondIds) { return org.apache.commons.lang.StringUtils.join(invalidBondIds,     }
public void setTitle(com.google.gwt.safehtml.shared.SafeHtml text) { setText(text<START_MOD>.asString()<END_MOD>); }
<START_MOD>@org.ovirt.engine.ui.webadmin.Source("images/pause.png") com.google.gwt.resources.client.ImageResource pauseImage();<END_MOD>
private void validateDataSize() { if ((dataUrl.length()) > (org.ovirt.engine.core.bll.validator.IconValidator.MAX_DATAURL_SIZE)) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.DATA_SIZE_OF_PROVIDED_VM_ICON_TOO_LARGE, (   + (org.ovirt.engine.core.bll.validator.IconValidator.getSizeEstimateByDataUrlLength(org.ovirt.engine.core.bll.validator.IconValidator.MAX_DATAURL_SIZE))), (   + (org.ovirt.engine.core.bll.validator.IconValidator.getSizeEstimateByDataUrlLength(dataUrl.length())))); } }
public boolean isAttached() { return (<START_MOD>reportedConfigurations<END_MOD>) != null; }
private void collectVmPrestartFailureReasons(java.util.Map<java.lang.String, java.lang.Integer> failureReasons, java.util.List<java.lang.String> messages) { if (org.ovirt.engine.core.bll.VmPoolMonitor.log.isInfoEnabled()) { java.lang.String reason = messages.stream().filter(<START_MOD>( msg) -> org.ovirt.engine.core.bll.VmPoolMonitor.ENGINE_MESSAGES.contains(msg)<END_MOD>).collect(java.util.stream.Collectors.joining(   java.lang.Integer count = failureReasons.get(reason); failureReasons.put(reason, (count == null ? 1 : count + 1)); } }
<START_MOD>private void logAuditMessages(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricks) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.gluster.GlusterAuditLogUtil logUtil = org.ovirt.engine.core.dal.dbbroker.auditloghandling.gluster.GlusterAuditLogUtil.getInstance(); for (final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : bricks) { logUtil.logAuditMessage(null, null, null, AuditLogType.GLUSTER_VOLUME_BRICK_ADDED, new java.util.HashMap<java.lang.String, java.lang.String>() { { put(GlusterConstants.BRICK_PATH, brick.getBrickDirectory()); put(GlusterConstants.SERVERE_NAME, brick.getServerName()); put(GlusterConstants.VOLUME_NAME, getGlusterVolumeName()); } }); } }<END_MOD>
public java.lang.String getSoftwareVersion() { return mVdsDynamic.getSoftwareVersion(); }
<START_MOD>protected boolean validateDiscardAfterDeleteLegal(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator) { if (org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().isDiscardAfterDelete()) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISCARD_AFTER_DELETE_SUPPORTED_ONLY_BY_BLOCK_DOMAINS); } return true; }<END_MOD>
private static org.ovirt.engine.core.common.businessentities.Network CloneNetwork(org.ovirt.engine.core.common.businessentities.Network instance) { org.ovirt.engine.core.common.businessentities.Network obj = new org.ovirt.engine.core.common.businessentities.Network(null); obj.setaddr(instance.getaddr()); obj.setdescription(instance.getdescription()); obj.setId(instance.getId()); obj.setname(instance.getname()); obj.setsubnet(instance.getsubnet()); obj.setgateway(instance.getgateway()); obj.settype(instance.gettype()); obj.setvlan_id(instance.getvlan_id()); obj.setstp(instance.getstp()); obj.setstorage_pool_id(instance.getstorage_pool_id()); <START_MOD>if ((instance.getCluster()) != null) { obj.setCluster(new org.ovirt.engine.core.common.businessentities.network_cluster()); obj.getCluster().setstatus(instance.getCluster().getstatus()); obj.getCluster()<END_MOD>.setis_display(instance.<START_MOD>getCluster().<END_MOD>getis_display()); <START_MOD>obj.getCluster().setRequired(instance.getCluster().isRequired()); } <END_MOD>return obj; }
@org.junit.Test public void testIsUsingScsiReservationValidWhenSgioIsFiltered() { setupForLun(); org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk(ScsiGenericIO.FILTERED, true); assertThat(lunValidator.isUsingScsiReservationValid(org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(), lunDisk1), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_SGIO_IS_FILTERED)); }
private void mockExistingNetworks(org.ovirt.engine.core.common.businessentities.network.Network... networks) {<START_MOD> for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { if ((network.getCluster()) == null) { network.setCluster(new org.ovirt.engine.core.common.businessentities.network.NetworkCluster()); } }<END_MOD> when(networkDAO.getAllForCluster(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Arrays.asList(networks)); }
<START_MOD>private org.ovirt.engine.core.common.action.LiveMigrateDiskParameters getLiveMigrateDiskParameters(org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters, org.ovirt.engine.core.compat.Guid vmId) { return new org.ovirt.engine.core.common.action.LiveMigrateDiskParameters(moveDiskParameters.getImageId(), moveDiskParameters.getSourceDomainId(), moveDiskParameters.getStorageDomainId(), vmId, moveDiskParameters.getQuotaId()); }<END_MOD>
@org.junit.Test public void testVirtIoScsiNotSupportedByOs() { org.ovirt.engine.core.common.businessentities.DiskImage disk = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createVirtIoScsiDiskImage(); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createParameters(); parameters.setDiskInfo(disk); org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId, parameters); mockStorageDomain(storageId); mockStoragePoolIsoMap(); org.ovirt.engine.core.common.businessentities.VM vm = mockVm(); vm.setVdsGroupCompatibilityVersion(Version.v3_3); org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); java.util.HashMap<java.lang.Integer, java.lang.String> uniqueOsNames = new java.util.HashMap<java.lang.Integer, java.lang.String>(); uniqueOsNames.put(7, "RHEL5"); when(osRepository.getUniqueOsNames()).thenReturn(uniqueOsNames); <START_MOD>mockMaxPciSlots(); <END_MOD>vm.setVmOs(7); org.ovirt.engine.core.bll.validator.DiskValidator diskValidator = spyDiskValidator(disk); doReturn(true).when(diskValidator).isVirtioScsiControllerAttached(any(org.ovirt.engine.core.compat.Guid.class)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); }
<START_MOD>private void mockLockObjectFactoryToDisableLocking() { when(lockedObjectFactory.createLockingInstance(any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any(java.util.concurrent.locks.ReentrantReadWriteLock.class))).thenAnswer(org.mockito.AdditionalAnswers.returnsArgAt(0)); }<END_MOD>
@org.junit.Test public void onlyOutboundBurstPresent() { qos.setOutboundBurst(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.<START_MOD>BANDWIDTH<END_MOD>); valuesPresentTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_MISSING_VALUES)); }
public java.util.Map<java.lang.String, java.lang.Object> <START_MOD>glusterVolumeGeoRepSessionList<END_MOD>(java.lang.String volumeName, java.lang.String slaveHost, java.lang.String slaveVolumeName, java.lang.String <START_MOD>slaveUserName<END_MOD>);
private void addViolation(org.ovirt.engine.core.common.errors.VdcBllMessages violation, java.lang.String violatingEntity) {<START_MOD> if (violatingEntity == null) { return; }<END_MOD> java.util.List<java.lang.String> violatingEntities = violations.get(violation); if (violatingEntities == null) { violatingEntities = new java.util.ArrayList<>(); violations.put(violation, violatingEntities); } violatingEntities.add(violatingEntity); }
com.google.gwt.user.cellview.client.Header<?> createHeader(com.google.gwt.user.cellview.client.Column<T, ?> column, java.lang.String headerTextOrHtml, boolean allowHtml) { com.google.gwt.safehtml.shared.SafeHtml headerHtml = (allowHtml) ? com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(headerTextOrHtml) : com.google.gwt.safehtml.shared.SafeHtmlUtils.<START_MOD>fromTrustedString(com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscapeAllowEntities<END_MOD>(headerTextOrHtml<START_MOD>)<END_MOD>); return createHeader(column, headerHtml); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.<START_MOD>common<END_MOD>.<START_MOD>businessentities<END_MOD>.<START_MOD>AuditLog auditLog = org<END_MOD>.<START_MOD>ovirt.engine.core.bll.RemoveAuditLogByIdCommand<END_MOD>.getAuditLogDao().<START_MOD>get<END_MOD>(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.<START_MOD>getAuditLogDao().remove(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); setAuditLogDetails(auditLog); evict(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.composeSystemObjectId(this, auditLog.getLogType())); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.<END_MOD>setSucceeded(true); }
@org.junit.Test public void <START_MOD>invalidNetworkProviderType<END_MOD>() { when(provider.getType()).thenReturn(org.ovirt.engine.core.bll.provider.NetworkProviderValidatorTest.NON_NETWORK_PROVIDER_TYPE); assertThat(validator.<START_MOD>providerTypeIsNetwork<END_MOD>(), failsWith(EngineMessage.<START_MOD>ACTION_TYPE_FAILED_PROVIDER_TYPE_NOT_NETWORK<END_MOD>)); }
private void ReturnVm() { org.ovirt.engine.core.common.businessentities.VM entity = ((org.ovirt.engine.core.common.businessentities.VM) (getItem().getEntity())); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.ShutdownVm, new org.ovirt.engine.core.common.action.ShutdownVmParameters(entity.getId(), false), <START_MOD>Frontend<END_MOD>.<START_MOD>NULLABLE_ASYNC_CALLBACK<END_MOD>, null); }
<START_MOD>@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append(getName()).append(" {id=").append(getId()).append(", vnicProfileId=").append(getVnicProfileId()).append(", speed=").append(getSpeed()).append(", type=").append(getType()).append(", macAddress=").append(getMacAddress()).append(", plugged=").append(isPlugged()).append(", customProperties=").append(getCustomProperties()).append(", linked=").append(isLinked()).append(", vmId=").append(getVmId()).append(", vmTemplateId=").append(getVmTemplateId()).append("}"); return builder.toString(); }<END_MOD>
private static java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> createTestVmNumaNodes() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> newVmNodes = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VmNumaNode newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.generateCpuList(0, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(0); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(new org.ovirt.engine.core.common.<START_MOD>businessentities.VmNumaNode.Pinning<END_MOD>(org.ovirt.engine.core.compat.Guid.newGuid(), true, 0)); newVmNodes.add(newVmNumaNode); newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.generateCpuList(4, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(1); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(new org.ovirt.engine.core.common.<START_MOD>businessentities.VmNumaNode.Pinning<END_MOD>(org.ovirt.engine.core.compat.Guid.newGuid(), true, 1)); newVmNodes.add(newVmNumaNode); return newVmNodes; }
public static org.ovirt.engine.core.bll.adbroker.RootDSE get(org.ovirt.engine.core.ldap.LdapProviderType ldapProviderType, javax.naming.directory.Attributes rootDseRecords) throws java.lang.NumberFormatException, javax.naming.NamingException { switch (ldapProviderType) { case activeDirectory : return new org.ovirt.engine.core.bll.adbroker.ADRootDSE(rootDseRecords); case ipa : return new org.ovirt.engine.core.bll.adbroker.IPARootDSE(rootDseRecords); case rhds : return new org.ovirt.engine.core.bll.adbroker.RHDSRootDSE(rootDseRecords); case itds : return new org.ovirt.engine.core.bll.adbroker.ITDSRootDSE(rootDseRecords); case openLdap : return new org.ovirt.engine.core.bll.adbroker.DefaultRootDSE(rootDseRecords); default : return new org.ovirt.engine.core.bll.adbroker.<START_MOD>DefaultRootDSE<END_MOD>(rootDseRecords); } }
<START_MOD>public void connectStoragePool() { java.util.Map<java.lang.String, java.lang.String> storageDomains = null; org.ovirt.engine.core.compat.Guid masterDomainId = ConnectStoragePoolVDSCommand.getMasterStorageDomain(ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId()).getId(); if (isPoolWithoutMetadata()) { storageDomains = org.ovirt.engine.core.common.utils.StoragePoolDomainHelper.getStoragePoolIsoMap(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().getAllForStoragePool(ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId())); } status = ConnectStoragePoolVDSCommand.getBroker().connectStoragePool(ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), ConnectStoragePoolVDSCommand.getParameters().getVds().getVdsSpmId(), ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), masterDomainId.toString(), ConnectStoragePoolVDSCommand.getParameters().getStoragePool().getmaster_domain_version(), storageDomains); }<END_MOD>
<START_MOD>public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element elem, final T object, com.google.gwt.dom.client.NativeEvent event) { final int index = context.getIndex(); com.google.gwt.cell.client.ValueUpdater<C> valueUpdater = ((org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getFieldUpdater()) == null) ? null : new com.google.gwt.cell.client.ValueUpdater<C>() { @java.lang.Override public void update(C value) { getFieldUpdater().update(index, object, value); } }; getCell().onBrowserEvent(context, elem, org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getValue(object), org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getTooltip(object), event, valueUpdater); }<END_MOD>
@org.junit.Test public void <START_MOD>validateFailsOnNoConflictServers<END_MOD>() { cmd = spy(new org.ovirt.engine.core.bll.gluster.AddGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook = getHookEntity(); setUpMocksForAdd(true, hook); assertFalse(cmd.<START_MOD>validate<END_MOD>()); assertTrue(cmd.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().contains(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_NO_CONFLICT_SERVERS.toString())); }
public void start() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (java.lang.Object item : <START_MOD>org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.<END_MOD>getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VDS vds = ((org.ovirt.engine.core.common.businessentities.VDS) (item)); list.add(new org.ovirt.engine.core.common.action.FenceVdsActionParameters(vds.getId(), org.ovirt.engine.core.common.businessentities.FenceActionType.Start)); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.StartVds, list, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { } }, null); }
<START_MOD>@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveInterfaceDoesNotExist() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond(); bond.setSlaves(java.util.Arrays.asList("slaveA", "slaveB")); org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(host.getId()); params.setBonds(java.util.Collections.singletonList(bond)); doTestValidateModifiedBondSlaves(params, null, java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>emptyList(), java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.Network>emptyList(), new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST), ValidationResult.VALID, new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST)); }<END_MOD>
private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); doNothing().when(cmd).endStepJobAborted(any(java.lang.String.class)); doNothing().when(cmd).releaseVolumeLock(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } else { vdsReturnValue.setReturnValue(new org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity()); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.StopRemoveGlusterVolumeBricks), <START_MOD>any(org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeVDSParameters.class<END_MOD>))).thenReturn(vdsReturnValue); }
private boolean equals(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?<START_MOD>, ?, ?<END_MOD>> item1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<<START_MOD>?, ?, <END_MOD>?> item2) { if ((item1 == null) && (item2 == null)) { return true; } return item1 != null ? item1.equals(item2) : item2.equals(item1); }
<START_MOD>@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Nameable nameable1, org.ovirt.engine.core.common.businessentities.Nameable nameable2) { final java.lang.String name1 = nameable1.getName(); final java.lang.String name2 = nameable2.getName(); final org.ovirt.engine.core.bll.common.NumericSuffixNormalizer numericSuffixNormalizer = new org.ovirt.engine.core.bll.common.NumericSuffixNormalizer(); final java.util.List<java.lang.String> normalizedNames = numericSuffixNormalizer.normalize(name1, name2); return org.apache.commons.lang.ObjectUtils.compare(normalizedNames.get(0), normalizedNames.get(1)); }<END_MOD>
@java.lang.Override protected void executeCommand() { log.info( ImageTransfer entity for command '{}' org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>TransferImageCommand<END_MOD>.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>TransferImageCommand<END_MOD>.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>TransferImageCommand<END_MOD>.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>TransferImageCommand<END_MOD>.getParameters().<START_MOD>getTransferSize<END_MOD>()); imageTransferDao.save(entity); log.info( {} image <START_MOD>getImageType<END_MOD>()); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>TransferImageCommand<END_MOD>.getParameters().getImageId())) { createImage(); } else { <START_MOD>handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<END_MOD>.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>TransferImageCommand<END_MOD>.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>TransferImageCommand<END_MOD>.setSucceeded(true); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> getVmInterfaces() { if ((_vmInterfaces) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmNetworkInterfaces = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao().getAllForTemplate(<START_MOD>vmInterfacesSourceId<END_MOD>); _vmInterfaces = (vmNetworkInterfaces != null) ? vmNetworkInterfaces : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>(); } return _vmInterfaces; }
<START_MOD>public org.ovirt.engine.ui.uicommonweb.UiAction getCloseAction() { return new org.ovirt.engine.ui.uicommonweb.UiAction(getSetupNetworksModel(), "CloseSetupNetworksDialog") { @java.lang.Override protected void onActionExecuted() { sourceListModel.setWindow(null); sourceListModel.search(); } }; }<END_MOD>
boolean <START_MOD>validateStoragePoolConnectionsInHost<END_MOD>(org.ovirt.engine.core.common.businessentities.VDS vds, java.util.List<org.ovirt.engine.core.common.businessentities.storage_server_connections> connections, org.ovirt.engine.core.compat.Guid storagePoolId);
public org.ovirt.engine.core.bll.ValidationResult nameAvailable() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NAME_ALREADY_USED).when(((getProviderDao().getByName(provider.getName())) != null)); }
<START_MOD>private static void updateConsoleDevice(org.ovirt.engine.core.common.businessentities.VmBase newVmBase, boolean consoleEnabled) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateConsoleDevice(newVmBase.getId(), consoleEnabled); }<END_MOD>
<START_MOD>private void scanDisks() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getSelectedItem(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.ScanStorageForUnregisteredDisks, new org.ovirt.engine.core.common.action.StorageDomainParametersBase(storageDomain.getStoragePoolId(), storageDomain.getId())); }<END_MOD>
<START_MOD>public void setSubResources(java.util.List<org.ovirt.engine.api.rsdl.Node> subResources) { this.subResources = subResources; }<END_MOD>
public void setError(int value) { _Error = org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD>.forValue(value); }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel) (result.getState())); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = result.getReturnValue(); boolean success = (returnVal != null) && (returnVal.getSucceeded()); if (success) { storageListModel.fileConnection.setid(((java.lang.String) (returnVal.getActionReturnValue()))); <START_MOD>if ((storageModel.getRole()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Data)) { <END_MOD>checkFileDomainAttachedToDc("OnImportFile", storageListModel.fileConnection); } <START_MOD>} <END_MOD>else { postImportFileStorage(storageListModel.context, false, storageListModel.storageModel, org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().failedToRetrieveExistingStorageDomainInformationMsg()); } }
<START_MOD>public void setProvidedBy(org.ovirt.engine.core.compat.Guid providedBy) { this.providedBy = providedBy; }<END_MOD>
public boolean hasPhysMemoryToRunVM(org.ovirt.engine.core.common.businessentities.VDS curVds, org.ovirt.engine.core.common.businessentities.VM vm, int pendingMemory) { if ((curVds.getMemFree()) != null) { double vmMemRequired = (vm.<START_MOD>getVmMemSizeMb<END_MOD>()) + (<START_MOD>vmOverheadCalculator.getEnsuredOverhead(vm<END_MOD>)); double vdsMemLimit = (curVds.getMemFree()) - pendingMemory; org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug( host '{}'; free memory is : {} MB (+ {} MB pending); free swap is: {} MB, required memory is {} MB; Guest overhead {} MB curVds.getName(), vdsMemLimit, pendingMemory, curVds.getSwapFree(), vmMemRequired, <START_MOD>vmOverheadCalculator.getEnsuredOverhead(vm<END_MOD>)); if ((curVds.getSwapFree()) != null) { vdsMemLimit += curVds.getSwapFree(); } org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug( <= ??? {} vmMemRequired, vdsMemLimit); return vmMemRequired <= vdsMemLimit; } else { return false; } }
<START_MOD>@org.junit.Test public void validateCantUploadDiskAttached() { initializeSuppliedImage(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_ATTACHED_TO_VMS, "")).when(diskValidator).isDiskAttachedToAnyVm(); assertFailsWithValidateMessage(getCommand(), EngineMessage.ACTION_TYPE_FAILED_DISK_ATTACHED_TO_VMS); }<END_MOD>
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, org.ovirt.engine.ui.common.widget.ImageWithDecorator value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb<START_MOD>, java.lang.String id<END_MOD>) { if (value != null) { com.google.gwt.safehtml.shared.SafeHtml mainImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(""); com.google.gwt.safehtml.shared.SafeHtml decorateImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(""); if ((value.getImage()) != null) { mainImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(value.getImage()).getHTML()); } if ((value.getDecorator()) != null) { decorateImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(value.getDecorator()).getHTML()); } sb.append(org.ovirt.engine.ui.common.widget.table.cell.<START_MOD>DecoratedImageResourceCell<END_MOD>.template.doubleImageContainer(mainImageHtml, decorateImageHtml, value.getDecoratorPositionLeft(), value.getDecoratorPositionTop())); } }
<START_MOD>public static java.util.List<java.lang.reflect.Method> getMethods(java.lang.Class<?> clazz, boolean subResource) { java.util.List<java.lang.reflect.Method> methods = new java.util.ArrayList<>(); while (clazz != null) { for (java.lang.reflect.Method method : clazz.getDeclaredMethods()) { if (org.ovirt.engine.api.rsdl.ResourceTree.isBlacklist(method)) { continue; } if ((org.ovirt.engine.api.rsdl.ResourceTree.isSubResource(method)) ^ (!subResource)) { methods.add(method); } } clazz = clazz.getSuperclass(); } return methods; }<END_MOD>
@java.lang.Override public void init(javax.servlet.ServletConfig config) throws javax.servlet.ServletException { super.init(config); url = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().expandString(config.getInitParameter(org.ovirt.engine.core.utils.servlet.RedirectServlet.URL).replaceAll("%\\{", "\\${")); <START_MOD>url404 = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().expandString(config.getInitParameter(org.ovirt.engine.core.utils.servlet.RedirectServlet.URL404).replaceAll("%\\{", "\\${")); <END_MOD>}
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.QoS.class, to = org.ovirt.engine.core.common.businessentities.qos.QosBase.class) public static org.ovirt.engine.core.common.businessentities.qos.QosBase map(org.ovirt.engine.api.model.QoS model, org.ovirt.engine.core.common.businessentities.qos.QosBase template) { org.ovirt.engine.core.common.businessentities.qos.QosBase entity = null; if (template != null) { entity = template; } org.ovirt.engine.api.model.QosType qosType = ((model.getType()) != null) ? org.ovirt.engine.api.model.QosType.valueOf(model.getType().toUpperCase()) : entity != null ? org.ovirt.engine.api.model.QosType.valueOf(entity.getQosType().toString().toUpperCase()) : org.ovirt.engine.api.model.QosType.STORAGE; <START_MOD>if (entity == null) { entity = org.ovirt.engine.api.restapi.types.QosMapper.createNewQosEntityForQosType<END_MOD>(qosType)<START_MOD>; }<END_MOD> if (<START_MOD>model.isSetId()) { entity.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())<END_MOD>); } if (model.<START_MOD>isSetName()) { entity.setName(model.getName()); } if ((model.isSetDataCenter()) && (model.getDataCenter().isSetId())) { entity.setStoragePoolId<END_MOD>(org.ovirt.engine.api.restapi.<START_MOD>utils.GuidUtils.asGuid(model.getDataCenter().getId())); } if (model.isSetDescription()) { entity.setDescription(model.getDescription()); } org.ovirt.engine.api.restapi.<END_MOD>types.<START_MOD>QosMapper.mapQosToEntity(model, entity, qosType);<END_MOD> return entity; }
<START_MOD>@org.junit.Before public void setup() { createVDS(); mockDAOs(); mockCommand(); }<END_MOD>
@java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { eventHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(<START_MOD>( event1) -> {<END_MOD> com.google.gwt.<START_MOD>dom<END_MOD>.client.NativeEvent nativeEvent = <START_MOD>event1<END_MOD>.getNativeEvent(); if ((((nativeEvent.getKeyCode()) == KeyCodes.KEY_ENTER) && (((<START_MOD>event1<END_MOD>.getTypeInt()) == Event.ONKEYPRESS) || ((<START_MOD>event1<END_MOD>.getTypeInt()) == Event.ONKEYDOWN))) && (!(<START_MOD>event1<END_MOD>.isCanceled()))) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); <START_MOD>event1<END_MOD>.cancel(); if ((<START_MOD>event1<END_MOD>.getTypeInt()) == Event.ONKEYDOWN) { enterPressed(); } } }<START_MOD>); }<END_MOD>
<START_MOD>public java.lang.String getDurationUnit() { return durationUnit; }<END_MOD>
<START_MOD>@java.lang.Override protected void endSuccessfully() { org.ovirt.engine.core.bll.RemoveSnapshotImagesCommand.setSucceeded(true); }<END_MOD>
@java.lang.Override protected void executeCommand() { InitConnectionList(); connectStorageServer(getStoragePool().getstorage_pool_type(), getConnections())<START_MOD>; setSucceeded(true<END_MOD>); if (getNeedToConnectIso()) { connectStorageServer(getIsoType(), getIsoConnections()); } if (getNeedToConnectExport()) { connectStorageServer(getExportType(), getExportConnections()); } }
public void remove(ID id) { final T entity = entityManager.find(entityType, id); if (entity == null) { org.ovirt.engine.core.dao.jpa.AbstractJpaDao.LOG.warn( to remove non-existent {} with id = '{}' entityType.getSimpleName(), id); } else { remove(entity); } }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.businessentities.network.NetworkLabel lookupEntity(org.ovirt.engine.core.compat.Guid id) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkLabel> labels = getNetworkLabels(networkId); if (!(labels.isEmpty())) { return labels.get(0); } return null; }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.businessentities.VDS getServer(org.ovirt.engine.core.compat.Guid clusterId, java.lang.String hostnameOrIp) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> servers = getVdsDao().getAllWithIpAddress(hostnameOrIp); if ((servers.size()) > 0) { return getServerOfCluster(clusterId, servers); } servers = getVdsDao().getAllForHostname(hostnameOrIp); if ((servers.size()) > 0) { return getServerOfCluster(clusterId, servers); } return null; }<END_MOD>
<START_MOD>@org.junit.Test public void creationTimestampIsInThePast() { java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> vmPermissions = dao.getAllForEntity(org.ovirt.engine.core.dao.PermissionDAOTest.VM_ENTITY_ID); for (org.ovirt.engine.core.common.businessentities.Permissions perms : vmPermissions) { assertTrue(((perms.getCreationDate()) < (java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds(java.lang.System.currentTimeMillis())))); } }<END_MOD>
private boolean areDisksLocked(org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue) { return vdcReturnValue.getCanDoActionMessages().contains(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISKS_LOCKED.name()); }
<START_MOD>@org.junit.Test public void fence_retryWithSameProxyAndSucceed() { mockProxyHost(false); mockFenceFailure(true); org.ovirt.engine.core.common.businessentities.FenceAgent agent = createAgent(); org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue result = executor.fence(FenceActionType.Start, agent); assertTrue(result.getSucceeded()); verify(proxyLocator).findProxyHost(true, org.ovirt.engine.core.bll.FenceExecutorTest.PROXY_HOST_ID); }<END_MOD>
public static org.ovirt.engine.core.common.job.Job createJob(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.bll.CommandBase<?> command) { org.ovirt.engine.core.common.job.Job job = new org.ovirt.engine.core.common.job.Job(); job.setId(org.ovirt.engine.core.compat.Guid.newGuid()); job.setActionType(actionType); job.setDescription(org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveJobMessage(actionType, command.getJobMessageProperties())); job.setJobSubjectEntities(org.ovirt.engine.core.bll.job.ExecutionHandler.getSubjectEntities(command.getPermissionCheckSubjects())); job.setOwnerId(command.getUserId()); job.<START_MOD>setEngineSessionId(command.getContext().getEngineContext().getSessionId()); job.<END_MOD>setStatus(JobExecutionStatus.STARTED); job.setStartTime(new java.util.Date()); job.setCorrelationId(command.getCorrelationId()); return job; }
@java.lang.Override public javax.ws.rs.core.Response remove() { org.ovirt.engine.core.common.businessentities.Provider provider = org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.getProvider(this, id); org.ovirt.engine.core.common.action.ProviderParameters parameters = new org.ovirt.engine.core.common.action.ProviderParameters(provider); <START_MOD>parameters.setForce(isForce()); <END_MOD>return performAction(ActionType.RemoveProvider, parameters); }
@java.lang.Override protected void executeCommand() { <START_MOD>try { runAnsibleLvmCachePlaybook(); } catch (<END_MOD>java.<START_MOD>io<END_MOD>.<START_MOD>IOException |<END_MOD> java.lang.<START_MOD>InterruptedException<END_MOD> <START_MOD>e<END_MOD>) { <START_MOD>e<END_MOD>.<START_MOD>printStackTrace<END_MOD>(); } }
@org.junit.Test public void testConstructor() { <START_MOD>org.ovirt.engine.core.common.users.VdcUser user = mock(org.ovirt.engine.core.common.users.VdcUser.class); when(user.getUserId()).thenReturn(Guid.EVERYONE); org.ovirt.engine.core.common.action.VdcActionParametersBase paramterMock = mock(org.ovirt.engine.core.common.action.VdcActionParametersBase.class); when(paramterMock.getSessionId()).thenReturn(org.ovirt.engine.core.bll.CommandBaseTest.<END_MOD>session<START_MOD>); org.ovirt.engine.core.bll.<END_MOD>session.SessionDataContainer.getInstance().setUser(<START_MOD>org.ovirt.engine.core.bll.CommandBaseTest.<END_MOD>session, user); org.ovirt.engine.core.bll.CommandBase<org.ovirt.engine.core.common.action.VdcActionParametersBase> command = new org.ovirt.engine.core.bll.CommandBaseTest.CommandBaseDummy(paramterMock); assertEquals( user id on command user.getUserId(), command.getUserId()); assertEquals( user id on threadlocal user, org.ovirt.engine.core.utils.ThreadLocalParamsContainer.getVdcUser()); }
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__REMOVE); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__HOST_DEVICES); }
private boolean addInterfaceToProcessedList(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface) { if (ifaceByNames.containsKey(iface.getName())) { addViolation(<START_MOD>EngineMessages<END_MOD>.NETWORK_INTERFACES_ALREADY_SPECIFIED, iface.getName()); return false; } ifaceByNames.put(iface.getName(), iface); return true; }
@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); dao = prepareDAO(dbFacade.getBookmarkDao()); new_bookmark = new org.ovirt.engine.core.common.businessentities.<START_MOD>Bookmarks<END_MOD>(); java.util.Random r = new java.util.Random(java.lang.System.currentTimeMillis()); new_bookmark.setbookmark_name(("newbookmarkname" + ((r.nextInt()) % (org.ovirt.engine.core.dao.BookmarkDAOTest.BOOKMARK_MAX_RANDOM_NUMBER)))); new_bookmark.setbookmark_value("newbookmarkvalue"); existing_bookmark = dao.get(new org.ovirt.engine.core.compat.Guid("a4affabf-7b45-4a6c-b0a9-107d0bbe265e")); }
<START_MOD>@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { final java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> result = new java.util.HashMap(super.getSharedLocks()); result.put(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_BEING_UPDATED).with("vmName", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()))); return result; }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult validate(org.ovirt.engine.core.common.businessentities.VDS vds, java.lang.StringBuilder sb) { if (!(areRequiredNetworksAvailable(vds))) { sb.append("is missing networks required by VM nics ").append(org.ovirt.engine.core.common.businessentities.Entities.interfacesByNetworkName(getVmNICs()).keySet()); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_VDS_VM_NETWORKS); } return null; }<END_MOD>
@org.ovirt.engine.ui.webadmin.DefaultStringValue( <START_MOD>guests<END_MOD> <START_MOD>to<END_MOD> <START_MOD>use<END_MOD> <START_MOD>host threads as virtual CPU cores. Enabling this may be useful for less CPU-intensive workloads.<END_MOD> java.lang.String <START_MOD>clusterPopupCpuOvercommitExplanationLabel<END_MOD>();
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.common.action.VdcActionParametersBase createAddInterfaceParameter(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface editedVnic) { return new org.ovirt.engine.core.common.action.AddVmInterfaceParameters(id, editedVnic); }<END_MOD>
public org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol determineConnectionProtocol(org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel item) { if (<START_MOD>(item == null) || (<END_MOD>item.isPool())<START_MOD>)<END_MOD> { return null; } org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol selectedProtocol = item.getSelectedProtocol(); if ((((item.getAdditionalConsoleModel()) != null) && (isRDPAvailable())) && (<START_MOD>ConsoleProtocol.RDP.equals(<END_MOD>selectedProtocol<START_MOD>))) { return org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.RDP; } else if ((((item.getDefaultConsoleModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel) && (isSpiceAvailable())) && (ConsoleProtocol.SPICE<END_MOD>.equals(<START_MOD>selectedProtocol))) { return org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.SPICE<END_MOD>; } else if ((item.getDefaultConsoleModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel) { return org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.VNC; } return null; }
<START_MOD>private static void compose(java.lang.StringBuilder builder, java.lang.String key, java.lang.String value) { final char DELIMITER = ','; builder.append(key).append('=').append(value).append(DELIMITER); }<END_MOD>
<START_MOD>private void completeNetworkNames(org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Network> networkMap, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachments) { networkIdNetworkNameCompleter.completeNetworkAttachments(attachments, networkMap); }<END_MOD>
public static org.ovirt.engine.core.bll.context.CommandContext createInternalJobContext(org.ovirt.engine.core.utils.lock.EngineLock lock) { <START_MOD>return<END_MOD> org.ovirt.engine.core.bll.job.<START_MOD>ExecutionHandler.modifyContextForIntenrakJob<END_MOD>(<START_MOD>lock,<END_MOD> new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext())); }
<START_MOD>@java.lang.Override protected<END_MOD> org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity <START_MOD>fetchTaskStatusDetails<END_MOD>() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterVolumeRemoveBricksStatus, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeRemoveBricksVDSParameters(getUpServerId(clusterId), volume.getName(), org.ovirt.engine.core.bll.gluster.GetGlusterVolumeRemoveBricksStatusQuery.getParameters().getBricks(), volume.getReplicaCount())); org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity entity = <START_MOD>org.ovirt.engine.core.bll.gluster.GetGlusterVolumeRemoveBricksStatusQuery.setStartTime(<END_MOD>((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity) (returnValue.getReturnValue()))<START_MOD>); updateHostIP(<END_MOD>entity<START_MOD>); return entity.sort(<END_MOD>); }
<START_MOD>public java.lang.String get(org.ovirt.engine.core.compat.Guid vdsId, java.lang.String pluginType) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", vdsId).addValue("plugin_type", pluginType); return getCallsHandler().executeRead("GetHostProviderBinding", org.ovirt.engine.core.dao.provider.HostProviderBindingDaoImpl.rowMapper, parameterSource); }<END_MOD>
@java.lang.Override public void execute() { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.logger.fine(((this.getClass().getName()) +   Executing search syncSearch(); <START_MOD>gettimer().stop(); gettimer().setRefreshRate(gettimer().getRefreshRate()); gettimer().start(); <END_MOD>}
public void destroy() { if ((clickHandler) != null) { clickHandler.removeHandler(); clickHandler = null; } }
<START_MOD>@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder sb = new java.lang.StringBuilder(getClass().getName()); sb.append("={id='"); sb.append(getId()); sb.append("', hostId='"); sb.append(getHostId()); sb.append("', order='"); sb.append(getOrder()); sb.append("', type='"); sb.append(getType()); sb.append("', ip='"); sb.append(getIp()); sb.append("', port='"); sb.append(getPort()); sb.append("', user='"); sb.append(getUser()); sb.append("', password='"); sb.append((((getPassword()) == null) || ((getPassword().length()) < 1) ? "" : "***")); sb.append("', options='"); sb.append(getOptions()); sb.append("'}"); return sb.toString(); }<END_MOD>
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if ((ev.matchesDefinition(EntityModel.entityChangedEventDefinition)) && (sender == (getPath()))) { getPathChangedEvent().raise(this, EventArgs.<START_MOD>empty<END_MOD>); } else if ((ev.matchesDefinition(EntityModel.entityChangedEventDefinition)) && (sender == (getOverride()))) { override_EntityChanged(args); } }
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVm()) == null) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()) == null) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.VM_POOL_CANNOT_DETACH_VM_NOT_ATTACHED_TO_POOL); } if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVm().isRunningOrPaused()) || ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Unknown))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.VM_POOL_CANNOT_REMOVE_RUNNING_VM_FROM_POOL); } return true; }
<START_MOD>public java.lang.String getEncodedCertificate() { return encodedCertificate; }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__STORAGE__DOMAIN); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__ACTIVATE); }
<START_MOD>private void createSnapshot() { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = org.ovirt.engine.core.bll.CloneVmCommand.getBackend().runInternalAction(VdcActionType.CreateAllSnapshotsFromVm, buildCreateSnapshotParameters(), createContext(StepEnum.CREATING_SNAPSHOTS)); boolean callNextExplicitly = actionPerformed(vdcReturnValue, VdcActionType.CreateAllSnapshotsFromVm, buildCreateSnapshotParametersForEndAction()); if (callNextExplicitly && (org.ovirt.engine.core.bll.CloneVmCommand.getSucceeded())) { cloneVmFromSnapshot(); } }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult networkQosExistsOrNull() { return ((vnicProfile.getNetworkQosId()) == null) || ((getDbFacade().<START_MOD>getNetworkQosDao<END_MOD>().get(vnicProfile.getNetworkQosId())) != null) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_NOT_EXISTS); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (isMonitoringNeeded(<START_MOD>vdsManager.getCopyVds().getStatus()<END_MOD>)) { org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher fetcher = new org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher(vdsManager); long fetchTime = java.lang.System.nanoTime(); if (fetcher.fetch()) { getVmsMonitoring().perform(fetcher.getChangedVms(), fetchTime, vdsManager, true); processDevices(fetcher.getVdsmVms().stream(), fetchTime); } else { org.ovirt.engine.core.vdsbroker.monitoring.PollVmStatsRefresher.log.info( to fetch vms info for host '{}' - skipping VMs monitoring. vdsManager.getVdsName()); } } }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( must approve the action by clicking on this checkbox. java.lang.String youMustApproveTheActionByClickingOnThisCheckboxInvalidReason();
<START_MOD>public boolean getVdsGroupSupportsVirtSerice() { return this.vdsGroupVirtSerice; }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("Tuned Profile") java.lang.String tunedProfileLabel();<END_MOD>
<START_MOD>public void setBytesWrite(java.lang.Integer bytesWrite) { this.bytesWrite = bytesWrite; }<END_MOD>
@org.junit.Test public void someAddedStorageConnectionsAreNotAnIscsi() { org.ovirt.engine.core.common.businessentities.IscsiBond iscsiBond = createIscsiBond("First", org.ovirt.engine.core.compat.Guid.newGuid()); java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> conns = new java.util.ArrayList<>(); conns.add(createStorageConnection()); doReturn(conns).when(storageServerConnectionDao).getConnectableStorageConnectionsByStorageType(iscsiBond.getStoragePoolId(), StorageType.ISCSI); iscsiBond.getStorageConnectionIds().add(conns.get(0).<START_MOD>geIid<END_MOD>()); iscsiBond.getStorageConnectionIds().add(org.ovirt.engine.core.compat.Guid.newGuid().toString()); org.ovirt.engine.core.bll.ValidationResult res = validator.validateAddedStorageConnections(iscsiBond); assertEquals(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTIONS_CANNOT_BE_ADDED_TO_ISCSI_BOND, res.getMessage()); assertEquals(1, res.getVariableReplacements().size()); assertEquals((   + (iscsiBond.getStorageConnectionIds().get(1).toString())), res.getVariableReplacements().get(0)); }
@org.junit.Before public void setUpContainer() { when(engineSessionDao.remove(any(java.lang.Long.class))).thenReturn(1); when(ssoSessionValidator.isSessionValid(anyString())).thenReturn(true); <START_MOD>when(ssoSessionUtils.isSessionInUse(anyString())).thenReturn(false); <END_MOD>org.ovirt.engine.core.common.businessentities.aaa.DbUser user = mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); container.<START_MOD>setSSOSessionUtils(ssoSessionUtils); container.<END_MOD>setSSOSessionValidaor(ssoSessionValidator); container.setUser(org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID, user); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.DbUser.class, to = org.ovirt.engine.api.model.User.class) public static org.ovirt.engine.api.model.User map(org.ovirt.engine.core.common.businessentities.DbUser entity, org.ovirt.engine.api.model.User template) { org.ovirt.engine.api.model.User model = (template != null) ? template : new org.ovirt.engine.api.model.User(); model.setName(entity.getname()); model.setUserName(entity.getusername()); model.setId(entity.getuser_id().toString()); model.setLastName(entity.getsurname()); model.setEmail(entity.getemail()); model.setDepartment(entity.getdepartment()); if ((entity.getgroups()) != null) { model.setGroups(new org.ovirt.engine.api.model.Groups()); <START_MOD>if ((entity.getgroups().trim().length()) > 0) { <END_MOD>for (java.lang.String name : entity.getgroups().split(",")) { org.ovirt.engine.api.model.Group group = new org.ovirt.engine.api.model.Group(); group.setName(name); model.getGroups().getGroups().add(group); } } <START_MOD>} <END_MOD>if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(entity.getdomain()))) { org.ovirt.engine.api.model.Domain dom = new org.ovirt.engine.api.model.Domain(); dom.setName(entity.getdomain()); dom.setId(new org.ovirt.engine.core.compat.NGuid(entity.getdomain().getBytes(), true).toString()); model.setDomain(dom); } return model; }
@java.lang.Override public org.ovirt.engine.core.aaa.DirectoryGroup <START_MOD>findGroupById<END_MOD>(<START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String<END_MOD> id) { org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapReturnValueBase ldapResult = broker.runAdAction(AdActionType.GetAdGroupByGroupId, new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapSearchByIdParameters(getName(), <START_MOD>new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.IdType(<END_MOD>id<START_MOD>)<END_MOD>)); org.ovirt.engine.core.common.businessentities.LdapGroup ldapGroup = ((org.ovirt.engine.core.common.businessentities.LdapGroup) (ldapResult.getReturnValue())); return mapGroup(ldapGroup); }
@org.junit.Test public void testGetTreeForEntityWithRoleTypeFilteredWithNoPermissions() { java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> result = dao.getTreeForEntity(org.ovirt.engine.core.dao.PermissionDAOTest.STORAGE_ENTITY_ID, VdcObjectType.Storage, org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID, <START_MOD>org.ovirt.engine.core.dao.UNPRIVILEGED_USER_SESSION_ID, <END_MOD>true); org.ovirt.engine.core.dao.PermissionDAOTest.assertInvalidGetPermissionList(result); }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeGeoRepSessionVDSParameters parameter = org.ovirt.engine.core.vdsbroker.gluster.<START_MOD>GetGlusterVolumeGeoRepSessionStatusVDSCommand<END_MOD>.getParameters(); result = org.ovirt.engine.core.vdsbroker.gluster.<START_MOD>GetGlusterVolumeGeoRepSessionStatusVDSCommand<END_MOD>.getBroker().glusterVolumeGeoRepStatusDetail(parameter.getVolumeName(), parameter.getSlaveHost(), parameter.getSlaveVolume()); org.ovirt.engine.core.vdsbroker.gluster.<START_MOD>GetGlusterVolumeGeoRepSessionStatusVDSCommand<END_MOD>.proceedProxyReturnValue(); if (org.ovirt.engine.core.vdsbroker.gluster.<START_MOD>GetGlusterVolumeGeoRepSessionStatusVDSCommand<END_MOD>.getVDSReturnValue().getSucceeded()) { setReturnValue(result.getGeoRepDetails()); } }
<START_MOD>public void setGuestOsInfo(org.ovirt.engine.core.common.businessentities.VmGuestOsInfoDynamic guestOsInfo) { this.guestOsInfo = guestOsInfo; }<END_MOD>
private void UpdateVmNetworks() { if (!(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getVdsGroupId().equals(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getvds_group_id()))) { java.util.List<org.ovirt.engine.core.common.businessentities.Network> networks = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDao().getAllForCluster(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getvds_group_id()); java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> interfaces = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao().getAllForVm(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getId()); for (final org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : interfaces) { org.ovirt.engine.core.common.businessentities.Network net = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(networks, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.Network>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.Network n) { return <START_MOD>n.getname().equals(<END_MOD>iface.getNetworkName()); } }); if (net == null) { iface.setNetworkName(null); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao().update(iface); } } } }
@java.lang.Override public void template_SelectedItemChanged() { super.template_SelectedItemChanged(); org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel().getTemplate().getSelectedItem(); if (template == null) { return; } setupWindowModelFrom(template); <START_MOD>updateOSValues(); <END_MOD>updateHostPinning(template.getMigrationSupport()); doChangeDefautlHost(template.getDedicatedVmForVds()); }
@org.junit.Test public void canDoChangeComment() { sd.setComment(org.apache.commons.lang.StringUtils.reverse(sd.getComment())); org.ovirt.engine.core.bll.<START_MOD>ValidateTestUtils<END_MOD>.<START_MOD>runAndAssertValidateSuccess<END_MOD>(cmd); }
<START_MOD>public static void assertNoRedundantKeys(java.io.File file, java.lang.Class<? extends java.lang.Enum>... template) throws java.io.IOException { org.ovirt.engine.core.utils.EnumTranslationProperties props = new org.ovirt.engine.core.utils.EnumTranslationProperties(template); try (java.io.InputStream is = new java.io.FileInputStream(file)) { props.load(is); } catch (org.ovirt.engine.core.utils.MissingEnumTranslationException exception) { fail(((("Check for redundant keys in " + (file.getAbsolutePath())) + " failed: ") + (exception.getMessage()))); } }<END_MOD>
public<START_MOD> static<END_MOD> org.ovirt.engine.api.model.RSDL loadRsdl(org.ovirt.engine.core.common.mode.ApplicationMode applicationMode) throws java.io.IOException { java.<START_MOD>lang<END_MOD>.<START_MOD>String<END_MOD> <START_MOD>fileName<END_MOD> = (applicationMode == (org.ovirt.engine.core.common.mode.ApplicationMode.<START_MOD>AllModes<END_MOD>)) ? <START_MOD>RsdlIOManager<END_MOD>.<START_MOD>RSDL_FILE_NAME : RsdlIOManager<END_MOD>.<START_MOD>GLUSTER_RSDL_FILE_NAME; java.io.InputStream rsdlAsStrem = <END_MOD>org.ovirt.engine.api.rsdl.<START_MOD>RsdlIOManager<END_MOD>.<START_MOD>loadAsStream<END_MOD>(<START_MOD>fileName<END_MOD>); return javax.xml.bind.JAXB.unmarshal(<START_MOD>rsdlAsStrem<END_MOD>, org.ovirt.engine.api.model.RSDL.class); }
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> getVolumesByOptionAndVolumeType(org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status, java.lang.String optionKey, java.lang.String optionValue, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType volumeType) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = getCallsHandler().executeReadList("GetGlusterVolumesByOptionAndVolumeType", org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoDbFacadeImpl.volumeRowMapper, getCustomMapSqlParameterSource().addValue("cluster_id", clusterId).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(status)).addValue("option_key", optionKey).addValue("option_val", optionValue).addValue("vol_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volumeType))); fetchRelatedEntities(volumes); return volumes; }<END_MOD>
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; if ((getClass()) != (obj.getClass())) return false; org.ovirt.engine.core.common.scheduling.ClusterPolicy other = ((org.ovirt.engine.core.common.scheduling.ClusterPolicy) (obj)); if ((<START_MOD>selector) == null) { if ((other.selector) != null) return false; } else if (!(selector.equals(other.selector))) return false; if ((<END_MOD>balance) == null) { if ((other.balance) != null) return false; } else if (!(balance.equals(other.balance))) return false; if ((defaultPolicy) != (other.defaultPolicy)) return false; if ((description) == null) { if ((other.description) != null) return false; } else if (!(description.equals(other.description))) return false; if ((filterPositionMap) == null) { if ((other.filterPositionMap) != null) return false; } else if (!(filterPositionMap.equals(other.filterPositionMap))) return false; if ((filters) == null) { if ((other.filters) != null) return false; } else if (!(filters.equals(other.filters))) return false; if ((functions) == null) { if ((other.functions) != null) return false; } else if (!(functions.equals(other.functions))) return false; if ((id) == null) { if ((other.id) != null) return false; } else if (!(id.equals(other.id))) return false; if ((locked) != (other.locked)) return false; if ((name) == null) { if ((other.name) != null) return false; } else if (!(name.equals(other.name))) return false; if ((parameterMap) == null) { if ((other.parameterMap) != null) return false; } else if (!(parameterMap.equals(other.parameterMap))) return false; return true; }
public void ensureColumnPresent(com.google.gwt.user.cellview.client.Column<T, ?> column, java.lang.String headerText, boolean present, java.lang.String width) { <START_MOD>ensureColumnPresent<END_MOD>(column, <START_MOD>new org.ovirt.engine.ui.common.widget.table.header.SafeHtmlHeader(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(<END_MOD>headerText<START_MOD>)), present, null<END_MOD>); }
public void setStateless(boolean value) { vmStatic.<START_MOD>setIsStateless<END_MOD>(value); }
<START_MOD>private void testValidateQosNotPartiallyConfigured(boolean networkAttachment1HasQos, boolean networkAttachment2HasQos, org.hamcrest.Matcher<org.ovirt.engine.core.bll.ValidationResult> matcher) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface baseNic = createNic("baseNic"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic1 = createVlanNic(baseNic, "vlanNic1", 10); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic2 = createVlanNic(baseNic, "vlanNic2", 11); org.ovirt.engine.core.common.businessentities.network.Network network1 = createNetworkWithName("network1"); org.ovirt.engine.core.common.businessentities.network.Network network2 = createNetworkWithName("network2"); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment1 = createNetworkAttachment(network1, baseNic); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment2 = createNetworkAttachment(network2, baseNic); org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = createHostNetworkQos(10, 10, 10); if (networkAttachment1HasQos) { networkAttachment1.setHostNetworkQos(qos); } if (networkAttachment2HasQos) { networkAttachment2.setHostNetworkQos(qos); } java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> networkAttachments = java.util.Arrays.asList(networkAttachment1, networkAttachment2); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().addNetworks(network1, network2).addExistingInterfaces(baseNic, vlanNic1, vlanNic2).build(); assertThat(validator.validateQosNotPartiallyConfigured(networkAttachments), matcher); }<END_MOD>
protected byte[] runHttpMethod(org.ovirt.engine.core.bll.provider.BaseProviderProxy.HttpMethodType httpMethod, java.lang.String contentType, java.lang.String body, java.net.HttpURLConnection connection) { byte[] result = null; try { connection.setRequestProperty("Content-Type", contentType); connection.setDoInput(true); connection.setDoOutput((httpMethod != (org.ovirt.engine.core.bll.provider.BaseProviderProxy.HttpMethodType.GET))); connection.setRequestMethod(httpMethod.toString()); if (body != null) { byte[] bytes = body.getBytes(java.nio.charset.StandardCharsets.UTF_8); connection.setRequestProperty(<START_MOD>java.lang.String.valueOf(bytes.length), <END_MOD>"Content-Length"<START_MOD>); try (java.io.OutputStream outputStream = connection.getOutputStream()) { outputStream.write(bytes); } } result = getResponse(connection); } catch (javax.net.ssl.SSLException e) { throw<END_MOD> new <START_MOD>org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_SSL_FAILURE, e.getMessage()); } catch<END_MOD> (java.io.<START_MOD>IOException e) { org.ovirt.engine.core.bll.provider.BaseProviderProxy.handleException(e); } finally { if (connection != null) { connection.disconnect(); } } return<END_MOD> result<START_MOD>; }<END_MOD>
<START_MOD>protected static org.ovirt.engine.core.compat.Guid getGuidDefaultNull(java.sql.ResultSet resultSet, java.lang.String columnName) throws java.sql.SQLException { return org.ovirt.engine.core.dao.BaseDAODbFacade.getGuid(resultSet, columnName, null); }<END_MOD>
@java.lang.Override protected void copyVmDevices() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmDevice>(vmFromConfiguration.getVmUnamagedDeviceList()); devices.addAll(vmFromConfiguration.getManagedVmDeviceMap().values()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.copyVmDevices(getVmIdFromSnapshot(), org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmId(), org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVm(), org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVm().getStaticData(), true, devices, <START_MOD>srcDiskToTargetDiskMapping<END_MOD>, _vmInterfaces, org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters().isSoundDeviceEnabled(), org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters().isConsoleEnabled()); }
@org.junit.Test public void vmNetworkWithVlanNetworkDenied() { org.ovirt.engine.core.common.businessentities.network.Network net1 = createNetwork("net1"); org.ovirt.engine.core.common.businessentities.network.Network net2 = createNetwork("net2"); net2.setVlanId(100); mockExistingNetworks(net1, net2); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic("nic0", null); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic = createVlan(nic.getName(), net2.getVlanId(), net2.getName()); mockExistingIfaces(nic, vlanNic); nic.setNetworkName(net1.getName()); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(vlanNic, nic)); validateAndExpectViolation(helper, <START_MOD>EngineMessages<END_MOD>.NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK, nic.getName()); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Permission java.lang.String systemPermissionTitle();
@java.lang.Override public javax.ws.rs.core.Response performRemove(java.lang.String id) { org.ovirt.engine.core.common.businessentities.network.Network entity = lookupNetwork(asGuidOr404(id)); if (entity == null) { notFound(); return null; } return performAction(removeAction, <START_MOD>new org.ovirt.engine.core.common.action.RemoveNetworkParameters<END_MOD>(entity<START_MOD>.getId()<END_MOD>)); }
<START_MOD>public static org.ovirt.engine.core.common.utils.CpuVendor fromFlags(java.lang.String flags) { for (org.ovirt.engine.core.common.utils.CpuVendor vendor : org.ovirt.engine.core.common.utils.CpuVendor.values()) { if (flags.contains(vendor.flag)) { return vendor; } } throw new java.lang.RuntimeException(("Unknow processor vendor. Flags: " + flags)); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult isMacAssignableValidator() { java.lang.Boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); boolean macIsAlreadyUsed = macPool.isMacInUse(macAddress); boolean illegalDuplicateMacUsage = macIsAlreadyUsed && (!allowDupMacs); return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.NETWORK_MAC_ADDRESS_IN_USE).when(illegalDuplicateMacUsage); }<END_MOD>
<START_MOD>@java.lang.SuppressWarnings("unchecked") <END_MOD>@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.userportal.IUserPortalListModel model) { this.model = model; <START_MOD>editCheckBoxes<END_MOD>(model<START_MOD>, ctrlAltDel,<END_MOD> enableUsbAutoshare<START_MOD>,<END_MOD> openInFullScreen<START_MOD>,<END_MOD> useLocalDrives<START_MOD>,<END_MOD> <START_MOD>wanEffectsAll, wanEffectsAnimation, wanEffectsWallpaper, wanEffectsFontSmooth, wanEnabled<END_MOD>); }
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.EntityModel getSysprepScript() { return privateSysprepScript; }<END_MOD>
public java.util.Map<java.lang.String, java.lang.Object> <START_MOD>glusterVolumeGeoRepSessionStart<END_MOD>(java.lang.String volumeName, java.lang.String remoteHost, java.lang.String remoteVolumeName<START_MOD>, java.lang.String remoteUserName, java.lang.Boolean force<END_MOD>);
private void newTemplate() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (getSelectedItem())); if (vm == null) { return; } if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewTemplateVmModelBehavior(vm)); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newTemplateTitle()); model.setHashName("new_template");<START_MOD> model.setHelpTag(model.getHashName(),   > Make Template<END_MOD> model.setIsNew(true); model.getVmType().setSelectedItem(vm.getVmType()); model.initialize(getSystemTreeSelectedItem()); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnNewTemplate", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); model.getIsHighlyAvailable().setEntity(vm.getStaticData().isAutoStartup()); }
<START_MOD>public java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> getImages() { return images; }<END_MOD>
<START_MOD>public java.lang.Boolean getSpiceFileXferEnabled() { return spiceFileXferEnabled; }<END_MOD>
public java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSetupNetworksLock(org.ovirt.engine.core.compat.Guid hostId) { return java.util.Collections.singletonMap(((LockingGroup.HOST_NETWORK.name()) + (hostId.toString())), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.HOST_NETWORK, EngineMessage.<START_MOD>ACTION_TYPE_FAILED_SETUP_NETWORKS_OR_REFRESH_OR_MIGRATION_IN_PROGRESS<END_MOD>)); }
<START_MOD>private boolean isProxyHostNeeded() { return ProviderType.ESXI.equals(type); }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult validateCinderDiskLimits() { return validate(new java.util.concurrent.Callable<org.ovirt.engine.core.bll.ValidationResult>() { @java.lang.Override public org.ovirt.engine.core.bll.ValidationResult call() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageMap = getRelatedCinderDisksToStorageDomainMap(); java.util.Collection<org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageCollection = relatedCinderDisksByStorageMap.values(); for (org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy relatedCinderDisksByStorage : relatedCinderDisksByStorageCollection) { com.woorea.openstack.cinder.model.Limits limits = relatedCinderDisksByStorage.getProxy().getLimits(); int numOfDisks = relatedCinderDisksByStorage.getCinderDisks().size(); if (isLimitExceeded(limits, VolumeClassification.Volume, numOfDisks)) { java.lang.String storageName = getStorageDomainDao().get(relatedCinderDisksByStorage.getStorageDomainId()).getStorageName(); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.CANNOT_ADD_CINDER_DISK_VOLUME_LIMIT_EXCEEDED, java.lang.String.format( %d limits.getAbsolute().getMaxTotalVolumes()), java.lang.String.format( %s storageName)); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; } }); }
private void updateItems(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.AuditLog> source) { if ((getItems()) == null) { return; } if (!(source.isEmpty())) { org.ovirt.engine.ui.frontend.communication.RefreshActiveModelEvent.fire(this, false); } java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog> list = ((java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog>) (getItems())); java.util.Collections.sort(source, new org.ovirt.engine.ui.uicommonweb.Linq.AuditLogComparer()); for (org.ovirt.engine.core.common.businessentities.AuditLog item : source) { if ((list.size()) == (getSearchPageSize())) { list.remove(((list.size()) - 1)); } list.add(0, item); } getItemsChangedEvent().raise(this, EventArgs.<START_MOD>empty<END_MOD>); setLastEvent(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(list)); if ((org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(list)) == null) { onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("LastEvent")); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.StorageDomain get(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { return getCallsHandler().executeRead("Getstorage_domains_By_id", org.ovirt.engine.core.dao.<START_MOD>StorageDomainDAOImpl<END_MOD>.StorageDomainRowMapper.instance, getCustomMapSqlParameterSource().addValue("id", id).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }
@org.junit.Test public void testUpdateOvfDiskNotSupported() { org.ovirt.engine.core.common.businessentities.storage.DiskImage updatedDisk = createDiskImage(); updatedDisk.setReadOnly(true); updatedDisk.setDiskInterface(DiskInterface.IDE); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskFromDB = createDiskImage(); diskFromDB.setReadOnly(false); diskFromDB.setDiskInterface(DiskInterface.IDE); diskFromDB.setContentType(DiskContentType.OVF_STORE); when(diskDao.get(diskImageGuid)).thenReturn(diskFromDB); initializeCommand(new org.ovirt.engine.core.common.action.UpdateVmDiskParameters(vmId, diskImageGuid, updatedDisk)); when(diskValidator.isDiskUsedAsOvfStore()).thenCallRealMethod(); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_OVF_DISK_NOT_SUPPORTED); }
<START_MOD>@javax.ws.rs.POST @org.jboss.resteasy.annotations.providers.jaxb.Formatted @javax.ws.rs.Consumes({ org.ovirt.engine.api.resource.ApiMediaType.APPLICATION_XML, org.ovirt.engine.api.resource.ApiMediaType.APPLICATION_JSON, org.ovirt.engine.api.resource.ApiMediaType.APPLICATION_X_YAML }) @org.ovirt.engine.api.model.Actionable @javax.ws.rs.Path("remove") public javax.ws.rs.core.Response remove(org.ovirt.engine.api.model.Action action);<END_MOD>
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD> object) { return object.getname(); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( to copy Template between Storage Domains java.lang.String allowToCopyTemplateBetweenStorageDomainsRoleTreeTooltip();
<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getExternalVmList(java.lang.String url, java.lang.String username, java.lang.String password);<END_MOD>
<START_MOD>private void markExpiredCommandsAsFailure() { long maxTime = org.ovirt.engine.core.compat.DateTime.getNow().addMinutes(((-1) * (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.CoCoCommandLifeInMinutes)))).getTime(); java.util.Iterator<java.util.Map.Entry<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.tasks.CommandExecutor.CommandContainer>> iterator = cmdCallbackMap.entrySet().iterator(); while (iterator.hasNext()) { java.util.Map.Entry<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.tasks.CommandExecutor.CommandContainer> entry = iterator.next(); java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds = coco.getChildCommandIds(entry.getKey()); if (childCmdIds.isEmpty()) { markExpiredCommandAsFailure(entry.getKey(), maxTime); } else { for (org.ovirt.engine.core.compat.Guid childId : childCmdIds) { markExpiredCommandAsFailure(childId, maxTime); } } } }<END_MOD>
@org.junit.Test public void NameLengthIsTooLong() { when(host.getName()).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(((org.ovirt.engine.core.bll.validator.HostValidatorTest.HOST_NAME_SIZE) * 2))); assertThat(validator.nameLengthIsLegal(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG)); }
@java.lang.Override public void selectSpiceImplementation(org.ovirt.engine.ui.uicommonweb.models.vms.<START_MOD>SpiceConsoleModel<END_MOD>.<START_MOD>ClientConsoleModeSpice<END_MOD> consoleMode) { switch (consoleMode) { case Native : spiceAutoImplRadioButton.asRadioButton().setValue(false); spicePluginImplRadioButton.asRadioButton().setValue(false); spiceNativeImplRadioButton.asRadioButton().setValue(true); break; case Plugin : spiceAutoImplRadioButton.asRadioButton().setValue(false); spicePluginImplRadioButton.asRadioButton().setValue(true); spiceNativeImplRadioButton.asRadioButton().setValue(false); break; default : spiceAutoImplRadioButton.asRadioButton().setValue(true); spicePluginImplRadioButton.asRadioButton().setValue(false); spiceNativeImplRadioButton.asRadioButton().setValue(false); break; } }
protected org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer> connect(org.ovirt.engine.core.compat.Guid vdsId) { java.util.HashMap<java.lang.String, java.lang.String> result = ((java.util.HashMap<java.lang.String, java.lang.String>) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ConnectStorageServer, new org.ovirt.engine.core.common.vdscommands.<START_MOD>StorageServerConnectionVDSCommandParameters<END_MOD>(vdsId, org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getParameters().getStorageServerConnection().getstorage_type(), new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>(java.util.Arrays.asList(new org.ovirt.engine.core.common.businessentities.StorageServerConnections[]{ org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getConnection() })))).getReturnValue())); return new org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>(org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getParameters().getStorageServerConnection().getstorage_type()).isConnectSucceeded(result, java.util.Arrays.asList(org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getConnection())), java.lang.Integer.parseInt(result.values().iterator().next())); }
private void initStorageDomainDiscardAfterDelete() { if ((org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().getDiscardAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().setDiscardAfterDelete(getDefaultDiscardAfterDelete()); } }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if <START_MOD>(<END_MOD>(!(org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterSnapshot(org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup().getCompatibilityVersion()))) <START_MOD>&& (!(org.ovirt.engine.core.bll.utils.ClusterUtils.getInstance().isFeatureSupportedAsAdditionalFeature(org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup().getId(), ClusterUtils.FEATURE_GLUSTER_SNAPSHOT)))) <END_MOD>{ return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VOLUME_SNAPSHOT_NOT_SUPPORTED); } return true; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( E-Mail address java.lang.String invalidEmailAddressInvalidReason();
<START_MOD>private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface gatherBondedInterfaces(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel model, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, java.util.Iterator<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> i) { while (((nic != null) && ((nic.getBondName()) != null)) && (nic.getBondName().equals(model.getBondName()))) { model.getInterfaces().add(hostInterfaceFromNic(nic)); nic = (i.hasNext()) ? i.next() : null; } return nic; }<END_MOD>
@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { return; } super.syncSearch(); org.ovirt.engine.core.common.businessentities.VmTemplate template = getEntity(); super.syncSearch(VdcQueryType.GetStorageDomainsByVmTemplateId, new org.ovirt.engine.core.common.queries.IdQueryParameters(template.getId())); }
@java.lang.Override protected void setActionMessageParameters() { if (!(org.apache.commons.lang.StringUtils.isEmpty(cdImagePath))) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__CHANGE_CD); } else { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__EJECT_CD); } addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__VM); }
public org.ovirt.engine.core.bll.ValidationResult validBond(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { if (!(java.lang.Boolean.TRUE.equals(iface.getBonded()))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } int slavesCount = getSlaveCount(nics); return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.NETWORK_BONDS_INVALID_SLAVE_COUNT, (   + slavesCount)).when((slavesCount < 2)); }
@org.junit.experimental.theories.Theory public void testConcreateCreateTaskBackwardsComaptibility(org.ovirt.engine.core.bll.CommandBase<? extends org.ovirt.engine.core.common.action.VdcActionParametersBase> cmd) { org.ovirt.engine.core.common.action.VdcActionParametersBase params = cmd.getParameters(); params.<START_MOD>setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.VM, <END_MOD>org.ovirt.engine.core.compat.Guid.NewGuid())<START_MOD>)<END_MOD>; params.setParentCommand(org.ovirt.engine.core.utils.RandomUtils.instance().nextEnum(org.ovirt.engine.core.common.action.VdcActionType.class)); params.setParentParameters(params); org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo info = org.ovirt.engine.core.bll.BackwardCompatibilityTaskCreationTest.nextAsyncTaskCreationInfo(); org.ovirt.engine.core.bll.SPMAsyncTask spmAsyncTask = cmd.concreteCreateTask(Guid.Empty, info, cmd.getParameters().getParentCommand()); assertEquals( storage pool ID info.getStoragePoolID(), spmAsyncTask.getStoragePoolID()); assertEquals( task ID info.getVdsmTaskId(), spmAsyncTask.getVdsmTaskId()); assertEquals( task result AsyncTaskResultEnum.success, spmAsyncTask.getLastTaskStatus().getResult()); assertEquals( task status AsyncTaskStatusEnum.init, spmAsyncTask.getLastTaskStatus().getStatus()); assertEquals( task state AsyncTaskState.Initializing, spmAsyncTask.getState()); assertTrue( task type (spmAsyncTask instanceof org.ovirt.engine.core.bll.EntityAsyncTask)); }
@org.junit.Test public void providerIsNotSet() throws java.lang.Exception { validator = new org.ovirt.engine.core.bll.provider.ProviderValidator(null); assertThat(validator.providerIsSet(), failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST)); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getExportCommand())) { export(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().exportTemplateTitle()); } else if ("Cancel".equals(command.getName())) { cancel(); } else if ("OnExport".equals(command.getName())) { onExport(); } else if ("OnSave".equals(command.getName())) { onSave(); } else if ("OnRemove".equals(command.getName())) { onRemove(); } <START_MOD>else if ("OnExportNoTemplates".equals(command.getName())) { onExportNoTemplates(); } else if ("CancelConfirmation".equals(command.getName())) { cancelConfirmation(); } }<END_MOD>
@java.lang.Override protected void EndSuccessfully() { setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getVmTemplateId()); for (org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getImagesParameters()) { org.ovirt.engine.core.bll.Backend.getInstance().EndAction(VdcActionType.CreateImageTemplate, p); } <START_MOD>endDefaultOperations<END_MOD>(); org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded(true); }
private void createConfigurationProvider() throws org.ovirt.engine.core.domains.ManageDomainsResult { <START_MOD>java.lang.String engineConfigProperties = createTempPropFile(); <END_MOD>try { java.lang.String engineConfigExecutable = utilityConfiguration.getEngineConfigExecutablePath(); java.lang.String adUserName = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.AdUserName); java.lang.String domainName = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.DomainName); java.lang.String ldapSecurityAuthentication = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LDAPSecurityAuthentication); java.lang.String adUserPassword = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.AdUserPassword); java.lang.String adUserId = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.AdUserId); java.lang.String ldapServers = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LdapServers); java.lang.String ldapProviderTypes = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LDAPProviderTypes); java.lang.String ldapPort = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LDAPServerPort); if (ldapPort == null) { ldapPort = org.ovirt.engine.core.domains.ManageDomains.DEFAULT_LDAP_SERVER_PORT; } java.lang.String changePasswordUrl = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.ChangePasswordUrl); if (changePasswordUrl == null) { changePasswordUrl = ""; } configurationProvider = new org.ovirt.engine.core.domains.ConfigurationProvider(adUserName, adUserPassword, domainName, ldapSecurityAuthentication, ldapServers, adUserId, ldapProviderTypes, utilityConfiguration.getEngineConfigExecutablePath(), engineConfigProperties, ldapPort, changePasswordUrl); } catch (java.lang.Throwable e) { throw new org.ovirt.engine.core.domains.ManageDomainsResult(ManageDomainsResultEnum.FAILED_READING_CURRENT_CONFIGURATION, e.getMessage()); } }
@org.junit.Before public void setup() { cluster1 = createCluster(); cluster2 = createCluster(); when(clusterDao.getWithoutMigratingVms()).thenReturn(java.util.Arrays.asList(cluster1, cluster2)); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster1))).thenReturn(vm1); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster2))).thenReturn(vm2); <START_MOD>when(arem.getExecutor()).thenReturn(java.util.concurrent.Executors.newScheduledThreadPool(1)); <END_MOD>arem.wakeup(); }
@java.lang.Override protected void doSetCallback(com.google.gwt.http.client.RequestBuilder rb, final com.google.gwt.http.client.RequestCallback callback) { rb.setCallback(new com.google.gwt.http.client.RequestCallback() { @java.lang.Override public void onResponseReceived(com.google.gwt.http.client.Request request, com.google.gwt.http.client.Response response) { java.lang.String tokenValue = response.getHeader("OVIRT-SSO-TOKEN"); if (<START_MOD>(<END_MOD>tokenValue != null) <START_MOD>&& (!("".equals(tokenValue)))) <END_MOD>{ org.ovirt.engine.ui.frontend.communication.SSOTokenChangeEvent.fire(eventBus, tokenValue); } callback.onResponseReceived(request, response); } @java.lang.Override public void onError(com.google.gwt.http.client.Request request, java.lang.Throwable exception) { callback.onError(request, exception); } }); }
<START_MOD>public void setDurationUnit(java.lang.String durationUnit) { this.durationUnit = durationUnit; }<END_MOD>
protected boolean checkUserAndGroupsAuthorization(org.ovirt.engine.core.compat.Guid userId, java.util.HashSet<org.ovirt.engine.core.compat.Guid> groupIds, final org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup, final org.ovirt.engine.core.compat.Guid object, final org.ovirt.engine.core.common.VdcObjectType type, final boolean ignoreEveryone) { <START_MOD>if (log.isDebugEnabled()) { log.debugFormat( whether user {0} has permission on {1} groups with {2} action group on {3} object with {4} userId, org.apache.commons.lang.StringUtils.join(groupIds, ","), actionGroup, object, type.name()); } <END_MOD>final org.ovirt.engine.core.compat.Guid permId = org.ovirt.engine.core.bll.CommandBase.getPermissionDAO().getEntityPermissionsForUserAndGroups(userId, org.apache.commons.lang.StringUtils.join(groupIds, ","), actionGroup, object, type, ignoreEveryone); if (permId != null) { if (log.isDebugEnabled()) { log.debugFormat( permission {0} for user when running {1}, on {2} with id {3} permId, getActionType(), type.getVdcObjectTranslation(), object); } return true; } if (log.isDebugEnabled()) { log.debugFormat( permission found for user when running action {0}, on object {1} for action group {2} with id {3}. getActionType(), type.getVdcObjectTranslation(), actionGroup, object); } return false; }
private void updateSnapshotIdOnShareableChange(org.ovirt.engine.core.common.businessentities.storage.Disk oldDisk, org.ovirt.engine.core.common.businessentities.storage.Disk newDisk) { if (((oldDisk.isShareable()) != (newDisk.isShareable())) && ((oldDisk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE))) { org.ovirt.engine.core.common.businessentities.DiskImage oldDiskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (oldDisk)); org.ovirt.engine.core.compat.Guid vmSnapshotId = (isUpdatedToShareable(oldDisk, newDisk)) ? null : org.ovirt.engine.core.bll.UpdateVmDiskCommand.getSnapshotDao().getId(org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVmId(), SnapshotType.ACTIVE); oldDiskImage.setVmSnapshotId(vmSnapshotId); } }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) {<START_MOD> boolean discardAfterDelete = getStorageDomainDao().get(guids.get(0)).isDiscardAfterDelete();<END_MOD> return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), <START_MOD>discardAfterDelete, <END_MOD>false)); }
<START_MOD>private void updateModel(org.ovirt.engine.ui.uicommonweb.models.VmErrataCountModel model) { if ((currentSelectedVm) != null) { model.setGuid(currentSelectedVm.getId()); model.setName(currentSelectedVm.getName()); model.runQuery(currentSelectedVm.getId()); } }<END_MOD>
@java.lang.Override public void onFailure(final java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.queries.VdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase>> operationList, final java.lang.Throwable caught) { try { if (ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ( to execute runMultipleQueries:   + caught), caught); org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult(queryTypeList, queryParamsList, null); failureEventHandler(caught); callback.executed(f); } finally { org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent.fire(this, state); <START_MOD>} }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( to create Storage Domain java.lang.String allowToCreateStorageDomainRoleTreeTooltip();
private void setupParentExpectations() { volumeResourceMock = control.createMock(org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumeResource.class); expect(bricksResourceMock.getParent()).andReturn(volumeResourceMock).anyTimes(); expect(volumeResourceMock.getId()).andReturn(org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBrickResourceTest.volumeId.toString()).anyTimes(); expect(bricksResourceMock.addParents(isA(org.ovirt.engine.api.model.GlusterBrick.class))).andDelegateTo(new org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBricksResource() { @java.lang.Override protected org.ovirt.engine.api.model.GlusterBrick addParents(org.ovirt.engine.api.model.GlusterBrick glusterBrick) { org.ovirt.engine.api.model.Cluster cluster = new org.ovirt.engine.api.model.Cluster(); cluster.setId(org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBrickResourceTest.clusterId.toString()); org.ovirt.engine.api.model.GlusterVolume volume = new org.ovirt.engine.api.model.GlusterVolume(); volume.setId(org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBrickResourceTest.volumeId.toString()); volume.setCluster(cluster); glusterBrick.setGlusterVolume(volume); return glusterBrick; } }).anyTimes(); }
<START_MOD>@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { return source != null ? source : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionDetails>(); }<END_MOD>
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Disk object) { getCell().setTitle(org.ovirt.engine.ui.uicompat.external.StringUtils.join(object.getVmNames(),     if ((object.getNumberOfVms()) == 0) { return ""; } java.lang.String entityType = <START_MOD>new <END_MOD>org.ovirt.engine.ui.uicompat.EnumTranslator<START_MOD>().get<END_MOD>(object.getVmEntityType()); if ((object.getNumberOfVms()) == 1) { java.lang.String entityName = object.getVmNames().get(0); return entityName; } else { return (((object.getNumberOfVms()) +     + entityType) + "s"; } }
private void checkVdsSwapThreshold(org.ovirt.engine.core.common.businessentities.VdsStatistics stat) { <START_MOD>final double THRESHOLD = 0.98; <END_MOD>java.lang.Integer minAvailableThreshold = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.LogPhysicalMemoryThresholdInMB); java.lang.Integer maxUsedPercentageThreshold = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.LogMaxPhysicalMemoryUsedThresholdInPercentage); if ((((stat.getswap_total()) == null) || ((stat.getswap_free()) == null)) || ((stat.getswap_total()) == 0)) { return; } java.lang.Long swapUsedPercent = ((stat.getswap_total()) - (stat.getswap_free())) / (stat.getswap_total()); <START_MOD>java.lang.Long allowedMinAvailableThreshold = java.lang.Math.round(((minAvailableThreshold.doubleValue()) * THRESHOLD)); <END_MOD>org.ovirt.engine.core.common.AuditLogType valueToLog = ((stat.getswap_free()) < <START_MOD>allowedMinAvailableThreshold<END_MOD>) ? org.ovirt.engine.core.common.AuditLogType.VDS_LOW_SWAP : org.ovirt.engine.core.common.AuditLogType.VDS_HIGH_SWAP_USE; if (((stat.getswap_free()) < <START_MOD>allowedMinAvailableThreshold<END_MOD>) || (swapUsedPercent > maxUsedPercentageThreshold)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(stat.getId()); logable.addCustomValue("HostName", _vds.getName()); logable.addCustomValue("UsedSwap", swapUsedPercent.toString()); logable.addCustomValue("AvailableSwapMemory", stat.getswap_free().toString()); logable.addCustomValue("Threshold", ((stat.getswap_free()) < <START_MOD>allowedMinAvailableThreshold<END_MOD> ? <START_MOD>allowedMinAvailableThreshold<END_MOD>.toString() : maxUsedPercentageThreshold.toString())); auditLog(logable, valueToLog); } }
<START_MOD>@java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetCapabilities, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase(getVds())); getVdsDynamicDao().updateNetConfigDirty(getVds().getId(), getVds().getNetConfigDirty()); org.ovirt.engine.core.common.businessentities.VDS updatedHost = ((org.ovirt.engine.core.common.businessentities.VDS) (returnValue.getReturnValue())); org.ovirt.engine.core.vdsbroker.vdsbroker.CollectVdsNetworkDataVDSCommand.persistAndEnforceNetworkCompliance(updatedHost, false, null); for (org.ovirt.engine.core.common.businessentities.network.Network net : getModifiedNetworks()) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus(getVdsGroupId(), net); } return null; }<END_MOD>
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.DbGroup.class, to = org.ovirt.engine.api.model.Group.class) public static org.ovirt.engine.api.model.Group map(org.ovirt.engine.core.common.businessentities.DbGroup entity, org.ovirt.engine.api.model.Group template) { org.ovirt.engine.api.model.Group model = (template != null) ? template : new org.ovirt.engine.api.model.Group(); model.setName(entity.getName()); model.setId(<START_MOD>org.ovirt.engine.api.restapi.utils.DirectoryEntryIdUtils.generateId(<END_MOD>entity.getId().toString()<START_MOD>, entity.getDomain(), entity.getExternalId())<END_MOD>); if (!(org.apache.commons.lang.StringUtils.isEmpty(entity.getDomain()))) { org.ovirt.engine.api.model.Domain dom = new org.ovirt.engine.api.model.Domain(); dom.setId(new org.ovirt.engine.core.compat.Guid(entity.getDomain().getBytes(), true).toString()); model.setDomain(dom); } return model; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.initializeStorageDomain(); java.lang.String storage = ((org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage()) != null) ? org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage() : ""; org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(""); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInDb(); if (org.apache.commons.lang.StringUtils.isEmpty(storage)) { storage = createVG(); } org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(storage); if ((org.apache.commons.lang.StringUtils.isNotEmpty(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage())) && (org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInIrs())) { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.updateStorageDomainDynamicFromIrs(); proceedVGLunsInDb(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getVds().<START_MOD>getStoragePoolId<END_MOD>()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData()); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.setSucceeded(true); } }
<START_MOD>public void getGlusterVolumeGeoRepRecommendationViolations(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid masterVolumeId, org.ovirt.engine.core.compat.Guid slaveVolumeId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object returnValue, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { return returnValue == null ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepNonEligibilityReason>() : ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepNonEligibilityReason>) (returnValue)); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetNonEligibilityReasonsOfVolumeForGeoRepSession, new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeGeoRepEligibilityParameters(masterVolumeId, slaveVolumeId), aQuery); }<END_MOD>
public java.lang.String getLastReport() { return <START_MOD>(<END_MOD>lastReport<START_MOD>) != null ? lastReport : ""<END_MOD>; }
@java.lang.Override public void addQuotaPermissionSubject(java.util.List<org.ovirt.engine.core.common.PermissionSubject> quotaPermissionList) { if ((((org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePool()) != null) && ((getQuotaId()) != null)) && (!(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePool().getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)))) { <START_MOD>org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.UpdateVmCommand.getVmDAO().get(getVmId()); if ((vm != null) && (!(getQuotaId().equals(vm.getQuotaId())))) { <END_MOD>quotaPermissionList.add(new org.ovirt.engine.core.common.PermissionSubject(getQuotaId(), org.ovirt.engine.core.common.VdcObjectType.Quota, org.ovirt.engine.core.common.businessentities.ActionGroup.CONSUME_QUOTA)); } }<START_MOD> }<END_MOD>
@org.junit.Test public void testHasPeersFalse() { doReturn(org.ovirt.engine.core.<START_MOD>bll.<END_MOD>utils.GlusterUtilTest.OUTPUT_XML_NO_PEERS).when(glusterUtil).executePeerStatusCommand(client); assertTrue(glusterUtil.getPeers(client).isEmpty()); }
@org.junit.Test public void testGetOperationResult_Empty() { java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<?, ?>> testOperationList = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<?, ?>> allOperationList = new java.util.ArrayList<>(); java.util.List<?> allResults = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase>(); java.util.List<?> result = testProvider.getOperationResult(testOperationList, allOperationList, allResults); assertEquals( should have no results 0, result.size()); }
<START_MOD>@java.lang.Override public void onKeyUp(com.google.gwt.event.dom.client.KeyUpEvent event) { storageModel.getWarningLowSpaceSize().setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().bracketsWithGB(getWarningLowSpaceSize(storageModel))); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Subnets") java.lang.String networkExternalSubnetSubTabLabel();
private boolean ensureDestinationImageMap() { if (diskInfoDestinationMap.isEmpty()) { if (((org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getStorageDomainId()) != null) && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getStorageDomainId())))) { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getStorageDomainId(); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> storageIds = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); storageIds.add(storageId); for (org.ovirt.engine.core.common.businessentities.DiskImage image : org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplate().getDiskTemplateMap().values()) { image.setStorageIds(storageIds); <START_MOD>setDestTypeAndFormat(image); <END_MOD>diskInfoDestinationMap.put(image.getId(), image); } } else { org.ovirt.engine.core.bll.ImagesHandler.fillImagesMapBasedOnTemplate(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplate(), diskInfoDestinationMap, destStorages, false); } } if ((org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplate().getDiskTemplateMap().values().size()) != (diskInfoDestinationMap.size())) { log.error( not found any default active domain for one of the disks of template with id '{}' org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplate().getId()); addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_MISSED_STORAGES_FOR_SOME_DISKS); return false; } <START_MOD>for (org.ovirt.engine.core.common.businessentities.DiskImage diskImage : diskInfoDestinationMap.values()) { setDestTypeAndFormat(diskImage); } <END_MOD>return true; }
<START_MOD>org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteVolume(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String[] volUUID, java.lang.String postZero, boolean discard, java.lang.String force);<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult isReadOnlyPropertyCompatibleWithInterface() { if (java.lang.Boolean.TRUE.equals(disk.getReadOnly())) { org.ovirt.engine.core.common.businessentities.storage.DiskInterface diskInterface = disk.getDiskInterface(); if (diskInterface == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.IDE)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR, java.lang.String.format( %1$s diskInterface)); } if (disk.isScsiPassthrough()) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.SCSI_PASSTHROUGH_IS_NOT_SUPPORTED_FOR_READ_ONLY_DISK); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private javax.ws.rs.core.Response performCreate(org.ovirt.engine.api.model.ImageTransfer imageTransfer, org.ovirt.engine.core.common.action.TransferDiskImageParameters params) { updateTransferType(imageTransfer, params); if ((imageTransfer.isSetHost()) && (imageTransfer.getHost().isSetId())) { params.setVdsId(org.ovirt.engine.core.compat.Guid.createGuidFromString(imageTransfer.getHost().getId()<START_MOD>)); } if (imageTransfer.isSetClientInactivityTimeout()) { params.setClientInactivityTimeout(imageTransfer.getClientInactivityTimeout(<END_MOD>)); } return performCreate(ActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
private org.ovirt.engine.core.common.queries.VdcQueryReturnValue getErrorQueryReturnValue(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD> errorMessage) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = new org.ovirt.engine.core.common.queries.VdcQueryReturnValue(); returnValue.setSucceeded(false); returnValue.setExceptionString(errorMessage.toString()); return returnValue; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc setSafeNetworkConfig() { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.setSafeNetworkConfig").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@org.ovirt.engine.ui.common.DefaultStringValue( <START_MOD>all users to access this Template<END_MOD> java.lang.String makeTemplateIsTemplatePrivateEditorLabel();
private boolean validateStoragePropertiesUpdate() { <START_MOD>org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); <END_MOD>if ((<START_MOD>(<END_MOD>!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate(<START_MOD>)))) || (!(validate(storageDomainValidator.isDiscardAfterDeleteLegalForExistingStorageDomain()<END_MOD>)))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove(<START_MOD>"discardAfterDelete"); props.remove(<END_MOD>"warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn( was an attempt to update the following fields although they are not allowed to be updated: {} org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
private boolean checkIsDomainLocked(org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainMap) { if (domainMap.getStatus()<START_MOD>.isLocked(<END_MOD>)) { addInvalidSDStatusMessage(<START_MOD>domainMap<END_MOD>.<START_MOD>getStatus()<END_MOD>); return true; } return false; }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Affinity Group contradiction detected between UAG:\n${UAG}\nand negative Affinity Group:\n${negativeAR}") java.lang.String ACTION_TYPE_FAILED_AFFINITY_RULES_COLLISION();<END_MOD>
private void initVm(org.ovirt.engine.core.common.businessentities.VMStatus vmStatus, org.ovirt.engine.core.compat.NGuid runOnVds, org.ovirt.engine.core.compat.Guid diskImageId) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(vmStatus); vm.setRunOnVds(runOnVds); when(vmDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vm); when(vmDao.getVmsListForDisk(diskImageId)).thenReturn(java.util.Collections.singletonList(vm)); <START_MOD>setVmInPreview(false); <END_MOD>}
<START_MOD>@org.junit.Test public void testRemoveNotFound() throws java.lang.Exception { setUpEntityQueryExpectations(VdcQueryType.GetNetworksByStoragePoolId, org.ovirt.engine.core.common.queries.StoragePoolQueryParametersBase.class, new java.lang.String[]{ "StoragePoolId" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworksResourceTest.DATA_CENTER_ID }, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>()); control.replay(); try { collection.remove(GUIDS[0].toString()); fail("expected WebApplicationException"); } catch (javax.ws.rs.WebApplicationException wae) { verifyNotFoundException(wae); } }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Template java.lang.String editTemplateTitle();
protected void setUpEntityQueryExpectations(org.ovirt.engine.core.common.queries.VdcQueryType query, java.lang.Class<? extends org.ovirt.engine.core.common.queries.VdcQueryParametersBase> queryClass, java.lang.String[] queryNames, java.lang.Object[] queryValues, java.lang.Object queryReturn, java.lang.Object failure) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = <START_MOD>mock<END_MOD>(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); <START_MOD>when<END_MOD>(queryResult.getSucceeded()).<START_MOD>thenReturn<END_MOD>((failure == null)); if (failure == null) { <START_MOD>when<END_MOD>(queryResult.getReturnValue()).<START_MOD>thenReturn<END_MOD>(queryReturn); } else { if (failure instanceof java.lang.String) { <START_MOD>when<END_MOD>(queryResult.getExceptionString()).<START_MOD>thenReturn<END_MOD>(((java.lang.String) (failure))); setUpL10nExpectations(((java.lang.String) (failure))); } else if (failure instanceof java.lang.Exception) { <START_MOD>when<END_MOD>(queryResult.getExceptionString()).<START_MOD>thenThrow<END_MOD>(((java.lang.Exception) (failure))); } } if (queryClass == (org.ovirt.engine.core.common.queries.GetPermissionsForObjectParameters.class)) { <START_MOD>when<END_MOD>(backend.runQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))).<START_MOD>thenReturn(queryResult<END_MOD>); } else { <START_MOD>when<END_MOD>(backend.runQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))).<START_MOD>thenReturn(queryResult); } }<END_MOD>
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { org.ovirt.engine.core.common.businessentities.GraphicsDevice dev = org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getParameters().getDev(); if (dev == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_DEVICE_MUST_BE_SPECIFIED); } if ((org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getParameters().isVm()) && ((org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getVm()) == null)) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((!(org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getParameters().isVm())) && ((org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getVmTemplate()) == null)) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST); } if ((dev.getGraphicsType()) == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GRAPHIC_TYPE_MUST_BE_SPECIFIED); } return true; }
@org.junit.Test public void testResetAllOptions() throws java.lang.Exception {<START_MOD> setupParentExpectations(); setUpGetEntityExpectations(1); resource.setParent(volumesResourceMock);<END_MOD> setUriInfo(setUpActionExpectations(VdcActionType.ResetGlusterVolumeOptions, org.ovirt.engine.core.common.action.gluster.ResetGlusterVolumeOptionsParameters.class, new java.lang.String[]{ "VolumeId" }, new java.lang.Object[]{ GUIDS[0] })); verifyActionResponse(resource.resetAllOptions(new org.ovirt.engine.api.model.Action())); }
private void updateCachedIsoFileListFromVdsm(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { boolean isRefreshed = false; try { java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> problematicRepoFileList = new java.util.ArrayList<>(); isRefreshed = refreshIsoDomain(repoImage.getRepoDomainId(), problematicRepoFileList, repoImage.getFileType()); addRepoFileToProblematicList(problematicRepoFileList); } finally { org.ovirt.engine.core.bll.<START_MOD>storage.domains.<END_MOD>IsoDomainListSyncronizer.log.info( automatic refresh process for '{}' file type with {}, for storage domain id '{}'. repoImage.getFileType(), (isRefreshed ? "success" : "failure"), repoImage.getRepoDomainId()); } }
<START_MOD>private void setGraphicsDevicesToParams(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, org.ovirt.engine.core.common.action.VmManagementParametersBase params) { org.ovirt.engine.core.common.businessentities.GraphicsDevice graphicsFromModel = getGraphicsFromModel(model); if (graphicsFromModel != null) { params.setShouldUpdateGraphicsDevice(org.ovirt.engine.core.common.businessentities.GraphicsType.fromVmDeviceType(graphicsFromModel.getVmDeviceType()), true); params.setGraphicsDevice(graphicsFromModel); } }<END_MOD>
@java.lang.Override protected org.ovirt.engine.core.common.businessentities.HostDevice generateNewEntity() { org.ovirt.engine.core.common.businessentities.HostDevice device = new org.ovirt.engine.core.common.businessentities.HostDevice(); device.setHostId(org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_HOST_ID); device.setDeviceName(((org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME) + "___child")); device.setParentDeviceName(org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME); device.setCapability("pci"); <START_MOD>device.setAssignable(true); <END_MOD>return device; }
public void setFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> <START_MOD>confirmedFreeSize<END_MOD>) { this.<START_MOD>confirmedFreeSize<END_MOD> = <START_MOD>confirmedFreeSize<END_MOD>; }
private void processStorageOnVdsInactive(final org.ovirt.engine.core.common.businessentities.VDS vds) { if (!(Guid.Empty.equals(vds.getStoragePoolId()))) { org.ovirt.engine.core.utils.lock.EngineLock lock = new org.ovirt.engine.core.utils.lock.EngineLock(java.util.Collections.singletonMap(vds.getId().toString(), new org.ovirt.engine.core.common.utils.Pair(LockingGroup.VDS_POOL_AND_STORAGE_CONNECTIONS.toString(), EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED.toString())), null); try { org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager().acquireLockWait(lock); clearDomainCache(vds); org.ovirt.engine.core.common.businessentities.StoragePool storage_pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolDao().get(vds.getStoragePoolId()); if ((org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Uninitialized) != (storage_pool.getStatus())) { <START_MOD>vdsBroker.RunVdsCommand(VDSCommandType.DisconnectStoragePool, new org.ovirt.engine.core.common.vdscommands.DisconnectStoragePoolVDSCommandParameters(vds.getId(), vds.getStoragePoolId(), vds.getVdsSpmId())); org.ovirt.engine.core.common.action.HostStoragePoolParametersBase params = new org.ovirt.engine.core.common.action.HostStoragePoolParametersBase(storage_pool, vds); <END_MOD>backend.<START_MOD>runInternalAction(VdcActionType.DisconnectHostFromStoragePoolServers,<END_MOD> params); } } finally { org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager().releaseLock(lock); } } }
<START_MOD>@org.junit.Test public void testIpv4IsInvalid() { org.junit.Assert.assertFalse(underTest.isValid("1.2.3.4", mockConstraintValidatorContext)); }<END_MOD>
<START_MOD>public static java.lang.String escapeUnderScore(final java.lang.String customizedValue, final java.lang.String customizedRelation) { java.lang.String escapedValue = customizedValue; if ((customizedRelation.equalsIgnoreCase("LIKE")) || (customizedRelation.equalsIgnoreCase("ILIKE"))) { java.lang.String replaceWith = "_"; int pgMajorRelease = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PgMajorRelease); if (pgMajorRelease == (org.ovirt.engine.core.searchbackend.SyntaxChecker.PgMajorRelease.PG8.getValue())) { replaceWith = "\\\\_"; } else if (pgMajorRelease == (org.ovirt.engine.core.searchbackend.SyntaxChecker.PgMajorRelease.PG9.getValue())) { replaceWith = "\\_"; } escapedValue = customizedValue.replace("_", replaceWith); } return escapedValue; }<END_MOD>
<START_MOD>void insertCoCoCmdEntities(java.util.Collection<org.ovirt.engine.core.common.businessentities.CoCoCmdEntity> coCoCmdEntities);<END_MOD>
private void updateVolume(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity existingVolume, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity fetchedVolume) { updateVolumeProperties(existingVolume, fetchedVolume); <START_MOD>updateVolumeCapacityInfo(existingVolume, fetchedVolume); <END_MOD>updateBricks(existingVolume, fetchedVolume); updateOptions(existingVolume, fetchedVolume); updateTransportTypes(existingVolume, fetchedVolume); }
<START_MOD>private<END_MOD> void setSelectedNetworkQoSId(org.ovirt.engine.core.compat.Guid networkQoSId) { for (java.lang.Object item : getNetworkQoS().getItems()) { if (((org.ovirt.engine.core.common.businessentities.network.NetworkQoS) (item)).getId().equals(networkQoSId)) { getNetworkQoS().setSelectedItem(item); <START_MOD>return<END_MOD>; } } setSelectedNetworkQoSId(Guid.Empty); }
public java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> buildParameters(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<>(); <START_MOD>for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { org.ovirt.engine.core.common.action.PersistentHostSetupNetworksParameters setupNetworkParams<END_MOD> = <START_MOD>createHostSetupNetworksParameters(nic.getVdsId()); setupNetworkParams.setNetworkNames(network.getName()); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicToConfigure = getNicToConfigure(getNics(), nic.getId()); if (nicToConfigure == null) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.LABELED_NETWORK_INTERFACE_NOT_FOUND); } org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = <END_MOD>org.ovirt.engine.core.utils.NetworkUtils.<START_MOD>createNetworkAttachment(nicToConfigure, getVlanDevice(nicToConfigure, network.getVlanId()), network);<END_MOD> setupNetworkParams<START_MOD>.getNetworkAttachments().add(networkAttachment); addBootProtocolForRoleNetworkAttachment(nicToConfigure, network, networkAttachment); parameters.add(<END_MOD>setupNetworkParams); } <START_MOD>return parameters<END_MOD>; }
protected abstract org.ovirt.engine.core.common.action.VdcActionParametersBase getActionParameters(org.ovirt.engine.api.model.Network network, org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> entity);
<START_MOD>@com.gwtplatform.mvp.client.annotations.ProxyEvent public void onNetworkSelectionChange(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.StorageSelectionChangeEvent event) { updateMainTabSelection(event.getSelectedItems()); }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<START_MOD><E><END_MOD> vmListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<START_MOD><E><END_MOD>) (array[0])); org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel tagListModel = ((org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel) (array[1])); vmListModel.allAttachedTags.addAll(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags>) (returnValue))); (vmListModel.selectedItemsCounter)++; if ((vmListModel.selectedItemsCounter) == (vmListModel.getSelectedItems().size())) { postGetAttachedTags(vmListModel, tagListModel); } }
org.ovirt.engine.core.bll.ValidationResult validateNotRemovingUsedNetworkByVms() { java.util.Collection<java.lang.String> removedNetworks = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : removedNetworkAttachments) { removedNetworks.add(existingNetworkRelatedToAttachment(removedAttachment).getName()); } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(host.getId(), removedNetworks); if (vmNames.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, <START_MOD>org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.VAR_NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS_LIST, <END_MOD>vmNames)); } }
@java.lang.Override public java.lang.Void call() { try { if (isPerformConnectOps && (connectVdsToNewMaster(vds))) { try { runVdsCommand(VDSCommandType.<START_MOD>ConnectStoragePool<END_MOD>, new org.ovirt.engine.core.common.vdscommands.<START_MOD>ConnectStoragePoolVDSCommandParameters(vds, getStoragePool(), true)); } catch (org.ovirt.engine.core.common.errors.VdcBLLException ex) { if ((org.ovirt.engine.core.common.errors.VdcBllErrors.StoragePoolUnknown) == (ex.getVdsError().getCode())) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnVal = runVdsCommand(VDSCommandType.ConnectStoragePool, new org.ovirt.engine.core.common.vdscommands.ConnectStoragePoolVDSCommandParameters(vds, getStoragePool())); if (!(returnVal.getSucceeded())) { log.errorFormat( reconstruct actions (connectPool) did not complete on host {0} in the pool. error {1} <END_MOD>vds.getId(), <START_MOD>returnVal.getVdsError().getMessage()); } } else { log.errorFormat(( reconstruct actions (refreshPool) +   did not complete on host {0} in the pool. error {1} vds<END_MOD>.getId(), <START_MOD>ex.getMessage()); } } }<END_MOD> } catch (<START_MOD>java.lang.Exception e) { log.errorFormat(( reconstruct actions (connectPool,refreshPool,disconnect storage) +   did not complete on host {0} in the pool. error {1} <END_MOD>vds.getId(), <START_MOD>e<END_MOD>.getMessage()); } return null; }
<START_MOD>@org.codehaus.jackson.annotate.JsonIgnore <END_MOD>public java.lang.Boolean getBootMenuEnabled() { return bootMenuEnabled; }
@org.junit.Test public void testCanDoActionPoolInMaintenance() { getStoragePool().setStatus(StoragePoolStatus.Maintenance); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("VAR__TYPE__HOST_NIC_VFS_CONFIG=$type host NIC VFs configuration") java.lang.String VAR__TYPE__HOST_NIC_VFS_CONFIG();<END_MOD>
@java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> n) { return n.getname().equals(getParameters().getInterface().getNetworkName()); }
@java.lang.Override protected org.ovirt.engine.core.common.businessentities.network.NetworkAttachment postPopulate(org.ovirt.engine.api.model.NetworkAttachment model) { model.getIpAddressAssignments().getIpAddressAssignments().get(0).setAssignmentMethod("dhcp"); <START_MOD>model.getQos().setType(QosType.HOSTNETWORK.name()); <END_MOD>return super.postPopulate(model); }
@java.lang.Override protected void executeVmCommand() { if (diskShouldBeUnPlugged()) { performPlugCommand(VDSCommandType.HotUnPlugDisk, disk, vmDevice); } org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVmDeviceDao().remove(vmDevice.getId()); if ((!(disk.isDiskSnapshot())) && ((org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE) == (disk.getDiskStorageType()))) { org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getImageDao().updateImageVmSnapshotId(((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)).getImageId(), null); } org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateBootOrderInVmDeviceAndStoreToDB(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm().getStaticData()); org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVmStaticDAO().incrementDbGeneration(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm().getId()); org.ovirt.engine.core.bll.DetachDiskFromVmCommand.setSucceeded(true); }
<START_MOD>java.util.EnumSet<<END_MOD>org.ovirt.engine.core.common.businessentities.VDSType<START_MOD>><END_MOD> getHostType();
public static boolean isNetworkInSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.HostNetworkQos <START_MOD>networkQos<END_MOD>) { return <START_MOD>new<END_MOD> org.ovirt.engine.core.utils.<START_MOD>NetworkInSyncWithVdsNetworkInterface<END_MOD>(iface, <START_MOD>network, networkQos<END_MOD>)<START_MOD>.isNetworkInSync<END_MOD>(); }
@java.lang.Override public void run() { org.ovirt.engine.core.bll.VdsEventListener.log.infoFormat( entered for Host {0}, {1} vds.getId(), vds.getHostName()); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.VdsNotRespondingTreatment, new org.ovirt.engine.core.common.action.FenceVdsActionParameters(vds.getId(), org.ovirt.engine.core.common.businessentities.FenceActionType.Restart<START_MOD>, executeSshSoftFencing<END_MOD>), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); }
<START_MOD>private static com.google.gwt.resources.client.ImageResource getPoolVmImageResource(org.ovirt.engine.core.common.businessentities.VmType vmType, boolean nextRunConfigurationExists) { switch (vmType) { case Desktop : return nextRunConfigurationExists ? org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.manyDesktopsChangesImage() : org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.manyDesktopsImage(); case Server : return nextRunConfigurationExists ? org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.manyServersChangesImage() : org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.manyServersImage(); default : return null; } }<END_MOD>
public org.ovirt.engine.core.utils.lock.EngineLock acquireGlusterLockWait(org.ovirt.engine.core.compat.Guid clusterId) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> exclusiveLocks = new java.util.HashMap<>(); exclusiveLocks.put(clusterId.toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.GLUSTER, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_GLUSTER_OPERATION_INPROGRESS)); org.ovirt.engine.core.utils.lock.EngineLock lock = new org.ovirt.engine.core.utils.lock.EngineLock(exclusiveLocks, null); org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager().acquireLockWait(lock); return lock; }
<START_MOD>@org.junit.Test public void testMultipleNested() { org.ovirt.engine.api.types.V4Vm object = newVm().addDisks(newDisk().setId("123").setAlias("disk1")).addDisks(newDisk().setId("456").setAlias("disk2")).build(); assertEquals(("<vm>" + (((("<disks>" + "<disk id=\"123\"><alias>disk1</alias></disk>") + "<disk id=\"456\"><alias>disk2</alias></disk>") + "</disks>") + "</vm>")), objectToXml(object)); }<END_MOD>
@java.lang.Override protected boolean canDoAction() { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksToCheck = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getDiskDao().getAllForVm(getSourceVmFromDb().getId()), true, false, true); org.ovirt.engine.core.bll.validator.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.DiskImagesValidator(disksToCheck); if (!(validate(diskImagesValidator.diskImagesNotLocked()))) { return false; } java.util.Set<org.ovirt.engine.core.compat.Guid> storageIds = org.ovirt.engine.core.bll.ImagesHandler.getAllStorageIdsForImageIds(disksToCheck); org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator storageValidator = new org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator(org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getStoragePoolId(), storageIds); if (!(validate(storageValidator.allDomainsExistAndActive()))) { return false; } if (!(validate(new org.ovirt.engine.core.bll.validator.VmValidator(getSourceVmFromDb()).vmNotLocked()))) { return false; } if (!(super.canDoAction())) { return false; } for (org.ovirt.engine.core.common.businessentities.DiskImage diskImage : getDiskImagesToBeCloned()) { if (!(<START_MOD>shouldAdjustImageConfiguration(diskImage))) { if (!(<END_MOD>checkImageConfiguration(diskImage))) { return false; } } <START_MOD>} <END_MOD>return true; }
<START_MOD>@org.junit.Test public void testHexCompressedIsValid() { assertTrue(underTest.isValid("1234::cdef", mockConstraintValidatorContext)); }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult changeProtocolAllowed() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.VDS_STATUS_NOT_VALID_FOR_UPDATE).when(((((getHost().getProtocol()) != (oldHost.getProtocol())) && ((oldHost.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance))) && ((oldHost.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallingOS)))); }
private void processSingleClusterChanges(org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param) { final java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> setupNetworksParams = new java.util.ArrayList(createNetworkClustersToSetupNetworksParametersTransformer().transform(param.getAttachments(), param.getDetachments()<START_MOD>, param.getUpdates()<END_MOD>)); org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, setupNetworksParams); }
<START_MOD>public java.lang.Boolean getHighlyAvailableIsActive() { return highlyAvailableIsActive; }<END_MOD>
@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value, org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor widget) { super.onRemove(value, widget); com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, null); <START_MOD>model.updateSuggestedLabels(); <END_MOD>}
<START_MOD>private void checkForDuplicatedPicSlot(org.ovirt.engine.core.common.businessentities.VmDevice vmDeviceToHotplug) { java.util.regex.Pattern slotSearchPattern = java.util.regex.Pattern.compile(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.PCI_SLOT_REGEX); java.lang.String slotToHotplug = getPciSlotFromDevice(vmDeviceToHotplug, slotSearchPattern); if (slotToHotplug == null) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> allVmDevices = org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVmDeviceDao().getVmDeviceByVmId(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm().getId()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : allVmDevices) { if ((vmDevice.getIsManaged()) && (!(vmDeviceToHotplug.getId().equals(vmDevice.getId())))) { java.lang.String deviceSlot = getPciSlotFromDevice(vmDevice, slotSearchPattern); if ((deviceSlot != null) && (slotToHotplug.equals(deviceSlot))) { vmDeviceToHotplug.setAddress(""); return; } } } }<END_MOD>
<START_MOD>@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model) { this.model = model; }<END_MOD>
protected java.util.<START_MOD>Map<END_MOD><org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { <START_MOD>return <END_MOD>java.util.<START_MOD>stream<END_MOD>.<START_MOD>IntStream<END_MOD>.<START_MOD>range(0, NAMES<END_MOD>.<START_MOD>length)<END_MOD>.<START_MOD>filter(( x) -> !notFound)<END_MOD>.<START_MOD>boxed()<END_MOD>.<START_MOD>collect(java.util.stream.Collectors.toMap(this::getEntity<END_MOD>, java.util.<START_MOD>ArrayList::<END_MOD>new)); }
<START_MOD>@java.lang.Override protected java.lang.String getText(org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession entity) { return entity.getStatus().toString(); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.api.resource.externalhostproviders.ErrataResource getErrataResource() { return inject(new org.ovirt.engine.api.restapi.resource.externalhostproviders.BackendHostErrataResource(id)); }<END_MOD>
protected void testListAllConsoleAware(boolean allContent) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.setUpUriExpectations(null); if (allContent) { java.util.List<java.lang.String> populates = new java.util.ArrayList<java.lang.String>(); populates.add("true"); expect(httpHeaders.getRequestHeader(BackendResource.POPULATE)).andReturn(populates).anyTimes(); org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.setUpGetConsoleExpectations(new int[]{ 0, 1, 2 }); setUpGetVirtioScsiExpectations(new int[]{ 0, 1, 2 }); setUpGetSoundcardExpectations(new int[]{ 0, 1, 2 }); org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.setUpGetRngDeviceExpectations(new int[]{ 0, 1, 2 }); } setUpGetGraphicsExpectations(3); <START_MOD>setUpGetBallooningExpectations(3); <END_MOD>org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.setUpQueryExpectations(""); collection.setUriInfo(uriInfo); verifyCollection(org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.getCollection()); }
@java.lang.Override protected void updateMoveOrCopySingleDiskParameters(java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters, org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>StorageDomain<END_MOD>> selectedStorageDomains = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>StorageDomain<END_MOD>>(); if ((diskModel.getStorageDomain().getSelectedItems()) != null) { selectedStorageDomains.addAll(diskModel.getStorageDomain().getSelectedItems()); } else { selectedStorageDomains.add(((org.ovirt.engine.core.common.businessentities.<START_MOD>StorageDomain<END_MOD>) (diskModel.getStorageDomain().getSelectedItem()))); } for (org.ovirt.engine.core.common.businessentities.<START_MOD>StorageDomain<END_MOD> storageDomain : selectedStorageDomains) { addMoveOrCopyParameters(parameters, Guid.Empty, storageDomain.getId(), ((org.ovirt.engine.core.common.businessentities.DiskImage) (diskModel.getDisk()))); } }
public java.lang.String getpm_type() { return mVdsStatic.<START_MOD>getPmType<END_MOD>(); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> getHostsAndVmsForClusters(java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> vdsGroups) throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDSGroup> groupsById = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup : vdsGroups) { groupsById.put(vdsGroup.getId(), vdsGroup); } java.sql.Connection c = getJdbcTemplate().getDataSource().getConnection(); java.sql.Array groups = c.createArrayOf("uuid", groupsById.keySet().toArray()); java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroupHostsAndVMs> dataList = getCallsHandler().executeReadList("GetHostsAndVmsForClusters", org.ovirt.engine.core.dao.<START_MOD>VdsGroupDAOImpl<END_MOD>.VDSGroupHostsAndVMsRowMapper.instance, getCustomMapSqlParameterSource().addValue("vds_group_ids", groups)); c.close(); for (org.ovirt.engine.core.common.businessentities.VDSGroupHostsAndVMs groupDetail : dataList) { groupsById.get(groupDetail.getVdsGroupId()).setGroupHostsAndVms(groupDetail); } return vdsGroups; }
<START_MOD>@javax.ws.rs.PUT @org.jboss.resteasy.annotations.providers.jaxb.Formatted @java.lang.Override @javax.ws.rs.Consumes({ ApiMediaType.APPLICATION_XML, ApiMediaType.APPLICATION_JSON, ApiMediaType.APPLICATION_X_YAML }) public org.ovirt.engine.api.model.VirtualNumaNode update(org.ovirt.engine.api.model.VirtualNumaNode device);<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Profiles java.lang.String vnicProfilesTitle();
protected org.ovirt.engine.core.common.businessentities.DiskImage getDiskImage() { if ((diskImage) == null) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getDiskDao().get(org.ovirt.engine.core.bll.ExportRepoImageCommand.getParameters().getImageGroupID()); if ((disk != null) && ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE))) { diskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)); } } return diskImage; }
<START_MOD>@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getJobMessageProperties() { if ((jobProperties) == null) { jobProperties = new java.util.HashMap<java.lang.String, java.lang.String>(); org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.bll.gluster.GlusterCommandBase.getVdsGroup(); jobProperties.put(VdcObjectType.VdsGroups.name().toLowerCase(), (vdsGroup == null ? null : vdsGroup.getname())); } return jobProperties; }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmStatic mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { final org.ovirt.engine.core.common.businessentities.VmStatic entity = new org.ovirt.engine.core.common.businessentities.VmStatic(); map(rs, entity); entity.setId(getGuidDefaultEmpty(rs, "vm_guid")); entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id")); entity.setName(rs.getString("vm_name")); entity.setVmtGuid(getGuidDefaultEmpty(rs, "vmt_guid")); entity.setInitialized(rs.getBoolean("is_initialized")); entity.setCpuPinning(rs.getString("cpu_pinning")); entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags")); entity.setInstanceTypeId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("instance_type_id"))); entity.setImageTypeId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("image_type_id"))); entity.setOriginalTemplateName(rs.getString("original_template_name")); entity.setOriginalTemplateGuid(getGuid(rs, "original_template_id")); entity.setUseLatestVersion(((rs.getObject("template_version_number")) == (org.ovirt.engine.core.dao.VmStaticDAODbFacadeImpl.USE_LATEST_VERSION_NUMBER_INDICATOR))); <START_MOD>entity.setIconId(getGuid(rs, org.ovirt.engine.core.dao.VmStaticDAODbFacadeImpl.ICON_ID_COLUMN)); <END_MOD>return entity; }
<START_MOD>java.lang.String overrideRadioButtonPanelWidth();<END_MOD>
@java.lang.Override protected void updateNetworkChangability() { super.updateNetworkChangability(); if (!(getNetwork().getIsChangable())) { return; } boolean isPlugged = isPluggedBeforeAndAfterEdit(); boolean isPortMirroring = ((java.lang.Boolean) (getPortMirroring().getEntity())); if ((isVmUp()) && <START_MOD>isPlugged) { if <END_MOD>(hotUpdateSupported)<START_MOD> { if (<END_MOD>isPortMirroring) { getNetwork().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hotNetworkUpdateNotSupportedWithPortMirroring()); <START_MOD>} else if (selectedNetworkExternal()) { getNetwork().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hotNetworkUpdateNotSupportedExternalNetworks()); } else { return; } } else { getNetwork().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().hotNetworkUpdateNotSupported(getClusterCompatibilityVersion().toString())); } <END_MOD>getNetwork().setIsChangable(false); initSelectedNetwork(); <START_MOD>} }<END_MOD>
<START_MOD>void updateVdsNeedsReinstall(org.ovirt.engine.core.compat.Guid vdsStaticId, boolean vdsNeedsReinstall);<END_MOD>
<START_MOD>protected java.lang.String buildTooltipText() { java.lang.String tooltipText = null; java.lang.StringBuilder sb = new java.lang.StringBuilder(); if (!(getCommand().getExecuteProhibitionReasons().isEmpty())) { for (java.lang.String reason : getCommand().getExecuteProhibitionReasons()) { sb.append(reason).append(", "); } tooltipText = sb.toString(); if ((tooltipText.length()) != 0) { tooltipText = tooltipText.substring(0, ((tooltipText.length()) - 2)); } } return tooltipText; }<END_MOD>
protected <E> void setUpGetEntityExpectations(java.lang.String query, org.ovirt.engine.core.common.interfaces.SearchType type, E entity) throws java.lang.Exception { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = <START_MOD>mock<END_MOD>(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); org.ovirt.engine.core.common.queries.SearchParameters params = new org.ovirt.engine.core.common.queries.SearchParameters(query, type); <START_MOD>when<END_MOD>(backend.runQuery(eq(VdcQueryType.Search), eqSearchParams(params))).<START_MOD>thenReturn(queryResult); when<END_MOD>(queryResult.getSucceeded()).<START_MOD>thenReturn<END_MOD>(true); java.util.List<E> entities = new java.util.ArrayList<>(); entities.add(entity); <START_MOD>when<END_MOD>(queryResult.getReturnValue()).<START_MOD>thenReturn<END_MOD>(entities); }
<START_MOD>public void alertVolumeSnapshotLimitsReached(final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { if (!(alertVolumeSnapshotHardLimitReached(volume))) { alertVolumeSnapshotSoftLimitReached(volume); } }<END_MOD>