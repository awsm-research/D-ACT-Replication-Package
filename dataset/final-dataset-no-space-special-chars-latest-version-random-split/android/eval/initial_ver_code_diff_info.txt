public int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws <START_MOD>android.os.ErrnoException, <END_MOD>java.io.InterruptedIOException { return os.writev(fd, buffers, offsets, byteCounts); }
<START_MOD>private<END_MOD> static void arraycopy(float[] src, int srcPos, float[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException( == null } if (dst == null) { throw new java.lang.NullPointerException( == null } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) +   srcPos= + srcPos) +   dst.length= + (dst.length)) +   dstPos= + dstPos) +   length= + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_FLOAT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyFloatUnchecked(src, srcPos, dst, dstPos, length); } }
<START_MOD>@com.android.internal.telephony.FlakyTest <END_MOD>@android.platform.test.annotations.Postsubmit @org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCommonTranslate() { java.lang.String s = null; try { s = new java.lang.String(new byte[]{ ((byte) (0)), ((byte) (211)), ((byte) (0)), ((byte) (207)), ((byte) (1)), ((byte) (4)) }, "UTF-16"); } catch (java.io.UnsupportedEncodingException e) { fail(e.toString()); } assertEquals("OIA", com.android.internal.telephony.Sms7BitEncodingTranslator.translate(s)); }
public void <START_MOD>testParse_largeBigDecimal<END_MOD>() { java.text.DecimalFormat form = ((java.text.DecimalFormat) (java.text.DecimalFormat.getInstance(java.util.Locale.US))); form.setParseIntegerOnly(true); form.setParseBigDecimal(true); final java.lang.String doubleMax2 = "359,538,626,972,463,141,629,054,847,463,408," + ((((("713,596,141,135,051,689,993,197,834,953,606,314,521,560,057,077," + "521,179,117,265,533,756,343,080,917,907,028,764,928,468,642,653,") + "778,928,365,536,935,093,407,075,033,972,099,821,153,102,564,152,") + "490,980,180,778,657,888,151,737,016,910,267,884,609,166,473,806,") + "445,896,331,617,118,664,246,696,549,595,652,408,289,446,337,476,") + "354,361,838,599,762,500,808,052,368,249,716,736"); java.lang.Number number = form.parse(doubleMax2, new java.text.ParsePosition(0)); assertTrue((number instanceof java.math.BigDecimal)); java.math.BigDecimal result = ((java.math.BigDecimal) (number)); assertEquals(new java.math.BigDecimal(java.lang.Double.MAX_VALUE).add(new java.math.BigDecimal(java.lang.Double.MAX_VALUE)), result); }
private final void mainLoop() { <START_MOD>final android.os.Looper looper = android.net.util.BlockingSocketReader.getMyLooper(); final android.os.MessageQueue queue = looper.getQueue(); final int eventsOfInterest = (EVENT_INPUT) | (EVENT_ERROR); queue.addOnFileDescriptorEventListener(mSocket, eventsOfInterest, new android.os.MessageQueue.OnFileDescriptorEventListener(<END_MOD>) { <START_MOD>@java.lang.Override public<END_MOD> int <START_MOD>onFileDescriptorEvents(java.io.FileDescriptor fd, int events)<END_MOD> { <START_MOD>android.util.Log.e("XXX", (((   + fd) +   got   + events)); final boolean hasInput = (events & (EVENT_INPUT)) !=<END_MOD> 0<START_MOD>; android.util.Log.e("XXX", (   + hasInput)); final boolean hasError = (events & (EVENT_ERROR)) != 0; android.util.Log.e("XXX", (   + hasError)<END_MOD>); if (<START_MOD>hasError || (hasInput && (!(handleInput())))<END_MOD>) { <START_MOD>stop(); queue.removeOnFileDescriptorEventListener(fd); onExit(); looper.quitSafely(); return 0<END_MOD>; } <START_MOD>return eventsOfInterest<END_MOD>; } }<START_MOD>); looper.loop()<END_MOD>; }
@org.junit.<START_MOD>experimental.categories.Category(com.android.jack.test.category.KnownBugs.class) @org.junit.<END_MOD>Test public void test002b() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); try { jackOutput = runTest002(false, "fail", errOut, true, false); junit.framework.Assert.fail(); } catch (com.android.jack.JackAbortException e) { junit.framework.Assert.assertTrue(((e.getCause()) instanceof com.android.jack.library.LibraryReadingException)); junit.framework.Assert.assertTrue(((e.getCause().getCause()) instanceof com.android.jack.resource.ResourceImportConflictException)); java.lang.String errString = errOut.toString(); junit.framework.Assert.assertTrue(errString.contains( in junit.framework.Assert.assertTrue(errString.contains("rsc/Resource1")); junit.framework.Assert.assertTrue(errString.contains( already been imported } }
<START_MOD>public void onNfcEnabled() { synchronized(mLock) { mNfcEnabled = true; updateRoutingLocked(); } }<END_MOD>
private static void deleteRecursive(java.io.File root) { if (root.exists()) { if (root.isDirectory()) { <START_MOD>java.io.File[] files = root.listFiles(); if (files != null) { <END_MOD>for (java.io.File file : <START_MOD>files<END_MOD>) { com.android.build.gradle.internal.test.fixture.<START_MOD>GradleTestProject<END_MOD>.deleteRecursive(file);<START_MOD> }<END_MOD> } } assertTrue(root.delete()); } }
public void <START_MOD>setActiveJavaCompileTask<END_MOD>(@com.android.annotations.<START_MOD>NonNull<END_MOD> com.android.build.gradle.internal.scope.AndroidTask<? extends org.gradle.api.tasks.compile.AbstractCompile> javaCompileTask) { this.<START_MOD>activeJavaCompileTask<END_MOD> = javaCompileTask; }
public void setSuperClass(com.android.ide.<START_MOD>common<END_MOD>.<START_MOD>platformData<END_MOD>.ViewClassInfo superClass) { mSuperClass = superClass; }
<START_MOD>public java.util.Collection<com.android.jack.jayce.v0002.nodes.NField> getFields() { return fields.values(); }<END_MOD>
<START_MOD>private static java.lang.Object longArray(dalvik.system.EmulatedStackFrame.StackFrameReader reader, java.lang.Class<?>[] ptypes, int offset, int length) { long[] arityArray = new long[length]; for (int i = 0; i < length; ++i) { java.lang.Class<?> argumentType = ptypes[(i + offset)]; switch (sun.invoke.util.Wrapper.basicTypeChar(argumentType)) { case 'J' : { arityArray[i] = reader.nextLong(); break; } case 'I' : { arityArray[i] = reader.nextInt(); break; } case 'S' : { arityArray[i] = reader.nextShort(); break; } case 'B' : { arityArray[i] = reader.nextByte(); break; } default : { arityArray[i] = ((long) (reader.nextReference(argumentType))); break; } } } return arityArray; }<END_MOD>
@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { super.widgetSelected(e); if ((mResourceType) == (com.android.resources.ResourceType.STRING)) { createNewString(); } else { assert com.android.ide.eclipse.adt.internal.<START_MOD>wizards<END_MOD>.<START_MOD>newxmlfile<END_MOD>.<START_MOD>ResourceNameValidator<END_MOD>.<START_MOD>isValueBasedResourceType<END_MOD>(mResourceType); java.lang.String newName = createNewValue(mResourceType); if (newName != null) { com.android.ide.eclipse.adt.internal.resources.ResourceItem[] items = setupResourceList(); selectItemName(newName, items); } } }
private static void putInJackClasspath(@javax.annotation.Nonnull java.util.List<java.io.File> jackFiles, @javax.annotation.Nonnull com.android.jack.ir.ast.JPackage rootPackage, @javax.annotation.Nonnull com.android.jack.lookup.JPhantomLookup phantomJNodeLookup, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks) { com.android.sched.util.config.ReflectFactory<com.android.jack.jayce.JaycePackageLoader> factory = com.android.sched.util.config.ThreadConfig.get(com.android.jack.Jack.CLASSPATH_POLICY); for (final java.io.File jackFile : jackFiles) { try { com.android.sched.vfs.<START_MOD>InputRootVDir<END_MOD> vDir = com.android.jack.Jack.wrapAsVDir(jackFile, hooks); com.android.jack.jayce.JaycePackageLoader rootPLoader = factory.create(<START_MOD>new com.android.jack.library.JackLibrary(<END_MOD>vDir<START_MOD>)<END_MOD>, phantomJNodeLookup); rootPackage.addLoader(rootPLoader); } catch (java.io.IOException ioException) { com.android.jack.Jack.logger.log(java.util.logging.Level.WARNING,   classpath entry ignored: {0} ioException.getMessage()); } } }
public void testInputUrl() throws java.lang.Exception { byte[] fileContents =   1234567890 addFileEntry(libcore.java.net.FtpURLConnectionTest.FILE_PATH, fileContents<START_MOD>); java.net.URL fileUrl = getFileUrlWithCredentials(libcore.java.net.FtpURLConnectionTest.USER, libcore.java.net.FtpURLConnectionTest.PASSWORD, libcore.java.net.FtpURLConnectionTest.FILE_PATH<END_MOD>); java.net.URLConnection connection = fileUrl.openConnection(); libcore.java.net.FtpURLConnectionTest.assertContents(fileContents, connection.getInputStream()); }
@java.lang.Override @javax.annotation.CheckForNull public com.android.jack.ir.ast.JAbstractStringLiteral getRefinedExpression(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call, @javax.annotation.Nonnull com.android.jack.ir.ast.JStringLiteral paramToRefine) { com.android.jack.ir.ast.JMethodNameLiteral strMethodLiteral = null; java.lang.String methodName = paramToRefine.getValue(); com.android.jack.ir.ast.JDefinedClassOrInterface type = getTypeFromClassLiteralExpression(call.getInstance()); java.lang.String methodSignature = getMethodSignature(<START_MOD>methodName, <END_MOD>call); if ((type != null) && (methodSignature != null)) { com.android.jack.ir.ast.JMethod method = lookupMethod(type, methodSignature); if (method != null) { strMethodLiteral = new com.android.jack.ir.ast.JMethodNameLiteral(paramToRefine.getSourceInfo(), method); assert methodName.equals(strMethodLiteral.getValue()); } } return strMethodLiteral; }
public void testIke() throws java.lang.Exception { java.net.InetAddress localAddr = java.net.InetAddress.getByName(android.net.cts.<START_MOD>IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr);android.net.IpSecTransform transform = android.net.cts.<END_MOD>IpSecManagerTest.<START_MOD>buildIpSecTransform(mContext, spi, encapSocket, localAddr)) { java.io.FileDescriptor sock = null<END_MOD>; try <START_MOD>{ sock = android.net.cts.IpSecManagerTest.getBoundUdpSocket<END_MOD>(localAddr); int port = getPort(sock); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_OUT, transform); byte[] header = new byte[]{ 1, 1, 1, 1 }; java.lang.String message =   ESP Packet byte[] data = ((new java.lang.String(header)) + message).getBytes("UTF-8"); android.system.Os.sendto(sock, data, 0, data.length, 0, localAddr, encapSocket.getPort()); header = new byte[]{ 0, 0, 0,   }; message =   IKE Packet data = ((new java.lang.String(header)) + message).getBytes("UTF-8"); android.system.Os.sendto(encapSocket.getSocket(), data, 0, data.length, 0, localAddr, encapSocket.getPort()); byte[] in = new byte[4]; in[0] = 1; android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertTrue( socket received UDP-encap-ESP data despite invalid SPIs java.util.Arrays.equals(header, in)); mISM.removeTransportModeTransforms(sock); } finally { if (sock != null) { android.system.Os.close(sock); } } } }
public void testKeyguardHidesActivity() throws java.lang.Exception { if (!(isHandheld())) { return; } launchActivity("TestActivity"); mAmWmState.computeState(mDevice, new java.lang.String[]{ "TestActivity" }); mAmWmState.assertVisibility("TestActivity", true); gotoKeyguard(); mAmWmState.<START_MOD>waitForKeyguardShowingAndNotOccluded(mDevice); mAmWmState.<END_MOD>computeState(mDevice, null); assertShowingAndNotOccluded(); mAmWmState.assertVisibility("TestActivity", false); unlockDevice(); }
<START_MOD>protected java.lang.String findNewId(java.lang.String fqcn, java.util.Set<java.lang.String> existingIdMap) { java.lang.String name = fqcn.substring(((fqcn.lastIndexOf('.')) + 1)); for (int i = 1; i < 1000000; i++) { java.lang.String id = java.lang.String.format("@+id/%s%02d", name, i); if (!(existingIdMap.contains(id))) { existingIdMap.add(id); return id; } } return null; }<END_MOD>
<START_MOD>private void checkFileDescriptorPassing(android.aidl.tests.ITestService service) throws android.aidl.tests.TestServiceClient.TestFailException { mLog.log("Checking that service can receive and return file descriptors..."); try { java.io.FileOutputStream fileOutputStream = openFileOutput("test-dummy", Context.MODE_PRIVATE); java.io.FileDescriptor descriptor = fileOutputStream.getFD(); java.io.FileDescriptor journeyed = service.RepeatFileDescriptor(descriptor); fileOutputStream.close(); java.io.FileOutputStream journeyedStream = new java.io.FileOutputStream(journeyed); java.lang.String testData = "FrazzleSnazzleFlimFlamFlibbityGumboChops"; byte[] output = testData.getBytes(); journeyedStream.write(output); journeyedStream.close(); java.io.FileInputStream fileInputStream = openFileInput("test-dummy"); byte[] input = new byte[output.length]; if ((fileInputStream.read(input)) != (input.length)) { mLog.logAndThrow("Read short count from file"); } if (!(testData.equals(new java.lang.String(input)))) { mLog.logAndThrow("Read incorrect data"); } } catch (android.os.RemoteException ex) { mLog.log(ex.toString()); mLog.logAndThrow("Service failed to repeat a file descriptor."); } catch (java.io.IOException ex) { mLog.log(ex.toString()); mLog.logAndThrow("Exception while operating on temporary file"); } mLog.log("...service can receive and return file descriptors."); }<END_MOD>
@com.android.compatibility.common.util.CddTest(requirement = "9.7") public void testAospPropertyContexts() throws java.lang.Exception { devicePcFile = java.io.File.createTempFile("property_contexts", ".tmp"); devicePcFile.deleteOnExit(); mDevice.pullFile(<START_MOD>"/plat_property_contexts"<END_MOD>, devicePcFile); aospPcFile = copyResourceToTempFile(<START_MOD>"/plat_property_contexts"<END_MOD>); assertFileStartsWith(aospPcFile, devicePcFile); }
public boolean delete() { try { Libcore.os.remove(path); return true; } catch (<START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException errnoException) { return false; } }
<START_MOD>@java.lang.Override public java.lang.String toString() { if ((stringValue) == null) { stringValue = fs.normalizeJavaPath(new java.lang.String(path)); } return stringValue; }<END_MOD>
@java.lang.Override public boolean accept(@org.jetbrains.annotations.NotNull com.intellij.openapi.project.Project project, @org.jetbrains.annotations.NotNull com.intellij.openapi.vfs.VirtualFile file) { if ((<START_MOD>(<END_MOD>file.isDirectory()) || (!(file.isValid()<START_MOD>))) || (file.getFileType().isBinary(<END_MOD>))) { return false; } return com.intellij.psi.SingleRootFileViewProvider.isTooLargeForContentLoading(file); }
<START_MOD>@java.lang.Override public boolean equals(java.lang.Object o) { if (o == null) return false; if (!(o instanceof com.android.bluetooth.avrcp.MediaData)) return false; final com.android.bluetooth.avrcp.MediaData u = ((com.android.bluetooth.avrcp.MediaData) (o)); if (!(java.util.Objects.equals(metadata, u.metadata))) { return false; } if (!(java.util.Objects.equals(queue, u.queue))) { return false; } if (!(com.android.bluetooth.avrcp.MediaPlayerWrapper.playstateEquals(state, u.state))) { return false; } return true; }<END_MOD>
<START_MOD>public void testVMDebug() { synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); SendDebuggerActivity(); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); org.apache.harmony.jpda.tests.jdwp.VMDebug.VMDebugDebuggee.DebugResult res = org.apache.harmony.jpda.tests.jdwp.VMDebug.VMDebugDebuggee.ReadResult(synchronizer.receiveMessage()); if (res == null) { fail("unable to deserialize result data"); } else { logWriter.println(("Recieved results: " + res)); assertFalse("no error expected", res.error_occured); assertTrue("expected active debugger!", res.is_debugging_enabled); assertTrue("expected active debugger connection!", res.is_debugger_connected); if (10 > (res.last_debugger_activity)) { fail(("Expected last debugger activity to be greater then 10, was " + (res.last_debugger_activity))); } } synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); }<END_MOD>
<START_MOD>@android.telephony.RequiresPermission(android.Manifest.permission.CALL_PHONE) public void sendUssdRequest(java.lang.String ussdRequest, final android.telephony.TelephonyManager.UssdResponseCallback callback, android.telephony.Handler handler) { checkNotNull(callback, "UssdResponseCallback cannot be null."); final android.telephony.TelephonyManager telephonyManager = this; android.os.ResultReceiver wrappedCallback = new android.os.ResultReceiver(handler) { @java.lang.Override protected void onReceiveResult(int resultCode, android.os.Bundle ussdResponse) { android.telephony.Rlog.d(android.telephony.TelephonyManager.TAG, ("USSD:" + resultCode)); checkNotNull(ussdResponse, "ussdResponse cannot be null."); android.telephony.UssdResponse response = ussdResponse.getParcelable(android.telephony.USSD_RESPONSE); if (resultCode == (USSD_RETURN_SUCCESS)) { callback.onReceiveUssdResponse(telephonyManager, response.getUssdRequest(), response.getReturnMessage()); } else { callback.onReceiveUssdResponseFailed(telephonyManager, response.getUssdRequest(), resultCode); } } }; try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony != null) { telephony.handleUssdRequest(getSubId(), ussdRequest, wrappedCallback); } } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.TelephonyManager.TAG, "Error calling ITelephony#sendUSSDCode", e); android.telephony.UssdResponse response = new android.telephony.UssdResponse(ussdRequest, ""); android.os.Bundle returnData = new android.os.Bundle(); returnData.putParcelable(android.telephony.USSD_RESPONSE, response); wrappedCallback.send(android.telephony.USSD_ERROR_SERVICE_UNAVAIL, returnData); } }<END_MOD>
public void testOnKeyDown_capitalizeSentences() { android.text.method.MultiTapKeyListener keyListener = android.text.method.MultiTapKeyListener.getInstance(false, Capitalize.SENTENCES); prepareEmptyTextView(); callOnKeyDown(keyListener, KeyEvent.KEYCODE_4, 2); assertEquals("H", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_4, 3); assertEquals("Hi", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_1, 1); assertEquals("Hi.", mTextView.getText().toString()); }
@java.lang.Override public void run() { logWriter.println(( started:   + (name))); try { java.lang.String line = ""; while (<START_MOD>(<END_MOD>!(doExit<START_MOD>)) || (br.ready()<END_MOD>)) { try { line = br.readLine(); if (line == null) break; logWriter.println((((name) +     + line)); } catch (java.lang.IllegalStateException e) { } } logWriter.println(( completed:   + (name))); } catch (java.io.IOException e) { logWriter.printError(e); } }
public <START_MOD>void testValidationFailure() throws ManifestMerger2.MergeFailureException, java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException<END_MOD> { <START_MOD>com.android.sdklib.mock.MockLog mockLog<END_MOD> = new <START_MOD>com.android.sdklib.mock.MockLog(); <END_MOD>java.lang.String <START_MOD>input = "" + (((((((((("<manifest\n" +   xmlns:android= +   xmlns:tools= +   package= + "\n") +   <application android:label= /> + "\n") +   <activity android:name=   +   tools:re place= + "\n") + "</manifest>"); java.io.File tmpFile = inputAsFile("ManifestMerger2Test_testValidationFailure", input); assertTrue(tmpFile.exists()); try {<END_MOD> com.android.manifmerger.<START_MOD>MergingReport mergingReport = com.android.manifmerger.ManifestMerger2.newInvoker(tmpFile, mockLog).merge(); assertEquals(MergingReport.Result.ERROR, mergingReport.getResult()); assertTrue(mockLog.toString().contains("tools:replace")); assertFalse(mergingReport.getMergedDocument().isPresent()); } finally<END_MOD> { <START_MOD>assertTrue(tmpFile.delete(<END_MOD>)); } }
public void testRunNormalInputOnWindows() throws com.android.tradefed.device.DeviceNotAvailableException, java.lang.IllegalArgumentException { java.lang.String originalName = java.lang.System.getProperty(<START_MOD>VtsPythonUtil<END_MOD>.OS_NAME); java.lang.System.setProperty(<START_MOD>VtsPythonUtil<END_MOD>.OS_NAME, <START_MOD>VtsPythonUtil<END_MOD>.WINDOWS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice()); mTest.setRunUtil(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockRunUtil("where", "python.exe", CommandStatus.SUCCESS)); try { mTest.run(mMockInvocationListener); } finally { java.lang.System.setProperty(<START_MOD>VtsPythonUtil<END_MOD>.OS_NAME, originalName); } }
@java.lang.Override protected void ensureAll(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loaded) { synchronized(this) { if (!(structureLoaded)) { structureLoaded = true; com.android.jack.jayce.DeclaredTypeNode type; try { type = getNNode(NodeLevel.STRUCTURE<START_MOD>, loaded.getSession()<END_MOD>); } catch (java.io.IOException e) { throw new com.android.jack.load.JackLoadingException(getLocation(), e); } catch (com.android.jack.JackFileException e) { throw new com.android.jack.load.JackLoadingException(getLocation(), e); } try { type.updateToStructure(loaded, this); } catch (com.android.jack.lookup.JLookupException e) { throw new com.android.jack.load.JackLoadingException(getLocation(), e); } com.android.jack.frontend.ParentSetter parentSetter = new com.android.jack.frontend.ParentSetter(); parentSetter.accept(loaded); tracer.getStatistic(com.android.jack.jayce.JayceClassOrInterfaceLoader.STRUCTURE_LOAD).incValue(); methodNotLoadedCount = loaded.getMethods().size(); if ((methodNotLoadedCount) == 0) { loaded.removeLoader(); } } } }
private void pushFile(final java.lang.String local, final java.lang.String remoteDirectory) { try { final com.android.ddmlib.SyncService sync = mCurrentDevice.getSyncService(); if (sync != null) { java.lang.String[] segs = local.split(java.util.regex.Pattern.quote(java.io.File.separator)); java.lang.String name = segs[((segs.length) - 1)]; <START_MOD>final <END_MOD>java.lang.String remoteFile = (remoteDirectory + (com.android.ddmlib.FileListingService.FILE_SEPARATOR)) + name; com.android.<START_MOD>ddmuilib.SyncProgressHelper.run(new com.android.ddmuilib.SyncProgressHelper.SyncRunnable() { public void run(com.android.<END_MOD>ddmlib.SyncService.<START_MOD>ISyncProgressMonitor monitor) throws com.android.ddmlib.SyncException, com.android.ddmlib.TimeoutException, java.io.IOException {<END_MOD> sync.pushFile(local, remoteFile, monitor<START_MOD>); } public void close() { sync.close(); } }<END_MOD>, java.lang.String.format( %1$s to the device. name)<START_MOD>, mParent.getShell()); } } catch (com.android.ddmlib.SyncException e) {<END_MOD> if (<START_MOD>e.wasCancelled(<END_MOD>)) { com.android.ddmuilib.console.DdmConsole.printErrorToConsole(java.lang.String.format( to push<START_MOD> selection:<END_MOD> %1$s <START_MOD>e<END_MOD>.getMessage())); } } catch (java.lang.Exception e) { com.android.ddmuilib.console.DdmConsole.printErrorToConsole( to push the item(s). com.android.ddmuilib.console.DdmConsole.printErrorToConsole(e.getMessage()); } }
com.android.ddmlib.RawImage getScreenshot() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException<START_MOD>, java.lang.InterruptedException<END_MOD>;
<START_MOD>public void test_nullLocales() { java.util.Currency currency = java.util.Currency.getInstance(java.util.Locale.getDefault()); assertEquals(currency.getSymbol(java.util.Locale.getDefault()), currency.getSymbol(null)); }<END_MOD>
private boolean waitForFinalization() { long <START_MOD>startCount<END_MOD> = java.lang.Daemons.FinalizerDaemon.INSTANCE.<START_MOD>progressCounter.get()<END_MOD>; sleepFor(java.lang.Daemons.MAX_FINALIZE_NANOS); return<START_MOD> !(((getNeedToWork()) && ((java.lang.Daemons.FinalizerDaemon.INSTANCE.progressCounter.get()) == startCount)) &&<END_MOD> ((java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingObject) <START_MOD>!=<END_MOD> null)); }
private void updateCall(com.android.server.telecom.Call call, boolean videoProviderChanged) { if (!(mInCallServices.isEmpty())) { android.telecom.Log.i(this,   updateCall %s call); java.util.List<android.content.ComponentName> componentsUpdated = new java.util.ArrayList<>(); for (java.util.Map.Entry<com.android.server.telecom.InCallController.InCallServiceInfo, com.android.internal.telecom.IInCallService> entry : mInCallServices.entrySet()) { com.android.server.telecom.InCallController.InCallServiceInfo info = entry.getKey(); if ((call.isExternalCall()) && (!(info.isExternalCallsSupported()))) { continue; } <START_MOD>if ((call.isSelfManaged()) && (!(info.isSelfManagedCallsSupported()))) { continue; } <END_MOD>android.telecom.ParcelableCall parcelableCall = com.android.server.telecom.ParcelableCallUtils.toParcelableCall(call, videoProviderChanged, mCallsManager.getPhoneAccountRegistrar(), info.isExternalCallsSupported()); android.content.ComponentName componentName = info.getComponentName(); com.android.internal.telecom.IInCallService inCallService = entry.getValue(); componentsUpdated.add(componentName); try { inCallService.updateCall(parcelableCall); } catch (android.os.RemoteException ignored) { } } android.telecom.Log.i(this,   updated: %s componentsUpdated); } }
public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.<START_MOD>getKey(256)<END_MOD>); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, <START_MOD>android.net.cts.IpSecManagerTest.getKey<END_MOD>(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth<START_MOD>, null<END_MOD>, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, <START_MOD>null, <END_MOD>false, 1, true); }
public void test_getInstance() { <START_MOD>if (isAvailableLocale(java.util.Locale.US)) { java.util.Calendar calendar = java.util.Calendar.getInstance(java.util.Locale.US); assertEquals(java.util.Calendar.SUNDAY, calendar.getFirstDayOfWeek()); } if (isAvailableLocale<END_MOD>(java.util.Locale.CHINESE)<START_MOD>) { java.util.Calendar calendar = java.util.Calendar.getInstance(java.util.Locale.CHINESE); assertEquals(java.util.Calendar.MONDAY, calendar<END_MOD>.getFirstDayOfWeek()); <START_MOD>}<END_MOD> java.util.Calendar gmt_calendar = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("GMT"), java.util.Locale.US); assertEquals(java.util.TimeZone.getTimeZone("GMT"), gmt_calendar.getTimeZone()); java.util.Calendar est_calendar = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("EST"), java.util.Locale.US); assertEquals(java.util.TimeZone.getTimeZone("EST").getID(), est_calendar.getTimeZone().getID()); }
public int timeIntegerValueOf(int reps) throws java.lang.Exception { java.lang.String[] intStrings = new java.lang.String[]{ "0", "1", "12", "123", "1234", "12345", "123456", "1234567", "12345678" }; int t = 0; for (int i = 0; i < reps; ++i) { for (int j = 0; j < (intStrings.length); ++j) { t += java.lang.Integer.<START_MOD>parseInt<END_MOD>(intStrings[j]); } } return t; }
<START_MOD>@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass()) != (o.getClass()))) { return false; } com.android.builder.ApiVersionImpl that = ((com.android.builder.ApiVersionImpl) (o)); if ((mApiLevel) != (that.mApiLevel)) { return false; } if ((mCodename) != null ? !(mCodename.equals(that.mCodename)) : (that.mCodename) != null) { return false; } return true; }<END_MOD>
public java.net.InetAddress getLocalAddress() { return <START_MOD>mLocalAddress<END_MOD>; }
@org.junit.Test public void backgroundScanNoBatch() { com.android.server.wifi.WifiNative.ScanSettings settings = new com.android.server.wifi.ScanTestUtil.NativeScanSettingsBuilder().withBasePeriod(10000).withMaxApPerScan(10).addBucketWithBand(10000, WifiScanner.REPORT_EVENT_NO_BATCH, WifiScanner.WIFI_BAND_24_GHZ).build(); com.android.server.wifi.scanner.<START_MOD>WificondWifiScannerTest<END_MOD>.ScanPeriod[] expectedPeriods = new com.android.server.wifi.scanner.<START_MOD>WificondWifiScannerTest<END_MOD>.ScanPeriod[]{ new com.android.server.wifi.scanner.<START_MOD>WificondWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.WificondWifiScannerTest<END_MOD>.ScanPeriod.ReportType.NONE, com.android.server.wifi.ScanResults.create(0, 2400, 2400, 2400), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)), new com.android.server.wifi.scanner.<START_MOD>WificondWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.WificondWifiScannerTest<END_MOD>.ScanPeriod.ReportType.NONE, com.android.server.wifi.ScanResults.create(1, 2400, 2400, 2450), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)), new com.android.server.wifi.scanner.<START_MOD>WificondWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.WificondWifiScannerTest<END_MOD>.ScanPeriod.ReportType.NONE, com.android.server.wifi.ScanResults.create(2, 2400, 2450, 2400), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)) }; doSuccessfulTest(settings, expectedPeriods); }
void setAudioStatus(boolean mute, int volume) { if ((!(isTvDeviceEnabled())) || (!(tv().isSystemAudioActivated()))) { return; } android.media.AudioManager audioManager = getAudioManager(); boolean muted = audioManager.isStreamMute(AudioManager.STREAM_MUSIC); if (mute) { if (!muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, true); } } else { if (muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, false); } <START_MOD>int flag = android.media.AudioManager.FLAG_HDMI_SYSTEM_AUDIO_VOLUME; if (( <= volume) && (volume <= 100)) { android.util.Slog.i(com.android.server.hdmi.HdmiControlService.TAG, (   + volume)); flag |= android.media.AudioManager.FLAG_SHOW_UI; } <END_MOD>audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, volume, <START_MOD>flag); } }<END_MOD>
<START_MOD>public java.util.List<java.lang.String> getSubsetAids() { final java.util.ArrayList<java.lang.String> subsetAids = new java.util.ArrayList<java.lang.String>(); for (android.nfc.cardemulation.AidGroup group : getAidGroups()) { for (java.lang.String aid : group.aids) { if (aid.endsWith("@")) { subsetAids.add(aid); } } } return subsetAids; }<END_MOD>
public android.content.Intent getIntent(java.lang.Class newActivityClass) { android.content.Intent intent = new android.content.Intent(com.android.phone.SubscriptionInfoHelper.<START_MOD>sContext<END_MOD>, newActivityClass); if (hasSubId()) { intent.putExtra(com.android.phone.SubscriptionInfoHelper.SUB_ID_EXTRA, com.android.phone.SubscriptionInfoHelper.<START_MOD>sSubId<END_MOD>); } if (!(android.text.TextUtils.isEmpty(com.android.phone.SubscriptionInfoHelper.<START_MOD>sSubLabel<END_MOD>))) { intent.putExtra(com.android.phone.SubscriptionInfoHelper.SUB_LABEL_EXTRA, com.android.phone.SubscriptionInfoHelper.<START_MOD>sSubLabel<END_MOD>); } return intent; }
public com.android.jack.dx.rop.code.RopMethod process() { int szBlocks = blocks.size(); java.util.BitSet toDelete = new java.util.BitSet(blocks.getMaxLabel()); for (int bindex = 0; bindex < szBlocks; bindex++) { com.android.jack.dx.rop.code.BasicBlock b = blocks.get(bindex); if (toDelete.get(b.getLabel())) { continue; } com.android.jack.dx.util.IntList preds = ropMethod.labelToPredecessors(b.getLabel()); int szPreds = preds.size(); for (int i = 0; i < szPreds; i++) { int iLabel = preds.get(i); com.android.jack.dx.rop.code.BasicBlock iBlock = blocks.labelToBlock(iLabel); if (((toDelete.get(iLabel)) || ((iBlock.getSuccessors().size()) > 1)) || ((iBlock.getFirstInsn().getOpcode().getOpcode()) == (com.android.jack.dx.rop.code.RegOps.MOVE_RESULT))) { continue; } com.android.jack.dx.util.IntList toCombine = new com.android.jack.dx.util.IntList(); for (int j = i + 1; j < szPreds; j++) { int jLabel = preds.get(j); com.android.jack.dx.rop.code.BasicBlock jBlock = blocks.labelToBlock(jLabel); if (((jBlock.getSuccessors().size()) == 1) && (com.android.jack.dx.ssa.back.IdenticalBlockCombiner.compareInsns(iBlock, jBlock))) { toCombine.add(jLabel); toDelete.set(jLabel); } } combineBlocks(iLabel, toCombine); } } for (int i = szBlocks - 1; i >= 0; i--) { if (toDelete.get(newBlocks.get(i).getLabel())) { newBlocks.set(i, null); } } newBlocks.shrinkToFit(); newBlocks.setImmutable(); return new com.android.jack.dx.rop.code.RopMethod(newBlocks, ropMethod.getFirstLabel()<START_MOD>, ropMethod.hasParameterInOrder()); }<END_MOD>
<START_MOD>public void initialize(android.content.Context context, com.android.server.wifi.WifiConfigManager configManager, android.net.wifi.WifiInfo wifiInfo, com.android.server.wifi.Clock clock, android.util.LocalLog localLog) { mWifiConfigManager = configManager; mWifiInfo = wifiInfo; mClock = clock; mLocalLog = localLog; }<END_MOD>
@java.lang.Override public <START_MOD>void writeToParcel(android.os.Parcel dest, <END_MOD>int <START_MOD>flags<END_MOD>) { <START_MOD>if<END_MOD> <START_MOD>(android.telephony.CellIdentityLte.DBG) android.telephony.CellIdentityLte.log(( int):   + (toString()))); super.writeToParcel(dest, flags, android.telephony.TYPE_LTE); dest.writeInt(mCi); dest.writeInt(mPci); dest.writeInt(mTac); dest.writeInt(mEarfcn); dest.writeString(mMccStr); dest.writeString(mMncStr); dest.writeString(mAlphaLong); dest.writeString(mAlphaShort)<END_MOD>; }
private static void signFile(java.util.jar.Manifest manifest, java.security.cert.X509Certificate[] publicKey, java.security.PrivateKey[] privateKey, java.util.jar.JarOutputStream outputJar<START_MOD>, boolean additionallySignedUsingAnApkSignatureScheme<END_MOD>) throws java.lang.Exception { long timestamp = (publicKey[0].getNotBefore().getTime()) + (3600L * 1000); java.util.jar.JarEntry je = new java.util.jar.JarEntry(java.util.jar.JarFile.MANIFEST_NAME); je.setTime(timestamp); outputJar.putNextEntry(je); manifest.write(outputJar); int numKeys = publicKey.length; for (int k = 0; k < numKeys; ++k) { je = new java.util.jar.JarEntry((numKeys == 1 ? com.android.signapk.SignApk.CERT_SF_NAME : java.lang.String.format(com.android.signapk.SignApk.CERT_SF_MULTI_NAME, k))); je.setTime(timestamp); outputJar.putNextEntry(je); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); com.android.signapk.SignApk.writeSignatureFile(manifest, baos, com.android.signapk.SignApk.getDigestAlgorithm(publicKey[k])<START_MOD>, additionallySignedUsingAnApkSignatureScheme<END_MOD>); byte[] signedData = baos.toByteArray(); outputJar.write(signedData); final java.lang.String keyType = publicKey[k].getPublicKey().getAlgorithm(); je = new java.util.jar.JarEntry((numKeys == 1 ? java.lang.String.format(com.android.signapk.SignApk.CERT_SIG_NAME, keyType) : java.lang.String.format(com.android.signapk.SignApk.CERT_SIG_MULTI_NAME, k, keyType))); je.setTime(timestamp); outputJar.putNextEntry(je); com.android.signapk.SignApk.writeSignatureBlock(new org.bouncycastle.cms.CMSProcessableByteArray(signedData), publicKey[k], privateKey[k], outputJar); } }
<START_MOD>public android.service.euicc.OperatorId getOperatorId() { return operatorId; }<END_MOD>
<START_MOD>@java.lang.Override public com.android.ahat.heapdump.Reference get(int index) { com.android.ahat.heapdump.FieldValue field = mStaticFieldValues[index]; com.android.ahat.heapdump.Value value = field.value; if ((value != null) && (value.isAhatInstance())) { return new com.android.ahat.heapdump.Reference(src, ("." + (field.name)), value.asAhatInstance(), true); } return null; }<END_MOD>
@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { default : loge(( Event   + (msg.what))); } }
<START_MOD>@org.junit.Test public void validateEapTtlsUserCredentialWithoutClientCertChain() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential(); cred.realm = "realm"; cred.userCredential = new android.net.wifi.hotspot2.pps.Credential.UserCredential(); cred.userCredential.username = "username"; cred.userCredential.password = "password"; cred.userCredential.eapType = Credential.EAP_TLS; cred.certCredential = new android.net.wifi.hotspot2.pps.Credential.CertificateCredential(); cred.certCredential.certType = "x509v3"; cred.certCredential.certSha256FingerPrint = java.security.MessageDigest.getInstance("SHA-256").digest(FakeKeys.CLIENT_CERT.getEncoded()); cred.caCertificate = android.net.wifi.FakeKeys.CA_CERT0; cred.clientPrivateKey = android.net.wifi.FakeKeys.RSA_KEY1; assertFalse(cred.validate()); }<END_MOD>
<START_MOD>private<END_MOD> static java.lang.String <START_MOD>getEtwsPrimaryMessage(android.content.Context<END_MOD> <START_MOD>context,<END_MOD> <START_MOD>int<END_MOD> <START_MOD>category<END_MOD>) { android.<START_MOD>content<END_MOD>.<START_MOD>res<END_MOD>.<START_MOD>Resources<END_MOD> <START_MOD>r<END_MOD> = <START_MOD>context<END_MOD>.<START_MOD>getResources<END_MOD>(); <START_MOD>switch<END_MOD> (<START_MOD>category<END_MOD>) <START_MOD>{ case<END_MOD> android.telephony.<START_MOD>SmsCbEtwsInfo<END_MOD>.<START_MOD>ETWS_WARNING_TYPE_EARTHQUAKE<END_MOD> :<START_MOD> return r.getString(R.string.etws_primary_default_message_earthquake); case<END_MOD> android.telephony.<START_MOD>SmsCbEtwsInfo<END_MOD>.<START_MOD>ETWS_WARNING_TYPE_TSUNAMI :<END_MOD> return <START_MOD>r.getString(R.string.etws_primary_default_message_tsunami); case<END_MOD> android.telephony.<START_MOD>SmsCbEtwsInfo.ETWS_WARNING_TYPE_EARTHQUAKE_AND_TSUNAMI : return r.getString<END_MOD>(<START_MOD>R.string.etws_primary_default_message_earthquake_and_tsunami); case <END_MOD>android.telephony.<START_MOD>SmsCbEtwsInfo<END_MOD>.<START_MOD>ETWS_WARNING_TYPE_TEST_MESSAGE<END_MOD> <START_MOD>: return r<END_MOD>.<START_MOD>getString<END_MOD>(<START_MOD>R.string.etws_primary_default_message_test<END_MOD>)<START_MOD>;<END_MOD> <START_MOD>case android<END_MOD>.<START_MOD>telephony.SmsCbEtwsInfo.ETWS_WARNING_TYPE_OTHER_EMERGENCY : return r.getString<END_MOD>(<START_MOD>R.string.etws_primary_default_message_others<END_MOD>)<START_MOD>;<END_MOD> <START_MOD>default<END_MOD> <START_MOD>:<END_MOD> <START_MOD>return<END_MOD> <START_MOD>""<END_MOD>; } }
@java.lang.Override public com.android.jack.dx.dex.file.IndexedItem get(com.android.jack.dx.rop.cst.Constant cst) { <START_MOD>assert<END_MOD> cst <START_MOD>!=<END_MOD> null<START_MOD>;<END_MOD> throwIfNotPrepared(); com.android.jack.dx.rop.type.Type type = ((com.android.jack.dx.rop.cst.CstType) (cst)).getClassType(); com.android.jack.dx.dex.file.IndexedItem result = classDefs.get(type); if (result == null) { throw new java.lang.IllegalArgumentException( found } return result; }
boolean okToConnect(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.btservice.AdapterService adapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); int priority = mService.getPriority(device); if ((adapterService == null) || (adapterService.isQuietModeEnabled())) { return false; } if (((android.bluetooth.BluetoothProfile.PRIORITY_OFF) < priority) || (((android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED) == priority) && ((device.getBondState()) != (android.bluetooth.BluetoothDevice.BOND_NONE)))) { return true; } return false; }
public void add(int index, int value) { <START_MOD>checkBounds<END_MOD>(index); ensureCapacity(1); if (((mSize) - index) != 0) { java.lang.System.arraycopy(mValues, index, mValues, (index + 1), ((mSize) - index)); } mValues[index] = value; (mSize)++; }
<START_MOD>private void checkFrexpFloatInt() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation outIptr = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32(mRS), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocOutIptr(outIptr); script.forEach_testFrexpFloatInt(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFrexpFloatInt: " + (e.toString()))); } try { android.renderscript.Allocation outIptr = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32(mRS), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocOutIptr(outIptr); scriptRelaxed.forEach_testFrexpFloatInt(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFrexpFloatInt: " + (e.toString()))); } }<END_MOD>
native void rsnAllocationRead(long con, long id, java.lang.Object d, int dt<START_MOD>, int mSize, boolean usePadding, byte[] buffer<END_MOD>);
@java.lang.Override @javax.annotation.Nonnull java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.ParentVFile file, boolean append) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.WRITE); <START_MOD>com.android.sched.util.log.TracerFactory.getTracer().getStatistic(com.android.sched.vfs.DirectFS.WRITTEN_PHYSICAL_FILES).incValue(); <END_MOD>java.io.File path = getNativeFile(file.getPath()); try { return new java.io.FileOutputStream(path, append); } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.WRITE); throw new com.android.sched.util.ConcurrentIOException(e); } }
public native <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.StructUcred getsockoptUcred(java.io.FileDescriptor fd, int level, int option) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
<START_MOD>@android.annotation.Nullable android.telephony.SignalStrength getSignalStrength() { return getSignalStrength(getSubId()); }<END_MOD>
<START_MOD>private void sendDeviceState(com.android.internal.telephony.DeviceStateMonitor.DeviceStateType type, boolean state) { mLocalLog.log(((("send type: " + type) + ", state=") + state)); mPhone.mCi.sendDeviceState(type, state, null); }<END_MOD>
private void notifyHandshakeCompletedListeners() { if (((listeners) != null) && (!(listeners.isEmpty()))) { javax.net.ssl.HandshakeCompletedEvent event = new javax.net.ssl.HandshakeCompletedEvent(this, <START_MOD>sslParameters.getSession()<END_MOD>); for (javax.net.ssl.HandshakeCompletedListener listener : listeners) { try { listener.handshakeCompleted(event); } catch (java.lang.RuntimeException e) { java.lang.Thread thread = java.lang.Thread.currentThread(); thread.getUncaughtExceptionHandler().uncaughtException(thread, e); } } } }
<START_MOD>@org.junit.Test public void testCreateApInterfaceNoInitMode() throws java.lang.Exception { final java.lang.String name = "ap0"; com.android.server.wifi.HalDeviceManagerTest.BaselineChip chipMock = new com.android.server.wifi.HalDeviceManagerTest.BaselineChip(); chipMock.initialize(); mInOrder = inOrder(mServiceManagerMock, mWifiMock, chipMock.chip, mManagerStatusCallbackMock); executeAndValidateStartupSequence(); com.android.server.wifi.HalDeviceManager.InterfaceDestroyedListener idl = mock(HalDeviceManager.InterfaceDestroyedListener.class); com.android.server.wifi.HalDeviceManager.InterfaceAvailableForRequestListener iafrl = mock(HalDeviceManager.InterfaceAvailableForRequestListener.class); android.hardware.wifi.V1_0.IWifiApIface iface = ((android.hardware.wifi.V1_0.IWifiApIface) (validateInterfaceSequence(chipMock, false, (-1000), IfaceType.AP, name, com.android.server.wifi.HalDeviceManagerTest.BaselineChip.AP_CHIP_MODE_ID, null, idl, iafrl))); mDut.removeIface(iface); mTestLooper.dispatchAll(); mInOrder.verify(chipMock.chip).removeApIface(name); verify(idl).onDestroyed(); verifyNoMoreInteractions(mManagerStatusCallbackMock, idl, iafrl); }<END_MOD>
void startScreenRecorder(@com.android.annotations.NonNull java.lang.String remoteFilePath, @com.android.annotations.NonNull com.android.ddmlib.ScreenRecorderOptions options, @com.android.annotations.NonNull com.android.ddmlib.IShellOutputReceiver receiver) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException<START_MOD>, java.lang.InterruptedException<END_MOD>;
<START_MOD>public static boolean endsWith(java.lang.CharSequence sequence, java.lang.CharSequence suffix) { return com.android.SdkUtils.endsWith(sequence, sequence.length(), suffix); }<END_MOD>
<START_MOD>public void testDecodeInt64() { final java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (127)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (128)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)) }); final long[] expected = new long[]{ 0L, 9223372036854775807L, -9223372036854775808L, -1L }; com.android.tools.rpclib.binary.Decoder d = new com.android.tools.rpclib.binary.Decoder(input); try { for (long s64 : expected) { assertEquals(s64, d.int64()); } } catch (java.io.IOException ex) { assertNull(ex); } }<END_MOD>
@java.lang.Override public void await(java.io.File <START_MOD>directory<END_MOD>) { run.androidSdk.waitForDevice(); run.androidSdk.<START_MOD>waitForDirectory<END_MOD>(<START_MOD>directory<END_MOD>, (5 * 60)); run.androidSdk.remount(); }
@org.junit.Test public void testStartStopFlow() throws java.lang.Exception {<START_MOD> mInOrder = inOrder(mServiceManagerMock, mWifiMock, mManagerStatusCallbackMock);<END_MOD> executeAndValidateStartupSequence(); mDut.stop(); mTestLooper.dispatchAll(); mInOrder.verify(mWifiMock).stop(); mInOrder.verify(mManagerStatusCallbackMock).onStop(); verifyNoMoreInteractions(mManagerStatusCallbackMock); }
<START_MOD>public boolean setPowerSave(java.lang.String groupIfName, boolean enable) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure())) return false; com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult((((("setPowerSave(" + groupIfName) + ", ") + enable) + ")")); try { result.setResult(mISupplicantP2pIface.setPowerSave(groupIfName, enable)); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ("ISupplicantP2pIface exception: " + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }<END_MOD>
private void updateButtonState() { java.lang.String hostname = mHostnameView.getText().toString(); java.util.regex.Matcher <START_MOD>uriMatcher<END_MOD> = com.android.bips.ui.AddManualPrinterDialog.<START_MOD>PRINTER_URI_PATTERN<END_MOD>.matcher(hostname); mAddButton.setEnabled(<START_MOD>uriMatcher<END_MOD>.matches()); }
@java.lang.Override public void close(java.io.FileDescriptor fd) throws android.system.ErrnoException { try { if (<START_MOD>(fd != null) && (<END_MOD>fd.isSocket$(<START_MOD>)<END_MOD>)) { if (libcore.io.BlockGuardOs.isLingerSocket(fd)) { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); } } } catch (android.system.ErrnoException ignored) { } os.close(fd); }
<START_MOD>@java.lang.Override public void onCustomSlowCall(java.lang.String name) { throw new java.lang.RuntimeException(("onCustomSlowCall: " + name)); }<END_MOD>
<START_MOD>public java.util.Map<com.android.tools.perflib.heap.Field, java.lang.Object> getStaticFields() { java.util.Map<com.android.tools.perflib.heap.Field, java.lang.Object> result = new java.util.HashMap<com.android.tools.perflib.heap.Field, java.lang.Object>(); getBuffer().setPosition(mStaticFieldsOffset); int numEntries = readUnsignedShort(); for (int i = 0; i < numEntries; i++) { com.android.tools.perflib.heap.Field f = mStaticFields[i]; readId(); readUnsignedByte(); java.lang.Object value = readValue(f.getType()); result.put(f, value); } return result; }<END_MOD>
<START_MOD>@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); }<END_MOD>
<START_MOD>private void checkTgammaFloat2() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testTgammaFloat2(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testTgammaFloat2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testTgammaFloat2(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testTgammaFloat2: " + (e.toString()))); } }<END_MOD>
<START_MOD>@java.lang.Override public void run() { synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_READY); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); boolean error_occured = false; boolean is_debugger_connected = false; boolean is_debugging_enabled = false; long last_debugger_activity = -1; try { java.lang.Thread.sleep(100); java.lang.Class<?> vmdebug = java.lang.Class.forName("dalvik.system.VMDebug"); java.lang.reflect.Method isDebuggerConnectedMethod = vmdebug.getDeclaredMethod("isDebuggerConnected"); java.lang.reflect.Method isDebuggingEnabledMethod = vmdebug.getDeclaredMethod("isDebuggingEnabled"); java.lang.reflect.Method lastDebuggerActivityMethod = vmdebug.getDeclaredMethod("lastDebuggerActivity"); is_debugger_connected = ((boolean) (isDebuggerConnectedMethod.invoke(null))); is_debugging_enabled = ((boolean) (isDebuggingEnabledMethod.invoke(null))); last_debugger_activity = ((long) (lastDebuggerActivityMethod.invoke(null))); } catch (java.lang.NoSuchMethodException e) { error_occured = true; logWriter.println(("Unable to find one of the VMDebug methods!" + e)); } catch (java.lang.ClassNotFoundException e) { error_occured = true; logWriter.println("Could not find VMDebug"); } catch (java.lang.Exception e) { logWriter.println(("Other exception occured " + e)); error_occured = true; } SendResult(error_occured, is_debugger_connected, is_debugging_enabled, last_debugger_activity); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); }<END_MOD>
void testFloat2(<START_MOD>android.renderscript.RenderScript rs, <END_MOD>com.android.rs.test.ScriptC_copy_test s) { <START_MOD>android.renderscript<END_MOD>.Allocation a1 = <START_MOD>android.renderscript<END_MOD>.Allocation.createSized(rs, <START_MOD>android.renderscript<END_MOD>.Element.F32_2(rs), 1024); <START_MOD>android.renderscript<END_MOD>.Allocation a2 = <START_MOD>android.renderscript<END_MOD>.Allocation.createSized(rs, <START_MOD>android.renderscript<END_MOD>.Element.F32_2(rs), 1024); float[] f1 = new float[1024 * 2]; float[] f2 = new float[1024 * 2]; for (int ct = 0; ct < (f1.length); ct++) { f1[ct] = ((float) (ct)); } a1.copyFrom(f1); s.forEach_copyFloat2(a1, a2); a2.copyTo(f2); for (int ct = 0; ct < (f1.length); ct++) { if ((f1[ct]) != (f2[ct])) { failTest(); android.util.Log.v( Test ((((( failed at   + ct) +     + (f1[ct])) +     + (f2[ct]))); } } a1.destroy(); a2.destroy(); }
<START_MOD>@java.lang.Override public java.nio.file.Path readSymbolicLink(java.nio.file.Path obj1) throws java.io.IOException { sun.nio.fs.UnixPath link = sun.nio.fs.UnixPath.toUnixPath(obj1); java.lang.SecurityManager sm = java.lang.System.getSecurityManager(); if (sm != null) { java.io.FilePermission perm = new java.io.FilePermission(link.getPathForPermissionCheck(), sun.security.util.SecurityConstants.FILE_READLINK_ACTION); java.security.AccessController.checkPermission(perm); } try { byte[] target = sun.nio.fs.UnixNativeDispatcher.readlink(link); return new sun.nio.fs.UnixPath(link.getFileSystem(), target); } catch (sun.nio.fs.UnixException x) { if ((x.errno()) == (sun.nio.fs.UnixConstants.EINVAL)) throw new java.nio.file.NotLinkException(link.getPathForExceptionMessage()); x.rethrowAsIOException(link); return null; } }<END_MOD>
<START_MOD>private boolean shouldNumberBePlacedOnIms(boolean isEmergency, java.lang.String number) { int processCallResult; try { if ((mImsManager) != null) { processCallResult = mImsManager.shouldProcessCall(isEmergency, new java.lang.String[]{ number }); android.telephony.Rlog.i(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ((("shouldProcessCall: number: " + (android.telephony.Rlog.pii(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, number))) + ", result: ") + processCallResult)); } else { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, "ImsManager unavailable, shouldProcessCall returning false."); return false; } } catch (com.android.ims.ImsException e) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, "ImsService unavailable, shouldProcessCall returning false."); return false; } if (processCallResult == (android.telephony.ims.feature.MmTelFeature.PROCESS_CALL_IMS)) { return true; } else if (processCallResult == (android.telephony.ims.feature.MmTelFeature.PROCESS_CALL_CSFB)) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, "shouldProcessCall: place over CSFB instead."); return false; } else { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, "shouldProcessCall returned unknown result."); return false; } }<END_MOD>
public void continueOperation(android.content.Intent resolutionIntent, android.os.Bundle resolutionExtras) { if (!(isEnabled())) { android.app.PendingIntent callbackIntent = resolutionIntent.getParcelableExtra(android.telephony.euicc.EuiccManager.EXTRA_EMBEDDED_SUBSCRIPTION_RESOLUTION_CALLBACK_INTENT); if (callbackIntent != null) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); } return; } <START_MOD>com.<END_MOD>android<START_MOD>.internal<END_MOD>.telephony.euicc.<START_MOD>IEuiccController controller = <END_MOD>getIEuiccController()<START_MOD>; if (controller == null) return; try { controller<END_MOD>.continueOperation(resolutionIntent, resolutionExtras); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public static void main(java.lang.String[] args) { java.lang.System.out.println(Main.$opt$noinline$foo(new Main())); java.lang.System.out.println(Main.<START_MOD>$noinline$runSmaliTest("$opt$noinline$foo", new Main())); java.lang.System.out.println(Main.<END_MOD>$opt$noinline$foo(<START_MOD>new SubMain())); java.lang.System.out.println(Main.$noinline$runSmaliTest("$opt$noinline$foo", <END_MOD>new SubMain())); java.lang.System.out.println(Main.$opt$noinline$foo(new SubSubMain())); <START_MOD>java.lang.System.out.println(Main.$noinline$runSmaliTest("$opt$noinline$foo", new SubSubMain())); <END_MOD>}
<START_MOD>private void checkCompleted() { if (!(mCompleted)) { throw new java.lang.IllegalStateException("Key agreement not completed"); } }<END_MOD>
<START_MOD>private static android.telecom.Logging.Events getEvents() { if ((android.telecom.Log.sEvents) == null) { synchronized(android.telecom.Log.sSingletonSync) { if ((android.telecom.Log.sEvents) == null) { android.telecom.Log.sEvents = new android.telecom.Logging.Events(android.telecom.Log::getSessionId); return android.telecom.Log.sEvents; } } } return android.telecom.Log.sEvents; }<END_MOD>
@java.lang.Override protected com.android.bluetooth.<START_MOD>opp<END_MOD>.IProfileServiceBinder initBinder() { return null; }
public com.android.builder.VariantConfiguration <START_MOD>setDependencies<END_MOD>(@com.android.annotations.NonNull java.util.List<<START_MOD>? extends <END_MOD>com.android.builder.<START_MOD>DependencyContainer<END_MOD>> <START_MOD>containers<END_MOD>) { <START_MOD>for<END_MOD> (<START_MOD>com.android.builder.DependencyContainer<END_MOD> <START_MOD>container<END_MOD> <START_MOD>: containers<END_MOD>) { mDirectLibraries.addAll(<START_MOD>container.getAndroidDependencies()); mJars.addAll(container.getJarDependencies()); mJars.addAll(container.getLocalDependencies()<END_MOD>); } resolveIndirectLibraryDependencies(mDirectLibraries, mFlatLibraries); <START_MOD>for (com.android.builder.AndroidDependency androidDependency : mFlatLibraries) { mJars.addAll(androidDependency.getLocalDependencies()); } <END_MOD>return this; }
<START_MOD>@java.lang.Override @javax.annotation.Nonnull com.android.sched.vfs.VPath getPathFromDir(@javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent, @javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVFile file) { return null; }<END_MOD>
private synchronized void addMediaPlayerController(android.media.session.MediaController controller) { java.lang.String packageName = controller.getPackageName(); removeMediaPlayerInfo(packageName); com.android.bluetooth.avrcp.MediaPlayerInfo info = new com.android.bluetooth.avrcp.MediaPlayerInfo(com.android.bluetooth.avrcp.MediaController.wrap(controller), AvrcpConstants.PLAYER_TYPE_AUDIO, AvrcpConstants.PLAYER_SUBTYPE_NONE, getPlayStateBytes(controller.getPlaybackState()), getFeatureBitMask(packageName), <START_MOD>controller.getPackageName(), <END_MOD>getAppLabel(packageName)); addMediaPlayerInfo(info); }
@com.android.annotations.NonNull @java.lang.Override public com.android.builder.core.VariantConfiguration addProductFlavor(@com.android.annotations.NonNull com.android.build.gradle.internal.dsl.<START_MOD>GradleGroupableProductFlavor<END_MOD> productFlavor, @com.android.annotations.NonNull com.android.builder.model.SourceProvider sourceProvider, @com.android.annotations.NonNull java.lang.String dimensionName) { checkNotNull(productFlavor); checkNotNull(sourceProvider); checkNotNull(dimensionName); super.addProductFlavor(productFlavor, sourceProvider, dimensionName); computeNdkConfig(); return this; }
@java.lang.Override @javax.annotation.Nonnull public com.android.sched.util.file.OutputStreamFile checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) throws com.android.sched.util.codec.ParsingException { super.checkString(context, string); if (<START_MOD>(<END_MOD>string.equals(com.android.sched.util.codec.STANDARD_IO_NAME)) <START_MOD>|| (string.equals(com.android.sched.util.codec.ERROR_IO_NAME))) <END_MOD>{ return new com.android.sched.util.file.OutputStreamFile(<START_MOD>string<END_MOD>); } else { try { return new com.android.sched.util.file.OutputStreamFile(string, context.getRunnableHooks(), existence, change, append); } catch (java.io.IOException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } } }
<START_MOD>static java.lang.Thread getHeapTaskDaemon() throws java.lang.Exception { java.lang.reflect.Field f = java.lang.ThreadGroup.class.getDeclaredField("systemThreadGroup"); f.setAccessible(true); java.lang.ThreadGroup systemThreadGroup = ((java.lang.ThreadGroup) (f.get(null))); while (true) { int activeCount = systemThreadGroup.activeCount(); java.lang.Thread[] array = new java.lang.Thread[activeCount]; systemThreadGroup.enumerate(array); for (java.lang.Thread thread : array) { if (thread.getName().equals("HeapTaskDaemon")) { return thread; } } java.lang.Thread.sleep(10); } }<END_MOD>
<START_MOD>public boolean allowsUid(int uid) { if (null == (mAllowedUids)) return true; for (android.net.UidRange range : mAllowedUids) { if (range.contains(uid)) { return true; } } return false; }<END_MOD>
<START_MOD>@java.lang.Override public java.nio.ByteBuffer getByteBuffer(long offset, int size) throws java.io.IOException { if ((offset + size) > (mTotalSize)) { throw new java.lang.IndexOutOfBoundsException("Requested more than available"); } com.android.apksig.util.ReadableDataSink sink = com.android.apksig.util.DataSinks.newInMemoryDataSink(size); feed(offset, size, sink); return sink.getByteBuffer(0, size); }<END_MOD>
private void prepareInternal(java.lang.String newPackage) { long token = android.os.Binder.clearCallingIdentity(); try { if ((mInterface) != null) { mStatusIntent = null; agentDisconnect(); jniReset(mInterface); mInterface = null; <START_MOD>mNetworkCapabilities.setAllowedUids(null)<END_MOD>; } if ((mConnection) != null) { try { mConnection.mService.transact(IBinder.LAST_CALL_TRANSACTION, android.os.Parcel.obtain(), null, IBinder.FLAG_ONEWAY); } catch (java.lang.Exception e) { } mContext.unbindService(mConnection); mConnection = null; } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } try { mNetd.denyProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, ((( to disallow UID   + (mOwnerUID)) +   to call protect()   + e)); } android.util.Log.i(com.android.server.connectivity.Vpn.TAG, ((( from   + (mPackage)) +   to   + newPackage)); mPackage = newPackage; mOwnerUID = getAppUid(newPackage, mUserHandle); try { mNetd.allowProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, ((( to allow UID   + (mOwnerUID)) +   to call protect()   + e)); } mConfig = null; updateState(DetailedState.IDLE, "prepare"); setVpnForcedLocked(mLockdown); } finally { android.os.Binder.restoreCallingIdentity(token); } }
public void registerBuildTypeSourceProvider(@com.android.annotations.NonNull java.lang.String name, @com.android.annotations.NonNull com.android.build.gradle.internal.dsl.BuildType buildType, @com.android.annotations.NonNull com.android.builder.model.SourceProvider sourceProvider) { if ((extraArtifactMap.get(name)) == null) { throw new java.lang.IllegalArgumentException(<START_MOD>java.lang.String.format(<END_MOD> with name <START_MOD>%s<END_MOD> is not yet registered. Use registerArtifactType()<START_MOD> name));<END_MOD> } extraBuildTypeSourceProviders.put(buildType.getName(), new com.android.build.gradle.internal.variant.DefaultSourceProviderContainer(name, sourceProvider)); }
<START_MOD>private boolean isPowerSaveModeOn() { android.os.PowerManager pm = ((android.os.PowerManager) (mPhone.getContext().getSystemService(Context.POWER_SERVICE))); return pm.isPowerSaveMode(); }<END_MOD>
static java.math.BigInt bigExp(java.math.BigInt a, java.math.BigInt p) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_exp(r.<START_MOD>nativePtr<END_MOD>, a.<START_MOD>nativePtr<END_MOD>, p.<START_MOD>nativePtr<END_MOD>); return r; }
<START_MOD>public boolean CheckVcardSelector(java.lang.String vcard, java.lang.String vcardselectorop) { boolean selectedIn = true; for (com.android.bluetooth.pbap.BluetoothPbapVcardManager.PropertySelector.PropertyMask bit : com.android.bluetooth.pbap.BluetoothPbapVcardManager.PropertySelector.PropertyMask.values()) { if (checkbit(bit.pos, selector)) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("checking for prop :" + (bit.prop))); if (vcardselectorop.equals("0")) { if (checkprop(vcard, bit.prop)) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("bit.prop.equals current prop :" + (bit.prop))); selectedIn = true; break; } else { selectedIn = false; } } else if (vcardselectorop.equals("1")) { if (!(checkprop(vcard, bit.prop))) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("bit.prop.notequals current prop" + (bit.prop))); selectedIn = false; return selectedIn; } else { selectedIn = true; } } } } return selectedIn; }<END_MOD>
private void startBrowsedPlayer(int browseId) { <START_MOD>com.android.bluetooth.avrcp.BrowsePlayerInfo player = null; synchronized(mBrowsePlayerInfoList) { <END_MOD>if ((browseId < 0) || (browseId >= (mBrowsePlayerInfoList.size()))) return; player = mBrowsePlayerInfoList.get(browseId);<START_MOD> }<END_MOD> android.content.Intent intent = new android.content.Intent(); intent.setComponent(new android.content.ComponentName(player.packageName, player.serviceClass)); android.util.Log.i(com.android.bluetooth.avrcp.Avrcp.TAG, ((( service: + (player.packageName)) +     + (player.serviceClass))); try { mContext.startService(intent); } catch (java.lang.SecurityException ex) { android.util.Log.e(com.android.bluetooth.avrcp.Avrcp.TAG, ((( start   + (player.serviceClass)) +     + (ex.getMessage()))); } }
<START_MOD>@org.junit.Test public void requestR1ANQPElementsWithRC() throws java.lang.Exception { when(mHandler.requestANQP(com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID, com.android.server.wifi.hotspot2.ANQPRequestManagerTest.R1_ANQP_WITH_RC)).thenReturn(true); assertTrue(mManager.requestANQPElements(com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID, com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_ANQP_KEY, true, false)); }<END_MOD>
<START_MOD>public static android.telephony.MbmsDownloadManager createManager(android.content.Context context, android.telephony.mbms.IMbmsDownloadManagerListener listener, java.lang.String downloadAppName) throws android.telephony.mbms.MbmsInitializationException { android.telephony.MbmsDownloadManager mdm = new android.telephony.MbmsDownloadManager(context, listener, downloadAppName, android.telephony.SubscriptionManager.getDefaultSubscriptionId()); mdm.bindAndInitialize(); return mdm; }<END_MOD>
<START_MOD>public static boolean updateBandwidths(int[] bandwidths, android.telephony.ServiceState serviceState) { if (bandwidths == null) { return false; } int ssAggregateBandwidth = 0; int[] ssBandwidths = serviceState.getCellBandwidths(); if (ssBandwidths != null) { for (int bw : ssBandwidths) { ssAggregateBandwidth += bw; } } int newAggregateBandwidth = 0; for (int bw : bandwidths) { newAggregateBandwidth += bw; } if (newAggregateBandwidth > ssAggregateBandwidth) { serviceState.setCellBandwidths(bandwidths); return true; } return false; }<END_MOD>
public void iccOpenLogicalChannel(java.lang.String AID<START_MOD>, byte p2<END_MOD>, android.os.Message response) { loglocal((((((<START_MOD>((<END_MOD> Logical Channel:   + AID<START_MOD>) +   ,   + p2<END_MOD>) +   by pid: + (android.os.Binder.getCallingPid())) +   uid: + (android.os.Binder.getCallingUid()))); mCi.iccOpenLogicalChannel(AID, <START_MOD>p2, <END_MOD>mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_OPEN_LOGICAL_CHANNEL_DONE, response)); }
@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println( dump in APP SERVICES, see bluetooth_manager section. writer.println( --print argument for dumpsys direct from AdapterService. return; } verboseLog(( arguments, check for protobuf output:   + (android.text.TextUtils.join(   args)))); if (args[0].startsWith("--proto")) { if (args[0].equals("--proto-bin")) { dumpMetrics(fd); } else if (args[0].equals("--proto-java-bin")) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ( dump, empty metrics size is   + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog( to write Java protobuf to file descriptor. } } return; } writer.println( devices: for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println((((((   + (device.getAddress())) +   [ + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) +     + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.bluetooth.btservice.ProfileService profile : <START_MOD>mRegisteredProfiles<END_MOD>) { profile.dump(sb); } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }
@java.lang.Override public void onLinkPropertiesChanged(android.net.Network network, android.net.LinkProperties newLp) { handleLinkProp(network, newLp); }
<START_MOD>public static synchronized void setCleartextTrafficPermitted(boolean permitted) { libcore.net.NetworkSecurityPolicy.cleartextTrafficPermitted = permitted; }<END_MOD>
<START_MOD>@org.junit.Test public void testStateTransition_ConnectedToAudioOn_StackAudioConnected() { setUpConnectedState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_CONNECTING, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.AudioOn.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getAudioStateBroadcastMatcher(mTestDevice, BluetoothHeadset.STATE_AUDIO_CONNECTED, BluetoothHeadset.STATE_AUDIO_DISCONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }<END_MOD>
@org.junit.Test public void testFileAccessError003() throws java.lang.Exception { com.android.jack.<START_MOD>error.FileAccessErrorTest.assumeNotWindows(); com.android.jack.<END_MOD>test.helper.ErrorTestHelper te = new com.android.jack.test.helper.ErrorTestHelper(); java.io.File a = com.android.jack.test.toolchain.AbstractTestTools.createFile(te.getSourceFolder(), "jack.incremental", "A.java", ( jack.incremental;   +   class A {}   if (!(a.setReadable(false))) { junit.framework.Assert.fail(( to change file permissions of   + (a.getAbsolutePath()))); } com.android.jack.test.toolchain.JackApiToolchainBase jackApiToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchainBase.class); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackApiToolchain.setErrorStream(errOut); try { jackApiToolchain.addToClasspath(jackApiToolchain.getDefaultBootClasspath()).srcToExe(te.getOutputDexFolder(), false, te.getSourceFolder()); junit.framework.Assert.fail(); } catch (com.android.jack.JackUserException e) { junit.framework.Assert.assertTrue(e.getMessage().contains( not readable } finally { if (!(a.setReadable(true))) { junit.framework.Assert.fail(( to change file permissions of   + (a.getAbsolutePath()))); } } }
<START_MOD>@java.lang.Override public void onRttConnectionFailure(java.lang.String callId, android.telecom.Logging.Session.Info sessionInfo) throws android.os.RemoteException { android.telecom.Log.startSession(sessionInfo, "CSW.oRCF"); long token = android.os.Binder.clearCallingIdentity(); try { synchronized(mLock) { com.android.server.telecom.Call call = mCallIdMapper.getCall(callId); if (call != null) { call.onRttConnectionFailure(); } } } finally { android.os.Binder.restoreCallingIdentity(token); android.telecom.Log.endSession(); } }<END_MOD>
<START_MOD>public void testTrunc() { checkTruncFloat(); checkTruncFloat2(); checkTruncFloat3(); checkTruncFloat4(); }<END_MOD>
<START_MOD>private void checkLogFloat3() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testLogFloat3(in, out); verifyResultsLogFloat3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLogFloat3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLogFloat3(in, out); verifyResultsLogFloat3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLogFloat3: " + (e.toString()))); } }<END_MOD>
public synchronized boolean appliesToUid(int uid) { if (!(isRunningLocked())) { return false; } <START_MOD>return<END_MOD> <START_MOD>mNetworkCapabilities<END_MOD>.<START_MOD>allowsUid<END_MOD>(uid); }
public void logCall(com.android.internal.telephony.CallerInfo ci, java.lang.String number, int presentation, int callType, long start, long duration<START_MOD>, int disconnectCause<END_MOD>) { final boolean isEmergencyNumber = android.telephony.PhoneNumberUtils.isLocalEmergencyNumber(number, mApplication); final boolean okToLogEmergencyNumber = mApplication.getResources().getBoolean(R.bool.allow_emergency_numbers_in_call_log); boolean isOkToLogThisCall = (!isEmergencyNumber) || okToLogEmergencyNumber; if (isOkToLogThisCall) { if (com.android.phone.CallLogger.DBG) { log((((((((((((<START_MOD>((<END_MOD> Calllog entry:   + ci) +     + (com.android.phone.PhoneUtils.toLogSafePhoneNumber(number))) + ",") + presentation) +     + callType) +     + start) +     + duration)<START_MOD> +     + (android.telephony.DisconnectCause.toString(disconnectCause)))<END_MOD>); } com.android.phone.common.CallLogAsync.AddCallArgs args = new com.android.phone.common.CallLogAsync.AddCallArgs(mApplication, ci, number, presentation, callType, start, duration<START_MOD>, disconnectCause<END_MOD>); mCallLog.addCall(args); } }
private void rejectCallWithMessage(android.content.Context context, java.lang.String phoneNumber, java.lang.String textMessage, int subId<START_MOD>, java.lang.String contactName<END_MOD>) { if (<START_MOD>(<END_MOD>textMessage != null) <START_MOD>&& (!(android.text.TextUtils.isEmpty(textMessage)))) <END_MOD>{ final android.content.ComponentName component = com.android.internal.telephony.SmsApplication.getDefaultRespondViaMessageApplication(context, true); if (component != null) { final android.net.Uri uri = android.net.Uri.fromParts(Constants.SCHEME_SMSTO, phoneNumber, null); final android.content.Intent intent = new android.content.Intent(android.telephony.TelephonyManager.ACTION_RESPOND_VIA_MESSAGE, uri); intent.putExtra(Intent.EXTRA_TEXT, textMessage); if (android.telephony.SubscriptionManager.isValidSubscriptionId(subId)) { intent.putExtra(PhoneConstants.SUBSCRIPTION_KEY, subId); } com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = <START_MOD>(!(android.text.TextUtils.isEmpty(contactName))) ? contactName : <END_MOD>phoneNumber; args.arg2 = context; mHandler.obtainMessage(com.android.server.telecom.RespondViaSmsManager.MSG_SHOW_SENT_TOAST, args).sendToTarget(); intent.setComponent(component); context.startService(intent); } } }
<START_MOD>public void supplyPin(java.lang.String pin, android.os.Message onComplete) { mCi.supplyIccPin(pin, onComplete); }<END_MOD>
<START_MOD>private void addVtsRunnerOutputFile(java.io.File logFile) { java.lang.String fileName = logFile.getName(); com.android.tradefed.result.LogDataType type; if (fileName.endsWith(".html")) { type = com.android.tradefed.result.LogDataType.HTML; } else if (fileName.startsWith("logcat")) { type = com.android.tradefed.result.LogDataType.LOGCAT; } else if ((fileName.startsWith("bugreport")) && (fileName.endsWith(".zip"))) { type = com.android.tradefed.result.LogDataType.BUGREPORTZ; } else if ((fileName.endsWith(".txt")) || (fileName.endsWith(".log"))) { type = com.android.tradefed.result.LogDataType.TEXT; } else if (fileName.endsWith(".zip")) { type = com.android.tradefed.result.LogDataType.ZIP; } else { com.android.tradefed.log.LogUtil.CLog.w("Unknown output file type. Skipping %s", logFile); return; } java.lang.String outputFileName = ((((mTestModuleName) + "_") + fileName) + "_") + (mAbiBitness); com.android.tradefed.result.FileInputStreamSource inputSource = new com.android.tradefed.result.FileInputStreamSource(logFile); mListener.testLog(outputFileName, type, inputSource); }<END_MOD>
<START_MOD>public void verifyCommandDispatchKeyMultiple() { mTvView.dispatchKeyEvent(new android.view.KeyEvent(android.view.KeyEvent.ACTION_MULTIPLE, android.view.KeyEvent.KEYCODE_K)); mInstrumentation.waitForIdleSync(); new android.cts.util.PollingCheck(android.media.tv.cts.TvInputServiceTest.TIME_OUT) { @java.lang.Override protected boolean check() { android.media.tv.cts.TvInputServiceTest.CountingTvInputService.CountingSession session = android.media.tv.cts.TvInputServiceTest.CountingTvInputService.sSession; return (session != null) && ((session.mKeyMultipleCount) > 0); } }.run(); }<END_MOD>
<START_MOD>private void checkAtanpiFloat4() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testAtanpiFloat4(in, out); verifyResultsAtanpiFloat4(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAtanpiFloat4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAtanpiFloat4(in, out); verifyResultsAtanpiFloat4(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAtanpiFloat4: " + (e.toString()))); } }<END_MOD>
<START_MOD>private void checkDegreesFloat() { android.renderscript.Allocation inValue = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inValue, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testDegreesFloat(inValue, out); verifyResultsDegreesFloat(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testDegreesFloat: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testDegreesFloat(inValue, out); verifyResultsDegreesFloat(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testDegreesFloat: " + (e.toString()))); } }<END_MOD>
@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add("name", mName).add("debuggable", mDebuggable).add("testCoverageEnabled", mTestCoverageEnabled).add("jniDebuggable", mJniDebuggable).add(<START_MOD>"pseudolocalize", mPseudolocalize).add(<END_MOD>"renderscriptDebuggable", mRenderscriptDebuggable).add("renderscriptOptimLevel", mRenderscriptOptimLevel).add("applicationIdSuffix", mApplicationIdSuffix).add("versionNameSuffix", mVersionNameSuffix).add("minifyEnabled", mMinifyEnabled).add("zipAlignEnabled", mZipAlignEnabled).add("signingConfig", mSigningConfig).add("embedMicroApp", mEmbedMicroApp).add("mBuildConfigFields", getBuildConfigFields()).add("mResValues", getResValues()).add("mProguardFiles", getProguardFiles()).add("mConsumerProguardFiles", getConsumerProguardFiles()).add("mManifestPlaceholders", getManifestPlaceholders()).toString(); }
private int getListenerKey(java.lang.Object listener) { synchronized(mMapLock) { int valueIndex = mListenerMap.indexOfValue(listener); if (valueIndex != (-1)) { return mListenerMap.keyAt(valueIndex); } } <START_MOD>throw<END_MOD> <START_MOD>new java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>IllegalArgumentException( not registered<END_MOD> }
private void initializeGlobals(android.<START_MOD>renderscript<END_MOD>.RenderScript RS, com.android.rs.test.ScriptC_kernel2d s) { android.<START_MOD>renderscript<END_MOD>.Type.Builder typeBuilder = new android.<START_MOD>renderscript<END_MOD>.Type.Builder(RS, android.<START_MOD>renderscript<END_MOD>.Element.I32(RS)); int X = 2; s.set_gDimX(X); typeBuilder.setX(X); int Y = 5; s.set_gDimY(Y); typeBuilder.setY(Y); A = android.<START_MOD>renderscript<END_MOD>.Allocation.createTyped(RS, typeBuilder.create()); s.set_A(A); B = android.<START_MOD>renderscript<END_MOD>.Allocation.createTyped(RS, typeBuilder.create()); s.set_B(B); return; }
<START_MOD>public synchronized boolean hasPhantom() { return !(((((phantomTypes.isEmpty()) && (phantomClasses.isEmpty())) && (phantomInterfaces.isEmpty())) && (phantomEnums.isEmpty())) && (phantomAnnotations.isEmpty())); }<END_MOD>
private void stopListenForPhoneState() { if (<START_MOD>(mPhoneStateListener) == null<END_MOD>) {<START_MOD> android.util.Log.i(com.android.bluetooth.hfp.HeadsetPhoneState.TAG,   no listener indicates nothing is listening return; }<END_MOD> mTelephonyManager.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE); <START_MOD>mTelephonyManager.setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_NORMAL); mPhoneStateListener<END_MOD> = <START_MOD>null<END_MOD>; }
@java.lang.Override public void write(byte[] buffer, int offset, int byteCount) throws java.io.IOException { java.util.Arrays.checkOffsetAndCount(buffer.length, offset, byteCount); if ((currentEntry) == null) { throw new java.util.zip.ZipException( active entry } <START_MOD>final long totalBytes = (crc.tbytes) + byteCount; <END_MOD>if ((<START_MOD>totalBytes > (Zip64.MAX_ZIP_ENTRY_AND_ARCHIVE_SIZE)) && (!(currentEntryNeedsZip64))) { throw new java.io.IOException((( entry size ( + totalBytes) +   bytes) cannot be represented in the zip format (needs Zip64) } if ((<END_MOD>currentEntry.getMethod()) == (java.util.zip.ZipOutputStream.STORED)) { out.write(buffer, offset, byteCount); } else { super.write(buffer, offset, byteCount); } crc.update(buffer, offset, byteCount); }
<START_MOD>@org.junit.Test public void parseBufferWithEmptyBuffer() throws java.lang.Exception { assertTrue(com.android.server.wifi.hotspot2.anqp.DomainNameElement.parse(java.nio.ByteBuffer.allocate(0)).getDomains().isEmpty()); }<END_MOD>
<START_MOD>public boolean getIccFdnEnabled() { java.lang.Boolean retValue = ((mUiccApplication) != null) ? mUiccApplication.getIccFdnEnabled() : false; return retValue; }<END_MOD>
<START_MOD>@com.android.jack.annotations.CalledByInvokeCustom(invokeMethodHandle = @com.android.jack.annotations.LinkerMethodHandle(kind = com.android.jack.annotations.MethodHandleKind.INVOKE_STATIC, enclosingType = com.android.jack.java7.invokecustom.test004.Tests.class, name = "linkerMethod"), methodHandleExtraArgs = { @com.android.jack.annotations.Constant(booleanValue = true), @com.android.jack.annotations.Constant(byteValue = 1), @com.android.jack.annotations.Constant(charValue = 'a'), @com.android.jack.annotations.Constant(shortValue = 1024), @com.android.jack.annotations.Constant(intValue = 1), @com.android.jack.annotations.Constant(floatValue = 11.0F), @com.android.jack.annotations.Constant(doubleValue = 2.2), @com.android.jack.annotations.Constant(stringValue = "Hello"), @com.android.jack.annotations.Constant(classValue = com.android.jack.java7.invokecustom.test004.Tests.class), @com.android.jack.annotations.Constant(longValue = 123456789L) }, name = "add", returnType = int.class, argumentTypes = { int.class, int.class }) private static int add(int a, int b) { return a + b; }<END_MOD>
@java.lang.Override public void nvResetConfig(int resetType, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_NV_RESET_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) +   resetType =   + resetType)); } try { radioProxy.nvResetConfig(rr.mSerial, com.android.internal.telephony.RIL.convertToHalResetNvType(resetType)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "nvResetConfig", e); } } }
@java.lang.Override public synchronized void removeAddressFromTunnelInterface(int tunnelResourceId, <START_MOD>android<END_MOD>.<START_MOD>net<END_MOD>.<START_MOD>LinkAddress<END_MOD> localAddr) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); <START_MOD>try { mSrvConfig.getNetdInstance().interfaceDelAddress(tunnelInterfaceInfo.mInterfaceName, localAddr.getAddress().getHostAddress(), localAddr.getPrefixLength()); <END_MOD>}<START_MOD> catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throwFromServiceSpecificException(e); } }<END_MOD>
@java.lang.Override @com.android.annotations.NonNull public java.util.Map<java.lang.String, com.android.build.gradle.internal.ProductFlavorData<com.android.build.gradle.internal.dsl.<START_MOD>GradleGroupableProductFlavor<END_MOD>>> getProductFlavors() { return productFlavors; }
<START_MOD>private void sendRequestShortAudioDescriptor() { byte[] params = new byte[4]; params[0] = ((byte) (MSAPI_CODEC_DD)); params[1] = ((byte) (MSAPI_CODEC_AAC)); params[2] = ((byte) (MSAPI_CODEC_DTS)); params[3] = ((byte) (MSAPI_CODEC_DDP)); com.android.server.hdmi.HdmiCecMessage command = com.android.server.hdmi.HdmiCecMessageBuilder.buildRequestShortAudioDescriptor(getSourceAddress(), mAvrAddress, params); sendCommand(command, new com.android.server.hdmi.HdmiControlService.SendMessageCallback() { @java.lang.Override public void onSendCompleted(int error) { switch (error) { case Constants.SEND_RESULT_SUCCESS : case Constants.SEND_RESULT_BUSY : case Constants.SEND_RESULT_FAILURE : break; case Constants.SEND_RESULT_NAK : com.android.server.hdmi.HdmiLogger.debug("Failed to send <Request Short Audio Descriptor>."); finish(); break; } } }); }<END_MOD>
<START_MOD>public boolean connect(byte[] btAddress) { return connectNative(btAddress); }<END_MOD>
<START_MOD>protected void loge(java.lang.String msg) { android.util.Log.e(com.android.internal.telephony.ims.IsimFileHandler.LOG_TAG, msg); }<END_MOD>
<START_MOD>@android.annotation.SuppressAutoDoc @android.telephony.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) <END_MOD>public android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int subId) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd(( subId= + subId)); if (!(android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { if (android.telephony.SubscriptionManager.DBG) { android.telephony.SubscriptionManager.logd( invalid subId } return null; } android.telephony.SubscriptionInfo subInfo = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService("isub")); if (iSub != null) { subInfo = iSub.getActiveSubscriptionInfo(subId, mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return subInfo; }
<START_MOD>@com.android.annotations.NonNull public java.lang.String getDirName() { return variantData.getVariantConfiguration().getDirName(); }<END_MOD>
public int getsockoptByte(java.io.FileDescriptor fd, int level, int option) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
public org.w3c.dom.Node toXml(org.w3c.dom.Element location) { <START_MOD>org<END_MOD>.<START_MOD>w3c.dom.Node locationNode = <END_MOD>mSourceLocation.toXml(location.getOwnerDocument())<START_MOD>; location.appendChild(locationNode<END_MOD>); org.w3c.dom.Element position = location.getOwnerDocument().createElement("position"); position.setAttribute("line", java.lang.String.valueOf(mPosition.getLine())); position.setAttribute("col", java.lang.String.valueOf(mPosition.getColumn())); position.setAttribute("offset", java.lang.String.valueOf(mPosition.getOffset())); location.appendChild(position); return location; }
<START_MOD>private android.net.wifi.p2p.WifiP2pDeviceList getPeers(java.lang.String pkgName, int uid) { if ((mWifiInjector) == null) { mWifiInjector = com.android.server.wifi.WifiInjector.getInstance(); } com.android.server.wifi.util.WifiPermissionsUtil wifiPermissionsUtil = mWifiInjector.getWifiPermissionsUtil(); if (wifiPermissionsUtil.canAccessScanResults(pkgName, uid, com.android.server.wifi.p2p.WifiP2pServiceImpl.UNKNOWN_PID, ((Build.VERSION_CODES.N) + 2))) { return new android.net.wifi.p2p.WifiP2pDeviceList(mPeers); } else { return new android.net.wifi.p2p.WifiP2pDeviceList(); } }<END_MOD>
@javax.annotation.Nonnull public static com.android.jack.ir.ast.JSession buildSession(@javax.annotation.Nonnull com.android.jack.Options options, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks) throws java.lang.Exception { if (((options.proguardFlagsFiles) != null) && (!(options.proguardFlagsFiles.isEmpty()))) { if ((options.flags) == null) { options.flags = new com.android.jack.shrob.spec.Flags(); } for (java.io.File proguardFlagsFile : options.proguardFlagsFiles) { com.android.jack.shrob.proguard.GrammarActions.parse(proguardFlagsFile.getAbsolutePath(), ".", options.flags); } options.applyShrobFlags(); } options.checkValidity(hooks); com.android.sched.util.config.ThreadConfig.setConfig(options.getConfig()); com.android.jack.ir.ast.JSession session = com.android.jack.Jack.buildSession(options, hooks); com.android.sched.scheduler.Request request = com.android.jack.Jack.createInitialRequest(); request.addInitialTagsOrMarkers(com.android.jack.Jack.getJavaSourceInitialTagSet()); if (com.android.sched.util.config.ThreadConfig.get(Options.GENERATE_JACK_FILE).booleanValue()) { request.addProduction(com.android.jack.backend.jayce.<START_MOD>JayceFormatProduct<END_MOD>.class); } com.android.sched.scheduler.PlanBuilder<com.android.jack.ir.ast.JSession> planBuilder = request.getPlanBuilder(com.android.jack.ir.ast.JSession.class); com.android.jack.Jack.fillDexPlan(options, planBuilder); request.addTargetIncludeTagOrMarker(ClassDefItemMarker.Complete.class); planBuilder.getPlan().getScheduleInstance().process(session); return session; }
<START_MOD>@dalvik.annotation.optimization.FastNative <END_MOD>native void setCharAt(int index, char c);
@java.lang.Override public boolean sendReport(android.bluetooth.BluetoothDevice device, int id, byte[] data) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.<START_MOD>d<END_MOD>(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ((( device= + device) +   id= + id)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { <START_MOD>android.util.Log.w(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG,   HidDevService is null <END_MOD>return false; } return service.sendReport(device, id, data); }
<START_MOD>private void assertDataMemoryContents(int expected, android.net.apf.ApfGenerator gen, byte[] packet, byte[] expected_data, int filterAge) throws android.net.apf.ApfGenerator.IllegalInstructionException, java.lang.Exception { byte[] data = new byte[expected_data.length]; byte[] program = gen.generate(); android.net.apf.ApfTest.assertReturnCodesEqual(expected, android.net.apf.ApfTest.apfSimulate(program, packet, data, filterAge)); if (!(java.util.Arrays.equals(expected_data, data))) { throw new java.lang.Exception(((((("program: " + (com.android.internal.util.HexDump.toHexString(program))) + "\ndata memory: ") + (com.android.internal.util.HexDump.toHexString(data))) + "\nexpected: ") + (com.android.internal.util.HexDump.toHexString(expected_data)))); } }<END_MOD>
public static final javax.crypto.Cipher getInstance(java.lang.String transformation<START_MOD>, java.lang.String provider<END_MOD>) throws java.security.NoSuchAlgorithmException, <START_MOD>java.security.NoSuchProviderException, <END_MOD>javax.crypto.NoSuchPaddingException { <START_MOD>if ((provider == null) || ((provider<END_MOD>.<START_MOD>length<END_MOD>()<START_MOD>) == 0)) { throw new<END_MOD> java.lang.<START_MOD>IllegalArgumentException(<END_MOD> <START_MOD>provider<END_MOD> <START_MOD>}<END_MOD> java.security.Provider <START_MOD>p<END_MOD> = java.security.<START_MOD>Security<END_MOD>.<START_MOD>getProvider<END_MOD>(<START_MOD>provider<END_MOD>); if (<START_MOD>p<END_MOD> == null) { throw new java.security.<START_MOD>NoSuchProviderException<END_MOD>(( <START_MOD>such<END_MOD> provider<START_MOD>:<END_MOD>   + <START_MOD>provider<END_MOD>)); }<START_MOD> return javax.crypto.Cipher.getCipher(transformation, p); }<END_MOD>
<START_MOD>public java.lang.String toString() { return (((android.text.format.DateFormat.format("MM-dd hh:mm:ss.SSS ", mTimestamp)) + (mEnable ? " Enabled " : " Disabled ")) + " by ") + (mPackageName); }<END_MOD>
public java.io.InputStream getInputStream(java.util.zip.ZipEntry entry) throws java.io.IOException { entry = getEntry(entry.getName()); if (entry == null) { return null; } java.io.RandomAccessFile localRaf = raf; synchronized(localRaf) { java.util.zip.ZipFile.RAFStream rafStream = new java.util.zip.ZipFile.RAFStream(localRaf, ((entry.localHeaderRelOffset) + <START_MOD>6<END_MOD>)); java.io.DataInputStream is = new java.io.DataInputStream(rafStream); int <START_MOD>gpbf = java.lang.Short.reverseBytes(is.readShort()); if ((gpbf & (~(java.util.zip.ZipFile.GPBF_SUPPORTED_MASK))) != 0) { throw new java.util.zip.ZipException(( Purpose Bit Flag bit(s) not supported, GPBF= + gpbf)); } is.skipBytes(20); int <END_MOD>localExtraLenOrWhatever = java.lang.Short.reverseBytes(is.readShort()); is.close(); rafStream.skip(((entry.nameLength) + localExtraLenOrWhatever)); rafStream.length = (rafStream.offset) + (entry.compressedSize); if ((entry.compressionMethod) == (java.util.zip.ZipEntry.DEFLATED)) { int bufSize = java.lang.Math.max(1024, ((int) (java.lang.Math.min(entry.getSize(), 65535L)))); return new java.util.zip.ZipFile.ZipInflaterInputStream(rafStream, new java.util.zip.Inflater(true), bufSize, entry); } else { return rafStream; } } }
public void testConnectTimeouts() throws java.io.IOException { tests.net.StuckServer ss = new tests.net.StuckServer(<START_MOD>true<END_MOD>); int serverPort = ss.getLocalPort(); java.<START_MOD>lang.String hostName = ss.getLocalSocketAddress().getAddress().getHostName(); java.<END_MOD>net.URLConnection urlConnection = new java.net.URL((<START_MOD>((("http://" + hostName) + ":")<END_MOD> + serverPort)<START_MOD> + "/")<END_MOD>).openConnection(); int timeout = 1000; urlConnection.setConnectTimeout(timeout); long start = java.lang.System.currentTimeMillis(); try { urlConnection.getInputStream(); fail(); } catch (java.net.SocketTimeoutException expected) { long elapsed = (java.lang.System.currentTimeMillis()) - start; int attempts = java.net.InetAddress.getAllByName("localhost").length; assertTrue(((((("timeout=" + timeout) +   elapsed= + elapsed) +   attempts= + attempts), ((java.lang.Math.abs(((attempts * timeout) - elapsed))) < 500)); } finally { ss.close(); } }
<START_MOD>@java.lang.Override public int read() throws java.io.IOException { byte[] singleByte = new byte[1]; int numRead = read(singleByte, 0, 1); if (numRead != 1) { return numRead; } return singleByte[0]; }<END_MOD>
<START_MOD>@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.BaseVDir getRootDir() { return changeVFS(vfs.getRootDir()); }<END_MOD>
<START_MOD>@org.junit.Test <END_MOD>public void testShellUtilIntegrity() throws java.lang.Exception {<START_MOD> mInstrumentation = testRule.getInstrumentation();<END_MOD> java.lang.String cmd =   /system/bin com.android.devtools.systemimage.uitest.utils.ShellUtil.ShellResult result = com.android.devtools.systemimage.uitest.utils.ShellUtil.invokeCommand(cmd); <START_MOD>junit.framework.Assert.<END_MOD>assertTrue(result.stderr, ((result.stderr.length()) == 0)); java.io.InputStream inputStream = mInstrumentation.getTargetContext().getAssets().open("util.txt"); java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream, "UTF-8")); java.lang.String line; java.lang.StringBuilder util = new java.lang.StringBuilder(); while ((line = reader.readLine()) != null) { util.append(line).append("\n"); } <START_MOD>junit.framework.Assert.<END_MOD>assertEquals( The shell util is incomplete! util.toString(), result.stdout); }
@org.junit.Test public void testThisRefInDefenderMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_33).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
public boolean p2pProvisionDiscovery(android.net.wifi.p2p.WifiP2pConfig config) { if (config == null) return false; return mSupplicantP2pIfaceHal.provisionDiscovery(config); }
<START_MOD>public void doCall();<END_MOD>
<START_MOD>@java.lang.Override public void run() { try { com.google.gct.idea.debugger.ListBreakpointsResponse response = myCloudDebuggerClient.debuggees().breakpoints().list(myDebugeeId).setIncludeInactive(java.lang.Boolean.TRUE).execute(); setCurrentBreakpointsFromList(response.getBreakpoints()); } catch (java.io.IOException ex) { } }<END_MOD>
<START_MOD>public java.util.List<com.android.builder.internal.incremental.DependencyData> getData() { return mDataList; }<END_MOD>
public static void test() { int i<START_MOD> = 0<END_MOD>; assertTrue(((i = 2) == 2)); assertTrue((i == 2)); }
public void countEvent(android.net.metrics.WakeupEvent ev) { (totalWakeups)++; switch (ev.uid) { case ROOT_UID : (rootWakeups)++; break; case SYSTEM_UID : (systemWakeups)++; break; case android.net.metrics.WakeupStats.NO_UID : (noUidWakeups)++; break; default : if ((ev.uid) >= (FIRST_APPLICATION_UID)) { (applicationWakeups)++; } else { (nonApplicationWakeups)++; } break; } <START_MOD>if ((ev.dstHwAddr.length) == (android.net.metrics.WakeupStats.L2_BROADCAST.length)) { if (java.util.Arrays.equals(ev.dstHwAddr, android.net.metrics.WakeupStats.L2_BROADCAST)) { (l2BroadcastCounts)++; } else if ((ev.dstHwAddr[0]) == 1) { (l2MulticastCounts)++; } else { (l2UnicastCounts)++; } } android.net.metrics.WakeupStats.increment(ethertypes, ev.ethertype); if ((ev.ipProtocol) >= 0) { android.net.metrics.WakeupStats.increment(ipProtocols, ev.ipProtocol); } }<END_MOD>
public void run() { mToast.setGravity(Gravity.BOTTOM, 0, 0); mToast.show(); <START_MOD>mLayoutListener.register(mToast.getView()); <END_MOD>}
public static boolean hasExtension(java.lang.String extension) { if ((extension == null) || (extension.isEmpty())) { return false; } <START_MOD>extension = extension.toLowerCase(); <END_MOD>return libcore.net.MimeUtils.extensionToMimeTypeMap.containsKey(extension); }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getContext(); android.media.cts.Utils.enableAppOps(mContext.getPackageName(), android.media.cts.AudioManagerTest.APPOPS_OP_STR, getInstrumentation()); mAudioManager = ((android.media.AudioManager) (mContext.getSystemService(Context.AUDIO_SERVICE))); android.os.Vibrator vibrator = ((android.os.Vibrator) (mContext.getSystemService(Context.VIBRATOR_SERVICE))); mNm = ((android.app.NotificationManager) (mContext.getSystemService(Context.NOTIFICATION_SERVICE))); mHasVibrator = (vibrator != null) && (vibrator.hasVibrator()); mUseFixedVolume = mContext.getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier("config_useFixedVolume", "bool", "android")); android.content.pm.PackageManager packageManager = mContext.getPackageManager(); mIsTelevision = (packageManager != null) && ((packageManager.hasSystemFeature(PackageManager.FEATURE_LEANBACK)) || (packageManager.hasSystemFeature(PackageManager.FEATURE_TELEVISION))); <START_MOD>mIsSingleVolume = android.media.AudioSystem.isSingleVolume(mContext); <END_MOD>}
<START_MOD>private static native void setVolumeNative(int volume);<END_MOD>
<START_MOD>@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) return true; if ((o == null) || ((getClass()) != (o.getClass()))) return false; com.android.builder.BuildConfig that = ((com.android.builder.BuildConfig) (o)); if ((mBuildConfigLines) != null ? !(mBuildConfigLines.equals(that.mBuildConfigLines)) : (that.mBuildConfigLines) != null) return false; return true; }<END_MOD>
@java.lang.Override @javax.annotation.Nonnull public void delete(@javax.annotation.Nonnull com.android.jack.library.FileType fileType, @javax.annotation.Nonnull com.android.sched.vfs.VPath typePath) throws com.android.sched.util.file.CannotDeleteFileException { <START_MOD>assert !(closed); <END_MOD>vfs.getRootInputOutputVDir().delete(fileType.buildFileVPath(typePath)); }
void onBluetoothDisable() { com.android.bluetooth.btservice.AdapterProperties.debugLog("onBluetoothDisable()"); mBluetoothDisabling = true; if ((getState()) == (android.bluetooth.BluetoothAdapter.STATE_TURNING_OFF)) { mService.cancelDiscovery(); setScanMode(AbstractionLayer.BT_SCAN_MODE_NONE); } <START_MOD>setConnectionState(BluetoothAdapter.STATE_DISCONNECTED); <END_MOD>}
<START_MOD>protected void processWithJarJar(@javax.annotation.Nonnull java.io.File jarjarRules, @javax.annotation.Nonnull java.io.File inJar, @javax.annotation.Nonnull java.io.File outJar) { java.lang.String[] args = new java.lang.String[]{ "java", "-Dverbose=" + (java.lang.String.valueOf(isVerbose)), "-jar", jarjarPrebuilt.getAbsolutePath(), "process", jarjarRules.getAbsolutePath(), inJar.getAbsolutePath(), outJar.getAbsolutePath() }; com.android.jack.test.util.ExecuteFile execFile = new com.android.jack.test.util.ExecuteFile(args); execFile.setOut(outRedirectStream); execFile.setErr(errRedirectStream); execFile.setVerbose(isVerbose); try { if ((execFile.run()) != 0) { throw new java.lang.RuntimeException("JarJar exited with an error"); } } catch (com.android.jack.test.util.ExecFileException e) { throw new java.lang.RuntimeException("An error occurred while running Jarjar", e); } }<END_MOD>
<START_MOD>private static void printJsonTables(java.lang.String name, org.json.JSONArray table) throws org.json.JSONException { java.util.ArrayList<java.lang.Integer> columnLength = new java.util.ArrayList<java.lang.Integer>(); for (int i = 0; i < (table.length()); i++) { org.json.JSONArray row = table.getJSONArray(i); for (int j = 0; j < (row.length()); j++) { if ((columnLength.size()) == j) { columnLength.add(1); } if (!(row.isNull(j))) { int len = row.getString(j).length(); if ((columnLength.get(j)) < len) { columnLength.set(j, len); } } } } java.lang.StringBuilder sb = new java.lang.StringBuilder((name + "\n")); for (int i = 0; i < (table.length()); i++) { org.json.JSONArray row = table.getJSONArray(i); for (int j = 0; j < (row.length()); j++) { java.lang.String cell = (row.isNull(j)) ? "" : row.getString(j); if (j > 0) { sb.append(" "); } for (int k = 0; k < ((columnLength.get(j)) - (cell.length())); k++) { sb.append(" "); } sb.append(cell); } sb.append("\n"); } com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, sb.toString()); }<END_MOD>
<START_MOD>@org.junit.Test public void test_write$Path$Iterable$Charset$OpenOption_NPE() throws java.io.IOException { try { java.nio.file.Files.write(null, new java.util.ArrayList<>(), java.nio.charset.Charset.forName("UTF-16")); fail(); } catch (java.lang.NullPointerException expected) { } try { java.nio.file.Files.write(filesSetup.getDataFilePath(), null, java.nio.charset.Charset.forName("UTF-16")); fail(); } catch (java.lang.NullPointerException expected) { } try { java.nio.file.Files.write(filesSetup.getDataFilePath(), new java.util.ArrayList(), ((java.nio.file.OpenOption[]) (null))); fail(); } catch (java.lang.NullPointerException expected) { } }<END_MOD>
private void onLocked(<START_MOD>int msg<END_MOD>) { if (DBG) log( fetch EF_ICCID in locked state <START_MOD>mLockedRecordsReqReason<END_MOD> = <START_MOD>(msg == (com.android.internal.telephony.uicc.RuimRecords.EVENT_APP_LOCKED)) ? LOCKED_RECORDS_REQ_REASON_PIN_LOCKED : LOCKED_RECORDS_REQ_REASON_NETWORK_LOCKED<END_MOD>; mFh.loadEFTransparent(com.android.internal.telephony.uicc.EF_ICCID, obtainMessage(com.android.internal.telephony.uicc.RuimRecords.EVENT_GET_ICCID_DONE)); (mRecordsToLoad)++; }
<START_MOD>@com.android.annotations.NonNull public static java.lang.String getDisplayString(@com.android.annotations.NonNull java.lang.String url, @com.android.annotations.NonNull java.util.List<com.android.ide.common.rendering.api.ResourceValue> lookupChain) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(url); java.lang.String prev = url; for (com.android.ide.common.rendering.api.ResourceValue element : lookupChain) { if (element == null) { continue; } java.lang.String value = element.getValue(); java.lang.String text = value; if ((prev != null) && (text.equals(prev))) { continue; } sb.append(" => "); if (!((text.startsWith(com.android.SdkConstants.PREFIX_THEME_REF)) || (text.startsWith(com.android.SdkConstants.PREFIX_RESOURCE_REF)))) { int end = java.lang.Math.max(text.lastIndexOf('/'), text.lastIndexOf('\\')); if (end != (-1)) { text = text.substring((end + 1)); } } sb.append(text); prev = value; } return sb.toString(); }<END_MOD>
public com.android.layoutlib.api.SceneResult moveChild(java.lang.Object parentView, java.lang.Object childView, <START_MOD>int<END_MOD> <START_MOD>idnex<END_MOD>, com.android.layoutlib.api.LayoutScene.IAnimationListener listener) { return SceneStatus.NOT_IMPLEMENTED.getResult(); }
@org.junit.Test public void testDefenderMethodByInterfaceInstance() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_31).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
<START_MOD>public void timeCollatorPrimary(int reps) { java.text.RuleBasedCollator collator = ((java.text.RuleBasedCollator) (java.text.Collator.getInstance(java.util.Locale.US))); collator.setStrength(java.text.Collator.PRIMARY); for (int i = 0; i < reps; i++) { collator.compare("abcde", "abcdf"); collator.compare("abcde", "abcde"); collator.compare("abcdf", "abcde"); } }<END_MOD>
<START_MOD>public void handleEvent(org.eclipse.swt.widgets.Event event) { if (((event.detail) & (org.eclipse.swt.SWT.SELECTED)) != 0) { org.eclipse.swt.graphics.GC gc = event.gc; org.eclipse.swt.graphics.Rectangle area = tree.getClientArea(); int columnCount = tree.getColumnCount(); if (((event.index) == (columnCount - 1)) || (columnCount == 0)) { int width = ((area.x) + (area.width)) - (event.x); if (width > 0) { org.eclipse.swt.graphics.Region region = new org.eclipse.swt.graphics.Region(); gc.getClipping(region); region.add(event.x, event.y, width, event.height); gc.setClipping(region); region.dispose(); } } gc.setAdvanced(true); if (gc.getAdvanced()) { gc.setAlpha(127); } org.eclipse.swt.graphics.Rectangle rect = event.getBounds(); org.eclipse.swt.graphics.Color foreground = gc.getForeground(); org.eclipse.swt.graphics.Color background = gc.getBackground(); org.eclipse.swt.widgets.Display display = tree.getDisplay(); gc.setForeground(display.getSystemColor(SWT.COLOR_RED)); gc.setBackground(display.getSystemColor(SWT.COLOR_LIST_BACKGROUND)); gc.fillGradientRectangle(0, rect.y, 500, rect.height, false); gc.setForeground(foreground); gc.setBackground(background); event.detail &= ~(org.eclipse.swt.SWT.SELECTED); } }<END_MOD>
public static void connect(java.io.FileDescriptor fd, java.net.InetAddress inetAddress, int port, int timeoutMs) throws java.net.SocketException, java.net.SocketTimeoutException { try { libcore.io.IoBridge.connectErrno(fd, inetAddress, port, timeoutMs); } catch (android.system.ErrnoException errnoException) { throw new java.net.ConnectException(libcore.io.IoBridge.connectDetail(inetAddress, port, <START_MOD>libcore.io.IoBridge.getSocketLocalAddress(fd), libcore.io.IoBridge.getSocketLocalPort(fd), <END_MOD>timeoutMs, errnoException), errnoException); } catch (java.net.SocketException ex) { throw ex; } catch (java.net.SocketTimeoutException ex) { throw ex; } catch (java.io.IOException ex) { throw new java.net.SocketException(ex); } }
private int getTextWidth(java.lang.<START_MOD>CharSequence<END_MOD> str, android.text.TextPaint paint) { float totalWidth = 0.0F; float[] widths = new float[str.length()]; paint.getTextWidths(str, <START_MOD>0, str.length(), <END_MOD>widths); for (float f : widths) { totalWidth += f; } return ((int) (totalWidth)); }
private static void doTestPrimitiveFieldsClasses() { <START_MOD>art.Main.setTag(art.Test913<END_MOD>.IntObject.class, 10000); java.lang.System.out.println(<START_MOD>art.Test913<END_MOD>.followReferencesPrimitiveFields(<START_MOD>art.Test913<END_MOD>.IntObject.class)); java.lang.System.out.println(<START_MOD>art.<END_MOD>Main.getTag(<START_MOD>art.Test913<END_MOD>.IntObject.class)); <START_MOD>art.Main.setTag(art.Test913<END_MOD>.IntObject.class, 0); <START_MOD>art.Main.setTag(art.Test913<END_MOD>.FloatObject.class, 10000); java.lang.System.out.println(<START_MOD>art.Test913<END_MOD>.followReferencesPrimitiveFields(<START_MOD>art.Test913<END_MOD>.FloatObject.class)); java.lang.System.out.println(<START_MOD>art.<END_MOD>Main.getTag(<START_MOD>art.Test913<END_MOD>.FloatObject.class)); <START_MOD>art.Main.setTag(art.Test913<END_MOD>.FloatObject.class, 0); <START_MOD>art.Main.setTag(art.Test913<END_MOD>.Inf1.class, 10000); java.lang.System.out.println(<START_MOD>art.Test913<END_MOD>.followReferencesPrimitiveFields(<START_MOD>art.Test913<END_MOD>.Inf1.class)); java.lang.System.out.println(<START_MOD>art.<END_MOD>Main.getTag(<START_MOD>art.Test913<END_MOD>.Inf1.class)); <START_MOD>art.Main.setTag(art.Test913<END_MOD>.Inf1.class, 0); <START_MOD>art.Main.setTag(art.Test913<END_MOD>.Inf2.class, 10000); java.lang.System.out.println(<START_MOD>art.Test913<END_MOD>.followReferencesPrimitiveFields(<START_MOD>art.Test913<END_MOD>.Inf2.class)); java.lang.System.out.println(<START_MOD>art.<END_MOD>Main.getTag(<START_MOD>art.Test913<END_MOD>.Inf2.class)); <START_MOD>art.Main.setTag(art.Test913<END_MOD>.Inf2.class, 0); }
<START_MOD>public int compareTo(com.android.sdklib.internal.repository.packages.FullRevision rhs, boolean ignorePreview) { int delta = (mMajor) - (rhs.mMajor); if (delta != 0) { return delta; } delta = (mMinor) - (rhs.mMinor); if (delta != 0) { return delta; } delta = (mMicro) - (rhs.mMicro); if (delta != 0) { return delta; } if (!ignorePreview) { int p1 = ((mPreview) == (com.android.sdklib.internal.repository.packages.FullRevision.NOT_A_PREVIEW)) ? java.lang.Integer.MAX_VALUE : mPreview; int p2 = ((rhs.mPreview) == (com.android.sdklib.internal.repository.packages.FullRevision.NOT_A_PREVIEW)) ? java.lang.Integer.MAX_VALUE : rhs.mPreview; delta = p1 - p2; } return delta; }<END_MOD>
<START_MOD>@java.lang.Override public void setDominator(com.android.ahat.heapdump.DominatorsComputation.Node dominator) { this.dominator = ((com.android.ahat.DominatorsTest.Node) (dominator)); }<END_MOD>
public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth<START_MOD>, false<END_MOD>); }
<START_MOD>boolean<END_MOD> getFunctionalTest();
<START_MOD>@java.lang.Override public boolean hasFileType(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) { return fileTypes.contains(fileType); }<END_MOD>
@java.lang.Override protected void applyMutation(dexfuzz.program.Mutation uncastMutation) { dexfuzz.program.mutators.NewArrayLengthChanger.AssociatedMutation mutation = ((dexfuzz.program.mutators.NewArrayLengthChanger.AssociatedMutation) (uncastMutation)); dexfuzz.program.MutatableCode mutatableCode = mutation.mutatableCode; dexfuzz.program.MInsn newArrayInsn = newArrayLengthInsns.get(mutation.newArrayToChangeIdx); int newArrayInsnIdx = mutatableCode.getInstructionIndex(newArrayInsn); dexfuzz.program.MInsn newInsn = new dexfuzz.program.MInsn(); newInsn.insn = new dexfuzz.rawdex.Instruction(); newInsn.insn.info = dexfuzz.rawdex.Instruction.getOpcodeInfo(Opcode.CONST_16); <START_MOD>newArrayInsn.insn.vregB = mutatableCode.getTemporaryVReg(0); <END_MOD>newInsn.insn.vregA = ((int) (newArrayInsn.insn.vregB)); newInsn.insn.vregB = rng.nextInt(100); mutatableCode.insertInstructionAt(newInsn, newArrayInsnIdx); dexfuzz.Log.info(( the length of the array to   + (newInsn.insn.vregB))); stats.incrementStat( length of new array }
private int performDexOptInternal(java.lang.String packageName, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete<START_MOD>, boolean downgrade<END_MOD>) { android.content.pm.PackageParser.Package p; synchronized(mPackages) { p = mPackages.get(packageName); if (p == null) { return PackageDexOptimizer.DEX_OPT_FAILED; } mPackageUsage.maybeWriteAsync(mPackages); mCompilerStats.maybeWriteAsync(); } long callingId = android.os.Binder.clearCallingIdentity(); try { synchronized(mInstallLock) { return performDexOptInternalWithDependenciesLI(p, checkProfiles, targetCompilerFilter, force, bootComplete<START_MOD>, downgrade<END_MOD>); } } finally { android.os.Binder.restoreCallingIdentity(callingId); } }
<START_MOD>void clear() { mNativeLibs.clear(); mNativeLibInteference = false; }<END_MOD>
<START_MOD>private void checkLengthFloat3() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testLengthFloat3(inV, out); verifyResultsLengthFloat3(inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLengthFloat3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLengthFloat3(inV, out); verifyResultsLengthFloat3(inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLengthFloat3: " + (e.toString()))); } }<END_MOD>
private boolean hasBlankLineAbove() { if ((mOut.length()) < (2 * (mLineSeparator.length()))) { return false; } return (com.android.<START_MOD>SdkUtils<END_MOD>.endsWith(mOut, mLineSeparator)) && (com.android.<START_MOD>SdkUtils<END_MOD>.endsWith(mOut, ((mOut.length()) - (mLineSeparator.length())), mLineSeparator)); }
@org.junit.Test public void testLamba025() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA025).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
<START_MOD>private static java.lang.String configToString(android.net.wifi.WifiConfiguration config) { if (config == null) { return null; } java.lang.StringBuilder sb = new java.lang.StringBuilder().append("ID=").append(config.networkId).append(",SSID=").append(config.SSID).append(",useExternalScores=").append(config.useExternalScores); return sb.toString(); }<END_MOD>
public void requestPeers(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.PeerListListener listener) { android.net.wifi.p2p.<START_MOD>WifiP2pDeviceList peerList; android.net.wifi.p2p.<END_MOD>WifiP2pManager.checkChannel(c); <START_MOD>try { peerList = mService.getPeers(<END_MOD>c.<START_MOD>mContext.getOpPackageName()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } c.mHandler<END_MOD>.sendMessage<START_MOD>(c.mHandler.obtainMessage<END_MOD>(android.net.wifi.p2p.WifiP2pManager.<START_MOD>RESPONSE_PEERS<END_MOD>, 0, c.putListener(listener)<START_MOD>, peerList)<END_MOD>); }
private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException { stream.defaultReadObject(); byte[] encoded = ((byte[]) (stream.readObject())); key = new org.conscrypt.OpenSSLKey(org.conscrypt.NativeCrypto.d2i_PKCS8_PRIV_KEY_INFO(encoded)); group = new org.conscrypt.OpenSSLECGroupContext(org.conscrypt.NativeCrypto.<START_MOD>EC_KEY_get1_group<END_MOD>(<START_MOD>key.getNativeRef()<END_MOD>)); }
private void notifyInterfaceAdded(java.lang.String iface) { <START_MOD>invokeForAllObservers(new<END_MOD> <START_MOD>com<END_MOD>.<START_MOD>android.server.NetworkManagementService.CallbackInvocation<END_MOD>() { <START_MOD>@java.lang.Override public void call(android.net.INetworkManagementEventObserver o) throws android.os.RemoteException<END_MOD> { <START_MOD>o<END_MOD>.interfaceAdded(iface); } }); }
void addToSize(<START_MOD>com.android.ahat.heapdump.Size<END_MOD> <START_MOD>size<END_MOD>) { mSize<START_MOD>.add(size)<END_MOD>; }
<START_MOD>public static void test_Memory_peekShortNative() { byte[] b = new byte[2]; b[0] = 52; b[1] = 18; long address = dalvik.system.VMRuntime.getRuntime().addressOf(b); junit.framework.Assert.assertEquals(libcore.io.Memory.peekShortNative(address), 4660); }<END_MOD>
<START_MOD>public static java.util.List<android.app.SearchableInfo> getSearchableInfos(android.content.Context context) { android.content.pm.PackageManager pm = context.getPackageManager(); java.util.Set<java.lang.String> possibleTvAppPackages = new java.util.HashSet<>(); java.util.List<android.content.pm.ResolveInfo> infos = pm.queryIntentActivities(new android.content.Intent(android.content.Intent.ACTION_VIEW, TvContract.Channels.CONTENT_URI), 0); for (android.content.pm.ResolveInfo info : infos) { possibleTvAppPackages.add(info.activityInfo.packageName); } infos = pm.queryIntentActivities(new android.content.Intent(android.content.Intent.ACTION_VIEW, TvContract.Programs.CONTENT_URI), 0); for (android.content.pm.ResolveInfo info : infos) { possibleTvAppPackages.add(info.activityInfo.packageName); } android.app.SearchManager sm = ((android.app.SearchManager) (context.getSystemService(Context.SEARCH_SERVICE))); java.util.List<android.app.SearchableInfo> searchableInfos = sm.getSearchablesInGlobalSearch(); java.util.List<android.app.SearchableInfo> tvSearchableInfos = new java.util.ArrayList<>(); for (android.app.SearchableInfo info : searchableInfos) { if (possibleTvAppPackages.contains(info.getSearchActivity().getPackageName())) { tvSearchableInfos.add(info); } } return tvSearchableInfos; }<END_MOD>
<START_MOD>void startByteCounting() { startNetStatPoll(); startDataStallAlarm(com.android.internal.telephony.dataconnection.DcTrackerBase.DATA_STALL_NOT_SUSPECTED); }<END_MOD>
@java.lang.Override public android.media.cts.BrowserRoot onGetRoot(java.lang.String clientPackageName, int clientUid, android.os.Bundle rootHints) { mExtras = new android.os.Bundle(); mExtras.putString(android.media.cts.StubMediaBrowserService.EXTRAS_KEY, android.media.cts.StubMediaBrowserService.EXTRAS_VALUE); <START_MOD>android.media.cts.StubMediaBrowserService.sBrowserRoot =<END_MOD> new android.media.cts.BrowserRoot(android.media.cts.StubMediaBrowserService.MEDIA_ID_ROOT, mExtras); <START_MOD>return android.media.cts.StubMediaBrowserService.sBrowserRoot; <END_MOD>}
@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JLabeledStatement labeledStatement) { if (!(currentStmts.isEmpty())) { assert (cfg) != null; com.android.jack.cfg.<START_MOD>NormalBasicBlock<END_MOD> normalBasicBlock = new com.android.jack.cfg.NormalBasicBlock(cfg, currentStmts); setBlockOfStatement(normalBasicBlock); forwardBranchResolver.<START_MOD>addNormalBasicBlock<END_MOD>(normalBasicBlock, getConcreteStatement(((com.android.jack.ir.ast.JBlock) (labeledStatement.getBody())))); } super.visit(labeledStatement); return true; }
<START_MOD>@java.lang.Override protected void onPostExecute(java.lang.Void result) { mTestState = com.android.cts.verifier.jobscheduler.IdleConstraintTestActivity.IDLE_ON_TEST_STATE_NOT_STARTED; android.os.PowerManager.WakeLock fullWakeLock = mPowerManager.newWakeLock((((android.os.PowerManager.FULL_WAKE_LOCK) | (android.os.PowerManager.ACQUIRE_CAUSES_WAKEUP)) | (android.os.PowerManager.ON_AFTER_RELEASE)), com.android.cts.verifier.jobscheduler.IdleConstraintTestActivity.TAG); fullWakeLock.acquire(); fullWakeLock.release(); mPartialWakeLock.release(); }<END_MOD>
@org.junit.Test public void testLamba012() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA012).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
private void executeBuild(java.util.List<java.lang.String> arguments, org.gradle.tooling.ProjectConnection connection, java.lang.String[] tasks) { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add("-i"); args.add("-u"); args.addAll(arguments); org.gradle.tooling.BuildLauncher launcher = connection.newBuild().forTasks(tasks).withArguments(args.toArray(new java.lang.String[args.size()])); if (<START_MOD>com.android.build.gradle.integration.common.utils.JacocoAgent.enableJacoco()) { launcher.setJvmArguments(com.android.build.gradle.integration.common.utils.JacocoAgent.getJvmArg()); } if (<END_MOD>(stdout) != null) { launcher.setStandardOutput(stdout); } launcher.run(); }
<START_MOD>@java.lang.SuppressWarnings("deprecation") <END_MOD>void stopForegroundCompat(int id) { if ((mStopForeground) != null) { mStopForegroundArgs[0] = java.lang.Boolean.TRUE; try { mStopForeground.invoke(this, mStopForegroundArgs); } catch (java.lang.reflect.InvocationTargetException e) { android.util.Log.w("ApiDemos",   to invoke stopForeground e); } catch (java.lang.IllegalAccessException e) { android.util.Log.w("ApiDemos",   to invoke stopForeground e); } return; } mNM.cancel(id); setForeground(false); }
public com.android.ide.<START_MOD>common<END_MOD>.<START_MOD>platformData<END_MOD>.ViewClassInfo getSuperClass() { return mSuperClass; }
public <START_MOD>android.net.NetworkSpecifier<END_MOD> createNetworkSpecifier(int clientId, @android.net.wifi.aware.WifiAwareManager.DataPathRole int role, @android.annotation.Nullable byte[] peer, @android.annotation.Nullable byte[] pmk, @android.annotation.Nullable java.lang.String passphrase) { if (android.net.wifi.aware.WifiAwareManager.VDBG) { android.util.Log.v(android.net.wifi.aware.WifiAwareManager.TAG, ((((( role= + role) +   pmk= + (pmk == null ? "null" : "non-null")) +   passphrase= + (passphrase == null ? "null" : "non-null"))); } <START_MOD>android.net.wifi.aware.WifiAwareNetworkSpecifier ns = new android.net.wifi.aware.WifiAwareNetworkSpecifier(); ns.<END_MOD>type = (peer == null) ? <START_MOD>WifiAwareNetworkSpecifier.NETWORK_SPECIFIER_TYPE_OOB_ANY_PEER : WifiAwareNetworkSpecifier.NETWORK_SPECIFIER_TYPE_OOB; if ((role != (<END_MOD>android.net.wifi.aware.WifiAwareManager.<START_MOD>WIFI_AWARE_DATA_PATH_ROLE_INITIATOR)) && (role != (<END_MOD>android.net.wifi.aware.WifiAwareManager.<START_MOD>WIFI_AWARE_DATA_PATH_ROLE_RESPONDER))) { throw new java.lang.IllegalArgumentException(( Invalid 'role' argument when creating a network   + "specifier")); }<END_MOD> if (<START_MOD>role == (android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_INITIATOR)) { if (peer == null) { throw new java.lang.IllegalArgumentException(( Invalid peer MAC   +   - null not permitted on INITIATOR } } if ((peer<END_MOD> != <START_MOD>null<END_MOD>) && (<START_MOD>(peer.length)<END_MOD> != <START_MOD>6<END_MOD>)) { throw new java.lang.IllegalArgumentException( Invalid <START_MOD>peer MAC address<END_MOD> } <START_MOD>ns.role = role; ns.clientId = clientId; ns.peerMac = peer; ns.pmk = pmk; ns.passphrase = passphrase; return ns;<END_MOD> }
public void setuid(int uid) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { os.setuid(uid); }
@java.lang.Override public boolean isReachable(java.net.InetAddress addr, int timeout, java.net.NetworkInterface netif, int ttl) throws java.io.IOException { <START_MOD>java.io.FileDescriptor fd = libcore.io.IoBridge.socket(true); java.net.InetAddress sourceAddr<END_MOD> = null; if (netif != null) { java.util.Enumeration<java.net.InetAddress> <START_MOD>inetAddrs<END_MOD> = netif.getInetAddresses(); <START_MOD>while (inetAddrs.hasMoreElements()) { <END_MOD>java.net.InetAddress <START_MOD>inetAddr = inetAddrs.nextElement(); if (inetAddr.getClass().isInstance(addr)) { sourceAddr = inetAddr; break; } } if (sourceAddr ==<END_MOD> null<START_MOD>) { return false; } } try {<END_MOD> if (<START_MOD>sourceAddr != null) { libcore.io.IoBridge.bind(fd, sourceAddr, 0); } libcore.io.IoBridge.connect(fd, <END_MOD>addr<START_MOD>, 7, timeout); return true; } catch (java.io.IOException e) { java.lang.Throwable cause = e.getCause(); return (cause<END_MOD> instanceof <START_MOD>android.system.ErrnoException) && ((((android.system.ErrnoException) (cause)).errno)<END_MOD> == <START_MOD>(android<END_MOD>.system.<START_MOD>OsConstants.ECONNREFUSED)); } finally { libcore.io.IoBridge.closeAndSignalBlockedThreads(fd); } }<END_MOD>
public void testAsset() throws java.lang.Throwable { final int resId = com.android.internal.R.drawable.<START_MOD>rro_test_drawable<END_MOD>; int actual = calculateRawResourceChecksum(resId); int expected = <START_MOD>0; switch <END_MOD>(<START_MOD>mMode<END_MOD>) <START_MOD>{<END_MOD> <START_MOD>case com.android.overlaytest.OverlayBaseTest.MODE_NO_OVERLAY<END_MOD> : <START_MOD>expected = 22117<END_MOD>;<START_MOD> break; case com.android.overlaytest.OverlayBaseTest.MODE_SINGLE_OVERLAY : case com.android.overlaytest.OverlayBaseTest.MODE_MULTIPLE_OVERLAYS : expected = 20954; break; default : fail(( mode   + (mMode))); }<END_MOD> assertEquals(expected, actual); }
public void testAesCbcHmacSha256Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public static void main(java.lang.String[] params) throws java.lang.Exception { if ((((params.length) == 0) || ("--help".equals(params[0]))) || ("-h".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if ("--version".equals(params[0])) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } java.lang.String cmd = params[0]; try { if ("sign".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("verify".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("rotate".equals(cmd)) { com.android.apksigner.ApkSignerTool.rotate(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("help".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if ("version".equals(cmd)) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } else <START_MOD>if ("dump-hints".equals(cmd)) { com.android.apksigner.ApkSignerTool.dumpHints(java.util.Arrays.copyOfRange(params, 1, params.length)); } else <END_MOD>{ throw new com.android.apksigner.ApkSignerTool.ParameterException((( command:   + cmd) +   See --help for supported commands } } catch (com.android.apksigner.ApkSignerTool.ParameterException | com.android.apksigner.OptionsParser e) { java.lang.System.err.println(e.getMessage()); java.lang.System.exit(1); return; } }
@java.lang.Override public int recvfrom(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetSocketAddress srcAddress) throws <START_MOD>android.os.ErrnoException, <END_MOD>java.net.SocketException { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); return os.recvfrom(fd, bytes, byteOffset, byteCount, flags, srcAddress); }
void <START_MOD>onAdvertisingSetEnabled<END_MOD>(int <START_MOD>advertiser_id, boolean enable<END_MOD>, int status) <START_MOD>throws java.lang.Exception <END_MOD>{ <START_MOD>if (com.android.bluetooth.gatt.AdvertiseManager.DBG) android.util.Log.d(com.android.bluetooth.gatt.AdvertiseManager.TAG, ((((( - advertiser_id= + advertiser_id) +   enable= + enable) +   status= + status)); java.util.Map.Entry<android.os.IBinder, com.android.bluetooth.gatt.AdvertiseManager.AdvertiserBag> entry = findAdvertiser(advertiser_id); if (entry == null)<END_MOD> { <START_MOD>android.util.Log.i(com.android.bluetooth.gatt.AdvertiseManager.TAG, ( - no callback found for advertiser_id   + advertiser_id)); return; }<END_MOD> android.bluetooth.le.<START_MOD>IAdvertisingSetCallback callback = entry.getValue().callback; callback.onAdvertisingEnabled(advertiser_id, enable, status<END_MOD>); }
public void munlock(long address, long byteCount) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { os.munlock(address, byteCount); }
@java.lang.Override public java.lang.String toString() { return (((<START_MOD>(<END_MOD>getFileName()) + <START_MOD>":"<END_MOD>) + (getStartLine())) + <START_MOD>'-') + (getEndLine())<END_MOD>; }
private int updateCarrierIdForCurrentSubscription(android.net.Uri uri, android.content.ContentValues cv) { int subId; try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException(( subid in provided uri   + uri)); } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (   + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(com.android.internal.telephony.SubscriptionController.getInstance().isActiveSubId(subId))) { final java.util.List activeSubscriptions = java.util.Arrays.asList(com.android.internal.telephony.SubscriptionController.getInstance().getActiveSubIdList()); int count = 0; for (int subscription : mCurrentSubscriptionMap.keySet()) { if (!(activeSubscriptions.contains(subscription))) { count++; android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (   + subscription)); mCurrentSubscriptionMap.remove(subscription); getContext().getContentResolver().notifyChange(<START_MOD>CarrierId<END_MOD>.CONTENT_URI, null); } } return count; } else { mCurrentSubscriptionMap.put(subId, new android.util.Pair(cv.getAsInteger(<START_MOD>CarrierId.CARRIER_ID<END_MOD>), cv.getAsString(<START_MOD>CarrierId<END_MOD>.NAME))); getContext().getContentResolver().notifyChange(<START_MOD>CarrierId<END_MOD>.CONTENT_URI, null); return 1; } }
<START_MOD>private synchronized void onApplicationStateChanged(byte[] address, boolean registered) { com.android.bluetooth.hid.HidDeviceService service = com.android.bluetooth.hid.HidDeviceService.getHidDeviceService(); if (service != null) { service.onApplicationStateChangedFromNative(address, registered); } else { android.util.Log.wtfStack(com.android.bluetooth.hid.HidDeviceNativeInterface.TAG, ("FATAL: onApplicationStateChanged() " + "is called from the stack while service is not available.")); } }<END_MOD>
private static native void nativeCopyPixelsFromBuffer(<START_MOD>long<END_MOD> nb, java.nio.Buffer src);
public com.android.server.wifi.hotspot2.DomainMatcher.Match isSubDomain(<START_MOD>java.lang.String domainName) { if (android.text.TextUtils.isEmpty(domainName)) { return com.android.server.wifi.hotspot2.DomainMatcher.Match.None; } <END_MOD>java.util.List<java.lang.String> <START_MOD>domainLabels = com.android.server.wifi.hotspot2.Utils.splitDomain(domainName);<END_MOD> com.android.server.wifi.hotspot2.DomainMatcher.Label label = mRoot; <START_MOD>com.android.server.wifi.hotspot2.DomainMatcher.Match match = com.android.server.wifi.hotspot2.DomainMatcher.Match.None; <END_MOD>for (java.lang.String labelString : <START_MOD>domainLabels<END_MOD>) { label = label.getSubLabel(labelString); if (label == null) { <START_MOD>break; } else if ((label.getMatch()) != (com.android.server.wifi.hotspot2.DomainMatcher.Match.None)) { match = label.getMatch(); if (match == (com.android.server.wifi.hotspot2.DomainMatcher.Match.Primary)) { break; } } } <END_MOD>return <START_MOD>match; }<END_MOD>
@java.lang.Override public void executeShellCommand(java.lang.String command, com.android.ddmlib.IShellOutputReceiver receiver, <START_MOD>long<END_MOD> maxTimeToOutputResponse) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.AdbHelper.executeRemoteCommand(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), command, this, receiver, maxTimeToOutputResponse); }
@org.junit.Before public void before() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mTestLooper = new android.os.test.TestLooper(); mStatusOk = <START_MOD>getStatus(WifiStatusCode.SUCCESS); mStatusFail = getStatus(WifiStatusCode.ERROR_UNKNOWN); when(mServiceManagerMock.linkToDeath(any(IHwBinder.DeathRecipient.class), anyLong())).thenReturn(true); when(mServiceManagerMock.registerForNotifications(anyString(), anyString(), any(IServiceNotification.Stub.class))).thenReturn(true); when(mWifiMock.linkToDeath(any(IHwBinder.DeathRecipient.class), anyLong())).thenReturn(true); when(mWifiMock.registerEventCallback(any(android.hardware.wifi.V1_0.IWifiEventCallback.class))).thenReturn(mStatusOk); when(mWifiMock.start()).thenReturn(mStatusOk); when(mWifiMock.stop()).thenReturn(mStatusOk); mDut = <END_MOD>new <START_MOD>com.<END_MOD>android.<START_MOD>server<END_MOD>.wifi.HalDeviceManagerTest.HalDeviceManagerSpy(); executeAndValidateInitializationSequence(); }
private com.android.builder.model.SigningConfig createSigningOverride() { if ((((project.hasProperty(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_STORE_FILE)) && (project.hasProperty(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_STORE_PASSWORD))) && (project.hasProperty(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_KEY_ALIAS))) && (project.hasProperty(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_KEY_PASSWORD))) { com.android.build.gradle.internal.dsl.SigningConfig signingConfigDsl = new com.android.build.gradle.internal.dsl.SigningConfig("externalOverride"); <START_MOD>signingConfigDsl.setStoreFile(new <END_MOD>java.<START_MOD>io.File(com.android.build.gradle.AndroidGradleOptions.getSigningStoreFile(project))); signingConfigDsl.setStorePassword(com.android.build.gradle.AndroidGradleOptions.getSigningStorePassword(project)); signingConfigDsl.setKeyAlias(com.android.build.gradle.AndroidGradleOptions.getSigningKeyAlias(project)); signingConfigDsl.setKeyPassword(com.android.build.gradle.AndroidGradleOptions.getSigningKeyPassword(project)); <END_MOD>java.lang.String<START_MOD> storeType<END_MOD> = <START_MOD>com.android.build.gradle.AndroidGradleOptions.getSigningStoreType(project<END_MOD>); if (<START_MOD>storeType != null<END_MOD>) { signingConfigDsl.setStoreType(<START_MOD>storeType<END_MOD>); } return signingConfigDsl; } return null; }
private static boolean <START_MOD>isValid<END_MOD>(java.lang.String <START_MOD>name<END_MOD>, int <START_MOD>length, int truncationLength<END_MOD>) { <START_MOD>java.util.function.IntPredicate<END_MOD> <START_MOD>isValidLength<END_MOD> <START_MOD>=<END_MOD> android.net.IpSecAlgorithm.<START_MOD>sAlgorithms.get(name);<END_MOD> <START_MOD>if<END_MOD> (<START_MOD>isValidLength<END_MOD> == <START_MOD>null<END_MOD>) <START_MOD>{<END_MOD> <START_MOD>android.util.Log.e<END_MOD>(android.net.IpSecAlgorithm.<START_MOD>TAG,<END_MOD>   <START_MOD>find<END_MOD> <START_MOD>a<END_MOD> <START_MOD>matching<END_MOD> <START_MOD>algorithm!<END_MOD> return false; } <START_MOD>return ((isValidLength.test(length)) && (isValidLength.test(truncationLength))) && (truncationLength <= length); <END_MOD>}
public static <START_MOD>synchronized <END_MOD>org.apache.harmony.luni.platform.PlatformAddress on(int value, long size) { <START_MOD>if (value == 0) { return <END_MOD>PlatformAddress<START_MOD>.NULL; } int idx<END_MOD> = <START_MOD>value >> 5; int probe = 0; do { org.apache.harmony.luni.platform.PlatformAddress cachedObj = org.apache.harmony.luni.platform.PlatformAddressFactory.cache[((idx + probe) & ((org.apache.harmony.luni.platform.PlatformAddressFactory.CACHESIZE) - 1))]; if (cachedObj<END_MOD> == <START_MOD>null) { return org.apache.harmony.luni.platform.PlatformAddressFactory.cache[((idx + probe) & ((org.apache.harmony.luni.platform.PlatformAddressFactory.CACHESIZE) - 1))] = new org.apache.harmony.luni.platform.<END_MOD>PlatformAddress<START_MOD>(value, size); } if (((cachedObj.osaddr) == value) && ((cachedObj.size) == size)) { return cachedObj; } } while ((probe++) < (org.apache.harmony.luni.platform.PlatformAddressFactory.MAXPROBES) ); org.apache.harmony.luni.platform.PlatformAddressFactory.replIdx %= (org.apache.harmony.luni.platform.PlatformAddressFactory.MAXPROBES) + 1; return org.apache.harmony.luni.platform.PlatformAddressFactory.cache[((idx + ((org.apache.harmony.luni.platform.PlatformAddressFactory.replIdx)++)) & ((org.apache.harmony.luni.platform.PlatformAddressFactory.CACHESIZE) - 1))] =<END_MOD> new org.apache.harmony.luni.platform.PlatformAddress(value, size); }
<START_MOD>private void checkCbrtFloat3() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testCbrtFloat3(in, out); verifyResultsCbrtFloat3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testCbrtFloat3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testCbrtFloat3(in, out); verifyResultsCbrtFloat3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testCbrtFloat3: " + (e.toString()))); } }<END_MOD>
@java.lang.Override public int write(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws <START_MOD>android.os.ErrnoException, <END_MOD>java.io.InterruptedIOException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); return os.write(fd, bytes, byteOffset, byteCount); }
public void iccExchangeSimIO(int fileID, int command, int p1, int p2, int p3, java.lang.String pathID, android.os.Message response<START_MOD>) { if ((!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) || ((mUiccProfile) == null)<END_MOD>) { mCi.iccIO(command, fileID, pathID, p1, p2, p3, null, null, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_SIM_IO_DONE, response)); }<START_MOD> else { if ((mUiccProfile) != null) { mUiccProfile.iccExchangeSimIO(fileID, command, p1, p2, p3, pathID, response); } } }<END_MOD>
static void loadAllContacts(android.content.Context context, android.os.Handler handler) { if (com.android.bluetooth.pbap.BluetoothPbapUtils.V) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG,   Contacts ... } java.lang.String[] projection = new java.lang.String[]{ android.provider.ContactsContract.Data.CONTACT_ID, android.provider.ContactsContract.Data.DATA1, android.provider.ContactsContract.Data.MIMETYPE }; com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = com.android.bluetooth.pbap.BluetoothPbapUtils.fetchAndSetContacts(context, handler, projection, null, null, true); if ((com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts) < 0) { com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = 0; return; } <START_MOD>handler.sendMessage(handler.obtainMessage(BluetoothPbapService.LOAD_CONTACTS)); }<END_MOD>
public <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.StructStatVfs statvfs(java.lang.String path) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException { return os.statvfs(path); }
public native void setxattr(java.lang.String path, java.lang.String name, byte[] value, int flags) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
public java.lang.String findNativeLibrary(java.lang.String name) { maybeInit(); if (<START_MOD>(zipDir) == null<END_MOD>) { java.lang.String <START_MOD>entryPath<END_MOD> = new java.io.File(<START_MOD>path<END_MOD>, name).getPath(); if (libcore.io.IoUtils.canOpenReadOnly(<START_MOD>entryPath<END_MOD>)) { return <START_MOD>entryPath<END_MOD>; } } else if ((urlHandler) != null) { java.lang.String entryName = new java.io.File(<START_MOD>zipDir<END_MOD>, name).getPath(); if (urlHandler.isEntryStored(entryName)) { return ((<START_MOD>path<END_MOD>.getPath()) + (dalvik.system.DexPathList.zipSeparator)) + entryName; } } return null; }
@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedEnum getEnum(@javax.annotation.Nonnull java.lang.String typeName) throws com.android.jack.ir.ast.JTypeLookupException { <START_MOD>com.android.jack.ir.ast.JType type = getType(typeName); if (type instanceof com.android.jack.ir.ast.JDefinedEnum) { <END_MOD>return ((com.android.jack.ir.ast.JDefinedEnum) (<START_MOD>type<END_MOD>)); }<START_MOD> else { throw new com.android.jack.ir.ast.JTypeLookupException(typeName); } }<END_MOD>
private void updateBoundCarrierServices(int subId) { int slotId = mSubscriptionManagerProxy.getSlotIndex(subId); java.lang.String newPackageName = mCarrierConfigManager.getConfigForSubId(subId).getString(CarrierConfigManager.KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING, null); if ((slotId != (android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX)) && (slotId < (mNumSlots))) { java.lang.String oldPackageName = mCarrierServices[slotId]; mCarrierServices[slotId] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG,   Config updated, binding new ImsService unbindImsService(getImsServiceInfoFromCache(oldPackageName)); <START_MOD>com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo newInfo = getImsServiceInfoFromCache(newPackageName); if (newInfo.featureFromMetadata) { <END_MOD>bindNewImsService(<START_MOD>newInfo); updateImsServiceFeatures(<END_MOD>getImsServiceInfoFromCache(mDeviceService)); } <START_MOD>else { } } } }<END_MOD>
<START_MOD>static java.nio.DoubleArrayBuffer copy(java.nio.DoubleArrayBuffer other, int markOfOther, boolean isReadOnly) { java.nio.DoubleArrayBuffer buf = new java.nio.DoubleArrayBuffer(other.capacity(), other.backingArray, other.arrayOffset, isReadOnly); buf.limit = other.limit; buf.position = other.position(); buf.mark = markOfOther; return buf; }<END_MOD>
public void addRegistrationListener(int serviceClass, com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable(); if (listener == null) { throw new java.lang.NullPointerException( can be null } try { <START_MOD>mImsServiceProxy<END_MOD>.addRegistrationListener(<START_MOD>0<END_MOD>, createRegistrationListenerProxy(serviceClass, listener)); } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException("addRegistrationListener()", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } }
public static org.conscrypt.OpenSSLECPointContext getInstance(int curveType, org.conscrypt.OpenSSLECGroupContext group, java.security.spec.ECPoint javaPoint) { org.conscrypt.OpenSSLECPointContext point = new org.conscrypt.OpenSSLECPointContext(group, org.conscrypt.NativeCrypto.EC_POINT_new(group.<START_MOD>getNativeRef<END_MOD>())); org.conscrypt.NativeCrypto.EC_POINT_set_affine_coordinates(group.<START_MOD>getNativeRef<END_MOD>(), point.<START_MOD>getNativeRef<END_MOD>(), javaPoint.getAffineX().toByteArray(), javaPoint.getAffineY().toByteArray()); return point; }
<START_MOD>private com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig getSelectedDeviceConfig() { return ((com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig) (mPortraitRadio.getData())); }<END_MOD>
<START_MOD>private static java.lang.String getThemeLabel(java.lang.String theme, boolean brief) { theme = com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme(theme); if (brief) { int index = theme.lastIndexOf('.'); if (index < ((theme.length()) - 1)) { return theme.substring((index + 1)); } } return theme; }<END_MOD>
<START_MOD>@java.lang.Override public void computeChildren(@org.jetbrains.annotations.NotNull com.google.gct.idea.debugger.XCompositeNode node) { final com.google.gct.idea.debugger.XValueChildrenList list = new com.google.gct.idea.debugger.XValueChildrenList(); java.util.List<com.google.api.services.debugger.model.Variable> arguments = myFrame.getArguments(); if ((arguments != null) && ((arguments.size()) > 0)) { for (com.google.api.services.debugger.model.Variable variable : arguments) { if (!(com.google.api.client.repackaged.com.google.common.base.Strings.isNullOrEmpty(variable.getName()))) { list.add(variable.getName(), new com.google.gct.idea.debugger.CloudStackFrame.MyValue(variable, myVariableTable)); } } } java.util.List<com.google.api.services.debugger.model.Variable> locals = myFrame.getLocals(); if ((locals != null) && ((locals.size()) > 0)) { for (com.google.api.services.debugger.model.Variable variable : locals) { if (!(com.google.api.client.repackaged.com.google.common.base.Strings.isNullOrEmpty(variable.getName()))) { list.add(variable.getName(), new com.google.gct.idea.debugger.CloudStackFrame.MyValue(variable, myVariableTable)); } } } node.addChildren(list, true); }<END_MOD>
<START_MOD>@org.gradle.api.tasks.TaskAction public void validate() throws AndroidLocation.AndroidLocationException, com.android.ide.common.signing.KeytoolException { java.io.File storeFile = signingConfig.getStoreFile(); if (storeFile == null) { throw new org.gradle.api.tasks.StopExecutionException(("Keystore file not set for signing config " + (signingConfig.getName()))); } if (!(storeFile.exists())) { if (com.android.ide.common.signing.KeystoreHelper.defaultDebugKeystoreLocation().equals(storeFile.getAbsolutePath())) { checkState(signingConfig.isSigningReady(), "Debug signing config not ready."); getLogger().info("Creating default debug keystore at {}", storeFile.getAbsolutePath()); if (!(com.android.ide.common.signing.KeystoreHelper.createDebugStore(signingConfig.getStoreType(), signingConfig.getStoreFile(), signingConfig.getStorePassword(), signingConfig.getKeyPassword(), signingConfig.getKeyAlias(), getILogger()))) { throw new java.lang.RuntimeException("Unable to recreate missing debug keystore."); } } else { throw new java.lang.IllegalArgumentException(java.lang.String.format("Keystore file %s not found for signing config '%s'.", storeFile.getAbsolutePath(), signingConfig.getName())); } } }<END_MOD>
<START_MOD>@org.junit.Test public void asStringExactMaxEmbeddedZero() throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump.getTestDump(); com.android.tools.perflib.heap.Instance str = ((com.android.tools.perflib.heap.Instance) (dump.getDumpedThing("embeddedZero"))); assertEquals("embedded\u0000", com.android.ahat.InstanceUtils.asString(str, 9)); }<END_MOD>
private static java.lang.String getDateFormatStringForSetting(android.content.Context context, java.lang.String value) { if (value != null) { int month = value.indexOf('M'); int day = value.indexOf('d'); int year = value.indexOf('y'); if (((month >= 0) && (day >= 0)) && (year >= 0)) { java.lang.String template = context.getString(R.string.numeric_date_template); if ((year < month) && (year < day)) { if (month < day) { value = java.lang.String.format(template, "yyyy", "MM", "dd"); } else { value = java.lang.String.format(template, "yyyy", "dd", "MM"); } } else if (month < day) { if (day < year) { value = java.lang.String.format(template, "MM", "dd", "yyyy"); } else { value = java.lang.String.format(template, "MM", "yyyy", "dd"); } } else { if (month < year) { value = java.lang.String.format(template, "dd", "MM", "yyyy"); } else { value = java.lang.String.format(template, "dd", "yyyy", "MM"); } } return value; } } <START_MOD>libcore.icu.LocaleData d = libcore.icu.LocaleData.get(<END_MOD>context.<START_MOD>getResources().getConfiguration().locale); value = d.getDateFormat(java.text.DateFormat.SHORT); if (!(value.contains("yyyy"))) { final int iLen = value.length(); final int i = (value.lastIndexOf('y')) + 1; value = ((value.substring(0, i)) + "yy") + (i < iLen ? value.substring(i, iLen) : ""); }<END_MOD> return value; }
boolean setData(java.lang.String data) { java.lang.String[] values = data.split(com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigState.SEP); if ((values.length) == <START_MOD>6) { for (com.android.ide.eclipse.adt.internal.sdk.LayoutDevice d : mDeviceList) { if (d.getName().equals(values[0])) { device = d; com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config = device.getConfigs().get(values[1]); if (config != null) { configName = values[1]; locale = new com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier[2]; java.lang.String[] locales = values[2].split(com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigState.SEP_LOCALE); if ((locales.length) >= 2) { if ((locales[0].length()) > 0) { locale[0] = new com.android.ide.eclipse.adt.internal.resources.configurations.LanguageQualifier(locales[0]); } if ((locales[1].length()) > 0) { locale[1] = new com.android.ide.eclipse.adt.internal.resources.configurations.RegionQualifier(locales[1]); } } theme = values[3]; dock = com.android.sdklib.resources.DockMode.getEnum(values[<END_MOD>4<START_MOD>]); night = com.android.sdklib.resources.NightMode.getEnum(values[5])<END_MOD>; return true; } } } } return false; }
<START_MOD>static int secondaryHash(java.lang.Object key) { return java.util.Collections.secondaryHash(key.hashCode()); }<END_MOD>
@javax.annotation.Nonnull private com.android.jack.dx.dex.code.DalvCode createCode(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method, @javax.annotation.Nonnull com.android.jack.dx.rop.code.RopMethod ropMethod) { com.android.jack.dx.dex.DexOptions options = new com.android.jack.dx.dex.DexOptions(); options.forceJumbo = forceJumbo; int paramSize = <START_MOD>getParameterWordSize<END_MOD>(method); int positionListKind; com.android.jack.dx.rop.code.LocalVariableInfo lvInfo; if (emitLocalDebugInfo) { lvInfo = com.android.jack.dx.rop.code.LocalVariableExtractor.extract(ropMethod); } else { lvInfo = null; } if (emitLineNumberTable) { positionListKind = com.android.jack.dx.dex.code.PositionList.LINES; } else { positionListKind = com.android.jack.dx.dex.code.PositionList.NONE; } return com.android.jack.dx.dex.code.RopTranslator.translate(ropMethod, positionListKind, lvInfo, paramSize, options); }
public java.lang.String getIsimImpi() { <START_MOD>return<END_MOD> <START_MOD>getIsimImpi(getSubId<END_MOD>()); }
@org.junit.Test public void anqpRequestCompletedWithError() { mHandler.notifyANQPDone(com.android.server.wifi.hotspot2.PasspointEventHandlerTest.BSSID, false); verify(mCallbacks).onANQPResponse(com.android.server.wifi.hotspot2.PasspointEventHandlerTest.BSSID, null); }
<START_MOD>private void load() { if (!(mCacheFile.exists())) return; try (android.util.JsonReader reader = new android.util.JsonReader(new java.io.FileReader(mCacheFile))) { reader.beginObject(); while (reader.hasNext()) { switch (reader.nextName()) { case com.android.bips.LocalDiscoverySessionInfo.NAME_KNOWN_GOOD : mKnownGood.addAll(loadPrinterIds(reader)); break; case com.android.bips.LocalDiscoverySessionInfo.NAME_PRIORITY : mPriority.addAll(loadPrinterIds(reader)); break; default : reader.skipValue(); break; } } reader.endObject(); } catch (java.io.IOException e) { android.util.Log.w(com.android.bips.LocalDiscoverySessionInfo.TAG, ("Failed to read info from " + (com.android.bips.LocalDiscoverySessionInfo.CACHE_FILE)), e); } }<END_MOD>
private void notifyHostEmuActivated(<START_MOD>int type<END_MOD>) { mListener.onHostCardEmulationActivated(<START_MOD>type<END_MOD>); }
public static java.io.File createTempDir(@javax.annotation.Nonnull java.lang.String prefix) throws com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotSetPermissionException, com.android.sched.util.file.<START_MOD>CannotUnsetPermissionException<END_MOD> { final java.io.File tmp = com.android.sched.util.file.Files.createTempDir(((com.android.jack.TestTools.TMP_PREFIX) + prefix)); java.lang.Runtime.getRuntime().addShutdownHook(new java.lang.Thread() { @java.lang.Override public void run() { try { com.android.sched.util.file.FileUtils.deleteDir(tmp); } catch (java.io.IOException e) { java.lang.System.err.println(e.getMessage()); } } }); return tmp; }
<START_MOD>private int priority(int eventId) { switch (eventId) { case com.android.internal.logging.MetricsProto.MetricsEvent.NOTIFICATION_NETWORK_SIGN_IN : return 4; case com.android.internal.logging.MetricsProto.MetricsEvent.NOTIFICATION_NETWORK_NO_INTERNET : return 3; case com.android.internal.logging.MetricsProto.MetricsEvent.NOTIFICATION_NETWORK_SWITCH : return 2; case com.android.internal.logging.MetricsProto.MetricsEvent.NOTIFICATION_NETWORK_LOST_INTERNET : return 1; default : return 0; } }<END_MOD>
public java.net.SocketAddress getsockname(java.io.FileDescriptor fd) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
@java.lang.Override protected void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.pass_fail_list); setPassFailButtonClickListeners(); setInfoResources(R.string.streaming_video, R.string.streaming_video_info, (-1)); android.widget.TextView empty = ((android.widget.TextView) (findViewById(android.R.id.empty))); empty.setText(R.string.sv_no_data); getPassButton().setEnabled(false); <START_MOD>try { <END_MOD>setTestListAdapter(getStreamAdapter()); }<START_MOD> catch (java.lang.InterruptedException e) { e.printStackTrace(); } }<END_MOD>
@java.lang.Override public void trackResponse(<START_MOD>com<END_MOD>.<START_MOD>android.okhttp<END_MOD>.ResponseSource source) { <START_MOD>super.<END_MOD>delegate.trackResponse(source); }
<START_MOD>@org.junit.Test(expected = java.lang.NullPointerException.class) public void test_setFields_null() { builder.setFields(null); }<END_MOD>
public android.net.IpSecManager.SecurityParameterIndex reserveSecurityParameterIndex(int direction, java.net.InetAddress remoteAddress) throws android.net.IpSecManager.ResourceUnavailableException <START_MOD>{ try<END_MOD> { return new android.net.IpSecManager.SecurityParameterIndex(mService, direction, remoteAddress, <START_MOD>android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX<END_MOD>); }<START_MOD> catch (android.net.IpSecManager.SpiUnavailableException impossible) { return null; } }<END_MOD>
@android.test.suitebuilder.annotation.SmallTest public void testCallVoicemail(<START_MOD>) { android.content.pm.PackageManager packageManager = getContext().getPackageManager(); if (packageManager.hasSystemFeature(PackageManager.FEATURE_TELEPHONY)<END_MOD>) { try { android.content.Intent intent = new android.content.Intent("android.intent.action.CALL_PRIVILEGED", android.net.Uri.fromParts("voicemail", "", null)); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); mContext.startActivity(intent); fail( did not throw SecurityException as expected } catch (java.lang.SecurityException e) { } }<START_MOD> else { return; } }<END_MOD>
<START_MOD>public com.android.ims.internal.IImsMMTelFeature getImsEmergencyMMTelFeatureAndListen(int slotIndex, com.android.ims.internal.IImsServiceFeatureListener callback) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony != null) { return telephony.getEmergencyMMTelFeatureAndListen(slotIndex, callback); } } catch (android.os.RemoteException e) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ("getImsEmergencyMMTelFeatureAndListen, RemoteException: " + (e.getMessage()))); } return null; }<END_MOD>
@java.lang.Override protected byte[] engineSign() throws java.security.SignatureException { if ((key) == null) { throw new java.security.SignatureException( DSA or RSA or EC private key } <START_MOD>final org.conscrypt.OpenSSLDigestContext ctx = this.ctx; <END_MOD>try { byte[] buffer = new byte[org.conscrypt.NativeCrypto.EVP_PKEY_size(key.getPkeyContext())]; int bytesWritten = org.conscrypt.NativeCrypto.EVP_SignFinal(ctx<START_MOD>.getContext()<END_MOD>, buffer, 0, key.getPkeyContext()); byte[] signature = new byte[bytesWritten]; java.lang.System.arraycopy(buffer, 0, signature, 0, bytesWritten); return signature; } catch (java.lang.Exception ex) { throw new java.security.SignatureException(ex); } finally { <START_MOD>resetContext(); } }<END_MOD>
<START_MOD>public static void dumpProto(com.android.bluetooth.BluetoothMetricsProto.BluetoothLog.Builder metricsBuilder) { synchronized(com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts) { com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.forEach(( key, value) -> metricsBuilder.addProfileUsageStats(com.android.bluetooth.BluetoothMetricsProto.ProfileUsageStats.newBuilder().setProfileId(key).setNumTimesConnected(value).build())); com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.clear(); } }<END_MOD>
public void saveToXml(org.xmlpull.v1.XmlSerializer out) throws java.io.IOException { out.startTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_ROOT); com.android.server.pm.ShortcutService.writeAttr(out, com.android.server.pm.ShortcutPackageInfo.ATTR_VERSION, mVersionCode); com.android.server.pm.ShortcutService.writeAttr(out, com.android.server.pm.ShortcutPackageInfo.ATTR_SHADOW, mIsShadow); for (int i = 0; i < (mSigHashes.size()); i++) { out.startTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_SIGNATURE); <START_MOD>java.lang.String encoded = java.util.Base64.getEncoder().encodeToString(mSigHashes.get(i)); <END_MOD>com.android.server.pm.ShortcutService.writeAttr(out, com.android.server.pm.ShortcutPackageInfo.ATTR_SIGNATURE_HASH, <START_MOD>encoded<END_MOD>); out.endTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_SIGNATURE); } out.endTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_ROOT); }
private void defaultWriteFields(java.lang.Object obj, java.io.ObjectStreamClass desc) throws java.io.IOException {<START_MOD> java.lang.Class<?> cl = desc.forClass(); if (((cl != null) && (obj != null)) && (!(cl.isInstance(obj)))) { throw new java.lang.ClassCastException(); }<END_MOD> desc.checkDefaultSerialize(); int primDataSize = desc.getPrimDataSize(); if (((primVals) == null) || ((primVals.length) < primDataSize)) { primVals = new byte[primDataSize]; } desc.getPrimFieldValues(obj, primVals); bout.write(primVals, 0, primDataSize, false); java.io.ObjectStreamField[] fields = desc.getFields(false); java.lang.Object[] objVals = new java.lang.Object[desc.getNumObjFields()]; int numPrimFields = (fields.length) - (objVals.length); desc.getObjFieldValues(obj, objVals); for (int i = 0; i < (objVals.length); i++) { if (java.io.ObjectOutputStream.extendedDebugInfo) { debugInfoStack.push((((((( (class   + (desc.getName())) +   name:   + (fields[(numPrimFields + i)].getName())) +   type:   + (fields[(numPrimFields + i)].getType())) + "\")")); } try { writeObject0(objVals[i], fields[(numPrimFields + i)].isUnshared()); } finally { if (java.io.ObjectOutputStream.extendedDebugInfo) { debugInfoStack.pop(); } } } }
@org.junit.Test public void testMethodRef005() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(METHODREF005).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
<START_MOD>public void sendMultipartTextMessage(java.lang.String destinationAddress, java.lang.String scAddress, java.util.ArrayList<java.lang.String> parts, java.util.ArrayList<android.app.PendingIntent> sentIntents, java.util.ArrayList<android.app.PendingIntent> deliveryIntents, int priority, boolean isExpectMore, int validityPeriod) { sendMultipartTextMessageInternal(destinationAddress, scAddress, parts, sentIntents, deliveryIntents, true); }<END_MOD>
<START_MOD>@javax.annotation.Nonnegative public long getLastModified() { assert (file) != null; return file.lastModified(); }<END_MOD>
@java.lang.Override public int <START_MOD>computeSerializedSize<END_MOD>() { int size = 0; int unknownFieldCount = ((unknownFieldData) == null) ?   : unknownFieldData.size(); for (int i = 0; i < unknownFieldCount; i++) { com.google.protobuf.nano.UnknownFieldData unknownField = unknownFieldData.get(i); size += com.google.protobuf.nano.CodedOutputByteBufferNano.computeRawVarint32Size(unknownField.tag); size += unknownField.bytes.length; } return size; }
<START_MOD>private static java.lang.String eventTypeToString(int type) { switch (type) { case com.android.bluetooth.a2dp.StackEvent.EVENT_TYPE_NONE : return "EVENT_TYPE_NONE"; case com.android.bluetooth.a2dp.StackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED : return "EVENT_TYPE_CONNECTION_STATE_CHANGED"; case com.android.bluetooth.a2dp.StackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED : return "EVENT_TYPE_AUDIO_STATE_CHANGED"; default : return "EVENT_TYPE_UNKNOWN:" + type; } }<END_MOD>
<START_MOD>android.bluetooth.BluetoothDevice getCurrentAudioDevice() { synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { if ((stateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { return stateMachine.getDevice(); } } return null; } }<END_MOD>
<START_MOD>private static java.lang.String requestToString(int request) { switch (request) { case com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_SLOT_STATUS : return "GET_SLOT_STATUS"; default : return "<unknown request>"; } }<END_MOD>
<START_MOD>@java.lang.Override @javax.annotation.Nonnull public java.lang.String getMessage() { return "Obfuscation: " + (cause.getMessage()); }<END_MOD>
<START_MOD>private void checkAbsShort() { android.renderscript.Allocation inValue = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I16(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inValue, 35, (-500), 400); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U16(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testAbsShort(inValue, out); verifyResultsAbsShort(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAbsShort: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U16(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAbsShort(inValue, out); verifyResultsAbsShort(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAbsShort: " + (e.toString()))); } }<END_MOD>
<START_MOD>public void preloadPackageForAbi(java.lang.String packagePath, java.lang.String libsPath, java.lang.String abi) throws android.os.ZygoteStartFailedEx, java.io.IOException { android.os.ZygoteProcess.ZygoteState state = openZygoteSocketIfNeeded(abi); state.writer.write("3"); state.writer.newLine(); state.writer.write("--preload-package"); state.writer.newLine(); state.writer.write(packagePath); state.writer.newLine(); state.writer.write(libsPath); state.writer.newLine(); state.writer.flush(); }<END_MOD>
<START_MOD>@org.junit.Test public void parseBufferWithEmptyVenueName() throws java.lang.Exception { byte[] testData = getTestData(new java.lang.String[0]); java.nio.ByteBuffer buffer = java.nio.ByteBuffer.allocate(testData.length); buffer.put(testData); buffer.position(0); assertTrue(com.android.server.wifi.hotspot2.anqp.VenueNameElement.parse(buffer).getNames().isEmpty()); }<END_MOD>
<START_MOD>private static com.android.internal.telephony.uicc.euicc.OperatorId buildOperatorId(com.android.internal.telephony.uicc.asn1.Asn1Node node) throws com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException, com.android.internal.telephony.uicc.asn1.TagNotFoundException { byte[] gid1 = null; if (node.hasChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_1)) { gid1 = node.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_1).asBytes(); } byte[] gid2 = null; if (node.hasChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_2)) { gid2 = node.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_2).asBytes(); } return new com.android.internal.telephony.uicc.euicc.OperatorId(node.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_0).asBytes(), gid1, gid2); }<END_MOD>
<START_MOD>public void testInlinedReturnObjectArgument() { logWriter.println("testInlinedReturnObjectArgument started"); testBreakpointIn("breakpointReturnObjectArg"); logWriter.println("testInlinedReturnObjectArgument done"); }<END_MOD>
<START_MOD>private void setHearingAidActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, (("setHeraingAidActiveDevice(" + device) + ")")); } final com.android.bluetooth.hearingaid.HearingAidService hearingAidService = mFactory.getHearingAidService(); if (hearingAidService == null) { return; } hearingAidService.setActiveDevice(device); mHearingAidActiveDevice = device; }<END_MOD>
<START_MOD>public void timeCollatorTertiary(int reps) { java.text.RuleBasedCollator collator = ((java.text.RuleBasedCollator) (java.text.Collator.getInstance(java.util.Locale.US))); collator.setStrength(java.text.Collator.TERTIARY); for (int i = 0; i < reps; i++) { collator.compare("abcdE", "abcde"); collator.compare("abcde", "abcde"); collator.compare("abcde", "abcdE"); } }<END_MOD>
private boolean <START_MOD>bbHasOnlyDefinitions<END_MOD>(@javax.annotation.Nonnull com.android.jack.<START_MOD>cfg.BasicBlock bb<END_MOD>, @javax.annotation.Nonnull com.android.jack.<START_MOD>ir.ast.JVariable targetVar, @javax.annotation.Nonnull java.util.List<com.android.jack.analysis.DefinitionMarker> defsToFound) { com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker rdm =<END_MOD> bb<START_MOD>.getMarker(<END_MOD>com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker<START_MOD>.class); assert<END_MOD> rdm <START_MOD>!= null; int nbDef <END_MOD>= <START_MOD>0; for (com.android.jack.analysis.DefinitionMarker def :<END_MOD> rdm<START_MOD>.getReachingDefs()) { if ((def.getDefinedVariable()) == targetVar) { if (defsToFound.contains(def)) { nbDef++; } else { return<END_MOD> false; <START_MOD>} } } return (defsToFound.size<END_MOD>()) == <START_MOD>nbDef; }<END_MOD>
@org.junit.Test public void backgroundScanSuccessSingleBucket() { com.android.server.wifi.WifiNative.ScanSettings settings = new com.android.server.wifi.ScanTestUtil.NativeScanSettingsBuilder().withBasePeriod(10000).withMaxApPerScan(10).addBucketWithBand(10000, WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN, WifiScanner.WIFI_BAND_24_GHZ).build(); com.android.server.wifi.scanner.<START_MOD>WificondWifiScannerTest<END_MOD>.ScanPeriod[] expectedPeriods = new com.android.server.wifi.scanner.<START_MOD>WificondWifiScannerTest<END_MOD>.ScanPeriod[]{ new com.android.server.wifi.scanner.<START_MOD>WificondWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.WificondWifiScannerTest<END_MOD>.ScanPeriod.ReportType.RESULT, com.android.server.wifi.ScanResults.create(0, 2400), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)), new com.android.server.wifi.scanner.<START_MOD>WificondWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.WificondWifiScannerTest<END_MOD>.ScanPeriod.ReportType.RESULT, com.android.server.wifi.ScanResults.create(1, 2450), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)) }; doSuccessfulTest(settings, expectedPeriods); }
<START_MOD>public void testMakeTimeZone_HasFutureDST_NoPastDST_NegativeTransitions() throws java.io.IOException { int[][] times = new int[][]{ new int[]{ -2000, 0 }, new int[]{ -500, 1 }, new int[]{ -100, 2 } }; int[][] offsets = new int[][]{ new int[]{ 1800, 0 }, new int[]{ 3600, 0 }, new int[]{ 5400, 1 } }; int expectedDSTSavings = libcore.util.ZoneInfoTest.secondsInMillis((5400 - 3600)); libcore.util.ZoneInfo zoneInfo = createZoneInfo(times, offsets, libcore.util.ZoneInfoTest.secondsInMillis((-700))); assertTrue("Should use DST but doesn't", zoneInfo.useDaylightTime()); assertEquals(expectedDSTSavings, zoneInfo.getDSTSavings()); zoneInfo = createZoneInfo(times, offsets, ((libcore.util.ZoneInfoTest.secondsInMillis((-100))) - 5)); assertTrue("Should use DST but doesn't", zoneInfo.useDaylightTime()); assertEquals(expectedDSTSavings, zoneInfo.getDSTSavings()); }<END_MOD>
<START_MOD>@org.junit.Test public void xmlParsing_noCountriesOk() throws java.lang.Exception { libcore.util.TimeZoneFinderTest.parse(("<timezones>\n" + ((" <countryzones>\n" + " </countryzones>\n") + "</timezones>\n"))); }<END_MOD>
<START_MOD>public boolean stopOpenGlTracing() { boolean canTraceOpenGl = mClientData.hasFeature(ClientData.FEATURE_OPENGL_TRACING); if (!canTraceOpenGl) { return false; } try { com.android.ddmlib.HandleOpenGlTracing.sendStopGlTracing(this); return true; } catch (java.io.IOException e) { com.android.ddmlib.Log.w("ddms", "Stop OpenGL Tracing failed"); return false; } }<END_MOD>
<START_MOD>private void write(java.io.FileWriter writer) throws java.io.IOException { for (int i = 0; i < (com.android.ant.MultiApkExportTask.ExportData.INDEX_MAX); i++) { write(i, writer); } }<END_MOD>
static android.telephony.SignalStrength convertHalSignalStrength_1_2(android.hardware.radio.V1_2.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gsm.signalStrength, signalStrength.gsm.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, <START_MOD>tdscdmaRsrp_1_2<END_MOD>); }
public java.lang.String getLogLine() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(<START_MOD>mOutputName).append(':'); write(sb, com.android.sdklib.internal.export.ApkData.PROP_BUILDINFO, <END_MOD>mBuildInfo); write(sb, com.android.sdklib.internal.export.ApkData.PROP_MINOR, mMinor); write(sb, com.android.sdklib.internal.export.ApkData.PROP_PROJECT, mRelativePath); write(sb, com.android.sdklib.internal.export.ApkData.PROP_API, mMinSdkVersion); if ((mGlVersion) != (com.android.sdklib.xml.ManifestData.GL_ES_VERSION_NOT_SET)) { write(sb, com.android.sdklib.internal.export.ApkData.PROP_GL, mGlVersion); } if ((mAbi) != null) { write(sb, com.android.sdklib.internal.export.ApkData.PROP_ABI, mAbi); } write(sb, com.android.sdklib.internal.export.ApkData.PROP_SCREENS, mSupportsScreens<START_MOD>.getEncodedValues()<END_MOD>); return sb.toString(); }
<START_MOD>public libcore.io.StructIfaddrs[] getifaddrs() throws libcore.io.ErrnoException { return os.getifaddrs(); }<END_MOD>
<START_MOD>@java.lang.Override public void afterCheckProject(@com.android.annotations.NonNull com.android.tools.lint.checks.Context context) { if (((mLocation) != null) && (!(mIgnore))) { java.lang.String message = (("Potentially insecure random numbers on some versions of " + "Android. Read ") + (com.android.tools.lint.checks.SecureRandomGeneratorDetector.BLOG_URL)) + " for more info."; context.report(com.android.tools.lint.checks.SecureRandomGeneratorDetector.ISSUE, mLocation, message, null); } }<END_MOD>
public<START_MOD> synchronized<END_MOD> org.eclipse.swt.graphics.Image setImage(java.awt.image.BufferedImage awtImage) { if (awtImage != (mAwtImage)) { mAwtImage = null; if ((mImage) != null) { mImage.dispose(); } if (awtImage == null) { mImage = null; } else { mImage = com.android.ide.eclipse.adt.internal.editors.layout.gle2.SwtUtils.convertToSwt(mCanvas.getDisplay(), awtImage, false, (-1)); } } else { <START_MOD>assert awtImage instanceof com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage; mImage = ((com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage) (awtImage)).getSwtImage(<END_MOD>); } return mImage; }
<START_MOD>@java.lang.Override public java.util.List<com.android.builder.AndroidDependency> getDependencies() { return dependencies; }<END_MOD>
public void enqueueFault(java.lang.String methodName, final int errno) { getHandlers(methodName).add(new java.lang.reflect.InvocationHandler() { @java.lang.Override public java.lang.Object invoke(java.lang.Object proxy, java.lang.reflect.Method method, java.lang.Object[] args) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { throw new <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException(method.getName(), errno); } }); }
@javax.annotation.Nonnull public com.android.jack.ir.sourceinfo.SourceInfo create(int startCol, int endCol, @javax.annotation.Nonnegative int startLine, @javax.annotation.Nonnegative int endLine, @javax.annotation.Nonnull java.lang.String fileName) { com.android.jack.ir.sourceinfo.FileSourceInfo fileSourceInfo = create(fileName); <START_MOD>if (startLine <= 0) { assert endLine <= 0; return fileSourceInfo; } <END_MOD>com.android.jack.ir.sourceinfo.LineSourceInfo lineSourceOrigin = create(startLine, endLine, fileSourceInfo); if (startCol <= 0) <START_MOD>{ assert endCol <= 0; return lineSourceOrigin; } com.android.jack.ir.sourceinfo.ColumnSourceInfo newInstance = new com.android.jack.ir.sourceinfo.ColumnSourceInfo(lineSourceOrigin, startCol, endCol); com.android.jack.ir.sourceinfo.ColumnSourceInfo canonical = canonicalColumnSourceInfos.get(newInstance); assert (canonical == null) || ((newInstance != canonical) <END_MOD>&& (<START_MOD>newInstance.equals(canonical))); if (canonical != null<END_MOD>) { return <START_MOD>canonical; } else {<END_MOD> com.android.jack.ir.sourceinfo.ColumnSourceInfo <START_MOD>previousValue<END_MOD> = canonicalColumnSourceInfos.<START_MOD>putIfAbsent(newInstance, newInstance); if (previousValue !=<END_MOD> null) <START_MOD>{ newInstance = previousValue; }<END_MOD> return <START_MOD>newInstance; } }<END_MOD>
<START_MOD>@java.lang.Override public com.intellij.codeInspection.reference.PsiClass getAndroidContext() { return myAndroidContext; }<END_MOD>
<START_MOD>public boolean isApplicationOnIcc(com.android.internal.telephony.IccCardApplicationStatus.AppType type) { for (int i = 0; i < (mUiccApplications.length); i++) { if (((mUiccApplications[i]) != null) && ((mUiccApplications[i].getType()) == type)) { return true; } } return false; }<END_MOD>
@java.lang.Override protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return getUserRecord().<START_MOD>socketQuotaTracker<END_MOD>; }
private <START_MOD>synchronized<END_MOD> <START_MOD>void addMediaPlayerInfo(android.media.session.MediaController controller) { java.lang.String packageName = controller.getPackageName(); com.android.bluetooth.avrcp.MediaPlayerInfo info = new com.android.bluetooth.avrcp.MediaPlayerInfo<END_MOD>(com.android.bluetooth.avrcp.MediaController<START_MOD>.wrap(controller),<END_MOD> <START_MOD>AvrcpConstants.PLAYER_TYPE_AUDIO,<END_MOD> <START_MOD>AvrcpConstants.PLAYER_SUBTYPE_NONE,<END_MOD> <START_MOD>getPlayStateBytes(controller<END_MOD>.getPlaybackState()<START_MOD>), getFeatureBitMask(packageName), getAppLabel(packageName))<END_MOD>; <START_MOD>if<END_MOD> <START_MOD>(<END_MOD>com.android.bluetooth.avrcp.Avrcp.<START_MOD>DEBUG<END_MOD>) android.util.Log.<START_MOD>d<END_MOD>(com.android.bluetooth.avrcp.Avrcp.TAG, <START_MOD>info.toString<END_MOD>()); <START_MOD>(mLastUsedPlayerID)++;<END_MOD> <START_MOD>mMediaPlayerInfoList<END_MOD>.<START_MOD>put<END_MOD>(<START_MOD>mLastUsedPlayerID<END_MOD>, <START_MOD>info<END_MOD>); }
private com.android.manifmerger.MergingReport merge() throws com.android.manifmerger.ManifestMerger2.MergeFailureException { com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder(mILogger); com.google.common.base.Optional<com.android.manifmerger.XmlDocument> xmlDocumentOptional = com.google.common.base.Optional.absent(); for (java.io.File inputFile : mFlavorsAndBuildTypeFiles) { mILogger.info(( flavors and build manifest   + (inputFile.getPath()))); xmlDocumentOptional = merge(xmlDocumentOptional, inputFile, mergingReportBuilder); <START_MOD>if (!(xmlDocumentOptional.isPresent())) { return mergingReportBuilder.build(); } <END_MOD>} mILogger.info(( main manifest + (mMainManifestFile.getPath()))); xmlDocumentOptional = merge(xmlDocumentOptional, mMainManifestFile, mergingReportBuilder); <START_MOD>if (!(xmlDocumentOptional.isPresent())) { return mergingReportBuilder.build(); } <END_MOD>for (java.io.File inputFile : mLibraryFiles) { mILogger.info(( library manifest   + (inputFile.getPath()))); xmlDocumentOptional = merge(xmlDocumentOptional, inputFile, mergingReportBuilder); if (<START_MOD>!(<END_MOD>xmlDocumentOptional.isPresent())<START_MOD>) { return mergingReportBuilder.build(); } }<END_MOD> mergingReportBuilder.setMergedDocument(xmlDocumentOptional.get()); return mergingReportBuilder.build(); }
private void addOtherUserItem(android.content.Context context, java.util.ArrayList<com.android.settings.applications.RunningState.MergedItem> newMergedItems, android.util.SparseArray<com.android.settings.applications.RunningState.MergedItem> userItems, com.android.settings.applications.RunningState.MergedItem newItem) { com.android.settings.applications.RunningState.MergedItem userItem = userItems.get(newItem.mUserId); boolean first = (userItem == null) || ((userItem.mCurSeq) != (mSequence)); if (first) { if (userItem == null) { userItem = new com.android.settings.applications.RunningState.MergedItem(newItem.mUserId); userItems.put(newItem.mUserId, userItem); } else { userItem.mChildren.clear(); } userItem.mCurSeq = mSequence; if ((userItem.mUser = mUsers.get(newItem.mUserId)) == null) { userItem.mUser = new com.android.settings.applications.RunningState.UserState(); android.content.pm.UserInfo info = mUm.getUserInfo(newItem.mUserId); userItem.mUser.mInfo = info; if (info != null) { userItem.mUser.mIcon = com.android.settings.users.UserUtils.getUserIcon(context, mUm, info, context.getResources()); } java.lang.String name = (info != null) ? info.name : null; if (<START_MOD>(<END_MOD>name == null) <START_MOD>&& (info != null)) <END_MOD>{ name = java.lang.Integer.toString(info.id); } <START_MOD>else if (info == null) { name = "null"; } <END_MOD>userItem.mUser.mLabel = context.getResources().getString(R.string.running_process_item_user_label, name); } newMergedItems.add(userItem); } userItem.mChildren.add(newItem); }
@javax.annotation.Nonnull <START_MOD>public static java.io.File getPrebuilt(@javax.annotation.Nonnull <END_MOD>java.lang.String prebuiltName) { java.lang.String prebuiltVarName = (com.android.jack.test.toolchain.AbstractTestTools.TOOLCHAIN_PREBUILT_PREFIX) + prebuiltName; java.lang.String prebuiltPath = com.android.jack.test.TestsProperties.getProperty(prebuiltVarName)<START_MOD>.trim()<END_MOD>; if (prebuiltPath.equals("")) { throw new com.android.jack.test.TestConfigurationException(((   + prebuiltVarName) +   is not set } java.io.File result = new java.io.File(prebuiltPath); if (!(result.isAbsolute())) { result = new java.io.File(com.android.jack.test.TestsProperties.getJackRootDir(), prebuiltPath); } if (!(result.exists())) { throw new com.android.jack.test.TestConfigurationException((((( not find   + prebuiltName) +   prebuilt at   + (result.getPath())) + "'")); } return result; }
<START_MOD>private <T> boolean isInList(T[] itemList, T target) { if (target == null) { return false; } for (T item : itemList) { if (target.equals(item)) { return true; } } return false; }<END_MOD>
<START_MOD>private native int getIntNative(java.lang.Object object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;<END_MOD>
<START_MOD>private void checkNativePowrFloatFloat() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testNativePowrFloatFloat(inV, out); verifyResultsNativePowrFloatFloat(inV, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testNativePowrFloatFloat: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testNativePowrFloatFloat(inV, out); verifyResultsNativePowrFloatFloat(inV, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testNativePowrFloatFloat: " + (e.toString()))); } }<END_MOD>
public native void fdatasync(java.io.FileDescriptor fd) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
public void run() { for (com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction a2 : actions) { if (a2 instanceof com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) { ((com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) (a2)).<START_MOD>getCallback<END_MOD>()<START_MOD>.action(<END_MOD>a2, key, (!isChecked)); } } }
void startScan(int appIf, boolean isServer, android.bluetooth.le.ScanSettings settings, java.util.List<android.bluetooth.le.ScanFilter> filters, java.util.List<java.util.List<android.bluetooth.le.ResultStorageDescriptor>> storages, java.lang.String callingPackage) { if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG,   scan with filters enforceAdminPermission(); if (needsPrivilegedPermissionForScan(settings)) { enforcePrivilegedPermission(); } final com.android.bluetooth.gatt.ScanClient scanClient = new com.android.bluetooth.gatt.ScanClient(appIf, isServer, settings, filters, storages); scanClient.hasLocationPermission = com.android.bluetooth.Utils.checkCallerHasLocationPermission(this, mAppOps, callingPackage); scanClient.hasPeersMacAddressPermission = com.android.bluetooth.Utils.checkCallerHasPeersMacAddressPermission(this); scanClient.legacyForegroundApp = com.android.bluetooth.Utils.isLegacyForegroundApp(this, callingPackage); mClientMap.getScanStatsById(appIf).startScan(<START_MOD>settings<END_MOD>); mScanManager.startScan(scanClient); }
<START_MOD>@java.lang.Override public void run() { process(this, t); }<END_MOD>
public static void e(java.lang.Object objectPrefix, java.lang.Throwable tr, java.lang.String format, java.lang.Object... args) { if (android.telecom.Log.ERROR) { android.<START_MOD>telecom<END_MOD>.Log<START_MOD>.systemLogger<END_MOD>.e(android.telecom.Log.TAG, android.telecom.Log.buildMessage(android.telecom.Log.getPrefixFromObject(objectPrefix), format, args), tr); } }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((getDesc()) == null ?   : getDesc().hashCode()); result = (prime * result) + ((mLocalDir) == null ?   : mLocalDir.hashCode()); result = (prime * result) + ((mSourceProperties) == null ?   : mSourceProperties.hashCode()); <START_MOD>result = (prime * result) + ((mUpdate) == null ?   : mUpdate.hashCode()); <END_MOD>return result; }
public static java.lang.String guessMimeTypeFromExtension(java.lang.String extension) { if ((extension == null) || (extension.isEmpty())) { return null; } <START_MOD>extension = extension.toLowerCase(); <END_MOD>return libcore.net.MimeUtils.extensionToMimeTypeMap.get(extension); }
@java.lang.Override public boolean hasCompliantPrebuilts() { com.android.sched.util.config.Config config = com.android.sched.util.config.ThreadConfig.getConfig(); <START_MOD>for (<END_MOD>com.android.sched.util.config.id.PropertyId<?><START_MOD> property : config.getPropertyIds()) { if (property.hasCategory(com.android.jack.library.PrebuiltCompatibility.class)) { try { java.lang.String value<END_MOD> = <START_MOD>getProperty(("config." + (property.getName()))); com.android.jack.library.PrebuiltCompatibility compatibility = property.getCategory(com.android.jack.library.PrebuiltCompatibility.class); if (compatibility != null) { return compatibility.isCompatible(config, value); } else { return config.parseAs(property, value).equals(config.get(property)); } } catch (com.android.jack.library.MissingLibraryPropertyException e) { com.android.jack.library.v0002.InputJackLibraryImpl.logger.log(java.util.logging.Level.FINE, e.getMessage()); return false; } catch<END_MOD> (com.android.sched.util.<START_MOD>codec.ParsingException e) { com.android.jack.library.v0002.InputJackLibraryImpl.logger.log(java.util.logging.Level.FINE,   ''{0}'' is malformed from library {1}<END_MOD>: <START_MOD>{2} new java.lang.Object[]{ <END_MOD>property.getName()<START_MOD>, getLocation().getDescription(), e.getMessage() });<END_MOD> return false; } } <START_MOD>}<END_MOD> return true; }
public static java.<START_MOD>util.ArrayList<java.<END_MOD>security.Provider<START_MOD>><END_MOD> <START_MOD>getExternalProviders<END_MOD>(java.lang.String algorithm) { java.<START_MOD>util.ArrayList<java.<END_MOD>security.Provider<START_MOD>><END_MOD> <START_MOD>providers<END_MOD> = <START_MOD>new java.util.ArrayList<>(1)<END_MOD>; for (java.security.Provider p : java.security.Security.getProviders(algorithm)) { if (!(org.conscrypt.CryptoUpcalls.<START_MOD>isOurProvider<END_MOD>(<START_MOD>p<END_MOD>))) { <START_MOD>providers.add(<END_MOD>p<START_MOD>)<END_MOD>; } } if (<START_MOD>(providers.size())<END_MOD> == <START_MOD>0<END_MOD>) { java.lang.System.err.println(( not find external provider for algorithm:   + algorithm)); } return <START_MOD>providers<END_MOD>; }
public native java.lang.String getnameinfo(java.net.InetAddress address, int flags) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.GaiException;
private int readImpl(java.nio.ByteBuffer buffer, long position) throws java.io.IOException { buffer.checkWritable(); checkOpen(); checkReadable(); if (!(buffer.hasRemaining())) { return 0; } int bytesRead = 0; boolean completed = false; try { begin(); try { if (position == (-1)) { bytesRead = Libcore.os.read(fd, buffer); } else { bytesRead = Libcore.os.pread(fd, buffer, position); } if (bytesRead == 0) { bytesRead = -1; } } catch (<START_MOD>android.os<END_MOD>.ErrnoException errnoException) { if ((errnoException.errno) == (EAGAIN)) { bytesRead = 0; } else { throw errnoException.rethrowAsIOException(); } } completed = true; } finally { end((completed && (bytesRead >= 0))); } if (bytesRead > 0) { buffer.position(((buffer.position()) + bytesRead)); } return bytesRead; }
@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) { com.android.sched.vfs.InputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VFS prefixedInputVFS = null; try { prefixedInputVFS = new com.android.sched.vfs.PrefixedFS(vfs, com.android.jack.library.v0002.InputJackLibraryImpl.getSectionPath(fileType)); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.NotDirectoryException e) { throw new java.lang.AssertionError(e); } if (fileType == (com.android.jack.library.FileType.PREBUILT)) { try { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(new com.android.sched.vfs.MessageDigestFS(prefixedInputVFS, com.android.sched.util.config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO))); } catch (com.android.sched.vfs.WrongVFSFormatException <START_MOD>| com.android.sched.vfs.NoDigestFoundException <END_MOD>e) { throw new java.lang.AssertionError(e); } } else { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(prefixedInputVFS); } sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }
<START_MOD>public boolean setListenChannel(int channel, int operatingClass) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure())) return false; if ((channel < 0) || (operatingClass < 0)) return false; com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult((((("setListenChannel(" + channel) + ", ") + operatingClass) + ")")); try { result.setResult(mISupplicantP2pIface.setListenChannel(channel, operatingClass)); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ("ISupplicantP2pIface exception: " + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }<END_MOD>
<START_MOD>android.net.ip.IpReachabilityMonitor makeMonitor() { return new android.net.ip.IpReachabilityMonitor("fake0", 1, mLog, mCallback, null, mConfig); }<END_MOD>
@java.lang.Override public java.security.Key engineDoPhase(java.security.Key key, boolean lastPhase) throws java.security.InvalidKeyException { if ((mOpenSslPrivateKey) == null) { throw new java.lang.IllegalStateException( initialized } if (!lastPhase) { throw new java.lang.IllegalStateException( only has one phase } if (key == null) { throw new java.security.InvalidKeyException( == null } if (!(key instanceof java.security.<START_MOD>PublicKey<END_MOD>)) { throw new java.security.InvalidKeyException(( <START_MOD>a public<END_MOD> key:   + (key.getClass()))); } <START_MOD>org.apache.harmony.xnet.provider.jsse.OpenSSLKey openSslPublicKey<END_MOD> = ((<START_MOD>org.apache.harmony.xnet.provider.jsse.OpenSSLKeyHolder) (org.apache.harmony.xnet.provider.jsse.OpenSSLECDHKeyAgreement.translateKeyToOpenSslKey<END_MOD>(key))).getOpenSSLKey(); byte[] buffer = new byte[mExpectedResultLength]; int actualResultLength = org.apache.harmony.xnet.provider.jsse.NativeCrypto.ECDH_compute_key(buffer, 0, openSslPublicKey.getPkeyContext(), mOpenSslPrivateKey.getPkeyContext()); byte[] result; if (actualResultLength == (-1)) { throw new java.lang.RuntimeException(( returned   + actualResultLength)); } else if (actualResultLength == (mExpectedResultLength)) { result = buffer; } else if (actualResultLength < (mExpectedResultLength)) { result = new byte[actualResultLength]; java.lang.System.arraycopy(buffer, 0, mResult, 0, mResult.length); } else { throw new java.lang.RuntimeException(((( produced a longer than expected result. Expected:   + (mExpectedResultLength)) +   actual:   + actualResultLength)); } mResult = result; return null; }
public void setreuid(int ruid, int euid) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
public final void init(int opmode, java.security.Key key, java.security.SecureRandom random) throws java.security.InvalidKeyException { initialized = false; javax.crypto.Cipher.checkOpmode(opmode); if (((spi) != null) && (key == null)) { checkCryptoPerm(spi, key); spi.engineInit(opmode, key, random); } else { try { chooseProvider(javax.crypto.Cipher.<START_MOD>InitType.KEY<END_MOD>, opmode, key, null, null, random); } catch (java.security.InvalidAlgorithmParameterException e) { throw new java.security.InvalidKeyException(e); } } initialized = true; this.opmode = opmode; }
<START_MOD>protected java.lang.String getEFPath(int efid) { switch (efid) { case EF_IMPI : case EF_IMPU : case EF_DOMAIN : return (MF_SIM) + (DF_ADF); } java.lang.String path = getCommonIccEFPath(efid); return path; }<END_MOD>
public native <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.StructStat fstat(java.io.FileDescriptor fd) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
<START_MOD>private void verifyResultsClzChar(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { byte[] arrayInValue = new byte[(INPUTSIZE) * 1]; inValue.copyTo(arrayInValue); byte[] arrayOut = new byte[(INPUTSIZE) * 1]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 1; j++) { android.renderscript.cts.TestClz.ArgumentsCharChar args = new android.renderscript.cts.TestClz.ArgumentsCharChar(); args.inValue = arrayInValue[i]; android.renderscript.cts.CoreMathVerifier.computeClz(args); byte actualOut = arrayOut[((i * 1) + j)]; int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; float ulpf; ulpf = (java.lang.Math.ulp(args.out)) * ulf; assertEquals(((((((((((((((((("Incorrect output for checkClzChar" + (relaxed ? "_relaxed" : "")) + " @[") + i) + ", ") + j) + "] with ulf:") + ulf) + ".\n") + "Input inValue:") + (args.inValue)) + "\n") + "Expected output out:") + (args.out)) + "\n") + "Actual output out:") + actualOut) + "\n"), args.out, actualOut, ulpf); } } }<END_MOD>
@vogar.target.TestRunnerProperties(testClass = <START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>Object<END_MOD>.class) @org.junit.Test public void <START_MOD>testRunner_Object<END_MOD>() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); <START_MOD>checkFilteredOutput<END_MOD>()<START_MOD>.noRunner(<END_MOD>).<START_MOD>completedNormally<END_MOD>(); }
<START_MOD>@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void test_set_field_too_high() { builder.set(java.util.Calendar.FIELD_COUNT, 1); }<END_MOD>
private void onRemoveSiteSelected() { boolean changed = false; org.eclipse.jface.viewers.ISelection sel = mTreeViewerSources.getSelection(); if (((mUpdaterData) != null) && (sel instanceof org.eclipse.jface.viewers.ITreeSelection)) { for (java.lang.Object c : ((org.eclipse.jface.viewers.ITreeSelection) (sel)).toList()) { if (c instanceof com.android.sdklib.internal.repository.SdkSource) <START_MOD>{ <END_MOD>com.android.sdklib.internal.repository.SdkSource<START_MOD> source = ((com.android.sdklib.internal.repository.SdkSource<END_MOD>) (c))<START_MOD>; if (mUpdaterData.getSources().hasSource(SdkSourceCategory.USER_ADDONS,<END_MOD> source<START_MOD>)) {<END_MOD> java.lang.String title =   Add-on Site? java.lang.String msg = java.lang.String.format( you sure you want to delete the add-on site '%1$s'? source.getUrl()); if (org.eclipse.jface.dialogs.MessageDialog.openQuestion(getShell(), title, msg)) { mUpdaterData.getSources().remove(source); changed = true; } } } } <START_MOD>} <END_MOD>if (changed) { onRefreshSelected(); } }
<START_MOD>@java.lang.Override public void setExtension(com.android.build.gradle.BaseExtension extension) { this.extension = extension; }<END_MOD>
private void initializeImageReader(java.lang.String cameraId, int format) throws java.lang.Exception { mOrderedPreviewSizes = android.hardware.camera2.cts.CameraTestUtils.getSupportedPreviewSizes(cameraId, mCameraManager, <START_MOD>getDisplaySize()<END_MOD>); android.util.Size maxPreviewSize = mOrderedPreviewSizes.get(0); createImageReader(maxPreviewSize, format, android.hardware.camera2.cts.PerformanceTest.NUM_MAX_IMAGES, null); updatePreviewSurface(maxPreviewSize); }
public static double floor(double d)<START_MOD> { int i; int j; final long bits = java.lang.Double.doubleToRawLongBits(d); int highBits = ((int) (bits >>> 32)); int lowBits = ((int) (bits)); int exp = ((highBits >> 20) & 2047) - 1023; if (exp < 0) { if (((java.lang.StrictMath.HUGE) + d) > 0.0) { if (highBits >= 0) { highBits = 0; } else if (((highBits & 2147483647) | lowBits) != 0) { highBits = -1074790400; } lowBits = 0; } } else if (exp < 20) { i = 1048575 >> exp; if (((highBits & i) | lowBits) == 0) { return d; } if (((java.lang.StrictMath.HUGE) + d) > 0.0) { if (highBits < 0) { highBits += 1048576 >> exp; } highBits &= ~i; lowBits = 0; } } else if (exp > 51) { if (exp == 1024) { return d + d; } return d; } else { i = -1 >> (exp - 20); if ((lowBits & i) == 0) { return d; } if (((java.lang.StrictMath.HUGE) + d) > 0.0) { if (highBits < 0) { if (exp == 20) { highBits += 1; } else { j = lowBits + (1 << (52 - exp)); if (j < lowBits) { highBits += 1; } lowBits = j; } } lowBits &= ~i; } } return java.lang.Double.longBitsToDouble(((((long) (highBits)) << 32) + lowBits)); }<END_MOD>
public void addI8(android.support.v8.renderscript.Byte4 v) { if (shouldThunk()) { mN.addI8(new android.renderscript.Byte4(v.x, v.y, v.z, v.w)); return; } addI8(v.x); addI8(v.y); addI8(v.z); addI8(v.w); }
@org.junit.Test public void testMethodRef009() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(METHODREF009).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
private static boolean verifyVpnStatus(final android.support.test.uiautomator.UiDevice device) throws java.lang.Exception { device.openNotification(); boolean isTrue = <START_MOD>false; if ((com.android.devtools.systemimage.uitest.utils.SystemUtil.getApiLevel()) >= 24) { device.findObject(new android.support.test.uiautomator.UiSelector().resourceId("com.android.systemui:id/expand_indicator").className("android.widget.ImageView")).click(); isTrue = <END_MOD>new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws java.lang.Exception { return device.hasObject(android.support.test.uiautomator.By.<START_MOD>text(com.android.devtools.systemimage.uitest.smoke.VpnTest.NETWORK_MONITORED_TEXT)); } }); } else { isTrue = new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws java.lang.Exception { return (device.hasObject(android.support.test.uiautomator.By.<END_MOD>res(Res.VPN_LOCK_ICON_RES))) || (device.hasObject(android.support.test.uiautomator.By.text(com.android.devtools.systemimage.uitest.smoke.VpnTest.VPN_ACTIVATED_TEXT))); } }); <START_MOD>} <END_MOD>device.pressHome(); return isTrue; }
<START_MOD>@com.android.annotations.Nullable @java.lang.Override public java.lang.String getProguardRules() { return proguardRules; }<END_MOD>
<START_MOD>@java.lang.Override public void onDestroy() { super.onDestroy(); if (!(mIsResponseSent)) { sendResponse(StkAppService.RES_ID_TIMEOUT); } }<END_MOD>
static java.math.BigInt generatePrimeDefault(int bitLength) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_generate_prime_ex(r.<START_MOD>nativePtr<END_MOD>, bitLength, false, 0, 0, 0); return r; }
<START_MOD>public void testSignature_updateArray_invalidLengths_throws() throws java.lang.Exception { try { java.security.Signature s = new libcore.java.security.SignatureTest.MySignature("FOO"); s.update(new byte[4], 3, 2); fail(); } catch (java.lang.IllegalArgumentException expected) { } }<END_MOD>
public boolean p2pSetChannel(int lc, int oc) { if (com.android.server.wifi.WifiNative.DBG) android.util.Log.d(mTAG, ((( lc= + lc) +   oc= + oc)); <START_MOD>if ((com.android.server.wifi.WifiNative.HIDL_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.setListenChannel(lc, oc); } else { <END_MOD>synchronized(com.android.server.wifi.WifiNative.sLock) { if ((lc >= 1) && (lc <= 11)) { if (!(doBooleanCommand(( listen_channel   + lc)))) { return false; } } else if (lc != 0) { return false; } if ((oc >= 1) && (oc <= 165)) { int freq = (oc <= 14 ? 2407 : 5000) + (oc * 5); return doBooleanCommand((((( disallow_freq 1000- + (freq - 5)) + ",") + (freq + 5)) + "-6000")); } else if (oc == 0) { return doBooleanCommand( disallow_freq   } } return false; }<START_MOD> }<END_MOD>
@java.lang.Override public java.io.File getManifestFile() { return getManifest().<START_MOD>getSrcFile<END_MOD>(); }
<START_MOD>@java.lang.Override public java.lang.String getMessage() { return ((location.getDescription()) + " is invalid library:") + (super.getMessage()); }<END_MOD>
<START_MOD>@javax.annotation.Nonnull public static java.lang.String getProperty(@javax.annotation.Nonnull java.lang.String key) { java.lang.String value = com.android.jack.test.TestingEnvironment.testsProperties.getProperty(key); if (value == null) { throw new com.android.jack.test.TestConfigurationException((("Undefined property : '" + key) + "'")); } return value; }<END_MOD>
<START_MOD>@java.lang.Override public void run() { if (changed || ((mTreeViewer.getInput()) != (mDiffLogic.getCategories(isSortByApi())))) { refreshViewerInput(); } }<END_MOD>
<START_MOD>@org.junit.Test public void testWakeupStatsLogging() throws java.lang.Exception { wakeupEvent("wlan0", 1000); wakeupEvent("rmnet0", 10123); wakeupEvent("wlan0", 1000); wakeupEvent("rmnet0", 10008); wakeupEvent("wlan0", (-1)); wakeupEvent("wlan0", 10008); wakeupEvent("rmnet0", 1000); wakeupEvent("wlan0", 10004); wakeupEvent("wlan0", 1000); wakeupEvent("wlan0", (-1)); wakeupEvent("rmnet0", 10052); wakeupEvent("rmnet0", 1000); java.lang.String got = flushStatistics(); java.lang.String want = java.lang.String.join("\n", "dropped_events: 0", "events <", " if_name: \"\"", " link_layer: 2", " network_id: 0", " time_ms: 0", " transports: 0", " wakeup_stats <", " anonymous_wakeups: 0", " application_wakeups: 3", " duration_sec: 0", " frameworks_wakeups: 2", " total_wakeups: 5", " >", ">", "events <", " if_name: \"\"", " link_layer: 4", " network_id: 0", " time_ms: 0", " transports: 0", " wakeup_stats <", " anonymous_wakeups: 2", " application_wakeups: 2", " duration_sec: 0", " frameworks_wakeups: 3", " total_wakeups: 7", " >", ">", "version: 2\n"); assertEquals(want, got); }<END_MOD>
<START_MOD>public void close(int exitCode) throws java.io.IOException;<END_MOD>
private void removeImsServiceFeature(android.util.Pair<java.lang.Integer, java.lang.Integer> featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG,   called with null values. return; } <START_MOD>if ((featurePair.second) != (android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { <END_MOD>com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback callbackToRemove = mFeatureStatusCallbacks.stream().filter(( c) -> ((c.mSlotId) == (featurePair.first)) && ((c.mFeatureType) == (featurePair.second))).findFirst().orElse(null); if (callbackToRemove != null) { mFeatureStatusCallbacks.remove(callbackToRemove); } removeImsFeature(featurePair.first, featurePair.second, (callbackToRemove != null ? callbackToRemove.getCallback() : null)); removeImsFeatureBinder(featurePair.first, featurePair.second); mCallbacks.imsServiceFeatureRemoved(featurePair.first, featurePair.second, this); <START_MOD>} else { android.util.Log.i(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ( support emergency calling on slot   + (featurePair.first))); } <END_MOD>sendImsFeatureRemovedCallback(featurePair.first, featurePair.second); }
<START_MOD>public void testException() { logWriter.println("testException started"); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); long threadID = getFilteredThreadId(); final java.lang.String exceptionClassSignature = "Lorg/apache/harmony/jpda/tests/jdwp/EventModifiers/ThreadOnlyModifierDebuggee$TestException;"; org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.setThreadOnlyException(exceptionClassSignature, true, false, threadID); checkReplyPacket(reply, "Failed to set EXCEPTION with thread only modifier"); int requestID = reply.getNextValueAsInt(); assertAllDataRead(reply); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); waitForThreadEvent(JDWPConstants.EventKind.EXCEPTION, requestID, threadID); reply = debuggeeWrapper.vmMirror.clearEvent(JDWPConstants.EventKind.EXCEPTION, requestID); checkReplyPacket(reply, ("Failed to clear event " + requestID)); logWriter.println("testException done"); }<END_MOD>
public static void createTasks(org.gradle.model.collection.CollectionBuilder<org.gradle.api.Task> tasks, org.gradle.nativeplatform.SharedLibraryBinarySpec binary, java.io.File buildDir, com.android.build.gradle.managed.NdkConfig ndkConfig, com.android.build.gradle.internal.NdkHandler ndkHandler) { com.android.build.gradle.ndk.internal.StlConfiguration.createStlCopyTask(ndkHandler, ndkConfig.getStl(), tasks, buildDir, binary); if (binary.getBuildType().getName().equals(BuilderConstants.DEBUG)) { com.android.build.gradle.ndk.internal.NdkConfiguration.setupNdkGdbDebug(tasks, binary, buildDir, ndkConfig, ndkHandler); } <START_MOD>com.android.build.gradle.ndk.internal.NdkConfiguration.createStripDebugTask(tasks, binary, buildDir, ndkHandler); <END_MOD>}
boolean acceptCall(android.bluetooth.BluetoothDevice device, int flag) { enforceCallingOrSelfPermission(com.android.bluetooth.hfpclient.BLUETOOTH_PERM,   BLUETOOTH permission <START_MOD>synchronized(this) { for (java.util.Map.Entry<android.bluetooth.BluetoothDevice, <END_MOD>com.android.bluetooth.hfpclient.HeadsetClientStateMachine<START_MOD>> entry : mStateMachineMap.entrySet()) { if ((entry.getValue()) != null) { int connectionState<END_MOD> = <START_MOD>entry.getValue().getConnectionState(entry.getKey());<END_MOD> android.util.Log.e(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, (<START_MOD>(( a call on device   + device) +   possibly on   + (entry.getValue()))); if (connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) entry.getValue().obtainMessage(HeadsetClientStateMachine.TERMINATE_CALL).sendToTarget(); } } } com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = getStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, (<END_MOD> allocate SM for device   + device)); return false; } int connectionState = sm.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } android.os.Message msg = sm.obtainMessage(HeadsetClientStateMachine.ACCEPT_CALL); msg.arg1 = flag; sm.sendMessage(msg); return true; }
@java.lang.Override public com.android.jack.dx.io.instructions.DecodedInstruction withIndex(int newIndex) { return new com.android.jack.dx.io.instructions.ZeroRegisterDecodedInstruction(getFormat(), getOpcode(), newIndex, <START_MOD>getFirstIndexType<END_MOD>(), getTarget(), getLiteral()); }
@javax.annotation.Nonnull private com.android.jack.ir.ast.JDefinedClassOrInterface create(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.<START_MOD>library<END_MOD>.<START_MOD>LibraryFormatException<END_MOD>, java.io.IOException { com.android.jack.jayce.DeclaredTypeNode type = getNNode(NodeLevel.TYPES); java.lang.String packageQualifiedName = com.android.jack.util.NamingTools.getPackageNameFromBinaryName(com.android.jack.util.NamingTools.getClassBinaryNameFromDescriptor(type.getSignature())); com.android.jack.ir.ast.JPackage pack = session.getLookup().getOrCreatePackage(packageQualifiedName); com.android.jack.ir.ast.JDefinedClassOrInterface jType = type.create(pack, this); return jType; }
@java.lang.Override public void onResume() { super.onResume(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ((( slot id:   + (mSlotId)) + ",") + (mState))); appService.indicateMenuVisibility(true, mSlotId); if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { mStkMenu = appService.getMainMenu(mSlotId); } else { mStkMenu = appService.getMenu(mSlotId); } if ((mStkMenu) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG,   is null cancelTimeOut(); finish(); return; } if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG,   main menu instance. appService.getStkContext(mSlotId).setMainActivityInstance(this); } displayMenu(); startTimeOut(); mAcceptUsersInput = true; <START_MOD>showProgressBar(false);<END_MOD> invalidateOptionsMenu(); <START_MOD>android.support.v4.content.LocalBroadcastManager.getInstance(this).registerReceiver(mLocalBroadcastReceiver, new android.content.IntentFilter(StkAppService.SESSION_ENDED)); }<END_MOD>
<START_MOD>private void checkAcoshFloat2() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testAcoshFloat2(in, out); verifyResultsAcoshFloat2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAcoshFloat2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAcoshFloat2(in, out); verifyResultsAcoshFloat2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAcoshFloat2: " + (e.toString()))); } }<END_MOD>
<START_MOD>private void blackListCurrentDevice() { mFeatures &= ~(com.android.bluetooth.avrcp.Avrcp.BTRC_FEAT_ABSOLUTE_VOLUME); mAudioManager.avrcpSupportsAbsoluteVolume(mAddress, isAbsoluteVolumeSupported()); android.content.SharedPreferences pref = mContext.getSharedPreferences(com.android.bluetooth.avrcp.Avrcp.ABSOLUTE_VOLUME_BLACKLIST_FILE, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editor = pref.edit(); editor.putBoolean(mAddress, true); editor.commit(); }<END_MOD>
protected void syncWithBuildFile() { com.google.gct.idea.appengine.gradle.facet.AppEngineGradleFacet facet = com.google.gct.idea.appengine.gradle.facet.AppEngineGradleFacet.getInstance(<START_MOD>myModuleSelector<END_MOD>.getModule()); if (facet != null) { com.google.gct.idea.appengine.gradle.facet.AppEngineConfigurationProperties model = facet.getConfiguration().getState(); if (model != null) { myServerPortField.setText(model.HTTP_PORT.toString()); myServerAddressField.setText(model.HTTP_ADDRESS); myAppEngineSdkField.setText(model.APPENGINE_SDKROOT); myWarPathField.setText(model.WAR_DIR); myVmArgsField.setText(model.getJvmFlags()); <START_MOD>myUpdateCheckCheckBox.setSelected(model.DISABLE_UPDATE_CHECK); <END_MOD>} } }
static com.android.server.timezone.PackageTracker create(android.content.Context context) { com.android.server.timezone.PackageTrackerHelperImpl helperImpl = new com.android.server.timezone.PackageTrackerHelperImpl(context); return new com.android.server.timezone.PackageTracker(helperImpl, helperImpl, helperImpl, new com.android.server.timezone.PackageStatusStorage(<START_MOD>android.os.Environment.getDataDirectory()<END_MOD>), new com.android.server.timezone.IntentHelperImpl(context)); }
<START_MOD>private void checkCrossFloat4Float4() { android.renderscript.Allocation inLhs = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inLhs, 35, 0.0F, 1.0F); android.renderscript.Allocation inRhs = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inRhs, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInRhs(inRhs); script.forEach_testCrossFloat4Float4(inLhs, out); verifyResultsCrossFloat4Float4(inLhs, inRhs, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testCrossFloat4Float4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInRhs(inRhs); scriptRelaxed.forEach_testCrossFloat4Float4(inLhs, out); verifyResultsCrossFloat4Float4(inLhs, inRhs, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testCrossFloat4Float4: " + (e.toString()))); } }<END_MOD>
<START_MOD>private static java.lang.Object readSerialized(byte[] serialized) throws java.io.IOException, java.lang.ClassNotFoundException { java.io.ObjectInputStream ois = null; try { ois = new java.io.ObjectInputStream(new java.io.ByteArrayInputStream(serialized)); return ois.readObject(); } finally { javax.crypto.SealedObject.closeQuietly(ois); } }<END_MOD>
<START_MOD>@java.lang.Override public void onOwnAddressRead(android.bluetooth.le.AdvertisingSet advertisingSet, int addressType, java.lang.String address) { com.googlecode.android_scripting.Log.d(((("onOwnAddressRead" + (mEventType)) + " ") + (setIndex))); android.os.Bundle results = new android.os.Bundle(); results.putInt("set_id", setIndex); results.putInt("addressType", addressType); results.putString("address", address); mEventFacade.postEvent((((mEventType) + (setIndex)) + "onOwnAddressRead"), results); }<END_MOD>
void log(com.android.utils.ILogger logger) { java.lang.StringBuilder stringBuilder = new java.lang.StringBuilder(); stringBuilder.append(com.android.manifmerger.Actions.HEADER); for (java.util.Map.Entry<com.android.manifmerger.XmlNode.NodeKey, com.android.manifmerger.Actions.DecisionTreeRecord> record : mRecords.entrySet()) { stringBuilder.append(record.getKey()).append("\n"); for (com.android.manifmerger.Actions.NodeRecord nodeRecord : record.getValue().getNodeRecords()) { nodeRecord.print(stringBuilder); stringBuilder.append("\n"); } for (java.util.Map.Entry<com.android.manifmerger.XmlNode.NodeName, java.util.List<com.android.manifmerger.Actions.AttributeRecord>> attributeRecords : record.getValue().mAttributeRecords.entrySet()) { stringBuilder.append("\t").append(attributeRecords.getKey())<START_MOD>.append("\n")<END_MOD>; for (com.android.manifmerger.Actions.AttributeRecord attributeRecord : attributeRecords.getValue()) { stringBuilder.append("\t\t"); attributeRecord.print(stringBuilder); stringBuilder.append("\n"); } } } logger.info(stringBuilder.toString()); }
<START_MOD>public static double parseLocalizedDouble(java.lang.String string) throws java.text.ParseException { return java.text.NumberFormat.getNumberInstance().parse(string).doubleValue(); }<END_MOD>
public void testInflatingStreamsRequiringZipRefill() throws java.io.IOException { int originalSize = 1024 * 1024; byte[] readBuffer = new byte[8192]; java.util.zip.ZipInputStream in = new java.util.zip.ZipInputStream(new java.io.FileInputStream(createZipFile(1, originalSize))); while ((in.getNextEntry()) != null) { <START_MOD>drainStream<END_MOD>(readBuffer, <START_MOD>in<END_MOD>)<START_MOD>;<END_MOD> } in.close(); }
@javax.annotation.Nonnull com.android.jack.dx.rop.code.RegisterSpec createThisReg(@javax.annotation.Nonnull com.android.jack.ir.ast.<START_MOD>JThis jThis) { assert (thisReg) == null :   register was already created. com.android.jack.ir.ast.<END_MOD>JDefinedClassOrInterface type<START_MOD> = ((com.android.jack.ir.ast.JDefinedClassOrInterface) (jThis.getType())); com.android.jack.dx.rop.type.Type dexRegType = com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx(type); if ((emitDebugInfo) && ((jThis.getName()) !=<END_MOD> null<START_MOD>)<END_MOD>) { com.android.jack.dx.rop.cst.CstString cstSignature = null; com.android.jack.ir.ast.marker.ThisRefTypeInfo thisMarker = type.getMarker(com.android.jack.ir.ast.marker.ThisRefTypeInfo.class); if ((thisMarker != null) && (!(thisMarker.getGenericSignature().isEmpty()))) { cstSignature = new com.android.jack.dx.rop.cst.CstString(thisMarker.getGenericSignature()); } com.android.jack.dx.rop.code.LocalItem localItem = com.android.jack.dx.rop.code.LocalItem.make(new com.android.jack.dx.rop.cst.CstString("this"), com.android.jack.backend.dex.rop.RopHelper.getCstType(type), cstSignature); thisReg = com.android.jack.dx.rop.code.RegisterSpec.make(nextFreeReg, dexRegType, localItem); } else { thisReg = com.android.jack.dx.rop.code.RegisterSpec.make(nextFreeReg, dexRegType); } nextFreeReg += dexRegType.getCategory(); assert (thisReg) != null; return thisReg; }
<START_MOD>@java.lang.Override public void putNextEntry(java.util.zip.ZipEntry e) throws java.io.IOException { hasEntries = true; super.putNextEntry(e); }<END_MOD>
<START_MOD>public static long longUnnecessaryShiftMasking(long value, int shift) { return value >> (shift & 63); }<END_MOD>
<START_MOD>private boolean upstreamWanted() { synchronized(mPublicSync) { for (java.util.Map.Entry<java.lang.String, com.android.server.connectivity.Tethering.TetherState> e : mTetherStates.entrySet()) { if ((e.getValue().stateMachine.mode()) == (com.android.server.connectivity.Tethering.Mode.TETHERING)) { return true; } } } return false; }<END_MOD>
public void testSkipOnLargeFiles() throws java.lang.Exception { java.io.File largeFile = java.io.File.createTempFile("FileInputStreamTest_testSkipOnLargeFiles", ""); final long requiredFreeSpaceBytes = (3172L * 1024) * 1024; long fileSize = ((3 * 1024L) * 1024) * 1024; final android.system.StructStatVfs statVfs = android.system.Os.statvfs(largeFile.getPath()); final long freeSpaceAvailableBytes = (statVfs.f_bsize) * (statVfs.f_bavail); if (freeSpaceAvailableBytes < requiredFreeSpaceBytes) { return; } try { libcore.java.io.FileInputStreamTest.allocateEmptyFile(largeFile, fileSize); assertEquals(fileSize, largeFile.length()); try (java.io.FileInputStream fis = new java.io.FileInputStream(largeFile)) { long lastByte = fileSize - 1; assertEquals(0, Libcore.os.lseek(fis.getFD(), 0, OsConstants.SEEK_CUR)); assertEquals(lastByte, fis.skip(lastByte)); } <START_MOD>try (<END_MOD>java.io.FileInputStream fis = new java.io.FileInputStream(largeFile)<START_MOD>) {<END_MOD> long lastByte = (((3 * 1024) * 1024) * 1024L) - 1; assertEquals(0, Libcore.os.lseek(fis.getFD(), 0, OsConstants.SEEK_CUR)); assertEquals(lastByte, fis.skip(lastByte)); } <START_MOD>} <END_MOD>finally { assertTrue(largeFile.delete()); } }
<START_MOD>public void testMergeByCount() throws java.lang.Exception { com.android.ide.common.res2.ResourceRepository repo = getResourceRepository(); java.util.Map<com.android.resources.ResourceType, com.google.common.collect.Multimap<java.lang.String, com.android.ide.common.res2.ResourceItem>> items = repo.getItems(); assertEquals(6, items.get(ResourceType.DRAWABLE).size()); assertEquals(1, items.get(ResourceType.RAW).size()); assertEquals(4, items.get(ResourceType.LAYOUT).size()); assertEquals(1, items.get(ResourceType.COLOR).size()); assertEquals(3, items.get(ResourceType.STRING).size()); assertEquals(1, items.get(ResourceType.STYLE).size()); assertEquals(1, items.get(ResourceType.ARRAY).size()); assertEquals(4, items.get(ResourceType.ATTR).size()); assertEquals(1, items.get(ResourceType.DECLARE_STYLEABLE).size()); assertEquals(1, items.get(ResourceType.DIMEN).size()); assertEquals(1, items.get(ResourceType.ID).size()); assertEquals(1, items.get(ResourceType.INTEGER).size()); }<END_MOD>
public void setsockoptIfreq(java.io.FileDescriptor fd, int level, int option, java.lang.String value) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
@org.junit.Test public void testConfigRequestBuilderDefaults() { android.net.wifi.aware.ConfigRequest configRequest = new android.net.wifi.aware.ConfigRequest.Builder().build(); collector.checkThat("mClusterHigh", ConfigRequest.CLUSTER_ID_MAX, equalTo(configRequest.mClusterHigh)); collector.checkThat("mClusterLow", ConfigRequest.CLUSTER_ID_MIN, equalTo(configRequest.mClusterLow)); collector.checkThat("mMasterPreference", 0, equalTo(configRequest.mMasterPreference)); collector.checkThat("mSupport5gBand", false, equalTo(configRequest.mSupport5gBand)); <START_MOD>collector.checkThat("mDiscoveryWindowInterval.length", 2, equalTo(configRequest.mDiscoveryWindowInterval.length)); collector.checkThat("mDiscoveryWindowInterval[2.4GHz]", 0, equalTo(configRequest.mDiscoveryWindowInterval[ConfigRequest.NAN_BAND_24GHZ])); collector.checkThat("mDiscoveryWindowInterval[5Hz]", 0, equalTo(configRequest.mDiscoveryWindowInterval[ConfigRequest.NAN_BAND_5GHZ])); <END_MOD>}
public static void printVersion(@javax.annotation.Nonnull java.io.PrintStream printStream, @javax.annotation.Nonnull com.android.jack.plugin<START_MOD>.v01<END_MOD>.Plugin plugin) { printStream.println((((((( plugin:   + (plugin.getFriendlyName())) +   ( + (plugin.getName())) +     + (plugin.getVersion().getVerboseVersion())) + '.')); printStream.println(((   + (plugin.getDescription())) + '.')); }
<START_MOD>@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { if (mIgnore) { return; } java.lang.Object source = e.getSource(); if (source == (mChooseSdkButton)) { assert false; } else if (source == (mMinSdkCombo)) { mValues.minSdk = getSelectedMinSdk(); java.lang.Integer minSdk = mMinNameToApi.get(mValues.minSdk); if (minSdk != null) { mValues.iconState.minSdk = minSdk.intValue(); } else { assert false : mValues.minSdk; } } else if (source == (mBuildSdkCombo)) { mValues.target = getSelectedBuildTarget(); if (mValues.target.getVersion().isPreview()) { mValues.minSdk = mValues.target.getVersion().getCodename(); try { mIgnore = true; mMinSdkCombo.setText(mValues.minSdk); } finally { mIgnore = false; } } else { java.lang.String minSdk = mValues.minSdk; int buildApiLevel = mValues.target.getVersion().getApiLevel(); if ((((minSdk != null) && (!(minSdk.isEmpty()))) && (java.lang.Character.isDigit(minSdk.charAt(0)))) && (buildApiLevel < (java.lang.Integer.parseInt(minSdk)))) { mValues.minSdk = java.lang.Integer.toString(buildApiLevel); try { mIgnore = true; setSelectedMinSdk(buildApiLevel); } finally { mIgnore = false; } } } } else if (source == (mSkeletonToggle)) { mValues.createAppSkeleton = mSkeletonToggle.getSelection(); } validatePage(); }<END_MOD>
<START_MOD>private com.android.build.gradle.integration.common.fixture.app.GradleModule createProject(com.android.build.gradle.integration.common.fixture.app.LargeTestProject.ModuleFactory factory, int depth, java.lang.String path, java.io.File location, java.lang.String suffix) throws java.io.IOException { java.util.List<com.android.build.gradle.integration.common.fixture.app.GradleModule> deps = com.google.common.collect.Lists.newArrayList(); if (depth < (maxDepth)) { for (int i = 0; i < (maxBreadth); i++) { java.lang.String newSuffix = suffix + (i + 1); com.android.build.gradle.integration.common.fixture.app.GradleModule project = createProject(factory, (depth + 1), (((path + "lib") + newSuffix) + ":"), new java.io.File(location, ("lib" + newSuffix)), newSuffix); deps.add(project); } } com.android.build.gradle.integration.common.fixture.app.GradleModule project = factory.createModule(new java.io.File(location, ("main" + suffix)), ((path + "main") + suffix), deps); project.create(); return project; }<END_MOD>
public <START_MOD>void getDataSetContaining(@com.android.annotations.NonNull java.io.File file, @com.android.annotations.NonNull com.android.ide.common.res2.DataMerger.IncData<END_MOD><S<START_MOD>> incData) { if (mDataSets.isEmpty()) { incData.status = com.android.ide.common.res2.DataMerger.IncDataStatus.UNKNOWN_FILE; return; } S tempDataSet = mDataSets.get(0); if (!(tempDataSet.checkFileForAndroidRes(file))) { incData.status = com.android.ide.common.res2.DataMerger.IncDataStatus.IGNORED_FILE; return; } for (S dataSet : mDataSets) { java.io.File sourceFile = dataSet.findMatchingSourceFile(file); if (sourceFile != null) { incData.dataSet = dataSet; incData.sourceFile = sourceFile; incData.status = (dataSet.isValidSourceFile(sourceFile<END_MOD>, file)<START_MOD>) ? com.android.ide.common.res2.DataMerger.IncDataStatus.VALID_FILE<END_MOD> : <START_MOD>com.android.ide.common.res2.DataMerger.IncDataStatus.IGNORED_FILE;<END_MOD> return<START_MOD>; } } incData.status = com.android.ide.common.res2.DataMerger.IncDataStatus.UNKNOWN_FILE; }<END_MOD>
<START_MOD>public void testAtan() { checkAtanFloat(); checkAtanFloat2(); checkAtanFloat3(); checkAtanFloat4(); }<END_MOD>
<START_MOD>@javax.annotation.CheckForNull private java.lang.String getParameterName(@javax.annotation.Nonnegative int localIdx) { if ((currentMethod.parameters) != null) { return currentMethod.parameters.get((com.android.jill.frontend.java.AsmHelper.isStatic(currentMethod) ? localIdx : localIdx - 1)).name; } return null; }<END_MOD>
<START_MOD>@org.junit.Test public void testUdpEncapsulationSocketBinderDeath() throws java.lang.Exception { int localport = findUnusedPort(); IpSecUdpEncapResponse udpEncapResp = mIpSecService.openUdpEncapsulationSocket(localport, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mEncapSocketRecords.getRefcountedResourceOrThrow(udpEncapResp.resourceId); refcountedRecord.binderDied(); assertEquals(0, userRecord.socketQuotaTracker.current()); try { userRecord.mEncapSocketRecords.getRefcountedResourceOrThrow(udpEncapResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }<END_MOD>
<START_MOD>private void checkFminFloat4Float() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testFminFloat4Float(inX, out); verifyResultsFminFloat4Float(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFminFloat4Float: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testFminFloat4Float(inX, out); verifyResultsFminFloat4Float(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFminFloat4Float: " + (e.toString()))); } }<END_MOD>
public void testAdjustVolumeInAlarmsOnlyMode() throws java.lang.Exception { if ((<START_MOD>(<END_MOD>mUseFixedVolume) || (mIsTelevision<START_MOD>)) || (mIsSingleVolume<END_MOD>)) { return; } try { android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 1, 0); setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALARMS); int musicVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC); mAudioManager.adjustStreamVolume(AudioManager.STREAM_MUSIC, AudioManager.ADJUST_RAISE, 0); int volumeDelta = getVolumeDelta(mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); assertEquals((musicVolume + volumeDelta), mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); } finally { setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL); } }
<START_MOD>public java.util.List<android.icu.util.TimeZone> lookupTimeZonesByCountry(java.lang.String countryIso) { java.util.List<android.icu.util.TimeZone> countryTimeZones = countryZones.get(countryIso); if (countryTimeZones == null) { return java.util.Collections.emptyList(); } return countryTimeZones; }<END_MOD>
<START_MOD>private void checkHalfSqrtFloat2() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testHalfSqrtFloat2(inV, out); verifyResultsHalfSqrtFloat2(inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testHalfSqrtFloat2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testHalfSqrtFloat2(inV, out); verifyResultsHalfSqrtFloat2(inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testHalfSqrtFloat2: " + (e.toString()))); } }<END_MOD>
<START_MOD>private static org.eclipse.jface.text.hyperlink.IHyperlink[] getStyleLinks(com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.XmlContext context, org.eclipse.jface.text.IRegion range, java.lang.String url) { org.w3c.dom.Attr attribute = context.getAttribute(); if (attribute != null) { int caret = context.getInnerRegionCaretOffset(); java.lang.String value = attribute.getValue(); int index = value.indexOf('.', caret); if (index != (-1)) { url = url.substring(0, index); range = new org.eclipse.jface.text.Region(range.getOffset(), ((range.getLength()) - ((value.length()) - index))); } } com.android.util.Pair<com.android.resources.ResourceType, java.lang.String> resource = com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.parseResource(url); if (resource == null) { java.lang.String androidStyle = "@android:style/"; if (url.startsWith(com.android.ide.eclipse.adt.internal.editors.xml.ANDROID_RESOURCE_PREFIX)) { url = androidStyle + (url.substring(com.android.ide.eclipse.adt.internal.editors.xml.ANDROID_RESOURCE_PREFIX.length())); } else if (url.startsWith(((com.android.ide.eclipse.adt.AdtConstants.ANDROID_PKG) + ':'))) { url = androidStyle + (url.substring(((com.android.ide.eclipse.adt.AdtConstants.ANDROID_PKG.length()) + 1))); } else { url = "@style/" + url; } } return com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.getResourceLinks(range, url); }<END_MOD>
<START_MOD>public com.android.sdklib.devices.Device.Meta getMeta() { return mMeta; }<END_MOD>
<START_MOD>public void testSqrt() { checkSqrtFloat(); checkSqrtFloat2(); checkSqrtFloat3(); checkSqrtFloat4(); }<END_MOD>
<START_MOD>private void checkFastLengthFloat3() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testFastLengthFloat3(inV, out); verifyResultsFastLengthFloat3(inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFastLengthFloat3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testFastLengthFloat3(inV, out); verifyResultsFastLengthFloat3(inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFastLengthFloat3: " + (e.toString()))); } }<END_MOD>
static void displayRemoveBookmarkDialog(final long id, final java.lang.String title, final android.content.Context context, final android.os.Message msg<START_MOD>, final boolean isFolder<END_MOD>) { new android.app.AlertDialog.Builder(context).setIconAttribute(android.R.attr.alertDialogIcon).setMessage(context.getString(R.string.delete_bookmark_warning, title)).setPositiveButton(R.string.ok, new android.content.DialogInterface.OnClickListener() { @java.lang.Override public void onClick(android.content.DialogInterface dialog, int whichButton) { if (msg != null) { msg.sendToTarget(); } java.lang.Runnable runnable = new java.lang.Runnable() { @java.lang.Override public void run() { <START_MOD>if (!isFolder) { <END_MOD>android.net.Uri uri = android.content.ContentUris.withAppendedId(BrowserContract.Bookmarks.CONTENT_URI, id); context.getContentResolver().delete(uri, null, null); } <START_MOD>else { com.android.browser.BookmarkUtils.loadFolderAndDelete(id, context); } } <END_MOD>}; new java.lang.Thread(runnable).start(); } }).setNegativeButton(R.string.cancel, null).show(); }
@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null) ? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); enforceAccessPermission(); } else { networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureRequestableCapabilities(networkCapabilities); <START_MOD>networkCapabilities.setSingleUid(android.os.Binder.getCallingUid()); <END_MOD>if (timeoutMs < 0) { throw new java.lang.IllegalArgumentException( timeout specified } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(( for   + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri)); if (timeoutMs > 0) { mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs); } return networkRequest; }
<START_MOD>private void checkLengthFloat2() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testLengthFloat2(inV, out); verifyResultsLengthFloat2(inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLengthFloat2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLengthFloat2(inV, out); verifyResultsLengthFloat2(inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLengthFloat2: " + (e.toString()))); } }<END_MOD>
<START_MOD>@com.android.annotations.Nullable public com.android.sdklib.BuildToolInfo getBuildToolInfo(@com.android.annotations.Nullable java.lang.String buildToolVersion) { if (buildToolVersion != null) { return mManager.getBuildTool(com.android.sdklib.repository.FullRevision.parseRevision(buildToolVersion)); } return null; }<END_MOD>
<START_MOD>@com.android.annotations.NonNull java.util.List<com.android.sdklib.IAndroidTarget> getTargetList() { return mTargetList; }<END_MOD>
<START_MOD>@java.lang.Override public boolean onMenuItemClick(android.view.MenuItem item) { if ((item.getItemId()) == (com.android.phone.settings.fdn.FdnList.MENU_DIAL)) { dialSelected(position); } else if ((item.getItemId()) == (com.android.phone.settings.fdn.FdnList.MENU_EDIT)) { editSelected(position); } return true; }<END_MOD>
@java.lang.Override public void dispose() { super.dispose(); if ((mOutlinePage) != null) { mOutlinePage.setModel(null); mOutlinePage = null; } if ((<START_MOD>mHoverStrokeColor) != null) { mHoverStrokeColor.dispose(); mHoverStrokeColor = null; } if ((mHoverFillColor) != null) { mHoverFillColor.dispose(); mHoverFillColor<END_MOD> = null; } if ((mDropTarget) != null) { mDropTarget.dispose(); mDropTarget = null; } if ((mRulesEngine) != null) { mRulesEngine.dispose(); mRulesEngine = null; } if ((mDragSource) != null) { mDragSource.dispose(); mDragSource = null; } if ((mClipboard) != null) { mClipboard.dispose(); mClipboard = null; } }
public boolean <START_MOD>isMultiDex<END_MOD>() { java.lang.Boolean value = mBuildType.getMultiDex(); if (value != null) { return value; } value = mMergedFlavor.getMultiDex(); if (value != null) { return value; } return false; }
public static void sort(java.lang.Object[] a, int fromIndex, int toIndex) { if (java.util.Arrays.LegacyMergeSort.userRequested) java.util.Arrays.legacyMergeSort(a, fromIndex, toIndex); else java.util.ComparableTimSort.sort(a, fromIndex, toIndex<START_MOD>, null, 0, 0<END_MOD>); }
<START_MOD>private void populate(com.google.protobuf.nano.NanoReferenceTypes.TestAllTypesNano message) { message.optionalInt32 = 5; message.optionalInt64 = 777L; message.optionalFloat = 1.0F; message.optionalDouble = 2.0; message.optionalBool = true; message.optionalString = "Hello"; message.optionalBytes = new byte[]{ 1, 2, 3 }; message.optionalNestedMessage = new com.google.protobuf.nano.NanoReferenceTypes.TestAllTypesNano.NestedMessage(); message.optionalNestedMessage.foo = 27; message.optionalNestedEnum = com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAR; message.repeatedInt32 = new int[]{ 5, 6, 7, 8 }; message.repeatedInt64 = new long[]{ 27L, 28L, 29L }; message.repeatedFloat = new float[]{ 5.0F, 6.0F }; message.repeatedDouble = new double[]{ 99.1, 22.5 }; message.repeatedBool = new boolean[]{ true, false, true }; message.repeatedString = new java.lang.String[]{ "One", "Two" }; message.repeatedBytes = new byte[][]{ new byte[]{ 2, 7 }, new byte[]{ 2, 7 } }; message.repeatedNestedMessage = new com.google.protobuf.nano.NanoReferenceTypes.TestAllTypesNano.NestedMessage[]{ message.optionalNestedMessage, message.optionalNestedMessage }; message.repeatedNestedEnum = new int[]{ com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAR, com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAZ }; message.defaultFloatNan = 1.0F; message.defaultDoubleNan = 1.0; }<END_MOD>
public boolean loadFromUserStoreAfterUnlockOrSwitch(int userId) { <START_MOD>try { mWifiConfigStore.switchUserStoreAndRead(<END_MOD>com.android.server.wifi.<START_MOD>WifiConfigStore<END_MOD>.createUserFile(userId)); } catch (java.io.IOException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG,   from new store failed. All saved private networks are lost! e); return false; } catch (org.xmlpull.v1.XmlPullParserException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG, ( deserialization of store failed. All saved private networks are + "lost!"), e); return false; } loadInternalDataFromUserStore(<START_MOD>mWifiNetworkListStoreData<END_MOD>.getUserConfigurations(), <START_MOD>mDeletedEphemeralSsidsStoreData.getSsidList<END_MOD>()); return true; }
public void runTest() { <START_MOD>mResult<END_MOD> = com.android.rs.unittest.UnitTest.UnitTestResult.UT_RUNNING; run(); <START_MOD>if (mExpectMessage) { while (!(mGotMessage)) { java.lang.Thread.currentThread().yield(); <END_MOD>}<START_MOD> } }<END_MOD>
@java.lang.Override void setupSetter(java.lang.Class targetClass) { if ((mProperty) != null) { return; } try { mPropertyMapLock.writeLock().lock(); java.util.HashMap<java.lang.String, java.lang.<START_MOD>Long<END_MOD>> propertyMap = android.animation.PropertyValuesHolder.FloatPropertyValuesHolder.sJNISetterPropertyMap.get(targetClass); if (propertyMap != null) { java.lang.<START_MOD>Long mJniSetterLong<END_MOD> = propertyMap.get(mPropertyName); if (<START_MOD>mJniSetterLong<END_MOD> != null) { mJniSetter = <START_MOD>mJniSetterLong<END_MOD>; } } if ((mJniSetter) == 0) { java.lang.String methodName = android.animation.PropertyValuesHolder.getMethodName("set", mPropertyName); mJniSetter = android.animation.PropertyValuesHolder.nGetFloatMethod(targetClass, methodName); if ((mJniSetter) != 0) { if (propertyMap == null) { propertyMap = new java.util.HashMap<java.lang.String, java.lang.<START_MOD>Long<END_MOD>>(); android.animation.PropertyValuesHolder.FloatPropertyValuesHolder.sJNISetterPropertyMap.put(targetClass, propertyMap); } propertyMap.put(mPropertyName, mJniSetter); } } } catch (java.lang.NoSuchMethodError e) { } finally { mPropertyMapLock.writeLock().unlock(); } if ((mJniSetter) == 0) { super.setupSetter(targetClass); } }
@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.InputVFile getFile(@javax.annotation.Nonnull com.android.jack.library.FileType fileType, @javax.annotation.Nonnull com.android.sched.vfs.VPath typePath) throws com.android.jack.library.FileTypeDoesNotExistException { try { <START_MOD>com.android.sched.vfs.VPath localPath = new com.android.sched.vfs.VPath(typePath.getPathAsString('/'), '/'); localPath<END_MOD>.addSuffix(fileType.getFileExtension()); return libraryVDir.getInputVFile(<START_MOD>localPath<END_MOD>); } catch (com.android.sched.util.file.NotFileOrDirectoryException e) { throw new com.android.jack.library.FileTypeDoesNotExistException(getLocation(), typePath, fileType); } catch (com.android.sched.util.file.NoSuchFileException e) { throw new com.android.jack.library.FileTypeDoesNotExistException(getLocation(), typePath, fileType); } }
<START_MOD>@java.lang.Override public boolean[] getIssuerUniqueID() { return null; }<END_MOD>
protected java.io.File buildProject(java.lang.String name, java.lang.String gradleVersion) { return runTasksOnProject(name, gradleVersion, "clean", "assembleDebug"); }
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) { assert (outputVDir) != null; java.util.List<com.android.jack.ir.ast.Resource> resources = session.getResources(); for (com.android.jack.ir.ast.Resource resource : resources) { com.android.sched.vfs.InputVFile inputFile = resource.getVFile(); com.android.sched.vfs.VPath path = resource.getPath(); com.android.sched.vfs.OutputVFile outputFile = outputVDir.getRootOutputVDir().createOutputVFile(path); outputFile.copy(inputFile); } }
@java.lang.Override public void getPreferredVoicePrivacy(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getPreferredVoicePrivacy(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getPreferredVoicePrivacy", e); } } }
<START_MOD>@org.junit.Test public void testResetMemory() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF34038001009000"); mEuiccCard.resetMemory(EuiccCard.ResetOption.DELETE_FIELD_LOADED_TEST_PROFILES); verifyStoreData(channel, "BF340482020640"); }<END_MOD>
@org.junit.Test public void testMergerWithHighNumberOfMethods() throws java.lang.Exception { java.io.File srcFolder = com.android.jack.TestTools.createTempDir("oneDexPerType", "SrcFolder"); for (int fileIdx = 0; fileIdx < (com.android.jack.tools.merger.test011.MergerTest011.fileCount); fileIdx++) { generateJavaFileWithMethods(srcFolder, fileIdx, 100); } generateJavaFileWithMethods(srcFolder, com.android.jack.tools.merger.test011.MergerTest011.fileCount, 36); <START_MOD>java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); java.io.PrintStream redirectStream = new java.io.PrintStream(baos); java.lang.System.setErr(redirectStream); <END_MOD>try { buildOneDexPerType(com.android.jack.TestTools.getDefaultBootclasspathString(), srcFolder, false); junit.framework.Assert.fail(); } catch (com.android.jack.JackAbortException e) { java.lang.Throwable cause = e.getCause(); junit.framework.Assert.assertTrue((cause instanceof com.android.jack.backend.dex.DexWritingException)); junit.framework.Assert.assertTrue(((cause.getCause()) instanceof com.android.jack.backend.dex.SingleDexOverflowException)); junit.framework.Assert.assertTrue(((cause.getCause().getCause()) instanceof com.android.jack.tools.merger.MethodIdOverflowException)); <START_MOD>junit.framework.Assert.assertTrue(baos.toString().contains(com.android.jack.tools.merger.test011.MergerTest011.expectedMessage)); <END_MOD>} <START_MOD>finally { redirectStream.close(); <END_MOD>}<START_MOD> }<END_MOD>
private static int getExpectedBlockSize(java.lang.String algorithm) {<START_MOD> final int firstSlash = algorithm.indexOf('/'); if (firstSlash != (-1)) { algorithm = algorithm.substring(0, firstSlash); }<END_MOD> java.lang.Integer expected = libcore.javax.crypto.CipherTest.EXPECTED_BLOCK_SIZE.get(algorithm); assertNotNull(algorithm, expected); return expected; }
<START_MOD>private boolean isVrHeadset() { try { if (mDevice.getProperty(android.server.cts.ActivityManagerDisplayTests.VR_STANDALONE_DEVICE).equals("1")) { return true; } return false; } catch (com.android.tradefed.device.DeviceNotAvailableException e) { return false; } }<END_MOD>
<START_MOD>public void testGetValues_Boolean() { org.apache.harmony.jpda.tests.jdwp.StackFrame.GetValues002Test.GetValuesTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.GetValues002Test.GetValuesTester("testGetValues_Boolean", "breakpointBoolean", "runBreakpointBoolean", "param", JDWPConstants.Tag.BOOLEAN_TAG) { @java.lang.Override public void checkValue(org.apache.harmony.jpda.tests.framework.jdwp.Value value) { assertEquals(("Incorrect value in variable " + (getTestVariableName())), GetValues002Debuggee.BOOLEAN_PARAM_VALUE, value.getBooleanValue()); } }; runTest(tester); }<END_MOD>
public boolean startScan(com.android.server.wifi.WifiNative.ScanSettings settings, com.android.server.wifi.WifiNative.ScanEventHandler eventHandler) { android.hardware.wifi.V1_0.WifiStatus status; kilroy(); if (eventHandler == null) return false; synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return false; try { if (((mScan) != null) && (!(mScan.paused))) { status = mIWifiStaIface.stopBackgroundScan(mScan.cmdId); if (<START_MOD>!(ok(status)<END_MOD>)) { kilroy(); } mScan = null; } mLastScanCmdId = ((mLastScanCmdId) % 9) + 1; com.android.server.wifi.WifiVendorHal.CurrentBackgroundScan scan = new com.android.server.wifi.WifiVendorHal.CurrentBackgroundScan(mLastScanCmdId, settings); status = mIWifiStaIface.startBackgroundScan(scan.cmdId, scan.param); if (<START_MOD>!(ok(status)<END_MOD>)) return false; kilroy(); scan.eventHandler = eventHandler; mScan = scan; return true; } catch (android.os.RemoteException e) { handleRemoteException(e); return false; } } }
<START_MOD>@javax.annotation.Nonnull public java.lang.String getLogPattern() { return com.android.jack.server.ServerLogConfiguration.getLogFilePattern((((serverDir.getPath().replace(java.io.File.separatorChar, '/')) + '/') + (com.android.jack.server.JackHttpServer.LOG_FILE_PATTERN))); }<END_MOD>
<START_MOD>private static void createRecordFile() { if ((!(com.intellij.idea.Main.isHeadless)) && ("AndroidStudio".equals(java.lang.System.getProperty(com.intellij.idea.Main.PLATFORM_PREFIX_PROPERTY)))) { try { java.io.File f = com.intellij.openapi.util.io.FileUtil.createTempFile("AndroidStudio.", java.util.UUID.randomUUID().toString()); java.lang.System.setProperty("studio.record.file", f.getAbsolutePath()); } catch (java.io.IOException ex) { } } }<END_MOD>
public void answer(byte[] peer, int method, java.lang.String pin, boolean joinExisting, boolean persistent, int goIntent, ISupplicantP2pIface.connectCallback cb) throws android.os.RemoteException { methods.add(method); if (<START_MOD>(<END_MOD>method == (ISupplicantP2pIface.WpsProvisionMethod.DISPLAY)) <START_MOD>&& (android.text.TextUtils.isEmpty(pin))) { cb.onValues(mStatusSuccess, configPin); } else <END_MOD>{ assertEquals(pin, configPin); cb.onValues(mStatusSuccess, <START_MOD>""<END_MOD>); }<START_MOD> }<END_MOD>
private static void processFailLoadAndGc() throws Main.TestFailed { try { Main.BrokenDexLoader loader; loader = new Main.BrokenDexLoader(java.lang.ClassLoader.getSystemClassLoader()); loader.findBrokenClass(); java.lang.System.err.println( Inaccessible was accessible } catch (java.lang.reflect.InvocationTargetException ite) { java.lang.Throwable cause = ite.getCause(); if (cause instanceof java.lang.NullPointerException) { java.lang.System.err.println( expected ITE/NPE } else { java.lang.System.err.println( unexpected ITE ite.printStackTrace(<START_MOD>java.lang.System.out<END_MOD>); } } }
<START_MOD>private void checkSinpiFloat2() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testSinpiFloat2(in, out); verifyResultsSinpiFloat2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testSinpiFloat2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testSinpiFloat2(in, out); verifyResultsSinpiFloat2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testSinpiFloat2: " + (e.toString()))); } }<END_MOD>
public java.security.Provider.Service getService(java.lang.String type, java.lang.String name) { for (<START_MOD>sun.security.jca.ProviderConfig<END_MOD> <START_MOD>config<END_MOD> <START_MOD>:<END_MOD> configs) { java.security.Provider p = getProvider(<START_MOD>config<END_MOD>); java.security.Provider.Service s = p.getService(type, name); if (s != null) { return s; } } return null; }
<START_MOD>public static int getNextOpcode(org.objectweb.asm.tree.AbstractInsnNode node) { while (true) { node = node.getNext(); if (node == null) { return org.objectweb.asm.Opcodes.NOP; } else { int type = node.getType(); if ((type != (org.objectweb.asm.tree.AbstractInsnNode.LINE)) && (type != (org.objectweb.asm.tree.AbstractInsnNode.LABEL))) { return node.getOpcode(); } } } }<END_MOD>
<START_MOD>@com.android.annotations.Nullable @java.lang.Override public java.lang.String getTestedApplicationId() { return testVariant.getApplicationId(); }<END_MOD>
@java.lang.Override public java.net.CacheResponse get(java.net.URI uri, java.lang.String requestMethod, java.util.Map<java.lang.String, java.util.List<java.lang.String>> requestHeaders) throws java.io.IOException { return <START_MOD>shimResponseCache<END_MOD>.get(uri, requestMethod, requestHeaders); }
public static native <START_MOD>int<END_MOD> EVP_VerifyInit(<START_MOD>long<END_MOD> <START_MOD>ctx, long evpRef<END_MOD>);
@com.android.annotations.NonNull private java.util.List<java.lang.String> getAaptOutput(@com.android.annotations.NonNull java.io.File apkFile) throws com.android.ide.common.<START_MOD>process.ProcessException<END_MOD> { java.util.ArrayList<java.lang.String> command = com.google.common.collect.Lists.newArrayList(); <START_MOD>com.android.ide.common.process.ProcessInfoBuilder builder = new com.android.ide.common.process.ProcessInfoBuilder(); builder.setExecutable<END_MOD>(mAaptFile<START_MOD>); builder.addArg<END_MOD>("dump"); <START_MOD>builder.addArg<END_MOD>("badging"); <START_MOD>builder.addArg<END_MOD>(apkFile.getPath()); <START_MOD>com.android.ide.common.process.CachedProcessOutputHandler processOutputHandler = new com.android.ide.common.process.CachedProcessOutputHandler(); com.android.ide.common.process.ProcessResult result = mProcessExecutor.execute(builder.createProcess(), processOutputHandler); result.rethrowFailure().assertNormalExitValue(); com.android.ide.common.process.BaseProcessOutputHandler.BaseProcessOutput output = processOutputHandler.getProcessOutput(); return<END_MOD> com.google.common.<START_MOD>base.Splitter.on('\n').splitToList(output.getStandardOutputAsString()<END_MOD>); }
<START_MOD>java.util.Collection<java.io.File> getApkLibraries();<END_MOD>
<START_MOD>public void showPopUp() { getMenu().add(0, com.android.phone.settings.fdn.FdnList.MENU_DIAL, 0, getString(R.string.menu_dial_string)); getMenu().add(0, com.android.phone.settings.fdn.FdnList.MENU_EDIT, 0, getString(R.string.menu_edit)); setOnMenuItemClickListener(mMenuItemListener); show(); }<END_MOD>
<START_MOD>private void handlePrivateDnsValidationUpdate(com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate update) { mDnsManager.updatePrivateDnsValidation(update); com.android.server.connectivity.NetworkAgentInfo nai = getNetworkAgentInfoForNetwork(new android.net.Network(update.netId)); if (nai == null) { return; } if (mDnsManager.maybeFixLinkPropertiesPrivateDns(nai.network.netId, new android.net.LinkProperties(nai.linkProperties))) { handleUpdateLinkProperties(nai, new android.net.LinkProperties(nai.linkProperties)); } }<END_MOD>
@java.lang.Override public android.os.IBinder onBind(android.content.Intent intent) { if ((intent == null) || (!(android.telephony.data.DataService.DATA_SERVICE_INTERFACE.equals(intent.getAction())))) { loge(( intent   + intent)); return null; } if ((<START_MOD>mBinder<END_MOD>) <START_MOD>!=<END_MOD> null) <START_MOD>return<END_MOD> <START_MOD>mBinder;<END_MOD> mHandler.obtainMessage(android.telephony.data.DataService.DATA_SERVICE_INTERNAL_REQUEST_INITIALIZE_SERVICE).sendToTarget(); <START_MOD>mBinder<END_MOD> = new android.telephony.data.DataService.IDataServiceWrapper(); <START_MOD>return<END_MOD> <START_MOD>mBinder<END_MOD>; }
public static java.net.URI uri(java.lang.String format, java.lang.Object... args) { java.lang.String uriString = <START_MOD>((args.length) > 0) ? <END_MOD>java.lang.String.format(format, args)<START_MOD> : format<END_MOD>; try { return new java.net.URI(uriString); } catch (java.net.URISyntaxException e) { throw new java.lang.IllegalStateException(( good uri has syntax error:   + uriString), e); } }
protected void chooseUpstreamType(boolean tryCell) { updateConfiguration(); final int upstreamType = findPreferredUpstreamType(mConfig); if (upstreamType == (android.net.ConnectivityManager.TYPE_NONE)) { if (tryCell) { mUpstreamNetworkMonitor.registerMobileNetworkRequest(); } else { sendMessageDelayed(com.android.server.connectivity.Tethering.TetherMasterSM.CMD_RETRY_UPSTREAM, com.android.server.connectivity.Tethering.TetherMasterSM.UPSTREAM_SETTLE_TIME_MS); } } setUpstreamByType(upstreamType); }
public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong <START_MOD>offset<END_MOD>, long byteCount) throws android.system.ErrnoException { return os.sendfile(outFd, inFd, <START_MOD>offset<END_MOD>, byteCount); }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578822") public void testVpn() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); if (<START_MOD>(com.android.devtools.systemimage.uitest.utils.SystemUtil.getApiLevel()) != 19) { if (<END_MOD>!(com.android.devtools.systemimage.uitest.smoke.VpnTest.verifyVpnStatus(device))) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "TestVPN"); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.START_VPN_BUTTON_RES)).clickAndWaitForNewWindow(); new com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher(device).checkForCondition(); org.junit.Assert.assertTrue( to find the VPN lock icon after starting VPN! com.android.devtools.systemimage.uitest.smoke.VpnTest.verifyVpnStatus(device)); } }<START_MOD> }<END_MOD>
@org.junit.Test @java.lang.Runtime public void test002() throws java.lang.Exception { java.lang.String test = "com.android.jack.optimizations.wofr.test002"; java.lang.String aType = "Lcom/android/jack/optimizations/wofr/test002/jack/A;"; compileAndValidate(defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert((("test(" + aType) + "I)V"), dalvik(test, "A.test.dalvik")))<START_MOD>, test<END_MOD>); com.android.jack.optimizations.wofr.CompilationProperties properties = defaultProperties().with(Optimizations.WriteOnlyFieldRemoval.PRESERVE_NULL_CHECKS.getName(), java.lang.Boolean.TRUE).with(Optimizations.WriteOnlyFieldRemoval.PRESERVE_OBJECT_LIFETIME.getName(), java.lang.Boolean.TRUE).with(Optimizations.WriteOnlyFieldRemoval.ENSURE_TYPE_INITIALIZERS.getName(), java.lang.Boolean.TRUE); compileAndValidate(properties, new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert((("test(" + aType) + "I)V"), dalvik(test, "A.test.jls.dalvik")))<START_MOD>, test<END_MOD>); }
public void onHostCardEmulationActivated(<START_MOD>int type<END_MOD>);
<START_MOD>private<END_MOD> void writeCurrentFileName(@javax.annotation.Nonnull java.lang.String fileName) throws java.io.IOException { writeOpenFileName(); writeString(fileName); writeCloseFileName(); currentFileName = fileName; }
public void test_SSLSocket_setSoWriteTimeout() throws java.lang.Exception { if (libcore.java.security.StandardNames.IS_RI) { return; } final libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create(); SSLSocket client = ((SSLSocket) (c.clientContext.getSocketFactory().createSocket())); int sendBufferSize = 1024; client.setSendBufferSize(sendBufferSize); sendBufferSize = client.getSendBufferSize(); final int recvBufferSize = 128; c.serverSocket.setReceiveBufferSize(recvBufferSize); client.connect(new java.net.InetSocketAddress(c.host, c.port)); final SSLSocket server = ((SSLSocket) (c.serverSocket.accept())); java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newSingleThreadExecutor(); java.util.concurrent.Future<java.lang.Void> future = executor.submit(new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { server.startHandshake(); return null; } }); executor.shutdown(); client.startHandshake(); java.lang.String expectedClassName = <START_MOD>"com.android.org.conscrypt.ConscryptFileDescriptorSocket"<END_MOD>; java.lang.Class<?> actualClass = client.getClass(); assertEquals(expectedClassName, actualClass.getName()); java.lang.reflect.Method setSoWriteTimeout = actualClass.getMethod("setSoWriteTimeout", new java.lang.Class<?>[]{ java.lang.Integer.TYPE }); setSoWriteTimeout.invoke(client, 1); try { final int extra = 1; client.getOutputStream().write(new byte[sendBufferSize + extra]); fail(); } catch (java.net.SocketTimeoutException expected) { } future.get(); client.close(); server.close(); c.close(); }
<START_MOD>void disconnect() { mDelegate.disconnect(); }<END_MOD>
<START_MOD>void onRttConnectionRemotelyTerminated() { for (android.telecom.RemoteConnection.CallbackRecord record : mCallbackRecords) { final android.telecom.RemoteConnection connection = this; final android.telecom.RemoteConnection.Callback callback = record.getCallback(); record.getHandler().post(() -> callback.onRttConnectionRemotelyTerminated(connection)); } }<END_MOD>
<START_MOD>public void onConferenceParticipantsChanged(android.telecom.Connection c, java.util.List<android.telecom.ConferenceParticipant> participants) { }<END_MOD>
<START_MOD>private static java.lang.String getReasonString(int reason) { switch (reason) { case com.android.server.BluetoothManagerService.REASON_PACKAGE : return "REASON_PACKAGE"; case com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE : return "REASON_AIRPLANE_MODE"; case com.android.server.BluetoothManagerService.REASON_DISALLOWED : return "REASON_DISALLOWED"; case com.android.server.BluetoothManagerService.REASON_RESTARTED : return "REASON_RESTARTED"; case com.android.server.BluetoothManagerService.REASON_START_CRASH : return "REASON_START_CRASH"; case com.android.server.BluetoothManagerService.REASON_SYSTEM_BOOT : return "REASON_SYSTEM_BOOT"; case com.android.server.BluetoothManagerService.REASON_UNEXPECTED : return "REASON_UNEXPECTED"; case com.android.server.BluetoothManagerService.REASON_USER_SWITCH : return "REASON_USER_SWITCH"; case com.android.server.BluetoothManagerService.REASON_RESTORE_USER_SETTING : return "REASON_RESTORE_USER_SETTING"; default : return ("REASON_UNKNOWN[" + reason) + "]"; } }<END_MOD>
<START_MOD>@java.lang.Override @javax.annotation.Nonnull com.android.sched.vfs.BaseVFile createVFile(@javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent, @javax.annotation.Nonnull java.lang.String name) throws com.android.sched.util.file.CannotCreateFileException { return changeVFS(vfs.createVFile(parent, name)); }<END_MOD>
public static org.xmlpull.v1.XmlPullParserFactory newInstance(java.lang.String <START_MOD>unused<END_MOD>, java.lang.Class <START_MOD>unused2<END_MOD>) throws org.xmlpull.v1.XmlPullParserException { <START_MOD>final<END_MOD> org.xmlpull.v1.XmlPullParserFactory factory = <START_MOD>new org.xmlpull.v1.XmlPullParserFactory()<END_MOD>; final java.util.ArrayList parserClasses = new java.util.ArrayList(); <START_MOD>try { java.lang.Class<?> parser = java.lang.Class.forName("org.kxml2.io.KXmlParser"); parser.newInstance(); parserClasses.add(parser); } catch (java.lang.Exception e) { } factory.parserClasses = parserClasses; <END_MOD>final java.util.ArrayList serializerClasses = new java.util.ArrayList(); <START_MOD>try { java.lang.Class<END_MOD><<START_MOD>?> serializer<END_MOD> = java.lang.Class.forName(<START_MOD>"org.kxml2.io.KXmlSerializer"); serializer<END_MOD>.newInstance(); <START_MOD>serializerClasses.add(serializer); <END_MOD>} catch (java.lang.Exception e) { } factory.serializerClasses = serializerClasses; factory.classNamesLocation = "org.kxml2.io.kXmlParser,org.kxml2.io.KXmlSerializer"; return factory; }
public void testOptionsMenuKey() { if (!(mActivity.getWindow().hasFeature(Window.FEATURE_OPTIONS_PANEL))) { return; } final boolean[] menuIsVisible = new boolean[]{ false }; mActivity.getActionBar().addOnMenuVisibilityListener(( isVisible) -> menuIsVisible[0] = isVisible); <START_MOD>java.lang.Thread.sleep(android.app.cts.ActionBarTest.WAIT_TIME_MS); <END_MOD>getInstrumentation().sendKeyDownUpSync(KeyEvent.KEYCODE_MENU); getInstrumentation().waitForIdleSync(); assertTrue(menuIsVisible[0]); getInstrumentation().sendKeyDownUpSync(KeyEvent.KEYCODE_MENU); getInstrumentation().waitForIdleSync(); assertFalse(menuIsVisible[0]); }
public static final native android.os.IHwBinder getService(java.lang.String iface, java.lang.String serviceName<START_MOD>, boolean isTry<END_MOD>) throws android.os.RemoteException, java.util.NoSuchElementException;
<START_MOD>private static void computeApkVerityDigest(com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd, java.util.Map<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm, byte[]> outputContentDigests) throws java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.util.VerityTreeBuilder builder = new com.android.apksig.internal.util.VerityTreeBuilder(new byte[8]); outputContentDigests.put(ContentDigestAlgorithm.VERITY_CHUNKED_SHA256, builder.generateVerityTreeRootHash(beforeCentralDir, centralDir, eocd)); }<END_MOD>
<START_MOD>public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion, int maxSdkVersion) throws ApkSigningBlockUtils.SignatureNotFoundException, com.android.apksig.apk.ApkFormatException, java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.Result(); com.android.apksig.internal.apk.SigningBlockScheme.SignatureInfo signatureInfo = com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.findSignature(apk, zipSections, com.android.apksig.internal.apk.SigningBlockScheme.v2.V2SchemeVerifier.APK_SIGNATURE_SCHEME_V2_BLOCK_ID, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.internal.apk.SigningBlockScheme.v2.V2SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, minSdkVersion, maxSdkVersion, result); return result; }<END_MOD>
public void stopVendorHal() { mHalDeviceManager.stop(); <START_MOD>mLog<END_MOD>.i( Hal stopped }
@org.junit.Test public void testClassFileIsCompiled() throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class<START_MOD>, java.util.Collections.<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>singletonList(com.android.jack.test.toolchain.JillBasedToolchain.class)<END_MOD>); java.io.File[] defaultClasspath = toolchain.getDefaultBootClasspath(); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempFile("jackOut", toolchain.getLibraryExtension()); java.io.File classOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File sourceDir = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir("com.android.jack.classfile.test001"); toolchain.addProperty(Options.EMIT_CLASS_FILES.getName(), "true"); toolchain.addProperty(Options.EMIT_CLASS_FILES_FOLDER.getName(), classOut.getPath()); toolchain.addToClasspath(defaultClasspath).srcToLib(jackOut, true, sourceDir); junit.framework.Assert.assertTrue(new java.io.File(classOut, "com/android/jack/classfile/test001/jack/ClassTest.class").isFile()); }
@org.junit.Test public void testLamba023() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA023).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
<START_MOD>public static com.android.ide.common.repository.GradleCoordinate.ArtifactType fromString(java.lang.String name) { if (name != null) { for (com.android.ide.common.repository.GradleCoordinate.ArtifactType at : com.android.ide.common.repository.GradleCoordinate.ArtifactType.values()) { if (at.myId.equals(name)) { return at; } } } return null; }<END_MOD>
@javax.annotation.Nonnull @java.lang.Override public com.android.jack.load.PackageLoader getLoaderForSubPackage(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) throws com.android.jack.ir.ast.JPackageLookupException { com.android.sched.vfs.InputVElement <START_MOD>input = cache.get(simpleName); if ((input == null) || (!(input.isVDir())<END_MOD>)) { <START_MOD>throw new com.android.jack.ir.ast.JPackageLookupException<END_MOD>(simpleName<START_MOD>, loading); }<END_MOD> return new com.android.jack.jayce.JaycePackageLoader(inputJackLibrary, ((com.android.sched.vfs.InputVDir) (<START_MOD>input<END_MOD>)), lookup, defaultLoadLevel); }
public static java.lang.String encode(byte[] in) { int <START_MOD>len = in.<END_MOD>length<START_MOD>; int outputLen; outputLen = libcore.io.Base64.computeEncodingOutputLen(len); byte[] output = new byte[outputLen]; int outputIndex = 0; int i = 0; for (i = 0; i < len; i += 3) { int byteTripletAsInt = <END_MOD>(in<START_MOD>[i]) & 255; if ((i<END_MOD> + <START_MOD>1) < len) { byteTripletAsInt <<= 8; byteTripletAsInt += (in[(i + 1)]) & 255; if ((i + <END_MOD>2) <START_MOD>< len) { byteTripletAsInt <<= 8; byteTripletAsInt += (in[(i + 2)]) & 255; } else { byteTripletAsInt <<= 2; } } else { byteTripletAsInt <<=<END_MOD> 4<START_MOD>; } if ((i + 2) < len) { output[(outputIndex++)] = libcore.io.Base64.BASE_64_ALPHABET[((byteTripletAsInt & (libcore.io.Base64.FIRST_OUTPUT_BYTE_MASK)) >> 18)]; } if ((i + 1) < len) { output[(outputIndex++)] = libcore.io.Base64.BASE_64_ALPHABET[((byteTripletAsInt & (libcore.io.Base64.SECOND_OUTPUT_BYTE_MASK)) >> 12)]; } output[(outputIndex++)] = libcore.io.Base64.BASE_64_ALPHABET[((byteTripletAsInt & (libcore.io.Base64.THIRD_OUTPUT_BYTE_MASK)) >> 6)]; output[(outputIndex++)] = libcore.io.Base64.BASE_64_ALPHABET[(byteTripletAsInt & (libcore.io.Base64.FOURTH_OUTPUT_BYTE_MASK))]; } int inLengthMod3 = len %<END_MOD> 3; <START_MOD>if (inLengthMod3 > 0) { output[(outputIndex++)] = '='; if (inLengthMod3 == 1) { output[(outputIndex++)] = '='; } } try { return<END_MOD> new <START_MOD>java.lang.String(output, "ASCII"); } catch (java.io.UnsupportedEncodingException e) { throw<END_MOD> new java.lang.<START_MOD>RuntimeException(e); } }<END_MOD>
private <START_MOD>static<END_MOD> <<START_MOD>T<END_MOD> <START_MOD>extends<END_MOD> android.os.<START_MOD>Parcelable> void putParcelable(android<END_MOD>.<START_MOD>os.Bundle<END_MOD> <START_MOD>bundle<END_MOD>, <START_MOD>T t<END_MOD>) { if (<START_MOD>t == null<END_MOD>) <START_MOD>{ return; } bundle<END_MOD>.<START_MOD>putParcelable(t<END_MOD>.<START_MOD>getClass<END_MOD>()<START_MOD>.getSimpleName(<END_MOD>)<START_MOD>,<END_MOD> <START_MOD>t<END_MOD>); }
<START_MOD>public android.net.NetworkCapabilities setAllowedUids(java.util.Set<android.net.UidRange> allowedUids) { if (null == allowedUids) { mAllowedUids = null; } else { mAllowedUids = new android.util.ArraySet(allowedUids); } return this; }<END_MOD>
@android.test.suitebuilder.annotation.SmallTest public void testScanResultParceling() { <START_MOD>if (mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH)) { <END_MOD>android.bluetooth.BluetoothDevice device = android.bluetooth.BluetoothAdapter.getDefaultAdapter().getRemoteDevice(android.bluetooth.cts.ScanResultTest.DEVICE_ADDRESS); android.bluetooth.le.ScanResult result = new android.bluetooth.le.ScanResult(device, android.bluetooth.cts.TestUtils.parseScanRecord(android.bluetooth.cts.ScanResultTest.SCAN_RECORD), android.bluetooth.cts.ScanResultTest.RSSI, android.bluetooth.cts.ScanResultTest.TIMESTAMP_NANOS); android.os.Parcel parcel = android.os.Parcel.obtain(); result.writeToParcel(parcel, 0); parcel.setDataPosition(0); android.bluetooth.le.ScanResult resultFromParcel = ScanResult.CREATOR.createFromParcel(parcel); assertEquals(android.bluetooth.cts.ScanResultTest.RSSI, resultFromParcel.getRssi()); assertEquals(android.bluetooth.cts.ScanResultTest.TIMESTAMP_NANOS, resultFromParcel.getTimestampNanos()); assertEquals(device, resultFromParcel.getDevice()); android.bluetooth.cts.TestUtils.assertArrayEquals(android.bluetooth.cts.ScanResultTest.SCAN_RECORD, resultFromParcel.getScanRecord().getBytes()); }<START_MOD> }<END_MOD>
@org.junit.Test public void opc_return() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(OPC_RETURN).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), <START_MOD>"jack/jack-tests/src/com/android/jack/DxTestCase.java"<END_MOD>)).compileAndRunTest(); }
<START_MOD>@java.lang.Override public void deflect(java.lang.String deflectNumber) throws android.os.RemoteException { }<END_MOD>
@org.junit.Test public void test002a() throws java.lang.Exception { java.io.File jackOutput; try { jackOutput = runTest002(false, null<START_MOD>, true<END_MOD>); junit.framework.Assert.fail(); } catch (com.android.jack.resource.ResourceImportConflictException e) { } }
@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) <START_MOD>throws com.android.jack.ir.ast.MissingJTypeLookupException <END_MOD>{ for (com.android.sched.vfs.InputVElement sub : dir.list()) { if ((!(sub.isVDir())) && (isJackFileNameOf(sub.getName(), simpleName))) { try { return new com.android.jack.jayce.JayceClassOrInterfaceLoader(inputJackLibrary, loading, simpleName, ((com.android.sched.vfs.InputVFile) (sub)), lookup, defaultLoadLevel).load(); } catch (java.io.IOException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } catch (com.android.jack.JackFileException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } } } throw new com.android.jack.ir.ast.MissingJTypeLookupException(loading, simpleName); }
<START_MOD>@java.lang.Override public void info(java.lang.String msgFormat, java.lang.Object... args) { if ((mLevel.mLevel) > (com.android.utils.StdLogger.Level.INFO.mLevel)) { return; } java.lang.String msg = java.lang.String.format(msgFormat, args); if ((((com.android.SdkConstants.CURRENT_PLATFORM) == (com.android.SdkConstants.PLATFORM_WINDOWS)) && (!(msg.endsWith("\r\n")))) && (msg.endsWith("\n"))) { msg = msg.substring(0, ((msg.length()) - 1)); } java.lang.System.out.print(msg); if (!(msg.endsWith("\n"))) { java.lang.System.out.println(); } }<END_MOD>
<START_MOD>@org.junit.Test public void testMultipleCallsToCleanupAndRelease() throws android.os.RemoteException { com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource = getTestRefcountedResource(); refcountedResource.cleanupAndRelease(); assertResourceState(refcountedResource, (-1), 1, 1, 1, 1); refcountedResource.cleanupAndRelease(); refcountedResource.cleanupAndRelease(); assertResourceState(refcountedResource, (-1), 3, 1, 1, 1); }<END_MOD>
public boolean hasFileDescriptors() { if (!(mFdsKnown)) { boolean fdFound = false; if ((mParcelledData) != null) { if (mParcelledData.hasFileDescriptors()) { fdFound = true; } } else { for (int i = (mMap.size()) - 1; i >= 0; i--) { java.lang.Object obj = mMap.valueAt(i); if (obj instanceof android.os.Parcelable) { if (((((android.os.Parcelable) (obj)).describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0) { fdFound = true; break; } } else if (obj instanceof android.os.Parcelable[]) { android.os.Parcelable[] array = ((android.os.Parcelable[]) (obj)); for (int n = (array.length) - 1; n >= 0; n--) { if (((array[n].describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0) { fdFound = true; break; } } } else if (obj instanceof android.util.SparseArray) { android.util.SparseArray<? extends android.os.Parcelable> array = ((android.util.SparseArray<? extends android.os.Parcelable>) (obj)); for (int n = (array.size()) - 1; n >= 0; n--) { <START_MOD>android.os.Parcelable p = ((android.os.Parcelable) <END_MOD>(array.valueAt(n)<START_MOD>)); if ((p != null) && (((p<END_MOD>.describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0)<START_MOD>)<END_MOD> { fdFound = true; break; } } } else if (obj instanceof java.util.ArrayList) { java.util.ArrayList array = ((java.util.ArrayList) (obj)); if ((!(array.isEmpty())) && ((array.get(0)) instanceof android.os.Parcelable)) { for (int n = (array.size()) - 1; n >= 0; n--) { android.os.Parcelable p = ((android.os.Parcelable) (array.get(n))); if ((p != null) && (((p.describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0)) { fdFound = true; break; } } } } } } mHasFds = fdFound; mFdsKnown = true; } return mHasFds; }
public void <START_MOD>testSetPositivePrefix<END_MOD>() throws java.lang.Exception { java.text.DecimalFormat format = new java.text.DecimalFormat(); assertEquals("", format.getPositivePrefix()); format.setPositivePrefix("PosPrf"); assertEquals("PosPrf", format.getPositivePrefix()); assertTrue(((format.parse("PosPrf123.45").doubleValue()) == 123.45)); format.setPositivePrefix(""); assertEquals("", format.getPositivePrefix()); format.setPositivePrefix(null); assertNull(format.getPositivePrefix()); }
public void handleShowToast(int lockTaskModeState) { java.lang.String text = null; if (lockTaskModeState == (android.app.ActivityManager.LOCK_TASK_MODE_LOCKED)) { text = mContext.getString(R.string.lock_to_app_toast_locked); } else if (lockTaskModeState == (android.app.ActivityManager.LOCK_TASK_MODE_PINNED)) { text = mContext.getString(R.string.lock_to_app_toast); } if (text == null) { return; } <START_MOD>long showToastTime = android.os.SystemClock.elapsedRealtime(); if ((showToastTime - (mLastShowToastTime)) < (com.android.server.am.LockTaskNotify.SHOW_TOAST_MINIMUM_INTERVAL)) { com.android.server.am.Slog.i(com.android.server.am.LockTaskNotify.TAG,   toast since it is requested very short interval. return; } <END_MOD>if ((mLastToast) != null) { mLastToast.cancel(); } mLastToast = makeAllUserToastAndShow(text); <START_MOD>mLastShowToastTime = showToastTime; }<END_MOD>
public com.android.se.Channel openLogicalArfChannel(byte[] aid) throws java.io.IOException { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { <START_MOD>throw new java.util.MissingResourceException( channel was available "", "")<END_MOD>; } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { android.util.Log.e(mTag, ( channels left to access ARF:   + (e.getMessage()))); throw ((java.util.MissingResourceException) (e)); } else { android.util.Log.e(mTag, ( opening logical channel   + (e.getLocalizedMessage()))); } mArfChannel = null; return null; } }
public void stop() {<START_MOD> final boolean hadBeenStarted = started();<END_MOD> mUpstreamLinkProperties = null; mHwInterface.stopOffloadControl(); mControlInitialized = false; mConfigInitialized = false; <START_MOD>if (hadBeenStarted) mLog.log( offload stopped <END_MOD>}
<START_MOD>public static int pwrite(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, long offset) throws android.os.ErrnoException, java.io.InterruptedIOException { return Libcore.os.pwrite(fd, buffer, offset); }<END_MOD>
@org.junit.Test @org.junit.experimental.categories.Category(com.android.jack.test.category.KnownBugs.class) public void test002g() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackOutput = runTest002(true, "keep-first", errOut, false, true); <START_MOD>com.android.jack.library.InputJackLibrary lib = null; try { lib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibraryFromDir<END_MOD>(jackOutput); checkResourceContent(<START_MOD>lib<END_MOD>, com.android.jack.fileconflict.FileConflictTests.<START_MOD>RESOURCE1_PATH<END_MOD>, "Res1"); checkResourceContent(<START_MOD>lib<END_MOD>, com.android.jack.fileconflict.FileConflictTests.<START_MOD>RESOURCE2_PATH<END_MOD>, "Res2"); checkResourceContent(<START_MOD>lib<END_MOD>, com.android.jack.fileconflict.FileConflictTests.<START_MOD>RESOURCE3_PATH<END_MOD>, "Res3"); <START_MOD>} finally { if (lib != null) { lib.close(); } } <END_MOD>java.lang.String errString = errOut.toString(); junit.framework.Assert.assertTrue(errString.contains( in junit.framework.Assert.assertTrue(errString.contains( already been imported }
@org.junit.Test public void testUnbondDevice_disconnectBeforeUnbond() { <START_MOD>android.bluetooth.BluetoothDevice device<END_MOD> = getTestDevice(0); org.junit.Assert.assertTrue(mHeadsetService.connect(<START_MOD>device<END_MOD>)); verify(mObjectsFactory).makeStateMachine(<START_MOD>device<END_MOD>, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectHfp(<START_MOD>device<END_MOD>); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, <START_MOD>device<END_MOD>); mHeadsetService.messageFromNative(connectedEvent); try { java.lang.Thread.sleep(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException exception) { org.junit.Assert.fail( while waiting for callback to disconnected state } doReturn(BluetoothDevice.BOND_NONE).when(mAdapterService).getBondState(eq(<START_MOD>device<END_MOD>)); android.content.Intent unbondIntent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_BOND_STATE_CHANGED); unbondIntent.putExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.BOND_NONE); unbondIntent.putExtra(BluetoothDevice.EXTRA_DEVICE, <START_MOD>device<END_MOD>); android.support.test.InstrumentationRegistry.getTargetContext().sendBroadcast(unbondIntent); verify(mObjectsFactory, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).destroyStateMachine(mStateMachineArgument.capture()); org.junit.Assert.assertEquals(<START_MOD>device<END_MOD>, mStateMachineArgument.getValue().getDevice()); }
private void disconnectProfiles(android.bluetooth.BluetoothDevice device, java.lang.String deviceID) { com.googlecode.android_scripting.Log.d(( device   + device)); mA2dpProfile.a2dpDisconnect(device); mA2dpSinkProfile.a2dpSinkDisconnect(device); mHidProfile.hidDisconnect(device); mHspProfile.hspDisconnect(device); mHfpClientProfile.hfpClientDisconnect(device); mPanProfile.panDisconnect(device); mPbapClientProfile.pbapClientDisconnect(device); <START_MOD>mMapClientProfile.mapClientDisconnect(device); <END_MOD>}
@java.lang.Override protected boolean start() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, "start()"); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) != null) { throw new java.lang.IllegalStateException( called twice } mAdapter = java.util.Objects.requireNonNull(android.bluetooth.BluetoothAdapter.getDefaultAdapter(),   cannot be null when HearingAidService starts mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapterService(),   cannot be null when HearingAidService starts <START_MOD>mHearingAidNativeInterface = java.util.Objects.requireNonNull(com.android.bluetooth.hearingaid.HearingAidNativeInterface.getInstance(),   cannot be null when HearingAidService starts <END_MOD>mStateMachines.clear(); mStateMachinesThread = new android.os.HandlerThread("HearingAidService.StateMachines"); mStateMachinesThread.start(); <START_MOD>mHearingAidNativeInterface.init(); <END_MOD>android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.BondStateChangedReceiver(); registerReceiver(mBondStateChangedReceiver, filter); filter = new android.content.IntentFilter(); filter.addAction(BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); mConnectionStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(this); setActiveDevice(null); return true; }
private void processRegisterNotification(int eventId, int param) { switch (eventId) { case com.android.bluetooth.avrcp.Avrcp.EVT_PLAY_STATUS_CHANGED : mPlayStatusChangedNT = com.android.bluetooth.avrcp.Avrcp.NOTIFICATION_TYPE_INTERIM; registerNotificationRspPlayStatusNative(mPlayStatusChangedNT, convertPlayStateToPlayStatus(mCurrentPlayState)); break; case com.android.bluetooth.avrcp.Avrcp.EVT_TRACK_CHANGED : mTrackChangedNT = com.android.bluetooth.avrcp.Avrcp.NOTIFICATION_TYPE_INTERIM; sendTrackChangedRsp(); break; case com.android.bluetooth.avrcp.Avrcp.EVT_PLAY_POS_CHANGED : long songPosition = getPlayPosition(); mPlayPosChangedNT = com.android.bluetooth.avrcp.Avrcp.NOTIFICATION_TYPE_INTERIM; mPlaybackIntervalMs = ((long) (param)) * 1000L; if ((mCurrentPosMs) != (<START_MOD>-1L<END_MOD>)) { mNextPosMs = songPosition + (mPlaybackIntervalMs); mPrevPosMs = songPosition - (mPlaybackIntervalMs); if (<START_MOD>isPlayingState<END_MOD>(mCurrentPlayState)) { android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MESSAGE_PLAY_INTERVAL_TIMEOUT); mHandler.sendMessageDelayed(msg, mPlaybackIntervalMs); } } registerNotificationRspPlayPosNative(mPlayPosChangedNT, ((int) (songPosition))); break; } }
<START_MOD>@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JIfStatement ifStmt) { super.visit(ifStmt); com.android.jack.cfg.ConditionalBasicBlock condBlock = new com.android.jack.cfg.ConditionalBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(condBlock); assert (ifStmt.getThenStmt()) != null; accept(ifStmt.getThenStmt()); if ((!(currentStmts.isEmpty())) || (!(virtualStmts.isEmpty()))) { com.android.jack.cfg.NormalBasicBlock endOfBlock = new com.android.jack.cfg.NormalBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(endOfBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(ifStmt); forwardBranchResolver.addNormalBasicBlock(endOfBlock, nextStatement); } com.android.jack.ir.ast.JStatement elseStmt = ifStmt.getElseStmt(); if (elseStmt != null) { accept(elseStmt); if ((!(currentStmts.isEmpty())) || (!(virtualStmts.isEmpty()))) { com.android.jack.cfg.NormalBasicBlock endOfBlock = new com.android.jack.cfg.NormalBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(endOfBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(ifStmt); forwardBranchResolver.addNormalBasicBlock(endOfBlock, nextStatement); } } else { elseStmt = com.android.jack.util.ControlFlowHelper.getNextStatement(ifStmt); } forwardBranchResolver.addConditionalBasicBlock(condBlock, ifStmt.getThenStmt(), elseStmt); return false; }<END_MOD>
boolean connectAudio(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.<START_MOD>BLUETOOTH_ADMIN_PERM<END_MOD>,   BLUETOOTH<START_MOD> ADMIN<END_MOD> permission android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ( device= + device)); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG,   device is null return false; } synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (( device   + device) +   was never connected/connecting return false; } if ((stateMachine.getConnectionState()) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG,   profile not connected return false; } if (isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ( audio is not idle, current audio device is   + (getCurrentAudioDevice()))); return false; } stateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, device); } return true; }
<START_MOD>private static java.lang.Boolean parseBooleanAttribute(java.lang.String attributeValue) { if (attributeValue == null) { return null; } boolean isTrue = libcore.util.TimeZoneFinder.TRUE_ATTRIBUTE_VALUE.equals(attributeValue); if (!(isTrue || (libcore.util.TimeZoneFinder.FALSE_ATTRIBUTE_VALUE.equals(attributeValue)))) { return null; } return isTrue; }<END_MOD>
public void start() { if (isStarted()) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG,   already started return; } if ((mNetwork.linkProperties) == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG,   Can start clat with null LinkProperties return; } <START_MOD>mBaseIface = mNetwork.linkProperties.getInterfaceName(); if ((mBaseIface) == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG,   Can start clat on null interface return; } mIface = (com.android.server.connectivity.Nat464Xlat.CLAT_PREFIX) + (mBaseIface); android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, ( clatd on   + (mBaseIface))); <END_MOD>try { mNMService.registerObserver(this); <START_MOD>mNMService.startClatd(mBaseIface); <END_MOD>} catch (android.os.RemoteException <START_MOD>| java.lang.IllegalStateException e) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ( starting clatd<END_MOD> on   + (<START_MOD>mBaseIface)), e); } }<END_MOD>
<START_MOD>private void sendChangeBroadcast() { final android.content.Intent intent = new android.content.Intent(android.telephony.CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED); mServiceContext.sendStickyBroadcastAsUser(intent, UserHandle.ALL); }<END_MOD>
public java.lang.Object invoke(java.lang.Object receiver, java.lang.Object... args) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException<START_MOD> { checkAccess(receiver, getDeclaringClass(), getModifiers())<END_MOD>;<START_MOD> return invokeNative(receiver, args); }<END_MOD>
<START_MOD>private void checkFabsFloat3() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testFabsFloat3(in, out); verifyResultsFabsFloat3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFabsFloat3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testFabsFloat3(in, out); verifyResultsFabsFloat3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFabsFloat3: " + (e.toString()))); } }<END_MOD>
@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); <START_MOD>org.mockito.ArgumentCaptor<com.android.bluetooth.hfp.HeadsetService> argument = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.hfp.HeadsetService.class); <END_MOD>verify(com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(<START_MOD>argument.capture(), <END_MOD>eq(BluetoothAdapter.STATE_OFF)); <START_MOD>org.junit.Assert.assertEquals(argument.getValue(), <END_MOD>mHeadsetService<START_MOD>); mHeadsetService<END_MOD> = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService); mStateMachines.clear(); mCurrentDevice = null; }
@javax.annotation.Nonnull private com.android.jack.<START_MOD>jayce<END_MOD>.<START_MOD>NodeLevel<END_MOD> <START_MOD>getLoadLevel<END_MOD>(@javax.annotation.Nonnull com.android.jack.<START_MOD>jayce<END_MOD>.<START_MOD>NodeLevel<END_MOD> <START_MOD>minimumLevel<END_MOD>) { com.android.jack.jayce.<START_MOD>NodeLevel<END_MOD> <START_MOD>loadLevel<END_MOD> = <START_MOD>defaultLoadLevel<END_MOD>; <START_MOD>if (!(loadLevel<END_MOD>.<START_MOD>keep(minimumLevel)))<END_MOD> <START_MOD>{ loadLevel<END_MOD> = <START_MOD>minimumLevel<END_MOD>; <START_MOD>}<END_MOD> return <START_MOD>loadLevel<END_MOD>; }
<START_MOD>@com.android.annotations.NonNull public com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService createRenderService(com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration configuration, com.android.ide.common.resources.ResourceResolver resolver) { return com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService.create(this, configuration, resolver, com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart.sCredential); }<END_MOD>
@java.lang.SuppressWarnings("unused") @java.lang.Override public void verifyCertificateChain(<START_MOD>long sslSessionNativePtr, <END_MOD>long[] certRefs, java.lang.String authMethod) throws java.security.cert.CertificateException { try { if ((certRefs == null) || ((certRefs.length) == 0)) { throw new javax.net.ssl.SSLException( sent no certificate } org.conscrypt.OpenSSLX509Certificate[] peerCertChain = new org.conscrypt.OpenSSLX509Certificate[certRefs.length]; for (int i = 0; i < (certRefs.length); i++) { peerCertChain[i] = new org.conscrypt.OpenSSLX509Certificate(certRefs[i]); } <START_MOD>handshakeSession = new org.conscrypt.OpenSSLSessionImpl(sslSessionNativePtr, null, peerCertChain, getPeerHostName(), getPeerPort(), null); <END_MOD>boolean client = sslParameters.getUseClientMode(); <START_MOD>java.lang.String authType = (client) ? authMethod : peerCertChain[0].getPublicKey().getAlgorithm(); javax.net.ssl.X509TrustManager x509tm = sslParameters.getTrustManager(); <END_MOD>if (<START_MOD>x509tm instanceof<END_MOD> javax.net.ssl.<START_MOD>X509ExtendedTrustManager) { javax.net.ssl.X509ExtendedTrustManager tm = ((javax.net.ssl.X509ExtendedTrustManager) (<END_MOD>x509tm<START_MOD>)); tm.checkServerTrusted(peerCertChain, authType, this); } else { <END_MOD>x509tm.checkServerTrusted(peerCertChain, <START_MOD>authType); } } catch (java.security.cert.CertificateException e) { throw e; } catch (<END_MOD>java.lang.<START_MOD>Exception e) { throw new <END_MOD>java.security.cert.CertificateException<START_MOD>(<END_MOD>e)<START_MOD>; } }<END_MOD>
@org.junit.Test public void legacyAppTest002b() throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir("com.android.jack.multidex.test002.jack"); java.io.File out = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); com.android.jack.test.toolchain.JackApiToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class); addCommonOptionsForMultiDex(toolchain, new java.io.File(testFolder, "config-001.jpp")); toolchain.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), "minimal-multidex"); toolchain.addStaticLibs(com.android.jack.multidex.MultiDexTests.library); toolchain.srcToExe(com.android.jack.test.toolchain.AbstractTestTools.getClasspathsAsString(toolchain.getDefaultBootClasspath(), new java.io.File[]{ com.android.jack.multidex.MultiDexTests.annotations, com.android.jack.multidex.MultiDexTests.frameworks }), out, false, testFolder); java.<START_MOD>lang.String<END_MOD> outList = getListingOfDex(new java.io.File(out, "classes.dex")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, "ref-list-002-1.txt"), outList); java.<START_MOD>lang.String<END_MOD> outList2 = getListingOfDex(new java.io.File(out, "classes2.dex")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, "ref-list-002-2.txt"), outList2); junit.framework.Assert.assertFalse(new java.io.File(out, "classes3.dex").exists()); return; }
<START_MOD>private static void DisableReporting() { if ((Main.DoDisableReporting) == null) { return; } try { Main.DoDisableReporting.invoke(null); } catch (java.lang.Exception e) { throw new java.lang.Error("Unable to disable reporting!"); } }<END_MOD>
@java.lang.Override public void onDestroy() { hideTitleBar(); <START_MOD>mAnimScreen.onDestroy(); <END_MOD>}
public void setupDataCall(int accessNetworkType, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, <START_MOD>@android.telephony.data.DataService.RequestReason<END_MOD> <START_MOD>int reason<END_MOD>, android.net.LinkProperties linkProperties, android.telephony.data.DataServiceCallback callback) { callback.onSetupDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED, null); }
<START_MOD>@java.lang.Override public void enter() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, ((("Enter Connected(" + (mDevice)) + "): ") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); mConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTED; removeDeferredMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT); broadcastConnectionState(mConnectionState, mLastConnectionState); broadcastAudioState(BluetoothHearingAid.STATE_NOT_PLAYING, BluetoothHearingAid.STATE_PLAYING); }<END_MOD>
<START_MOD>private static void parseDimension(com.android.assetstudiolib.vectordrawable.vg.SVGTree avg, org.w3c.dom.Node nNode) { org.w3c.dom.Element eElement = ((org.w3c.dom.Element) (nNode)); org.w3c.dom.NamedNodeMap a = nNode.getAttributes(); int len = a.getLength(); for (int i = 0; i < len; i++) { org.w3c.dom.Node n = a.item(i); java.lang.String name = n.getNodeName(); java.lang.String value = n.getNodeValue(); int subStringSize = value.length(); if (subStringSize > 2) { if (value.endsWith("px")) { subStringSize = subStringSize - 2; } } if ("width".equals(name)) { avg.w = java.lang.Float.parseFloat(value.substring(0, subStringSize)); } else if ("height".equals(name)) { avg.h = java.lang.Float.parseFloat(value.substring(0, subStringSize)); } else if ("viewBox".equals(name)) { avg.viewBox = new float[4]; java.lang.String[] strbox = value.split(" "); for (int j = 0; j < (avg.viewBox.length); j++) { avg.viewBox[j] = java.lang.Float.parseFloat(strbox[j]); } } } }<END_MOD>
@javax.annotation.Nonnull public java.<START_MOD>util.Iterator<com.android.sched.vfs.InputVFile> getJayceIterator() { com.android.jack.library.InputJackLibrary compilerStateLib; com.android.sched.util.codec.CodecContext codecContext = new com.android.sched.util.codec.CodecContext(); try { com.android.jack.Options options = new com.android.jack.Options(); options.checkValidity(new com.android.sched.util.RunnableHooks()); com.android.sched.util.config.ThreadConfig.setConfig(options.getConfig()); } catch (com.android.sched.util.config.ConfigurationException e) { e.printStackTrace(); } catch (com.android.jack.IllegalOptionsException e) { e.printStackTrace(); } com.android.jack.library.InputJackLibraryCodec codec = new com.android.jack.library.InputJackLibraryCodec(); compilerStateLib = codec.parseString(codecContext, compilerStateFolder.getPath()); com.android.sched.util.config.ThreadConfig.unsetConfig();<END_MOD> return <START_MOD>compilerStateLib.iterator(FileType.JAYCE); }<END_MOD>
private void <START_MOD>computePerThreadStats<END_MOD>(@com.android.annotations.NonNull com.android.tools.perflib.vmtrace.<START_MOD>ThreadInfo thread, com.android.tools.perflib.vmtrace.VmTraceData data) { com.android.tools.perflib.vmtrace.<END_MOD>Call <START_MOD>c = thread.getTopLevelCall(); if (c == null) { return; }<END_MOD> java.util.Iterator<com.android.tools.perflib.vmtrace.Call> it = <START_MOD>c<END_MOD>.getCallHierarchyIterator(); while (it.hasNext()) { c = it.next(); com.android.tools.perflib.vmtrace.MethodInfo info = data.getMethod(c.getMethodId()); info.addExclusiveThreadTimes(c.getExclusiveThreadTime()<START_MOD>, thread.getName()<END_MOD>); if (!(c.isRecursive())) { info.addInclusiveThreadTimes(c.getInclusiveThreadTime()<START_MOD>, thread.getName()); } } }<END_MOD>
<START_MOD>public void setIsRttCall(boolean shouldBeRtt) { if (shouldBeRtt && (!(isRttCall()))) { try { mInCallToConnectionServiceStreams = android.os.ParcelFileDescriptor.createReliablePipe(); mConnectionServiceToInCallStreams = android.os.ParcelFileDescriptor.createReliablePipe(); } catch (java.io.IOException e) { android.telecom.Log.e(this, e, "Failed to create pipes for RTT call."); } } else { closeRttPipes(); mInCallToConnectionServiceStreams = null; mConnectionServiceToInCallStreams = null; } }<END_MOD>
@java.lang.Override public synchronized void close() throws com.android.jack.library.LibraryIOException { try { for (com.android.sched.vfs.InputVFS currentSectionVFS : sectionVFS.values()) { currentSectionVFS.close(); } vfs.close(); } catch (com.android.sched.util.file.<START_MOD>CannotCloseException<END_MOD> | com.android.sched.util.file.CannotCloseInputException e) { throw new com.android.jack.library.LibraryIOException(getLocation(), e); } }
@org.junit.Test public void new_array() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(NEW_ARRAY).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), <START_MOD>"jack/jack-tests/src/com/android/jack/DxTestCase.java"<END_MOD>)).compileAndRunTest(); }
<START_MOD>java.lang.String getPathForPermissionCheck() { if (getFileSystem().needToResolveAgainstDefaultDirectory()) { return new java.lang.String(getByteArrayForSysCalls()); } else { return toString(); } }<END_MOD>
<START_MOD>@org.gradle.model.Mutate public void createAssembleTasksForProductFlavors(org.gradle.model.ModelMap<org.gradle.api.Task> tasks, @org.gradle.model.Path("android.productFlavors") org.gradle.model.ModelMap<com.android.build.gradle.managed.ProductFlavor> flavors) { if (!(flavors.isEmpty())) { for (final org.gradle.api.Named productFlavor : flavors.values()) { com.android.build.gradle.model.StandaloneNdkComponentModelPlugin.Rules.createAssembleTask(tasks, productFlavor); com.android.build.gradle.model.StandaloneNdkComponentModelPlugin.Rules.dependsOn(tasks, "assemble", com.android.build.gradle.model.StandaloneNdkComponentModelPlugin.Rules.getAssembleTaskName(productFlavor)); } } }<END_MOD>
@java.lang.Override public void executeInBackground(final java.lang.Runnable task) { executor.execute(new java.lang.Runnable() { public void run() { <START_MOD>java.lang.System.out.println( TASK <END_MOD>task.run();<START_MOD> java.lang.System.out.println( TASK<END_MOD> } }); }
<START_MOD>boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice device) { return stopVoiceRecognitionNative(com.android.bluetooth.Utils.getByteAddress(device)); }<END_MOD>
<START_MOD>public void testInvalidLibraryReferences2() throws java.lang.Exception { com.android.tools.lint.client.api.ProjectTest.TestClient client = new com.android.tools.lint.client.api.ProjectTest.TestClient(); java.io.File dir = new java.io.File("bogus"); com.android.tools.lint.client.api.ProjectTest.TestProject project1 = new com.android.tools.lint.client.api.ProjectTest.TestProject(client, dir); client.registerProject(dir, project1); com.android.tools.lint.client.api.ProjectTest.TestProject project2 = new com.android.tools.lint.client.api.ProjectTest.TestProject(client, dir); client.registerProject(dir, project2); project2.setDirectLibraries(java.util.Collections.<com.android.tools.lint.detector.api.Project>singletonList(project1)); project1.setDirectLibraries(java.util.Collections.<com.android.tools.lint.detector.api.Project>singletonList(project2)); java.util.List<com.android.tools.lint.detector.api.Project> libraries = project1.getAllLibraries(); assertNotNull(libraries); assertEquals("Warning: Internal lint error: encountered Project [dir=bogus] more than once", client.getLoggedOutput()); }<END_MOD>
public void addRegistrationListener(com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { <START_MOD>addRegistrationCallback<END_MOD>(listener); }
<START_MOD>public static android.renderscript.Allocation createFromAllcation(android.renderscript.RenderScript rs, android.renderscript.Allocation alloc) { try { android.os.Trace.traceBegin(RenderScript.TRACE_TAG, "createFromAllcation"); rs.validate(); if ((alloc.getID(rs)) == 0) { throw new android.renderscript.RSInvalidStateException("Bad input Allocation"); } android.renderscript.Type type = alloc.getType(); int usage = alloc.getUsage(); android.renderscript.Allocation.MipmapControl mips = alloc.getMipmap(); long id = rs.nAllocationCreateTyped(type.getID(rs), mips.mID, usage, 0); if (id == 0) { throw new android.renderscript.RSRuntimeException("Allocation creation failed."); } android.renderscript.Allocation outAlloc = new android.renderscript.Allocation(id, rs, type, usage); if ((usage & (android.renderscript.Allocation.USAGE_IO_INPUT)) != 0) { outAlloc.shareBufferQueue(alloc); } return outAlloc; } finally { android.os.Trace.traceEnd(RenderScript.TRACE_TAG); } }<END_MOD>
<START_MOD>private static boolean isNodeOperationPresent(com.android.manifmerger.XmlElement xmlElement, com.android.manifmerger.ActionRecorder actionRecorder, com.android.manifmerger.ActionRecorder.ActionType actionType) { com.android.manifmerger.ActionRecorder.DecisionTreeRecord decisionTreeRecord = actionRecorder.getAllRecords().get(xmlElement.getId()); for (com.android.manifmerger.ActionRecorder.NodeRecord nodeRecord : decisionTreeRecord.getNodeRecords()) { if ((nodeRecord.getActionType()) == actionType) { return true; } } return false; }<END_MOD>
<START_MOD>private javax.swing.JComponent createActiveTextDisplay(com.google.gct.login.ui.UsersListItem usersListItem) { javax.swing.JPanel mainPanel = new javax.swing.JPanel(); mainPanel.setLayout(new java.awt.GridBagLayout()); mainPanel.setBackground(ACTIVE_COLOR); mainPanel.setForeground(com.intellij.util.ui.UIUtil.getListSelectionForeground()); mainPanel.setPreferredSize(new java.awt.Dimension(200, 96)); javax.swing.JPanel bottomPanel = new javax.swing.JPanel(); bottomPanel.setLayout(new javax.swing.BoxLayout(bottomPanel, javax.swing.BoxLayout.PAGE_AXIS)); bottomPanel.setBackground(ACTIVE_COLOR); bottomPanel.setForeground(com.intellij.util.ui.UIUtil.getListSelectionForeground()); bottomPanel.setPreferredSize(new java.awt.Dimension(200, 40)); javax.swing.JLabel playLabel = new javax.swing.JLabel("Open Play Developer Console"); playLabel.setFont(PLAIN_EMAIL_FONT); playLabel.setForeground(JBColor.BLUE); bottomPanel.add(playLabel, java.awt.Component.BOTTOM_ALIGNMENT); playLabel.setBorder(javax.swing.BorderFactory.createLineBorder(JBColor.GREEN)); javax.swing.JLabel cloudLabel = new javax.swing.JLabel("Open Cloud Console"); cloudLabel.setFont(PLAIN_EMAIL_FONT); cloudLabel.setForeground(JBColor.BLUE); bottomPanel.add(cloudLabel, java.awt.Component.BOTTOM_ALIGNMENT); cloudLabel.setBorder(javax.swing.BorderFactory.createLineBorder(JBColor.BLACK)); java.awt.GridBagConstraints topConstraints = new java.awt.GridBagConstraints(); topConstraints.gridx = 0; topConstraints.gridy = 0; topConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST; java.awt.GridBagConstraints bottomConstraints = new java.awt.GridBagConstraints(); bottomConstraints.gridx = 0; bottomConstraints.gridy = 1; bottomConstraints.weightx = 1; bottomConstraints.weighty = 5; bottomConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST; javax.swing.JComponent topPanel = createTextDisplay(true, usersListItem); mainPanel.add(topPanel, topConstraints); mainPanel.add(bottomPanel, bottomConstraints); mainPanel.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.black)); return mainPanel; }<END_MOD>
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) { com.android.sched.util.log.Event event = tracer.start(JackEventType.DEX_MERGER); com.android.jack.backend.dex.DexWritingTool writingTool = com.android.sched.util.config.ThreadConfig.get(com.android.jack.backend.dex.DexFileWriter.DEX_WRITING_POLICY); try { writingTool.write(outputVDir); } catch (com.android.jack.backend.dex.DexWritingException e) { session.getReporter().report(Severity.FATAL, e); throw new com.android.jack.JackAbortException(e); } finally { event.end(); } }
<START_MOD>public android.net.LinkProperties waitForProvisioning() { synchronized(this) { try { wait(); } catch (java.lang.InterruptedException e) { } return mCallbackLinkProperties; } }<END_MOD>
<START_MOD>private void broadcastVendorSpecificEventIntent(java.lang.String command, java.lang.Object[] arguments, android.bluetooth.BluetoothDevice device) { if (com.android.phone.BluetoothHandsfree.VDBG) com.android.phone.BluetoothHandsfree.log((("broadcastVendorSpecificEventIntent(" + command) + ")")); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHeadset.ACTION_VENDOR_SPECIFIC_HEADSET_EVENT); intent.putExtra(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD, command); intent.putExtra(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS, arguments); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); mContext.sendBroadcast(intent, android.Manifest.permission.BLUETOOTH); }<END_MOD>
<START_MOD>@com.android.annotations.VisibleForTesting static com.android.builder.core.ApkInfoParser.ApkInfo getApkInfo(java.util.List<java.lang.String> aaptOutput) { java.util.regex.Pattern p = java.util.regex.Pattern.compile("^package: name='([^']+)' versionCode='([0-9]*)' versionName='([^']*)'.*$"); java.lang.String pkgName = null; java.lang.String versionCode = null; java.lang.String versionName = null; for (java.lang.String line : aaptOutput) { java.util.regex.Matcher m = p.matcher(line); if (m.matches()) { pkgName = m.group(1); versionCode = m.group(2); versionName = m.group(3); break; } } if (pkgName == null) { throw new java.lang.RuntimeException("Failed to find apk information with aapt"); } return new com.android.builder.core.ApkInfoParser.ApkInfo(pkgName, java.lang.Integer.parseInt(versionCode), versionName); }<END_MOD>
@org.junit.Test public void legacyAppTest002b_withoutAnnotations() throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestsWithJackFolder("multidex/test002"); java.io.File out = com.android.jack.TestTools.createTempDir("out", ""); com.android.jack.Options app1Options = addCommonOptionsForMultiDex(new java.io.File(testFolder, "config-001.jpp")); app1Options.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), "minimal-multidex"); app1Options.addJayceImport(com.android.jack.multidex.MultiDexTests.library); com.android.jack.TestTools.compileSourceToDex(app1Options, testFolder, (((com.android.jack.TestTools.getDefaultBootclasspathString()) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.frameworks.getPath())), out, false); java.<START_MOD>lang.String<END_MOD> outList = getListingOfDex(new java.io.File(out, "classes.dex")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, "ref-list-002-1.txt"), outList); java.<START_MOD>lang.String<END_MOD> outList2 = getListingOfDex(new java.io.File(out, "classes2.dex")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, "ref-list-002-2.txt"), outList2); junit.framework.Assert.assertFalse(new java.io.File(out, "classes3.dex").exists()); return; }
<START_MOD>@com.android.annotations.NonNull public java.util.Map<com.android.resources.ResourceType, java.util.Map<java.lang.String, com.android.ide.common.rendering.api.ResourceValue>> getConfiguredResources(@com.android.annotations.NonNull com.android.ide.common.resources.configuration.FolderConfiguration referenceConfig) { return java.util.Collections.emptyMap(); }<END_MOD>
public static final java.text.DateFormat getTimeInstance(int style, java.util.Locale locale) { java.text.DateFormat.checkTimeStyle(style); <START_MOD>locale = libcore.icu.LocaleData.mapInvalidAndNullLocales(locale); <END_MOD>return new java.text.SimpleDateFormat(libcore.icu.LocaleData.get(locale).getTimeFormat(style), locale); }
<START_MOD>private void writeMinorVersionProperties() { }<END_MOD>
public void test_SSL_do_handshake_server_timeout() throws java.lang.Exception { final java.net.ServerSocket listener = new java.net.ServerSocket(0); try { org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.Hooks cHooks = new org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.Hooks(); org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.Hooks sHooks = new org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.ServerHooks(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.getServerPrivateKey(), org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.getServerCertificates()); java.util.concurrent.Future<org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.TestSSLHandshakeCallbacks> client = org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.handshake(listener, (-1), true, cHooks, null); java.util.concurrent.Future<org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.TestSSLHandshakeCallbacks> server = org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.handshake(listener, 1, false, sHooks, null); server.get(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.TIMEOUT_SECONDS, java.util.concurrent.TimeUnit.SECONDS); fail(); } catch (java.util.concurrent.ExecutionException expected) { assertEquals(java.net.SocketTimeoutException.class, expected.getCause().getClass()); } <START_MOD>org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.assertNoErrors(); <END_MOD>}
private void updateNewCallbackWithState(<START_MOD>com.<END_MOD>android.ims.internal.IImsRegistrationCallback c) throws android.os.RemoteException { int state; com.android.ims.ImsReasonInfo disconnectInfo; synchronized(mLock) { state = mRegistrationState; disconnectInfo = mLastDisconnectCause; } switch (state) { case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_NOT_REGISTERED : { c.onDeregistered(disconnectInfo); break; } case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERING : { c.onRegistering(getConnectionType()); break; } case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERED : { c.onRegistered(getConnectionType()); break; } } }
<START_MOD>private static void checkCallback(android.net.ConnectivityManager.NetworkCallback callback) { com.android.internal.util.Preconditions.checkArgument((callback != null), "null NetworkCallback"); }<END_MOD>
<START_MOD>public java.lang.String getName(java.lang.String vcard) { java.lang.String[] lines = vcard.split(com.android.bluetooth.pbap.BluetoothPbapVcardManager.PropertySelector.SEPARATOR); java.lang.String name = ""; for (java.lang.String line : lines) { if ((!(java.lang.Character.isWhitespace(line.charAt(0)))) && (!(line.startsWith("=")))) { if (line.startsWith("N:")) name = line.substring(line.lastIndexOf(':'), line.length()); } } android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("returning name: " + name)); return name; }<END_MOD>
<START_MOD>boolean cindResponse(android.bluetooth.BluetoothDevice device, int service, int numActive, int numHeld, int callState, int signal, int roam, int batteryCharge) { return cindResponseNative(service, numActive, numHeld, callState, signal, roam, batteryCharge, com.android.bluetooth.Utils.getByteAddress(device)); }<END_MOD>
<START_MOD>public java.lang.String getPath() { return path; }<END_MOD>
@java.lang.Override protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor monitor) { com.android.sdkstats.SdkStatsService stats = new com.android.sdkstats.SdkStatsService(); java.lang.String <START_MOD>sdkPath<END_MOD> = com.android.ide.eclipse.monitor.MonitorPlugin.getDefault().getSdkPath()<START_MOD>; if (sdkPath == null) { return org.eclipse.core.runtime.Status.OK_STATUS; } java.lang.String toolsPath = new org.eclipse.core.runtime.Path(sdkPath<END_MOD>).append("tools").toString(); com.android.ide.eclipse.monitor.MonitorStartup.ping(stats, toolsPath); return org.eclipse.core.runtime.Status.OK_STATUS; }
public static void wtf(java.lang.String prefix, java.lang.Throwable tr, java.lang.String format, java.lang.Object... args) { android.<START_MOD>telecom<END_MOD>.Log<START_MOD>.systemLogger<END_MOD>.wtf(android.telecom.Log.TAG, android.telecom.Log.buildMessage(prefix, format, args), tr); }
public void testReadWrite_Block_WriterNotBind() throws java.lang.Exception { byte[] sourceArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; byte[] targetArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; for (int i = 0; i < (sourceArray.length); i++) { sourceArray[i] = ((byte) (i)); } this.channel1.connect(<START_MOD>datagramSocket1Address<END_MOD>); this.channel2.socket().bind(<START_MOD>datagramSocket1Address<END_MOD>); this.channel2.connect(<START_MOD>datagramSocket2Address<END_MOD>); java.nio.ByteBuffer sourceBuf = java.nio.ByteBuffer.wrap(sourceArray); assertEquals(org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL, this.channel1.write(sourceBuf)); java.nio.ByteBuffer targetBuf = java.nio.ByteBuffer.wrap(targetArray); closeBlockedReaderChannel2(targetBuf); }
<START_MOD>public void setUp() throws java.lang.Exception { super.setUp(); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStack assistantStack = mAmWmState.getAmState().getStackById(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_DISPLAY = assistantStack.mDisplayId; disableAssistant(); }<END_MOD>
<START_MOD>private void resetShortAudioDescriptor() { java.lang.String audioParameter = "set_ARC_format="; java.lang.String keyValuePairs; byte[] buffer = new byte[2]; buffer[0] = ((byte) (0)); buffer[1] = ((byte) (mAvrPort)); keyValuePairs = audioParameter + (java.util.Arrays.toString(buffer)); tv().setAudioParameters(keyValuePairs); }<END_MOD>
<START_MOD>@java.lang.Override public void OnClientTorndownEvent(android.net.wifi.IClientInterface networkInterface) { if (networkInterface == (mClientInterface)) { mClientInterface = null; } }<END_MOD>
<START_MOD>@java.lang.Override protected java.lang.String getLogRecString(android.os.Message msg) { if ((msg.what) == (com.android.bluetooth.hfp.HeadsetStateMachine.STACK_EVENT)) { com.android.bluetooth.hfp.HeadsetStackEvent event = ((com.android.bluetooth.hfp.HeadsetStackEvent) (msg.obj)); return ((com.android.bluetooth.hfp.HeadsetStateMachine.getMessageName(msg.what)) + ": ") + event; } else { return ((((com.android.bluetooth.hfp.HeadsetStateMachine.getMessageName(msg.what)) + ": arg1=") + (msg.arg1)) + ", arg2=") + (msg.arg2); } }<END_MOD>
@java.lang.Override public <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.StructStatVfs fstatvfs(java.io.FileDescriptor fd) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onReadFromDisk(); return os.fstatvfs(fd); }
@java.lang.Override public java.io.FileDescriptor accept(java.io.FileDescriptor fd, java.net.InetSocketAddress peerAddress) throws <START_MOD>android.os.ErrnoException, <END_MOD>java.net.SocketException { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); return tagSocket(os.accept(fd, peerAddress)); }
<START_MOD>private static void FalseCrossOverLoop3() { Main.sArrD[20] = -3; for (int i = 0; i < (Main.sArrJ.length); i++) { Main.sArrJ[i] = ((long) (Main.sArrD[20])); } }<END_MOD>
@org.junit.Test public void testV1SignedAttrs() throws java.lang.Exception { com.android.apksig.ApkVerifierTest.assertVerified(verify("v1-only-with-signed-attrs.apk")); <START_MOD>com.android.apksig.ApkVerifierTest.assertVerified(verify("v1-only-with-signed-attrs-signerInfo1-good-signerInfo2-good.apk")); <END_MOD>}
<START_MOD>public void test_DecodeLong() throws java.lang.Exception { assertEquals(0, java.lang.Long.decode("+0").intValue()); assertEquals(473, java.lang.Long.decode("+473").intValue()); assertEquals(255, java.lang.Long.decode("+0xFF").intValue()); assertEquals(16, java.lang.Long.decode("+020").intValue()); assertEquals(2147483647, java.lang.Long.decode("+2147483647").intValue()); try { java.lang.Long.decode("--1"); fail(); } catch (java.lang.NumberFormatException e) { } try { java.lang.Long.decode("++1"); fail(); } catch (java.lang.NumberFormatException e) { } try { java.lang.Long.decode("Kona"); fail(); } catch (java.lang.NumberFormatException e) { } }<END_MOD>
<START_MOD>public void testRadians() { checkRadiansFloat(); checkRadiansFloat2(); checkRadiansFloat3(); checkRadiansFloat4(); }<END_MOD>
<START_MOD>@java.lang.Override protected void onResume() { super.onResume(); if ((mTestState) == (com.android.cts.verifier.jobscheduler.IdleConstraintTestActivity.IDLE_ON_TEST_STATE_NOT_STARTED)) { mStartButton.setEnabled(true); mContinueInstructionTextView.setVisibility(View.GONE); } }<END_MOD>
<START_MOD>@org.junit.Test public void legacyAppTest002c() throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestsWithJackFolder("multidex/test002"); java.io.File out = com.android.jack.TestTools.createTempDir("out", ""); com.android.jack.Options app1Options = createCommonOptionsForMultiDex(new java.io.File(testFolder, "config-001.jpp")); app1Options.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), "multidex"); com.android.jack.TestTools.compileSourceToDex(app1Options, testFolder, (((((com.android.jack.TestTools.getDefaultBootclasspathString()) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.frameworks.getPath())) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.library.getPath())), out, false); java.io.File classesDex = new java.io.File(out, "classes.dex"); junit.framework.Assert.assertTrue(classesDex.exists()); java.io.File classes2Dex = new java.io.File(out, "classes2.dex"); junit.framework.Assert.assertTrue(classes2Dex.exists()); java.io.File classes3Dex = new java.io.File(out, "classes3.dex"); junit.framework.Assert.assertFalse(classes3Dex.exists()); int totalTypeNumber = (getTypeCountInDex(classesDex)) + (getTypeCountInDex(classes2Dex)); junit.framework.Assert.assertEquals(100, totalTypeNumber); return; }<END_MOD>
@java.lang.Override @javax.annotation.Nonnull public java.lang.String getTranslatorVersion() { return com.android.jill.Jill.getVersion().<START_MOD>getVersionName<END_MOD>(); }
com.android.internal.telephony<START_MOD>.PhoneConstants<END_MOD>.DataState getDataConnectionState(java.lang.String apnType);
@java.lang.Override public boolean doAction(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) { com.android.jack.shrob.obfuscation.<START_MOD>NewMethodKeyMarker<END_MOD> marker = type.getMarker(com.android.jack.shrob.obfuscation.<START_MOD>NewMethodKeyMarker<END_MOD>.class); if ((marker != null) && (marker.<START_MOD>getNewKeys<END_MOD>().contains(methodKey))) { hasFoundMethodId = true; return false; } for (com.android.jack.ir.ast.JMethod sameEnclosingTypeMethod : type.getMethods()) { com.android.jack.ir.ast.JMethodIdWide id = sameEnclosingTypeMethod.getMethodId().getMethodIdWide(); if ((id.canBeVirtual()) && (!(com.android.jack.shrob.obfuscation.Renamer.mustBeRenamed(id)))) { if (com.android.jack.shrob.obfuscation.Renamer.getKey(id).equals(methodKey)) { hasFoundMethodId = true; return false; } } } return true; }
private com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData.LayoutBridge loadLayoutBridge() { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData.LayoutBridge layoutBridge = new com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData.LayoutBridge(); try { java.io.File f = new java.io.File(mAndroidTarget.getPath(IAndroidTarget.LAYOUT_LIB)); if ((f.isFile()) == false) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR,   is missing! } else { java.net.URI uri = f.toURI(); uri.toURL(); layoutBridge.classLoader = <START_MOD>com.android.ide.eclipse.adt.AdtPlugin.getLayoutLoader(mAndroidTarget<END_MOD>); java.lang.Class<?> clazz = layoutBridge.classLoader.loadClass(AndroidConstants.CLASS_BRIDGE); if (clazz != null) { java.lang.reflect.Constructor<?> constructor = clazz.getConstructor(); if (constructor != null) { java.lang.Object bridge = constructor.newInstance(); if (bridge instanceof com.android.layoutlib.api.ILayoutBridge) { layoutBridge.bridge = ((com.android.layoutlib.api.ILayoutBridge) (bridge)); } } } if ((layoutBridge.bridge) == null) { layoutBridge.status = LoadStatus.FAILED; com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, ( to load   + (com.android.ide.eclipse.adt.AndroidConstants.CLASS_BRIDGE))); } else { try { layoutBridge.apiLevel = layoutBridge.bridge.getApiLevel(); } catch (java.lang.AbstractMethodError e) { layoutBridge.apiLevel = 1; } layoutBridge.status = LoadStatus.LOADED; } } } catch (java.lang.Throwable t) { layoutBridge.status = LoadStatus.FAILED; com.android.ide.eclipse.adt.AdtPlugin.log(t,   to load the LayoutLib } return layoutBridge; }
<START_MOD>public static void requestLayout(com.android.ddmlib.Client client, java.lang.String viewRoot, java.lang.String view) throws java.io.IOException { com.android.ddmlib.HandleViewDebug.sendJdwpPacket(client, com.android.ddmlib.HandleViewDebug.CHUNK_VULT, viewRoot, view, null); }<END_MOD>
public void testAesCbcHmacSha256Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.<START_MOD>getKey(256)<END_MOD>); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, <START_MOD>android.net.cts.IpSecManagerTest.getKey<END_MOD>(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth<START_MOD>, null<END_MOD>, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, <START_MOD>null, <END_MOD>false, 1, true); }
@java.lang.Override public void srcToLib(@javax.annotation.Nonnull java.io.File out, boolean zipFiles, @javax.annotation.Nonnull java.io.File... sources) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); <START_MOD>setOutputJack(out, zipFiles); <END_MOD>srcToCommon(args, sources); com.android.jack.test.toolchain.AbstractTestTools.addFile(args, false, sources); com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(errRedirectStream); exec.setOut(outRedirectStream); exec.setVerbose(isVerbose); try { if ((exec.run()) != 0) { throw new java.lang.RuntimeException( compiler exited with an error } } catch (com.android.jack.test.util.ExecFileException e) { throw new java.lang.RuntimeException( error occurred while running Jack e); } }
public boolean addLinkAddress(android.net.LinkAddress address) { if (address <START_MOD>==<END_MOD> null) <START_MOD>{<END_MOD> <START_MOD>return false; } int i = findLinkAddressIndex<END_MOD>(address)<START_MOD>; if (i >= 0<END_MOD>)<START_MOD> { mLinkAddresses.set(i, address<END_MOD>)<START_MOD>; return false; } else<END_MOD> { mLinkAddresses.add(address); return true; } }
<START_MOD>@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testSuperThisRefsInDefenderMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_37).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }<END_MOD>
<START_MOD>private void connectHfpDevice(android.bluetooth.BluetoothDevice device) { org.junit.Assert.assertTrue(mHeadsetService.connect(device)); verify(mObjectsFactory).makeStateMachine(device, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectHfp(device); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mHeadsetService.getConnectionState(device)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(device), mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTING })); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_SLC_CONNECTED, device); mHeadsetService.messageFromNative(connectedEvent); try { java.lang.Thread.sleep(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException exception) { org.junit.Assert.fail(("Interrupted while waiting for callback for " + device)); } org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTED, mHeadsetService.getConnectionState(device)); org.junit.Assert.assertThat(mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTED }), org.hamcrest.CoreMatchers.hasItem(device)); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); }<END_MOD>
public static void processJar(java.io.File file, java.util.Collection<java.io.FileInputStream> resourcesJars) throws<START_MOD> com.android.apkbuilder.ApkBuilder.ApkCreationException,<END_MOD> java.io.FileNotFoundException { if (file.isDirectory()) { java.lang.String[] filenames = file.list(new java.io.FilenameFilter() { public boolean accept(java.io.File dir, java.lang.String name) { return com.android.apkbuilder.internal.ApkBuilderImpl.PATTERN_JAR_EXT.matcher(name).matches(); } }); for (java.lang.String filename : filenames) { java.io.File f = new java.io.File(file, filename); com.android.apkbuilder.internal.ApkBuilderImpl.processJarFile(f, resourcesJars); } } else <START_MOD>if (file.isFile()) <END_MOD>{ com.android.apkbuilder.internal.ApkBuilderImpl.processJarFile(file, resourcesJars); } <START_MOD>else { throw new com.android.apkbuilder.ApkBuilder.ApkCreationException(((file.getAbsolutePath()) +   does not exists! } }<END_MOD>
<START_MOD>void writeMetricsModemRestartEvent(java.lang.String reason) { mMetrics.writeModemRestartEvent(mPhoneId, reason); }<END_MOD>
<START_MOD>public void testCopyDocument_Cancel() throws java.lang.Exception { bots.roots.openRoot(com.android.documentsui.StubProvider.ROOT_0_ID); bots.directory.findDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); device.waitForIdle(); bots.directory.clickDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); device.waitForIdle(); bots.main.clickToolbarOverflowItem(com.android.documentsui.CancelFromNotificationUiTest.COPY); device.waitForIdle(); bots.main.clickDialogCancelButton(); device.waitForIdle(); bots.directory.waitForDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); }<END_MOD>
<START_MOD>@org.junit.Test public void testEvaluateNetworks_trusted_recommendation_oneScored_oneDeletedEphemeral() { android.net.wifi.WifiConfiguration recommendedWifiConfiguration = new android.net.wifi.WifiConfiguration(); recommendedWifiConfiguration.networkId = 5; recommendedWifiConfiguration.SSID = com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL1.getSSID(); recommendedWifiConfiguration.getNetworkSelectionStatus().setCandidate(com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL1.getScanResult()); when(mWifiConfigManager.wasEphemeralNetworkDeleted(com.android.server.wifi.util.ScanResultUtil.createQuotedSSID(com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL1.getSSID()))).thenReturn(false); when(mWifiConfigManager.wasEphemeralNetworkDeleted(com.android.server.wifi.util.ScanResultUtil.createQuotedSSID(com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL2.getSSID()))).thenReturn(true); when(mNetworkScoreManager.requestRecommendation(any(android.net.RecommendationRequest.class))).thenReturn(new android.net.RecommendationResult(recommendedWifiConfiguration)); android.net.wifi.WifiConfiguration result = mRecommendedNetworkEvaluator.evaluateNetworks(com.google.android.collect.Lists.newArrayList(com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL1, com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL2), null, null, false, false, null); assertEquals(recommendedWifiConfiguration, result); verify(mNetworkScoreManager).requestRecommendation(mRecommendationRequestCaptor.capture()); assertEquals(new android.net.NetworkCapabilities(), mRecommendationRequestCaptor.getValue().getRequiredCapabilities()); verify(mWifiConfigManager).setNetworkCandidateScanResult(recommendedWifiConfiguration.networkId, recommendedWifiConfiguration.getNetworkSelectionStatus().getCandidate(), 0); }<END_MOD>
@org.junit.Test public void testJackDirToJackArchive() throws java.lang.Exception { java.io.File jackFolder = com.android.jack.TestTools.createTempDir("tempjack", "dir"); com.android.jack.<START_MOD>test.toolchain.JackBasedToolchain toolchain<END_MOD> = <START_MOD>com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); toolchain.addResource(<END_MOD>new <START_MOD>java.io.File(com.android.jack.resource.ResourceTests.FILE, "rsc")); toolchain.srcToLib(com.android.jack.test.toolchain.AbstractTestTools.getClasspathAsString(toolchain.getDefaultBootClasspath()), jackFolder, false, com.android.jack.resource.ResourceTests.FILE); java.io.File shrobbedJackAr = com.android.jack.test.toolchain.AbstractTestTools.createTempFile("shrobbedJackAr", ".zip"); toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); toolchain.addProguardFlags<END_MOD>(new java.io.File(com.android.jack.resource.ResourceTests.FILE, <START_MOD>"proguard.flags")); toolchain.libToLib(<END_MOD>jackFolder, shrobbedJackAr<START_MOD>, true); java.util.zip.ZipFile zipFile<END_MOD> = new <START_MOD>java.util.zip.ZipFile(<END_MOD>shrobbedJackAr<START_MOD>); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.RESOURCE1_SHORTPATH, "Res1"<END_MOD>, true); <START_MOD>checkResourceContentFromZip(<END_MOD>zipFile<START_MOD>, com.android.jack.resource.ResourceTests.RESOURCE2_SHORTPATH, "Res2", true<END_MOD>); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.<START_MOD>RESOURCE3_SHORTPATH, "Res3"<END_MOD>, true); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.<START_MOD>RESOURCE4_SHORTPATH, "Res4"<END_MOD>, true); }
<START_MOD>public java.util.Collection<com.android.jack.dx.rop.cst.CstFieldRef> getCstFieldRefs() { return com.android.jack.Jack.getUnmodifiableCollections().getUnmodifiableCollection(cstFieldRefs); }<END_MOD>
private void submitCurrentKeyValue() { if (((mCurrentKey) != null) && ((mCurrentValue) != null)) { java.lang.String statusValue = mCurrentValue.toString(); if (mInInstrumentationResultKey) { if (!(com.android.ddmlib.testrunner.InstrumentationResultParser.KNOWN_KEYS.contains(mCurrentKey))) { mInstrumentationResultBundle.put(mCurrentKey, statusValue); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.SHORTMSG)) { handleTestRunFailed(<START_MOD>java.lang.String.format( run failed due to '%s' statusValue)<END_MOD>); } } else { com.android.ddmlib.testrunner.InstrumentationResultParser.TestResult testInfo = getCurrentTestInfo(); if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.CLASS)) { testInfo.mTestClass = statusValue.trim(); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.TEST)) { testInfo.mTestName = statusValue.trim(); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.NUMTESTS)) { try { testInfo.mNumTests = java.lang.Integer.parseInt(statusValue); } catch (java.lang.NumberFormatException e) { com.android.ddmlib.Log.e(com.android.ddmlib.testrunner.InstrumentationResultParser.LOG_TAG, ( integer number of tests, received   + statusValue)); } } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.ERROR)) { handleTestRunFailed(statusValue); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.STACK)) { testInfo.mStackTrace = statusValue; } else if (!(com.android.ddmlib.testrunner.InstrumentationResultParser.KNOWN_KEYS.contains(mCurrentKey))) { mTestMetrics.put(mCurrentKey, statusValue); } } mCurrentKey = null; mCurrentValue = null; } }
<START_MOD>@org.jetbrains.annotations.Nullable @java.lang.Override public java.awt.Rectangle getPathBounds(javax.swing.tree.TreePath path) { java.awt.Rectangle bounds = super.getPathBounds(path); if (bounds == null) { return null; } int columnOffset = getTreeColumnOffset(); if (columnOffset != (-1)) { bounds.x += columnOffset; } return bounds; }<END_MOD>
<START_MOD>public void testMessageDigest_MultipleThreads_Misuse() throws java.lang.Exception { java.util.concurrent.ExecutorService es = java.util.concurrent.Executors.newFixedThreadPool(THREAD_COUNT); final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(THREAD_COUNT); final java.security.MessageDigest md = java.security.MessageDigest.getInstance("SHA-256"); final byte[] message = new byte[64]; for (int i = 0; i < (THREAD_COUNT); i++) { es.submit(new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { latch.countDown(); for (int j = 0; j < 100; j++) { md.update(message); md.digest(); } return null; } }); } es.shutdown(); es.awaitTermination(1, java.util.concurrent.TimeUnit.MINUTES); }<END_MOD>
@java.lang.Override public android.net.NetworkMisc createFromParcel(android.os.Parcel in) { android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (in.readInt()) != 0; networkMisc.explicitlySelected = (in.readInt()) != 0; networkMisc.acceptUnvalidated = (in.readInt()) != 0; networkMisc.subscriberId = in.readString(); networkMisc.provisioningNotificationDisabled = (in.readInt()) != 0; <START_MOD>networkMisc.managerUid = in.readInt(); <END_MOD>return networkMisc; }
<START_MOD>public static boolean isMethodGenericSignature(@javax.annotation.Nonnull org.objectweb.asm.tree.MethodNode mn) { if ((mn.signature) != null) { try { new com.android.jill.signature.GenericSignatureParser<java.lang.Object>(new com.android.jill.signature.DummyAction()).parseMethodSignature(mn.signature); return true; } catch (java.lang.reflect.GenericSignatureFormatError e) { } } return false; }<END_MOD>
<START_MOD>@org.jetbrains.annotations.Nullable @java.lang.Override public java.lang.String getDeprecationMessage(@org.jetbrains.annotations.NotNull com.intellij.codeInspection.deprecation.PsiElement deprecatedElement, @org.jetbrains.annotations.NotNull com.intellij.codeInspection.deprecation.PsiElement referenceElement, @org.jetbrains.annotations.Nullable java.lang.String symbolName, @org.jetbrains.annotations.NotNull java.lang.String defaultMessage) { if (com.intellij.codeInspection.deprecation.DeprecationInspection.AndroidDeprecationFilter.ACTION_BAR_ACTIVITY.equals(symbolName)) { return "ActionBarActivity is deprecated; use `AppCompatActivity` instead"; } return defaultMessage; }<END_MOD>
<START_MOD>public void testChannelWrite_exceptionOnInterrupt() throws java.lang.Exception { libcore.java.nio.channels.FileIOInterruptTest.FifoReader fifoReader = new libcore.java.nio.channels.FileIOInterruptTest.FifoReader(fifoFile); fifoReader.start(); java.nio.channels.FileChannel fileChannel = new java.io.FileOutputStream(fifoFile).getChannel(); libcore.java.nio.channels.FileIOInterruptTest.ChannelWriter channelWriter = new libcore.java.nio.channels.FileIOInterruptTest.ChannelWriter(fileChannel); java.lang.Thread channelWriterThread = libcore.java.nio.channels.FileIOInterruptTest.createAndStartThread("ChannelWriter", channelWriter); channelWriter.waitForThreadToBlock(); channelWriterThread.interrupt(); libcore.java.nio.channels.FileIOInterruptTest.waitToDie(channelWriterThread); assertSame(java.nio.channels.ClosedByInterruptException.class, channelWriter.ioe.getClass()); assertTrue(channelWriter.wasInterrupted); fifoReader.tidyUp(); }<END_MOD>
<START_MOD>private java.lang.String getFqcn(@com.android.annotations.NonNull org.w3c.dom.Element activityElement) { java.lang.String activityClassName = activityElement.getAttributeNS(com.android.SdkConstants.ANDROID_URI, com.android.SdkConstants.ATTR_NAME); if ((activityClassName == null) || (activityClassName.isEmpty())) { return null; } if (activityClassName.startsWith(".")) { if ((mPackage) != null) { return (mPackage) + activityClassName; } else { return null; } } return activityClassName; }<END_MOD>
private boolean createBond(android.bluetooth.BluetoothDevice dev, int transport<START_MOD>, android.bluetooth.OOBData oobData<END_MOD>, boolean transition) { if ((dev.getBondState()) == (android.bluetooth.BluetoothDevice.BOND_NONE)) { infoLog(( address is: + dev)); byte[] addr = com.android.bluetooth.Utils.getBytesFromAddress(dev.getAddress()); <START_MOD>boolean result; if (oobData != null) { result = mAdapterService.createBondOutOfBandNative(addr, transport, oobData); } else { result = mAdapterService.createBondNative(addr, transport); } <END_MOD>if (!<START_MOD>result<END_MOD>) { sendIntent(dev, BluetoothDevice.BOND_NONE, BluetoothDevice.UNBOND_REASON_REMOVED); return false; } else if (transition) { transitionTo(mPendingCommandState); } return true; } return false; }
<START_MOD>@java.lang.Override public void afterHandshake(long session, long ssl, long context, java.net.Socket socket, java.io.FileDescriptor fd, org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback) throws java.lang.Exception { org.conscrypt.TestUtils.assertEqualByteArrays(SCT_TEST_DATA, org.conscrypt.NativeCrypto.SSL_get_signed_cert_timestamp_list(ssl)); super.afterHandshake(session, ssl, context, socket, fd, callback); }<END_MOD>
public boolean setPin(android.bluetooth.BluetoothDevice device, boolean accept, int len, byte[] pinCode) { if (!(com.android.bluetooth.Utils.<START_MOD>checkCallerAllowManagedProfiles<END_MOD>(<START_MOD>mService<END_MOD>))) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG,   - Not allowed for non-active user return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.setPin(device, accept, len, pinCode); }
@com.android.internal.annotations.GuardedBy("this") private void setVpnForcedLocked(boolean enforce) { if (<START_MOD>com.android.server.connectivity.Vpn.isNullOrLegacyVpn(mPackage)<END_MOD>) { <START_MOD>setVpnForcedWithExemptionsLocked<END_MOD>(<START_MOD>enforce<END_MOD>, null<START_MOD>); } else { setVpnForcedWithExemptionsLocked(enforce<END_MOD>, java.util.Collections.singletonList(mPackage)); } }
public int read(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws <START_MOD>android.os.ErrnoException, <END_MOD>java.io.InterruptedIOException;
<START_MOD>abstract void mergeWith(int index, @javax.annotation.CheckForNull com.android.jack.ir.ast.JValueLiteral literal);<END_MOD>
public synchronized <START_MOD>int<END_MOD> <START_MOD>appendMessages<END_MOD>(final <START_MOD>java.util.List<com.android.ddmuilib.logcat.LogCatMessage> messages) { int nDeleted = 0; while ((mQ.remainingCapacity()) < (messages.size())) { mQ.poll(); nDeleted++; } for (<END_MOD>com.android.ddmuilib.logcat.LogCatMessage m<START_MOD> : messages<END_MOD>) { mQ.offer(m); }<START_MOD> return nDeleted; }<END_MOD>
@java.lang.Override public com.android.ddmlib.RawImage getScreenshot(long timeout, java.util.concurrent.TimeUnit unit) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException<START_MOD>, java.lang.InterruptedException<END_MOD> { return com.android.ddmlib.AdbHelper.getFrameBuffer(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), this, timeout, unit); }
@java.lang.<START_MOD>SuppressWarnings("unchecked") private<END_MOD> void <START_MOD>setModuleDescriptionText(java.io.File templateFile<END_MOD>) { <START_MOD>java.util.List<com.google.gct.idea.appengine.wizard.CloudTemplateUtils.TemplateInfo> templates = myState.get(NewCloudModuleDynamicWizardPath.KEY_TEMPLATES); assert templates != null; com.android.tools.idea.templates.Parameter docUrlParam = null; com.android.tools.idea.templates.TemplateMetadata metadata = null; for (com.google.gct.idea.appengine.wizard.CloudTemplateUtils.TemplateInfo templateInfo : templates) { <END_MOD>if (<START_MOD>templateFile<END_MOD> == (<START_MOD>templateInfo.getFile()<END_MOD>)) { <START_MOD>metadata = templateInfo.getMetadata(); assert metadata != null; docUrlParam = metadata.getParameter(CloudModuleUtils.ATTR_DOC_URL<END_MOD>); } } <START_MOD>assert metadata != null; assert docUrlParam != null<END_MOD>; myModuleDescriptionText.setText(java.lang.String.format(( the <a href= documentation for more   + (( about the contents of this backend module, and for   +   instructions about connecting your Android app to this   + "backend.</body></html>")), docUrlParam.initial, metadata.getTitle())); }
<START_MOD>@org.junit.Test public void requestR1R2ANQPElementsWithoutRC() throws java.lang.Exception { when(mHandler.requestANQP(com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID, com.android.server.wifi.hotspot2.ANQPRequestManagerTest.R1R2_ANQP_WITHOUT_RC)).thenReturn(true); assertTrue(mManager.requestANQPElements(com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID, com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_ANQP_KEY, false, true)); }<END_MOD>
<START_MOD>public void updateLocalPrefixes(java.util.Set<android.net.IpPrefix> localPrefixes) { if (!(started())) return; mLocalPrefixes = localPrefixes; }<END_MOD>
<START_MOD>private static java.lang.String buildDoc(com.android.monkeyrunner.doc.MonkeyRunnerExported doc) { return doc.doc(); }<END_MOD>
protected void <START_MOD>resetRecords<END_MOD>() { imsi = null; msisdn = null; voiceMailNum = null; countVoiceMessages = 0; mncLength = UNINITIALIZED; iccid = null; spnDisplayCondition = -1; efMWIS = null; efCPHS_MWI = null; spdiNetworks = null; pnnHomeName = null; adnCache.reset(); log( onRadioOffOrNotAvailable set 'gsm.sim.operator.numeric' to operator=null android.os.SystemProperties.set(com.android.internal.telephony.TelephonyProperties.PROPERTY_ICC_OPERATOR_NUMERIC, null); android.os.SystemProperties.set(com.android.internal.telephony.TelephonyProperties.PROPERTY_ICC_OPERATOR_ALPHA, null); android.os.SystemProperties.set(com.android.internal.telephony.TelephonyProperties.PROPERTY_ICC_OPERATOR_ISO_COUNTRY, null); recordsRequested = false; }
<START_MOD>public com.android.internal.telephony.IccCardApplicationStatus.AppState getState() { return mAppState; }<END_MOD>
<START_MOD>private void postCreate() { mListViewer.setLabelProvider(new org.eclipse.jface.viewers.LabelProvider()); mListViewer.setContentProvider(new com.android.sdkuilib.internal.repository.AddonSitesDialog.SourcesContentProvider()); if ((mUpdaterData) != null) { loadList(); } }<END_MOD>
<START_MOD>public void updatePrivateDns(android.net.Network network, com.android.server.connectivity.DnsManager.ResolvedPrivateDnsHostname resolvedName) { android.util.Slog.w(com.android.server.connectivity.DnsManager.TAG, (((("updatePrivateDns(" + network) + ", ") + resolvedName) + ")")); mPrivateDnsMap.put(network.netId, resolvedName); }<END_MOD>
@java.lang.Override public int hashCode() { int result = super.hashCode(); result = (31 * result) + (mDebuggable ? 1 : 0); result = (31 * result) + (mDebugJniBuild ? 1 : 0); result = (31 * result) + ((mPackageNameSuffix) != null ? mPackageNameSuffix.hashCode() : 0); result = (31 * result) + ((mVersionNameSuffix) != null ? mVersionNameSuffix.hashCode() : 0); result = (31 * result) + (mRunProguard ? 1 : 0); result = (31 * result) + (mZipAlign ? 1 : 0); result = (31 * result) + ((mSigningConfig) != null ? mSigningConfig.hashCode() : 0); return result; }
public boolean connect(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log((("connect(" + device) + ")")); <START_MOD>final android.bluetooth.IBluetoothHeadset service = mService; <END_MOD>if (((<START_MOD>service<END_MOD> != null) && (isEnabled())) && (isValidDevice(device))) { try { return <START_MOD>service<END_MOD>.connect(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return false; } } if (<START_MOD>service<END_MOD> == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG,   not attached to service return false; }
@java.lang.Override public void run() { while (isRunning()) { boolean <START_MOD>needed<END_MOD> = <START_MOD>sleepUntilNeeded<END_MOD>(); if (<START_MOD>!needed<END_MOD>) { continue; } boolean finalized = waitForFinalization(); if ((!finalized) && (!(dalvik.system.VMRuntime.getRuntime().isDebuggerActive()))) { java.lang.Object finalizedObject = java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingObject; if (finalizedObject != null) { java.lang.Daemons.FinalizerWatchdogDaemon.finalizerTimedOut(finalizedObject); break; } } } }
@javax.annotation.Nonnull public static com.android.<START_MOD>sched.util<END_MOD>.Version getVersion() { if ((com.android.jill.Jill.version) == null) { <START_MOD>try { com.android.jill.Jill.version = com.android.sched.util.Version.getVersion("jill", com.android.jill.Jill.class.getClassLoader()); } catch (<END_MOD>java.io.<START_MOD>IOException e) { java.lang.System.err.println(( to read version properties file:   + (e.getMessage()))); throw new java.lang.AssertionError(); } catch (com.android.sched.util.codec.ParsingException e) { java.lang.System.err.println(( to parse version properties file:   + (e.getMessage()))); throw new java.lang.AssertionError(); } } assert (com.android.jill.Jill.version)<END_MOD> != null; return com.android.jill.Jill.version; }
<START_MOD>@java.lang.Override protected void handleUpdateState(com.android.systemui.qs.tiles.BooleanState state, java.lang.Object arg) { getAdapter(); final android.graphics.drawable.Drawable mEnable = mContext.getDrawable(R.drawable.ic_qs_nfc_enabled); final android.graphics.drawable.Drawable mDisable = mContext.getDrawable(R.drawable.ic_qs_nfc_disabled); state.label = mContext.getString(R.string.quick_settings_nfc_label); if (shouldHide()) { android.graphics.drawable.Drawable icon = mDisable.mutate(); final int disabledColor = mContext.getColor(R.color.qs_tile_tint_unavailable); icon.setTint(disabledColor); state.icon = new com.android.systemui.qs.tiles.DrawableIcon(icon); state.label = new android.text.SpannableStringBuilder().append(state.label, new android.text.style.ForegroundColorSpan(disabledColor), SpannableStringBuilder.SPAN_INCLUSIVE_INCLUSIVE); return; } state.value = mAdapter.isEnabled(); final com.android.systemui.qs.tiles.DrawableIcon icon = new com.android.systemui.qs.tiles.DrawableIcon((state.value ? mEnable : mDisable)); state.icon = icon; state.minimalAccessibilityClassName = state.expandedAccessibilityClassName = android.widget.Switch.class.getName(); state.contentDescription = state.label; }<END_MOD>
<START_MOD>public com.android.tools.perflib.heap.analysis.SyntheticHeap addEdge(int nodeA, int nodeB) { com.android.tools.perflib.heap.Value link = new com.android.tools.perflib.heap.Value(mNodes[nodeA]); link.setValue(mNodes[nodeB]); mNodes[nodeA].addField(new com.android.tools.perflib.heap.Field(com.android.tools.perflib.heap.Type.OBJECT, ("f" + nodeB)), link); return this; }<END_MOD>
<START_MOD>public void testCross() { checkCrossFloat3Float3(); checkCrossFloat4Float4(); }<END_MOD>
public void <START_MOD>testFormatDouble_scientificNotationMinusZero<END_MOD>() throws java.lang.Exception { final java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(java.util.Locale.US); java.text.DecimalFormat df = new java.text.DecimalFormat("00.0#E0", dfs); <START_MOD>assertEquals( -0.0<END_MOD> "-00.0E0"<START_MOD>, df.format((-0.0))<END_MOD>); df = new java.text.DecimalFormat("##0.0E0", dfs); <START_MOD>assertEquals( -0.0<END_MOD> "-0.0E0"<START_MOD>, df.format((-0.0))<END_MOD>); df = new java.text.DecimalFormat("#.0E0", dfs); <START_MOD>assertEquals( -0.0<END_MOD> "-.0E0"<START_MOD>, df.format((-0.0))<END_MOD>); df = new java.text.DecimalFormat("0.#E0", dfs); <START_MOD>assertEquals( -0.0<END_MOD> "-0E0"<START_MOD>, df.format((-0.0))<END_MOD>); df = new java.text.DecimalFormat(".0E0", dfs); <START_MOD>assertEquals( -0.0<END_MOD> "-.0E0"<START_MOD>, df.format((-0.0))<END_MOD>); }
public boolean isVideoTelephonyAvailable() { return isVideoTelephonyAvailable(<START_MOD>SubscriptionManager.DEFAULT_SUBSCRIPTION_ID<END_MOD>); }
<START_MOD>@java.lang.SuppressWarnings("NonBooleanMethodNameMayNotStartWithQuestion") public void hasVersionName(java.lang.String versionName) throws com.android.ide.common.process.ProcessException { java.io.File apk = getSubject(); com.android.ide.common.process.ProcessExecutor processExecutor = new com.android.ide.common.process.DefaultProcessExecutor(new com.android.utils.StdLogger(StdLogger.Level.ERROR)); com.android.builder.core.ApkInfoParser parser = new com.android.builder.core.ApkInfoParser(com.android.build.gradle.integration.common.utils.SdkHelper.getAapt(), processExecutor); com.android.builder.core.ApkInfoParser.ApkInfo apkInfo = parser.parseApk(apk); java.lang.String actualVersionName = apkInfo.getVersionName(); if (actualVersionName == null) { failWithRawMessage("Unable to query %s for versionName", getDisplaySubject()); } if (!(apkInfo.getVersionName().equals(versionName))) { failWithBadResults("has versionName", versionName, "is", actualVersionName); } }<END_MOD>
@java.lang.Override public org.eclipse.swt.graphics.Image getImage(java.lang.Object element) { com.android.sdkuilib.internal.repository.icons.ImageFactory imgFactory = <START_MOD>mImpl.<END_MOD>mUpdaterData.getImageFactory(); if (imgFactory != null) { if ((mColumn) == (<START_MOD>mImpl.<END_MOD>mColumnName)) { if (element instanceof com.android.sdkuilib.internal.repository.core.PkgCategory) { return imgFactory.getImageForObject(((com.android.sdkuilib.internal.repository.core.PkgCategory) (element)).getIconRef()); } else if (element instanceof com.android.sdkuilib.internal.repository.core.PkgItem) { return imgFactory.getImageForObject(((com.android.sdkuilib.internal.repository.core.PkgItem) (element)).getMainPackage()); } return imgFactory.getImageForObject(element); } else if (((mColumn) == (<START_MOD>mImpl.<END_MOD>mColumnStatus)) && (element instanceof com.android.sdkuilib.internal.repository.core.PkgItem)) { com.android.sdkuilib.internal.repository.core.PkgItem pi = ((com.android.sdkuilib.internal.repository.core.PkgItem) (element)); switch (pi.getState()) { case INSTALLED : if (pi.hasUpdatePkg()) { return imgFactory.getImageByName(<START_MOD>PackagesPageIcons<END_MOD>.ICON_PKG_UPDATE); } else { return imgFactory.getImageByName(<START_MOD>PackagesPageIcons<END_MOD>.ICON_PKG_INSTALLED); } case NEW : java.lang.Package p = pi.getMainPackage(); if ((p != null) && (p.hasCompatibleArchive())) { return imgFactory.getImageByName(<START_MOD>PackagesPageIcons<END_MOD>.ICON_PKG_NEW); } else { return imgFactory.getImageByName(<START_MOD>PackagesPageIcons<END_MOD>.ICON_PKG_INCOMPAT); } } } } return super.getImage(element); }
<START_MOD>public static final int getValue(int arg1) { class LocalClass { public int getValue() { com.android.jack.java8.lambda.test042.I i = () -> com.android.jack.java8.lambda.test042.Tests.move(() -> arg1); return i.getValue(); } } return new LocalClass().getValue(); }<END_MOD>
public static void main(java.lang.String[] args) { Main.assertEquals(10, Main.div()); Main.assertEquals(100, Main.innerDiv()); Main.assertEquals(<START_MOD>18900, Main.innerMul()); Main.assertEquals(105, Main.divByA(2, 0)); Main.assertEquals(<END_MOD>12, Main.arrayLength(new int[]{ 4, 8 })); <START_MOD>Main.assertEquals(21, Main.divAndIntrinsic(new int[]{ 4, -2, 8, -3 <END_MOD>}<START_MOD>)); }<END_MOD>
private static <START_MOD>com.android.sdklib.util.Pair<org.eclipse.core.resources.IFile, org.eclipse.jface.text.IRegion> findIdInFolder(org.eclipse.core.resources.IContainer f, java.lang.String id) { try { for (<END_MOD>org.eclipse.core.resources.IResource <START_MOD>resource : f.members()) { if (((resource.exists()) && (!(resource.isDerived()))) && (resource instanceof org.eclipse.core.resources.IFile)) { org.eclipse.core.resources.IFile file = ((org.eclipse.core.resources.IFile) (resource)); if (<END_MOD>com.android.ide.eclipse.adt.<START_MOD>AndroidConstants.EXT_XML.equals(file.getFileExtension())) { com.android.sdklib.util.Pair<org.eclipse.core.resources.IFile, org.eclipse.jface.text.IRegion> target = com.android.ide.eclipse.adt.<END_MOD>internal.<START_MOD>editors.xml.Hyperlinks.findIdInXml(id, file); if (target != null) { return target; } } } } } catch (org.eclipse.core.runtime.CoreException e<END_MOD>) { com.android.ide.eclipse.adt.<START_MOD>AdtPlugin.log(e, ""); } return<END_MOD> null<START_MOD>; }<END_MOD>
@com.android.internal.annotations.VisibleForTesting public static android.telephony.data.DataProfile createDataProfile(com.android.internal.telephony.dataconnection.ApnSetting apn, int profileId) { int profileType; <START_MOD>int bearerBitmap = 0; <END_MOD>if ((apn.<START_MOD>networkTypeBitmask) != 0) { bearerBitmap = android.telephony.ServiceState.convertNetworkTypeBitmaskToBearerBitmask(apn.networkTypeBitmask); } else { bearerBitmap = apn.<END_MOD>bearerBitmask<START_MOD>; } if (bearerBitmap<END_MOD> == 0) { profileType = android.telephony.data.DataProfile.TYPE_COMMON; } else if (android.telephony.ServiceState.bearerBitmapHasCdma(<START_MOD>bearerBitmap<END_MOD>)) { profileType = android.telephony.data.DataProfile.TYPE_3GPP2; } else { profileType = android.telephony.data.DataProfile.TYPE_3GPP; } return new android.telephony.data.DataProfile(profileId, apn.apn, apn.protocol, apn.authType, apn.user, apn.password, profileType, apn.maxConnsTime, apn.maxConns, apn.waitTime, apn.carrierEnabled, apn.typesBitmap, apn.roamingProtocol, <START_MOD>bearerBitmap<END_MOD>, apn.mtu, apn.mvnoType, apn.mvnoMatchData, apn.modemCognitive); }
public void testHardcodedAliases() throws java.lang.Exception { final java.io.ByteArrayOutputStream errBuffer = new java.io.ByteArrayOutputStream(); java.io.PrintStream out = new java.io.PrintStream(errBuffer); for (int i = 0; i < (HARDCODED_ALIASES.length); i++) { try { assertEquals(HARDCODED_ALIASES[i][1]<START_MOD>.toUpperCase(java.util.Locale.US)<END_MOD>, org.apache.harmony.security.utils.AlgNameMapper.map2AlgName(HARDCODED_ALIASES[i][0])<START_MOD>.toUpperCase(java.util.Locale.US)<END_MOD>); assertEquals(HARDCODED_ALIASES[i][0], org.apache.harmony.security.utils.AlgNameMapper.map2OID(HARDCODED_ALIASES[i][1])); assertEquals(HARDCODED_ALIASES[i][1]<START_MOD>.toUpperCase(java.util.Locale.US)<END_MOD>, org.apache.harmony.security.utils.AlgNameMapper.getStandardName(HARDCODED_ALIASES[i][1].toUpperCase(java.util.Locale.US))); assertTrue(org.apache.harmony.security.utils.AlgNameMapper.isOID(HARDCODED_ALIASES[i][0])); } catch (java.lang.Throwable e) { out.append((( encountered checking   + (HARDCODED_ALIASES[i][1])) + "\n")); e.printStackTrace(out); } } out.flush(); if ((errBuffer.size()) > 0) { throw new java.lang.Exception((( encountered: + (errBuffer.toString())) + "\n\n")); } }
<START_MOD>public void check(java.security.cert.X509Certificate[] chain) throws java.security.cert.CertificateException { for (java.security.cert.X509Certificate cert : chain) { checkCert(cert); } }<END_MOD>
<START_MOD>@org.gradle.api.tasks.InputFile public java.io.File getAdbExe() { return adbExe; }<END_MOD>
@org.junit.After public void tearDown() throws java.<START_MOD>lang.Exception<END_MOD> { <START_MOD>com.android.bluetooth.TestUtils.stopService(mServiceRule<END_MOD>, com.android.bluetooth.hfp.HeadsetService.class); <START_MOD>mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); mStateMachines.clear(); mCurrentDevice = null; java.lang.reflect.Method method = com.android.bluetooth.hfp.HeadsetObjectsFactory.class.getDeclaredMethod("setInstanceForTesting"<END_MOD>, <START_MOD>com.android.bluetooth.hfp.HeadsetObjectsFactory.class); method.setAccessible(true); method.invoke(null<END_MOD>, <START_MOD>((com.android.bluetooth.hfp.HeadsetObjectsFactory) (null))); mObjectsFactory = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); mAdapterService<END_MOD> = null; }
public android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int keyType) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) { throw new java.lang.RuntimeException( error: Subscriber Info is null } int subId = getSubId(android.telephony.SubscriptionManager.getDefaultDataSubscriptionId()); if ((keyType != (android.telephony.TelephonyManager.KEY_TYPE_EPDG)) && (keyType != (android.telephony.TelephonyManager.KEY_TYPE_WLAN))) { throw new java.lang.IllegalArgumentException( error: Invalid key type } android.telephony.ImsiEncryptionInfo imsiEncryptionInfo = info.getCarrierInfoForImsiEncryption(subId, keyType, mContext.getOpPackageName()); if ((imsiEncryptionInfo == null) && (isImsiEncryptionRequired(subId, keyType))) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG,   error: key is required but not found throw new java.lang.RuntimeException( error: key is required but not found } return imsiEncryptionInfo; } catch (android.os.RemoteException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ( RemoteException + ex)); <START_MOD>} catch (<END_MOD>java.lang.NullPointerException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ( NullPointerException + ex)); <START_MOD>} return null; }<END_MOD>
private static void sanityCheck(android.database.sqlite.SQLiteDatabase db, int fromVersion) { android.database.Cursor c1 = db.query("audio_meta", new java.lang.String[]{ "count(*)" }, null, null, null, null, null); android.database.Cursor c2 = db.query("audio_meta", new java.lang.String[]{   _data) }, null, null, null, null, null); <START_MOD>try { <END_MOD>c1.moveToFirst(); c2.moveToFirst(); int num1 = c1.getInt(0); int num2 = c2.getInt(0); <START_MOD>if (num1 != num2) { android.util.Log.e(com.android.providers.media.MediaProvider.TAG, (((((( column is not unique while upgrading +   from schema   + fromVersion) +   :   + num1) + "/") + num2)); db.execSQL( FROM audio_meta; } } finally { libcore.io.IoUtils.closeQuietly(<END_MOD>c1<START_MOD>); libcore.io.IoUtils.closeQuietly(<END_MOD>c2<START_MOD>); } }<END_MOD>
<START_MOD>private boolean checkCallersLocationPermission(java.lang.String pkgName) { boolean stat = false; if (((mWifiPermissionsWrapper.getUidPermission(Manifest.permission.ACCESS_FINE_LOCATION)) == (android.content.pm.PackageManager.PERMISSION_GRANTED)) && (checkAppOpAllowed(AppOpsManager.OP_FINE_LOCATION, pkgName))) { stat = true; } if (((mWifiPermissionsWrapper.getUidPermission(Manifest.permission.ACCESS_COARSE_LOCATION)) == (android.content.pm.PackageManager.PERMISSION_GRANTED)) && (checkAppOpAllowed(AppOpsManager.OP_COARSE_LOCATION, pkgName))) { stat = true; } if (isLegacyForeground(pkgName)) { stat = true; } if (com.android.server.wifi.util.WifiPermissionsUtil.VERBOSE_LOG) { android.util.Log.e(com.android.server.wifi.util.WifiPermissionsUtil.TAG, ("checkCallersLocationPermission " + stat)); } if (!stat) { android.util.Log.e(com.android.server.wifi.util.WifiPermissionsUtil.TAG, ("Permission denial: Need ACCESS_COARSE_LOCATION or " + "ACCESS_FINE_LOCATION permission to get scan results")); } return stat; }<END_MOD>
@java.lang.Override public void visitBlock(com.android.jack.dx.ssa.SsaBasicBlock b, com.android.jack.dx.ssa.SsaBasicBlock parent) { if (<START_MOD>b.isEmptyGoto<END_MOD>()) { java.util.BitSet preds = ((java.util.BitSet) (b.getPredecessors().clone())); for (int i = preds.nextSetBit(0); i >= 0; i = preds.nextSetBit((i + 1))) { com.android.jack.dx.ssa.SsaBasicBlock pb = blocks.get(i); pb.replaceSuccessor(b.getIndex(), b.getPrimarySuccessorIndex()); } } }
public void getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<<START_MOD>com.android.internal.telephony.uicc.asn1.Asn1Node<END_MOD>> callback, android.os.Handler handler) { <START_MOD>java.lang.String response; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_GET_EUICC_INFO_1).build().toHex()); <END_MOD>}<START_MOD> return com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponse(response); }<END_MOD>
<START_MOD>private java.lang.String constructName() { if (isEmulator()) { java.lang.String avdName = getAvdName(); if (avdName != null) { return java.lang.String.format("%s [%s]", avdName, getSerialNumber()); } else { java.lang.String manufacturer = cleanupStringForDisplay(getProperty(com.android.ddmlib.Device.DEVICE_MANUFACTURER_PROPERTY)); java.lang.String model = cleanupStringForDisplay(getProperty(com.android.ddmlib.Device.DEVICE_MODEL_PROPERTY)); java.lang.StringBuilder sb = new java.lang.StringBuilder(20); if (manufacturer != null) { sb.append(manufacturer); sb.append(com.android.ddmlib.Device.SEPARATOR); } if (model != null) { sb.append(model); sb.append(com.android.ddmlib.Device.SEPARATOR); } sb.append(getSerialNumber()); } } return getSerialNumber(); }<END_MOD>
<START_MOD>public java.util.List<com.android.ahat.heapdump.FieldValue> getValues() { return mFieldValues; }<END_MOD>
<START_MOD>public void onClick(android.content.DialogInterface dialog, int which) { if ((dialog == (mClearLogConfirmationDialog)) && (which == (android.app.AlertDialog.BUTTON_POSITIVE))) { getContentResolver().delete(Calls.CONTENT_URI, null, null); startQuery(); } }<END_MOD>
<START_MOD>private java.lang.String getMD5(java.lang.String str) { try { java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5"); byte[] array = md.digest(str.getBytes()); java.lang.StringBuffer sb = new java.lang.StringBuffer(); for (int i = 0; i < (array.length); ++i) { sb.append(java.lang.Integer.toHexString((((array[i]) & 255) | 256)).substring(1, 3)); } return sb.toString(); } catch (java.security.NoSuchAlgorithmException e) { throw new java.lang.RuntimeException("Error generating MD5 hash.", e); } }<END_MOD>
<START_MOD>@java.lang.Override public void run() { com.android.ide.eclipse.adt.AdtUtils.closeEditors(project); }<END_MOD>
private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { <START_MOD>if ((prevState != state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.A2DP_SINK); } <END_MOD>android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dpSink.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); mContext.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); log(((((( state   + device) +     + prevState) + "->") + state)); }
public <START_MOD>void<END_MOD> <START_MOD>dispose<END_MOD>() { <START_MOD>org.eclipse.ui.IPartService service = mWindow.getPartService(); if (service != null) { service.removePartListener(this); }<END_MOD> com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutWindowCoordinator.<START_MOD>sCoordinators.remove(mWindow)<END_MOD>; }
@org.junit.Test public void compileWithAnnotationProcessorNoAuto_processorPath() throws java.lang.Exception { <START_MOD>java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> exclude = com.android.sched.util.collect.Lists.<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>create(com.android.jack.test.toolchain.JillBasedToolchain.class); <END_MOD>com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class<START_MOD>, exclude<END_MOD>); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorPath(processors.getPath()); jack.setAnnotationProcessorClasses(java.util.Collections.singletonList(com.android.jack.annotation.processor.sample.processors.ResourceAnnotationProcessor.class.getName())); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(jackOut); libOut.getFile(FileType.RSC, new com.android.sched.vfs.VPath("rscGeneratedFile0", '/')); try { libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath("Annotated2Duplicated", '/')); junit.framework.Assert.fail(); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { } }
<START_MOD>public static com.android.apksig.internal.util.Pair<java.util.List<com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignerConfig>, java.util.Map<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm, byte[]>> computeContentDigests(com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd, java.util.List<com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignerConfig> signerConfigs) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.SignatureException { if (signerConfigs.isEmpty()) { throw new java.lang.IllegalArgumentException("No signer configs provided. At least one is required"); } java.util.Set<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm> contentDigestAlgorithms = new java.util.HashSet<>(1); for (com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignerConfig signerConfig : signerConfigs) { for (com.android.apksig.internal.apk.SigningBlockScheme.SignatureAlgorithm signatureAlgorithm : signerConfig.signatureAlgorithms) { contentDigestAlgorithms.add(signatureAlgorithm.getContentDigestAlgorithm()); } } java.util.Map<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm, byte[]> contentDigests; try { contentDigests = com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.computeContentDigests(contentDigestAlgorithms, beforeCentralDir, centralDir, eocd); } catch (java.io.IOException e) { throw new java.io.IOException("Failed to read APK being signed", e); } catch (java.security.DigestException e) { throw new java.security.SignatureException("Failed to compute digests of APK", e); } return com.android.apksig.internal.util.Pair.of(signerConfigs, contentDigests); }<END_MOD>
public void destroy() { validate();<START_MOD> if (mIsProcessContext) { return; }<END_MOD> nContextFinish(); if ((mIncCon) != 0) { nIncContextFinish(); nIncContextDestroy(); mIncCon = 0; } nContextDeinitToClient(mContext); mMessageThread.mRun = false; try { mMessageThread.join(); } catch (java.lang.InterruptedException e) { } nContextDestroy(); nDeviceDestroy(mDev); if ((mIncDev) != 0) { nIncDeviceDestroy(mIncDev); mIncDev = 0; } mDev = 0; }
<START_MOD>private void notify(android.app.Notification notification) { mNotificationManager.notifyAsUser(null, com.android.networkrecommendation.WifiNotificationController.ICON_NETWORKS_AVAILABLE, notification, UserHandle.ALL); }<END_MOD>
public void fchown(java.io.FileDescriptor fd, int uid, int gid) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
private void TestHalf4(android.<START_MOD>renderscript<END_MOD>.RenderScript RS, com.android.rs.test.ScriptC_fp16 s, int nDims) { initializeGlobals(RS, s, android.<START_MOD>renderscript<END_MOD>.Element.F16_4(RS), nDims); s.forEach_set_kernel_half4(alloc); s.invoke_verify_half4(); initializeGlobals(RS, s, android.<START_MOD>renderscript<END_MOD>.Element.F16_4(RS), nDims); s.invoke_set_half4(); s.forEach_verify_kernel_half4(alloc); }
<START_MOD>public void write() throws java.io.IOException { int len = computeSize(); byte[] buffer = new byte[len]; java.lang.System.arraycopy(com.android.builder.png.PngWriter.SIGNATURE, 0, buffer, 0, 8); int index = writeChunk(mIhdr, buffer, 8); for (com.android.builder.png.Chunk chunk : mChunks) { index = writeChunk(chunk, buffer, index); } writeChunk(com.android.builder.png.PngWriter.sIend, buffer, index); com.google.common.io.Files.write(buffer, mToFile); }<END_MOD>
@java.lang.Override public boolean notifyInstantiation(@javax.annotation.Nonnull java.lang.Object object, @javax.annotation.Nonnegative long size, int count, @javax.annotation.Nonnull com.android.sched.util.log.EventType notUsed<START_MOD>, @javax.annotation.CheckForNull java.lang.StackTraceElement site<END_MOD>) { try { getTracer().getStatistic(com.android.sched.util.log.tracer.watcher.TotalAllocationWatcher.ALLOCATIONS).recordAllocation(size); } catch (java.lang.RuntimeException e) { } return false; }
<START_MOD>public void executeExpectingFailure(java.lang.String... tasks) { execute(java.util.Collections.singletonList((("-P" + (com.android.builder.model.AndroidProject.PROPERTY_INVOKED_FROM_IDE)) + "=true")), false, false, com.android.build.gradle.integration.common.fixture.GradleTestProject.ExpectedBuildResult.FAILURE, tasks); }<END_MOD>
private boolean runCorrectnessPatterns(android.<START_MOD>renderscript<END_MOD>.RenderScript RS, com.android.rs.test.ScriptC_reduce s) { boolean pass = true; pass &= patternDuplicateAnonymousResult(RS, s); pass &= patternInterleavedReduce(RS, s); pass &= patternRedundantGet(RS, s); return pass; }
<START_MOD>private<END_MOD> static void arraycopy(int[] src, int srcPos, int[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException( == null } if (dst == null) { throw new java.lang.NullPointerException( == null } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) +   srcPos= + srcPos) +   dst.length= + (dst.length)) +   dstPos= + dstPos) +   length= + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_INT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyIntUnchecked(src, srcPos, dst, dstPos, length); } }
@java.lang.Override public void onClick(android.view.View v) { if (v == (mButton)) { if ((mFolderSelector.getVisibility()) == (android.view.View.VISIBLE)) { if (mIsFolderNamerShowing) { completeOrCancelFolderNaming(false); } else { mSaveToHomeScreen = false; switchToDefaultView(true); } } else if (save()) { finish(); } } else if (v == (mCancelButton)) { if (mIsFolderNamerShowing) { completeOrCancelFolderNaming(true); } else if ((mFolderSelector.getVisibility()) == (android.view.View.VISIBLE)) { switchToDefaultView(false); } else { finish(); } } else if (v == (mFolderCancel)) { completeOrCancelFolderNaming(true); } else if (v == (mAddNewFolder)) { setShowFolderNamer(true); mFolderNamer.setText(R.string.new_folder); mFolderNamer.requestFocus(); mAddNewFolder.setVisibility(View.GONE); mAddSeparator.setVisibility(View.GONE); android.view.inputmethod.InputMethodManager imm = getInputMethodManager(); imm.focusIn(mListView); imm.showSoftInput(mFolderNamer, InputMethodManager.SHOW_IMPLICIT); } else if (v == (mRemoveLink)) { if (!(mEditingExisting)) { throw new java.lang.AssertionError(( button should not be shown for +   new bookmarks } long id = mMap.getLong(BrowserContract.Bookmarks._ID); createHandler(); android.os.Message msg = android.os.Message.obtain(mHandler, com.android.browser.AddBookmarkPage.BOOKMARK_DELETED); com.android.browser.BookmarkUtils.displayRemoveBookmarkDialog(id, mTitle.getText().toString(), this, msg<START_MOD>, mEditingFolder); } }<END_MOD>
<START_MOD>@java.lang.Override public boolean needWriteSynchronization() { return (outputVDir) instanceof com.android.sched.vfs.SequentialOutputVDir; }<END_MOD>
@javax.annotation.Nonnull static com.android.jack.shrob.spec.NameSpecification name(java.lang.String name<START_MOD>, @javax.annotation.Nonnull com.android.jack.shrob.proguard.GrammarActions.NameFormat separator<END_MOD>) { assert name != null; java.lang.String transformedName = ("^" + (com.android.jack.shrob.proguard.GrammarActions.convertNameToPattern(name<START_MOD>, separator<END_MOD>))) + "$"; java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(transformedName); return new com.android.jack.shrob.spec.NameSpecification(pattern); }
public void <START_MOD>testGetGroupingSize<END_MOD>() { java.text.DecimalFormat df = new java.text.DecimalFormat("###0.##"); assertEquals( unset size 0, df.getGroupingSize()); df = new java.text.DecimalFormat("#,##0.##"); assertEquals( set size 3, df.getGroupingSize()); df = new java.text.DecimalFormat("#,###,###0.##"); assertEquals( multiple set size 4, df.getGroupingSize()); }
private void getImsService() throws com.android.ims.ImsException { if (com.android.internal.telephony.imsphone.ImsPhoneCallTracker.DBG) log("getImsService"); mImsManager = com.android.ims.ImsManager.getInstance(mPhone.getContext(), mPhone.getPhoneId()); mImsManager.addNotifyStatusChangedCallback(<START_MOD>mNotifyStatusChangedCallback<END_MOD>); <START_MOD>mNotifyStatusChangedCallback<END_MOD>.<START_MOD>notifyStatusChanged<END_MOD>(); }
public static java.lang.String retrieveFieldValueName(java.lang.String id, int field, int value, int style, java.util.Locale locale) { return <START_MOD>sun.util.locale.provider.CalendarDataUtility.getNames(id, field, style, locale)[value]<END_MOD>; }
<START_MOD>@java.lang.Override public java.io.File getInstallFolder(java.lang.String osSdkRoot, com.android.sdklib.SdkManager sdkManager) { java.io.File samplesRoot = new java.io.File(osSdkRoot, com.android.sdklib.SdkConstants.FD_SAMPLES); for (com.android.sdklib.IAndroidTarget target : sdkManager.getTargets()) { if ((target.isPlatform()) && (target.getVersion().equals(mVersion))) { java.lang.String p = target.getPath(IAndroidTarget.SAMPLES); java.io.File f = new java.io.File(p); if (f.isDirectory()) { if (f.getParentFile().equals(samplesRoot)) { return f; } } } } java.io.File folder = new java.io.File(samplesRoot, java.lang.String.format("android-%s", getVersion().getApiString())); for (int n = 1; folder.exists(); n++) { folder = new java.io.File(samplesRoot, java.lang.String.format("android-%s_%d", getVersion().getApiString(), n)); } return folder; }<END_MOD>
protected void showError(int error) {<START_MOD> if ((mErrorDialog) != null) { mErrorDialog.setMessage(getResources().getString(error)); mErrorDialog.show(); } else { mErrorDialog =<END_MOD> new android.app.AlertDialog.Builder(this).setTitle(R.string.proxy_error).setMessage(error).setPositiveButton(R.string.proxy_error_dismiss, null).show(); }<START_MOD> }<END_MOD>
public java.io.FileDescriptor[] pipe() throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
<START_MOD>public boolean isInsecureTrafficPermitted() { synchronized(this) { return mInsecureTrafficPermitted; } }<END_MOD>
public void destroy() { clearTextEntry(false); if ((mListBoxDialog) != null) { mListBoxDialog.dismiss(); mListBoxDialog = null; } if ((<START_MOD>mSavePasswordDialog) != null) { mSavePasswordDialog.dismiss(); mSavePasswordDialog = null; } if ((<END_MOD>mWebViewCore) != null) { mCallbackProxy.setWebViewClient(null); mCallbackProxy.setWebChromeClient(null); synchronized(this) { android.webkit.WebViewCore webViewCore = mWebViewCore; mWebViewCore = null; webViewCore.destroy(); } mPrivateHandler.removeCallbacksAndMessages(null); mCallbackProxy.removeCallbacksAndMessages(null); synchronized(mCallbackProxy) { mCallbackProxy.notify(); } } if ((mNativeClass) != 0) { nativeDestroy(); mNativeClass = 0; } }
@java.lang.Deprecated public synchronized void setPluginsEnabled(boolean flag) { <START_MOD>if (flag == true) { <END_MOD>setPluginState(android.webkit.WebSettings.PluginState.ON); }<START_MOD> else { setPluginState(android.webkit.WebSettings.PluginState.OFF); } }<END_MOD>
public void snapshotJackFilesModificationDate() { java.util.<START_MOD>Iterator<END_MOD><<START_MOD>com.android.sched.vfs.InputVFile> jayceIter = getJayceIterator(); while (jayceIter.hasNext()) { com.android.sched.vfs.InputVFile jayceFile = jayceIter.next(); com.android.sched.util.location.FileLocation location = ((com.android.sched.util.location.FileLocation) (jayceFile.getLocation())); <END_MOD>java.io.File <START_MOD>file<END_MOD> = new java.io.File<START_MOD>(location.getPath<END_MOD>()); fileModificationDate.put(<START_MOD>file<END_MOD>.getAbsolutePath(), java.lang.Long.valueOf(<START_MOD>jayceFile<END_MOD>.<START_MOD>getLastModified<END_MOD>())); } }
public void writeBlobTo(@com.android.annotations.NonNull java.io.File blobRootFolder, @com.android.annotations.NonNull com.android.ide.common.res2.MergeConsumer<I> consumer) throws com.android.ide.common.res2.MergingException { javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance(); factory.setNamespaceAware(true); factory.setValidating(false); factory.setIgnoringComments(true); javax.xml.parsers.DocumentBuilder builder; try { builder = factory.newDocumentBuilder(); org.w3c.dom.Document document = builder.newDocument(); org.w3c.dom.Node rootNode = document.createElement(com.android.ide.common.res2.DataMerger.NODE_MERGER); <START_MOD>com.android.ide.common.res2.NodeUtils.addAttribute(document, rootNode, null, com.android.ide.common.res2.DataMerger.ATTR_VERSION, java.lang.Integer.toString(com.android.ide.common.res2.DataMerger.MERGE_BLOB_VERSION)); <END_MOD>document.appendChild(rootNode); for (S dataSet : mDataSets) { org.w3c.dom.Node dataSetNode = document.createElement(com.android.ide.common.res2.DataMerger.NODE_DATA_SET); rootNode.appendChild(dataSetNode); dataSet.appendToXml(dataSetNode, document, consumer); } java.lang.String content = com.android.ide.common.xml.XmlPrettyPrinter.prettyPrint(document, true); try { createDir(blobRootFolder); } catch (java.io.IOException ioe) { throw new com.android.ide.common.res2.MergingException(ioe).setFile(blobRootFolder); } java.io.File file = new java.io.File(blobRootFolder, com.android.ide.common.res2.DataMerger.FN_MERGER_XML); try { com.google.common.io.Files.write(content, file, Charsets.UTF_8); } catch (java.io.IOException ioe) { throw new com.android.ide.common.res2.MergingException(ioe).setFile(file); } } catch (javax.xml.parsers.ParserConfigurationException e) { throw new com.android.ide.common.res2.MergingException(e); } }
<START_MOD>public void setDefaultPageCount(int pageCount) { this.DEFAULT_PAGE_COUNT = pageCount; }<END_MOD>
@javax.annotation.Nonnull public <T extends com.android.jack.ir.ast.JStatement> T cloneStatement(@javax.annotation.Nonnull T stmt) { <START_MOD>init<END_MOD>(); T statement = internalCloneStatement(stmt); fixGotos(); <START_MOD>fixMarkers<END_MOD>(); return statement; }
<START_MOD>public void testIlogb() { checkIlogbFloat(); checkIlogbFloat2(); checkIlogbFloat3(); checkIlogbFloat4(); }<END_MOD>
@java.lang.Override public void getCurrentCalls(android.os.Message result) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_GET_CURRENT_CALLS, result<START_MOD>, mRILDefaultWorkSource<END_MOD>); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(); if (radioProxy != null) { addRequest(rr); try { radioProxy.getCurrentCalls(rr.mSerial); } catch (java.lang.Exception e) { riljLoge("getCurrentCalls", e); rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); decrementWakeLock(rr); rr.release(); } } else { rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); rr.release(); } }
public int readInt() {<START_MOD> synchronized(fileLock) { file.checkNotClosed(); libcore.io.NioBufferIterator.checkReadBounds(position, size, SizeOf.INT);<END_MOD> int result = libcore.io.Memory.peekInt(((address) + (position)), swap); position += SizeOf.INT; return result; }<START_MOD> }<END_MOD>
public void testAssistantStackZOrder() throws java.lang.Exception { if ((!(supportsPip())) || (!(supportsSplitScreenMultiWindow()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ENTER_PIP, "true"); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.PINNED_STACK_ID); mAmWmState.assertContainsStack( contain pinned stack. android.server.cts.PINNED_STACK_ID); <START_MOD>launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_DISPLAY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack( contain fullscreen stack. android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack( contain docked stack. android.server.cts.DOCKED_STACK_ID); enableAssistant(); <END_MOD>launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); assertAssistantStackExists(); mAmWmState.assertFrontStack( stack should be on top. android.server.cts.PINNED_STACK_ID); mAmWmState.assertFocusedStack( stack should be focused. android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }
public void test() throws java.lang.Exception { assertEquals(("" + (((((( Error: Colon (:) must be escaped in .property files<START_MOD>; use C<END_MOD> [PropertyEscape] + "windows.dir=C:\\my\\path\\to\\sdk\n") +   ~ +   Error: Windows file separators ( must be escaped ( use C: [PropertyEscape] + "windows.dir=C:\\my\\path\\to\\sdk\n") +   ~~~~~~~~~~~~~~~~~ +   errors,   warnings lintProject("local.properties=>local.properties")); }
@javax.annotation.Nonnull private java.util.Set<java.lang.String> getInternalFileNamesToCompile() { if (<START_MOD>needFullBuild<END_MOD>()) { return fileNamesOnCmdLine; } java.util.Map<java.lang.String, java.util.Set<java.lang.String>> typeRecompileDependencies = typeDependencies.getRecompileDependencies(); java.util.Set<java.lang.String> filesToRecompile = new java.util.HashSet<java.lang.String>(); filesToRecompile.addAll(addedFileNames); filesToRecompile.addAll(modifiedFileNames); addDependencies(filesToRecompile, typeRecompileDependencies, modifiedFileNames); addDependencies(filesToRecompile, typeRecompileDependencies, deletedFileNames); tracer.getStatistic(com.android.jack.incremental.IncrementalInputFilter.RECOMPILED_FILES).incValue(filesToRecompile.size()); return filesToRecompile; }
<START_MOD>private<END_MOD> static void arraycopy(char[] src, int srcPos, char[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException( == null } if (dst == null) { throw new java.lang.NullPointerException( == null } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) +   srcPos= + srcPos) +   dst.length= + (dst.length)) +   dstPos= + dstPos) +   length= + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_CHAR_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyCharUnchecked(src, srcPos, dst, dstPos, length); } }
public void write(java.io.DataOutputStream out) throws java.io.IOException { final java.util.HashMap<com.android.server.net.NetworkIdentitySet, java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key>> keysByIdent = com.google.android.collect.Maps.newHashMap(); for (com.android.server.net.NetworkStatsCollection.Key key : mStats.keySet()) { java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(key.ident); if (keys == null) { keys = com.google.android.collect.Lists.newArrayList(); keysByIdent.put(key.ident, keys); } keys.add(key); } out.writeInt(com.android.server.net.NetworkStatsCollection.FILE_MAGIC); out.writeInt(com.android.server.net.NetworkStatsCollection.<START_MOD>VERSION_WITH_DEFAULT_NETWORK<END_MOD>); out.writeInt(keysByIdent.size()); for (com.android.server.net.NetworkIdentitySet ident : keysByIdent.keySet()) { final java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(ident); ident.writeToStream(out); out.writeInt(keys.size()); for (com.android.server.net.NetworkStatsCollection.Key key : keys) { final android.net.NetworkStatsHistory history = mStats.get(key); out.writeInt(key.uid); out.writeInt(key.set); out.writeInt(key.tag); <START_MOD>out.writeInt(key.defaultNetwork); <END_MOD>history.writeToStream(out); } } out.flush(); }
<START_MOD>public static void accesMethod() { java.lang.String shouldFail = SemiPrivate.privvyMethod(); java.lang.System.out.println(("Got " + shouldFail)); }<END_MOD>
@java.lang.Override protected boolean stop() { android.util.Log.<START_MOD>i<END_MOD>(com.android.bluetooth.hearingaid.HearingAidService.TAG, "stop()"); if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidService.TAG,   called before start() return true; } setActiveDevice(null); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(null); unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; <START_MOD>mHearingAidNativeInterface.cleanup(); mHearingAidNativeInterface = null; synchronized(mStateMachines) { for (com.android.bluetooth.hearingaid.HearingAidStateMachine sm : mStateMachines.values()) { sm.doQuit(); sm.cleanup(); } mStateMachines.clear(); } <END_MOD>if ((mStateMachinesThread) != null) { mStateMachinesThread.quitSafely(); mStateMachinesThread = null; } <START_MOD>mHearingAidNativeInterface = null; <END_MOD>mAdapterService = null; mAdapter = null; return true; }
<START_MOD>@java.lang.Override public void testFailed(com.android.builder.testing.TestFailure status, com.android.ddmlib.testrunner.TestIdentifier test, java.lang.String trace) { if ((mLogger) != null) { mLogger.warning(java.lang.String.format("\n%1$s > %2$s \u001b[31mFAILED \u001b[0m", test.getClassName(), test.getTestName())); mLogger.warning(getModifiedTrace(trace)); } super.testFailed(status, test, trace); }<END_MOD>
public void postForkChild(int debugFlags, java.lang.String instructionSet) { dalvik.system.ZygoteHooks.nativePostForkChild(token, debugFlags, instructionSet); <START_MOD>java.lang.Math.setRandomSeed(java.lang.System.currentTimeMillis()); <END_MOD>}
@java.lang.Override public void setNetworkSelectionModeAutomatic(<START_MOD>com.<END_MOD>android.<START_MOD>internal.telephony.sip<END_MOD>.Message response) { }
public static <<START_MOD>M extends com.google.protobuf.nano.ExtendableMessageNano<M>, <END_MOD>T> com.google.protobuf.nano.Extension<<START_MOD>M, <END_MOD>T> create(int <START_MOD>type<END_MOD>, <START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>Class<END_MOD><T> <START_MOD>clazz, int tag<END_MOD>) { return new com.google.protobuf.nano.Extension<<START_MOD>M, <END_MOD>T>(<START_MOD>type<END_MOD>, <START_MOD>clazz, tag<END_MOD>); }
<START_MOD>public static boolean storeUnknownField(final java.util.List<com.google.protobuf.nano.UnknownFieldData> data, final com.google.protobuf.nano.CodedInputByteBufferNano input, final int tag) throws java.io.IOException { int startPos = input.getPosition(); input.skipField(tag); int endPos = input.getPosition(); byte[] bytes = input.getData(startPos, (endPos - startPos)); data.add(new com.google.protobuf.nano.UnknownFieldData(tag, bytes)); return (com.google.protobuf.nano.WireFormatNano.getTagWireType(tag)) != (com.google.protobuf.nano.WireFormatNano.WIRETYPE_END_GROUP); }<END_MOD>
<START_MOD>public static void main(java.lang.String[] args) { runDebuggee(org.apache.harmony.jpda.tests.jdwp.Events.FieldLocationDebuggee.class); }<END_MOD>
private static <START_MOD>int<END_MOD> <START_MOD>parseWpaCipher<END_MOD>(int cipher) { switch (cipher) { case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_CIPHER_NONE : return <START_MOD>ScanResult.Cipher.NONE<END_MOD>; case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_CIPHER_TKIP : return <START_MOD>ScanResult.Cipher.TKIP<END_MOD>; case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_CIPHER_CCMP : return <START_MOD>ScanResult.Cipher.CCMP<END_MOD>; default : return <START_MOD>ScanResult.Cipher.NONE<END_MOD>; } }
@android.test.suitebuilder.annotation.SmallTest public void testParcelWithInvalidMccMnc() { final java.lang.String invalidMcc = "randomStuff"; final java.lang.String invalidMnc = "randomStuff"; android.telephony.CellIdentityLte ci = new android.telephony.CellIdentityLte(com.android.internal.telephony.CellIdentityLteTest.CI, com.android.internal.telephony.CellIdentityLteTest.PCI, com.android.internal.telephony.CellIdentityLteTest.TAC, com.android.internal.telephony.CellIdentityLteTest.EARFCN, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(<START_MOD>CellIdentity.TYPE_LTE); p.writeInt(<END_MOD>com.android.internal.telephony.CellIdentityLteTest.CI); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.PCI); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.TAC); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.EARFCN); p.writeString(invalidMcc); p.writeString(invalidMnc); p.setDataPosition(0); android.telephony.CellIdentityLte newCi = CellIdentityLte.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }
public void initializeGlobals(<START_MOD>android.renderscript<END_MOD>.RenderScript RS, com.android.rs.test.ScriptC_addup s) { mArray = new int[(com.android.rs.test.UT_script_group2_gatherscatter.ARRAY_SIZE) * 4]; for (int i = 0; i < (com.android.rs.test.UT_script_group2_gatherscatter.ARRAY_SIZE); i++) { mArray[(i * 4)] = i * 7; mArray[((i * 4) + 1)] = (i * 7) + 1; mArray[((i * 4) + 2)] = (i * 7) + 2; mArray[((i * 4) + 3)] = (i * 7) + 3; } }
@org.junit.Test public void aget_char() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(AGET_CHAR).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), <START_MOD>"jack/jack-tests/src/com/android/jack/DxTestCase.java"<END_MOD>)).compileAndRunTest(); }
public java.lang.String[] getIsimPcscf(<START_MOD>int subId<END_MOD>) throws android.os.RemoteException { com.android.internal.telephony.Phone phone = getPhone(<START_MOD>subId<END_MOD>); mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,   READ_PRIVILEGED_PHONE_STATE com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimPcscf(); } else { return null; } }
private void doPerform() { isRunning.set(true); new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { try { myApplied = myOperation.execute(com.intellij.updater.SwingUpdaterUI.this); } catch (com.intellij.updater.OperationCancelledException ignore) { } catch (java.lang.Throwable e) { showError(e); } finally { isRunning.set(false); if (<START_MOD>hasRetry.get()) { myRetryButton.setEnabled(true); } if (<END_MOD>hasError.get()) { startProcess( to apply patch setProgress(100); myCancelButton.setText(com.intellij.updater.SwingUpdaterUI.EXIT_BUTTON_TITLE); myCancelButton.setEnabled(true); } else { exit(); } } } }).start(); }
public void closeSupplicantConnection(<START_MOD>) { if (!(com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE)<END_MOD>) { synchronized(com.android.server.wifi.WifiNative.sLock) { localLog(((mInterfacePrefix) + "closeSupplicantConnection")); com.android.server.wifi.WifiNative.closeSupplicantConnectionNative(); } }<START_MOD> }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String toHuman() { return prototype.toString(); }<END_MOD>
public static boolean hasVersionCode(com.android.io.IAbstractFile manifestFile) throws com.android.io.StreamException, javax.xml.xpath.XPathExpressionException { javax.xml.xpath.XPath xPath = com.android.xml.AndroidXPathFactory.newXPath(); java.<START_MOD>io.InputStream is = null; try { is = manifestFile.getContents(); java.<END_MOD>lang.Object result = xPath.evaluate(((((("/" + (com.android.xml.AndroidManifest.NODE_MANIFEST)) + "/@") + (AndroidXPathFactory.DEFAULT_NS_PREFIX)) + ":") + (com.android.xml.AndroidManifest.ATTRIBUTE_VERSIONCODE)), new org.xml.sax.InputSource(<START_MOD>is<END_MOD>), javax.xml.xpath.XPathConstants.NODE); if (result != null) { org.w3c.dom.Node node = ((org.w3c.dom.Node) (result)); if (<START_MOD>!<END_MOD>(node.getNodeValue().<START_MOD>isEmpty())<END_MOD>) { return true; } } <START_MOD>} finally { if (is != null) { com.google.common.io.Closeables.closeQuietly(is); } } <END_MOD>return false; }
public int getScreenResolution() { long display = sun.awt.X11.XToolkit.getDisplay(); sun.awt.SunToolkit.awtLock(); try { <START_MOD>if ((java.lang.System.getenv("_AWT_USE_XWAYLAND")) != null) { final java.lang.String dpi = java.lang.System.getenv("_AWT_XWAYLAND_DPI"); if ((dpi != null) && (!(dpi.trim().isEmpty()))) <END_MOD>return <START_MOD>java.lang.Integer.parseInt(dpi); } return <END_MOD>((int) (((sun.awt.X11.XlibWrapper.DisplayWidth(display, sun.awt.X11.XlibWrapper.DefaultScreen(display))) * 25.4) / (sun.awt.X11.XlibWrapper.DisplayWidthMM(display, sun.awt.X11.XlibWrapper.DefaultScreen(display))))); } finally { sun.awt.SunToolkit.awtUnlock(); } }
@java.lang.Override protected boolean start() { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "start()"); } <START_MOD>com.android.bluetooth.hid.HidDeviceService.setHidDeviceService(this); mHandler = new com.android.bluetooth.hid.HidDeviceService.HidDeviceServiceHandler(); mHidDeviceNativeInterface.init<END_MOD>(); mNativeAvailable = true; return true; }
<START_MOD>public void testInvalidLibraryReferences1() throws java.lang.Exception { com.android.tools.lint.client.api.ProjectTest.TestClient client = new com.android.tools.lint.client.api.ProjectTest.TestClient(); java.io.File dir = new java.io.File("bogus"); com.android.tools.lint.client.api.ProjectTest.TestProject project1 = new com.android.tools.lint.client.api.ProjectTest.TestProject(client, dir); client.registerProject(dir, project1); project1.setDirectLibraries(java.util.Collections.<com.android.tools.lint.detector.api.Project>singletonList(project1)); java.util.List<com.android.tools.lint.detector.api.Project> libraries = project1.getAllLibraries(); assertNotNull(libraries); assertEquals("Warning: Internal lint error: encountered Project [dir=bogus] more than once", client.getLoggedOutput()); }<END_MOD>
<START_MOD>private int getIntCarrierConfigForSlot(java.lang.String key) { android.os.PersistableBundle b = null; if ((mConfigManager) != null) { b = mConfigManager.getConfig(); } if (b != null) { return b.getInt(key); } else { return android.telephony.CarrierConfigManager.getDefaultConfig().getInt(key); } }<END_MOD>
@android.test.suitebuilder.annotation.LargeTest <START_MOD>@org.junit.Test <END_MOD>public void <START_MOD>injectLargeString<END_MOD>() throws java.lang.InterruptedException { sendActivity = <START_MOD>rule.<END_MOD>getActivity(); <START_MOD>android.support.test.InstrumentationRegistry.<END_MOD>getInstrumentation().waitForIdleSync(); final java.util.concurrent.atomic.AtomicBoolean requestFocusSucceded = new java.util.concurrent.atomic.AtomicBoolean(false); <START_MOD>android.support.test.InstrumentationRegistry.<END_MOD>getInstrumentation().runOnMainSync(new java.lang.Runnable() { @java.lang.Override public void run() { final android.view.View view = sendActivity.findViewById(R.id.send_data_to_call_edit_text); android.util.Log.i("TEST", android.support.test.espresso.util.HumanReadables.describe(view)); requestFocusSucceded.set(view.requestFocus()); android.util.Log.i("TEST-post", android.support.test.espresso.util.HumanReadables.describe(view)); focusLatch.countDown(); } }); assertTrue( timed out! focusLatch.await(2, java.util.concurrent.TimeUnit.SECONDS)); assertTrue( failed. requestFocusSucceded.get()); <START_MOD>android.support.test.InstrumentationRegistry.<END_MOD>getInstrumentation().runOnMainSync(new java.lang.Runnable() { @java.lang.Override public void run() { try { injectEventWorked.set(uiController.injectString( is a string with 32 chars!! latch.countDown(); } catch (android.support.test.espresso.InjectEventSecurityException e) { injectEventThrewSecurityException.set(true); } } }); assertFalse( exception was thrown. injectEventThrewSecurityException.get()); assertTrue( out! latch.await(20, java.util.concurrent.TimeUnit.SECONDS)); assertTrue(injectEventWorked.get()); }
@java.lang.Override public void queryCdmaRoamingPreference(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_CDMA_QUERY_ROAMING_PREFERENCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getCdmaRoamingPreference(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "queryCdmaRoamingPreference", e); } } }
public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.<START_MOD>getKey(256)<END_MOD>); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, <START_MOD>android.net.cts.IpSecManagerTest.getKey<END_MOD>(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth<START_MOD>, null<END_MOD>, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, <START_MOD>null, <END_MOD>false, 1, true); }
public void testDiff3() throws java.lang.Exception { java.lang.String main = "" + ((((((((("<manifest\n" +   xmlns:android= +   package= + "\n") +   <application android:label= /> +   <!-- some comment that should be ignored --> +   <activity android:name= /> + "\n") + "\n") + "</manifest>"); java.lang.String library = "" + (((((((("<manifest\n" +   xmlns:android= +   package= + "\n") +   <!-- some comment that should also be ignored --> +   <activity android:name= /> +   <application android:label= /> + "\n") + "</manifest>"); com.android.manifmerger.XmlDocument mainDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), "testDiff3()"), main); com.android.manifmerger.XmlDocument libraryDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), "testDiff3()"), library); <START_MOD>assertFalse<END_MOD>(mainDocument.getRootNode().compareTo(libraryDocument.getRootNode(), mergingReport)<START_MOD>.isPresent()<END_MOD>); }
<START_MOD>private void drawString(java.awt.Graphics2D g, java.lang.String name, java.awt.Rectangle bounds) { double widthOnScreen = (g.getTransform().getScaleX()) * (bounds.width); if ((myFont) == null) { myFont = g.getFont().deriveFont(8.0F); } g.setFont(myFont); g.setColor(java.awt.Color.BLACK); java.awt.geom.AffineTransform origTx = g.getTransform(); mSrc.x = (bounds.x) + (com.android.tools.perflib.vmtrace.viz.CallHierarchyRenderer.TEXT_LEFT_PADDING); mSrc.y = (bounds.y) + (com.android.tools.perflib.vmtrace.viz.CallHierarchyRenderer.TEXT_HEIGHT); origTx.transform(mSrc, mDst); g.setTransform(new java.awt.geom.AffineTransform()); if (widthOnScreen > (g.getFontMetrics().stringWidth(name))) { g.drawString(name, mDst.x, mDst.y); } g.setTransform(origTx); }<END_MOD>
public void selectDefaultApplication() { try { select(null);<START_MOD> synchronized(mLock) { mDefaultApplicationSelectedOnBasicChannel = true; }<END_MOD> } catch (java.util.NoSuchElementException e) { if ((getAccessControlEnforcer()) != null) { try { select(mAccessControlEnforcer.getDefaultAccessControlAid()); <START_MOD>synchronized(mLock) { mDefaultApplicationSelectedOnBasicChannel = true; } <END_MOD>} catch (java.lang.Exception ignore) { } } } catch (android.os.RemoteException ignore) { } }
java.util.List<? extends java.io.File> load(android.content.Context context, java.<START_MOD>lang.String prefsKeyPrefix, boolean forceReload) throws java.<END_MOD>io.<START_MOD>IOException { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, (((((("MultiDexExtractor.load(" + (<END_MOD>sourceApk<START_MOD>.getPath())) +     + forceReload) +     +<END_MOD> prefsKeyPrefix) + ")")); java.util.List<android.support.multidex.MultiDexExtractor.ExtractedDex> files; if ((!forceReload) && (!(android.support.multidex.MultiDexExtractor.isModified(context, sourceApk, <START_MOD>sourceCrc<END_MOD>, prefsKeyPrefix)))) { try { files = loadExistingExtractions(context, <START_MOD>prefsKeyPrefix); } catch (java.io.IOException ioe) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, ( to reload existing extracted secondary dex files, +   falling back to fresh extraction ioe); files = android.support.multidex.MultiDexExtractor.performExtractions(<END_MOD>sourceApk, dexDir<START_MOD>); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context<END_MOD>, prefsKeyPrefix<START_MOD>, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), sourceCrc, files); } } else { if (forceReload<END_MOD>) { android.util.Log.<START_MOD>i<END_MOD>(android.support.multidex.MultiDexExtractor.TAG, <START_MOD>  extraction must be performed. } else { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG,   that extraction must be performed. } files = android.support.multidex.MultiDexExtractor.performExtractions(sourceApk, dexDir); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), sourceCrc, files); } android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, (( found   + (files.size())) +  <END_MOD> secondary dex files return files; }
public void buildNewRa(android.net.ip.RouterAdvertisementDaemon.RaParams deprecatedParams, android.net.ip.RouterAdvertisementDaemon.RaParams newParams) { synchronized(mLock) { if (deprecatedParams != null) { <START_MOD>final android.net.ip.RouterAdvertisementDaemon.RaParams deprecated = new android.net.ip.RouterAdvertisementDaemon.RaParams(deprecatedParams); android.net.ip.RouterAdvertisementDaemon.removeULAs(deprecated.dnses); <END_MOD>mDeprecatedInfoTracker.putPrefixes(<START_MOD>deprecated<END_MOD>.prefixes); mDeprecatedInfoTracker.putDnses(<START_MOD>deprecated.dnses); } final android.net.ip.RouterAdvertisementDaemon.RaParams params = (newParams != null) ? new android.net.ip.RouterAdvertisementDaemon.RaParams(newParams) : null;<END_MOD> if (<START_MOD>params<END_MOD> != null) { <START_MOD>android.net.ip.RouterAdvertisementDaemon.removeULAs(params.dnses); <END_MOD>mDeprecatedInfoTracker.removePrefixes(<START_MOD>params<END_MOD>.prefixes); mDeprecatedInfoTracker.removeDnses(<START_MOD>params<END_MOD>.dnses); } mRaParams = <START_MOD>params<END_MOD>; assembleRaLocked(); } maybeNotifyMulticastTransmitter(); }
private static libcore.tzdata.update2.TimeZoneBundle createValidTimeZoneBundle(java.lang.String rulesVersion, java.lang.String <START_MOD>revision<END_MOD>) throws java.lang.Exception { return libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundleBuilder(rulesVersion, <START_MOD>revision<END_MOD>).build(); }
<START_MOD>private void onNewDevice() { }<END_MOD>
@java.lang.Override public com.google.gson.JsonElement serialize(com.android.ide.common.blame.<START_MOD>SourcePositionRange<END_MOD> position, java.lang.reflect.Type type, com.google.gson.JsonSerializationContext jsonSerializationContext) { com.google.gson.JsonObject result = new com.google.gson.JsonObject(); if ((position.getStartLine()) != (-1)) { result.addProperty(com.android.ide.common.blame.<START_MOD>SourcePositionRange<END_MOD>.START_LINE, position.getStartLine()); } if ((position.getStartColumn()) != (-1)) { result.addProperty(com.android.ide.common.blame.<START_MOD>SourcePositionRange<END_MOD>.START_COLUMN, position.getStartColumn()); } if ((position.getStartOffset()) != (-1)) { result.addProperty(com.android.ide.common.blame.<START_MOD>SourcePositionRange<END_MOD>.START_OFFSET, position.getStartOffset()); } if (((position.getEndLine()) != (-1)) && ((position.getEndLine()) != (position.getStartLine()))) { result.addProperty(com.android.ide.common.blame.<START_MOD>SourcePositionRange<END_MOD>.END_LINE, position.getEndLine()); } if (((position.getEndColumn()) != (-1)) && ((position.getEndColumn()) != (position.getStartColumn()))) { result.addProperty(com.android.ide.common.blame.<START_MOD>SourcePositionRange<END_MOD>.END_COLUMN, position.getEndColumn()); } if (((position.getEndOffset()) != (-1)) && ((position.getEndOffset()) != (position.getStartOffset()))) { result.addProperty(com.android.ide.common.blame.<START_MOD>SourcePositionRange<END_MOD>.END_OFFSET, position.getEndOffset()); } return result; }
void notifyMethodLoaded(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface <START_MOD>loaded) { synchronized(<END_MOD>loaded) { assert structureLoaded; (methodNotLoadedCount)--; if ((methodNotLoadedCount) == 0) { loaded.removeLoader(); } }<START_MOD> }<END_MOD>
@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.<START_MOD>OutputVFile<END_MOD> <START_MOD>getJayceOutputVFile<END_MOD>(<START_MOD>@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type<END_MOD>)<START_MOD> throws com.android.sched.util.file.CannotCreateFileException<END_MOD> { return outputVDir<START_MOD>.createOutputVFile(new com.android.sched.vfs.VPath(((com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter().getName(type)) + (com.android.jack.backend.jayce.JayceFileImporter.JAYCE_FILE_EXTENSION)), '/'))<END_MOD>; }
@java.lang.Override protected void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); <START_MOD>if ((android.os.UserHandle.myUserId()) != (android.os.UserHandle.USER_OWNER)) { android.widget.Toast.makeText(this, R.string.voice_number_setting_primary_user_only, Toast.LENGTH_SHORT).show(); finish(); return; } <END_MOD>mShowVoicemailPreference = (icicle == null) && (android.text.TextUtils.equals(getIntent().getAction(), com.android.phone.settings.VoicemailSettingsActivity.ACTION_ADD_VOICEMAIL)); mSubscriptionInfoHelper = new com.android.phone.SubscriptionInfoHelper(this, getIntent()); mSubscriptionInfoHelper.setActionBarTitle(getActionBar(), getResources(), R.string.voicemail_settings_with_label); mPhone = mSubscriptionInfoHelper.getPhone(); mPhoneAccountHandle = com.android.phone.PhoneUtils.makePstnPhoneAccountHandle(mPhone); mOmtpVvmCarrierConfigHelper = new com.android.phone.vvm.omtp.OmtpVvmCarrierConfigHelper(mPhone.getContext(), mPhone.getSubId()); }
<START_MOD>private static java.lang.String getId(java.lang.Class<?> cls, java.lang.Class<?> category) { java.lang.String id = cls.getCanonicalName(); if (com.android.sched.item.Feature.class.isAssignableFrom(category)) { return "f-" + id; } else if (com.android.sched.item.TagOrMarkerOrComponent.class.isAssignableFrom(category)) { return "tcm-" + id; } else if (com.android.sched.schedulable.RunnableSchedulable.class.isAssignableFrom(category)) { return "r-" + id; } else if (com.android.sched.schedulable.AdapterSchedulable.class.isAssignableFrom(category)) { return "a-" + id; } else if (com.android.sched.item.Production.class.isAssignableFrom(category)) { return "p-" + id; } throw new java.lang.AssertionError((("No 'id' for '" + id) + "'")); }<END_MOD>
@org.junit.Test public void testSetupDriverForClientMode() { com.android.server.wifi.WificondControl wificondControl = mock(com.android.server.wifi.WificondControl.class); android.net.wifi.IWificond wificond = mock(android.net.wifi.IWificond.class); android.net.wifi.IClientInterface clientInterface = mock(android.net.wifi.IClientInterface.class); when(wificondControl.setupDriverForClientMode()).thenReturn(clientInterface); mWifiNative.setWificondControl(wificondControl); android.net.wifi.IClientInterface returnedClientInterface = mWifiNative.setupDriverForClientMode(); assertEquals(clientInterface, returnedClientInterface); verify(mWifiNative).startHal(eq(true)); <START_MOD>verify(wificondControl).setupDriverForClientMode(); <END_MOD>}
<START_MOD>@java.lang.Override @javax.annotation.CheckForNull public DST checkString(com.android.sched.util.codec.CodecContext context, java.lang.String string) throws com.android.sched.util.codec.ParsingException { codec.checkString(context, string); return null; }<END_MOD>
public boolean startVendorHal(boolean isStaMode) { if (!(mHalDeviceManager.start())) { <START_MOD>mLog.e( to start the vendor HAL return false; } <END_MOD>android.<START_MOD>hardware.wifi.V1_0.IWifiIface iface; if (isStaMode) { mIWifiStaIface = mHalDeviceManager.createStaIface(null, null); if ((mIWifiStaIface) == null) { mLog.e( to create STA Iface. Vendor Hal start failed mHalDeviceManager.stop(); return false; } iface = ((<END_MOD>android.<START_MOD>hardware<END_MOD>.wifi.<START_MOD>V1_0.IWifiIface) (mIWifiStaIface)); if (!(registerStaIfaceCallback())) { mLog.e( to register sta iface callback mHalDeviceManager.stop(); return false; } mIWifiRttController = mHalDeviceManager.createRttController(iface); if ((mIWifiRttController) == null) { mLog.e( to create RTT controller. Vendor Hal start failed stopVendorHal(); return false; } enableLinkLayerStats(); } else { mIWifiApIface = mHalDeviceManager.createApIface(null<END_MOD>, <START_MOD>null); if ((mIWifiApIface) == null) { mLog.e( to create AP Iface. Vendor Hal start failed stopVendorHal(); return false; } iface = ((android.hardware.wifi.V1_0.IWifiIface) (mIWifiApIface)); } mIWifiChip = mHalDeviceManager.getChip(iface); if ((mIWifiChip) == null) { mLog.e( to get<END_MOD> the <START_MOD>chip created for the<END_MOD> Iface. Vendor Hal start failed <START_MOD>stopVendorHal(); return false; } if (!(registerChipCallback())) { mLog.e( to register chip callback <END_MOD>mHalDeviceManager.stop(); return false; } <START_MOD>mLog.i(<END_MOD> Hal started successfully return true; }
<START_MOD>protected<END_MOD> void removeConnection(android.telecom.Connection connection) { java.lang.String id = mIdByConnection.get(connection); connection.unsetConnectionService(this); connection.removeConnectionListener(mConnectionListener); mConnectionById.remove(mIdByConnection.get(connection)); mIdByConnection.remove(connection); mAdapter.removeCall(id); }
public void testClientSendsContentLength() throws java.lang.Exception { server.enqueue(new com.google.mockwebserver.MockResponse().setBody("A")); server.play(); java.net.HttpURLConnection connection = ((java.net.HttpURLConnection) (server.getUrl("/").openConnection())); connection.setDoOutput(true); java.io.OutputStream out = connection.getOutputStream(); out.write(new byte[]{ 'A', 'B', 'C' }); out.close(); assertEquals("A", readAscii(connection.getInputStream(), java.lang.Integer.MAX_VALUE)); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); <START_MOD>libcore.java.net.URLConnectionTest.<END_MOD>assertContains(request.getHeaders(),   3 }
public static junit.framework.Test suite() { java.io.File folder = com.android.build.tests.ProjectTest.getFolderFromEnvVar(com.android.build.tests.ProjectTest.TEST_FOLDER); java.io.File sdkFolder = com.android.build.tests.ProjectTest.getFolderFromEnvVar(com.android.build.tests.ProjectTest.TEST_SDK); java.io.File ndkFolder = com.android.build.tests.ProjectTest.getFolderFromEnvVar(com.android.build.tests.ProjectTest.TEST_NDK);<START_MOD> java.lang.String taskName = "assembleDebug"; if ((java.lang.System.getenv("USE_DEVICE")) != null) { taskName = "connectedCheck"; } java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayList(); if ((java.lang.System.getenv("CUSTOM_BUILDTOOLS")) != null) { args.add(("-PCUSTOM_BUILDTOOLS=" + (java.lang.System.getenv("CUSTOM_BUILDTOOLS")))); }<END_MOD> junit.framework.TestSuite suite = new junit.framework.TestSuite(); suite.setName("ProjectTests"); java.io.File[] children = folder.listFiles(); if (children != null) { for (java.io.File child : children) { if (child.isDirectory()) { com.android.build.tests.ProjectTest.searchForProject(suite, child, sdkFolder, ndkFolder<START_MOD>, taskName, args<END_MOD>); } } } return suite; }
protected void setUp() throws java.lang.Exception { ssc = java.nio.channels.ServerSocketChannel.open(); ssc.configureBlocking(false); java.net.ServerSocket ss = ssc.socket(); ss.bind(<START_MOD>null); localAddress = ss.getLocalSocketAddress(<END_MOD>); selector = java.nio.channels.Selector.open(); }
@javax.annotation.Nonnull public com.android.jack.cfg.ControlFlowGraph getCfg() { assert (<START_MOD>method<END_MOD>) != null; <START_MOD>com.android.sched.util.log.Event<END_MOD> <START_MOD>optEvent = com.android.sched.util.log.TracerFactory.getTracer().start(JackEventType.REMOVE_DEAD_CODE); try { com.android.jack.<END_MOD>cfg<START_MOD>.CfgBuilder.removeUnaccessibleNode(blocks, entryBlock, exitBlock)<END_MOD>; }<START_MOD> finally { optEvent.end(); } return new com.android.jack.cfg.ControlFlowGraph(method, basicBlockId, entryBlock, exitBlock, blocks); }<END_MOD>
<START_MOD>private void InitializeGetTarget() { synchronized(java.lang.invoke.CallSite.class) { if ((java.lang.invoke.CallSite.GET_TARGET) == null) { try { java.lang.invoke.CallSite.GET_TARGET = java.lang.invoke.MethodHandles.Lookup.IMPL_LOOKUP.findVirtual(java.lang.invoke.CallSite.class, "getTarget", java.lang.invoke.MethodType.methodType(java.lang.invoke.MethodHandle.class)); } catch (java.lang.ReflectiveOperationException e) { throw new java.lang.InternalError(e); } } } }<END_MOD>
<START_MOD>@vogar.target.TestRunnerProperties(testClass = vogar.target.caliper.TestRunnerCaliperTest.CaliperBenchmarkFailing.class) @org.junit.Test public void testRunner_CaliperBenchmark_NoRunner() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner("-i", "runtime"); runner.run(); checkFilteredOutput().unsupported().completedNormally(); }<END_MOD>
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "T144630613") public void activateDeactivatePolicy() throws java.lang.Exception { <START_MOD>if<END_MOD> <START_MOD>(isAPIDemoInstalled)<END_MOD> <START_MOD>{<END_MOD> if (checkStatusOfPolicy(<START_MOD>))<END_MOD> { com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation,   Device Admin } assertFalse(checkStatusOfPolicy(<START_MOD>));<END_MOD> com.android.devtools.systemimage.uitest.utils.SettingsUtil.activate(instrumentation,   Device Admin assertTrue(checkStatusOfPolicy(<START_MOD>));<END_MOD> com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation,   Device Admin assertFalse(checkStatusOfPolicy(<START_MOD>));<END_MOD> }<START_MOD> }<END_MOD>
<START_MOD>@java.lang.Override public org.eclipse.swt.graphics.Image getImage(java.lang.Object element) { com.android.sdkuilib.internal.repository.icons.ImageFactory imgFactory = mUpdaterData.getImageFactory(); if (imgFactory != null) { if ((mColumn) == (mColumnName)) { return imgFactory.getImageForObject(element); } else if (((mColumn) == (mColumnStatus)) && (element instanceof com.android.sdkuilib.internal.repository.PkgWindow2.PkgItem)) { switch (((com.android.sdkuilib.internal.repository.PkgWindow2.PkgItem) (element)).getState()) { case INSTALLED : return imgFactory.getImageByName("accept_icon16.png"); case UPDATE_AVAILABLE : case NEW_AVAILABLE : return imgFactory.getImageByName("reject_icon16.png"); case LOCKED_NO_INSTALL : return imgFactory.getImageByName("broken_pkg_16.png"); } } } return super.getImage(element); }<END_MOD>
@com.android.annotations.NonNull public static java.lang.String getGenericLabel(@com.android.annotations.NonNull com.android.sdklib.devices.Device device) { java.lang.String name = device.getName(); if (name.equals( FWVGA slider { name =   FWVGA slider } java.util.regex.Matcher matcher = com.android.ide.common.rendering.HardwareConfigHelper.GENERIC_PATTERN.matcher(name); if (matcher.matches()) { java.lang.String size = matcher.group(1); java.lang.String n = matcher.group(2); int dot = size.indexOf('.'); if (dot == (-1)) { size <START_MOD>+=<END_MOD> ".0"; dot = (size.length()) - 2; } for (int i = 0; i < (2 - dot); i++) { size =     + size; } name = (size +     + n; } return java.lang.String.format(java.util.Locale.US,   (%2$s) name, com.android.ide.common.rendering.HardwareConfigHelper.getResolutionString(device)); }
public void cancelSession(byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { <START_MOD>java.lang.String command = com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_CANCEL_SESSION).addChildAsBytes(com.android.internal.telephony.uicc.euicc.TAG_CTX_0, transactionId).addChildAsInteger(com.android.internal.telephony.uicc.euicc.TAG_CTX_1, reason).build().toHex(); java.lang.String response; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(command); <END_MOD>}<START_MOD> com.android.internal.telephony.uicc.asn1.Asn1Node root = com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponse(response); try { if (root.hasChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_1)) { throw new com.android.internal.telephony.uicc.euicc.EuiccCardErrorException(OperationCode.CANCEL_SESSION, root.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_1).asInteger()); } } catch (com.android.internal.telephony.uicc.asn1.TagNotFoundException | com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException e) { throw new com.android.internal.telephony.uicc.euicc.EuiccCardInvalidResponseException(( parse response:   + response), e); } return root; }<END_MOD>
public int setsid() throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
private static native boolean native_clipRect(<START_MOD>long<END_MOD> nCanvas, float left, float top, float right, float bottom, int regionOp);
<START_MOD>@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.InputVFile getBinary(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type, @javax.annotation.Nonnull com.android.jack.library.BinaryKind binaryKind) throws com.android.jack.library.BinaryDoesNotExistException { try { return libraryVDir.getInputVFile(new com.android.sched.vfs.VPath(((com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter().getName(type)) + (BinaryKind.DEX.getFileExtension())), '/')); } catch (com.android.sched.util.file.NotFileOrDirectoryException e) { throw new com.android.jack.library.BinaryDoesNotExistException(this, type, binaryKind); } }<END_MOD>
<START_MOD>public java.util.Collection<java.lang.Object> getNdkBuildable() { return ndkBuildable; }<END_MOD>
<START_MOD>public void test10560853() throws java.lang.Exception { java.util.Locale l = java.util.Locale.US; java.util.TimeZone utc = java.util.TimeZone.getTimeZone("UTC"); long midnight = 0; long midnightNext = 1 * (libcore.icu.DateIntervalFormatTest.DAY); int flags = (FORMAT_SHOW_DATE) | (FORMAT_SHOW_WEEKDAY); assertEquals("Thursday, January 1", formatDateRange(l, utc, midnight, midnightNext, flags)); long nextMorning = (1 * (libcore.icu.DateIntervalFormatTest.DAY)) + 1; assertEquals("Thursday, January 1 – Friday, January 2", formatDateRange(l, utc, midnight, nextMorning, flags)); long nextMidnight = 2 * (libcore.icu.DateIntervalFormatTest.DAY); assertEquals("Thursday, January 1 – Friday, January 2", formatDateRange(l, utc, midnight, nextMidnight, flags)); }<END_MOD>
<START_MOD>protected void engineUpdateAAD(byte[] input, int inputOffset, int inputLen) { if ((bufCount) != 0) { throw new java.lang.IllegalStateException("Cannot call updateAAD after calling update"); } if ((aad) == null) { aad = java.util.Arrays.copyOfRange(input, inputOffset, inputLen); } else { int newSize = (aad.length) + inputLen; byte[] newaad = new byte[newSize]; java.lang.System.arraycopy(aad, 0, newaad, 0, aad.length); java.lang.System.arraycopy(input, inputOffset, newaad, aad.length, inputLen); } }<END_MOD>
<START_MOD>@com.android.annotations.NonNull java.lang.String getToolchain();<END_MOD>
<START_MOD>@java.lang.Override public void onRttConnectionFailure(android.telecom.RemoteConnection connection) { sendRttConnectionFailure(); }<END_MOD>
<START_MOD>private void verifyNoConnectionStateIntent(int timeoutMs, android.bluetooth.BluetoothDevice device, int newState, int prevState) { android.content.Intent intent = waitForNoIntent(timeoutMs, mConnectionStateChangedQueue); org.junit.Assert.assertNull(intent); }<END_MOD>
<START_MOD>@javax.annotation.Nonnull private com.android.jack.ir.ast.JLambda.BridgeDescriptor getBridgeDescriptor(@javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.lookup.MethodBinding mb) { com.android.jack.ir.ast.JType returnType = getTypeMap().get(mb.returnType); java.util.List<com.android.jack.ir.ast.JType> parameterTypes = new java.util.ArrayList<com.android.jack.ir.ast.JType>(mb.parameters.length); for (org.eclipse.jdt.internal.compiler.lookup.TypeBinding parameterType : mb.parameters) { parameterTypes.add(getTypeMap().get(parameterType)); } return new com.android.jack.ir.ast.JLambda.BridgeDescriptor(returnType, parameterTypes); }<END_MOD>
<START_MOD>public void executeInBackground(final java.lang.Runnable task) { executor.execute(new java.lang.Runnable() { public void run() { task.run(); } }); }<END_MOD>
public void testReadOneByteAtATime() throws java.io.IOException { java.io.InputStream in = new java.io.FilterInputStream(tests.support.resource.Support_Resources.getStream("hyts_ZipFile.zip")) { @java.lang.Override public int read(byte[] buffer, int offset, int count) throws java.io.IOException { return super.read(buffer, offset, 1); } @java.lang.Override public int read(byte[] buffer) throws java.io.IOException { return super.read(buffer, 0, 1); } }; zis<START_MOD>.close(); zis<END_MOD> = new java.util.zip.ZipInputStream(in); while ((zentry = zis.getNextEntry()) != null) { zentry.getName(); } zis.close(); }
<START_MOD>@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.TestMethodWithParameterTest.class) @org.junit.Test public void testRunner_TestMethodWithParameterTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().completedNormally(); }<END_MOD>
<START_MOD>@java.lang.Deprecated <END_MOD>public boolean contains(java.lang.Object value) { return containsValue(value); }
<START_MOD>public static void computeRint(android.renderscript.cts.TestRint.ArgumentsFloatFloat args) { args.ulf = 0; args.ulfRelaxed = 0; args.out = ((float) (java.lang.Math.rint(args.in))); }<END_MOD>
public android.security.KeyGeneratorSpec build() { return new android.security.KeyGeneratorSpec(mContext, mKeystoreAlias, mFlags, mKeySize, mKeyValidityStart, mKeyValidityForOriginationEnd, mKeyValidityForConsumptionEnd, mPurposes, mPaddings, mBlockModes, <START_MOD>mIndCpaRequired, <END_MOD>mUserAuthenticators, mUserAuthenticationValidityDurationSeconds); }
<START_MOD>@java.lang.Override protected void onBindView(android.view.View view) { super.onBindView(view); android.widget.TextView summaryView = ((android.widget.TextView) (view.findViewById(android.R.id.summary))); if (summaryView != null) { java.lang.CharSequence sum; int vis; if (isActivated) { sum = ((mSummaryOn) == null) ? getSummary() : mSummaryOn; } else { sum = ((mSummaryOff) == null) ? getSummary() : mSummaryOff; } if (sum != null) { summaryView.setText(sum); vis = android.view.View.VISIBLE; } else { vis = android.view.View.GONE; } if (vis != (summaryView.getVisibility())) { summaryView.setVisibility(vis); } } }<END_MOD>
private java.io.File createDex(vogar.Action action, java.io.File actionJar) { java.io.File dex = run.localFile(action, "classes.dex"); vogar.Classpath classesToDex = vogar.Classpath.of(actionJar); classesToDex.addAll(run.classpath); if ((run.toolchain) == (vogar.Toolchain.JACK)) { throw new java.lang.UnsupportedOperationException( support for --mode=activity not yet implemented } java.io.File localTempDir = run.localDir(action.getName()); vogar.Classpath dependentCp = new vogar.Classpath(); <START_MOD>vogar.android.AndroidSdk.Dexer dexer = AndroidSdk.Dexer.DX; if ((run.toolchain) == (vogar.Toolchain.D8)) { dexer = AndroidSdk.Dexer.D8; } <END_MOD>run.androidSdk.dex(run.multidex, dex, localTempDir, classesToDex, dependentCp<START_MOD>, dexer<END_MOD>); return dex; }
<START_MOD>public static int Min2Print3(int a, int b, int c) { int[] values = new int[]{ a, b, c }; java.lang.System.out.println((("Running Main.Min2Print3(" + (java.util.Arrays.toString(values))) + ")")); return a > b ? a : b; }<END_MOD>
<START_MOD>@java.lang.Override public void run() { java.nio.ByteBuffer buffer = java.nio.ByteBuffer.allocateDirect(10000); while (true) { buffer.position(0).limit(buffer.capacity()); try { bytesWritten += channel.write(buffer); } catch (java.io.IOException e) { this.ioe = e; break; } } wasInterrupted = java.lang.Thread.interrupted(); }<END_MOD>
<START_MOD>public void notifyCellularDataStateChanged(boolean state) { mNotifier.notifyCellularDataStateChanged(this, state); }<END_MOD>
public void testBigDecimalBug1897917() { java.text.NumberFormat pf = java.text.NumberFormat.getPercentInstance(); assertEquals("17%", pf.format(java.math.BigDecimal.valueOf(0.17))); java.lang.String longDec = "11.2345678901234567890123456789012345678901234567890"; java.math.BigDecimal bd = new java.math.BigDecimal(longDec); assertBigDecimalWithFraction(bd, "1,123.46%", 2); assertBigDecimalWithFraction(bd, "1,123.45678901%", 8); assertBigDecimalWithFraction(bd, "1,123.4567890123%", 10); assertBigDecimalWithFraction(bd, "1,123.45678901234567890123%", 20); assertBigDecimalWithFraction(bd, "1,123.456789012345678901234567890123%", 30); assertDecFmtWithMultiplierAndFraction("3333.33333333", 3, 4, "10,000"); assertDecFmtWithMultiplierAndFraction("3333.33333333", (-3), 4, "-10,000"); assertDecFmtWithMultiplierAndFraction("0.00333333", 3, 4, "0.01"); <START_MOD>java.text.DecimalFormat df = ((java.text.DecimalFormat) (java.text.NumberFormat.getInstance())); if (df.toPattern().equals("#,##,##0.###")) { <END_MOD>assertDecFmtWithMultiplierAndFraction("3330000000000000000000000000000000", 3, 4, <START_MOD>"9,99,00,00,00,00,00,00,00,00,00,00,00,00,00,00,000"); } else if (df.toPattern().equals("#,##0.###")) { assertDecFmtWithMultiplierAndFraction("3330000000000000000000000000000000", 3, 4, <END_MOD>"9,990,000,000,000,000,000,000,000,000,000,000"); }<START_MOD> }<END_MOD>
<START_MOD>private void initializeGlobals(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_foreach_multi s) { com.android.rs.test.Type.Builder type32Builder = new com.android.rs.test.Type.Builder(RS, com.android.rs.test.Element.U32(RS)); com.android.rs.test.Type.Builder type16Builder = new com.android.rs.test.Type.Builder(RS, com.android.rs.test.Element.U16(RS)); int Xdim = 5; s.set_dimX(Xdim); type32Builder.setX(Xdim); type16Builder.setX(Xdim); Ain0 = com.android.rs.test.Allocation.createTyped(RS, type32Builder.create()); s.bind_ain0(Ain0); s.forEach_init_uint32_alloc(Ain0); Ain1 = com.android.rs.test.Allocation.createTyped(RS, type32Builder.create()); s.bind_ain1(Ain1); s.forEach_init_uint32_alloc(Ain1); Ain2 = com.android.rs.test.Allocation.createTyped(RS, type32Builder.create()); s.bind_ain2(Ain2); s.forEach_init_uint32_alloc(Ain2); Ain3 = com.android.rs.test.Allocation.createTyped(RS, type16Builder.create()); s.bind_ain3(Ain3); s.forEach_init_uint16_alloc(Ain3); Out0 = com.android.rs.test.Allocation.createTyped(RS, type32Builder.create()); s.bind_aout0(Out0); Out1 = com.android.rs.test.Allocation.createTyped(RS, type32Builder.create()); s.bind_aout1(Out1); Out2 = com.android.rs.test.Allocation.createTyped(RS, type32Builder.create()); s.bind_aout2(Out2); return; }<END_MOD>
<START_MOD>@java.lang.Override public void onExtrasChanged(android.os.Bundle extras) { synchronized(mWaitLock) { mOnExtraChangedCalled = true; mWaitLock.notify(); } }<END_MOD>
private static com.android.apksig.SigningCertificateLineage read(java.nio.ByteBuffer inputByteBuffer, int version) throws java.io.IOException { switch (version) { case com.android.apksig.SigningCertificateLineage.FIRST_VERSION : try { java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> nodes = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.readSigningCertificateLineage(getLengthPrefixedSlice(inputByteBuffer)); int minSdkVersion = com.android.apksig.SigningCertificateLineage.calculateMinSdkVersion(nodes); <START_MOD>com.android.apksig.SigningCertificateLineage.checkUniqueSigningCertificates(nodes); <END_MOD>return new com.android.apksig.SigningCertificateLineage(minSdkVersion, nodes); } catch (com.android.apksig.apk.ApkFormatException <START_MOD>| java.security.cert.CertificateEncodingException <END_MOD>e) { throw new java.io.IOException(( to read list of signing certificate nodes in   + "SigningCertificateLineage"), e); } default : throw new java.lang.IllegalArgumentException( SigningCertificateLineage format: unrecognized version. } }
@java.lang.Override public void setCallForward(int action, int cfReason, int serviceClass, java.lang.String number, int timeSeconds, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_SET_CALL_FORWARD, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) +   action =   + action) +   cfReason =   + cfReason) +   serviceClass =   + serviceClass) +   timeSeconds =   + timeSeconds)); } android.hardware.radio.V1_0.CallForwardInfo cfInfo = new android.hardware.radio.V1_0.CallForwardInfo(); cfInfo.status = action; cfInfo.reason = cfReason; cfInfo.serviceClass = serviceClass; cfInfo.toa = android.telephony.PhoneNumberUtils.toaFromString(number); cfInfo.number = convertNullToEmptyString(number); cfInfo.timeSeconds = timeSeconds; try { radioProxy.setCallForward(rr.mSerial, cfInfo); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCallForward", e); } } }
<START_MOD>private java.lang.String mergeThisAndDefaultValue(com.android.manifmerger.MergingReport.Builder mergingReport, com.android.manifmerger.XmlElement implicitNode) { java.lang.String mergedValue = getValue(); if ((mAttributeModel) == null) { return mergedValue; } java.lang.String attributeDefaultValue = mAttributeModel.getDefaultValue(); if ((attributeDefaultValue != null) && (!(attributeDefaultValue.equals(getValue())))) { mergedValue = mAttributeModel.getMergingPolicy().merge(attributeDefaultValue, getValue()); if (mergedValue == null) { addIllegalImplicitOverrideMessage(mergingReport, mAttributeModel, implicitNode); return null; } if (mergedValue.equals(attributeDefaultValue)) { mergingReport.getActionRecorder().recordAttributeAction(this, ActionRecorder.ActionType.IMPLICIT, null); return null; } } return mergedValue; }<END_MOD>
@java.lang.Override public void onPostDialContinue(java.lang.String callId, boolean proceed<START_MOD>, android.telecom.Logging.Session.Info sessionInfo<END_MOD>)<START_MOD> { android.telecom.Log.startExternalSession(sessionInfo, android.telecom.ConnectionService.SESSION_POST_DIAL_CONT); try<END_MOD> { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.<START_MOD>arg2 = android.telecom.Log.createSubsession(); args.<END_MOD>argi1 = (proceed) ? 1 : 0; mHandler.obtainMessage(android.telecom.ConnectionService.MSG_ON_POST_DIAL_CONTINUE, args).sendToTarget(); }<START_MOD> finally { android.telecom.Log.endSession(); } }<END_MOD>
<START_MOD>public void setVoiceRadioTech(int radioTech) { if (com.android.internal.telephony.IccCardProxy.DBG) log(("Setting radio tech " + (android.telephony.ServiceState.rilRadioTechnologyToString(radioTech)))); if (android.telephony.ServiceState.isGsm(radioTech)) { mCurrentAppType = com.android.internal.telephony.uicc.UiccController.APP_FAM_3GPP; } else { mCurrentAppType = com.android.internal.telephony.uicc.UiccController.APP_FAM_3GPP2; } updateQuietMode(); }<END_MOD>
@javax.annotation.Nonnull public static java.util.List<com.android.jack.test.runner.RuntimeRunner> listRuntimeTestRunners(@javax.annotation.CheckForNull java.util.Properties properties) throws com.android.jack.test.runner.RuntimeRunnerException, java.lang.IllegalArgumentException, java.lang.SecurityException { if (properties != null) { java.lang.String rtAsString = properties.getProperty(com.android.jack.test.toolchain.AbstractTestTools.RUNTIME_LIST_KEY); if (rtAsString != null) { return com.android.jack.test.toolchain.AbstractTestTools.parseRuntimeList(rtAsString); } } if ((<START_MOD>com.android.jack.test.toolchain.AbstractTestTools.runtimes.size()) == 0) { if (java.lang.Boolean.parseBoolean(java.lang.System.getProperty("jack.test.runtime.tolerant"))) { if (<END_MOD>!(com.android.jack.test.toolchain.AbstractTestTools.hasRuntimeWarningBeenEmitted)) { java.lang.System.err.println( no runtime has been provided com.android.jack.test.toolchain.AbstractTestTools.hasRuntimeWarningBeenEmitted = true; } <START_MOD>} else { throw new com.android.jack.test.TestConfigurationException( runtime has been provided } } <END_MOD>return com.android.jack.test.toolchain.AbstractTestTools.runtimes; }
public void addDexPath(java.lang.String dexPath, java.io.File optimizedDirectory) { <START_MOD>dalvik.system.DexPathList.MakeElementsResult elementsResult = dalvik.system.DexPathList.makeDexElements(dalvik.system.DexPathList.splitDexPath(dexPath), optimizedDirectory, definingContext<END_MOD>); final dalvik.system.DexPathList.Element[] newElements = <START_MOD>elementsResult.getElements(<END_MOD>); if ((newElements != null) && ((newElements.length) > 0)) { final dalvik.system.DexPathList.Element[] oldElements = dexElements; dexElements = new dalvik.system.DexPathList.Element[(oldElements.length) + (newElements.length)]; java.lang.System.arraycopy(oldElements, 0, dexElements, 0, oldElements.length); java.lang.System.arraycopy(newElements, 0, dexElements, oldElements.length, newElements.length); } dexElementsSuppressedExceptions<START_MOD>.addAll(elementsResult.getSuppressedExceptions()<END_MOD>); }
<START_MOD>@java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { }<END_MOD>
<START_MOD>@org.junit.Test public void test_deleteFile() throws java.io.IOException { try (java.nio.file.SecureDirectoryStream<java.nio.file.Path> ds_path_dir1 = ((java.nio.file.SecureDirectoryStream<java.nio.file.Path>) (java.nio.file.Files.newDirectoryStream(path_root)))) { ds_path_dir1.deleteFile(path_root.relativize(path_f1)); assertFalse(java.nio.file.Files.exists(path_f1)); try { ds_path_dir1.deleteFile(path_root.relativize(path_dir1)); fail(); } catch (java.nio.file.FileSystemException expected) { } try { ds_path_dir1.deleteFile(filesSetup.getTestPath()); fail(); } catch (java.nio.file.NoSuchFileException expected) { } try { ds_path_dir1.deleteFile(null); fail(); } catch (java.lang.NullPointerException expected) { } ds_path_dir1.close(); try { ds_path_dir1.deleteFile(path_root.relativize(path_f2)); fail(); } catch (java.nio.file.ClosedDirectoryStreamException expected) { } } }<END_MOD>
static void inlinedForNull(java.lang.Iterable<?> it) { it.iterator(); <START_MOD>if ((it != null) && (Main.doThrow)) { throw new java.lang.Error(""); <END_MOD>}<START_MOD> }<END_MOD>
@org.junit.Test public void shr_int() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(SHR_INT).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), <START_MOD>"jack/jack-tests/src/com/android/jack/DxTestCase.java"<END_MOD>)).compileAndRunTest(); }
<START_MOD>@org.junit.Test public void shouldAskInstrumentationToUseGivenActivityProviderAndResetItAfterTest() throws java.lang.Throwable { android.support.test.internal.util.ActivityProvider<android.support.test.rule.ActivityTestRuleTest.ActivityFixture> activityProvider = new android.support.test.internal.util.ActivityProvider<android.support.test.rule.ActivityTestRuleTest.ActivityFixture>() { @java.lang.Override public android.support.test.rule.ActivityTestRuleTest.ActivityFixture getActivity() { return android.support.test.rule.ActivityTestRuleTest.mMockActivity; } @java.lang.Override public java.lang.Class<android.support.test.rule.ActivityTestRuleTest.ActivityFixture> getActivityClass() { return android.support.test.rule.ActivityTestRuleTest.ActivityFixture.class; } }; android.support.test.rule.ActivityTestRule<android.support.test.rule.ActivityTestRuleTest.ActivityFixture> activityTestRule = new android.support.test.rule.ActivityTestRule(activityProvider, true, false); android.support.test.runner.MonitoringInstrumentation instrumentation = mock(android.support.test.runner.MonitoringInstrumentation.class); when(instrumentation.getTargetContext()).thenReturn(android.support.test.InstrumentationRegistry.getTargetContext()); activityTestRule.setInstrumentation(instrumentation); org.junit.runners.model.Statement baseStatement = mock(org.junit.runners.model.Statement.class); activityTestRule.apply(baseStatement, mock(org.junit.runner.Description.class)).evaluate(); org.mockito.InOrder inOrder = org.mockito.Mockito.inOrder(instrumentation, baseStatement); inOrder.verify(instrumentation).useActivityProvider(activityProvider); inOrder.verify(baseStatement).evaluate(); inOrder.verify(instrumentation).resetActivityProvider(); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.Integer validateAndConvertValueBeforeSet(java.io.FileDescriptor fd, java.net.NetworkInterface value) { int nicIndex = value.getIndex(); if (nicIndex == (-1)) { throw new java.lang.IllegalArgumentException("The NetworkInterface must have a valid index"); } return nicIndex; }<END_MOD>
void run(java.util.Collection<com.android.ddmlib.testrunner.ITestRunListener> listeners) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException<START_MOD>, java.lang.InterruptedException<END_MOD>;
public static android.support.v8.renderscript.ScriptIntrinsicColorMatrix create(android.support.v8.renderscript.RenderScript rs, android.support.v8.renderscript.Element e) { if (!(e.isCompatible(android.support.v8.renderscript.Element.U8_4(rs)))) { throw new android.support.v8.renderscript.RSIllegalArgumentException( element type. } long id<START_MOD>; boolean mUseIncSupp = false; if (true || ((rs.isUseNative()) && ((android.os.Build.VERSION.SDK_INT) < 21))) { android.util.Log.v( RS Test   Intrinsic mUseIncSupp = true; id = rs.nIncScriptIntrinsicCreate(2, e.getID(rs)); android.util.Log.v( RS Test   Intrinsic Completed } else { id<END_MOD> = rs.nScriptIntrinsicCreate(2, e.getID(rs)); <START_MOD>} android.support.v8.renderscript.ScriptIntrinsicColorMatrix si = new android.support.v8.renderscript.ScriptIntrinsicColorMatrix(id, rs); si.setIncSupp(mUseIncSupp); <END_MOD>return <START_MOD>si; }<END_MOD>
<START_MOD>void stateChangeCallback(int status) { if (status == (AbstractionLayer.BT_STATE_OFF)) { mAdapterStateMachine.sendMessage(AdapterState.DISABLED_NATIVE); } else if (status == (AbstractionLayer.BT_STATE_ON)) { mAdapterStateMachine.sendMessage(AdapterState.ENABLED_NATIVE); } else { android.util.Log.e("TAG", (("Incorrect status " + status) + " in stateChangeCallback")); } }<END_MOD>
<START_MOD>@java.lang.Override @javax.annotation.Nonnull public java.util.Set<java.lang.String> getFileNamesToCompile() { return getJavaFilesSpecifiedOnCommandLine(); }<END_MOD>
void removeForward(int localPort, java.lang.String remoteSocketName, com.android.ddmlib.IDevice.DeviceUnixSocketNamespace namespace) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException<START_MOD>, java.lang.InterruptedException<END_MOD>;
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) throws java.lang.Exception { if (((method.isNative()) || (method.isAbstract())) || (!(filter.accept(this.getClass(), method)))) { return; } com.android.jack.cfg.ControlFlowGraph cfg = method.getMarker(com.android.jack.cfg.ControlFlowGraph.class); assert cfg != null; <START_MOD>java.util.Map<com.android.jack.ir.ast.JVariable, com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo> definitions<END_MOD> = <START_MOD>com.android.jack.optimizations.DefUsesChainsSimplifier.collectDefinitions(cfg); java.util.ArrayList<com.android.jack.optimizations.DefUsesChainsSimplifier.OptInfo> candidates = com.android.jack.optimizations.DefUsesChainsSimplifier.collectCandidates(definitions<END_MOD>); for (com.android.jack.<START_MOD>optimizations.DefUsesChainsSimplifier.OptInfo info<END_MOD> : <START_MOD>candidates<END_MOD>) { <START_MOD>handleCandidate(method, cfg, definitions, info<END_MOD>); } <START_MOD>method.removeMarker(com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker.class); <END_MOD>}
@com.android.annotations.NonNull public java.util.Set<java.io.File> getPackagedJars() { java.util.Set<java.io.File> jars = com.google.common.collect.Sets.newHashSetWithExpectedSize(((<START_MOD>(<END_MOD>mJars.size()) + (<START_MOD>mLocalJars.size())) + (<END_MOD>mFlatLibraries.size()))); for (com.android.builder.dependency.JarDependency jar : mJars) { java.io.File jarFile = jar.getJarFile(); if ((jar.isPackaged()) && (jarFile.exists())) { jars.add(jarFile); } } for (com.android.builder.dependency.<START_MOD>JarDependency jar : mLocalJars) { java.io.File jarFile = jar.getJarFile(); if ((jar.isPackaged()) && (jarFile.exists())) { jars.add(jarFile); } } for (com.android.builder.dependency.<END_MOD>LibraryDependency libraryDependency : mFlatLibraries) { java.io.File libJar = libraryDependency.getJarFile(); if (libJar.exists()) { jars.add(libJar); } for (java.io.File jarFile : libraryDependency.getLocalJars()) { if (jarFile.isFile()) { jars.add(jarFile); } } } return jars; }
private java.lang.String[][] getZoneStringsImpl(boolean needsCopy) { <START_MOD>if ((zoneStrings) == null) {<END_MOD> zoneStrings = <START_MOD>libcore.icu.TimeZoneNames.getZoneStrings<END_MOD>(<START_MOD>locale<END_MOD>);<START_MOD> }<END_MOD> if (!needsCopy) { return zoneStrings; } int len = zoneStrings.length; java.lang.String[][] aCopy = new java.lang.String[len][]; for (int i = 0; i < len; i++) { aCopy[i] = java.util.Arrays.copyOf(zoneStrings[i], zoneStrings[i].length); } return aCopy; }
<START_MOD>public void testMethodEntry() { logWriter.println("testMethodEntry started"); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); if (!(debuggeeWrapper.vmMirror.canUseInstanceFilters())) { logWriter.println("##WARNING: this VM doesn't possess capability: canUseInstanceFilters"); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); return; } long objectID = getFilteredInstanceObjectId(); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.setInstanceOnlyMethodEntry(org.apache.harmony.jpda.tests.jdwp.EventModifiers.InstanceOnlyModifierTest.TEST_CLASS_NAME, objectID); checkReplyPacket(reply, "Failed to set METHOD_ENTRY with thread only modifier"); int requestID = reply.getNextValueAsInt(); assertAllDataRead(reply); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); waitForEvent(JDWPConstants.EventKind.METHOD_ENTRY, requestID, objectID); reply = debuggeeWrapper.vmMirror.clearEvent(JDWPConstants.EventKind.METHOD_ENTRY, requestID); checkReplyPacket(reply, ("Failed to clear event " + requestID)); logWriter.println("testMethodEntry done"); }<END_MOD>
<START_MOD>@com.android.internal.annotations.VisibleForTesting public void setEmergencyCall(boolean flag) { mIsEmergencyCall = flag; }<END_MOD>
<START_MOD>void updateRoutingLocked() { if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, "updateRoutingLocked"); if (!(mNfcEnabled)) { if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, "Not updating routing table because NFC is off."); return; } java.util.List<com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.T3tIdentifier> t3tIdentifiers = new java.util.ArrayList<com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.T3tIdentifier>(); java.util.Iterator<java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo>> it; if ((mPreferredForegroundService) == null) { it = mT3tIdentifiersCache.entrySet().iterator(); } else { it = mForegroundT3tIdentifiersCache.entrySet().iterator(); } while (it.hasNext()) { java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo> entry = ((java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo>) (it.next())); t3tIdentifiers.add(new com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.T3tIdentifier(entry.getValue().getSystemCode(), entry.getValue().getNfcid2())); } mRoutingManager.configureRouting(t3tIdentifiers); }<END_MOD>
<START_MOD>@java.lang.Override public void loadProfileData(com.android.hierarchyviewerlib.models.Window window, com.android.hierarchyviewerlib.models.ViewNode viewNode) { }<END_MOD>
public java.lang.String[] getForbiddenPlmns(int subId, int appType) { mApp.enforceCallingOrSelfPermission(android.Manifest.permission.<START_MOD>READ_PHONE_STATE<END_MOD>,   READ_PRIVILEGED_PHONE_STATE if ((appType != (android.telephony.TelephonyManager.APPTYPE_USIM)) && (appType != (android.telephony.TelephonyManager.APPTYPE_SIM))) { com.android.phone.PhoneInterfaceManager.loge( App Type must be USIM or SIM return null; } java.lang.Object response = sendRequest(com.android.phone.PhoneInterfaceManager.CMD_GET_FORBIDDEN_PLMNS, new java.lang.Integer(appType), subId); if (response instanceof java.lang.String[]) { return ((java.lang.String[]) (response)); } return null; }
private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, final float[] <START_MOD>javaRslt<END_MOD>, final float[] <START_MOD>rsRslt<END_MOD>) { if ((<START_MOD>javaRslt<END_MOD>.length) != (<START_MOD>rsRslt<END_MOD>.length)) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((testName +   java length   + (<START_MOD>javaRslt.length)) +   rs length   + (rsRslt<END_MOD>.length)) +   FAILED return false; } for (int i = 0; i < (<START_MOD>javaRslt<END_MOD>.length); ++i) { if ((<START_MOD>javaRslt<END_MOD>[i]) != (<START_MOD>rsRslt<END_MOD>[i])) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((((testName + "[") + i) +   java   + (<START_MOD>javaRslt[i])) +   rs   + (rsRslt<END_MOD>[i])) +   FAILED return false; } } java.lang.String status = "PASSED"; if (t != null) status +=     + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((testName +     + status)); return true; }
@java.lang.Override public void onClick(android.view.View view) { <START_MOD>mServer<END_MOD> = new com.android.bluetooth.opp.TestTcpServer(); java.lang.Thread server_thread = new java.lang.Thread(<START_MOD>mServer<END_MOD>); server_thread.start(); }
<START_MOD>public com.android.build.gradle.internal.dsl.TestOptions.UnitTestOptions getUnitTests() { return unitTests; }<END_MOD>
<START_MOD>@org.junit.Test public void nullScoredNetworks() { java.lang.String[] ssids = new java.lang.String[]{ "\"test1\"", "\"test2\"" }; java.lang.String[] bssids = new java.lang.String[]{ "6c:f3:7f:ae:8c:f3", "6c:f3:7f:ae:8c:f4" }; int[] freqs = new int[]{ 2470, 2437 }; java.lang.String[] caps = new java.lang.String[]{ "[WPA2-EAP-CCMP][ESS]", "[ESS]" }; int[] securities = new int[]{ com.android.server.wifi.WifiConfigurationTestUtil.SECURITY_PSK, com.android.server.wifi.WifiConfigurationTestUtil.SECURITY_NONE }; int[] levels = new int[]{ (mThresholdQualifiedRssi2G) + 8, (mThresholdQualifiedRssi2G) + 8 }; java.lang.Integer[] scores = new java.lang.Integer[]{ null, null }; boolean[] meteredHints = new boolean[]{ false, true }; com.android.server.wifi.WifiNetworkSelectorTestUtil.ScanDetailsAndWifiConfigs scanDetailsAndConfigs = com.android.server.wifi.WifiNetworkSelectorTestUtil.setupScanDetailsAndConfigStore(ssids, bssids, freqs, caps, levels, securities, mWifiConfigManager, mClock); java.util.List<com.android.server.wifi.ScanDetail> scanDetails = scanDetailsAndConfigs.getScanDetails(); android.net.wifi.WifiConfiguration[] savedConfigs = scanDetailsAndConfigs.getWifiConfigs(); savedConfigs[0].useExternalScores = true; com.android.server.wifi.WifiNetworkSelectorTestUtil.configureScoreCache(mScoreCache, scanDetails, scores, meteredHints); android.net.wifi.WifiConfiguration candidate = mExternalScoreEvaluator.evaluateNetworks(scanDetails, null, null, false, true, mScoreCache, null); assertEquals("Expect null configuration", null, candidate); }<END_MOD>
<START_MOD>@javax.annotation.Nonnull @java.lang.Override public java.io.InputStream getInputStream() throws java.io.IOException { if ((is) == null) { connect(); assert (is) != null; } return is; }<END_MOD>
<START_MOD>private static void ensureInitialized(java.lang.Class c) { c.getName(); }<END_MOD>
<START_MOD>public void answer(final int networkId, ISupplicantP2pIface.getNetworkCallback cb) { doAnswer(new android.app.test.MockAnswerUtil.AnswerWithArguments() { public void answer(ISupplicantP2pNetwork.isCurrentCallback cb) { cb.onValues(mStatusSuccess, groups.get(networkId).isCurrent); return; } }).when(mISupplicantP2pNetworkMock).isCurrent(any(ISupplicantP2pNetwork.isCurrentCallback.class)); cb.onValues(mStatusSuccess, mISupplicantP2pNetworkMock); return; }<END_MOD>
@java.lang.Override public void mouseReleased(java.awt.event.MouseEvent event) { endDrawingLine(); <START_MOD>endEditingRegion(event.getX(), event.getY()); <END_MOD>}
<START_MOD>@java.lang.Override public void onOverlayViewSizeChanged(int width, int height) { synchronized(com.android.cts.verifier.tv.MockTvInputService.sLock) { if ((com.android.cts.verifier.tv.MockTvInputService.sOverlayViewSizeChangedCallback) != null) { if (!(com.android.cts.verifier.tv.MockTvInputService.sOverlayViewSizeChangedCallback.getBundle().getBoolean("OverlayViewCreated"))) { com.android.cts.verifier.tv.MockTvInputService.sOverlayViewSizeChangedCallback.getBundle().putBoolean("OverlayViewCreated", true); } else { if (((com.android.cts.verifier.tv.MockTvInputService.sDummyVideoTrack.getVideoHeight()) <= 0) || ((com.android.cts.verifier.tv.MockTvInputService.sDummyVideoTrack.getVideoWidth()) <= 0)) { android.util.Log.w(com.android.cts.verifier.tv.MockTvInputService.TAG, "The width or height of the selected video track is invalid."); } else if ((height <= 0) || (width <= 0)) { android.util.Log.w(com.android.cts.verifier.tv.MockTvInputService.TAG, "The width or height of the OverlayView is incorrect."); } else if ((java.lang.Math.abs(((((float) (width)) / height) - ((((float) (com.android.cts.verifier.tv.MockTvInputService.sDummyVideoTrack.getVideoWidth())) * (com.android.cts.verifier.tv.MockTvInputService.sDummyVideoTrack.getVideoPixelAspectRatio())) / (com.android.cts.verifier.tv.MockTvInputService.sDummyVideoTrack.getVideoHeight()))))) < (com.android.cts.verifier.tv.MockTvInputService.sRatioEpsilon)) { com.android.cts.verifier.tv.MockTvInputService.sOverlayViewSizeChangedCallback.post(); com.android.cts.verifier.tv.MockTvInputService.sOverlayViewSizeChangedCallback = null; notifyTrackSelected(TvTrackInfo.TYPE_VIDEO, null); } } } } }<END_MOD>
@java.lang.Override public void setUp() throws java.lang.Exception { mFilePath = com.android.ide.eclipse.tests.AdtTestData.getInstance().getTestFilePath(com.android.ide.eclipse.adt.internal.resources.AttrsXmlParserManifestTest.MOCK_DATA_PATH); mParser = new com.android.ide.<START_MOD>common<END_MOD>.<START_MOD>platformData<END_MOD>.AttrsXmlParser(mFilePath); }
<START_MOD>private void verifyResultsClzShort2(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { short[] arrayInValue = new short[(INPUTSIZE) * 2]; inValue.copyTo(arrayInValue); short[] arrayOut = new short[(INPUTSIZE) * 2]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 2; j++) { android.renderscript.cts.TestClz.ArgumentsShortShort args = new android.renderscript.cts.TestClz.ArgumentsShortShort(); args.inValue = arrayInValue[((i * 2) + j)]; android.renderscript.cts.CoreMathVerifier.computeClz(args); short actualOut = arrayOut[((i * 2) + j)]; int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; float ulpf; ulpf = (java.lang.Math.ulp(args.out)) * ulf; assertEquals(((((((((((((((((("Incorrect output for checkClzShort2" + (relaxed ? "_relaxed" : "")) + " @[") + i) + ", ") + j) + "] with ulf:") + ulf) + ".\n") + "Input inValue:") + (args.inValue)) + "\n") + "Expected output out:") + (args.out)) + "\n") + "Actual output out:") + actualOut) + "\n"), args.out, actualOut, ulpf); } } }<END_MOD>
<START_MOD>public static long getLongField(com.android.tools.perflib.heap.Instance inst, java.lang.String fieldName, long def) { java.lang.Long value = com.android.ahat.InstanceUtils.getLongField(inst, fieldName); return value == null ? def : value; }<END_MOD>
<START_MOD>private void verifyResultsAbsChar2(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { byte[] arrayInValue = new byte[(INPUTSIZE) * 2]; inValue.copyTo(arrayInValue); byte[] arrayOut = new byte[(INPUTSIZE) * 2]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 2; j++) { android.renderscript.cts.TestAbs.ArgumentsCharUchar args = new android.renderscript.cts.TestAbs.ArgumentsCharUchar(); args.inValue = arrayInValue[((i * 2) + j)]; android.renderscript.cts.CoreMathVerifier.computeAbs(args); byte actualOut = arrayOut[((i * 2) + j)]; int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; float ulpf; ulpf = (java.lang.Math.ulp(args.out)) * ulf; assertEquals(((((((((((((((((("Incorrect output for checkAbsChar2" + (relaxed ? "_relaxed" : "")) + " @[") + i) + ", ") + j) + "] with ulf:") + ulf) + ".\n") + "Input inValue:") + (args.inValue)) + "\n") + "Expected output out:") + (args.out)) + "\n") + "Actual output out:") + actualOut) + "\n"), args.out, actualOut, ulpf); } } }<END_MOD>
@java.lang.Override public void onError(int error) { synchronized(<START_MOD>this<END_MOD>) { <START_MOD>mKeepalive<END_MOD> = <START_MOD>null<END_MOD>; <START_MOD>} if ((mUserKeepaliveCallback) != null) mUserKeepaliveCallback<END_MOD>.<START_MOD>onError<END_MOD>(<START_MOD>error<END_MOD>); }
public void testInstall_withMissingBundleVersionFile() throws java.lang.Exception { libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundleBuilder(libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION, "001").clearVersionForTests().buildUnvalidated(); <START_MOD>assertEquals<END_MOD>(<START_MOD>TimeZoneBundleInstaller.INSTALL_FAIL_BAD_BUNDLE_STRUCTURE, <END_MOD>installer.<START_MOD>installWithErrorCode<END_MOD>(bundle.getBytes())); assertNoContentInstalled(); }
<START_MOD>private static java.lang.Object doubleArray(dalvik.system.EmulatedStackFrame.StackFrameReader reader, java.lang.Class<?>[] ptypes, int offset, int length) { double[] arityArray = new double[length]; for (int i = 0; i < length; ++i) { java.lang.Class<?> argumentType = ptypes[(i + offset)]; switch (sun.invoke.util.Wrapper.basicTypeChar(argumentType)) { case 'D' : { arityArray[i] = reader.nextDouble(); break; } case 'F' : { arityArray[i] = reader.nextFloat(); break; } case 'J' : { arityArray[i] = reader.nextLong(); break; } case 'I' : { arityArray[i] = reader.nextInt(); break; } case 'S' : { arityArray[i] = reader.nextShort(); break; } case 'B' : { arityArray[i] = reader.nextByte(); break; } default : { arityArray[i] = ((double) (reader.nextReference(argumentType))); break; } } } return arityArray; }<END_MOD>
@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add("name", mName).add("minSdkVersion", mMinSdkVersion).add("targetSdkVersion", mTargetSdkVersion).add("renderscriptTargetApi", mRenderscriptTargetApi).add("renderscriptSupportMode", mRenderscriptSupportMode).add("renderscriptNdkMode", mRenderscriptNdkMode).add("versionCode", mVersionCode).add("versionName", mVersionName).add(<START_MOD>"applicationId"<END_MOD>, <START_MOD>mApplicationId<END_MOD>).add("testPackageName", <START_MOD>mTestApplicationId<END_MOD>).add("testInstrumentationRunner", mTestInstrumentationRunner).add("testHandleProfiling", mTestHandleProfiling).add("testFunctionalTest", mTestFunctionalTest).add("signingConfig", mSigningConfig).add("resConfig", mResourceConfiguration).toString(); }
@java.lang.Override public void run() { try { java.io.File output = java.io.File.createTempFile("predex", ".jar"); output.deleteOnExit(); outputFiles[ii] = output; com.android.builder.internal.compiler.PreDexCache.getCache().preDexLibrary(<START_MOD>mDxExe, <END_MOD>input, output, dexOptions, mBuildToolInfo, false, (ii ==   ? clrWithError : clr)); } catch (java.lang.Exception ignored) { } threadDoneCount.incrementAndGet(); }
<START_MOD>public void test_deleteExtension() throws java.lang.Exception { org.conscrypt.OpenSSLX509Certificate preCert = loadTestCertificate("test-embedded-pre-cert.pem"); org.conscrypt.OpenSSLX509Certificate finalCert = loadTestCertificate("test-embedded-cert.pem"); org.conscrypt.TestUtils.assertEqualByteArrays(preCert.deleteExtension(org.conscrypt.OpenSSLX509CertificateTest.CT_POISON_EXTENSION).getTBSCertificate(), finalCert.deleteExtension(org.conscrypt.OpenSSLX509CertificateTest.CT_SCTLIST_EXTENSION).getTBSCertificate()); }<END_MOD>
public void addDevice(com.android.hierarchyviewerlib.device.<START_MOD>IHvDevice<END_MOD> <START_MOD>hvDevice<END_MOD>) { synchronized(mDeviceMap) { <START_MOD>if (<END_MOD>mDeviceMap.<START_MOD>containsKey<END_MOD>(<START_MOD>hvDevice)) { if (hvDevice.getDevice().isOnline()) { } return; } else { com.android.hierarchyviewerlib.models.DeviceSelectionModel.DeviceInfo info =<END_MOD> new com.android.hierarchyviewerlib.models.DeviceSelectionModel.DeviceInfo(<START_MOD>hvDevice.getWindows(<END_MOD>)); <START_MOD>mDeviceMap<END_MOD>.<START_MOD>put<END_MOD>(<START_MOD>hvDevice, info<END_MOD>); } <START_MOD>} <END_MOD>notifyDeviceConnected(<START_MOD>hvDevice<END_MOD>); }
<START_MOD>public boolean startOpenGlTracing() { boolean canTraceOpenGl = mClientData.hasFeature(ClientData.FEATURE_OPENGL_TRACING); if (!canTraceOpenGl) { return false; } try { com.android.ddmlib.HandleOpenGlTracing.sendStartGlTracing(this); return true; } catch (java.io.IOException e) { com.android.ddmlib.Log.w("ddms", "Start OpenGL Tracing failed"); return false; } }<END_MOD>
@java.lang.Override public boolean validate() { if ((myState.get(com.google.gct.idea.samples.SampleImportWizardPath.SAMPLE_KEY)) == null) { setErrorHtml(<START_MOD>com.google.gct.idea.util.GctBundle.samplesMsg("sample.browser.please.select"));<END_MOD> return false; } setErrorHtml(""); return true; }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.android.cellbroadcastreceiver.CellBroadcastAlertService.MessageIdAndScope) { com.android.cellbroadcastreceiver.CellBroadcastAlertService.MessageIdAndScope other = ((com.android.cellbroadcastreceiver.CellBroadcastAlertService.MessageIdAndScope) (o)); return ((<START_MOD>(<END_MOD>mMessageId) == (other.mMessageId<START_MOD>)) && ((mSerialNumber) == (other.mSerialNumber)<END_MOD>)) && (mLocation.equals(other.mLocation)); } return false; }
<START_MOD>@org.junit.Test public void testGetImei() { java.lang.String imei = mTelephonyManager.getImei(); verifyImei(imei, mTelephonyManager.getDeviceId()); }<END_MOD>
<START_MOD>public static void kill(int pid, int signal) throws android.os.ErrnoException { Libcore.os.kill(pid, signal); }<END_MOD>
@java.lang.Override @com.android.annotations.NonNull @java.lang.SuppressWarnings("deprecation") public java.util.Properties loadProperties(@com.android.annotations.NonNull java.io.File file) { java.util.Properties props = new java.util.Properties(); <START_MOD>com.google.common.io.Closer closer = com.google.common.io.Closer.create(); try { <END_MOD>java.io.FileInputStream fis = <START_MOD>closer.register(new java.io.FileInputStream(file)); props.load(fis); } catch (java.io.IOException ignore) { } finally {<END_MOD> try { <START_MOD>closer.close(); } catch (java.io.IOException e) { } } return<END_MOD> props<START_MOD>; }<END_MOD>
public final void testPkgDescBuildTool_Preview() { com.android.sdklib.repository.descriptors.IPkgDesc p = PkgDesc.Builder.newBuildTool(new com.android.sdklib.repository.FullRevision(1, 2, 3, 4)).create(); assertEquals(PkgType.PKG_BUILD_TOOLS, p.getType()); assertTrue(p.hasFullRevision()); assertEquals(new com.android.sdklib.repository.FullRevision(1, 2, 3, 4), p.getFullRevision()); assertTrue(p.getFullRevision().isPreview()); assertFalse(p.hasMajorRevision()); assertNull(p.getMajorRevision()); assertFalse(p.hasAndroidVersion()); assertNull(p.getAndroidVersion()); assertFalse(p.hasPath()); assertNull(p.getPath()); assertFalse(p.hasMinToolsRev()); assertNull(p.getMinToolsRev()); assertFalse(p.hasMinPlatformToolsRev()); assertNull(p.getMinPlatformToolsRev()); assertEquals("build-tools-1.2.3_rc4", p.getInstallId()); assertEquals(com.android.sdklib.io.FileOp.append(mRoot, "build-tools", <START_MOD>"build-tools-1.2.3"<END_MOD>), p.getCanonicalInstallFolder(mRoot)); assertEquals( Type=build_tools FullRev=1.2.3 rc4> p.toString()); assertEquals( SDK Build-Tools 1.2.3 rc4 p.getListDescription()); }
<START_MOD>private void registerVendorSpecificCommand(java.lang.String commandName, android.bluetooth.AtParser parser) { parser.register(commandName, new com.android.phone.BluetoothHandsfree.VendorSpecificCommandHandler(commandName)); }<END_MOD>
<START_MOD>@org.junit.Test public void getBattery_badResponse() throws java.lang.Exception { com.android.ddmlib.IDevice mockDevice = org.easymock.EasyMock.createMock(com.android.ddmlib.IDevice.class); com.android.ddmlib.DeviceTest.injectShellResponse(mockDevice, "blargh"); com.android.ddmlib.DeviceTest.injectShellResponse(mockDevice, "blargh"); org.easymock.EasyMock.replay(mockDevice); com.android.ddmlib.BatteryFetcher fetcher = new com.android.ddmlib.BatteryFetcher(mockDevice); org.junit.Assert.assertNull(fetcher.getBattery(0, java.util.concurrent.TimeUnit.MILLISECONDS).get()); }<END_MOD>
<START_MOD>@java.lang.Override public void mergeInputLibraries(@javax.annotation.Nonnull java.util.List<? extends com.android.jack.library.InputJackLibrary> inputLibraries) { assert sectionVFS.isEmpty(); java.util.List<com.android.sched.vfs.VFS> inputLibVfsList = new java.util.ArrayList<com.android.sched.vfs.VFS>(); for (com.android.jack.library.InputLibrary inputLib : inputLibraries) { inputLibVfsList.add(((com.android.jack.library.v0001.InputJackLibraryImpl) (inputLib)).getVfs()); } if ((vfs) instanceof com.android.sched.vfs.ReadWriteZipFS) { com.android.sched.vfs.ReadWriteZipFS zipVFS = ((com.android.sched.vfs.ReadWriteZipFS) (vfs)); com.android.sched.vfs.VFS previousWorkVfs = zipVFS.getWorkVFS(); inputLibVfsList.add(0, previousWorkVfs); zipVFS.setWorkVFS(new com.android.sched.vfs.UnionVFS(inputLibVfsList)); } else { inputLibVfsList.add(0, vfs); vfs = new com.android.sched.vfs.UnionVFS(inputLibVfsList); } }<END_MOD>
private void readHeader(com.android.jack.dx.io.DexBuffer.Section headerIn) { byte[] magic = headerIn.readByteArray(8); if (!(com.android.jack.dx.dex.DexFormat.isSupportedDexMagic(magic))) { throw new com.android.jack.dx.util.DexException(( magic:   + (java.util.Arrays.toString(magic)))); } apiLevel = com.android.jack.dx.dex.DexFormat.magicToApi(magic); signature = headerIn.readByteArray(20); fileSize = headerIn.readInt(); int headerSize = headerIn.readInt(); if (headerSize != (com.android.jack.dx.dex.SizeOf.getHeaderSize(apiLevel))) { throw new com.android.jack.dx.util.DexException(( header: 0x + (java.lang.Integer.toHexString(headerSize)))); } int endianTag = headerIn.readInt(); if (endianTag != (DexFormat.ENDIAN_TAG)) { throw new com.android.jack.dx.util.DexException(( endian tag: 0x + (java.lang.Integer.toHexString(endianTag)))); } linkSize = headerIn.readInt(); linkOff = headerIn.readInt(); mapList.off = headerIn.readInt(); if ((mapList.off) == 0) { throw new com.android.jack.dx.util.DexException( merge dex files that do not contain a map } stringIds.size = headerIn.readInt(); stringIds.off = headerIn.readInt(); typeIds.size = headerIn.readInt(); typeIds.off = headerIn.readInt(); protoIds.size = headerIn.readInt(); protoIds.off = headerIn.readInt(); fieldIds.size = headerIn.readInt(); fieldIds.off = headerIn.readInt(); methodIds.size = headerIn.readInt(); methodIds.off = headerIn.readInt(); classDefs.size = headerIn.readInt(); classDefs.off = headerIn.readInt(); dataSize = headerIn.readInt(); dataOff = headerIn.readInt(); }
<START_MOD>public static android.os.StructTimeval getsockoptTimeval(java.io.FileDescriptor fd, int level, int option) throws android.os.ErrnoException { return Libcore.os.getsockoptTimeval(fd, level, option); }<END_MOD>
@java.lang.Override public void init() { super.init(); initSamplesTree(); register(com.google.gct.idea.samples.SampleImportWizardPath.SAMPLE_URL, myUrlField, new com.google.gct.idea.samples.ComponentBinding<java.lang.String, com.intellij.ui.HyperlinkLabel>() { @java.lang.Override public void setValue(@org.jetbrains.annotations.Nullable java.lang.String newValue, @org.jetbrains.annotations.NotNull com.intellij.ui.HyperlinkLabel component) { component.setHyperlinkTarget(newValue); newValue = (com.intellij.openapi.util.text.StringUtil.isEmpty(newValue)) ? "" : <START_MOD>com.google.gct.idea.util.GctBundle.samplesMsg("sample.browse.source");<END_MOD> component.setHyperlinkText(newValue); } }); register(com.google.gct.idea.samples.SampleBrowserStep.SAMPLE_SCREENSHOT, myScreenshotHtmlPanel, new com.google.gct.idea.samples.SampleBrowserStep.EditorPaneComponentBinding()); registerValueDeriver(com.google.gct.idea.samples.SampleImportWizardPath.SAMPLE_URL, new com.google.gct.idea.samples.SampleBrowserStep.SampleUrlValueDeriver()); registerValueDeriver(com.google.gct.idea.samples.SampleBrowserStep.SAMPLE_SCREENSHOT, new com.google.gct.idea.samples.SampleBrowserStep.ImageListToStringDeriver()); registerValueDeriver(com.google.gct.idea.samples.KEY_DESCRIPTION, new com.google.gct.idea.samples.SampleBrowserStep.DescriptionValueDeriver()); mySearchBox.addDocumentListener(new com.intellij.ui.DocumentAdapter() { @java.lang.Override protected void textChanged(javax.swing.event.DocumentEvent e) { try { java.lang.String keyword = e.getDocument().getText(0, e.getDocument().getLength()); mySampleTreeManager.filterTree(keyword); } catch (javax.swing.text.BadLocationException e1) { } } }); myUrlField.setOpaque(false); <START_MOD>myDescriptionPanel.setBackground(com.intellij.util.ui.UIUtil.getTextFieldBackground()); }<END_MOD>
<START_MOD>static java.nio.CharArrayBuffer copy(java.nio.CharArrayBuffer other, int markOfOther, boolean isReadOnly) { java.nio.CharArrayBuffer buf = new java.nio.CharArrayBuffer(other.capacity(), other.backingArray, other.arrayOffset, isReadOnly); buf.limit = other.limit; buf.position = other.position(); buf.mark = markOfOther; return buf; }<END_MOD>
<START_MOD>public static java.util.zip.ZipFile.EocdRecord parseZip64EocdRecord(java.io.RandomAccessFile raf, long eocdRecordOffset, int commentLength) throws java.io.IOException { raf.seek(eocdRecordOffset); final int signature = java.lang.Integer.reverseBytes(raf.readInt()); if (signature != (java.util.zip.Zip64.ZIP64_EOCD_RECORD_SIGNATURE)) { throw new java.util.zip.ZipException(("Invalid zip64 eocd record offset, sig=" + (java.lang.Integer.toHexString(signature)))); } raf.skipBytes(12); byte[] zip64Eocd = new byte[java.util.zip.Zip64.ZIP64_EOCD_RECORD_EFFECTIVE_SIZE]; raf.readFully(zip64Eocd); java.nio.ByteBuffer buf = java.nio.ByteBuffer.wrap(zip64Eocd).order(java.nio.ByteOrder.LITTLE_ENDIAN); int diskNumber = buf.getInt(); int diskWithCentralDirStart = buf.getInt(); long numEntries = buf.getLong(); long totalNumEntries = buf.getLong(); buf.getLong(); long centralDirOffset = buf.getLong(); if (((numEntries != totalNumEntries) || (diskNumber != 0)) || (diskWithCentralDirStart != 0)) { throw new java.util.zip.ZipException("Spanned archives not supported"); } return new java.util.zip.ZipFile.EocdRecord(numEntries, centralDirOffset, commentLength); }<END_MOD>
public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(<START_MOD>mUmtsRscp); out.writeInt(<END_MOD>mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mLteRsrpBoost); out.writeInt(mTdScdmaRscp); out.writeInt((isGsm ? 1 : 0)); out.writeInt((mUseOnlyRsrpForLteLevel ? 1 : 0)); <START_MOD>for (int i = 0; i < (android.telephony.SignalStrength.UMTS_RSCP_THRESHOLDS_NUM); i++) { out.writeInt(mUmtsRscpThresholds[i]); <END_MOD>}<START_MOD> }<END_MOD>
public int write(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws <START_MOD>android.os.ErrnoException, <END_MOD>java.io.InterruptedIOException { return writeBytes(fd, bytes, byteOffset, byteCount); }
public void mlock(long address, long byteCount) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { os.mlock(address, byteCount); }
public void testReceiveSend_Block_Oversize_S2C() throws java.lang.Exception { this.channel1.socket().bind(<START_MOD>datagramSocket2Address<END_MOD>); sendByDatagramSocket("0123456789", <START_MOD>datagramSocket2Address<END_MOD>); <START_MOD>receiveOnChannel1AndClose<END_MOD>(5, <START_MOD>datagramSocket2Address<END_MOD>, "01234"); }
private void buildAlloc(@javax.annotation.Nonnull com.android.jack.dx.rop.code.RegisterSpec destReg, @javax.annotation.Nonnull com.android.jack.ir.ast.JAlloc alloc, @javax.annotation.Nonnull com.android.jack.dx.rop.code.SourcePosition sourcePosition) { com.android.jack.dx.rop.type<START_MOD>.Type type<END_MOD> = com.android.jack.backend.dex.rop.RopHelper.<START_MOD>convertTypeToDx<END_MOD>(alloc.getInstanceType()); com.android.jack.dx.rop.code.Rop rop = com.android.jack.dx.rop.code.Rops.NEW_INSTANCE; addInstruction(new com.android.jack.dx.rop.code.ThrowingCstInsn(rop, sourcePosition, com.android.jack.dx.rop.code.RegisterSpecList.EMPTY, getCatchTypes(), type)); addMoveResultPseudoAsExtraInstruction(destReg, sourcePosition); }
public void posix_fallocate(java.io.FileDescriptor fd, long offset, long length) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
<START_MOD>public void registerForLocked(android.os.Handler h, int what, java.lang.Object obj) { android.os.Registrant r = new android.os.Registrant(h, what, obj); mPinLockedRegistrants.add(r); notifyPinLockedRegistrantsIfNeeded(r); }<END_MOD>
<START_MOD>synchronized void nIncScriptSetVarF(long id, int slot, float val) { validate(); rsnIncScriptSetVarF(mContext, id, slot, val); }<END_MOD>
<START_MOD>public final void testPreviewVersion() { com.android.sdklib.internal.repository.packages.PreviewVersion p = new com.android.sdklib.internal.repository.packages.PreviewVersion(5); assertEquals(5, p.getMajor()); assertEquals(PreviewVersion.IMPLICIT_MINOR_REV, p.getMinor()); assertEquals(PreviewVersion.IMPLICIT_MICRO_REV, p.getMicro()); assertEquals(PreviewVersion.PREVIEW_NOT_SPECIFIED, p.getPreview()); assertFalse(p.isPreview()); p = new com.android.sdklib.internal.repository.packages.PreviewVersion(6, 7, 8); assertEquals(6, p.getMajor()); assertEquals(7, p.getMinor()); assertEquals(8, p.getMicro()); assertEquals(0, p.getPreview()); assertFalse(p.isPreview()); p = new com.android.sdklib.internal.repository.packages.PreviewVersion(10, 11, 12, PreviewVersion.PREVIEW_NOT_SPECIFIED); assertEquals(10, p.getMajor()); assertEquals(11, p.getMinor()); assertEquals(12, p.getMicro()); assertEquals(0, p.getPreview()); assertFalse(p.isPreview()); p = new com.android.sdklib.internal.repository.packages.PreviewVersion(10, 11, 12, 13); assertEquals(10, p.getMajor()); assertEquals(11, p.getMinor()); assertEquals(12, p.getMicro()); assertEquals(13, p.getPreview()); assertTrue(p.isPreview()); }<END_MOD>
private boolean checkForAndHandleModeChange(android.os.Message message) { switch (message.what) { case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_START_CLIENT_MODE : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, (( from   + (getCurrentMode())) +   to ClientMode mModeStateMachine.transitionTo(mClientModeState); break; case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_START_SCAN_ONLY_MODE : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, (( from   + (getCurrentMode())) +   to ScanOnlyMode mModeStateMachine.transitionTo(mScanOnlyModeState); break; case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_START_SOFT_AP_MODE : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, (( from   + (getCurrentMode())) +   to SoftApMode mModeStateMachine.transitionTo(mSoftAPModeState); break; case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_DISABLE_WIFI : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, ( wifi, calling exit on   + (getCurrentMode()))); mModeStateMachine.getCurrentState().exit(); tearDownInterfaces(); mModeStateMachine.quit(); mModeStateMachine = null; <START_MOD>if (!(mApConfigQueue.isEmpty())) { android.util.Log.e(com.android.server.wifi.WifiStateMachinePrime.TAG,   config queue was not empty. mApConfigQueue.clear(); } <END_MOD>break; default : return false; } return true; }
<START_MOD>@java.lang.Override public java.io.File call() throws java.lang.Exception { return new java.io.File(scope.getGlobalScope().getGeneratedDir(), "pngs"); }<END_MOD>
<START_MOD>private boolean isDeviceCharging() { android.os.BatteryManager bm = ((android.os.BatteryManager) (mPhone.getContext().getSystemService(Context.BATTERY_SERVICE))); return bm.isCharging(); }<END_MOD>
@com.android.annotations.NonNull java.util.<START_MOD>Collection<END_MOD><? extends com.android.builder.model.AndroidLibrary> getLibraryDependencies();
<START_MOD>@org.junit.Test(timeout = (15 * 60) * 1000) <END_MOD>public void test_getParams() throws java.lang.Exception { java.security.KeyPairGenerator kg = java.security.KeyPairGenerator.getInstance("DH"); kg.initialize(1024); java.security.KeyPair kp1 = kg.genKeyPair(); java.security.KeyPair kp2 = kg.genKeyPair(); javax.crypto.interfaces.DHPublicKey pk1 = ((javax.crypto.interfaces.DHPublicKey) (kp1.getPublic())); javax.crypto.interfaces.DHPublicKey pk2 = ((javax.crypto.interfaces.DHPublicKey) (kp2.getPublic())); assertTrue(pk1.getY().getClass().getCanonicalName().equals("java.math.BigInteger")); assertTrue(pk2.getParams().getClass().getCanonicalName().equals("javax.crypto.spec.DHParameterSpec")); assertFalse(pk1.equals(pk2)); assertTrue(pk1.getY().equals(pk1.getY())); }
<START_MOD>@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.ChangeDefaultLocaleTest.class) @org.junit.Test public void testRunner_ChangeDefaultLocaleTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().success("testDefault_Locale_CANADA").success("testDefault_Locale_CHINA").completedNormally(); }<END_MOD>
public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
private boolean stmtCanBeOptimized(@javax.annotation.Nonnull com.android.jack.ir.ast.JStatement s1, @javax.annotation.Nonnull com.android.jack.analysis.DefinitionMarker defOfa) { if (!(defOfa.hasValue())) <START_MOD>{ return false; } if <END_MOD>((defOfa.getValue()) instanceof com.android.jack.ir.ast.JVariableRef)<START_MOD> {<END_MOD> com.android.jack.ir.ast.JVariableRef varRefb = ((com.android.jack.ir.ast.JVariableRef) (defOfa.getValue())); com.android.jack.cfg.BasicBlock bbOfs1 = com.android.jack.util.ControlFlowHelper.getBasicBlock(s1); com.android.jack.ir.ast.JStatement s0 = defOfa.getStatement(); assert s0 != null; com.android.jack.cfg.BasicBlock bbOfs0 = com.android.jack.util.ControlFlowHelper.getBasicBlock(s0); com.android.jack.ir.ast.JVariable b = varRefb.getTarget(); if (bbOfs0 == bbOfs1) { if (!(hasLocalDef(b, bbOfs0, s0, s1))) { return true; } } else { java.util.List<com.android.jack.analysis.DefinitionMarker> defsOfbUseFroms0 = com.android.jack.util.DefsAndUsesChainOptimizationTools.getUsedDefinitions(varRefb); if ((((defsOfbUseFroms0.size()) == 1) && (bbHasOnlyDefinitions(bbOfs1, b, defsOfbUseFroms0))) && (!(hasLocalDef(b, bbOfs1, null, s1)))) { return true; } } <START_MOD>} else if (isLiteralWithoutSideEffect(defOfa.getValue())) { <END_MOD>return <START_MOD>true; } return <END_MOD>false; }
private java.lang.invoke.MethodHandle findAccessor(java.lang.reflect.Field field, java.lang.Class<?> refc, java.lang.Class<?> fieldType, int kind, boolean performAccessChecks) throws java.lang.IllegalAccessException { if (<START_MOD>performAccessChecks) { checkAccess(refc, field.getDeclaringClass(), field.getModifiers(), field.getName()); } final boolean isStaticKind = (kind == (SGET)) || (kind == (SPUT)); final int modifiers = field.getModifiers(); if ((java.lang.reflect.Modifier.isStatic(modifiers)) != isStaticKind) { java.lang.String reason = (((   + field) +   is   + (isStaticKind ?     : "")) + "static"; throw new java.lang.IllegalAccessException(reason); } final boolean isSetterKind = (kind == (IPUT)) || (kind == (SPUT)); if (((java.lang.reflect.Modifier.isFinal(modifiers)) && isSetterKind) && (<END_MOD>!<START_MOD>(field.isAccessible()))<END_MOD>) { <START_MOD>throw new java.lang.IllegalAccessException(((   + field) +   is final } final java.lang.invoke.MethodType methodType; switch (kind) { case SGET : methodType = java.lang.invoke.MethodType.methodType(fieldType); break; case SPUT : methodType = java.lang.invoke.MethodType.methodType(void.class, fieldType); break; case IGET : methodType = java.lang.invoke.MethodType.methodType(fieldType, <END_MOD>refc<START_MOD>); break; case IPUT : methodType = java.lang.invoke.MethodType.methodType(void.class, refc, fieldType); break; default : throw new java.lang.IllegalArgumentException(( kind   + kind<END_MOD>)); } <START_MOD>return<END_MOD> new java.lang.<START_MOD>invoke.MethodHandleImpl(field.getArtField(), kind, methodType<END_MOD>); }
@java.lang.Override public void checkValue(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull com.android.sched.vfs.<START_MOD>OutputRootVDir<END_MOD> dir) { }
private com.android.build.gradle.internal.tasks.PrepareLibraryTask maybeCreatePrepareLibraryTask(@com.android.annotations.NonNull com.android.build.gradle.internal.dependency.LibraryDependencyImpl library, @com.android.annotations.NonNull org.gradle.api.Project project) { com.android.build.gradle.internal.dependency.LibraryDependencyImpl key = library.getNonTransitiveRepresentation(); com.android.build.gradle.internal.tasks.PrepareLibraryTask prepareLibraryTask = prepareTaskMap.get(key); if (prepareLibraryTask == null) { java.lang.String bundleName = org.gradle.util.GUtil.toCamelCase(library.getName().replaceAll("\\:",     <START_MOD>java.lang.System.out.println(((("\t" + bundleName) +     + (library.isOptional()))); <END_MOD>prepareLibraryTask = project.getTasks().create((("prepare" + bundleName) + "Library"), com.android.build.gradle.internal.tasks.PrepareLibraryTask.class); prepareLibraryTask.setDescription((   + (library.getName()))); prepareLibraryTask.setBundle(library.getBundle()); prepareLibraryTask.setExplodedDir(library.getBundleFolder()); prepareTaskMap.put(key, prepareLibraryTask); } return prepareLibraryTask; }
@org.junit.Test public void testEnableDisableNetworkFailedDueToPermissionDenied() throws java.lang.Exception { android.net.wifi.WifiConfiguration openNetwork = com.android.server.wifi.WifiConfigurationTestUtil.createOpenNetwork(); com.android.server.wifi.NetworkUpdateResult result = verifyAddNetworkToWifiConfigManager(openNetwork); assertTrue(mWifiConfigManager.enableNetwork(result.getNetworkId(), false, com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)); android.net.wifi.WifiConfiguration retrievedNetwork = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()); android.net.wifi.WifiConfiguration.NetworkSelectionStatus retrievedStatus = retrievedNetwork.getNetworkSelectionStatus(); assertTrue(retrievedStatus.isNetworkEnabled()); verifyUpdateNetworkStatus(retrievedNetwork, WifiConfiguration.Status.ENABLED); doAnswer(new android.app.test.MockAnswerUtil.AnswerWithArguments() { public int answer(java.lang.String permName, int uid) throws java.lang.Exception { if (uid == (com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)) { return android.content.pm.PackageManager.PERMISSION_GRANTED; } return android.content.pm.PackageManager.PERMISSION_DENIED; } }).when(mFrameworkFacade).checkUidPermission(anyString(), anyInt()); <START_MOD>when(mWifiPermissionsUtil.checkConfigOverridePermission(anyInt())).thenReturn(false); <END_MOD>assertFalse(mWifiConfigManager.disableNetwork(result.getNetworkId(), com.android.server.wifi.WifiConfigManagerTest.TEST_UPDATE_UID)); retrievedStatus = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()).getNetworkSelectionStatus(); assertTrue(retrievedStatus.isNetworkEnabled()); assertEquals(WifiConfiguration.Status.ENABLED, retrievedNetwork.status); }
android.content.pm.ActivityInfo resolveActivity(android.content.Intent intent, java.lang.String resolvedType, int startFlags, android.app.ProfilerInfo profilerInfo, int userId) { android.content.pm.ActivityInfo aInfo; try { android.content.pm.ResolveInfo rInfo = android.app.AppGlobals.getPackageManager().resolveIntent(intent, resolvedType, ((android.content.pm.PackageManager.MATCH_DEFAULT_ONLY) | (ActivityManagerService.STOCK_PM_FLAGS)), userId); aInfo = (rInfo != null) ? rInfo.activityInfo : null; } catch (android.os.RemoteException e) { aInfo = null; } if (aInfo != null) { intent.setComponent(new android.content.ComponentName(aInfo.applicationInfo.packageName, aInfo.name)); if ((startFlags & (android.app.ActivityManager.START_FLAG_DEBUG)) != 0) { if (!(aInfo.processName.equals("system"))) { mService.setDebugApp(aInfo.processName, true, false); } } if ((startFlags & (android.app.ActivityManager.START_FLAG_OPENGL_TRACES)) != 0) { if (!(aInfo.processName.equals("system"))) { mService.setOpenGlTraceApp(aInfo.applicationInfo, aInfo.processName); } } if (<START_MOD>(startFlags & (android.app.ActivityManager.START_FLAG_TRACK_ALLOCATION)) != 0) { if (!(aInfo.processName.equals("system"))) { mService.setTrackAllocationApp(aInfo.applicationInfo, aInfo.processName); } } if (<END_MOD>profilerInfo != null) { if (!(aInfo.processName.equals("system"))) { mService.setProfileApp(aInfo.applicationInfo, aInfo.processName, profilerInfo); } } } return aInfo; }
<START_MOD>public static byte[] generateApkSigningBlock(com.android.apksig.internal.util.Pair<byte[], java.lang.Integer> apkSignatureSchemeV2Pair) { byte[] apkSignatureSchemeV2Block = apkSignatureSchemeV2Pair.getFirst(); int apkSignatureSchemev2Id = apkSignatureSchemeV2Pair.getSecond(); int resultSize = ((((8 + 8) + 4) + (apkSignatureSchemeV2Block.length)) + 8) + 16; java.nio.ByteBuffer paddingPair = null; if ((resultSize % (com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES)) != 0) { int padding = (com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES) - (resultSize % (com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES)); if (padding < 12) { padding += com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES; } paddingPair = java.nio.ByteBuffer.allocate(padding).order(java.nio.ByteOrder.LITTLE_ENDIAN); paddingPair.putLong((padding - 8)); paddingPair.putInt(com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.VERITY_PADDING_BLOCK_ID); paddingPair.rewind(); resultSize += padding; } java.nio.ByteBuffer result = java.nio.ByteBuffer.allocate(resultSize); result.order(java.nio.ByteOrder.LITTLE_ENDIAN); long blockSizeFieldValue = resultSize - 8L; result.putLong(blockSizeFieldValue); long pairSizeFieldValue = 4L + (apkSignatureSchemeV2Block.length); result.putLong(pairSizeFieldValue); result.putInt(apkSignatureSchemev2Id); result.put(apkSignatureSchemeV2Block); if (paddingPair != null) { result.put(paddingPair); } result.putLong(blockSizeFieldValue); result.put(com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.APK_SIGNING_BLOCK_MAGIC); return result.array(); }<END_MOD>
public void createAndroidTasks() { variantFactory.validateModel(this); variantFactory.preVariantWork(project); final com.android.build.gradle.internal.TaskFactory tasks = new com.android.build.gradle.internal.TaskContainerAdaptor(project.getTasks()); if (variantDataList.isEmpty()) { populateVariantDataList(); } com.android.builder.profile.ThreadRecorder.get().record(ExecutionType.VARIANT_MANAGER_CREATE_TESTS_TASKS, new com.android.builder.profile.Recorder.Block<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { taskManager.createTopLevelTestTasks(tasks, (!(productFlavors.isEmpty()))); return null; } }); for (final com.android.build.gradle.internal.variant.BaseVariantData<? extends com.android.build.gradle.internal.variant.BaseVariantOutputData> variantData : variantDataList) { <START_MOD>tasks.named("assemble", new org.gradle.api.Action<org.gradle.api.Task>() { @java.lang.Override public void execute(org.gradle.api.Task task) { task.dependsOn(buildTypes.get(variantData.getVariantConfiguration().getBuildType().getName()).getAssembleTask()); } }); <END_MOD>com.android.build.gradle.internal.profile.SpanRecorders.record(project, ExecutionType.VARIANT_MANAGER_CREATE_TASKS_FOR_VARIANT, new com.android.builder.profile.Recorder.Block<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { createTasksForVariantData(tasks, variantData); return null; } }, new com.android.builder.profile.Recorder.Property(com.android.build.gradle.internal.profile.SpanRecorders.VARIANT, variantData.getName())); } createApiObjects(); taskManager.createReportTasks(variantDataList); }
<START_MOD>private libcore.javax.net.ssl.TestSSLContext createTestSSLContext() { libcore.javax.net.ssl.TestSSLContext result = libcore.javax.net.ssl.TestSSLContext.create(); testSSLContextsToClose.add(result); return result; }<END_MOD>
<START_MOD>public java.io.File[] getDexFiles() { return dexFiles; }<END_MOD>
public com.android.sdklib.internal.repository.packages.Package.UpdateInfo canBeUpdatedBy(com.android.sdklib.internal.repository.packages.Package replacementPackage) { if (replacementPackage == null) { return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.INCOMPATIBLE; } if ((sameItemAs(replacementPackage)) == false) { return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.INCOMPATIBLE; } if ((replacementPackage.getRevision()<START_MOD>.compareTo<END_MOD>(this.getRevision())<START_MOD>) > 0<END_MOD>) { return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.UPDATE; } return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.NOT_UPDATE; }
<START_MOD>@org.junit.Test public void testConvertHalCellInfoList_1_2ForWcdmaWithEmptyOpeartorInfo() throws java.lang.Exception { java.util.ArrayList<android.telephony.CellInfo> ret = getCellInfoListForWcdma(com.android.internal.telephony.RILTest.MCC_STR, com.android.internal.telephony.RILTest.MNC_STR, com.android.internal.telephony.RILTest.EMPTY_ALPHA_LONG, com.android.internal.telephony.RILTest.EMPTY_ALPHA_SHORT); junit.framework.Assert.assertEquals(1, ret.size()); android.telephony.CellInfoWcdma cellInfoWcdma = ((android.telephony.CellInfoWcdma) (ret.get(0))); android.telephony.CellInfoWcdma expected = new android.telephony.CellInfoWcdma(); expected.setRegistered(false); expected.setTimeStamp(com.android.internal.telephony.RILTest.TIMESTAMP); expected.setTimeStampType(com.android.internal.telephony.RILTest.RIL_TIMESTAMP_TYPE_OEM_RIL); android.telephony.CellIdentityWcdma ci = new android.telephony.CellIdentityWcdma(com.android.internal.telephony.RILTest.LAC, com.android.internal.telephony.RILTest.CID, com.android.internal.telephony.RILTest.PSC, com.android.internal.telephony.RILTest.UARFCN, com.android.internal.telephony.RILTest.MCC_STR, com.android.internal.telephony.RILTest.MNC_STR, com.android.internal.telephony.RILTest.EMPTY_ALPHA_LONG, com.android.internal.telephony.RILTest.EMPTY_ALPHA_SHORT); android.telephony.CellSignalStrengthWcdma cs = new android.telephony.CellSignalStrengthWcdma(com.android.internal.telephony.RILTest.SIGNAL_STRENGTH, com.android.internal.telephony.RILTest.BIT_ERROR_RATE); expected.setCellIdentity(ci); expected.setCellSignalStrength(cs); junit.framework.Assert.assertEquals(expected, cellInfoWcdma); }<END_MOD>
public void test_DomainMatches() { boolean match = java.net.HttpCookie.domainMatches("hostname", "hostname"); assertFalse(match); match = java.net.HttpCookie.domainMatches(".com", "test.com"); assertFalse(match); match = java.net.HttpCookie.domainMatches(".com.", "test.com"); assertFalse(match); match = java.net.HttpCookie.domainMatches(".local", "hostname"); assertTrue(match); match = java.net.HttpCookie.domainMatches(".c.d", "a.b.c.d"); assertTrue(match); match = java.net.HttpCookie.domainMatches("c.d", "a.b.c.d"); assertFalse(match); match = java.net.HttpCookie.domainMatches(".foo.com", "y.x.foo.com"); assertTrue(match); match = java.net.HttpCookie.domainMatches(".foo.com", "x.foo.com"); assertTrue(match); match = java.net.HttpCookie.domainMatches(".local", "hostname.local"); assertTrue(match); match = java.net.HttpCookie.domainMatches(".ajax.com", "a.ajax.com"); assertTrue(match); match = java.net.HttpCookie.domainMatches(".ajax.com", "a.AJAX.com"); assertTrue(match); match = java.net.HttpCookie.domainMatches("...", "test..."); assertFalse(match); match = java.net.HttpCookie.domainMatches(".ajax.com", "b.a.AJAX.com"); assertTrue(match); match = java.net.HttpCookie.domainMatches(".a", "b.a"); assertFalse(match); match = java.net.HttpCookie.domainMatches(".ajax.com", null); assertFalse(match); match = java.net.HttpCookie.domainMatches(null, null); assertFalse(match); match = java.net.HttpCookie.domainMatches(null, "b.a.AJAX.com"); assertFalse(match); <START_MOD>match = java.net.HttpCookie.domainMatches("foo.local", "foo"); assertTrue(match); <END_MOD>}
<START_MOD>public com.android.server.wifi.hotspot2.ANQPNetworkKey onRequestCompleted(long bssid, boolean success) { if (success) { mHoldOffInfo.remove(bssid); } return mPendingQueries.remove(bssid); }<END_MOD>
@java.lang.Override public java.lang.String getContentType() { <START_MOD>getHeaderField<END_MOD>(<START_MOD>0<END_MOD>); <START_MOD>final<END_MOD> java.lang.String <START_MOD>contentTypeHeader<END_MOD> = <START_MOD>headerKeysAndValues[libcore<END_MOD>.net.url.<START_MOD>FileURLConnection.CONTENT_TYPE_IDX]<END_MOD>; <START_MOD>return<END_MOD> <START_MOD>contentTypeHeader<END_MOD> != null <START_MOD>?<END_MOD> <START_MOD>contentTypeHeader<END_MOD> <START_MOD>:<END_MOD> "content/unknown"; }
<START_MOD>public void onCellularDataIndicatorChanged(boolean enabled) { send(android.telephony.PhoneStateListener.LISTEN_CELLULAR_DATA_INDICATOR, 0, 0, enabled); }<END_MOD>
<START_MOD>private com.android.tools.perflib.heap.Value readValue(java.io.DataInputStream stream, com.android.tools.perflib.heap.Instance instance, com.android.tools.perflib.heap.Type type) throws java.io.IOException { final com.android.tools.perflib.heap.Value value = new com.android.tools.perflib.heap.Value(instance); switch (type) { case OBJECT : final long id = readId(stream); mPost.add(new com.android.tools.perflib.heap.HprofParser.PostOperation(com.android.tools.perflib.heap.HprofParser.RESOLVE_INSTANCES, new java.util.concurrent.Callable() { @java.lang.Override public java.lang.Object call() throws java.lang.Exception { value.setValue(mState.findReference(id)); return null; } })); break; case BOOLEAN : value.setValue(stream.readBoolean()); break; case CHAR : value.setValue(stream.readChar()); break; case FLOAT : value.setValue(stream.readFloat()); break; case DOUBLE : value.setValue(stream.readDouble()); break; case BYTE : value.setValue(stream.readByte()); break; case SHORT : value.setValue(stream.readShort()); break; case INT : value.setValue(stream.readInt()); break; case LONG : value.setValue(stream.readLong()); break; } return value; }<END_MOD>
<START_MOD>private static java.lang.String getGenericLabel(com.android.sdklib.devices.Device d) { java.lang.String name = d.getName(); if (name.equals("3.7 FWVGA slider")) { name = "3.7in FWVGA slider"; } java.util.regex.Matcher matcher = com.android.sdkuilib.internal.widgets.AvdCreationPresenter.PATTERN.matcher(name); if (matcher.matches()) { java.lang.String size = matcher.group(1); java.lang.String n = matcher.group(2); int dot = size.indexOf('.'); if (dot == (-1)) { size = size + ".0"; dot = (size.length()) - 2; } for (int i = 0; i < (2 - dot); i++) { size = ' ' + size; } name = (size + "\" ") + n; } return java.lang.String.format(java.util.Locale.US, "%1$s (%2$s)", name, com.android.sdkuilib.internal.widgets.AvdCreationPresenter.getResolutionString(d)); }<END_MOD>
<START_MOD>public android.icu.util.TimeZone lookupTimeZoneByCountryAndOffset(java.lang.String countryIso, int offsetSeconds, boolean isDst, long whenMillis, android.icu.util.TimeZone bias) { java.util.List<android.icu.util.TimeZone> candidates = countryZones.get(countryIso); if ((candidates == null) || (candidates.isEmpty())) { return null; } android.icu.util.TimeZone firstMatch = null; android.icu.util.TimeZone biasMatch = null; for (int i = 0; i < (candidates.size()); i++) { android.icu.util.TimeZone match = candidates.get(i); if (!(libcore.util.TimeZoneFinder.offsetMatchesAtTime(match, offsetSeconds, isDst, whenMillis))) { continue; } if (firstMatch == null) { firstMatch = match; if (bias == null) { break; } } if (match.getID().equals(bias.getID())) { biasMatch = match; break; } } android.icu.util.TimeZone toReturn; if (biasMatch != null) { toReturn = biasMatch; } else if (firstMatch != null) { toReturn = firstMatch; } else { return null; } return toReturn; }<END_MOD>
void setBounds(android.graphics.Rect bounds) { mBounds.set(bounds); if ((isDimming()) && (!(mLastBounds.equals(bounds)))) { adjustSurface(mLayer, false<START_MOD>, true<END_MOD>); } }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mWifiWakeupEnabledOriginalValue = Settings.Global.getInt(mContentResolver, Settings.Global.WIFI_WAKEUP_ENABLED, 0); mAirplaneModeOriginalValue = Settings.Global.getInt(mContentResolver, Settings.Global.AIRPLANE_MODE_ON, 0); Settings.Global.putInt(mContentResolver, Settings.Global.WIFI_WAKEUP_ENABLED, 1); Settings.Global.putInt(mContentResolver, Settings.Global.AIRPLANE_MODE_ON, 0); mWifiWakeupController = new com.android.networkrecommendation.WifiWakeupController(mContext, mContentResolver, android.os.Looper.getMainLooper(), mWifiManager, mWifiWakeupNetworkSelector<START_MOD>, null<END_MOD>); mWifiWakeupController.start(); verify(mContext).registerReceiver(mBroadcastReceiverCaptor.capture(), any(android.content.IntentFilter.class), anyString(), any(android.os.Handler.class)); mBroadcastReceiver = mBroadcastReceiverCaptor.getValue(); com.android.networkrecommendation.Util.sendWifiApStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_AP_STATE_DISABLED); }
<START_MOD>protected final void updateConferenceParticipants(java.util.List<android.telecom.ConferenceParticipant> conferenceParticipants) { for (android.telecom.Connection.Listener l : mListeners) { l.onConferenceParticipantsChanged(this, conferenceParticipants); } }<END_MOD>
<START_MOD>@org.junit.Test public void gcRootPath() throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump.getTestDump(); com.android.ahat.heapdump.AhatClassObj main = dump.getAhatSnapshot().findClass("Main"); com.android.ahat.heapdump.AhatInstance gcPathArray = dump.getDumpedAhatInstance("gcPathArray"); com.android.ahat.heapdump.Value value = gcPathArray.asArrayInstance().getValue(2); com.android.ahat.heapdump.AhatInstance base = value.asAhatInstance(); com.android.ahat.heapdump.AhatInstance left = base.asClassInstance().getRefField("left"); com.android.ahat.heapdump.AhatInstance right = base.asClassInstance().getRefField("right"); com.android.ahat.heapdump.AhatInstance target = left.asClassInstance().getRefField("right"); java.util.List<com.android.ahat.heapdump.PathElement> path = target.getPathFromGcRoot(); assertEquals(6, path.size()); assertEquals(main, path.get(0).instance); assertEquals(".stuff", path.get(0).field); assertTrue(path.get(0).isDominator); assertEquals(".gcPathArray", path.get(1).field); assertTrue(path.get(1).isDominator); assertEquals(gcPathArray, path.get(2).instance); assertEquals("[2]", path.get(2).field); assertTrue(path.get(2).isDominator); assertEquals(base, path.get(3).instance); assertTrue(path.get(3).isDominator); if (path.get(3).field.equals(".left")) { assertEquals(".left", path.get(3).field); assertEquals(left, path.get(4).instance); assertEquals(".right", path.get(4).field); assertFalse(path.get(4).isDominator); } else { assertEquals(".right", path.get(3).field); assertEquals(right, path.get(4).instance); assertEquals(".left", path.get(4).field); assertFalse(path.get(4).isDominator); } assertEquals(target, path.get(5).instance); assertEquals("", path.get(5).field); assertTrue(path.get(5).isDominator); }<END_MOD>
public final int getCompositeSize() { com.android.tools.perflib.heap.Instance.CollectingVisitor visitor = new com.android.tools.perflib.heap.Instance.CollectingVisitor(); <START_MOD>visitor.visit(<END_MOD>this); int size = 0; for (com.android.tools.perflib.heap.Instance instance : visitor.getVisited()) { size += instance.getSize(); } return size; }
<START_MOD>@android.net.RequiresPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL) public void startCaptivePortalApp(android.net.Network network) { try { mService.startCaptivePortalApp(network); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }<END_MOD>
public void testProcFiles() throws android.system.ErrnoException, java.io.IOException, java.lang.NumberFormatException { for (java.lang.String sysctl : android.net.cts.MultinetworkSysctlTest.GLOBAL_SYSCTLS) { int value = <START_MOD>getValue(sysctl<END_MOD>); assertEquals(<START_MOD>sysctl<END_MOD>, 1, value); } java.io.File[] interfaceDirs = new java.io.File(android.net.cts.MultinetworkSysctlTest.IPV6_SYSCTL_DIR).listFiles(); for (java.io.File interfaceDir : interfaceDirs) { if ((interfaceDir.getName().equals("all")) || (interfaceDir.getName().equals("lo"))) { continue; } java.lang.String sysctl = new java.io.File(interfaceDir, android.net.cts.MultinetworkSysctlTest.AUTOCONF_SYSCTL).getAbsolutePath(); int value = <START_MOD>getValue(sysctl<END_MOD>); assertLess(<START_MOD>sysctl<END_MOD>, value, 0); } }
@org.junit.Test public void if_lt() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(IF_LT).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), <START_MOD>"jack/jack-tests/src/com/android/jack/DxTestCase.java"<END_MOD>)).compileAndRunTest(); }
public static long getMobileTxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { <START_MOD>long<END_MOD> <START_MOD>stat = android.net.TrafficStats.UNSUPPORTED; stat =<END_MOD> android.net.TrafficStats.getTxBytes(iface); <START_MOD>if (stat != (android.net.TrafficStats.UNSUPPORTED)) { total += stat; } <END_MOD>} return total; }
<START_MOD>@org.junit.Test public void xmlParsing_missingCountryCode() throws java.lang.Exception { libcore.util.TimeZoneFinderTest.checkThrowsParserException(("<timezones>\n" + (((((" <countryzones>\n" + " <country>\n") + " <id>Europe/London</id>\n") + " </country>\n") + " </countryzones>\n") + "</timezones>\n"))); }<END_MOD>
public int poll(<START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.StructPollfd[] fds, int timeoutMs) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
public java.nio.channels.FileChannel position(long newPosition) throws java.io.IOException { checkOpen(); if (newPosition < 0) { throw new java.lang.IllegalArgumentException((   + newPosition)); } try { Libcore.os.lseek(fd, newPosition, java.nio.SEEK_SET); } catch (<START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException errnoException) { throw errnoException.rethrowAsIOException(); } return this; }
<START_MOD>@java.lang.Override public int compareTo(com.android.sdklib.internal.repository.packages.PreviewVersion rhs) { int delta = (mMajor) - (rhs.mMajor); if (delta != 0) { return delta; } delta = (mMinor) - (rhs.mMinor); if (delta != 0) { return delta; } delta = (mMicro) - (rhs.mMicro); if (delta != 0) { return delta; } int p1 = ((mPreview) == (com.android.sdklib.internal.repository.packages.PreviewVersion.PREVIEW_NOT_SPECIFIED)) ? java.lang.Integer.MAX_VALUE : mPreview; int p2 = ((rhs.mPreview) == (com.android.sdklib.internal.repository.packages.PreviewVersion.PREVIEW_NOT_SPECIFIED)) ? java.lang.Integer.MAX_VALUE : rhs.mPreview; delta = p1 - p2; return delta; }<END_MOD>
public native java.io.FileDescriptor dup2(java.io.FileDescriptor oldFd, int newFd) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
public void testZipFileLargerThan2GiB() throws java.io.IOException { if (false) { java.io.File f = createZipFile(1024, ((3 * 1024) * 1024)); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); int entryCount = <START_MOD>countEntries<END_MOD>(zipFile); assertEquals(1024, entryCount); zipFile.close(); } }
<START_MOD>public void test_nullLocales() { assertEquals(java.text.SimpleDateFormat.getDateInstance(java.text.DateFormat.SHORT, java.util.Locale.getDefault()), java.text.SimpleDateFormat.getDateInstance(java.text.DateFormat.SHORT, null)); assertEquals(java.text.SimpleDateFormat.getDateTimeInstance(java.text.DateFormat.SHORT, java.text.DateFormat.SHORT, java.util.Locale.getDefault()), java.text.SimpleDateFormat.getDateTimeInstance(java.text.DateFormat.SHORT, java.text.DateFormat.SHORT, null)); assertEquals(java.text.SimpleDateFormat.getTimeInstance(java.text.DateFormat.SHORT, java.util.Locale.getDefault()), java.text.SimpleDateFormat.getTimeInstance(java.text.DateFormat.SHORT, null)); }<END_MOD>
private static void <START_MOD>testLinkerMethodMultipleArgumentTypes<END_MOD>() throws java.lang.Throwable { byte[] base64Data = TestDataLinkerMethodMultipleArgumentTypes.BASE64_DEX_FILE.getBytes(); java.util.Base64.Decoder decoder = java.util.Base64.getDecoder(); java.nio.ByteBuffer dexBuffer = java.nio.ByteBuffer.wrap(decoder.decode(base64Data)); dalvik.system.InMemoryDexClassLoader classLoader = new dalvik.system.InMemoryDexClassLoader(dexBuffer, java.lang.ClassLoader.getSystemClassLoader()); java.lang.Class<?> testClass = classLoader.loadClass("TestLinkerMethodMultipleArgumentTypes"); java.lang.reflect.Method testMethod = testClass.getDeclaredMethod("test", int.class, int.class); testMethod.invoke(null, 33, 67); testMethod.invoke(null, (-10000), (+1000)); testMethod.invoke(null, (-1000), (+10000)); }
<START_MOD>@java.lang.Override public int hashCode() { return myItems.hashCode(); }<END_MOD>
@org.junit.Test public void testSetWifiDisabledNoToggle() throws java.lang.Exception {<START_MOD> when(mWifiStateMachine.syncGetWifiApState()).thenReturn(WifiManager.WIFI_AP_STATE_DISABLED);<END_MOD> when(mSettingsStore.handleWifiToggled(eq(false))).thenReturn(false); assertTrue(mWifiServiceImpl.setWifiEnabled(com.android.server.wifi.WifiServiceImplTest.TEST_PACKAGE_NAME, false)); verify(mWifiController, never()).obtainMessageAndSend(eq(com.android.server.wifi.WifiController.CMD_WIFI_TOGGLED)); }
<START_MOD>protected final<END_MOD> void addListener(org.junit.runner.notification.RunListener listener) { <START_MOD>if ((mListeners) == null) { throw new java.lang.IllegalStateException( may only call addListener from onTestRunnerCreated } mListeners<END_MOD>.add(listener); <START_MOD>mTestRunner<END_MOD>.addListener(listener); }
private void restoreDefaultAPN(int subId) { android.database.sqlite.SQLiteDatabase db = getWritableDatabase(); <START_MOD>java.lang.String where = getWhereClauseForRestoreDefaultApn(db, subId); com.android.providers.telephony.TelephonyProvider.log(( where:   + where)); if (android.text.TextUtils.isEmpty(where)) { com.android.providers.telephony.TelephonyProvider.loge( get where clause to restore APN where = com.android.providers.telephony.TelephonyProvider.IS_NOT_OWNED_BY_DPC; } <END_MOD>try { db.delete(com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE, <START_MOD>where<END_MOD>, null); } catch (android.database.SQLException e) { com.android.providers.telephony.TelephonyProvider.loge(( exception when deleting to restore:   + e)); } android.content.SharedPreferences spApnId = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApnId = spApnId.edit(); editorApnId.clear(); editorApnId.apply(); android.content.SharedPreferences spApn = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_FULL_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApn = spApn.edit(); editorApn.clear(); editorApn.apply(); if (com.android.providers.telephony.TelephonyProvider.apnSourceServiceExists(getContext())) { restoreApnsWithService(); } else { initDatabaseWithDatabaseHelper(db); } }
@java.lang.Override public void run() { <START_MOD>java.util.Map<java.lang.String, java.lang.String> options = new java.util.TreeMap<java.lang.String, java.lang.String>(); options.put("backend", "adb"); com.android.chimpchat.ChimpChat chimpchat = new com.android.chimpchat.ChimpChat(options); final com.android.chimpchat.core.IChimpDevice device = chimpchat.waitForConnection(); <END_MOD>com.android.monkeyrunner.<START_MOD>controller.MonkeyControllerFrame mf<END_MOD> = new com.android.monkeyrunner.<START_MOD>controller.MonkeyControllerFrame(<END_MOD>device<START_MOD>);<END_MOD> mf<START_MOD>.setVisible(true); mf.addWindowListener(new java.awt.event.WindowAdapter() { @java.lang.Override public void windowClosed(java.awt.event.WindowEvent e) { <END_MOD>device.dispose(); } }); }
@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JThrowStatement throwStmt) { super.visit(throwStmt); com.android.jack.cfg.ThrowBasicBlock throwBlock = new com.android.jack.cfg.ThrowBasicBlock(((basicBlockId)++), currentStmts); <START_MOD>tracer.getStatistic(com.android.jack.cfg.CfgBuilder.CREATED_BASIC_BLOCK).incValue(); <END_MOD>setBlockOfStatement(throwBlock); forwardBranchResolver.addPeiBasicBlock(throwBlock, null, throwStmt.getJCatchBlocks()); throwBlock.setExitBlockWhenUncaught(exitBlock); return false; }
<START_MOD>public boolean getIccFdnEnabled() { return mIccFdnEnabled; }<END_MOD>
public void testSocket_Block_BasicStatusAfterConnect() throws java.io.IOException { this.channel1.connect(<START_MOD>datagramSocket1Address<END_MOD>); java.net.DatagramSocket s1 = this.channel1.socket(); assertSocketAfterConnect(s1); java.net.DatagramSocket s2 = this.channel1.socket(); assertSame(s1, s2); }
public void test_addAttributesLjava_util_MapII() { java.text.AttributedString as = new java.text.AttributedString("test"); java.util.Map<java.text.AttributedCharacterIterator.Attribute, java.lang.String> whm = new java.util.<START_MOD>HashMap<END_MOD><java.text.AttributedCharacterIterator.Attribute, java.lang.String>(); try { whm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute("test1"), "value1"); whm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute("test2"), "value2"); whm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute("test3"), "value3"); as.addAttributes(whm, 0, 3); } catch (java.lang.Exception e) { fail(( exception   + (e.toString()))); } try { as.addAttributes(null, 0, 3); fail( NullPointerException was not thrown } catch (java.lang.NullPointerException e) { } try { as.addAttributes(whm, 0, 0); fail( IllegalArgumentException was not thrown } catch (java.lang.IllegalArgumentException e) { } }
public static android.support.v8.renderscript.ScriptIntrinsicBlur create(android.support.v8.renderscript.RenderScript rs, android.support.v8.renderscript.Element e) { if ((!(e.isCompatible(android.support.v8.renderscript.Element.U8_4(rs)))) && (!(e.isCompatible(android.support.v8.renderscript.Element.U8(rs))))) { throw new android.support.v8.renderscript.RSIllegalArgumentException( element type. } long id<START_MOD>; boolean mUseIncSupp = false; if (true || ((rs.isUseNative()) && ((android.os.Build.VERSION.SDK_INT) < 21))) { android.util.Log.v( RS Test   Intrinsic mUseIncSupp = true; id = rs.nIncScriptIntrinsicCreate<END_MOD>(5, e.getID(rs)); android.<START_MOD>util.Log.v( RS Test   Intrinsic Completed } else { id = rs.nScriptIntrinsicCreate(5, e.getID(rs)); } android.<END_MOD>support.v8.renderscript.ScriptIntrinsicBlur <START_MOD>si<END_MOD> = new android.support.v8.renderscript.ScriptIntrinsicBlur(id, rs); <START_MOD>si.setIncSupp(mUseIncSupp); si<END_MOD>.setRadius(5.0F); return <START_MOD>si<END_MOD>; }
@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCatchBlock block) { if (!(currentStmts.isEmpty())) { com.android.jack.cfg.NormalBasicBlock endOfBlock = new com.android.jack.cfg.NormalBasicBlock(((basicBlockId)++), currentStmts); <START_MOD>tracer.getStatistic(com.android.jack.cfg.CfgBuilder.CREATED_BASIC_BLOCK).incValue(); <END_MOD>setBlockOfStatement(endOfBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(block); if (nextStatement != null) { forwardBranchResolver.addNormalBasicBlock(endOfBlock, nextStatement); } } }
private static void initPython(java.util.Collection<java.lang.String> pythonPath, java.lang.String[] argv) { java.util.Properties props = new java.util.Properties(); java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(java.lang.System.getProperty("java.class.path")); for (java.lang.String p : pythonPath) { sb.append(":").append(p); } props.setProperty("python.path", sb.toString()); props.setProperty("python.verbose", "error"); org.python.util.PythonInterpreter.initialize(java.lang.System.getProperties(), props, argv); <START_MOD>java.lang.String frameworkDir = java.lang.System.getProperty("java.ext.dirs"); java.io.File monkeyRunnerJar = new java.io.File(frameworkDir, "monkeyrunner.jar"); if (monkeyRunnerJar.canRead()) { PySystemState.packageManager.addJar(monkeyRunnerJar.getAbsolutePath(), false); <END_MOD>}<START_MOD> }<END_MOD>
public void retainSubscriptionsForFactoryReset(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } <START_MOD>com.<END_MOD>android<START_MOD>.internal<END_MOD>.telephony.euicc.<START_MOD>IEuiccController controller = <END_MOD>getIEuiccController()<START_MOD>; if (controller == null) return; try { controller<END_MOD>.retainSubscriptionsForFactoryReset(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@org.junit.Test public void <START_MOD>parseBufferWithValidVenueNames() throws java.lang.Exception<END_MOD> { byte[] <START_MOD>testData = getTestData(new java.lang.String[]<END_MOD>{ <START_MOD>com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_VENUE_NAME1, com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_VENUE_NAME2 }); java.nio.ByteBuffer buffer = java.nio.ByteBuffer.allocate(testData.length); buffer.put(testData); buffer.position(0); java.util.List<com.android.server.wifi.hotspot2.anqp.I18Name> nameList = new java.util.ArrayList<>(); nameList.add(new com.android.server.wifi.hotspot2.anqp.I18Name(com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_LANGUAGE, com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_LOCALE, com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_VENUE_NAME1)); nameList.add(new com.android.server.wifi.hotspot2.anqp.I18Name(com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_LANGUAGE, com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_LOCALE, com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_VENUE_NAME2));<END_MOD> com.android.server.wifi.hotspot2.anqp.VenueNameElement <START_MOD>expectedElement<END_MOD> = new com.android.server.wifi.hotspot2.anqp.VenueNameElement(<START_MOD>nameList); assertEquals(expectedElement, com.android.server.wifi.hotspot2.anqp.VenueNameElement.parse(buffer<END_MOD>)); }
public void append() { runOnUiThread(new java.lang.Runnable() { @java.lang.Override public void run() { mLogLayout.addView(mView); mLogScrollView.post(new java.lang.Runnable() { @java.lang.Override public void run() { <START_MOD>if (mIsFullScrollDown) { <END_MOD>mLogScrollView.fullScroll(View.FOCUS_DOWN);<START_MOD> }<END_MOD> } }); } }); }
<START_MOD>public void test_computeTime_enteringDST_DelegatingTimeZone_LosAngeles_2014() { java.util.TimeZone timeZone = java.util.TimeZone.getTimeZone("America/Los_Angeles"); timeZone = new libcore.java.util.GregorianCalendarTest.DelegatingTimeZone(timeZone); checkDSTLosAngeles2014(timeZone); }<END_MOD>
<START_MOD>@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JLambda lambda) { accept(lambda.getMethod()); return super.visit(lambda); }<END_MOD>
<START_MOD>java.util.Collection<java.util.logging.Handler> getHandlers();<END_MOD>
<START_MOD>@java.lang.Override public void onLooperPrepared() { mIsimUiccRecords = new com.android.internal.telephony.uicc.IsimUiccRecords(mUiccCardApplication3gpp, mContext, mMockCI); setReady(true); }<END_MOD>
<START_MOD>private java.net.URL[] makeCaptivePortalFallbackUrls(android.content.Context context) { java.lang.String firstUrl = com.android.server.connectivity.NetworkMonitor.getCaptivePortalFallbackUrl(context); java.lang.String joinedUrls = (firstUrl + ",") + (com.android.server.connectivity.NetworkMonitor.getSetting(context, Settings.Global.CAPTIVE_PORTAL_OTHER_FALLBACK_URLS, com.android.server.connectivity.NetworkMonitor.DEFAULT_OTHER_FALLBACK_URLS)); java.util.List<java.net.URL> urls = new java.util.ArrayList<>(); for (java.lang.String s : joinedUrls.split(",")) { java.net.URL u = makeURL(s); if (u == null) { continue; } urls.add(u); } if (urls.isEmpty()) { android.util.Log.e(com.android.server.connectivity.NetworkMonitor.TAG, java.lang.String.format("could not create any url from %s", firstUrl, joinedUrls)); } return urls.toArray(new java.net.URL[urls.size()]); }<END_MOD>
public void pushFile(java.lang.String local, java.lang.String remote, com.android.ddmlib.SyncService.ISyncProgressMonitor monitor) throws com.android.ddmlib.SyncException, com.android.ddmlib.TimeoutException, java.io.IOException<START_MOD>, java.lang.InterruptedException<END_MOD> { java.io.File f = new java.io.File(local); if (!(f.exists())) { throw new com.android.ddmlib.SyncException(com.android.ddmlib.SyncException.SyncError.NO_LOCAL_FILE); } if (f.isDirectory()) { throw new com.android.ddmlib.SyncException(com.android.ddmlib.SyncException.SyncError.LOCAL_IS_DIRECTORY); } monitor.start(((int) (f.length()))); doPushFile(local, remote, monitor); monitor.stop(); }
<START_MOD>private java.util.List<android.net.wifi.WifiConfiguration> parseNetworkList(org.xmlpull.v1.XmlPullParser in, int outerTagDepth) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { java.util.List<android.net.wifi.WifiConfiguration> networkList = new java.util.ArrayList<>(); while (com.android.server.wifi.util.XmlUtil.gotoNextSectionWithNameOrEnd(in, com.android.server.wifi.WifiNetworkListStoreData.XML_TAG_SECTION_HEADER_NETWORK, outerTagDepth)) { android.net.wifi.WifiConfiguration config = parseWifiConfiguration(in, (outerTagDepth + 1)); networkList.add(config); } return networkList; }<END_MOD>
@java.lang.Override public void handleMessage(android.os.Message msg) { if ((msg.what) != (com.android.bluetooth.avrcp.MediaPlayerWrapper.TimeoutHandler.MSG_TIMEOUT)) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ( message on timeout handler:   + (msg.what))); return; } android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ( while waiting for metadata to sync for   + (mPackageName))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (   Current Metadata:   + (<START_MOD>com.android.bluetooth.avrcp.Util.toMetadata(<END_MOD>getMetadata())))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (   Current Playstate:   + (getPlaybackState()))); <START_MOD>java.util.List<com.android.bluetooth.avrcp.Metadata> current_queue = com.android.bluetooth.avrcp.Util.toMetadataList(queue); <END_MOD>for (int i = 0; i < (<START_MOD>current_queue<END_MOD>.size()); i++) { android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (((   QueueItem( + i) +     + (<START_MOD>current_queue<END_MOD>.get(i)))); } if (com.android.bluetooth.avrcp.MediaPlayerWrapper.sTesting) android.util.Log.wtfStack(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG,   the stack }
<START_MOD>public void supplyPuk2(java.lang.String puk2, java.lang.String newPin2, android.os.Message onComplete) { if ((mUiccApplication) != null) { mUiccApplication.supplyPuk2(puk2, newPin2, onComplete); } else if (onComplete != null) { java.lang.Exception e = new java.lang.RuntimeException("ICC card is absent."); android.os.AsyncResult.forMessage(onComplete).exception = e; onComplete.sendToTarget(); return; } }<END_MOD>
<START_MOD>public void testDecodeInt8() { final java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(new byte[]{ ((byte) (0)), ((byte) (127)), ((byte) (128)), ((byte) (255)) }); final byte[] expected = new byte[]{ 0, 127, -128, -1 }; com.android.tools.rpclib.binary.Decoder d = new com.android.tools.rpclib.binary.Decoder(input); try { for (short s8 : expected) { assertEquals(s8, d.int8()); } } catch (java.io.IOException ex) { assertNull(ex); } }<END_MOD>
public native <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.StructStat lstat(java.lang.String path) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
public native void lchown(java.lang.String path, int uid, int gid) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
@java.lang.Override public void close() throws java.io.IOException { <START_MOD>org.conscrypt.OpenSSLSocketImpl.SSLInputStream sslInputStream = null; org.conscrypt.OpenSSLSocketImpl.SSLOutputStream sslOutputStream = null; <END_MOD>synchronized(<START_MOD>stateLock) { if ((state) == (org.conscrypt.OpenSSLSocketImpl.STATE_CLOSED)) { return; } if ((state) == (org.conscrypt.OpenSSLSocketImpl.STATE_NEW)) { state = org.conscrypt.OpenSSLSocketImpl.STATE_CLOSED; closeUnderlyingSocket(); return; } if (((state) != (org.conscrypt.OpenSSLSocketImpl.STATE_READY)<END_MOD>) && (<START_MOD>(state) != (org.conscrypt.OpenSSLSocketImpl.STATE_READY_HANDSHAKE_CUT_THROUGH))) { state = org.conscrypt.OpenSSLSocketImpl.STATE_CLOSED; org.conscrypt.NativeCrypto.SSL_interrupt(sslNativePointer);<END_MOD> return; } <START_MOD>state = org.conscrypt.OpenSSLSocketImpl.STATE_CLOSED; sslInputStream = is; sslOutputStream = os; } if ((sslInputStream != null) || (sslOutputStream != null)<END_MOD>) { org.conscrypt.NativeCrypto.SSL_interrupt(sslNativePointer); <START_MOD>} if (sslInputStream != null) { sslInputStream.awaitPendingOps(); } if (sslOutputStream != null) { sslOutputStream.awaitPendingOps(); } shutdownAndFreeSslNative(); }<END_MOD>
<START_MOD>private void multiLaunch(com.android.ide.eclipse.adt.internal.launch.DelayedLaunchInfo launchInfo, java.util.Collection<com.android.ddmlib.IDevice> devices) { for (com.android.ddmlib.IDevice d : devices) { boolean success = doPreLaunchActions(launchInfo, d); if (!success) { java.lang.String deviceName = (d.isEmulator()) ? d.getAvdName() : d.getSerialNumber(); com.android.ide.eclipse.adt.AdtPlugin.printErrorToConsole(launchInfo.getProject(), ("Launch failed on device: " + deviceName)); } doLaunchAction(launchInfo, d); } stopLaunch(launchInfo); }<END_MOD>
<START_MOD>private void remapPhantom(@javax.annotation.Nonnull com.android.jack.ir.ast.JPhantomClassOrInterface type, @javax.annotation.Nonnull com.tonicsystems.jarjar.PackageRemapper remapper, @javax.annotation.Nonnull com.android.jack.lookup.JPhantomLookup lookup) { java.lang.String binaryName = remapper.mapValue(com.android.jack.transformations.renamepackage.PackageRenamer.formatter.getName(type)); java.lang.String simpleName = com.android.jack.util.NamingTools.getSimpleClassNameFromBinaryName(binaryName); type.setName(simpleName); lookup.removeType(type); type.getEnclosingPackage().remove(type); java.lang.String packageName = com.android.jack.util.NamingTools.getPackageNameFromBinaryName(binaryName); com.android.jack.ir.ast.JPackage newPackage = lookup.getOrCreatePackage(packageName); type.setEnclosingPackage(newPackage); newPackage.addPhantomType(type); }<END_MOD>
<START_MOD>public static java.util.Comparator<android.net.IpPrefix> lengthComparator() { return new java.util.Comparator<android.net.IpPrefix>() { @java.lang.Override public int compare(android.net.IpPrefix prefix1, android.net.IpPrefix prefix2) { final int p1len = prefix1.getPrefixLength(); final int p2len = prefix2.getPrefixLength(); if (p1len < p2len) return -1; if (p2len < p1len) return 1; final byte[] a1 = prefix1.address; final byte[] a2 = prefix2.address; final int len = ((a1.length) < (a2.length)) ? a1.length : a2.length; for (int i = 0; i < len; ++i) { if ((a1[i]) < (a2[i])) return -1; if ((a1[i]) > (a2[i])) return 1; } if ((a2.length) < len) return 1; if ((a1.length) < len) return -1; return 0; } }; }<END_MOD>
int runJavaDoc() throws java.io.IOException, java.lang.InterruptedException { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add("javadoc"); args.add("-doclet"); args.add("com.android.cts.javascannerdoclet.CtsJavaScannerDoclet"); args.add("-docletpath"); args.add(mDocletPath.toString()); args.add("-sourcepath"); args.add(getSourcePath(mSourceDir)); args.add("-classpath"); args.add(getClassPath()); args.addAll(getSourceFiles(mSourceDir)); java.lang.Process process = new java.lang.ProcessBuilder(args).<START_MOD>redirectErrorStream(true).<END_MOD>start(); java.util.Scanner scanner = null; try { scanner = new java.util.Scanner(process.getInputStream()); while (scanner.hasNextLine()) { java.lang.System.out.println(scanner.nextLine()); } } finally { if (scanner != null) { scanner.close(); } } return process.waitFor(); }
<START_MOD>private void ensureUsingFlagStyle(@com.android.annotations.NonNull java.util.List<lombok.ast.Node> constants) { if ((constants.size()) < 3) { return; } for (lombok.ast.Node constant : constants) { if (constant instanceof lombok.ast.VariableReference) { lombok.ast.VariableDefinitionEntry d = findDeclaration(((lombok.ast.VariableReference) (constant))); if (d == null) { continue; } lombok.ast.Expression declaration = d.astInitializer(); if (declaration == null) { continue; } if (declaration instanceof lombok.ast.IntegralLiteral) { lombok.ast.IntegralLiteral literal = ((lombok.ast.IntegralLiteral) (declaration)); long value = literal.astLongValue(); if ((java.lang.Math.abs(value)) <= 1) { continue; } if ((java.lang.Long.bitCount(value)) != 1) { continue; } int shift = java.lang.Long.numberOfTrailingZeros(value); java.lang.String message = java.lang.String.format("Consider declaring this constant using 1 << %1$d instead", shift); mContext.report(com.android.tools.lint.checks.AnnotationDetector.FLAG_STYLE, declaration, mContext.getLocation(declaration), message); } } } }<END_MOD>
<START_MOD>public <END_MOD>com.android.apksig.internal.apk.<START_MOD>SigningBlockScheme<END_MOD>.ContentDigestAlgorithm getContentDigestAlgorithm() { return mContentDigestAlgorithm; }
<START_MOD>public void run() { synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_READY); logWriter.println("SingleStepWithPendingExceptionDebuggee started"); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); catchMethod(); catchMethod(); logWriter.println("SingleStepWithPendingExceptionDebuggee finished"); }<END_MOD>
<START_MOD>@org.junit.Test public void testDisableScoring_activeScorer() throws android.os.RemoteException { when(mNetworkScorerAppManager.isCallerActiveScorer(anyInt())).thenReturn(true); when(mNetworkScorerAppManager.getActiveScorer()).thenReturn(com.android.server.NetworkScoreServiceTest.PREV_SCORER, null); when(mNetworkScorerAppManager.setActiveScorer(null)).thenReturn(true); mNetworkScoreService.registerNetworkScoreCache(NetworkKey.TYPE_WIFI, mNetworkScoreCache); mNetworkScoreService.disableScoring(); verify(mNetworkScoreCache).clearScores(); verify(mContext).sendBroadcastAsUser(com.android.server.testing.MockUtils.checkIntent(new android.content.Intent(android.net.NetworkScoreManager.ACTION_SCORER_CHANGED).setPackage(com.android.server.NetworkScoreServiceTest.PREV_SCORER.mPackageName)), eq(UserHandle.SYSTEM)); verify(mContext, never()).bindServiceAsUser(any(android.content.Intent.class), any(android.content.ServiceConnection.class), anyInt(), any(android.os.UserHandle.class)); }<END_MOD>
<START_MOD>protected void closeDatabase() { dbHelper.close(); }<END_MOD>
public java.lang.String getAdvMacAddress() { <START_MOD>if ((mAdvMacAddress) == null) { startScan(); } <END_MOD>return mAdvMacAddress; }
@android.annotation.Nullable private static java.lang.String getCarrierImsPackage(android.content.Context context, com.android.internal.telephony.Phone phone) { <START_MOD>java.lang.String imsPackage = null; final long identity = android.os.Binder.clearCallingIdentity(); try { <END_MOD>android.telephony.CarrierConfigManager cm = ((android.telephony.CarrierConfigManager) (context.getSystemService(Context.CARRIER_CONFIG_SERVICE))); if (cm == null) { android.telephony.Rlog.e(com.android.internal.telephony.CarrierSmsUtils.TAG,   to retrieve CarrierConfigManager return null; } android.os.PersistableBundle config = cm.getConfigForSubId(phone.getSubId()); if (config == null) { if (com.android.internal.telephony.CarrierSmsUtils.VDBG) android.telephony.Rlog.v(com.android.internal.telephony.CarrierSmsUtils.TAG, ( CarrierConfig for subId: + (phone.getSubId()))); return null; } <START_MOD>imsPackage =<END_MOD> config.getString(com.android.internal.telephony.CarrierSmsUtils.CARRIER_IMS_PACKAGE_KEY, null); }<START_MOD> finally { android.os.Binder.restoreCallingIdentity(identity); } return imsPackage; }<END_MOD>
@com.android.annotations.NonNull static com.android.build.gradle.internal.model.BuildTypeImpl cloneBuildType(com.android.builder.model.BuildType buildType) { com.android.build.gradle.internal.model.BuildTypeImpl clonedBuildType = new com.android.build.gradle.internal.model.BuildTypeImpl(); clonedBuildType.name = buildType.getName(); clonedBuildType.debuggable = buildType.isDebuggable(); clonedBuildType.jniDebugBuild = buildType.isJniDebugBuild(); clonedBuildType.renderscriptDebugBuild = buildType.isRenderscriptDebugBuild(); clonedBuildType.renderscriptOptimLevel = buildType.getRenderscriptOptimLevel(); clonedBuildType.packageNameSuffix = buildType.getPackageNameSuffix(); clonedBuildType.versionNameSuffix = buildType.getVersionNameSuffix(); clonedBuildType.runProguard = buildType.isRunProguard(); clonedBuildType.zipAlign = buildType.isZipAlign(); <START_MOD>clonedBuildType.proguardRules = buildType.getProguardRules(); <END_MOD>return clonedBuildType; }
@java.lang.Override @javax.annotation.CheckForNull public com.android.jack.library.JarLibrary checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) throws com.android.sched.util.codec.ParsingException { com.android.sched.util.file.InputZipFile inputZipFile; try { <START_MOD>assert (((existence) == (com.android.sched.util.file.FileOrDirectory.Existence.MUST_EXIST)) && ((change) == (com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE))) && ((permissions) == (com.android.sched.util.file.FileOrDirectory.Permission.READ)); <END_MOD>inputZipFile = new com.android.sched.util.file.InputZipFile(context.getWorkingDirectory(), string); } catch (com.android.sched.util.file.NotFileException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } catch (com.android.sched.util.file.NoSuchFileException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } catch (com.android.sched.util.file.WrongPermissionException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } catch (com.android.sched.util.file.<START_MOD>ZipException<END_MOD> e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } return new com.android.jack.library.JarLibrary(inputZipFile); }
private java.lang.String ipSupport() { if ((<START_MOD>ipv4<END_MOD>) && (<START_MOD>ipv6<END_MOD>)) { return <START_MOD>"IPv4/v6"<END_MOD>; } if (<START_MOD>ipv6<END_MOD>) { return "IPv6"; } if (<START_MOD>ipv4<END_MOD>) { return "IPv4"; } return "NONE"; }
public static void setEnabled(boolean enabled) { <START_MOD>enabled<END_MOD> = enabled; }
private void outputYear(int value, boolean outputTop, boolean outputBottom, int modifier) { int lead; int trail; final int DIVISOR = 100; trail = value % DIVISOR; lead = (value / DIVISOR) + (trail / DIVISOR); trail %= DIVISOR; if ((trail < 0) && (lead > 0)) { trail += DIVISOR; --lead; } else if ((lead < 0) && (trail > 0)) { trail -= DIVISOR; ++lead; } if (outputTop) { if ((lead == 0) && (trail < 0)) { modifyAndAppend("-0", modifier); } else { <START_MOD>outputFormattedInt(android.text<END_MOD>.format<START_MOD>.TimeFormatter.getFormat(modifier, "%02d", "%2d", "%d", "%02d"), lead); } } if (outputBottom) { int n = (trail < 0) ? -trail : trail; outputFormattedInt<END_MOD>(android.text.format.TimeFormatter.getFormat(modifier, "%02d", "%2d", "%d", "%02d"), n<START_MOD>); } }<END_MOD>
public void handleOnBootPhase() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG,   boot completed } android.os.UserManagerInternal userManagerInternal = com.android.server.LocalServices.getService(android.os.UserManagerInternal.class); userManagerInternal.addUserRestrictionsListener(mUserRestrictionsListener); final boolean isBluetoothDisallowed = isBluetoothDisallowed(); if (isBluetoothDisallowed) { return; } if ((mEnableExternal) && (isBluetoothPersistedStateOnBluetooth())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG,   Bluetooth. } sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_SYSTEM_BOOT<START_MOD>, android.app.ActivityThread.currentPackageName()<END_MOD>); } else if (!(isNameAndAddressSet())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG,   adapter name and address } android.os.Message getMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_GET_NAME_AND_ADDRESS); mHandler.sendMessage(getMsg); } }
@java.lang.Override public boolean onPrepareOptionsMenu(android.view.Menu menu) { super.onPrepareOptionsMenu(menu); boolean hasSelection = (getSelectedItemPosition()) >= 0; menu.findItem(com.android.phone.settings.fdn.FdnList.MENU_ADD).setVisible(true); menu.findItem(com.android.phone.settings.fdn.FdnList.MENU_EDIT).setVisible(hasSelection); menu.findItem(com.android.phone.settings.fdn.FdnList.MENU_DELETE).setVisible(hasSelection); <START_MOD>menu.findItem(com.android.phone.settings.fdn.FdnList.MENU_DIAL).setVisible((hasSelection && (mConfigResUtil.getBooleanValue(this, "config_fdn_direct_dial")))); <END_MOD>return true; }
public void <START_MOD>testAOSPFileContexts<END_MOD>() throws java.lang.Exception { java.<START_MOD>io.BufferedReader AOSPFile = new java.io.BufferedReader(new java.io.FileReader(AOSPFcFile.getAbsolutePath())); java.io.BufferedReader deviceFile = new java.io.BufferedReader(new java.io.FileReader(deviceFcFile.getAbsolutePath())); java.<END_MOD>lang.<START_MOD>String line1;<END_MOD> java.lang.<START_MOD>String line2; while ((line1 = AOSPFile.readLine()) != null) { line2 = deviceFile.readLine(); assertTrue((((((( does not include AOSP entries: +   had: + line1) + "\n") +   had: + line2) + "\n"<END_MOD>), <START_MOD>line1.equals(line2)<END_MOD>); } }
<START_MOD>public void testBreakpoint() { logWriter.println("testBreakpoint started"); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); org.apache.harmony.jpda.tests.framework.Breakpoint breakpoint = org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.createBreakpoint(); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.setCountableBreakpoint(JDWPConstants.TypeTag.CLASS, breakpoint, JDWPConstants.SuspendPolicy.ALL, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.EVENT_COUNT); checkReplyPacket(reply, "Failed to install breakpoint with event modifier"); int requestID = reply.getNextValueAsInt(); assertAllDataRead(reply); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); waitForEvent(JDWPConstants.EventKind.BREAKPOINT, requestID); int count = getLocationEventCount(); assertEquals("Invalid event count", org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.EVENT_COUNT, count); reply = debuggeeWrapper.vmMirror.clearEvent(JDWPConstants.EventKind.BREAKPOINT, requestID); checkReplyPacket(reply, ("Failed to clear event " + requestID)); logWriter.println("testBreakpoint done"); }<END_MOD>
native boolean nLoadSO(boolean useNative<START_MOD>, boolean useIO<END_MOD>);
@org.junit.Test public void testConstructorReferenceBinding() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_10).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
void copy2DRangeToUnchecked(int xoff, int yoff, int w, int h, java.lang.Object array, android.renderscript.Element.DataType dt, int arrayLen) { android.os.Trace.traceBegin(RenderScript.TRACE_TAG, "copy2DRangeToUnchecked"); mRS.validate(); validate2DRange(xoff, yoff, w, h); <START_MOD>final int dataSize = ((mType.mElement.getBytesSize()) * w) * h; boolean usePadding = false; int sizeBytes = arrayLen * (dt.mSize); byte[] buffer = null; if ((mAutoPadding) && ((mType.getElement().getVectorSize()) == 3)) { if (((dataSize / 4) * 3) > sizeBytes) { throw new android.renderscript.RSIllegalArgumentException( too small for allocation type. } usePadding = true; sizeBytes = dataSize; buffer = new byte[dataSize]; } else { if (dataSize > sizeBytes) { throw new android.renderscript.RSIllegalArgumentException( too small for allocation type. } } <END_MOD>mRS.nAllocationRead2D(getIDSafe(), xoff, yoff, mSelectedLOD, mSelectedFace.mID, w, h, array, <START_MOD>sizeBytes, <END_MOD>dt<START_MOD>, mType.mElement.mType<END_MOD>.mSize<START_MOD>, usePadding, buffer<END_MOD>); android.os.Trace.traceEnd(RenderScript.TRACE_TAG); }
@java.lang.Override public<START_MOD> synchronized<END_MOD> void addAllMarkers(@javax.annotation.Nonnull java.util.Collection<com.android.sched.marker.Marker> collection) { ensureMap(); for (com.android.sched.marker.Marker marker : collection) { assert isValidMarker(marker) : (((   + (com.android.sched.item.Items.getName(marker.getClass()))) +   is not supported for class   + (this.getClass().getName())) + "'"; assert (markers) != null; markers.put(marker.getClass(), marker); } }
<START_MOD>public static java.nio.file.spi.FileSystemProvider create() { java.lang.String osname = java.security.AccessController.doPrivileged(new sun.security.action.GetPropertyAction("os.name")); if (osname.equals("SunOS")) return sun.nio.fs.DefaultFileSystemProvider.createProvider("sun.nio.fs.SolarisFileSystemProvider"); if (osname.equals("Linux")) return sun.nio.fs.DefaultFileSystemProvider.createProvider("sun.nio.fs.LinuxFileSystemProvider"); if ((osname.equals("Darwin")) || (osname.contains("OS X"))) return sun.nio.fs.DefaultFileSystemProvider.createProvider("sun.nio.fs.MacOSXFileSystemProvider"); throw new java.lang.AssertionError("Platform not recognized"); }<END_MOD>
public void test_getDisplayScript() { java.util.Locale.Builder b = new java.util.Locale.Builder(); b.setLanguage("en").setRegion("US").setScript("Latn"); java.util.Locale l = b.build(); <START_MOD>libcore.java.util.Locales defaultLocale = libcore.java.util.Locales.getDefault(); try { <END_MOD>java.util.Locale.setDefault(java.util.Locale.US); assertEquals("Latin", l.getDisplayScript()); assertEquals("Lateinisch", l.getDisplayScript(java.util.Locale.GERMAN)); assertEquals("Latin", l.getDisplayScript(new java.util.Locale("nv", "US"))); b = new java.util.Locale.Builder(); b.setLanguage("en").setRegion("US").setScript("Fooo"); l = b.build(); assertEquals("Fooo", l.getDisplayScript()); }<START_MOD> finally { defaultLocale.setAsDefault(); } }<END_MOD>
@java.lang.Override @com.android.annotations.NonNull public java.lang.String readFile(@com.android.annotations.NonNull java.io.File f) { org.eclipse.core.resources.IFile file = com.android.ide.eclipse.adt.AdtUtils.fileToIFile(f); if ((file == null) || (!(file.exists()))) { java.lang.String path = f.getPath(); com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR,   find file %1$s in workspace path); return readPlainFile(f); } if (com.android.<START_MOD>SdkUtils<END_MOD>.endsWithIgnoreCase(file.getName(), com.android.SdkConstants.DOT_XML)) { org.eclipse.wst.sse.core.internal.provisional.IStructuredModel model = null; try { org.eclipse.wst.sse.core.internal.provisional.IModelManager modelManager = org.eclipse.wst.sse.core.StructuredModelManager.getModelManager(); model = modelManager.getModelForRead(file); return model.getStructuredDocument().get(); } catch (java.io.IOException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e,   read XML file } catch (org.eclipse.core.runtime.CoreException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, null); } finally { if (model != null) { model.releaseFromRead(); } } } return readPlainFile(f); }
@java.lang.Override public java.lang.String toString() { return new java.lang.StringBuilder().append(<START_MOD>"{spiQuotaTracker="<END_MOD>).append(<START_MOD>spiQuotaTracker<END_MOD>).append( <START_MOD>transformQuotaTracker<END_MOD>=<START_MOD>").append(transformQuotaTracker).append("<END_MOD>, <START_MOD>socketQuotaTracker<END_MOD>=<START_MOD>").append(socketQuotaTracker).append(", mSpiRecords=").append(mSpiRecords).append(", mTransformRecords=").append(mTransformRecords).append(", mEncapSocketRecords=").append(mEncapSocketRecords).append("<END_MOD>} }
<START_MOD>private static java.util.Set<java.lang.String> separateAcknowledged(java.util.Set<java.lang.String> testCases, java.util.List<com.android.vts.entity.DeviceInfoEntity> devices, java.util.List<TestAcknowledgementEntity> acks) { java.util.Set<java.lang.String> acknowledged = new java.util.HashSet<>(); for (TestAcknowledgementEntity ack : acks) { boolean allDevices = ((ack.devices) == null) || ((ack.devices.size()) == 0); boolean allBranches = ((ack.branches) == null) || ((ack.branches.size()) == 0); boolean isRelevant = allDevices && allBranches; if (!isRelevant) { for (com.android.vts.entity.DeviceInfoEntity device : devices) { boolean deviceAcknowledged = allDevices || (ack.devices.contains(device.buildFlavor)); boolean branchAcknowledged = allBranches || (ack.branches.contains(device.branch)); if (deviceAcknowledged && branchAcknowledged) isRelevant = true; } } if (isRelevant) { boolean allTestCases = ((ack.testCaseNames) == null) || ((ack.testCaseNames.size()) == 0); if (allTestCases) { acknowledged.addAll(testCases); testCases.removeAll(acknowledged); } else { for (java.lang.String testCase : ack.testCaseNames) { if (testCases.contains(testCase)) { acknowledged.add(testCase); testCases.remove(testCase); } } } } } return acknowledged; }<END_MOD>
public void setBoolean(java.lang.Object object, boolean value) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException<START_MOD> { checkSetFinal()<END_MOD>;<START_MOD> checkAccess(object, getDeclaringClass(), getModifiers()); setBooleanNative(object, value); }<END_MOD>
public void postForkChild(int debugFlags<START_MOD>, boolean initializeNativeBridge<END_MOD>) { dalvik.system.ZygoteHooks.nativePostForkChild(token, debugFlags<START_MOD>, initializeNativeBridge<END_MOD>); }
<START_MOD>private void checkAsinFloat2() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testAsinFloat2(in, out); verifyResultsAsinFloat2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAsinFloat2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAsinFloat2(in, out); verifyResultsAsinFloat2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAsinFloat2: " + (e.toString()))); } }<END_MOD>
<START_MOD>private static java.lang.String outcome(java.lang.String testClassName, java.lang.String methodName, java.lang.String message, vogar.Result result) { java.lang.String testName = vogar.target.AbstractTestRunnerTest.testName(testClassName, methodName); return java.lang.String.format(("//00xx{\"outcome\":\"%s\"}\n" + ("%s" + "//00xx{\"result\":\"%s\"}\n")), testName, (message == null ? "" : message), result); }<END_MOD>
<START_MOD>public void testThreadEnd() { logWriter.println("testThreadEnd started"); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.setCountableThreadEnd(org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.EVENT_COUNT); checkReplyPacket(reply, "Failed to set THREAD_END with count modifier"); int requestID = reply.getNextValueAsInt(); assertAllDataRead(reply); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); waitForEvent(JDWPConstants.EventKind.THREAD_END, requestID); int count = getThreadRunCount(); assertEquals("Invalid event count", org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.EVENT_COUNT, count); reply = debuggeeWrapper.vmMirror.clearEvent(JDWPConstants.EventKind.THREAD_END, requestID); checkReplyPacket(reply, ("Failed to clear event " + requestID)); logWriter.println("testThreadEnd done"); }<END_MOD>
<START_MOD>private boolean shouldRun(@javax.annotation.Nonnull com.android.jack.test.toolchain.IToolchain currentToolchain, @javax.annotation.Nonnull java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>[] excludedToolchains) { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excluded = com.android.sched.util.collect.Lists.create(excludedToolchains); for (java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain> c : excluded) { if (c.isAssignableFrom(currentToolchain.getClass())) { return false; } } return true; }<END_MOD>
@org.junit.Test public void testProcessInitProfilePriorities() { <START_MOD>when(mHeadsetService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_UNDEFINED); when(mA2dpService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_UNDEFINED); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mAdapterService, mServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(<END_MOD>android.bluetooth.BluetoothDevice<START_MOD>.ACTION_UUID); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mTestDevice); android.os.ParcelUuid[] uuids<END_MOD> = new <START_MOD>android.os.ParcelUuid[2]; uuids[0] = android.bluetooth.BluetoothUuid.Handsfree; uuids[1] = android.bluetooth.BluetoothUuid.AudioSink; intent.putExtra(BluetoothDevice.EXTRA_UUID, uuids);<END_MOD> injector.onReceive(null, intent); <START_MOD>executeDelayedMessages(1); <END_MOD>verify(<START_MOD>mHeadsetService, <END_MOD>times(1)).setPriority(eq(<START_MOD>mTestDevice<END_MOD>), eq(BluetoothProfile.PRIORITY_ON)); verify(<START_MOD>mA2dpService, <END_MOD>times(1)).setPriority(eq(<START_MOD>mTestDevice<END_MOD>), eq(BluetoothProfile.PRIORITY_ON)); }
@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) { com.android.sched.vfs.<START_MOD>VPath typePath;<END_MOD> if ((<START_MOD>packagePath) != null) { typePath = new com.android.sched.vfs.VPath(packagePath.getPathAsString('/'), '/'); typePath.appendPath(new com.android.sched.vfs.VPath(simpleName, '/')); } else { typePath = new com.android.sched.vfs.VPath(simpleName, '/'); }<END_MOD> try { return new com.android.jack.jayce.JayceClassOrInterfaceLoader(inputJackLibrary, loading, simpleName, <START_MOD>inputJackLibrary.getFile(FileType.JAYCE, typePath<END_MOD>), lookup, defaultLoadLevel).load(); } catch (com.android.jack.LibraryException e) { com.android.jack.library.LibraryReadingException reportable = new com.android.jack.library.LibraryReadingException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, reportable); throw new com.android.jack.JackAbortException(reportable); } <START_MOD>catch (com.android.jack.library.FileTypeDoesNotExistException e) {<END_MOD> throw new com.android.jack.ir.ast.MissingJTypeLookupException(loading, simpleName); }<START_MOD> }<END_MOD>
public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { com.android.internal.telephony.uicc.IccCardStatus.CardState oldState = mCardState; mCardState = ics.mCardState; mContext = c; mCi = ci; mIccid<START_MOD> = ics.iccid; mCardId<END_MOD> = ics.iccid; if ((mCardState) != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = new com.android.internal.telephony.uicc.UiccProfile(mContext, mCi, ics, mPhoneId, this); } else { mUiccProfile.update(mContext, mCi, ics); } } else { throw new java.lang.RuntimeException( state is absent when updating! } } }
@java.lang.Override public void supplyIccPin2ForApp(java.lang.String pin, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_ENTER_SIM_PIN2, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) +   aid =   + aid)); } try { radioProxy.supplyIccPin2ForApp(rr.mSerial, convertNullToEmptyString(pin), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "supplyIccPin2ForApp", e); } } }
<START_MOD>private static void wrapperInit(int targetSdkVersion, java.lang.String[] argv) throws com.android.internal.os.Zygote.MethodAndArgsCaller { if (RuntimeInit.DEBUG) android.util.Slog.d(RuntimeInit.TAG, "RuntimeInit: Starting application from wrapper"); com.android.internal.os.RuntimeInit.applicationInit(targetSdkVersion, argv, null); }<END_MOD>
@java.lang.Override public boolean startSingleScan(com.android.server.wifi.WifiNative.ScanSettings settings, com.android.server.wifi.WifiNative.ScanEventHandler eventHandler) { if ((eventHandler == null) || (settings == null)) { android.util.Log.w(com.android.server.wifi.scanner.<START_MOD>WificondWifiScannerImpl<END_MOD>.TAG, ((( arguments for startSingleScan: settings= + settings) + ",eventHandler=") + eventHandler)); return false; } if (((mPendingSingleScanSettings) != null) || (((mLastScanSettings) != null) && (mLastScanSettings.singleScanActive))) { android.util.Log.w(com.android.server.wifi.scanner.<START_MOD>WificondWifiScannerImpl<END_MOD>.TAG,   single scan is already running return false; } synchronized(mSettingsLock) { mPendingSingleScanSettings = settings; mPendingSingleScanEventHandler = eventHandler; processPendingScans(); return true; } }
<START_MOD>void openFile(org.eclipse.core.resources.IFile file, org.eclipse.core.resources.IMarker marker) { try { org.eclipse.ui.IWorkbenchPage page = getViewSite().getWorkbenchWindow().getActivePage(); if (page != null) { org.eclipse.ui.ide.IDE.openEditor(page, marker); marker.delete(); } } catch (org.eclipse.core.runtime.CoreException e) { e.printStackTrace(); } }<END_MOD>
public void testAllTypes() { com.android.manifmerger.MergingReport mergingReport = new com.android.manifmerger.MergingReport.Builder(mLoggerMock).<START_MOD>addMessage<END_MOD>(<START_MOD>null, 0, 0, Severity.INFO,  <END_MOD> info<START_MOD> 0, 0, Severity.WARNING,  <END_MOD> weird happened<START_MOD> 0, 0, Severity.ERROR,  <END_MOD> bad happened assertEquals(MergingReport.Result.ERROR, mergingReport.getResult()); }
<START_MOD>private void upgradeDatabaseToVersion66(android.database.sqlite.SQLiteDatabase db) { try { db.execSQL((("ALTER TABLE " + (SmsProvider.TABLE_RAW)) + " ADD COLUMN display_originating_addr TEXT")); } catch (android.database.sqlite.SQLiteException e) { android.util.Log.w(com.android.providers.telephony.MmsSmsDatabaseHelper.TAG, (("[upgradeDatabaseToVersion65] Exception adding column " + ("display_originating_addr; " + "trying createThreadIdDateIndex() instead: ")) + e)); createThreadIdDateIndex(db); } }<END_MOD>
@org.junit.Test(expected = java.lang.IllegalStateException.class) public void testClear() throws java.lang.Exception {<START_MOD> java.util.concurrent.CountDownLatch factoryLatch = new java.util.concurrent.CountDownLatch(1);<END_MOD> final com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String> cache = new com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String>(new com.android.ide.common.caching.CreatingCacheTest.DelayedFactory(<START_MOD>factoryLatch<END_MOD>)); new java.lang.Thread(<START_MOD>new com.android.ide.common.caching.CreatingCacheTest.CacheRunnable(cache<END_MOD>)).start(); java.lang.Thread.sleep(1000); cache.clear(); }
public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
<START_MOD>@org.jetbrains.annotations.NotNull @java.lang.Override protected javax.swing.JComponent createEditor() { return new javax.swing.JPanel(); }<END_MOD>
<START_MOD>private void setImsRegistrationStatus() { if (getResources().getBoolean(R.bool.config_showImsRegistrationState)) { android.telephony.TelephonyManager tm = ((android.telephony.TelephonyManager) (getSystemService(Context.TELEPHONY_SERVICE))); boolean isImsRegistered = tm.isImsRegistered(android.telephony.SubscriptionManager.getDefaultDataSubId()); mImsStatus.setSummary((isImsRegistered ? R.string.ims_reg_status_registered : R.string.ims_reg_status_not_registered)); } else { removePreferenceFromScreen(com.android.settings.deviceinfo.Status.KEY_IMS_REGISTRATION_STATE); mImsStatus = null; } }<END_MOD>
<START_MOD>private void acknowledgeSms(int messageRef, int result) { getSmsImplementation().acknowledgeSms(messageRef, result); }<END_MOD>
<START_MOD>@android.test.suitebuilder.annotation.SmallTest public void testGetAccountsByType() { try { mAccountManager.getAccountsByType(null); fail("AccountManager.getAccountsByType() did not throw SecurityException as expected"); } catch (java.lang.SecurityException se) { return; } }<END_MOD>
public void testVolumeDndAffectedStream() throws java.lang.Exception { if (((<START_MOD>(<END_MOD>mUseFixedVolume) || (mHasVibrator)) || (mIsTelevision)) <START_MOD>|| (mIsSingleVolume)) <END_MOD>{ return; } android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 7, AudioManager.FLAG_ALLOW_RINGER_MODES); mAudioManager.setRingerMode(AudioManager.RINGER_MODE_NORMAL); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), false); try { mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 0, AudioManager.FLAG_ALLOW_RINGER_MODES); fail( without notification policy access cannot change ringer mode } catch (java.lang.SecurityException e) { } mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 1, AudioManager.FLAG_ALLOW_RINGER_MODES); assertEquals( did not change volume 1, mAudioManager.getStreamVolume(AudioManager.STREAM_SYSTEM)); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setRingerMode(AudioManager.RINGER_MODE_SILENT); mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 0, AudioManager.FLAG_ALLOW_RINGER_MODES); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), false); try { mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 6, AudioManager.FLAG_ALLOW_RINGER_MODES); fail( without notification policy access cannot change ringer mode } catch (java.lang.SecurityException e) { } }
public void run() { if ((threadIndex) == 0) { for (int i = 0; i < (Main.totalOperations); ++i) { if ((i % 50) == 0) { Main.deoptimizeAll(); } if ((i % 50) == 25) { Main.undeoptimizeAll(); } } Main.done = true; } else { while (!(Main.done)) { <START_MOD>java.lang.String str = <END_MOD>$noinline$run0()<START_MOD>; if (!(str.equals("abc"))) { java.lang.System.out.println((   + str)); return<END_MOD>; } } }<START_MOD> }<END_MOD>
<START_MOD>public abstract org.apache.harmony.xnet.provider.jsse.OpenSSLKey getOpenSSLKey();<END_MOD>
<START_MOD>private java.nio.file.FileStore readNext() { assert java.lang.Thread.holdsLock(this); for (; ;) { if (!(entries.hasNext())) return null; sun.nio.fs.UnixMountEntry entry = entries.next(); if (entry.isIgnored()) continue; java.lang.SecurityManager sm = java.lang.System.getSecurityManager(); if (sm != null) { try { sm.checkRead(new java.lang.String(entry.dir())); } catch (java.lang.SecurityException x) { continue; } } try { return getFileStore(entry); } catch (java.io.IOException ignore) { } } }<END_MOD>
public <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.StructStatVfs statvfs(java.lang.String path) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
public void retrieveNotificationList(java.lang.String cardId, @android.telephony.euicc.EuiccNotification.Event int events<START_MOD>, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor<END_MOD>, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification[]> callback) { try { getIEuiccCardController().retrieveNotificationList(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.euicc.IRetrieveNotificationListCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification[] notifications) { <START_MOD>executor.execute(() -> <END_MOD>callback.onComplete(resultCode, notifications)<START_MOD>)<END_MOD>; } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG,   calling retrieveNotificationList e); throw e.rethrowFromSystemServer(); } }
<START_MOD>void testDoPhase_withPhaseWhichIsNotLast(java.security.Provider provider) throws java.lang.Exception { javax.crypto.KeyAgreement keyAgreement = libcore.javax.crypto.ECDHKeyAgreementTest.getKeyAgreement(provider); keyAgreement.init(libcore.javax.crypto.ECDHKeyAgreementTest.KAT_PRIVATE_KEY1); try { keyAgreement.doPhase(libcore.javax.crypto.ECDHKeyAgreementTest.KAT_PUBLIC_KEY2, false); fail(); } catch (java.lang.IllegalArgumentException expected) { } }<END_MOD>
public java.net.InetAddress getsockoptInAddr(java.io.FileDescriptor fd, int level, int option) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { return os.getsockoptInAddr(fd, level, option); }
@org.junit.Test public void testMacAddressRandomGeneration() { final int iterations = 1000; final java.lang.String expectedAndroidOui = "da:a1:19"; for (int i = 0; i < iterations; i++) { android.net.MacAddress mac = android.net.MacAddress.<START_MOD>makeRandomAddress<END_MOD>(); java.lang.String stringRepr = mac.toString(); assertTrue((stringRepr +   expected to be a locally assigned address mac.isLocallyAssigned()); assertTrue(((stringRepr +   expected to begin with   + expectedAndroidOui), stringRepr.startsWith(expectedAndroidOui)); } final java.util.Random r = new java.util.Random(); final java.lang.String anotherOui = "24:5f:78"; final java.lang.String expectedLocalOui = "26:5f:78"; final android.net.MacAddress base = <START_MOD>android.net.MacAddress.fromString<END_MOD>((anotherOui + ":0:0:0")); for (int i = 0; i < iterations; i++) { android.net.MacAddress mac = android.net.MacAddress.<START_MOD>makeRandomAddress<END_MOD>(base, r); java.lang.String stringRepr = mac.toString(); assertTrue((stringRepr +   expected to be a locally assigned address mac.isLocallyAssigned()); assertTrue(((stringRepr +   expected to begin with   + expectedLocalOui), stringRepr.startsWith(expectedLocalOui)); } }
<START_MOD>static java.lang.Class<?> comparableClassFor(java.lang.Object x) { return null; }<END_MOD>
<START_MOD>private boolean isScanAllowedbyApps(java.lang.String pkgName) { boolean stat = checkAppOpAllowed(AppOpsManager.OP_WIFI_SCAN, pkgName); if (com.android.server.wifi.util.WifiPermissionsUtil.VERBOSE_LOG) { android.util.Log.e(com.android.server.wifi.util.WifiPermissionsUtil.TAG, ("Scan allowed by Apps " + stat)); } return stat; }<END_MOD>
@java.lang.Override @com.android.annotations.NonNull public com.android.build.gradle.internal.variant.ApplicationVariantData createVariantData(@com.android.annotations.NonNull com.android.builder.core.VariantConfiguration variantConfiguration, @com.android.annotations.NonNull java.util.Set<java.lang.String> densities, @com.android.annotations.NonNull java.util.Set<java.lang.String> abis, @com.android.annotations.NonNull java.util.Set<java.lang.String> compatibleScreens) { com.android.build.gradle.internal.variant.ApplicationVariantData variant = new com.android.build.gradle.internal.variant.ApplicationVariantData(basePlugin, variantConfiguration); if (!(densities.isEmpty())) { variant.setCompatibleScreens(compatibleScreens); } if ((variant.getSplitHandlingPolicy()) == (BaseVariantData.SplitHandlingPolicy.PRE_21_POLICY)) { for (java.lang.String density : densities) { for (java.lang.String abi : abis) { <START_MOD>com.google.common.collect.ImmutableList.Builder<com.android.build.SplitData> builder = com.google.common.collect.ImmutableList.builder(); if (density != null) { builder.add(new com.android.build.SplitData(SplitOutput.FilterType.DENSITY, density)); } if (abi != null) { builder.add(new com.android.build.SplitData(SplitOutput.FilterType.ABI, abi)); } <END_MOD>variant.createOutput(<START_MOD>SplitOutput.OutputType.FULL_SPLIT, builder.build()<END_MOD>); } } } else { variant.createOutput(<START_MOD>SplitOutput.OutputType.MAIN, java.util.Collections.<com.android.build.SplitData>emptyList()<END_MOD>); } return variant; }
<START_MOD>@java.lang.Override public java.lang.String toString() { java.lang.String className = getClassObj().getClassName(); return java.lang.String.format("%s@%08x", className, getId()); }<END_MOD>
public int recvfrom(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, int flags, java.net.InetSocketAddress srcAddress) throws <START_MOD>android.os.ErrnoException, <END_MOD>java.net.SocketException { return os.recvfrom(fd, buffer, flags, srcAddress); }
public native <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.StructUtsname uname();
@java.lang.Override @javax.annotation.Nonnull java.io.InputStream openRead(@javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVFile file) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.READ); VFSStatCategory.DIR_READ.getCounterStat(getTracer(), infoString).incValue(); java.io.File path = getNativeFile(file.getPath()); try { <START_MOD>com.android.sched.util.stream.QueryableInputStream qis = new com.android.sched.util.stream.QueryableInputStream(new java.io.FileInputStream(path)); openedStreams.add(qis); <END_MOD>return <START_MOD>qis<END_MOD>; } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.READ); throw new com.android.sched.util.ConcurrentIOException(e); } }
private void addImportedResource(@javax.annotation.Nonnull com.android.sched.vfs.InputVFile file, @javax.annotation.Nonnull com.android.jack.ir.ast.JSession session, @javax.annotation.Nonnull java.lang.String currentPath) throws com.android.jack.backend.jayce.ResourceImportConflictException { com.android.sched.vfs.VPath path = new com.android.sched.vfs.VPath(currentPath, com.android.jack.backend.jayce.JayceFileImporter.VPATH_SEPARATOR); if (path.equals(JackLibrary.LIBRARY_PROPERTIES_VPATH)) { return; } com.android.jack.ir.ast.Resource newResource = new com.android.jack.ir.ast.Resource(path, file); for (com.android.jack.ir.ast.Resource existingResource : session.getResources()) { if (existingResource.getPath().equals(path)) { <START_MOD>throw new <END_MOD>com.android.jack.backend.jayce.ResourceImportConflictException(newResource.getLocation(), existingResource.getLocation()); } <START_MOD>}<END_MOD> session.<START_MOD>addResource(<END_MOD>newResource<START_MOD>); }<END_MOD>
public boolean p2pSetChannel(int lc, int oc) { if (com.android.server.wifi.WifiNative.DBG) android.util.Log.d(mTAG, ((( lc= + lc) +   oc= + oc)); return mSupplicantP2pIfaceHal.setListenChannel(lc, oc); }
@android.test.suitebuilder.annotation.SmallTest public void testParcelWithInvalidMccMnc() { final java.lang.String invalidMcc = "randomStuff"; final java.lang.String invalidMnc = "randomStuff"; android.telephony.CellIdentityWcdma ci = new android.telephony.CellIdentityWcdma(com.android.internal.telephony.CellIdentityWcdmaTest.LAC, com.android.internal.telephony.CellIdentityWcdmaTest.CID, com.android.internal.telephony.CellIdentityWcdmaTest.PSC, com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(<START_MOD>CellIdentity.TYPE_WCDMA); p.writeInt(<END_MOD>com.android.internal.telephony.CellIdentityWcdmaTest.LAC); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.CID); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.PSC); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN); p.writeString(invalidMcc); p.writeString(invalidMnc); p.setDataPosition(0); android.telephony.CellIdentityWcdma newCi = CellIdentityWcdma.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }
<START_MOD>private void checkAcosFloat() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testAcosFloat(in, out); verifyResultsAcosFloat(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAcosFloat: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAcosFloat(in, out); verifyResultsAcosFloat(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAcosFloat: " + (e.toString()))); } }<END_MOD>
void testFloat4(<START_MOD>android.renderscript.RenderScript rs, <END_MOD>com.android.rs.test.ScriptC_copy_test s) { <START_MOD>android.renderscript<END_MOD>.Allocation a1 = <START_MOD>android.renderscript<END_MOD>.Allocation.createSized(rs, <START_MOD>android.renderscript<END_MOD>.Element.F32_4(rs), 1024); <START_MOD>android.renderscript<END_MOD>.Allocation a2 = <START_MOD>android.renderscript<END_MOD>.Allocation.createSized(rs, <START_MOD>android.renderscript<END_MOD>.Element.F32_4(rs), 1024); float[] f1 = new float[1024 * 4]; float[] f2 = new float[1024 * 4]; for (int ct = 0; ct < (f1.length); ct++) { f1[ct] = ((float) (ct)); } a1.copyFrom(f1); s.forEach_copyFloat4(a1, a2); a2.copyTo(f2); for (int ct = 0; ct < (f1.length); ct++) { if ((f1[ct]) != (f2[ct])) { failTest(); android.util.Log.v( Test ((((( failed at   + ct) +     + (f1[ct])) +     + (f2[ct]))); } } a1.destroy(); a2.destroy(); }
<START_MOD>public static com.android.sdklib.repository.local.Update.Result computeUpdates(@com.android.annotations.NonNull com.android.sdklib.repository.local.LocalPkgInfo[] localPkgs, @com.android.annotations.NonNull com.google.common.collect.Multimap<com.android.sdklib.repository.descriptors.PkgType, com.android.sdklib.repository.remote.RemotePkgInfo> remotePkgs) { com.android.sdklib.repository.local.Update.Result result = new com.android.sdklib.repository.local.Update.Result(); for (com.android.sdklib.repository.local.LocalPkgInfo local : localPkgs) { com.android.sdklib.repository.local.Update.findUpdate(local, remotePkgs, result); } return result; }<END_MOD>
<START_MOD>public void testTimeZoneParsingErrorIndex() { java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("yyyy z", java.util.Locale.ENGLISH); java.text.ParsePosition pos = new java.text.ParsePosition(0); java.util.Date parsed; parsed = dateFormat.parse("2000 foobar", pos); assertNull(parsed); assertEquals(5, pos.getErrorIndex()); }<END_MOD>
<START_MOD>@org.junit.Before public void setUp() throws java.lang.Exception { initMocks(this); when(mWifiInjector.makePasspointEventHandler(any(com.android.server.wifi.hotspot2.PasspointManager.class))).thenReturn(mHandler); mManager = new com.android.server.wifi.hotspot2.PasspointManager(mContext, mWifiInjector); }<END_MOD>
public void test_SSLSocket_getSSLParameters() throws java.lang.Exception { javax.net.ssl.SSLSocketFactory sf = ((javax.net.ssl.SSLSocketFactory) (javax.net.ssl.SSLSocketFactory.getDefault())); javax.net.ssl.SSLSocket ssl = ((javax.net.ssl.SSLSocket) (sf.createSocket())); javax.net.ssl.SSLParameters p = ssl.getSSLParameters(); assertNotNull(p); java.lang.String[] cipherSuites = p.getCipherSuites(); assertNotSame(cipherSuites, ssl.getEnabledCipherSuites()); assertEquals(java.util.Arrays.asList(cipherSuites), java.util.Arrays.asList(ssl.getEnabledCipherSuites())); java.lang.String[] protocols = p.getProtocols(); assertNotSame(protocols, ssl.getEnabledProtocols()); assertEquals(java.util.Arrays.asList(protocols), java.util.Arrays.asList(ssl.getEnabledProtocols())); assertEquals(p.getWantClientAuth(), ssl.getWantClientAuth()); assertEquals(p.getNeedClientAuth(), ssl.getNeedClientAuth()); <START_MOD>assertNull(p.getEndpointIdentificationAlgorithm()); p.setEndpointIdentificationAlgorithm("HTTPS"); assertEquals("HTTPS", p.getEndpointIdentificationAlgorithm()); p.setEndpointIdentificationAlgorithm("FOO"); assertEquals("FOO", p.getEndpointIdentificationAlgorithm()); <END_MOD>}
<START_MOD>@java.lang.Override public java.io.File getTestResourcesDir() { return testResourcesDir; }<END_MOD>
@javax.annotation.Nonnull private void fillDependencies(@javax.annotation.Nonnull com.android.jack.library.InputJackLibrary library, @javax.annotation.Nonnull com.android.sched.vfs.VPath dependencyVPath, @javax.annotation.Nonnull com.android.jack.analysis.dependency.Dependency dependency) throws com.android.jack.library.FileTypeDoesNotExistException, com.android.sched.util.file.CannotReadException { com.android.sched.vfs.InputVFile dependenciesVFile = library.getFile(FileType.DEPENDENCIES, dependencyVPath); java.io.InputStreamReader fileReader = null; try { fileReader = new java.io.InputStreamReader(dependenciesVFile.getInputStream()); dependency.read(fileReader); } catch (java.util.NoSuchElementException <START_MOD>| com.android.sched.util.file.WrongPermissionException <END_MOD>e) { throw new com.android.sched.util.file.CannotReadException(dependenciesVFile, e); } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotReadException(dependenciesVFile, e); } finally { if (fileReader != null) { try { fileReader.close(); } catch (java.io.IOException e) { } } } }
public void <START_MOD>testCertificateException<END_MOD>() { try { java.security.cert.CertificateFactory cf = java.security.cert.CertificateFactory.getInstance("X.509"); java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(tests.security.cert.X509Certificate2Test.base64certTampered.getBytes()); cert = ((java.security.cert.X509Certificate) (cf.generateCertificate(bais))); } catch (java.security.cert.CertificateException e) { } try { java.security.cert.CertificateFactory cf = java.security.cert.CertificateFactory.getInstance("X.509"); java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(tests.security.cert.X509Certificate2Test.base64cert.getBytes()); cert = ((java.security.cert.X509Certificate) (cf.generateCertificate(bais))); } catch (java.security.cert.CertificateException e) { } }
public void testZipFileWithLotsOfEntries() throws java.io.IOException { int expectedEntryCount = (64 * 1024) - 1; java.io.File f = createZipFile(expectedEntryCount, 0); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); int entryCount = <START_MOD>countEntries<END_MOD>(zipFile); assertEquals(expectedEntryCount, entryCount); zipFile.close(); }
@java.lang.Override public boolean matches(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) { if (((annotationType) != null) && (!(annotationType.matches(type.getAnnotations())))) { return false; } if (((modifier) != null) && (!(modifier.matches(type)))) { return false; } if (!(classType.matches(type))) { return false; } <START_MOD>boolean matchedName = false; for (com.android.jack.shrob.spec.NameSpecification <END_MOD>name<START_MOD> : nameSpecs) { if (name<END_MOD>.matches(com.android.jack.shrob.proguard.GrammarActions.getSourceFormatter().getName(type)))<START_MOD> { matchedName = true; } } if (!matchedName<END_MOD>) { return false; } if (((inheritance) != null) && (!(inheritance.matches(type)))) { return false; } return true; }
public native java.io.FileDescriptor dup(java.io.FileDescriptor oldFd) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
@com.android.annotations.Nullable public static java.awt.image.BufferedImage getPreviewFromVectorXml(int <START_MOD>forceImageWidth, float imageScale, @com.android.annotations.Nullable java.lang.String xmlFileContent, @com.android.annotations.Nullable java.lang.StringBuilder vdErrorLog) { if ((xmlFileContent == null) || (xmlFileContent.isEmpty())) { return null; } com.android.assetstudiolib.vectordrawable.VdParser p = new com.android.assetstudiolib.vectordrawable.VdParser(); com.android.assetstudiolib.vectordrawable.VdTree vdTree; java.io.InputStream inputStream = new java.io.ByteArrayInputStream(xmlFileContent.getBytes(Charsets.UTF_8)); vdTree = p.parse(inputStream, vdErrorLog); if (vdTree == null) { return null; } float vdWidth = vdTree.getBaseWidth(); float vdHeight = vdTree.getBaseHeight(); float <END_MOD>imageWidth<START_MOD>; float imageHeight; if (forceImageWidth > 0<END_MOD>) { <START_MOD>imageWidth = forceImageWidth; imageHeight = (forceImageWidth * vdHeight) / vdWidth; } else<END_MOD> { <START_MOD>imageWidth = vdWidth * imageScale; imageHeight = vdHeight * imageScale; } java.awt.image.BufferedImage image = new java.awt.image.BufferedImage(((int) (imageWidth)), ((int) (imageHeight)), java.awt.image.BufferedImage.TYPE_INT_ARGB); java.awt.Graphics g = image.getGraphics(); g.setColor(new java.awt.Color(255, 255, 255, 0)); g.fillRect(0, 0, image.getWidth(), image.getHeight()); vdTree.draw(g, image.getWidth(), image.getHeight()); <END_MOD>return <START_MOD>image<END_MOD>; }
@com.android.annotations.NonNull public com.android.tools.gradle.eclipse.GradleImport <START_MOD>setSdk<END_MOD>(@com.android.annotations.NonNull com.android.sdklib.<START_MOD>repository.local.LocalSdk<END_MOD> <START_MOD>localSdk<END_MOD>) { <START_MOD>mLocalSdk<END_MOD> = <START_MOD>localSdk<END_MOD>; mSdkLocation = <START_MOD>localSdk<END_MOD>.getLocation(); return this; }
protected void fillDexLists(java.util.List<com.android.sched.vfs.InputVFile> mainDexList, java.util.List<com.android.sched.vfs.InputVFile> anyDexList) throws com.android.jack.JackIOException { for (com.android.jack.ir.ast.JDefinedClassOrInterface type : com.android.jack.Jack.getSession().getTypesToEmit()) { try { com.android.sched.vfs.InputVFile inputVFile<START_MOD>; com.android.sched.util.location.Location loc<END_MOD> = <START_MOD>type.getLocation(); if (loc instanceof com.android.jack.library.TypeInInputLibraryLocation) { com.android.jack.library.InputLibrary inputLibrary = ((com.android.jack.library.TypeInInputLibraryLocation) (loc)).getInputLibraryLocation().getInputLibrary(); if (inputLibrary.hasBinary(BinaryKind.DEX)) { try { inputVFile = inputLibrary.getBinary(type, BinaryKind.DEX); } catch (com.android.jack.library.BinaryDoesNotExistException e) { throw new com.android.jack.JackUserException(e); } } else { inputVFile = getIntermediateDexDir<END_MOD>().getInputVFile(com.android.jack.backend.dex.DexWriter.getFilePath(type)); <START_MOD>} } else { inputVFile = getIntermediateDexDir().getInputVFile(com.android.jack.backend.dex.DexWriter.getFilePath(type)); } <END_MOD>if (type.containsMarker(com.android.jack.backend.dex.MainDexMarker.class)) { mainDexList.add(inputVFile); } else { anyDexList.add(inputVFile); } } catch (com.android.sched.util.file.NotFileOrDirectoryException e) { throw new com.android.jack.JackIOException((( trying to read file for type   + (com.android.jack.Jack.getUserFriendlyFormatter().getName(type))) + "'"), e); } } }
<START_MOD>public void setReportDir(java.lang.String reportDir) { this.reportDir = reportDir; }<END_MOD>
<START_MOD>@org.junit.Test public void testNoSettingsValueDefaultDisabledDoesNotStart() { setupFunctioningHardwareInterface(); when(mHardware.getDefaultTetherOffloadDisabled()).thenReturn(1); try { Settings.Global.getInt(mContentResolver, android.provider.Settings.Global.TETHER_OFFLOAD_DISABLED); fail(); } catch (android.provider.Settings.SettingNotFoundException expected) { } final com.android.server.connectivity.tethering.OffloadController offload = new com.android.server.connectivity.tethering.OffloadController(null, mHardware, mContentResolver, new android.net.util.SharedLog("test")); offload.start(); final org.mockito.InOrder inOrder = inOrder(mHardware); inOrder.verify(mHardware, times(1)).getDefaultTetherOffloadDisabled(); inOrder.verify(mHardware, never()).initOffloadConfig(); inOrder.verify(mHardware, never()).initOffloadControl(any(OffloadHardwareInterface.ControlCallback.class)); inOrder.verifyNoMoreInteractions(); }<END_MOD>
public native void fsync(java.io.FileDescriptor fd) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
public void <START_MOD>interrupt<END_MOD>(java.lang.<START_MOD>Thread thread<END_MOD>) { <START_MOD>dalvik.system.VMRuntime.getRuntime<END_MOD>()<START_MOD>.requestGC<END_MOD>(); }
<START_MOD>@java.lang.Override public void handoverTo(java.lang.String callId, android.telecom.PhoneAccountHandle destAcct, int videoState, android.os.Bundle extras) { try { android.telecom.Log.startSession("ICA.hT", mOwnerComponentName); long token = android.os.Binder.clearCallingIdentity(); try { synchronized(mLock) { com.android.server.telecom.Call call = mCallIdMapper.getCall(callId); if (call != null) { call.handoverTo(destAcct, videoState, extras); } else { android.telecom.Log.w(this, "sendCallEvent, unknown call id: %s", callId); } } } finally { android.os.Binder.restoreCallingIdentity(token); } } finally { android.telecom.Log.endSession(); } }<END_MOD>
<START_MOD>@java.lang.Override public boolean needsSequentialWriting() { return !(vfsList.get(0).getCapabilities().contains(Capabilities.PARALLEL_WRITE)); }<END_MOD>
public void test_setMaximumIntegerDigits() { java.text.NumberFormat format = java.text.NumberFormat.getInstance(); format.setMaximumIntegerDigits(2); assertEquals( result: case 1 "23", format.format(123)); format.setMaximumIntegerDigits(java.lang.Integer.MIN_VALUE); assertEquals( result: case 2 <START_MOD>"3"<END_MOD>, format.format(123)); }
private boolean setNetworkDetailedState(android.net.NetworkInfo.DetailedState state) { boolean hidden = false; if ((linkDebouncing) || (isRoaming())) { hidden = true; } if (com.android.server.wifi.WifiStateMachine.DBG) { log(((((( state, old = + (mNetworkInfo.getDetailedState())) +   and new state= + state) +   hidden= + hidden)); } if (((mNetworkInfo.getExtraInfo()) != null) && (<START_MOD>!(mWifiInfo.getSSID().equals(WifiSsid.NONE)))) { if (!(mNetworkInfo.getExtraInfo().equals(mWifiInfo.getSSID()))) { if (com.android.server.wifi.WifiStateMachine.DBG) { log(( state send new extra info + (mWifiInfo.getSSID()))); } mNetworkInfo.setExtraInfo(mWifiInfo.getSSID()); sendNetworkStateChangeBroadcast(null); } } if (hidden == true) { return false; } if (state<END_MOD> != <START_MOD>(mNetworkInfo.getDetailedState())) { mNetworkInfo.setDetailedState(state, null, mWifiInfo.getSSID()); if ((mNetworkAgent) != null) { mNetworkAgent.sendNetworkInfo(mNetworkInfo); }<END_MOD> sendNetworkStateChangeBroadcast(null); <START_MOD>return<END_MOD> true<START_MOD>; }<END_MOD> return false; }
<START_MOD>static void methodWithInvokeInterface(Interface interf) { interf.$noinline$doCall(); }<END_MOD>
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mTransportType); dest.writeInt(mDomain); dest.writeInt(mRegState); dest.writeInt(mAccessNetworkTechnology); dest.writeInt(mReasonForDenial); dest.writeBoolean(mEmergencyOnly); dest.writeIntArray(mAvailableServices); dest.writeParcelable(mCellIdentity, 0); <START_MOD>if ((mVoiceSpecificStates) != null) { dest.writeBoolean(true); mVoiceSpecificStates.writeToParcel(dest, flags); <END_MOD>}<START_MOD> else { dest.writeBoolean(false); } if ((mDataSpecificStates) != null) { dest.writeBoolean(true); mDataSpecificStates.writeToParcel(dest, flags); } else { dest.writeBoolean(false); } }<END_MOD>
@java.lang.Override @javax.annotation.Nonnull protected java.util.Map<T, U> convert(@javax.annotation.Nonnull java.util.List<java.util.Map.Entry<T, U>> list) <START_MOD>throws com.android.sched.util.codec.ConvertionException <END_MOD>{ <START_MOD>com.android.sched.util.config.ChainedException.ChainedExceptionBuilder<com.android.sched.util.codec.ConvertionException> exceptions = new com.android.sched.util.config.ChainedException.ChainedExceptionBuilder<com.android.sched.util.codec.ConvertionException>(); <END_MOD>java.util.Map<T, U> map = new java.util.HashMap<T, U>(java.lang.Math.round(((list.size()) / 0.75F)), 0.75F); for (java.util.Map.Entry<T, U> entry : list) { <START_MOD>if (!(<END_MOD>map.<START_MOD>containsKey(entry.getKey()))) { map.<END_MOD>put(entry.getKey(), entry.getValue()); } <START_MOD>else { exceptions.appendException(new com.android.sched.util.codec.ConvertionException((( for   + (entry.getKey())) +   is defined several times } } exceptions.throwIfNecessary(); <END_MOD>return map; }
<START_MOD>@java.lang.Override public org.eclipse.swt.graphics.Image getImage(java.lang.Object element) { com.android.sdkuilib.internal.repository.icons.ImageFactory imgFactory = mUpdaterData.getImageFactory(); if (imgFactory != null) { if ((mColumn) == (mColumnName)) { if (element instanceof com.android.sdkuilib.internal.repository.core.PkgCategory) { return imgFactory.getImageForObject(((com.android.sdkuilib.internal.repository.core.PkgCategory) (element)).getIconRef()); } else if (element instanceof com.android.sdkuilib.internal.repository.core.PkgItem) { return imgFactory.getImageForObject(((com.android.sdkuilib.internal.repository.core.PkgItem) (element)).getMainPackage()); } return imgFactory.getImageForObject(element); } else if (((mColumn) == (mColumnStatus)) && (element instanceof com.android.sdkuilib.internal.repository.core.PkgItem)) { com.android.sdkuilib.internal.repository.core.PkgItem pi = ((com.android.sdkuilib.internal.repository.core.PkgItem) (element)); switch (pi.getState()) { case INSTALLED : if (pi.hasUpdatePkg()) { return imgFactory.getImageByName(PackagesPageIcons.ICON_PKG_UPDATE); } else { return imgFactory.getImageByName(PackagesPageIcons.ICON_PKG_INSTALLED); } case NEW : java.lang.Package p = pi.getMainPackage(); if ((p != null) && (p.hasCompatibleArchive())) { return imgFactory.getImageByName(PackagesPageIcons.ICON_PKG_NEW); } else { return imgFactory.getImageByName(PackagesPageIcons.ICON_PKG_INCOMPAT); } } } } return super.getImage(element); }<END_MOD>
<START_MOD>public void handleEvent(org.eclipse.swt.widgets.Event e) { synchronized(this) { if (((tree) != null) && ((viewport) != null)) { com.android.hierarchyviewerlib.scene.DrawableViewNode.Point viewCenter = new com.android.hierarchyviewerlib.scene.DrawableViewNode.Point(((viewport.x) + ((viewport.width) / 2)), ((viewport.y) + ((viewport.height) / 2))); viewport.width = (getBounds().width) / (zoom); viewport.height = (getBounds().height) / (zoom); viewport.x = (viewCenter.x) - ((viewport.width) / 2); viewport.y = (viewCenter.y) - ((viewport.height) / 2); if ((viewport.width) > (tree.bounds.width)) { viewport.x = java.lang.Math.min(viewport.x, tree.bounds.x); viewport.x = java.lang.Math.max(viewport.x, (((tree.bounds.x) + (tree.bounds.width)) - (viewport.width))); } else { viewport.x = java.lang.Math.max(viewport.x, tree.bounds.x); viewport.x = java.lang.Math.min(viewport.x, (((tree.bounds.x) + (tree.bounds.width)) - (viewport.width))); } if ((viewport.height) > (tree.bounds.height)) { viewport.y = java.lang.Math.min(viewport.y, tree.bounds.y); viewport.y = java.lang.Math.max(viewport.y, (((tree.bounds.y) + (tree.bounds.height)) - (viewport.height))); } else { viewport.y = java.lang.Math.max(viewport.y, tree.bounds.y); viewport.y = java.lang.Math.min(viewport.y, (((tree.bounds.y) + (tree.bounds.height)) - (viewport.height))); } } } if ((viewport) != null) { model.setViewport(viewport); } }<END_MOD>
<START_MOD>static boolean matchOnSP(java.lang.String xmlSP, android.service.carrier.CarrierIdentifier id) { boolean matchFound = false; java.lang.String currentSP = id.getSpn(); if (com.android.carrierconfig.DefaultCarrierConfigService.SPN_EMPTY_MATCH.equalsIgnoreCase(xmlSP)) { if ((android.text.TextUtils.isEmpty(currentSP)) || (com.android.carrierconfig.DefaultCarrierConfigService.SPN_EMPTY_MATCH.equalsIgnoreCase(currentSP))) { matchFound = true; } } else if (currentSP != null) { java.util.regex.Pattern spPattern = java.util.regex.Pattern.compile(xmlSP); java.util.regex.Matcher matcher = spPattern.matcher(currentSP); matchFound = matcher.matches(); } return matchFound; }<END_MOD>
public void reloadConfig() throws com.android.jack.server.api.v01.ServerException<START_MOD>, com.android.sched.util.file.CannotChangePermissionException, com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.FileAlreadyExistsException, com.android.sched.util.file.NoSuchFileException<END_MOD>, com.android.sched.util.file.NotFileException, com.android.sched.util.file.WrongPermissionException, java.io.IOException { shutdownConnections(); try { checkAccess(serverDir, java.util.EnumSet.of(java.nio.file.attribute.PosixFilePermission.OWNER_READ, java.nio.file.attribute.PosixFilePermission.OWNER_WRITE, java.nio.file.attribute.PosixFilePermission.OWNER_EXECUTE)); loadConfig(); } catch (java.io.IOException e) { shutdown(); throw e; } start(new java.util.HashMap<java.lang.String, java.lang.Object>()); }
<START_MOD>public <END_MOD>static com.android.apksig.internal.apk.<START_MOD>SigningBlockScheme<END_MOD>.SignatureAlgorithm findById(int id) { for (com.android.apksig.internal.apk.<START_MOD>SigningBlockScheme<END_MOD>.SignatureAlgorithm alg : com.android.apksig.internal.apk.<START_MOD>SigningBlockScheme<END_MOD>.SignatureAlgorithm.values()) { if ((alg.getId()) == id) { return alg; } } return null; }
@com.android.monkeyrunner.doc.MonkeyRunnerExported(doc =   the accessibility ids of the current view returns =   accessibility ids of the view as a list of <START_MOD>int and long<END_MOD> public org.python.core.PyList getAccessibilityIds(org.python.core.PyObject[] args, java.lang.String[] kws) { org.python.core.ArgParser ap = com.android.monkeyrunner.JythonUtils.createArgParser(args, kws); com.google.common.base.Preconditions.checkNotNull(ap); <START_MOD>java.util.List<java.lang.String><END_MOD> ids = impl.getAccessibilityIds(); org.python.core.PyList pyIds = new org.python.core.PyList(); <START_MOD>if ((ids.size()) == 2) { pyIds.append(new org.python.core.PyInteger(java.lang.Integer.parseInt(ids.get(<END_MOD>0<START_MOD>))));<END_MOD> pyIds.append(new org.python.core.<START_MOD>PyLong(java.lang.Long.parseLong(ids.get(1))<END_MOD>)); } return pyIds; }
private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController1, com.android.internal.telephony.ims.ImsServiceController carrierController2) { mTestImsResolver.setImsServiceControllerFactory(<START_MOD>new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override public java.lang.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context<END_MOD> context, <START_MOD>android.content.ComponentName componentName, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks)<END_MOD> { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(deviceController.getComponentName()).thenReturn(componentName); return deviceController; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController1.getComponentName()).thenReturn(componentName); return carrierController1; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_2_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController2.getComponentName()).thenReturn(componentName); return carrierController2; } return null; }<START_MOD> }); }<END_MOD>
<START_MOD>public com.android.sdklib.devices.Device.Software getSoftware(int apiVersion) { for (com.android.sdklib.devices.Device.Software s : mSoftware) { if ((apiVersion >= (s.getMinSdkLevel())) && (apiVersion <= (s.getMaxSdkLevel()))) { return s; } } return null; }<END_MOD>
public final java.lang.String getOwnerPhoneNumberVcard(final boolean vcardType21<START_MOD>, boolean ignorefilter<END_MOD>, final byte[] filter) { if (com.android.bluetooth.pbap.BluetoothPbapConfig.useProfileForOwnerVcard()) { java.lang.String vcard = getOwnerPhoneNumberVcardFromProfile(vcardType21, <START_MOD>ignorefilter, <END_MOD>filter); if ((vcard != null) && ((vcard.length()) != 0)) { return vcard; } } com.android.bluetooth.pbap.BluetoothPbapCallLogComposer composer = new com.android.bluetooth.pbap.BluetoothPbapCallLogComposer(mContext); java.lang.String name = com.android.bluetooth.pbap.BluetoothPbapService.getLocalPhoneName(); java.lang.String number = com.android.bluetooth.pbap.BluetoothPbapService.getLocalPhoneNum(); java.lang.String vcard = composer.composeVCardForPhoneOwnNumber(Phone.TYPE_MOBILE, name, number, vcardType21); return vcard; }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mScanMode); dest.writeInt(mCallbackType); dest.writeInt(mScanResultType); dest.writeLong(mReportDelayMillis); dest.writeInt(mMatchMode); dest.writeInt(mNumOfMatchesPerFilter); <START_MOD>dest.writeInt((mLegacy ? 1 : 0)); <END_MOD>}
private void parse(java.lang.String line) { if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS_CODE)) { submitCurrentKeyValue(); <START_MOD>mInInstrumentResultSection = false; <END_MOD>parseStatusCode(line); } else if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS)) { submitCurrentKeyValue(); <START_MOD>mInInstrumentResultSection = false; <END_MOD>parseKey(line, com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS.length()); } else if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.RESULT)) { submitCurrentKeyValue(); <START_MOD>mInInstrumentResultSection = true; <END_MOD>parseKey(line, com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.RESULT.length()); } else if ((line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS_FAILED)) || (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.CODE))) { submitCurrentKeyValue()<START_MOD>; mInInstrumentResultSection = false<END_MOD>; mTestRunFinished = true; } else if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.TIME_REPORT)) { parseTime(line, com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.TIME_REPORT.length()); } else { if ((mCurrentValue) != null) { mCurrentValue.append("\r\n"); mCurrentValue.append(line); } else if ((line.trim().length()) > 0) { com.android.ddmlib.Log.d(com.android.ddmlib.testrunner.InstrumentationResultParser.LOG_TAG, ( line   + line)); } } }
@java.lang.Override public com.android.jack.dx.io.instructions.DecodedInstruction withIndex(int newIndex) { return new com.android.jack.dx.io.instructions.RegisterRangeDecodedInstruction(getFormat(), getOpcode(), newIndex, <START_MOD>getFirstIndexType<END_MOD>(), getTarget(), getLiteral(), a, registerCount); }
public void authenticateServer(java.lang.String cardId, java.lang.String matchingId, byte[] serverSigned1, byte[] serverSignature1, byte[] euiccCiPkIdToBeUsed, byte[] serverCertificate<START_MOD>, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor<END_MOD>, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().authenticateServer(mContext.getOpPackageName(), cardId, matchingId, serverSigned1, serverSignature1, euiccCiPkIdToBeUsed, serverCertificate, new com.android.internal.telephony.euicc.IAuthenticateServerCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { <START_MOD>executor.execute(() -> <END_MOD>callback.onComplete(resultCode, response)<START_MOD>)<END_MOD>; } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG,   calling authenticateServer e); throw e.rethrowFromSystemServer(); } }
<START_MOD>@java.lang.Override @javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVDir getVDir(@javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVDir parent, @javax.annotation.Nonnull java.lang.String name) throws com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotDirectoryException { java.util.List<com.android.sched.vfs.BaseVDir> parentWrappedDirs = parent.getWrappedDirs(); com.android.sched.vfs.BaseVDir dirToWrap = null; for (com.android.sched.vfs.BaseVDir parentWrappedDir : parentWrappedDirs) { try { dirToWrap = parentWrappedDir.getVDir(name); break; } catch (com.android.sched.util.file.NoSuchFileException e) { } } if (dirToWrap == null) { throw new com.android.sched.util.file.NoSuchFileException(getVDirLocation(parent, name)); } return new com.android.sched.vfs.UnionVFS.UnionVDir(this, parent, com.google.common.collect.Lists.newArrayList(dirToWrap)); }<END_MOD>
<START_MOD>public java.lang.Boolean tryWriteToFile(java.io.File directory) { java.io.File historyFile = new java.io.File(directory, com.android.compatibility.common.util.InvocationHistory.HISTORY_FILE); try (java.io.FileOutputStream outputStream = new java.io.FileOutputStream(historyFile)) { com.google.gson.Gson gson = new com.google.gson.Gson(); java.lang.String historyJson = gson.toJson(this); org.apache.commons.io.IOUtils.write(historyJson, outputStream); } catch (java.io.IOException e) { e.printStackTrace(); } }<END_MOD>
public void test_getRemoteDevice() {<START_MOD> if (!(isSupport)) { return; }<END_MOD> android.bluetooth.BluetoothAdapter adapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); disable(adapter); try { adapter.getRemoteDevice(null); fail( not thrown } catch (java.lang.IllegalArgumentException e) { } try { adapter.getRemoteDevice("00:00:00:00:00:00:00:00"); fail( not thrown } catch (java.lang.IllegalArgumentException e) { } android.bluetooth.BluetoothDevice device = adapter.getRemoteDevice("00:11:22:AA:BB:CC"); assertNotNull(device); assertEquals("00:11:22:AA:BB:CC", device.getAddress()); }
<START_MOD>private void checkAtan2Float3Float3() { android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInX(inX); script.forEach_testAtan2Float3Float3(inY, out); verifyResultsAtan2Float3Float3(inY, inX, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAtan2Float3Float3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInX(inX); scriptRelaxed.forEach_testAtan2Float3Float3(inY, out); verifyResultsAtan2Float3Float3(inY, inX, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAtan2Float3Float3: " + (e.toString()))); } }<END_MOD>
public static java.text.BreakIterator getCharacterInstance(java.util.Locale locale) { return new java.text.<START_MOD>IcuIteratorWrapper<END_MOD>(<START_MOD>com.android.ibm<END_MOD>.icu.<START_MOD>text.BreakIterator<END_MOD>.getCharacterInstance(locale)); }
<START_MOD>public void onProvisionDiscoveryPbcResponse(byte[] p2pDeviceAddress) { }<END_MOD>
private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { if (callback == null) { throw new java.lang.IllegalArgumentException( NetworkCallback } if ((need == null) && (action != (android.net.ConnectivityManager.REQUEST))) { throw new java.lang.IllegalArgumentException( NetworkCapabilities } final <START_MOD>int sdk = mContext.getApplicationInfo().targetSdkVersion; if ((sdk > (android.os.Build.VERSION_CODES.N_MR1)) && ((callback.networkRequest) == null)) { throw new java.lang.IllegalArgumentException( already registered } final <END_MOD>android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return request; }
@java.lang.Override protected void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddr, destAddr, text, (deliveryIntent != null)); if (pdu != null) { sendRawPdu(pdu.encodedScAddress, pdu.encodedMessage, sentIntent, deliveryIntent, destAddr<START_MOD>, false<END_MOD>); } else { android.telephony.Rlog.e(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG,   getSubmitPdu() returned null } }
public static java.util.List<com.android.apksig.internal.apk.v2.SignatureAlgorithm> getSuggestedSignatureAlgorithms(java.security.PublicKey signingKey, int minSdkVersion<START_MOD>, boolean apkSigningBlockPaddingSupported<END_MOD>) throws java.security.InvalidKeyException { java.lang.String keyAlgorithm = signingKey.getAlgorithm(); if ("RSA".equalsIgnoreCase(keyAlgorithm)) { int modulusLengthBits = ((java.security.interfaces.RSAKey) (signingKey)).getModulus().bitLength(); if (modulusLengthBits <= 3072) { return java.util.Collections.singletonList(SignatureAlgorithm.RSA_PKCS1_V1_5_WITH_SHA256); } else { return java.util.Collections.singletonList(SignatureAlgorithm.RSA_PKCS1_V1_5_WITH_SHA512); } } else if ("DSA".equalsIgnoreCase(keyAlgorithm)) { return java.util.Collections.singletonList(SignatureAlgorithm.DSA_WITH_SHA256); } else if ("EC".equalsIgnoreCase(keyAlgorithm)) { int keySizeBits = ((java.security.interfaces.ECKey) (signingKey)).getParams().getOrder().bitLength(); if (keySizeBits <= 256) { return java.util.Collections.singletonList(SignatureAlgorithm.ECDSA_WITH_SHA256); } else { return java.util.Collections.singletonList(SignatureAlgorithm.ECDSA_WITH_SHA512); } } else { throw new java.security.InvalidKeyException(( key algorithm:   + keyAlgorithm)); } }
public native <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.StructStatVfs fstatvfs(java.io.FileDescriptor fd) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
<START_MOD>public void addKickStartParameters(com.intellij.execution.configurations.ParametersList vmParams) { java.io.File agentJar = getSdkJar(com.google.gct.idea.appengine.sdk.AppEngineSdk.AGENT_JAR_PATH); if (agentJar != null) { vmParams.add(("-javaagent:" + (agentJar.getAbsolutePath()))); } java.io.File overridesJar = getSdkJar(com.google.gct.idea.appengine.sdk.AppEngineSdk.OVERRIDES_JAR_PATH); if (overridesJar != null) { vmParams.add(("-Xbootclasspath/p:" + (overridesJar.getAbsolutePath()))); } }<END_MOD>
<START_MOD>private static boolean isNexus(com.android.sdklib.devices.Device device) { return device.getName().contains(com.android.sdkuilib.internal.widgets.AvdCreationPresenter.NEXUS); }<END_MOD>
<START_MOD>private synchronized void handleBatteryLevelFailure() { if ((mPendingRequest) != null) { mPendingRequest.set(null); } mPendingRequest = null; }<END_MOD>
<START_MOD>public void test_forEach() throws java.lang.Exception { java.util.LinkedHashMap<java.lang.String, java.lang.String> map = new java.util.LinkedHashMap<java.lang.String, java.lang.String>(); map.put("one", "1"); map.put("two", "2"); map.put("three", "3"); java.util.LinkedHashMap<java.lang.String, java.lang.String> output = new java.util.LinkedHashMap<java.lang.String, java.lang.String>(); map.forEach(( k, v) -> output.put(k, v)); assertEquals(3, output.size()); assertEquals(map.get("one"), output.get("one")); assertEquals(map.get("two"), output.get("two")); assertEquals(map.get("three"), output.get("three")); }<END_MOD>
public void test3_2ParameterChangedListener() throws java.lang.Exception { if (!(isBassBoostAvailable())) { return; } synchronized(mLock) { mInitialized = false; createListenerLooper(false, false, true); waitForLooperInitialization_l(); getBassBoost(<START_MOD>1<END_MOD>); mChangedParameter = -1; mBassBoost.setStrength(android.media.cts.BassBoostTest.TEST_STRENGTH); int looperWaitCount = android.media.cts.BassBoostTest.MAX_LOOPER_WAIT_COUNT; while (((mChangedParameter) == (-1)) && ((looperWaitCount--) > 0)) { try { mLock.wait(); } catch (java.lang.Exception e) { } } terminateListenerLooper(); releaseBassBoost(); } assertEquals( change not received BassBoost.PARAM_STRENGTH, mChangedParameter); }
public void testNullValue() throws org.json.JSONException { org.json.JSONObject object = new org.json.JSONObject(); object.put("foo", JSONObject.NULL); object.put("bar", ((java.<START_MOD>lang.Object) (null))); object.put("baz", ((java.<END_MOD>util.Collection) (null))); assertTrue(object.has("foo")); assertFalse(object.has("bar")); assertTrue(object.<START_MOD>has("baz")); assertTrue(object.<END_MOD>isNull("foo")); assertTrue(object.isNull("bar")); <START_MOD>assertFalse(object.isNull("baz")); <END_MOD>}
<START_MOD>@org.junit.Test public void testCleanupAndRelease() throws android.os.RemoteException { android.os.IBinder binderMock = mock(android.os.IBinder.class); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource = getTestRefcountedResource(binderMock); refcountedResource.cleanupAndRelease(); assertResourceState(refcountedResource, (-1), 1, 1, 1, 1); verify(binderMock).unlinkToDeath(eq(refcountedResource), eq(0)); assertNull(refcountedResource.mBinder); }<END_MOD>
<START_MOD>public void bindResponse(int ind_id, int ind_status) { com.android.bluetooth.hfp.HeadsetService service = getService(); if (service == null) return; service.bindResponse(ind_id, ind_status); }<END_MOD>
@java.lang.Override public void onReceivedSslError(android.webkit.WebView view, android.webkit.SslErrorHandler handler, android.net.http.SslError error) { <START_MOD>java.net.URL url = com.android.captiveportallogin.CaptivePortalLoginActivity.makeURL(error.getUrl()); if (((url == null) || ((mHostname) == null)) || (!(mHostname.equals(url.getHost())))) { return; } <END_MOD>logMetricsEvent(MetricsEvent.CAPTIVE_PORTAL_LOGIN_ACTIVITY_SSL_ERROR); android.util.Log.w(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, (((((( error (error:   + (error.getPrimaryError())) +   host:   + (android.net.Uri.parse(error.getUrl()).getHost())) +   certificate:   + (error.getCertificate())) +   displaying SSL warning. final java.lang.String sslErrorPage = makeSslErrorPage(); if (com.android.captiveportallogin.CaptivePortalLoginActivity.VDBG) { android.util.Log.d(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, sslErrorPage); } view.loadDataWithBaseURL(com.android.captiveportallogin.CaptivePortalLoginActivity.MyWebViewClient.INTERNAL_ASSETS, sslErrorPage, "text/HTML", "UTF-8", null); }
<START_MOD>public void supplyPin2(java.lang.String pin2, android.os.Message onComplete) { mCi.supplyIccPin2(pin2, onComplete); }<END_MOD>
<START_MOD>private com.android.jack.ir.ast.JExpressionStatement makeBoostCall(com.android.jack.ir.sourceinfo.SourceInfo info) { return new com.android.jack.ir.ast.JExpressionStatement(info, new com.android.jack.ir.ast.JMethodCall(info, null, ams, boostMethodId, JPrimitiveTypeEnum.VOID.getType(), false)); }<END_MOD>
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession program) throws com.android.jack.JackUserException { try { com.android.<START_MOD>jack.Jack.getSession().getTypeDependencies().write(<END_MOD>outputLibrary.createFile(FileType.DEPENDENCIES, TypeDependencies.vpath)); } catch (com.android.sched.util.file.CannotCreateFileException e) { com.android.jack.experimental.incremental.IncrementalException incrementalException = new com.android.jack.experimental.incremental.IncrementalException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, incrementalException); throw new com.android.jack.JackAbortException(incrementalException); } catch (java.io.IOException e) { com.android.jack.experimental.incremental.IncrementalException incrementalException = new com.android.jack.experimental.incremental.IncrementalException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, incrementalException); throw new com.android.jack.JackAbortException(incrementalException); } }
<START_MOD>private static void buildTable(java.util.List<com.android.hierarchyviewerlib.models.DumpThemeModel.DumpThemeModelData> data) { org.eclipse.swt.widgets.Table table = new org.eclipse.swt.widgets.Table(com.android.hierarchyviewerlib.ui.DumpThemeDisplay.sShell, ((org.eclipse.swt.SWT.BORDER) | (org.eclipse.swt.SWT.FULL_SELECTION))); table.setHeaderVisible(true); table.setLinesVisible(true); java.lang.String[] headers = new java.lang.String[]{ "Resource Name", "Resource Value" }; for (int i = 0; i < (headers.length); ++i) { org.eclipse.swt.widgets.TableColumn column = new org.eclipse.swt.widgets.TableColumn(table, org.eclipse.swt.SWT.NONE); column.setText(headers[i]); } for (com.android.hierarchyviewerlib.models.DumpThemeModel.DumpThemeModelData resource : data) { org.eclipse.swt.widgets.TableItem row = new org.eclipse.swt.widgets.TableItem(table, org.eclipse.swt.SWT.NONE); row.setText(0, resource.getName()); row.setText(1, resource.getValue()); } for (int i = 0; i < (headers.length); ++i) { table.getColumn(i).pack(); } table.setSize(com.android.hierarchyviewerlib.ui.DumpThemeDisplay.DEFAULT_WIDTH, com.android.hierarchyviewerlib.ui.DumpThemeDisplay.DEFAULT_HEIGHT); }<END_MOD>
private void handleSimLocked(int slotId, java.lang.String reason) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM))) { logd((("SIM" + (slotId + 1)) +   hot plug in com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = null; } <START_MOD>java.lang.String iccId = com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]; if (iccId == null) { <END_MOD>com.android.internal.telephony.uicc.<START_MOD>IccRecords records<END_MOD> = com.android.internal.telephony.SubscriptionInfoUpdater.mPhone[slotId].getIccCard()<START_MOD>.getIccRecords(); if ((records.getFullIccId()<END_MOD>) == null) <START_MOD>{ logd( IccID null return; } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = records.getFullIccId(); } else { logd(((( Querying IccId its already set sIccid[ + slotId) + "]=") +<END_MOD> iccId<START_MOD>)); }<END_MOD> updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED, reason); }
<START_MOD>private void checkRefactoringByOffset(java.lang.String basename, java.lang.String styleFileName, java.lang.String newStyleName, boolean removeExtracted, boolean applyStyle, int expectedModifiedFileCount, java.lang.String beginCaretLocation, java.lang.String endCaretLocation) throws java.lang.Exception { org.eclipse.core.resources.IFile file = getLayoutFile(getProject(), basename); int beginOffset = getCaretOffset(file, beginCaretLocation); int endOffset = getCaretOffset(file, endCaretLocation); com.android.ide.eclipse.adt.internal.editors.layout.refactoring.TestContext info = setupTestContext(file, basename); com.android.ide.eclipse.adt.internal.editors.layout.refactoring.TestLayoutEditor layoutEditor = info.mLayoutEditor; org.eclipse.ui.IWorkbench workbench = org.eclipse.ui.PlatformUI.getWorkbench(); org.eclipse.ui.IWorkbenchWindow activeWorkbenchWindow = workbench.getActiveWorkbenchWindow(); org.eclipse.ui.IWorkbenchPage page = activeWorkbenchWindow.getActivePage(); org.eclipse.ui.ide.IDE.openEditor(page, file); org.eclipse.jface.text.ITextSelection selection = new org.eclipse.jface.text.TextSelection(beginOffset, (endOffset - beginOffset)); com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ExtractStyleRefactoring refactoring = new com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ExtractStyleRefactoring(file, layoutEditor, selection, null); refactoring.setStyleName(newStyleName); refactoring.setApplyStyle(applyStyle); refactoring.setRemoveExtracted(removeExtracted); refactoring.setStyleFileName(styleFileName); checkRefactoringt(basename, styleFileName, newStyleName, removeExtracted, applyStyle, expectedModifiedFileCount, file, refactoring); }<END_MOD>
public void testCookieStoreNullUris() { java.net.CookieStore cookieStore = new java.net.CookieManager(createCookieStore(), null).getCookieStore(); java.net.HttpCookie cookieA = libcore.java.net.AbstractCookiesTest.createCookie("a", "android", ".android.com", "/source"); java.net.HttpCookie cookieB = libcore.java.net.AbstractCookiesTest.createCookie("b", "banana", "code.google.com", "/p/android"); try { cookieStore.add(null, cookieA); <START_MOD>fail(); <END_MOD>} catch (java.lang.NullPointerException expected) { expected.printStackTrace(); } assertEquals(java.util.Arrays.asList(cookieA), cookieStore.getCookies()); try { cookieStore.add(null, cookieB<START_MOD>); fail(<END_MOD>); } catch (java.lang.NullPointerException expected) { } assertEquals(java.util.Arrays.asList(cookieA, cookieB), cookieStore.getCookies()); try { cookieStore.get(null); fail(); } catch (java.lang.NullPointerException expected) { } assertEquals(java.util.Collections.<java.net.URI>emptyList(), cookieStore.getURIs()); assertTrue(cookieStore.remove(null, cookieA)); assertEquals(java.util.Arrays.asList(cookieB), cookieStore.getCookies()); assertTrue(cookieStore.removeAll()); assertEquals(java.util.Collections.<java.net.URI>emptyList(), cookieStore.getURIs()); assertEquals(java.util.Collections.<java.net.HttpCookie>emptyList(), cookieStore.getCookies()); }
public static java.lang.String toASCII(java.lang.String input, int flags) { <START_MOD>try { <END_MOD>return <START_MOD>com.ibm<END_MOD>.icu.<START_MOD>text<END_MOD>.<START_MOD>IDNA.convertIDNToASCII<END_MOD>(input, flags)<START_MOD>.toString()<END_MOD>; }<START_MOD> catch (java.net.com.ibm e) { throw new java.lang.IllegalArgumentException(( input to toASCI:   + input)); } }<END_MOD>
@java.lang.Override public void getIccCardStatus(android.os.Message result) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_GET_SIM_STATUS, result); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); <START_MOD>com.android.internal.telephony.IRadio radioProxy = getRadioProxy(); if (radioProxy != null) { acquireWakeLock(rr, com.android.internal.telephony.RIL.FOR_WAKELOCK); synchronized(mRequestList) { mRequestList.append(rr.mSerial, rr); } try { radioProxy.getIccCardStatus(mInstanceId, rr.mSerial); } catch (java.lang.Exception e) { riljLog(( exception   + e)); rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); rr.release(); } } else { rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); rr.release(); } }<END_MOD>
public void stopListening() { <START_MOD>mLog.log<END_MOD>( for SIM changes if ((mBroadcastReceiver) == null) return; mSimBcastGenerationNumber.incrementAndGet(); mContext.unregisterReceiver(mBroadcastReceiver); mBroadcastReceiver = null; }
<START_MOD>public static android.os.StructStatVfs fstatvfs(java.io.FileDescriptor fd) throws android.os.ErrnoException { return Libcore.os.fstatvfs(fd); }<END_MOD>
<START_MOD>public java.util.List<java.lang.String> getCountryIsoCodes() { java.util.List<java.lang.String> isoCodes = new java.util.ArrayList(countryTimeZonesList.size()); for (libcore.util.CountryTimeZones countryTimeZones : countryTimeZonesList) { isoCodes.add(countryTimeZones.getCountryIso()); } return java.util.Collections.unmodifiableList(isoCodes); }<END_MOD>
<START_MOD>public void connect() { mRetryCount = 0; sendEmptyMessage(com.android.ims.ImsManager.Connector.EVENT_GET_IMS_SERVICE); }<END_MOD>
<START_MOD>public void testWarningWhenExplicitlyExportingPreferenceActivitySubclass() throws java.lang.Exception { assertEquals(("AndroidManifest.xml:28: Warning: PreferenceActivity subclass test.pkg.PreferenceActivitySubclass should not be exported [ExportedPreferenceActivity]\n" + ((" <activity\n" + " ^\n") + "0 errors, 1 warnings\n")), lintProject("bytecode/.classpath=>.classpath", "bytecode/export_preference_activity_subclass_explicit.xml=>AndroidManifest.xml", "bytecode/PreferenceActivitySubclass.class.data=>bin/classes/test/pkg/PreferenceActivitySubclass.class")); }<END_MOD>
@java.lang.Override public void onConnected() { android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, ((   + (mCurrentPlayer.packageName)) +   OK mCurrentBrowser.disconnect(); mCurrentBrowser = null; <START_MOD>synchronized(mBrowsePlayerInfoList) { <END_MOD>mBrowsePlayerInfoList.add(mCurrentPlayer);<START_MOD> }<END_MOD> com.android.bluetooth.avrcp.MediaPlayerInfo info = getMediaPlayerInfo(mCurrentPlayer.packageName); com.android.bluetooth.avrcp.MediaController controller =<START_MOD> (info == null) ? null :<END_MOD> info.getMediaController(); if (controller != null) { addMediaPlayerController(controller.getWrappedInstance()); } else { addMediaPlayerPackage(mCurrentPlayer.packageName); } mPlayersChanged = true; connectNextPlayer(); }
public void test_getDoInput() throws java.io.IOException { assertTrue( be set to true by default uc.getDoInput()); fileURLCon.setDoInput(true); assertTrue( have been set to true fileURLCon.getDoInput()); uc2.setDoInput(false); assertFalse( have been set to false uc2.getDoInput()); fileURLCon.connect(); fileURLCon.getInputStream().close(); uc2.connect(); try { uc2.getInputStream(); <START_MOD>fail( have thrown <END_MOD>} catch (java.lang.Throwable expected) { } }
<START_MOD>public void testFieldModification() { logWriter.println("testFieldModification started"); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); logWriter.println("=> Check capability: canWatchFieldModification"); if (!(debuggeeWrapper.vmMirror.canWatchFieldModification())) { logWriter.println("##WARNING: this VM doesn't possess capability: canWatchFieldModification"); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); return; } org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.setCountableFieldModification(org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.DEBUGGEE_SIGNATURE, JDWPConstants.TypeTag.CLASS, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.WATCHED_FIELD_NAME, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.EVENT_COUNT); checkReplyPacket(reply, "Failed to set FIELD_MODIFICATION with count modifier"); int requestID = reply.getNextValueAsInt(); assertAllDataRead(reply); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); waitForEvent(JDWPConstants.EventKind.FIELD_MODIFICATION, requestID); int count = getFieldReadWriteCount(); assertEquals("Invalid event count", org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.EVENT_COUNT, count); reply = debuggeeWrapper.vmMirror.clearEvent(JDWPConstants.EventKind.FIELD_MODIFICATION, requestID); checkReplyPacket(reply, ("Failed to clear event " + requestID)); logWriter.println("testFieldModification done"); }<END_MOD>
<START_MOD>void onAdvertisingSetStarted(int reg_id, int advertiser_id, int status) throws java.lang.Exception { if (com.android.bluetooth.gatt.AdvertiseManager.DBG) android.util.Log.d(com.android.bluetooth.gatt.AdvertiseManager.TAG, ((((("onAdvertisingSetStarted() - reg_id=" + reg_id) + ", advertiser_id=") + advertiser_id) + ", status=") + status)); java.util.Map.Entry<android.os.IBinder, com.android.bluetooth.gatt.AdvertiseManager.AdvertiserBag> entry = findAdvertiser(reg_id); if (entry == null) { android.util.Log.i(com.android.bluetooth.gatt.AdvertiseManager.TAG, ("onAdvertisingSetStarted() - no callback found for reg_id " + reg_id)); stopAdvertisingSetNative(advertiser_id); return; } android.bluetooth.le.IAdvertisingSetCallback callback = entry.getValue().callback; if (status == 0) { entry.setValue(new com.android.bluetooth.gatt.AdvertiseManager.AdvertiserBag(advertiser_id, entry.getValue().deathRecipient, callback)); } else { android.os.IBinder binder = entry.getKey(); binder.unlinkToDeath(entry.getValue().deathRecipient, 0); mAdvertisers.remove(binder); } callback.onAdvertisingSetStarted(advertiser_id, status); }<END_MOD>
static double <START_MOD>$opt$noinline$IntToDouble<END_MOD>(int a) { return ((double) (a)); }
private float[] createInputArrayFloat(int len, int seed) { <START_MOD>java.util.Random<END_MOD> <START_MOD>rand =<END_MOD> new java.util.Random(seed)<START_MOD>; float[] array = new float[len]; for (int i = 0; i < len; ++i) array[i] = rand.nextFloat(<END_MOD>); <START_MOD>return array; <END_MOD>}
<START_MOD>private void updateUids(com.android.server.connectivity.NetworkAgentInfo nai, android.net.NetworkCapabilities prevNc, android.net.NetworkCapabilities newNc) { final java.util.Set<android.net.UidRange> prevRanges = (null == prevNc) ? null : prevNc.getUids(); final java.util.Set<android.net.UidRange> newRanges = (null == newNc) ? null : newNc.getUids(); final java.util.ArrayList<android.net.UidRange> removedRanges; final java.util.ArrayList<android.net.UidRange> addedRanges; if (null == prevRanges) { if (null == newRanges) { return; } removedRanges = null; addedRanges = new java.util.ArrayList(newRanges); } else if (null == newNc) { removedRanges = new java.util.ArrayList(prevRanges); addedRanges = null; } else { removedRanges = new java.util.ArrayList(); addedRanges = new java.util.ArrayList(); for (final android.net.UidRange prevRange : prevRanges) { if (!(newRanges.contains(prevRange))) { removedRanges.add(prevRange); } } for (final android.net.UidRange newRange : newRanges) { if (!(prevRanges.contains(newRange))) { addedRanges.add(newRange); } } } try { if ((null != removedRanges) && (!(removedRanges.isEmpty()))) { final android.net.UidRange[] removedRangesArray = new android.net.UidRange[removedRanges.size()]; removedRanges.toArray(removedRangesArray); mNetd.removeVpnUidRanges(nai.network.netId, removedRangesArray); } if ((null != addedRanges) && (!(addedRanges.isEmpty()))) { final android.net.UidRange[] addedRangesArray = new android.net.UidRange[addedRanges.size()]; addedRanges.toArray(addedRangesArray); mNetd.addVpnUidRanges(nai.network.netId, addedRangesArray); } } catch (java.lang.Exception e) { com.android.server.ConnectivityService.loge(("Exception in updateUids: " + e)); } }<END_MOD>
public static void applyInvokeWithSystemProperty(com.android.internal.os.ZygoteConnection.Arguments args) { if (((args.invokeWith) == null) && ((args.niceName) != null)) { java.lang.String property = "wrap." + (args.niceName); <START_MOD>args.invokeWith = android.os.SystemProperties.get(property); if (((args.invokeWith) != null) && ((args.invokeWith<END_MOD>.length()) <START_MOD>== 0)) { args.invokeWith = null; if ((property.length()) <END_MOD>> 31) { if ((property.charAt(30)) != '.') { property = property.substring(0, 31); } else { property = property.substring(0, 30); } } args.invokeWith = android.os.SystemProperties.get(property); if (((args.invokeWith) != null) && ((args.invokeWith.length()) == 0)) { args.invokeWith = null; } } }<START_MOD> }<END_MOD>
@dalvik.annotation.TestTargetNew(level = dalvik.annotation.TestLevel.COMPLETE, method = "convert", args = { double.class, int.class }) public void testConvert_CoordinateToRepresentation() { java.<START_MOD>util.Locale defaultLocale = java.util.Locale.getDefault(); if (!(defaultLocale.equals(java.util.Locale.US))) { java.util.Locale.setDefault(java.util.Locale.US); } java.<END_MOD>lang.String result; result = android.location.Location.convert((-80.0), Location.FORMAT_DEGREES); assertEquals("-80", result); result = android.location.Location.convert((-80.085), Location.FORMAT_MINUTES); assertEquals("-80:5.1", result); result = android.location.Location.convert((-80), Location.FORMAT_MINUTES); assertEquals("-80:0", result); result = android.location.Location.convert((-80.075), Location.FORMAT_MINUTES); assertEquals("-80:4.5", result); result = android.location.Location.convert((-80.075), Location.FORMAT_DEGREES); assertEquals("-80.075", result); result = android.location.Location.convert((-80.075), Location.FORMAT_SECONDS); assertEquals("-80:4:30", result); try { android.location.Location.convert((-181), Location.FORMAT_SECONDS); fail( throw IllegalArgumentException. } catch (java.lang.IllegalArgumentException e) { } try { android.location.Location.convert(181, Location.FORMAT_SECONDS); fail( throw IllegalArgumentException. } catch (java.lang.IllegalArgumentException e) { } try { android.location.Location.convert((-80.075), (-1)); fail( throw IllegalArgumentException. } catch (java.lang.IllegalArgumentException e) { } <START_MOD>if (!(java.util.Locale.getDefault().equals(defaultLocale))) { java.util.Locale.setDefault(defaultLocale); } }<END_MOD>
private static void printArrayElements(com.android.ahat.Doc doc, com.android.ahat.Query query, com.android.ahat.<START_MOD>heapdump.<END_MOD>AhatSnapshot snapshot, com.android.<START_MOD>ahat.heapdump.AhatArrayInstance<END_MOD> array) { doc.section( Elements doc.table(new com.android.ahat.Column("Index", Column.Align.RIGHT), new com.android.ahat.Column("Value")); java.util.List<<START_MOD>com.android.ahat.heapdump.Value<END_MOD>> elements = java.util.Arrays.asList(array.getValues()); com.android.ahat.SubsetSelector<<START_MOD>com.android.ahat.heapdump.Value<END_MOD>> selector = new com.android.ahat.SubsetSelector(query, com.android.ahat.ObjectHandler.ARRAY_ELEMENTS_ID, elements); int i = 0; for (<START_MOD>com.android.ahat.heapdump.Value<END_MOD> elem : selector.selected()) { doc.row(com.android.ahat.DocString.format("%d", i), com.android.ahat.<START_MOD>Summarizer.summarize(<END_MOD>elem)); i++; } doc.end(); selector.render(doc); }
<START_MOD>public void testParseUnsignedInt() { int[] vals = new int[]{ 0, 1, 23, 456, 2147483647, -2147483648, -1 }; for (int val : vals) { assertEquals(val, java.lang.Integer.parseUnsignedInt(java.lang.Integer.toBinaryString(val), 2)); assertEquals(val, java.lang.Integer.parseUnsignedInt(java.lang.Integer.toOctalString(val), 8)); assertEquals(val, java.lang.Integer.parseUnsignedInt(java.lang.Integer.toUnsignedString(val))); assertEquals(val, java.lang.Integer.parseUnsignedInt(java.lang.Integer.toHexString(val), 16)); for (int radix = java.lang.Character.MIN_RADIX; radix < (java.lang.Character.MAX_RADIX); ++radix) { assertEquals(val, java.lang.Integer.parseUnsignedInt(java.lang.Integer.toUnsignedString(val, radix), radix)); } } try { java.lang.Integer.parseUnsignedInt("-1"); } catch (java.lang.NumberFormatException expected) { } try { java.lang.Integer.parseUnsignedInt("123", 2); } catch (java.lang.NumberFormatException expected) { } }<END_MOD>
<START_MOD>@com.android.annotations.Nullable <END_MOD>public com.android.builder.model.AndroidProject executeAndReturnModel(java.lang.String... tasks) { return execute(java.util.Collections.<java.lang.String>emptyList(), true, tasks); }
@java.lang.Override public void checkValue(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull com.android.jack.library.<START_MOD>InputLibrary<END_MOD> data) { }
<START_MOD>public void compressTree() { class CompressionVisitor implements com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNodeVisitor { @java.lang.Override public void visit(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode node) { if ((node.getParent()) == null) { return; } if ((node.getChildrenCount()) == 1) { com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode child = node.getChildren().iterator().next(); node.removeChild(child); int periodCountAdjustment = child.getPeriodCount(); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode descendant = child; while ((descendant.getChildrenCount()) == 1) { descendant = descendant.getChildren().iterator().next(); periodCountAdjustment += descendant.getPeriodCount(); } for (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode newChild : descendant.getChildren()) { node.addChild(newChild); } node.adjustPeriodCount(periodCountAdjustment); } } } root.visitSelfThenChildrenRecursive(new CompressionVisitor()); }<END_MOD>
<START_MOD>java.util.List<com.google.protobuf.nano.UnknownFieldData> setValueTo(T value, java.util.List<com.google.protobuf.nano.UnknownFieldData> unknownFields) { if (unknownFields != null) { for (int i = (unknownFields.size()) - 1; i >= 0; i--) { if ((unknownFields.get(i).tag) == (tag)) { unknownFields.remove(i); } } } if (value == null) { return unknownFields; } if (unknownFields == null) { unknownFields = new java.util.ArrayList<com.google.protobuf.nano.UnknownFieldData>(); } unknownFields.add(writeData(value)); return unknownFields; }<END_MOD>
@java.lang.Override public void rejectWithMessage(java.lang.String callId, java.lang.String message<START_MOD>, android.telecom.Logging.Session.Info sessionInfo<END_MOD>)<START_MOD> { android.telecom.Log.startExternalSession(sessionInfo, android.telecom.ConnectionService.SESSION_REJECT_MESSAGE); try<END_MOD> { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = message; <START_MOD>args.arg3 = android.telecom.Log.createSubsession(); <END_MOD>mHandler.obtainMessage(android.telecom.ConnectionService.MSG_REJECT_WITH_MESSAGE, args).sendToTarget(); }<START_MOD> finally { android.telecom.Log.endSession(); } }<END_MOD>
<START_MOD>@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mContentResolver = android.support.test.InstrumentationRegistry.getTargetContext().getContentResolver(); when(mContext.getContentResolver()).thenReturn(mContentResolver); Settings.Global.putInt(mContentResolver, Settings.Global.WIFI_WAKEUP_ENABLED, 1); mWifiWakeupController = new com.android.networkrecommendation.WifiWakeupController(mContext, android.os.Looper.getMainLooper()); }<END_MOD>
<START_MOD>private void verifyResultsClzInt2(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { int[] arrayInValue = new int[(INPUTSIZE) * 2]; inValue.copyTo(arrayInValue); int[] arrayOut = new int[(INPUTSIZE) * 2]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 2; j++) { android.renderscript.cts.TestClz.ArgumentsIntInt args = new android.renderscript.cts.TestClz.ArgumentsIntInt(); args.inValue = arrayInValue[((i * 2) + j)]; android.renderscript.cts.CoreMathVerifier.computeClz(args); int actualOut = arrayOut[((i * 2) + j)]; int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; float ulpf; ulpf = (java.lang.Math.ulp(args.out)) * ulf; assertEquals(((((((((((((((((("Incorrect output for checkClzInt2" + (relaxed ? "_relaxed" : "")) + " @[") + i) + ", ") + j) + "] with ulf:") + ulf) + ".\n") + "Input inValue:") + (args.inValue)) + "\n") + "Expected output out:") + (args.out)) + "\n") + "Actual output out:") + actualOut) + "\n"), args.out, actualOut, ulpf); } } }<END_MOD>
<START_MOD>@java.lang.Override public com.google.currysrc.api.transform.ast.BodyDeclaration find(com.google.currysrc.api.transform.ast.CompilationUnit cu) { com.google.currysrc.api.transform.ast.AbstractTypeDeclaration typeDeclaration = enumTypeLocater.find(cu); if ((typeDeclaration == null) || (!(typeDeclaration instanceof com.google.currysrc.api.transform.ast.EnumDeclaration))) { return null; } for (com.google.currysrc.api.transform.ast.EnumConstantDeclaration enumConstantDeclaration : ((java.util.List<com.google.currysrc.api.transform.ast.EnumConstantDeclaration>) (((com.google.currysrc.api.transform.ast.EnumDeclaration) (typeDeclaration)).enumConstants()))) { if (enumConstantDeclaration.getName().getFullyQualifiedName().equals(constantName)) { return enumConstantDeclaration; } } return null; }<END_MOD>
private static void searchForProject(junit.framework.TestSuite suite, java.io.File folder, java.io.File sdkFolder, java.io.File ndkFolder<START_MOD>, java.lang.String taskName, java.util.List<java.lang.String> args<END_MOD>) { java.io.File buildGradle = new java.io.File(folder, "build.gradle"); if (buildGradle.isFile()) { suite.addTest(com.android.build.tests.ProjectTest.createTest(folder, sdkFolder, ndkFolder<START_MOD>, taskName, args<END_MOD>)); } }
<START_MOD>@com.android.internal.annotations.VisibleForTesting <END_MOD>public com.android.<START_MOD>internal.telephony.ims.ImsServiceController<END_MOD> getImsServiceControllerAndListen(int slotId, int feature, com.android.ims.internal.IImsServiceFeatureListener callback) { if ((slotId < 0) || (slotId >= (mNumSlots))) { return null; } com.android.internal.telephony.ims.ImsServiceController controller; synchronized(mBoundServicesLock) { android.util.SparseArray<com.android.internal.telephony.ims.ImsServiceController> services = mBoundImsServicesByFeature.get(slotId); if (services == null) { return null; } controller = services.get(feature); } if (controller != null) { controller.addImsServiceFeatureListener(callback); return controller<START_MOD>; } return null; }<END_MOD>
public static android.telephony.MbmsDownloadManager create(android.content.Context context, android.telephony.mbms.MbmsDownloadManagerCallback listener, int subscriptionId) throws android.telephony.mbms.MbmsException { <START_MOD>if (android.telephony.MbmsDownloadManager.sIsInitialized) { throw new android.telephony.mbms.MbmsException(MbmsException.InitializationErrors.ERROR_DUPLICATE_INITIALIZE); } <END_MOD>android.telephony.MbmsDownloadManager mdm = new android.telephony.MbmsDownloadManager(context, listener, subscriptionId); mdm.bindAndInitialize(); <START_MOD>android.telephony.MbmsDownloadManager.sIsInitialized = true; <END_MOD>return mdm; }
<START_MOD>public void testFieldAccess() { logWriter.println("testFieldAccess started"); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); logWriter.println("=> Check capability: canWatchFieldAccess"); if (!(debuggeeWrapper.vmMirror.canWatchFieldAccess())) { logWriter.println("##WARNING: this VM doesn't possess capability: canWatchFieldAccess"); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); return; } org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.setCountableFieldAccess(org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.DEBUGGEE_SIGNATURE, JDWPConstants.TypeTag.CLASS, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.WATCHED_FIELD_NAME, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.EVENT_COUNT); checkReplyPacket(reply, "Failed to set FIELD_ACCESS with count modifier"); int requestID = reply.getNextValueAsInt(); assertAllDataRead(reply); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); waitForEvent(JDWPConstants.EventKind.FIELD_ACCESS, requestID); int count = getFieldReadWriteCount(); assertEquals("Invalid event count", org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.EVENT_COUNT, count); reply = debuggeeWrapper.vmMirror.clearEvent(JDWPConstants.EventKind.FIELD_ACCESS, requestID); checkReplyPacket(reply, ("Failed to clear event " + requestID)); logWriter.println("testFieldAccess done"); }<END_MOD>
<START_MOD>@java.lang.Override public byte[] receive() throws java.io.IOException { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN]; int bytesRead = 0; try { bytesRead = android.system.Os.read(mFd, in, 0, android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } return java.util.Arrays.copyOfRange(in, 0, bytesRead); }<END_MOD>
<START_MOD>@java.lang.Override public void writeTo(com.android.dx.dex.file.DexFile file, com.android.dx.util.AnnotatedOutput out) { int offset = data.getAbsoluteOffset(); if (out.annotates()) { out.annotate(0, (((indexString()) + ' ') + (callSite.toString()))); out.annotate(4, ("call_site_off: " + (com.android.dx.util.Hex.u4(offset)))); } out.writeInt(offset); }<END_MOD>
private android.<START_MOD>renderscript<END_MOD>.Short3 pack_s3(short[] val) { assert (val.length) == 3; return new android.<START_MOD>renderscript<END_MOD>.Short3(val[0], val[1], val[2]); }
<START_MOD>@com.android.settings.applications.Ignore("b/73892555") <END_MOD>@org.junit.Test public void testCollectPipApps() { android.content.pm.PackageInfo primaryP1 = createPackage("Calculator", true); android.content.pm.PackageInfo primaryP2 = createPackage("Clock", false); android.content.pm.PackageInfo profileP1 = createPackage("Calculator", false); android.content.pm.PackageInfo profileP2 = createPackage("Clock", true); mPrimaryUserPackages.add(primaryP1); mPrimaryUserPackages.add(primaryP2); mProfileUserPackages.add(profileP1); mProfileUserPackages.add(profileP2); java.util.ArrayList<android.util.Pair<android.content.pm.ApplicationInfo, java.lang.Integer>> apps = mFragment.collectPipApps(com.android.settings.applications.PictureInPictureSettingsTest.PRIMARY_USER_ID); assertThat(containsPackages(apps, primaryP1, profileP2)).isTrue(); assertThat(containsPackages(apps, primaryP2, profileP1)).isFalse(); }
<START_MOD>public boolean validate() { if (((fqdn) == null) || (fqdn.isEmpty())) { android.util.Log.d(android.net.wifi.hotspot2.pps.HomeSP.TAG, "Missing FQDN"); return false; } if (((friendlyName) == null) || (friendlyName.isEmpty())) { android.util.Log.d(android.net.wifi.hotspot2.pps.HomeSP.TAG, "Missing friendly name"); return false; } return true; }<END_MOD>
<START_MOD>@java.lang.Override @javax.annotation.Nonnull public com.android.sched.util.location.Location getLocation() { return vFile.getLocation(); }<END_MOD>
public static int booleanFieldEqualZero() {<START_MOD> if (Main.doThrow) { throw new java.lang.Error(); }<END_MOD> return (Main.booleanField) != (Main.$inline$false()) ? 13 : 54; }
<START_MOD>private static void checkInetAddressAndThrow(java.lang.String inetAddress) { try { java.net.InetAddress.getByName(inetAddress).getAddress(); } catch (java.net.UnknownHostException e) { throw new java.lang.IllegalArgumentException(("Invalid InetAddress: " + inetAddress)); } }<END_MOD>
<START_MOD>byte[] receive() throws java.io.IOException;<END_MOD>
protected void libToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.lang.String classpath, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { boolean assertEnable = false; assert true == (assertEnable = true); args.add("java"); args.add((assertEnable ? "-ea" : "-da")); args.add("-jar"); args.add(jackPrebuilt.getAbsolutePath()); args.add("--verbose"); args.add(verbosityLevel.name()); args.add("--sanity-checks"); args.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { args.add("--incremental-folder"); args.add(incrementalFolder.getAbsolutePath()); } for (java.io.File res : resImport) { args.add("--import-resource"); args.add(res.getPath()); } for (java.io.File meta : metaImport) { args.add("--import-meta"); args.add(meta.getPath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if (!(classpath.equals(""))) { args.add("--classpath"); args.add(classpath); } for (java.io.File jarjarFile : jarjarRules) { args.add("--config-jarjar"); args.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add("--config-proguard"); args.add(flags.getAbsolutePath()); } if (<START_MOD>(outputJack) != null) { if (!(outputJack.isDirectory())) { args.add("--output-jack"); } else { args.add("--output-jack-dir"); } args.add(outputJack.getAbsolutePath()); } if (<END_MOD>withDebugInfos) { args.add("-g"); } libToImportStaticLibs(args, in); }
public synchronized com.android.ide.common.rendering.LayoutLibrary getLayoutLibrary() { if (((mLayoutBridgeInit) == false) && ((mLayoutLibrary.getStatus()) == (com.android.ide.common.sdk.LoadStatus.LOADED))) { <START_MOD>boolean ok = <END_MOD>mLayoutLibrary.init(mTarget.getProperties(), new java.io.File(mTarget.getPath(IAndroidTarget.FONTS)), getEnumValueMap(), new com.android.ide.common.rendering.api.LayoutLog() { @java.lang.Override public void error(java.lang.String tag, java.lang.String message, java.lang.Throwable throwable, java.lang.Object data) { com.android.ide.eclipse.adt.AdtPlugin.log(throwable, message); } @java.lang.Override public void error(java.lang.String tag, java.lang.String message, java.lang.Object data) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, message); } @java.lang.Override public void warning(java.lang.String tag, java.lang.String message, java.lang.Object data) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.WARNING, message); } }); <START_MOD>if (!ok) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR,   initialization failed; did the init() signature change? } <END_MOD>mLayoutBridgeInit = true; } return mLayoutLibrary; }
public static com.android.hierarchyviewerlib.models.ViewNode parseViewHierarchy(java.io.BufferedReader in, com.android.hierarchyviewerlib.models.Window window) { com.android.hierarchyviewerlib.models.ViewNode currentNode = null; int currentDepth = -1; java.lang.String line; try { while ((line = in.readLine()) != null) { if ("DONE.".equalsIgnoreCase(line)) { break; } int depth = 0; <START_MOD>int lineLength = line.length(); <END_MOD>while ((<START_MOD>(<END_MOD>line.charAt(depth)) ==    <START_MOD> && (depth < lineLength))<END_MOD> { depth++; } while (depth <= currentDepth) { if (currentNode != null) { currentNode = currentNode.parent; } currentDepth--; } currentNode = new com.android.hierarchyviewerlib.models.ViewNode(window, currentNode, line.substring(depth)); currentDepth = depth; } } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DeviceBridge.TAG, ( reading view hierarchy stream:   + (e.getMessage()))); return null; } if (currentNode == null) { return null; } while ((currentNode.parent) != null) { currentNode = currentNode.parent; } return currentNode; }
private void setupInitialSelection(com.android.resources.ResourceType resourceType, java.lang.String resourceName) { com.android.ide.eclipse.adt.internal.resources<START_MOD>.manager<END_MOD>.ResourceItem[] resourceItems = <START_MOD>mProjectResources<END_MOD>.getResources(resourceType); for (com.android.ide.eclipse.adt.internal.resources<START_MOD>.manager<END_MOD>.ResourceItem resourceItem : resourceItems) { if (resourceName.equals(resourceItem.getName())) { org.eclipse.jface.viewers.TreePath treePath = new org.eclipse.jface.viewers.TreePath(new java.lang.Object[]{ resourceType, resourceItem }); mFilteredTree.getViewer().setSelection(new org.eclipse.jface.viewers.TreeSelection(treePath), true); return; } } org.eclipse.jface.viewers.TreePath treePath = new org.eclipse.jface.viewers.TreePath(new java.lang.Object[]{ resourceType }); mFilteredTree.getViewer().setSelection(new org.eclipse.jface.viewers.TreeSelection(treePath), true); mFilteredTree.getViewer().setExpandedState(resourceType, true); }
void putDecString(java.lang.String original) { java.lang.String s = checkString(original, 10); this.makeValid(); int usedLen = java.math.NativeBN.BN_dec2bn(this.<START_MOD>nativePtr<END_MOD>, s); if (usedLen < (s.length())) { throw invalidBigInteger(original); } }
<START_MOD>public java.io.File getJarJarRuleFile() { return getMergedFlavor().getJarJarRuleFile(); }<END_MOD>
<START_MOD>public void test_ParseLong() throws java.lang.Exception { assertEquals(0, java.lang.Long.parseLong("+0", 10)); assertEquals(473, java.lang.Long.parseLong("+473", 10)); assertEquals(255, java.lang.Long.parseLong("+FF", 16)); assertEquals(102, java.lang.Long.parseLong("+1100110", 2)); assertEquals(2147483647, java.lang.Long.parseLong("+2147483647", 10)); assertEquals(411787, java.lang.Long.parseLong("Kona", 27)); assertEquals(411787, java.lang.Long.parseLong("+Kona", 27)); try { java.lang.Long.parseLong("--1", 10); fail(); } catch (java.lang.NumberFormatException e) { } try { java.lang.Long.parseLong("++1", 10); fail(); } catch (java.lang.NumberFormatException e) { } try { java.lang.Long.parseLong("Kona", 10); fail(); } catch (java.lang.NumberFormatException e) { } }<END_MOD>
private void displayTestResultSummary() { int passNum = mSessionLog.getTestList(CtsTestResult.CODE_PASS).size(); int failNum = mSessionLog.getTestList(CtsTestResult.CODE_FAIL).size(); int <START_MOD>skippedNum = mSessionLog.getTestList(CtsTestResult.CODE_SKIPPED).size(); int <END_MOD>notExecutedNum = mSessionLog.getTestList(CtsTestResult.CODE_NOT_EXECUTED).size(); int timeOutNum = mSessionLog.getTestList(CtsTestResult.CODE_TIMEOUT).size(); int total = ((passNum + failNum) + notExecutedNum) + timeOutNum; println<START_MOD>((<END_MOD>(((((((((( summary: pass= + passNum) +   fail= + failNum) +   timeOut= + timeOutNum) +   <START_MOD>skipped= + skippedNum) +   <END_MOD>notExecuted= + notExecutedNum) +   Total= + total)); }
<START_MOD>public void testAesGcm96Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }<END_MOD>
public void setTargetInfo(@com.android.annotations.NonNull com.android.builder.sdk.SdkInfo sdkInfo, @com.android.annotations.NonNull com.android.builder.sdk.TargetInfo targetInfo<START_MOD>, @com.android.annotations.NonNull java.util.Collection<com.android.builder.core.UsedLibrary> libraries<END_MOD>) { mSdkInfo = sdkInfo; mTargetInfo = targetInfo; if ((mTargetInfo.getBuildTools().getRevision().compareTo(com.android.builder.core.AndroidBuilder.MIN_BUILD_TOOLS_REV)) < 0) { throw new java.lang.IllegalArgumentException(java.lang.String.format( SDK Build Tools revision (%1$s) is too low for project '%2$s'. Minimum required is %3$s mTargetInfo.getBuildTools().getRevision(), mProjectId, com.android.builder.core.AndroidBuilder.MIN_BUILD_TOOLS_REV)); } <START_MOD>mUsedLibraries = com.google.common.collect.ImmutableList.copyOf(libraries); <END_MOD>}
<START_MOD>boolean<END_MOD> <START_MOD>isCancelled<END_MOD>() { return <START_MOD>cancelled[0]<END_MOD>; }
public void <START_MOD>testWildcardCharacterMustBeLeftMostLabelOnly<END_MOD>() { <START_MOD>assertFalse<END_MOD>(verifier.verifyHostName(<START_MOD>"test.www.example.com"<END_MOD>, <START_MOD>"test.*.example.com"<END_MOD>)); <START_MOD>assertFalse<END_MOD>(verifier.verifyHostName(<START_MOD>"www.example.com"<END_MOD>, <START_MOD>"www.*.com")); assertFalse(verifier.verifyHostName("www.example.com", "www.example.*")); assertFalse(verifier.verifyHostName("www.example.com", "*www.example.com")); assertFalse(verifier.verifyHostName("www.example.com", "*w.example.com")); assertFalse(verifier.verifyHostName("www.example.com", "w*w.example.com")); assertFalse(verifier.verifyHostName("www.example.com", "w*.example.com")); assertFalse(verifier.verifyHostName("www.example.com", "www*.example.com"<END_MOD>)); }
public void applyDeviceVolume_syncVSS(int device) { int index; if (mIsMuted) { index = 0; } else if (((device & (android.media.AudioSystem.DEVICE_OUT_ALL_A2DP)) != 0) && (mAvrcpAbsVolSupported)) { int i = ((getIndex(device)) + 5) / 10; if (i == 0) { index = 0; } else if (i == 1) { index = ((int) ((mIndexMax) * 0.5)) / 10; } else if (i == 2) { index = ((int) ((mIndexMax) * <START_MOD>0.7)) / 10; } else if (i == 3) { index = ((int) ((mIndexMax) * 0.85<END_MOD>)) / 10; } else { index = ((mIndexMax) + 5) / 10; } } else if ((device & (mFullVolumeDevices)) != 0) { index = ((mIndexMax) + 5) / 10; } else { index = ((getIndex(device)) + 5) / 10; } android.media.AudioSystem.setStreamVolumeIndex(mStreamType, index, device); }
public void testGetActivityThemes3() throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo info = getManifestInfo(( xmlns:android= + (( package= +   <uses-sdk android:minSdkVersion= + "</manifest>\n"))); java.util.Map<java.lang.String, <START_MOD>com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo.ActivityInfo<END_MOD>> map = info.<START_MOD>getActivityInfos<END_MOD>(); assertEquals(map.toString(), 0, map.size()); assertEquals("com.android.unittest", info.getPackage()); assertEquals("Theme.Holo", com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme(info.getDefaultTheme(null, com.android.ide.eclipse.adt.internal.editors.manifest.XLARGE))); assertEquals("Theme", com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme(info.getDefaultTheme(null, com.android.ide.eclipse.adt.internal.editors.manifest.NORMAL))); }
<START_MOD>public java.util.Set<java.lang.String> getFilters(com.android.build.OutputFile.FilterType filterType) { switch (filterType) { case DENSITY : return densityFilters; case LANGUAGE : return languageFilters; case ABI : return abiFilters; default : throw new java.lang.RuntimeException("Unhandled filter type"); } }<END_MOD>
<START_MOD>default java.lang.String print() { return "DefaultInterfaceSubType " + (com.android.jack.java8.gwt.test030.jack.Java8Test.DefaultInterface.super.print()); }<END_MOD>
static void setInt(java.lang.invoke.MethodHandle m, Main.ValueHolder v, int value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.<START_MOD>assertEqual<END_MOD>(exceptionThrown, expectFailure); }
@java.lang.SuppressWarnings("unused") @java.lang.Override public void verifyCertificateChain(long sslSessionNativePtr, long[] certRefs, java.lang.String authMethod) throws java.security.cert.CertificateException { try { javax.net.ssl.X509TrustManager x509tm = sslParameters.getX509TrustManager(); if (x509tm == null) { throw new java.security.cert.CertificateException( X.509 TrustManager } if ((certRefs == null) || ((certRefs.length) == 0)) { throw new javax.net.ssl.SSLException( sent no certificate } org.conscrypt.OpenSSLX509Certificate[] peerCertChain = new org.conscrypt.OpenSSLX509Certificate[certRefs.length]; for (int i = 0; i < (certRefs.length); i++) { peerCertChain[i] = new org.conscrypt.OpenSSLX509Certificate(certRefs[i]); } handshakeSession = new org.conscrypt.OpenSSLSessionImpl(sslSessionNativePtr, null, peerCertChain, <START_MOD>getHostname(), getPort<END_MOD>(), null); boolean client = sslParameters.getUseClientMode(); if (client) { org.conscrypt.Platform.checkServerTrusted(x509tm, peerCertChain, authMethod, <START_MOD>peerHostname<END_MOD>); } else { java.lang.String authType = peerCertChain[0].getPublicKey().getAlgorithm(); x509tm.checkClientTrusted(peerCertChain, authType); } } catch (java.security.cert.CertificateException e) { throw e; } catch (java.lang.Exception e) { throw new java.security.cert.CertificateException(e); } finally { handshakeSession = null; } }
<START_MOD>private synchronized boolean startNewScan(com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo nsri) { if ((mLiveRequestInfo) == null) { mLiveRequestInfo = nsri; nsri.mPhone.startNetworkScan(mHandler.obtainMessage(com.android.internal.telephony.NetworkScanRequestTracker.EVENT_START_NETWORK_SCAN_DONE, nsri)); return true; } return false; }<END_MOD>
<START_MOD>@java.lang.Override protected boolean isEmpty() { return (mPublic) == null; }<END_MOD>
public static sun.security.jca.ProviderList insertAt(sun.security.jca.ProviderList providerList, java.security.Provider p, int position) { if ((providerList.getProvider(p.getName())) != null) { return providerList; } java.util.<START_MOD>ArrayList<END_MOD><sun.security.jca.ProviderConfig> list = new java.util.ArrayList<>(providerList.configs); int n = list.size(); if ((position < 0) || (position > n)) { position = n; } list.add(position, new sun.security.jca.ProviderConfig(p)); return new sun.security.jca.ProviderList(list, true); }
<START_MOD>@java.lang.Override <END_MOD>@com.android.annotations.NonNull public abstract java.io.File getOutputFile();
<START_MOD>@java.lang.Override public void getIccSlotStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SLOT_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getIccCardStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getSlotStatus", e); } } } }<END_MOD>
<START_MOD>@org.junit.Test public void testSplitChainWithNullPrimaryClassLoader() { android.content.pm.ApplicationInfo ai = createMockApplicationInfo(null, true, true); java.lang.String[] sharedLibrary = new java.lang.String[]{ "a.dex", "b.dex" }; java.lang.String[] contexts = com.android.server.pm.dex.DexoptUtils.getClassLoaderContexts(ai, sharedLibrary); assertEquals(7, contexts.length); assertEquals("PCL[a.dex:b.dex]", contexts[0]); assertEquals("DLC[];DLC[base-2.dex];PCL[base-4.dex];PCL[a.dex:b.dex:base.dex]", contexts[1]); assertEquals("DLC[];PCL[base-4.dex];PCL[a.dex:b.dex:base.dex]", contexts[2]); assertEquals("PCL[];PCL[base-4.dex];PCL[a.dex:b.dex:base.dex]", contexts[3]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[4]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[5]); assertEquals("PCL[];PCL[base-5.dex];PCL[a.dex:b.dex:base.dex]", contexts[6]); }<END_MOD>
<START_MOD>@java.lang.Override void initialize(com.android.ahat.heapdump.InitializeHelper helper, com.android.tools.perflib.heap.Instance inst) { com.android.tools.perflib.heap.ClassObj classObj = ((com.android.tools.perflib.heap.ClassObj) (inst)); super.initialize(helper, classObj); mClassName = classObj.getClassName(); com.android.tools.perflib.heap.ClassObj superClassObj = classObj.getSuperClassObj(); if (superClassObj != null) { mSuperClassObj = helper.getClassObj(superClassObj.getId()); } com.android.tools.perflib.heap.Instance loader = classObj.getClassLoader(); if (loader != null) { mClassLoader = helper.getInstance(loader.getId()); } mStaticFieldValues = new java.util.ArrayList<com.android.ahat.heapdump.FieldValue>(); for (java.util.Map.Entry<com.android.tools.perflib.heap.Field, java.lang.Object> fields : classObj.getStaticFieldValues().entrySet()) { mStaticFieldValues.add(new com.android.ahat.heapdump.FieldValue(fields.getKey().getName(), fields.getKey().getType().toString(), helper.getValue(fields.getValue()))); } }<END_MOD>
public static <START_MOD>boolean<END_MOD> assignSeinfoValue(android.content.pm.PackageParser.Package pkg) { if ((((pkg.applicationInfo.flags) & (android.content.pm.ApplicationInfo.FLAG_SYSTEM)) != 0) || (((pkg.applicationInfo.flags) & (android.content.pm.ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) != 0)) { for (android.content.pm.Signature s : pkg.mSignatures) { if (s == null) continue; <START_MOD>com.android.server.pm.SELinuxMMAC.Policy policy = <END_MOD>com.android.server.pm.SELinuxMMAC.sSigSeinfo.<START_MOD>get<END_MOD>(s)<START_MOD>; if (policy != null<END_MOD>) { java.lang.String seinfo = <START_MOD>policy.checkPolicy(pkg.packageName); if (seinfo != null) { <END_MOD>pkg.applicationInfo.seinfo = <START_MOD>seinfo<END_MOD>; if (com.android.server.pm.SELinuxMMAC.DEBUG_POLICY_INSTALL) android.util.Slog.i(com.android.server.pm.SELinuxMMAC.TAG, ((( ( + (pkg.packageName)) +   labeled with seinfo= + seinfo)); return<START_MOD> true<END_MOD>; } } <START_MOD>} }<END_MOD> pkg.applicationInfo.seinfo = com.android.server.pm.SELinuxMMAC.<START_MOD>sDefaultSeinfo<END_MOD>; if (com.android.server.pm.SELinuxMMAC.DEBUG_POLICY_INSTALL) android.util.Slog.i(com.android.server.pm.SELinuxMMAC.TAG, ((( ( + (pkg.packageName)) +   labeled with seinfo= + <START_MOD>((com.android.server.pm.SELinuxMMAC.sDefaultSeinfo) == null ? "null" : com.android.server.pm.SELinuxMMAC.sDefaultSeinfo)<END_MOD>)); return<START_MOD> (com.android.server.pm.SELinuxMMAC.sDefaultSeinfo) != null ? true : false<END_MOD>; }
private final synchronized void closeServerSocket() { if ((<START_MOD>mServerSockets<END_MOD>) != null) { <START_MOD>mServerSockets<END_MOD>.<START_MOD>shutdown<END_MOD>(<START_MOD>false<END_MOD>); <START_MOD>mServerSockets<END_MOD> = null; } }
<START_MOD>private static int hours(double count) { return ((int) ((libcore.java.util.GregorianCalendarTest.HOUR_IN_MILLIS) * count)); }<END_MOD>
public static synchronized javax.net.SocketFactory getDefault() { int newCacheVersion = org.apache.harmony.security.fortress.Services.getCacheVersion(); if ((<START_MOD>(javax.net.ssl.SSLSocketFactory.defaultSocketFactory) != null) && ((<END_MOD>javax.net.ssl.SSLSocketFactory.lastCacheVersion) <START_MOD>== newCacheVersion)) { return javax.net.ssl.SSLSocketFactory.defaultSocketFactory; } java.lang.String newName = java.security.Security.getProperty("ssl.SocketFactory.provider"); if (newName <END_MOD>!= <START_MOD>null) {<END_MOD> if ((javax.net.ssl.SSLSocketFactory.defaultSocketFactory) != null) { <START_MOD>if (newName.equals(javax.net.ssl.SSLSocketFactory.defaultSocketFactory.getClass().getName())) { <END_MOD>return javax.net.ssl.SSLSocketFactory.defaultSocketFactory; } <START_MOD>else { javax.net.ssl.SSLSocketFactory.defaultSocketFactory = null; } }<END_MOD> java.lang.ClassLoader cl = java.lang.Thread.currentThread().getContextClassLoader(); if (cl == null) { cl = java.lang.ClassLoader.getSystemClassLoader(); } try { final java.lang.Class<?> sfc = java.lang.Class.forName(<START_MOD>newName<END_MOD>, true, cl); javax.net.ssl.SSLSocketFactory.defaultSocketFactory = ((javax.net.SocketFactory) (sfc.newInstance())); } catch (java.lang.Exception e) { java.lang.System.<START_MOD>logW(((((( not create<END_MOD>   + <START_MOD>newName) +   with ClassLoader   + (cl.toString())) +     + (<END_MOD>e<START_MOD>.getMessage()))); } } else { javax.net.ssl.SSLSocketFactory.defaultSocketFactory = null;<END_MOD> } if ((javax.net.ssl.SSLSocketFactory.defaultSocketFactory) == null) { javax.net.ssl.SSLContext context; try { context = javax.net.ssl.SSLContext.getDefault(); } catch (java.security.NoSuchAlgorithmException e) { context = null; } if (context != null) { javax.net.ssl.SSLSocketFactory.defaultSocketFactory = context.getSocketFactory(); } } if ((javax.net.ssl.SSLSocketFactory.defaultSocketFactory) == null) { javax.net.ssl.SSLSocketFactory.defaultSocketFactory = new javax.net.ssl.DefaultSSLSocketFactory( SSLSocketFactory installed } return javax.net.ssl.SSLSocketFactory.defaultSocketFactory; }
public static int getAttachmentType(com.android.mms.model.SlideshowModel model, com.google.android.mms.pdu.MultimediaMessagePdu mmp) { if (model == null) { return MessageItem.ATTACHMENT_TYPE_NOT_LOADED; } int numberOfSlides = model.size(); if (numberOfSlides > 1) { return com.android.mms.data.WorkingMessage.SLIDESHOW; } else if (numberOfSlides == 1) { com.android.mms.model.SlideModel slide = model.get(0); if (slide.hasVideo()) { return com.android.mms.data.WorkingMessage.VIDEO; } if ((slide.hasAudio()) && (slide.hasImage())) { return com.android.mms.data.WorkingMessage.SLIDESHOW; } if (slide.hasAudio()) { return com.android.mms.data.WorkingMessage.AUDIO; } if (slide.hasImage()) { return com.android.mms.data.WorkingMessage.IMAGE; } if (slide.hasText()) { return com.android.mms.data.WorkingMessage.TEXT; } if (<START_MOD>!(android.text.TextUtils.isEmpty((<END_MOD>(mmp != null) && ((mmp.getSubject()<START_MOD>) != null) ? mmp.getSubject()<END_MOD>.getString()<START_MOD> : null<END_MOD>)))) { return com.android.mms.data.WorkingMessage.TEXT; } } return MessageItem.ATTACHMENT_TYPE_NOT_LOADED; }
<START_MOD>public void clear() { mCleared = true; mFolderMap.clear(); mResourceMap.clear(); mReadOnlyListMap.clear(); }<END_MOD>
public final void testLoadViewAttributes() throws java.lang.Exception { mParser.preload(); com.android.ide.<START_MOD>common.platformData<END_MOD>.ViewClassInfo info = new com.android.ide.<START_MOD>common.platformData<END_MOD>.ViewClassInfo(false, "mock_android.something.Theme", "Theme"); mParser.loadViewAttributes(info); assertEquals( are the standard attributes that make up a complete theme. info.getJavaDoc()); com.android.ide.<START_MOD>common.platformData<END_MOD>.AttributeInfo[] attrs = info.getAttributes(); assertEquals(1, attrs.length); assertEquals("scrollbarSize", info.getAttributes()[0].getName()); assertEquals(1, info.getAttributes()[0].getFormats().length); assertEquals(Format.DIMENSION, info.getAttributes()[0].getFormats()[0]); }
<START_MOD>@java.lang.Override public java.lang.String guessResourceName(com.intellij.openapi.project.Project project, com.google.gct.idea.appengine.validation.PsiMethod method) { return null; }<END_MOD>
<START_MOD>public void test_entryCompatibility_compiletime() { java.lang.Class c = java.util.TreeMap.Entry.class; assertEquals("java.util.Map$Entry", c.getName()); assertEquals(java.util.Map.Entry.class, c); }<END_MOD>
<START_MOD>public java.nio.MembershipKeyImpl addAnySourceMembership(java.net.NetworkInterface networkInterface, java.net.InetAddress groupAddress) throws java.net.SocketException { java.nio.MulticastMembershipHandler.validateMulticastGroupArgs(groupAddress, networkInterface); assertChannelOpen(); java.nio.MulticastMembershipHandler.Membership membership = memberships.get(new java.nio.MulticastMembershipHandler.Id(networkInterface, groupAddress)); if (membership != null) { return membership.getAnySourceMembershipKey(); } libcore.io.StructGroupReq groupReq = java.nio.MulticastMembershipHandler.makeGroupReq(groupAddress, networkInterface); libcore.io.IoBridge.setSocketOption(channel.getFD(), IoBridge.JAVA_MCAST_JOIN_GROUP, groupReq); membership = java.nio.MulticastMembershipHandler.Membership.createAnySource(channel, networkInterface, groupAddress); java.nio.MulticastMembershipHandler.Id id = new java.nio.MulticastMembershipHandler.Id(networkInterface, groupAddress); memberships.put(id, membership); return membership.getAnySourceMembershipKey(); }<END_MOD>
<START_MOD>public void setRemoteAddress(java.net.InetAddress remoteAddress) { mRemoteAddress = remoteAddress; }<END_MOD>
<START_MOD>public<END_MOD> void <START_MOD>initAccept<END_MOD>(java.<START_MOD>net<END_MOD>.<START_MOD>InetSocketAddress remoteAddress, boolean updateSocketState<END_MOD>) { <START_MOD>initBound(updateSocketState);<END_MOD> <START_MOD>initConnected(remoteAddress,<END_MOD> java.nio.SocketChannelImpl.<START_MOD>SOCKET_STATUS_CONNECTED,<END_MOD> <START_MOD>updateSocketState<END_MOD>); }
<START_MOD>public static void munmap(long address, long byteCount) throws android.os.ErrnoException { Libcore.os.munmap(address, byteCount); }<END_MOD>
<START_MOD>@org.junit.Test public void testIncomingPriorityReject() { when(mA2dpService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_OFF); com.android.bluetooth.a2dp.StackEvent connStCh = new com.android.bluetooth.a2dp.StackEvent(StackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED); connStCh.valueInt = A2dpStateMachine.CONNECTION_STATE_CONNECTED; connStCh.device = mTestDevice; mA2dpStateMachine.sendMessage(A2dpStateMachine.STACK_EVENT, connStCh); verify(mA2dpService, never()).sendBroadcast(any(android.content.Intent.class), anyString()); org.junit.Assert.assertTrue(((mA2dpStateMachine.getCurrentState()) instanceof com.android.bluetooth.a2dp.A2dpStateMachine.Disconnected)); }<END_MOD>
<START_MOD>@java.lang.Override protected void finalize() { (count.value)++; }<END_MOD>
@org.junit.Test public void testMinimalMainDexOverflowWithMethods() throws java.lang.Exception { java.io.File srcFolder = com.android.jack.TestTools.createTempDir("src", "dir"); java.io.File outFolder = com.android.jack.TestTools.createTempDir("out", "dir"); int fileCount = 655; for (int fileIdx = 0; fileIdx < fileCount; fileIdx++) { generateJavaFileWithMethods(srcFolder, fileIdx, 100); } generateJavaFileWithMethods(srcFolder, fileCount, 36); com.android.jack.Options options = new com.android.jack.Options(); options.addProperty(MultiDexLegacy.MULTIDEX_LEGACY.getName(), "true"); options.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), "minimal-multidex"<START_MOD>); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); java.io.PrintStream redirectStream = new java.io.PrintStream(baos); java.lang.System.setErr(redirectStream<END_MOD>); try { com.android.jack.TestTools.compileSourceToDex(options, srcFolder, com.android.jack.TestTools.getClasspathsAsString(com.android.jack.TestTools.getDefaultBootclasspath(), new java.io.File[]{ com.android.jack.multidex.MultiDexOverflowTests.annotations }), outFolder, false); junit.framework.Assert.fail(); } catch (com.android.jack.JackAbortException e) { java.lang.Throwable cause = e.getCause(); junit.framework.Assert.assertTrue((cause instanceof com.android.jack.backend.dex.DexWritingException)); junit.framework.Assert.assertTrue(((cause.getCause()) instanceof com.android.jack.backend.dex.MainDexOverflowException)); junit.framework.Assert.assertTrue(((cause.getCause().getCause()) instanceof com.android.jack.tools.merger.MethodIdOverflowException)); <START_MOD>junit.framework.Assert.assertTrue(baos.toString().contains(com.android.jack.multidex.MultiDexOverflowTests.expectedMessage)); <END_MOD>} <START_MOD>finally { redirectStream.close(); <END_MOD>}<START_MOD> }<END_MOD>
<START_MOD>private com.android.internal.telephony.euicc.IEuiccController getIEuiccController() { return IEuiccController.Stub.asInterface(android.os.ServiceManager.getService("econtroller")); }<END_MOD>
@java.lang.Override public javax.swing.JLabel <START_MOD>getDescriptionLabel<END_MOD>() { return myDescriptionLabel; }
@org.junit.Test public void monitor_enter() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(MONITOR_ENTER).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), <START_MOD>"jack/jack-tests/src/com/android/jack/DxTestCase.java"<END_MOD>)).compileAndRunTest(); }
<START_MOD>private void rescaleToReal() { float dpi = ((mConfigComposite.getXDpi()) + (mConfigComposite.getYDpi())) / 2.0F; }<END_MOD>
public void setUpstreamLinkProperties(android.net.LinkProperties lp) { if (!(started())) return; mUpstreamLinkProperties = <START_MOD>(<END_MOD>lp<START_MOD> != null) ? new android.net.LinkProperties(lp) : null; setUpstreamParameters()<END_MOD>; }
private void testDataPathInitiatorResponderMismatchUtility(boolean doPublish) throws java.lang.Exception { final int clientId = 123; final int pubSubId = 11234; final int ndpId = 2; final byte[] pmk =   bytes final android.net.wifi.aware.PeerHandle peerHandle = new android.net.wifi.aware.PeerHandle(1341234); final byte[] peerDiscoveryMac = libcore.util.HexEncoding.decode("000102030405".toCharArray(), false); org.mockito.InOrder inOrder = inOrder(mMockNative, mMockCm, mMockCallback, mMockSessionCallback); Pair<java.lang.Integer, Messenger> res = initDataPathEndPoint(clientId, pubSubId, peerHandle, peerDiscoveryMac, inOrder, doPublish); NetworkRequest nr = getSessionNetworkRequest(clientId, res.first, peerHandle, pmk, doPublish); <START_MOD>WifiAwareNetworkSpecifier ns = ((WifiAwareNetworkSpecifier<END_MOD>) (nr.networkCapabilities.getNetworkSpecifier()))<START_MOD>; ns.role = <END_MOD>1 - (<START_MOD>ns.role); Message reqNetworkMsg = Message.obtain(); reqNetworkMsg.what = android.net.NetworkFactory.CMD_REQUEST_NETWORK; reqNetworkMsg.obj =<END_MOD> nr<START_MOD>;<END_MOD> reqNetworkMsg<START_MOD>.arg1 = 0; res.second.send(<END_MOD>reqNetworkMsg); mMockLooper.dispatchAll(); if (doPublish) { mDut.onDataPathRequestNotification(pubSubId, peerDiscoveryMac, ndpId); mMockLooper.dispatchAll(); inOrder.verify(mMockNative).respondToDataPathRequest(anyShort(), eq(false), eq(ndpId), eq(""), eq(null), eq(null), any()); } verifyNoMoreInteractions(mMockNative, mMockCm); }
private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, final long[] <START_MOD>javaRslt<END_MOD>, final long[] <START_MOD>rsRslt<END_MOD>) { if ((<START_MOD>javaRslt<END_MOD>.length) != (<START_MOD>rsRslt<END_MOD>.length)) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((testName +   java length   + (<START_MOD>javaRslt.length)) +   rs length   + (rsRslt<END_MOD>.length)) +   FAILED return false; } for (int i = 0; i < (<START_MOD>javaRslt<END_MOD>.length); ++i) { if ((<START_MOD>javaRslt<END_MOD>[i]) != (<START_MOD>rsRslt<END_MOD>[i])) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((((testName + "[") + i) +   java   + (<START_MOD>javaRslt[i])) +   rs   + (rsRslt<END_MOD>[i])) +   FAILED return false; } } java.lang.String status = "PASSED"; if (t != null) status +=     + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((testName +     + status)); return true; }
<START_MOD>@java.lang.Override public java.util.List<java.io.File> getJavaLibraries() { if ((mJavaLibraries) == null) { java.util.List<java.io.File> jars = mVariant.getMainArtifactInfo().getDependencies().getJars(); mJavaLibraries = com.google.common.collect.Lists.newArrayListWithExpectedSize(jars.size()); for (java.io.File jar : jars) { if (jar.exists()) { mJavaLibraries.add(jar); } } } return mJavaLibraries; }<END_MOD>
private static void setInjectableValues(com.android.manifmerger.ManifestMerger2.Invoker<?> invoker, java.lang.String packageOverride, int versionCode, java.lang.String versionName, @com.android.annotations.Nullable java.lang.String minSdkVersion, @com.android.annotations.Nullable java.lang.String targetSdkVersion<START_MOD>, @com.android.annotations.Nullable java.lang.String maxSdkVersion<END_MOD>) { if (!(com.google.common.base.Strings.isNullOrEmpty(packageOverride))) { invoker.setOverride(SystemProperty.PACKAGE, packageOverride); } if (versionCode > 0) { invoker.setOverride(SystemProperty.VERSION_CODE, java.lang.String.valueOf(versionCode)); } if (!(com.google.common.base.Strings.isNullOrEmpty(versionName))) { invoker.setOverride(SystemProperty.VERSION_NAME, versionName); } if (!(com.google.common.base.Strings.isNullOrEmpty(minSdkVersion))) { invoker.setOverride(SystemProperty.MIN_SDK_VERSION, minSdkVersion); } if (!(com.google.common.base.Strings.isNullOrEmpty(targetSdkVersion))) { invoker.setOverride(SystemProperty.TARGET_SDK_VERSION, targetSdkVersion); } <START_MOD>if (!(com.google.common.base.Strings.isNullOrEmpty(maxSdkVersion))) { invoker.setOverride(SystemProperty.MAX_SDK_VERSION, maxSdkVersion); } }<END_MOD>
public static void performTest() { new SubMain(); if ((Main.$noinline$returnInt()) != 53) { throw new java.lang.Error( return value } if ((Main.$noinline$returnFloat()) != 42.2F) { throw new java.lang.Error( return value } if ((Main.$noinline$returnDouble()) != (java.lang.Double.longBitsToDouble(-1152921504606842607L))) { throw new java.lang.Error( return value   } if ((Main.$noinline$returnLong()) != -281474976706287L) { throw new java.lang.Error( return value } try { Main.$noinline$deopt(); } catch (java.lang.Exception e) { } DeoptimizationController.stopDeoptimization(); Main.$noinline$inlineCache(new Main(), false); if ((Main.$noinline$inlineCache(new SubMain(), true)) != (SubMain.class)) { throw new java.lang.Error( return value } Main.$noinline$stackOverflow(new Main(), false); Main.$noinline$stackOverflow(new SubMain(), true); <START_MOD>Main m1 = new Main(); while (!(Main.$opt$noinline$testOsrInlineLoop(null, m1, false))) { } java.lang.System.out.println( compiled Main m2 = new SubMain(); while (!(Main.$opt$noinline$testOsrInlineLoop(null, m2, true))) { } java.lang.System.out.println( osr }<END_MOD>
<START_MOD>public static org.osgi.framework.Version getPlatformVersion() { return org.eclipse.core.runtime.Platform.getBundle(com.android.ide.eclipse.base.InstallDetails.ECLIPSE_PLATFORM_PLUGIN_ID).getVersion(); }<END_MOD>
<START_MOD>private void enableWifi(final boolean enable) { assertTrue(mWifiManager.setWifiEnabled(enable)); new android.view.animation.cts.DelayedCheck() { protected boolean check() { return (mWifiManager.isWifiEnabled()) == enable; } }.run(); }<END_MOD>
public final android.content.IContentProvider acquireProvider(android.content.Context c, java.lang.String auth, int userId, boolean stable) { final android.<START_MOD>app.ActivityThread.ProviderKey key = new android.app.ActivityThread.ProviderKey(auth, userId); final android.<END_MOD>content.IContentProvider provider = acquireExistingProvider(c, <START_MOD>key, stable); if (provider != null) { return provider; } android.app.ActivityThread.AcquiringProviderRecord r; boolean first = false; synchronized(mAcquiringProviderMap) { r = mAcquiringProviderMap.get(key); if (r == null) { r = new android.app.ActivityThread.AcquiringProviderRecord(); mAcquiringProviderMap.put(key, r); first = true; } else { (r.request)++; } } android.app.IActivityManager.ContentProviderHolder holder = null; if (first) { try { holder = android.app.ActivityManagerNative.getDefault().getContentProvider(getApplicationThread(), <END_MOD>auth, userId, stable); <START_MOD>} catch (android.os.RemoteException ex) { } synchronized(r) { r.holder = holder; r.notifyAll(); } } else { synchronized(r) { while ((r.holder) == null) { try { r.wait(); } catch (java.lang.InterruptedException e) { } } holder = r.holder; } } synchronized(mAcquiringProviderMap) { <END_MOD>if (<START_MOD>(--(r.request)) == 0) { mAcquiringProviderMap.remove(key); } } if (holder == null) { android.util.Slog.e(android.app.ActivityThread.TAG, ( to find <END_MOD>provider <START_MOD>info for   + auth)); return<END_MOD> null<START_MOD>; } holder = installProvider(c, holder, holder.info, true, holder.noReleaseNeeded, stable);<END_MOD> return <START_MOD>holder.<END_MOD>provider; }
private boolean addint2D(<START_MOD>android.renderscript<END_MOD>.RenderScript RS, com.android.rs.test.ScriptC_reduce_backward s) { final int dimX = 450; final int dimY = 225; final int[] inputArray = createInputArrayInt((dimX * dimY), 1, (1 << 13)); <START_MOD>android.renderscript<END_MOD>.Type.Builder typeBuilder = new <START_MOD>android.renderscript<END_MOD>.Type.Builder(RS, <START_MOD>android.renderscript<END_MOD>.Element.I32(RS)); typeBuilder.setX(dimX).setY(dimY); <START_MOD>android.renderscript<END_MOD>.Allocation inputAllocation = <START_MOD>android.renderscript<END_MOD>.Allocation.createTyped(RS, typeBuilder.create()); inputAllocation.copy2DRangeFrom(0, 0, dimX, dimY, inputArray); final int javaRslt = addint(inputArray); final int rsRslt = s.reduce_addint(inputAllocation).get(); return result("addint2D", javaRslt, rsRslt); }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.<START_MOD>writeParcelable(((android.os.Parcelable) <END_MOD>(mNetworkSpecifier<START_MOD>)), 0<END_MOD>); dest.writeInt(mSignalStrength); }
@javax.annotation.Nonnull <START_MOD>@com.android.sched.util.findbugs.SuppressFBWarnings("IS2_INCONSISTENT_SYNC") <END_MOD>public com.android.sched.util.config.GatherConfigBuilder getDefaultConfigBuilder() throws com.android.jack.IllegalOptionsException, java.io.IOException { ensurePluginManager(); com.android.sched.util.config.GatherConfigBuilder configBuilder = new com.android.sched.util.config.GatherConfigBuilder(sanityChecks, getPluginManager().getReflectionManager(com.android.sched.reflections.ReflectionFactory.getManager())); <START_MOD>assert (codecContext) != null; <END_MOD>configBuilder.setCodecContext(codecContext); java.lang.String resourceName = "/config.properties"; java.io.InputStream is = com.android.jack.Main.class.getResourceAsStream(resourceName); if (is != null) { try { configBuilder.load(is, new com.android.sched.util.location.StringLocation((   + resourceName))); } finally { is.close(); } } return configBuilder; }
private void <START_MOD>selectDeviceConfig(@com.android.annotations.Nullable com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig config) { mPortraitRadio.setData(config); com.android.ide.common.resources.configuration.ScreenOrientationQualifier qualifier = config.getConfig().getScreenOrientationQualifier(); com.android.resources.ScreenOrientation orientation = com.android.resources.ScreenOrientation.PORTRAIT; if (qualifier != null) { orientation = qualifier.getValue(); } try { (mDisableUpdates)++; if (orientation == (com.android.resources.ScreenOrientation.PORTRAIT)) { mPortraitRadio.setSelection(true); mLandscapeRadio.setSelection(false); mSquareRadio.setSelection(false); } else if (orientation == (com.android.resources.ScreenOrientation.LANDSCAPE)) { mPortraitRadio.setSelection(false); mLandscapeRadio.setSelection(true); mSquareRadio.setSelection(false); } else { assert orientation == (com.android.resources.ScreenOrientation.SQUARE); mPortraitRadio.setSelection(false); mLandscapeRadio.setSelection(false); mSquareRadio.setSelection(true); } } finally { (mDisableUpdates)--; } <END_MOD>boolean <START_MOD>hasSquare = false; com.android.ide.eclipse.adt.internal.sdk.LayoutDevice device = getSelectedDevice();<END_MOD> if (<START_MOD>device !=<END_MOD> null<START_MOD>) { for (com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig c : device.getConfigs()) { com.android.ide.common.resources.configuration.ScreenOrientationQualifier q = c.getConfig().getScreenOrientationQualifier<END_MOD>(); if (<START_MOD>(q<END_MOD> != null) <START_MOD>&& (q.getValue().equals(ScreenOrientation.SQUARE))) { hasSquare = true; break; } } } mSquareRadio.setEnabled(hasSquare); }<END_MOD>
<START_MOD>public java.util.List<java.lang.String> commandLine() { java.lang.String grouped = vogar.Target.ScriptBuilder.SCRIPT_JOINER.join(quotedTokens); return new com.google.common.collect.ImmutableList.Builder<java.lang.String>().addAll(commandLinePrefix).add(grouped).build(); }<END_MOD>
@android.platform.test.annotations.Presubmit public void testMoveTaskBetweenDisplays() throws java.lang.Exception { if (!(supportsMultiDisplay())) { return; } final android.server.cts.DisplayState newDisplay = new android.server.cts.VirtualDisplayBuilder(this).build(); mAmWmState.assertVisibility(android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY, true); mAmWmState.assertFocusedActivity( display activity must be focused android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY); <START_MOD>int displayId = (mVrHeadset) ? mVrVirtualDisplayId : android.server.cts.ActivityAndWindowManagersState.DEFAULT_DISPLAY_ID; <END_MOD>final int defaultDisplayStackId = mAmWmState.getAmState().getFocusedStackId(); android.server.cts.ActivityManagerState.ActivityStack focusedStack = mAmWmState.getAmState().getStackById(defaultDisplayStackId); assertEquals( must remain on <START_MOD>the correct display displayId, focusedStack.mDisplayId); launchActivityOnDisplay(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, newDisplay.mDisplayId); mAmWmState.assertFocusedActivity( must be on secondary display android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); int focusedStackId = mAmWmState.getAmState().getFocusedStackId(); focusedStack = mAmWmState.getAmState().getStackById(focusedStackId); assertEquals( stack must be on secondary display newDisplay.mDisplayId, focusedStack.mDisplayId); moveActivityToStack(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, defaultDisplayStackId); mAmWmState.waitForFocusedStack(mDevice, defaultDisplayStackId); mAmWmState.assertFocusedActivity( must be on moved activity android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); focusedStackId = mAmWmState.getAmState().getFocusedStackId(); focusedStack = mAmWmState.getAmState().getStackById(focusedStackId); assertEquals( must return to <END_MOD>primary display <START_MOD>displayId<END_MOD>, focusedStack.mDisplayId); }
<START_MOD>public static java.lang.String stripFirst(@com.android.annotations.NonNull java.lang.String string, @com.android.annotations.NonNull java.lang.String strip) { int index = string.indexOf(strip); if (index != (-1)) { int length = strip.length(); if ((index + length) == (string.length())) { return string.substring(0, index); } else { return (string.substring(0, index)) + (string.substring((index + (strip.length())))); } } return string; }<END_MOD>
public java.net.SocketAddress getsockname(java.io.FileDescriptor fd) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
<START_MOD>@java.lang.Override public void setLinkCapacityReportingCriteria(int hysteresisMs, int hysteresisDlKbps, int hysteresisUlKbps, int[] thresholdsDlKbps, int[] thresholdsUlKbps, int ran, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { riljLoge("Radio Proxy 1.2 is unsupported!"); return; } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_LINK_CAPACITY_REPORTING_CRITERIA, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setLinkCapacityReportingCriteria(rr.mSerial, hysteresisMs, hysteresisDlKbps, hysteresisUlKbps, com.android.internal.telephony.RIL.primitiveArrayToArrayList(thresholdsDlKbps), com.android.internal.telephony.RIL.primitiveArrayToArrayList(thresholdsUlKbps), com.android.internal.telephony.RIL.convertRanToHalRan(ran)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setLinkCapacityReportingCriteria", e); } } }<END_MOD>
public void saveUserDevices() { synchronized(com.android.sdklib.devices.DeviceManager.sLock) { if ((com.android.sdklib.devices.DeviceManager.mUserDevices) != null) <START_MOD>{ java.io.File userDevicesFile; try { userDevicesFile = new java.io.File(com.android.prefs.AndroidLocation.getFolder(), com.android.SdkConstants.FN_DEVICES_XML); <END_MOD>com.android.sdklib.devices.<START_MOD>DeviceWriter.writeToXml(new java.io.FileOutputStream(userDevicesFile), com.android.sdklib.devices.<END_MOD>DeviceManager.mUserDevices<START_MOD>); } catch (com.android.prefs.AndroidLocation.AndroidLocationException e) { mLog.warning( find user directory: %1$s e.getMessage()); } catch (<END_MOD>java.io.FileNotFoundException e) { mLog.warning( open file: %1$s e.getMessage()); } catch (javax.xml.parsers.ParserConfigurationException e) { mLog.warning( writing file: %1$s e.getMessage()); } catch (javax.xml.transform.TransformerFactoryConfigurationError e) { mLog.warning( writing file: %1$s e.getMessage()); } catch (javax.xml.transform.TransformerException e) { mLog.warning( writing file: %1$s e.getMessage()); } } } }
private static int preloadDrawables(dalvik.system.VMRuntime runtime, android.content.res.TypedArray ar) { int N = ar.length(); for (int i = 0; i < N; i++) { if ((android.os.Debug.getGlobalAllocSize()) > (com.android.internal.os.ZygoteInit.PRELOAD_GC_THRESHOLD)) { if (false) { android.util.Log.v(com.android.internal.os.ZygoteInit.TAG, ( GC at   + (android.os.Debug.getGlobalAllocSize()))); } java.lang.System.gc(); runtime.runFinalizationSync(); android.os.Debug.resetGlobalAllocSize(); } int id = ar.getResourceId(i, 0); if (false) { android.util.Log.v(com.android.internal.os.ZygoteInit.TAG, ( resource   + (java.lang.Integer.toHexString(id)))); } if (id != 0) { <START_MOD>com.android.internal.os<END_MOD>.Drawable dr = com.android.internal.os.ZygoteInit.mResources.getDrawable(id); if (((dr.getChangingConfigurations()) & (~(ActivityInfo.CONFIG_FONT_SCALE))) != 0) { android.util.Log.w(com.android.internal.os.ZygoteInit.TAG, (((( drawable resource   + (java.lang.Integer.toHexString(id))) +   ( + (ar.getString(i))) +   that varies with configuration!! } } } return N; }
public com.android.builder.internal.packaging.Packager.JarStatus addResourcesFromJar(java.io.File jarFile) throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SealedPackageException { if (mIsSealed) { throw new com.android.builder.packaging.SealedPackageException( is already sealed } <START_MOD>java.io.FileInputStream fis = null; <END_MOD>try { mLogger.verbose("%s:", jarFile); mFilter.reset(jarFile); fis = new java.io.FileInputStream(jarFile); mBuilder.writeZip(fis, mFilter); return new com.android.builder.internal.packaging.Packager.JarStatusImpl(mFilter.getNativeLibs(), mFilter.getNativeLibsConflict()); } catch (com.android.builder.packaging.DuplicateFileException e) { mBuilder.cleanUp(); throw e; } catch (java.lang.Exception e) { mBuilder.cleanUp(); throw new com.android.builder.packaging.PackagerException(e,   to add %s jarFile); } <START_MOD>finally { if (fis != null) { com.google.common.io.Closeables.closeQuietly(fis); } } }<END_MOD>
public void testTunneledVideoPlayback() throws java.lang.Exception { if (!(isVideoFeatureSupported(MediaFormat.MIMETYPE_VIDEO_AVC, CodecCapabilities.FEATURE_TunneledPlayback))) { android.cts.util.MediaUtils.skipTest(android.media.cts.DecoderTest.TAG,   tunneled video playback codec found! return; } android.media.AudioManager am = ((android.media.AudioManager) (mContext.getSystemService(Context.AUDIO_SERVICE))); mMediaCodecPlayer = new android.media.cts.MediaCodecTunneledPlayer(getActivity().getSurfaceHolder(), true, am.generateAudioSessionId()); mMediaCodecPlayer.setAudioDataSource(android.media.cts.DecoderTest.AUDIO_URL, null); mMediaCodecPlayer.setVideoDataSource(android.media.cts.DecoderTest.VIDEO_URL, null); assertTrue( failed! mMediaCodecPlayer.start()); assertTrue( failed! mMediaCodecPlayer.prepare()); mMediaCodecPlayer.startThread(); <START_MOD>final <END_MOD>long <START_MOD>durationMs = mMediaCodecPlayer.getDuration(); final long timeOutMs = (<END_MOD>(java.lang.System.currentTimeMillis()) + <START_MOD>durationMs) + (3<END_MOD> * (android.media.cts.DecoderTest.<START_MOD>SLEEP_TIME_MS<END_MOD>)); while (<START_MOD>!(mMediaCodecPlayer.isEnded())) { assertTrue( video playback timeout exceeded (timeOutMs<END_MOD> > (java.lang.System.currentTimeMillis()))<START_MOD>); java.lang.Thread.sleep(android.media.cts.DecoderTest.SLEEP_TIME_MS); if ((mMediaCodecPlayer.getCurrentPosition()) >= (mMediaCodecPlayer.getDuration(<END_MOD>))) { <START_MOD>android.util.Log.d(android.media.cts.DecoderTest.TAG, ((( -- current pos =   + <END_MOD>(mMediaCodecPlayer.getCurrentPosition())<START_MOD>) +   duration =   +<END_MOD> (mMediaCodecPlayer.getDuration()))); break; } } }
<START_MOD>public void test_computeTime_enteringDST_TimeZone_LosAngeles_2014() { java.util.TimeZone timeZone = java.util.TimeZone.getTimeZone("America/Los_Angeles"); checkDSTLosAngeles2014(timeZone); }<END_MOD>
<START_MOD>private void ensureInitialized() { synchronized(mLock) { if (mInitialized) { return; } } android.content.res.XmlResourceParser parser = null; try { parser = mContext.getResources().getXml(mResourceId); parseNetworkSecurityConfig(parser); mContext = null; mInitialized = true; } catch (android.content.res.Resources | org.xmlpull.v1.XmlPullParserException | java.io.IOException | android.security.net.config.XmlConfigSource.ParserException e) { throw new java.lang.RuntimeException("Failed to parse Xml configuration", e); } finally { if (parser != null) { parser.close(); } } }<END_MOD>
void readCharacteristic(int clientIf, java.lang.String address, int <START_MOD>handle<END_MOD>, int authReq) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM,   BLUETOOTH permission if (com.android.bluetooth.gatt.GattService.VDBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ( - address= + address)); java.lang.Integer connId = mClientMap.connIdByAddress(clientIf, address); if (connId != null) gattClientReadCharacteristicNative(connId, <START_MOD>handle<END_MOD>, authReq); else android.util.Log.e(com.android.bluetooth.gatt.GattService.TAG, (( - No connection for   + address) + "...")); }
private void testExplicitPositionMatchParent() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; params.<START_MOD>width<END_MOD> = <START_MOD>(<END_MOD>100<START_MOD> - (mOutsets.left)) - (mOutsets.right)<END_MOD>; params.<START_MOD>height<END_MOD> = <START_MOD>(<END_MOD>100<START_MOD> - (mOutsets.bottom)) - (mOutsets.top)<END_MOD>; }); }
<START_MOD>public void bindWapPushManager(boolean repeat) { if ((mWapPushMan) != null) return; final android.content.ServiceConnection wapPushConnection = this; if (repeat) { new java.lang.Thread() { public void run() { while ((mWapPushMan) == null) { mOwner.bindService(new android.content.Intent(com.android.internal.telephony.IWapPushManager.class.getName()), wapPushConnection, Context.BIND_AUTO_CREATE); try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { if (android.util.Config.DEBUG) android.util.Log.v(com.android.internal.telephony.WapPushOverSms.LOG_TAG, "sleep interrupted."); } } } }.start(); } else { mOwner.bindService(new android.content.Intent(com.android.internal.telephony.IWapPushManager.class.getName()), wapPushConnection, Context.BIND_AUTO_CREATE); } }<END_MOD>
final void releaseTheme(<START_MOD>long<END_MOD> theme) { synchronized(this) { deleteTheme(theme); decRefsLocked(<START_MOD>hashLongToInt(<END_MOD>theme<START_MOD>)<END_MOD>); } }
@org.junit.Test public void testCompile022() throws java.lang.Exception { java.lang.String packageName = "com.android.jack.switchstatement.test022.jack"; java.lang.String classPrefix = (packageName.replace('.', '_')) + "_"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put("Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo("java_lang_Thread$State", <START_MOD>false)); input.put("SyntheticSwitchmapClass-*", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo("java_lang_Thread$State", <END_MOD>true)); checkCompiledCode(packageName, input); }
public void setsockoptInt(java.io.FileDescriptor fd, int level, int option, int value) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
@java.lang.Override public void pauseBatchedScan() { synchronized(mSettingsLock) { if (com.android.server.wifi.scanner.<START_MOD>WificondWifiScannerImpl<END_MOD>.DBG) android.util.Log.d(com.android.server.wifi.scanner.<START_MOD>WificondWifiScannerImpl<END_MOD>.TAG,   scan if ((mPendingBackgroundScanSettings) == null) { mPendingBackgroundScanSettings = mBackgroundScanSettings; mPendingBackgroundScanEventHandler = mBackgroundScanEventHandler; } mBackgroundScanSettings = null; mBackgroundScanEventHandler = null; mBackgroundScanPeriodPending = false; mBackgroundScanPaused = true; unscheduleScansLocked(); android.net.wifi.WifiScanner[] results = getLatestBatchedScanResults(true); if ((mPendingBackgroundScanEventHandler) != null) { mPendingBackgroundScanEventHandler.onScanPaused(results); } } processPendingScans(); }
private void testConnectViaHttpProxyToHttps(libcore.java.net.URLConnectionTest.ProxyConfig proxyConfig) throws java.lang.Exception { TestSSLContext testSSLContext = <START_MOD>createTestSSLContext<END_MOD>(); libcore.java.net.URLConnectionTest.RecordingHostnameVerifier hostnameVerifier = new libcore.java.net.URLConnectionTest.RecordingHostnameVerifier(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), true); server.enqueue(new com.google.mockwebserver.MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders()); server.enqueue(new com.google.mockwebserver.MockResponse().setBody( response comes via a secure proxy server.play(); java.net.URL url = new java.net.URL("https://android.com/foo"); javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (proxyConfig.connect(server, url))); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); connection.setHostnameVerifier(hostnameVerifier); assertContent( response comes via a secure proxy connection); com.google.mockwebserver.RecordedRequest connect = server.takeRequest(); assertEquals( line failure on proxy   android.com:443 HTTP/1.1 connect.getRequestLine()); assertContains(connect.getHeaders(),   android.com com.google.mockwebserver.RecordedRequest get = server.takeRequest(); assertEquals( /foo HTTP/1.1 get.getRequestLine()); assertContains(get.getHeaders(),   android.com assertEquals(java.util.Arrays.asList( android.com hostnameVerifier.calls); }
<START_MOD>@javax.annotation.Nonnull java.io.InputStream getInputStream() throws java.io.IOException;<END_MOD>
private void removePackageDataLI(com.android.server.pm.PackageSetting ps, com.android.server.pm.PackageManagerService.PackageRemovedInfo outInfo, int flags, boolean writeSettings) { java.lang.String packageName = ps.name; removePackageLI(ps, ((flags & (com.android.server.pm.PackageManagerService.REMOVE_CHATTY)) != 0)); final com.android.server.pm.PackageSetting deletedPs; synchronized(mPackages) { deletedPs = mSettings.mPackages.get(packageName); if (outInfo != null) { outInfo.removedPackage = packageName; outInfo.removedUsers = (deletedPs != null) ? deletedPs.queryInstalledUsers(com.android.server.pm.PackageManagerService.sUserManager.getUserIds(), true) : null; } } if ((flags & (android.content.pm.PackageManager.DELETE_KEEP_DATA)) == 0) { removeDataDirsLI(packageName); schedulePackageCleaning(packageName, UserHandle.USER_ALL, true); } synchronized(mPackages) { if (deletedPs != null) { if ((flags & (android.content.pm.PackageManager.DELETE_KEEP_DATA)) == 0) { if (outInfo != null) { outInfo.removedAppId = mSettings.removePackageLPw(packageName); } if (deletedPs != null) { updatePermissionsLPw(deletedPs.name, null, 0); if ((deletedPs.sharedUser) != null) { mSettings.updateSharedUserPermsLPw(deletedPs, mGlobalGids); } } clearPackagePreferredActivitiesLPw(deletedPs.name, UserHandle.USER_ALL); } } if (writeSettings) { mSettings.writeLPr(); } } <START_MOD>final int appId = outInfo.removedAppId; if (appId != (-1)) { android.security.KeyStore keyStore = android.security.KeyStore.getInstance(); for (int userId : com.android.server.pm.PackageManagerService.sUserManager.getUserIds()) { int uid = android.os.UserHandle.getUid(userId, appId); keyStore.clearUid(uid); } } }<END_MOD>
boolean finishDisabledPackageActivitiesLocked(java.lang.String packageName, java.util.Set<java.lang.String> filterByClasses, boolean doit, boolean evenPersistent, int userId) { boolean didSomething = false; for (int displayNdx = (mActivityDisplays.size()) - 1; displayNdx >= 0; --displayNdx) { final java.util.ArrayList<com.android.server.am.ActivityStack> stacks = mActivityDisplays.valueAt(displayNdx).mStacks; <START_MOD>int stackNdx = (stacks.size()) - 1; while (stackNdx >= 0) { <END_MOD>final <START_MOD>com.android.server.am.ActivityStack stack<END_MOD> = stacks.<START_MOD>get(stackNdx); stackNdx--; if (<END_MOD>stack.finishDisabledPackageActivitiesLocked(packageName, filterByClasses, doit, evenPersistent, userId)) { didSomething = true; } } } return didSomething; }
<START_MOD>public void test_serializedForm() { }<END_MOD>
<START_MOD>@java.lang.Override void mergeWith(int index, @javax.annotation.CheckForNull com.android.jack.ir.ast.JValueLiteral literal) { if (literal != null) { values[index].markExpression(literal); } }<END_MOD>
@java.lang.Override @com.android.annotations.NonNull public java.util.List<com.android.<START_MOD>build<END_MOD>.<START_MOD>gradle<END_MOD>.<START_MOD>internal.api.GroupableProductFlavor<END_MOD>> getProductFlavors() { return getVariantData().getVariantConfiguration().getFlavorConfigs(); }
<START_MOD>public boolean isBetterMatchThan(com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier compareTo, com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier reference) { if (compareTo == null) { return true; } com.android.ide.eclipse.adt.internal.resources.configurations.DockModeQualifier compareQualifier = ((com.android.ide.eclipse.adt.internal.resources.configurations.DockModeQualifier) (compareTo)); com.android.ide.eclipse.adt.internal.resources.configurations.DockModeQualifier referenceQualifier = ((com.android.ide.eclipse.adt.internal.resources.configurations.DockModeQualifier) (reference)); if ((compareQualifier.getValue()) == (referenceQualifier.getValue())) { return false; } else if ((mValue) == (com.android.sdklib.resources.DockMode.NONE)) { return true; } return false; }<END_MOD>
public void setuid(int uid) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
private static java.util.TimeZone getCustomTimeZone(java.lang.String id) { java.util.regex.Matcher m = java.util.TimeZone.CUSTOM_ZONE_ID_PATTERN.matcher(id); if (!(m.matches())) { return null; } int hour; int minute = 0; try { hour = java.lang.Integer.parseInt(m.group(1)); if ((m.group(3)) != null) { minute = java.lang.Integer.parseInt(m.group(3)); } } catch (java.lang.NumberFormatException impossible) { throw new java.lang.AssertionError(impossible); } if ((((hour < 0) || (hour > 23)) || (minute < 0)) || (minute > 59)) { return null; } char sign = id.charAt(3); int raw = (hour * 3600000) + (minute * 60000); if (sign == '-') { raw = -raw; } java.lang.String cleanId = <START_MOD>((((("GMT" +<END_MOD> sign<START_MOD>) + (hour < 10 ? "0" : "")) + hour) + ":") + (minute < 10 ? "0" : "")) + minute<END_MOD>; return new java.util.SimpleTimeZone(raw, cleanId); }
public static long AddNeg2(long arg1, long arg2) {<START_MOD> if (Main.doThrow) { throw new java.lang.Error(); }<END_MOD> long temp = -arg2; return (arg1 + temp) | (arg1 + temp); }
<START_MOD>private static java.lang.RuntimeException rethrowServiceException(android.os.ServiceSpecificException e) { switch (e.errorCode) { case android.net.ConnectivityManager.Errors.TOO_MANY_REQUESTS : return new android.net.ConnectivityManager.TooManyRequestsException(); default : android.util.Log.w(android.net.ConnectivityManager.TAG, ("Unknown service error code " + (e.errorCode))); return new java.lang.RuntimeException(e); } }<END_MOD>
<START_MOD>public void setIccLockEnabled(boolean enabled, java.lang.String password, android.os.Message onComplete) { int serviceClassX; serviceClassX = ((CommandsInterface.SERVICE_CLASS_VOICE) + (CommandsInterface.SERVICE_CLASS_DATA)) + (CommandsInterface.SERVICE_CLASS_FAX); mCi.setFacilityLockForApp(CommandsInterface.CB_FACILITY_BA_SIM, enabled, password, serviceClassX, mAid, onComplete); }<END_MOD>
@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (( cannot connect to   + device) +   : quiet mode enabled return false; } if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (( cannot connect to   + device) +   : too many connected devices return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); <START_MOD>boolean isSdpPending = (priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && ((bondState == (android.bluetooth.BluetoothDevice.BOND_BONDING)) || (bondState == (android.bluetooth.BluetoothDevice.BOND_BONDED))); <END_MOD>if ((<START_MOD>(!isSdpPending) && (priority !=<END_MOD> (android.bluetooth.BluetoothProfile.<START_MOD>PRIORITY_ON)<END_MOD>)) && (<START_MOD>priority != (android.bluetooth.BluetoothProfile.PRIORITY_AUTO_CONNECT<END_MOD>))) { android.util.Log.<START_MOD>w<END_MOD>(com.android.bluetooth.a2dp.A2dpService.TAG, ((( return false<START_MOD>, priority= + priority) +   bondState= + bondState)); return false<END_MOD>; } <START_MOD>return true<END_MOD>; }
<START_MOD>java.io.File getResourcesDir();<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String readUTF() throws java.io.IOException { int length = readInt(); if (length == (-1)) { return null; } byte[] utf8String = new byte[length]; in.readFully(utf8String); return com.android.jack.util.StringUtils.utf8BytesToString(utf8String); }<END_MOD>
<START_MOD>public int getPixel(int x, int y) { java.awt.image.BufferedImage image = getBufferedImage(); return image.getRGB(x, y); }<END_MOD>
<START_MOD>private boolean needsToRegisterAppWithRuntime(android.content.pm.ApplicationInfo appInfo) { android.content.pm.IPackageManager pm = android.app.ActivityThread.getPackageManager(); android.content.pm.PackageInfo pi = null; try { pi = pm.getPackageInfo(appInfo.packageName, 0, android.os.UserHandle.myUserId()); } catch (android.os.RemoteException e) { } if (pi != null) { boolean sharedUserIdSet = (pi.sharedUserId) != null; boolean processNameNotDefault = ((pi.applicationInfo) != null) && (!(appInfo.packageName.equals(pi.applicationInfo.processName))); boolean sharable = sharedUserIdSet || processNameNotDefault; return !sharable; } return false; }<END_MOD>
@javax.annotation.Nonnull public com.android.jack.ir.ast.JType getType() { <START_MOD>assert (type) != null; <END_MOD>return type; }
<START_MOD>public java.util.List<com.android.sdklib.devices.Device.Software> getAllSoftware() { return mSoftware; }<END_MOD>
<START_MOD>protected<END_MOD> static int wordCount(com.android.jack.dx.rop.code.RegisterSpecList regs) { int sz = regs.size(); if (sz > (com.android.jack.dx.dex.code.form.Form35c.MAX_NUM_OPS)) { return -1; } int result = 0; for (int i = 0; i < sz; i++) { com.android.jack.dx.rop.code.RegisterSpec one = regs.get(i); result += one.getCategory(); if (!(unsignedFitsInNibble((((one.getReg()) + (one.getCategory())) - 1)))) { return -1; } } return result <= (com.android.jack.dx.dex.code.form.Form35c.MAX_NUM_OPS) ? result : -1; }
private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { android.net.ConnectivityManager.checkCallbackNotNull(callback); com.android.internal.util.Preconditions.checkArgument(((action == (android.net.ConnectivityManager.REQUEST)) || (need != null)),   NetworkCapabilities final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { if (<START_MOD>((callback.networkRequest) != null) && ((callback.networkRequest) != (android.net.ConnectivityManager.NOT_IN_USE)<END_MOD>)) { android.util.Log.e(android.net.ConnectivityManager.TAG,   was already registered } android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throw android.net.ConnectivityManager.convertServiceException(e); } return request; }
private void checkSetTime(long time) throws java.io.IOException { java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(<START_MOD>mFile<END_MOD>); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setTime(time); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(<START_MOD>mFile<END_MOD>); assertEquals(time, zipFile.getEntry("x").getTime()); zipFile.close(); }
public void run() { android.<START_MOD>renderscript<END_MOD>.RenderScript pRS = android.<START_MOD>renderscript<END_MOD>.RenderScript.create(mCtx); com.android.rs.test.ScriptC_alloc s = new com.android.rs.test.ScriptC_alloc(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_root(s.get_aRaw()); s.invoke_alloc_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }
protected void libToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> commandLine, @javax.annotation.Nonnull java.lang.String classpath, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { buildJackCall(commandLine); commandLine.add("--verbose"); commandLine.add(verbosityLevel.name()); commandLine.add("--sanity-checks"); commandLine.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { commandLine.add("--incremental-folder"); commandLine.add(incrementalFolder.getAbsolutePath()); } for (java.io.File res : resImport) { commandLine.add("--import-resource"); commandLine.add(res.getPath()); } for (java.io.File meta : metaImport) { commandLine.add("--import-meta"); commandLine.add(meta.getPath()); } if ((outputJack) != null) { if (zipOutputJackFiles) { commandLine.add("--output-jack"); <START_MOD>commandLine.add(outputJack.getAbsolutePath()); <END_MOD>} else { <START_MOD>if ((incrementalFolder) != null) { throw new java.lang.UnsupportedOperationException(); } addPropertiesForOutputJackDir(commandLine, <END_MOD>outputJack<START_MOD>); }<END_MOD> } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, commandLine); if (!(classpath.equals(""))) { commandLine.add("--classpath"); commandLine.add(classpath); } for (java.io.File jarjarFile : jarjarRules) { commandLine.add("--config-jarjar"); commandLine.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { commandLine.add("--config-proguard"); commandLine.add(flags.getAbsolutePath()); } if (withDebugInfos) { commandLine.add("-g"); } addPluginPath(commandLine); addPluginNames(commandLine); libToImportStaticLibs(commandLine, in); }
<START_MOD>@com.android.annotations.Nullable @java.lang.Override public java.lang.String getFilter(com.android.ide.common.build.FilterType filterType) { if (((densityFilter) != null) && (filterType == (FilterType.DENSITY))) { return densityFilter; } else if (((abiFilter) != null) && (filterType == (FilterType.ABI))) { return abiFilter; } return null; }<END_MOD>
<START_MOD>public boolean loadRemoteAddonsList() { final boolean[] result = new boolean[]{ false }; mTaskFactory.start("Load Add-ons List", new com.android.sdklib.internal.repository.ITask() { public void run(com.android.sdklib.internal.repository.ITaskMonitor monitor) { java.lang.String url = java.lang.System.getenv("SDK_UPDATER_ADDONS_LIST"); if (url == null) { url = com.android.sdklib.repository.SdkAddonsListConstants.URL_ADDON_LIST; } if (getSettingsController().getForceHttp()) { url = url.replaceAll("https://", "http://"); } com.android.sdklib.internal.repository.AddonsListFetcher fetcher = new com.android.sdklib.internal.repository.AddonsListFetcher(); com.android.sdklib.internal.repository.AddonsListFetcher.Site[] sites = fetcher.fetch(monitor, url); if (sites != null) { mSources.removeAll(SdkSourceCategory.ADDONS_3RD_PARTY); for (com.android.sdklib.internal.repository.AddonsListFetcher.Site s : sites) { mSources.add(SdkSourceCategory.ADDONS_3RD_PARTY, new com.android.sdklib.internal.repository.SdkAddonSource(s.getUrl(), s.getUiName())); } result[0] = true; } } }); return result[0]; }<END_MOD>
public void paintControl(org.eclipse.swt.events.PaintEvent e) { synchronized(this) { if (((tree) != null) && ((viewport) != null)) { e.gc.setBackground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_WHITE)); e.gc.fillRectangle(0, 0, getBounds().width, getBounds().height); e.gc.setTransform(transform); <START_MOD>e.gc.setLineWidth(((int) (java.lang.Math.ceil((0.7 / (scale)))))); <END_MOD>org.eclipse.swt.graphics.Path connectionPath = new org.eclipse.swt.graphics.Path(org.eclipse.swt.widgets.Display.getDefault()); paintRecursive(e.gc, tree, connectionPath); e.gc.drawPath(connectionPath); connectionPath.dispose(); e.gc.setAlpha(80); e.gc.setBackground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_DARK_GRAY)); e.gc.fillRectangle(((int) (viewport.x)), ((int) (viewport.y)), ((int) (java.lang.Math.ceil(viewport.width))), ((int) (java.lang.Math.ceil(viewport.height)))); e.gc.setAlpha(255); e.gc.setForeground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_BLACK)); e.gc.setLineWidth(((int) (java.lang.Math.ceil((2 / (scale)))))); e.gc.drawRectangle(((int) (viewport.x)), ((int) (viewport.y)), ((int) (java.lang.Math.ceil(viewport.width))), ((int) (java.lang.Math.ceil(viewport.height)))); } } }
@org.junit.Test public void testSetWifiDisabledSuccess() throws java.lang.Exception {<START_MOD> when(mWifiStateMachine.syncGetWifiApState()).thenReturn(WifiManager.WIFI_AP_STATE_DISABLED);<END_MOD> when(mSettingsStore.handleWifiToggled(eq(false))).thenReturn(true); assertTrue(mWifiServiceImpl.setWifiEnabled(com.android.server.wifi.WifiServiceImplTest.TEST_PACKAGE_NAME, false)); verify(mWifiController).obtainMessageAndSend(eq(com.android.server.wifi.WifiController.CMD_WIFI_TOGGLED)); }
public void writeBlobTo(java.io.File blobRootFolder) throws java.io.IOException { javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance(); factory.setNamespaceAware(true); factory.setValidating(false); factory.setIgnoringComments(true); javax.xml.parsers.DocumentBuilder builder; try { builder = factory.newDocumentBuilder(); org.w3c.dom.Document document = builder.newDocument(); org.w3c.dom.Node rootNode = document.createElement(com.android.builder.resources.ResourceMerger.NODE_MERGER); document.appendChild(rootNode); for (com.android.builder.resources.ResourceSet resourceSet : mResourceSets) { org.w3c.dom.Node resourceSetNode = document.createElement(com.android.builder.resources.ResourceMerger.NODE_RESOURCE_SET); rootNode.appendChild(resourceSetNode); resourceSet.appendToXml(resourceSetNode, document); } java.lang.String content = com.android.ide.common.xml.XmlPrettyPrinter.prettyPrint(document); <START_MOD>if (!(<END_MOD>blobRootFolder.mkdirs()<START_MOD>)) { throw new java.io.IOException(( to create directory   + blobRootFolder)); }<END_MOD> com.google.common.io.Files.write(content, new java.io.File(blobRootFolder, com.android.builder.resources.ResourceMerger.FN_MERGER_XML), Charsets.UTF_8); } catch (javax.xml.parsers.ParserConfigurationException e) { throw new java.io.IOException(e); } }
public void test_SSLSocket_startHandshake() throws java.lang.Exception { final libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create(); SSLSocket client = ((SSLSocket) (c.clientContext.getSocketFactory().createSocket(c.host, c.port))); final SSLSocket server = ((SSLSocket) (c.serverSocket.accept())); java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newSingleThreadExecutor(); java.util.concurrent.Future<java.lang.Void> future = executor.submit(new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { server.startHandshake(); assertNotNull(server.getSession()); try { server.getSession().getPeerCertificates(); fail(); } catch (javax.net.ssl.SSLPeerUnverifiedException expected) { } java.security.cert.Certificate[] localCertificates = server.getSession().getLocalCertificates(); assertNotNull(localCertificates); libcore.java.security.TestKeyStore.assertChainLength(localCertificates); assertNotNull(localCertificates[0]); libcore.javax.net.ssl.TestSSLContext.assertServerCertificateChain(c.serverTrustManager, localCertificates<START_MOD>, server<END_MOD>); libcore.javax.net.ssl.TestSSLContext.assertCertificateInKeyStore(localCertificates[0], c.serverKeyStore); return null; } }); executor.shutdown(); client.startHandshake(); assertNotNull(client.getSession()); assertNull(client.getSession().getLocalCertificates()); java.security.cert.Certificate[] peerCertificates = client.getSession().getPeerCertificates(); assertNotNull(peerCertificates); libcore.java.security.TestKeyStore.assertChainLength(peerCertificates); assertNotNull(peerCertificates[0]); libcore.javax.net.ssl.TestSSLContext.assertServerCertificateChain(c.clientTrustManager, peerCertificates<START_MOD>, client<END_MOD>); libcore.javax.net.ssl.TestSSLContext.assertCertificateInKeyStore(peerCertificates[0], c.serverKeyStore); future.get(); client.close(); server.close(); c.close(); }
@java.lang.Override public void onResume() { super.onResume(); createPreferenceHierarchy(); final com.android.internal.widget.LockPatternUtils lockPatternUtils = mChooseLockSettingsHelper.utils(); if ((mVisiblePattern) != null) { mVisiblePattern.setChecked(lockPatternUtils.isVisiblePatternEnabled()); } if ((mTactileFeedback) != null) { mTactileFeedback.setChecked(lockPatternUtils.isTactileFeedbackEnabled()); } mShowPassword.setChecked(((Settings.System.getInt(getContentResolver(), Settings.System.TEXT_SHOW_PASSWORD, 1)) != 0)); android.security.KeyStore.State state = android.security.KeyStore.getInstance().state(); mResetCredentials.setEnabled((state != (KeyStore.State.UNINITIALIZED))); <START_MOD>if ((mSELinuxToggleEnforce) != null) { mSELinuxToggleEnforce.setChecked(android.os.SELinux.isSELinuxEnforced()); } }<END_MOD>
private void onInBandRing(int inBand, byte[] address) { <START_MOD>com.android.bluetooth.hfpclient.StackEvent event = new com.android.bluetooth.hfpclient.StackEvent(StackEvent.EVENT_TYPE_IN_BAND_RINGTONE); event.valueInt = inBand; event.device = getDevice(address); if (com.android.bluetooth.hfpclient.NativeInterface.DBG) { <END_MOD>android.util.Log.<START_MOD>d<END_MOD>(com.android.bluetooth.hfpclient.NativeInterface.TAG, <START_MOD>((( address   + address) +   event   + event)); } com.android.bluetooth.hfpclient.HeadsetClientService service = com.android.bluetooth.hfpclient.HeadsetClientService.getHeadsetClientService(); if (service != null) { service.messageFromNative(event); } else { android.util.Log.w(com.android.bluetooth.hfpclient.NativeInterface.TAG, ( Ignoring message because service<END_MOD> not <START_MOD>available:   + event)); } }<END_MOD>
<START_MOD>public void testDivideAndRemainderUnsigned() { long[] vals = new long[]{ 1L, 23L, 456L, 2147483647L, 2147483648L, 4294967295L }; for (long dividend : vals) { for (long divisor : vals) { int uq = java.lang.Integer.divideUnsigned(((int) (dividend)), ((int) (divisor))); int ur = java.lang.Integer.remainderUnsigned(((int) (dividend)), ((int) (divisor))); assertEquals(((int) (dividend / divisor)), uq); assertEquals(((int) (dividend % divisor)), ur); assertEquals(((int) (dividend)), ((uq * ((int) (divisor))) + ur)); } } for (long dividend : vals) { try { java.lang.Integer.divideUnsigned(((int) (dividend)), 0); } catch (java.lang.ArithmeticException expected) { } try { java.lang.Integer.remainderUnsigned(((int) (dividend)), 0); } catch (java.lang.ArithmeticException expected) { } } }<END_MOD>
@com.android.annotations.Nullable public static com.android.build.SplitOutput computeBestOutput(@com.android.annotations.NonNull java.util.List<? extends com.android.build.SplitOutput> outputs, int density, @com.android.annotations.NonNull java.util.List<java.lang.String> abis) { com.android.resources.Density densityEnum = com.android.resources.Density.getEnum(density); java.lang.String densityValue; if (densityEnum == null) { densityValue = null; } else { densityValue = densityEnum.getResourceValue(); } <START_MOD>java.util.List<com.android.build.SplitOutput> matches = com.google.common.collect.Lists.newArrayListWithExpectedSize(outputs.size()); for (com.android.build.SplitOutput output : outputs) { java.lang.String densityFilter = output.getDensityFilter(); java.lang.String abiFilter = output.getAbiFilter(); if ((densityFilter !=<END_MOD> null<START_MOD>) && (!(densityFilter.equals(densityValue)))) { continue; } if ((abiFilter != null) && (!(abis.contains(abiFilter)))) { continue; } matches.add(output); } if (matches.isEmpty()) { return null; } java.util.Collections.sort(matches, new java.util.Comparator<com.android.build.SplitOutput>() { @java.lang.Override public<END_MOD> int <START_MOD>compare(com.android.build.SplitOutput splitOutput, com.android.build.SplitOutput splitOutput2) { return (splitOutput2.getVersionCode()) <END_MOD>-<START_MOD> (splitOutput.getVersionCode()); } });<END_MOD> return <START_MOD>matches.get(0); }<END_MOD>
@java.lang.Override public void run() { do { if ((mAdbConnection) == null) { com.android.ddmlib.Log.d("DeviceMonitor",   adb connection mAdbConnection = com.android.ddmlib.DeviceMonitor.openAdbConnection(); if ((mAdbConnection) == null) { (mConnectionAttempt)++; com.android.ddmlib.Log.e("DeviceMonitor", ( attempts:   + (mConnectionAttempt))); if ((mConnectionAttempt) > 10) { if (!(mBridge.startAdb())) { (mRestartAttemptCount)++; com.android.ddmlib.Log.e("DeviceMonitor", ( restart attempts:   + (mRestartAttemptCount))); } else { com.android.ddmlib.Log.i("DeviceMonitor",   restarted mRestartAttemptCount = 0; } } com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly(1, java.util.concurrent.TimeUnit.SECONDS); } else { com.android.ddmlib.Log.d("DeviceMonitor",   to adb for device monitoring mConnectionAttempt = 0; } } try { if (((mAdbConnection) != null) && (!(mMonitoring))) { mMonitoring = sendDeviceListMonitoringRequest(); } if (mMonitoring) { int length = com.android.ddmlib.DeviceMonitor.readLength(mAdbConnection, mLengthBuffer); if (length >= 0) { processIncomingDeviceData(length); mInitialDeviceListDone = true; } } } catch (java.nio.channels.AsynchronousCloseException ace) { } catch (com.android.ddmlib.TimeoutException ioe) { handleExceptionInMonitorLoop(ioe); } catch (java.io.IOException ioe) { handleExceptionInMonitorLoop(ioe); } <START_MOD>catch (java.lang.InterruptedException e) { handleExceptionInMonitorLoop(e); } <END_MOD>} while (!(mQuit) ); }
<START_MOD>public void testAtanh() { checkAtanhFloat(); checkAtanhFloat2(); checkAtanhFloat3(); checkAtanhFloat4(); }<END_MOD>
<START_MOD>@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent arg0) { boolean sizeMode = mRadioSdCardSize.getSelection(); mPresenter.enableSdCardWidgets(sizeMode); mPresenter.validatePage(); }<END_MOD>
public static void testAsType() throws java.lang.Throwable { java.lang.invoke.MethodHandle <START_MOD>oh = java.lang.invoke.MethodHandles.lookup().findStatic(Main.class, "frob", java.lang.invoke.MethodType.methodType(void.class, boolean.class)); oh.invoke(java.lang.Boolean.TRUE); java.lang.invoke.MethodHandle <END_MOD>mh = java.lang.invoke.MethodHandles.lookup().findVirtual(java.lang.String.class, "concat", java.lang.invoke.MethodType.methodType(java.lang.String.class, java.lang.String.class)); java.lang.invoke.MethodHandle asType = mh.asType(java.lang.invoke.MethodType.methodType(java.lang.Object.class, java.lang.CharSequence.class, java.lang.String.class)); java.lang.Object obj = asType.invokeExact(((java.lang.CharSequence) (Main.getSequence())), "bar"); Main.assertEquals("foobar", ((java.lang.String) (obj))); try { java.lang.String str = ((java.lang.String) (asType.invokeExact(((java.lang.CharSequence) (Main.getSequence())), "bar"))); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } try { java.lang.String str = ((java.lang.String) (asType.invokeExact("baz", "bar"))); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } try { mh.asType(java.lang.invoke.MethodType.methodType(int.class, java.lang.String.class, java.lang.String.class)); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } try { mh.asType(java.lang.invoke.MethodType.methodType(java.lang.String.class, int.class, java.lang.String.class)); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } }
@java.lang.Override public void traverse(@javax.annotation.Nonnull com.android.jack.ir.ast.JVisitor visitor) {<START_MOD> assert ((enclosingPackage) == null) || (!(enclosingPackage.deletedOrRenamedItems.contains(getName())));<END_MOD> if (visitor.visit(this)) { if (visitor.needLoading()) { loadSubPackages(); loadClassesAndInterfaces(); } visitor.accept(subPackages); visitor.accept(declaredTypes); } visitor.endVisit(this); }
public void <START_MOD>testSetRoundingMode_null<END_MOD>() { java.text.DecimalFormat decimalFormat = ((java.text.DecimalFormat) (java.text.DecimalFormat.getInstance(java.util.Locale.US))); try { decimalFormat.setRoundingMode(null); fail( expected } catch (java.lang.NullPointerException e) { } }
public native void munmap(long address, long byteCount) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
public void lchown(java.lang.String path, int uid, int gid) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { os.lchown(path, uid, gid); }
private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException { java.io.ObjectInputStream.GetField fields = stream.readFields(); final int serialVersionOnStream = fields.get("serialVersionOnStream", 0); currencySymbol = ((java.lang.String) (fields.get("currencySymbol", ""))); setDecimalSeparator(fields.get("decimalSeparator", '.')); setDigit(fields.get("digit", '#')); setGroupingSeparator(fields.get("groupingSeparator", ',')); infinity = ((java.lang.String) (fields.get("infinity", ""))); intlCurrencySymbol = ((java.lang.String) (fields.get("intlCurrencySymbol", ""))); <START_MOD>final java.lang.String minusSignStr = ((java.lang.String) (fields.get("minusSignStr", null))); if (minusSignStr != null) { minusSign = minusSignStr; } else { <END_MOD>setMinusSign(fields.get("minusSign", '-')); <START_MOD>} <END_MOD>NaN = ((java.lang.String) (fields.get("NaN", ""))); setPatternSeparator(fields.get("patternSeparator", ';')); <START_MOD>final java.lang.String percentStr = ((java.lang.String) (fields.get("percentStr", null))); if (percentStr != null) { percent = percentStr; } else { <END_MOD>setPercent(fields.get("percent", '%')); <START_MOD>} <END_MOD>setPerMill(fields.get("perMill", '‰')); setZeroDigit(fields.get("zeroDigit", '0')); locale = ((java.util.Locale) (fields.get("locale", null))); if (serialVersionOnStream == 0) { setMonetaryDecimalSeparator(getDecimalSeparator()); } else { setMonetaryDecimalSeparator(fields.get("monetarySeparator", '.')); } if (serialVersionOnStream == 0) { exponentSeparator = "E"; } else if (serialVersionOnStream < 3) { setExponentSeparator(java.lang.String.valueOf(fields.get("exponential", 'E'))); } else { setExponentSeparator(((java.lang.String) (fields.get("exponentialSeparator", "E")))); } try { currency = java.util.Currency.getInstance(intlCurrencySymbol); } catch (java.lang.IllegalArgumentException e) { currency = null; } }
private static int getCallFeatures(int videoState, boolean isPulledCall, boolean isStoreHd<START_MOD>, boolean isRtt<END_MOD>) { int features = 0; if (android.telecom.VideoProfile.isVideo(videoState)) { features |= android.provider.CallLog.Calls.FEATURES_VIDEO; } if (isPulledCall) { features |= android.provider.CallLog.Calls.FEATURES_PULLED_EXTERNALLY; } if (isStoreHd) { features |= android.provider.CallLog.Calls.FEATURES_HD_CALL; } <START_MOD>if (isRtt) { features |= android.provider.CallLog.Calls.FEATURES_RTT; } <END_MOD>return features; }
@org.junit.Test<START_MOD> @java.lang.Runtime<END_MOD> public void testDefaultMethod007() throws java.lang.Exception { run(DEFAULTMETHOD007); }
public void <START_MOD>test_SSLSocket_getSupportedCipherSuitesReturnsCopies<END_MOD>() throws java.lang.Exception { javax.net.ssl.SSLSocketFactory sf = ((javax.net.ssl.SSLSocketFactory) (javax.net.ssl.SSLSocketFactory.getDefault())); javax.net.ssl.SSLSocket ssl = ((javax.net.ssl.SSLSocket) (sf.createSocket())); <START_MOD>assertNotSame(<END_MOD>ssl.getSupportedCipherSuites(), ssl.getSupportedCipherSuites()); }
@javax.annotation.Nonnull private static com.android.jack.backend.jayce.JayceFileImporter getJayceFileImporter(@javax.annotation.Nonnull java.util.List<java.io.File> jayceImport, @javax.annotation.Nonnull com.android.jack.ir.ast.JPackage rootPackage, @javax.annotation.Nonnull com.android.jack.lookup.JPhantomLookup phantomLookup, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks) throws com.android.jack.JackFileException { java.util.List<com.android.<START_MOD>jack.library.JackLibrary<END_MOD>> <START_MOD>jackLibrariesToImport<END_MOD> = new java.util.ArrayList<com.android.<START_MOD>jack.library.JackLibrary<END_MOD>>(jayceImport.size()); com.android.sched.util.config.ReflectFactory<com.android.jack.jayce.JaycePackageLoader> factory = com.android.sched.util.config.ThreadConfig.get(com.android.jack.Jack.IMPORT_POLICY); for (final java.io.File jackFile : jayceImport) { try { com.android.sched.vfs.<START_MOD>InputRootVDir<END_MOD> vDir = com.android.jack.Jack.wrapAsVDir(jackFile, hooks); <START_MOD>com.android.jack.library.JackLibrary jackLibrary = new com.android.jack.library.JackLibrary(vDir); jackLibrariesToImport<END_MOD>.add(<START_MOD>jackLibrary<END_MOD>); com.android.jack.jayce.JaycePackageLoader rootPLoader = factory.create(<START_MOD>jackLibrary<END_MOD>, phantomLookup); rootPackage.addLoader(rootPLoader); } catch (java.io.IOException ioException) { throw new com.android.jack.JackFileException(( importing jack container:   + (ioException.getMessage())), ioException); } } return new com.android.jack.backend.jayce.JayceFileImporter(<START_MOD>jackLibrariesToImport<END_MOD>); }
<START_MOD>private java.lang.String getServiceCompletionStatus(int serviceId) { java.io.File resultFile = new java.io.File(targetFilesDir, ("Service" + serviceId)); if (!(resultFile.isFile())) { return ("Service" + serviceId) + " never completed."; } if ((resultFile.length()) != 8) { return ("Service" + serviceId) + " was restarted."; } return com.android.framework.multidexlegacytestservices.test2.ServicesTests.COMPLETION_SUCCESS; }<END_MOD>
@org.junit.Test public void mul_double() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(MUL_DOUBLE).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), <START_MOD>"jack/jack-tests/src/com/android/jack/DxTestCase.java"<END_MOD>)).compileAndRunTest(); }
<START_MOD>public void copyTextFile(@com.android.annotations.Nullable com.android.tools.gradle.eclipse.ImportModule module, @com.android.annotations.NonNull java.io.File source, @com.android.annotations.NonNull java.io.File dest) throws java.io.IOException { assert com.android.tools.gradle.eclipse.GradleImport.isTextFile(source) : source; java.nio.charset.Charset encoding = null; if (module != null) { encoding = module.getFileEncoding(source); if (encoding != null) { com.android.tools.gradle.eclipse.GradleImport.copyTextFileWithEncoding(source, dest, encoding); return; } encoding = module.getProjectEncoding(source); } if (encoding == null) { encoding = getEncodingFromWorkspaceSetting(); } if (com.android.utils.SdkUtils.endsWithIgnoreCase(source.getPath(), com.android.SdkConstants.DOT_XML)) { java.lang.String defaultCharset = (encoding != null) ? encoding.name() : com.android.SdkConstants.UTF_8; java.lang.String xml = com.android.utils.PositionXmlParser.getXmlString(com.google.common.io.Files.toByteArray(source), defaultCharset); com.google.common.io.Files.write(xml, dest, Charsets.UTF_8); } else if (encoding != null) { com.android.tools.gradle.eclipse.GradleImport.copyTextFileWithEncoding(source, dest, encoding); } else { com.google.common.io.Files.copy(source, dest); } }<END_MOD>
@java.lang.Override public void setCallWaiting(boolean enable, int serviceClass, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_SET_CALL_WAITING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) +   enable =   + enable) +   serviceClass =   + serviceClass)); } try { radioProxy.setCallWaiting(rr.mSerial, enable, serviceClass); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCallWaiting", e); } } }
<START_MOD>@com.android.annotations.NonNull public com.android.ide.common.process.JavaProcessInfo createJavaProcess() { if ((mClasspath) == null) { throw new java.lang.IllegalStateException("classpath is missing"); } if ((mMain) == null) { throw new java.lang.IllegalStateException("main class is missing"); } return new com.android.ide.common.process.ProcessInfoBuilder.JavaProcessInfoImpl(mClasspath, mMain, com.google.common.collect.ImmutableList.copyOf(mArgs), com.google.common.collect.ImmutableMap.copyOf(mEnvironment), com.google.common.collect.ImmutableList.copyOf(mJvmArgs)); }<END_MOD>
<START_MOD>public void addState(com.android.sdklib.devices.Device.State state) { mState.add(state); }<END_MOD>
@java.lang.Override public void run() { getActivity().runOnUiThread(new java.lang.Runnable() { @java.lang.Override public void run() { android.app.NotificationManager notificationManager = ((android.app.NotificationManager) (getActivity().getSystemService(Service.NOTIFICATION_SERVICE))); notificationManager.notify(notificationId, notification); <START_MOD>notificationManager.cancel(notificationId); <END_MOD>getActivity().finish(); } }); }
@java.lang.Override public void handleChunk(com.android.ddmlib.Client client, int type, java.nio.ByteBuffer data, boolean isReply, int msgId) { <START_MOD>java.lang.System.out.println( handled chunk <END_MOD>}
<START_MOD>@java.lang.Override @javax.annotation.Nonnull public com.android.jack.test.toolchain.JackApiBrestToolchain build() { return new com.android.jack.test.toolchain.JackApiBrestToolchain(com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt("jack")); }<END_MOD>
private void addDexFolder(@com.android.annotations.NonNull java.io.File dexFolder) throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SealedPackageException { java.io.File[] files = dexFolder.listFiles(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File file, java.lang.String name) { return name.endsWith(SdkConstants.DOT_DEX); } }); if ((files != null) && ((files.length) > 0)) { for (java.io.File file : files) { addFile(file, <START_MOD>generateDexName<END_MOD>()); } } }
@org.junit.Test public void testLamba007() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA007).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
<START_MOD>private static void createAssembleTask(@com.android.annotations.NonNull org.gradle.model.ModelMap<org.gradle.api.Task> tasks, @com.android.annotations.NonNull final org.gradle.api.Named dimension) { java.lang.String taskName = com.android.build.gradle.model.StandaloneNdkComponentModelPlugin.Rules.getAssembleTaskName(dimension); tasks.create(taskName, new org.gradle.api.Action<org.gradle.api.Task>() { @java.lang.Override public void execute(org.gradle.api.Task task) { task.setDescription((("Assembles all " + (dimension.getName())) + " builds.")); task.setGroup(BasePlugin.BUILD_GROUP); } }); }<END_MOD>
<START_MOD>@java.lang.Override public void onMusicCatalogReady(boolean success) { android.util.Log.d(com.android.music.MediaPlaybackService.TAG, ("Received catalog result, success: " + (java.lang.String.valueOf(success)))); if (success) { loadChildrenImpl(parentMediaId, result); } else { result.sendResult(java.util.Collections.emptyList()); } }<END_MOD>
@java.lang.Override public void mkfifo(java.lang.String path, int mode) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.mkfifo(path, mode); }
private void addMetaToOutputJackLib(<START_MOD>@javax.annotation.Nonnull <END_MOD>com.android.jack.meta.Meta meta, <START_MOD>@javax.annotation.Nonnull <END_MOD>com.android.jack.library.OutputJackLibrary ojl) throws java.io.IOException { com.android.sched.vfs.InputVFile inputFile = meta.getVFile(); com.android.sched.vfs.VPath path = meta.getPath(); com.android.sched.vfs.OutputVFile outputFile = ojl.createFile(FileType.JPP, path); java.io.InputStream is = null; try { is = inputFile.getInputStream(); com.android.sched.util.stream.ByteStreamSucker sucker = new com.android.sched.util.stream.ByteStreamSucker(is, outputFile.getOutputStream(), true); sucker.suck(); } finally { if (is != null) { is.close(); } } }
public com.android.builder.DefaultBuildType initWith(com.android.builder.DefaultBuildType that) { _initWith(that); setDebuggable(that.isDebuggable<START_MOD>()); setInstrumented(that.isInstrumented<END_MOD>()); setJniDebugBuild(that.isJniDebugBuild()); setRenderscriptDebugBuild(that.isRenderscriptDebugBuild()); setRenderscriptOptimLevel(that.getRenderscriptOptimLevel()); setPackageNameSuffix(that.getPackageNameSuffix()); setVersionNameSuffix(that.getVersionNameSuffix()); setRunProguard(that.isRunProguard()); setZipAlign(that.isZipAlign()); setSigningConfig(that.getSigningConfig()); return this; }
@java.lang.Override public void processLibrary(java.lang.String libRootPath) {<START_MOD> java.lang.System.out.println((   + libRootPath));<END_MOD> mJars.add(new java.io.File(((((libRootPath + "/") + (com.android.sdklib.SdkConstants.FD_OUTPUT)) + "/") + (com.android.sdklib.SdkConstants.FN_CLASSES_JAR)))); java.io.File libsFolder = new java.io.File(libRootPath, com.android.sdklib.SdkConstants.FD_NATIVE_LIBS); java.io.File[] jarFiles = libsFolder.listFiles(mFilter); if (jarFiles != null) { for (java.io.File jarFile : jarFiles) { <START_MOD>java.lang.System.out.println(("\t" + jarFile)); <END_MOD>mJars.add(jarFile); } } }
com.android.server.wifi.WifiConnectivityManager createConnectivityManager() { return new com.android.server.wifi.WifiConnectivityManager(mContext, mWifiStateMachine, mWifiScanner, mWifiConfigManager, mWifiInfo, mWifiNS, <START_MOD>mNetworkScoreManager, <END_MOD>mScoreCache, mWifiLastResortWatchdog, mWifiMetrics, mLooper.getLooper(), mClock, true<START_MOD>, mFrameworkFacade<END_MOD>); }
<START_MOD>static byte[] computeApkVerityDigest(com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd) throws java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.util.VerityTreeBuilder builder = new com.android.apksig.internal.util.VerityTreeBuilder(new byte[]{ 0, 0, 0, 0, 0, 0, 0, 0 }); return builder.generateVerityTreeRootHash(beforeCentralDir, centralDir, eocd); }<END_MOD>
<START_MOD>@org.junit.Test public void testListenForPhoneState_MultiDevice_AllUpAllDown() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); android.bluetooth.BluetoothDevice device2 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 2); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF); mHeadsetPhoneState.listenForPhoneState(device2, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verifyNoMoreInteractions(mTelephonyManager); mHeadsetPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_NONE); verifyNoMoreInteractions(mTelephonyManager); mHeadsetPhoneState.listenForPhoneState(device2, PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).listen(any(), PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_NORMAL); verifyNoMoreInteractions(mTelephonyManager); }<END_MOD>
@java.lang.Override public com.android.server.wifi.LogMessage trace(java.lang.String format) { return makeLogMessage(Log.<START_MOD>VERBOSE<END_MOD>, format); }
public void testEnableCameraInManagedProfile() throws java.lang.Exception { mDevicePolicyManager.setCameraDisabled(mManagedProfileAdminComponent, false); assertFalse(mDevicePolicyManager.getCameraDisabled(mManagedProfileAdminComponent)); assertFalse(mDevicePolicyManager.getCameraDisabled(null)); <START_MOD>waitUntilCameraPolicyEnforced(true); <END_MOD>checkCanOpenCamera(true); }
public boolean apply(boolean isSecondaryIcon) { if ((mMobileVisible) && (!(mIsAirplaneMode))) { if ((mLastMobileStrengthId) != (mMobileStrengthId)) { updateAnimatableIcon(mMobile, mMobileStrengthId); updateAnimatableIcon(mMobileDark, mMobileStrengthId); mLastMobileStrengthId = mMobileStrengthId; } if ((mLastMobileTypeId) != (mMobileTypeId)) { mMobileType.setImageResource(mMobileTypeId); mLastMobileTypeId = mMobileTypeId; } <START_MOD>if ((mLastMobileActivityId) != (mMobileActivityId)) { mMobileActivity.setImageResource(mMobileActivityId); mLastMobileActivityId = mMobileActivityId; } <END_MOD>mMobileGroup.setContentDescription((((mMobileTypeDescription) +     + (mMobileDescription))); mMobileGroup.setVisibility(View.VISIBLE); } else { mMobileGroup.setVisibility(View.GONE); } mMobileGroup.setPaddingRelative((isSecondaryIcon ? mSecondaryTelephonyPadding : 0), 0, 0, 0); mMobile.setPaddingRelative((mIsMobileTypeIconWide ? mWideTypeIconStartPadding : mMobileDataIconStartPadding), 0, 0, 0); mMobileDark<START_MOD>.setPaddingRelative((mIsMobileTypeIconWide ? mWideTypeIconStartPadding : mMobileDataIconStartPadding), 0, 0, 0); mMobileActivity<END_MOD>.setPaddingRelative((mIsMobileTypeIconWide ? mWideTypeIconStartPadding : mMobileDataIconStartPadding), 0, 0, 0); if (com.android.systemui.statusbar.SignalClusterView.DEBUG) android.util.Log.d(com.android.systemui.statusbar.SignalClusterView.TAG, java.lang.String.format( %s sig=%d typ=%d (mMobileVisible ? "VISIBLE" : "GONE"), mMobileStrengthId, mMobileTypeId)); mMobileType.setVisibility(((mMobileTypeId) !=   ? android.view.View.VISIBLE : android.view.View.GONE)); <START_MOD>mMobileActivity.setVisibility(((mMobileActivityId) !=   ? android.view.View.VISIBLE : android.view.View.GONE)); <END_MOD>return mMobileVisible; }
@java.lang.Override public void <START_MOD>onRegistered<END_MOD>(int imsRadioTech) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log( :: } synchronized(<START_MOD>mRegistrationCallbacks<END_MOD>) { <START_MOD>mRegistrationCallbacks<END_MOD>.forEach(( l) -> l.<START_MOD>onRegistered<END_MOD>(imsRadioTech)); } }
private void applyLidSwitchState() { if (((mLidState) == (android.view.WindowManagerPolicy.WindowManagerFuncs.LID_CLOSED)) && (mLidControlsSleep)) { mPowerManager.goToSleep(android.os.SystemClock.uptimeMillis(), PowerManager.GO_TO_SLEEP_REASON_LID_SWITCH, PowerManager.GO_TO_SLEEP_FLAG_NO_DOZE); } <START_MOD>else if (((mLidState) == (android.view.WindowManagerPolicy.WindowManagerFuncs.LID_CLOSED)) && (mLidControlsScreenLock)) { try { mWindowManager.lockNow(null); } catch (android.os.RemoteException e) { } } <END_MOD>synchronized(mLock) { updateWakeGestureListenerLp(); } }
public void testConstructor_NullEndDate_Failure() throws java.lang.Exception { <START_MOD>android.security.KeyPairGeneratorSpec<END_MOD> <START_MOD>spec =<END_MOD> new android.security.KeyPairGeneratorSpec(getContext(), android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1, "RSA", 1024, null, android.security.KeyPairGeneratorSpecTest.TEST_DN_1, android.security.KeyPairGeneratorSpecTest.SERIAL_1, android.security.KeyPairGeneratorSpecTest.NOW, null, 0); <START_MOD>assertEquals<END_MOD>(<START_MOD>android.security.KeyPairGeneratorSpecTest.DEFAULT_CERT_NOT_AFTER,<END_MOD> <START_MOD>spec.getEndDate());<END_MOD> }
<START_MOD>private void checkPownFloat2Int2() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inY, 35, (-500), 400); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testPownFloat2Int2(inX, out); verifyResultsPownFloat2Int2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testPownFloat2Int2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testPownFloat2Int2(inX, out); verifyResultsPownFloat2Int2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testPownFloat2Int2: " + (e.toString()))); } }<END_MOD>
<START_MOD>private com.android.server.connectivity.tethering.IControlsTethering makeControlCallback(java.lang.String ifname) { return new com.android.server.connectivity.tethering.IControlsTethering() { private final java.lang.String mIfName = ifname; @java.lang.Override public void updateInterfaceState(com.android.server.connectivity.tethering.TetherInterfaceStateMachine who, int state, int lastError) { notifyInterfaceStateChange(mIfName, who, state, lastError); } @java.lang.Override public void updateLinkProperties(com.android.server.connectivity.tethering.TetherInterfaceStateMachine who, android.net.LinkProperties newLp) { notifyLinkPropertiesChanged(mIfName, who, newLp); } }; }<END_MOD>
@java.lang.Override public void crunchPng(@com.android.annotations.NonNull final java.io.File from, @com.android.annotations.NonNull final java.io.File to) throws com.android.ide.common.internal.<START_MOD>PngException { try<END_MOD> { final com.android.builder.tasks.Job<com.android.builder.png.AaptProcess> aaptProcessJob = new com.android.builder.tasks.Job<com.android.builder.png.AaptProcess>((   + (from.getName())), new com.android.builder.tasks.Task<com.android.builder.png.AaptProcess>() { @java.lang.Override public void run(com.android.builder.tasks.Job<com.android.builder.png.AaptProcess> job, com.android.builder.tasks.JobContext<com.android.builder.png.AaptProcess> context) throws java.io.IOException { mLogger.verbose( begin executing job %2$s java.lang.Thread.currentThread().getName(), job.getJobTitle()); context.getPayload().crunch(from, to, job); mLogger.verbose( done executing job %2$s java.lang.Thread.currentThread().getName(), job.getJobTitle()); } }); mOutstandingJobs.add(aaptProcessJob); mCrunchingRequests.push(aaptProcessJob); }<START_MOD> catch (java.lang.InterruptedException e) { throw new com.android.ide.common.internal.PngException(e); } }<END_MOD>
private void createParameters(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method, @javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration x, @javax.annotation.Nonnull com.android.jack.ir.impl.CudInfo cuInfo) throws com.android.jack.ir.ast.JTypeLookupException { if ((x.arguments) != null) { for (org.eclipse.jdt.internal.compiler.ast.Argument argument : x.arguments) { com.android.jack.ir.sourceinfo.SourceInfo info = com.android.jack.ir.impl.ReferenceMapper.makeSourceInfo(cuInfo, argument, sourceInfoFactory); org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding binding = argument.binding; createParameter(info, method, com.android.jack.ir.impl.ReferenceMapper.intern(binding.name), binding.type, <START_MOD>getFinalModifier<END_MOD>(binding)); } } }
public boolean mkdirs() { if (exists()) { return false; } if (mkdir()) { return true; } <START_MOD>makeParentDirectories<END_MOD>(); return mkdir(); }
private android.<START_MOD>renderscript<END_MOD>.Long4 pack_l4(long[] val) { assert (val.length) == 4; return new android.<START_MOD>renderscript<END_MOD>.Long4(val[0], val[1], val[2], val[3]); }
<START_MOD>void update(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint pos);<END_MOD>
@org.junit.Before public void setUp() throws java.lang.Exception { mTelephonyManager = ((android.telephony.TelephonyManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.TELEPHONY_SERVICE))); android.telephony.cts.TelephonyManagerTest.mCm = ((android.net.ConnectivityManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); mPackageManager = android.telephony.cts.TelephonyManagerTest.getContext().getPackageManager(); <START_MOD>mNetworkScanStatus = android.telephony.cts.TelephonyManagerTest.EVENT_NETWORK_SCAN_COMPLETED; mTestHandlerThread = new android.telephony.cts.TelephonyManagerTest.NetworkScanHandlerThread(android.telephony.cts.TelephonyManagerTest.TAG); mTestHandlerThread.start(); <END_MOD>}
public void test_EncodeLjava_nio_CharBuffer() throws java.lang.Exception { org.apache.harmony.tests.java.nio.charset.CharsetEncoderTest.MockMalfunctionCharset cs = new org.apache.harmony.tests.java.nio.charset.CharsetEncoderTest.MockMalfunctionCharset("mock", null); try { cs.encode(java.nio.CharBuffer.wrap("AB")); fail( throw CoderMalfunctionError } catch (java.nio.charset.CoderMalfunctionError e) { } }
<START_MOD>public java.util.List<? extends com.android.build.gradle.integration.common.fixture.app.GradleModule> getProjectDeps() { return projectDeps; }<END_MOD>
private void onDiscoverServicesResult(java.lang.String deviceObjectPath, boolean result) { java.lang.String address = mBluetoothService.getAddressFromObjectPath(deviceObjectPath); if (result) { mBluetoothService.updateRemoteDevicePropertiesCache(address); } <START_MOD>if (address != null) { <END_MOD>mBluetoothService.sendUuidIntent(address);<START_MOD> }<END_MOD> mBluetoothService.makeServiceChannelCallbacks(address); }
<START_MOD>public android.service.euicc.EuiccProfileInfo build() { if ((iccid) == null) { throw new java.lang.IllegalStateException("ICCID must be set for a profile."); } return new android.service.euicc.EuiccProfileInfo(iccid, accessRules, nickname, serviceProviderName, profileName, profileClass, state, operatorId, policyRules); }<END_MOD>
<START_MOD>@org.junit.Test public void test() throws java.lang.Throwable { int resultInvokeCustomFromField = ((int) (com.android.jack.java7.invokecustom.test003.Tests.InvokeCustomFromMethodLinker().invokeExact(1, 2, 3, 4, 5, 6))); junit.framework.Assert.assertEquals(21, resultInvokeCustomFromField); }<END_MOD>
<START_MOD>@java.lang.Override public void processLibrary(java.lang.String libRootPath, com.android.sdklib.internal.project.IPropertySource properties) { java.lang.StringBuilder sb = new java.lang.StringBuilder(libRootPath); for (java.lang.String segment : mLeafSegments) { sb.append('/'); java.util.regex.Matcher m = com.android.ant.GetLibraryPathTask.LeafProcessor.PH.matcher(segment); if (m.matches()) { java.lang.String value = properties.getProperty(m.group(1)); if (value == null) { value = com.android.ant.TaskHelper.getDefault(m.group(1)); } if (value == null) { throw new org.apache.tools.ant.BuildException(((("Failed to resolve '" + (m.group(1))) + "' for project ") + libRootPath)); } sb.append(value); } else { sb.append(segment); } } java.lang.System.out.println((">>>> DEBUG: " + (sb.toString()))); org.apache.tools.ant.types.Path.PathElement element = mPath.createPathElement(); element.setPath(sb.toString()); }<END_MOD>
@org.junit.After public void tearDown() throws java.lang.Exception { if ((mListener) != null) { mTelephonyManager.listen(mListener, PhoneStateListener.LISTEN_NONE); } <START_MOD>mTestHandlerThread.quit(); <END_MOD>}
<START_MOD>private void handleSetCdmaSubscriptionMode(android.os.Message msg) { mPhone = com.android.internal.telephony.PhoneFactory.getDefaultPhone(); android.os.AsyncResult ar = ((android.os.AsyncResult) (msg.obj)); if ((ar.exception) == null) { int cdmaSubscriptionMode = java.lang.Integer.valueOf(getValue()).intValue(); android.provider.Settings.Secure.putInt(mPhone.getContext().getContentResolver(), Secure.CDMA_SUBSCRIPTION_MODE, cdmaSubscriptionMode); } else { android.util.Log.e(com.android.phone.CdmaSubscriptionListPreference.LOG_TAG, "Setting Cdma subscription source failed"); } }<END_MOD>
<START_MOD>public void setAdditionalParameters(java.lang.String param) { additionalParameters = java.util.Collections.singletonList(param); }<END_MOD>
public void testMaxLengthComment() throws java.lang.Exception { java.lang.String maxLengthComment = libcore.java.util.zip.ZipEntryTest.makeString(65535, "z"); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(<START_MOD>mFile<END_MOD>); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setComment(maxLengthComment); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(<START_MOD>mFile<END_MOD>); assertEquals(maxLengthComment, zipFile.getEntry("x").getComment()); zipFile.close(); }
public native void ftruncate(java.io.FileDescriptor fd, long length) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
public void test_init_List_null() { try { new javax.net.ssl.KeyStoreBuilderParameters(((java.util.List) (null))); <START_MOD>fail( have thrown <END_MOD>} catch (java.lang.NullPointerException expected) { } }
<START_MOD>@com.android.annotations.VisibleForTesting(visibility = com.android.annotations.VisibleForTesting.Visibility.PRIVATE) protected com.android.sdkuilib.internal.repository.SettingsController initSettingsController() { com.android.sdkuilib.internal.repository.SettingsController settingsController = new com.android.sdkuilib.internal.repository.SettingsController(mSdkLog); settingsController.registerOnChangedListener(new com.android.sdkuilib.internal.repository.SettingsController.OnChangedListener() { @java.lang.Override public void onSettingsChanged(com.android.sdkuilib.internal.repository.SettingsController controller, com.android.sdkuilib.internal.repository.SettingsController.Settings oldSettings) { if ((mDownloadCache) != null) { if ((controller.getSettings().getUseDownloadCache()) && ((mDownloadCache.getStrategy()) != (DownloadCache.Strategy.FRESH_CACHE))) { mDownloadCache = null; } else if ((!(controller.getSettings().getUseDownloadCache())) && ((mDownloadCache.getStrategy()) != (DownloadCache.Strategy.DIRECT))) { mDownloadCache = null; } } if (((oldSettings.getForceHttp()) != (controller.getSettings().getForceHttp())) || ((oldSettings.getEnablePreviews()) != (controller.getSettings().getEnablePreviews()))) { refreshSources(false); } } }); return settingsController; }<END_MOD>
@android.support.annotation.VisibleForTesting synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((((( unexpected invocation. device= + device) +   fromState= + fromState) +   toState= + toState)); return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { setActiveDevice(device); <START_MOD>com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEARING_AID); <END_MOD>} if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (getConnectedDevices().isEmpty())) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (device +   is unbond. Remove state machine } removeStateMachine(device); } } }
<START_MOD>public void setLocalAddress(java.net.InetAddress localAddress) { mLocalAddress = localAddress; }<END_MOD>
public void test1_0BandLevel() throws java.lang.Exception { getEqualizer(<START_MOD>1); try { short numBands = mEqualizer.getNumberOfBands(); assertTrue( enough bands (numBands >= (android.media.cts.EqualizerTest.MIN_NUMBER_OF_BANDS))); short[] levelRange = mEqualizer.getBandLevelRange(); assertTrue( level too high ((levelRange[<END_MOD>0<START_MOD>]) <= (android.media.cts.EqualizerTest.MAX_LEVEL_RANGE_LOW))); assertTrue( level too low ((levelRange[1]) >= (android.media.cts.EqualizerTest.MIN_LEVEL_RANGE_HIGH))); mEqualizer.setBandLevel(((short) (0)), levelRange[1]); short level<END_MOD> = mEqualizer.<START_MOD>getBandLevel(((short) (0))<END_MOD>); assertTrue( <START_MOD>failed ((level<END_MOD> >= (<START_MOD>(levelRange[1]) - (android.media.cts.EqualizerTest.TOLERANCE))) && (level<END_MOD> <= (<START_MOD>(levelRange[1]) +<END_MOD> (android.media.cts.EqualizerTest.TOLERANCE))))); } catch (java.lang.IllegalArgumentException e) { fail( parameter value } catch (java.lang.UnsupportedOperationException e) { fail( parameter() rejected } catch (java.lang.IllegalStateException e) { fail( parameter() called in wrong state } finally { releaseEqualizer(); } }
@android.test.suitebuilder.annotation.MediumTest public void testJavaStrings() { assertEquals(<START_MOD>"SUCCESS-APP", <END_MOD>mAppTextView2.getText()); assertEquals(<START_MOD>"SUCCESS-LIB1", <END_MOD>mLib1TextView2.getText()); assertEquals(<START_MOD>"SUCCESS-LIB2", <END_MOD>mLib2TextView2.getText()); assertEquals(<START_MOD>"SUCCESS-LIB2b", <END_MOD>mLib2bTextView2.getText()); assertEquals(<START_MOD>"SUCCESS-LIBAPP", <END_MOD>mLibappTextView2.getText()); }
<START_MOD>@org.junit.Test public void test001_zip() throws java.lang.Exception { java.io.File testRootDir = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir("com.android.jack.sourcepath.test001"); java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> exclude = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(); exclude.add(com.android.jack.test.toolchain.JillBasedToolchain.class); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class, exclude); java.io.File testOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); toolchain.addProperty(Options.SOURCE_PATH.getName(), new java.io.File(new java.io.File(testRootDir, "lib"), "sourcepath001lib.zip").getPath()).addToClasspath(toolchain.getDefaultBootClasspath()).srcToLib(testOut, false, new java.io.File(testRootDir, "jack")); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(testOut); libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath("com/android/jack/sourcepath/test001/lib/Sourcepath001Lib", '/')); try { libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath("com/android/jack/sourcepath/test001/lib/Sourcepath001UnusedLib", '/')); org.junit.Assert.fail(); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { } }<END_MOD>
public int read(java.nio.ByteBuffer buf) throws java.io.IOException { if (buf == null) throw new java.lang.NullPointerException(); synchronized(readLock) { if (!(ensureReadOpen())) return -1; java.lang.Object traceContext = null; if (isBlocking()) { traceContext = sun.misc.IoTrace.socketReadBegin(); } int n = 0; try { begin(); synchronized(stateLock) { if (!(isOpen())) { return 0; } readerThread = sun.nio.ch.NativeThread.current(); } <START_MOD>dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); <END_MOD>for (; ;) { n = sun.nio.ch.IOUtil.read(fd, buf, (-1), sun.nio.ch.SocketChannelImpl.nd); if ((n == (sun.nio.ch.IOStatus.INTERRUPTED)) && (isOpen())) { continue; } return sun.nio.ch.IOStatus.normalize(n); } } finally { readerCleanup(); if (isBlocking()) { sun.misc.IoTrace.socketReadEnd(traceContext, remoteAddress.getAddress(), remoteAddress.getPort(), 0, (n >   ? n : 0)); } end(((n > 0) || (n == (sun.nio.ch.IOStatus.UNAVAILABLE)))); synchronized(stateLock) { if ((n <= 0) && (!(isInputOpen))) return sun.nio.ch.IOStatus.EOF; } assert sun.nio.ch.IOStatus.check(n); } } }
<START_MOD>@java.lang.Override public boolean isPrivate(@com.android.annotations.NonNull com.android.resources.ResourceType type, @com.android.annotations.NonNull java.lang.String name) { for (int i = 0, n = mRepositories.size(); i < n; i++) { if (mRepositories.get(i).isPrivate(type, name)) { return true; } } return false; }<END_MOD>
@android.test.suitebuilder.annotation.LargeTest <START_MOD>@org.junit.Test <END_MOD>public void <START_MOD>injectMotionEvent_upEventFailure<END_MOD>() throws java.lang.InterruptedException { final java.util.concurrent.CountDownLatch activityStarted = new java.util.concurrent.CountDownLatch(1); android.support.test.runner.lifecycle.ActivityLifecycleCallback callback = new android.support.test.runner.lifecycle.ActivityLifecycleCallback() { @java.lang.Override public void onActivityLifecycleChanged(android.app.Activity activity, android.support.test.runner.lifecycle.Stage stage) { if (((android.support.test.runner.lifecycle.Stage.RESUMED) == stage) && (activity instanceof android.support.test.testapp.SendActivity)) { activityStarted.countDown(); } } }; android.support.test.runner.lifecycle.ActivityLifecycleMonitorRegistry.getInstance().addLifecycleCallback(callback); try { <START_MOD>rule.launchActivity(null<END_MOD>); assertTrue(activityStarted.await(20, java.util.concurrent.TimeUnit.SECONDS)); final int[] xy = android.support.test.espresso.base.UiControllerImplIntegrationTest.getCoordinatesInMiddleOfSendButton(<START_MOD>rule.<END_MOD>getActivity(), <START_MOD>android.support.test.InstrumentationRegistry.<END_MOD>getInstrumentation()); <START_MOD>android.support.test.InstrumentationRegistry.<END_MOD>getInstrumentation().runOnMainSync(new java.lang.Runnable() { @java.lang.Override public void run() { android.view.MotionEvent up = android.view.MotionEvent.obtain(android.os.SystemClock.uptimeMillis(), android.os.SystemClock.uptimeMillis(), MotionEvent.ACTION_UP, xy[0], xy[1], 0); try { injectEventWorked.set(injector.injectMotionEvent(up)); } catch (android.support.test.espresso.InjectEventSecurityException e) { android.util.Log.e(android.support.test.espresso.base.EventInjectorTest.TAG,   threw a SecurityException } up.recycle(); latch.countDown(); } }); latch.await(10, java.util.concurrent.TimeUnit.SECONDS); assertFalse(injectEventWorked.get()); } finally { android.support.test.runner.lifecycle.ActivityLifecycleMonitorRegistry.getInstance().removeLifecycleCallback(callback); } }
@android.annotation.NonNull com.android.bluetooth.avrcp.Metadata getCurrentSongInfo() { final com.android.bluetooth.avrcp.MediaPlayerWrapper player = getActivePlayer(); if (player == null) return com.android.bluetooth.avrcp.Util.empty_data(); <START_MOD>if (!(getCurrentMediaId().equals(""))) { for (com.android.bluetooth.avrcp.Metadata data : getNowPlayingList()) { if (data.mediaId.equals(getCurrentMediaId())) { return data.clone(); } } } <END_MOD>return player.getCurrentMetadata(); }
<START_MOD>public void setMethods(java.util.List<com.android.jack.jayce.v0002.nodes.NMethod> methods) { this.methods = new java.util.HashMap<java.lang.String, com.android.jack.jayce.v0002.nodes.NMethod>(((methods.size()) + 1), 1.0F); for (com.android.jack.jayce.v0002.nodes.NMethod nMethod : methods) { assert (nMethod.getName()) != null; java.lang.StringBuilder builder = new java.lang.StringBuilder(nMethod.getName()).append('('); for (com.android.jack.jayce.v0002.nodes.NParameter param : nMethod.getParameters()) { assert (param.type) != null; builder.append(param.type); } assert (nMethod.returnType) != null; builder.append(')').append(nMethod.returnType); java.lang.String id = builder.toString(); this.methods.put(id, nMethod); nMethod.setId(id); } }<END_MOD>
<START_MOD>@java.lang.Override public void sendTo(byte[] data, java.net.InetAddress dstAddr, int port) throws java.io.IOException { mSocket.send(new java.net.DatagramPacket(data, data.length, dstAddr, port)); }<END_MOD>
<START_MOD>@com.android.annotations.NonNull java.util.Collection<java.lang.String> getSourceProviders();<END_MOD>
<START_MOD>@java.lang.Override @javax.annotation.Nonnull com.android.sched.util.location.Location getVFileLocation(@javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent, @javax.annotation.Nonnull java.lang.String name) { return null; }<END_MOD>
<START_MOD>public static void addRequestResponsePair(android.telecom.Logging.Events.TimedEventPair p) { android.telecom.Log.getEvents().addRequestResponsePair(p); }<END_MOD>
<START_MOD>public void setAbiBitness(java.lang.String bitness) { mAbiBitness = bitness; }<END_MOD>
@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.CstInsn)) { return false; } com.android.dx.dex.code.CstInsn ci = ((com.android.dx.dex.code.CstInsn) (insn)); int cpi = ci.getIndex(); com.android.dx.rop.cst.Constant cst = ci.getConstant(); if (!(unsignedFitsInShort(cpi))) { return false; } if (!((<START_MOD>(<END_MOD>cst instanceof com.android.dx.rop.cst.CstMethodRef) || (cst instanceof com.android.dx.rop.cst.CstType))<START_MOD> || (cst instanceof com.android.dx.rop.cst.CstInvokeDynamic))<END_MOD>) { return false; } com.android.dx.rop.code.RegisterSpecList regs = ci.getRegisters(); int sz = regs.size(); return ((regs.size()) == 0) || (((isRegListSequential(regs)) && (unsignedFitsInShort(regs.get(0).getReg()))) && (unsignedFitsInByte(regs.getWordCount()))); }
<START_MOD>public void supplyPin2(java.lang.String pin2, android.os.Message onComplete) { if ((mUiccApplication) != null) { mUiccApplication.supplyPin2(pin2, onComplete); } else if (onComplete != null) { java.lang.Exception e = new java.lang.RuntimeException("ICC card is absent."); android.os.AsyncResult.forMessage(onComplete).exception = e; onComplete.sendToTarget(); return; } }<END_MOD>
public long transferTo(long position, long count, java.nio.channels.WritableByteChannel target) throws java.io.IOException { checkOpen(); if (!(target.isOpen())) { throw new java.nio.channels.ClosedChannelException(); } checkReadable(); if (target instanceof java.nio.FileChannelImpl) { ((java.nio.FileChannelImpl) (target)).checkWritable(); } if ((position < 0) || (count < 0)) { throw new java.lang.IllegalArgumentException(((("position=" + position) +   count= + count)); } if ((count == 0) || (position >= (size()))) { return 0; } count = java.lang.Math.min(count, ((size()) - position)); boolean completed = false; if (target instanceof java.nio.SocketChannelImpl) { java.io.FileDescriptor outFd = ((java.nio.SocketChannelImpl) (target)).getFD(); try { begin(); try { <START_MOD>android<END_MOD>.util.MutableLong offset = new <START_MOD>android<END_MOD>.util.MutableLong(position); long rc = Libcore.os.sendfile(outFd, fd, offset, count); completed = true; return rc; } catch (<START_MOD>android.os<END_MOD>.ErrnoException errnoException) { if (((errnoException.errno) != (ENOSYS)) && ((errnoException.errno) != (EINVAL))) { throw errnoException.rethrowAsIOException(); } } } finally { end(completed); } } java.nio.ByteBuffer buffer = null; try { buffer = map(java.nio.channels.FileChannel.MapMode.READ_ONLY, position, count); return target.write(buffer); } finally { java.nio.NioUtils.freeDirectBuffer(buffer); } }
private synchronized com.android.se.security.ChannelAccess internal_setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag) <START_MOD>throws java.io.IOException <END_MOD>{ if ((packageName == null) || (packageName.isEmpty())) { throw new java.security.AccessControlException( names must be specified } try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw new java.security.AccessControlException( certificates are invalid or do not exist. } if (checkRefreshTag) { updateAccessRuleIfNeed(<START_MOD>true<END_MOD>); } return getAccessRule(aid, appCerts); } catch (java.<START_MOD>io.IOException e) { throw e; } catch (java.<END_MOD>lang.Throwable exp) { throw new java.security.AccessControlException(exp.getMessage()); } }
public void testSslFallback_defaultProtocols() throws java.lang.Exception { TestSSLContext testSSLContext = createDefaultTestSSLContext(); javax.net.ssl.SSLSocketFactory serverSocketFactory = testSSLContext.serverContext.getSocketFactory(); javax.net.ssl.SSLSocketFactory clientSocketFactoryDelegate = testSSLContext.clientContext.getSocketFactory(); <START_MOD>checkNoFallbackOnFailedHandshake<END_MOD>(serverSocketFactory, clientSocketFactoryDelegate); }
@java.lang.Override public <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.StructStatVfs statvfs(java.lang.String path) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onReadFromDisk(); return os.statvfs(path); }
<START_MOD>public synchronized void close() { com.android.ddmlib.EmulatorConsole.removeConsole(mPort); try { if ((mSocketChannel) != null) { mSocketChannel.close(); } mSocketChannel = null; mPort = -1; } catch (java.io.IOException e) { com.android.ddmlib.Log.w(com.android.ddmlib.EmulatorConsole.LOG_TAG, "Failed to close EmulatorConsole channel"); } }<END_MOD>
<START_MOD>private void checkLdexpFloat3Int() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inY, 35, (-500), 400); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testLdexpFloat3Int(inX, out); verifyResultsLdexpFloat3Int(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLdexpFloat3Int: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testLdexpFloat3Int(inX, out); verifyResultsLdexpFloat3Int(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLdexpFloat3Int: " + (e.toString()))); } }<END_MOD>
<START_MOD>private static void setInjectableValues(com.android.manifmerger.ManifestTask.Invoker<?> invoker, java.lang.String packageOverride, int versionCode, java.lang.String versionName, @com.android.annotations.Nullable java.lang.String minSdkVersion, @com.android.annotations.Nullable java.lang.String targetSdkVersion) { if (!(com.google.common.base.Strings.isNullOrEmpty(packageOverride))) { invoker.setOverride(SystemProperty.PACKAGE, packageOverride); } if (versionCode > 0) { invoker.setOverride(SystemProperty.VERSION_CODE, java.lang.String.valueOf(versionCode)); } if (!(com.google.common.base.Strings.isNullOrEmpty(versionName))) { invoker.setOverride(SystemProperty.VERSION_NAME, versionName); } if (!(com.google.common.base.Strings.isNullOrEmpty(minSdkVersion))) { invoker.setOverride(SystemProperty.MIN_SDK_VERSION, minSdkVersion); } if (!(com.google.common.base.Strings.isNullOrEmpty(targetSdkVersion))) { invoker.setOverride(SystemProperty.TARGET_SDK_VERSION, targetSdkVersion); } }<END_MOD>
<START_MOD>private static boolean addClassToDex(java.lang.String name, com.android.dx.dex.file.ClassDefItem clazz) { synchronized(com.android.dx.command.dexer.Main.outputDex) { com.android.dx.command.dexer.Main.outputDex.add(clazz); } return true; }<END_MOD>
@com.android.annotations.<START_MOD>NonNull<END_MOD> <START_MOD>java.util.Collection<<END_MOD>java.io.File<START_MOD>><END_MOD> <START_MOD>getJarJarRuleFiles<END_MOD>();
private void requestInputMethod(android.app.Dialog dialog) { android.view.Window window = dialog.getWindow(); window.setSoftInputMode(((<START_MOD>(<END_MOD>WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE) | (WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE))<START_MOD> | (WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN))<END_MOD>); }
<START_MOD>public void cleanup() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, ("cleanup for device " + (mDevice))); } }<END_MOD>
@dalvik.annotation.TestTargetNew(level = dalvik.annotation.TestLevel.SUFFICIENT, method = "findAll", args = { java.lang.String.class }, notes =   check highlighting public void testFindAll() throws java.lang.<START_MOD>Throwable<END_MOD> { java.lang.String p =   all instances of find on the page and highlight them.</p> mWebView.loadData((("<html><body>" + p) + "</body></html>"), "text/html", "UTF-8"); waitForLoadComplete(mWebView, android.webkit.cts.WebViewTest.TEST_TIMEOUT); <START_MOD>runTestOnUiThread(new java.lang.Runnable() { public void run() { <END_MOD>assertEquals(2, mWebView.findAll("find")); }<START_MOD> }); }<END_MOD>
<START_MOD>@java.lang.Override public void run(@org.jetbrains.annotations.NotNull com.intellij.openapi.progress.ProgressIndicator indicator) { com.google.gct.idea.git.PantheonHttpAuthDataProvider.Context context = com.google.gct.idea.git.PantheonHttpAuthDataProvider.createContext(gcpUserName); try { cloneResult.set(com.google.gct.idea.git.GCPCheckoutProvider.doClone(project, indicator, git, directoryName, parentDirectory, sourceRepositoryURL)); } finally { context.Close(); } }<END_MOD>
<START_MOD>public android.net.wifi.WifiConfiguration getMatchingWifiConfig(android.net.wifi.ScanResult scanResult) { Pair<com.android.server.wifi.hotspot2.PasspointProvider, com.android.server.wifi.hotspot2.PasspointMatch> matchedProvider = matchProvider(scanResult); if (matchedProvider == null) { return null; } android.net.wifi.WifiConfiguration config = matchedProvider.first.getWifiConfig(); config.SSID = com.android.server.wifi.util.ScanResultUtil.createQuotedSSID(scanResult.SSID); return config; }<END_MOD>
@org.junit.Test<START_MOD> @java.lang.Runtime<END_MOD> public void testDefaultMethod015() throws java.lang.Exception { run(DEFAULTMETHOD015); }
@java.lang.Override public void onCallAudioStateChanged(java.lang.String callId, android.telecom.CallAudioState callAudioState<START_MOD>, android.telecom.Logging.Session.Info sessionInfo<END_MOD>)<START_MOD> { android.telecom.Log.startExternalSession(sessionInfo, android.telecom.ConnectionService.SESSION_CALL_AUDIO_SC); try<END_MOD> { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = callAudioState; <START_MOD>args.arg3 = android.telecom.Log.createSubsession(); <END_MOD>mHandler.obtainMessage(android.telecom.ConnectionService.MSG_ON_CALL_AUDIO_STATE_CHANGED, args).sendToTarget(); }<START_MOD> finally { android.telecom.Log.endSession(); } }<END_MOD>
@java.lang.SuppressWarnings("unchecked") public <T> T[] toArray(T[] contents) { <START_MOD>java.util.List<T><END_MOD> <START_MOD>list<END_MOD> = <START_MOD>new java.util.ArrayList<T>(<END_MOD>size()); for (E entry : this) { <START_MOD>list.add<END_MOD>(((T) (entry))); } return <START_MOD>list.toArray(<END_MOD>contents<START_MOD>)<END_MOD>; }
<START_MOD>public void resolveReferences() { java.util.ArrayList<com.android.tools.perflib.heap.ClassObj> referenceSubclasses = new java.util.ArrayList<com.android.tools.perflib.heap.ClassObj>(); for (com.android.tools.perflib.heap.ClassObj referenceClass : mReferenceClasses) { referenceClass.setIsSoftReferenceType(); for (com.android.tools.perflib.heap.ClassObj subClass : referenceClass.getSubclasses()) { referenceSubclasses.add(subClass); subClass.setIsSoftReferenceType(); } } mReferenceClasses.addAll(referenceSubclasses); }<END_MOD>
private void activate() { java.io.File binDir = new java.io.File(mVenvDir, (com.android.tradefed.<START_MOD>util<END_MOD>.<START_MOD>VtsPythonUtil<END_MOD>.isOnWindows() ? "Scripts" : "bin")); mRunUtil.setWorkingDir(binDir); java.lang.String path = java.lang.System.getenv(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PATH); mRunUtil.setEnvVariable(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PATH, ((binDir + (java.io.File.pathSeparator)) + path)); java.io.File pipFile = new java.io.File(binDir, com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PIP); pipFile.setExecutable(true); mPip = pipFile.getAbsolutePath(); }
public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.<START_MOD>getKey(256)<END_MOD>); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, <START_MOD>android.net.cts.IpSecManagerTest.getKey<END_MOD>(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth<START_MOD>, null<END_MOD>, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, <START_MOD>null, <END_MOD>false, 1, true); }
@java.lang.Override public int compare(com.android.ahat.heapdump.AhatInstance a, com.android.ahat.heapdump.AhatInstance b) { return java.lang.Long.compare(b.getRetainedSize(mHeap)<START_MOD>.getSize()<END_MOD>, a.getRetainedSize(mHeap)<START_MOD>.getSize()<END_MOD>); }
@java.lang.SuppressWarnings("javadoc") public void visitMethod(@com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context, @com.android.annotations.Nullable <START_MOD>com<END_MOD>.<START_MOD>android.tools.lint.detector.api<END_MOD>.AstVisitor visitor, @com.android.annotations.NonNull <START_MOD>com<END_MOD>.<START_MOD>android.tools.lint.detector.api<END_MOD>.MethodInvocation node) { }
<START_MOD>public void test_mkdirs() throws java.lang.Exception { java.io.File base = libcore.java.io.FileTest.createTemporaryDirectory(); assertTrue(base.exists()); assertFalse(base.mkdirs()); java.io.File a = new java.io.File(base, "a"); assertFalse(a.exists()); assertTrue(a.mkdirs()); assertTrue(a.exists()); java.io.File b = new java.io.File(a, "b"); java.io.File c = new java.io.File(b, "c"); java.io.File d = new java.io.File(c, "d"); assertTrue(a.exists()); assertFalse(b.exists()); assertFalse(c.exists()); assertFalse(d.exists()); assertTrue(d.mkdirs()); assertTrue(a.exists()); assertTrue(b.exists()); assertTrue(c.exists()); assertTrue(d.exists()); }<END_MOD>
public <START_MOD>int<END_MOD> loadPlugIns() { <START_MOD>int result = android.drm.DrmManagerClient.ERROR_UNKNOWN; <END_MOD>if ((android.drm.DrmManagerClient.STATE_UNINITIALIZED)<START_MOD> == (getState())<END_MOD>) { <START_MOD>if <END_MOD>(<START_MOD>null != (mActionHandler)) { android.os.Message msg = mActionHandler.obtainMessage(android.drm.DrmManagerClient.ACTION_INITIALIZE<END_MOD>, new java.lang.ref.WeakReference<android.drm.DrmManagerClient>(this)); <START_MOD>result = (mActionHandler.sendMessage(msg)) ? android.drm.DrmManagerClient.ERROR_NONE : result; } } else { result<END_MOD> = android.drm.DrmManagerClient.<START_MOD>ERROR_NONE<END_MOD>; } <START_MOD>return result; <END_MOD>}
<START_MOD>private<END_MOD> static boolean hasCyclicDependency(org.eclipse.jdt.core.IJavaProject javaProject) throws org.eclipse.core.runtime.CoreException { org.eclipse.core.resources.IMarker[] markers = javaProject.getProject().findMarkers(IJavaModelMarker.BUILDPATH_PROBLEM_MARKER, false, IResource.DEPTH_ONE); for (int i = 0; i < (markers.length); i++) { org.eclipse.core.resources.IMarker marker = markers[i]; java.lang.String cycleAttr = ((java.lang.String) (marker.getAttribute(IJavaModelMarker.CYCLE_DETECTED))); if ((cycleAttr != null) && (cycleAttr.equals("true"))) { return true; } } return false; }
public void onPreferencesMenuSelected() { <START_MOD>showRegisteredPage(UpdaterPage<END_MOD>.<START_MOD>PURPOSE_SETTINGS);<END_MOD> }
public void test_PBKDF2_rfc3211_192() throws java.lang.Exception { char[] password = ( n-entities must communicate with other   +   via n-1 entiteeheehees byte[] salt = new byte[]{ ((byte) (18)), ((byte) (52)), ((byte) (86)), ((byte) (120)), ((byte) (120)), ((byte) (86)), ((byte) (52)), ((byte) (18)) }; int iterations = 500; int keyLength = 192; byte[] expected = new byte[]{ ((byte) (106)), ((byte) (137)), ((byte) (112)), ((byte) (191)), ((byte) (104)), ((byte) (201)), ((byte) (44)), ((byte) (174)), ((byte) (168)), ((byte) (74)), ((byte) (141)), ((byte) (242)), ((byte) (133)), ((byte) (16)), ((byte) (133)), ((byte) (134)), ((byte) (7)), ((byte) (18)), ((byte) (99)), ((byte) (128)), ((byte) (204)), ((byte) (71)), ((byte) (171)), ((byte) (45)) }; test_PBKDF2(password, salt, iterations, keyLength, expected); <START_MOD>test_BrokenPBKDF2(password, salt, iterations, keyLength, expected); <END_MOD>}
<START_MOD>public void testProgramsGenresDecode() { java.util.List genres = java.util.Arrays.asList(android.media.tv.TvContract.Programs.Genres.decode(android.media.tv.cts.TvContractTest.ENCODED_GENRE_STRING)); assertTrue(genres.contains(Genres.ANIMAL_WILDLIFE)); assertTrue(genres.contains(Genres.COMEDY)); assertTrue(genres.contains(Genres.DRAMA)); assertTrue(genres.contains(Genres.EDUCATION)); assertTrue(genres.contains(Genres.FAMILY_KIDS)); assertTrue(genres.contains(Genres.GAMING)); assertTrue(genres.contains(Genres.MOVIES)); assertTrue(genres.contains(Genres.NEWS)); assertTrue(genres.contains(Genres.SHOPPING)); assertTrue(genres.contains(Genres.SPORTS)); assertTrue(genres.contains(Genres.TRAVEL)); assertFalse(genres.contains(",")); }<END_MOD>
@javax.annotation.Nonnull private static java.lang.Object instantiateConstructorWithParameters(@javax.annotation.Nonnull com.android.sched.vfs.InputRootVDir vdir, @javax.annotation.Nonnull java.lang.String className, @javax.annotation.Nonnull java.lang.Class<?>[] parameterTypes, @javax.annotation.Nonnull java.lang.Object[] parameterInstances, @javax.annotation.Nonnull java.lang.String version) throws com.android.jack.library.LibraryVersionException { java.lang.Object constructorInstance = null; try { java.lang.Class<?> libraryReaderClass = java.lang.Class.forName(className); java.lang.reflect.Constructor<?> constructor = libraryReaderClass.getConstructor(parameterTypes); constructorInstance = constructor.newInstance(parameterInstances); } catch (java.lang.SecurityException e) { throw new java.lang.AssertionError(); } catch (java.lang.IllegalArgumentException e) { throw new java.lang.AssertionError(( argument for library constructor for version   + version)); } catch (java.lang.ClassNotFoundException e) { throw new com.android.jack.library.LibraryVersionException((((   + vdir) +   has an unsupported version   + version)); } catch (java.lang.NoSuchMethodException e) { throw new java.lang.AssertionError(( constructor not found for version   + version)); } catch (java.lang.InstantiationException e) { throw new java.lang.AssertionError(( instantiating a library for version   + version)); } catch (java.lang.IllegalAccessException e) { throw new java.lang.AssertionError(( accessing library constructor for version   + version)); } catch (java.lang.reflect.InvocationTargetException e) { <START_MOD>if ((e.getCause()) instanceof com.android.jack.library.LibraryFormatException) { throw ((com.android.jack.library.LibraryFormatException) (e.getCause())); } else if ((e.getCause()) instanceof java.lang.RuntimeException) { throw ((java.lang.RuntimeException) (e.getCause())); } else if ((e.getCause()) instanceof java.lang.Error) { throw ((java.lang.Error) (e.getCause())); } <END_MOD>throw new java.lang.<START_MOD>AssertionError(e<END_MOD>); } return constructorInstance; }
private java.lang.String getDexFileName(java.io.File inputFile) { java.lang.String name = inputFile.getName(); int pos = name.lastIndexOf('.'); if (pos != (-1)) { name = name.substring(0, pos); } com.google.common.hash.HashFunction hashFunction = com.google.common.hash.Hashing.md5(); com.google.common.hash.HashCode hashCode = hashFunction.<START_MOD>hashUnencodedChars<END_MOD>(inputFile.getAbsolutePath()); return ((name + "-") + (hashCode.toString())) + ".jar"; }
<START_MOD>@java.lang.Override public com.android.apksig.util.DataSource slice(long offset, long size) { throw new java.lang.UnsupportedOperationException("Not implemented"); }<END_MOD>
<START_MOD>public int getCellConnectionStatus() { return mCellConnectionStatus; }<END_MOD>
java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_PERM,   BLUETOOTH permission <START_MOD>synchronized(mStateMachines) { java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); java.util.Set<android.bluetooth.BluetoothDevice> bondedDevices = mAdapter.getBondedDevices(); for (android.bluetooth.BluetoothDevice device : bondedDevices) { android.os.ParcelUuid[] featureUuids = device.getUuids(); if (!(android.bluetooth.BluetoothUuid.isUuidPresent(featureUuids, BluetoothUuid.HearingAid))) { continue; } int connectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm != null) { connectionState = sm.getConnectionState(); } for (int i = 0; i < (states.length); i++) { if (connectionState == (states[i])) { devices.add(device); } } } <END_MOD>return <START_MOD>devices; } }<END_MOD>
<START_MOD>@java.lang.Override public void onSupplementaryServiceIndication(com.android.ims.ImsSsData ssData) { if ((mSsIndicationRegistrant) != null) { mSsIndicationRegistrant.notifyRegistrant(new android.os.AsyncResult(null, ssData, null)); } }<END_MOD>
<START_MOD>public static native void ensureOsrCode();<END_MOD>
<START_MOD>@java.lang.Override public final int hashCode() { return ((getKind().hashCode()) * 31) ^ (getMemberRef().hashCode()); }<END_MOD>
private void testRotation(java.lang.String activityName, int rotationStep, int numRelaunch, int numConfigChange) throws java.lang.Exception { executeShellCommand(getAmStartCmd(activityName)); final java.lang.String[] waitForActivitiesVisible = new java.lang.String[]{ activityName }; mAmWmState.computeState(mDevice, waitForActivitiesVisible); <START_MOD>android.server.cts.ActivityManagerState mAmState = mAmWmState.getAmState(); android.server.cts.WindowManagerState mWmState = mAmWmState.getWmState(); if ((mAmState.containsStack(android.server.cts.FREEFORM_WORKSPACE_STACK_ID)) && (mWmState.containsStack(android.server.cts.FREEFORM_WORKSPACE_STACK_ID))) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO,   test: no rotation support return; }<END_MOD> setDeviceRotation((4 - rotationStep)); mAmWmState.computeState(mDevice, waitForActivitiesVisible); for (int rotation = 0; rotation < 4; rotation += rotationStep) { clearLogcat(); setDeviceRotation(rotation); mAmWmState.computeState(mDevice, waitForActivitiesVisible); assertRelaunchOrConfigChanged(activityName, numRelaunch, numConfigChange); } }
@java.lang.Override public boolean processMessage(android.os.Message msg) { if ((super.processMessage(msg)) == (HANDLED)) { return HANDLED; } switch (msg.what) { case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_WIRED_HEADSET : sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_HEADSET); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_BLUETOOTH : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH : sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_BASELINE_ROUTE<START_MOD>, 0<END_MOD>); mWasOnSpeaker = false; return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_WIRED_HEADSET : updateSystemAudioState(); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_DOCK : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_DOCK : return HANDLED; default : return NOT_HANDLED; } }
<START_MOD>public com.android.jack.ir.ast.JMethod getTarget() { return target; }<END_MOD>
<START_MOD>public<END_MOD> static <START_MOD>com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent toProto(android.net.metrics.DefaultNetworkEvent in) { com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.DefaultNetworkEvent ev = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.DefaultNetworkEvent(); ev.finalScore = in.finalScore; ev.initialScore = in.initialScore; ev.ipSupport = com.android.server.connectivity.IpConnectivityEventBuilder.ipSupportOf(in); if ((in.netId) != (android.net.ConnectivityManager.NETID_UNSET)) { ev.defaultNetworkDurationMs = in.durationMs; ev.noDefaultNetworkDurationMs = 0; } else { ev.defaultNetworkDurationMs = 0; ev.noDefaultNetworkDurationMs = in.durationMs; } ev.validationDurationMs = in.validatedMs; ev.previousDefaultNetworkLinkLayer = com.android.server.connectivity.IpConnectivityEventBuilder.transportsToLinkLayer(in.previousTransports); final com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent out = com.android.server.connectivity.IpConnectivityEventBuilder.buildEvent(in.netId, in.transports, null); out.<END_MOD>setDefaultNetworkEvent(<START_MOD>ev); return<END_MOD> out; }
<START_MOD>private void startVoiceRecognitionFromHf(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.hfp.HeadsetStackEvent startVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED, HeadsetHalConstants.VR_STATE_STARTED, device); mHeadsetService.messageFromNative(startVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).activateVoiceRecognition(); mHeadsetService.startVoiceRecognition(device); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters("A2dpSuspended=true"); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).atResponseCode(device, HeadsetHalConstants.AT_RESPONSE_OK, 0); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectAudio(device); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); }<END_MOD>
private static void createDexFile() { <START_MOD>final com.android.dx.dex.file.DexFile toWrite = com.android.dx.command.dexer.Main.outputDex; com.android.dx.command.dexer.Main.outputDex = new com.android.dx.dex.file.DexFile(com.android.dx.command.dexer.Main.args.dexOptions); <END_MOD>if ((com.android.dx.command.dexer.Main.<START_MOD>args.dumpWidth) != 0) { com.android.dx.command.dexer.Main.<END_MOD>outputDex<START_MOD>.setDumpWidth(com.android.dx.command.dexer.Main.args.dumpWidth); } if (toWrite<END_MOD> != null) { <START_MOD>if ((com.android.dx.command.dexer.Main.dexOutPool) != null) { com.android.dx.command.dexer.Main.dexOutputFutures.add(com.android.dx.command.dexer.Main.dexOutPool.submit(new com.android.dx.command.dexer.Main.DexWriter(toWrite))); } else { <END_MOD>com.android.dx.command.dexer.Main.dexOutputArrays.add(com.android.dx.command.dexer.Main.writeDex(<START_MOD>toWrite)); } } }<END_MOD>
<START_MOD>@java.lang.Override public void tearDown(com.android.tradefed.device.ITestDevice device, com.android.tradefed.build.IBuildInfo buildInfo, java.lang.Throwable e) throws com.android.tradefed.device.DeviceNotAvailableException { if ((mCoverageDirectory) != null) { com.android.tradefed.util.FileUtil.recursiveDelete(mCoverageDirectory); device.executeShellCommand(("rm -r " + (com.android.tradefed.targetprep.VtsSancovPreparer.SANCOV_CONFIGURE_DST))); } }<END_MOD>
<START_MOD>public static void tcsendbreak(java.io.FileDescriptor fd, int duration) throws android.os.ErrnoException { Libcore.os.tcsendbreak(fd, duration); }<END_MOD>
private java.awt.Color getFontColor(com.android.tools.perflib.vmtrace.Call c) { com.android.tools.perflib.vmtrace.MethodInfo info = mTraceData.getMethod(c.getMethodId()); int percent = quantize(<START_MOD>computeThreadPercentage(<END_MOD>info)); return getFontColor(percent); }
<START_MOD>public java.lang.String getDefaultApkLocation() { return (((getBuildDir()) + "/") + (FD_OUTPUTS)) + "/apk"; }<END_MOD>
<START_MOD>private boolean isWiredHeadset(android.media.AudioDeviceInfo deviceInfo) { switch (deviceInfo.getType()) { case android.media.AudioDeviceInfo.TYPE_WIRED_HEADSET : case android.media.AudioDeviceInfo.TYPE_WIRED_HEADPHONES : case android.media.AudioDeviceInfo.TYPE_USB_HEADSET : return true; default : break; } return false; }<END_MOD>
<START_MOD>public java.lang.String[][] validAddressesAndStringRepresentation() { return new java.lang.String[][]{ new java.lang.String[]{ "::1.2.3.4", "/::1.2.3.4" }, new java.lang.String[]{ "::", "/::" }, new java.lang.String[]{ "1::0", "/1::" }, new java.lang.String[]{ "1::", "/1::" }, new java.lang.String[]{ "::1", "/::1" }, new java.lang.String[]{ "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF", "/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff" }, new java.lang.String[]{ "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:255.255.255.255", "/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff" }, new java.lang.String[]{ "0:0:0:0:0:0:0:0", "/::" }, new java.lang.String[]{ "0:0:0:0:0:0:0.0.0.0", "/::" } }; }<END_MOD>
public android.icu.text.QuantityFormatter.Builder add(java.lang.<START_MOD>CharSequence<END_MOD> variant, java.lang.String template) { <START_MOD>int<END_MOD> idx = android.icu.text.QuantityFormatter.<START_MOD>getPluralIndex<END_MOD>(variant); if (idx <START_MOD><<END_MOD> <START_MOD>0<END_MOD>) { throw new java.lang.IllegalArgumentException(variant<START_MOD>.toString()<END_MOD>); } android.icu.impl.SimplePatternFormatter newT = android.icu.impl.SimplePatternFormatter.compile(template); if ((newT.getPlaceholderCount()) > 1) { throw new java.lang.IllegalArgumentException(( placeholders:   + template)); } <START_MOD>ensureCapacity(); <END_MOD>templates[idx] = newT; return this; }
<START_MOD>public java.lang.String toString() { return (((((((((((((((((((((((((("NDF[" + (toPattern())) + " ") + (isDecimalSeparatorAlwaysShown())) + " ") + (getGroupingSize())) + " ") + (getMultiplier())) + " ") + (getNegativePrefix())) + " ") + (getNegativeSuffix())) + " ") + (getPositivePrefix())) + " ") + (getPositiveSuffix())) + " ") + (getMaximumIntegerDigits())) + " ") + (getMaximumFractionDigits())) + " ") + (getMinimumIntegerDigits())) + " ") + (getMinimumFractionDigits())) + " ") + (isGroupingUsed())) + " ") + "]"; }<END_MOD>
<START_MOD>@com.android.internal.annotations.VisibleForTesting <END_MOD>int getResourceId() { return mResourceId; }
<START_MOD>@com.android.annotations.NonNull @java.lang.Override public java.util.List<java.io.File> getJavaClassFolders() { if ((mJavaClassFolders) == null) { mJavaClassFolders = new java.util.ArrayList<java.io.File>(1); java.io.File outputClassFolder = mVariant.getMainArtifactInfo().getClassesFolder(); if ((outputClassFolder != null) && (outputClassFolder.exists())) { mJavaClassFolders.add(outputClassFolder); } } return mJavaClassFolders; }<END_MOD>
@java.lang.Override public void sendEnvelopeWithStatus(java.lang.String contents, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_STK_SEND_ENVELOPE_WITH_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) +   contents =   + contents)); } try { radioProxy.sendEnvelopeWithStatus(rr.mSerial, convertNullToEmptyString(contents)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendEnvelopeWithStatus", e); } } }
public java.lang.String getDisplayLanguage(java.util.Locale locale) { if (languageCode.isEmpty()) { return ""; } java.lang.String localeString = toString(); if (languageCode.equals("tl")) { localeString = toNewString("fil", countryCode, variantCode<START_MOD>, null, null<END_MOD>); } java.lang.String result = libcore.icu.ICU.getDisplayLanguageNative(localeString, locale.<START_MOD>getIcuLocaleId<END_MOD>()); if (result == null) { result = libcore.icu.ICU.getDisplayLanguageNative(localeString, java.util.Locale.getDefault().<START_MOD>getIcuLocaleId<END_MOD>()); } return result; }
<START_MOD>private com.google.common.base.Optional<org.w3c.dom.Element> addIfAbsent(com.android.manifmerger.ActionRecorder actionRecorder, com.android.manifmerger.ManifestModel.NodeTypes nodeType, java.lang.String keyValue, com.android.utils.Pair<java.lang.String, java.lang.String>... attributes) { com.google.common.base.Optional<com.android.manifmerger.XmlElement> xmlElementOptional = getByTypeAndKey(nodeType, keyValue); if (xmlElementOptional.isPresent()) { return com.google.common.base.Optional.absent(); } org.w3c.dom.Element elementNS = getXml().createElementNS(SdkConstants.ANDROID_URI, ("android:" + (nodeType.toXmlName()))); com.google.common.collect.ImmutableList<java.lang.String> keyAttributesNames = nodeType.getNodeKeyResolver().getKeyAttributesNames(); if ((keyAttributesNames.size()) == 1) { elementNS.setAttributeNS(SdkConstants.ANDROID_URI, ("android:" + (keyAttributesNames.get(0))), keyValue); } for (com.android.utils.Pair<java.lang.String, java.lang.String> attribute : attributes) { elementNS.setAttributeNS(SdkConstants.ANDROID_URI, ("android:" + (attribute.getFirst())), attribute.getSecond()); } com.android.manifmerger.XmlElement xmlElement = new com.android.manifmerger.XmlElement(elementNS, this); actionRecorder.recordImpliedNodeAction(xmlElement); getRootNode().getXml().appendChild(elementNS); return com.google.common.base.Optional.of(elementNS); }<END_MOD>
<START_MOD>public boolean getIsSoftReferenceType() { return false; }<END_MOD>
public void incrementalBuildFromFolder(@javax.annotation.CheckForNull java.io.File[] classpath, @javax.annotation.Nonnull java.util.List<java.io.File> imports, @javax.annotation.Nonnull com.android.jack.test.toolchain.JackBasedToolchain.MultiDexKind multiDexKind) throws java.lang.Exception { <START_MOD>com.android.jack.test.toolchain.JackBasedToolchain jackToolchain; if (isApiTest) { <END_MOD>java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeList = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(1); excludeList.add(com.android.jack.test.toolchain.<START_MOD>JackCliToolchain<END_MOD>.class); jackToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class, excludeList);<START_MOD> } else { jackToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); }<END_MOD> jackToolchain.setIncrementalFolder(getCompilerStateFolder()); jackToolchain.addStaticLibs(imports.toArray(new java.io.File[imports.size()])); jackToolchain.setMultiDexKind(multiDexKind); jackToolchain.setOutputStream(out); jackToolchain.setErrorStream(err); java.io.File[] bootclasspath = jackToolchain.getDefaultBootClasspath(); jackToolchain.addToClasspath(bootclasspath); if (classpath != null) { jackToolchain.addToClasspath(classpath); } jackToolchain.srcToExe(dexOutDir, false, sourceFolder); java.lang.Thread.sleep(1000); }
public void testGoodOverrideFile() throws java.lang.Exception { java.io.RandomAccessFile in = new java.io.RandomAccessFile(libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT, "r"); byte[] content = new byte[((int) (in.length()))]; in.readFully(content); content[6] = '9'; content[7] = '9'; content[8] = '9'; content[9] = '9'; content[10] = 'z'; in.close(); libcore.util.ZoneInfoDB.TzData data = new libcore.util.ZoneInfoDB.TzData(libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT); java.lang.String goodFile = libcore.util.ZoneInfoDBTest.makeTemporaryFile(content)<START_MOD>.getPath()<END_MOD>; try { libcore.util.ZoneInfoDB.TzData dataWithOverride = new libcore.util.ZoneInfoDB.TzData(goodFile, libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT); assertEquals("9999z", dataWithOverride.getVersion()); assertEquals(data.getAvailableIDs().length, dataWithOverride.getAvailableIDs().length); } finally { new java.io.File(goodFile).delete(); } }
@java.lang.Override public<START_MOD> synchronized<END_MOD> void setUp(com.android.tradefed.invoker.IInvocationContext context) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.TargetSetupError { mBuildInfo = context.getBuildInfos().get(0); startVirtualenv(mBuildInfo); setLocalPypiPath(); installDeps(mBuildInfo); }
<START_MOD>@java.lang.Override public <END_MOD>void <START_MOD>onCapabilities<END_MOD>(<START_MOD>com.android.bips.jni.LocalPrinterCapabilities capabilities<END_MOD>) { <START_MOD>if ((mSession<END_MOD>.<START_MOD>isDestroyed<END_MOD>()<START_MOD>) || (!(mSession<END_MOD>.<START_MOD>isKnown<END_MOD>(<START_MOD>mPrinterId)))) return; if (capabilities == null) { if (com.android.bips.LocalPrinter.DEBUG) android.util.Log.d(com.android.bips.LocalPrinter.TAG<END_MOD>,<START_MOD> ( capabilities so removing printer   + (this)));<END_MOD> mSession.<START_MOD>removePrinters(java.util.Collections.singletonList<END_MOD>(mPrinterId)<START_MOD>);<END_MOD> <START_MOD>} else { mCapabilities = capabilities; mSession.handlePrinter(<END_MOD>this); }<START_MOD> }<END_MOD>
@android.annotation.SystemApi public int getOtaStatus() { if (!(isEnabled())) { return android.telephony.euicc.EuiccManager.EUICC_OTA_STATUS_UNAVAILABLE; } <START_MOD>com.android.internal.telephony.euicc.IEuiccController<END_MOD> <START_MOD>controller = getIEuiccController(); if (controller == null)<END_MOD> return android.telephony.euicc.EuiccManager.<START_MOD>EUICC_OTA_STATUS_UNAVAILABLE; try { return controller<END_MOD>.getOtaStatus(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
<START_MOD>private void initializeEmpty() { countryZones = java.util.Collections.emptyMap(); }<END_MOD>
<START_MOD>public java.util.List<java.io.File> getInputFiles() { return mInputFiles; }<END_MOD>
@java.lang.Override @javax.annotation.Nonnull public java.io.File[] getDefaultBootClasspath() { return new java.io.File[]{ new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), <START_MOD>"jack/jack-tests/libs/core-stubs-mini.jack"<END_MOD>), new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), <START_MOD>"jack/jack-tests/prebuilts/junit4-targetdex-jack.zip"<END_MOD>) }; }
synchronized void recordScanStop() { if (!(isScanning)) return; (this.scansStopped)++; isScanning = false; stopTime = java.lang.System.currentTimeMillis(); long scanDuration = (stopTime) - (startTime); minScanTime = java.lang.Math.min(scanDuration, minScanTime); maxScanTime = java.lang.Math.max(scanDuration, maxScanTime); totalScanTime += scanDuration; com.android.bluetooth.gatt.AppScanStats.LastScan curr = lastScans.get(((lastScans.size()) - 1)); curr.duration = scanDuration; if ((lastScans.size()) > (com.android.bluetooth.gatt.AppScanStats.NUM_SCAN_DURATIONS_KEPT)) { lastScans.remove(0); } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_STOP); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.<START_MOD>setEventTimeMillis(java.lang.System.currentTimeMillis()); java.lang.String initiator = appName; java.lang.String[] nameSplit = initiator.split("\\."); if ((nameSplit.length) > 3) { initiator = ((((nameSplit[0]) + ".") + (nameSplit[1])) + ".") + (nameSplit[2]); } scanEvent.<END_MOD>setInitiator(<START_MOD>initiator<END_MOD>); gattService.addScanEvent(scanEvent); }
public static void finalizeAllEnqueued() throws java.lang.InterruptedException { java.lang.ref.FinalizerReference.Sentinel sentinel = new java.lang.ref.FinalizerReference.Sentinel(); java.lang.ref.FinalizerReference<java.lang.Object> reference = new java.lang.ref.FinalizerReference<java.lang.Object>(null, java.lang.ref.FinalizerReference.queue); reference.zombie = sentinel; reference.<START_MOD>isSentinel = true; reference.<END_MOD>enqueueInternal(); sentinel.awaitFinalization(); }
public void listen(java.io.FileDescriptor fd, int backlog) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
@java.lang.Override public void onResume() { super.onResume(); <START_MOD>if (((!(mTextMsg.responseNeeded)) && ((com.android.stk.StkApp.calculateDurationInMilis(mTextMsg.duration)) == 0)) && (mTextMsg.userClear)) { com.android.stk.CatLog.d(this,   should clear text..show message for ever return; } <END_MOD>startTimeOut(mTextMsg.userClear); }
<START_MOD>@com.android.annotations.NonNull public java.lang.String getBaseName() { if ((densityFilter) == null) { } return variantData.getVariantConfiguration().getBaseName(); }<END_MOD>
<START_MOD>private static int getInterfaceIndex(java.lang.String iface) { try { return java.net.NetworkInterface.getByName(iface).getIndex(); } catch (java.net.SocketException e) { throw new java.lang.IllegalArgumentException((("invalid interface '" + iface) + "': "), e); } }<END_MOD>
public static java.lang.String parseSvgToXml(java.io.File inputSVG, java.io.OutputStream outStream) { java.lang.String errorLog = null; try { com.android.assetstudiolib.vectordrawable.SvgTree svgTree = com.android.assetstudiolib.vectordrawable.Svg2Vector.parse(inputSVG); errorLog = svgTree.getErrorLog(); <START_MOD>if ((svgTree.getRoot()) != null) { <END_MOD>com.android.assetstudiolib.vectordrawable.Svg2Vector.writeFile(outStream, svgTree);<START_MOD> }<END_MOD> } catch (java.lang.Exception e) { errorLog = (( in parsing   + (inputSVG.getName())) + ":\n") + (e.getMessage()); } return errorLog; }
private void clearImsUceService() { synchronized(mSyncObj) {<START_MOD> try { if ((mStackService) != null) { mStackService.destroyPresenceService(mStackPresenceServiceHandle); } } catch (android.os.RemoteException e) { logger.warn( Couldn clean up stack service }<END_MOD> mImsUceManager = null; mStackService = null; mStackPresService = null; } }
private void handleUpstreamNetworkMonitorCallback(int arg1, java.lang.Object o) { if (arg1 == (com.android.server.connectivity.tethering.UpstreamNetworkMonitor.NOTIFY_LOCAL_PREFIXES)) { mOffload.sendOffloadExemptPrefixes(((java.util.Set<android.net.IpPrefix>) (o))); return; } final android.net.NetworkState ns = ((android.net.NetworkState) (o)); if ((ns == null) || (!(pertainsToCurrentUpstream(ns)))) { if ((<START_MOD>mCurrentUpstreamIfaceSet<END_MOD>) == null) { chooseUpstreamType(false); } return; } switch (arg1) { case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_AVAILABLE : break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_CAPABILITIES : handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LINKPROPERTIES : setDnsForwarders(ns.network, ns.linkProperties); handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LOST : handleNewUpstreamNetworkState(null); break; default : mLog.e(( arg1 value:   + arg1)); break; } }
@java.lang.Override public void enter() { maybeLogEvaluationResult(networkEventType(validationStage(), com.android.server.connectivity.NetworkMonitor.EvaluationResult.VALIDATED)); mConnectivityServiceHandler.sendMessage(obtainMessage(com.android.server.connectivity.NetworkMonitor.EVENT_NETWORK_TESTED, com.android.server.connectivity.NetworkMonitor.NETWORK_TEST_RESULT_VALID, mNetId, <START_MOD>mPrivateDns<END_MOD>)); (mValidations)++; }
<START_MOD>private static int addPlusChar(java.lang.String number) { java.lang.String CLIR_OFF = "#31#+"; java.lang.String CLIR_ON = "*31#+"; int pos = -1; if (number.startsWith(CLIR_OFF)) { pos = (CLIR_OFF.length()) - 1; } if (number.startsWith(CLIR_ON)) { pos = (CLIR_ON.length()) - 1; } return pos; }<END_MOD>
private boolean isFilteredIn(com.android.bluetooth.pbap.BluetoothPbapVcardManager.VCardFilter.FilterBit bit, boolean vCardType21) { final int offset = ((bit.pos) / 8) + 1; final int bit_pos = (bit.pos) % 8; if ((!vCardType21) && (bit.onlyCheckV21)) return true; if (vCardType21 && (bit.excludeForV21)) return false; if (((<START_MOD>mFilter<END_MOD>) == null) || (offset >= (<START_MOD>mFilter<END_MOD>.length))) return true; return (((<START_MOD>mFilter<END_MOD>[((<START_MOD>mFilter<END_MOD>.length) - offset)]) >> bit_pos) & 1) != 0; }
<START_MOD>public static int Min2Print6(int a, int b, int c, int d, int e, int f) { int[] values = new int[]{ a, b, c, d, e, f }; java.lang.System.out.println((("Running Main.Min2Print6(" + (java.util.Arrays.toString(values))) + ")")); return a > b ? a : b; }<END_MOD>
private com.android.ide.<START_MOD>common.platformData<END_MOD>.DeclareStyleableInfo parseDeclaredStyleable(java.lang.String styleName, org.w3c.dom.Node declareStyleableNode) { java.util.ArrayList<com.android.ide.<START_MOD>common.platformData<END_MOD>.AttributeInfo> attrs = new java.util.ArrayList<com.android.ide.<START_MOD>common.platformData<END_MOD>.AttributeInfo>(); org.w3c.dom.Node lastComment = null; for (org.w3c.dom.Node node = declareStyleableNode.getFirstChild(); node != null; node = node.getNextSibling()) { switch (node.getNodeType()) { case org.w3c.dom.Node.COMMENT_NODE : lastComment = node; break; case org.w3c.dom.Node.ELEMENT_NODE : if (node.getNodeName().equals("attr")) { com.android.ide.<START_MOD>common.platformData<END_MOD>.AttributeInfo info = parseAttr(node, lastComment); if (info != null) { attrs.add(info); } } lastComment = null; break; } } return new com.android.ide.<START_MOD>common.platformData<END_MOD>.DeclareStyleableInfo(styleName, attrs.toArray(new com.android.ide.<START_MOD>common.platformData<END_MOD>.AttributeInfo[attrs.size()])); }
private void createTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration x) { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo(x); <START_MOD>if ((x.binding) == null) { return; } <END_MOD>try { com.android.jack.ir.ast.JDefinedClassOrInterface type = ((com.android.jack.ir.ast.JDefinedClassOrInterface) (getTypeMap().get(x.binding))); newTypes.add(type); if ((x.memberTypes) != null) { for (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration memberType : x.memberTypes) { createTypes(memberType); } } } catch (com.android.jack.ir.ast.JTypeLookupException e) { throw translateException(x, e, info); } catch (java.lang.RuntimeException e) { throw translateException(x, e, info); } }
<START_MOD>public java.lang.String getUiOptions() { return mUiOptions; }<END_MOD>
private static native void native_drawPaint(<START_MOD>long<END_MOD> nativeCanvas, <START_MOD>long<END_MOD> paint);
<START_MOD>@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetValues() { com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, mPhoneId); imsManager.setWfcMode(ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_MODE), eq("1")); imsManager.setWfcMode(ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED, true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_ROAMING_MODE), eq("1")); imsManager.setVtSetting(false); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.VT_IMS_ENABLED), eq("0")); imsManager.setEnhanced4gLteModeSetting(true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.ENHANCED_4G_MODE_ENABLED), eq("1")); imsManager.setWfcSetting(true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_ENABLED), eq("1")); }<END_MOD>
public void setsockoptInt(java.io.FileDescriptor fd, int level, int option, int value) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { os.setsockoptInt(fd, level, option, value); }
public void test_ConstructorI() { java.lang.StringBuilder sb = new java.lang.StringBuilder(24); assertNotNull(sb); <START_MOD>assertTrue(<END_MOD>(24 <START_MOD><= (<END_MOD>sb.capacity(<START_MOD>))<END_MOD>)); try { new java.lang.StringBuilder((-1)); fail( exception } catch (java.lang.NegativeArraySizeException e) { } assertNotNull(new java.lang.StringBuilder(0)); }
@java.lang.Override public void enter() { try { startObexServerSession(); } catch (java.io.IOException ex) { android.util.Log.e(com.android.bluetooth.pbap.PbapStateMachine.TAG, ( exception starting OBEX server session + (ex.toString()))); } broadcastStateTransitions(); <START_MOD>com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.PBAP); <END_MOD>}
public libcore.tzdata.update2.tools.TimeZoneBundleBuilder <START_MOD>setRevision<END_MOD>(java.lang.String <START_MOD>revision<END_MOD>) { this.<START_MOD>revision<END_MOD> = <START_MOD>revision<END_MOD>; return this; }
private void sendNsdStateChangeBroadcast(boolean <START_MOD>isEnabled<END_MOD>) { final android.content.Intent intent = new android.content.Intent(android.net.nsd.NsdManager.ACTION_NSD_STATE_CHANGED); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); intent.putExtra(NsdManager.EXTRA_NSD_STATE, <START_MOD>enabledMessage(isEnabled)<END_MOD>); mContext.sendStickyBroadcastAsUser(intent, UserHandle.ALL); }
public void getItemAttr(com.android.bluetooth.avrcp.AvrcpCmd.ItemAttrCmd itemAttr) { java.lang.String mediaID; if (com.android.bluetooth.avrcp.BrowsedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG, "getItemAttr"); mItemAttrReqObj = itemAttr; mediaID = byteToString(itemAttr.mUid); if (mediaID == null) { android.util.Log.e(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG,   is invalid mMediaInterface.getItemAttrRsp(mBDAddr, AvrcpConstants.RSP_INV_ITEM, null); return; } if ((itemAttr.mScope) != (AvrcpConstants.BTRC_SCOPE_FILE_SYSTEM)) { android.util.Log.e(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG,   scope mMediaInterface.getItemAttrRsp(mBDAddr, AvrcpConstants.RSP_INV_SCOPE, null); return; } if ((mMediaBrowser) == null) { android.util.Log.e(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG,   is null mMediaInterface.getItemAttrRsp(mBDAddr, AvrcpConstants.RSP_INTERNAL_ERR, null); return; } <START_MOD>mMediaIdForGetItemAttrib = mediaID; <END_MOD>mMediaBrowser.subscribe(<START_MOD>mPathStack.peek()<END_MOD>, itemAttrCb); }
@java.lang.Override public void deviceConnected(final com.android.ddmlib.IDevice device) { executeInBackground( device new java.lang.Runnable() { @java.lang.Override public void run() { <START_MOD>com.android.hierarchyviewerlib.device.IHvDevice hvDevice; synchronized(com.android.hierarchyviewerlib.HierarchyViewerDirector.mDevicesLock) { hvDevice = mDevices.get(device); <END_MOD>if (<START_MOD>hvDevice == null) { hvDevice = com.android.hierarchyviewerlib.HvDeviceFactory.create(device); hvDevice.initializeViewDebug(); mDevices.put(device, hvDevice); } } <END_MOD>com.android.hierarchyviewerlib.models.DeviceSelectionModel.getModel().<START_MOD>addDevice<END_MOD>(<START_MOD>hvDevice<END_MOD>); } }); }
public void addData(com.android.vts.proto.VtsReportMessage.TestReportMessage testReportMessage) { if (!(includeInSummary(testReportMessage))) return; for (com.android.vts.proto.VtsReportMessage.ProfilingReportMessage profilingReportMessage : testReportMessage.getProfilingList()) { if ((profilingReportMessage.getRegressionMode()) == (com.android.vts.proto.VtsReportMessage.VtsProfilingRegressionMode.VTS_REGRESSION_MODE_DISABLED)) { continue; } java.lang.String name = profilingReportMessage.getName().toStringUtf8(); java.lang.String optionSuffix = com.android.vts.util.PerformanceUtil.getOptionKeys(profilingReportMessage.getOptionsList(), optionSplitKeys); switch (profilingReportMessage.getType()) { case UNKNOWN_VTS_PROFILING_TYPE : case VTS_PROFILING_TYPE_TIMESTAMP : com.android.vts.util.PerformanceSummary.logger.log(java.util.logging.Level.WARNING, ( profiling data skipped :   + name)); break; case VTS_PROFILING_TYPE_LABELED_VECTOR : if (((profilingReportMessage.getLabelList().size()) == 0) || ((profilingReportMessage.getLabelList().size()) != (profilingReportMessage.getValueList().size()))) { continue; } if (!(<START_MOD>optionSuffix.equals(""))) { name += ( ( + optionSuffix) + ")"; } if (!(<END_MOD>summaryMap.containsKey(name))) { summaryMap.put(name, new com.android.vts.util.ProfilingPointSummary()); } summaryMap.get(name).update(profilingReportMessage); break; case VTS_PROFILING_TYPE_UNLABELED_VECTOR : if ((profilingReportMessage.getValueList().size()) == 0) return; if (!(summaryMap.containsKey(<START_MOD>optionSuffix<END_MOD>))) { summaryMap.put(<START_MOD>optionSuffix<END_MOD>, new com.android.vts.util.ProfilingPointSummary()); } summaryMap.get(<START_MOD>optionSuffix).updateLabel(profilingReportMessage, profilingReportMessage.getName()); break<END_MOD>; default : break; } } }
<START_MOD>private void checkLogFloat() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testLogFloat(in, out); verifyResultsLogFloat(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLogFloat: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLogFloat(in, out); verifyResultsLogFloat(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLogFloat: " + (e.toString()))); } }<END_MOD>
public synchronized boolean loadAccessControlRules(java.lang.String secureElement)<START_MOD> throws java.util.NoSuchElementException<END_MOD> { mSELabel = secureElement; android.util.Log.i(mTag, (( Loading   + (mSELabel)) +   rules... try { initACEntryPoint(); return updateACRules(); } catch (java.<START_MOD>util.NoSuchElementException e) { throw e; } catch (java.<END_MOD>lang.Exception e) { if (e instanceof java.util.MissingResourceException) { throw ((java.util.MissingResourceException) (e)); } android.util.Log.e(mTag, (((mSELabel) +   rules not correctly initialized!   + (e.getLocalizedMessage()))); throw new java.security.AccessControlException(e.getLocalizedMessage()); } finally { if ((mArfChannel) != null) mSEHandle.closeArfChannel(); } }
public void <START_MOD>setRenderscriptNdkModeEnabled<END_MOD>(java.lang.Boolean renderscriptNdkMode) { mRenderscriptNdkMode = renderscriptNdkMode; }
<START_MOD>public <END_MOD>void ndk(org.gradle.api.Action<com.android.build.gradle.internal.dsl.NdkOptions> action) { action.execute(ndkConfig); }
public void broadcastIccStateChangedIntent(java.lang.String value, java.lang.String reason) { if (mQuietMode) { log(((( NOT Broadcasting intent ACTION_SIM_STATE_CHANGED   + value) +   reason   + reason)); return; } android.content.Intent intent = new android.content.Intent(<START_MOD>com.android.internal.telephony.<END_MOD>TelephonyIntents.ACTION_SIM_STATE_CHANGED); intent.addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING); intent.putExtra(PhoneConstants.PHONE_NAME_KEY, "Phone"); intent.putExtra(IccCardConstants.INTENT_KEY_ICC_STATE, value); intent.putExtra(IccCardConstants.INTENT_KEY_LOCKED_REASON, reason); if (com.android.internal.telephony.<START_MOD>uicc.<END_MOD>IccCardProxy.DBG) log(((( intent ACTION_SIM_STATE_CHANGED   + value) +   reason   + reason)); android.app.ActivityManagerNative.broadcastStickyIntent(intent, android.Manifest.permission.READ_PHONE_STATE); }
<START_MOD>public static void testBitCountBoolean() { Main.expectEqualsInt(Main.bitCountBoolean(false), 0); Main.expectEqualsInt(Main.bitCountBoolean(true), 1); }<END_MOD>
<START_MOD>private boolean verifyWithHostnamePattern(java.lang.String hostname, java.lang.String pattern) { libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubSSLSession session = new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubSSLSession(); session.peerCertificates = new java.security.cert.Certificate[]{ new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate(("cn=" + pattern)) }; boolean resultWhenPatternInCn = verifier.verify(hostname, session); session.peerCertificates = new java.security.cert.Certificate[]{ new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate("ou=test").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME, pattern) }; boolean resultWhenPatternInSubjectAltName = verifier.verify(hostname, session); if (resultWhenPatternInCn != resultWhenPatternInSubjectAltName) { fail((((((((("Different results between pattern in CN and SubjectAltName." + " hostname : ") + hostname) + ", pattern: ") + pattern) + ", when pattern in CN: ") + resultWhenPatternInCn) + ", when pattern in SubjectAltName: ") + resultWhenPatternInSubjectAltName)); } return resultWhenPatternInCn; }<END_MOD>
@java.lang.Override public void testRunStarted(java.lang.String ignoredRunName, int testCount) { mTotalTestCount = testCount; <START_MOD>java.lang.System.out.println(( Run started,   of tests =   + testCount)); <END_MOD>}
@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCaseStatement caseStatement) { if (!(currentStmts.isEmpty())) { com.android.jack.cfg.NormalBasicBlock caseBlock = new com.android.jack.cfg.NormalBasicBlock(((basicBlockId)++), currentStmts); <START_MOD>tracer.getStatistic(com.android.jack.cfg.CfgBuilder.CREATED_BASIC_BLOCK).incValue(); <END_MOD>setBlockOfStatement(caseBlock); forwardBranchResolver.addNormalBasicBlock(caseBlock, caseStatement); } super.visit(caseStatement); return true; }
<START_MOD>public static void setVolume(int volume) { com.android.bluetooth.hearingaid.HearingAidNativeInterface.setVolumeNative(volume); }<END_MOD>
@org.junit.Test public void testCommandLineError002() throws java.lang.Exception { com.android.jack.test.helper.ErrorTestHelper ite = new com.android.jack.test.helper.ErrorTestHelper(); com.android.jack.test.toolchain.JackApiToolchain jackApiToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(); jackApiToolchain.setErrorStream(errOut); jackApiToolchain.setOutputStream(out); try { jackApiToolchain.addToClasspath(jackApiToolchain.getDefaultBootClasspath()).srcToExe(ite.getOutputDexFolder(), false, ite.getSourceFolder()); } finally { junit.framework.Assert.assertEquals("", errOut.toString()); <START_MOD>java.lang.System.out.println(out.toString()); <END_MOD>junit.framework.Assert.assertTrue(out.toString().contains("Usage:")); } }
static short <START_MOD>$opt$noinline$ByteToShort<END_MOD>(byte a) { return ((short) (a)); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getTargetContext(); mOldVrListener = Settings.Secure.getString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS); <START_MOD>mIsVrHeadset = ("1".equals(android.os.SystemProperties.get(android.vr.cts.VrSetFIFOThreadTest.VR_STANDALONE_PROPERTY, "0"))) ? true : false; <END_MOD>}
<START_MOD>public static void computeLength(android.renderscript.cts.TestLength.ArgumentsFloatNFloat args) { args.ulf = 4; args.ulfRelaxed = 12; double sum = 0.0F; for (int i = 0; i < (args.inV.length); i++) { sum += (args.inV[i]) * (args.inV[i]); } args.out = ((float) (java.lang.Math.sqrt(sum))); }<END_MOD>
<START_MOD>@java.lang.Override public void onReceive(final android.content.Context context, android.content.Intent intent) { synchronized(this) { android.telecom.Log.d(com.android.bluetooth.opp.BluetoothOppFileProvider.TAG, ("Received broadcast " + (intent.getAction()))); mContext.unregisterReceiver(this); if (Intent.ACTION_USER_UNLOCKED.equals(intent.getAction())) { attachInfo(mContext, mProviderInfo); } } }<END_MOD>
<START_MOD>public void setPreciseDisconnectCause(int cause) { mPreciseCause = cause; }<END_MOD>
<START_MOD>@org.junit.Test public void testbuildAnqpQueryCommandWithMixedTypes() { java.lang.String bssid = "34:12:ac:45:21:12"; java.util.TreeSet<java.lang.Integer> anqpIds = new java.util.TreeSet<>(java.util.Arrays.asList(1, 2, 5)); java.util.TreeSet<java.lang.Integer> hs20Subtypes = new java.util.TreeSet<>(java.util.Arrays.asList(3, 7)); java.lang.String expectedCommand = ("ANQP_GET " + bssid) + " 1,2,5,hs20:3,hs20:7"; assertEquals(expectedCommand, com.android.server.wifi.WifiNative.buildAnqpQueryCommand(bssid, anqpIds, hs20Subtypes)); }<END_MOD>
<START_MOD>@java.lang.Override public boolean onUpdateSource(com.android.sdklib.internal.repository.sources.SdkSource source, java.lang.Package[] newPackages) { final boolean changed = mDiffLogic.updateSourcePackages(displaySortByApi, source, newPackages); if (!(mGroupPackages.isDisposed())) { mGroupPackages.getDisplay().syncExec(new java.lang.Runnable() { @java.lang.Override public void run() { if (changed || ((mTreeViewer.getInput()) != (mDiffLogic.getCategories(isSortByApi())))) { refreshViewerInput(); } } }); } return !(mGroupPackages.isDisposed()); }<END_MOD>
<START_MOD>@javax.annotation.Nonnull public java.lang.String getVerboseVersion() { return ((((((versionName) + " '") + (releaseName)) + "' (") + ((buildId) != null ? buildId : "engineering")) + ((codeBase) != null ? ' ' + (codeBase) : "")) + ")"; }<END_MOD>
@java.lang.Override public void setUp(com.android.tradefed.device.ITestDevice device, com.android.tradefed.build.IBuildInfo buildInfo) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.TargetSetupError { for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : com.android.tradefed.targetprep.VtsDeviceInfoCollector.BUILD_KEYS.entrySet()) { buildInfo.addBuildAttribute(entry.getKey(), com.android.tradefed.util.ArrayUtil.join(",", device.getProperty(entry.getValue()))); } <START_MOD>device.executeShellCommand("stop"); <END_MOD>}
<START_MOD>private boolean findMinAbs(com.android.rs.test.RenderScript RS, float[] inputArray, java.lang.String testName, com.android.rs.test.UT_reduce.ReduceFindMinAbs reduction) { final long javaTimeStart = java.lang.System.currentTimeMillis(); final float javaRslt = findMinAbs(inputArray); final long javaTimeEnd = java.lang.System.currentTimeMillis(); final long rsTimeStart = java.lang.System.currentTimeMillis(); com.android.rs.test.Allocation inputAllocation = com.android.rs.test.Allocation.createSized(RS, com.android.rs.test.Element.F32(RS), inputArray.length); final long copyTimeStart = java.lang.System.currentTimeMillis(); inputAllocation.copyFrom(inputArray); final long kernelTimeStart = java.lang.System.currentTimeMillis(); final float rsRslt = reduction.run(inputAllocation); final long rsTimeEnd = java.lang.System.currentTimeMillis(); final boolean success = result(testName, new com.android.rs.test.UT_reduce.timing(javaTimeStart, javaTimeEnd, rsTimeStart, copyTimeStart, kernelTimeStart, rsTimeEnd, inputAllocation), java.lang.Math.abs(javaRslt), java.lang.Math.abs(rsRslt)); inputAllocation.destroy(); return success; }<END_MOD>
<START_MOD>@android.test.suitebuilder.annotation.SmallTest public void testConvertBearerBitmaskToNetworkTypeBitmask() { int networkTypeBitmask = 276600; int bearerBitmask = 276728; assertEquals(networkTypeBitmask, android.telephony.ServiceState.convertBearerBitmaskToNetworkTypeBitmask(bearerBitmask)); }<END_MOD>
@java.lang.Override public void onRemoval(@javax.annotation.Nonnull com.google.common.cache.RemovalNotification<com.android.jack.server.JackHttpServer.VersionKey, com.android.jack.server.JackHttpServer.Program<com.android.jack.api.JackProvider>> notification) { com.android.jack.server.JackHttpServer.Program<com.android.jack.api.JackProvider> program = notification.getValue(); com.android.jack.api.JackProvider provider = program.getLoadedProgram(); final java.io.File jar = program.getJar(); if (provider != null) { com.android.jack.server.JackHttpServer.logger.info(((   + (jar.getPath())) +   for deletion final java.io.File deleteMarker = new java.io.File(((jar.getPath()) + (com.android.jack.server.JackHttpServer.DELETED_SUFFIX))); try { if (!(deleteMarker.createNewFile())) { throw new java.io.IOException( already exists } } catch (java.io.IOException e) { com.android.jack.server.JackHttpServer.logger.log(java.util.logging.Level.SEVERE, (( to create delete file marker   + deleteMarker) +   aborting deletion by finalizer e); return; } <START_MOD>finalizer.registerFinalizer(new com.android.jack.server.JackHttpServer.Deleter<END_MOD>(new java.io.File[]{ deleteMarker, jar }<START_MOD>)<END_MOD>, provider.getClass().getClassLoader()); deleteMarker.deleteOnExit(); jar.deleteOnExit(); } else { com.android.jack.server.JackHttpServer.logger.info(((   + (jar.getPath())) +   immediatly if (!(jar.delete())) { com.android.jack.server.JackHttpServer.logger.log(java.util.logging.Level.SEVERE, (( to delete file   + jar) + "'")); } } }
public void testConstructor_NullSubjectDN_Failure() throws java.lang.Exception { <START_MOD>android.security.KeyPairGeneratorSpec<END_MOD> <START_MOD>spec =<END_MOD> new android.security.KeyPairGeneratorSpec(getContext(), android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1, "RSA", 1024, null, null, android.security.KeyPairGeneratorSpecTest.SERIAL_1, android.security.KeyPairGeneratorSpecTest.NOW, android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS, 0); <START_MOD>assertEquals<END_MOD>(<START_MOD>android.security.KeyPairGeneratorSpecTest.DEFAULT_CERT_SUBJECT,<END_MOD> <START_MOD>spec.getSubjectDN());<END_MOD> }
<START_MOD>static int test9(TestClass obj) { TestClass obj2 = new TestClass(); obj2.i = 1; obj.next = obj2; java.lang.System.out.println(""); return obj2.i; }<END_MOD>
@java.lang.Override public void <START_MOD>write<END_MOD>(java.io.File <START_MOD>projectDir, java.lang.String buildScriptContent<END_MOD>) throws java.io.IOException { for (com.android.build.gradle.integration.common.fixture.app.TestSourceFile srcFile : getAllSourceFiles()) { srcFile.writeToDir(<START_MOD>projectDir<END_MOD>); } }
private static boolean isLingerSocket(java.io.FileDescriptor fd) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.StructLinger linger = Libcore.os.getsockoptLinger(fd, libcore.io.SOL_SOCKET, libcore.io.SO_LINGER); return (linger.isOn()) && ((linger.l_linger) > 0); }
<START_MOD>private void broadcastConnectionState(int newState, int prevState) { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, ((((("Connection state " + (mDevice)) + ": ") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.profileStateToString(prevState))) + "->") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.profileStateToString(newState)))); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND))); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }<END_MOD>
@java.lang.Override protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor monitor) { try { com.android.ide.eclipse.adt.internal.project.ExportHelper.export(project, new java.io.File(saveLocation), null, null, monitor); com.android.ide.eclipse.adt.AdtPlugin.displayWarning( IDE Plug-in java.lang.String.format(( unsigned package of the application was saved at + (((( publishing the application you will need to: +   Sign the application with your release key, +   run zipalign on the signed package. ZipAlign is located in <SDK>/tools/ +   applications allows Android to use application resources +   efficiently. saveLocation)); return org.eclipse.core.runtime.Status.OK_STATUS; } catch (org.eclipse.core.runtime.CoreException e) { <START_MOD>com.android.ide.eclipse.adt.AdtPlugin.displayError( IDE Plug-in java.lang.String.format( exporting application: e.getMessage())); <END_MOD>return e.getStatus(); } }
@java.lang.Override public void shutdown() { if ((mBluetoothAdapter.getState()) == (android.bluetooth.BluetoothAdapter.STATE_ON)) { for (com.googlecode.android_scripting.facade.bluetooth.myAdvertiseCallback mAdvertise : mAdvertiseCallbackList.values()) { if (mAdvertise != null) { try { mBluetoothAdapter.getBluetoothLeAdvertiser().stopAdvertising(mAdvertise); } catch (java.lang.NullPointerException e) { com.googlecode.android_scripting.Log.e( to stop ble advertising. e); } } } } mAdvertiseCallbackList.clear(); mAdvertiseSettingsList.clear(); mAdvertiseDataList.clear(); }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mBuildToolInfo = com.android.builder.internal.compiler.PreDexCacheTest.getBuildToolInfo(); <START_MOD>mDxExe = new java.io.File(mBuildToolInfo.getPath(BuildToolInfo.PathId.DX)); <END_MOD>}
private static void parseTransformation(com.android.assetstudiolib.vectordrawable.SvgTree avg, org.w3c.dom.Node nNode) { org.w3c.dom.NamedNodeMap a = nNode.getAttributes(); int len = a.getLength(); for (int i = 0; i < len; i++) { org.w3c.dom.Node n = a.item(i); java.lang.String name = n.getNodeName(); java.lang.String value = n.getNodeValue(); if (com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_TRANSFORM.equals(name)) {<START_MOD> avg.logErrorLine( in SVG is not supported yet n, SvgTree.SvgLogLevel.ERROR);<END_MOD> if (value.startsWith("matrix(")) { value = value.substring("matrix(".length(), ((value.length()) - 1)); java.lang.String[] sp = value.split(   for (int j = 0; j < (sp.length); j++) { avg.matrix[j] = java.lang.Float.parseFloat(sp[j]); } } } else if (name.equals("y")) { java.lang.Float.parseFloat(value); } else if (name.equals("x")) { java.lang.Float.parseFloat(value); } } }
private vogar.tasks.Task newCreateDexJarTask(vogar.Classpath classpath, java.io.File classpathElement, java.lang.String name, vogar.Action action, java.io.File localDex<START_MOD>, java.io.File localDesugarTempDir<END_MOD>) { vogar.tasks.Task dex; if (run.useJack) { dex = new vogar.android.JackDexTask(run, classpath, run.benchmark, name, classpathElement, action, localDex); } else { dex = new vogar.android.DexTask(run.androidSdk, classpath, run.benchmark, name, classpathElement, action, localDex, <START_MOD>localDesugarTempDir, <END_MOD>run.multidex); } return dex; }
@org.junit.Test public void filterOutBlacklistedBssid() { java.lang.String[] ssids = new java.lang.String[]{ "\"test1\"" }; java.lang.String[] bssids = new java.lang.String[]{ "6c:f3:7f:ae:8c:f3" }; int[] freqs = new int[]{ 5180 }; java.lang.String[] caps = new java.lang.String[]{ "[WPA2-EAP-CCMP][ESS]" }; int[] levels = new int[]{ (mThresholdQualifiedRssi5G) + 8 }; int[] securities = new int[]{ com.android.server.wifi.WifiConfigurationTestUtil.SECURITY_PSK }; com.android.server.wifi.WifiNetworkSelectorTestUtil.ScanDetailsAndWifiConfigs scanDetailsAndConfigs = com.android.server.wifi.WifiNetworkSelectorTestUtil.setupScanDetailsAndConfigStore(ssids, bssids, freqs, caps, levels, securities, mWifiConfigManager, mClock); java.util.List<com.android.server.wifi.ScanDetail> scanDetails = scanDetailsAndConfigs.getScanDetails(); <START_MOD>java.util.ArrayList<java.lang.String> blacklist = new java.util.ArrayList<java.lang.String>(); blacklist.add(bssids[<END_MOD>0<START_MOD>]); android.net.wifi.WifiConfiguration candidate =<END_MOD> mWifiNetworkSelector.<START_MOD>selectNetwork(scanDetails, blacklist, mWifiInfo<END_MOD>, false, <START_MOD>true, false); assertEquals( null configuration null,<END_MOD> candidate<START_MOD>); }<END_MOD>
<START_MOD>public com.android.internal.telephony.IccCardStatus.CardState getCardState() { return mCardState; }<END_MOD>
private boolean isScoAcceptable() { return (mAudioRouteAllowed) && ((<START_MOD>(<END_MOD>mVoiceRecognitionStarted) || (isInCall()))<START_MOD> || (isRinging()))<END_MOD>; }
<START_MOD>@vogar.target.TestRunnerProperties(testClass = vogar.target.mixture.junit3.JUnit3Test.class, runnerType = vogar.RunnerType.JUNIT) @org.junit.Test public void testConstructor_JUnit3Test_RunnerType_JUNIT() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().success("testFoo").completedNormally(); }<END_MOD>
public void testMakeTimeZone_NoOffsets() throws java.lang.Exception { int[][] times = new int[][]{ }; int[][] offsets = new int[][]{ }; try { createZoneInfo(<START_MOD>getName(), <END_MOD>times, offsets); fail( not detect no transitions } catch (java.lang.IllegalStateException expected) { } }
public int ioctlInt(java.io.FileDescriptor fd, int cmd, android.util.MutableInt arg) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
<START_MOD>public void showDeviceSelector() { org.eclipse.jface.action.MenuManager mm = getMenuBarManager(); mm.removeAll(); org.eclipse.jface.action.MenuManager file = new org.eclipse.jface.action.MenuManager("&File"); mm.add(file); file.add(com.android.hierarchyviewer.actions.QuitAction.getAction()); org.eclipse.jface.action.MenuManager device = new org.eclipse.jface.action.MenuManager("&Device"); mm.add(device); device.add(com.android.hierarchyviewer.actions.RefreshWindowsAction.getAction()); device.add(com.android.hierarchyviewer.actions.LoadViewHierarchyAction.getAction()); device.add(com.android.hierarchyviewer.actions.InspectScreenshotAction.getAction()); mm.updateAll(true); deviceViewButton.setSelection(true); deviceViewButton.setImage(deviceViewSelectedImage); treeViewButton.setSelection(false); treeViewButton.setImage(treeViewImage); pixelPerfectButton.setSelection(false); pixelPerfectButton.setImage(pixelPerfectImage); mainWindowStackLayout.topControl = deviceSelectorPanel; mainWindow.layout(); deviceSelector.setFocus(); }<END_MOD>
<START_MOD>public void testCookieStoreEviction() throws java.lang.Exception { java.net.CookieStore cookieStore = new java.net.CookieManager().getCookieStore(); java.net.HttpCookie themeCookie = libcore.java.net.CookiesTest.createCookie("theme", "light", "a.com", "/"); cookieStore.add(new java.net.URI("http://a.com/"), themeCookie); java.net.HttpCookie sidCookie = libcore.java.net.CookiesTest.createCookie("sid", "mysid", "a.com", "/"); cookieStore.add(new java.net.URI("http://a.com/"), sidCookie); java.net.HttpCookie replacementThemeCookie = libcore.java.net.CookiesTest.createCookie("theme", "dark", "a.com", "/"); cookieStore.add(new java.net.URI("http://a.com/"), replacementThemeCookie); assertEquals("[sid=\"mysid\";$Path=\"/\";$Domain=\"a.com\", theme=\"dark\";$Path=\"/\";$Domain=\"a.com\"]", cookieStore.get(new java.net.URI("http://a.com/")).toString()); java.net.HttpCookie replacementSidCookie = libcore.java.net.CookiesTest.createCookie("sid", "mynewsid", "A.cOm", "/"); cookieStore.add(new java.net.URI("http://a.com/"), replacementSidCookie); assertEquals("[theme=\"dark\";$Path=\"/\";$Domain=\"a.com\", sid=\"mynewsid\";$Path=\"/\";$Domain=\"a.com\"]", cookieStore.get(new java.net.URI("http://a.com/")).toString()); }<END_MOD>
@com.android.annotations.Nullable public com.android.sdklib.repository.local.LocalPkgInfo getPkgInfo(@com.android.annotations.NonNull com.android.sdklib.repository.descriptors.PkgType filter, @com.android.annotations.NonNull java.lang.String vendor, @com.android.annotations.NonNull java.lang.String path) { assert (filter == (com.android.sdklib.repository.descriptors.PkgType.<START_MOD>PKG_EXTRA<END_MOD>)) || (filter == (com.android.sdklib.repository.descriptors.PkgType.PKG_ADDONS)); for (com.android.sdklib.repository.local.LocalPkgInfo pkg : getPkgsInfos(filter)) { com.android.sdklib.repository.descriptors.IPkgDesc d = pkg.getDesc(); if ((d.hasVendor()) && (vendor.equals(d.getVendor().getId()))) { if ((d.hasPath()) && (path.equals(d.getPath()))) { return pkg; } } } return null; }
<START_MOD>@java.lang.Override public void queryCallBarring(int cbType, int serviceClass, android.os.Message result) { if (com.android.ims.ImsUt.DBG) { log(((((("queryCallBarring :: Ut=" + (miUt)) + ", cbType=") + cbType) + ", serviceClass=") + serviceClass)); } synchronized(mLockObj) { try { int id = miUt.queryCallBarringForServiceClass(cbType, serviceClass); if (id < 0) { sendFailureReport(result, new com.android.ims.ImsReasonInfo(ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, 0)); return; } mPendingCmds.put(java.lang.Integer.valueOf(id), result); } catch (android.os.RemoteException e) { sendFailureReport(result, new com.android.ims.ImsReasonInfo(ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, 0)); } } }<END_MOD>
private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app != null) && (isSupportedApplication(app))) && (!(app.isReady()))) { <START_MOD>log( return false <END_MOD>return false; } }<START_MOD> log(( outside loop, return   + ((mUiccApplications[0]) != null)));<END_MOD> return (mUiccApplications[0]) != null; }
<START_MOD>@java.lang.Override public java.lang.Void call() throws java.lang.Exception { latch.countDown(); for (int j = 0; j < 100; j++) { md.update(message); md.digest(); } return null; }<END_MOD>
<START_MOD>@java.lang.SuppressWarnings("unchecked") private static java.nio.file.spi.FileSystemProvider createProvider(final java.lang.String cn) { return java.security.AccessController.doPrivileged(new java.security.PrivilegedAction<java.nio.file.spi.FileSystemProvider>() { public java.nio.file.spi.FileSystemProvider run() { java.lang.Class<java.nio.file.spi.FileSystemProvider> c; try { c = ((java.lang.Class<java.nio.file.spi.FileSystemProvider>) (java.lang.Class.forName(cn, true, null))); } catch (java.lang.ClassNotFoundException x) { throw new java.lang.AssertionError(x); } try { return c.newInstance(); } catch (java.lang.IllegalAccessException x) { throw new java.lang.AssertionError(x); } catch (java.lang.InstantiationException x) { throw new java.lang.AssertionError(x); } } }); }<END_MOD>
public java.lang.String getDisplayName() { return java.lang.String.format( touchscreen at (%d, %d) com.android.monkeyrunner.recorder.actions.TouchAction.DOWNUP_FLAG_MAP.get(direction), x, y); }
@com.android.annotations.NonNull public static com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration create(@com.android.annotations.NonNull com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration other, @com.android.annotations.NonNull com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration values, @com.android.annotations.NonNull com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration parent) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration configuration = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration(other.mConfigChooser, parent); configuration.<START_MOD>mOverride = other.mOverride; configuration.<END_MOD>setDisplayName(values.getDisplayName()); configuration.setActivity(values.getActivity()); <START_MOD>if (configuration.isOverridingLocale()<END_MOD>) { configuration.setLocale(values.getLocale(), true); } <START_MOD>if (configuration.isOverridingTarget()<END_MOD>) { configuration.setTarget(values.getTarget(), true); } <START_MOD>if (configuration.isOverridingDevice()<END_MOD>) { configuration.setDevice(values.getDevice(), true); } if (configuration.<START_MOD>isOverridingDeviceState()<END_MOD>) { configuration.setDeviceState(values.getDeviceState(), true); } <START_MOD>if (configuration.isOverridingNightMode()<END_MOD>) { configuration.setNightMode(values.getNightMode(), true); } <START_MOD>if (configuration.isOverridingUiMode()<END_MOD>) { configuration.setUiMode(values.getUiMode(), true); } <START_MOD>configuration.syncFolderConfig(); <END_MOD>return configuration; }
public native <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.StructStat stat(java.lang.String path) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
@org.junit.Test public void testLamba029() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA029).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
private <START_MOD>IpConnectivityMetrics.Logger<END_MOD> <START_MOD>metricsLogger() { return checkNotNull<END_MOD>(com.android.server.<START_MOD>LocalServices<END_MOD>.<START_MOD>getService(IpConnectivityMetrics.Logger.class)<END_MOD>,   <START_MOD>IpConnectivityMetrics<END_MOD> <START_MOD>service<END_MOD> }
@com.android.annotations.Nullable java.lang.String computePreferredTheme() { org.eclipse.core.resources.IProject project = mConfigChooser.getProject(); com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo manifest = com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo.get(project); com.android.resources.ScreenSize screenSize = null; com.android.sdklib.devices.Device device = getDevice(); if (device != null) { java.util.List<com.android.sdklib.devices.State> states = device.getAllStates(); for (com.android.sdklib.devices.State state : states) { com.android.ide.common.resources.configuration.FolderConfiguration folderConfig = com.android.ide.common.resources.configuration.DeviceConfigHelper.getFolderConfig(state); if (folderConfig != null) { com.android.ide.common.resources.configuration.ScreenSizeQualifier qualifier = folderConfig.getScreenSizeQualifier(); screenSize = qualifier.getValue(); break; } } } java.lang.String defaultTheme = manifest.getDefaultTheme(getTarget(), screenSize); java.lang.String preferred = defaultTheme; if ((getTheme()) == null) { java.lang.String activity = getActivity(); if (activity != null) { <START_MOD>preferred<END_MOD> = manifest.<START_MOD>getActivityInfos()<END_MOD>.get(activity)<START_MOD>.getTheme()<END_MOD>; } if (preferred == null) { preferred = defaultTheme; } setTheme(preferred); } return preferred; }
<START_MOD>public java.util.Set<android.net.IpPrefix> getLocalPrefixes() { return mLastLocalPrefixes; }<END_MOD>
private com.android.jack.sample.instrumentation.JStatement createPrintlnStatement(@javax.annotation.Nonnull com.android.jack.sample.instrumentation.JMethod method) { com.android.jack.ir.sourceinfo.SourceInfo sourceInfo = com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN; java.lang.String methodName = getMethodName(method); com.android.jack.sample.instrumentation.JStringLiteral methodNameString = new com.android.jack.sample.instrumentation.JStringLiteral(sourceInfo, methodName); com.android.jack.sample.instrumentation.JFieldRef systemOutFieldAccess = new com.android.jack.sample.instrumentation.JFieldRef(sourceInfo, null, systemOutFieldId, javaLangSystemClass); com.android.jack.sample.instrumentation.JMethodCall methodCall = new com.android.jack.sample.instrumentation.JMethodCall(sourceInfo, systemOutFieldAccess, javaIoPrintStreamClass, printlnMethod, true); methodCall.addArg(methodNameString); return new com.android.jack.sample.instrumentation.JExpressionStatement(methodCall.getSourceInfo(), methodCall); }
@android.test.suitebuilder.annotation.SmallTest public void testSatisfiedNetworkRequestDoesNotTriggerOnUnavailable() { android.net.NetworkRequest nr = new android.net.NetworkRequest.Builder().addTransportType(NetworkCapabilities.TRANSPORT_WIFI).build(); final com.android.server.ConnectivityServiceTest.TestNetworkCallback networkCallback = new com.android.server.ConnectivityServiceTest.TestNetworkCallback(); mCm.requestNetwork(nr, networkCallback, <START_MOD>150<END_MOD>); mWiFiNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_WIFI); mWiFiNetworkAgent.connect(false); networkCallback.expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE, mWiFiNetworkAgent<START_MOD>,<END_MOD> <START_MOD>150<END_MOD>); networkCallback.assertNoCallback(); }
private static <START_MOD><S extends com.android.builder.model.Groupable & org.gradle.api.Named> <END_MOD>void createProductFlavorCombinations(java.util.List<com.android.build.gradle.internal.ProductFlavorCombo<START_MOD><S><END_MOD>> flavorGroups, <START_MOD>java.util.List<S> group, int index, java.util.List<java.lang.String> flavorDimensionList, com.google.common.collect.ListMultimap<java.lang.String, S> map) { if (index == (flavorDimensionList.size())) { flavorGroups.add(new <END_MOD>com.android.<START_MOD>build.gradle.internal.ProductFlavorCombo<S>(com.google.common.collect.Iterables.filter(group, com.google.common.base.Predicates.notNull()))); return; } java.lang.String dimension = flavorDimensionList.get(<END_MOD>index<START_MOD>);<END_MOD> java.util.List<<START_MOD>S> flavorList = map.get(dimension); if (flavorList.isEmpty()) { throw new java.lang.RuntimeException(<END_MOD>java.lang.String<START_MOD>.format( flavor is associated with flavor dimension '%1$s'. dimension)); } else { for (S flavor : flavorList) { group.add(flavor); com.android.build.gradle.internal.ProductFlavorCombo.createProductFlavorCombinations(flavorGroups, group, (index + 1),<END_MOD> flavorDimensionList, map)<START_MOD>; group.remove(((group<END_MOD>.size())<START_MOD> -<END_MOD> 1)<START_MOD>); } } }<END_MOD>
public static java.awt.image.BufferedImage convertToAwt(org.eclipse.swt.graphics.Image swtImage) { org.eclipse.swt.graphics.ImageData <START_MOD>swtData<END_MOD> = swtImage.getImageData(); java.awt.image.BufferedImage awtImage = new java.awt.image.BufferedImage(<START_MOD>swtData<END_MOD>.width, <START_MOD>swtData<END_MOD>.height, java.awt.image.BufferedImage.TYPE_INT_ARGB); org.eclipse.swt.graphics.PaletteData <START_MOD>swtPal = swtData.<END_MOD>palette; if (<START_MOD>swtPal<END_MOD>.isDirect) { <START_MOD>org.eclipse.swt.graphics.PaletteData awtPal = com.android.ide.eclipse.adt.internal.editors.layout.gle2.SwtUtils.getAwtPaletteData(awtImage.getType()); if (swtPal.equals(awtPal)) { <END_MOD>for (int y = 0; y < (<START_MOD>swtData<END_MOD>.height); y++) { for (int x = 0; x < (<START_MOD>swtData<END_MOD>.width); x++) { int pixel = <START_MOD>swtData<END_MOD>.getPixel(x, y); awtImage.setRGB(x, y, (-16777216 | pixel)); } } } else { <START_MOD>int sr = (-(awtPal.redShift)) + (swtPal.redShift); int sg = (-(awtPal.greenShift)) + (swtPal.greenShift); int sb = (-(awtPal.blueShift)) + (swtPal.blueShift); for (int y = 0; y < (swtData.height); y++) { for (int x = 0; x < (swtData.width); x++) { int pixel = swtData.getPixel(x, y); int r = pixel & (swtPal.redMask); int g = pixel & (swtPal.greenMask); int b = pixel & (swtPal.blueMask); r = (sr < 0) ? r >>> (-sr) : r << sr; g = (sg < 0) ? g >>> (-sg) : g << sg; b = (sb < 0) ? b >>> (-sb) : b << sb; pixel = ((-16777216 | r) | g) | b; awtImage.setRGB(x, y, pixel); } } } } else { <END_MOD>return null; } return awtImage; }
private void onConnectionStateChanged(int prevState, int state) { if ((mDevice) == null) { return; } if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, ((((( state   + (mDevice)) +     + prevState) + "->") + state)); } <START_MOD>if ((prevState != state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.MAP_CLIENT); } <END_MOD>android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothMapClient.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }
private void addLibraryProjects(@com.android.annotations.NonNull java.util.Collection<com.android.tools.lint.detector.api.Project> collection<START_MOD>, @com.android.annotations.NonNull java.util.Set<com.android.tools.lint.detector.api.Project> seen<END_MOD>) { for (com.android.tools.lint.detector.api.Project library : mDirectLibraries) { <START_MOD>if (seen.contains(library)) { mClient.log(Severity.WARNING, null,   lint error: encountered %1$s more than once library); continue; } <END_MOD>collection<START_MOD>.add(library); seen<END_MOD>.add(library); library.addLibraryProjects(collection<START_MOD>, seen<END_MOD>); } }
private boolean patternDuplicateAnonymousResult(<START_MOD>android.renderscript.RenderScript RS, <END_MOD>com.android.rs.test.<START_MOD>ScriptC_reduce s) { boolean pass = true; final int inputSize = 1000; final int[] input = createInputArrayInt(149, ((java.lang.Integer.MAX_VALUE) / inputSize)); final int[] javaRsltDec = sillySumIntoDecArray(input); final int[] rsRsltDec = s.reduce_sillySumIntoDecArray(input).get(); pass &= result( (Dec) new<END_MOD> com.android.rs.test.<START_MOD>UT_reduce.timing(inputSize), javaRsltDec, rsRsltDec); final int[] javaRsltInc = sillySumIntoIncArray(input); final int[] rsRsltInc =<END_MOD> s<START_MOD>.reduce_sillySumIntoIncArray<END_MOD>(input).get(); pass &= result( (<START_MOD>Inc<END_MOD>) new com.android.rs.test.UT_reduce.timing(inputSize), <START_MOD>javaRsltInc, rsRsltInc<END_MOD>); return pass; }
<START_MOD>public void testCompareTo() { com.android.sdklib.xml.ManifestData.SupportsScreens supportsS = new com.android.sdklib.xml.ManifestData.SupportsScreens("false|false|true|false|false"); com.android.sdklib.xml.ManifestData.SupportsScreens supportsN = new com.android.sdklib.xml.ManifestData.SupportsScreens("false|false|false|true|false"); com.android.sdklib.xml.ManifestData.SupportsScreens supportsL = new com.android.sdklib.xml.ManifestData.SupportsScreens("false|false|false|false|true"); com.android.sdklib.xml.ManifestData.SupportsScreens supportsSN = new com.android.sdklib.xml.ManifestData.SupportsScreens("false|false|true|true|false"); com.android.sdklib.xml.ManifestData.SupportsScreens supportsNL = new com.android.sdklib.xml.ManifestData.SupportsScreens("false|false|false|true|true"); com.android.sdklib.xml.ManifestData.SupportsScreens supportsSL = new com.android.sdklib.xml.ManifestData.SupportsScreens("false|false|true|false|true"); com.android.sdklib.xml.ManifestData.SupportsScreens supportsSNL = new com.android.sdklib.xml.ManifestData.SupportsScreens("false|false|true|true|true"); assertEquals((-1), supportsS.compareTo(supportsN)); assertEquals(1, supportsN.compareTo(supportsS)); assertEquals((-1), supportsN.compareTo(supportsL)); assertEquals((-1), supportsS.compareTo(supportsL)); assertEquals((-1), supportsSN.compareTo(supportsNL)); assertEquals((-1), supportsSN.compareTo(supportsSNL)); try { supportsSL.compareTo(supportsN); fail("Should have thrown IllegalArgumentException"); } catch (java.lang.IllegalArgumentException e) { } }<END_MOD>
<START_MOD>@java.lang.Override public void onRttInitiationFailure(java.lang.String callId) throws android.os.RemoteException { }<END_MOD>
public void preDexLibrary(@com.android.annotations.NonNull java.io.File inputFile, @com.android.annotations.NonNull java.io.File outFile, @com.android.annotations.NonNull com.android.builder.core.DexOptions dexOptions, @com.android.annotations.NonNull com.android.sdklib.BuildToolInfo buildToolInfo, boolean verbose, @com.android.annotations.NonNull com.android.ide.common.internal.CommandLineRunner commandLineRunner) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException {<START_MOD> com.android.builder.internal.compiler.DexKey itemKey = com.android.builder.internal.compiler.DexKey.of(inputFile, buildToolInfo.getRevision(), dexOptions.getJumboMode());<END_MOD> com.android.utils.Pair<com.android.builder.internal.compiler.Item, java.lang.Boolean> pair = getItem(<START_MOD>itemKey, <END_MOD>inputFile, outFile<START_MOD>); if (pair.getSecond()) { try { com.android.builder.core.AndroidBuilder.preDexLibrary(inputFile, outFile, dexOptions<END_MOD>, buildToolInfo, <START_MOD>verbose, commandLineRunner); synchronized(this) { (mMisses)++; } } catch (java.io.IOException exception) { outFile.delete(); throw exception; } catch (com.android.ide.common.internal.LoggedErrorException exception) { outFile.delete(); throw exception; } catch (java.lang.InterruptedException exception) { outFile.delete(); throw exception; } finally { pair.getFirst().getLatch().countDown(); } } else { pair.getFirst().getLatch().await(); java.io.File fromFile = pair.getFirst().getOutputFile(<END_MOD>); if (<START_MOD>fromFile.isFile()) { com.google.common.io.Files.copy(<END_MOD>pair.<START_MOD>getFirst().getOutputFile(), outFile<END_MOD>); synchronized(this) { (<START_MOD>mHits<END_MOD>)++; } } <START_MOD>} }<END_MOD>
@java.lang.Override protected void doFullTaskAction() { com.google.common.collect.SetMultimap<java.<START_MOD>io.File, java.io.File> generatedFiles = com.google.common.collect.HashMultimap.create(); emptyFolder(getOutputResDirectory()); emptyFolder(getGeneratedResDirectory()); emptyFolder(getIncrementalFolder()); com.android.ide.common.res2.PreprocessDataSet mergedSet = new com.android.ide.common.res2.PreprocessDataSet(getVariantName(), PreprocessDataSet.ResourcesDirectory.MERGED); mergedSet.addSource(getMergedResDirectory()); mergedSet.setMergedResDirectory(getMergedResDirectory()); com.android.ide.common.res2.PreprocessDataSet generatedSet = new com.android.ide.common.res2.PreprocessDataSet(getVariantName(), PreprocessDataSet.ResourcesDirectory.GENERATED); generatedSet.addSource(getMergedResDirectory()); generatedSet.setGeneratedResDirectory(getGeneratedResDirectory()); generatedSet.setGeneratedFiles(generatedFiles); try { for (java.io.File resourceFile : getProject().fileTree(getMergedResDirectory())) { handleFile(resourceFile, FileStatus.NEW, mergedSet, generatedSet, generatedFiles); } com.android.ide.common.res2.PreprocessResourcesMerger merger = new com.android.ide.common.res2.PreprocessResourcesMerger(); merger.addDataSet(generatedSet); merger.addDataSet(mergedSet); com.android.ide.common.res2.PreprocessResourcesWriter writer = new com.android.ide.common.res2.PreprocessResourcesWriter(getOutputResDirectory()); merger.mergeData(writer, true); merger.writeBlobTo(getIncrementalFolder(), writer); } catch (com.android.ide.common.res2.MergingException e) { throw new java.<END_MOD>lang.<START_MOD>RuntimeException(e); } catch (java.io.IOException e) { throw new<END_MOD> java.lang.<START_MOD>RuntimeException(e<END_MOD>); } }
@java.lang.Override public void performApply(org.eclipse.debug.core.ILaunchConfigurationWorkingCopy configuration) { configuration.setAttribute(LaunchConfigDelegate.ATTR_TARGET_MODE, <START_MOD>getCurrentTargetMode().ordinal()); com.android.sdklib.internal.avd.AvdInfo avd = mPreferredAvdSelector.getSelected(); if (avd != null) { configuration.setAttribute(LaunchConfigDelegate.ATTR_AVD_NAME, avd.getName()); } else { configuration.setAttribute(LaunchConfigDelegate.ATTR_AVD_NAME, ((java.lang.String) (null))); } configuration.setAttribute(LaunchConfigDelegate.ATTR_SPEED, mSpeedCombo.getSelectionIndex()); configuration.setAttribute(LaunchConfigDelegate.ATTR_DELAY, mDelayCombo.getSelectionIndex()); configuration.setAttribute(LaunchConfigDelegate.ATTR_COMMANDLINE, mEmulatorCLOptions.getText()); configuration.setAttribute(LaunchConfigDelegate.ATTR_WIPE_DATA, mWipeDataButton<END_MOD>.getSelection()); <START_MOD>configuration.setAttribute(LaunchConfigDelegate.ATTR_NO_BOOT_ANIM, mNoBootAnimButton.getSelection<END_MOD>()); }
public void createAndroidTasks(@com.android.annotations.Nullable com.android.builder.model.SigningConfig signingOverride) { variantFactory.validateModel(this); if (!(productFlavors.isEmpty())) { org.gradle.api.Task assembleTest = project.getTasks().create("assembleAndroidTest"); assembleTest.setGroup(org.gradle.api.plugins.BasePlugin.BUILD_GROUP); assembleTest.setDescription( all the Test applications basePlugin.setAssembleAndroidTest(assembleTest); } if (variantDataList.isEmpty()) { populateVariantDataList(signingOverride); } for (com.android.build.gradle.internal.variant.BaseVariantData variantData : variantDataList) { createTasksForVariantData(project.getTasks(), variantData); } <START_MOD>taskManager<END_MOD>.createLintTasks(); <START_MOD>taskManager<END_MOD>.createConnectedCheckTasks((!(productFlavors.isEmpty())), false); <START_MOD>taskManager<END_MOD>.createUnitTestTasks(); createApiObjects(); }
private void loadConfig() throws com.android.sched.util.file.NotFileException, com.android.sched.util.file.WrongPermissionException, java.io.IOException { com.android.jack.server.JackHttpServer.logger.log(java.util.logging.Level.INFO, ( config of jack server version:   + (getVersion().getVerboseVersion()))); com.android.jack.server.ConfigFile config = new com.android.jack.server.ConfigFile(serverDir); checkAccess(config.getStorageFile(), java.util.EnumSet.of(java.nio.file.attribute.PosixFilePermission.OWNER_READ, java.nio.file.attribute.PosixFilePermission.OWNER_WRITE)); portService = config.getServicePort(); portAdmin = config.getAdminPort(); <START_MOD>maxJarSize = config.getMaxJarSize(); delayedTasks.clear(); int <END_MOD>timeout = config.getTimeout(); <START_MOD>if (timeout != (ConfigFile.TIME_DISABLED_VALUE)) { delayedTasks.add(new com.android.jack.server.JackHttpServer.DelayedTask((timeout * 1000L)) { @java.lang.Override public void run() { freeLoadedPrograms(); } }); } int idle = config.getIdleDelay(); if (idle != (ConfigFile.TIME_DISABLED_VALUE)) { delayedTasks.add(new com.android.jack.server.JackHttpServer.DelayedTask((idle * 1000L)) { @java.lang.Override public void run() { enterIdleMode(); } }); }<END_MOD> maxServices = config.getMaxServices(); java.util.List<com.android.sched.util.codec.PairCodec.Pair<java.lang.Integer, java.lang.Long>> maxServicesByMem = config.getMaxServiceByMem(); if (!(maxServicesByMem.isEmpty())) { long maxMemory = java.lang.Runtime.getRuntime().maxMemory(); for (com.android.sched.util.codec.PairCodec.Pair<java.lang.Integer, java.lang.Long> pair : maxServicesByMem) { if (maxMemory < (pair.getSecond().longValue())) { maxServices = java.lang.Math.min(pair.getFirst().intValue(), maxServices); } } } if ((config.isModified()) && ((config.getConfigVersion()) < (ConfigFile.CURRENT_CONFIG_VERSION))) { config.store(); } }
public void addU64(android.support.v8.renderscript.Long3 v) { if (shouldThunk()) { mN.addU64(new android.renderscript.Long3(v.x, v.y, v.z)); return; } addU64(v.x); addU64(v.y); addU64(v.z); }
public static org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance(java.io.InputStream in, java.lang.String encoding) throws java.security.cert.CertificateException { <START_MOD>try { <END_MOD>if (<START_MOD>org.apache.harmony.security.provider.cert.X509CertPathImpl.PKI_PATH_NAME.equals(encoding)) { return ((org.apache.harmony.security.provider.cert.X509CertPathImpl) (org.apache.harmony.security.provider.cert.X509CertPathImpl.ASN1.decode(in))); } else if (org.apache.harmony.security.provider.cert.X509CertPathImpl.PKCS7_NAME.equals(encoding)) { return org.apache.harmony.security.provider.cert.X509CertPathImpl.getCertPathFromContentInfo(((org.apache.harmony.security.pkcs7.ContentInfo) (ContentInfo.ASN1.decode(in)))); } else<END_MOD> { throw new java.security.cert.CertificateException(<START_MOD>( encoding:   + encoding)); } } catch (java.io.IOException e<END_MOD>) { throw new java.security.cert.CertificateException( <START_MOD>decoding CertPath<END_MOD> e)<START_MOD>; } }<END_MOD>
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testModemSuggestNoRetry() throws java.lang.Exception { com.android.internal.telephony.dataconnection.DataCallResponse response = new com.android.internal.telephony.dataconnection.DataCallResponse(<START_MOD>0,<END_MOD> java.lang.Integer.MAX_VALUE<START_MOD>, 1, 2, "IP", "rmnet_data7", "12.34.56.78", "98.76.54.32", "11.22.33.44", "", 1440)<END_MOD>; android.os.AsyncResult ar = new android.os.AsyncResult(null, response, null); assertEquals(RetryManager.NO_RETRY, getSuggestedRetryDelay(ar)); }
<START_MOD>public static long ShlLong33(long arg) { long imm = 33; return arg << imm; }<END_MOD>
private boolean ensureConnectedLocked(<START_MOD>java.lang.String iface<END_MOD>) { if (mConnected) { return true; } if (mVerboseLoggingEnabled) android.util.Log.d(com.android.server.wifi.WifiMonitor.TAG,   to supplicant int connectTries = 0; <START_MOD>mWifiNative.initializeSupplicantHal(); <END_MOD>while (true) { if (mWifiNative.connectToSupplicant()) { mConnected = true; new com.android.server.wifi.WifiMonitor.MonitorThread(mWifiNative.getLocalLog()).start(); return true; } if ((connectTries++) < 5) { try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException ignore) { } } else { return false; } } }
private com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor createSearchable(java.util.Map<java.lang.String, com.android.ide.<START_MOD>common.platformData<END_MOD>.DeclareStyleableInfo> searchableStyleMap, com.android.ide.eclipse.adt.internal.editors.descriptors.XmlnsAttributeDescriptor xmlns) { com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor action_key = createElement(searchableStyleMap, "SearchableActionKey", "actionkey",   Key null, null, null, false); com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor searchable = createElement(searchableStyleMap, "Searchable", "searchable", "Searchable", null, xmlns, new com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor[]{ action_key }, false); return searchable; }
<START_MOD>public boolean launchTraceview(java.lang.String osPath) { if ((mTraceviewLaunchers) != null) { for (com.android.ide.eclipse.ddms.ITraceviewLauncher launcher : mTraceviewLaunchers) { try { if (launcher.openFile(osPath)) { return true; } } catch (java.lang.Throwable t) { t.printStackTrace(); } } } return false; }<END_MOD>
@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.<START_MOD>OutputRootVDir<END_MOD> parseString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) { try { return checkString(context, string); } catch (com.android.sched.util.codec.ParsingException e) { throw new com.android.sched.util.config.ConfigurationError(e); } }
public void testSetDecimalFormatSymbolsAsNull() { java.text.DecimalFormat format = ((java.text.DecimalFormat) (java.text.<START_MOD>NumberFormat<END_MOD>.getInstance())); format.setDecimalFormatSymbols(null); }
private void updateAccessPointsDelayed() { if ((((getActivity()) != null) && (!(mIsRestricted))) && (mWifiManager.isWifiEnabled())) { <START_MOD>getView().removeCallbacks(mUpdateAccessPointsRunnable); <END_MOD>setProgressBarVisible(true); getView().postDelayed(mUpdateAccessPointsRunnable, 300); } }
@java.lang.Override public java.util.List<android.content.pm.PackageInfo> getInstalledPackages(int flags) { try { <START_MOD>java.util.List<android.content.pm.PackageInfo> finalList; java.util.List<android.content.pm.PackageInfo> packages = mPM.getInstalledPackages((flags & (GET_UNINSTALLED_PACKAGES))); if ((flags == 0) || (flags == (GET_UNINSTALLED_PACKAGES))) { finalList = packages; } else { finalList = new java.util.LinkedList<android.content.pm.PackageInfo>(); for (android.content.pm.PackageInfo p : packages) { if ((p.applicationInfo) != null) { android.content.pm.PackageInfo pi = mPM.getPackageInfo(p.packageName, flags); if (pi != null) { finalList.add(pi); } } } } <END_MOD>return <START_MOD>finalList<END_MOD>; } catch (android.os.RemoteException e) { throw new java.lang.RuntimeException( manager has died e); } }
@java.lang.Override public void call(org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams response) { if (((response.output) != null) && ((response.output.which()) == (RunOutput.Tag.QueryVersionResult))) { mVersion = response.output.getQueryVersionResult().version; } callback.call(mVersion); }
@org.junit.Test public void <START_MOD>testSNIPER_3D<END_MOD>() throws java.io.IOException, java.lang.InterruptedException { startApp(<START_MOD>ApkInfo<END_MOD>.SNIPER_3D); }
public java.lang.String getName() { <START_MOD>assert<END_MOD> <START_MOD>!<END_MOD>(isLocal)<START_MOD>;<END_MOD> return deviceName; }
@org.junit.Test public void testSuperReferenceExpressionWithVarArgs() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_18).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
public static java.lang.String asString(com.android.tools.perflib.heap.Instance inst) { if (!(com.android.ahat.InstanceUtils.isInstanceOfClass(inst, "java.lang.String"))) { return null; } char[] value = com.android.ahat.InstanceUtils.getCharArrayField(inst, "value"); <START_MOD>if (value == null) { <END_MOD>return <START_MOD>null; } int offset = 0; int count = value.length; java.lang.Integer offsetField = com.android.ahat.InstanceUtils.getIntField(inst, "offset"); if (offsetField != null) { offset = offsetField; } java.lang.Integer countField = com.android.ahat.InstanceUtils.getIntField(inst, "count"); if (countField != null) { count = countField; } return <END_MOD>value == null ? null : new java.lang.String(value<START_MOD>, offset, count); }<END_MOD>
static void read(java.nio.channels.SocketChannel chan, byte[] data) throws com.android.ddmlib.TimeoutException, java.io.IOException<START_MOD>, java.lang.InterruptedException<END_MOD> { com.android.ddmlib.AdbHelper.read(chan, data, (-1), com.android.ddmlib.DdmPreferences.getTimeOut()); }
<START_MOD>private boolean shouldTurnOffFullNetworkUpdate() { return (mIsPowerSaveOn) || (((!(mIsCharging)) && (!(mIsInteractive))) && (!(mIsTetheringOn))); }<END_MOD>
public final void onSmsStatusReportReceived(int token, int messageRef, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException( not ready. } try { mListener.onSmsStatusReportReceived(token, messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, ( not process sms status report:   + (e.getMessage()))); acknowledgeSmsReport(token, messageRef, android.telephony.ims.stub.STATUS_REPORT_STATUS_ERROR); } } }
public void serviceDoneExecutingLocked(com.android.server.am.ServiceRecord r, boolean inStopping) { (r.executeNesting)--; if (((r.executeNesting) <= 0) && ((r.app) != null)) { r.app.executingServices.remove(r); if ((r.app.executingServices.size()) == 0) { mHandler.removeMessages(com.android.server.am.ActivityManagerService.SERVICE_TIMEOUT_MSG, r.app); } if (inStopping) { mStoppingServices.remove(r); <START_MOD>if ((r.bindings.size()) > 0) { java.util.Iterator<com.android.server.am.IntentBindRecord> it = r.bindings.values().iterator(); while (it.hasNext()) { com.android.server.am.IntentBindRecord record = it.next(); record.binder = null; record.requested = record.received = record.hasBound = false; } java.lang.System.gc(); } <END_MOD>} updateOomAdjLocked(r.app); } }
public void finish(@javax.annotation.Nonnull java.io.OutputStream out) throws java.io.IOException {<START_MOD> cstManager.addNotRelocatableString(dexResult.getStringIds().intern(com.android.jack.tools.merger.JackMerger.getDexTag()).getValue());<END_MOD> dexResult.prepare(cstManager.getCstIndexMaps()); if (!(cstManager.validate(dexResult))) { throw new java.lang.AssertionError(); } dexResult.writeTo(out, null, false); finished = true; }
public java.lang.String getDisplayLanguage(java.util.Locale locale) { if (languageCode.isEmpty()) { return ""; } <START_MOD>final<END_MOD> <START_MOD>java.lang.String normalizedLanguage =<END_MOD> java.util.Locale.Builder.normalizeAndValidateLanguage(languageCode<START_MOD>, false<END_MOD>); <START_MOD>if<END_MOD> (<START_MOD>"und"<END_MOD>.<START_MOD>equals(normalizedLanguage)<END_MOD>) { return languageCode; } java.lang.String result = libcore.icu.ICU.getDisplayLanguage(this, locale); if (result == null) { result = libcore.icu.ICU.getDisplayLanguage(this, java.util.Locale.getDefault()); } return result; }
public native int getsockoptByte(java.io.FileDescriptor fd, int level, int option) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
@org.junit.Test<START_MOD> @java.lang.Runtime<END_MOD> @com.android.jack.test.junit.KnownIssue public void testDefaultMethod006() throws java.lang.Exception { run(DEFAULTMETHOD006); }
@java.lang.Override public boolean processMessage(android.os.Message msg) { log(("IdleState.processMessage:" + (msg.what))); if (com.android.internal.telephony.InboundSmsHandler.DBG) log(( state processing message type   + (msg.what))); switch (msg.what) { case com.android.internal.telephony.InboundSmsHandler.EVENT_NEW_SMS : case com.android.internal.telephony.InboundSmsHandler.EVENT_INJECT_SMS : case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_SMS : deferMessage(msg); transitionTo(mDeliveringState); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.<START_MOD>EVENT_RETURN_TO_IDLE : return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_COMPLETE : case com.android.internal.telephony.InboundSmsHandler.EVENT_START_ACCEPTING_SMS : default : return NOT_HANDLED;<END_MOD> } }
@javax.annotation.Nonnull public static java.io.File createTempFile(@javax.annotation.Nonnull java.lang.String prefix) throws com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotSetPermissionException, com.android.sched.util.file.<START_MOD>CannotUnsetPermissionException<END_MOD> { return com.android.sched.util.file.Files.createTempFile(prefix, ""); }
<START_MOD>@java.lang.Override public void connect() throws java.io.IOException { try { is = vFile.getInputStream(); } catch (com.android.sched.util.file.WrongPermissionException e) { throw new java.io.IOException(e); } }<END_MOD>
public void testConfig() throws java.lang.Exception { if (android.security.cts.EncryptionTest.cpuHasAes()) { assertTrue(((android.security.cts.EncryptionTest.crypto) +   is missing xts-aes-ce <START_MOD>(or xts-aes-aesni) ((<END_MOD>hasKernelCrypto("xts-aes-ce"))<START_MOD> || (hasKernelCrypto("xts-aes-aesni"))))<END_MOD>; } else if (android.security.cts.EncryptionTest.cpuHasNeon()) { assertTrue(((android.security.cts.EncryptionTest.crypto) +   is missing xts-aes-neon (or xts-aes-neonbs) (((hasKernelCrypto("xts-aes-neon")) || (hasKernelCrypto("xts-aes-neonbs"))) || (hasKernelCrypto("aes-asm")))); } if (android.security.cts.EncryptionTest.cpuHasNeon()) { assertTrue( must have NEON android.security.cts.EncryptionTest.neonIsEnabled()); } }
<START_MOD>@java.lang.Override public void provideConstructorArguments(java.util.List<org.apache.harmony.jpda.tests.framework.jdwp.Value> constructorArguments) { long debuggeeClassId = getClassIDBySignature(getDebuggeeClassSignature()); long byteArrayFieldId = checkField(debuggeeClassId, "BYTE_ARRAY"); long stringCharsetFieldId = checkField(debuggeeClassId, "STRING_CHARSET"); org.apache.harmony.jpda.tests.framework.jdwp.Value byteArrayValue = debuggeeWrapper.vmMirror.getReferenceTypeValue(debuggeeClassId, byteArrayFieldId); org.apache.harmony.jpda.tests.framework.jdwp.Value stringCharsetValue = debuggeeWrapper.vmMirror.getReferenceTypeValue(debuggeeClassId, stringCharsetFieldId); constructorArguments.add(byteArrayValue); constructorArguments.add(stringCharsetValue); }<END_MOD>
<START_MOD>private static void checkRemaining(java.io.DataInputStream in, int length) throws java.io.IOException { if (length < 0) { throw new java.io.IOException(("Length is negative: " + length)); } if (length > (in.available())) { throw new java.io.IOException(((("Length of blob is longer than available: " + length) + " > ") + (in.available()))); } }<END_MOD>
private void readStack(@javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame<org.objectweb.asm.tree.analysis.BasicValue> frame, int stackIdx) throws java.io.IOException, java.lang.IndexOutOfBoundsException { <START_MOD>com.android.jill.frontend.java.Variable stackVariable = <END_MOD>getStackVariable(frame, stackIdx)<START_MOD>; java.lang.Object value = varWithCstValue.remove(stackVariable); if (value != null) { writeValue(value, currentClass, currentLine<END_MOD>); }<START_MOD> else { writeLocalRef(stackVariable); } }<END_MOD>
<START_MOD>private void checkPowFloat2Float2() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testPowFloat2Float2(inX, out); verifyResultsPowFloat2Float2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testPowFloat2Float2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testPowFloat2Float2(inX, out); verifyResultsPowFloat2Float2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testPowFloat2Float2: " + (e.toString()))); } }<END_MOD>
void registerServerSocket(java.lang.String socketName) { if ((mServerSocket) == null) { int fileDesc; final java.lang.String fullSocketName = (com.android.internal.os.ZygoteServer.ANDROID_SOCKET_PREFIX) + socketName; try { java.lang.String env = java.lang.System.getenv(fullSocketName); fileDesc = java.lang.Integer.parseInt(env); } catch (java.lang.RuntimeException ex) { throw new java.lang.RuntimeException((fullSocketName +   unset or invalid ex); } try { java.io.FileDescriptor fd = new java.io.FileDescriptor(); fd.setInt$(fileDesc); mServerSocket = new android.net.LocalServerSocket(fd); <START_MOD>mCloseSocketFd = true; <END_MOD>} catch (java.io.IOException ex) { throw new java.lang.RuntimeException((( binding to local socket   + fileDesc) + "'"), ex); } } }
@org.junit.BeforeClass public static void setupClass() throws com.android.sched.util.config.ConfigurationException { com.android.jack.annotation.processor.AnnotationProcessorTests.noConfigProcessors = null; com.android.jack.annotation.processor.AnnotationProcessorTests.autoProcessors = null; }
<START_MOD>public void test_OpenSSLKey_toJava() throws java.lang.Exception { org.apache.harmony.xnet.provider.jsse.OpenSSLKey key1; java.math.BigInteger e = java.math.BigInteger.valueOf(65537); key1 = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.RSA_generate_key_ex(1048, e.toByteArray())); assertTrue(((key1.getPublicKey()) instanceof java.security.interfaces.RSAPublicKey)); key1 = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.DSA_generate_key(1024, null, null, null, null)); assertTrue(((key1.getPublicKey()) instanceof java.security.interfaces.DSAPublicKey)); int group1 = org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL; try { group1 = org.apache.harmony.xnet.provider.jsse.NativeCrypto.EC_GROUP_new_by_curve_name("prime256v1"); key1 = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.EC_KEY_generate_key(group1)); } finally { if (group1 != (org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL)) { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EC_GROUP_clear_free(group1); } } assertTrue(((key1.getPublicKey()) instanceof java.security.interfaces.ECPublicKey)); }<END_MOD>
@javax.annotation.Nonnull private com.android.sched.util.config.cli.TokenIterator.Entry getNext() throws com.android.sched.util.file.CannotReadException, com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotFileOrDirectoryException, com.android.sched.util.file.WrongPermissionException, java.util.NoSuchElementException { while (true) { java.io.StreamTokenizer tokenizer = tokenizers.peek(); while (tokenizer != null) { try { if ((tokenizer.nextToken()) != (java.io.StreamTokenizer.TT_EOF)) { if ((allowFileRefInFile) && ((tokenizer.sval.charAt(0)) == (filePrefix))) { pushFileTokenizer(tokenizer.sval.substring(1)); tokenizer = tokenizers.peek(); continue; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(tokenizer.sval, new com.android.sched.util.location.LineLocation(locations.peek(), tokenizer.lineno())); } } } catch (java.io.IOException e) { tokenizers.clear(); tokenizers.push(null); index = args.length; throw new com.android.sched.util.file.CannotReadException(locations.peek()); } tokenizers.pop(); tokenizer = tokenizers.peek(); locations.pop(); } if ((index) >= (args.length)) { throw new java.util.NoSuchElementException(); } if ((<START_MOD>(<END_MOD>allowFileRefInArray) && (<START_MOD>!<END_MOD>(args[index].<START_MOD>isEmpty()))) && (<END_MOD>(args[index].<START_MOD>charAt(0)) == (filePrefix))) { pushFileTokenizer<END_MOD>(args[<START_MOD>index].substring(1)); <END_MOD>(index)++<START_MOD>; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(args[((index)++<END_MOD>)], locations.peek()); } } }
public void push(java.lang.String[] local, com.android.ddmlib.FileListingService.FileEntry remote, com.android.ddmlib.SyncService.ISyncProgressMonitor monitor) throws com.android.ddmlib.SyncException, com.android.ddmlib.TimeoutException, java.io.IOException<START_MOD>, java.lang.InterruptedException<END_MOD> { if (!(remote.isDirectory())) { throw new com.android.ddmlib.SyncException(com.android.ddmlib.SyncException.SyncError.REMOTE_IS_FILE); } java.util.ArrayList<java.io.File> files = new java.util.ArrayList<java.io.File>(); for (java.lang.String path : local) { files.add(new java.io.File(path)); } java.io.File[] fileArray = files.toArray(new java.io.File[files.size()]); int total = getTotalLocalFileSize(fileArray); monitor.start(total); doPush(fileArray, remote.getFullPath(), monitor); monitor.stop(); }
<START_MOD>private void readMetadata(@javax.annotation.Nonnull com.google.gson.stream.JsonReader jsonReader) throws java.io.IOException { jsonReader.beginObject(); java.lang.String attributeName = jsonReader.nextName(); if (!(attributeName.equals(com.android.jack.tools.jacoco.JackCoverageAnalyzer.JSON_VERSION_ATTRIBUTE))) { throw new com.google.gson.JsonParseException((("Expected '" + (com.android.jack.tools.jacoco.JackCoverageAnalyzer.JSON_VERSION_ATTRIBUTE)) + "' as first attribute")); } java.lang.String version = jsonReader.nextString(); checkVersion(version); attributeName = jsonReader.nextName(); if (!(attributeName.equals(com.android.jack.tools.jacoco.JackCoverageAnalyzer.JSON_DATA_ATTRIBUTE))) { throw new com.google.gson.JsonParseException((("Expected '" + (com.android.jack.tools.jacoco.JackCoverageAnalyzer.JSON_DATA_ATTRIBUTE)) + "' as second attribute")); } readClasses(jsonReader); jsonReader.endObject(); }<END_MOD>
@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) > 0) { debugLog(( arguments, skipping normal dumpsys:   + (android.text.TextUtils.join(   args)))); if (args[0].startsWith("--proto")) { <START_MOD>if (args[0].equals("--proto-java-bin")) { dumpJava(fd, writer, args); } else { <END_MOD>dumpNative(fd, args);<START_MOD> }<END_MOD> } return; } writer.println( Status writer.println(( enabled:   + (isEnabled()))); writer.println(( state:   + (getState()))); writer.println(( address:   + (getAddress()))); writer.println((( name:   + (getName())) + "\n")); writer.println( devices: for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println((((((   + (device.getAddress())) +   [ + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) +     + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }
<START_MOD>@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.LazyTestCreationTest.class) @org.junit.Test public void testRunner_LazyTestCreationTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().success("test1", "Creating: test1\n").success("test2", "Creating: test2\n").completedNormally(); }<END_MOD>
public java.util.Map<java.lang.String, java.lang.String> getNetworkExtra(int netId, java.lang.String name) { final java.lang.String extraString = getNetworkVariable(netId, name); <START_MOD>if (((extraString == null) || (!(extraString.startsWith("\"")))) || (!(extraString.endsWith("\"")))) { return null; } <END_MOD>return com.android.server.wifi.WifiNative.parseNetworkExtra(extraString<START_MOD>.substring(1, ((extraString.length()) - 1))<END_MOD>); }
@java.lang.Override public void update(java.net.CacheResponse conditionalCacheHit, java.net.HttpURLConnection connection) <START_MOD>throws java.io.IOException <END_MOD>{ <START_MOD>super.<END_MOD>delegate.update(conditionalCacheHit, connection); }
<START_MOD>private void checkNativeLogFloat2() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testNativeLogFloat2(inV, out); verifyResultsNativeLogFloat2(inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testNativeLogFloat2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testNativeLogFloat2(inV, out); verifyResultsNativeLogFloat2(inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testNativeLogFloat2: " + (e.toString()))); } }<END_MOD>
<START_MOD>@com.android.annotations.NonNull @java.lang.Override public java.util.List<java.io.File> getSolibSearchPath() { return solibSearchPaths; }<END_MOD>
@java.lang.Override protected void setUserUnlocked(int userId) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG,   unlocked, initializing the service if (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.avrcp.AvrcpTargetService.AVRCP_ENABLE_PROPERTY, false))) { android.util.Log.w(com.android.bluetooth.avrcp.AvrcpTargetService.TAG,   initialization of the new AVRCP Target <START_MOD>Player List<END_MOD> com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = null; return; } <START_MOD>mMediaPlayerList.<END_MOD>init(<START_MOD>new<END_MOD> com.android.bluetooth.avrcp.AvrcpTargetService.<START_MOD>ListCallback())<END_MOD>; }
<START_MOD>void dropAccept(org.eclipse.swt.dnd.DropTargetEvent event);<END_MOD>
private void readExternalData(java.io.Externalizable obj, java.io.ObjectStreamClass desc) throws java.io.IOException { java.io.SerialCallbackContext oldContext = curContext; <START_MOD>if (oldContext != null) oldContext.check(); <END_MOD>curContext = null; try { boolean blocked = desc.hasBlockExternalData(); if (blocked) { bin.setBlockDataMode(true); } if (obj != null) { try { obj.readExternal(this); } catch (java.lang.ClassNotFoundException ex) { handles.markException(passHandle, ex); } } if (blocked) { skipCustomData(); } } finally { <START_MOD>if (oldContext != null) oldContext.check(); <END_MOD>curContext = oldContext; } }
<START_MOD>public void setLogFileCount(int logFileCount) { this.logFileCount = logFileCount; }<END_MOD>
<START_MOD>public void testClaimedSize() throws java.lang.Exception { mEnabled = java.util.Collections.singleton(IconDetector.ICON_DIP_SIZE); assertEquals(("" + (("res/drawable-xhdpi/foo_30dp.png: Warning: Suspicious file name foo_30dp.png: The implied 30 dp size does not match the actual dp size (pixel size 72 x 72 in a drawable-xhdpi folder computes to 36 x 36 dp) [IconDipSize]\n" + "res/drawable-mdpi/foo_80dp.png: Warning: Suspicious file name foo_80dp.png: The implied 80 dp size does not match the actual dp size (pixel size 72 x 72 in a drawable-mdpi folder computes to 72 x 72 dp) [IconDipSize]\n") + "0 errors, 2 warnings\n")), lintProject("res/drawable-hdpi/unrelated.png=>res/drawable-mdpi/foo_72dp.png", "res/drawable-hdpi/unrelated.png=>res/drawable-mdpi/foo_80dp.png", "res/drawable-hdpi/unrelated.png=>res/drawable-xhdpi/foo_36dp.png", "res/drawable-hdpi/unrelated.png=>res/drawable-xhdpi/foo_35dp.png", "res/drawable-hdpi/unrelated.png=>res/drawable-xhdpi/foo_30dp.png")); }<END_MOD>
private void registerUiccCardEvents() { <START_MOD>for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { <END_MOD>if (<START_MOD>app<END_MOD> != null) { <START_MOD>app<END_MOD>.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); <START_MOD>app<END_MOD>.registerForNetworkLocked(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_NETWORK_LOCKED, null); <START_MOD>com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords();<END_MOD> if (<START_MOD>ir<END_MOD> != null) { <START_MOD>ir<END_MOD>.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); <START_MOD>ir<END_MOD>.registerForLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_LOCKED, null); <START_MOD>ir<END_MOD>.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } }<START_MOD> } }<END_MOD>
<START_MOD>private void clearInternalUserData(int userId) { for (android.net.wifi.WifiConfiguration config : getInternalConfiguredNetworks()) { if ((!(config.shared)) && (com.android.server.wifi.WifiConfigurationUtil.doesUidBelongToAnyProfile(config.creatorUid, mUserManager.getProfiles(mCurrentUserId)))) { mConfiguredNetworks.remove(config.networkId); } } mDeletedEphemeralSSIDs.clear(); mScanDetailCaches.clear(); clearLastSelectedNetwork(); }<END_MOD>
public void handleEvent(org.eclipse.swt.widgets.Event event) { if (!(mInternalApplicationNameUpdate)) { mApplicationNameModifiedByUser = true; <START_MOD>if (!(mActivityNameModifiedByUser)) { java.lang.String name = com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize(mApplicationNameField.getText()); try { mInternalActivityNameUpdate = true; mActivityNameField.setText((name + (com.android.ide.eclipse.adt.internal.wizards.newproject.NewProjectCreationPage.ACTIVITY_NAME_SUFFIX))); } finally { mInternalActivityNameUpdate = false; <END_MOD>} }<START_MOD> } }<END_MOD>
<START_MOD>public void testRequestUpdateDownloadServices() throws java.lang.Exception { java.util.List<java.lang.String> testClasses = java.util.Arrays.asList("class1", "class2"); mDownloadSession.requestUpdateFileServices(testClasses); java.util.List<android.telephony.mbms.FileServiceInfo> serviceInfos = ((java.util.List<android.telephony.mbms.FileServiceInfo>) (mCallback.waitOnFileServicesUpdated().arg1)); assertEquals(CtsDownloadService.FILE_SERVICE_INFO, serviceInfos.get(0)); assertEquals(0, mCallback.getNumErrorCalls()); java.util.List<java.util.List<java.lang.Object>> requestDownloadServicesCalls = getMiddlewareCalls(CtsDownloadService.METHOD_REQUEST_UPDATE_FILE_SERVICES); assertEquals(1, requestDownloadServicesCalls.size()); assertEquals(3, requestDownloadServicesCalls.get(0).size()); java.util.List<java.lang.String> middlewareReceivedServiceClasses = ((java.util.List<java.lang.String>) (requestDownloadServicesCalls.get(0).get(2))); assertEquals(testClasses.size(), middlewareReceivedServiceClasses.size()); }<END_MOD>
<START_MOD>public void test_getRelativeTimeSpanStringGerman() throws java.lang.Exception { java.util.Locale locale = java.util.Locale.GERMAN; final long now = java.lang.System.currentTimeMillis(); assertEquals("vor 42 Minuten", getRelativeTimeSpanString(locale, null, (now - (42 * (MINUTE_IN_MILLIS))), now, libcore.icu.MINUTE_IN_MILLIS, 0)); assertEquals("in 42 Minuten", getRelativeTimeSpanString(locale, null, (now + (42 * (MINUTE_IN_MILLIS))), now, libcore.icu.MINUTE_IN_MILLIS, 0)); assertEquals("gestern", getRelativeTimeSpanString(locale, null, (now - (DAY_IN_MILLIS)), now, libcore.icu.DAY_IN_MILLIS, 0)); assertEquals("vorgestern", getRelativeTimeSpanString(locale, null, (now - (2 * (DAY_IN_MILLIS))), now, libcore.icu.DAY_IN_MILLIS, 0)); assertEquals("morgen", getRelativeTimeSpanString(locale, null, (now + (DAY_IN_MILLIS)), now, libcore.icu.DAY_IN_MILLIS, 0)); assertEquals("\u00fcbermorgen", getRelativeTimeSpanString(locale, null, (now + (2 * (DAY_IN_MILLIS))), now, libcore.icu.DAY_IN_MILLIS, 0)); }<END_MOD>
@java.lang.Override protected void engineUpdate(byte[] input, int offset, int len) { <START_MOD>final org.conscrypt.OpenSSLDigestContext ctx = this.ctx; <END_MOD>org.conscrypt.NativeCrypto.EVP_DigestUpdate(ctx.getContext(), input, offset, len); }
public void getOwnAddress() { try { <START_MOD>mGatt<END_MOD>.getOwnAddress(this.<START_MOD>mAdvertiserId<END_MOD>); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG,   exception -   e); } }
<START_MOD>protected abstract com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem doCreateResourceItem(java.lang.String name);<END_MOD>
void notifyShutdown() { if (com.android.bluetooth.sap.SapRilReceiver.DEBUG) android.util.Log.i(com.android.bluetooth.sap.SapRilReceiver.TAG, "notifyShutdown()"); synchronized(this) { if ((<START_MOD>mSapProxy<END_MOD>) != null) sendShutdownMessage(); } }
private static native void nativeDrawBitmapMatrix(<START_MOD>long<END_MOD> nCanvas, <START_MOD>long<END_MOD> nBitmap, <START_MOD>long<END_MOD> nMatrix, <START_MOD>long<END_MOD> nPaint);
<START_MOD>@java.lang.Override protected void onSaveInstanceState(android.os.Bundle outState) { super.onSaveInstanceState(outState); for (com.android.phone.CallBarringEditPreference pref : mPreferences) { android.os.Bundle bundle = new android.os.Bundle(); bundle.putBoolean(com.android.phone.GsmUmtsCallBarringOptions.KEY_STATUS, pref.isActivated); outState.putParcelable(pref.getKey(), bundle); } outState.putInt(com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_STATE_KEY, mPwChangeState); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.OLD_PW_KEY, mOldPassword); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.NEW_PW_KEY, mNewPassword); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_MESSAGE_KEY, mButtonChangePW.getDialogMessage().toString()); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_PW_ENTRY_KEY, mButtonChangePW.getText()); }<END_MOD>
public void testStackFocusSwitchOnTouchEvent() throws java.lang.Exception { if (!(supportsMultiDisplay())) { return; } final android.server.cts.DisplayState newDisplay = new android.server.cts.VirtualDisplayBuilder(this).build(); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY }); mAmWmState.assertFocusedActivity( must be switched back to primary display android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY); launchActivityOnDisplay(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, newDisplay.mDisplayId); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME }); mAmWmState.assertFocusedActivity( launched on secondary display must be focused android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); final android.server.cts.ActivityManagerDisplayTests.ReportedDisplayMetrics displayMetrics = getDisplayMetrics(); final int width = displayMetrics.getWidth(); final int height = displayMetrics.getHeight(); executeShellCommand(((( tap   + (width / 2)) +     + (height / 2))); <START_MOD>final java.lang.String activityName = (mVrHeadset) ? android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME : android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY; <END_MOD>mAmWmState.computeState(mDevice, new java.lang.String[]{ <START_MOD>activityName<END_MOD> }); mAmWmState.assertFocusedActivity( must be switched back to <START_MOD>the correct<END_MOD> display <START_MOD>activityName); }<END_MOD>
public int sendto(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, int flags, java.net.InetAddress inetAddress, int port) throws <START_MOD>android.os.ErrnoException, <END_MOD>java.net.SocketException { if (buffer.isDirect()) { return sendtoBytes(fd, buffer, buffer.position(), buffer.remaining(), flags, inetAddress, port); } else { return sendtoBytes(fd, java.nio.NioUtils.unsafeArray(buffer), ((java.nio.NioUtils.unsafeArrayOffset(buffer)) + (buffer.position())), buffer.remaining(), flags, inetAddress, port); } }
public void testCyclicGraph() { mSnapshot = new com.android.tools.perflib.heap.analysis.SnapshotBuilder(4).addReferences(1, 2, 3, 4).addReferences(2, 3).addReferences(3, 4).addReferences(4, 2).addRoot(1).getSnapshot(); mDominators = <START_MOD>mSnapshot<END_MOD>.<START_MOD>computeDominators<END_MOD>(); assertEquals(4, mDominators<START_MOD>.getReachableInstances()<END_MOD>.size()); assertDominates(1, 2); assertDominates(1, 3); assertDominates(1, 4); }
private int performDexOptTraced(java.lang.String packageName, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete) { android.os.Trace.traceBegin(com.android.server.pm.TRACE_TAG_PACKAGE_MANAGER, "dexopt"); try { return performDexOptInternal(packageName, checkProfiles, targetCompilerFilter, force, bootComplete<START_MOD>, false<END_MOD>); } finally { android.os.Trace.traceEnd(com.android.server.pm.TRACE_TAG_PACKAGE_MANAGER); } }
<START_MOD>@com.android.annotations.NonNull public java.lang.String getFlavorName() { if (variantConfiguration.hasFlavors()) { return getFlavoredName(true); } else { return com.android.build.gradle.internal.variant.BaseVariantData.capitalize(BuilderConstants.MAIN); } }<END_MOD>
static void getLong(java.lang.invoke.MethodHandle m, Main.ValueHolder v, long value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final long got = (v == null) ? ((long) (m.invokeExact())) : ((long) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.<START_MOD>assertEqual<END_MOD>(exceptionThrown, expectFailure); }
private <START_MOD>java.util.List<android.media.session.MediaController><END_MOD> <START_MOD>getMediaControllers<END_MOD>() { java.util.List<android.media.session.MediaController> controllers = <START_MOD>new<END_MOD> <START_MOD>java<END_MOD>.util.<START_MOD>ArrayList<<END_MOD>android.media.session.MediaController<START_MOD>><END_MOD>(); <START_MOD>for<END_MOD> (com.android.bluetooth.avrcp.MediaPlayerInfo info <START_MOD>:<END_MOD> <START_MOD>mMediaPlayerInfoList<END_MOD>.<START_MOD>values<END_MOD>()) <START_MOD>{ controllers<END_MOD>.<START_MOD>add<END_MOD>(info.<START_MOD>getMediaController().getWrappedInstance<END_MOD>()); <START_MOD>} return controllers<END_MOD>; }
@org.junit.Test<START_MOD> @java.lang.Runtime<END_MOD> public void testDefaultMethod013() throws java.lang.Exception { run(DEFAULTMETHOD013); }
<START_MOD>void cancelNotifications() { if (com.android.bluetooth.opp.BluetoothOppNotification.V) android.util.Log.v(com.android.bluetooth.opp.BluetoothOppNotification.TAG, "cancelNotifications "); mHandler.removeCallbacksAndMessages(null); mNotificationMgr.cancelAll(); }<END_MOD>
<START_MOD>@javax.annotation.Nonnull com.android.sched.scheduler.ProductionSet getAddedProductions(@javax.annotation.Nonnull com.android.sched.util.config.Config config, @javax.annotation.Nonnull com.android.sched.scheduler.Scheduler scheduler);<END_MOD>
<START_MOD>public void testLocaleGroupingSeparator() { int number = 1234; java.text.DecimalFormat df; java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(new java.util.Locale("de", "AT")); df = new java.text.DecimalFormat("#,##0.00;-#,##0.00", dfs); assertEquals("1 234,00", df.format(number)); df = new java.text.DecimalFormat("¤#,##0.00;¤-#,##0.00", dfs); assertEquals("€1 234,00", df.format(number)); }<END_MOD>
<START_MOD>public void testReflectiveOperationException() throws java.lang.Exception { assertEquals(("" + ((("src/test/pkg/Java7API.java:8: Error: ReflectiveOperationException requires API level 19 (current min is 1) [NewApi]\n" + " } catch (ReflectiveOperationException e) {\n") + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n") + "1 errors, 0 warnings\n")), lintProject("apicheck/minsdk1.xml=>AndroidManifest.xml", "src/test/pkg/Java7API.java.txt=>src/test/pkg/Java7API.java")); }<END_MOD>
<START_MOD>private void setValues(int i, android.net.NetworkStats.Entry values) { iface[i] = values.iface; uid[i] = values.uid; set[i] = values.set; tag[i] = values.tag; metered[i] = values.metered; roaming[i] = values.roaming; defaultNetwork[i] = values.defaultNetwork; rxBytes[i] = values.rxBytes; rxPackets[i] = values.rxPackets; txBytes[i] = values.txBytes; txPackets[i] = values.txPackets; operations[i] = values.operations; }<END_MOD>
<START_MOD>public void testBrowserRoot() throws java.lang.Exception { android.service.media.MediaBrowserService.BrowserRoot browserRoot = StubMediaBrowserService.sBrowserRoot; assertEquals(StubMediaBrowserService.MEDIA_ID_ROOT, browserRoot.getRootId()); assertEquals(StubMediaBrowserService.EXTRAS_VALUE, browserRoot.getExtras().getString(StubMediaBrowserService.EXTRAS_KEY)); }<END_MOD>
<START_MOD>@org.junit.Test public void test_newByteChannel() throws java.io.IOException { try (java.nio.channels.SeekableByteChannel sbc = java.nio.file.Files.newByteChannel(filesSetup.getTestPath())) { fail(); } catch (java.nio.file.NoSuchFileException expected) { } try (java.nio.channels.SeekableByteChannel sbc = java.nio.file.Files.newByteChannel(filesSetup.getDataFilePath())) { sbc.write(java.nio.ByteBuffer.allocate(10)); fail(); } catch (java.nio.channels.NonWritableChannelException expected) { } try (java.nio.channels.SeekableByteChannel sbc = java.nio.file.Files.newByteChannel(filesSetup.getDataFilePath())) { java.nio.ByteBuffer readBuffer = java.nio.ByteBuffer.allocate(10); int bytesReadCount = sbc.read(readBuffer); java.lang.String readData = new java.lang.String(java.util.Arrays.copyOf(readBuffer.array(), bytesReadCount), "UTF-8"); assertEquals(libcore.java.nio.file.FilesSetup.TEST_FILE_DATA, readData); } }<END_MOD>
<START_MOD>private void deflect(java.lang.String callId, java.lang.String number) { android.telecom.Log.d(this, "deflect %s - %s", callId, number); findConnectionForAction(callId, "deflect").onDeflect(number); }<END_MOD>
<START_MOD>private static int bitCountLong(long x) { return java.lang.Long.bitCount(x); }<END_MOD>
public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { if (android.bluetooth.BluetoothHeadset.VDBG) android.bluetooth.BluetoothHeadset.log("getConnectedDevices()"); <START_MOD>final android.bluetooth.IBluetoothHeadset service = mService; <END_MOD>if ((<START_MOD>service<END_MOD> != null) && (isEnabled())) { try { return mService.getConnectedDevices(); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); } } if (<START_MOD>service<END_MOD> == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG,   not attached to service return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); }
<START_MOD>@com.android.annotations.NonNull java.util.List<java.io.File> getRepositories();<END_MOD>
<START_MOD>@java.lang.Override public boolean executeHardwareAction(java.lang.Runnable action) { return mWebView.executeHardwareAction(action); }<END_MOD>
<START_MOD>public void setWidth(int mWidth) { this.mWidth = mWidth; }<END_MOD>
private void onCleanupUser(int userId) { android.util.Slog.d(com.android.server.MountService.TAG, (   + userId)); try { mConnector.execute("volume", "user_stopped", userId); } catch (com.android.server.NativeDaemonConnectorException ignored) { } synchronized(<START_MOD>mLock<END_MOD>) { mStartedUsers = com.android.internal.util.ArrayUtils.removeInt(mStartedUsers, userId); } }
@org.junit.Test public void testDefaultInterfaceMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_28).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
void discoveryStateChangeCallback(int state) { infoLog(( with state: + state)); synchronized(mObject) { android.content.Intent intent; if (state == (AbstractionLayer.BT_DISCOVERY_STOPPED)) { mDiscovering = false; intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_FINISHED); } else if (state == (AbstractionLayer.BT_DISCOVERY_STARTED)) { mDiscovering = true; intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_STARTED); <START_MOD>} <END_MOD>mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } }
<START_MOD>private void tamperAllOdex() throws java.io.IOException { android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, ("Tamper extracted zip files by overwriting all content but the central directory" + " by \'\\0\'s.")); byte[] zeros = new byte[4 * 1024]; int savedSizeForOdexHeader = 80; for (java.io.File odex : getSecondaryFolder().listFiles(new com.android.framework.multidexlegacytestservices.test2.ServicesTests.ExtensionFilter(".dex"))) { long fileLength = odex.length(); junit.framework.Assert.assertTrue((fileLength > ((zeros.length) + savedSizeForOdexHeader))); odex.setWritable(true); java.io.RandomAccessFile raf = new java.io.RandomAccessFile(odex, "rw"); try { raf.seek(savedSizeForOdexHeader); raf.write(zeros, 0, zeros.length); } finally { raf.close(); } } }<END_MOD>
@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JAnnotation getAnnotation(@javax.annotation.Nonnull java.lang.String signature) { <START_MOD>return<END_MOD> <START_MOD>getTypeCommon<END_MOD>(signature, <START_MOD>annotationAdapter<END_MOD>); }
public void testInterruptedTimedPoll() throws java.lang.InterruptedException { final java.util.concurrent.BlockingQueue<java.lang.Integer> q = populatedQueue(jsr166.SIZE); final java.util.concurrent.CountDownLatch aboutToWait = new java.util.concurrent.CountDownLatch(1); java.lang.Thread t = newStartedThread(new jsr166.CheckedRunnable() { public void realRun() throws java.lang.InterruptedException { long startTime = java.lang.System.nanoTime(); for (int i = 0; i < (SIZE); ++i) assertEquals(i, ((int) (q.poll(jsr166.LONG_DELAY_MS, java.util.concurrent.TimeUnit.MILLISECONDS)))); aboutToWait.countDown(); try { q.poll(jsr166.LONG_DELAY_MS, java.util.concurrent.TimeUnit.MILLISECONDS); shouldThrow(); } catch (java.lang.InterruptedException success) { } assertTrue(((millisElapsedSince(startTime)) < (LONG_DELAY_MS))); } }); aboutToWait.await(); <START_MOD>waitForThreadToEnterState<END_MOD>(t<START_MOD>, jsr166.LONG_DELAY_MS, java.lang.Thread.State.TIMED_WAITING<END_MOD>); t.interrupt(); awaitTermination(t); checkEmpty(q); }
private static final void commonInit() { if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG,   RuntimeInit! java.lang.Thread.<START_MOD>setInitialUncaughtExceptionHandler(new com.android.internal.os.RuntimeInit.LoggingHandler()); java.lang.Thread.<END_MOD>setDefaultUncaughtExceptionHandler(new com.android.internal.os.RuntimeInit.<START_MOD>KillApplicationHandler<END_MOD>()); org.apache.harmony.luni.internal.util.TimezoneGetter.setInstance(new org.apache.harmony.luni.internal.util.TimezoneGetter() { @java.lang.Override public java.lang.String getId() { return android.os.SystemProperties.get("persist.sys.timezone"); } }); java.util.TimeZone.setDefault(null); java.util.logging.LogManager.getLogManager().reset(); new com.android.internal.logging.AndroidConfig(); java.lang.String userAgent = com.android.internal.os.RuntimeInit.getDefaultUserAgent(); java.lang.System.setProperty("http.agent", userAgent); com.android.server.NetworkManagementSocketTagger.install(); java.lang.String trace = android.os.SystemProperties.get("ro.kernel.android.tracing"); if (trace.equals("1")) { android.util.Slog.i(com.android.internal.os.RuntimeInit.TAG,   emulator trace profiling enabled android.os.Debug.enableEmulatorTraceOutput(); } com.android.internal.os.RuntimeInit.initialized = true; }
public native int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws <START_MOD>android.os.ErrnoException, <END_MOD>java.io.InterruptedIOException;
<START_MOD>synchronized void nScriptIntrinsicBLAS_SGEMM(long id, int TransA, int TransB, int M, int N, int K, float alpha, long A, long B, float beta, long C) { validate(); rsnScriptIntrinsicBLAS_SGEMM(mContext, id, TransA, TransB, M, N, K, alpha, A, B, beta, C); }<END_MOD>
@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { if (!(mAutoScrollLock)) { return; } <START_MOD>int<END_MOD> <START_MOD>diff<END_MOD> = ((vbar.getThumb()) + (vbar.getSelection())) <START_MOD>-<END_MOD> (vbar.getMaximum());<START_MOD> boolean isAtBottom = (java.lang.Math.abs(diff)) < 100; if (isAtBottom != (mShouldScrollToLatestLog)) {<END_MOD> setScrollToLatestLog(isAtBottom); mScrollLockCheckBox.setSelection(isAtBottom); }<START_MOD> }<END_MOD>
@org.junit.Test public void legacyAppTest003() throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestsWithJackFolder("multidex/test003"); java.io.File out = com.android.jack.TestTools.createTempDir("out", ""); com.android.jack.Options appOptions = new com.android.jack.Options(); appOptions.addProperty(MultiDexLegacy.MULTIDEX_LEGACY.getName(), "true"); appOptions.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), "minimal-multidex"); com.android.jack.TestTools.compileSourceToDex(appOptions, testFolder, (((((com.android.jack.TestTools.getDefaultBootclasspathString()) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.annotations.getPath())) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.frameworks.getPath())), out, false); java.<START_MOD>lang.String<END_MOD> outList = getListingOfDex(new java.io.File(out, "classes.dex")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, "ref-list-003-1.txt"), outList); java.<START_MOD>lang.String<END_MOD> outList2 = getListingOfDex(new java.io.File(out, "classes2.dex")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, "ref-list-003-2.txt"), outList2); junit.framework.Assert.assertFalse(new java.io.File(out, "classes3.dex").exists()); return; }
public void checkClass(@com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context, @com.android.annotations.Nullable <START_MOD>com<END_MOD>.<START_MOD>android.tools.lint.detector.api<END_MOD>.ClassDeclaration declaration, @com.android.annotations.NonNull <START_MOD>com<END_MOD>.<START_MOD>android.tools.lint.detector.api<END_MOD>.Node node, @com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedClass resolvedClass) { }
<START_MOD>private void checkStepFloat2Float2() { android.renderscript.Allocation inEdge = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inEdge, 35, 0.0F, 1.0F); android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInV(inV); script.forEach_testStepFloat2Float2(inEdge, out); verifyResultsStepFloat2Float2(inEdge, inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testStepFloat2Float2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInV(inV); scriptRelaxed.forEach_testStepFloat2Float2(inEdge, out); verifyResultsStepFloat2Float2(inEdge, inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testStepFloat2Float2: " + (e.toString()))); } }<END_MOD>
<START_MOD>private java.util.Map<java.lang.String, com.android.build.gradle.model.AndroidProjectTest.ProjectData> getModelForMultiProject(java.lang.String projectName) throws java.lang.Exception { org.gradle.tooling.GradleConnector connector = org.gradle.tooling.GradleConnector.newConnector(); java.io.File projectDir = new java.io.File(getTestDir(), projectName); connector.forProjectDirectory(projectDir); java.util.Map<java.lang.String, com.android.build.gradle.model.AndroidProjectTest.ProjectData> map = com.google.common.collect.Maps.newHashMap(); org.gradle.tooling.ProjectConnection connection = connector.connect(); try { org.gradle.tooling.model.GradleProject model = connection.getModel(org.gradle.tooling.model.GradleProject.class); assertNotNull("Model Object null-check", model); for (org.gradle.tooling.model.GradleProject child : model.getChildren()) { java.lang.String path = child.getPath(); java.lang.String name = path.substring(1); java.io.File childDir = new java.io.File(projectDir, name); org.gradle.tooling.GradleConnector childConnector = org.gradle.tooling.GradleConnector.newConnector(); childConnector.forProjectDirectory(childDir); org.gradle.tooling.ProjectConnection childConnection = childConnector.connect(); try { com.android.build.gradle.model.AndroidProject androidProject = childConnection.getModel(com.android.build.gradle.model.AndroidProject.class); assertNotNull(("Model Object null-check for " + path), androidProject); assertEquals(("Model Name for " + path), name, androidProject.getName()); assertEquals("Model version", com.android.build.gradle.model.AndroidProjectTest.MODEL_VERSION, androidProject.getModelVersion()); map.put(path, com.android.build.gradle.model.AndroidProjectTest.ProjectData.create(childDir, androidProject)); } catch (org.gradle.tooling.UnknownModelException e) { } finally { childConnection.close(); } } } catch (java.lang.Exception e) { e.printStackTrace(); } finally { connection.close(); } return map; }<END_MOD>
public void testAesCbcHmacSha512Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.<START_MOD>getKey(256)<END_MOD>); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, <START_MOD>android.net.cts.IpSecManagerTest.getKey<END_MOD>(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, <START_MOD>null, <END_MOD>true, 1, false); <START_MOD>checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); <END_MOD>}
<START_MOD>public static synchronized boolean isCleartextTrafficPermitted() { return libcore.net.NetworkSecurityPolicy.cleartextTrafficPermitted; }<END_MOD>
public void testWrongSeparator2() throws java.lang.Exception { assertEquals(( Error: Class referenced in the manifest, test.pkg.Foo.Bar, was not found in the project or the libraries [MissingRegistered] + ((((( <activity +   ^ +   Warning: Use   instead of   for inner classes (or use only lowercase letters in package names) [InnerclassSeparator] +   android:name= +   ~~~~~~~~~~~~~~~~~~~~~~~ +   errors, 1 warnings lintProject("registration/AndroidManifestWrong2.xml=>AndroidManifest.xml", "bytecode/.classpath=>.classpath", <START_MOD>"apicheck/ApiCallTest.class.data=>bin/classes/foo/bar/ApiCallTest.class", <END_MOD>"registration/Bar.java.txt=>src/test/pkg/Foo/Bar.java")); }
<START_MOD>@java.lang.Override public boolean isValidParent(@javax.annotation.CheckForNull com.android.jack.ir.ast.JNode parent) { return ((((parent instanceof com.android.jack.ir.ast.JLocal) || (parent instanceof com.android.jack.ir.ast.JParameter)) || (parent instanceof com.android.jack.ir.ast.JMethod)) || (parent instanceof com.android.jack.ir.ast.JField)) || (parent instanceof com.android.jack.ir.ast.JCastOperation); }<END_MOD>
@org.junit.Test public void compileWithAnnotationProcessorNoAutoNoClasses_processorPath() throws java.lang.Exception { <START_MOD>java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> exclude = com.android.sched.util.collect.Lists.<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>create(com.android.jack.test.toolchain.JillBasedToolchain.class); <END_MOD>com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class<START_MOD>, exclude<END_MOD>); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorPath(processors.getPath()); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(jackOut); junit.framework.Assert.assertFalse(libOut.containsFileType(FileType.RSC)); try { libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath("Annotated2Duplicated", '/')); junit.framework.Assert.fail(); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { } }
<START_MOD>protected void initClosed() { }<END_MOD>
<START_MOD>public synchronized void flushStatistics(java.util.List<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent> events) { for (int i = 0; i < (mNetworkMetrics.size()); i++) { android.net.metrics.ConnectStats stats = mNetworkMetrics.valueAt(i).connect; if ((stats.eventCount) == 0) { continue; } events.add(com.android.server.connectivity.IpConnectivityEventBuilder.toProto(stats)); } for (int i = 0; i < (mNetworkMetrics.size()); i++) { android.net.metrics.DnsEvent ev = mNetworkMetrics.valueAt(i).dns; if ((ev.eventCount) == 0) { continue; } events.add(com.android.server.connectivity.IpConnectivityEventBuilder.toProto(ev)); } for (int i = 0; i < (mWakeupStats.size()); i++) { events.add(com.android.server.connectivity.IpConnectivityEventBuilder.toProto(mWakeupStats.valueAt(i))); } mNetworkMetrics.clear(); mWakeupStats.clear(); }<END_MOD>
@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JSwitchStatement switchStatement) { super.visit(switchStatement); com.android.jack.cfg.SwitchBasicBlock switchBlock = new com.android.jack.cfg.SwitchBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(switchBlock); java.util.List<com.android.jack.ir.ast.JCaseStatement> cases = switchStatement.getCases(); java.util.Collections.sort(cases, new com.android.jack.cfg.CfgBuilder.JCaseStatementComparator()); com.android.jack.ir.ast.JStatement defaultCase = switchStatement.getDefaultCase(); if (defaultCase == null) { defaultCase = com.android.jack.util.ControlFlowHelper.getNextStatement(switchStatement); <START_MOD>assert defaultCase != null; <END_MOD>} forwardBranchResolver.addSwitchBasicBlock(switchBlock, cases, defaultCase); return true; }
<START_MOD>public void testMultipleComments() throws java.io.IOException { assertEquals("/*\n* Foo\n*/\n/*\n* Bar\n*/\n", com.google.doclava.StubsTest.parseLicenseHeader("/*", " * Foo", " */", "/*", " * Bar", " */", "package foo")); }<END_MOD>
@java.lang.Override public synchronized void applyTunnelModeTransform(int direction, int transformResourceId, int tunnelResourceId) throws android.os.RemoteException { com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TransformRecord transformInfo = userRecord.mTransformRecords.getResourceOrThrow(transformResourceId); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); android.net.IpSecConfig c = transformInfo.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (android.net.IpSecTransform.MODE_TUNNEL)),   mode was not Tunnel mode; cannot be applied to a tunnel interface int[] keys = tunnelInterfaceInfo.getKeys(); <START_MOD>try { mSrvConfig.getNetdInstance().ipSecApplyTunnelModeTransform(direction, c.getSourceAddress(), c.getDestinationAddress(), transformInfo.getSpiRecord().getSpi(), keys[direction]); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (EINVAL)) { throw new java.lang.IllegalArgumentException(e.toString()); } else { throw e; } } }<END_MOD>
<START_MOD>public static int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws android.os.ErrnoException, java.io.InterruptedIOException { return Libcore.os.writev(fd, buffers, offsets, byteCounts); }<END_MOD>
<START_MOD>private static void checkMergingFolder(java.io.File file) throws com.android.builder.packaging.PackagerException { if (file.isFile()) { throw new com.android.builder.packaging.PackagerException("%s is a file!", file); } if (file.exists()) { if (!(file.canWrite())) { throw new com.android.builder.packaging.PackagerException("Cannot write %s", file); } } else { if (!(file.mkdirs())) { throw new com.android.builder.packaging.PackagerException("Failed to create %s", file); } } }<END_MOD>
<START_MOD>private void checkExp2Float3() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testExp2Float3(in, out); verifyResultsExp2Float3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testExp2Float3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testExp2Float3(in, out); verifyResultsExp2Float3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testExp2Float3: " + (e.toString()))); } }<END_MOD>
<START_MOD>private static android.util.Pair<java.util.List<java.lang.Long>, java.util.List<java.lang.Long>> parseHomeOIList(android.net.wifi.hotspot2.omadm.PPSMOParser.PPSNode node) throws android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException { if (node.isLeaf()) throw new android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException("Leaf node not expected for HomeOIList"); java.util.List<java.lang.Long> matchAllOIs = new java.util.ArrayList<java.lang.Long>(); java.util.List<java.lang.Long> matchAnyOIs = new java.util.ArrayList<java.lang.Long>(); for (android.net.wifi.hotspot2.omadm.PPSMOParser.PPSNode child : node.getChildren()) { android.util.Pair<java.lang.Long, java.lang.Boolean> homeOI = android.net.wifi.hotspot2.omadm.PPSMOParser.parseHomeOIInstance(child); if (homeOI.second.booleanValue()) matchAllOIs.add(homeOI.first); else matchAnyOIs.add(homeOI.first); } return new android.util.Pair<java.util.List<java.lang.Long>, java.util.List<java.lang.Long>>(matchAllOIs, matchAnyOIs); }<END_MOD>
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int set, int tag<START_MOD>, int defaultNetwork<END_MOD>, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, <START_MOD>defaultNetwork, <END_MOD>rxBytes, rxPackets, txBytes, txPackets, operations)); }
private void update() { <START_MOD>java.lang.String exemptions<END_MOD> = Settings.Global.getString(mContext.getContentResolver(), Settings.Global.HIDDEN_API_BLACKLIST_EXEMPTIONS)<START_MOD>; if (!(android.text.TextUtils.equals(exemptions, mExemptions))) { if ("*".equals(exemptions)) { mBlacklistDisabled = true; mExemptions = null; } else { mBlacklistDisabled = false; mExemptions = exemptions; } zygoteProcess.setApiBlacklistExemptions(mExemptions<END_MOD>); }<START_MOD> }<END_MOD>
public int getDiscoverableTimeout() { if (!(com.android.bluetooth.Utils.<START_MOD>checkCallerAllowManagedProfiles<END_MOD>(<START_MOD>mService<END_MOD>))) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG,   - Not allowed for non-active user return 0; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return 0; return service.getDiscoverableTimeout(); }
int measureContentWidth(android.widget.SpinnerAdapter adapter, android.graphics.drawable.Drawable background) { if (adapter == null) { return 0; } int width = 0; android.view.View itemView = null; int itemType = 0; final int widthMeasureSpec = android.widget.MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED); final int heightMeasureSpec = android.widget.MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED); int start = java.lang.Math.max(0, getSelectedItemPosition()); final int end = java.lang.Math.min(adapter.getCount(), (start + (android.widget.Spinner.MAX_ITEMS_MEASURED))); final int count = end - start; start = java.lang.Math.max(0, (start - ((android.widget.Spinner.MAX_ITEMS_MEASURED) - count))); for (int i = start; i < end; i++) { final int positionType = adapter.getItemViewType(i); if (positionType != itemType) { itemType = positionType; itemView = null; } itemView = adapter.getView(i, itemView, this); if ((itemView.getLayoutParams()) == null) { itemView.setLayoutParams(new android.view.ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT)); } itemView.measure(widthMeasureSpec, heightMeasureSpec); width = java.lang.Math.max(width, itemView.getMeasuredWidth()); } if (background != null) { background.getPadding(mTempRect); width += (mTempRect.left) + (mTempRect.right); } <START_MOD>int widthLimit = mContext.getResources().getDisplayMetrics().widthPixels; if ((mPopup) instanceof android.widget.Spinner.DropdownPopup) { final android.graphics.drawable.Drawable popupBackground = ((android.widget.Spinner.DropdownPopup) (mPopup)).getBackground(); if (popupBackground != null) { android.graphics.Rect tempRect = new android.graphics.Rect(); popupBackground.getPadding(tempRect); widthLimit = (widthLimit - (tempRect.left)) - (tempRect.right); } } if (width > widthLimit) { width = widthLimit; } <END_MOD>return width; }
<START_MOD>private org.apache.harmony.jpda.tests.jdwp.StackFrame.FrameInfo getFrameInfo(long threadID, long classID, long methodID) { int frameCount = jdwpGetFrameCount(threadID); assertTrue("Not enough frames", (frameCount > 2)); org.apache.harmony.jpda.tests.jdwp.StackFrame.FrameInfo[] frames = jdwpGetFrames(threadID, 0, frameCount); for (org.apache.harmony.jpda.tests.jdwp.StackFrame.FrameInfo frameInfo : frames) { if (((frameInfo.location.classID) == classID) && ((frameInfo.location.methodID) == methodID)) { return frameInfo; } } return null; }<END_MOD>
protected com.intellij.updater.ValidationResult doValidateAccess(java.io.File toFile, com.intellij.updater.ValidationResult.Action action) { if (!(toFile.exists())) return null; if (toFile.isDirectory()) return null; com.intellij.updater.ValidationResult result = validateProcessLock(toFile, action); if (result != null) { return result; } if (((toFile.canRead()) && (toFile.canWrite())) && (isWritable(toFile))) return null; return new com.intellij.updater.ValidationResult(ValidationResult.Kind.ERROR, myPath, action, ValidationResult.ACCESS_DENIED_MESSAGE, <START_MOD>(myPatch.isStrict ? <END_MOD>ValidationResult.Option.<START_MOD>NONE : ValidationResult.Option.<END_MOD>IGNORE)<START_MOD>)<END_MOD>; }
public synchronized void startSocketListeners() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag,   Service startSocketListeners } if ((mServerSession) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag,   exists - shutting it down... } mServerSession.close(); mServerSession = null; } if ((mObserver) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag,   exists - shutting it down... } mObserver.deinit(); mObserver = null; } closeConnectionSocket(); if ((mServerSockets) != null) { <START_MOD>mAcceptNewConnect = true; } else { <END_MOD>mServerSockets = com.android.bluetooth.ObexServerSockets.create(this)<START_MOD>; mAcceptNewConnect = true<END_MOD>; if ((mServerSockets) == null) { android.util.Log.e(mTag,   to start the listeners return; } removeSdpRecord(); mSdpHandle = createMasSdpRecord(mServerSockets.getRfcommChannel(), mServerSockets.getL2capPsm()); if (com.android.bluetooth.map.BluetoothMapMasInstance.V) { android.util.Log.d(mTag, ((((( new SDP record for MAS instance:   + (mMasInstanceId)) +   Object reference:   + (this)) +   handle:   + (mSdpHandle))); } updateDbIdentifier(); } }
<START_MOD>@java.lang.Override public void enter() { mIfaceIsUp = false; }<END_MOD>
<START_MOD>private int readPlaintextData(final java.nio.ByteBuffer dst) throws javax.net.ssl.SSLException { try { final int sslRead; final int pos = dst.position(); final int limit = dst.limit(); final int len = java.lang.Math.min(NativeConstants.SSL3_RT_MAX_PACKET_SIZE, (limit - pos)); if (dst.isDirect()) { long addr = (org.conscrypt.NativeCrypto.getDirectBufferAddress(dst)) + pos; sslRead = org.conscrypt.NativeCrypto.ENGINE_SSL_read_direct(sslNativePointer, addr, len, this); if (sslRead > 0) { dst.position((pos + sslRead)); } } else { sslRead = org.conscrypt.NativeCrypto.ENGINE_SSL_read_heap(sslNativePointer, dst.array(), ((dst.arrayOffset()) + pos), len, this); if (sslRead > 0) { dst.position((pos + sslRead)); } } return sslRead; } catch (java.io.IOException e) { throw new javax.net.ssl.SSLException(e); } }<END_MOD>
@javax.annotation.Nonnull private java.io.File createJackArchiveWithResources() throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File jackAr = com.android.jack.test.toolchain.AbstractTestTools.createTempFile("resourcetestjack", toolchain.getLibraryExtension()); toolchain.addResourceDir(new java.io.File(com.android.jack.resource.ResourceTests.FILE, "rsc")); toolchain.addToClasspath(<START_MOD>new java.io.File("/usr/local/google/home/benoitlamarche/jacklibwithnojayce2.jack")); toolchain.addToClasspath(<END_MOD>toolchain.getDefaultBootClasspath())<START_MOD>; toolchain.addProperty("jack.import.resource.policy", "keep-first")<END_MOD>.srcToLib(jackAr, true, com.android.jack.resource.ResourceTests.FILE); <START_MOD>java.lang.System.out.println(jackAr.getAbsolutePath()); <END_MOD>return jackAr; }
public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.<START_MOD>getKey(256)<END_MOD>); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, <START_MOD>android.net.cts.IpSecManagerTest.getKey<END_MOD>(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth<START_MOD>, null<END_MOD>, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, <START_MOD>null, <END_MOD>false, 1, true); }
public native int setsid() throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
@java.lang.Override public void onChanged(android.net.sip.SipAudioCall call) { synchronized(com.android.internal.telephony.sip.SipPhone.class) { com.android.internal.telephony.Call.State newState = com.android.internal.telephony.sip.SipPhone.getCallStateFrom(call); if ((mState) == newState) return; if (newState == (Call.State.INCOMING)) { setState(mOwner.getState()); } else { if ((mOwner) == (mRingingCall)) { if ((mRingingCall.getState()) == (Call.State.WAITING)) { try { switchHoldingAndActive(); } catch (com.android.internal.telephony.CallStateException e) { onCallEnded(DisconnectCause.LOCAL); return; } } mForegroundCall.switchWith(mRingingCall); } setState(newState); } mOwner.onConnectionStateChanged(this); if (com.android.internal.telephony.sip.SipPhone.SipConnection.SCN_DBG) <START_MOD>{ if (com.android.internal.telephony.sip.SipPhone.DBG_BUILD) { <END_MOD>log((((((   + (mPeer.getUriString())) +     + (mState)) +   on phone   + (getPhone()))); } <START_MOD>else { log((((   + (mState)) +   on phone   + (getPhone()))); } } } }<END_MOD>
@java.lang.Override public void incrementOperationCount(int uid, int tag, int operationCount) { if ((android.os.Binder.getCallingUid()) != uid) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.UPDATE_DEVICE_STATS, com.android.server.net.NetworkStatsService.TAG); } if (operationCount < 0) { throw new java.lang.IllegalArgumentException( count can only be incremented } if (tag == (android.net.NetworkStats.TAG_NONE)) { throw new java.lang.IllegalArgumentException( count must have specific tag } synchronized(mStatsLock) { final int set = mActiveUidCounterSet.get(uid, android.net.NetworkStats.SET_DEFAULT); mUidOperations.combineValues(mActiveIface, uid, set, tag, <START_MOD>android.net.NetworkStats.DEFAULT_NETWORK_YES, <END_MOD>0L, 0L, 0L, 0L, operationCount); mUidOperations.combineValues(mActiveIface, uid, set, android.net.NetworkStats.TAG_NONE, <START_MOD>android.net.NetworkStats.DEFAULT_NETWORK_YES, 0L, 0L, 0L, 0L, operationCount); } }<END_MOD>
<START_MOD>public java.lang.String getTargetCodename() { return mTargetInfo.getTarget().getVersion().getCodename(); }<END_MOD>
static void setShort(java.lang.invoke.MethodHandle m, Main.ValueHolder v, short value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.<START_MOD>assertEqual<END_MOD>(exceptionThrown, expectFailure); }
public void testConfigurationUpdatesWhenResizedFromDockedStack() throws java.lang.Exception { if (<START_MOD>(<END_MOD>!(supportsMultiWindowMode(<START_MOD>))) || (!(supportsSplitScreenMultiWindow()<END_MOD>))) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO,   test: no multi-window support return; } launchActivityInStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); moveActivityToStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); android.server.cts.ActivityManagerAppConfigurationTests.assertSizesAreSane(fullscreenSizes, dockedSizes); }
public java.net.URL getEntryUrlOrNull(java.lang.String entryName) { if ((jarFile.findEntry(entryName)) != null) { return <START_MOD>convertEntryToUrl<END_MOD>(entryName); } return null; }
@com.googlecode.android_scripting.rpc.Rpc(description =   True if Enhanced 4g Lte mode is enabled by user. public boolean imsIsEnhanced4gLteModeSettingEnabledByUser() { return com.android.ims.ImsManager.<START_MOD>isEnhanced4gLteModeSettingEnabledByUserForSlot<END_MOD>(); }
<START_MOD>@javax.annotation.Nonnull java.io.OutputStream getOutputStream() throws java.io.IOException;<END_MOD>
boolean disconnect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (   + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM,   BLUETOOTH ADMIN permission <START_MOD>synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachines.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (( disconnect request for   + device) +   : no state machine return false; } <END_MOD>int connectionState = <START_MOD>sm<END_MOD>.getConnectionState(); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } <START_MOD>sm<END_MOD>.sendMessage(A2dpStateMachine.DISCONNECT); return true; }<START_MOD> }<END_MOD>
<START_MOD>@java.lang.Override public boolean equals(java.lang.Object o) { return (o instanceof com.android.ide.common.repository.GradleCoordinate.ListComponent) && (((com.android.ide.common.repository.GradleCoordinate.ListComponent) (o)).myItems.equals(myItems)); }<END_MOD>
@org.junit.Test public void opc_goto() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(OPC_GOTO).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), <START_MOD>"jack/jack-tests/src/com/android/jack/DxTestCase.java"<END_MOD>)).compileAndRunTest(); }
<START_MOD>@com.android.internal.annotations.VisibleForTesting <END_MOD>public int getDefaultSim() { <START_MOD>int slotId =<END_MOD> android.telephony.SubscriptionManager.getSlotId(android.telephony.SubscriptionManager.getDefaultSubscriptionId()); <START_MOD>if (slotId == (SubscriptionManager.SIM_NOT_INSERTED)) { slotId = SubscriptionManager.DEFAULT_SIM_SLOT_INDEX; <END_MOD>}<START_MOD> return slotId; }<END_MOD>
@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.<START_MOD>MultiCstInsn<END_MOD>)) { return false; } com.android.dx.dex.code.<START_MOD>MultiCstInsn mci = ((com.android.dx.dex.code.MultiCstInsn<END_MOD>) (insn)); int <START_MOD>methodIdx = mci<END_MOD>.getIndex(<START_MOD>0); int protoIdx = mci.getIndex(1<END_MOD>); if (<START_MOD>(<END_MOD>!(unsignedFitsInShort(<START_MOD>methodIdx))) || (!(unsignedFitsInShort(protoIdx)<END_MOD>))) { return false; } com.android.dx.rop.cst.Constant <START_MOD>methodRef = mci.getConstant(0); if (!(methodRef instanceof com.android.dx.rop.<END_MOD>cst<START_MOD>.CstMethodRef)) { return false; } com.android.dx.rop.cst.Constant protoRef = mci<END_MOD>.getConstant(<START_MOD>1<END_MOD>); if (!(<START_MOD>protoRef instanceof com.android.dx.rop.<END_MOD>cst<START_MOD>.CstProtoRef<END_MOD>)) { return false; } com.android.dx.rop.code.RegisterSpecList regs = <START_MOD>mci<END_MOD>.getRegisters(); return (com.android.dx.dex.code.form.Form45cc.wordCount(regs)) >= 0; }
<START_MOD>@java.lang.Override public boolean addPasspointConfiguration(android.net.wifi.hotspot2.PasspointConfiguration config) { return false; }<END_MOD>
public boolean saveToStore(boolean forceWrite) { java.util.ArrayList<android.net.wifi.WifiConfiguration> sharedConfigurations = new java.util.ArrayList<>(); java.util.ArrayList<android.net.wifi.WifiConfiguration> userConfigurations = new java.util.ArrayList<>(); for (android.net.wifi.WifiConfiguration config : mConfiguredNetworks.valuesForAllUsers()) { if ((!(config.ephemeral)) && (!(config.isPasspoint()))) { if ((config.shared) || (!(com.android.server.wifi.WifiConfigurationUtil.doesUidBelongToAnyProfile(config.creatorUid, mUserManager.getProfiles(mCurrentUserId))))) { sharedConfigurations.add(config); } else { userConfigurations.add(config); } } } <START_MOD>mWifiNetworkListStoreData.setSharedConfigurations<END_MOD>(sharedConfigurations<START_MOD>); mWifiNetworkListStoreData.setUserConfigurations(<END_MOD>userConfigurations<START_MOD>); mDeletedEphemeralSsidsStoreData.setSsidList(<END_MOD>mDeletedEphemeralSSIDs); try { mWifiConfigStore.write(forceWrite); } catch (java.io.IOException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG,   to store failed. Saved networks maybe lost! e); return false; } catch (org.xmlpull.v1.XmlPullParserException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG,   serialization for store failed. Saved networks maybe lost! e); return false; } return true; }
public void onAlternateLayoutCreated() { org.eclipse.core.resources.IFile best = com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher.getBestFileMatch(this); if ((best != null) && (!(best.equals(mEditedFile)))) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher matcher = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher(this); matcher.adaptConfigSelection(true); mConfiguration.syncFolderConfig(); if ((mClient) != null) { mClient.changed(com.android.ide.eclipse.adt.internal.editors.layout.configuration.<START_MOD>Configuration<END_MOD>.<START_MOD>CFG_ALL<END_MOD>); } } }
public void run() { android.<START_MOD>renderscript<END_MOD>.RenderScript pRS = android.<START_MOD>renderscript<END_MOD>.RenderScript.create(mCtx); com.android.rs.test.ScriptC_kernel2d_oldstyle s = new com.android.rs.test.ScriptC_kernel2d_oldstyle(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_init_vars(A); s.forEach_xform(A, B); s.invoke_verify_xform(); s.invoke_kernel_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }
void removeForward(int localPort, int remotePort) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException<START_MOD>, java.lang.InterruptedException<END_MOD>;
<START_MOD>private void checkRefactoring(@com.android.annotations.NonNull java.lang.Object[] testData, @com.android.annotations.NonNull java.lang.Object resource, @com.android.annotations.NonNull java.lang.String newName, @com.android.annotations.NonNull java.lang.String expected) throws java.lang.Exception { org.eclipse.core.resources.IProject project = createProject(testData); checkRefactoring(project, resource, newName, expected); }<END_MOD>
<START_MOD>public java.util.Set<android.util.Pair<android.security.net.config.Domain, android.security.net.config.NetworkSecurityConfig>> getPerDomainConfigs() { ensureInitialized(); return mConfigSource.getPerDomainConfigs(); }<END_MOD>
private static java.nio.charset.Charset lookup2(java.lang.String charsetName) {<START_MOD> java.nio.charset.Charset cs; synchronized(java.nio.charset.Charset.cache2) { if ((cs = java.nio.charset.Charset.cache2.get(charsetName)) != null) { java.nio.charset.Charset.cache1 = new<END_MOD> java.lang.Object[]<START_MOD>{ charsetName, cs }; return cs; } }<END_MOD> if (((<START_MOD>cs = libcore.icu.NativeConverter.charsetForName(charsetName)<END_MOD>) != null) <START_MOD>|| ((cs = java.nio.charset.Charset.lookupViaProviders(charsetName)) != null)) { java.nio.charset.Charset.cache(charsetName, cs)<END_MOD>; return <START_MOD>cs; } java.nio.charset.Charset.checkName(charsetName<END_MOD>); return <START_MOD>null; }<END_MOD>
public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.util.MutableLong inOffset, long byteCount) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException { return os.sendfile(outFd, inFd, inOffset, byteCount); }
native void rsnAllocationData2D(long con, long id, int xoff, int yoff, int mip, int face, int w, int h, java.lang.Object d, int sizeBytes, int dt<START_MOD>, int mSize, boolean usePadding, byte[] buffer<END_MOD>);
protected void addDeviceAndVariantTabs() { if ((results.getResultsPerDevices().size()) > 1) { addTab("Devices", new org.gradle.internal.ErroringAction<<START_MOD>com.android.build.gradle.internal.test.report<END_MOD>.SimpleHtmlWriter>() { @java.lang.Override public void doExecute(<START_MOD>com.android.build.gradle.internal.test.report<END_MOD>.SimpleHtmlWriter writer) throws java.io.IOException { renderCompositeResults(writer, results.getResultsPerDevices(), "Devices"); } }); } if ((results.getResultsPerVariants().size()) > 1) { addTab("Variants", new org.gradle.internal.ErroringAction<<START_MOD>com.android.build.gradle.internal.test.report<END_MOD>.SimpleHtmlWriter>() { @java.lang.Override public void doExecute(<START_MOD>com.android.build.gradle.internal.test.report<END_MOD>.SimpleHtmlWriter writer) throws java.io.IOException { renderCompositeResults(writer, results.getResultsPerVariants(), "Variants"); } }); } }
<START_MOD>public static native void SSL_use_OpenSSL_PrivateKey_for_tls_channel_id(int ssl, int pkey);<END_MOD>
public int readv(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws <START_MOD>android.os.ErrnoException, <END_MOD>java.io.InterruptedIOException;
@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.lang.String testPackageName = "com.android.jack.shrob.test" + testNumber; java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(testPackageName); com.android.jack.test.toolchain.JackApiToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class); <START_MOD>java.io.File refFolder = new java.io.File(testFolder, "refsObfuscationWithoutMapping"); toolchain.addProperty(NameProviderFactory.NAMEPROVIDER.getName(), "rot13"); toolchain.addProperty(Options.METHOD_FILTER.getName(), "supported-methods"); java.io.File candidateOutputMapping = com.android.jack.test.toolchain.AbstractTestTools.createTempFile("mapping", ".txt"); java.io.File refOutputMapping = new java.io.File(refFolder, (("expected-" + flagNumber) + ".txt")); java.io.File proguardFlagsFile = addOptionsToFlagsFile(new java.io.File(testFolder, <END_MOD>("proguard.flags" + flagNumber)<START_MOD>)<END_MOD>, testFolder<START_MOD>, ( -printmapping   + (candidateOutputMapping<END_MOD>.getAbsolutePath()<START_MOD>))); toolchain.addProguardFlags(proguardFlagsFile); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(<END_MOD>new java.io.File(testFolder, <START_MOD>"jack")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorMapping(<END_MOD>candidateOutputMapping<START_MOD>,<END_MOD> refOutputMapping)); }
public void onClick(android.content.DialogInterface dialog, int whichButton) { dialog.dismiss(); <START_MOD>messageQueue.remove(0); if ((messageQueue.size()) == 0) { <END_MOD>finish(); }<START_MOD> else { displayZeroMessage(messageQueue.get(0)); } }<END_MOD>
@java.lang.Override public void fchown(java.io.FileDescriptor fd, int uid, int gid) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.fchown(fd, uid, gid); }
public void notifyANQPDone(long bssid, boolean success) { java.util.Map<com.android.server.wifi.hotspot2.anqp.Constants.ANQPElementType, com.android.server.wifi.hotspot2.anqp.ANQPElement> elements = null; if (success) { java.lang.String bssData = <START_MOD>""<END_MOD>; try { elements = com.android.server.wifi.hotspot2.PasspointEventHandler.parseWPSData(bssData); android.util.Log.d(com.android.server.wifi.hotspot2.Utils.hs2LogTag(getClass()), java.lang.String.format( ANQP response for %012x: %s bssid, elements)); } catch (java.io.IOException | java.nio.BufferUnderflowException e) { android.util.Log.e(com.android.server.wifi.hotspot2.Utils.hs2LogTag(getClass()), ((( to parse ANQP:   + (e.toString())) +     + bssData)); } } mCallbacks.onANQPResponse(bssid, elements); }
<START_MOD>private com.android.jack.optimizations.valuepropagation.CompilationProperties defaultProperties() { return CompilationProperties.EMPTY.withPreserveJls(false).withPreserveReflections(false).with(Optimizations.FieldValuePropagation.ENABLE.getName(), true).with(Optimizations.ArgumentValuePropagation.ENABLE.getName(), true); }<END_MOD>
@org.junit.Test public void testReconnectOnPartialConnect() { android.bluetooth.BluetoothDevice[] bondedDevices = new android.bluetooth.BluetoothDevice[1]; bondedDevices[0] = <START_MOD>mTestDevice; when(mAdapterService<END_MOD>.getBondedDevices()).thenReturn(bondedDevices); when(<START_MOD>mHeadsetService<END_MOD>.getPriority(<START_MOD>mTestDevice<END_MOD>)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(<START_MOD>mA2dpService<END_MOD>.getPriority(<START_MOD>mTestDevice<END_MOD>)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(<START_MOD>mAdapterService<END_MOD>.getState()).thenReturn(BluetoothAdapter.STATE_ON); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(<START_MOD>mAdapterService, mServiceFactory<END_MOD>); java.util.ArrayList<android.bluetooth.BluetoothDevice> hsConnectedDevices = new java.util.ArrayList<>(); hsConnectedDevices.add(<START_MOD>mTestDevice); when(mHeadsetService<END_MOD>.getConnectedDevices()).thenReturn(hsConnectedDevices); when(<START_MOD>mA2dpService<END_MOD>.getConnectionState(<START_MOD>mTestDevice<END_MOD>)).thenReturn(BluetoothProfile.STATE_DISCONNECTED); <START_MOD>android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mTestDevice); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, BluetoothProfile.STATE_DISCONNECTED); intent.putExtra(BluetoothProfile.EXTRA_STATE, BluetoothProfile.STATE_CONNECTED); intent.addFlags(Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND); injector.onReceive(null, intent); executeDelayedMessages(2); <END_MOD>verify(<START_MOD>mA2dpService, <END_MOD>times(1)).connect(eq(<START_MOD>mTestDevice<END_MOD>)); }
<START_MOD>public static void bind(java.io.FileDescriptor fd, java.net.InetAddress address, int port) throws android.os.ErrnoException, java.net.SocketException { Libcore.os.bind(fd, address, port); }<END_MOD>
@java.lang.Override @javax.annotation.Nonnull public void libToLib(@javax.annotation.Nonnull java.io.File[] in, @javax.annotation.Nonnull java.io.File out, boolean zipFiles) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add("java"); args.add("-cp"); args.add(jackPrebuilt.getAbsolutePath()); if ((incrementalFolder) != null) { args.add(com.android.jack.experimental.incremental.Main.class.getName()); args.add("--incremental-folder"); args.add(incrementalFolder.getAbsolutePath()); } else { args.add(com.android.jack.Main.class.getName()); } <START_MOD>for (java.io.File res : resImport) { args.add("--import-res"); args.add(res.getPath()); } <END_MOD>com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if ((jarjarRules) != null) { args.add("--config-jarjar"); args.add(jarjarRules.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add("--config-proguard"); args.add(flags.getAbsolutePath()); } for (java.io.File staticlib : in) { args.add("--import"); args.add(staticlib.getAbsolutePath()); } for (java.io.File staticLib : staticLibs) { args.add("--import"); args.add(staticLib.getAbsolutePath()); } if (zipFiles) { args.add("--output-jack"); } else { args.add("--output-jack-dir"); } args.add(out.getAbsolutePath()); com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(outRedirectStream); exec.setOut(errRedirectStream); exec.setVerbose(true); if (!(exec.run())) { throw new java.lang.RuntimeException( compiler exited with an error } }
static void setLong(java.lang.invoke.MethodHandle m, Main.ValueHolder v, long value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.<START_MOD>assertEqual<END_MOD>(exceptionThrown, expectFailure); }
private void test_leaveGroupLjava_net_SocketAddressLjava_net_NetworkInterface(java.net.InetAddress group, java.net.InetAddress group2) throws java.lang.Exception { java.lang.String msg = null; java.net.SocketAddress groupSockAddr = null; java.net.SocketAddress groupSockAddr2 = null; java.net.MulticastSocket mss = new java.net.MulticastSocket(0); groupSockAddr = new java.net.InetSocketAddress(group, mss.getLocalPort()); mss.joinGroup(groupSockAddr, null); mss.leaveGroup(groupSockAddr, null); try { mss.leaveGroup(groupSockAddr, null); fail( not get exception when trying to leave group that was already left } catch (java.io.IOException expected) { } groupSockAddr2 = new java.net.InetSocketAddress(group2, mss.getLocalPort()); mss.joinGroup(groupSockAddr, networkInterface1); try { mss.leaveGroup(groupSockAddr2, networkInterface1); fail( not get exception when trying to leave group that was never joined } catch (java.io.IOException expected) { } mss.leaveGroup(groupSockAddr, networkInterface1); mss.joinGroup(groupSockAddr, networkInterface1); try { mss.leaveGroup(groupSockAddr, <START_MOD>loopbackInterface<END_MOD>); fail(((((( not get exception when trying to leave group on wrong interface   +   on [ + (networkInterface1)) +   left on [ + (<START_MOD>loopbackInterface<END_MOD>)) + "]")); } catch (java.io.IOException expected) { } }
<START_MOD>@java.lang.Override public void handleMessage(android.os.Message msg) { if (com.android.internal.telephony.DeviceStateMonitor.DBG) log(("handleMessage msg=" + msg)); switch (msg.what) { case com.android.internal.telephony.DeviceStateMonitor.EVENT_RIL_CONNECTED : onRilConnected(); break; default : updateDeviceState(msg.what, ((msg.arg1) != 0)); } }<END_MOD>
@org.junit.Test @java.lang.Runtime public void test002() throws java.lang.Exception { java.lang.String test = "com.android.jack.optimizations.valuepropagation.test002"; java.lang.String aType = "Lcom/android/jack/optimizations/valuepropagation/test002/jack/A;"; java.lang.String bType = "Lcom/android/jack/optimizations/valuepropagation/test002/jack/B;"; java.lang.String cType = "Lcom/android/jack/optimizations/valuepropagation/test002/jack/C;"; java.lang.String dType = "Lcom/android/jack/optimizations/valuepropagation/test002/jack/D;"; compileAndValidate(defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert("<init>(I)V", dalvik(test, "A.init.dalvik")).andAlso(missing("<clinit>()V"))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert("<init>(I)V", dalvik(test, "B.init.dalvik")).insert("<clinit>()V", dalvik(test, "B.clinit.dalvik"))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert("<init>()V", dalvik(test, "C.init.dalvik")).insert("foo()I", dalvik(test, "C.foo.dalvik"))).insert(dType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert("foo()I", dalvik(test, "D.foo.dalvik")))<START_MOD>, test<END_MOD>); }
public void <START_MOD>test_bindLjava_net_SocketAddress<END_MOD>() throws java.lang.Exception { <START_MOD>int[] ports = tests.support.Support_PortManager.getNextPortsForUDP(3); int serverPortNumber = ports[1]; java.net.InetAddress localHost = java.net.InetAddress.getLocalHost(); java.net.InetSocketAddress localAddress1 = new java.net.InetSocketAddress(localHost, ports[0]); <END_MOD>java.net.DatagramSocket <START_MOD>theSocket = new java.net.DatagramSocket(localAddress1); assertEquals(localAddress1, theSocket.getLocalSocketAddress()); java.net.InetSocketAddress localAddress2 = new java.net.InetSocketAddress(localHost, ports[2]); java.net.DatagramSocket <END_MOD>ds = new java.net.DatagramSocket(<START_MOD>((java.net.SocketAddress) (null))<END_MOD>); ds.<START_MOD>bind(localAddress2); org.apache.harmony.tests.java.net.DatagramSocketTest.DatagramServer server = new org.apache.harmony.tests.java.net.DatagramSocketTest.DatagramServer(serverPortNumber, localHost); server.start(); java.lang.Thread.sleep(1000); <END_MOD>ds.<START_MOD>connect(new java.net.InetSocketAddress(localHost, serverPortNumber)); byte[] sendBytes = new byte[]{ 'T', 'e', 's', 't',  <END_MOD> }<START_MOD>; java.net.DatagramPacket send = new java.net.DatagramPacket(sendBytes, sendBytes.length); ds.send(send); java.lang.Thread.sleep(1000); ds.close(); assertEquals(localAddress2, server.rdp.getSocketAddress()); if (server != null) { server.stopServer(); } }<END_MOD>
<START_MOD>public static void run() throws java.lang.Exception { art.Locals.EnableLocalVariableAccess(); final art.Test1939.TestCase[] MAIN_TEST_CASES = new art.Test1939.TestCase[]{ }; art.Test1939.TestCase test = new art.Test1939.TestCase(art.Test1939.getProxyObject(art.Test1939.Foo.class), art.Test1939.getMethod(art.Test1939.Foo.class, "InterfaceProxyMethod")); test.exec(art.Test1939.NamedGet("This", Locals::GetLocalInstance)); test.exec(art.Test1939.NamedGet("LocalReference0", ( t, d) -> art.Locals.GetLocalVariableObject(t, d, 0))); test.exec(art.Test1939.NamedGet("ProxyFrameLocation", ( t, d) -> java.lang.Long.valueOf(art.Test1939.GetFrameLocation(t, d)))); test.exec(art.Test1939.NamedGet("ProxyFrameMethod", art.Test1939::GetFrameMethod)); }<END_MOD>
public static void startMethodTracing(java.lang.String traceName) { android.os.Debug.startMethodTracing(traceName, 0, 0<START_MOD>, false, 0<END_MOD>); }
<START_MOD>public android.net.NetworkRequest.Builder setNetworkSpecifier(java.lang.String networkSpecifier) { return setNetworkSpecifier(new android.net.StringNetworkSpecifier(networkSpecifier)); }<END_MOD>
<START_MOD>public void startQuery(android.content.ComponentName name, java.lang.String intentFilter) { if (mActiveQueries.containsKey(name)) { return; } com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.ImsServiceFeatureQuery query = new com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.ImsServiceFeatureQuery(mContext, name, intentFilter); mActiveQueries.put(name, query); query.execute(); }<END_MOD>
<START_MOD>@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JInstanceOf x) { check(x.getTestType(), x); }<END_MOD>
@org.junit.Test public void testWriteZipVFS() throws com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotSetPermissionException, com.android.sched.util.file.FileAlreadyExistsException, com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotDirectoryException, com.android.sched.util.file.WrongPermissionException, java.io.IOException { java.io.File file = null; com.android.sched.vfs.InputOutputVFS <START_MOD>ioVFS1<END_MOD> = null; com.android.sched.vfs.<START_MOD>InputVFS iVFS2 = null; try { file = java.io.File.createTempFile("vfs", ".zip"); java.lang.String path = file.getAbsolutePath(); ioVFS1 = new com.android.sched.vfs.GenericInputOutputVFS(new com.android.sched.vfs.WriteZipFS(new com.android.sched.util.file.OutputZipFile(path, null, com.android.sched.util.file.FileOrDirectory.Existence.MAY_EXIST, com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE))); testOutputVFS(ioVFS1); ioVFS1.close(); iVFS2 = new com.android.sched.vfs.<END_MOD>InputZipVFS<START_MOD>(new com.android.sched.util.file.InputZipFile(<END_MOD>path, null, com.android.sched.util.file.FileOrDirectory.Existence.<START_MOD>MUST_EXIST<END_MOD>, com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE))<START_MOD>; testInputVFS(iVFS2); checkZipLocations(iVFS2); } finally { if (ioVFS1 != null) { ioVFS1<END_MOD>.close(); <START_MOD>}<END_MOD> if (<START_MOD>iVFS2<END_MOD> != null) { <START_MOD>iVFS2<END_MOD>.close(); } if (<START_MOD>file<END_MOD> != null) { junit.framework.Assert.assertTrue(file.delete()); } } }
<START_MOD>@org.junit.Test @android.support.test.filters.SmallTest public void testUpdateIccCardStatus() { int phoneId = 0; mIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.update(mSimulatedCommands, mIccCardStatus, phoneId); verify(mSubInfoRecordUpdater, times(1)).updateInternalIccState(IccCardConstants.INTENT_VALUE_ICC_ABSENT, null, phoneId); assertEquals(IccCardStatus.CardState.CARDSTATE_ABSENT, mUiccSlot.getCardState()); assertEquals(null, mUiccSlot.getUiccCard()); mIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_PRESENT; mUiccSlot.update(mSimulatedCommands, mIccCardStatus, phoneId); verify(mTelephonyComponentFactory, times(1)).makeUiccProfile(anyObject(), eq(mSimulatedCommands), eq(mIccCardStatus), anyInt(), anyObject()); assertEquals(IccCardStatus.CardState.CARDSTATE_PRESENT, mUiccSlot.getCardState()); assertTrue(((mUiccSlot.getUiccCard()) != null)); mIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.update(mSimulatedCommands, mIccCardStatus, phoneId); verify(mSubInfoRecordUpdater, times(2)).updateInternalIccState(IccCardConstants.INTENT_VALUE_ICC_ABSENT, null, phoneId); verify(mUiccProfile, times(1)).dispose(); assertEquals(IccCardStatus.CardState.CARDSTATE_ABSENT, mUiccSlot.getCardState()); assertEquals(null, mUiccSlot.getUiccCard()); }<END_MOD>
private void updateAlertText(android.telephony.CellBroadcastMessage message) { int titleId = com.android.cellbroadcastreceiver.CellBroadcastResources.getDialogTitleResource(getApplicationContext(), message); <START_MOD>java.lang.String title = getText(titleId).toString(); android.widget.TextView titleTextView = findViewById(R.id.alertTitle); if (getApplicationContext().getResources().getBoolean(R.bool.show_date_time_title)) { titleTextView.setSingleLine(false); title += "\n" + (message.getDateString(getApplicationContext())); } <END_MOD>setTitle(<START_MOD>title); titleTextView<END_MOD>.setText(<START_MOD>title<END_MOD>); ((android.widget.TextView) (findViewById(R.id.message))).setText(message.getMessageBody()); if ((mMessageList.size()) > 1) { ((android.widget.TextView) (findViewById(R.id.dismissButton))).setText((( (1/ + (mMessageList.size())) + ")")); } else if ((mMessageList.size()) == 1) { ((android.widget.TextView) (findViewById(R.id.dismissButton))).setText("OK"); } com.android.cellbroadcastreceiver.CellBroadcastAlertReminder.queueAlertReminder(this, true); }
@org.junit.Test<START_MOD> @java.lang.Runtime<END_MOD> public void testDefaultMethod017() throws java.lang.Exception { run(DEFAULTMETHOD017); }
<START_MOD>public static void listen(java.io.FileDescriptor fd, int backlog) throws android.os.ErrnoException { Libcore.os.listen(fd, backlog); }<END_MOD>
<START_MOD>public static void munlock(long address, long byteCount) throws android.os.ErrnoException { Libcore.os.munlock(address, byteCount); }<END_MOD>
<START_MOD>public java.lang.String getDescription(DiscoveredPrinter printer) { if ((com.android.bips.p2p.P2pUtils.isP2p(printer)) || (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(this, printer))) { return getString(R.string.wifi_direct); } java.lang.String host = printer.path.getHost().replaceAll(":[0-9]+", ""); if (!(android.text.TextUtils.isEmpty(printer.location))) { return getString(R.string.printer_description, host, printer.location); } else { return host; } }<END_MOD>
static float <START_MOD>$opt$noinline$IntToFloat<END_MOD>(int a) { return ((float) (a)); }
public boolean setRemoteAlias(android.bluetooth.BluetoothDevice device, java.lang.String name) { if (!(com.android.bluetooth.Utils.<START_MOD>checkCallerAllowManagedProfiles<END_MOD>(<START_MOD>mService<END_MOD>))) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG,   - Not allowed for non-active user return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.setRemoteAlias(device, name); }
@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); <START_MOD>riljLog("getIccSlotsStatus"); <END_MOD>if (radioProxy != null) { <START_MOD>riljLog( radioProxy != null <END_MOD>android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { <START_MOD>riljLog( radioProxy12 == null <END_MOD>if (result != null) { <START_MOD>riljLog( result != null <END_MOD>android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SLOT_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.getSimSlotsStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getIccSlotStatus", e); } } } }
<START_MOD>public static void setTestResultAndFinish(android.app.Activity activity, android.view.View target) { switch (target.getId()) { case R.id.pass_button : com.android.cts.verifier.TestResult.setPassedResult(activity); break; case R.id.fail_button : com.android.cts.verifier.TestResult.setFailedResult(activity); break; default : throw new java.lang.IllegalArgumentException(("Unknown id: " + (target.getId()))); } activity.finish(); }<END_MOD>
<START_MOD>@java.lang.Override public void provideConstructorArguments(java.util.List<org.apache.harmony.jpda.tests.framework.jdwp.Value> constructorArguments) { long debuggeeClassId = getClassIDBySignature(getDebuggeeClassSignature()); long byteArrayFieldId = checkField(debuggeeClassId, "BYTE_ARRAY"); long charsetFieldId = checkField(debuggeeClassId, "CHARSET"); org.apache.harmony.jpda.tests.framework.jdwp.Value byteArrayValue = debuggeeWrapper.vmMirror.getReferenceTypeValue(debuggeeClassId, byteArrayFieldId); org.apache.harmony.jpda.tests.framework.jdwp.Value charsetValue = debuggeeWrapper.vmMirror.getReferenceTypeValue(debuggeeClassId, charsetFieldId); constructorArguments.add(byteArrayValue); constructorArguments.add(new org.apache.harmony.jpda.tests.framework.jdwp.Value(0)); constructorArguments.add(new org.apache.harmony.jpda.tests.framework.jdwp.Value(1)); constructorArguments.add(charsetValue); }<END_MOD>
public void test_nullLocale() { <START_MOD>assertCalendarEquals<END_MOD>(java.util.Calendar.getInstance(java.util.Locale.getDefault()), java.util.Calendar.getInstance(((java.util.Locale) (null)))); <START_MOD>assertCalendarEquals<END_MOD>(java.util.Calendar.getInstance(java.util.TimeZone.getDefault(), java.util.Locale.getDefault()), java.util.Calendar.getInstance(java.util.TimeZone.getDefault(), null)); <START_MOD>assertCalendarEquals<END_MOD>(new java.util.GregorianCalendar(java.util.Locale.getDefault()), new java.util.GregorianCalendar(((java.util.Locale) (null)))); }
<START_MOD>public void refreshSdk() { com.android.ide.eclipse.adt.internal.sdk.Sdk sdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent(); if (sdk == null) { return; } boolean changed = ((sdk.getSdkLocation()) == null) || (!(sdk.getSdkLocation().equals(com.android.ide.eclipse.adt.internal.preferences.AdtPrefs.getPrefs().getOsSdkFolder()))); if (!changed) { changed = sdk.haveTargetsChanged(); if (changed) com.android.ide.eclipse.adt.AdtPlugin.printToConsole("DEBUG", "sdk targets changed"); } if (changed) { reparseSdk(); } }<END_MOD>
@javax.annotation.Nonnull private static java.util.Properties loadLibraryProperties(@javax.annotation.Nonnull com.android.sched.vfs.InputVFS vfs) throws com.android.jack.library.NotJackLibraryException { java.util.Properties libraryProperties = new java.util.Properties(); try { com.android.sched.vfs.InputVFile libProp = vfs.getRootInputVDir().getInputVFile(JackLibrary.LIBRARY_PROPERTIES_VPATH); <START_MOD>java.io.InputStream inputStream = null; try { inputStream = libProp.getInputStream(); <END_MOD>libraryProperties.load(<START_MOD>inputStream); } finally { if (inputStream != null) { try { inputStream.close(); } catch (java.io.IOException e) { com.android.jack.library.JackLibraryFactory.logger.log(java.util.logging.Level.WARNING, ( to close   + (<END_MOD>libProp.<START_MOD>getLocation().getDescription()))); } } }<END_MOD> } catch (java.io.IOException e) { throw new com.android.jack.library.NotJackLibraryException(vfs.getLocation()); } return libraryProperties; }
@java.lang.Override public javax.net.ssl.SSLSession getSession(byte[] sessionId)<START_MOD> {<END_MOD> { javax.net.ssl.SSLSession session = super.getSession(sessionId); if (session != null) { return session;<START_MOD> }<END_MOD> } if ((persistentCache) != null) { byte[] data = persistentCache.getSessionData(sessionId); if (data != null) {<START_MOD> org.conscrypt.OpenSSLSessionImpl<END_MOD> session = toSession(data, null, (-1)); if ((session != null) && (session.isValid())) { super.putSession(session); return <START_MOD>org.conscrypt.Platform.wrapSSLSession(<END_MOD>session<START_MOD>)<END_MOD>; } } } return null; }
@java.lang.Override public void onCreate(android.os.Bundle arguments) { java.io.File cacheDir = getTargetContext().getCacheDir(); java.lang.System.setProperty("user.language", "en"); java.lang.System.setProperty("user.region", "US"); java.lang.System.setProperty("java.home", cacheDir.getAbsolutePath()); java.lang.System.setProperty("user.home", cacheDir.getAbsolutePath()); java.lang.System.setProperty("java.io.tmpdir", cacheDir.getAbsolutePath()); java.lang.System.setProperty("user.dir", cacheDir.getAbsolutePath()); java.lang.System.setProperty("javax.net.ssl.trustStore", "/etc/security/cacerts.bks"); java.util.TimeZone.setDefault(java.util.TimeZone.getTimeZone("GMT")); if (arguments != null) { java.lang.String classArg = arguments.getString(android.test.ARGUMENT_TEST_CLASS); mSingleTest = (classArg != null) && (classArg.contains("#")); <START_MOD>java.lang.System.setProperty("cts.telephoneNumber", arguments.getString(android.test.InstrumentationCtsTestRunner.ARGUMENT_TELEPHONE_NUMBER)); <END_MOD>} if ((getContext().checkCallingOrSelfPermission(android.Manifest.permission.DISABLE_KEYGUARD)) == (android.content.pm.PackageManager.PERMISSION_GRANTED)) { android.util.Log.i(android.test.InstrumentationCtsTestRunner.TAG,   keyguard android.app.KeyguardManager keyguardManager = ((android.app.KeyguardManager) (getContext().getSystemService(Context.KEYGUARD_SERVICE))); keyguardManager.newKeyguardLock("cts").disableKeyguard(); } else { android.util.Log.i(android.test.InstrumentationCtsTestRunner.TAG, ( lacks permission to disable keyguard.   +   based tests may fail if keyguard is up } super.onCreate(arguments); }
<START_MOD>public void addSoftware(com.android.sdklib.devices.Device.Software sw) { mSoftware.add(sw); }<END_MOD>
public void testAesCbcHmacSha384Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.<START_MOD>getKey(256)<END_MOD>); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, <START_MOD>android.net.cts.IpSecManagerTest.getKey<END_MOD>(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, <START_MOD>null, <END_MOD>true, 1, false); <START_MOD>checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); <END_MOD>}
private void logErrorAndDisplayDialog(@org.jetbrains.annotations.NotNull final java.lang.String title, @org.jetbrains.annotations.NotNull final java.lang.Exception exception) { com.google.gct.login.GoogleLogin.GOOGLE_LOGIN_LOG.error(exception.getMessage(), exception); <START_MOD>com.google.gct.login.GoogleLoginUtils.showErrorDialog(exception.getMessage(), title); <END_MOD>}
<START_MOD>@org.junit.Test public void validateSimCredentialWithEapAka() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential(); cred.realm = "realm"; cred.simCredential = new android.net.wifi.hotspot2.pps.Credential.SimCredential(); cred.simCredential.imsi = "imsi"; cred.simCredential.eapType = Credential.EAP_AKA; assertTrue(cred.validate()); }<END_MOD>
<START_MOD>public void testSendWithoutConnection() throws java.io.IOException { final int port = 7; final java.lang.String to = "001:db8:dead:beef::f00"; java.net.DatagramSocket s = new java.net.DatagramSocket(); s.connect(java.net.InetAddress.getByName(to), port); try { byte[] data = new byte[100]; java.net.DatagramPacket p = new java.net.DatagramPacket(data, data.length); s.send(p); fail("Send succeeded unexpectedly"); } catch (java.lang.NullPointerException unexpected) { fail("Send did not handle pending connection exception"); } catch (java.io.IOException expected) { } finally { s.close(); } }<END_MOD>
<START_MOD>private void processCallback(int callback) { if ((mCurrentWaitForCallback) == callback) { mBlocker.countDown(); } else { mCallbackQueue.addLast(callback); } }<END_MOD>
<START_MOD>public java.lang.Integer getBatteryLevel() { return mBatteryLevel; }<END_MOD>
<START_MOD>@org.junit.Test public void matchNullDomain() throws java.lang.Exception { com.android.server.wifi.hotspot2.DomainMatcher domainMatcher = new com.android.server.wifi.hotspot2.DomainMatcher(com.android.server.wifi.hotspot2.DomainMatcherTest.PRIMARY_DOMAIN, java.util.Arrays.asList(com.android.server.wifi.hotspot2.DomainMatcherTest.SECONDARY_DOMAIN1, com.android.server.wifi.hotspot2.DomainMatcherTest.SECONDARY_DOMAIN2)); assertEquals(Match.None, domainMatcher.isSubDomain(null)); }<END_MOD>
private void getAllDexFilesFromDir(@javax.annotation.Nonnull com.android.sched.vfs.InputVDir dexFileVDir, @javax.annotation.Nonnull java.util.List<com.android.sched.vfs.InputVFile> dexFiles) { for (com.android.sched.vfs.InputVElement subFile : dexFileVDir.list()) { if (subFile.isVDir()) { getAllDexFilesFromDir(((com.android.sched.vfs.InputVDir) (subFile)), dexFiles); } else if (<START_MOD>(com.android.jack.library.BinaryKind.getBinaryKind(((com.android.sched.vfs.InputVFile) (subFile)))) == (com.android.jack.library.BinaryKind.DEX<END_MOD>)) { dexFiles.add(((com.android.sched.vfs.InputOutputVFile) (subFile))); } } }
private void doSelectionChanged(com.android.ddmlib.IDevice selectedDevice) { <START_MOD>boolean validDevice = <END_MOD>selectedDevice != null<START_MOD>; mCaptureAction.setEnabled(validDevice<END_MOD>); mViewUiAutomatorHierarchyAction.setEnabled(<START_MOD>validDevice<END_MOD>); }
<START_MOD>public void registerForReady(android.os.Handler h, int what, java.lang.Object obj) { android.os.Registrant r = new android.os.Registrant(h, what, obj); mReadyRegistrants.add(r); notifyReadyRegistrantsIfNeeded(r); }<END_MOD>
<START_MOD>@java.lang.Override public void onStartRtt(com.android.server.telecom.testapps.RttTextStream textStream) { boolean doAccept = (java.lang.Math.random()) < 0.5; if (doAccept) { android.telecom.Log.i(this, "Accepting RTT request."); mRttChatbot = new com.android.server.telecom.testapps.RttChatbot(getApplicationContext(), textStream); mRttChatbot.start(); setConnectionProperties(((getConnectionProperties()) | (PROPERTY_IS_RTT))); sendRttConnectionSuccess(); } else { sendRttConnectionFailure(); } }<END_MOD>
@java.lang.Override @java.lang.SuppressWarnings({ "rawtypes", "unchecked" }) public <X extends com.android.sched.schedulable.VisitorSchedulable<T>, U extends com.android.sched.item.Component> void process(@javax.annotation.Nonnull T t) throws com.android.sched.scheduler.ProcessException { com.android.sched.scheduler.<START_MOD>SingleScheduleInstance.Worker worker<END_MOD> = <START_MOD>new<END_MOD> com.android.sched.scheduler.<START_MOD>SingleScheduleInstance.Worker(t); java.lang.Thread thread<END_MOD> = <START_MOD>new java.lang.Thread(null, worker, ((com.android.sched.util.config.ThreadConfig.getConfig().getName()) + "-worker"), com.android.sched.util.config.ThreadConfig.get(<END_MOD>ScheduleInstance<START_MOD>.DEFAULT_STACK_SIZE).longValue()); thread.setDaemon(true); thread.start(); try { thread.join(); } catch (java.lang.InterruptedException e) { java.lang.Thread.currentThread().interrupt(); } worker.throwIfNecessary(); }<END_MOD>
<START_MOD>@org.junit.Test public void anqpResponseFailure() throws java.lang.Exception { com.android.server.wifi.hotspot2.ANQPNetworkKey anqpKey = com.android.server.wifi.hotspot2.ANQPNetworkKey.buildKey(com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_SSID, com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_BSSID, com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_HESSID, com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_ANQP_DOMAIN_ID); when(mAnqpRequestManager.onRequestCompleted(com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_BSSID, false)).thenReturn(anqpKey); mCallbacks.onANQPResponse(com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_BSSID, null); verify(mAnqpCache, never()).addEntry(any(com.android.server.wifi.hotspot2.ANQPNetworkKey.class), anyMap()); }<END_MOD>
private void logi(java.lang.String s) { android.telephony.Rlog.i(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, (<START_MOD>(("[GsmCdmaPhone][" + (getPhoneId())) +  <END_MOD>   + s)); }
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) { com.android.jack.backend.dex.DexWritingTool writingTool = com.android.sched.util.config.ThreadConfig.get(com.android.jack.backend.dex.DexFileWriter.DEX_WRITING_POLICY); <START_MOD>try { <END_MOD>writingTool.write(outputVDir); }<START_MOD> catch (com.android.jack.backend.dex.DexWritingException e) { throw new com.android.jack.JackAbortException(e); } }<END_MOD>
public void setLintOnExport(boolean on) { mLintOnExport = on; <START_MOD>mStore<END_MOD>.setValue(com.android.ide.eclipse.adt.internal.preferences.AdtPrefs.PREFS_LINT_ON_EXPORT, on); }
<START_MOD>@java.lang.Override @javax.annotation.Nonnull com.android.sched.vfs.VPath getPathFromRoot(@javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVFile file) { return file.getWrappedFiles().get(0).getPathFromRoot(); }<END_MOD>
<START_MOD>@org.junit.Test public void validateSimCredentialWithEapSim() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential(); cred.realm = "realm"; cred.simCredential = new android.net.wifi.hotspot2.pps.Credential.SimCredential(); cred.simCredential.imsi = "imsi"; cred.simCredential.eapType = Credential.EAP_SIM; assertTrue(cred.validate()); }<END_MOD>
private native int recvfromBytes(java.io.FileDescriptor fd, java.lang.Object buffer, int byteOffset, int byteCount, int flags, java.net.InetSocketAddress srcAddress) throws <START_MOD>android.os.ErrnoException, <END_MOD>java.net.SocketException;
<START_MOD>public java.util.Iterator<com.android.tools.perflib.vmtrace.Call> getCallHierarchyIterator() { return new com.android.tools.perflib.vmtrace.Call.CallHierarchyIterator(this); }<END_MOD>
<START_MOD>public <END_MOD>android.graphics.Bitmap createNotificationBadgeBitmap(@android.annotation.NonNull android.net.wifi.WifiConfiguration config, @android.annotation.NonNull java.util.List<android.net.wifi.ScanResult> scanResults) { android.net.wifi.ScanResult matchingScanResult = findMatchingScanResult(scanResults, config); if (matchingScanResult == null) { return null; } int rssi = matchingScanResult.level; android.net.WifiKey wifiKey = new android.net.WifiKey(config.SSID, config.BSSID); android.net.ScoredNetwork scoredNetwork = mCachedScoredNetworkProvider.getCachedScoredNetwork(new android.net.NetworkKey(wifiKey)); if (scoredNetwork != null) { return getBadgedWifiBitmap(scoredNetwork.calculateBadge(rssi), rssi); } return null; }
<START_MOD>public void registerForCarrierAction(int action, android.os.Handler h, int what, java.lang.Object obj, boolean notifyNow) { synchronized(mLock) { android.os.RegistrantList list = getRegistrantsFromAction(action); if (list == null) return; android.os.Registrant r = new android.os.Registrant(h, what, obj); list.add(r); if (notifyNow) { java.lang.Object carrierAction = getCarrierAction(action); if (carrierAction == null) return; r.notifyRegistrant(new android.os.AsyncResult(null, carrierAction, null)); } } }<END_MOD>
public void setLong(java.lang.Object object, long value) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException<START_MOD> { checkSetFinal()<END_MOD>;<START_MOD> checkAccess(object, getDeclaringClass(), getModifiers()); setLongNative(object, value); }<END_MOD>
public void dispose() { com.android.internal.telephony.cat.CatService.mIccRecords.unregisterForRecordsLoaded(this<START_MOD>); broadcastCardStateAndIccRefreshResp(CardState.CARDSTATE_ABSENT, null<END_MOD>); mCmdIf.unSetOnCatSessionEnd(this); mCmdIf.unSetOnCatProactiveCmd(this); mCmdIf.unSetOnCatEvent(this); mCmdIf.unSetOnCatCallSetUp(this); <START_MOD>mCmdIf.unregisterForIccRefresh(this); if ((mUiccController) != null) { mUiccController.unregisterForIccChanged(this); mUiccController = null; } com.android.internal.telephony.cat.CatService.sInstance = null; com.android.internal.telephony.cat.CatService.mhandlerThread.quit(); com.android.internal.telephony.cat.CatService.mhandlerThread = null; <END_MOD>removeCallbacksAndMessages(null); }
public java.lang.String getHostByAddr(byte[] addr) throws java.net.UnknownHostException<START_MOD> { dalvik.system.BlockGuard.getThreadPolicy().onNetwork()<END_MOD>;<START_MOD> return getHostByAddr0(addr); }<END_MOD>
<START_MOD>@java.lang.Override @javax.annotation.Nonnull com.android.sched.util.location.Location getVFileLocation(com.android.sched.vfs.BaseVDir parent, com.android.sched.vfs.VPath path) { return vfs.getVFileLocation(parent, path); }<END_MOD>
@org.junit.Test public void <START_MOD>testDefaultTruncLenAuth<END_MOD>() throws java.lang.Exception { <START_MOD>try<END_MOD> <START_MOD>{<END_MOD> android.net.IpSecAlgorithm implicit = new android.net.IpSecAlgorithm(IpSecAlgorithm.AUTH_HMAC_SHA256, java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, (256 / 8))); <START_MOD>fail<END_MOD>( <START_MOD>exception<END_MOD> <START_MOD>on<END_MOD> <START_MOD>unprovided<END_MOD> <START_MOD>auth<END_MOD> <START_MOD>trunclen<END_MOD> <START_MOD>}<END_MOD> <START_MOD>catch<END_MOD> <START_MOD>(java.lang.IllegalArgumentException expected<END_MOD>) <START_MOD>{<END_MOD> }<START_MOD> }<END_MOD>
public boolean parse(java.lang.String s) { if (s == null) { throw new java.lang.NullPointerException( string is null } if (<START_MOD>parse2<END_MOD>(s)) { timezone = android.text.format.Time.TIMEZONE_UTC; return true; } return false; }
@java.lang.Override public void stopDtmfTone(java.lang.String callId<START_MOD>, android.telecom.Logging.Session.Info sessionInfo<END_MOD>) {<START_MOD> android.telecom.Log.startExternalSession(sessionInfo, android.telecom.ConnectionService.SESSION_STOP_DTMF); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = android.telecom.Log.createSubsession();<END_MOD> mHandler.obtainMessage(android.telecom.ConnectionService.MSG_STOP_DTMF_TONE, <START_MOD>args<END_MOD>).sendToTarget(); }<START_MOD> finally { android.telecom.Log.endSession(); } }<END_MOD>
<START_MOD>public void testDivideAvoids64bitOverflow() throws java.lang.Exception { java.math.BigDecimal minLong = new java.math.BigDecimal("-9223372036854775808"); assertEquals("9223372036854775808/(-1)", new java.math.BigDecimal("9223372036854775808"), minLong.divide(new java.math.BigDecimal("-1"), 0, java.math.RoundingMode.UNNECESSARY)); assertEquals("9223372036854775808/(-1) with one decimal of precision", new java.math.BigDecimal("9223372036854775808.0"), minLong.divide(new java.math.BigDecimal("-1"), 1, java.math.RoundingMode.UNNECESSARY)); assertEquals("9223372036854775808/(-1.0)", new java.math.BigDecimal("9223372036854775808"), minLong.divide(new java.math.BigDecimal("-1.0"), 0, java.math.RoundingMode.UNNECESSARY)); assertEquals("922337203685477580.8/(-0.1)", new java.math.BigDecimal("9223372036854775808"), new java.math.BigDecimal("-922337203685477580.8").divide(new java.math.BigDecimal("-0.1"), 0, java.math.RoundingMode.UNNECESSARY)); assertEquals("92233720368547758080/(-1E+1)", new java.math.BigDecimal("9223372036854775808"), new java.math.BigDecimal("-92233720368547758080").divide(new java.math.BigDecimal("-1E+1"), 0, java.math.RoundingMode.UNNECESSARY)); assertEquals("9223372036854775808/(-1.0)", new java.math.BigDecimal("9223372036854775808.0"), minLong.divide(new java.math.BigDecimal("-1.0"), 1, java.math.RoundingMode.UNNECESSARY)); }<END_MOD>
<START_MOD>@com.android.annotations.NonNull protected java.lang.String getFlavoredName(boolean capitalized) { java.lang.StringBuilder builder = new java.lang.StringBuilder(); for (com.android.builder.DefaultProductFlavor flavor : variantConfiguration.getFlavorConfigs()) { java.lang.String name = flavor.getName(); builder.append((capitalized ? com.android.build.gradle.internal.variant.BaseVariantData.capitalize(name) : name)); } return builder.toString(); }<END_MOD>
private int parseHostname(int start, int n) throws java.net.URISyntaxException { int p = start; int q; int l = -1; do { q = scan(p, n, java.net.URI.L_ALPHANUM, java.net.URI.H_ALPHANUM); if (q <= p) break; l = p; if (q > p) { p = q; q = scan(p, n, ((<START_MOD>(<END_MOD>java.net.URI.L_ALPHANUM) | (java.net.URI.L_DASH))<START_MOD> | (java.net.URI.H_UNDERSCORE)), (<END_MOD>((java.net.URI.H_ALPHANUM) | (java.net.URI.H_DASH))<START_MOD> | (java.net.URI.H_UNDERSCORE))<END_MOD>); if (q > p) { if ((charAt((q - 1))) == '-') fail( character in hostname (q - 1)); p = q; } } q = scan(p, n, '.'); if (q <= p) break; p = q; } while (p < n ); if ((p < n) && (!(at(p, n, ':')))) fail( character in hostname p); if (l < 0) failExpecting("hostname", start); if ((l > start) && (!(java.net.URI.match(charAt(l), java.net.URI.L_ALPHA, java.net.URI.H_ALPHA)))) { fail( character in hostname l); } host = substring(start, p); return p; }
<START_MOD>public synchronized java.lang.String getProperty(java.lang.String name) { return mProperties.get(name); }<END_MOD>
<START_MOD>public void registerForLockedRecordsLoaded(android.os.Handler h, int what, java.lang.Object obj) { if (mDestroyed.get()) { return; } android.os.Registrant r = new android.os.Registrant(h, what, obj); mLockedRecordsLoadedRegistrants.add(r); if (((mRecordsToLoad) == 0) && (mLockedRecordsRequested)) { r.notifyRegistrant(new android.os.AsyncResult(null, null, null)); } }<END_MOD>
private void combineSpecifiers(android.net.NetworkCapabilities nc) { if ((mNetworkSpecifier) <START_MOD>!=<END_MOD> <START_MOD>null<END_MOD>) { throw new java.lang.IllegalStateException( combine two networkSpecifiers } setNetworkSpecifier(<START_MOD>nc.getNetworkSpecifier()<END_MOD>); }
<START_MOD>public com.android.sdkmanager.AvdManagerTestCase.TmpAvdManager getAvdManager() { return mAvdManager; }<END_MOD>
<START_MOD>private void checkClzShort3() { android.renderscript.Allocation inValue = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I16_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inValue, 35, (-500), 400); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I16_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testClzShort3(inValue, out); verifyResultsClzShort3(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testClzShort3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I16_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testClzShort3(inValue, out); verifyResultsClzShort3(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testClzShort3: " + (e.toString()))); } }<END_MOD>
<START_MOD>public static libcore.util.TimeZoneFinder createInstanceForTests(java.lang.String xml) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { libcore.util.TimeZoneFinder finder = new libcore.util.TimeZoneFinder(); finder.readXml(new java.io.StringReader(xml)); return finder; }<END_MOD>
<START_MOD>private void setupForRequiredProvisioning() { when(mResources.getStringArray(com.android.internal.R.array.config_mobile_hotspot_provision_app)).thenReturn(com.android.server.connectivity.TetheringTest.PROVISIONING_APP_NAME); when(mSystemProperties.getBoolean(Tethering.DISABLE_PROVISIONING_SYSPROP_KEY, anyBoolean())).thenReturn(false); when(mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE)).thenReturn(mCarrierConfigManager); when(mCarrierConfigManager.getConfig()).thenReturn(mCarrierConfig); when(mCarrierConfig.getBoolean(CarrierConfigManager.KEY_REQUIRE_ENTITLEMENT_CHECKS_BOOL)).thenReturn(true); }<END_MOD>
<START_MOD>@java.lang.Override public void setUp() throws java.lang.Exception { log = new com.android.sdkmanager.AvdManagerTest.MockLog(); fakeSdkDir = java.io.File.createTempFile((((this.getClass().getSimpleName()) + "_") + (this.getName())), null); fakeSdk = com.android.sdkmanager.AvdManagerTest.makeFakeSdk(fakeSdkDir); sdkManager = com.android.sdklib.SdkManager.createManager(fakeSdk.getAbsolutePath(), log); assertNotNull("sdkManager location was invalid", sdkManager); am = new com.android.sdklib.internal.avd.AvdManager(sdkManager, log); avdFolder = new java.io.File(fakeSdk, "avdData"); v0_0 = sdkManager.getTargets()[0]; }<END_MOD>
<START_MOD>final com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo info, java.lang.String customProcess, boolean isolated, boolean noHiddenApiChecks, java.lang.String abiOverride) { com.android.server.am.ProcessRecord app; if (!isolated) { app = getProcessRecordLocked((customProcess != null ? customProcess : info.processName), info.uid, true); } else { app = null; } if (app == null) { app = newProcessRecordLocked(info, customProcess, isolated, 0); updateLruProcessLocked(app, false, null); updateOomAdjLocked(); } try { android.app.AppGlobals.getPackageManager().setPackageStoppedState(info.packageName, false, android.os.UserHandle.getUserId(app.uid)); } catch (android.os.RemoteException e) { } catch (java.lang.IllegalArgumentException e) { android.util.Slog.w(com.android.server.am.ActivityManagerService.TAG, ((("Failed trying to unstop package " + (info.packageName)) + ": ") + e)); } if (((info.flags) & (com.android.server.am.ActivityManagerService.PERSISTENT_MASK)) == (com.android.server.am.ActivityManagerService.PERSISTENT_MASK)) { app.persistent = true; app.maxAdj = ProcessList.PERSISTENT_PROC_ADJ; } if (((app.thread) == null) && ((mPersistentStartingProcesses.indexOf(app)) < 0)) { mPersistentStartingProcesses.add(app); startProcessLocked(app, "added application", (customProcess != null ? customProcess : app.processName), abiOverride, null, null); } return app; }<END_MOD>
public void dispose() { try { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { android.util.Log.i(android.telephony.MbmsDownloadManager.LOG_TAG,   already dead return; } downloadService.dispose(mSubscriptionId); } catch (android.os.RemoteException e) { android.util.Log.i(android.telephony.MbmsDownloadManager.LOG_TAG,   exception while disposing of service } <START_MOD>finally { mService.set(null); android.telephony.MbmsDownloadManager.sIsInitialized = false; <END_MOD>}<START_MOD> }<END_MOD>
@java.lang.Override public int compare(java.util.Map.Entry<java.lang.Long, com.android.tools.perflib.vmtrace.MethodInfo> o1, java.util.Map.Entry<java.lang.Long, com.android.tools.perflib.vmtrace.MethodInfo> o2) { long diff = (o2.getValue().<START_MOD>getInclusiveThreadTime<END_MOD>(<START_MOD>threadName<END_MOD>)) - (o1.getValue().<START_MOD>getInclusiveThreadTime<END_MOD>(<START_MOD>threadName<END_MOD>)); return com.google.common.primitives.Ints.saturatedCast(diff); }
@org.junit.Test public void testLamba001() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA001).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
@java.lang.Override public void stopNetworkScan(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_1.IRadio radioProxy11 = android.hardware.radio.V1_1.IRadio.castFrom(radioProxy); if (radioProxy11 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_STOP_NETWORK_SCAN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy11.stopNetworkScan(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "stopNetworkScan", e); } } } }
private static void writeToParcelForLte(android.os.Parcel p, int ci, int pci, int tac, int earfcn, java.lang.String mcc, java.lang.String mnc, java.lang.String al, java.lang.String as, int ss, int rsrp, int rsrq, int rssnr, int cqi, int ta) { p.writeInt(<START_MOD>CellIdentity.TYPE_LTE); p.writeInt(<END_MOD>ci); p.writeInt(pci); p.writeInt(tac); p.writeInt(earfcn); p.writeString(mcc); p.writeString(mnc); p.writeString(al); p.writeString(as); p.writeInt(ss); p.writeInt(rsrp); p.writeInt(rsrq); p.writeInt(rssnr); p.writeInt(cqi); p.writeInt(ta); }
<START_MOD>public java.lang.String getApkLocation() { java.lang.String apkLocation = getDefaultApkLocation(); if (project.hasProperty(com.android.build.gradle.internal.scope.PROPERTY_APK_LOCATION)) { apkLocation = ((java.lang.String) (project.getProperties().get(com.android.build.gradle.internal.scope.PROPERTY_APK_LOCATION))); } return apkLocation; }<END_MOD>
@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add("name", mName).add("debuggable", mDebuggable).add("jniDebugBuild", mJniDebugBuild).add("renderscriptDebugBuild", mRenderscriptDebugBuild).add("renderscriptOptimLevel", mRenderscriptOptimLevel).add("packageNameSuffix", mPackageNameSuffix).add("versionNameSuffix", mVersionNameSuffix).add("runProguard", mRunProguard).add("zipAlign", mZipAlign).add("signingConfig", mSigningConfig).<START_MOD>add("proguardRules", mProguardRules).<END_MOD>toString(); }
<START_MOD>private android.net.IIpSecService getIpSecService() { if ((mContext) == null) { throw new java.lang.IllegalArgumentException("Cannot get service from a null context!"); } android.os.IBinder b = android.os.ServiceManager.getService(android.net.IPSEC_SERVICE); if (b == null) { throw new android.os.RemoteException("Failed to connect to IpSecService").rethrowFromSystemServer(); } return IIpSecService.Stub.asInterface(b); }<END_MOD>
public void test1_2SetStrengthAfterRelease() throws java.lang.Exception { if (!(isBassBoostAvailable())) { return; } getBassBoost(<START_MOD>1<END_MOD>); mBassBoost.release(); try { mBassBoost.setStrength(android.media.cts.BassBoostTest.TEST_STRENGTH); fail( processed after release() } catch (java.lang.IllegalStateException e) { } finally { releaseBassBoost(); } }
void show(int layer, float alpha, long duration) { if (com.android.server.wm.DimLayer.DEBUG) android.util.Slog.v(com.android.server.wm.DimLayer.TAG, ((((( layer= + layer) +   alpha= + alpha) +   duration= + duration)); if ((mDimSurface) == null) { android.util.Slog.e(com.android.server.wm.DimLayer.TAG,   no Surface mTargetAlpha = mAlpha = 0; return; } <START_MOD>final boolean resized = <END_MOD>!(mLastBounds.equals(mBounds))<START_MOD>; if (resized<END_MOD> || ((mLayer) != layer)) { adjustSurface(layer, true<START_MOD>, resized<END_MOD>); } long curTime = android.os.SystemClock.uptimeMillis(); final boolean animating = isAnimating(); if ((animating && (((mTargetAlpha) != alpha) || (durationEndsEarlier(duration)))) || ((!animating) && ((mAlpha) != alpha))) { if (duration <= 0) { setAlpha(alpha); } else { mStartAlpha = mAlpha; mStartTime = curTime; mDuration = duration; } } if (com.android.server.wm.DimLayer.DEBUG) android.util.Slog.v(com.android.server.wm.DimLayer.TAG, ((( mStartAlpha= + (mStartAlpha)) +   mStartTime= + (mStartTime))); mTargetAlpha = alpha; }
<START_MOD>private boolean initSysImgDevices() { synchronized(mLock) { if ((mSysImgDevices) != null) { return false; } mSysImgDevices = new java.util.ArrayList<com.android.sdklib.devices.Device>(); if ((mOsSdkPath) == null) { return false; } com.android.sdklib.io.FileOp fop = new com.android.sdklib.io.FileOp(); java.io.File sysImgFolder = new java.io.File(mOsSdkPath, com.android.SdkConstants.FD_SYSTEM_IMAGES); for (java.io.File platformFolder : fop.listFiles(sysImgFolder)) { if (!(fop.isDirectory(platformFolder))) { continue; } for (java.io.File tagFolder : fop.listFiles(sysImgFolder)) { if (!(fop.isDirectory(tagFolder))) { continue; } for (java.io.File abiFolder : fop.listFiles(sysImgFolder)) { if (!(fop.isDirectory(abiFolder))) { continue; } java.io.File deviceXml = new java.io.File(abiFolder, com.android.SdkConstants.FN_DEVICES_XML); if (fop.isFile(deviceXml)) { mSysImgDevices.addAll(loadDevices(deviceXml)); } } } } return true; } }<END_MOD>
<START_MOD>@org.junit.Before public void setUp() throws com.android.jack.IllegalOptionsException, com.android.sched.util.config.ConfigurationException, com.android.sched.util.file.CannotChangePermissionException, com.android.sched.util.file.CannotCreateFileException { com.android.jack.Options options = new com.android.jack.Options(); hooks = new com.android.sched.util.RunnableHooks(); reportFile = com.android.jack.TestTools.createTempFile("reporter", ".txt"); options.addProperty(Reporter.REPORTER_WRITER.getName(), reportFile.getPath()); options.checkValidity(hooks); com.android.sched.util.config.Config config = options.getConfig(); com.android.sched.util.config.ThreadConfig.setConfig(config); com.android.jack.Jack.getSession().setHooks(hooks); }<END_MOD>
<START_MOD>public boolean isConcurrentVoiceAndDataSupported() { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); return telephony == null ? false : telephony.isConcurrentVoiceAndDataAllowed(getSubId()); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.TelephonyManager.TAG, "Error calling ITelephony#isConcurrentVoiceAndDataAllowed", e); } return false; }<END_MOD>
<START_MOD>public void onRttConnectionFailure() { setRttStreams(false); for (com.android.server.telecom.Call.Listener l : mListeners) { l.onRttConnectionFailure(this); } }<END_MOD>
<START_MOD>public void startLoop(long timestampNsecs) { loopStartTimesNsecs.add(timestampNsecs); }<END_MOD>
@java.lang.Override public void enter() { if (com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, ( Connected:   + (getCurrentMessage().what))); } mAudioWbs = false; mCommandedSpeakerVolume = -1; <START_MOD>if ((mPrevState) == (mConnecting)) { broadcastConnectionState(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_CONNECTING); <END_MOD>}<START_MOD> else if ((mPrevState) == (mDisconnected)) { broadcastConnectionState(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_DISCONNECTED); } }<END_MOD>
@java.lang.Override public void imsFeatureRemoved(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((mIsAvailable) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(<START_MOD>com.android.ims.ImsServiceProxy.<END_MOD>LOG_TAG, ((( disabled on slotId:   + slotId) +   for feature:   + feature)); mIsAvailable = false; } } }
<START_MOD>protected void initDisconnected() { }<END_MOD>
<START_MOD>protected com.android.jack.api.JackConfigProvider getConfigProvider(@javax.annotation.Nonnull java.io.File jackPrebuilt) throws java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.InstantiationException, java.lang.NoSuchMethodException, java.lang.SecurityException, java.lang.reflect.InvocationTargetException, java.net.MalformedURLException { java.lang.ClassLoader loader; com.android.jack.api.JackConfigProvider confProvider; loader = java.net.URLClassLoader.newInstance(new java.net.URL[]{ jackPrebuilt.toURI().toURL() }, com.android.jack.api.example.Main.class.getClassLoader()); java.lang.Class<? extends com.android.jack.api.JackConfigProvider> confProviderClass = java.lang.Class.forName(JackConfigProvider.CLASS_NAME, true, loader).asSubclass(com.android.jack.api.JackConfigProvider.class); com.android.jack.api.JackConfigProvider configProvider = confProviderClass.getConstructor().newInstance(); compilerCodeName = configProvider.getCompilerCodeName(); compilerVersion = configProvider.getCompilerVersion(); compilerBuildId = configProvider.getCompilerBuildId(); compilerCodeBase = configProvider.getCompilerCodeBase(); return confProviderClass.getConstructor().newInstance(); }<END_MOD>
@javax.annotation.CheckForNull private java.lang.String getMethodSignature(@javax.annotation.Nonnull <START_MOD>java.lang.String methodName, @javax.annotation.Nonnull <END_MOD>com.android.jack.ir.ast.JMethodCall call) { com.android.jack.ir.ast.JExpression instance = call.getInstance(); assert instance != null; java.util.List<com.android.jack.ir.ast.JExpression> args = call.getArgs(); assert (args.size()) == 2; com.android.jack.ir.ast.JExpression <START_MOD>parameters = args.get(1); if (parameters instanceof com.android.jack.ir.ast.JNewArray) { java.lang.StringBuilder sb = new java.lang.StringBuilder(<END_MOD>methodName<START_MOD>); sb.append("("); for (<END_MOD>com.android.jack.ir.ast.JExpression <START_MOD>param : ((com.android.jack.ir.ast.JNewArray) (<END_MOD>parameters<START_MOD>)).getInitializers()) {<END_MOD> if (<START_MOD>param<END_MOD> instanceof com.android.jack.ir.ast.<START_MOD>JClassLiteral) {<END_MOD> sb.append(<START_MOD>com.android.jack.Jack.getLookupFormatter().getName(((com.android.jack.ir.ast.JClassLiteral) (<END_MOD>param<START_MOD>)).getRefType())); } else { return null; } }<END_MOD> sb.append(<START_MOD>")");<END_MOD> return <START_MOD>sb.toString(); } return <END_MOD>null; }
<START_MOD>public boolean hasIccCard() { if (((mUiccCard) != null) && ((mUiccCard.getCardState()) != (com.android.internal.telephony.IccCardStatus.CardState.CARDSTATE_ABSENT))) { return true; } return false; }<END_MOD>
<START_MOD>public static void computeLength(android.renderscript.cts.TestLength.ArgumentsFloatFloat args) { args.ulf = 4; args.ulfRelaxed = 12; double sum = (args.inV) * (args.inV); args.out = ((float) (java.lang.Math.sqrt(sum))); }<END_MOD>
public void onCharacteristicReadRequest(java.lang.String address, int transId, int offset, boolean isLong, int <START_MOD>handle) { if (android.bluetooth.BluetoothGattServer.VDBG) android.util.Log.d(android.bluetooth.BluetoothGattServer.TAG, ( - handle= + handle)); android.bluetooth.BluetoothDevice device = mAdapter.getRemoteDevice(address); android.bluetooth.BluetoothGattCharacteristic characteristic = getCharacteristicById(handle); if (characteristic == null) { android.util.Log.w(android.bluetooth.BluetoothGattServer.TAG, ( no char for handle   + handle)); return; } try { mCallback.onCharacteristicReadRequest(device, transId, offset, characteristic); } catch (<END_MOD>java.<START_MOD>lang.Exception ex) { android.<END_MOD>util.Log.<START_MOD>w<END_MOD>(android.bluetooth.BluetoothGattServer.TAG, <START_MOD>  exception in callback<END_MOD> ex)<START_MOD>; } }<END_MOD>
@java.lang.Override public final boolean isValid() { return <START_MOD>block.isValid<END_MOD>(); }
<START_MOD>@com.android.internal.annotations.VisibleForTesting void removeUncleanAccounts() { if (com.android.bluetooth.mapclient.MapClientService.DBG) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); dump(sb); android.util.Log.d(com.android.bluetooth.mapclient.MapClientService.TAG, ("removeUncleanAccounts:InstanceMap end state: " + (sb.toString()))); } java.util.Iterator iterator = mMapInstanceMap.entrySet().iterator(); while (iterator.hasNext()) { java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.mapclient.MceStateMachine> profileConnection = ((java.util.Map.Entry) (iterator.next())); if ((profileConnection.getValue().getState()) == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { iterator.remove(); } } if (com.android.bluetooth.mapclient.MapClientService.DBG) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); dump(sb); android.util.Log.d(com.android.bluetooth.mapclient.MapClientService.TAG, ("removeUncleanAccounts:InstanceMap end state: " + (sb.toString()))); } }<END_MOD>
@org.junit.Test<START_MOD> @java.lang.Runtime<END_MOD> public void retroLambdaDefaultMethodsTest003() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_003); }
public void transform(@javax.annotation.Nonnull java.util.jar.JarFile jarFile) { java.util.zip.ZipOutputStream zos = null; try { if ((options.getOutputContainer()) == (com.android.jill.ContainerType.ZIP)) { zos = new java.util.zip.ZipOutputStream(new java.io.FileOutputStream(options.getOutput())); } transformJavaFiles(jarFile, zos); dumpJackLibraryProperties(zos); } catch (java.lang.Exception e) { <START_MOD>if (e instanceof com.android.jill.JillException) { <END_MOD>throw <START_MOD>((com.android.jill.JillException) (e)); } throw new com.android.jill.JillException(e.getMessage(<END_MOD>), e); } finally { if (zos != null) { try { zos.close(); } catch (java.io.IOException e) { throw new com.android.jill.JillException( closing zip. e); } } } }
<START_MOD>@javax.annotation.Nonnull @java.lang.Override public com.android.jack.ir.ast.JAnnotation getPhantom(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage pack, @javax.annotation.Nonnull java.lang.String simpleName) { return pack.getPhantomAnnotation(simpleName); }<END_MOD>
<START_MOD>public boolean loadNetworks(java.util.Map<java.lang.String, android.net.wifi.WifiConfiguration> configs, android.util.SparseArray<java.util.Map<java.lang.String, java.lang.String>> networkExtras) { java.util.List<java.lang.Integer> networkIds = listNetworks(); if (networkIds == null) { android.util.Log.e(com.android.server.wifi.SupplicantStaIfaceHal.TAG, "Failed to list networks"); return false; } for (java.lang.Integer networkId : networkIds) { com.android.server.wifi.SupplicantStaNetworkHal network = getNetwork(networkId); if (network == null) { android.util.Log.e(com.android.server.wifi.SupplicantStaIfaceHal.TAG, ("Failed to get network with ID: " + networkId)); return false; } android.net.wifi.WifiConfiguration config = new android.net.wifi.WifiConfiguration(); java.util.Map<java.lang.String, java.lang.String> networkExtra = new java.util.HashMap<>(); if (!(network.loadWifiConfiguration(config, networkExtra))) { android.util.Log.e(com.android.server.wifi.SupplicantStaIfaceHal.TAG, ("Failed to load wifi configuration for network with ID: " + networkId)); return false; } config.setIpAssignment(IpConfiguration.IpAssignment.DHCP); config.setProxySettings(IpConfiguration.ProxySettings.NONE); networkExtras.put(networkId, networkExtra); java.lang.String configKey = networkExtra.get(SupplicantStaNetworkHal.ID_STRING_KEY_CONFIG_KEY); final android.net.wifi.WifiConfiguration duplicateConfig = configs.put(configKey, config); if (duplicateConfig != null) { android.util.Log.i(com.android.server.wifi.SupplicantStaIfaceHal.TAG, ("Replacing duplicate network: " + (duplicateConfig.networkId))); removeNetwork(duplicateConfig.networkId); } } return true; }<END_MOD>
<START_MOD>public void addLoginListener(com.google.gct.login.GoogleLoginListener listener) { synchronized(listeners) { listeners.add(listener); } }<END_MOD>
public void <START_MOD>testGetRoundingMode<END_MOD>() { java.text.DecimalFormat decimalFormat = ((java.text.DecimalFormat) (java.text.DecimalFormat.getInstance(java.util.Locale.US))); assertEquals( default RoundingMode decimalFormat.getRoundingMode(), java.math.RoundingMode.HALF_EVEN); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_DOWN); assertEquals( incorrect RoundingMode decimalFormat.getRoundingMode(), java.math.RoundingMode.HALF_DOWN); }
<START_MOD>private void checkRootnFloat4Int4() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); android.renderscript.Allocation inN = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inN, 35, (-500), 400); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInN(inN); script.forEach_testRootnFloat4Int4(inV, out); verifyResultsRootnFloat4Int4(inV, inN, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testRootnFloat4Int4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInN(inN); scriptRelaxed.forEach_testRootnFloat4Int4(inV, out); verifyResultsRootnFloat4Int4(inV, inN, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testRootnFloat4Int4: " + (e.toString()))); } }<END_MOD>
private static native boolean native_preConcat(<START_MOD>long<END_MOD> native_object, <START_MOD>long<END_MOD> other_matrix);
private void loadRemoteAddonsListInTask(com.android.sdklib.internal.repository.ITaskMonitor monitor) { mStateFetchRemoteAddonsList = -1; java.lang.String url = java.lang.System.getenv(<START_MOD>"SDK_TEST_URLS"); if (<END_MOD>(url == null) <START_MOD>|| ((url.length()) == 0)) <END_MOD>{ url = com.android.sdklib.repository.SdkAddonsListConstants.URL_ADDON_LIST; }<START_MOD> else { if (url.endsWith("/")) { url += com.android.sdklib.repository.SdkAddonsListConstants.URL_DEFAULT_FILENAME; } else if (!(url.endsWith(SdkAddonsListConstants.URL_DEFAULT_FILENAME))) { url = null; } } if (url != null) {<END_MOD> if (getSettingsController().getForceHttp()) { url = url.replaceAll("https://", "http://"); } com.android.sdklib.internal.repository.AddonsListFetcher fetcher = new com.android.sdklib.internal.repository.AddonsListFetcher(); com.android.sdklib.internal.repository.AddonsListFetcher.Site[] sites = fetcher.fetch(monitor, url); if (sites != null) { mSources.removeAll(SdkSourceCategory.ADDONS_3RD_PARTY); for (com.android.sdklib.internal.repository.AddonsListFetcher.Site s : sites) { mSources.add(SdkSourceCategory.ADDONS_3RD_PARTY, new com.android.sdklib.internal.repository.SdkAddonSource(s.getUrl(), s.getUiName())); } mStateFetchRemoteAddonsList = 1; } }<START_MOD> }<END_MOD>
<START_MOD>public void intern(com.android.dx.rop.cst.CstCallSite callSite) { if (callSite == null) { throw new java.lang.NullPointerException("callSite == null"); } throwIfPrepared(); com.android.dx.dex.file.CallSiteIdItem result = callSites.get(callSite); if (result == null) { result = new com.android.dx.dex.file.CallSiteIdItem(callSite); callSites.put(callSite, result); } }<END_MOD>
<START_MOD>private void setExternalState(com.android.internal.telephony.IccCardConstants.State newState, boolean override) { if ((!override) && (newState == (mExternalState))) { return; } mExternalState = newState; android.os.SystemProperties.set(com.android.internal.telephony.TelephonyProperties.PROPERTY_SIM_STATE, mExternalState.toString()); broadcastIccStateChangedIntent(mExternalState.getIntentString(), mExternalState.getReason()); }<END_MOD>
private void onQueryCfComplete(android.os.AsyncResult ar) { java.lang.StringBuilder sb = new java.lang.StringBuilder(getScString()); sb.append("\n"); if ((ar.exception) != null) { mState = State.FAILED; if ((ar.exception) instanceof com.android.ims.ImsException) { com.android.ims.ImsException error = ((com.android.ims.ImsException) (ar.exception));<START_MOD> if ((error.getCode()) == (com.android.ims.ImsReasonInfo.CODE_FDN_BLOCKED)) { sb.append(mContext.getText(com.android.internal.R.string.mmiFdnError)); } else<END_MOD> if ((error.getMessage()) != null) { sb.append(error.getMessage()); } else { sb.append(getErrorMessage(ar)); } } else { sb.append(getErrorMessage(ar)); } } else { com.android.internal.telephony.CallForwardInfo[] infos; infos = ((com.android.internal.telephony.CallForwardInfo[]) (ar.result)); if ((infos.length) == 0) { sb.append(mContext.getText(com.android.internal.R.string.serviceDisabled)); if ((mIccRecords) != null) { mPhone.setVoiceCallForwardingFlag(1, false, null); } } else { android.text.SpannableStringBuilder tb = new android.text.SpannableStringBuilder(); for (int serviceClassMask = 1; serviceClassMask <= (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_MAX); serviceClassMask <<= 1) { for (int i = 0, s = infos.length; i < s; i++) { if ((serviceClassMask & (infos[i].serviceClass)) != 0) { tb.append(makeCFQueryResultMessage(infos[i], serviceClassMask)); tb.append("\n"); } } } sb.append(tb); } mState = State.COMPLETE; } mMessage = sb; mPhone.onMMIDone(this); }
public static void doTest() throws java.lang.Exception { java.lang.reflect.Method say_hi_method = art.Test986.Transform.class.getDeclaredMethod("sayHi"); art.<START_MOD>Test986.Transform.sayHi2(); art.Test986.setNativeTransform(say_hi_method, "NoReallySayGoodbye"); art.Test986.Transform.sayHi(); art.Test986.setNativeTransform(say_hi_method, "Java_art_Test986_00024Transform_sayHi2"); art.<END_MOD>Main.bindAgentJNIForClass(art.Test986.Transform.class); art.Test986.Transform.sayHi(); art.Test986.<START_MOD>removeNativeTransform<END_MOD>(say_hi_method); art.Main.bindAgentJNIForClass(art.Test986.Transform.class); art.Test986.Transform.sayHi(); art.Main.bindAgentJNIForClass(art.Main.class); art.Main.bindAgentJNIForClass(art.Test986.class); }
<START_MOD>@java.lang.Override protected void doIncrementalTaskAction(java.util.Map<java.io.File, com.android.ide.common.res2.FileStatus> changedInputs) { try { java.io.File stateFile = getStateFile(); if (!(stateFile.exists())) { doFullTaskAction(); } java.lang.String stateString = com.google.common.io.Files.toString(stateFile, Charsets.UTF_8); java.util.Map<java.lang.String, java.util.Collection<java.lang.String>> state = new com.google.gson.Gson().fromJson(stateString, com.android.build.gradle.tasks.GeneratePngsFromVectorDrawablesTask.TYPE_TOKEN); for (java.util.Map.Entry<java.io.File, com.android.ide.common.res2.FileStatus> entry : changedInputs.entrySet()) { switch (entry.getValue()) { case REMOVED : for (java.lang.String path : state.get(entry.getKey().getAbsolutePath())) { java.io.File file = new java.io.File(path); java.lang.System.out.println(("deleting " + path)); file.delete(); } break; default : throw new java.lang.RuntimeException(("Unsupported operation " + (entry.getValue()))); } } } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } }<END_MOD>
@org.junit.Test public void <START_MOD>testEvaluateNetworks_trustedRecommendation_untrustedNetworksAllowed<END_MOD>() { when(mWifiConfigManager.wasEphemeralNetworkDeleted(anyString())).thenReturn(false); when(mNetworkScoreManager.requestRecommendation(any(android.net.RecommendationRequest.class))).thenReturn(new android.net.RecommendationResult(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_WIFI_CONFIGURATION)); android.net.wifi.WifiConfiguration result = mRecommendedNetworkEvaluator.evaluateNetworks(com.google.android.collect.Lists.newArrayList(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL, com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL), null, null, false, true, null); assertEquals(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_WIFI_CONFIGURATION, result); verify(mNetworkScoreManager).requestRecommendation(mRecommendationRequestCaptor.capture()); assertEquals(2, mRecommendationRequestCaptor.getValue().getScanResults().length); assertEquals(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL.getScanResult(), mRecommendationRequestCaptor.getValue().getScanResults()[0]); assertEquals(com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL.getScanResult(), mRecommendationRequestCaptor.getValue().getScanResults()[1]); <START_MOD>verify(mWifiConfigManager).setNetworkCandidateScanResult(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_WIFI_CONFIGURATION.networkId, com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL.getScanResult(), 0); <END_MOD>}
<START_MOD>@org.junit.Test public void testStateTransition_AudioConnectingToConnected_Timeout() { setUpAudioConnectingState(); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.CONNECT_TIMEOUT_TEST_WAIT_MILLIS)).transitionTo(any(HeadsetStateMachine.Connected.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getAudioStateBroadcastMatcher(mTestDevice, BluetoothHeadset.STATE_AUDIO_DISCONNECTED, BluetoothHeadset.STATE_AUDIO_CONNECTING), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }<END_MOD>
@sun.reflect.CallerSensitive public static java.lang.Object newProxyInstance(java.lang.ClassLoader loader, java.lang.Class<?>[] interfaces, java.lang.reflect.InvocationHandler h) throws java.lang.IllegalArgumentException { <START_MOD>java.util.Objects.requireNonNull<END_MOD>(h<START_MOD>); final<END_MOD> java.lang.Class<?><START_MOD>[] intfs = interfaces.clone(); final java.lang.SecurityManager sm = java.lang.System.getSecurityManager(); java.lang.Class<?><END_MOD> cl = java.lang.reflect.Proxy.getProxyClass0(loader, <START_MOD>intfs<END_MOD>); try { final java.lang.reflect.Constructor<?> cons = cl.getConstructor(java.lang.reflect.Proxy.constructorParams); <START_MOD>final java.lang.reflect.InvocationHandler ih = h; if (!(java.lang.reflect.Modifier.isPublic(cl.getModifiers()))) { java.security.AccessController.doPrivileged(new java.security.PrivilegedAction<java.lang.Void>() { public java.lang.Void run() { cons.setAccessible(true); <END_MOD>return <START_MOD>null; } }); } return cons<END_MOD>.newInstance(<START_MOD>new java.lang.Object[]{<END_MOD> h<START_MOD> }<END_MOD>); } catch (java.lang.<START_MOD>IllegalAccessException | java.lang.InstantiationException e) { throw new java.lang.InternalError(e.toString(), e); } catch (java.lang.reflect.InvocationTargetException e) { java.lang.Throwable t = e.getCause(); if (t instanceof java.lang.RuntimeException) { throw ((java.lang.RuntimeException) (t)); } else { throw new java.lang.InternalError(t.toString(), t); } } catch (java.lang.<END_MOD>NoSuchMethodException e) { throw new java.lang.InternalError(e.toString()<START_MOD>, e); } }<END_MOD>
<START_MOD>java.util.Collection<com.android.ide.eclipse.adt.internal.build.nonjava.NonJavaFileBundle> getBundles() { return mFiles.values(); }<END_MOD>
@org.junit.Test public void singleScanFailOnTimeout() { com.android.server.wifi.WifiNative.ScanSettings settings = new com.android.server.wifi.ScanTestUtil.NativeScanSettingsBuilder().withBasePeriod(10000).withMaxApPerScan(10).addBucketWithBand(10000, WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN, WifiScanner.WIFI_BAND_24_GHZ).build(); com.android.server.wifi.WifiNative.ScanEventHandler eventHandler = mock(WifiNative.ScanEventHandler.class); com.android.server.wifi.ScanResults results = com.android.server.wifi.ScanResults.create(0, 2400, 2450, 2450); org.mockito.InOrder order = inOrder(eventHandler, mWifiNative); when(mWifiNative.scan(any(java.util.Set.class), any(java.util.Set.class))).thenReturn(true); assertTrue(mScanner.startSingleScan(settings, eventHandler)); mLooper.dispatchAll(); mAlarmManager.dispatch(<START_MOD>WificondWifiScannerImpl<END_MOD>.TIMEOUT_ALARM_TAG); mLooper.dispatchAll(); order.verify(eventHandler).onScanStatus(WifiNative.WIFI_SCAN_FAILED); verifyNoMoreInteractions(eventHandler); }
<START_MOD>@java.lang.SuppressWarnings("NonBooleanMethodNameMayNotStartWithQuestion") public void has(int severity, int type, java.lang.String data) { java.util.Collection<com.android.builder.model.SyncIssue> subject = getSubject(); for (com.android.builder.model.SyncIssue issue : subject) { if (((severity == (issue.getSeverity())) && (type == (issue.getType()))) && (data.equals(issue.getData()))) { return; } } failWithRawMessage("'%s' does not contain <%s / %s / %s>", getDisplaySubject(), severity, type, data); }<END_MOD>
<START_MOD>@org.junit.Test public void fuzzTest() throws android.os.RemoteException { java.util.List<com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource>> resources = new java.util.ArrayList<>(); for (int i = 0; i < 100; i++) { int numDependencies = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, ((resources.size()) + 1)); java.util.Set<com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource>> dependencies = new java.util.HashSet<>(); for (int j = 0; j < numDependencies; j++) { int dependencyIndex = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, resources.size()); dependencies.add(resources.get(dependencyIndex)); } com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> newRefcountedResource = getTestRefcountedResource(dependencies.toArray(new com.android.server.IpSecService.RefcountedResource[dependencies.size()])); resources.add(newRefcountedResource); } java.util.List<com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource>> clonedResources = new java.util.ArrayList(resources); while (!(clonedResources.isEmpty())) { int index = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, clonedResources.size()); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource = clonedResources.get(index); refcountedResource.cleanupAndRelease(); clonedResources.remove(index); } for (com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource : resources) { assertEquals((-1), refcountedResource.getReferenceCount()); } }<END_MOD>
<START_MOD>private java.io.File createZip32File(int numEntries, long entrySize, boolean setEntrySize) throws java.io.IOException { java.io.File file = createTemporaryZipFile(); java.util.zip.ZipOutputStream os = new java.util.zip.ZipOutputStream(new java.io.BufferedOutputStream(new java.io.FileOutputStream(file))); writeEntries(os, numEntries, entrySize, setEntrySize); return file; }<END_MOD>
<START_MOD>void dumpProto(com.android.bluetooth.btservice.BluetoothProto.BluetoothLog proto) { proto.getScanEventList().addAll(mScanEvents); }<END_MOD>
public void testDefaultConfiguration() { <START_MOD>libcore.<END_MOD>javax.net.ssl.<START_MOD>SSLDefaultConfigurationAsserts.assertSSLServerSocketFactory(<END_MOD>((javax.net.ssl.SSLServerSocketFactory) (javax.net.ssl.SSLServerSocketFactory.getDefault()))); }
<START_MOD>public void testProcessRunSuccess() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.SUCCESS); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertEquals(interruptMessage, null); assertEquals(commandResult.getStatus(), CommandStatus.SUCCESS); }<END_MOD>
@java.lang.Override protected void onRestoreInstanceState(android.os.Bundle savedInstanceState) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, (   + (mSlotId))); mState = savedInstanceState.getInt(<START_MOD>com.android.stk.StkMenuActivity.STATE_KEY<END_MOD>); mStkMenu = savedInstanceState.getParcelable(<START_MOD>com.android.stk.StkMenuActivity.MENU_KEY<END_MOD>); mAcceptUsersInput = savedInstanceState.getBoolean(<START_MOD>com.android.stk.StkMenuActivity.ACCEPT_USERS_INPUT_KEY); mIsResponseSent = savedInstanceState.getBoolean(com.android.stk.StkMenuActivity.RESPONSE_SENT_KEY<END_MOD>); }
@java.lang.Override public void getIMSIForApp(java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_GET_IMSI, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) +   aid =   + aid)); } try { radioProxy.getImsiForApp(rr.mSerial, convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getIMSIForApp", e); } } }
@java.lang.Override public boolean isCallToPolymorphicMethod() { return isCallToPolymorphicMethod(getReceiverType(), <START_MOD>getMethodIdWide<END_MOD>(), getType()); }
private boolean bindResponse(int indId, boolean indStatus) { <START_MOD>synchronized(mStateMachines) { <END_MOD>for (<START_MOD>com.android.bluetooth.hfp.HeadsetStateMachine stateMachine<END_MOD> : <START_MOD>mStateMachines.values<END_MOD>()) { int connectionState = <START_MOD>stateMachine<END_MOD>.getConnectionState(); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { continue; } if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(<START_MOD>com.android.bluetooth.hfp.HeadsetService.TAG, (<END_MOD> for <START_MOD>+ (stateMachine.getDevice()))); } stateMachine.sendMessage<END_MOD>(HeadsetStateMachine.BIND_RESPONSE<START_MOD>,<END_MOD> indId<START_MOD>,<END_MOD> (indStatus ? 1 : 0<START_MOD>)<END_MOD>); return true; } <START_MOD>} <END_MOD>return false; }
private void initializeGlobals(<START_MOD>android.renderscript.RenderScript RS, <END_MOD>com.android.rs.test.ScriptC_alloc s) { <START_MOD>android.renderscript<END_MOD>.Type.Builder typeBuilder = new <START_MOD>android.renderscript<END_MOD>.Type.Builder(RS, <START_MOD>android.renderscript<END_MOD>.Element.I32(RS)); int X = 5; int Y = 7; int Z = 0; s.set_dimX(X); s.set_dimY(Y); s.set_dimZ(Z); typeBuilder.setX(X); <START_MOD>android.renderscript<END_MOD>.Allocation A = <START_MOD>android.renderscript<END_MOD>.Allocation.createTyped(RS, typeBuilder.create()); s.bind_a(A); s.set_aRaw(A); typeBuilder = new <START_MOD>android.renderscript<END_MOD>.Type.Builder(RS, <START_MOD>android.renderscript<END_MOD>.Element.I32(RS)); typeBuilder.setX(X).setY(Y).setFaces(true); <START_MOD>android.renderscript<END_MOD>.Allocation AFaces = <START_MOD>android.renderscript<END_MOD>.Allocation.createTyped(RS, typeBuilder.create()); s.set_aFaces(AFaces); typeBuilder.setFaces(false).setMipmaps(true); <START_MOD>android.renderscript<END_MOD>.Allocation ALOD = <START_MOD>android.renderscript<END_MOD>.Allocation.createTyped(RS, typeBuilder.create()); s.set_aLOD(ALOD); typeBuilder.setFaces(true).setMipmaps(true); <START_MOD>android.renderscript<END_MOD>.Allocation AFacesLOD = <START_MOD>android.renderscript<END_MOD>.Allocation.createTyped(RS, typeBuilder.create()); s.set_aFacesLOD(AFacesLOD); return; }
@org.junit.Test public void versionedTest001a_withoutAnnotations() throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestsWithJackFolder("multidex/test001"); java.io.File out = com.android.jack.TestTools.createTempDir("out", ""); com.android.jack.Options app1Options = addCommonOptionsForMultiDex(new java.io.File(testFolder, "config-001.jpp")); app1Options.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), "multidex"); com.android.jack.TestTools.compileSourceToDex(app1Options, testFolder, (((com.android.jack.TestTools.getDefaultBootclasspathString()) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.frameworks.getPath())), out, false); java.<START_MOD>lang.String<END_MOD> outList = getListingOfDex(new java.io.File(out, "classes.dex")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, "ref-list-001.txt"), outList); junit.framework.Assert.assertFalse(new java.io.File(out, "classes2.dex").exists()); return; }
<START_MOD>@java.lang.Override public void handleEvent(org.eclipse.swt.widgets.Event event) { if ((event.item) != null) { java.lang.Object info = event.item.getData(); if (info instanceof com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.CellInfo) { com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.CellInfo ci = ((com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.CellInfo) (info)); org.eclipse.swt.graphics.Rectangle bounds = ci.mBounds; if (bounds == null) { ci.mBounds = bounds = ci.mWidget.getBounds(); } event.width = (bounds.width) + 2; event.height = (bounds.height) + 2; } } }<END_MOD>
<START_MOD>private void processAtBiev(int ind_id, int ind_value, android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hfp.HeadsetStateMachine.DBG) { log((((" Process AT + BIEV Command : " + ind_id) + ", ") + ind_value)); } java.lang.String ind_value_str = java.lang.Integer.toString(ind_value); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHeadset.ACTION_HF_INDICATORS_VALUE_CHANGED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); sendIndicatorIntent(device, ind_id, ind_value_str); }<END_MOD>
public void <START_MOD>testAOSPServiceContexts<END_MOD>() throws java.lang.Exception { java.<START_MOD>io.BufferedReader AOSPFile = new java.io.BufferedReader(new java.io.FileReader(AOSPSvcFile.getAbsolutePath())); java.io.BufferedReader deviceFile = new java.io.BufferedReader(new java.io.FileReader(deviceSvcFile.getAbsolutePath())); java.<END_MOD>lang.<START_MOD>String line1;<END_MOD> java.lang.<START_MOD>String line2; while ((line1 = AOSPFile.readLine()) != null) { line2 = deviceFile.readLine(); assertTrue((((((( does not include AOSP entries: +   had: + line1) + "\n") +   had: + line2) + "\n"<END_MOD>), <START_MOD>line1.equals(line2)<END_MOD>); } }
<START_MOD>public void testCloseRafAndGetNewChannel_channelIsOpen() throws java.lang.Exception { java.io.RandomAccessFile raf = new java.io.RandomAccessFile(file, "rw"); java.nio.channels.FileChannel fileChannelBeforeClosing = raf.getChannel(); raf.close(); assertFalse(fileChannelBeforeClosing.isOpen()); assertTrue(raf.getChannel().isOpen()); }<END_MOD>
@java.lang.SuppressWarnings("unchecked") @java.lang.Override @javax.annotation.CheckForNull public<START_MOD> synchronized<END_MOD> <T extends com.android.sched.marker.Marker> T addMarker(@javax.annotation.Nonnull T marker) { assert isValidMarker(marker) : (((   + (com.android.sched.item.Items.getName(marker.getClass()))) +   is not supported for class   + (this.getClass().getName())) + "'"; ensureMap(); assert (markers) != null; return ((T) (markers.put(marker.getClass(), marker))); }
<START_MOD>private void onVendorSpecificHeadsetEvent(android.content.Intent intent) { android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); if (device == null) { android.util.Log.e(com.android.bluetooth.btservice.RemoteDevices.TAG, "onVendorSpecificHeadsetEvent() remote device is null"); return; } java.lang.String cmd = intent.getStringExtra(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD); if (cmd == null) { android.util.Log.e(com.android.bluetooth.btservice.RemoteDevices.TAG, "onVendorSpecificHeadsetEvent() command is null"); return; } int cmdType = intent.getIntExtra(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE, (-1)); if (cmdType != (android.bluetooth.BluetoothHeadset.AT_CMD_TYPE_SET)) { return; } java.lang.Object[] args = ((java.lang.Object[]) (intent.getExtras().get(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS))); if (args == null) { android.util.Log.e(com.android.bluetooth.btservice.RemoteDevices.TAG, "onVendorSpecificHeadsetEvent() arguments are null"); return; } int batteryPercent = -1; switch (cmd) { case android.bluetooth.BluetoothHeadset.VENDOR_SPECIFIC_HEADSET_EVENT_CMD_XEVENT : batteryPercent = com.android.bluetooth.btservice.RemoteDevices.getBatteryLevelFromXEventVsc(args); break; } if (batteryPercent >= 0) { updateBatteryLevel(device, batteryPercent); com.android.bluetooth.btservice.RemoteDevices.infoLog((((("Updated device " + device) + " battery level to ") + (java.lang.String.valueOf(batteryPercent))) + "%")); } }<END_MOD>
<START_MOD>public void test1() { assertNull(mDb.getTypos("hello")); assertNull(mDb.getTypos("this")); assertNotNull(mDb.getTypos("wiht")); assertNotNull(mDb.getTypos("woudl")); assertEquals("would", mDb.getTypos("woudl").iterator().next()); java.util.Iterator<java.lang.String> typos = mDb.getTypos("throught").iterator(); assertEquals("thought", typos.next()); assertEquals("through", typos.next()); assertEquals("throughout", typos.next()); }<END_MOD>
<START_MOD>public static java.lang.String formatKernelVersion(java.lang.String rawKernelVersion) { final java.lang.String PROC_VERSION_REGEX = "Linux version (\\S+) " + (((("\\((\\S+?)\\) " + "(?:\\(gcc.+? \\)) ") + "(#\\d+) ") + "(?:SMP )(?:PREEMPT )?") + "(.+)"); java.util.regex.Matcher m = java.util.regex.Pattern.compile(PROC_VERSION_REGEX).matcher(rawKernelVersion); if (!(m.matches())) { android.util.Log.e(com.android.settings.DeviceInfoSettings.LOG_TAG, ("Regex did not match on /proc/version: " + rawKernelVersion)); return "Unavailable"; } else if ((m.groupCount()) < 4) { android.util.Log.e(com.android.settings.DeviceInfoSettings.LOG_TAG, (("Regex match on /proc/version only returned " + (m.groupCount())) + " groups")); return "Unavailable"; } return ((((((m.group(1)) + "\n") + (m.group(2))) + " ") + (m.group(3))) + "\n") + (m.group(4)); }<END_MOD>
private static void <START_MOD>assertImei<END_MOD>(java.lang.String <START_MOD>imei<END_MOD>) { java.lang.String imeiPattern = "[0-9]{14,15}"; assertTrue((((   + <START_MOD>imei<END_MOD>) +   does not match pattern   + imeiPattern), java.util.regex.Pattern.matches(imeiPattern, <START_MOD>imei<END_MOD>)); if ((<START_MOD>imei<END_MOD>.length()) == 15) { android.telephony.cts.TelephonyManagerTest.assertImeiCheckDigit(<START_MOD>imei<END_MOD>); } }
@java.lang.Override public void earlyStartup() { org.eclipse.core.runtime.jobs.Job pingJob = new org.eclipse.core.runtime.jobs.Job( SDK Ping { @java.lang.Override protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor monitor) { com.android.sdkstats.SdkStatsService stats = new com.android.sdkstats.SdkStatsService(); java.lang.String <START_MOD>sdkPath = com.android.ide.eclipse.monitor.MonitorPlugin.getDefault().getSdkPath(); if (sdkPath == null) { return org.eclipse.core.runtime.Status.OK_STATUS; } java.lang.String <END_MOD>toolsPath = new org.eclipse.core.runtime.Path(<START_MOD>sdkPath<END_MOD>).append("tools").toString(); com.android.ide.eclipse.monitor.MonitorStartup.ping(stats, toolsPath); return org.eclipse.core.runtime.Status.OK_STATUS; } }; pingJob.setPriority(Job.DECORATE); pingJob.schedule(); }
<START_MOD>protected void writeToParcel(android.os.Parcel dest, int flags, int type) { dest.writeInt(type); }<END_MOD>
public android.net.NetworkStats readNetworkStatsDetail() throws java.io.IOException { return readNetworkStatsDetail(android.<START_MOD>net<END_MOD>.<START_MOD>NetworkStats<END_MOD>.UID_ALL, null, android.<START_MOD>net<END_MOD>.<START_MOD>NetworkStats<END_MOD>.TAG_ALL, null); }
@org.junit.Test public void testCreateTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = buildIpSecConfig(<START_MOD>0<END_MOD>); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceTest.DROID_SPI), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceTest.CRYPT_KEY), anyInt(), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceTest.DROID_SPI2), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceTest.CRYPT_KEY), anyInt(), anyInt(), anyInt(), anyInt()); }
@java.lang.Override protected final java.nio.charset.CoderResult implFlush(java.nio.CharBuffer out) { try { input = libcore.util.EmptyArray.BYTE; inEnd = 0; data[java.nio.charset.CharsetDecoderICU.INPUT_OFFSET] = 0; data[java.nio.charset.CharsetDecoderICU.OUTPUT_OFFSET] = getArray(out); data[java.nio.charset.CharsetDecoderICU.INVALID_BYTES] = 0; int error = libcore.icu.NativeConverter.decode(converterHandle, input, inEnd, output, outEnd, data, true); if (libcore.icu.ICU.U_FAILURE(error)) { if (error == (libcore.icu.ICU.U_BUFFER_OVERFLOW_ERROR)) { return java.nio.charset.CoderResult.OVERFLOW; } else if (error == (libcore.icu.ICU.U_TRUNCATED_CHAR_FOUND)) { if ((data[java.nio.charset.CharsetDecoderICU.<START_MOD>INVALID_BYTES<END_MOD>]) > 0) { return java.nio.charset.CoderResult.malformedForLength(data[java.nio.charset.CharsetDecoderICU.<START_MOD>INVALID_BYTES<END_MOD>]); } } } return java.nio.charset.CoderResult.UNDERFLOW; } finally { setPosition(out); implReset(); } }
public <START_MOD>void<END_MOD> pull(com.android.ddmlib.FileListingService.FileEntry[] entries, java.lang.String localPath, com.android.ddmlib.SyncService.ISyncProgressMonitor monitor) <START_MOD>throws com.android.ddmlib.SyncException, com.android.ddmlib.TimeoutException, java.io.FileNotFoundException, java.io.IOException <END_MOD>{ java.io.File f = new java.io.File(localPath); if ((f.exists()) == false) { <START_MOD>throw new com.android.ddmlib.SyncException(SyncException<END_MOD>.RESULT_NO_DIR_TARGET); } if ((f.isDirectory()) == false) { <START_MOD>throw new com.android.ddmlib.SyncException(SyncException<END_MOD>.RESULT_TARGET_IS_FILE); } com.android.ddmlib.FileListingService fls = new com.android.ddmlib.FileListingService(mDevice); int total = getTotalRemoteFileSize(entries, fls); monitor.start(total); doPull(entries, localPath, fls, monitor); monitor.stop(); }
public native void setsockoptInt(java.io.FileDescriptor fd, int level, int option, int value) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
<START_MOD>void generateT3tIdentifiersCacheLocked() { if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, "generateT3tIdentifiersCacheLocked"); mT3tIdentifiersCache.clear(); java.lang.String componentString; for (java.lang.String key : com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.REGISTERED_COMPONENT_KEY_LIST) { componentString = Settings.Secure.getStringForUser(mContext.getContentResolver(), key, android.app.ActivityManager.getCurrentUser()); if (componentString != null) { for (android.nfc.cardemulation.NfcFServiceInfo service : mServices) { if (componentString.equals(service.getComponent().flattenToString())) { mT3tIdentifiersCache.put(service.getNfcid2(), service); } } } } if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, ("mT3tIdentifiersCache: size=" + (mT3tIdentifiersCache.size()))); for (java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo> entry : mT3tIdentifiersCache.entrySet()) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, (((" " + (entry.getKey())) + "/") + (entry.getValue().getComponent().toString()))); } } updateRoutingLocked(); }<END_MOD>
@org.junit.Test public void retroLambdaDefaultMethodsTest027() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_027).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
private java.lang.String getLibraryVariableName(java.lang.String name) { return "_android_" + (name.replaceAll(<START_MOD> ]<END_MOD> "_")); }
<START_MOD>@org.junit.Test <END_MOD>public void testRemove() throws java.lang.Exception { stats = new android.net.NetworkStatsHistory(HOUR_IN_MILLIS); stats.recordData(android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + (DAY_IN_MILLIS)), 24L, 24L); assertEquals(24, stats.size()); stats.removeBucketsBefore(( - (DAY_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) - (YEAR_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (SECOND_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (HOUR_IN_MILLIS))); assertEquals(23, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (4 * (HOUR_IN_MILLIS)))); assertEquals(20, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (YEAR_IN_MILLIS))); assertEquals(0, stats.size()); }
<START_MOD>private java.lang.String normalizeAppName(java.lang.String app) { java.lang.String app2 = app.replaceAll("\\W", ""); if ((app.length()) == 0) { throw new java.lang.IllegalArgumentException(("Bad app name: " + app)); } return app2; }<END_MOD>
<START_MOD>@java.lang.Override public boolean isValidParent(@javax.annotation.CheckForNull com.android.jack.ir.ast.JNode parent) { return ((parent instanceof com.android.jack.ir.ast.JLabeledStatement) || (parent instanceof com.android.jack.ir.ast.JBreakStatement)) || (parent instanceof com.android.jack.ir.ast.JContinueStatement); }<END_MOD>
public boolean inLearnMoreUrl(java.awt.Point point) { double urlYStart = ((((com.google.gct.login.ui.UsersListCellRenderer.GOOGLE_IMAGE_NORTH) + (<START_MOD>mGoogleImageLabel.getIcon().getIconHeight())) + (<END_MOD>com.google.gct.login.ui.UsersListCellRenderer.<START_MOD>WELCOME_LABEL_NORTH)) + ((myGeneralFontHeight) * 3)) + 3; double urlYEnd = urlYStart + (myLearnMoreLabelDimension.getHeight()); double urlXStart = <END_MOD>com.google.gct.login.ui.UsersListCellRenderer.<START_MOD>GOOGLE_IMAGE_WEST; double urlXEnd = urlXStart + (myLearnMoreLabelDimension.getWidth()); return ((((point.getX()) > urlXStart) && ((point.getX()) < urlXEnd)) && ((point.getY()) > urlYStart)) && ((point.getY()) <<END_MOD> urlYEnd); }
<START_MOD>@org.gradle.api.tasks.TaskAction public void generate() throws java.io.IOException { mRenderer.setOutput(getServices().get(org.gradle.logging.StyledTextOutputFactory.class).create(getClass())); java.util.SortedSet<com.android.build.gradle.internal.variant.BaseVariantData> sortedConfigurations = new java.util.TreeSet<com.android.build.gradle.internal.variant.BaseVariantData>(new java.util.Comparator<com.android.build.gradle.internal.variant.BaseVariantData>() { @java.lang.Override public int compare(com.android.build.gradle.internal.variant.BaseVariantData conf1, com.android.build.gradle.internal.variant.BaseVariantData conf2) { return conf1.getName().compareTo(conf2.getName()); } }); sortedConfigurations.addAll(getVariants()); for (com.android.build.gradle.internal.variant.BaseVariantData variant : sortedConfigurations) { mRenderer.startVariant(variant); mRenderer.render(variant); } }<END_MOD>
<START_MOD>@java.lang.Override public org.eclipse.swt.graphics.Image getGenericIcon() { return org.eclipse.jdt.ui.JavaUI.getSharedImages().getImage(ISharedImages.IMG_OBJS_CUNIT); }<END_MOD>
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws java.lang.Exception { java.util.Collection<com.android.jack.preprocessor.Rule> rules = new java.util.ArrayList<com.android.jack.preprocessor.Rule>(); if (com.android.sched.util.config.ThreadConfig.get(PreProcessor.ENABLE).booleanValue()) { com.android.sched.util.file.InputStreamFile input = com.android.sched.util.config.ThreadConfig.get(PreProcessor.FILE); java.io.InputStream inputStream = input.getInputStream(); try { rules.addAll(parseRules(session, inputStream)); } finally { try { inputStream.close(); } catch (java.io.IOException e) { } } } for (<START_MOD>com.android.jack.meta.Meta meta : session.getMetas()) { <END_MOD>com.android.sched.vfs.<START_MOD>InputVFile file = meta.getVFile();<END_MOD> if (<START_MOD>file<END_MOD>.getName().<START_MOD>endsWith(".jpp")) { java.io.InputStream inputStream = null; try { inputStream = file.openRead(); rules.addAll(parseRules(session, inputStream)); } finally { try<END_MOD> { if (<START_MOD>inputStream != null) { inputStream.close(); } } catch (<END_MOD>java.io.IOException e) { } } } } applyRules(rules, session); }
@java.lang.Override public java.lang.String toString() { return <START_MOD>((((((((((((<END_MOD>(((((((("ScanResult{" + "mDevice=") + (mDevice)) +   mScanRecord= + (java.util.Objects.toString(mScanRecord))) +   mRssi= + (mRssi)) +   mTimestampNanos= + (mTimestampNanos)) + <START_MOD>  eventType= + (mEventType)) +   primaryPhy= + (mPrimaryPhy)) +   secondaryPhy= + (mSecondaryPhy)) +   advertisingSid= + (mAdvertisingSid)) +   txPower= + (mTxPower)) +   mPeriodicAdvertisingInterval= + (mPeriodicAdvertisingInterval)) + <END_MOD>'}'; }
public java.lang.String[] getTetherableBluetoothRegexs() { <START_MOD>final com.android.server.connectivity.Tethering.TetheringConfiguration ctx = mConfig; <END_MOD>return <START_MOD>java.util.Arrays.copyOf(ctx.tetherableBluetoothRegexs, ctx.tetherableBluetoothRegexs.length)<END_MOD>; }
boolean createBond(android.bluetooth.BluetoothDevice device, int transport<START_MOD>, android.bluetooth.OOBData oobData<END_MOD>) { enforceCallingOrSelfPermission(com.android.bluetooth.btservice.AdapterService.BLUETOOTH_ADMIN_PERM,   BLUETOOTH ADMIN permission com.android.bluetooth.btservice.RemoteDevices.DeviceProperties deviceProp = mRemoteDevices.getDeviceProperties(device); if ((deviceProp != null) && ((deviceProp.getBondState()) != (android.bluetooth.BluetoothDevice.BOND_NONE))) { return false; } cancelDiscoveryNative(); android.os.Message msg = mBondStateMachine.obtainMessage(BondStateMachine.CREATE_BOND); msg.obj = device; msg.arg1 = transport; <START_MOD>if (oobData != null) { android.os.Bundle oobDataBundle = new android.os.Bundle(); oobDataBundle.putParcelable(BondStateMachine.OOBDATA, oobData); msg.setData(oobDataBundle); } <END_MOD>mBondStateMachine.sendMessage(msg); return true; }
<START_MOD>public static boolean updatePreferenceToSpecificActivityFromMetaDataOrRemove(android.content.Context context, android.preference.PreferenceGroup parentPreferenceGroup, java.lang.String preferenceKey) { com.android.settings.IconPreferenceScreen preference = ((com.android.settings.IconPreferenceScreen) (parentPreferenceGroup.findPreference(preferenceKey))); if (preference == null) { return false; } android.content.Intent intent = preference.getIntent(); if (intent != null) { android.content.pm.PackageManager pm = context.getPackageManager(); java.util.List<android.content.pm.ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.GET_META_DATA); int listSize = list.size(); for (int i = 0; i < listSize; i++) { android.content.pm.ResolveInfo resolveInfo = list.get(i); if (((resolveInfo.activityInfo.applicationInfo.flags) & (android.content.pm.ApplicationInfo.FLAG_SYSTEM)) != 0) { android.graphics.drawable.Drawable icon = null; java.lang.String title = null; java.lang.String summary = null; try { android.content.res.Resources res = pm.getResourcesForApplication(resolveInfo.activityInfo.packageName); android.os.Bundle metaData = resolveInfo.activityInfo.metaData; if ((res != null) && (metaData != null)) { icon = res.getDrawable(metaData.getInt(com.android.settings.Utils.META_DATA_PREFERENCE_ICON)); title = res.getString(metaData.getInt(com.android.settings.Utils.META_DATA_PREFERENCE_TITLE)); summary = res.getString(metaData.getInt(com.android.settings.Utils.META_DATA_PREFERENCE_SUMMARY)); } } catch (android.content.pm.PackageManager.NameNotFoundException e) { } if (android.text.TextUtils.isEmpty(title)) { title = resolveInfo.loadLabel(pm).toString(); } preference.setIcon(icon); preference.setTitle(title); preference.setSummary(summary); preference.setIntent(new android.content.Intent().setClassName(resolveInfo.activityInfo.packageName, resolveInfo.activityInfo.name)); return true; } } } parentPreferenceGroup.removePreference(preference); return false; }<END_MOD>
<START_MOD>private void requestNetwork(android.net.NetworkRequest request, android.net.ConnectivityManager.NetworkCallback networkCallback, int timeoutMs, int legacyType, android.os.Handler handler) { sendRequestForNetwork(request.networkCapabilities, networkCallback, timeoutMs, android.net.ConnectivityManager.REQUEST, legacyType, handler); }<END_MOD>
public void testVFE5() { try { <START_MOD>dot<END_MOD>.<START_MOD>junit<END_MOD>.<START_MOD>opcodes<END_MOD>.<START_MOD>iget_short.d.T_iget_short_7 t = new dot.junit.opcodes.iget_short.d.T_iget_short_7<END_MOD>(<START_MOD>); t.run(<END_MOD>); fail( a <START_MOD>NoClassDefFoundError<END_MOD> exception } catch (java.lang.<START_MOD>NoClassDefFoundError<END_MOD> <START_MOD>e<END_MOD>) { } }
<START_MOD>@org.junit.Test <END_MOD>public void testBrowserLoadsSite() throws java.lang.Exception { <START_MOD>mInstrumentation<END_MOD> = <START_MOD>testRule.<END_MOD>getInstrumentation(); <START_MOD>mDevice = testRule.getDevice(); if (com.android.devtools.systemimage.uitest.utils.NetworkUtil.verifyNetworkStatus(mDevice)) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, "Browser"); mDevice.findObject(new <END_MOD>android.support.test.uiautomator.<START_MOD>UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.NetworkIOTest.BROWSER_URL_TEXT_FIELD)).click(); mDevice.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.NetworkIOTest.BROWSER_URL_TEXT_FIELD)).clearTextField(); mDevice.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.NetworkIOTest.BROWSER_URL_TEXT_FIELD)).setText("google.com"); mDevice.pressEnter(); final android.support.test.uiautomator.UiObject progress<END_MOD> = <START_MOD>mDevice.findObject(new <END_MOD>android.support.test.uiautomator.<START_MOD>UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.NetworkIOTest.BROWSER_SEARCH_ICON_RES)); boolean isSuccess = new<END_MOD> com.android.devtools.systemimage.uitest.utils.<START_MOD>Wait().until(new <END_MOD>com.android.devtools.systemimage.uitest.utils.<START_MOD>Wait.ExpectedCondition(<END_MOD>) { <START_MOD>@java.lang.Override public boolean isTrue() throws java.lang.Exception { return !(progress.exists(<END_MOD>)); } }<START_MOD>); junit.framework.Assert.assertTrue( to dismiss the loading bar. isSuccess); } }<END_MOD>
<START_MOD>public java.lang.String getClassName() { return mClassName; }<END_MOD>
public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.<START_MOD>getKey(256)<END_MOD>); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, <START_MOD>android.net.cts.IpSecManagerTest.getKey<END_MOD>(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth<START_MOD>, null<END_MOD>, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, <START_MOD>null, <END_MOD>false, 1, true); }
public void testAesCbcHmacSha256Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
<START_MOD>public android.net.apf.ApfGenerator addLoadData(android.net.apf.ApfGenerator.Register destinationRegister, int offset) throws android.net.apf.ApfGenerator.IllegalInstructionException { android.net.apf.ApfGenerator.Instruction instruction = new android.net.apf.ApfGenerator.Instruction(android.net.apf.ApfGenerator.Opcodes.LDDW, destinationRegister); instruction.setUnsignedImm(offset); addInstruction(instruction); return this; }<END_MOD>
<START_MOD>public void unSetSuppServiceIndication(android.os.Handler handler);<END_MOD>
<START_MOD>public synchronized <U, T extends org.gradle.api.Task> com.android.build.gradle.internal.scope.AndroidTask<T> create(com.android.build.gradle.internal.TaskFactory collectionBuilder, java.lang.String taskName, java.lang.Class<T> taskClass, org.gradle.api.Action<T> configAction) { collectionBuilder.create(taskName, taskClass, configAction); final com.android.build.gradle.internal.scope.AndroidTask<T> newTask = new com.android.build.gradle.internal.scope.AndroidTask<T>(taskName, taskClass); tasks.put(taskName, newTask); return newTask; }<END_MOD>
@org.junit.Test public void basicRecommendation() throws java.lang.Exception { android.net.wifi.ScanResult[] scanResults = new android.net.wifi.ScanResult[6]; for (int i = 0; i < 3; i++) { scanResults[i] = com.android.networkrecommendation.Util.createMockScanResult(i); } <START_MOD>mProvider.addScoreForTest<END_MOD>(com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK); { android.net.wifi.ScanResult scanResult = new android.net.wifi.ScanResult(); scanResult.level = 115; scanResult.SSID = com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK_STRING_UNQUOTED; scanResult.wifiSsid = android.net.wifi.WifiSsid.createFromAsciiEncoded(com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK_STRING_UNQUOTED); scanResult.BSSID = com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK.networkKey.wifiKey.bssid; scanResult.capabilities = "[ESS]"; scanResult.timestamp = (android.os.SystemClock.elapsedRealtime()) * 1000; scanResults[3] = scanResult; } for (int i = 4; i < 6; i++) { scanResults[i] = com.android.networkrecommendation.Util.createMockScanResult(i); } android.net.RecommendationRequest request = new android.net.RecommendationRequest.Builder().setScanResults(scanResults).setNetworkCapabilities(new android.net.NetworkCapabilities().removeCapability(NetworkCapabilities.NET_CAPABILITY_TRUSTED)).build(); android.net.RecommendationResult result = verifyAndCaptureResult(mProvider, request); assertEquals(com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK.networkKey.wifiKey.ssid, result.getWifiConfiguration().SSID); }
<START_MOD>@com.android.annotations.NonNull public java.lang.String getConfigForAllAbis() { java.lang.StringBuilder completeConfig = new java.lang.StringBuilder(); com.google.common.base.Optional<java.lang.String> config = getValue(com.android.builder.testing.api.DeviceConfig.Catetory.CONFIG); com.google.common.base.Optional<java.lang.String> abi = getValue(com.android.builder.testing.api.DeviceConfig.Catetory.ABI); if (config.isPresent()) { completeConfig.append(config.get()); if (abi.isPresent()) { completeConfig.append(":"); } } if (abi.isPresent()) { completeConfig.append(abi.get()); } return completeConfig.toString(); }<END_MOD>
private static java.lang.String getVersion(@javax.annotation.Nonnull java.lang.String name) { java.io.<START_MOD>InputStream is; java.lang.String versionFileName = name + "-version.properties"; java.util.jar.JarFile jarFile = null; try { if (com.android.jack.test.toolchain.AbstractTestTools.isPrebuiltAvailable(name)) { java.io.<END_MOD>File prebuilt = com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt(name); <START_MOD>jarFile = new <END_MOD>java.util.jar.JarFile<START_MOD>(prebuilt); java.util.zip.ZipEntry entry = jarFile.getEntry(versionFileName); return new com.android.sched.util.Version(jarFile.getInputStream(entry)).getVerboseVersion(); } else { is = com.android.jack.test.toolchain.AbstractTestTools.class.getClassLoader().getResourceAsStream(versionFileName); if (is ==<END_MOD> null<START_MOD>) { throw new com.android.jack.test.TestConfigurationException((( not find   + versionFileName) + "'")); } return (new com.android.sched.util.Version(is).getVerboseVersion()) +   on classpath) } } catch (java.io.IOException e) { throw new com.android.jack.test.TestConfigurationException(e); } finally { if (jarFile != null) {<END_MOD> try { jarFile<START_MOD>.close(); } catch (<END_MOD>java.io.IOException e) { <START_MOD>} } } }<END_MOD>
int doTransfer(java.io.FileDescriptor fd) throws java.io.IOException { try { if ((direction) == (java.nio.IoVec.Direction.READV)) { int result = Libcore.os.readv(fd, ioBuffers, offsets, byteCounts); if (result == 0) { result = -1; } return result; } else { return Libcore.os.writev(fd, ioBuffers, offsets, byteCounts); } } catch (<START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException errnoException) { throw errnoException.rethrowAsIOException(); } }
public void testDisplayAvdList_OneSnapshot() { com.android.sdkmanager.Main main = new com.android.sdkmanager.Main(); main.setLogger(getLog()); getAvdManager().createAvd(mAvdFolder, this.getName(), mTarget, SystemImage.DEFAULT_TAG, SdkConstants.ABI_ARMEABI<START_MOD>, null<END_MOD>, null, null, null, true, false, false, getLog()); getLog().clear(); main.displayAvdList(getAvdManager()); assertEquals(((((((((((( Available Android Virtual Devices: +   P Name:   + (this.getName())) + "\n") +   P Path:   + (mAvdFolder)) + "\n") +   P Target: Android 0.0 (API level 0) +   P Tag/ABI: default/armeabi +   P Skin: HVGA +   P Snapshot: true + "]"), getLog().toString()); }
public int ioctlInt(java.io.FileDescriptor fd, int cmd, <START_MOD>android<END_MOD>.util.MutableInt arg) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
@javax.annotation.Nonnull public static java.lang.String getSyntheticSwitchMapInitializerName(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedEnum enumType) { java.lang.String enumName = com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter().getName(enumType); <START_MOD>return ((com<END_MOD>.<START_MOD>android<END_MOD>.<START_MOD>jack.transformations.enums.OptimizationUtil.LongerPrefix)<END_MOD> <START_MOD>+<END_MOD> <START_MOD>(enumName.replace("/",<END_MOD> com.android.jack.<START_MOD>transformations<END_MOD>.<START_MOD>enums<END_MOD>.<START_MOD>OptimizationUtil.ShorterPrefix))<END_MOD>) + (com.android.jack.transformations.enums.OptimizationUtil.Suffix); }
<START_MOD>com.android.build.gradle.ndk.managed.NdkConfig getNdk();<END_MOD>
<START_MOD>public void testDegrees() { checkDegreesFloat(); checkDegreesFloat2(); checkDegreesFloat3(); checkDegreesFloat4(); }<END_MOD>
<START_MOD>@java.lang.Override public boolean equals(java.lang.Object obj) { if (obj == (this)) { return true; } if ((obj == null) || (!(getClass().equals(obj.getClass())))) { return false; } com.google.protobuf.nano.Extension ext = ((com.google.protobuf.nano.Extension) (obj)); return ((((tag) == (ext.tag)) && ((type) == (ext.type))) && ((repeated) == (ext.repeated))) && ((clazz) == (ext.clazz)); }<END_MOD>
private static boolean compare(java.awt.image.BufferedImage reference, java.awt.image.BufferedImage generated, int threshold) { final int w = generated.getWidth(); final int h = generated.getHeight(); if ((w != (reference.getWidth())) || (h != (reference.getHeight()))) { return false; } <START_MOD>final int tolerance = ((int) ((w * h) * (android.theme.cts.ComparisonTask.DIFFS_RATE))); int diffs = 0; <END_MOD>for (int i = 0; i < w; i++) { for (int j = 0; j < h; j++) { final int p1 = reference.getRGB(i, j); final int p2 = generated.getRGB(i, j); final int <START_MOD>a1 = <END_MOD>(p1 & -16777216) <START_MOD>>>> 24; final int a2 =<END_MOD> (p2 & -16777216)<START_MOD> ><END_MOD>>> 24; <START_MOD>final int dr = (((p1 & 255) * a1) - ((p2 & 255) * a2)) / 255; final int dg = ((((p1 & 65280) >> 8) * a1) - (((p2 & 65280) >> 8) * a2)) / 255; final int db = ((((p1 & 16711680) >> 16) * a1) - (((p2 & 16711680) >> 16) * a2)) / 255; <END_MOD>if ((((java.lang.Math.abs(db)) > threshold) || ((java.lang.Math.abs(dg)) > threshold)) || ((java.lang.Math.abs(dr)) > threshold)) { <START_MOD>diffs++; } } } if (diffs > tolerance) { <END_MOD>return false; } <START_MOD>return true; <END_MOD>}
private void <START_MOD>refreshWifiInfo<END_MOD>() { android.net.wifi.WifiManager wifiManager = ((android.net.wifi.WifiManager) (getSystemService(com.android.settings.wifi.WIFI_SERVICE))); android.net.wifi.WifiInfo wifiInfo = wifiManager.getConnectionInfo(); android.preference.Preference wifiMacAddressPref = findPreference(com.android.settings.wifi.AdvancedSettings.KEY_MAC_ADDRESS); java.lang.String macAddress = (wifiInfo == null) ? null : wifiInfo.getMacAddress(); wifiMacAddressPref.setSummary((!(android.text.TextUtils.isEmpty(macAddress)) ? macAddress : getString(R.string.status_unavailable))); <START_MOD>android.preference.Preference wifiIpAddressPref = findPreference(com.android.settings.wifi.AdvancedSettings.KEY_CURRENT_IP_ADDRESS); java.lang.String ipAddress = null; if (wifiInfo != null) { long addr = wifiInfo.getIpAddress(); if (addr != 0) { if (addr < 0) addr += 4294967296L; ipAddress = java.lang.String.format("%d.%d.%d.%d\n", (addr & 255), ((addr >> 8) & 255), ((addr >> 16) & 255), ((addr >> 24) & 255)); <END_MOD>}<START_MOD> } wifiIpAddressPref.setSummary((ipAddress == null ? getString(R.string.status_unavailable) : ipAddress)); }<END_MOD>
<START_MOD>public void ipSecDeleteSecurityAssociation(int transformId, int direction, java.lang.String localAddress, java.lang.String remoteAddress, int spi) { }<END_MOD>
private void writeResource(java.io.File rootFolder, com.google.common.collect.ListMultimap<java.lang.String, com.android.builder.resources.Resource> valuesResMap, com.android.builder.resources.Resource resource) throws java.io.IOException { com.android.builder.resources.ResourceFile.FileType type = resource.getSource().getType(); if (type == (ResourceFile.FileType.MULTI)) { java.lang.String qualifier = resource.getSource().getQualifiers(); if (qualifier == null) { qualifier = ""; } valuesResMap.put(qualifier, resource); } else { if (resource.isTouched()) { com.android.builder.resources.ResourceFile resourceFile = resource.getSource(); java.io.File file = resourceFile.getFile(); java.lang.String filename = file.getName(); java.lang.String folderName = resource.getType().getName(); java.lang.String qualifiers = resourceFile.getQualifiers(); if ((qualifiers != null) && ((qualifiers.length()) > 0)) { folderName = (folderName + (com.android.SdkConstants.RES_QUALIFIER_SEP)) + qualifiers; } java.io.File typeFolder = new java.io.File(rootFolder, folderName); if (!(typeFolder.isDirectory())) { <START_MOD>if (!(<END_MOD>typeFolder.mkdirs()<START_MOD>)) { throw new java.io.IOException(( to create directory   + typeFolder)); }<END_MOD> } java.io.File outFile = new java.io.File(typeFolder, filename); com.google.common.io.Files.copy(file, outFile); } } }
private boolean checkGoldenExecutorForSelfDivergence(java.lang.String programName) { java.lang.String seenOutput = null; for (int i = 0; i < <START_MOD>(dexfuzz.Options.divergenceRetry)<END_MOD>; i++) { goldenExecutor.reset(); goldenExecutor.execute(programName); java.lang.String output = goldenExecutor.getResult().getFlattenedOutput(); if (seenOutput == null) { seenOutput = output; } else if (!(seenOutput.equals(output))) { return true; } } return false; }
@com.android.annotations.NonNull static com.android.builder.model.ProductFlavorContainer createPFC(@com.android.annotations.NonNull com.android.build.gradle.internal.ProductFlavorData productFlavorData, @com.android.annotations.NonNull java.util.Collection<com.android.builder.model.SourceProviderContainer> sourceProviderContainers) { java.util.List<com.android.builder.model.SourceProviderContainer> clonedContainer = com.android.build.gradle.internal.model.SourceProviderContainerImpl.cloneCollection(sourceProviderContainers); com.android.builder.model.SourceProviderContainer testASP = com.android.build.gradle.internal.model.SourceProviderContainerImpl.create(com.android.build.gradle.internal.model.ARTIFACT_ANDROID_TEST, productFlavorData.getTestSourceSet()); clonedContainer.add(testASP); return new com.android.build.gradle.internal.model.ProductFlavorContainerImpl(com.android.build.gradle.internal.model.ProductFlavorImpl.cloneFlavor(productFlavorData.getProductFlavor(), null, null<START_MOD>, null<END_MOD>), com.android.build.gradle.internal.model.SourceProviderImpl.cloneProvider(productFlavorData.getSourceSet()), clonedContainer); }
@java.lang.Override public android.view.View getView(int position, android.view.View convertView, android.view.ViewGroup parent) { android.<START_MOD>view.View view; if (convertView == null) { view = mInflater.inflate(com.android.mms.ui.IconListAdapter.mResource, parent, false); holder = new com.android.mms.ui.IconListAdapter.ViewHolder(view); view.setTag(holder); } else { view = convertView; holder = ((com.android.mms.ui.IconListAdapter.ViewHolder) (view.getTag())); } android.<END_MOD>widget.TextView text<START_MOD> = holder.getTextView(); text.setText(getItem(position).getTitle())<END_MOD>; android.widget.ImageView image<START_MOD> = holder.getImageView(); image.setImageResource(getItem(position).getResource()); return view<END_MOD>; }
<START_MOD>@java.lang.Override public void onAudioDevicesRemoved(android.media.AudioDeviceInfo[] removedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, "onAudioDevicesRemoved"); } boolean wasWiredAudioDeviceRemoved = false; for (android.media.AudioDeviceInfo deviceInfo : removedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ((("Audio device removed: " + (deviceInfo.getProductName())) + " type: ") + (deviceInfo.getType()))); } if (isWiredHeadset(deviceInfo)) { wasWiredAudioDeviceRemoved = true; break; } } if (!wasWiredAudioDeviceRemoved) { return; } boolean hasConnectedWiredDevice = false; android.media.AudioDeviceInfo[] devices = mAudioManager.getDevices(AudioManager.GET_DEVICES_OUTPUTS); for (android.media.AudioDeviceInfo deviceInfo : devices) { if (isWiredHeadset(deviceInfo)) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ((("Found connected wired device: " + (deviceInfo.getProductName())) + " type: ") + (deviceInfo.getType()))); } hasConnectedWiredDevice = true; break; } } if (!hasConnectedWiredDevice) { allWiredAudioDevicesDisconnected(); } }<END_MOD>
<START_MOD>private void addOwnerDomainAndNameAttributes(@org.jetbrains.annotations.NotNull final com.intellij.openapi.project.Project project) { new com.intellij.openapi.command.WriteCommandAction(project, annotation.getContainingFile()) { @java.lang.Override protected void run(final com.intellij.openapi.application.Result result) throws java.lang.Throwable { java.lang.String annotationString = ((((((("@A(" + (com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.API_NAMESPACE_NAME_ATTRIBUTE)) + " = \"") + (com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.MyQuickFix.SUGGESTED_OWNER_ATTRIBUTE)) + "\", ") + (com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.API_NAMESPACE_DOMAIN_ATTRIBUTE)) + " = \"") + "your-company.com") + "\")"; com.intellij.psi.PsiAnnotation newAnnotation = com.intellij.psi.JavaPsiFacade.getInstance(project).getElementFactory().createAnnotationFromText(annotationString, null); com.intellij.psi.PsiAnnotationMemberValue newDomainMemberValue = newAnnotation.findDeclaredAttributeValue(com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.API_NAMESPACE_DOMAIN_ATTRIBUTE); com.intellij.psi.PsiAnnotationMemberValue newNameMemberValue = newAnnotation.findDeclaredAttributeValue(com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.API_NAMESPACE_NAME_ATTRIBUTE); annotation.setDeclaredAttributeValue(com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.API_NAMESPACE_NAME_ATTRIBUTE, newNameMemberValue); annotation.setDeclaredAttributeValue(com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.API_NAMESPACE_DOMAIN_ATTRIBUTE, newDomainMemberValue); } }.execute(); }<END_MOD>
@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(("com.android.jack.shrob.test" + testNumber)); com.android.jack.test.toolchain.<START_MOD>JackBasedToolchain<END_MOD> toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.<START_MOD>JackBasedToolchain<END_MOD>.class); <START_MOD>java.io.File candidateOutputMapping = com.android.jack.test.toolchain.AbstractTestTools.createTempFile("mapping", ".txt"); java.io.File refFolder = new java.io.File(testFolder, "refsObfuscationWithMapping"); java.io.File refOutputMapping = new java.io.File(refFolder, (("expected-" + flagNumber) + ".txt")); java.io.File inputMapping = new java.io.File(testFolder, (<END_MOD>(("proguard.flags" + flagNumber)<START_MOD> + ".mapping") + mappingNumber)); java.io.File proguardFlagsFile = addOptionsToFlagsFile(new java.io.File(testFolder, ("proguard.flags" + flagNumber)), testFolder, (((   + (candidateOutputMapping<END_MOD>.getAbsolutePath()<START_MOD>)) +   -applymapping   + (inputMapping.getAbsolutePath()))); toolchain.addProguardFlags(proguardFlagsFile); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, "jack")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorMapping(<END_MOD>candidateOutputMapping<START_MOD>,<END_MOD> refOutputMapping<START_MOD>)<END_MOD>); }
public void fchown(java.io.FileDescriptor fd, int uid, int gid) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
@java.lang.Override @javax.annotation.Nonnull public synchronized <START_MOD>java<END_MOD>.<START_MOD>io<END_MOD>.<START_MOD>BufferedReader<END_MOD> getBufferedReader() { wasUsed = true; if ((reader) == null) { clearRemover(); try { <START_MOD>this.stream<END_MOD> = new com.android.sched.util.stream.<START_MOD>IsClosedInputStream<END_MOD>(new java.io.FileInputStream(file)<START_MOD>); this.reader = new java.io.BufferedReader(new java.io.InputStreamReader(((java.io.InputStream) (this.stream))<END_MOD>, charset), bufferSize); } catch (java.io.FileNotFoundException e) { throw new com.android.sched.util.ConcurrentIOException(e); } } return reader; }
<START_MOD>@javax.annotation.Nonnull private java.util.Set<java.lang.String> getDeleteFileNames(@javax.annotation.Nonnull java.util.Set<java.lang.String> javaFileNames) { assert (fileDependencies) != null; java.util.Set<java.lang.String> deletedFileNames = new java.util.HashSet<java.lang.String>(); for (java.lang.String javaFileName : fileDependencies.getCompiledJavaFiles()) { if (!(javaFileNames.contains(javaFileName))) { deletedFileNames.add(javaFileName); } } return deletedFileNames; }<END_MOD>
public boolean areCarrierPriviligeRulesLoaded() { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); <START_MOD>log(("carrierPrivilegeRules" + carrierPrivilegeRules)); <END_MOD>return (carrierPrivilegeRules == null) || (carrierPrivilegeRules.areCarrierPriviligeRulesLoaded()); }
public void execve(java.lang.String filename, java.lang.String[] argv, java.lang.String[] envp) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
public int pwrite(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, long offset) throws <START_MOD>android.os.ErrnoException, <END_MOD>java.io.InterruptedIOException;
<START_MOD>@com.android.annotations.Nullable public static com.android.ddmlib.IDevice getDeviceIfOnline(@com.android.annotations.Nullable java.lang.String serial, @com.sun.istack.internal.NotNull com.android.ddmlib.IDevice[] onlineDevices) { if (serial == null) { return null; } for (com.android.ddmlib.IDevice device : onlineDevices) { if ((serial.equals(device.getAvdName())) || (serial.equals(device.getSerialNumber()))) { return device; } } return null; }<END_MOD>
<START_MOD>@java.lang.Override public boolean sameItemAs(java.lang.Package pkg, boolean ignorePreviews) { if (pkg instanceof com.android.sdklib.internal.repository.packages.BuildToolPackage) { com.android.sdklib.internal.repository.packages.BuildToolPackage rhs = ((com.android.sdklib.internal.repository.packages.BuildToolPackage) (pkg)); return (rhs.getRevision().compareTo(getRevision(), ignorePreviews)) == 0; } return false; }<END_MOD>
void executeShellCommand(java.lang.String command, com.android.ddmlib.IShellOutputReceiver receiver) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException<START_MOD>, java.lang.InterruptedException<END_MOD>;
<START_MOD>@java.lang.Override public boolean equals(java.lang.Object otherObj) { if ((this) == otherObj) { return true; } else if ((otherObj == null) || ((getClass()) != (otherObj.getClass()))) { return false; } com.android.server.wifi.WifiNative.HiddenNetwork other = ((com.android.server.wifi.WifiNative.HiddenNetwork) (otherObj)); return (java.util.Objects.equals(ssid, other.ssid)) && ((priority) == (other.priority)); }<END_MOD>
public com.android.apksig.DefaultApkSignerEngine build() throws java.security.InvalidKeyException { return new com.android.apksig.DefaultApkSignerEngine(mSignerConfigs, mMinSdkVersion, <START_MOD>mMaxSdkVersion, <END_MOD>mV1SigningEnabled, mV2SigningEnabled, mOtherSignersSignaturesPreserved, mCreatedBy); }
<START_MOD>@java.lang.Override public void initConnected(java.net.InetAddress remoteAddress, int remotePort) { super.initConnected(remoteAddress, remotePort); address = remoteAddress; port = remotePort; }<END_MOD>
public void test_sort$JII() { int startIndex = (tests.api.java.util.ArraysTest.arraySize) / 4; int endIndex = (3 * (tests.api.java.util.ArraysTest.arraySize)) / 4; long[] reversedArray = new long[tests.api.java.util.ArraysTest.arraySize]; long[] originalReversedArray = new long[tests.api.java.util.ArraysTest.arraySize]; for (int counter = 0; counter < (tests.api.java.util.ArraysTest.arraySize); counter++) { reversedArray[counter] = ((long) (((tests.api.java.util.ArraysTest.arraySize) - counter) - 1)); originalReversedArray[counter] = reversedArray[counter]; } java.util.Arrays.sort(reversedArray, startIndex, endIndex); for (int counter = 0; counter < startIndex; counter++) assertTrue( modified outside of bounds ((reversedArray[counter]) == (originalReversedArray[counter]))); for (int counter = startIndex; counter < (endIndex - 1); counter++) assertTrue( not sorted within bounds ((reversedArray[counter]) <= (reversedArray[(counter + 1)]))); for (int counter = endIndex; counter < (tests.api.java.util.ArraysTest.arraySize); counter++) assertTrue( modified outside of bounds ((reversedArray[counter]) == (originalReversedArray[counter]))); try { java.util.Arrays.sort(reversedArray, (startIndex + 1), startIndex); fail( expected } catch (java.lang.IllegalArgumentException ignore) { } try { java.util.Arrays.sort(reversedArray, (-1), startIndex); fail( expected (1) } catch (java.lang.ArrayIndexOutOfBoundsException ignore) { } try { java.util.Arrays.sort(reversedArray, startIndex, ((reversedArray.length) + 1)); fail( expected (2) } catch (java.lang.ArrayIndexOutOfBoundsException ignore) { } <START_MOD>try { java.util.Arrays.sort(new long[1], (startIndex + 1), startIndex); fail( expected } catch (java.lang.IllegalArgumentException ignore) { } }<END_MOD>
public static boolean isNormalized(java.lang.CharSequence src, java.text.Normalizer.Form form) { return <START_MOD>java.text.com.ibm<END_MOD>.icu.<START_MOD>text.Normalizer<END_MOD>.isNormalized(src<START_MOD>.toString()<END_MOD>, <START_MOD>java.text.Normalizer.formToMode(<END_MOD>form<START_MOD>), 0<END_MOD>); }
private void refreshViewerInput() { if (!(<START_MOD>mImpl.<END_MOD>mGroupPackages.isDisposed())) { java.util.List<com.android.sdkuilib.internal.repository.core.PkgCategory> cats = <START_MOD>mImpl.<END_MOD>mDiffLogic.getCategories(isSortByApi()); if ((<START_MOD>mImpl.<END_MOD>mTreeViewer.getInput()) != cats) { <START_MOD>mImpl.<END_MOD>mTreeViewer.setInput(cats); } else { <START_MOD>mImpl.<END_MOD>mTreeViewer.refresh(); } expandInitial(<START_MOD>mImpl.<END_MOD>mTreeViewer.getInput()); updateButtonsState(); updateMenuCheckmarks(); } }
public static synchronized com.android.builder.sdk.SdkLoader getLoader(@com.android.annotations.NonNull java.io.File sdkLocation) { if (((com.android.builder.sdk.DefaultSdkLoader.sLoader) != null) && (!(sdkLocation.equals(com.android.builder.sdk.DefaultSdkLoader.sLoader.mSdkLocation)))) { throw new java.lang.IllegalStateException( created an SDK Loader with different SDK Path } <START_MOD>if ((com.android.builder.sdk.DefaultSdkLoader.sLoader) == null) {<END_MOD> com.android.builder.sdk.DefaultSdkLoader.sLoader = new com.android.builder.sdk.DefaultSdkLoader(sdkLocation); }<START_MOD> return com.android.builder.sdk.DefaultSdkLoader.sLoader; }<END_MOD>
public void requestNetwork(android.net.NetworkRequest request, android.app.PendingIntent operation) { checkPendingIntent(operation); try { mService.pendingRequestForNetwork(request.networkCapabilities, operation); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } <START_MOD>catch (android.os.ServiceSpecificException e) { throw android.net.ConnectivityManager.rethrowServiceException(e); <END_MOD>}<START_MOD> }<END_MOD>
protected byte[] wrap(byte content_type, org.conscrypt.DataStream dataStream) { <START_MOD>final int dataLength; if ((((!(sentOutputData)) && ((session) != null)) && (((session.protocol) == (ProtocolVersion.SSLv3)) || ((session.protocol) == (ProtocolVersion.TLSv1)))) && (session.cipherSuite.isInitialRecordSplit())) { dataLength = 1; } else { dataLength = org.conscrypt.SSLRecordProtocol.MAX_DATA_LENGTH; } <END_MOD>byte[] fragment = dataStream.getData(<START_MOD>dataLength<END_MOD>); return wrap(content_type, fragment, 0, fragment.length); }
@java.lang.Override public void libToLib(@javax.annotation.Nonnull java.io.File[] in, @javax.annotation.Nonnull java.io.File out, boolean zipFiles) throws java.lang.Exception { java.util.List<java.lang.String> commandLine = new java.util.ArrayList<java.lang.String>(); libToCommon(commandLine, convertClasspahtWithJillAsString(), in); if (zipFiles) { commandLine.add("--output-jack"); <START_MOD>commandLine.add(out.getAbsolutePath()); <END_MOD>} else { <START_MOD>if ((incrementalFolder) != null) { throw new java.lang.UnsupportedOperationException(); } addPropertiesForOutputJackDir(commandLine, <END_MOD>out<START_MOD>); }<END_MOD> com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile(commandLine.toArray(new java.lang.String[commandLine.size()])); exec.inheritEnvironment(); exec.setErr(errRedirectStream); exec.setOut(outRedirectStream); exec.setVerbose(isVerbose); if ((exec.run()) != 0) { throw new java.lang.RuntimeException( compiler exited with an error } }
<START_MOD>private void placeRttCall(boolean incoming) { android.os.Bundle extras = new android.os.Bundle(); extras.putBoolean(TelecomManager.EXTRA_START_CALL_WITH_RTT, true); if (incoming) { addAndVerifyNewIncomingCall(createTestNumber(), extras); } else { placeAndVerifyCall(extras); } }<END_MOD>
private <START_MOD>boolean<END_MOD> removeDerivedResources(org.eclipse.core.resources.IResource rootResource, boolean deleteRoot, org.eclipse.core.runtime.IProgressMonitor monitor) throws org.eclipse.core.runtime.CoreException { if (rootResource.exists()) { if ((rootResource.getType()) == (org.eclipse.core.resources.IResource.FOLDER)) { org.eclipse.core.resources.IFolder folder = ((org.eclipse.core.resources.IFolder) (rootResource)); org.eclipse.core.resources.IResource[] members = folder.members(); <START_MOD>boolean allMembersDeleted = true; <END_MOD>for (org.eclipse.core.resources.IResource member : members) { <START_MOD>allMembersDeleted &= <END_MOD>removeDerivedResources(member, true, monitor); } <START_MOD>if (deleteRoot && allMembersDeleted) { rootResource.getLocation().toFile().delete(); return true; } }<END_MOD> if (rootResource.isDerived()) { rootResource.getLocation().toFile().delete(); <START_MOD>return true; } } return false; }<END_MOD>
<START_MOD>public void testSignature_updateArray_negativeOffset_throws() throws java.lang.Exception { try { java.security.Signature s = new libcore.java.security.SignatureTest.MySignature("FOO"); s.update(new byte[4], (-1), 1); fail(); } catch (java.lang.IllegalArgumentException expected) { } }<END_MOD>
<START_MOD>@java.lang.Override public com.android.ahat.heapdump.AhatInstance next() { com.android.ahat.heapdump.AhatInstance next = mNext; mNext = null; return next; }<END_MOD>
@org.junit.Test public void testSetupDriverForSoftApMode() { com.android.server.wifi.WificondControl wificondControl = mock(com.android.server.wifi.WificondControl.class); android.net.wifi.IWificond wificond = mock(android.net.wifi.IWificond.class); android.net.wifi.IApInterface apInterface = mock(android.net.wifi.IApInterface.class); when(wificondControl.setupDriverForSoftApMode()).thenReturn(apInterface); mWifiNative.setWificondControl(wificondControl); android.net.wifi.IApInterface returnedApInterface = mWifiNative.setupDriverForSoftApMode(); assertEquals(apInterface, returnedApInterface); verify(mWifiNative).startHal(eq(false)); <START_MOD>verify(wificondControl).setupDriverForSoftApMode(); <END_MOD>}
<START_MOD>public android.bluetooth.BluetoothHidDeviceAppQosSettings build() { return new android.bluetooth.BluetoothHidDeviceAppQosSettings(this); }<END_MOD>
<START_MOD>@org.junit.Test <END_MOD>public void testAppLauncher() throws java.lang.Exception { <START_MOD>mInstrumentation = testRule.getInstrumentation(); <END_MOD>com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, "Contacts"); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, "Calendar"); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, "Email"); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, "Settings"); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation,   Demos com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation,   Locale com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation,   Tools com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation,   Settings com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation,   Builder com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation,   Preview }
public com.android.dx.util.ByteArray slice(int start, int end) { checkOffsets(start, end); <START_MOD>byte[] slicedOut = new byte[end - start]; java.lang.System.arraycopy(bytes, start, slicedOut, 0, (end - start)); <END_MOD>return new com.android.dx.util.ByteArray(<START_MOD>slicedOut<END_MOD>, <START_MOD>0<END_MOD>, <START_MOD>slicedOut<END_MOD>.<START_MOD>length<END_MOD>); }
protected com.android.internal.telephony.SMSDispatcher.SmsTracker getSmsTracker(java.util.HashMap<java.lang.String, java.lang.Object> data, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, java.lang.String format, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, com.android.internal.telephony.SmsHeader smsHeader, boolean isExpectMore, java.lang.String fullMessageText, boolean isText, boolean persistMessage<START_MOD>, int validityPeriod<END_MOD>) { android.content.pm.PackageManager pm = mContext.getPackageManager(); java.lang.String[] packageNames = pm.getPackagesForUid(android.os.Binder.getCallingUid()); final int userId = android.os.UserHandle.getCallingUserId(); android.content.pm.PackageInfo appInfo = null; if ((packageNames != null) && ((packageNames.length) > 0)) { try { appInfo = pm.getPackageInfoAsUser(packageNames[0], PackageManager.GET_SIGNATURES, userId); } catch (android.content.pm.PackageManager e) { } } java.lang.String destAddr = android.telephony.PhoneNumberUtils.extractNetworkPortion(((java.lang.String) (data.get("destAddr")))); return new com.android.internal.telephony.SMSDispatcher.SmsTracker(data, sentIntent, deliveryIntent, appInfo, destAddr, format, unsentPartCount, anyPartFailed, messageUri, smsHeader, isExpectMore, fullMessageText, getSubId(), isText, persistMessage, userId<START_MOD>, validityPeriod<END_MOD>); }
<START_MOD>static boolean isSubset(java.lang.String aid) { return aid.endsWith("@"); }<END_MOD>
<START_MOD>@java.lang.Override public void setVariantManager(com.android.build.gradle.internal.VariantManager variantManager) { this.variantManager = variantManager; }<END_MOD>
@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) { com.android.sched.vfs.InputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VFS prefixedInputVFS = null; try { prefixedInputVFS = new com.android.sched.vfs.PrefixedFS(vfs, com.android.jack.library.v0002.InputJackLibraryImpl.getSectionPath(fileType)); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.NotDirectoryException e) { throw new java.lang.AssertionError(e); } if (fileType == (com.android.jack.library.FileType.PREBUILT)) { try { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(new com.android.sched.vfs.<START_MOD>DeflateFS(new com.android.sched.vfs.<END_MOD>MessageDigestFS(prefixedInputVFS, com.android.sched.util.config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO)))<START_MOD>)<END_MOD>; } catch (com.android.sched.vfs.WrongVFSFormatException e) { throw new java.lang.AssertionError(e); } } else { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(<START_MOD>new com.android.sched.vfs.DeflateFS(<END_MOD>prefixedInputVFS)<START_MOD>)<END_MOD>; } sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }
<START_MOD>int openForAttributeAccess(boolean followLinks) throws java.io.IOException { int flags = sun.nio.fs.UnixConstants.O_RDONLY; if (!followLinks) { if (!(supportsNoFollowLinks())) throw new java.io.IOException("NOFOLLOW_LINKS is not supported on this platform"); flags |= sun.nio.fs.UnixConstants.O_NOFOLLOW; } try { return sun.nio.fs.UnixNativeDispatcher.open(this, flags, 0); } catch (sun.nio.fs.UnixException x) { if ((getFileSystem().isSolaris()) && ((x.errno()) == (sun.nio.fs.UnixConstants.EINVAL))) x.setError(sun.nio.fs.UnixConstants.ELOOP); if ((x.errno()) == (sun.nio.fs.UnixConstants.ELOOP)) throw new java.nio.file.FileSystemException(getPathForExceptionMessage(), null, ((x.getMessage()) + " or unable to access attributes of symbolic link")); x.rethrowAsIOException(this); return -1; } }<END_MOD>
<START_MOD>@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testMultipleDefaults_fromInterfaces_right() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_48).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }<END_MOD>
<START_MOD>public boolean answer(short transactionId, int pubSubId, int requestorInstanceId, byte[] dest, byte[] message, int messageId) throws java.lang.Exception { if (((mFailQueueCommandImmediately) != null) && (mFailQueueCommandImmediately.contains(messageId))) { return false; } if (((mFailQueueCommandLater) != null) && (mFailQueueCommandLater.contains(messageId))) { mDut.onMessageSendQueuedFailResponse(transactionId, NanStatusType.INTERNAL_FAILURE); } else { if ((mQueue.size()) <= (mMaxQueueDepth)) { mQueue.offer(transactionId); mMessageIdsByTid.put(transactionId, messageId); mDut.onMessageSendQueuedSuccessResponse(transactionId); } else { mDut.onMessageSendQueuedFailResponse(transactionId, NanStatusType.FOLLOWUP_TX_QUEUE_FULL); } } return true; }<END_MOD>
<START_MOD>@java.lang.Override public com.android.build.gradle.internal.SdkHandler getSdkHandler() { return sdkHandler; }<END_MOD>
<START_MOD>public boolean setGroupIdle(java.lang.String groupIfName, int timeoutInSec) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure())) return false; if (timeoutInSec < 0) return false; com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult((((("setGroupIdle(" + groupIfName) + ", ") + timeoutInSec) + ")")); try { result.setResult(mISupplicantP2pIface.setGroupIdle(groupIfName, timeoutInSec)); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ("ISupplicantP2pIface exception: " + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }<END_MOD>
public android.net.Uri scanSingleFile(java.lang.String path, java.lang.String volumeName, java.lang.String mimeType) { try { initialize(volumeName); prescan(path); java.io.File file = new java.io.File(path); return mClient.doScanFile(path, mimeType, <START_MOD>((<END_MOD>file.lastModified(<START_MOD>)) / 1000<END_MOD>), file.length(), true); } catch (android.os.RemoteException e) { android.util.Log.e(android.media.MediaScanner.TAG,   in MediaScanner.scanFile() e); return null; } }
private void initiateBatteryQuery() { java.lang.String threadName = java.lang.String.format("query-battery-%s", mDevice.getSerialNumber()); java.lang.Thread fetchThread = new java.lang.Thread(threadName) { @java.lang.Override public void run() { java.lang.Exception exception = null; try { com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver sysBattReceiver = new com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver(); mDevice.executeShellCommand( /sys/class/power_supply sysBattReceiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (!(setBatteryLevel(sysBattReceiver.getBatteryLevel()))) { com.android.ddmlib.BatteryFetcher.BatteryReceiver receiver = new com.android.ddmlib.BatteryFetcher.BatteryReceiver(); mDevice.executeShellCommand( battery receiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (setBatteryLevel(receiver.getBatteryLevel())) { return; } } exception = new java.io.IOException( response to battery level queries } catch (com.android.ddmlib.TimeoutException e) { exception = e; } catch (com.android.ddmlib.AdbCommandRejectedException e) { exception = e; } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { exception = e; } catch (java.io.IOException e) { exception = e; } <START_MOD>catch (java.lang.InterruptedException e) { exception = e; } <END_MOD>handleBatteryLevelFailure(exception); } }; fetchThread.setDaemon(true); fetchThread.start(); }
<START_MOD>public void testValueOfInvalidDate() { java.lang.String[] invalidDates = new java.lang.String[]{ "+2001-12-31", "2001-+12-31", "2001-12-+31", "-2001-12-31", "2001--12-31", "2001-12--31", "2001--", "2001--31", "-12-31", "-12-", "--31", "2000000001-12-31" }; for (java.lang.String date : invalidDates) { try { java.sql.Date.valueOf(date); fail(); } catch (java.lang.IllegalArgumentException expected) { } } }<END_MOD>
public int setsid() throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { return os.setsid(); }
@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCatchBlock block) { assert (cfg) != null; com.android.jack.cfg.NormalBasicBlock endOfBlock = new com.android.jack.cfg.NormalBasicBlock(cfg, currentStmts); setBlockOfStatement(endOfBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(block); if (nextStatement != null) { forwardBranchResolver.<START_MOD>addNormalBasicBlock<END_MOD>(endOfBlock, nextStatement); } }
<START_MOD>private int installBreakpointOnCatch(long classID, long methodID) { long lineCodeIndex = getCodeIndexForLineNumber(classID, methodID, BreakpointOnCatchDebuggee.BREAKPOINT_CATCH_LINE); org.apache.harmony.jpda.tests.framework.jdwp.Location location = new org.apache.harmony.jpda.tests.framework.jdwp.Location(JDWPConstants.TypeTag.CLASS, classID, methodID, lineCodeIndex); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket replyPacket = debuggeeWrapper.vmMirror.setBreakpoint(location); return replyPacket.getNextValueAsInt(); }<END_MOD>
public int setsid() throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
<START_MOD>private void verifyResultsClzUchar2(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { byte[] arrayInValue = new byte[(INPUTSIZE) * 2]; inValue.copyTo(arrayInValue); byte[] arrayOut = new byte[(INPUTSIZE) * 2]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 2; j++) { android.renderscript.cts.TestClz.ArgumentsUcharUchar args = new android.renderscript.cts.TestClz.ArgumentsUcharUchar(); args.inValue = arrayInValue[((i * 2) + j)]; android.renderscript.cts.CoreMathVerifier.computeClz(args); byte actualOut = arrayOut[((i * 2) + j)]; int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; float ulpf; ulpf = (java.lang.Math.ulp(args.out)) * ulf; assertEquals(((((((((((((((((("Incorrect output for checkClzUchar2" + (relaxed ? "_relaxed" : "")) + " @[") + i) + ", ") + j) + "] with ulf:") + ulf) + ".\n") + "Input inValue:") + (args.inValue)) + "\n") + "Expected output out:") + (args.out)) + "\n") + "Actual output out:") + actualOut) + "\n"), args.out, actualOut, ulpf); } } }<END_MOD>
<START_MOD>public void test_forLanguageTag() { }<END_MOD>
<START_MOD>public void testSendCommand() throws java.lang.Exception { mCallback.reset(); synchronized(mWaitLock) { final java.lang.String command = "test-command"; final android.os.Bundle extras = new android.os.Bundle(); extras.putString(android.media.cts.MediaControllerTest.EXTRAS_KEY, android.media.cts.MediaControllerTest.EXTRAS_VALUE); mController.sendCommand(command, extras, new android.os.ResultReceiver(null)); mWaitLock.wait(android.media.cts.MediaControllerTest.TIME_OUT_MS); assertTrue(mCallback.mOnCommandCalled); assertNotNull(mCallback.mCommandCallback); assertEquals(android.media.cts.MediaControllerTest.EXTRAS_VALUE, mCallback.mExtras.getString(android.media.cts.MediaControllerTest.EXTRAS_KEY)); } }<END_MOD>
public void updateDate(int year, int monthOfYear, int dayOfMonth) { mYear = year; mMonth = monthOfYear; mDay = dayOfMonth; updateSpinners(); reorderPickers(new java.text.DateFormatSymbols().getShortMonths()); <START_MOD>notifyDateChanged(); <END_MOD>}
@java.lang.Override long getLastModified(@javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVFile file) <START_MOD>throws com.android.sched.util.file.CannotReadException <END_MOD>{ return vfs.getLastModified(file.getWrappedFile()); }
@java.lang.Override public final int getInt(int index) { <START_MOD>checkCanAccess<END_MOD>(); checkIndex(index, SizeOf.INT); return this.block.peekInt(((offset) + index), order); }
<START_MOD>public void testSupplierConstructor() throws java.lang.Exception { com.android.timezone.distro.DistroVersion distroVersion = new com.android.timezone.distro.DistroVersion(DistroVersion.CURRENT_FORMAT_MAJOR_VERSION, DistroVersion.CURRENT_FORMAT_MINOR_VERSION, "2016c", 1); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); try (java.util.zip.ZipOutputStream zipOutputStream = new java.util.zip.ZipOutputStream(baos)) { com.android.timezone.distro.TimeZoneDistroTest.addZipEntry(zipOutputStream, TimeZoneDistro.DISTRO_VERSION_FILE_NAME, distroVersion.toBytes()); } byte[] bytes = baos.toByteArray(); com.android.timezone.distro.TimeZoneDistro distro = new com.android.timezone.distro.TimeZoneDistro(() -> new java.io.ByteArrayInputStream(bytes)); assertEquals(distroVersion, distro.getDistroVersion()); }<END_MOD>
public void run() { try { if (Main.DEBUG) { java.lang.System.out.println(( ThreadStress Daemon   + (id))); } <START_MOD>startBarrier.await(); try { <END_MOD>int i = 0; while (<START_MOD>running<END_MOD>) { Main.Operation operation = operations[i]; if (Main.DEBUG) { java.lang.System.out.println(((((( Daemon   + (id)) +   operation   + i) +   is   + operation)); } operation.perform(); i = (i + 1) % (operations.length); } } catch (java.lang.OutOfMemoryError e) { } if (Main.DEBUG) { java.lang.System.out.println(( ThreadStress Daemon for   + (id))); } <START_MOD>stopBarrier.await(); } catch (java.lang.Throwable t) { try { t.printStackTrace(); } catch (java.lang.Throwable ignored) { } mainThread.interrupt(); } }<END_MOD>
@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.InputOutputVFS checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull final java.lang.String string) throws com.android.sched.util.codec.ParsingException { <START_MOD>java.io.File file; com.android.sched.util.location.DirectoryLocation location; com.android.sched.util.file.Directory workingDirectory = context.getWorkingDirectory(); if (workingDirectory != null) { file = new java.io.File(workingDirectory.getFile(), string); location = new com.android.sched.util.location.DirectoryLocation(string); } else { file = new java.io.File(string); location = new com.android.sched.util.location.DirectoryLocation(file); } <END_MOD>try { return new com.android.sched.vfs.GenericInputOutputVFS(new com.android.sched.vfs.CachedDirectFS(new com.android.sched.util.file.Directory(<START_MOD>file, location<END_MOD>, context.getRunnableHooks(), existence, permissions, change), permissions)); } catch (java.io.IOException e) { throw new com.android.sched.util.codec.ParsingException(e); } }
@javax.annotation.Nonnull @java.lang.Override public java.util.Collection<java.lang.String> getSubPackageNames(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading) { java.util.List<java.lang.String> subs = new java.util.ArrayList<java.lang.String>(); <START_MOD>try { <END_MOD>for (com.android.sched.vfs.InputVElement sub : <START_MOD>inputJackLibrary.getDir(FileType.JAYCE, ((packagePath) == null ? new com.android.sched.vfs.VPath("", '/') : packagePath))<END_MOD>.list()) { if (sub.isVDir()) { subs.add(sub.getName()); }<START_MOD> } } catch (com.android.jack.library.FileTypeDoesNotExistException e) {<END_MOD> } return subs; }
<START_MOD>@org.junit.Test public void testRetrieveNotification() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(("BF2B18A016" + ("3014BF2F118001010C08736D64702E636F6D81020410" + "9000"))); com.android.internal.telephony.uicc.euicc.EuiccNotification result = mEuiccCard.retrieveNotification(5); assertEquals(new com.android.internal.telephony.uicc.euicc.EuiccNotification(1, "smdp.com", EuiccNotification.Event.DELETE, com.android.internal.telephony.uicc.euicc.Asn1Converter.hexToBytes("3014BF2F118001010C08736D64702E636F6D81020410")), result); verifyStoreData(channel, "BF2B05A003800105"); }<END_MOD>
<START_MOD>public java.util.Map<java.lang.String, java.lang.Integer> getEnumValues(java.lang.String name) { if ((mEnumMap) != null) { return mEnumMap.get(name); } return null; }<END_MOD>
@java.lang.Override public<START_MOD> synchronized<END_MOD> void tearDown(com.android.tradefed.invoker.IInvocationContext context, java.lang.Throwable e) throws com.android.tradefed.device.DeviceNotAvailableException { if (((mVenvDir) != null) && (mIsDirCreator)) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.recursiveDelete(mVenvDir.toPath()); com.android.tradefed.log.LogUtil.CLog.i( the virtual env temp working dir, %s. mVenvDir); } catch (java.io.IOException exception) { com.android.tradefed.log.LogUtil.CLog.e( to delete %s: %s mVenvDir, exception); } mVenvDir = null; } }
<START_MOD>@com.android.annotations.NonNull com.android.builder.model.ArtifactMetaData.ArtifactType getType();<END_MOD>
public boolean p2pExtListen(boolean enable, int period, int interval) { if (enable && (interval < period)) { return false; } <START_MOD>if ((com.android.server.wifi.WifiNative.HIDL_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.configureExtListen(enable, period, interval); } else { <END_MOD>return doBooleanCommand(("P2P_EXT_LISTEN" + (enable ? ((   + period) +     + interval : ""))); }<START_MOD> }<END_MOD>
public int read(byte[] arr, int offset, int length) { if ((offset + length) > (arr.length)) { length = (arr.length) - offset; } int maxLength = (size) - (cursor); if (length > maxLength) { length = maxLength; } java.lang.System.arraycopy(bytes, ((cursor) + (start)), arr, offset, length); cursor += length; return length; }
<START_MOD>@com.android.annotations.NonNull com.android.build.gradle.managed.ManagedPattern getCppFilePattern();<END_MOD>
@org.junit.Test public void testDoubleClatAccounting100MBDownload() throws java.lang.Exception { long appRxBytesBefore = 328684029L; long appRxBytesAfter = 439237478L; assertEquals( traffic should be ~100MB 110553449, (appRxBytesAfter - appRxBytesBefore)); long rootRxBytesBefore = 1394011L; long rootRxBytesAfter = 1398634L; assertEquals(   traffic should be ~0 4623, (rootRxBytesAfter - rootRxBytesBefore)); <START_MOD>android.util.ArrayMap<java.lang.String, java.lang.String> stackedIface = new android.util.ArrayMap(); stackedIface.put<END_MOD>("v4-wlan0", "wlan0"); android.net.NetworkStats stats; stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_before); <START_MOD>stats.apply464xlatAdjustments(stackedIface); <END_MOD>com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "v4-wlan0", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesBefore, 5199872L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "wlan0", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesBefore, 647888L); stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_after); <START_MOD>stats.apply464xlatAdjustments(stackedIface); <END_MOD>com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "v4-wlan0", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesAfter, 7867488L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "wlan0", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesAfter, 647587L); }
public native <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.StructStat stat(java.lang.String path) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
<START_MOD>@java.lang.Override public void deleteTransportModeTransform(int transformId) { }<END_MOD>
public void testTimeKeyListener() { final android.text.method.TimeKeyListener timeKeyListener = android.text.method.TimeKeyListener.getInstance(); mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(timeKeyListener); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); assertEquals("", mTextView.getText().toString()); mInstrumentation.sendStringSync("1"); assertEquals("1", mTextView.getText().toString()); mInstrumentation.sendStringSync("2"); assertEquals("12", mTextView.getText().toString()); int keyCode = android.text.method.cts.TextMethodUtils.getUnacceptedKeyCode(TimeKeyListener.CHARACTERS); if ((-1) != keyCode) { sendKeys(keyCode); assertEquals(<START_MOD>"12", mTextView.getText().toString()); } mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(null); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync();<END_MOD> mInstrumentation.sendStringSync("1"); assertEquals(<START_MOD>"12", mTextView.getText().toString()); }<END_MOD>
public void run(<START_MOD>) { if (device.isOnline()) { com.android.hierarchyviewerlib.device.DeviceBridge.setupDeviceForward(device); if (!(com.android.hierarchyviewerlib.device.DeviceBridge.isViewServerRunning(device))) { if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))<END_MOD>) { try { java.lang.Thread.sleep(2000); } catch (java.lang.InterruptedException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, ( to debug device   + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); return; } if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, ( to debug device   + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); } else { loadViewServerInfoAndWindows(device); } <START_MOD>return; } } loadViewServerInfoAndWindows(device); } }<END_MOD>
@android.test.suitebuilder.annotation.SmallTest public void testNetworkInfoOfTypeNone() { android.os.ConditionVariable broadcastCV = waitForConnectivityBroadcasts(1); verifyNoNetwork(); com.android.server.ConnectivityServiceTest.MockNetworkAgent lowpanNetwork = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_LOWPAN); assertNull(mCm.getActiveNetworkInfo()); lowpanNetwork.connect(true); waitForIdle(); verifyActiveNetwork(com.android.server.TRANSPORT_LOWPAN); <START_MOD>com.android.server.ConnectivityServiceTest.assertLength<END_MOD>(1, mCm.getAllNetworks()); android.net.NetworkInfo info = mCm.getActiveNetworkInfo(); android.net.Network network = mCm.getActiveNetwork(); com.android.server.NetworkCapabilities capabilities = mCm.getNetworkCapabilities(network); assertNotNull(info); assertNotNull(network); assertNotNull(capabilities); assertEquals(com.android.server.TYPE_NONE, info.getType()); assertTrue(capabilities.hasTransport(com.android.server.TRANSPORT_LOWPAN)); lowpanNetwork.disconnect(); waitForIdle(); verifyNoNetwork(); if (broadcastCV.block(10)) { fail( no broadcast, but got CONNECTIVITY_ACTION broadcast } }
public static void setExtensionDefault(com.android.build.gradle.managed.NdkConfig ndkConfig) { if (ndkConfig.getToolchain().isEmpty()) { ndkConfig.setToolchain(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_TOOLCHAIN); } else { if ((!(ndkConfig.getToolchain().equals("gcc"))) && (!(ndkConfig.getToolchain().equals("clang")))) { throw new org.gradle.api.InvalidUserDataException(java.lang.String.format( toolchain '%s'. Supported toolchains are 'gcc' and 'clang'. ndkConfig.getToolchain())); } } ndkConfig.getCFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue("**/*.c"); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue("**/*.cpp"); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue("**/*.cc"); } }); if (ndkConfig.getStl().isEmpty()) { ndkConfig.setStl(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_STL); } else { com.android.build.gradle.ndk.internal.StlConfiguration.checkStl(ndkConfig.getStl()); } }
@java.lang.Override boolean build() { if (super.build())<START_MOD> { java.io.File tmpInputJar = null; try<END_MOD> { java.io.File outDir = outputFile.fileName.getParentFile(); if ((!(outDir.exists())) && (!(outDir.mkdirs()))) { java.lang.System.err.println(( to create output dir:   + (outDir.getAbsolutePath()))); return false; } <START_MOD>tmpInputJar = new java.io.File(((inputFile.fileName.getPath()) + ".jar")); util.build.BuildStep.BuildFile tmInputJarBuildFile = new util.build.BuildStep.BuildFile(tmpInputJar); util.build.JarBuildStep jarStep = new util.build.JarBuildStep(inputFile, inputFile.fileName.getName(), tmInputJarBuildFile, false); if (!(jarStep.build())) { throw new java.io.IOException(( to make jar:   + (outputFile.getPath()))); }<END_MOD> java.lang.String[] commandLine = new java.lang.String[]<START_MOD>{ "--import", tmpInputJar.getAbsolutePath(), "--output-jack", outputFile.fileName.getAbsolutePath() }; util.build.ExecuteFile exec = new util.build.ExecuteFile(JackBuildDalvikSuite.JACK,<END_MOD> commandLine<START_MOD>); exec.setErr(java.lang.System.err); exec.setOut(java.lang.System.out); if (!(exec.run())) { return false; } return true; } catch (java.lang.Throwable ex) { java.lang.System.err.println(((( while making jack file from jar   + (inputFile.fileName.getAbsolutePath())) +   to   + (<END_MOD>outputFile.fileName.getAbsolutePath()<START_MOD>)));<END_MOD> ex.printStackTrace(); <START_MOD>} finally { tmpInputJar.delete(); } } <END_MOD>return false; }
public boolean click(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint mousePos) { <START_MOD>int x = getZoomX(); if (x > 0) { if (((mousePos.x) >= x) && ((mousePos.x) <= (x + (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_WIDTH)))) { int y = getZoomY(); if (((mousePos.y) >= y) && ((mousePos.y) <= (y + (3 * (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT))))) { if ((mousePos.y) < (y + (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT))) { zoomIn(); } else if ((mousePos.y) < (y + (2 * (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT)))) { zoomOut(); } else { zoomReset(); } } } } <END_MOD>com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreview preview = getPreview(mousePos); if (preview != null) { boolean handled = preview.click((((mousePos.x) - (getX())) - (preview.getX())), (((mousePos.y) - (getY())) - (preview.getY()))); if (handled) { moved(mousePos); return true; } } return false; }
<START_MOD>public java.util.Set<com.android.sdklib.internal.repository.SdkSourceCategory> getCategories() { return java.util.Collections.unmodifiableSet(mSources.keySet()); }<END_MOD>
public void testConfigurationUpdatesWhenResizedFromFullscreen() throws java.lang.Exception { if (<START_MOD>(<END_MOD>!(supportsMultiWindowMode(<START_MOD>))) || (!(supportsSplitScreenMultiWindow()<END_MOD>))) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO,   test: no multi-window support return; } launchActivityInStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); moveActivityToStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); android.server.cts.ActivityManagerAppConfigurationTests.assertSizesAreSane(fullscreenSizes, dockedSizes); }
@java.lang.Override public void handleMessage(android.os.Message msg) { if (mTestNameChanged) { getActionBar().setTitle(( test:   + (mTestName))); } if (<START_MOD>!(mToggleIO)) { if (<END_MOD>(mDisplayedBitmap) == 0) { mDisplayView.setImageBitmap(mBitmapOut1); } else { mDisplayView.setImageBitmap(mBitmapOut2); } mDisplayedBitmap ^= 1; mDisplayView.invalidate(); }<START_MOD> else { synchronized(this) { if (((mRS) == null) || ((mOutPixelsAllocationIO) == null)) { return; } if ((mOutDisplayAllocationIO) != (mOutPixelsAllocationIO)) { mOutDisplayAllocationIO.copyFrom(mOutPixelsAllocationIO); } mOutDisplayAllocationIO.ioSend(); mDisplayViewIO.invalidate(); } } }<END_MOD>
public void testLaunchToSideSingleInstance() throws java.lang.Exception {<START_MOD> if (!(supportsMultiWindow())) { return; }<END_MOD> launchTargetToSide(android.server.cts.ActivityManagerDockedStackTests.SINGLE_INSTANCE_ACTIVITY_NAME, false); }
<START_MOD>public static boolean inPlayConsoleUrl(java.awt.Point point, int activeIndex) { int playYStart = 70 + (68 * activeIndex); int playYEnd = 89 + (68 * activeIndex); int playXStart = 116; int playXEnd = 116 + 188; if (((((point.getX()) > playXStart) && ((point.getX()) < playXEnd)) && ((point.getY()) > playYStart)) && ((point.getY()) < playYEnd)) { return true; } return false; }<END_MOD>
public static long SubNeg3(long arg1, long arg2) {<START_MOD> if (Main.doThrow) { throw new java.lang.Error(); }<END_MOD> long res = 0; long temp = -arg1; for (long i = 0; i < 1; i++) { res += (temp - arg2) - i; } return res; }
<START_MOD>public org.jacoco.core.matcher.IncludeExcludeMatcher Exclude(org.jacoco.core.matcher.Matcher<T> exclusion) { exclusions.add(exclusion); return this; }<END_MOD>
@org.junit.Test public void testLamba002() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA002).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
<START_MOD>public com.android.ddmlib.Log.LogLevel getLogLevel() { return mLogLevel; }<END_MOD>
<START_MOD>private java.lang.String getDeviceLabel(@com.android.annotations.Nullable com.android.sdklib.devices.Device device, boolean brief) { if (device == null) { return ""; } java.lang.String name = device.getName(); if (brief) { int nexus = name.indexOf("Nexus"); if (nexus != (-1)) { int begin = name.indexOf('('); if (begin != (-1)) { begin++; int end = name.indexOf(')', begin); if (end != (-1)) { return name.substring(begin, end).trim(); } } } } return name; }<END_MOD>
<START_MOD>private java.lang.String generateRandomNfcid2() { long min = 0L; long max = 281474976710655L; long randomNfcid2 = ((long) (java.lang.Math.floor(((java.lang.Math.random()) * ((max - min) + 1))))) + min; return java.lang.String.format("02FE%02X%02X%02X%02X%02X%02X", ((randomNfcid2 >> (8 * 5)) & 255), ((randomNfcid2 >> (8 * 4)) & 255), ((randomNfcid2 >> (8 * 3)) & 255), ((randomNfcid2 >> (8 * 2)) & 255), ((randomNfcid2 >> (8 * 1)) & 255), ((randomNfcid2 >> (8 * 0)) & 255)); }<END_MOD>
@javax.annotation.Nonnull private com.android.jack.dx.dex.file.ClassDefItem createClassDefItem(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) throws com.android.jack.ir.ast.JTypeLookupException { com.android.jack.dx.rop.<START_MOD>type.Type thisClass = com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx(type); com.android.jack.dx.rop.type.Type superclassType = com.android.jack.backend.dex.ClassDefItemBuilder.createSuperClass(type); int accessFlags = getDxAccessFlagsForType(type); com.android.jack.dx.rop.type.TypeList interfaces = com.android.jack.backend.dex.ClassDefItemBuilder.createInterfacesList(type); com.android.jack.dx.rop.<END_MOD>cst.<START_MOD>CstString sourceFile = null; if (emitSourceFileInfo) { sourceFile = com.android.jack.backend.dex.ClassDefItemBuilder.createSourceFile(type); } com.android.jack.dx.dex.file.ClassDefItem classDefItem = new com.android.jack.dx.dex.file.ClassDefItem(<END_MOD>thisClass<START_MOD>, accessFlags,<END_MOD> superclassType<START_MOD>,<END_MOD> interfaces<START_MOD>,<END_MOD> sourceFile<START_MOD>); return classDefItem<END_MOD>; }
@java.lang.Override public boolean equals(java.lang.Object otherObj) { if ((this) == otherObj) { return true; } else if ((otherObj == null) || ((getClass()) != (otherObj.getClass()))) { return false; } com.android.server.wifi.WifiNative.PnoNetwork other = ((com.android.server.wifi.WifiNative.PnoNetwork) (otherObj)); return (((java.util.Objects.equals(ssid, other.ssid)) && ((priority) == (other.priority))) && ((flags) == (other.flags))) && ((auth_bit_field) == (other.auth_bit_field)); }
public void run() { <START_MOD>android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create(mCtx); <END_MOD>com.android.rs.test.<START_MOD>ScriptC_array_alloc s = new<END_MOD> com.android.rs.test.ScriptC_array_alloc(pRS); pRS.setMessageHandler(mRsMessage); int dimX = s.get_dimX(); <START_MOD>android.renderscript<END_MOD>.Allocation[] Arr = new <START_MOD>android.renderscript<END_MOD>.Allocation[dimX]; <START_MOD>android.renderscript<END_MOD>.Type.Builder typeBuilder = new <START_MOD>android.renderscript<END_MOD>.Type.Builder(pRS, <START_MOD>android.renderscript<END_MOD>.Element.I32(pRS)); <START_MOD>android.renderscript<END_MOD>.Type T = typeBuilder.setX(1).create(); for (int i = 0; i < dimX; i++) { <START_MOD>android.renderscript<END_MOD>.Allocation A = <START_MOD>android.renderscript<END_MOD>.Allocation.createTyped(pRS, T); Arr[i] = A; } s.set_a(Arr); s.invoke_array_alloc_test(); pRS.finish(); waitForMessage(); pRS.destroy(); passTest(); }
@java.lang.Override protected void resizeMedia(int byteLimit, long messageId) throws com.google.android.mms.MmsException { com.android.mms.ui.UriImage image = new com.android.mms.ui.UriImage(mContext, getUri()); if (image == null) { throw new com.android.mms.ExceedMessageSizeException(( room to resize picture:   + (getUri()))); } com.google.android.mms.pdu.PduPart part = image.getResizedImageAsPart(com.android.mms.MmsConfig.getMaxImageWidth(), com.android.mms.MmsConfig.getMaxImageHeight(), byteLimit); if (part == null) { throw new com.android.mms.ExceedMessageSizeException(( enough memory to turn image into part:   + (getUri()))); } <START_MOD>java.lang.String src = getSrc(); byte[] srcBytes = src.getBytes(); part.setContentLocation(srcBytes); int period = src.lastIndexOf("."); byte[] contentId = (period != (-1)) ? src.substring(0, period).getBytes() : srcBytes; part.setContentId(contentId); <END_MOD>com.google.android.mms.pdu.PduPersister persister = com.google.android.mms.pdu.PduPersister.getPduPersister(mContext); this.mSize = part.getData().length; android.net.Uri newUri = persister.persistPart(part, messageId); setUri(newUri); }
public java.lang.String startWpsPinDisplay(java.lang.String groupIfName, java.lang.String bssid) {<START_MOD> if ((android.text.TextUtils.isEmpty(groupIfName)) || (android.text.TextUtils.isEmpty(bssid))) return "";<END_MOD> synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure("startWpsPinDisplay"))) return null; if (groupIfName == null) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG,   name required when requesting WPS KEYPAD. return null; } byte[] macAddress = null; if (bssid != null) { try { macAddress = com.android.server.wifi.util.NativeUtil.macAddressToByteArray(bssid); } catch (java.lang.Exception e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG,   not parse BSSID. e); return null; } } com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.String> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult((((("startWpsPinDisplay(" + groupIfName) +     + bssid) + ")")); try { mISupplicantP2pIface.startWpsPinDisplay(groupIfName, macAddress, (android.hardware.wifi.supplicant.V1_0.SupplicantStatus status,java.lang.String generatedPin) -> { result.setResult(status, generatedPin); }); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ( exception:   + e)); supplicantServiceDiedHandler(); } return result.getResult(); } }
<START_MOD>@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testDeleteProfile_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(("BF2D26A024" + (("E3105A0A896700000000004523019F700100" + "E3105A0A896700000000004523029F700101") + "9000")), "BF33038001039000"); try { mEuiccCard.deleteProfile("98760000000000543210"); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, "BF330C5A0A89670000000000452301"); throw e; } }<END_MOD>
public void append(@com.android.annotations.NonNull com.android.build.gradle.internal.core.NdkConfig ndkConfig) { if ((ndkConfig.getModuleName()) != null) { moduleName = ndkConfig.getModuleName(); } if ((ndkConfig.getStl()) != null) { stl = ndkConfig.getStl(); } if ((ndkConfig.<START_MOD>getParallelJobs()) != null) { parallelJobs = ndkConfig.getParallelJobs(); } if ((ndkConfig.<END_MOD>getAbiFilters()) != null) { if ((abiFilters) == null) { abiFilters = com.google.common.collect.Sets.newHashSetWithExpectedSize(ndkConfig.getAbiFilters().size()); } else { abiFilters.clear(); } abiFilters.addAll(ndkConfig.getAbiFilters()); } if ((cFlags) == null) { cFlags = ndkConfig.getcFlags(); } else if ((ndkConfig.getcFlags()) != null) { cFlags = ((cFlags) +     + (ndkConfig.getcFlags()); } if ((ndkConfig.getLdLibs()) != null) { if ((ldLibs) == null) { ldLibs = com.google.common.collect.Lists.newArrayListWithCapacity(ndkConfig.getLdLibs().size()); } else { ldLibs.clear(); } ldLibs.addAll(ndkConfig.getLdLibs()); } }
<START_MOD>@com.android.annotations.NonNull public com.android.build.gradle.internal.dsl.NdkConfigDsl abiFilters(java.lang.String... filters) { java.util.Collections.addAll(abiFilters, filters); return this; }<END_MOD>
<START_MOD>public void addUnwantedCapability(@android.net.NetworkCapabilities.NetCapability int capability) { checkCapabilityRange(capability); mUnwantedNetworkCapabilities |= 1 << capability; removeCapability(capability); }<END_MOD>
<START_MOD>public android.net.wifi.IApInterface setupDriverForSoftApMode(android.net.wifi.IWificond wificond) { if (wificond == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, "Failed to get reference to wificond"); return null; } android.net.wifi.IApInterface apInterface = null; try { apInterface = wificond.createApInterface(); } catch (android.os.RemoteException e1) { } if (apInterface == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, "Could not get IApInterface instance from wificond"); return null; } else { android.os.Binder.allowBlocking(apInterface.asBinder()); } mWificond = wificond; mApInterface = apInterface; return apInterface; }<END_MOD>
public void testIkeOverUdpEncapSocket() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); android.net.cts.IpSecManagerTest.StatsChecker.initStatsChecker(); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket()) { int localPort = getPort(encapSocket.getSocket()); byte[] dataWithEspHeader = new byte[(TEST_DATA.length) + 8]; java.lang.System.arraycopy(android.net.cts.TEST_DATA, 0, dataWithEspHeader, 8, TEST_DATA.length); byte[] in = new byte[dataWithEspHeader.length]; android.system.Os.sendto(encapSocket.getSocket(), dataWithEspHeader, 0, dataWithEspHeader.length, 0, local, localPort); android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertArrayEquals( data did not match. dataWithEspHeader, in); int ipHdrLen = (local instanceof java.net.Inet6Address) ? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int expectedPacketSize = ((dataWithEspHeader.length) + (android.net.cts.IpSecManagerTest.UDP_HDRLEN)) + ipHdrLen; android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); } }
<START_MOD>private java.lang.String readString(int byteLength, java.nio.charset.Charset charset) throws java.io.IOException { if (byteLength > (stringBytesBuf.length)) { stringBytesBuf = new byte[byteLength]; stringCharBuf = new char[byteLength]; } libcore.io.Streams.readFully(in, stringBytesBuf, 0, byteLength); java.lang.String name; if (charset == (java.nio.charset.StandardCharsets.UTF_8)) { name = java.nio.charset.ModifiedUtf8.decode(stringBytesBuf, stringCharBuf, 0, byteLength); } else { name = new java.lang.String(stringBytesBuf, 0, byteLength, charset); } return name; }<END_MOD>
public void timeSinh(int reps) {<START_MOD> double result = d;<END_MOD> for (int rep = 0; rep < reps; ++rep) { <START_MOD>result = <END_MOD>java.lang.Math.sinh(d); } <START_MOD>return result; <END_MOD>}
public void timeSignumF(int reps) {<START_MOD> float result = f;<END_MOD> for (int rep = 0; rep < reps; ++rep) { <START_MOD>result = <END_MOD>java.lang.Math.signum(f); } <START_MOD>return result; <END_MOD>}
<START_MOD>public com.android.ide.eclipse.adt.internal.editors.ui.GridDataHelper wHint(int w) { mGD.widthHint = w; return this; }<END_MOD>
<START_MOD>public com.android.apksig.DefaultApkSignerEngine.SignerConfig.Builder setApkSignerLineage(com.android.apksig.ApkSignerLineage apkSignerLineage) { throw new sun.reflect.generics.reflectiveObjects.NotImplementedException(); }<END_MOD>
private void applyUpdate() throws android.system.ErrnoException, java.io.IOException { android.util.Slog.i(com.android.server.updates.SELinuxPolicyInstallReceiver.TAG,   SELinux policy java.io.File <START_MOD>backup<END_MOD> = new java.io.File(updateDir.getParentFile(), <START_MOD>"backup"<END_MOD>); java.io.File current = new java.io.File(updateDir.getParentFile(), "current"); java.io.File <START_MOD>tmp<END_MOD> = new java.io.File(updateDir.getParentFile(), <START_MOD>"tmp"); if (current.exists()) { deleteRecursive(backup); android.system.Os.rename(current.getPath(), backup.getPath()); } android.system.Os.rename(<END_MOD>tmp<START_MOD>.getPath(), current.getPath()); android.os.SystemProperties.set("selinux.reload_policy", "1"<END_MOD>); }
<START_MOD>@java.lang.Override public void parse(com.android.assetstudiolib.vectordrawable.vg.VDTree tree, org.xml.sax.Attributes attributes) { parseSize(tree, attributes); }<END_MOD>
public <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.StructPasswd getpwnam(java.lang.String name) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException { return os.getpwnam(name); }
public void <START_MOD>testGetPositiveSuffix<END_MOD>() { java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setPositiveSuffix("%"); assertTrue( positive prefix df.getPositiveSuffix().equals("%")); }
public void testVFE16() { try { <START_MOD>dot<END_MOD>.<START_MOD>junit<END_MOD>.<START_MOD>opcodes<END_MOD>.<START_MOD>iget_wide.d.T_iget_wide_5 t = new dot.junit.opcodes.iget_wide.d.T_iget_wide_5<END_MOD>(<START_MOD>); t.run(<END_MOD>); fail( a <START_MOD>IncompatibleClassChangeError<END_MOD> exception } catch (java.lang.<START_MOD>IncompatibleClassChangeError<END_MOD> <START_MOD>e<END_MOD>) { } }
<START_MOD>private void checkFmaxFloat2Float() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testFmaxFloat2Float(inX, out); verifyResultsFmaxFloat2Float(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFmaxFloat2Float: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testFmaxFloat2Float(inX, out); verifyResultsFmaxFloat2Float(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFmaxFloat2Float: " + (e.toString()))); } }<END_MOD>
@java.lang.Override public void run() { java.lang.Exception exception = null; try { com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver sysBattReceiver = new com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver(); mDevice.executeShellCommand( /sys/class/power_supply sysBattReceiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (!(setBatteryLevel(sysBattReceiver.getBatteryLevel()))) { com.android.ddmlib.BatteryFetcher.BatteryReceiver receiver = new com.android.ddmlib.BatteryFetcher.BatteryReceiver(); mDevice.executeShellCommand( battery receiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (setBatteryLevel(receiver.getBatteryLevel())) { return; } } exception = new java.io.IOException( response to battery level queries } catch (com.android.ddmlib.TimeoutException e) { exception = e; } catch (com.android.ddmlib.AdbCommandRejectedException e) { exception = e; } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { exception = e; } catch (java.io.IOException e) { exception = e; } <START_MOD>catch (java.lang.InterruptedException e) { exception = e; } <END_MOD>handleBatteryLevelFailure(exception); }
public void test_SSLContext_defaultConfiguration() throws java.lang.Exception { libcore.javax.net.ssl.<START_MOD>SSLConfigurationAsserts<END_MOD>.<START_MOD>assertSSLContextDefaultConfigurationRecursive<END_MOD>(javax.net.ssl.SSLContext.getDefault()); for (java.lang.String protocol : libcore.java.security.StandardNames.SSL_CONTEXT_PROTOCOLS) { javax.net.ssl.SSLContext sslContext = javax.net.ssl.SSLContext.getInstance(protocol); if (!(protocol.equals(StandardNames.SSL_CONTEXT_PROTOCOLS_DEFAULT))) { sslContext.init(null, null, null); } libcore.javax.net.ssl.<START_MOD>SSLConfigurationAsserts<END_MOD>.<START_MOD>assertSSLContextDefaultConfigurationRecursive<END_MOD>(sslContext); } }
public static void shutdown() throws java.lang.InterruptedException { synchronized(com.android.builder.profile.ProcessRecorderFactory.LOCK) { java.util.List<java.lang.management.GarbageCollectorMXBean> garbageCollectorMXBeans = java.lang.management.ManagementFactory.getGarbageCollectorMXBeans(); com.android.builder.profile.ThreadRecorder.get().record(ExecutionType.FINAL_METADATA, Recorder.EmptyBlock, new com.android.builder.profile.Recorder.Property("build_time", java.lang.Long.toString(((java.lang.System.currentTimeMillis()) - (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.startTime)))), new com.android.builder.profile.Recorder.Property("gc_count", java.lang.Long.toString(((garbageCollectorMXBeans.get(0).getCollectionCount()) - (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.gcCountAtStart)))), new com.android.builder.profile.Recorder.Property("gc_time", java.lang.Long.toString(((garbageCollectorMXBeans.get(0).getCollectionTime()) - (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.gcTimeAtStart))))); if (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.isInitialized()) { com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.get().finish(); com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.uploadData(); } com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.processRecorder = null; <START_MOD>com.android.builder.profile.ProcessRecorderFactory.sENABLED = false; <END_MOD>} }
<START_MOD>@org.junit.Test public void testWifiStartsWhenDeviceIsDecryptedAtBootWithWifiEnabled() { when(mPropertyService.get(eq("vold.decrypt"), anyString())).thenReturn(""); when(mSettingsStore.handleWifiToggled(true)).thenReturn(true); when(mSettingsStore.isWifiToggleEnabled()).thenReturn(true); when(mWifiStateMachine.syncGetWifiState()).thenReturn(com.android.server.wifi.WIFI_STATE_DISABLED); mWifiServiceImpl.checkAndStartWifi(); verify(mWifiController).start(); verify(mWifiController).sendMessage(com.android.server.wifi.WifiController.CMD_WIFI_TOGGLED); }<END_MOD>
@java.lang.Override public void disconnect() { try { Libcore.os.connect(fd, UNSPECIFIED, 0); } catch (<START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException errnoException) { throw new java.lang.AssertionError(errnoException); } catch (java.net.SocketException ignored) { } connectedPort = -1; connectedAddress = null; isNativeConnected = false; }
<START_MOD>@java.lang.Override public org.eclipse.swt.graphics.Image getScreenshotImage() { com.android.ddmlib.IDevice device = getDevice(); try { final com.android.ddmlib.RawImage screenshot = device.getScreenshot(); if (screenshot == null) { return null; } class ImageContainer { public org.eclipse.swt.graphics.Image image; } final ImageContainer imageContainer = new ImageContainer(); org.eclipse.swt.widgets.Display.getDefault().syncExec(new java.lang.Runnable() { @java.lang.Override public void run() { org.eclipse.swt.graphics.ImageData imageData = new org.eclipse.swt.graphics.ImageData(screenshot.width, screenshot.height, screenshot.bpp, new org.eclipse.swt.graphics.PaletteData(screenshot.getRedMask(), screenshot.getGreenMask(), screenshot.getBlueMask()), 1, screenshot.data); imageContainer.image = new org.eclipse.swt.graphics.Image(org.eclipse.swt.widgets.Display.getDefault(), imageData); } }); return imageContainer.image; } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.AbstractHvDevice.TAG, ("Unable to load screenshot from device " + (device.getName()))); } catch (com.android.ddmlib.TimeoutException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.AbstractHvDevice.TAG, ("Timeout loading screenshot from device " + (device.getName()))); } catch (com.android.ddmlib.AdbCommandRejectedException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.AbstractHvDevice.TAG, ("Adb rejected command to load screenshot from device " + (device.getName()))); } return null; }<END_MOD>
<START_MOD>@com.android.annotations.NonNull public java.util.Map<java.lang.String, com.android.builder.model.AndroidProject> executeAndReturnMultiModel(boolean emulateOlderIde, java.lang.String... tasks) { org.gradle.tooling.ProjectConnection connection = getProjectConnection(); try { executeBuild(java.util.Collections.<java.lang.String>emptyList(), connection, tasks); return com.android.build.gradle.integration.common.fixture.GradleTestProject.buildModel(connection, emulateOlderIde); } finally { connection.close(); } }<END_MOD>
@java.lang.Override public void supplyIccPuk2ForApp(java.lang.String puk, java.lang.String newPin2, java.lang.String aid, android.os.Message result) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_ENTER_SIM_PUK2, result<START_MOD>, mRILDefaultWorkSource<END_MOD>); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(); if (radioProxy != null) { addRequest(rr); try { radioProxy.supplyIccPuk2ForApp(rr.mSerial, (puk != null ? puk : ""), (newPin2 != null ? newPin2 : ""), (aid != null ? aid : "")); } catch (java.lang.Exception e) { riljLoge("supplyIccPuk2ForApp", e); rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); decrementWakeLock(rr); rr.release(); } } else { rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); rr.release(); } }
@com.googlecode.android_scripting.rpc.Rpc(description =   True if WiFi Calling is enabled during roaming. public boolean imsIsWfcRoamingEnabledByUser() { return com.android.ims.ImsManager.<START_MOD>isWfcEnabledByPlatformForSlot<END_MOD>(); }
<START_MOD>private void verifyResultsClzInt4(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { int[] arrayInValue = new int[(INPUTSIZE) * 4]; inValue.copyTo(arrayInValue); int[] arrayOut = new int[(INPUTSIZE) * 4]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 4; j++) { android.renderscript.cts.TestClz.ArgumentsIntInt args = new android.renderscript.cts.TestClz.ArgumentsIntInt(); args.inValue = arrayInValue[((i * 4) + j)]; android.renderscript.cts.CoreMathVerifier.computeClz(args); int actualOut = arrayOut[((i * 4) + j)]; int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; float ulpf; ulpf = (java.lang.Math.ulp(args.out)) * ulf; assertEquals(((((((((((((((((("Incorrect output for checkClzInt4" + (relaxed ? "_relaxed" : "")) + " @[") + i) + ", ") + j) + "] with ulf:") + ulf) + ".\n") + "Input inValue:") + (args.inValue)) + "\n") + "Expected output out:") + (args.out)) + "\n") + "Actual output out:") + actualOut) + "\n"), args.out, actualOut, ulpf); } } }<END_MOD>
<START_MOD>private static boolean isLegacyForeground(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.lang.String pkgName, int uid) { return (android.telephony.LocationAccessPolicy.isLegacyVersion(context, pkgName)) && (android.telephony.LocationAccessPolicy.isForegroundApp(context, uid)); }<END_MOD>
public int fcntlInt(java.io.FileDescriptor fd, int cmd, int arg) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException { return os.fcntlInt(fd, cmd, arg); }
public static <START_MOD>boolean<END_MOD> <START_MOD>isManifestClassAttribute<END_MOD>(<START_MOD>@com.android.annotations.NonNull org.w3c.dom.Attr attribute) { <END_MOD>java.lang.String <START_MOD>name = attribute.getLocalName(); if (name == null<END_MOD>) { <START_MOD>return false; } if (((((name.equals(com.android.SdkConstants.ATTR_NAME)) || (name.equals(<END_MOD>com.android.ide.eclipse.adt.<START_MOD>internal<END_MOD>.<START_MOD>refactorings.core.ATTRIBUTE_TARGET_ACTIVITY))) || <END_MOD>(<START_MOD>name<END_MOD>.<START_MOD>equals(com.android.ide.eclipse.adt.internal.refactorings.core.ATTRIBUTE_MANAGE_SPACE_ACTIVITY)))<END_MOD> <START_MOD>|| (name<END_MOD>.<START_MOD>equals("backupAgent")))<END_MOD> <START_MOD>|| (name.equals("parentActivityName"))) { return com.android.SdkConstants.ANDROID_URI.equals(attribute.getNamespaceURI()<END_MOD>); }<START_MOD> return false; }<END_MOD>
@java.lang.Override public void lchown(java.lang.String path, int uid, int gid) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.lchown(path, uid, gid); }
private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int <START_MOD>ivLen, int blkSize, int <END_MOD>truncLenBits) throws java.lang.Exception { int innerPacketSize = ((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((<START_MOD>calculateEspPacketSize<END_MOD>(((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen), <START_MOD>ivLen, blkSize, <END_MOD>truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = <START_MOD>calculateEspPacketSize<END_MOD>(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, <START_MOD>ivLen, blkSize, <END_MOD>truncLenBits); sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (<START_MOD>sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { if (<END_MOD>udpEncapLen != 0) { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } <START_MOD>} }<END_MOD>
@javax.annotation.Nonnull private static java.util.Properties loadLibraryProperties(@javax.annotation.Nonnull com.android.sched.vfs.InputVFS vfs) throws com.android.jack.library.NotJackLibraryException { java.util.Properties libraryProperties = new java.util.Properties(); try { com.android.sched.vfs.InputVFile libProp = vfs.getRootInputVDir().getInputVFile(JackLibrary.LIBRARY_PROPERTIES_VPATH); libraryProperties.load(libProp.openRead()); } catch (java.io.IOException e) { com.android.jack.library.JackLibraryFactory.logger.log(java.util.logging.Level.<START_MOD>FINE<END_MOD>, ((( to read   + (JackLibrary.LIBRARY_PROPERTIES_VPATH.getPathAsString('/'))) +   from   + vfs), e); throw new com.android.jack.library.NotJackLibraryException(vfs.getLocation()); } return libraryProperties; }
@javax.annotation.Nonnull public java.lang.String getVerboseVersion() { <START_MOD>java.lang.String str; str = version; if ((subReleaseKind) == (SubReleaseKind.ENGINEERING)) { str += "-eng"; } str += (   + (releaseName)) + "'"; if (((buildId) != null) || ((codeBase) != null)) { str +=   ( if ((buildId) != null) { str += buildId; if ((codeBase) != null) { str +=     } } if ((codeBase) != null) { str += codeBase; } str += ')'; } <END_MOD>return <START_MOD>str; }<END_MOD>
public int setUsbTethering(boolean enable) { if (com.android.server.connectivity.Tethering.VDBG) android.util.Log.d(com.android.server.connectivity.Tethering.TAG, (("setUsbTethering(" + enable) + ")")); android.hardware.usb.UsbManager usbManager = mContext.getSystemService(android.hardware.usb.UsbManager.class); synchronized(mPublicSync) { if (enable) { if (mRndisEnabled) { final long ident = android.os.Binder.clearCallingIdentity(); try { tetherMatchingInterfaces(<START_MOD>com.android.server.connectivity.Tethering.Mode.TETHERING, ConnectivityManager.TETHERING_USB); } finally { android.os.Binder.restoreCallingIdentity(ident); } } else { mUsbTetherRequested = <END_MOD>true<START_MOD>; usbManager.setCurrentFunction(UsbManager.USB_FUNCTION_RNDIS, false); } } else { final long ident = android.os.Binder.clearCallingIdentity(); try { tetherMatchingInterfaces(com.android.server.connectivity.Tethering.Mode.IDLE<END_MOD>, ConnectivityManager.TETHERING_USB); } finally { android.os.Binder.restoreCallingIdentity(ident); } <START_MOD>if (mRndisEnabled) { usbManager.setCurrentFunction(null, false); }<END_MOD> mUsbTetherRequested = false<START_MOD>; } } return android.net.<END_MOD>ConnectivityManager.TETHER_ERROR_NO_ERROR; }
<START_MOD>java.lang.String fstype() { if ((fstypeAsString) == null) fstypeAsString = new java.lang.String(fstype); return fstypeAsString; }<END_MOD>
public void run() { <START_MOD>java.lang.System.out.println( TASK <END_MOD>task.run(); <START_MOD>java.lang.System.out.println( TASK <END_MOD>}
private static java.lang.String parseWpaOneElement(android.net.wifi.ScanResult.InformationElement ie) { java.nio.ByteBuffer buf = java.nio.ByteBuffer.wrap(ie.bytes).order(java.nio.ByteOrder.LITTLE_ENDIAN); try { buf.getInt(); java.lang.String security = "[WPA"; if ((buf.getShort()) != (com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_VENDOR_OUI_VERSION)) { return null; } <START_MOD>security += "-GROUP_" + (com.android.server.wifi.util.InformationElementUtil.Capabilities.wpaCipherToString(<END_MOD>buf.getInt()<START_MOD>))<END_MOD>; short cipherCount = buf.getShort(); for (int i = 0; i < cipherCount; i++) { <START_MOD>security += (i == 0) ? "-" : "+"; security += "PAIRWISE_" + (com.android.server.wifi.util.InformationElementUtil.Capabilities.wpaCipherToString(<END_MOD>buf.getInt(<START_MOD>))<END_MOD>); } short akmCount = buf.getShort(); if (akmCount == 0) { security += "-EAP"; } boolean found = false; for (int i = 0; i < akmCount; i++) { int akm = buf.getInt(); switch (akm) { case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_AKM_EAP : security += (found ? "+" : "-") + "EAP"; found = true; break; case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_AKM_PSK : security += (found ? "+" : "-") + "PSK"; found = true; break; default : break; } } security += "]"; return security; } catch (java.nio.BufferUnderflowException e) { android.util.Log.e("IE_Capabilities",   parse type 1 WPA, buffer underflow return null; } }
@java.lang.Override protected org.junit.runners.model.Statement methodInvoker(org.junit.runners.model.FrameworkMethod method, java.lang.Object test) { <START_MOD>if<END_MOD> (method <START_MOD>instanceof junitparams.internal.InvokableFrameworkMethod) { return ((junitparams.internal.InvokableFrameworkMethod) (method)).getInvokeStatement(<END_MOD>test); <START_MOD>} else { throw new java.lang.IllegalStateException((( FrameworkMethod class:   +<END_MOD> (<START_MOD>method.getClass())<END_MOD>) <START_MOD>+<END_MOD>   <START_MOD>expected<END_MOD> <START_MOD>an<END_MOD> <START_MOD>InvokableFrameworkMethod subclass<END_MOD> }<START_MOD> }<END_MOD>
@org.junit.Test public void testLambdaNestingInMultipleMixedAnonymousCaptureLocal_withInterference() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_44).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
public void listen(java.io.FileDescriptor fd, int backlog) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
private android.util.Pair<java.lang.ref.WeakReference<com.android.services.telephony.TelephonyConnection>, java.util.List<com.android.internal.telephony.Phone>> makeCachedConnectionPhonePair(com.android.services.telephony.TelephonyConnection c) { java.util.List<com.android.internal.telephony.Phone> phones = new java.util.ArrayList(<START_MOD>android.telephony.TelephonyManager.getDefault().getPhoneCount()); for (com.android.internal.telephony.Phone phone : <END_MOD>com.android.internal.telephony.PhoneFactory.getPhones())<START_MOD> { if ((mIsPermDiscCauseReceived[phone.getPhoneId()]) == false) { phones.add(phone<END_MOD>); <START_MOD>} } <END_MOD>return new android.util.Pair(new java.lang.ref.WeakReference(c), phones); }
<START_MOD>@javax.annotation.Nonnull public java.lang.String getNewSignature(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodId id) { return newMethodSignatures.get(id); }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<com.android.sched.util.codec.PairCodec.Pair<java.lang.String, java.util.logging.Level>> getLevels() { java.util.List<com.android.sched.util.codec.PairCodec.Pair<java.lang.String, java.util.logging.Level>> setup = new java.util.ArrayList<com.android.sched.util.codec.PairCodec.Pair<java.lang.String, java.util.logging.Level>>(); setup.add(new com.android.sched.util.codec.PairCodec.Pair<java.lang.String, java.util.logging.Level>("", java.util.logging.Level.WARNING)); return setup; }<END_MOD>
public static int toLowerCase(int codePoint) {<START_MOD> if ((codePoint >= 'A') && (codePoint <= 'Z')) { return codePoint + ('a' - 'A'); } if (codePoint <= 128) { return codePoint; }<END_MOD> return java.lang.Character.toLowerCaseImpl(codePoint); }
@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, (<START_MOD>(("[ImsPhoneCallTracker][" + (mPhone.getPhoneId())) +  <END_MOD>   + msg)); }
public void addU32(android.support.v8.renderscript.Long4 v) { if (shouldThunk()) { mN.addU32(new android.renderscript.Long4(v.x, v.y, v.z, v.w)); return; } addU32(v.x); addU32(v.y); addU32(v.z); addU32(v.w); }
@org.junit.Test public void testCompile017() throws java.lang.Exception { java.lang.String packageName = "com.android.jack.switchstatement.test017.jack"; java.lang.String classPrefix = (packageName.replace('.', '-')) + "-"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> <START_MOD>input1<END_MOD> = com.google.common.collect.Maps.newHashMap(); { <START_MOD>input1<END_MOD>.put("Enum1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), false)); <START_MOD>input1.put("Enum1$Enum1_", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), false)); input1<END_MOD>.put("Enum1$Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), true)); } <START_MOD>java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input2 = com.google.common.collect.Maps.newHashMap(); { input2.put("Enum1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), false)); input2.put("Enum1$Enum1_", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), false)); input2.put("Enum1$Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), true)); } compileCode<END_MOD>(packageName, <START_MOD>input1, input2<END_MOD>); }
<START_MOD>@java.lang.Override public final int hashCode() { return ((((((versionName.hashCode()) ^ (releaseName.hashCode())) ^ ((releaseCode) << 16)) ^ (subReleaseCode)) ^ (subReleaseKind.hashCode())) ^ ((buildId) != null ? buildId.hashCode() : 0)) ^ ((codeBase) != null ? codeBase.hashCode() : 0); }<END_MOD>
<START_MOD>private void on_ButtonDelete_widgetSelected(org.eclipse.swt.events.SelectionEvent e) { mChanged = true; }<END_MOD>
static java.math.BigInt gcd(java.math.BigInt a, java.math.BigInt b) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_gcd(r.<START_MOD>nativePtr<END_MOD>, a.<START_MOD>nativePtr<END_MOD>, b.<START_MOD>nativePtr<END_MOD>); return r; }