public void testInterfaceCountersUdp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1000, false); }
@java.lang.Override public void addMarker(@javax.annotation.Nonnull com.android.sched.marker.Marker marker) { assert isValidMarker(marker.getClass()) : ((("Marker '" + (com.android.sched.item.Items.getName(marker.getClass()))) + "' is not supported for class '") + (this.getClass().getName())) + "'"; if ((markers) == null) { markers = new java.util.concurrent.ConcurrentHashMap<java.lang.Class<? extends com.android.sched.marker.Marker>, com.android.sched.marker.Marker>(); } assert (markers.get(marker.getClass())) == null : ("Marker '" + (com.android.sched.item.Items.getName(marker.getClass()))) + "' already exists"; markers.put(marker.getClass(), marker); }
public void saveSendingFileInfo(java.lang.String mimeType, java.lang.String uriString, boolean isHandover) throws java.lang.IllegalArgumentException { synchronized(this) { mMultipleFlag = false; mMimeTypeOfSendingFile = mimeType; mUriOfSendingFile = uriString; mIsHandoverInitiated = isHandover; android.net.Uri uri = android.net.Uri.parse(uriString); com.android.bluetooth.opp.BluetoothOppUtility.putSendFileInfo(uri, com.android.bluetooth.opp.BluetoothOppSendFileInfo.generateFileInfo(mContext, uri, mimeType)); storeApplicationData(); } }
@java.lang.Override public void onRestoreInstanceState(android.os.Bundle savedInstanceState) { if (savedInstanceState != null) { super.onRestoreInstanceState(savedInstanceState); com.android.settings.wifi.WpsDialog.DialogState dialogState = mDialogState.valueOf(savedInstanceState.getString(com.android.settings.wifi.WpsDialog.DIALOG_STATE)); java.lang.String msg = savedInstanceState.getString(com.android.settings.wifi.WpsDialog.DIALOG_MSG_STRING); updateDialog(dialogState, msg); } }
@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter printer) { if ((mState) != (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) return; if (printer.getId(mPrintService).equals(mPrintJob.getInfo().getPrinterId())) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ((("onPrinterFound() " + (printer.name)) + " state=") + (mState))); mPath = printer.path; mPrintService.getCapabilitiesCache().request(printer, true, this::handleCapabilities); mPrintService.getDiscovery().stop(this); } }

public void testXmlApi1() throws java.lang.Exception { assertEquals(("colors.xml:9: Error: @android:color/holo_red_light requires API level 14 (current min is 1)\n" + (((((("layout.xml:15: Error: View requires API level 11 (current min is 1): <CalendarView>\n" + "layout.xml:21: Error: View requires API level 14 (current min is 1): <GridLayout>\n") + "layout.xml:22: Error: @android:attr/actionBarSplitStyle requires API level 14 (current min is 1)\n") + "layout.xml:23: Error: @android:color/holo_red_light requires API level 14 (current min is 1)\n") + "layout.xml:4: Error: \"match_parent\" requires API level 8 (current min is 1), use \"fill_parent\" instead\n") + "layout.xml:9: Error: View requires API level 5 (current min is 1): <QuickContactBadge>\n") + "themes.xml:9: Error: @android:color/holo_red_light requires API level 14 (current min is 1)")), lintProject("apicheck/minsdk1.xml=>AndroidManifest.xml", "apicheck/layout.xml=>res/layout/layout.xml", "apicheck/themes.xml=>res/values/themes.xml", "apicheck/themes.xml=>res/color/colors.xml")); }
public void iccTransmitApduLogicalChannel(int channel, int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { mCi.iccTransmitApduLogicalChannel(channel, cla, command, p1, p2, p3, data, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_TRANSMIT_APDU_LOGICAL_CHANNEL_DONE, response)); }
private static java.lang.String escapeString(java.lang.String s, boolean utf8) { boolean asciiOnly = true; for (int n = 0; n < (s.length()); n++) { char ch = s.charAt(n); if (ch > 127) { asciiOnly = false; break; } } if (asciiOnly) { return ('"' + s) + '"'; } else { byte[] octets = s.getBytes((utf8 ? java.nio.charset.StandardCharsets.UTF_8 : java.nio.charset.StandardCharsets.ISO_8859_1)); java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (byte octet : octets) { sb.append(java.lang.String.format("%02x", (octet & (com.android.server.wifi.anqp.Constants.BYTE_MASK)))); } return sb.toString(); } }


void dump(java.io.FileDescriptor fd, com.android.internal.util.IndentingPrintWriter pw, java.lang.String[] args) { try { postAndWaitForRunnable(() -> { pw.println(("Network Requested: " + (mNetworkRequested))); if (isTrackingInterface()) { pw.println(("Tracking interface: " + (mIface))); pw.increaseIndent(); pw.println(("MAC address: " + (mHwAddr))); pw.println(("Link state: " + (mLinkUp ? "up" : "down"))); pw.decreaseIndent(); } else { pw.println("Not tracking any interface"); } pw.println(); pw.println(("NetworkInfo: " + (mNetworkInfo))); pw.println(("LinkProperties: " + (mLinkProperties))); pw.println(("NetworkAgent: " + (mNetworkAgent))); if ((mIpManager) != null) { pw.println("IpManager:"); pw.increaseIndent(); mIpManager.dump(fd, pw, args); pw.decreaseIndent(); } }); } catch (java.lang.InterruptedException e) { throw new java.lang.IllegalStateException("dump() interrupted"); } }
private android.net.IpSecTransform activate() throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { synchronized(this) { try { android.net.IIpSecService svc = getIpSecService(); android.net.IpSecTransformResponse result = svc.createTransportModeTransform(mConfig, new android.os.Binder()); int status = result.status; checkResultStatus(status); mResourceId = result.resourceId; startKeepalive(mContext); android.util.Log.d(android.net.IpSecTransform.TAG, ("Added Transform with Id " + (mResourceId))); mCloseGuard.open("build"); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } } return this; }
public void testInstall_withWorkingDir() throws java.lang.Exception { java.io.File workingDir = installer.getWorkingDir(); assertTrue(workingDir.mkdir()); libcore.tzdata.update2.TimeZoneBundleInstallerTest.createFile(new java.io.File(workingDir, "myFile"), new byte[]{ 'a' }); libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundle(libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION, "001"); assertTrue(installer.install(bundle.getBytes())); assertBundleInstalled(bundle); }
private boolean sendDeviceListMonitoringRequest() throws java.io.IOException { byte[] request = com.android.ddmlib.AdbHelper.formAdbRequest("host:track-devices"); if ((com.android.ddmlib.AdbHelper.write(mMainAdbConnection, request)) == false) { com.android.ddmlib.Log.e("DeviceMonitor", "Sending Tracking request failed!"); mMainAdbConnection.close(); throw new java.io.IOException("Sending Tracking request failed!"); } com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse(mMainAdbConnection, false); if ((resp.ioSuccess) == false) { com.android.ddmlib.Log.e("DeviceMonitor", "Failed to read the adb response!"); mMainAdbConnection.close(); throw new java.io.IOException("Failed to read the adb response!"); } if ((resp.okay) == false) { com.android.ddmlib.Log.e("DeviceMonitor", ("adb refused request: " + (resp.message))); } return resp.okay; }



private void checkNotFreed() { if (freed) { throw new java.lang.IllegalStateException("buffer was freed"); } }
@org.gradle.api.tasks.TaskAction protected void doFullTaskAction() { final java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("resources-${getOutputBaseName()}-(.*).ap_"); com.android.build.gradle.tasks.List<java.lang.String> unprocessedSplits = new com.android.build.gradle.tasks.ArrayList(splits); for (com.android.build.gradle.tasks.File file : inputFiles) { java.util.regex.Matcher matcher = pattern.matcher(file.getName()); if ((matcher.matches()) && (isAbiSplit(file.getName()))) { java.lang.String apkName = getApkName(matcher.group(1)); com.android.build.gradle.tasks.File outFile = new com.android.build.gradle.tasks.File(getOutputDirectory(), apkName); getBuilder().packageApk(file.absolutePath, null, null, com.google.common.collect.ImmutableList.of(), null, getJniFolders(), getMergingFolder(), com.google.common.collect.ImmutableSet.of(matcher.group(1)), getJniDebuggable(), getSigningConfig(), getPackagingOptions(), getPackagingOptionsFilter(), outFile.absolutePath); unprocessedSplits.remove(matcher.group(1)); } } if (!(unprocessedSplits.isEmpty())) { java.lang.String message = java.lang.String.format("Could not find resource package for %1$s", com.google.common.base.Joiner.on(',').join(unprocessedSplits)); logger.error(message); throw new java.lang.IllegalStateException(message); } }


public final boolean isAccessModeSupported(java.lang.invoke.VarHandle.AccessMode accessMode) { unsupported(); return false; }
private int parsePinPukErrorResult(android.os.AsyncResult ar) { int[] result = ((int[]) (ar.result)); if (result == null) { return -1; } else { int length = result.length; int attemptsRemaining = -1; if (length > 0) { attemptsRemaining = result[0]; } log(("parsePinPukErrorResult: attemptsRemaining=" + attemptsRemaining)); return attemptsRemaining; } }
public static java.lang.String getSignatureAttribute(java.lang.Object obj) { java.lang.reflect.Method method; try { java.lang.Class c = java.lang.Class.forName("libcore.reflect.AnnotationAccess"); method = c.getDeclaredMethod("getSignature", java.lang.reflect.AnnotatedElement.class); method.setAccessible(true); } catch (java.lang.Exception ex) { ex.printStackTrace(); return "<unknown>"; } try { return ((java.lang.String) (method.invoke(null, obj))); } catch (java.lang.IllegalAccessException ex) { throw new java.lang.RuntimeException(ex); } catch (java.lang.reflect.InvocationTargetException ex) { throw new java.lang.RuntimeException(ex); } }

@java.lang.Override public void binderDied() { mImsService = null; mUt = null; mConfig = null; mEcbm = null; mMultiEndpoint = null; if ((mContext) != null) { android.content.Intent intent = new android.content.Intent(com.android.ims.ImsManager.ACTION_IMS_SERVICE_DOWN); intent.putExtra(com.android.ims.ImsManager.EXTRA_PHONE_ID, mPhoneId); mContext.sendBroadcast(new android.content.Intent(intent)); } }
public void testVFE7() { try { java.lang.Class.forName("dot.junit.opcodes.iget_wide.d.T_iget_wide_12"); fail("expected a verification exception"); } catch (java.lang.Throwable t) { dot.junit.DxUtil.checkVerifyException(t); } }
public native void bind(java.io.FileDescriptor fd, java.net.InetAddress address, int port) throws android.system.ErrnoException, java.net.SocketException;
public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object object) { if (!(object instanceof java.lang.Number)) { throw new java.lang.IllegalArgumentException(); } java.lang.Number number = ((java.lang.Number) (object)); libcore.icu.NativeDecimalFormat.FieldPositionIterator fpIter = new libcore.icu.NativeDecimalFormat.FieldPositionIterator(); java.lang.String text; if ((number instanceof java.math.BigInteger) || (number instanceof java.math.BigDecimal)) { text = new java.lang.String(libcore.icu.NativeDecimalFormat.formatDigitList(this.address, number.toString(), fpIter)); } else if ((number instanceof java.lang.Double) || (number instanceof java.lang.Float)) { double dv = number.doubleValue(); text = new java.lang.String(libcore.icu.NativeDecimalFormat.formatDouble(this.address, dv, fpIter)); } else { long lv = number.longValue(); text = new java.lang.String(libcore.icu.NativeDecimalFormat.formatLong(this.address, lv, fpIter)); } java.text.AttributedString as = new java.text.AttributedString(text); while (fpIter.next()) { java.text.Format.Field field = fpIter.field(); as.addAttribute(field, field, fpIter.start(), fpIter.limit()); } return as.getIterator(); }
public android.net.wifi.IApInterface setupDriverForSoftApMode() { android.net.wifi.IApInterface apInterface = mWificondControl.setupDriverForSoftApMode(); if (!(startHal(false))) { android.util.Log.e(com.android.server.wifi.WifiNative.TAG, "Failed to start HAL for AP mode"); } return apInterface; }
private static native void native_drawRect(int nativeCanvas, android.graphics.RectF rect, int paint);
private void grantDefaultPermissionExceptions(int userId) { synchronized(mService.mPackages) { mHandler.removeMessages(com.android.server.pm.DefaultPermissionGrantPolicy.MSG_READ_DEFAULT_PERMISSION_EXCEPTIONS); if ((mGrantExceptions) == null) { mGrantExceptions = readDefaultPermissionExceptionsLPw(); } java.util.Set<java.lang.String> permissions = null; final int exceptionCount = mGrantExceptions.size(); for (int i = 0; i < exceptionCount; i++) { java.lang.String packageName = mGrantExceptions.keyAt(i); android.content.pm.PackageParser.Package pkg = getSystemPackageLPr(packageName); java.util.List<com.android.server.pm.DefaultPermissionGrantPolicy.DefaultPermissionGrant> permissionGrants = mGrantExceptions.valueAt(i); final int permissionGrantCount = permissionGrants.size(); for (int j = 0; j < permissionGrantCount; j++) { com.android.server.pm.DefaultPermissionGrantPolicy.DefaultPermissionGrant permissionGrant = permissionGrants.get(j); if (permissions == null) { permissions = new android.util.ArraySet(); } else { permissions.clear(); } permissions.add(permissionGrant.name); grantRuntimePermissionsLPw(pkg, permissions, false, permissionGrant.fixed, userId); } } } }



@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((((((((("SignalStrength:" + " ") + (mGsmSignalStrength)) + " ") + (mGsmBitErrorRate)) + " ") + (mCdmaDbm)) + " ") + (mCdmaEcio)) + " ") + (mEvdoDbm)) + " ") + (mEvdoEcio)) + " ") + (mEvdoSnr)) + " ") + (mLteSignalStrength)) + " ") + (mLteRsrp)) + " ") + (mLteRsrq)) + " ") + (mLteRssnr)) + " ") + (mLteCqi)) + " ") + (mTdScdmaRscp)) + " ") + (isGsm ? "gsm|lte" : "cdma"); }


@java.lang.Override @javax.annotation.Nonnull public com.android.sched.util.config.MessageDigestFactory parseString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) { return new com.android.sched.util.config.MessageDigestFactory(codec.parseString(context, string)); }
public void testCancelSoon() throws java.lang.Exception { doTestDragAndDrop(android.wm.cts.CrossAppDragAndDropTests.CANCEL_SOON, android.wm.cts.CrossAppDragAndDropTests.REQUEST_NONE, null); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DRAG_STARTED, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_EXTRAS, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); }


@org.junit.Test public void retroLambdaDefaultMethodsTest002() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_002); }
@org.junit.Test public void retroLambdaDefaultMethodsTest019() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_019).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
public java.lang.String getDeviceSoftwareVersion(int slotIndex) { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony == null) return null; try { return telephony.getDeviceSoftwareVersionForSlot(slotIndex, getOpPackageName()); } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } }

@java.lang.Override public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); return os.sendfile(outFd, inFd, inOffset, byteCount); }
@java.lang.Override protected java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec keySpec) throws java.security.spec.InvalidKeySpecException { if (keySpec instanceof java.security.spec.RSAPublicKeySpec) { java.security.spec.RSAPublicKeySpec rsaKeySpec = ((java.security.spec.RSAPublicKeySpec) (keySpec)); return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPublicKey(rsaKeySpec); } else if (keySpec instanceof java.security.spec.X509EncodedKeySpec) { java.security.spec.X509EncodedKeySpec x509KeySpec = ((java.security.spec.X509EncodedKeySpec) (keySpec)); try { final org.apache.harmony.xnet.provider.jsse.OpenSSLKey key = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_PUBKEY(x509KeySpec.getEncoded())); return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPublicKey(key); } catch (java.lang.Exception e) { throw new java.security.spec.InvalidKeySpecException(e); } } throw new java.security.spec.InvalidKeySpecException(("Must use RSAPublicKeySpec or X509EncodedKeySpec; was " + (keySpec.getClass().getName()))); }
void increment(int imp) { imp = (imp < 0) ? 0 : imp > (com.android.server.notification.NotificationUsageStats.ImportanceHistogram.NUM_IMPORTANCES) ? com.android.server.notification.NotificationUsageStats.ImportanceHistogram.NUM_IMPORTANCES : imp; (mCount[imp])++; }

private synchronized void initializeAccessControl() { synchronized(mLock) { if ((mAccessControlEnforcer) == null) { mAccessControlEnforcer = new com.android.se.security.AccessControlEnforcer(this); } mAccessControlEnforcer.initialize(true); } }
public void test_empty_NaN() throws java.lang.Exception { java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(); dfs.setNaN(""); java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setDecimalFormatSymbols(dfs); df.format(java.lang.Double.NaN); }
public static int floatConditionNotEqualOne(float f) { return (f > 42.0F) == true ? 13 : 54; }
public int waitpid(int pid, libcore.util.MutableInt status, int options) throws libcore.io.ErrnoException { return os.waitpid(pid, status, options); }

public int getCarrierPrivilegeStatus(android.content.pm.PackageManager packageManager, java.lang.String packageName) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : carrierPrivilegeRules.getCarrierPrivilegeStatus(packageManager, packageName); }
private native int preadBytes(java.io.FileDescriptor fd, java.lang.Object buffer, int bufferOffset, int byteCount, long offset) throws java.io.InterruptedIOException, libcore.io.ErrnoException;

@org.junit.Test public void cmpl_double() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(CMPL_DOUBLE).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }
public void testAesCbcHmacMd5Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
static java.math.BigInt modulus(java.math.BigInt a, java.math.BigInt m) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_nnmod(r.bignum, a.bignum, m.bignum); return r; }


private void reconstitutionPut(java.util.Hashtable.HashtableEntry<K, V>[] tab, K key, V value) throws java.io.StreamCorruptedException { if (value == null) { throw new java.io.StreamCorruptedException(); } int hash = hash(key); int index = (hash & 2147483647) % (tab.length); for (java.util.Hashtable.HashtableEntry<K, V> e = tab[index]; e != null; e = e.next) { if (((e.hash) == hash) && (e.key.equals(key))) { throw new java.io.StreamCorruptedException(); } } java.util.Hashtable.HashtableEntry<K, V> e = tab[index]; tab[index] = new java.util.Hashtable.HashtableEntry<>(hash, key, value, e); (count)++; }
@java.lang.Override public java.lang.String insnCommentString(com.android.jack.dx.dex.code.DalvInsn insn, boolean noteIndices) { if (noteIndices) { java.lang.StringBuilder sb = new java.lang.StringBuilder(20); sb.append(insnCommentCstWithIndex(((com.android.jack.dx.dex.code.DualCstInsn) (insn)).getFirstConstant(), ((com.android.jack.dx.dex.code.DualCstInsn) (insn)).getFirstIndex())); sb.append(", "); sb.append(insnCommentCstWithIndex(((com.android.jack.dx.dex.code.DualCstInsn) (insn)).getSecondConstant(), ((com.android.jack.dx.dex.code.DualCstInsn) (insn)).getSecondIndex())); return sb.toString(); } else { return ""; } }
public static void process(@javax.annotation.Nonnull com.android.jill.Options options) { java.io.File binaryFile = options.getBinaryFile(); com.android.jill.frontend.java.JavaTransformer jt = new com.android.jill.frontend.java.JavaTransformer(com.android.jill.Jill.getVersion().getVersion(), options); if (binaryFile.isFile()) { if (com.android.jill.utils.FileUtils.isJavaBinaryFile(binaryFile)) { java.util.List<java.io.File> javaBinaryFiles = new java.util.ArrayList<java.io.File>(); javaBinaryFiles.add(binaryFile); jt.transform(javaBinaryFiles); } else if (com.android.jill.utils.FileUtils.isJarFile(binaryFile)) { try { jt.transform(new java.util.jar.JarFile(binaryFile)); } catch (java.io.IOException e) { throw new com.android.jill.JillException(("Fails to create jar file " + (binaryFile.getName())), e); } } else { throw new com.android.jill.JillException(("Unsupported file type: " + (binaryFile.getName()))); } } else { java.util.List<java.io.File> javaBinaryFiles = new java.util.ArrayList<java.io.File>(); com.android.jill.utils.FileUtils.getJavaBinaryFiles(binaryFile, javaBinaryFiles); jt.transform(javaBinaryFiles); } }
void setAdvertiserId(int advertiserId) { this.advertiserId = advertiserId; }
@java.lang.Override public void enter() { if (!(configureIfaceIp(true))) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_IFACE_CFG_ERROR; transitionTo(mInitialState); return; } try { mNMService.tetherInterface(mIfaceName); } catch (java.lang.Exception e) { android.util.Log.e(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, ("Error Tethering: " + (e.toString()))); mLastError = android.net.ConnectivityManager.TETHER_ERROR_TETHER_IFACE_ERROR; transitionTo(mInitialState); return; } if (!(mIPv6TetherSvc.start())) { android.util.Log.e(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, "Failed to start IPv6TetheringInterfaceServices"); } if (com.android.server.connectivity.tethering.TetherInterfaceStateMachine.DBG) android.util.Log.d(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, ("Tethered " + (mIfaceName))); mTetherController.notifyInterfaceStateChange(mIfaceName, this, IControlsTethering.STATE_TETHERED, mLastError); }
public void test_isGroupingUsed() { assertFalse(new java.text.DecimalFormat("####.##").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("######.######").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("000000.000000").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("######.000000").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("000000.######").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(" ###.###").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("$#####.######").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("$$####.######").isGroupingUsed()); assertTrue(new java.text.DecimalFormat("###,####").isGroupingUsed()); }
@org.junit.Test public void testClassImplementsTwoInterfacesWithSameDefenderMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_34).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }
public static void main(java.lang.String[] argArray) throws java.io.IOException { com.android.dx.command.dexer.Main.Arguments arguments = new com.android.dx.command.dexer.Main.Arguments(); arguments.parse(argArray); int result = com.android.dx.command.dexer.Main.run(arguments); if (result != 0) { java.lang.System.exit(result); } }
java.util.List<com.android.ahat.Site> getChildren() { return new java.util.ArrayList<com.android.ahat.Site>(mChildren.values()); }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mContentResolver = new android.test.mock.MockContentResolver(mContext); mContentResolver.addProvider(Settings.AUTHORITY, new com.android.internal.util.test.FakeSettingsProvider()); when(mContext.getPackageName()).thenReturn("OffloadControllerTest"); when(mContext.getContentResolver()).thenReturn(mContentResolver); }
public final void testCreateDup() { com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ved = new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor("xml", "com.example.MyJavaClass"); com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode uiv = new com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode(ved); com.android.layoutlib.api.ViewInfo lvi = new com.android.layoutlib.api.ViewInfo("name", uiv, 10, 12, 110, 120); com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo cvi = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo(lvi); com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy1 = m.create(cvi); com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy2 = m.create(cvi); assertSame(proxy2, proxy1); }

@java.lang.Override public void rename(java.lang.String oldPath, java.lang.String newPath) throws libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.rename(oldPath, newPath); }
@java.lang.Override protected boolean stop() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "stop()"); } mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.SHUTDOWN).sendToTarget(); mHandlerThread.quitSafely(); if ((mContactChangeObserver) == null) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Avoid unregister when receiver it is not registered"); return true; } try { unregisterReceiver(mPbapReceiver); getContentResolver().unregisterContentObserver(mContactChangeObserver); mContactChangeObserver = null; } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Unable to unregister pbap receiver", e); } return true; }

private boolean fz(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_reduce s, int seed, int[] size) { final int inputLen = size[0]; int[] inputArray = createInputArrayInt(inputLen, (seed + 0)); inputArray[new java.util.Random((seed + 1)).nextInt(inputLen)] = 0; final long javaTimeStart = java.lang.System.currentTimeMillis(); final int javaResult = fz(inputArray); final long javaTimeEnd = java.lang.System.currentTimeMillis(); final long rsTimeStart = java.lang.System.currentTimeMillis(); com.android.rs.test.Allocation inputAllocation = com.android.rs.test.Allocation.createSized(RS, com.android.rs.test.Element.I32(RS), inputArray.length); final long copyTimeStart = java.lang.System.currentTimeMillis(); inputAllocation.copyFrom(inputArray); final long kernelTimeStart = java.lang.System.currentTimeMillis(); final int rsResult = s.reduce_fz(inputAllocation).get(); final long rsTimeEnd = java.lang.System.currentTimeMillis(); final boolean success = (inputArray[rsResult]) == 0; java.lang.String status = (success) ? "PASSED" : "FAILED"; if (success) status += " " + (com.android.rs.test.UT_reduce.timing.string(javaTimeStart, javaTimeEnd, rsTimeStart, copyTimeStart, kernelTimeStart, rsTimeEnd, inputAllocation)); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((((((((("fz: java input[" + javaResult) + "] == ") + (inputArray[javaResult])) + ", rs input[") + rsResult) + "] == ") + (inputArray[javaResult])) + ": ") + status)); inputAllocation.destroy(); return success; }

@java.lang.Override public void executeShellCommand(java.lang.String command, com.android.ddmlib.IShellOutputReceiver receiver, int maxTimeToOutputResponse) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.AdbHelper.executeRemoteCommand(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), command, this, receiver, maxTimeToOutputResponse); }
@java.lang.Override public void setLogicalToPhysicalSlotMapping(int[] physicalSlots, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { java.util.ArrayList<java.lang.Integer> mapping = new java.util.ArrayList<>(); for (int slot : physicalSlots) { mapping.add(new java.lang.Integer(slot)); } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_LOGICAL_TO_PHYSICAL_SLOT_MAPPING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setSimSlotsMapping(rr.mSerial, mapping); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setLogicalToPhysicalSlotMapping", e); } } } }

@org.junit.Test public void verifyNotificationDisplayed() throws java.lang.Exception { com.android.networkrecommendation.TestUtil.sendWifiStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_STATE_ENABLED); com.android.networkrecommendation.TestUtil.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.DISCONNECTED); setOpenAccessPoint(); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); verify(mNotificationManager, never()).notifyAsUser(any(java.lang.String.class), anyInt(), any(android.app.Notification.class), any(android.os.UserHandle.class)); com.android.networkrecommendation.TestUtil.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.SCANNING); com.android.networkrecommendation.TestUtil.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.DISCONNECTED); when(mContext.getResources()).thenReturn(mock(android.content.res.Resources.class)); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); verify(mNotificationManager).notifyAsUser(any(java.lang.String.class), anyInt(), any(android.app.Notification.class), any(android.os.UserHandle.class)); verify(mNotificationManager, never()).cancelAsUser(any(java.lang.String.class), anyInt(), any(android.os.UserHandle.class)); com.android.networkrecommendation.TestUtil.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.CONNECTED); verify(mNotificationManager).cancelAsUser(any(java.lang.String.class), anyInt(), any(android.os.UserHandle.class)); }

@android.test.suitebuilder.annotation.LargeTest public void testFlagIExistingE() { int iFlags = PackageManager.INSTALL_EXTERNAL; int rFlags = (PackageManager.INSTALL_INTERNAL) | (PackageManager.INSTALL_REPLACE_EXISTING); installFromRawResource("install.apk", R.raw.install, iFlags, false, false, (-1), (-1)); installFromRawResource("install.apk", R.raw.install, rFlags, true, false, (-1), (-1)); }


public void testDateTimeKeyListener() { final android.text.method.DateTimeKeyListener dateTimeKeyListener = android.text.method.DateTimeKeyListener.getInstance(); mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(dateTimeKeyListener); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); assertEquals("", mTextView.getText().toString()); mInstrumentation.sendStringSync("1"); assertEquals("1", mTextView.getText().toString()); mInstrumentation.sendStringSync("2"); assertEquals("12", mTextView.getText().toString()); mInstrumentation.sendStringSync("a"); assertEquals("12a", mTextView.getText().toString()); int keyCode = android.text.method.cts.TextMethodUtils.getUnacceptedKeyCode(DateTimeKeyListener.CHARACTERS); if ((-1) != keyCode) { sendKeys(keyCode); assertEquals("12a", mTextView.getText().toString()); } mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(null); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); assertEquals("12a", mTextView.getText().toString()); mInstrumentation.sendStringSync("1"); assertEquals("12a", mTextView.getText().toString()); }




private boolean installTest() throws com.android.tradefed.device.DeviceNotAvailableException { if (!(createRemoteDir(com.android.cts.tradefed.testtype.GeeTest.NATIVE_TESTS_DIRECTORY))) { com.android.tradefed.log.LogUtil.CLog.e(("Could not create directory for native tests: " + (com.android.cts.tradefed.testtype.GeeTest.NATIVE_TESTS_DIRECTORY))); return false; } java.io.File nativeExe = new java.io.File(mCtsBuild.getTestCasesDir(), mExeName); if (!(nativeExe.exists())) { com.android.tradefed.log.LogUtil.CLog.e(("Native test not found: " + nativeExe)); return false; } java.io.File devicePath = new java.io.File(com.android.cts.tradefed.testtype.GeeTest.NATIVE_TESTS_DIRECTORY, mExeName); if (!(mDevice.pushFile(nativeExe, devicePath.toString()))) { com.android.tradefed.log.LogUtil.CLog.e("Failed to push native test to device"); return false; } return true; }
void getTotalNumOfItems(byte[] bdaddr, byte scope, com.android.bluetooth.avrcp.MediaController mediaController) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ("getTotalNumOfItems scope = " + scope)); java.util.List<android.media.session.MediaSession.QueueItem> mNowPlayingItems = mNowPlayingListManager.getNowPlayingList(); if (mNowPlayingItems != null) { mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_NO_ERROR, 0, mNowPlayingItems.size()); } else if (mediaController == null) { android.util.Log.e(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, "mediaController is null"); mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_INTERNAL_ERR, 0, 0); } else { mNowPlayingItems = mediaController.getQueue(); if (mNowPlayingItems == null) { android.util.Log.e(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, "mNowPlayingItems is null"); mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_INV_ITEM, 0, 0); } else { mNowPlayingListManager.setNowPlayingList(mediaController.getQueue()); mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_NO_ERROR, 0, mNowPlayingItems.size()); } } }
public void testGetContentType() throws java.io.IOException { assertEquals("application/rtf", tests.api.internal.net.www.protocol.file.FileURLConnectionTest.getContentType("test.rtf")); assertEquals("text/plain", tests.api.internal.net.www.protocol.file.FileURLConnectionTest.getContentType("test.java")); assertEquals("application/msword", tests.api.internal.net.www.protocol.file.FileURLConnectionTest.getContentType("test.doc")); assertEquals("text/html", tests.api.internal.net.www.protocol.file.FileURLConnectionTest.getContentType("test.htx")); assertEquals("application/xml", tests.api.internal.net.www.protocol.file.FileURLConnectionTest.getContentType("test.xml")); assertEquals("text/plain", tests.api.internal.net.www.protocol.file.FileURLConnectionTest.getContentType(".")); }
synchronized boolean reportError(android.bluetooth.BluetoothDevice device, byte error) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.TAG, ((("reportError(): device=" + device) + " error=") + error)); if (!(checkDevice(device))) { return false; } return reportErrorNative(error); }
@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { super.widgetSelected(e); if (mProjectButton.getSelection()) { setListElements(mProjectResources.getResources(mResourceType)); } }
private static void verify(com.android.apksig.util.DataSource beforeApkSigningBlock, java.nio.ByteBuffer apkSignatureSchemeV2Block, com.android.apksig.util.DataSource centralDir, java.nio.ByteBuffer eocd, com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result result) throws java.io.IOException, java.security.NoSuchAlgorithmException { java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> contentDigestsToVerify = new java.util.HashSet<>(1); com.android.apksig.internal.apk.v2.V2SchemeVerifier.parseSigners(apkSignatureSchemeV2Block, contentDigestsToVerify, result); if (result.containsErrors()) { return; } com.android.apksig.internal.apk.v2.V2SchemeVerifier.verifyIntegrity(beforeApkSigningBlock, centralDir, eocd, contentDigestsToVerify, result); if (!(result.containsErrors())) { result.verified = true; } }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (!(o instanceof com.android.sdklib.devices.Hardware)) { return false; } com.android.sdklib.devices.Hardware hw = ((com.android.sdklib.devices.Hardware) (o)); return ((((((((((((((((mScreen.equals(hw.getScreen())) && (mNetworking.equals(hw.getNetworking()))) && (mSensors.equals(hw.getSensors()))) && ((mMic) == (hw.hasMic()))) && (mCameras.equals(hw.getCameras()))) && ((mKeyboard) == (hw.getKeyboard()))) && ((mNav) == (hw.getNav()))) && (mRam.equals(hw.getRam()))) && ((mButtons) == (hw.getButtonType()))) && (mInternalStorage.equals(hw.getInternalStorage()))) && (mRemovableStorage.equals(hw.getRemovableStorage()))) && (mCpu.equals(hw.getCpu()))) && (mGpu.equals(hw.getGpu()))) && (mAbis.equals(hw.getSupportedAbis()))) && (mUiModes.equals(hw.getSupportedUiModes()))) && ((mPluggedIn) == (hw.getChargeType()))) && ((((mSkinFile) != null) && (mSkinFile.equals(hw.getSkinFile()))) || (((mSkinFile) == null) && ((hw.getSkinFile()) == null))); }
public static void assertActualAndExpectedMatch(boolean actual, boolean expected) throws java.lang.AssertionError { if (actual != expected) { throw new java.lang.AssertionError((((("Actual != Expected (" + actual) + " != ") + expected) + ")")); } }
private static <T> void flushProtos(java.util.List<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent> out, android.util.SparseArray<T> in, java.util.function.Function<T, com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent> mapper) { for (int i = 0; i < (in.size()); i++) { out.add(mapper.apply(in.valueAt(i))); } in.clear(); }

private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType) { return sendRequestForNetwork(need, callback, getHandler(), timeoutMs, action, legacyType); }
static void freeNativeStorage(int nativeDataPtr) { java.lang.System.out.println(("freeNativeStorage: " + nativeDataPtr)); }
private synchronized com.android.utils.Pair<com.android.builder.internal.compiler.PreDexCache.Item, java.lang.Boolean> getItem(@com.android.annotations.NonNull java.io.File inputFile, @com.android.annotations.NonNull java.io.File outFile, @com.android.annotations.NonNull com.android.sdklib.BuildToolInfo buildToolInfo) throws java.io.IOException { com.android.builder.internal.compiler.PreDexCache.Key itemKey = com.android.builder.internal.compiler.PreDexCache.Key.of(inputFile, buildToolInfo.getRevision()); com.android.builder.internal.compiler.PreDexCache.Item item = mMap.get(itemKey); boolean newItem = item == null; if (item == null) { item = new com.android.builder.internal.compiler.PreDexCache.Item(inputFile, outFile, com.google.common.io.Files.hash(inputFile, com.google.common.hash.Hashing.sha1()), new java.util.concurrent.CountDownLatch(1)); mMap.put(itemKey, item); } return com.android.utils.Pair.of(item, newItem); }
public void testFileInputStream() throws java.lang.Exception { java.io.File f = new java.io.File("/proc/version"); recorder.clear(); java.io.FileInputStream fis = new java.io.FileInputStream(f); recorder.expectAndClear("onReadFromDisk"); fis.read(new byte[4], 0, 4); recorder.expectAndClear("onReadFromDisk"); fis.read(); recorder.expectAndClear("onReadFromDisk"); fis.skip(1); recorder.expectAndClear("onReadFromDisk"); fis.close(); }

public void unregisterListener() { if ((mTestSensorEventListener) == null) { android.util.Log.w(android.hardware.cts.helpers.TestSensorManager.LOG_TAG, "No listener registered, returning."); return; } mSensorManager.unregisterListener(mTestSensorEventListener, mEnvironment.getSensor()); mTestSensorEventListener.assertEventsReceivedInHandler(); mTestSensorEventListener = null; }
public static synchronized com.android.ddmlib.EmulatorConsole getConsole(com.android.ddmlib.IDevice d) { java.lang.Integer port = com.android.ddmlib.EmulatorConsole.getEmulatorPort(d.getSerialNumber()); if (port == null) { return null; } com.android.ddmlib.EmulatorConsole console = com.android.ddmlib.EmulatorConsole.sEmulators.get(port); if (console != null) { if (!(console.ping())) { com.android.ddmlib.EmulatorConsole.RemoveConsole(console.mPort); console = null; } } if (console == null) { console = new com.android.ddmlib.EmulatorConsole(port); if (console.start()) { com.android.ddmlib.EmulatorConsole.sEmulators.put(port, console); } else { console = null; } } return console; }



public void testSampleHprof() throws java.lang.Exception { java.io.File file = new java.io.File(java.lang.ClassLoader.getSystemResource("dialer.android-hprof").getFile()); mSnapshot = new com.android.tools.perflib.heap.analysis.HprofParser(new com.android.tools.perflib.heap.io.MemoryMappedFileBuffer(file)).parse(); mSnapshot.computeDominators(); assertEquals(42911, mSnapshot.getReachableInstances().size()); com.android.tools.perflib.heap.analysis.Instance instance = mSnapshot.findReference(-1326579808); assertEquals(Snapshot.SENTINEL_ROOT, instance.getImmediateDominator()); int appIndex = mSnapshot.getHeapIndex(mSnapshot.getHeap("app")); int zygoteIndex = mSnapshot.getHeapIndex(mSnapshot.getHeap("zygote")); com.android.tools.perflib.heap.analysis.ClassObj htmlParser = mSnapshot.findClass("android.text.Html$HtmlParser"); assertEquals(116492, htmlParser.getRetainedSize(zygoteIndex)); assertEquals(0, htmlParser.getRetainedSize(appIndex)); com.android.tools.perflib.heap.analysis.ClassObj activityThread = mSnapshot.findClass("android.app.ActivityThread"); assertEquals(813, activityThread.getRetainedSize(zygoteIndex)); assertEquals(576, activityThread.getRetainedSize(appIndex)); }

private android.content.pm.PackageInfo generatePackageInfoFromSettingsLPw(java.lang.String packageName, int flags, int userId) { if (!(com.android.server.pm.PackageManagerService.sUserManager.exists(userId))) return null; com.android.server.pm.PackageSetting ps = mSettings.mPackages.get(packageName); if (ps != null) { android.content.pm.PackageParser.Package pkg = ps.pkg; if (pkg == null) { if ((flags & (android.content.pm.PackageManager.GET_UNINSTALLED_PACKAGES)) == 0) { return null; } pkg = new android.content.pm.PackageParser.Package(packageName); pkg.applicationInfo.packageName = packageName; pkg.applicationInfo.flags = (ps.pkgFlags) | (android.content.pm.ApplicationInfo.FLAG_IS_DATA_ONLY); pkg.applicationInfo.publicSourceDir = ps.resourcePathString; pkg.applicationInfo.sourceDir = ps.codePathString; pkg.applicationInfo.dataDir = getDataPathForPackage(packageName, 0).getPath(); pkg.applicationInfo.nativeLibraryDir = ps.nativeLibraryPathString; } return generatePackageInfo(pkg, flags, userId); } return null; }

public boolean connect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("connect(): " + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { return false; } android.os.ParcelUuid[] featureUuids = device.getUuids(); if ((android.bluetooth.BluetoothUuid.containsAnyUuid(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_UUID)) && (!(android.bluetooth.BluetoothUuid.containsAllUuids(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_SINK_UUIDS)))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, "Remote does not have A2dp Sink UUID"); return false; } int connectionState = mStateMachine.getConnectionState(device); if ((connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) || (connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mStateMachine.sendMessage(A2dpStateMachine.CONNECT, device); return true; }

public android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(int subId, java.lang.String AID) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony != null) return telephony.iccOpenLogicalChannel(subId, AID); } catch (android.os.RemoteException ex) { } catch (java.lang.NullPointerException ex) { } return null; }
@java.lang.Override public int compareTo(com.android.server.net.NetworkStatsCollection.Key another) { int res = 0; if (((ident) != null) && ((another.ident) != null)) { res = ident.compareTo(another.ident); } if (res == 0) { res = java.lang.Integer.compare(uid, another.uid); } if (res == 0) { res = java.lang.Integer.compare(set, another.set); } if (res == 0) { res = java.lang.Integer.compare(tag, another.tag); } return res; }

public void seteuid(int euid) throws libcore.io.ErrnoException { os.seteuid(euid); }
@com.android.annotations.NonNull public java.util.List<java.lang.Integer> getFoundAndroidApis() { return foundAndroidApis; }
public static com.android.chimpchat.core.IChimpBackend createBackendByName(java.lang.String backendName) { if ("adb".equals(backendName)) { return new com.android.chimpchat.adb.AdbBackend(); } else if ("stub".equals(backendName)) { return new com.android.chimpchat.stub.StubBackend(); } else { return null; } }
@org.junit.Test public void testWificondNullWhenSwitchingToApMode() throws java.lang.Exception { when(mWifiInjector.makeWificond()).thenReturn(null); mWifiStateMachinePrime.enterSoftAPMode(); mLooper.dispatchNext(); assertEquals("SoftAPModeState", mWifiStateMachinePrime.getCurrentMode()); mLooper.dispatchNext(); assertEquals("SoftAPModeState", mWifiStateMachinePrime.getCurrentMode()); }



public static java.lang.String getProperty(java.lang.String name, java.lang.String defaultValue) { java.lang.System.checkPropertyName(name); return java.lang.System.getProperties().getProperty(name, defaultValue); }
public final void mergeUnsorted() { getSection(contentsOut).off = out.getPosition(); java.util.List<com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue> all = new java.util.ArrayList<com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue>(); all.addAll(readUnsortedValues(dexA, aIndexMap)); all.addAll(readUnsortedValues(dexB, bIndexMap)); java.util.Collections.sort(all); int outCount = 0; for (int i = 0; i < (all.size());) { com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue e1 = all.get((i++)); updateIndex(e1.offset, getIndexMap(e1.source), e1.index, (outCount - 1)); while ((i < (all.size())) && ((e1.compareTo(all.get(i))) == 0)) { com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue e2 = all.get((i++)); updateIndex(e2.offset, getIndexMap(e2.source), e2.index, (outCount - 1)); } write(e1.value); outCount++; } getSection(contentsOut).size = outCount; }
@java.lang.Override public void handle(com.android.ahat.Doc doc, com.android.ahat.Query query) throws java.io.IOException { int stackId = query.getInt("stack", 0); int depth = query.getInt("depth", 0); java.lang.String className = query.get("class", null); java.lang.String heapName = query.get("heap", null); com.android.ahat.Site site = mSnapshot.getSite(stackId, depth); java.util.List<com.android.tools.perflib.heap.Instance> insts = new java.util.ArrayList<com.android.tools.perflib.heap.Instance>(); for (com.android.tools.perflib.heap.Instance inst : site.getObjects()) { if (((heapName == null) || (inst.getHeap().getName().equals(heapName))) && ((className == null) || (com.android.ahat.AhatSnapshot.getClassName(inst.getClassObj()).equals(className)))) { insts.add(inst); } } java.util.Collections.sort(insts, com.android.ahat.Sort.defaultInstanceCompare(mSnapshot)); doc.title("Objects"); doc.table(new com.android.ahat.Column("Size", Column.Align.RIGHT), new com.android.ahat.Column("Heap"), new com.android.ahat.Column("Object")); for (com.android.tools.perflib.heap.Instance inst : insts) { doc.row(com.android.ahat.DocString.format("%,d", inst.getSize()), com.android.ahat.DocString.text(inst.getHeap().getName()), com.android.ahat.Value.render(inst)); } doc.end(); }
private void testChangeFontScale(java.lang.String activityName, boolean relaunch) throws java.lang.Exception { launchActivity(activityName); final java.lang.String[] waitForActivitiesVisible = new java.lang.String[]{ activityName }; mAmWmState.computeState(mDevice, waitForActivitiesVisible); setFontScale(1.0F); mAmWmState.computeState(mDevice, waitForActivitiesVisible); final int densityDpi = getGlobalDensityDpi(); for (float fontScale = 0.85F; fontScale <= 1.3F; fontScale += 0.15F) { final java.lang.String logSeparator = clearLogcat(); setFontScale(fontScale); mAmWmState.computeState(mDevice, waitForActivitiesVisible); assertRelaunchOrConfigChanged(activityName, (relaunch ? 1 : 0), (relaunch ? 0 : 1), logSeparator); assertExpectedFontPixelSize(activityName, android.server.cts.ActivityManagerConfigChangeTests.scaledPixelsToPixels(android.server.cts.ActivityManagerConfigChangeTests.EXPECTED_FONT_SIZE_SP, fontScale, densityDpi), logSeparator); } }

public boolean connect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("connect(): " + device)); } if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { return false; } if (!(android.bluetooth.BluetoothUuid.isUuidPresent(mAdapterService.getRemoteUuids(device), BluetoothUuid.AudioSink))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("Cannot connect to " + device) + " : Remote does not have A2DP Sink UUID")); return false; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getOrCreateStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("Cannot connect to " + device) + " : no state machine")); return false; } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; } }



@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return (((((equalsNetCapabilities(that)) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that))) && (equalsUids(that)); }
@org.gradle.model.Mutate public void storeNativeBinariesInAndroidBinary(org.gradle.platform.base.BinaryContainer binaries, org.gradle.platform.base.ComponentSpecContainer specs, @org.gradle.model.Path("android.ndk") com.android.build.gradle.managed.NdkConfig ndkConfig) { if (!(ndkConfig.getModuleName().isEmpty())) { final org.gradle.nativeplatform.NativeLibrarySpec library = specs.withType(org.gradle.nativeplatform.NativeLibrarySpec.class).get(ndkConfig.getModuleName()); binaries.withType(com.android.build.gradle.model.DefaultAndroidBinary.class, new org.gradle.api.Action<com.android.build.gradle.model.DefaultAndroidBinary>() { @java.lang.Override public void execute(com.android.build.gradle.model.DefaultAndroidBinary binary) { java.util.Collection<org.gradle.nativeplatform.SharedLibraryBinarySpec> nativeBinaries = com.android.build.gradle.model.NdkComponentModelPlugin.getNativeBinaries(library, binary.getBuildType(), binary.getProductFlavors()); binary.getNativeBinaries().addAll(nativeBinaries); } }); } }
public boolean startWpsRegistrar(java.lang.String bssidStr, java.lang.String pin) { return startWpsRegistrar(com.android.server.wifi.util.NativeUtil.macAddressToByteArray(bssidStr), pin); }
private void testForCaptivePortal() { new java.lang.Thread(new java.lang.Runnable() { public void run() { try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } java.net.HttpURLConnection urlConnection = null; int httpResponseCode = 500; try { urlConnection = ((java.net.HttpURLConnection) (mNetwork.openConnection(mUrl))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setConnectTimeout(com.android.captiveportallogin.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.captiveportallogin.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setUseCaches(false); if ((mUserAgent) != null) { urlConnection.setRequestProperty("User-Agent", mUserAgent); } java.lang.String requestHeader = urlConnection.getRequestProperties().toString(); urlConnection.getInputStream(); httpResponseCode = urlConnection.getResponseCode(); if (com.android.captiveportallogin.CaptivePortalLoginActivity.DBG) { android.util.Log.d(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, ((((((("probe at " + (mUrl)) + " ret=") + httpResponseCode) + " request=") + requestHeader) + " headers=") + (urlConnection.getHeaderFields()))); } } catch (java.io.IOException e) { } finally { if (urlConnection != null) urlConnection.disconnect(); } if (httpResponseCode == 204) { done(com.android.captiveportallogin.CaptivePortalLoginActivity.Result.DISMISSED); } } }).start(); }

@org.junit.Test public void neg_float() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(NEG_FLOAT).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }

@java.lang.Override public boolean equals(java.lang.Object other) { if ((this) == other) { return true; } if (!(other instanceof android.telephony.CellIdentityLte)) { return false; } android.telephony.CellIdentityLte o = ((android.telephony.CellIdentityLte) (other)); return ((((((mMcc) == (o.mMcc)) && ((mMnc) == (o.mMnc))) && ((mCi) == (o.mCi))) && ((mPci) == (o.mPci))) && ((mTac) == (o.mTac))) && ((mEarfcn) == (o.mEarfcn)); }
private void notifyInterfaceLinkStateChanged(java.lang.String iface, boolean up) { final int length = mObservers.beginBroadcast(); try { for (int i = 0; i < length; i++) { try { mObservers.getBroadcastItem(i).interfaceLinkStateChanged(iface, up); } catch (android.os.RemoteException | java.lang.RuntimeException e) { } } } finally { mObservers.finishBroadcast(); } }



@java.lang.Override public void onQueueChanged(java.util.List<android.media.session.MediaSession.QueueItem> queue) { if (queue == null) { android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, "onQueueChanged: received null queue"); return; } android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ("onQueueChanged: NowPlaying list changed, Queue Size = " + (queue.size()))); mHandler.sendEmptyMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NOW_PLAYING_CHANGED_RSP); }
@java.lang.Override public void hangup() throws com.android.internal.telephony.CallStateException { synchronized(com.android.internal.telephony.sip.SipPhone.class) { if (com.android.internal.telephony.sip.SipPhone.SipConnection.SCN_DBG) log(((((("hangup: conn=" + (mPeer.getUriString())) + ": ") + (mState)) + ": on phone ") + (getPhone().getPhoneName()))); if (!(mState.isAlive())) return; try { android.net.sip.SipAudioCall sipAudioCall = mSipAudioCall; if (sipAudioCall != null) { sipAudioCall.setListener(null); sipAudioCall.endCall(); } } catch (android.net.sip.SipException e) { throw new com.android.internal.telephony.CallStateException(("hangup(): " + e)); } finally { mAdapter.onCallEnded((((mState) == (Call.State.INCOMING)) || ((mState) == (Call.State.WAITING)) ? android.telephony.DisconnectCause.INCOMING_REJECTED : android.telephony.DisconnectCause.LOCAL)); } } }
public void resetSapProxy() { synchronized(mSapProxyLock) { mSapProxy = null; } }
private static boolean checkKeyPresence(com.android.manifmerger.MergingReport.Builder mergingReport, com.android.manifmerger.XmlElement xmlElement) { com.android.manifmerger.ManifestModel.NodeKeyResolver nodeKeyResolver = xmlElement.getType().getNodeKeyResolver(); if (((nodeKeyResolver.getKeyAttributeName()) != null) && (com.google.common.base.Strings.isNullOrEmpty(xmlElement.getKey()))) { mergingReport.addError(java.lang.String.format("Missing '%1$s' attribute on element %2$s at %3$s", nodeKeyResolver.getKeyAttributeName(), xmlElement.getId(), xmlElement.printPosition())); return false; } return true; }


@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession t) throws java.lang.Exception { try { com.android.jack.shrob.shrink.StructurePrinter.Visitor visitor = new com.android.jack.shrob.shrink.StructurePrinter.Visitor(); visitor.accept(t.getTypesToEmit()); } finally { stream.close(); } }
public boolean setPasskey(android.bluetooth.BluetoothDevice device, boolean accept, int len, byte[] passkey) { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, "setPasskey() - Not allowed for non-active user"); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.setPasskey(device, accept, len, passkey); }

@java.lang.Override public void run() { java.lang.Module module = com.intellij.openapi.module.ModuleManager.getInstance(project).findModuleByName(dialog.getModuleName()); com.intellij.facet.FacetManager facetManager = com.intellij.facet.FacetManager.getInstance(module); com.intellij.facet.ModifiableFacetModel model = facetManager.createModifiableModel(); try { com.intellij.facet.Facet facet = facetManager.createFacet(com.google.gct.idea.appengine.facet.AppEngineGradleFacet.getFacetType(), AppEngineGradleFacet.NAME, null); model.addFacet(facet); } finally { model.commit(); } }
public void reorient() { final int rot = mDisplay.getRotation(); for (int i = 0; i < 4; i++) { mRotatedViews[i].setVisibility(View.GONE); } mCurrentView = mRotatedViews[rot]; mCurrentView.setVisibility(View.VISIBLE); mDeadZone = ((com.android.systemui.statusbar.policy.DeadZone) (mCurrentView.findViewById(R.id.deadzone))); mBarTransitions.init(mVertical); setDisabledFlags(mDisabledFlags, true); setMenuVisibility(mShowMenu, true); if (com.android.systemui.statusbar.phone.NavigationBarView.DEBUG) { android.util.Log.d(com.android.systemui.statusbar.phone.NavigationBarView.TAG, ("reorient(): rot=" + (mDisplay.getRotation()))); } setNavigationIconHints(mNavigationIconHints, true); }

@java.lang.Override public void answer(java.lang.String callId) { mHandler.obtainMessage(android.telecom.ConnectionService.MSG_ANSWER, callId).sendToTarget(); }
@java.lang.Override public void interfaceRemoved(java.lang.String interfaze) { synchronized(this) { if ((interfaze.equals(mInterface)) && ((jniCheck(interfaze)) == 0)) { mStatusIntent = null; mVpnUsers = null; mConfig = null; mInterface = null; if ((mConnection) != null) { mContext.unbindService(mConnection); mConnection = null; agentDisconnect(); } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } } } }
@java.lang.Override public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add("name", mName).add("debuggable", mDebuggable).add("debugJniBuild", mDebugJniBuild).add("debugSigned", mDebugSigned).add("packageNameSuffix", mPackageNameSuffix).add("versionNameSuffix", mVersionNameSuffix).add("runProguard", mRunProguard).add("zipAlign", mZipAlign).omitNullValues().toString(); }


public void testAesCbcHmacSha1Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }



@java.lang.Override java.util.List<com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod>> getBuilderRequirements() { java.util.List<com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod>> builderRequirements = super.getBuilderRequirements(); com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod> brokenTestPredicate = com.android.internal.util.Predicates.not(new android.test.suitebuilder.annotation.HasAnnotation(dalvik.annotation.BrokenTest.class)); builderRequirements.add(brokenTestPredicate); if (!(singleTest)) { com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod> sideEffectPredicate = com.android.internal.util.Predicates.not(new android.test.suitebuilder.annotation.HasAnnotation(dalvik.annotation.SideEffect.class)); builderRequirements.add(sideEffectPredicate); } return builderRequirements; }
public static java.lang.CharSequence getRelativeDateTimeString(android.content.Context c, long time, long minResolution, long transitionResolution, int flags) { android.content.res.Resources r = android.content.res.Resources.getSystem(); long now = java.lang.System.currentTimeMillis(); long duration = java.lang.Math.abs((now - time)); if (transitionResolution > (android.text.format.DateUtils.WEEK_IN_MILLIS)) { transitionResolution = android.text.format.DateUtils.WEEK_IN_MILLIS; } else if (transitionResolution < (android.text.format.DateUtils.DAY_IN_MILLIS)) { transitionResolution = android.text.format.DateUtils.DAY_IN_MILLIS; } java.lang.CharSequence timeClause = android.text.format.DateUtils.formatDateRange(c, time, time, android.text.format.DateUtils.FORMAT_SHOW_TIME); java.lang.String result; if (duration < transitionResolution) { java.lang.CharSequence relativeClause = android.text.format.DateUtils.getRelativeTimeSpanString(time, now, minResolution, flags); result = r.getString(com.android.internal.R.string.relative_time, relativeClause, timeClause); } else { java.lang.CharSequence dateClause = android.text.format.DateUtils.getRelativeTimeSpanString(c, time, false); result = r.getString(com.android.internal.R.string.date_time, dateClause, timeClause); } return result; }







public void test_getDisplayCountry_8870289() throws java.lang.Exception { assertEquals("Hong Kong", new java.util.Locale("", "HK").getDisplayCountry(java.util.Locale.US)); assertEquals("Macau", new java.util.Locale("", "MO").getDisplayCountry(java.util.Locale.US)); assertEquals("Palestine", new java.util.Locale("", "PS").getDisplayCountry(java.util.Locale.US)); assertEquals("Cocos (Keeling) Islands", new java.util.Locale("", "CC").getDisplayCountry(java.util.Locale.US)); assertEquals("Congo (DRC)", new java.util.Locale("", "CD").getDisplayCountry(java.util.Locale.US)); assertEquals("Congo (Republic)", new java.util.Locale("", "CG").getDisplayCountry(java.util.Locale.US)); assertEquals("Falkland Islands (Islas Malvinas)", new java.util.Locale("", "FK").getDisplayCountry(java.util.Locale.US)); assertEquals("Macedonia (FYROM)", new java.util.Locale("", "MK").getDisplayCountry(java.util.Locale.US)); assertEquals("Myanmar (Burma)", new java.util.Locale("", "MM").getDisplayCountry(java.util.Locale.US)); assertEquals("Taiwan", new java.util.Locale("", "TW").getDisplayCountry(java.util.Locale.US)); }
private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, com.android.rs.test.Float2 javaResult, com.android.rs.test.Float2 rsResult) { final boolean success = ((javaResult.x) == (rsResult.x)) && ((javaResult.y) == (rsResult.y)); java.lang.String status = (success) ? "PASSED" : "FAILED"; if (success && (t != null)) status += " " + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((((((((((((testName + ": java (") + (javaResult.x)) + ", ") + (javaResult.y)) + ")") + ", rs (") + (rsResult.x)) + ", ") + (rsResult.y)) + ")") + ": ") + status)); return success; }
public static java.lang.String floatToDoubleToIntPrint(float value) { double d = ((double) (value)); int i = ((int) (d)); return (("d=" + d) + ", i=") + i; }
public void testFreed() { java.nio.ByteBuffer b = java.nio.ByteBuffer.allocateDirect(1); java.nio.NioUtils.freeDirectBuffer(b); assertFalse(b.isValid()); try { b.compact(); fail(); } catch (java.lang.IllegalStateException expected) { } try { b.duplicate(); fail(); } catch (java.lang.IllegalStateException expected) { } testFailForPutMethods(b); testFailForAsMethods(b); testFailForGetMethods(b); }
@android.test.suitebuilder.annotation.MediumTest public void testDeviceTreeCpuCurrent() throws java.lang.Exception { java.lang.String arch = java.lang.System.getProperty("os.arch"); java.lang.String[] osVersion = java.lang.System.getProperty("os.version").split("\\."); if (((!(arch.contains("arm"))) || ((java.lang.Integer.parseInt(osVersion[0])) < 2)) || (((java.lang.Integer.parseInt(osVersion[0])) == 3) && ((java.lang.Integer.parseInt(osVersion[1])) < 10))) return; final java.io.File f = new java.io.File("/proc/device-tree/cpus"); if (!(f.exists())) return; java.lang.String[] dir = f.list(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File pathname, java.lang.String name) { return (pathname.isDirectory()) && (name.matches("cpu@[0-9]+")); } }); for (java.lang.String cpuDir : dir) { java.io.File fCpu = new java.io.File((cpuDir + "/current")); assertTrue(f.canRead()); } }



private void processNoiceReductionEvent(int enable, android.bluetooth.BluetoothDevice device) { java.util.HashMap<java.lang.String, java.lang.Integer> audioParamNrec = mHeadsetAudioParam.get(device); if ((audioParamNrec != null) && (!(audioParamNrec.isEmpty()))) { if (enable == 1) { audioParamNrec.put("NREC", 1); } else { audioParamNrec.put("NREC", 0); } log(((("NREC value for device :" + device) + " is: ") + (audioParamNrec.get("NREC")))); } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "processNoiceReductionEvent: audioParamNrec is null "); } if ((((mActiveScoDevice) != null) && (mActiveScoDevice.equals(device))) && ((mAudioState) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED))) { setAudioParameters(device); } }
@javax.annotation.Nonnull public static com.android.jack.dx.rop.cst.CstMethodRef createMethodRef(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall methodCall) { com.android.jack.dx.rop.cst.CstType definingClass = com.android.jack.backend.dex.rop.RopHelper.getCstType(methodCall.getReceiverType()); java.lang.String signatureWithoutName = com.android.jack.backend.dex.rop.RopHelper.getMethodSignatureWithoutName(methodCall); com.android.jack.dx.rop.cst.CstNat nat = new com.android.jack.dx.rop.cst.CstNat(new com.android.jack.dx.rop.cst.CstString(methodCall.getMethodName()), new com.android.jack.dx.rop.cst.CstString(signatureWithoutName)); com.android.jack.dx.rop.cst.CstMethodRef methodRef = new com.android.jack.dx.rop.cst.CstMethodRef(definingClass, nat); return methodRef; }
public static void removeDeviceForward(com.android.ddmlib.IDevice device) { synchronized(com.android.hierarchyviewer.device.DeviceBridge.devicePortMap) { final java.lang.Integer localPort = com.android.hierarchyviewer.device.DeviceBridge.devicePortMap.get(device); if (localPort != null) { try { device.removeForward(localPort, Configuration.DEFAULT_SERVER_PORT); com.android.hierarchyviewer.device.DeviceBridge.devicePortMap.remove(device); } catch (com.android.ddmlib.TimeoutException e) { com.android.ddmlib.Log.e("hierarchy", ("Timeout removing port forwarding for " + device)); } catch (com.android.ddmlib.AdbCommandRejectedException e) { com.android.ddmlib.Log.e("hierarchy", java.lang.String.format("Adb rejected remove-forward command for device %1$s: %2$s", device, e.getMessage())); } catch (java.io.IOException e) { com.android.ddmlib.Log.e("hierarchy", java.lang.String.format("Failed to remove forward for device %1$s: %2$s", device, e.getMessage())); } } } }

@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(("com.android.jack.shrob.test" + testNumber)); java.io.File refFolder = new java.io.File(testFolder, "refsSeed"); java.io.File candidateOutputSeeds = com.android.jack.test.toolchain.AbstractTestTools.createTempFile("seeds", ".txt"); java.io.File refOutputSeeds = new java.io.File(refFolder, (("expected-" + flagNumber) + ".txt")); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File seedsFile = addOptionsToFlagsFile(new java.io.File(testFolder, ("proguard.flags" + flagNumber)), testFolder, (" -dontshrink -dontobfuscate -printseeds " + (candidateOutputSeeds.getAbsolutePath()))); toolchain.addProguardFlags(seedsFile); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, "jack")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorSeeds(refOutputSeeds, candidateOutputSeeds)); }




private synchronized com.android.bluetooth.avrcp.MediaController getCurrentMediaController() { com.android.bluetooth.avrcp.MediaController mediaController = null; if (((mMediaPlayerInfoList) == null) || (mMediaPlayerInfoList.isEmpty())) { android.util.Log.w(com.android.bluetooth.avrcp.Avrcp.TAG, " No available players , sending response back "); return mediaController; } if (!(isIdValid(mCurrAddrPlayerID))) { android.util.Log.w(com.android.bluetooth.avrcp.Avrcp.TAG, (((("CurrPlayerID is not yet set:" + (mCurrAddrPlayerID)) + ", PlayerList length=") + (mMediaPlayerInfoList.size())) + " , sending response back")); return mediaController; } mediaController = mMediaPlayerInfoList.get(((mCurrAddrPlayerID) - 1)).getMediaController(); if (mediaController != null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ("getCurrentMediaController: " + (mediaController.getPackageName()))); } return mediaController; }
@java.lang.Override public boolean getVolteProvisioned() throws android.os.RemoteException { return false; }

protected void setUp() throws java.lang.Exception { super.setUp(); this.channel1 = java.nio.channels.DatagramChannel.open(); this.channel2 = java.nio.channels.DatagramChannel.open(); int[] ports = tests.support.Support_PortManager.getNextPortsForUDP(5); this.localAddr1 = new java.net.InetSocketAddress("127.0.0.1", ports[0]); this.localAddr2 = new java.net.InetSocketAddress("127.0.0.1", ports[1]); this.datagramSocket1 = new java.net.DatagramSocket(ports[2]); this.datagramSocket2 = new java.net.DatagramSocket(ports[3]); testPort = ports[4]; }


@java.lang.Override public java.lang.String toString() { return (((((((((((((((((("NativeLibraryImpl{" + "name='") + (name)) + '\'') + ", toolchainName='") + (toolchainName)) + '\'') + ", cIncludeDirs=") + (cIncludeDirs)) + ", cppIncludeDirs=") + (cppIncludeDirs)) + ", cDefines=") + (cDefines)) + ", cppDefines=") + (cppDefines)) + ", cCompilerFlags=") + (cCompilerFlags)) + ", cppCompilerFlags=") + (cppCompilerFlags)) + '}'; }
private void fillList() { java.lang.String where = ("numeric=\"" + (android.os.SystemProperties.get(TelephonyProperties.PROPERTY_ICC_OPERATOR_NUMERIC, ""))) + "\""; android.database.Cursor cursor = getContentResolver().query(Telephony.Carriers.CONTENT_URI, new java.lang.String[]{ "_id", "name", "apn", "type" }, where, null, Telephony.Carriers.DEFAULT_SORT_ORDER); android.preference.PreferenceGroup apnList = ((android.preference.PreferenceGroup) (findPreference("apn_list"))); apnList.removeAll(); java.util.ArrayList<android.preference.Preference> mmsApnList = new java.util.ArrayList<android.preference.Preference>(); mSelectedKey = getSelectedApnKey(); cursor.moveToFirst(); while (!(cursor.isAfterLast())) { java.lang.String name = cursor.getString(com.android.settings.ApnSettings.NAME_INDEX); java.lang.String apn = cursor.getString(com.android.settings.ApnSettings.APN_INDEX); java.lang.String key = cursor.getString(com.android.settings.ApnSettings.ID_INDEX); java.lang.String type = cursor.getString(com.android.settings.ApnSettings.TYPES_INDEX); com.android.settings.ApnPreference pref = new com.android.settings.ApnPreference(this); pref.setKey(key); pref.setTitle(name); pref.setSummary(apn); pref.setPersistent(false); pref.setOnPreferenceChangeListener(this); boolean selectable = (type == null) || (!(type.equals("mms"))); pref.setSelectable(selectable); if (selectable) { if (((mSelectedKey) != null) && (mSelectedKey.equals(key))) { pref.setChecked(); } apnList.addPreference(pref); } else { mmsApnList.add(pref); } cursor.moveToNext(); } cursor.close(); for (android.preference.Preference preference : mmsApnList) { apnList.addPreference(preference); } }

@java.lang.Override public void hangupWaitingOrBackground(android.os.Message result) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND, result); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); mMetrics.writeRilHangup(mInstanceId, rr.mSerial, (-1)); send(rr); }
public static byte[] stringToUtf8Bytes(java.lang.String string) { int len = string.length(); byte[] bytes = new byte[len * 3]; int outAt = 0; for (int i = 0; i < len; i++) { char c = string.charAt(i); if ((c != 0) && (c < 128)) { bytes[outAt] = ((byte) (c)); outAt++; } else if (c < 2048) { bytes[outAt] = ((byte) (((c >> 6) & 31) | 192)); bytes[(outAt + 1)] = ((byte) ((c & 63) | 128)); outAt += 2; } else { bytes[outAt] = ((byte) (((c >> 12) & 15) | 224)); bytes[(outAt + 1)] = ((byte) (((c >> 6) & 63) | 128)); bytes[(outAt + 2)] = ((byte) ((c & 63) | 128)); outAt += 3; } } byte[] result = new byte[outAt]; java.lang.System.arraycopy(bytes, 0, result, 0, outAt); return result; }
public void logError(java.lang.String log) { synchronized(mLogText) { mLogText.append("=> ").append(log); } }
public void testWrongNegativeColumnIndex() { try { android.support.test.espresso.matcher.CursorMatchers.withRowInt((-1), android.support.test.espresso.matcher.CursorMatchersTest.INTEGER_VALUE_MATCHER).matches(cursor); fail("Expected IllegalArgumentException"); } catch (java.lang.IllegalArgumentException iae) { } }

@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { case EVENT_GET_IMS_SERVICE : try { getImsService(); } catch (com.android.ims.ImsException e) { android.telephony.Rlog.e(com.android.internal.telephony.TAG, ("setListeners: " + e)); retryGetImsService(); } break; default : super.handleMessage(msg); } }
com.android.server.ParcelFileDescriptor updateWallpaperBitmapLocked(java.lang.String name) { if (name == null) name = ""; try { if (!(com.android.server.WallpaperManagerService.WALLPAPER_DIR.exists())) { com.android.server.WallpaperManagerService.WALLPAPER_DIR.mkdir(); android.os.FileUtils.setPermissions(com.android.server.WallpaperManagerService.WALLPAPER_DIR.getPath(), (((android.os.FileUtils.S_IRWXU) | (android.os.FileUtils.S_IRWXG)) | (android.os.FileUtils.S_IXOTH)), (-1), (-1)); } com.android.server.ParcelFileDescriptor fd = com.android.server.ParcelFileDescriptor.open(com.android.server.WallpaperManagerService.WALLPAPER_FILE, ((MODE_CREATE) | (MODE_READ_WRITE))); mName = name; return fd; } catch (java.io.FileNotFoundException e) { android.util.Slog.w(com.android.server.WallpaperManagerService.TAG, "Error setting wallpaper", e); } return null; }
@java.lang.Override public void onCreate() { android.util.Log.i(com.android.phone.testapps.imstestapp.TestImsService.LOG_TAG, "TestImsService: onCreate"); mImsRegistration = com.android.phone.testapps.imstestapp.TestImsRegistrationImpl.getInstance(); mTestMmTelFeature = com.android.phone.testapps.imstestapp.TestMmTelFeatureImpl.getInstance(); mTestRcsFeature = new com.android.phone.testapps.imstestapp.TestRcsFeatureImpl(); com.android.phone.testapps.imstestapp.TestImsService.mInstance = this; }

@java.lang.Override public void interfaceRemoved(java.lang.String iface) { mHandler.post(() -> { if (stopTrackingInterface(iface)) { trackFirstAvailableInterface(); } }); }
public void mincore(long address, long byteCount, byte[] vector) throws android.system.ErrnoException;
public int waitpid(int pid, android.util.MutableInt status, int options) throws android.system.ErrnoException;
public boolean hasCarrierPrivilegeRules() { return ((mCarrierPrivilegeRules) != null) && (mCarrierPrivilegeRules.hasCarrierPrivilegeRules()); }

private void disableWifiIpServingLocked(int apState) { if (com.android.server.connectivity.Tethering.DBG) android.util.Log.d(com.android.server.connectivity.Tethering.TAG, ("Canceling WiFi tethering request - AP_STATE=" + apState)); for (int i = 0; i < (mTetherStates.size()); i++) { com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism = mTetherStates.valueAt(i).stateMachine; if ((tism.interfaceType()) == (android.net.ConnectivityManager.TETHERING_WIFI)) { tism.sendMessage(TetherInterfaceStateMachine.CMD_TETHER_UNREQUESTED); break; } } mWifiTetherRequested = false; }

public native long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException;
public void testGetExtendedKeyUsage() throws java.lang.Exception { assertNull(new tests.security.cert.X509Certificate2Test.MyX509Certificate().getExtendedKeyUsage()); java.security.cert.X509Certificate cert = generateCert(tests.security.cert.X509Certificate2Test.CERT_CORRECT); java.util.List<java.lang.String> l = cert.getExtendedKeyUsage(); assertNotNull(l); try { l.clear(); } catch (java.lang.UnsupportedOperationException expected) { } try { l.add("Test"); } catch (java.lang.UnsupportedOperationException expected) { } try { l.remove(0); } catch (java.lang.UnsupportedOperationException expected) { } }
private synchronized void checkAndSetNotification(android.net.NetworkInfo networkInfo, java.util.List<android.net.wifi.ScanResult> scanResults) { if (!(mNotificationEnabled)) return; if ((mWifiState) != (android.net.wifi.WifiManager.WIFI_STATE_ENABLED)) return; android.net.NetworkInfo.State state = NetworkInfo.State.DISCONNECTED; if (networkInfo != null) { state = networkInfo.getState(); } if ((state == (NetworkInfo.State.DISCONNECTED)) || (state == (NetworkInfo.State.UNKNOWN))) { if (scanResults != null) { int numOpenNetworks = 0; for (int i = (scanResults.size()) - 1; i >= 0; i--) { android.net.wifi.ScanResult scanResult = scanResults.get(i); if (((scanResult.capabilities) != null) && (scanResult.capabilities.equals("[ESS]"))) { numOpenNetworks++; } } if (numOpenNetworks > 0) { if ((++(mNumScansSinceNetworkStateChange)) >= (com.android.networkrecommendation.WifiNotificationController.NUM_SCANS_BEFORE_ACTUALLY_SCANNING)) { setNotificationVisible(true, numOpenNetworks, false, 0); } return; } } } setNotificationVisible(false, 0, false, 0); }
public boolean hasSubId() { return (com.android.phone.SubscriptionInfoHelper.mSubId) != (com.android.phone.SubscriptionInfoHelper.NO_SUB_ID); }
void addZipFile(java.io.File zipFile) throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SealedPackageException { if (mIsSealed) { throw new com.android.builder.packaging.SealedPackageException("APK is already sealed"); } java.io.FileInputStream fis = null; try { mLogger.verbose("%s:", zipFile); mNullFilter.reset(zipFile); fis = new java.io.FileInputStream(zipFile); mBuilder.writeZip(fis, mNullFilter); } catch (com.android.builder.packaging.DuplicateFileException e) { mBuilder.cleanUp(); throw e; } catch (java.lang.Exception e) { mBuilder.cleanUp(); throw new com.android.builder.packaging.PackagerException(e, "Failed to add %s", zipFile); } finally { try { com.google.common.io.Closeables.close(fis, true); } catch (java.io.IOException e) { } } }
@java.lang.Override public void iccCloseLogicalChannel(int channel, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SIM_CLOSE_CHANNEL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " channel = ") + channel)); } try { radioProxy.iccCloseLogicalChannel(rr.mSerial, channel); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "iccCloseLogicalChannel", e); } } }
@javax.annotation.Nonnull public java.lang.String getPathElementAsString(char separator) { return path.toString().replace(this.separator, separator); }
public void kill(int pid, int signal) throws libcore.io.ErrnoException { os.kill(pid, signal); }

@java.lang.Override protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec keySpec) throws java.security.spec.InvalidKeySpecException { if (keySpec instanceof java.security.spec.ECPrivateKeySpec) { java.security.spec.ECPrivateKeySpec ecKeySpec = ((java.security.spec.ECPrivateKeySpec) (keySpec)); return new org.apache.harmony.xnet.provider.jsse.OpenSSLECPrivateKey(ecKeySpec); } else if (keySpec instanceof java.security.spec.PKCS8EncodedKeySpec) { java.security.spec.PKCS8EncodedKeySpec pkcs8KeySpec = ((java.security.spec.PKCS8EncodedKeySpec) (keySpec)); try { final org.apache.harmony.xnet.provider.jsse.OpenSSLKey key = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_PKCS8_PRIV_KEY_INFO(pkcs8KeySpec.getEncoded())); return new org.apache.harmony.xnet.provider.jsse.OpenSSLECPrivateKey(key); } catch (java.lang.Exception e) { throw new java.security.spec.InvalidKeySpecException(e); } } throw new java.security.spec.InvalidKeySpecException(("Must use ECPrivateKeySpec or PKCS8EncodedKeySpec; was " + (keySpec.getClass().getName()))); }
public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_convert s = new com.android.rs.test.ScriptC_convert(pRS); pRS.setMessageHandler(mRsMessage); s.invoke_convert_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }

private static java.io.File copyDataToLocalFile(android.content.Context context) { java.io.File extractedFile = new java.io.File(context.getFilesDir(), "temp.zip"); android.os.ParcelFileDescriptor fileDescriptor; try { fileDescriptor = context.getContentResolver().openFileDescriptor(TimeZoneRulesDataContract.DATA_URI, "r"); if (fileDescriptor == null) { throw new java.io.FileNotFoundException("ContentProvider returned null"); } } catch (java.io.FileNotFoundException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ("copyDataToLocalFile: Unable to open file descriptor" + (android.provider.TimeZoneRulesDataContract.DATA_URI)), e); return null; } try (android.os.ParcelFileDescriptor pfd = fileDescriptor;java.io.InputStream fis = new java.io.FileInputStream(pfd.getFileDescriptor());java.io.FileOutputStream fos = new java.io.FileOutputStream(extractedFile, false)) { libcore.io.Streams.copy(fis, fos); } catch (java.io.IOException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ("Unable to create asset storage file: " + extractedFile), e); return null; } return extractedFile; }
public void testAesCbcHmacSha512Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }

@java.lang.Override @javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVFile createVFile(@javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent, @javax.annotation.Nonnull java.lang.String name) throws com.android.sched.util.file.CannotCreateFileException { return new com.android.sched.vfs.MessageDigestFS.MessageDigestVFile(this, vfs.createVFile(parent, name)); }

boolean okToConnect(android.bluetooth.BluetoothDevice device) { throw new java.lang.IllegalStateException("Implement me"); }


@java.lang.Override public void addPages() { mWelcomePage = new com.android.ide.eclipse.adt.internal.welcome.WelcomeWizardPage(); addPage(mWelcomePage); if (!(mStore.isPingOptIn())) { mUsagePage = new com.android.ide.eclipse.adt.internal.welcome.UsagePermissionPage(); addPage(mUsagePage); } }

@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_NOTIFICATION_REGISTRATION : handleRegistration(msg.arg1, msg.arg2); break; case com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_SEND_EVENT : sendEventHandler(((byte[]) (msg.obj)), msg.arg1); break; default : break; } }


public void testAesCbcHmacSha1Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add("name", mName).add("debuggable", mDebuggable).add("jniDebugBuild", mJniDebugBuild).add("renderscriptDebugBuild", mRenderscriptDebugBuild).add("renderscriptOptimLevel", mRenderscriptOptimLevel).add("packageNameSuffix", mPackageNameSuffix).add("versionNameSuffix", mVersionNameSuffix).add("runProguard", mRunProguard).add("zipAlign", mZipAlign).add("signingConfig", mSigningConfig).toString(); }
private void compileAndUpload() { final java.lang.Runnable startUploading = new java.lang.Runnable() { @java.lang.Override public void run() { com.intellij.openapi.application.ApplicationManager.getApplication().invokeLater(new java.lang.Runnable() { @java.lang.Override public void run() { startUploadingProcess(); } }); } }; com.android.tools.idea.gradle.invoker.GradleInvoker.getInstance(myProject).compileJava(new java.lang.Module[]{ myModule }); startUploading.run(); }

private void compare(java.lang.String testName, java.lang.String format, java.lang.String expected) { assertTrue(((((testName + " got: ") + format) + " expected: ") + expected), format.equals(expected)); }




public java.util.Map<java.lang.String, java.lang.Long> digestFiles(java.io.File dir, java.util.List<java.lang.String> ignoredFiles, com.intellij.updater.UpdaterUI ui) throws com.intellij.updater.OperationCancelledException, java.io.IOException { java.util.Map<java.lang.String, java.lang.Long> result = new java.util.HashMap<java.lang.String, java.lang.Long>(); java.util.LinkedHashSet<java.lang.String> paths = com.intellij.updater.Utils.collectRelativePaths(dir); for (java.lang.String each : paths) { if (ignoredFiles.contains(each)) continue; ui.setStatus(each); ui.checkCancelled(); result.put(each, digestFile(new java.io.File(dir, each))); } return result; }
public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }

@java.lang.Override public int getState() { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("getState = " + (mService.getState()))); } com.android.bluetooth.pbap.BluetoothPbapService service = getService(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM); if (service == null) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } return service.getState(); }
private void checkUnconnectedUdp(android.net.IpSecTransform transform, java.net.InetAddress local) throws java.lang.Exception { java.io.FileDescriptor udpSocket = android.net.cts.IpSecManagerTest.getBoundUdpSocket(local); int localPort = android.net.cts.IpSecManagerTest.getPort(udpSocket); mISM.applyTransportModeTransform(udpSocket, transform); byte[] data = new java.lang.String(("Best test data ever! Port: " + localPort)).getBytes("UTF-8"); byte[] in = new byte[data.length]; android.system.Os.sendto(udpSocket, data, 0, data.length, 0, local, localPort); android.system.Os.read(udpSocket, in, 0, in.length); assertTrue("Encapsulated data did not match.", java.util.Arrays.equals(data, in)); mISM.removeTransportModeTransform(udpSocket, transform); android.system.Os.close(udpSocket); }
@java.lang.Override public int run(@javax.annotation.Nonnull java.io.PrintStream out, @javax.annotation.Nonnull java.io.PrintStream err, @javax.annotation.Nonnull java.io.File pwd, @javax.annotation.Nonnull com.android.sched.util.config.cli.TokenIterator args) { java.lang.String jackJarPath = getJackJarPath(); if (jackJarPath == null) { return ServerExitStatus.FAILURE_JACK_JAR_NOT_FOUND; } java.util.List<java.lang.String> commandLineArgs; try { commandLineArgs = buildArgs(jackJarPath, args); } catch (java.lang.Exception e) { return ServerExitStatus.FAILURE_USAGE; } com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(commandLineArgs.toArray(new java.lang.String[commandLineArgs.size()])); exec.setErr(err); exec.setOut(out); try { exec.setWorkingDir(pwd, false); } catch (java.io.IOException e) { return ServerExitStatus.FAILURE_USAGE; } try { return exec.run(); } catch (java.lang.Exception e) { return ServerExitStatus.FAILURE_UNKNOWN; } }
public static void confirmDeleteThreadDialog(com.android.cellbroadcastreceiver.CellBroadcastListActivity.DeleteThreadListener listener, boolean deleteAll, android.content.Context context) { android.view.View contents = android.view.View.inflate(context, R.layout.delete_broadcast_dialog_view, null); android.widget.TextView msg = ((android.widget.TextView) (contents.findViewById(R.id.message))); msg.setText((deleteAll ? R.string.confirm_delete_all_broadcasts : R.string.confirm_delete_broadcast)); android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(context); builder.setTitle(R.string.confirm_dialog_title).setIcon(android.R.drawable.ic_dialog_alert).setCancelable(true).setPositiveButton(R.string.button_delete, listener).setNegativeButton(R.string.button_cancel, null).setView(contents).show(); }


public static android.graphics.Bitmap parseToBnW(byte[] data, int length) { int valueIndex = 0; int width = (data[(valueIndex++)]) & 255; int height = (data[(valueIndex++)]) & 255; int numOfPixels = width * height; int[] pixels = new int[numOfPixels]; int pixelIndex = 0; int bitIndex = 7; byte currentByte = 0; while (pixelIndex < numOfPixels) { if ((pixelIndex % 8) == 0) { currentByte = data[(valueIndex++)]; bitIndex = 7; } pixels[(pixelIndex++)] = com.android.internal.telephony.IccUtils.bitToRGB(((currentByte >> (bitIndex--)) & 1)); } if (pixelIndex != numOfPixels) { android.util.Log.e(com.android.internal.telephony.IccUtils.LOG_TAG, "parse end and size error"); } return android.graphics.Bitmap.createBitmap(pixels, width, height, Bitmap.Config.ARGB_8888); }
public void setsockoptGroupSourceReq(java.io.FileDescriptor fd, int level, int option, libcore.io.StructGroupSourceReq value) throws libcore.io.ErrnoException { os.setsockoptGroupSourceReq(fd, level, option, value); }
public byte[] generateVerityTreeRootHash(com.android.apksig.util.DataSource fileSource) throws java.io.IOException { int digestSize = mMd.getDigestLength(); int[] levelOffset = com.android.apksig.internal.util.VerityTreeBuilder.calculateLevelOffset(fileSource.size(), digestSize); java.nio.ByteBuffer verityBuffer = java.nio.ByteBuffer.allocate(levelOffset[((levelOffset.length) - 1)]); for (int i = (levelOffset.length) - 2; i >= 0; i--) { com.android.apksig.util.DataSource src; if (i == ((levelOffset.length) - 2)) { src = fileSource; } else { src = com.android.apksig.util.DataSources.asDataSource(com.android.apksig.internal.util.VerityTreeBuilder.slice(verityBuffer.asReadOnlyBuffer(), levelOffset[(i + 1)], levelOffset[(i + 2)])); } com.android.apksig.util.DataSink middleBufferSink = new com.android.apksig.internal.util.ByteBufferSink(com.android.apksig.internal.util.VerityTreeBuilder.slice(verityBuffer, levelOffset[i], levelOffset[(i + 1)])); digestDataByChunks(src, middleBufferSink); long totalOutput = (com.android.apksig.internal.util.VerityTreeBuilder.divideRoundup(src.size(), com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE)) * digestSize; int incomplete = ((int) (totalOutput % (com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE))); if (incomplete > 0) { byte[] padding = new byte[(com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE) - incomplete]; middleBufferSink.consume(padding, 0, padding.length); } } java.nio.ByteBuffer firstPage = com.android.apksig.internal.util.VerityTreeBuilder.slice(verityBuffer.asReadOnlyBuffer(), 0, com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE); return saltedDigest(firstPage); }
public native java.net.SocketAddress getsockname(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;
@java.lang.Override public void removeForward(int localPort, java.lang.String remoteSocketName, com.android.ddmlib.DeviceUnixSocketNamespace namespace) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.AdbHelper.removeForward(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), this, java.lang.String.format("tcp:%d", localPort), java.lang.String.format("%s:%s", namespace.getType(), remoteSocketName)); }
public void assertUnreleasedResourceCount(java.lang.Object owner, int expectedCount) { libcore.junit.util.ResourceLeakageDetector.FINALIZER_CHECKER.accept(owner, expectedCount); }
public static void execApplication(java.lang.String invokeWith, java.lang.String niceName, int targetSdkVersion, java.io.FileDescriptor pipeFd, java.lang.String[] args) { java.lang.StringBuilder command = new java.lang.StringBuilder(invokeWith); command.append(" /system/bin/app_process /system/bin --application"); if (niceName != null) { command.append(" '--nice-name=").append(niceName).append("'"); } command.append(" com.android.internal.os.WrapperInit "); command.append((pipeFd != null ? pipeFd.getInt$() : 0)); command.append(' '); command.append(targetSdkVersion); com.android.internal.os.Zygote.appendQuotedShellArgs(command, args); com.android.internal.os.Zygote.execShell(command.toString()); }
@com.android.internal.annotations.VisibleForTesting public static java.lang.String getStringForCarrierIdTableCreation(java.lang.String tableName) { return (((((((((((((((((((((((("CREATE TABLE " + tableName) + "(_id INTEGER PRIMARY KEY,") + (CarrierIdentification.All.MCCMNC)) + " TEXT NOT NULL,") + (CarrierIdentification.All.GID1)) + " TEXT,") + (CarrierIdentification.All.GID2)) + " TEXT,") + (CarrierIdentification.All.PLMN)) + " TEXT,") + (CarrierIdentification.All.IMSI_PREFIX_XPATTERN)) + " TEXT,") + (CarrierIdentification.All.SPN)) + " TEXT,") + (CarrierIdentification.All.APN)) + " TEXT,") + (CarrierIdentification.All.ICCID_PREFIX)) + " TEXT,") + (android.provider.Telephony.CarrierIdentification.NAME)) + " TEXT,") + (android.provider.Telephony.CarrierIdentification.CID)) + " INTEGER DEFAULT -1,") + "UNIQUE (") + (android.text.TextUtils.join(", ", com.android.providers.telephony.CarrierIdProvider.CARRIERS_ID_UNIQUE_FIELDS))) + "));"; }
private com.android.rs.test.Float2 pack_f2(float[] val) { assert (val.length) == 2; return new com.android.rs.test.Float2(val[0], val[1]); }
@java.lang.Override public void updatePublish(int clientId, int sessionId, android.net.wifi.aware.PublishConfig publishConfig) { enforceAccessPermission(); enforceChangePermission(); if (publishConfig == null) { throw new java.lang.IllegalArgumentException("PublishConfig must not be null"); } publishConfig.assertValid(mStateManager.getCharacteristics()); int uid = getMockableCallingUid(); enforceClientValidity(uid, clientId); if (com.android.server.wifi.aware.WifiAwareServiceImpl.VDBG) { android.util.Log.v(com.android.server.wifi.aware.WifiAwareServiceImpl.TAG, ((((((("updatePublish: uid=" + uid) + ", clientId=") + clientId) + ", sessionId=") + sessionId) + ", config=") + publishConfig)); } mStateManager.updatePublish(clientId, sessionId, publishConfig); }
public android.net.NetworkStats readNetworkStatsSummaryDev() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; final boolean active = (reader.nextInt()) != 0; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.rxPackets += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); } stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException("problem parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }

public static long UShr60And7(long arg) { return (arg >>> 60) & 7; }
private void initiateDeviceOwnerProvisioning(android.content.Intent intent) { if (!(mParams.startedByTrustedSource)) { mUi.initiateUi(R.string.setup_work_device, R.string.setup_device_start_setup, R.string.company_controls_device, R.string.the_following_is_your_mdm_for_device, mParams); } if (isEncryptionRequired()) { maybeTriggerEncryption(); return; } if (mKeyguardManager.inKeyguardRestrictedInputMode()) { com.android.managedprovisioning.ProvisionLogger.logi("Cannot pick wifi because the screen is locked."); } else if ((!(mUtils.isConnectedToNetwork(mContext))) && ((mParams.wifiInfo) == null)) { if (canRequestWifiPick()) { mUi.requestWifiPick(); return; } else { com.android.managedprovisioning.ProvisionLogger.logi("Cannot pick wifi because there is no handler to the intent"); } } askForConsentOrStartDeviceOwnerProvisioning(); }

@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (intent.getAction().equals(mAction)) { synchronized(mLock) { mCalls += 1; if ((mCalls) >= (mExpectedCalls)) { mLock.notify(); } } } }


@java.lang.Override public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { if ((description.getAnnotation(libcore.junit.util.ResourceLeakageDetector.DisableResourceLeakageDetection.class)) != null) { return base; } else { return leakageDetectorRule.apply(base, description); } }
public void close() throws com.android.sched.util.file.CannotCreateFileException, java.io.IOException { java.io.OutputStream os = dir.createOutputVFile(new com.android.sched.vfs.VPath("jack.sha1", '/')).openWrite(); java.io.PrintStream printer = new java.io.PrintStream(os); for (com.android.sched.vfs.MessageDigestInputOutputVFS.MessageDigestOutputVFile file : files) { byte[] digest = file.getDigest(); if (digest != null) { printer.print(file.getVPath().getPathAsString('/')); printer.print(':'); printer.print(com.android.sched.vfs.MessageDigestInputOutputVFS.encode(digest)); printer.println(); } } printer.close(); }

@java.lang.Override public void initParser(@com.android.annotations.NonNull java.lang.String target, @com.android.annotations.NonNull com.android.sdklib.repository.FullRevision buildToolRevision, @com.android.annotations.NonNull com.android.utils.ILogger logger) { if (!(mInitialized)) { mTarget = new com.android.builder.internal.FakeAndroidTarget(mPlatformRootFolder, target); mBuildToolInfo = new com.android.sdklib.BuildToolInfo(buildToolRevision, new java.io.File(mPlatformRootFolder), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_AAPT), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_AIDL), new java.io.File(mPlatformRootFolder, "prebuilts/sdk/tools/dx"), new java.io.File(mPlatformRootFolder, "prebuilts/sdk/tools/lib/dx.jar"), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_RENDERSCRIPT), new java.io.File(mPlatformRootFolder, "prebuilts/sdk/renderscript/include"), new java.io.File(mPlatformRootFolder, "prebuilts/sdk/renderscript/clang-include"), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_BCC_COMPAT), new java.io.File(getHostToolsFolder(), "arm-linux-androideabi-ld"), new java.io.File(getHostToolsFolder(), "i686-linux-android-ld"), new java.io.File(getHostToolsFolder(), "mipsel-linux-android-ld")); mInitialized = true; } }


public void testGrantNoneRequestNone() throws java.lang.Exception { doTestDragAndDrop(android.wm.cts.CrossAppDragAndDropTests.GRANT_NONE, android.wm.cts.CrossAppDragAndDropTests.REQUEST_NONE, android.wm.cts.CrossAppDragAndDropTests.RESULT_EXCEPTION); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DRAG_STARTED, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_EXTRAS, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); }

synchronized boolean reportError(android.bluetooth.BluetoothDevice device, byte error) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ((("reportError(): device=" + device) + " error=") + error)); } if (!(checkDevice(device))) { return false; } return reportErrorNative(error); }
public void fdatasync(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;
@android.annotation.Nullable public java.lang.String getEid() { if (!(isEnabled())) { return null; } try { return mController.getEid(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void restartObexServerSession() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) android.util.Log.d(TAG, "MAP Service restartObexServerSession()"); startRfcommSocketListener(); }

void discoveryStateChangeCallback(int state) { infoLog(("Callback:discoveryStateChangeCallback with state:" + state)); synchronized(mObject) { android.content.Intent intent; if (state == (AbstractionLayer.BT_DISCOVERY_STOPPED)) { mDiscovering = false; intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_FINISHED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } else if (state == (AbstractionLayer.BT_DISCOVERY_STARTED)) { mDiscovering = true; intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_STARTED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } } }



@java.lang.Override public void run(org.eclipse.core.runtime.IProgressMonitor monitor) throws java.lang.InterruptedException, java.lang.reflect.InvocationTargetException { org.eclipse.core.resources.IWorkspaceRunnable op1 = new org.eclipse.core.resources.IWorkspaceRunnable() { @java.lang.Override public void run(org.eclipse.core.runtime.IProgressMonitor monitor1) throws org.eclipse.core.runtime.CoreException { org.eclipse.cdt.core.CCorePlugin.getDefault().convertProjectToCC(mProject, monitor1, MakeCorePlugin.MAKE_PROJECT_ID); new com.android.ide.eclipse.ndk.internal.wizards.NdkWizardHandler().convertProject(mProject, monitor1); com.android.ide.eclipse.ndk.internal.NdkManager.addNativeSupport(mProject, mTemplateArgs, monitor1); } }; org.eclipse.core.resources.IWorkspace workspace = org.eclipse.core.resources.ResourcesPlugin.getWorkspace(); try { workspace.run(op1, workspace.getRoot(), 0, new org.eclipse.core.runtime.NullProgressMonitor()); } catch (org.eclipse.core.runtime.CoreException e) { throw new java.lang.reflect.InvocationTargetException(e); } }
public void test_connect_timeout() throws java.lang.Exception { tests.net.StuckServer ss = new tests.net.StuckServer(); java.net.Socket s = new java.net.Socket(); new libcore.java.net.ConcurrentCloseTest.Killer(s).start(); try { java.lang.System.err.println((((("connect (with timeout) " + s) + " to ") + (ss.getLocalSocketAddress())) + "...")); s.connect(ss.getLocalSocketAddress(), (3600 * 1000)); fail((("connect returned: " + s) + "!")); } catch (java.net.SocketException expected) { assertEquals("Socket closed", expected.getMessage()); } finally { ss.close(); } }



@java.lang.Override public void write(@com.android.annotations.NonNull final java.io.File projectDir, @com.android.annotations.Nullable final java.lang.String buildScriptContent) throws java.io.IOException { for (java.util.Map.Entry<java.lang.String, ? extends com.android.build.gradle.integration.common.fixture.TestProject> entry : subprojects.entrySet()) { java.lang.String subprojectPath = entry.getKey(); com.android.build.gradle.integration.common.fixture.TestProject subproject = entry.getValue(); subproject.write(new java.io.File(projectDir, com.android.build.gradle.integration.common.fixture.app.MultiModuleTestProject.convertGradlePathToDirectory(subprojectPath)), buildScriptContent); } java.lang.StringBuilder builder = new java.lang.StringBuilder(); for (java.lang.String subprojectName : subprojects.keySet()) { builder.append("include '").append(subprojectName).append("\'\n"); } com.google.common.io.Files.write(builder.toString(), new java.io.File(projectDir, "settings.gradle"), java.nio.charset.Charset.defaultCharset()); }
public void testBooleanOverlay() throws java.lang.Throwable { final int resId = com.android.internal.R.bool.config_automatic_brightness_available; assertResource(resId, false, true); }



public void testVFE16() { try { java.lang.Class.forName("dot.junit.opcodes.iget_boolean.d.T_iget_boolean_5"); fail("expected a verification exception"); } catch (java.lang.Throwable t) { dot.junit.DxUtil.checkVerifyException(t); } }





void stop() { if (com.android.bluetooth.mapclient.MnsService.VDBG) android.util.Log.v(com.android.bluetooth.mapclient.MnsService.TAG, "stop()"); mShutdown = true; if ((com.android.bluetooth.mapclient.MnsService.mServerSockets) != null) { com.android.bluetooth.mapclient.MnsService.mServerSockets.shutdown(false); com.android.bluetooth.mapclient.MnsService.mServerSockets = null; } }
void removeItem(I removedItem, I replacedBy) throws com.android.ide.common.res2.MergeConsumer.ConsumerException;

private void onStartUser(int userId) { android.util.Slog.d(com.android.server.MountService.TAG, ("onStartUser " + userId)); try { mConnector.execute("volume", "user_started", userId); } catch (com.android.server.NativeDaemonConnectorException ignored) { } synchronized(mVolumes) { for (int i = 0; i < (mVolumes.size()); i++) { final android.os.storage.VolumeInfo vol = mVolumes.valueAt(i); if ((vol.isVisibleForRead(userId)) && (vol.isMountedReadable())) { final android.os.storage.StorageVolume userVol = vol.buildStorageVolume(mContext, userId, false); mHandler.obtainMessage(com.android.server.MountService.H_VOLUME_BROADCAST, userVol).sendToTarget(); final java.lang.String envState = android.os.storage.VolumeInfo.getEnvironmentForState(vol.getState()); mCallbacks.notifyStorageStateChanged(userVol.getPath(), envState, envState); } } mStartedUsers = com.android.internal.util.ArrayUtils.appendInt(mStartedUsers, userId); } }
public static java.lang.String formatDateRange(android.icu.util.ULocale icuLocale, android.icu.util.TimeZone icuTimeZone, long startMs, long endMs, int flags) { android.icu.util.Calendar startCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, startMs); android.icu.util.Calendar endCalendar; if (startMs == endMs) { endCalendar = startCalendar; } else { endCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, endMs); } boolean endsAtMidnight = libcore.icu.DateIntervalFormat.isMidnight(endCalendar); if (((startMs != endMs) && endsAtMidnight) && (((flags & (DateUtilsBridge.FORMAT_SHOW_TIME)) == 0) || ((libcore.icu.DateUtilsBridge.dayDistance(startCalendar, endCalendar)) <= 1))) { endCalendar.add(Calendar.DAY_OF_MONTH, (-1)); } java.lang.String skeleton = libcore.icu.DateUtilsBridge.toSkeleton(startCalendar, endCalendar, flags); synchronized(libcore.icu.DateIntervalFormat.CACHED_FORMATTERS) { android.icu.text.DateIntervalFormat formatter = libcore.icu.DateIntervalFormat.getFormatter(skeleton, icuLocale, icuTimeZone); return formatter.format(startCalendar, endCalendar, new java.lang.StringBuffer(), new java.text.FieldPosition(0)).toString(); } }

public void setAudioRouteAllowed(boolean allowed) { mAudioRouteAllowed = allowed; setScoAllowedNative(allowed); }


private void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType != (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkCapabilities(networkAgent.networkCapabilities)); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = networkCapabilitiesWithoutUids(networkAgent.networkCapabilities); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log(((("sending notification " + notification) + " for ") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge(("RemoteException caught trying to send a callback msg for " + (nri.request))); } }
private void testJavaSide(com.android.rs.test.RenderScript RS) { int subElemCount = simpleElem.getSubElementCount(); _RS_ASSERT("subElemCount == 0", (subElemCount == 0)); _RS_ASSERT("simpleElem.getDataKind() == USER", ((simpleElem.getDataKind()) == (android.renderscript.Element.DataKind.USER))); _RS_ASSERT("simpleElem.getDataType() == FLOAT_32", ((simpleElem.getDataType()) == (android.renderscript.Element.DataType.FLOAT_32))); subElemCount = complexElem.getSubElementCount(); _RS_ASSERT("subElemCount == 10", (subElemCount == 10)); _RS_ASSERT("complexElem.getDataKind() == USER", ((complexElem.getDataKind()) == (android.renderscript.Element.DataKind.USER))); _RS_ASSERT("complexElemsimpleElem.getDataType() == NONE", ((complexElem.getDataType()) == (android.renderscript.Element.DataType.NONE))); for (int i = 0; i < subElemCount; i++) { _RS_ASSERT("complexElem.getSubElement(i) != null", ((complexElem.getSubElement(i)) != null)); _RS_ASSERT("complexElem.getSubElementName(i).equals(subElemNames[i])", complexElem.getSubElementName(i).equals(subElemNames[i])); _RS_ASSERT("complexElem.getSubElementArraySize(i) == subElemArraySizes[i]", ((complexElem.getSubElementArraySize(i)) == (subElemArraySizes[i]))); _RS_ASSERT("complexElem.getSubElementOffsetBytes(i) == subElemOffsets[i]", ((complexElem.getSubElementOffsetBytes(i)) == (subElemOffsets[i]))); } }



public native void chown(java.lang.String path, int uid, int gid) throws android.system.ErrnoException;


private static native android.graphics.Bitmap nativeCopy(int srcBitmap, int nativeConfig, boolean isMutable);


@java.lang.Override public void setVoiceMailNumber(java.lang.String alphaTag, java.lang.String voiceMailNumber, android.os.Message onComplete) { android.os.AsyncResult.forMessage(onComplete, null, null); onComplete.sendToTarget(); }
@com.android.sched.util.findbugs.SuppressFBWarnings("RV_RETURN_VALUE_IGNORED_BAD_PRACTICE") private static void deleteSubElement(@javax.annotation.Nonnull java.io.File dir) { if (dir.isDirectory()) { for (java.io.File sub : dir.listFiles()) { com.android.sched.util.file.FileUtils.deleteSubElement(sub); } } dir.delete(); }



public void setPeriodicAdvertisingEnabled(boolean enable) { try { gatt.setPeriodicAdvertisingEnable(this.advertiserId, enable); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
public void logCall(com.android.internal.telephony.Connection c, int callLogType) { final java.lang.String number = c.getAddress(); final long date = c.getCreateTime(); final long duration = c.getDurationMillis(); final com.android.internal.telephony.Phone phone = c.getCall().getPhone(); final com.android.internal.telephony.CallerInfo ci = getCallerInfoFromConnection(c); final java.lang.String logNumber = getLogNumber(c, ci); if (com.android.phone.CallLogger.DBG) { log(((("- onDisconnect(): logNumber set to:" + (com.android.phone.PhoneUtils.toLogSafePhoneNumber(logNumber))) + ", number set to: ") + (com.android.phone.PhoneUtils.toLogSafePhoneNumber(number)))); } final int presentation = getPresentation(c, ci); final boolean isOtaspNumber = (com.android.internal.telephony.TelephonyCapabilities.supportsOtasp(phone)) && (phone.isOtaSpNumber(number)); if (!isOtaspNumber) { logCall(ci, logNumber, presentation, callLogType, date, duration); } }
public void execv(java.lang.String filename, java.lang.String[] argv) throws android.system.ErrnoException;
@org.junit.Test public void emptyScanResults() { java.lang.String[] ssids = new java.lang.String[0]; java.lang.String[] bssids = new java.lang.String[0]; int[] freqs = new int[0]; java.lang.String[] caps = new java.lang.String[0]; int[] levels = new int[0]; int[] securities = new int[0]; com.android.server.wifi.WifiNetworkSelectorTestUtil.ScanDetailsAndWifiConfigs scanDetailsAndConfigs = com.android.server.wifi.WifiNetworkSelectorTestUtil.setupScanDetailsAndConfigStore(ssids, bssids, freqs, caps, levels, securities, mWifiConfigManager, mClock); java.util.List<com.android.server.wifi.ScanDetail> scanDetails = scanDetailsAndConfigs.getScanDetails(); android.net.wifi.WifiConfiguration candidate = mWifiNetworkSelector.selectNetwork(scanDetails, mWifiInfo, false, true, false); assertEquals("Expect null configuration", null, candidate); }

@org.junit.Test public void testCompile016() throws java.lang.Exception { properties.clear(); properties.put("jack.optimization.enum.switch", "feedback"); java.lang.String packageName = "com.android.jack.switchstatement.test016.jack"; java.lang.String classPrefix = (packageName.replace('.', '_')) + "_"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put("Enum1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum11"), false)); input.put("Enum1$Enum11", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum11"), false)); input.put("Enum1$Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum11"), false)); input.put("Enum1$Switch2", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum11"), false)); input.put("SyntheticSwitchmapClass-*", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo((classPrefix + "Enum1$Enum11"), true)); checkCompiledCode(packageName, input); }

public void testInspectSslBeforeConnect() throws java.lang.Exception { TestSSLContext testSSLContext = TestSSLContext.create(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), false); server.enqueue(new com.google.mockwebserver.MockResponse()); server.play(); javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (server.getUrl("/").openConnection())); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); assertNotNull(connection.getHostnameVerifier()); try { connection.getLocalCertificates(); fail(); } catch (java.lang.IllegalStateException expected) { } try { connection.getServerCertificates(); fail(); } catch (java.lang.IllegalStateException expected) { } try { connection.getCipherSuite(); fail(); } catch (java.lang.IllegalStateException expected) { } try { connection.getPeerPrincipal(); fail(); } catch (java.lang.IllegalStateException expected) { } }

@java.lang.Override public int compare(com.android.ahat.heapdump.Site a, com.android.ahat.heapdump.Site b) { return java.lang.Long.compare(b.getTotalSize(), a.getTotalSize()); }









public int[] getAdnRecordsSize(int efid) { if (DBG) logd(("getAdnRecordsSize: efid=" + efid)); synchronized(mLock) { checkThread(); recordSize = new int[3]; android.os.Message response = mBaseHandler.obtainMessage(com.android.internal.telephony.cdma.EVENT_GET_SIZE_DONE); phone.getIccFileHandler().getEFLinearRecordSize(efid, response); try { mLock.wait(); } catch (java.lang.InterruptedException e) { logd("interrupted while trying to load from the RUIM"); } } return recordSize; }
@java.lang.Override public java.nio.ByteBuffer putShort(short value) { checkNotFreed(); if (isReadOnly) { throw new java.nio.ReadOnlyBufferException(); } int newPosition = (position) + (libcore.io.SizeOf.SHORT); if (newPosition > (limit)) { throw new java.nio.BufferOverflowException(); } this.block.pokeShort(((offset) + (position)), value, order); position = newPosition; return this; }
java.nio.channels.SocketChannel getClientMonitoringSocket() { return mSocketChannel; }

@java.lang.Override protected void onResume() { super.onResume(); android.hardware.usb.UsbAccessory[] accessories = mUsbManager.getAccessoryList(); android.hardware.usb.UsbAccessory accessory = ((accessories != null) && ((accessories.length) > 0)) ? accessories[0] : null; if (accessory != null) { if (mUsbManager.hasPermission(accessory)) { openAccessory(accessory); } else { if (!(mPermissionRequestPending)) { mUsbManager.requestPermission(accessory, mPermissionIntent); mPermissionRequestPending = true; } } } }
public void iccTransmitApduBasicChannel(int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { mCi.iccTransmitApduBasicChannel(cla, command, p1, p2, p3, data, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_TRANSMIT_APDU_BASIC_CHANNEL_DONE, response)); }


private void updateResult(com.android.manifmerger.MergingReport.Result result) { if ((result == (MergingReport.Result.ERROR)) || ((result == (MergingReport.Result.WARNING)) && ((mResult) != (MergingReport.Result.ERROR)))) { mResult = result; } }

public static <T> void runBasicIterationTests(java.util.Spliterator<T> spliterator, java.util.ArrayList<T> expectedElements) { java.util.ArrayList<T> recorder = new java.util.ArrayList<T>(expectedElements.size()); java.util.function.Consumer<T> consumer = (T value) -> recorder.add(value); junit.framework.Assert.assertTrue(spliterator.tryAdvance(consumer)); junit.framework.Assert.assertEquals(expectedElements.get(0), recorder.get(0)); spliterator.forEachRemaining(consumer); junit.framework.Assert.assertEquals(expectedElements, recorder); junit.framework.Assert.assertFalse(spliterator.tryAdvance(consumer)); spliterator.forEachRemaining(( T) -> junit.framework.Assert.fail()); }

@javax.annotation.Nonnull static com.android.jack.shrob.spec.AnnotationSpecification annotation(java.lang.String annotationName, boolean hasNameNegator) { com.android.jack.shrob.spec.NameSpecification name = com.android.jack.shrob.proguard.GrammarActions.name(annotationName); name.setNegator(hasNameNegator); return new com.android.jack.shrob.spec.AnnotationSpecification(name); }
@java.lang.Override public void getCellInfoList(android.os.Message result, android.os.WorkSource workSource) { workSource = getDeafultWorkSourceIfInvalid(workSource); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_CELL_INFO_LIST, result, workSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getCellInfoList(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getCellInfoList", e); } } }

@org.junit.Test public void coreToJayceFromJar() throws java.lang.Exception { com.android.jill.Options options = new com.android.jill.Options(); options.setBinaryFile(new java.io.File(((com.android.jill.JillTestTools.getAndroidTop()) + "/out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes.jar"))); options.setVerbose(true); options.container = ContainerType.DIR; options.outputDirOrZip = com.android.jill.JillTestTools.createTempDir("core_", "_dir"); new com.android.jill.Jill(options, "0.1").process(options.getBinaryFile()); }
@java.lang.Override public void write(java.io.OutputStream out) throws java.io.IOException { try { signer = new com.android.signapk.SignApk.WholeFileSignerOutputStream(out, outputStream); java.util.jar.JarOutputStream outputJar = new java.util.jar.JarOutputStream(signer); int hash = com.android.signapk.SignApk.getDigestAlgorithm(publicKey); long timestamp = (publicKey.getNotBefore().getTime()) + (3600L * 1000); java.util.jar.Manifest manifest = com.android.signapk.SignApk.addDigestsToManifest(inputJar, hash); com.android.signapk.SignApk.copyFiles(manifest, inputJar, outputJar, timestamp, 0); com.android.signapk.SignApk.addOtacert(outputJar, publicKeyFile, timestamp, manifest, hash); com.android.signapk.SignApk.signFile(manifest, new java.security.cert.X509Certificate[]{ publicKey }, new java.security.PrivateKey[]{ privateKey }, outputJar); signer.notifyClosing(); outputJar.close(); signer.finish(); } catch (java.lang.Exception e) { throw new java.io.IOException(e); } }
public void request(DiscoveredPrinter printer, boolean highPriority, com.android.bips.ipp.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, ((("request() printer=" + printer) + " high=") + highPriority)); Uri printerUri = printer.getUri(); Uri printerPath = printer.path; com.android.bips.jni.LocalPrinterCapabilities capabilities = get(printer.getUri()); if ((capabilities != null) && ((capabilities.nativeData) != null)) { onLocalPrinterCapabilities.onCapabilities(printer, capabilities); return; } com.android.bips.ipp.CapabilitiesCache.Request request = mRequests.get(printerUri); if (request == null) { if (highPriority) { request = new com.android.bips.ipp.CapabilitiesCache.Request(printer, com.android.bips.ipp.CapabilitiesCache.SECOND_PASS_TIMEOUT); } else { request = new com.android.bips.ipp.CapabilitiesCache.Request(printer, com.android.bips.ipp.CapabilitiesCache.FIRST_PASS_TIMEOUT); } mRequests.put(printerUri, request); } else if (!(request.mPrinter.path.equals(printerPath))) { android.util.Log.w(com.android.bips.ipp.CapabilitiesCache.TAG, ((("Capabilities request for printer " + printer) + " overlaps with different path ") + (request.mPrinter.path))); onLocalPrinterCapabilities.onCapabilities(printer, null); return; } request.mCallbacks.add(onLocalPrinterCapabilities); if (highPriority) { request.mHighPriority = true; } startNextRequest(); }


public byte[] encode() throws java.io.UnsupportedEncodingException { java.util.ArrayList<byte[]> bodyFragments = new java.util.ArrayList<byte[]>(); if ((mSmsBody) != null) { java.lang.String tmpBody = mSmsBody.replaceAll("END:MSG", "/END\\:MSG"); bodyFragments.add(tmpBody.getBytes("UTF-8")); } else if (((mSmsBodyPdus) != null) && ((mSmsBodyPdus.size()) > 0)) { for (com.android.bluetooth.map.BluetoothMapSmsPdu.SmsPdu pdu : mSmsBodyPdus) { bodyFragments.add(encodeBinary(pdu.getData(), pdu.getScAddress()).getBytes("UTF-8")); } } else { bodyFragments.add(new byte[0]); } return encodeGeneric(bodyFragments); }




@java.lang.Override public void installPackageWithVerification(android.net.Uri packageURI, android.content.pm.IPackageInstallObserver observer, int flags, java.lang.String installerPackageName, android.net.Uri verificationURI, android.content.pm.ManifestDigest manifestDigest, android.content.pm.ContainerEncryptionParams encryptionParams) { android.content.pm.VerificationParams verificationParams = new android.content.pm.VerificationParams(verificationURI, null, null, android.content.pm.VerificationParams.NO_UID, manifestDigest); installPackageWithVerificationAndEncryption(packageURI, observer, flags, installerPackageName, verificationParams, encryptionParams); }

public byte[] getHardwareAddress() throws java.net.SocketException { java.lang.SecurityManager sec = java.lang.System.getSecurityManager(); if (sec != null) { try { sec.checkPermission(new java.net.NetPermission("getNetworkInformation")); } catch (java.lang.SecurityException e) { if (!(getInetAddresses().hasMoreElements())) { return null; } } } for (java.net.InetAddress addr : addrs) { if (addr instanceof java.net.Inet4Address) { return java.net.NetworkInterface.getMacAddr0(((java.net.Inet4Address) (addr)).getAddress(), name, index); } } return java.net.NetworkInterface.getMacAddr0(null, name, index); }

@java.lang.Override public void sendSMS(java.lang.String smscPdu, java.lang.String pdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SEND_SMS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.GsmSmsMessage msg = constructGsmSendSmsRilRequest(smscPdu, pdu); try { radioProxy.sendSms(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_GSM, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendSMS", e); } } }
public void testPinEntryPinFailure() throws java.lang.Exception { java.lang.String shortEntry = "*.google.com=true|" + (shortPin); org.conscrypt.PinListEntry e = new org.conscrypt.PinListEntry(shortEntry, new org.conscrypt.TrustedCertificateStore()); assertTrue("Not enforcing!", e.getEnforcing()); boolean retval = e.isChainValid(longChain); assertFalse("Accepted an incorrect pinning, this is very bad", retval); }
@org.junit.Test public void retroLambdaDefaultMethodsTest006() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_006).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
private void updateAndSendIntent(android.bluetooth.BluetoothDevice device, int newDeviceState, int prevDeviceState) { if (newDeviceState == (android.bluetooth.BluetoothHealth.STATE_DISCONNECTED)) { mHealthDevices.remove(device); } else { mHealthDevices.put(device, newDeviceState); } }

private void setBuildTools(@com.android.annotations.NonNull java.util.Map<com.android.sdklib.repository.FullRevision, com.android.sdklib.BuildToolInfo> buildTools) { assert buildTools != null; mBuildTools = buildTools; }
private static native void copyNativeCanvasState(int srcCanvas, int dstCanvas);
@java.lang.Override protected synchronized boolean stop() { try { unregisterReceiver(mBroadcastReceiver); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "Unable to unregister broadcast receiver", e); } for (java.util.Iterator<java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.hfpclient.HeadsetClientStateMachine>> it = mStateMachineMap.entrySet().iterator(); it.hasNext();) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = mStateMachineMap.get(((android.bluetooth.BluetoothDevice) (it.next().getKey()))); sm.doQuit(); it.remove(); } android.content.Intent stopIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); stopIntent.putExtra(com.android.bluetooth.hfpclient.HeadsetClientService.HFP_CLIENT_STOP_TAG, true); startService(stopIntent); mNativeInterface = null; mSmThread.quit(); mSmThread = null; com.android.bluetooth.hfpclient.NativeInterface.cleanupNative(); return true; }
void adjustSurface(int layer, boolean inTransaction) { final int dw; final int dh; final float xPos; final float yPos; if (!(mStack.isFullscreen())) { dw = mBounds.width(); dh = mBounds.height(); xPos = mBounds.left; yPos = mBounds.top; } else { final android.view.DisplayInfo info = mDisplayContent.getDisplayInfo(); dw = ((int) ((info.logicalWidth) * 1.5)); dh = ((int) ((info.logicalHeight) * 1.5)); xPos = ((-1) * dw) / 6; yPos = ((-1) * dh) / 6; } try { if (!inTransaction) { android.view.SurfaceControl.openTransaction(); } mDimSurface.setPosition(xPos, yPos); mDimSurface.setSize(dw, dh); mDimSurface.setLayer(layer); } catch (java.lang.RuntimeException e) { android.util.Slog.w(com.android.server.wm.DimLayer.TAG, "Failure setting size or layer", e); } finally { if (!inTransaction) { android.view.SurfaceControl.closeTransaction(); } } mLastBounds.set(mBounds); mLayer = layer; }


@java.lang.Override public void setInitialAttachApn(android.telephony.data.DataProfile dataProfile, boolean isRoaming, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_INITIAL_ATTACH_APN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + dataProfile)); } try { radioProxy.setInitialAttachApn(rr.mSerial, com.android.internal.telephony.RIL.convertToHalDataProfile(dataProfile), dataProfile.isModemCognitive(), isRoaming); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setInitialAttachApn", e); } } }






public static int ioctlInt(java.io.FileDescriptor fd, int cmd, android.system.IoctlIntArg arg) throws android.system.ErrnoException { libcore.util.MutableInt internalArg = new libcore.util.MutableInt(arg.value); try { return Libcore.os.ioctlInt(fd, cmd, internalArg); } finally { arg.value = internalArg.value; } }


boolean stopGattProfileService() { setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); return true; }
private boolean haveLocalRepository(java.lang.String vendor) { com.android.sdklib.SdkManager sdkManager = getSdkManager(); if (sdkManager != null) { com.android.sdklib.repository.local.LocalSdk localSdk = sdkManager.getLocalSdk(); com.android.sdklib.repository.local.LocalPkgInfo[] infos = localSdk.getPkgsInfos(PkgType.PKG_EXTRAS); for (com.android.sdklib.repository.local.LocalPkgInfo info : infos) { com.android.sdklib.repository.descriptors.IPkgDesc d = info.getDesc(); if ((((d.hasVendorId()) && (vendor.equals(d.getVendorId()))) && (d.hasPath())) && ("m2repository".equals(d.getPath()))) { return true; } } } if ((mSdkLocation) != null) { java.io.File repository = new java.io.File(mSdkLocation, (((((com.android.SdkConstants.FD_EXTRAS) + (java.io.File.separator)) + vendor) + (java.io.File.separator)) + "m2repository")); return repository.exists(); } return false; }
@java.lang.Override protected void setUp() throws java.lang.Exception { final java.io.File f = java.io.File.createTempFile("ZipEntryTest", ".zip"); java.io.InputStream is = tests.support.resource.Support_Resources.getStream("hyts_ZipFile.zip"); java.io.FileOutputStream fos = new java.io.FileOutputStream(f); libcore.io.Streams.copy(is, fos); is.close(); fos.close(); zfile = new java.util.zip.ZipFile(f); zentry = zfile.getEntry("File1.txt"); orgSize = zentry.getSize(); orgCompressedSize = zentry.getCompressedSize(); orgCrc = zentry.getCrc(); orgTime = zentry.getTime(); }

@java.lang.Override public final int registerStateCallback(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStateCallback callback, int flags) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); if (downloadRequest == null) { throw new java.lang.NullPointerException("Download request must not be null"); } if (callback == null) { throw new java.lang.NullPointerException("Callback must not be null"); } android.telephony.mbms.DownloadStateCallback exposedCallback = new android.telephony.mbms.vendor.MbmsDownloadServiceBase.FilteredDownloadStateCallback(callback, flags) { @java.lang.Override protected void onRemoteException(android.os.RemoteException e) { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); } }; int result = registerStateCallback(downloadRequest, exposedCallback); if (result == (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.mbms.vendor.DeathRecipient deathRecipient = new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); mDownloadCallbackBinderMap.remove(callback.asBinder()); mDownloadCallbackDeathRecipients.remove(callback.asBinder()); } }; mDownloadCallbackDeathRecipients.put(callback.asBinder(), deathRecipient); callback.asBinder().linkToDeath(deathRecipient, 0); mDownloadCallbackBinderMap.put(callback.asBinder(), exposedCallback); } return result; }
@java.lang.Override public void removeItem(@com.android.annotations.NonNull com.android.ide.common.res2.ResourceItem removedItem, @com.android.annotations.Nullable com.android.ide.common.res2.ResourceItem replacedBy) throws com.android.ide.common.res2.ConsumerException { com.android.ide.common.res2.ResourceFile.FileType removedType = removedItem.getSourceType(); com.android.ide.common.res2.ResourceFile.FileType replacedType = (replacedBy != null) ? replacedBy.getSourceType() : null; if (removedType == replacedType) { if (removedType == (ResourceFile.FileType.MULTI)) { mQualifierWithDeletedValues.add(removedItem.getQualifiers()); } else { } } else if (removedType == (ResourceFile.FileType.SINGLE)) { removeOutFile(removedItem); } else { mQualifierWithDeletedValues.add(removedItem.getQualifiers()); } }

private void processLockedState() { if ((mUiccApplication) == null) { return; } com.android.internal.telephony.IccCardStatus.PinState pin1State = mUiccApplication.getPin1State(); if (pin1State == (com.android.internal.telephony.IccCardStatus.PinState.PINSTATE_ENABLED_PERM_BLOCKED)) { setExternalState(State.PERM_DISABLED); return; } com.android.internal.telephony.IccCardApplicationStatus.AppState appState = mUiccApplication.getState(); switch (appState) { case APPSTATE_PIN : mPinLockedRegistrants.notifyRegistrants(); setExternalState(State.PIN_REQUIRED); break; case APPSTATE_PUK : setExternalState(State.PUK_REQUIRED); break; } }

public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineTransportTypes(nc); combineLinkBandwidths(nc); combineSpecifiers(nc); combineSignalStrength(nc); }

public void testIsHardwareAccelerated() { if ((getGlEsVersion(mActivity)) >= 2) { assertTrue(mHardwareView.isHardwareAccelerated()); assertTrue(mSoftwareView.isHardwareAccelerated()); assertTrue(mManualHardwareView.isHardwareAccelerated()); assertTrue(mManualSoftwareView.isHardwareAccelerated()); assertTrue(mHardwareView.isCanvasHardwareAccelerated()); assertFalse(mSoftwareView.isCanvasHardwareAccelerated()); assertTrue(mManualHardwareView.isCanvasHardwareAccelerated()); assertFalse(mManualSoftwareView.isCanvasHardwareAccelerated()); } else { assertFalse(mHardwareView.isHardwareAccelerated()); assertFalse(mSoftwareView.isHardwareAccelerated()); assertFalse(mManualHardwareView.isHardwareAccelerated()); assertFalse(mManualSoftwareView.isHardwareAccelerated()); assertFalse(mHardwareView.isCanvasHardwareAccelerated()); assertFalse(mSoftwareView.isCanvasHardwareAccelerated()); assertFalse(mManualHardwareView.isCanvasHardwareAccelerated()); assertFalse(mManualSoftwareView.isCanvasHardwareAccelerated()); } }

public boolean verifyHostName(java.lang.String hostName, java.lang.String cn) { if ((((hostName == null) || (hostName.isEmpty())) || (cn == null)) || (cn.isEmpty())) { return false; } if ((hostName.endsWith(".")) && (!(cn.endsWith(".")))) { cn += '.'; } cn = cn.toLowerCase(java.util.Locale.US); if (!(cn.contains("*"))) { return hostName.equals(cn); } if (!(javax.net.ssl.DefaultHostnameVerifier.containsAtLeastTwoDomainNameLabelsExcludingRoot(cn))) { return false; } if ((cn.startsWith("*.")) && (hostName.regionMatches(0, cn, 2, ((cn.length()) - 2)))) { return true; } int asterisk = cn.indexOf('*'); int dot = cn.indexOf('.'); if (asterisk > dot) { return false; } if (!(hostName.regionMatches(0, cn, 0, asterisk))) { return false; } int suffixLength = (cn.length()) - (asterisk + 1); int suffixStart = (hostName.length()) - suffixLength; if ((hostName.indexOf('.', asterisk)) < suffixStart) { return false; } if (!(hostName.regionMatches(suffixStart, cn, (asterisk + 1), suffixLength))) { return false; } return true; }

public libcore.io.StructUcred getsockoptUcred(java.io.FileDescriptor fd, int level, int option) throws libcore.io.ErrnoException { return os.getsockoptUcred(fd, level, option); }
@java.lang.Override public void valueChanged(javax.swing.event.ListSelectionEvent e) { if ((e.getValueIsAdjusting()) == false) { if ((list.getSelectedIndex()) == (-1)) { signOutButton.setEnabled(false); } else { signOutButton.setEnabled(true); com.google.gct.login.ui.UsersListItem selectedUser = ((com.google.gct.login.ui.UsersListItem) (listModel.get(list.getSelectedIndex()))); if (!(selectedUser.isActiveUser())) { com.google.gct.login.GoogleLogin.getInstance().setActiveUser(selectedUser.getUserEmail()); } } } }



public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_primitives s = new com.android.rs.test.ScriptC_primitives(pRS); pRS.setMessageHandler(mRsMessage); if (!(initializeGlobals(s))) { failTest(); } else { s.invoke_primitives_test(0, 0); pRS.finish(); waitForMessage(); } pRS.destroy(); }
@java.lang.Override protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec keySpec) throws java.security.spec.InvalidKeySpecException { if (keySpec instanceof java.security.spec.RSAPrivateCrtKeySpec) { java.security.spec.RSAPrivateCrtKeySpec rsaKeySpec = ((java.security.spec.RSAPrivateCrtKeySpec) (keySpec)); return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey(rsaKeySpec); } else if (keySpec instanceof java.security.spec.RSAPrivateKeySpec) { java.security.spec.RSAPrivateKeySpec rsaKeySpec = ((java.security.spec.RSAPrivateKeySpec) (keySpec)); return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey(rsaKeySpec); } else if (keySpec instanceof java.security.spec.PKCS8EncodedKeySpec) { java.security.spec.PKCS8EncodedKeySpec pkcs8KeySpec = ((java.security.spec.PKCS8EncodedKeySpec) (keySpec)); try { final org.apache.harmony.xnet.provider.jsse.OpenSSLKey key = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_PKCS8_PRIV_KEY_INFO(pkcs8KeySpec.getEncoded())); return org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey.getInstance(key); } catch (java.lang.Exception e) { throw new java.security.spec.InvalidKeySpecException(e); } } throw new java.security.spec.InvalidKeySpecException(("Must use RSAPublicKeySpec or PKCS8EncodedKeySpec; was " + (keySpec.getClass().getName()))); }
private void startStateMachineUpdaters() { try { mNwService.registerObserver(mNetlinkTracker); } catch (android.os.RemoteException e) { android.util.Log.e(mTag, ("Couldn't register NetlinkTracker: " + (e.toString()))); } mAvoidBadWifiTracker.start(); }
public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth); }
@java.lang.Override public com.android.ddmlib.SyncService getSyncService() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.SyncService syncService = new com.android.ddmlib.SyncService(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), this); if (syncService.openSync()) { return syncService; } return null; }
public void testSimpleDeserialize() { java.lang.String json2 = "{\"startLine\":245}"; com.android.ide.common.blame.SourceFragmentPositionRange range2 = gsonDeserializer.fromJson(json2, com.android.ide.common.blame.SourceFragmentPositionRange.class); assertEquals(new com.android.ide.common.blame.SourceFragmentPositionRange(245, (-1), (-1)), range2); }


void registerForNotification(int clientIf, java.lang.String address, int srvcType, int srvcInstanceId, java.util.UUID srvcUuid, int charInstanceId, java.util.UUID charUuid, boolean enable) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if ((isRestrictedCharUuid(charUuid)) || (isRestrictedSrvcUuid(srvcUuid))) { enforcePrivilegedPermission(); } if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ((("registerForNotification() - address=" + address) + " enable: ") + enable)); java.lang.Integer connId = mClientMap.connIdByAddress(clientIf, address); if (connId != null) { gattClientRegisterForNotificationsNative(clientIf, address, srvcType, srvcInstanceId, srvcUuid.getLeastSignificantBits(), srvcUuid.getMostSignificantBits(), charInstanceId, charUuid.getLeastSignificantBits(), charUuid.getMostSignificantBits(), enable); } else { android.util.Log.e(com.android.bluetooth.gatt.GattService.TAG, (("registerForNotification() - No connection for " + address) + "...")); } }
private java.io.File getRootDir() { java.security.CodeSource source = getClass().getProtectionDomain().getCodeSource(); if (source != null) { java.net.URL location = source.getLocation(); try { java.io.File dir = new java.io.File(location.toURI()); assertTrue(dir.getPath(), dir.exists()); while (dir != null) { java.io.File settingsGradle = new java.io.File(dir, "settings.gradle"); if (settingsGradle.exists()) { return dir.getParentFile().getParentFile(); } java.io.File lint = new java.io.File(dir, "lint"); if ((lint.exists()) && (new java.io.File(lint, "cli").exists())) { return dir.getParentFile().getParentFile(); } dir = dir.getParentFile(); } return null; } catch (java.net.URISyntaxException e) { fail(e.getLocalizedMessage()); } } return null; }
@java.lang.Override public java.lang.String getName() { return com.android.server.wifi.RecommendedNetworkEvaluator.TAG; }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); if (mHasFeature) { mUserId = mPrimaryUserId; installAppAsUser(com.android.cts.devicepolicy.DEVICE_ADMIN_APK, mUserId); setProfileOwnerOrFail((((DEVICE_ADMIN_PKG) + "/") + (ADMIN_RECEIVER_TEST_CLASS)), mUserId); } }



public int sendto(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetAddress inetAddress, int port) throws java.net.SocketException, libcore.io.ErrnoException { return os.sendto(fd, bytes, byteOffset, byteCount, flags, inetAddress, port); }
public java.lang.String[] getIsimImpu() { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) return null; return info.getIsimImpu(); } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } }
com.android.ddmlib.RawImage getScreenshot(long timeout, java.util.concurrent.TimeUnit unit) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException;
public void addI8(android.support.v8.renderscript.Byte2 v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addI8(new android.renderscript.Byte2(v.x, v.y)); return; } addI8(v.x); addI8(v.y); }
private void syncViewerSelection() { org.eclipse.jface.viewers.ITreeContentProvider provider = ((org.eclipse.jface.viewers.ITreeContentProvider) (mTreeViewer.getContentProvider())); java.lang.Object input = mTreeViewer.getInput(); if (input == null) { return; } for (java.lang.Object cat : provider.getElements(input)) { java.lang.Object[] children = provider.getElements(cat); boolean allChecked = (children.length) > 0; for (java.lang.Object child : children) { if (child instanceof com.android.sdkuilib.internal.repository.core.PkgItem) { com.android.sdkuilib.internal.repository.core.PkgItem item = ((com.android.sdkuilib.internal.repository.core.PkgItem) (child)); boolean checked = item.isChecked(); allChecked &= checked; if (checked != (mTreeViewer.getChecked(item))) { if (checked) { if (!(mTreeViewer.getExpandedState(cat))) { mTreeViewer.setExpandedState(cat, true); } } checkAndExpandItem(item, checked, true, false); } } } if (allChecked != (mTreeViewer.getChecked(cat))) { mTreeViewer.setChecked(cat, allChecked); } } }

private static com.android.utils.Pair<com.android.resources.ResourceType, java.lang.String> parseResource(java.lang.String url) { if (url.startsWith(com.android.SdkConstants.PREFIX_THEME_REF)) { java.lang.String remainder = url.substring(com.android.SdkConstants.PREFIX_THEME_REF.length()); int colon = url.indexOf(':'); if (colon != (-1)) { if ((remainder.indexOf('/', colon)) == (-1)) { remainder = (((remainder.substring(0, colon)) + (com.android.SdkConstants.RESOURCE_CLZ_ATTR)) + '/') + (remainder.substring(colon)); } url = (com.android.SdkConstants.PREFIX_RESOURCE_REF) + remainder; return com.android.ide.eclipse.adt.internal.resources.ResourceHelper.parseResource(url); } } return com.android.ide.eclipse.adt.internal.resources.ResourceHelper.parseResource(url); }
private void testTransitionSelection(boolean testOpen, boolean testNewTask, boolean bottomWallpaper, boolean topWallpaper, boolean topTranslucent, boolean testSlowStop, java.lang.String expectedTransit) throws java.lang.Exception { java.lang.String bottomStartCmd = getAmStartCmd(android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME); if (bottomWallpaper) { bottomStartCmd += " --ez USE_WALLPAPER true"; } if (testSlowStop) { bottomStartCmd += " --ei STOP_DELAY 3000"; } executeShellCommand(bottomStartCmd); final java.lang.String topActivityName = (topTranslucent) ? android.server.cts.ActivityManagerTransitionSelectionTests.TRANSLUCENT_TOP_ACTIVITY_NAME : android.server.cts.ActivityManagerTransitionSelectionTests.TOP_ACTIVITY_NAME; final java.lang.String[] bottomActivityArray = new java.lang.String[]{ android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME }; final java.lang.String[] topActivityArray = new java.lang.String[]{ topActivityName }; mAmWmState.computeState(mDevice, bottomActivityArray); java.lang.String topStartCmd = getAmStartCmd(topActivityName); if (testNewTask) { topStartCmd += " -f 0x18000000"; } if (topWallpaper) { topStartCmd += " --ez USE_WALLPAPER true"; } if (!testOpen) { topStartCmd += " --ei FINISH_DELAY 1000"; } executeShellCommand(topStartCmd); java.lang.Thread.sleep(5000); if (testOpen) { mAmWmState.computeState(mDevice, topActivityArray); } else { mAmWmState.computeState(mDevice, bottomActivityArray); } assertEquals("Picked wrong transition", expectedTransit, mAmWmState.getWmState().getLastTransition()); }


public void msync(long address, long byteCount, int flags) throws libcore.io.ErrnoException;
@org.junit.Test public void simpleName001() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(com.android.jack.reflect.ReflectTests.TEST001_WITHOUT_SHRINK_SCHEDULABLE).compileAndRunTest(); }
public boolean p2pServDiscCancelReq(java.lang.String id) { return doBooleanCommand(("P2P_SERV_DISC_CANCEL_REQ " + id)); }


@javax.annotation.Nonnull private com.android.jack.ir.ast.JExpression getSimplifiedExpresssion(@javax.annotation.Nonnull com.android.jack.ir.ast.JExpression exprToSimplify) { com.android.jack.ir.ast.JMethodBody body = ((com.android.jack.ir.ast.JMethodBody) (method.getBody())); assert body != null; com.android.jack.ir.ast.JBlock bodyBlock = body.getBlock(); bodyBlock.clear(); com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest(method); tr.append(new com.android.jack.transformations.request.AppendStatement(bodyBlock, exprToSimplify.makeStatement())); tr.commit(); com.android.jack.optimizations.ExpressionSimplifier.Simplifier s = new com.android.jack.optimizations.ExpressionSimplifier.Simplifier(); s.accept(method); org.junit.Assert.assertEquals(1, bodyBlock.getStatements().size()); com.android.jack.ir.ast.JStatement stmt = bodyBlock.getStatements().get(0); org.junit.Assert.assertTrue((stmt instanceof com.android.jack.ir.ast.JExpressionStatement)); com.android.jack.ir.ast.JExpression simplifiedExpr = ((com.android.jack.ir.ast.JExpressionStatement) (stmt)).getExpr(); org.junit.Assert.assertNotNull(simplifiedExpr); return simplifiedExpr; }
private java.awt.image.SampleModel getSampleModel(org.eclipse.swt.graphics.PaletteData palette, int w, int h) { if ((mSampleModel) == null) { return mSampleModel = new java.awt.image.PixelInterleavedSampleModel(java.awt.image.DataBuffer.TYPE_BYTE, w, h, 4, (w * 4), getBandOffset(palette)); } return mSampleModel.createCompatibleSampleModel(w, h); }
public static long countBytes(java.lang.String s, boolean shortLength) throws java.io.UTFDataFormatException { long result = 0; final int length = s.length(); for (int i = 0; i < length; ++i) { char ch = s.charAt(i); if ((ch != 0) && (ch <= 127)) { ++result; } else if (ch <= 2047) { result += 2; } else { result += 3; } if (shortLength && (result > 65535)) { throw new java.io.UTFDataFormatException("String more than 65535 UTF bytes long"); } } return result; }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mMockInvocationListener = org.easymock.EasyMock.createMock(com.android.tradefed.result.ITestInvocationListener.class); mProcessHelper = null; mPython = "python"; mTest = new com.android.tradefed.testtype.VtsMultiDeviceTest() { @java.lang.Override protected com.android.tradefed.util.ProcessHelper createProcessHelper(java.lang.String[] cmd) { assertCommand(cmd); try { createResult(cmd[3]); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } return mProcessHelper; } }; mTest.setBuild(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockBuildInfo()); mTest.setTestCasePath(com.android.tradefed.testtype.VtsMultiDeviceTestTest.TEST_CASE_PATH); mTest.setTestConfigPath(VtsMultiDeviceTest.DEFAULT_TESTCASE_CONFIG_PATH); }
@java.lang.Override public final void addOutput(byte[] data, int offset, int length) { if (!(isCancelled())) { java.lang.String s = null; try { s = new java.lang.String(data, offset, length, "UTF-8"); } catch (java.io.UnsupportedEncodingException e) { s = new java.lang.String(data, offset, length); } if ((mUnfinishedLine) != null) { s = (mUnfinishedLine) + s; mUnfinishedLine = null; } mArray.clear(); int start = 0; do { int index = s.indexOf("\r\n", start); if (index == (-1)) { mUnfinishedLine = s.substring(start); break; } java.lang.String line = s.substring(start, index); if (mTrimLines) { line = line.trim(); } mArray.add(line); start = index + 2; } while (true ); if (!(mArray.isEmpty())) { java.lang.String[] lines = mArray.toArray(new java.lang.String[mArray.size()]); processNewLines(lines); } } }

public void setVar(int index, android.support.v8.renderscript.BaseObj o) { mRS.nScriptSetVarObj(getID(mRS), index, (o == null ? 0 : o.getID(mRS))); }
public byte readByte() { byte result = libcore.io.Memory.peekByte(((address) + (position))); ++(position); return result; }
public static boolean checkForClass(@com.android.annotations.NonNull java.io.File apkFile, @com.android.annotations.NonNull java.lang.String expectedClassName) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { java.io.File classesDex = java.io.File.createTempFile("ApkHelper", ""); classesDex.deleteOnExit(); com.android.build.gradle.integration.common.utils.ZipHelper.extractFile(apkFile, "classes.dex", classesDex); java.io.File dexDump = com.android.build.gradle.integration.common.utils.SdkHelper.getDexDump(); com.android.ide.common.internal.CommandLineRunner commandLineRunner = new com.android.ide.common.internal.CommandLineRunner(new com.android.utils.StdLogger(StdLogger.Level.ERROR)); java.util.List<java.lang.String> command = com.google.common.collect.Lists.newArrayList(); command.add(dexDump.getAbsolutePath()); command.add(classesDex.getAbsolutePath()); java.util.List<java.lang.String> output = com.android.build.gradle.integration.common.utils.ApkHelper.runAndGetOutput(commandLineRunner, command); for (java.lang.String line : output) { java.util.regex.Matcher m = com.android.build.gradle.integration.common.utils.ApkHelper.PATTERN.matcher(line.trim()); if (m.matches()) { java.lang.String className = m.group(1); if (expectedClassName.equals(className)) { return true; } } } return false; }


private static int getStoredEntryDataAlignment(java.lang.String entryName, int defaultAlignment) { if (defaultAlignment <= 0) { return 0; } if (entryName.endsWith(".so")) { return 4096; } else { return defaultAlignment; } }

public java.lang.String getShortDescription() { java.lang.String attr = getDescAttribute(); if (attr != null) { return java.lang.String.format("%1$s (%2$s)", attr, mDescriptor.getUiName()); } return mDescriptor.getUiName(); }



@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressor()) == null) { status = PASS; } else { logFail(); status = RETEST; delay(); } } next(); }
public final void onSmsReceived(int token, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException("Feature not ready."); } try { mListener.onSmsReceived(token, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, ("Can not deliver sms: " + (e.getMessage()))); acknowledgeSms(token, 0, android.telephony.ims.stub.ImsSmsImplBase.DELIVER_STATUS_ERROR); } } }


@org.junit.Test public void testLamba015() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA015).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }


@java.lang.Override @javax.annotation.Nonnull public void libToExe(@javax.annotation.Nonnull java.io.File in, @javax.annotation.Nonnull java.io.File out, boolean zipFile) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add("java"); args.add("-cp"); args.add(jackPrebuilt.getAbsolutePath()); if ((incrementalFolder) != null) { args.add(com.android.jack.experimental.incremental.Main.class.getName()); args.add("--incremental-folder"); args.add(incrementalFolder.getAbsolutePath()); } else { args.add(com.android.jack.Main.class.getName()); } if (withDebugInfos) { args.add("-D"); args.add("jack.dex.optimize=false"); } else { args.add("-D"); args.add("jack.dex.optimize=true"); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); args.add("--import"); args.add(in.getAbsolutePath()); for (java.io.File staticLib : staticLibs) { args.add("--import"); args.add(staticLib.getAbsolutePath()); } if (zipFile) { args.add("--output-dex-zip"); } else { args.add("--output-dex"); } args.add(out.getAbsolutePath()); com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(outRedirectStream); exec.setOut(errRedirectStream); exec.setVerbose(true); if (!(exec.run())) { throw new java.lang.RuntimeException("Jack compiler exited with an error"); } }

public void iccCloseLogicalChannel(int channel, android.os.Message response) { loglocal(("Close Logical Channel: " + channel)); mCi.iccCloseLogicalChannel(channel, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_CLOSE_LOGICAL_CHANNEL_DONE, response)); }
private void playUri(final android.net.Uri uri, long timeToPlayMs, int usage, int contentType) throws java.lang.Exception { android.media.MediaPlayer mp = new android.media.MediaPlayer(); assertNotNull(mp); mp.setDataSource(mContext, uri); mp.setAudioAttributes(new android.media.AudioAttributes.Builder().setUsage(usage).setContentType(contentType).build()); mp.prepare(); mp.start(); java.lang.Thread.sleep(timeToPlayMs); mp.stop(); mp.release(); java.lang.Thread.sleep(timeToPlayMs); assertFalse(mAudioManager.isMusicActive()); }


public void setAdvertisingData(android.bluetooth.le.AdvertiseData advertiseData) { try { gatt.setAdvertisingData(this.advertiserId, advertiseData); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
private boolean sendNotificationCustomComponent(java.lang.Integer count, java.lang.String number, android.app.PendingIntent pendingIntent, boolean isSettingsIntent) { if ((mNotificationComponent) != null) { android.content.Intent intent = new android.content.Intent(); intent.setFlags(Intent.FLAG_RECEIVER_FOREGROUND); intent.setComponent(mNotificationComponent); intent.setAction(TelephonyManager.ACTION_SHOW_VOICEMAIL_NOTIFICATION); if (count != null) { intent.putExtra(TelephonyManager.EXTRA_NOTIFICATION_COUNT, count); } if ((count == null) || (count > 0)) { if (!(android.text.TextUtils.isEmpty(number))) { intent.putExtra(TelephonyManager.EXTRA_VOICEMAIL_NUMBER, number); } if (pendingIntent != null) { intent.putExtra((isSettingsIntent ? android.telephony.TelephonyManager.EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT : android.telephony.TelephonyManager.EXTRA_CALL_VOICEMAIL_INTENT), pendingIntent); } } mContext.sendBroadcast(intent); return true; } return false; }
@java.lang.Override public void hold(java.lang.String callId) { mHandler.obtainMessage(android.telecom.ConnectionService.MSG_HOLD, callId).sendToTarget(); }


@com.googlecode.android_scripting.rpc.Rpc(description = "Get Bluetooth Gatt Services") public java.util.ArrayList<java.lang.String> gattClientGetDiscoveredDescriptorUuids(@com.googlecode.android_scripting.rpc.RpcParameter(name = "index") java.lang.Integer index, @com.googlecode.android_scripting.rpc.RpcParameter(name = "serviceIndex") java.lang.Integer serviceIndex, @com.googlecode.android_scripting.rpc.RpcParameter(name = "characteristicUuid") java.lang.String characteristicUuid) throws java.lang.Exception { if ((mBluetoothGattDiscoveredServicesList.get(index)) != null) { if ((mBluetoothGattDiscoveredServicesList.get(index).get(serviceIndex)) != null) { android.bluetooth.BluetoothGattService service = mBluetoothGattDiscoveredServicesList.get(index).get(serviceIndex); java.util.UUID cUuid = java.util.UUID.fromString(characteristicUuid); if ((service.getCharacteristic(cUuid)) != null) { java.util.ArrayList<java.lang.String> uuidList = new java.util.ArrayList<java.lang.String>(); for (android.bluetooth.BluetoothGattDescriptor mDesc : service.getCharacteristic(cUuid).getDescriptors()) { uuidList.add(mDesc.getUuid().toString()); } return uuidList; } else { throw new java.lang.Exception(("Invalid characeristicUuid : " + characteristicUuid)); } } else { throw new java.lang.Exception(("Invalid serviceIndex input:" + index)); } } else { throw new java.lang.Exception(("Invalid index input:" + index)); } }



@org.junit.Test public void testTransportModeTransformBinderDeath() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT)); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN)); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }



@java.lang.Override public final int startActivityAsUser(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int startFlags, android.app.ProfilerInfo profilerInfo, android.os.Bundle bOptions, int userId) { enforceNotIsolatedCaller("startActivity"); userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, "startActivity", null); return mActivityStarter.startActivityMayWait(caller, (-1), callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, startFlags, profilerInfo, null, null, bOptions, false, userId, null, null, "startActivityAsUser"); }




void multiplyByPositiveInt(int w) { java.math.NativeBN.BN_mul_word(this.bignum, w); }


boolean onMediaButton(int type) { if (hasAnyCalls()) { if ((HeadsetMediaButton.SHORT_PRESS) == type) { com.android.server.telecom.Call ringingCall = getFirstCallWithState(CallState.RINGING); if (ringingCall == null) { mCallAudioManager.toggleMute(); return true; } else { ringingCall.answer(VideoProfile.STATE_AUDIO_ONLY); return true; } } else if ((HeadsetMediaButton.LONG_PRESS) == type) { android.telecom.Log.d(this, "handleHeadsetHook: longpress -> hangup"); com.android.server.telecom.Call callToHangup = getFirstCallWithState(CallState.RINGING, CallState.DIALING, CallState.PULLING, CallState.ACTIVE, CallState.ON_HOLD); if (callToHangup != null) { callToHangup.disconnect(); return true; } } } return false; }
public java.net.URL getEntryUrlOrNull(java.lang.String entryName) { if ((jarFile.findEntry(entryName)) != null) { try { return new java.net.URL("jar", null, (-1), (((fileUri) + "!/") + entryName), this); } catch (java.net.MalformedURLException e) { throw new java.lang.RuntimeException("Invalid entry name", e); } } return null; }
private static org.eclipse.jdt.core.IClasspathContainer allocateLibraryContainer(org.eclipse.jdt.core.IJavaProject javaProject) { final org.eclipse.core.resources.IProject iProject = javaProject.getProject(); com.android.ide.eclipse.adt.AdtPlugin plugin = com.android.ide.eclipse.adt.AdtPlugin.getDefault(); if (plugin == null) { return null; } try { org.eclipse.jdt.core.IClasspathEntry[] rawClasspath = javaProject.getRawClasspath(); org.eclipse.jdt.core.IClasspathEntry[] oldRawClasspath = rawClasspath; boolean foundLibrariesContainer = false; for (org.eclipse.jdt.core.IClasspathEntry entry : rawClasspath) { int kind = entry.getEntryKind(); if (kind == (org.eclipse.jdt.core.IClasspathEntry.CPE_CONTAINER)) { java.lang.String path = entry.getPath().toString(); if (AdtConstants.CONTAINER_LIBRARIES.equals(path)) { foundLibrariesContainer = true; break; } } } if (foundLibrariesContainer == false) { rawClasspath = com.android.ide.eclipse.adt.internal.project.ProjectHelper.addEntryToClasspath(rawClasspath, org.eclipse.jdt.core.JavaCore.newContainerEntry(new org.eclipse.core.runtime.Path(com.android.ide.eclipse.adt.AdtConstants.CONTAINER_LIBRARIES), true)); } if (rawClasspath != oldRawClasspath) { javaProject.setRawClasspath(rawClasspath, new org.eclipse.core.runtime.NullProgressMonitor()); } } catch (org.eclipse.jdt.core.JavaModelException e) { return null; } com.android.ide.eclipse.adt.internal.sdk.ProjectState state = com.android.ide.eclipse.adt.internal.sdk.Sdk.getProjectState(iProject); if (state == null) { return null; } java.util.List<org.eclipse.jdt.core.IClasspathEntry> entries = new java.util.ArrayList<org.eclipse.jdt.core.IClasspathEntry>(); org.eclipse.core.resources.IWorkspaceRoot workspaceRoot = org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot(); java.util.Set<java.io.File> jarFiles = new java.util.HashSet<java.io.File>(); java.util.Set<org.eclipse.core.resources.IProject> refProjects = new java.util.HashSet<org.eclipse.core.resources.IProject>(); java.util.List<org.eclipse.core.resources.IProject> libProjects = state.getFullLibraryProjects(); for (org.eclipse.core.resources.IProject libProject : libProjects) { org.eclipse.core.resources.IFolder outputFolder = com.android.ide.eclipse.adt.internal.project.BaseProjectHelper.getAndroidOutputFolder(libProject); if (outputFolder != null) { org.eclipse.core.resources.IFile jarIFile = outputFolder.getFile(((libProject.getName().toLowerCase()) + (com.android.SdkConstants.DOT_JAR))); java.util.List<org.eclipse.core.runtime.IPath> srcs = com.android.ide.eclipse.adt.internal.project.BaseProjectHelper.getSourceClasspaths(libProject); org.eclipse.core.runtime.IPath sourceFolder = null; for (org.eclipse.core.runtime.IPath src : srcs) { org.eclipse.core.resources.IFolder srcFolder = workspaceRoot.getFolder(src); if ((srcFolder.isDerived()) == false) { sourceFolder = src; break; } } org.eclipse.jdt.core.IClasspathEntry entry = org.eclipse.jdt.core.JavaCore.newLibraryEntry(jarIFile.getLocation(), sourceFolder, null, true); entries.add(entry); com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.getDependencyListFromClasspath(libProject, refProjects, jarFiles, true); com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.getJarListFromLibsFolder(libProject, jarFiles); } } com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.processReferencedProjects(iProject, refProjects, jarFiles); com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.getJarListFromLibsFolder(iProject, jarFiles); if (((state.getTarget()) != null) && ((state.getTarget().getVersion().getApiLevel()) <= 15)) { java.io.File annotationsJar = new java.io.File(com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent().getSdkLocation(), (((((com.android.SdkConstants.FD_TOOLS) + (java.io.File.separator)) + (com.android.SdkConstants.FD_SUPPORT)) + (java.io.File.separator)) + (com.android.SdkConstants.FN_ANNOTATIONS_JAR))); jarFiles.add(annotationsJar); } for (org.eclipse.core.resources.IProject p : refProjects) { entries.add(org.eclipse.jdt.core.JavaCore.newProjectEntry(p.getFullPath(), true)); } com.android.sdklib.build.JarListSanitizer sanitizer = new com.android.sdklib.build.JarListSanitizer(iProject.getFolder(SdkConstants.FD_OUTPUT).getLocation().toFile(), new com.android.ide.eclipse.adt.AndroidPrintStream(iProject, null, com.android.ide.eclipse.adt.AdtPlugin.getOutStream())); java.lang.String errorMessage = null; try { java.util.List<java.io.File> sanitizedList = sanitizer.sanitize(jarFiles); for (java.io.File jarFile : sanitizedList) { if (jarFile instanceof com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.CPEFile) { com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.CPEFile cpeFile = ((com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.CPEFile) (jarFile)); org.eclipse.jdt.core.IClasspathEntry e = cpeFile.getClasspathEntry(); entries.add(org.eclipse.jdt.core.JavaCore.newLibraryEntry(e.getPath(), e.getSourceAttachmentPath(), e.getSourceAttachmentRootPath(), e.getAccessRules(), e.getExtraAttributes(), true)); } else { java.lang.String jarPath = jarFile.getAbsolutePath(); org.eclipse.core.runtime.IPath sourceAttachmentPath = null; org.eclipse.jdt.core.IClasspathAttribute javaDocAttribute = null; java.io.File jarProperties = new java.io.File((jarPath + (com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.DOT_PROPERTIES))); if (jarProperties.isFile()) { java.util.Properties p = new java.util.Properties(); java.io.InputStream is = null; try { p.load((is = new java.io.FileInputStream(jarProperties))); java.lang.String value = p.getProperty(com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.ATTR_SRC); if (value != null) { java.io.File srcPath = com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.getFile(jarFile, value); if (srcPath.exists()) { sourceAttachmentPath = new org.eclipse.core.runtime.Path(srcPath.getAbsolutePath()); } } value = p.getProperty(com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.ATTR_DOC); if (value != null) { java.io.File docPath = com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.getFile(jarFile, value); if (docPath.exists()) { try { javaDocAttribute = org.eclipse.jdt.core.JavaCore.newClasspathAttribute(IClasspathAttribute.JAVADOC_LOCATION_ATTRIBUTE_NAME, docPath.toURI().toURL().toString()); } catch (java.net.MalformedURLException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, "Failed to process 'doc' attribute for %s", jarProperties.getAbsolutePath()); } } } } catch (java.io.FileNotFoundException e) { } catch (java.io.IOException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, "Failed to read %s", jarProperties.getAbsolutePath()); } finally { if (is != null) { try { is.close(); } catch (java.io.IOException e) { } } } } if (javaDocAttribute != null) { entries.add(org.eclipse.jdt.core.JavaCore.newLibraryEntry(new org.eclipse.core.runtime.Path(jarPath), sourceAttachmentPath, null, new org.eclipse.jdt.core.IAccessRule[0], new org.eclipse.jdt.core.IClasspathAttribute[]{ javaDocAttribute }, true)); } else { entries.add(org.eclipse.jdt.core.JavaCore.newLibraryEntry(new org.eclipse.core.runtime.Path(jarPath), sourceAttachmentPath, null, true)); } } } } catch (com.android.sdklib.build.JarListSanitizer.DifferentLibException e) { errorMessage = e.getMessage(); com.android.ide.eclipse.adt.AdtPlugin.printErrorToConsole(iProject, ((java.lang.Object[]) (e.getDetails()))); } catch (com.android.sdklib.build.JarListSanitizer.Sha1Exception e) { errorMessage = e.getMessage(); } processError(iProject, errorMessage, AdtConstants.MARKER_DEPENDENCY, true); return new com.android.ide.eclipse.adt.internal.project.AndroidClasspathContainer(entries.toArray(new org.eclipse.jdt.core.IClasspathEntry[entries.size()]), new org.eclipse.core.runtime.Path(com.android.ide.eclipse.adt.AdtConstants.CONTAINER_LIBRARIES), "Android Dependencies", org.eclipse.jdt.core.IClasspathContainer.K_APPLICATION); }
@java.lang.Override public void run() { try { java.lang.Thread.sleep(mSleep); mResult = mCache.get("foo"); } catch (java.lang.InterruptedException e) { mException = e; } }


public void registerJavaArtifact(@com.android.annotations.NonNull java.lang.String name, @com.android.annotations.NonNull com.android.build.gradle.api.BaseVariant variant, @com.android.annotations.NonNull java.lang.String assembleTaskName, @com.android.annotations.NonNull java.lang.String javaCompileTaskName, @com.android.annotations.NonNull java.util.Collection<java.io.File> generatedSourceFolders, @com.android.annotations.NonNull java.lang.Iterable<java.lang.String> ideSetupTaskNames, @com.android.annotations.NonNull org.gradle.api.artifacts.Configuration configuration, @com.android.annotations.NonNull java.io.File classesFolder, @com.android.annotations.Nullable com.android.builder.model.SourceProvider sourceProvider) { com.android.builder.model.ArtifactMetaData artifactMetaData = extraArtifactMap.get(name); if (artifactMetaData == null) { throw new java.lang.IllegalArgumentException("Artifact with name $name is not yet registered. Use registerArtifactType()"); } if ((artifactMetaData.getType()) != (com.android.builder.model.ArtifactMetaData.TYPE_JAVA)) { throw new java.lang.IllegalArgumentException("Artifact with name $name is not of type JAVA"); } com.android.builder.model.JavaArtifact artifact = new com.android.build.gradle.internal.model.JavaArtifactImpl(name, assembleTaskName, javaCompileTaskName, ideSetupTaskNames, generatedSourceFolders, classesFolder, new com.android.build.gradle.internal.ConfigurationDependencies(configuration), sourceProvider, null); extraJavaArtifacts.put(variant.getName(), artifact); }



@java.lang.Override void test() { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerStatus(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.StatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressor()) == null) { status = PASS; } else { status = FAIL; } } next(); } }); delay(); }
@java.lang.Override public java.lang.String parseCurrency(android.icu.dev.test.format.DataDrivenNumberFormatTestData tuple) { android.icu.text.DecimalFormat_ICU58 fmt = createDecimalFormat(tuple); java.text.ParsePosition ppos = new java.text.ParsePosition(0); CurrencyAmount currAmt = fmt.parseCurrency(tuple.parse, ppos); if ((ppos.getIndex()) == 0) { return (("Parse failed; got " + currAmt) + ", but expected ") + (tuple.output); } if (tuple.output.equals("fail")) { return null; } java.lang.Number expected = android.icu.dev.test.format.NumberFormatDataDrivenTest.toNumber(tuple.output); java.lang.Number actual = currAmt.getNumber(); if ((((expected.doubleValue()) != (actual.doubleValue())) && (!(java.lang.Double.isNaN(expected.doubleValue())))) && (!(java.lang.Double.isNaN(expected.doubleValue())))) { return (("Expected: " + expected) + ", got: ") + actual; } if (!(tuple.outputCurrency.equals(currAmt.getCurrency().toString()))) { return (("Expected currency: " + (tuple.outputCurrency)) + ", got: ") + (currAmt.getCurrency()); } return null; }


void deviceConnected(java.lang.String bdaddr, boolean absoluteVolume) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ((("deviceConnected: bdaddr=" + bdaddr) + " absoluteVolume=") + absoluteVolume)); mAudioManager.avrcpSupportsAbsoluteVolume(bdaddr, absoluteVolume); }
void dumpProto(com.android.bluetooth.btservice.BluetoothProto.BluetoothLog proto) { synchronized(mScanEvents) { for (com.android.bluetooth.btservice.BluetoothProto.ScanEvent event : mScanEvents) { proto.addScanEvent(event); } } }
@java.lang.Override public void invokeOemRilRequestRaw(byte[] data, android.os.Message response) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_OEM_HOOK_RAW, response, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog(((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "[") + (com.android.internal.telephony.uicc.IccUtils.bytesToHexString(data))) + "]")); rr.mParcel.writeByteArray(data); send(rr); }
@org.junit.Test public void testOemPaid() { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); nc.maybeMarkCapabilitiesRestricted(); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); }
public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }

private void testConnectViaDirectProxyToHttps(libcore.java.net.URLConnectionTest.ProxyConfig proxyConfig) throws java.lang.Exception { TestSSLContext testSSLContext = TestSSLContext.create(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), false); server.enqueue(new com.google.mockwebserver.MockResponse().setBody("this response comes via HTTPS")); server.play(); java.net.URL url = server.getUrl("/foo"); javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (proxyConfig.connect(server, url))); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); assertContent("this response comes via HTTPS", connection); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); assertEquals("GET /foo HTTP/1.1", request.getRequestLine()); }

@com.android.internal.annotations.VisibleForTesting public static android.net.NetworkStats javaReadNetworkStatsDetail(java.io.File detailPath, int limitUid, java.lang.String[] limitIfaces, int limitTag) throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 24); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); int idx = 1; int lastIdx = 1; com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(detailPath)); reader.finishLine(); while (reader.hasMoreData()) { idx = reader.nextInt(); if (idx != (lastIdx + 1)) { throw new java.net.ProtocolException(((("inconsistent idx=" + idx) + " after lastIdx=") + lastIdx)); } lastIdx = idx; entry.iface = reader.nextString(); entry.tag = kernelToTag(reader.nextString()); entry.uid = reader.nextInt(); entry.set = reader.nextInt(); entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if ((((limitIfaces == null) || (com.android.internal.util.ArrayUtils.contains(limitIfaces, entry.iface))) && ((limitUid == (UID_ALL)) || (limitUid == (entry.uid)))) && ((limitTag == (TAG_ALL)) || (limitTag == (entry.tag)))) { stats.addValues(entry); } reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(("problem parsing idx " + idx), e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
@org.junit.Test public void testCompile017() throws java.lang.Exception { java.lang.String packageName = "com.android.jack.switchstatement.test017.jack"; java.lang.String classPrefix = (packageName.replace('.', '_')) + "_"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put("Enum1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum11"), false)); input.put("Enum1$Enum11", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum11"), false)); input.put("Enum1$Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum11"), true)); checkCompiledCode(packageName, input); }
public void addU16(int v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addU16(v); return; } if ((v < 0) || (v > 65535)) { android.util.Log.e("rs", (("FieldPacker.addU16( " + v) + " )")); throw new java.lang.IllegalArgumentException("Saving value out of range for type"); } align(2); mData[((mPos)++)] = ((byte) (v & 255)); mData[((mPos)++)] = ((byte) (v >> 8)); }


public void fillInNotifierBundle(android.os.Bundle m) { m.putInt("GsmSignalStrength", mGsmSignalStrength); m.putInt("GsmBitErrorRate", mGsmBitErrorRate); m.putInt("CdmaDbm", mCdmaDbm); m.putInt("CdmaEcio", mCdmaEcio); m.putInt("EvdoDbm", mEvdoDbm); m.putInt("EvdoEcio", mEvdoEcio); m.putInt("EvdoSnr", mEvdoSnr); m.putInt("LteSignalStrength", mLteSignalStrength); m.putInt("LteRsrp", mLteRsrp); m.putInt("LteRsrq", mLteRsrq); m.putInt("LteRssnr", mLteRssnr); m.putInt("LteCqi", mLteCqi); m.putInt("TdScdma", mTdScdmaRscp); m.putBoolean("isGsm", java.lang.Boolean.valueOf(isGsm)); }
@java.lang.Override public void loadAnnotations(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loading, @javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader classOrInterfaceLoader) { com.android.jack.ir.ast.JSession session = com.android.jack.Jack.getSession(); com.android.jack.jayce.v0002.io.ExportSession exportSession = new com.android.jack.jayce.v0002.io.ExportSession(session.getPhantomLookup(), session, com.android.jack.jayce.NodeLevel.STRUCTURE); for (com.android.jack.jayce.v0002.nodes.NAnnotation annotation : annotations) { com.android.jack.ir.ast.JAnnotation annotationLiteral = annotation.exportAsJast(exportSession); loading.addAnnotation(annotationLiteral); annotationLiteral.updateParents(loading); } }

public java.util.ArrayList<java.security.Provider.Service> getServices(java.lang.String algorithm) { int newCacheVersion = org.apache.harmony.security.fortress.Services.getCacheVersion(); org.apache.harmony.security.fortress.Engine.ServiceCacheEntry cacheEntry = this.serviceCache; final java.lang.String algoUC = algorithm.toUpperCase(java.util.Locale.US); if (((cacheEntry != null) && (cacheEntry.algorithm.equalsIgnoreCase(algoUC))) && (newCacheVersion == (cacheEntry.cacheVersion))) { return cacheEntry.services; } java.lang.String name = ((this.serviceName) + ".") + algoUC; java.util.ArrayList<java.security.Provider.Service> services = org.apache.harmony.security.fortress.Services.getServices(name); this.serviceCache = new org.apache.harmony.security.fortress.Engine.ServiceCacheEntry(algoUC, newCacheVersion, services); return services; }

public static native long EVP_SignInit(java.lang.String algorithm);

public void onLeScan(android.bluetooth.BluetoothDevice device, int rssi, byte[] scanRecord);


private void doSend() { int status = BluetoothShare.STATUS_SUCCESS; while ((mFileInfo) == null) { try { java.lang.Thread.sleep(50); } catch (java.lang.InterruptedException e) { status = BluetoothShare.STATUS_CANCELED; } } if (!(mConnected)) { status = BluetoothShare.STATUS_CONNECTION_ERROR; } if (status == (BluetoothShare.STATUS_SUCCESS)) { if ((mFileInfo.mFileName) != null) { status = sendFile(mFileInfo); } else { status = mFileInfo.mStatus; } waitingForShare = true; } else { com.android.bluetooth.opp.Constants.updateShareStatus(mContext1, mInfo.mId, status); } if (status == (BluetoothShare.STATUS_SUCCESS)) { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SHARE_COMPLETE; msg.obj = mInfo; msg.sendToTarget(); } else { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SESSION_ERROR; mInfo.mStatus = status; msg.obj = mInfo; msg.sendToTarget(); } }

@java.lang.Override public java.nio.ByteBuffer put(byte value) { checkNotFreed(); if (isReadOnly) { throw new java.nio.ReadOnlyBufferException(); } if ((position) == (limit)) { throw new java.nio.BufferOverflowException(); } this.block.pokeByte(((offset) + ((position)++)), value); return this; }
boolean startVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); int connectionState = mStateMachine.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mStateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_START, device); return true; }

public void test_ConstructorLjava_nio_charset_CharsetNull() { java.nio.charset.CharsetEncoder ech = new org.apache.harmony.nio_char.tests.java.nio.charset.CharsetEncoderTest.MockCharsetEncoderForHarmony491(null, 1, 1); assertNull(ech.charset()); }
public void runTestCaseInBatchMode(com.android.cts.TestPackage testPackage, final java.lang.String javaClassName, java.lang.String profile) throws com.android.cts.DeviceDisconnectedException { if (javaClassName == null) { return; } java.lang.String appNameSpace = testPackage.getAppNameSpace(); java.lang.String runner = testPackage.getInstrumentationRunner(); if (runner == null) { runner = com.android.cts.TestDevice.DEFAULT_TEST_RUNNER_NAME; } java.lang.String cmdHeader = ((("am instrument -w -r -e class " + javaClassName) + " -e profile ") + profile) + " "; final java.lang.String commandStr = ((cmdHeader + appNameSpace) + "/") + runner; com.android.cts.Log.d(commandStr); mBatchModeResultParser = new com.android.cts.TestDevice.BatchModeResultParser(testPackage); executeShellCommand(commandStr, mBatchModeResultParser); }

private void assertBackgroundPeriodAlarmNotPending() { assertFalse("background period alarm is pending", mAlarmManager.isPending(SupplicantWifiScannerImpl.BACKGROUND_PERIOD_ALARM_TAG)); }
public void testVFE7() { try { java.lang.Class.forName("dot.junit.opcodes.iget_char.d.T_iget_char_12"); fail("expected a verification exception"); } catch (java.lang.Throwable t) { dot.junit.DxUtil.checkVerifyException(t); } }


public com.android.builder.ProductFlavor setSigningKeyAlias(java.lang.String signingKeyAlias) { mSigningKeyAlias = signingKeyAlias; return this; }
static android.telephony.SignalStrength convertHalSignalStrength(android.hardware.radio.V1_0.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gw.signalStrength, signalStrength.gw.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, signalStrength.tdScdma.rscp); }


public void testConnectViaHttpProxyToHttpsUsingBadProxyAndHttpResponseCache() throws java.lang.Exception { TestSSLContext testSSLContext = TestSSLContext.create(); initResponseCache(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), true); com.google.mockwebserver.MockResponse badProxyResponse = new com.google.mockwebserver.MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders().setBody("bogus proxy connect response content"); server.enqueue(badProxyResponse); server.enqueue(new com.google.mockwebserver.MockResponse().setBody("response")); server.play(); java.net.URL url = new java.net.URL("https://android.com/foo"); libcore.java.net.URLConnectionTest.ProxyConfig proxyConfig = libcore.java.net.URLConnectionTest.ProxyConfig.PROXY_SYSTEM_PROPERTY; javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (proxyConfig.connect(server, url))); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); connection.setHostnameVerifier(new libcore.java.net.URLConnectionTest.RecordingHostnameVerifier()); assertContent("response", connection); com.google.mockwebserver.RecordedRequest connect = server.takeRequest(); assertEquals("CONNECT android.com:443 HTTP/1.1", connect.getRequestLine()); assertContains(connect.getHeaders(), "Host: android.com"); }
private void showErrorMessage(java.lang.String message) { new android.app.AlertDialog.Builder(this).setTitle(R.string.error_title).setMessage(message).setPositiveButton(android.R.string.ok, null).show(); }
java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, "Need BLUETOOTH permission"); java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<>(); if ((mPbapStateMachine) != null) { devices.add(mPbapStateMachine.getRemoteDevice()); } return devices; }
@java.lang.Override public int hashCode() { int primeNum = 31; return ((((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaEcio) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrp) * primeNum)) + ((mLteRsrq) * primeNum)) + ((mLteRssnr) * primeNum)) + ((mLteCqi) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mTdScdmaRscp) * primeNum)) + (isGsm ? 1 : 0)) + (mUseOnlyRsrpForLteLevel ? 1 : 0); }

public void testMergeByCount() throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger(); assertEquals(31, merger.size()); }
@android.test.suitebuilder.annotation.LargeTest public void testExistingEUserI() { int userSetting = com.android.internal.content.PackageHelper.APP_INSTALL_INTERNAL; int iFlags = PackageManager.INSTALL_EXTERNAL; setExistingXUserX(userSetting, iFlags, PackageInfo.INSTALL_LOCATION_PREFER_EXTERNAL); }
public static com.android.settings.search.Index getInstance(android.content.Context context) { if ((com.android.settings.search.Index.sInstance) == null) { com.android.settings.search.Index.sInstance = new com.android.settings.search.Index(context.getApplicationContext(), com.android.settings.search.Index.BASE_AUTHORITY); } return com.android.settings.search.Index.sInstance; }
private static int deepHashCodeElement(java.lang.Object element) { java.lang.Class<?> cl; if (element == null) { return 0; } cl = element.getClass().getComponentType(); if (cl == null) { return element.hashCode(); } if (!(cl.isPrimitive())) { return java.util.Arrays.deepHashCode(((java.lang.Object[]) (element))); } if (cl.equals(int.class)) { return java.util.Arrays.hashCode(((int[]) (element))); } if (cl.equals(char.class)) { return java.util.Arrays.hashCode(((char[]) (element))); } if (cl.equals(boolean.class)) { return java.util.Arrays.hashCode(((boolean[]) (element))); } if (cl.equals(byte.class)) { return java.util.Arrays.hashCode(((byte[]) (element))); } if (cl.equals(long.class)) { return java.util.Arrays.hashCode(((long[]) (element))); } if (cl.equals(float.class)) { return java.util.Arrays.hashCode(((float[]) (element))); } if (cl.equals(double.class)) { return java.util.Arrays.hashCode(((double[]) (element))); } return java.util.Arrays.hashCode(((short[]) (element))); }
public void testWildcardMatchingEmptySubstring() { assertTrue(verifier.verifyHostName("imap.google.com", "imap*.google.com")); }
@javax.annotation.CheckForNull com.android.jack.ir.ast.JAbstractMethodBody loadBody(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod loading) throws com.android.jack.ir.ast.JTypeLookupException, com.android.jack.lookup.JMethodLookupException;
public native void msync(long address, long byteCount, int flags) throws libcore.io.ErrnoException;
public void recordHistory(android.net.NetworkStatsHistory input, long start, long end) { final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, 0L, 0L, 0L, 0L, 0L); for (int i = 0; i < (input.bucketCount); i++) { final long bucketStart = input.bucketStart[i]; final long bucketEnd = bucketStart + (input.bucketDuration); if ((bucketStart < start) || (bucketEnd > end)) continue; entry.rxBytes = android.net.NetworkStatsHistory.getLong(input.rxBytes, i, 0L); entry.rxPackets = android.net.NetworkStatsHistory.getLong(input.rxPackets, i, 0L); entry.txBytes = android.net.NetworkStatsHistory.getLong(input.txBytes, i, 0L); entry.txPackets = android.net.NetworkStatsHistory.getLong(input.txPackets, i, 0L); entry.operations = android.net.NetworkStatsHistory.getLong(input.operations, i, 0L); recordData(bucketStart, bucketEnd, entry); } }

@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println("Skipping dump in APP SERVICES, see bluetooth_manager section."); writer.println("Use --print argument for dumpsys direct from AdapterService."); return; } verboseLog(("dumpsys arguments, check for protobuf output: " + (android.text.TextUtils.join(" ", args)))); if (args[0].equals("--proto-bin")) { dumpMetrics(fd); return; } writer.println("Bonded devices:"); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println((((((" " + (device.getAddress())) + " [") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + "] ") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dump(sb); } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }

public static java.lang.String getActiveTags(android.content.Context context, android.content.SharedPreferences prefs, boolean onlyAvailable) { java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.pref_key_tags), com.android.traceur.Receiver.getDefaultTagList()); java.lang.StringBuilder sb = new java.lang.StringBuilder((10 * (tags.size()))); java.util.TreeMap<java.lang.String, java.lang.String> available = (onlyAvailable) ? com.android.traceur.AtraceUtils.atraceListCategories() : null; for (java.lang.String s : tags) { if (onlyAvailable && (!(available.containsKey(s)))) continue; if ((sb.length()) > 0) { sb.append(' '); } sb.append(s); } java.lang.String s = sb.toString(); android.util.Log.v(com.android.traceur.Receiver.TAG, (((("getActiveTags(onlyAvailable=" + onlyAvailable) + ") = \"") + s) + "\"")); return s; }
@com.android.annotations.NonNull public java.lang.String getDirName() { if (!(multiOutput)) { return variantData.getVariantConfiguration().getDirName(); } return variantData.getVariantConfiguration().computeDirNameWithSplits(densityFilter, abiFilter); }
private void sendSMSToSelf() { android.app.PendingIntent sentIntent = android.app.PendingIntent.getBroadcast(getContext(), 0, new android.content.Intent(android.permission2.cts.NoReceiveSmsPermissionTest.MESSAGE_SENT_ACTION), PendingIntent.FLAG_ONE_SHOT); android.app.PendingIntent deliveryIntent = android.app.PendingIntent.getBroadcast(getContext(), 0, new android.content.Intent(android.permission2.cts.NoReceiveSmsPermissionTest.MESSAGE_STATUS_RECEIVED_ACTION), PendingIntent.FLAG_ONE_SHOT); android.telephony.TelephonyManager telephony = ((android.telephony.TelephonyManager) (getContext().getSystemService(Context.TELEPHONY_SERVICE))); java.lang.String currentNumber = telephony.getLine1Number(); android.util.Log.i(android.permission2.cts.NoReceiveSmsPermissionTest.LOG_TAG, java.lang.String.format("Sending SMS to self: %s", currentNumber)); sendSms(currentNumber, "test message", sentIntent, deliveryIntent); }
public void supplyIccPuk2ForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int remainingAttempts) { responseInts(responseInfo, remainingAttempts); }

private void registerForNsdSetting() { android.database.ContentObserver contentObserver = new android.database.ContentObserver(this.getHandler()) { @java.lang.Override public void onChange(boolean selfChange) { notifyEnabled(isNsdEnabled()); } }; mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor(Settings.Global.NSD_ON), false, contentObserver); }
private static int runMonoDex() throws java.io.IOException { java.io.File incrementalOutFile = null; if (com.android.dx.command.dexer.Main.args.incremental) { if ((com.android.dx.command.dexer.Main.args.outName) == null) { java.lang.System.err.println("error: no incremental output name specified"); return -1; } incrementalOutFile = new java.io.File(com.android.dx.command.dexer.Main.args.outName); if (incrementalOutFile.exists()) { com.android.dx.command.dexer.Main.minimumFileAge = incrementalOutFile.lastModified(); } } if (!(com.android.dx.command.dexer.Main.processAllFiles())) { return 1; } if ((com.android.dx.command.dexer.Main.args.incremental) && (!(com.android.dx.command.dexer.Main.anyFilesProcessed))) { return 0; } byte[] outArray = null; if ((!(com.android.dx.command.dexer.Main.outputDex.isEmpty())) || ((com.android.dx.command.dexer.Main.args.humanOutName) != null)) { outArray = com.android.dx.command.dexer.Main.writeDex(com.android.dx.command.dexer.Main.outputDex); if (outArray == null) { return 2; } } if (com.android.dx.command.dexer.Main.args.incremental) { outArray = com.android.dx.command.dexer.Main.mergeIncremental(outArray, incrementalOutFile); } outArray = com.android.dx.command.dexer.Main.mergeLibraryDexBuffers(outArray); if (com.android.dx.command.dexer.Main.args.jarOutput) { com.android.dx.command.dexer.Main.outputDex = null; if (outArray != null) { com.android.dx.command.dexer.Main.outputResources.put(DexFormat.DEX_IN_JAR_NAME, outArray); } if (!(com.android.dx.command.dexer.Main.createJar(com.android.dx.command.dexer.Main.args.outName))) { return 3; } } else if ((outArray != null) && ((com.android.dx.command.dexer.Main.args.outName) != null)) { java.io.OutputStream out = com.android.dx.command.dexer.Main.openOutput(com.android.dx.command.dexer.Main.args.outName); out.write(outArray); com.android.dx.command.dexer.Main.closeOutput(out); } return 0; }
@org.junit.Test public void testEnterSoftApModeActiveWhenAlreadyInSoftApMode() throws java.lang.Exception { when(mWifiInjector.makeWificond()).thenReturn(mWificond); when(mWificond.createApInterface()).thenReturn(null); mWifiStateMachinePrime.enterSoftAPMode(); mLooper.dispatchNext(); assertEquals("SoftAPModeState", mWifiStateMachinePrime.getCurrentMode()); mLooper.dispatchNext(); assertEquals("SoftAPModeState", mWifiStateMachinePrime.getCurrentMode()); enterSoftApActiveMode(); verify(mWificond).tearDownInterfaces(); }


protected void libToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.lang.String classpath, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { boolean assertEnable = false; assert true == (assertEnable = true); args.add("java"); args.add((assertEnable ? "-ea" : "-da")); args.add("-jar"); args.add(jackPrebuilt.getAbsolutePath()); args.add("--verbose"); args.add(verbosityLevel.name()); args.add("--sanity-checks"); args.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { args.add("--incremental-folder"); args.add(incrementalFolder.getAbsolutePath()); } for (java.io.File res : resImport) { args.add("--import-resource"); args.add(res.getPath()); } for (java.io.File meta : metaImport) { args.add("--import-meta"); args.add(meta.getPath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if (!(classpath.equals(""))) { args.add("--classpath"); args.add(classpath); } for (java.io.File jarjarFile : jarjarRules) { args.add("--config-jarjar"); args.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add("--config-proguard"); args.add(flags.getAbsolutePath()); } if (withDebugInfos) { args.add("-g"); } libToImportStaticLibs(args, in); }

private android.net.NetworkCapabilities getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo nai) { if (nai != null) { synchronized(nai) { if ((nai.networkCapabilities) != null) { return networkCapabilitiesWithoutUids(nai.networkCapabilities); } } } return null; }
@java.lang.Override public void handle(@javax.annotation.Nonnull org.simpleframework.http.Request request, @javax.annotation.Nonnull org.simpleframework.http.Response response) { java.lang.String type = getContentType(request).getType(); com.android.jack.server.router.ContentTypeRouter.logger.log(java.util.logging.Level.FINE, (("Route request for '" + type) + "'")); org.simpleframework.http.core.Container container = registry.get(type); if (container != null) { container.handle(request, response); } else { primaryContainer.handle(request, response); } }


@org.junit.Test public void testMultiThread() throws java.lang.Exception { final com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String> cache = new com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String>(new com.android.ide.common.caching.CreatingCacheTest.DelayedFactory()); com.android.ide.common.caching.CreatingCacheTest.CacheRunnable runnable1 = new com.android.ide.common.caching.CreatingCacheTest.CacheRunnable(cache, 0); java.lang.Thread t1 = new java.lang.Thread(runnable1); t1.start(); com.android.ide.common.caching.CreatingCacheTest.CacheRunnable runnable2 = new com.android.ide.common.caching.CreatingCacheTest.CacheRunnable(cache, 1000); java.lang.Thread t2 = new java.lang.Thread(runnable2); t2.start(); t1.join(); t2.join(); assertEquals("foo", runnable1.getResult()); assertEquals("foo", runnable2.getResult()); assertTrue("repetitive calls give same instance", ((runnable1.getResult()) == (runnable2.getResult()))); }

@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((((((((((((("SignalStrength:" + " ") + (mGsmSignalStrength)) + " ") + (mGsmBitErrorRate)) + " ") + (mCdmaDbm)) + " ") + (mCdmaEcio)) + " ") + (mEvdoDbm)) + " ") + (mEvdoEcio)) + " ") + (mEvdoSnr)) + " ") + (mLteSignalStrength)) + " ") + (mLteRsrp)) + " ") + (mLteRsrq)) + " ") + (mLteRssnr)) + " ") + (mLteCqi)) + " ") + (mLteRsrpBoost)) + " ") + (mTdScdmaRscp)) + " ") + (isGsm ? "gsm|lte" : "cdma")) + " ") + (mUseOnlyRsrpForLteLevel ? "use_only_rsrp_for_lte_level" : "use_rsrp_and_rssnr_for_lte_level"); }


private int getThumbPositionForListPosition(int firstVisibleItem, int visibleItemCount, int totalItemCount) { if (((mSectionIndexer) == null) || ((mListAdapter) == null)) { getSectionsFromIndexer(); } if (((mSectionIndexer) == null) || (!(mMatchDragPosition))) { return (((mList.getHeight()) - (mThumbH)) * firstVisibleItem) / (totalItemCount - visibleItemCount); } firstVisibleItem -= mListOffset; if (firstVisibleItem < 0) { return 0; } totalItemCount -= mListOffset; final int trackHeight = (mList.getHeight()) - (mThumbH); final int section = mSectionIndexer.getSectionForPosition(firstVisibleItem); final int sectionPos = mSectionIndexer.getPositionForSection(section); final int nextSectionPos = mSectionIndexer.getPositionForSection((section + 1)); final int sectionCount = mSections.length; final int positionsInSection = nextSectionPos - sectionPos; final android.view.View child = mList.getChildAt(0); final float incrementalPos = (child == null) ? 0 : firstVisibleItem + (((float) ((mList.getPaddingTop()) - (child.getTop()))) / (child.getHeight())); final float posWithinSection = (incrementalPos - sectionPos) / positionsInSection; int result = ((int) (((section + posWithinSection) / sectionCount) * trackHeight)); if ((firstVisibleItem > 0) && ((firstVisibleItem + visibleItemCount) == totalItemCount)) { final android.view.View lastChild = mList.getChildAt((visibleItemCount - 1)); final float lastItemVisible = ((float) (((mList.getHeight()) - (mList.getPaddingBottom())) - (lastChild.getTop()))) / (lastChild.getHeight()); result += (trackHeight - result) * lastItemVisible; } return result; }
public static void computeTanpi(android.renderscript.cts.TestTanpi.ArgumentsFloatFloat args) { args.out = new android.renderscript.cts.Floaty(android.renderscript.cts.CoreMathVerifier.tan(((args.in) * ((float) (java.lang.Math.PI)))), 6, 128); }
@java.lang.SuppressWarnings("unchecked") public void testRun_ioException() throws java.lang.Exception { mMockDevice.executeShellCommand(((java.lang.String) (org.easymock.EasyMock.anyObject())), ((com.android.ddmlib.IShellOutputReceiver) (org.easymock.EasyMock.anyObject())), org.easymock.EasyMock.eq(0)); org.easymock.EasyMock.expectLastCall().andThrow(new java.io.IOException()); mMockListener.testRunStarted(com.android.ddmlib.testrunner.RemoteAndroidTestRunnerTest.TEST_PACKAGE, 0); mMockListener.testRunFailed(((java.lang.String) (org.easymock.EasyMock.anyObject()))); mMockListener.testRunEnded(org.easymock.EasyMock.anyLong(), org.easymock.EasyMock.eq(java.util.Collections.EMPTY_MAP)); org.easymock.EasyMock.replay(mMockDevice, mMockListener); try { mRunner.run(mMockListener); fail("IOException not thrown"); } catch (java.io.IOException e) { } org.easymock.EasyMock.verify(mMockDevice, mMockListener); }

private static void assertSizesRotate(android.server.cts.ReportedSizes rotationA, android.server.cts.ReportedSizes rotationB) throws java.lang.Exception { assertEquals(rotationA.displayWidth, rotationA.metricsWidth); assertEquals(rotationA.displayHeight, rotationA.metricsHeight); assertEquals(rotationB.displayWidth, rotationB.metricsWidth); assertEquals(rotationB.displayHeight, rotationB.metricsHeight); final boolean beforePortrait = (rotationA.displayWidth) < (rotationA.displayHeight); final boolean afterPortrait = (rotationB.displayWidth) < (rotationB.displayHeight); assertFalse((beforePortrait == afterPortrait)); final boolean beforeConfigPortrait = (rotationA.widthDp) < (rotationA.heightDp); final boolean afterConfigPortrait = (rotationB.widthDp) < (rotationB.heightDp); assertEquals(beforePortrait, beforeConfigPortrait); assertEquals(afterPortrait, afterConfigPortrait); }

public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth); }

@javax.annotation.Nonnull @java.lang.Override public java.util.Collection<java.lang.String> getSubPackageNames(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading) { java.util.List<java.lang.String> subs = new java.util.ArrayList<java.lang.String>(); for (com.android.sched.vfs.InputVElement sub : packageVDir.list()) { if (sub.isVDir()) { subs.add(sub.getName()); } } return subs; }
public void testDebug() { com.android.builder.BuildType type = new com.android.builder.BuildType("debug"); assertTrue(type.isDebuggable()); assertTrue(type.isDebugJniBuild()); assertTrue(type.isDebugSigned()); }
public static void main(java.lang.String[] args) { Main.expectEquals(10, Main.abs1((-10))); Main.expectEquals(20, Main.abs1(20)); Main.expectEquals(10, Main.abs2((-10))); Main.expectEquals(20, Main.abs2(20)); Main.expectEquals(10, Main.abs3((-10))); Main.expectEquals(20, Main.abs3(20)); Main.expectEquals(10, Main.abs4((-10))); Main.expectEquals(20, Main.abs4(20)); Main.expectEquals(10, Main.abs4(((short) (-10)))); Main.expectEquals(20, Main.abs4(((short) (20)))); Main.expectEquals(10, Main.abs6(((byte) (-10)))); Main.expectEquals(20, Main.abs6(((byte) (20)))); Main.expectEquals(10L, Main.abs7((-10L))); Main.expectEquals(20L, Main.abs7(20L)); java.lang.System.out.println("passed"); }

public void test_isInfiniteD() { assertTrue("Infinity check failed", (((java.lang.Double.isInfinite(java.lang.Double.NEGATIVE_INFINITY)) && (java.lang.Double.isInfinite(java.lang.Double.POSITIVE_INFINITY))) && (!(java.lang.Double.isInfinite(java.lang.Double.MAX_VALUE))))); }

private void finish(boolean success, java.lang.String error) { mPrintService.unlockWifi(); mBackend.closeDocument(); mMainHandler.removeCallbacksAndMessages(null); if (success) { mPrintJob.start(); mPrintJob.complete(); } else if ((mState) == (com.android.bips.LocalPrintJob.STATE_CANCEL)) { mPrintJob.cancel(); } else { mPrintJob.fail(error); } mState = com.android.bips.LocalPrintJob.STATE_DONE; mCompleteConsumer.accept(this); }

public int getCarrierPrivilegeStatus(android.content.pm.PackageInfo packageInfo) { return (mCarrierPrivilegeRules) == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : mCarrierPrivilegeRules.getCarrierPrivilegeStatus(packageInfo); }

public libcore.io.BufferIterator bigEndianIterator() { return new libcore.io.NioBufferIterator(address, ((int) (size)), ((java.nio.ByteOrder.nativeOrder()) != (java.nio.ByteOrder.BIG_ENDIAN))); }
public void test_getPositivePrefix() { java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setPositivePrefix("++"); assertTrue("Incorrect positive prefix", df.getPositivePrefix().equals("++")); }

public void onPnoScanFailed() { android.util.Log.e(com.android.server.wifi.scanner.SupplicantWifiScannerImpl.TAG, "Pno scan failure received"); reportPnoScanFailure(); }


public final boolean isLoaded() { checkIsMapped(); long address = block.toLong(); long size = block.getSize(); if (size == 0) { return true; } try { int pageSize = ((int) (Libcore.os.sysconf(libcore.io.OsConstants._SC_PAGE_SIZE))); int pageOffset = ((int) (address % pageSize)); address -= pageOffset; size += pageOffset; int pageCount = ((int) (((size + pageSize) - 1) / pageSize)); byte[] vector = new byte[pageCount]; Libcore.os.mincore(address, size, vector); for (int i = 0; i < (vector.length); ++i) { if (((vector[i]) & 1) != 1) { return false; } } return true; } catch (libcore.io.ErrnoException errnoException) { return false; } }
private static native void native_drawPosText(int nativeCanvas, char[] text, int index, int count, float[] pos, int paint);
public com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder fromSample(@com.android.annotations.NonNull java.lang.String project) { projectDir = new java.io.File(com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder.SAMPLE_PROJECT_DIR, project); return this; }
@org.junit.Test public void testSetupDriverForSoftApModeError() { com.android.server.wifi.WificondControl wificondControl = mock(com.android.server.wifi.WificondControl.class); android.net.wifi.IWificond wificond = mock(android.net.wifi.IWificond.class); when(wificondControl.setupDriverForSoftApMode()).thenReturn(null); mWifiNative.setWificondControl(wificondControl); android.net.wifi.IApInterface returnedApInterface = mWifiNative.setupDriverForSoftApMode(); assertEquals(null, returnedApInterface); verify(wificondControl).setupDriverForSoftApMode(); }
public void testMaxLengthExtra() throws java.lang.Exception { byte[] maxLengthExtra = new byte[65535]; java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setExtra(maxLengthExtra); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(maxLengthExtra.length, zipFile.getEntry("x").getExtra().length); zipFile.close(); }
private void offerInstallAccessibilitySerivceOnce() { if ((mServicesCategory.getPreference(0)) != (mNoServicesMessagePreference)) { return; } android.content.SharedPreferences preferences = getActivity().getPreferences(Context.MODE_PRIVATE); final boolean offerInstallService = !(preferences.getBoolean(com.android.settings.AccessibilitySettings.KEY_INSTALL_ACCESSIBILITY_SERVICE_OFFERED_ONCE, false)); if (offerInstallService) { preferences.edit().putBoolean(com.android.settings.AccessibilitySettings.KEY_INSTALL_ACCESSIBILITY_SERVICE_OFFERED_ONCE, true).commit(); showDialog(com.android.settings.AccessibilitySettings.DIALOG_ID_NO_ACCESSIBILITY_SERVICES); } }
@javax.annotation.Nonnull public <T> java.lang.String getAsString(@javax.annotation.Nonnull com.android.sched.util.config.id.PropertyId<T> propertyId);
@org.junit.Test public void testDependency002() throws java.lang.Exception { com.android.jack.test.helper.IncrementalTestHelper ite = new com.android.jack.test.helper.IncrementalTestHelper(com.android.jack.test.toolchain.AbstractTestTools.createTempDir()); ite.addJavaFile("jack.incremental", "A.java", ("package jack.incremental; \n" + ("public class A { } \n" + "class B { } \n"))); ite.incrementalBuildFromFolder(); junit.framework.Assert.assertEquals(2, ite.getJackFiles().size()); ite.addJavaFile("jack.incremental", "A.java", ("package jack.incremental; \n" + "public class A { }\n")); ite.incrementalBuildFromFolder(); junit.framework.Assert.assertEquals(1, ite.getJackFiles().size()); }
@java.lang.Override public void execute(com.android.build.gradle.model.DefaultAndroidBinary binary) { java.util.Collection<org.gradle.nativeplatform.SharedLibraryBinarySpec> nativeBinaries = com.android.build.gradle.model.NdkComponentModelPlugin.getNativeBinaries(library, binary.getBuildType(), binary.getProductFlavors()); binary.getNativeBinaries().addAll(nativeBinaries); }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof android.net.NetworkStats.Entry) { final android.net.NetworkStats.Entry e = ((android.net.NetworkStats.Entry) (o)); return (((((((((((uid) == (e.uid)) && ((set) == (e.set))) && ((tag) == (e.tag))) && ((metered) == (e.metered))) && ((roaming) == (e.roaming))) && ((rxBytes) == (e.rxBytes))) && ((rxPackets) == (e.rxPackets))) && ((txBytes) == (e.txBytes))) && ((txPackets) == (e.txPackets))) && ((operations) == (e.operations))) && (iface.equals(e.iface)); } return false; }
protected void close() throws java.io.IOException { synchronized(fdLock) { if (((fd) != null) && (fd.valid())) { if (!(stream)) { sun.net.ResourceManager.afterUdpClose(); } if ((fdUseCount) == 0) { if (closePending) { return; } closePending = true; try { socketPreClose(); } finally { socketClose(); } fd = null; return; } else { if (!(closePending)) { closePending = true; (fdUseCount)--; socketPreClose(); } } } } }
protected void t_Format(int count, java.lang.Object object, java.text.Format format, java.util.Vector<org.apache.harmony.tests.java.text.Support_Format.FieldContainer> expectedResults) { java.util.Vector<org.apache.harmony.tests.java.text.Support_Format.FieldContainer> results = org.apache.harmony.tests.java.text.Support_Format.findFields(format.formatToCharacterIterator(object)); assertTrue(((("Test " + count) + ": Format returned incorrect CharacterIterator for ") + (format.format(object))), org.apache.harmony.tests.java.text.Support_Format.compare(results, expectedResults)); }

private void startListenForPhoneState() { if (!(mListening)) { int subId = android.telephony.SubscriptionManager.getDefaultSubscriptionId(); if (android.telephony.SubscriptionManager.isValidSubscriptionId(subId)) { mPhoneStateListener = new com.android.bluetooth.hfp.HeadsetPhoneState.HeadsetPhoneStateListener(subId, mHeadsetService.getStateMachinesThreadLooper()); mTelephonyManager.listen(mPhoneStateListener, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); mListening = true; } else { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ("startListenForPhoneState, invalid subscription ID " + subId)); } } }
@java.lang.Override public java.lang.String getProperty(java.lang.String key) { try { return manager.getVariable(key); } catch (java.io.IOException e) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log(java.util.logging.Level.SEVERE, ("Unable to get variable: " + key), e); return null; } }

@java.lang.Override public void send(java.net.DatagramPacket packet) throws java.io.IOException { if (!(channelImpl.isBlocking())) { throw new java.nio.channels.IllegalBlockingModeException(); } super.send(packet); }
@java.lang.Override public boolean unplug(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ("unplug(): device=" + device)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { return false; } return service.unplug(device); }


public boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice device, java.lang.String command, java.lang.String arg) { if (android.bluetooth.BluetoothHeadset.DBG) { android.bluetooth.BluetoothHeadset.log("sendVendorSpecificResultCode()"); } if (command == null) { throw new java.lang.IllegalArgumentException("command is null"); } if ((((mService) != null) && (isEnabled())) && (isValidDevice(device))) { try { return mService.sendVendorSpecificResultCode(device, command, arg); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } if ((mService) == null) { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); } return false; }
private boolean isWindowsExecutable(org.eclipse.core.runtime.IPath commandPath) { if (com.android.ide.eclipse.ndk.internal.build.NdkCommandLauncher.WINDOWS_EXE.equalsIgnoreCase(commandPath.getFileExtension())) { return true; } java.io.File exeFile = commandPath.addFileExtension(com.android.ide.eclipse.ndk.internal.build.NdkCommandLauncher.WINDOWS_EXE).toFile(); if (exeFile.exists()) { return true; } return false; }


void _seal() { mMap = java.util.Collections.unmodifiableMap(mEditMap); }
@javax.annotation.Nonnull private static com.android.jack.backend.jayce.JayceFileImporter getJayceFileImporter(@javax.annotation.Nonnull java.util.List<java.io.File> jayceImport, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks, @javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.JackFileException { java.util.List<com.android.jack.library.InputJackLibrary> inputJackLibraries = new java.util.ArrayList<com.android.jack.library.InputJackLibrary>(jayceImport.size()); com.android.sched.util.config.ReflectFactory<com.android.jack.jayce.JaycePackageLoader> factory = com.android.sched.util.config.ThreadConfig.get(com.android.jack.Jack.IMPORT_POLICY); for (final java.io.File jackFile : jayceImport) { try { com.android.sched.vfs.InputRootVDir vDir = com.android.jack.Jack.wrapAsVDir(jackFile, hooks); com.android.jack.library.InputJackLibrary inputJackLibrary = new com.android.jack.library.InputJackLibrary(vDir); inputJackLibraries.add(inputJackLibrary); com.android.jack.jayce.JaycePackageLoader rootPLoader = factory.create(inputJackLibrary, session.getPhantomLookup()); session.getTopLevelPackage().addLoader(rootPLoader); session.addImportSource(vDir); } catch (java.io.IOException ioException) { throw new com.android.jack.JackFileException(("Error importing jack container: " + (ioException.getMessage())), ioException); } } return new com.android.jack.backend.jayce.JayceFileImporter(inputJackLibraries); }
public void test_getChannel() throws java.lang.Exception { assertNull(new java.net.DatagramSocket().getChannel()); org.apache.harmony.tests.java.net.DatagramSocketTest.DatagramServer server = new org.apache.harmony.tests.java.net.DatagramSocketTest.DatagramServer(LOOPBACK); java.net.DatagramSocket ds = new java.net.DatagramSocket(0); assertNull(ds.getChannel()); ds.disconnect(); ds.close(); server.stopServer(); java.nio.channels.DatagramChannel channel = java.nio.channels.DatagramChannel.open(); java.net.DatagramSocket socket = channel.socket(); assertEquals(channel, socket.getChannel()); socket.close(); }
@java.lang.Override public java.awt.Component getListCellRendererComponent(javax.swing.JList list, java.lang.Object value, int index, boolean isSelected, boolean cellHasFocus) { if (!(value instanceof com.google.gct.login.ui.UsersListItem)) { return null; } javax.swing.JPanel mainPanel = new javax.swing.JPanel(); setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS)); mainPanel.setPreferredSize(MAIN_PANEL_DIMENSION); mainPanel.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT); final java.awt.Color bg = (isSelected) ? ACTIVE_COLOR : com.intellij.util.ui.UIUtil.getListBackground(); final java.awt.Color fg = (isSelected) ? com.intellij.util.ui.UIUtil.getListSelectionForeground() : com.intellij.util.ui.UIUtil.getListForeground(); mainPanel.setBackground(bg); mainPanel.setForeground(fg); java.awt.Image imageIcon = ((com.google.gct.login.ui.UsersListItem) (value)).getUserPicture(); mainPanel.add(new com.google.gct.login.ui.UsersListCellRenderer.ImagePanel(imageIcon)); mainPanel.add(createTextDisplay(isSelected, ((com.google.gct.login.ui.UsersListItem) (value)))); return mainPanel; }
private android.net.RecommendationResult verifyAndCaptureResult(android.net.RecommendationRequest request) { mProvider.doOnRequestRecommendation(request, mCallback); org.mockito.ArgumentCaptor<android.net.RecommendationResult> resultCaptor = org.mockito.ArgumentCaptor.forClass(android.net.RecommendationResult.class); verify(mCallback).onResult(resultCaptor.capture()); return resultCaptor.getValue(); }

private void stopObexServerSession() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Pbap Service stopObexServerSession"); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_ACQUIRE_WAKE_LOCK); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_RELEASE_WAKE_LOCK); if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if (mAdapter.isEnabled()) { startSocketListeners(); } setState(BluetoothPbap.STATE_DISCONNECTED); }
private java.io.File getListingOfDex(@javax.annotation.Nonnull java.io.File dex) throws java.io.FileNotFoundException, java.io.IOException { assert dex.isFile(); com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(new java.lang.String[]{ "bash", "-c", (((com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt("dexdump").getAbsolutePath()) + " ") + (dex.getAbsolutePath())) + " | grep \" Class descriptor : \" | cut -d\\\' -f2 | sed -e \'s/$/:/\'" }); java.io.File outList = com.android.jack.TestTools.createTempFile("types", ".txt"); exec.setOut(outList); junit.framework.Assert.assertTrue(exec.run()); return outList; }
public boolean isApplicationOnIcc(com.android.internal.telephony.IccCardApplicationStatus.AppType type) { java.lang.Boolean retValue = ((mUiccCard) != null) ? mUiccCard.isApplicationOnIcc(type) : false; return retValue; }


private static com.android.ide.common.res2.ResourceFile createResourceFile(@com.android.annotations.NonNull java.io.File file, @com.android.annotations.NonNull com.android.ide.common.res2.ResourceSet.FolderData folderData, @com.android.annotations.NonNull com.android.utils.ILogger logger) throws com.android.ide.common.res2.MergingException { if ((folderData.type) != null) { com.android.ide.common.res2.FileResourceNameValidator.validate(file, folderData.type); java.lang.String name = file.getName(); int pos = name.indexOf('.'); if (pos >= 0) { name = name.substring(0, pos); } return new com.android.ide.common.res2.ResourceFile(file, new com.android.ide.common.res2.ResourceItem(name, folderData.type, null), folderData.qualifiers); } else { try { com.android.ide.common.res2.ValueResourceParser2 parser = new com.android.ide.common.res2.ValueResourceParser2(file); java.util.List<com.android.ide.common.res2.ResourceItem> items = parser.parseFile(); return new com.android.ide.common.res2.ResourceFile(file, items, folderData.qualifiers); } catch (com.android.ide.common.res2.MergingException e) { logger.error(e, "Failed to parse %s", file.getAbsolutePath()); throw e; } } }
@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(("com.android.jack.shrob.test" + testNumber)); com.android.jack.shrob.spec.Flags flags = new com.android.jack.shrob.spec.Flags(); flags.setShrink(false); flags.setObfuscate(false); com.android.jack.shrob.proguard.GrammarActions.parse(("proguard.flags" + flagNumber), testFolder.getAbsolutePath(), flags); java.io.File refFolder = new java.io.File(testFolder, "refsSeed"); java.io.File candidateOutputSeeds = com.android.jack.test.toolchain.AbstractTestTools.createTempFile("seeds", ".txt"); java.io.File refOutputSeeds = new java.io.File(refFolder, (("expected-" + flagNumber) + ".txt")); flags.setSeedsFile(candidateOutputSeeds); flags.setPrintSeeds(true); com.android.jack.test.toolchain.JackApiToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class); toolchain.setShrobFlags(flags); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, "jack")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorSeeds(refOutputSeeds, candidateOutputSeeds)); }
static com.android.internal.telephony.RILRequest obtain(int request, android.os.Message result) { com.android.internal.telephony.RILRequest rr = null; synchronized(com.android.internal.telephony.RILRequest.sPoolSync) { if ((com.android.internal.telephony.RILRequest.sPool) != null) { rr = com.android.internal.telephony.RILRequest.sPool; com.android.internal.telephony.RILRequest.sPool = rr.mNext; rr.mNext = null; (com.android.internal.telephony.RILRequest.sPoolSize)--; } } if (rr == null) { rr = new com.android.internal.telephony.RILRequest(); } rr.mSerial = com.android.internal.telephony.RILRequest.sNextSerial.getAndIncrement(); rr.mRequest = request; rr.mResult = result; rr.mParcel = android.os.Parcel.obtain(); rr.mWakeLockType = com.android.internal.telephony.RIL.INVALID_WAKELOCK; rr.mStartTimeMs = android.os.SystemClock.elapsedRealtime(); if ((result != null) && ((result.getTarget()) == null)) { throw new java.lang.NullPointerException("Message target must not be null"); } rr.mParcel.writeInt(request); rr.mParcel.writeInt(rr.mSerial); return rr; }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mTelephonyManager = ((android.telephony.TelephonyManager) (getContext().getSystemService(Context.TELEPHONY_SERVICE))); mDestAddr = mTelephonyManager.getLine1Number(); mText = "This is a test message"; }
public void clearField(java.lang.String fieldName) throws java.lang.NoSuchMethodException { java.lang.reflect.Method m = getClass().getMethod(android.icu.dev.test.format.NumberFormatTestData.fieldToClearer(fieldName)); try { m.invoke(this); } catch (java.lang.IllegalAccessException e) { throw new java.lang.RuntimeException(e); } catch (java.lang.reflect.InvocationTargetException e) { throw new java.lang.RuntimeException(e); } }
public void runTest(com.android.rs.imagejb.ImageProcessingTest.TestAction ta, java.lang.String testName) { float sum = 0; for (int i = 0; i < (mIteration); i++) { runOnUiThread(ta); float bmValue = ta.getBenchmark(); android.util.Log.v(TAG, ((("results for iteration " + i) + " is ") + bmValue)); sum += bmValue; } float avgResult = sum / (mIteration); android.os.Bundle results = new android.os.Bundle(); results.putString(TEST_NAME, testName); results.putFloat(BENCHMARK, avgResult); getInstrumentation().sendStatus(Activity.RESULT_OK, results); }




private com.android.ide.eclipse.adt.internal.resources.AttributeInfo parseAttributeTypes(org.w3c.dom.Node attrNode, java.lang.String name) { java.util.TreeSet<com.android.ide.eclipse.adt.internal.resources.AttributeInfo.Format> formats = new java.util.TreeSet<com.android.ide.eclipse.adt.internal.resources.AttributeInfo.Format>(); java.lang.String[] enumValues = null; java.lang.String[] flagValues = null; org.w3c.dom.Node attrFormat = attrNode.getAttributes().getNamedItem("format"); if (attrFormat != null) { for (java.lang.String f : attrFormat.getNodeValue().split("\\|")) { try { com.android.ide.common.api.IAttributeInfo.Format format = AttributeInfo.Format.valueOf(f.toUpperCase()); if (((format != null) && (format != (com.android.ide.common.api.IAttributeInfo.Format.ENUM))) && (format != (com.android.ide.common.api.IAttributeInfo.Format.FLAG))) { formats.add(format); } } catch (java.lang.IllegalArgumentException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, "Unknown format name \'%s\' in <attr name=\"%s\">, file \'%s\'.", f, name, getOsAttrsXmlPath()); } } } enumValues = parseEnumFlagValues(attrNode, "enum", name); if (enumValues != null) { formats.add(AttributeInfo.Format.ENUM); } flagValues = parseEnumFlagValues(attrNode, "flag", name); if (flagValues != null) { formats.add(AttributeInfo.Format.FLAG); } com.android.ide.eclipse.adt.internal.resources.AttributeInfo info = new com.android.ide.eclipse.adt.internal.resources.AttributeInfo(name, formats.toArray(new com.android.ide.eclipse.adt.internal.resources.AttributeInfo.Format[formats.size()])); info.setEnumValues(enumValues); info.setFlagValues(flagValues); return info; }
@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, result); if ((mDcResponse) == null) { try { mDcResponse = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, "IP", "rmnet_data7", java.util.Arrays.asList(new android.telephony.data.InterfaceAddress("12.34.56.78", 0)), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("98.76.54.32")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("11.22.33.44")), null, 1440); } catch (java.lang.Exception e) { } } if (mDcSuccess) { resultSuccess(result, mDcResponse); } else { resultFail(result, mDcResponse, new java.lang.RuntimeException("Setup data call failed!")); } }
@java.lang.Override public void unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback cb) { if (trackingDefault.contains(cb)) { trackingDefault.remove(cb); } else if (listening.containsKey(cb)) { listening.remove(cb); } else if (requested.containsKey(cb)) { requested.remove(cb); } assertFalse(trackingDefault.contains(cb)); assertFalse(listening.containsKey(cb)); assertFalse(requested.containsKey(cb)); }

@java.lang.Override public boolean processMessage(android.os.Message message) { switch (message.what) { case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_START : break; case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_AP_INTERFACE_BINDER_DEATH : case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_STOP : updateApState(WifiManager.WIFI_AP_STATE_DISABLING, 0); stopSoftAp(); if ((message.what) == (com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_AP_INTERFACE_BINDER_DEATH)) { updateApState(WifiManager.WIFI_AP_STATE_FAILED, WifiManager.SAP_START_FAILURE_GENERAL); } else { updateApState(WifiManager.WIFI_AP_STATE_DISABLED, 0); } transitionTo(mIdleState); break; default : return NOT_HANDLED; } return HANDLED; }
@java.lang.Override protected void readSourceFolder(java.io.File sourceFolder, com.android.utils.ILogger logger) throws com.android.ide.common.res2.MergingException { readFiles(sourceFolder, sourceFolder, logger); }



public void test4_0MeasurementModePeakRms() throws java.lang.Exception { if (!(hasAudioOutput())) { return; } try { getVisualizer(0); mVisualizer.setEnabled(true); assertTrue("visualizer not enabled", mVisualizer.getEnabled()); java.lang.Thread.sleep(100); int status = mVisualizer.setMeasurementMode(Visualizer.MEASUREMENT_MODE_PEAK_RMS); assertEquals("setMeasurementMode for PEAK_RMS doesn't report success", Visualizer.SUCCESS, status); int mode = mVisualizer.getMeasurementMode(); assertEquals("getMeasurementMode doesn't report PEAK_RMS", Visualizer.MEASUREMENT_MODE_PEAK_RMS, mode); } catch (java.lang.IllegalStateException e) { fail("method called in wrong state"); } catch (java.lang.InterruptedException e) { fail("sleep() interrupted"); } finally { releaseVisualizer(); } }

public void testLongMessage() throws java.io.IOException { byte[] data = new byte[1024 * 1024]; new java.util.Random().nextBytes(data); assertTrue(java.util.Arrays.equals(data, libcore.java.util.zip.GZIPInputStreamTest.gunzip(libcore.java.util.zip.GZIPOutputStreamTest.gzip(data)))); }


public void testSkipOnLargeFiles() throws java.lang.Exception { java.io.File largeFile = java.io.File.createTempFile("FileInputStreamTest_testSkipOnLargeFiles", ""); final long requiredFreeSpaceBytes = (3172L * 1024) * 1024; final android.system.StructStatVfs statVfs = android.system.Os.statvfs(largeFile.getPath()); final long freeSpaceAvailableBytes = (statVfs.f_bsize) * (statVfs.f_bavail); if (freeSpaceAvailableBytes < requiredFreeSpaceBytes) { return; } try { java.io.FileOutputStream fos = new java.io.FileOutputStream(largeFile); try { byte[] buffer = new byte[1024 * 1024]; for (int i = 0; i < (3 * 1024); i++) { fos.write(buffer); } } finally { fos.close(); } java.io.FileInputStream fis = new java.io.FileInputStream(largeFile); long lastByte = (((3 * 1024) * 1024) * 1024L) - 1; assertEquals(0, Libcore.os.lseek(fis.getFD(), 0, OsConstants.SEEK_CUR)); assertEquals(lastByte, fis.skip(lastByte)); } finally { assertTrue(largeFile.delete()); } }




@java.lang.SuppressWarnings("unchecked") public void testRecoveryFromExceptionOnMainThreadLoopMainThreadUntilIdle() throws java.lang.Exception { final java.lang.RuntimeException poison = new java.lang.RuntimeException("oops"); try { Espresso.onView(withId(R.id.enter_data_edit_text)).perform(new android.support.test.espresso.EspressoEdgeCaseTest.TestAction() { @java.lang.Override public void perform(android.support.test.espresso.UiController controller, android.view.View view) { mainHandler.post(new java.lang.Runnable() { @java.lang.Override public void run() { throw poison; } }); controller.loopMainThreadUntilIdle(); } }); fail("should throw"); } catch (java.lang.RuntimeException re) { if (re == poison) { } else { throw re; } } Espresso.onView(withId(R.id.enter_data_edit_text)).perform(typeText("Hello World111")); Espresso.onView(withId(R.id.enter_data_edit_text)).check(matches(withText("Hello World111"))); }


public int getExpectedSamplingPeriodUs() { if (!(isDelayRateTestable())) { throw new java.lang.IllegalArgumentException("rateUs cannot be SENSOR_DELAY_[GAME|UI|NORMAL]"); } int expectedSamplingPeriodUs = mSamplingPeriodUs; int sensorMaxDelay = mSensor.getMaxDelay(); if (sensorMaxDelay > 0) { expectedSamplingPeriodUs = java.lang.Math.min(expectedSamplingPeriodUs, sensorMaxDelay); } return java.lang.Math.max(expectedSamplingPeriodUs, mSensor.getMinDelay()); }
private void srcToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.io.File... sources) { boolean assertEnable = false; assert true == (assertEnable = true); args.add("java"); args.add((assertEnable ? "-ea" : "-da")); args.add("-jar"); args.add(jackPrebuilt.getAbsolutePath()); args.add("--verbose"); args.add(verbosityLevel.name()); args.add("--sanity-checks"); args.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { args.add("--incremental-folder"); args.add(incrementalFolder.getAbsolutePath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if ((classpath.size()) > 0) { args.add("--classpath"); args.add(getClasspathAsString()); } for (java.io.File res : resImport) { args.add("--import-resource"); args.add(res.getPath()); } for (java.io.File meta : metaImport) { args.add("--import-meta"); args.add(meta.getPath()); } args.addAll(extraJackArgs); for (java.io.File jarjarFile : jarjarRules) { args.add("--config-jarjar"); args.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add("--config-proguard"); args.add(flags.getAbsolutePath()); } if (withDebugInfos) { args.add("-g"); } addAnnotationProcessorArgs(args); for (java.io.File staticLib : staticLibs) { args.add("--import"); args.add(staticLib.getAbsolutePath()); } }


public void test_socket_accept_Nonblocking_Bound() throws java.io.IOException { serverChannel.configureBlocking(false); java.net.ServerSocket gotSocket = serverChannel.socket(); gotSocket.bind(null); try { gotSocket.accept(); fail("Should throw an IllegalBlockingModeException"); } catch (java.nio.channels.IllegalBlockingModeException e) { } serverChannel.close(); try { gotSocket.accept(); fail("Should throw a ClosedChannelException"); } catch (java.nio.channels.ClosedChannelException e) { } }

@com.android.annotations.Nullable public com.android.sdklib.IAndroidTarget getTargetFromHashString(@com.android.annotations.Nullable java.lang.String hash) { if (hash != null) { for (com.android.sdklib.IAndroidTarget target : mTargets) { if (hash.equals(target.hashString())) { return target; } } } return null; }
@java.lang.Override public void mergeConference(java.lang.String callId) { mHandler.obtainMessage(android.telecom.ConnectionService.MSG_MERGE_CONFERENCE, callId).sendToTarget(); }
public void mincore(long address, long byteCount, byte[] vector) throws libcore.io.ErrnoException;








private static boolean isShortCodeUSSD(java.lang.String dialString, com.android.internal.telephony.gsm.GSMPhone phone) { if (dialString != null) { if (phone.isInCall()) { if ((dialString.length()) <= (com.android.internal.telephony.gsm.GsmMmiCode.MAX_LENGTH_SHORT_CODE)) { return true; } } if ((dialString.length()) <= (com.android.internal.telephony.gsm.GsmMmiCode.MAX_LENGTH_SHORT_CODE)) { if ((dialString.charAt(((dialString.length()) - 1))) == (com.android.internal.telephony.gsm.GsmMmiCode.END_OF_USSD_COMMAND)) { return true; } } } return false; }


@javax.annotation.Nonnull void setEmitDebug(boolean emitDebug) throws com.android.jack.api.v01.ConfigurationException;


public void fdatasync(java.io.FileDescriptor fd) throws android.system.ErrnoException;
@java.lang.Override public void mark(int reserve) { mark = cursor; }
public static int magicToApi(byte[] magic) { if ((magic.length) != 8) { return -1; } if ((((((magic[0]) != 'd') || ((magic[1]) != 'e')) || ((magic[2]) != 'x')) || ((magic[3]) != '\n')) || ((magic[7]) != '\u0000')) { return -1; } java.lang.String version = (("" + ((char) (magic[4]))) + ((char) (magic[5]))) + ((char) (magic[6])); if (version.equals(com.android.jack.dx.dex.DexFormat.VERSION_CURRENT)) { return com.android.jack.dx.dex.DexFormat.API_CURRENT; } else if (version.equals(com.android.jack.dx.dex.DexFormat.VERSION_FOR_API_13)) { return 13; } return -1; }
public void test_read$BII3() throws java.io.IOException { java.io.File resources = tests.support.resource.Support_Resources.createTempFolder(); tests.support.resource.Support_Resources.copyFile(resources, null, "Broken_manifest.jar"); java.io.FileInputStream fis = new java.io.FileInputStream(new java.io.File(resources, "Broken_manifest.jar")); java.util.zip.InflaterInputStream iis = new java.util.zip.InflaterInputStream(fis); byte[] outBuf = new byte[530]; try { iis.read(); fail("IOException expected."); } catch (java.io.IOException ee) { } }
private void onLockedAllRecordsLoaded() { setSimLanguageFromEF(); mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); }

public static int SubNeg1(int arg1, int arg2) { return (-arg1) - arg2; }


void setBtScoActiveDevice(android.bluetooth.BluetoothDevice btDevice) { if (com.android.server.audio.AudioService.DEBUG_DEVICES) { android.util.Log.d(com.android.server.audio.AudioService.TAG, (("setBtScoActiveDevice(" + btDevice) + ")")); } synchronized(mScoClients) { final android.bluetooth.BluetoothDevice previousActiveDevice = mBluetoothHeadsetDevice; if (!(java.util.Objects.equals(btDevice, previousActiveDevice))) { if (!(handleBtScoActiveDeviceChange(previousActiveDevice, false))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, ("setBtScoActiveDevice() failed to remove previous device " + previousActiveDevice)); } if (!(handleBtScoActiveDeviceChange(btDevice, true))) { android.util.Log.e(com.android.server.audio.AudioService.TAG, ("setBtScoActiveDevice() failed to add new device " + btDevice)); btDevice = null; } mBluetoothHeadsetDevice = btDevice; if ((mBluetoothHeadsetDevice) == null) { resetBluetoothSco(); } } } }
public int getsockoptInt(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException { return os.getsockoptInt(fd, level, option); }

public void test_isDecimalSeparatorAlwaysShown() { java.text.DecimalFormat df = new java.text.DecimalFormat("###0.##"); assertTrue("Wrong unset value", (!(df.isDecimalSeparatorAlwaysShown()))); df = new java.text.DecimalFormat("###0.00"); assertTrue("Wrong unset2 value", (!(df.isDecimalSeparatorAlwaysShown()))); df = new java.text.DecimalFormat("###0."); assertTrue("Wrong set value", df.isDecimalSeparatorAlwaysShown()); }
@java.lang.Override public void onChange(boolean unused) { synchronized(this) { if (isBluetoothPersistedStateOn()) { if (isAirplaneModeOn()) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_AIRPLANE); } else { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_BLUETOOTH); } } int st = android.bluetooth.BluetoothAdapter.STATE_OFF; try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { st = mBluetooth.getState(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Unable to call getState", e); return; } finally { mBluetoothLock.readLock().unlock(); } android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ("Airplane Mode change - current state: " + (android.bluetooth.BluetoothAdapter.nameForState(st)))); if (isAirplaneModeOn()) { clearBleApps(); if (st == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON)) { try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { mBluetooth.onBrEdrDown(); mEnable = false; mEnableExternal = false; } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Unable to call onBrEdrDown", e); } finally { mBluetoothLock.readLock().unlock(); } } else if (st == (android.bluetooth.BluetoothAdapter.STATE_ON)) { sendDisableMsg(com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE); } } else if (mEnableExternal) { sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE); } } }
public void test_formatD() { java.text.DecimalFormat format = ((java.text.DecimalFormat) (java.text.NumberFormat.getInstance(java.util.Locale.ENGLISH))); format.setGroupingUsed(false); format.setMaximumFractionDigits(400); for (int i = 0; i < 309; i++) { java.lang.String tval = "1"; for (int j = 0; j < i; j++) tval += "0"; double d = java.lang.Double.parseDouble(tval); java.lang.String result = format.format(d); assertEquals(((((i + ") e:") + tval) + " r:") + result), tval, result); } for (int i = 0; i < 322; i++) { java.lang.String tval = "0."; for (int j = 0; j < i; j++) tval += "0"; tval += "1"; double d = java.lang.Double.parseDouble(tval); java.lang.String result = format.format(d); assertEquals(((((i + ") e:") + tval) + " r:") + result), tval, result); } }
public boolean p2pReinvoke(int netId, java.lang.String deviceAddress) { if ((android.text.TextUtils.isEmpty(deviceAddress)) || (netId < 0)) return false; return doBooleanCommand(((("P2P_INVITE persistent=" + netId) + " peer=") + deviceAddress)); }
public void testBrokenSet3() throws java.lang.Exception { java.io.File root = com.android.testutils.TestUtils.getRoot("resources", "brokenSet3"); com.android.ide.common.res2.ResourceSet set = new com.android.ide.common.res2.ResourceSet("main"); set.addSource(root); boolean gotException = false; com.android.ide.common.res2.RecordingLogger logger = new com.android.ide.common.res2.RecordingLogger(); try { set.loadFromFiles(logger); } catch (java.io.IOException e) { gotException = true; } assertTrue("ResourceSet processing should have failed, but didn't", gotException); assertFalse(logger.getErrorMsgs().isEmpty()); }
public void run() { if ((threadIndex) == 0) { for (int i = 0; i < (Main.totalOperations); ++i) { if ((i % 50) == 0) { Main.deoptimizeAll(); } if ((i % 50) == 25) { Main.undeoptimizeAll(); } } Main.done = true; } else { while (!(Main.done)) { $noinline$run0(); } } }


@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("listenForNetwork for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }



@java.lang.Override public void getDataCallList(android.os.Message response) { }

private void syncCheckboxView(android.view.View view) { if (view instanceof android.widget.Checkable) { ((android.widget.Checkable) (view)).setChecked(mChecked); } }


@java.lang.Override public void handle(java.lang.String target, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, int dispatch) throws java.io.IOException { if (!(com.google.gct.login.CancellableServerReceiver.CALLBACK_PATH.equals(target))) { return; } writeLandingHtml(response); response.flushBuffer(); ((com.google.api.client.repackaged.org.mortbay.jetty.Request) (request)).setHandled(true); lock.lock(); try { error = request.getParameter("error"); code = request.getParameter("code"); gotAuthorizationResponse.signal(); } finally { lock.unlock(); } }
@java.lang.Override public final int startActivityWithConfig(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int startFlags, android.content.res.Configuration config, android.os.Bundle bOptions, int userId) { enforceNotIsolatedCaller("startActivityWithConfig"); userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, "startActivityWithConfig", null); int ret = mActivityStarter.startActivityMayWait(caller, (-1), callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, startFlags, null, null, config, bOptions, false, userId, null, null, "startActivityWithConfig"); return ret; }
public void test_emptyFilename() throws java.lang.Exception { java.io.File f = new java.io.File(""); assertFalse(f.canExecute()); assertFalse(f.canRead()); assertFalse(f.canWrite()); try { f.createNewFile(); fail("expected IOException"); } catch (java.io.IOException expected) { } assertFalse(f.delete()); f.deleteOnExit(); assertFalse(f.exists()); assertEquals("", f.getName()); assertEquals(null, f.getParent()); assertEquals(null, f.getParentFile()); assertEquals("", f.getPath()); assertFalse(f.isAbsolute()); assertFalse(f.isDirectory()); assertFalse(f.isFile()); assertFalse(f.isHidden()); assertEquals(0, f.lastModified()); assertEquals(0, f.length()); assertEquals(null, f.list()); assertEquals(null, f.list(null)); assertEquals(null, f.listFiles()); assertEquals(null, f.listFiles(((java.io.FileFilter) (null)))); assertEquals(null, f.listFiles(((java.io.FilenameFilter) (null)))); assertFalse(f.mkdir()); assertFalse(f.mkdirs()); assertFalse(f.renameTo(f)); assertFalse(f.setLastModified(123)); assertFalse(f.setExecutable(true)); assertFalse(f.setReadOnly()); assertFalse(f.setReadable(true)); assertFalse(f.setWritable(true)); java.lang.String cwd = java.lang.System.getProperty("user.dir"); assertEquals(new java.io.File(cwd), f.getAbsoluteFile()); assertEquals(cwd, f.getAbsolutePath()); }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); if (mHasFeature) { installAppAsUser(com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_APK, mPrimaryUserId); if (!(setDeviceOwner((((com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_PKG) + "/") + (com.android.cts.devicepolicy.DeviceOwnerTest.ADMIN_RECEIVER_TEST_CLASS)), mPrimaryUserId, false))) { removeAdmin((((com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_PKG) + "/") + (com.android.cts.devicepolicy.DeviceOwnerTest.ADMIN_RECEIVER_TEST_CLASS)), mPrimaryUserId); fail("Failed to set device owner"); } } mHasEphemeralUserFeature = ((mHasFeature) && (canCreateAdditionalUsers(1))) && (hasUserSplit()); mHasDisabledEphemeralUserFeature = ((mHasFeature) && (canCreateAdditionalUsers(1))) && (!(hasUserSplit())); mHasCreateAndManageUserFeature = (mHasFeature) && (canCreateAdditionalUsers(1)); }
@org.junit.Test public void int_to_char() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(INT_TO_CHAR).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }
@android.test.suitebuilder.annotation.LargeTest public void testReplaceSdcard() { sampleReplaceFromRawResource(((PackageManager.INSTALL_REPLACE_EXISTING) | (PackageManager.INSTALL_EXTERNAL))); }
public native void setFloat(java.lang.Object object, float value) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
public void writeTo(java.io.OutputStream out, java.io.Writer humanOut, boolean verbose) throws java.io.IOException { boolean annotate = humanOut != null; com.android.dx.util.ByteArrayAnnotatedOutput result = toDex0(annotate, verbose); if (out != null) { out.write(result.getArray()); } if (annotate) { result.writeAnnotationsTo(humanOut); } }
@java.lang.Override public void removeItem(com.android.ide.common.res2.AssetItem removedItem, com.android.ide.common.res2.AssetItem replacedBy) throws com.android.ide.common.res2.ConsumerException { if (replacedBy == null) { java.io.File removedFile = new java.io.File(getRootFolder(), removedItem.getName()); removedFile.delete(); } }
@android.test.suitebuilder.annotation.MediumTest public void testPn544Sane() throws java.lang.Exception { java.io.File f = new java.io.File("/dev/pn544"); assertFalse(f.canRead()); assertFalse(f.canWrite()); assertFalse(f.canExecute()); android.permission.cts.FileUtils.FileStatus status = new android.permission.cts.FileUtils.FileStatus(); if ((f.exists()) && (android.permission.cts.FileUtils.getFileStatus(f.getAbsolutePath(), status, true))) { assertEquals("nfc", android.permission.cts.FileUtils.getUserName(status.uid)); assertEquals("nfc", android.permission.cts.FileUtils.getGroupName(status.gid)); } }

public void testVFE7() { try { java.lang.Class.forName("dot.junit.opcodes.iget_byte.d.T_iget_byte_12"); fail("expected a verification exception"); } catch (java.lang.Throwable t) { dot.junit.DxUtil.checkVerifyException(t); } }
@java.lang.Override public boolean setHwPnoList(com.android.server.wifi.WifiNative.PnoSettings settings, com.android.server.wifi.WifiNative.PnoEventHandler eventHandler) { synchronized(mSettingsLock) { if ((mPnoSettings) != null) { android.util.Log.w(com.android.server.wifi.scanner.SupplicantWifiScannerImpl.TAG, "Already running a PNO scan"); return false; } mPnoEventHandler = eventHandler; mPnoSettings = settings; processPendingScans(); return true; } }


private void monitorExpiredPrinters() { if (((mExpirePrinters) == null) && (!(mPrinters.isEmpty()))) { mExpirePrinters = new com.android.bips.LocalDiscoverySession.ExpirePrinters(); mPrintService.getMainHandler().postDelayed(mExpirePrinters, com.android.bips.LocalDiscoverySession.PRINTER_EXPIRATION_MILLIS); } }
private static void printClassInstanceFields(com.android.ahat.Doc doc, com.android.ahat.Query query, com.android.ahat.AhatSnapshot snapshot, com.android.tools.perflib.heap.ClassInstance inst) { doc.section("Fields"); doc.table(new com.android.ahat.Column("Type"), new com.android.ahat.Column("Name"), new com.android.ahat.Column("Value")); com.android.ahat.SubsetSelector<com.android.tools.perflib.heap.ClassInstance.FieldValue> selector = new com.android.ahat.SubsetSelector(query, com.android.ahat.ObjectHandler.INSTANCE_FIELDS_ID, inst.getValues()); for (com.android.tools.perflib.heap.ClassInstance.FieldValue field : selector.selected()) { doc.row(com.android.ahat.DocString.text(field.getField().getType().toString()), com.android.ahat.DocString.text(field.getField().getName()), com.android.ahat.Value.render(snapshot, field.getValue())); } doc.end(); selector.render(doc); }
boolean connectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if ((mStateMachine.getConnectionState(mStateMachine.getCurrentDevice())) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: profile not connected"); return false; } if ((mStateMachine.getAudioState()) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ("connectAudio: audio is not idle, current state " + (mStateMachine.getAudioState()))); return false; } mStateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, mStateMachine.getCurrentDevice()); return true; }



@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { super.widgetSelected(e); if (mProjectButton.getSelection()) { setListElements(mSystemResources.getResources(mResourceType)); } }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { try { MusicUtils.sService.play(); intent = new android.content.Intent("com.android.music.PLAYBACK_VIEWER"); intent.putExtra("oneshot", true); startActivity(intent); } catch (android.os.RemoteException ex) { } finish(); }
@org.junit.Test public void testUpdateLastConnectUid() throws java.lang.Exception { android.net.wifi.WifiConfiguration openNetwork = com.android.server.wifi.WifiConfigurationTestUtil.createOpenNetwork(); com.android.server.wifi.NetworkUpdateResult result = verifyAddNetworkToWifiConfigManager(openNetwork); assertTrue(mWifiConfigManager.checkAndUpdateLastConnectUid(result.getNetworkId(), com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)); android.net.wifi.WifiConfiguration retrievedNetwork = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()); assertEquals(com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID, retrievedNetwork.lastConnectUid); doAnswer(new android.app.test.MockAnswerUtil.AnswerWithArguments() { public int answer(java.lang.String permName, int uid) throws java.lang.Exception { if (uid == (com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)) { return android.content.pm.PackageManager.PERMISSION_GRANTED; } return android.content.pm.PackageManager.PERMISSION_DENIED; } }).when(mFrameworkFacade).checkUidPermission(anyString(), anyInt()); assertFalse(mWifiConfigManager.checkAndUpdateLastConnectUid(result.getNetworkId(), com.android.server.wifi.WifiConfigManagerTest.TEST_UPDATE_UID)); retrievedNetwork = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()); assertEquals(com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID, retrievedNetwork.lastConnectUid); }
@java.lang.Override public boolean accept(@javax.annotation.Nonnull com.android.jack.plugin.Plugin plugin) { try { boolean accepted = plugin.getVersion().getSubReleaseKind().isMoreStableThan(SubReleaseKind.CANDIDATE); if (accepted) { com.android.jack.plugin.StableOnly.logger.log(java.util.logging.Level.INFO, "For plugin ''{0}'', accepted version {1} because stable", new java.lang.Object[]{ plugin.getName(), plugin.getVersion().getVersion() }); } else { com.android.jack.plugin.StableOnly.logger.log(java.util.logging.Level.INFO, "For plugin ''{0}'', rejected version {1} because not stable", new java.lang.Object[]{ plugin.getName(), plugin.getVersion().getVersion() }); } return accepted; } catch (com.android.sched.util.UncomparableSubReleaseKind e) { com.android.jack.plugin.StableOnly.logger.log(java.util.logging.Level.INFO, "For plugin ''{0}'', rejected version {1} because not stable", new java.lang.Object[]{ plugin.getName(), plugin.getVersion().getVersion() }); return false; } }

@org.junit.Test @java.lang.Runtime public void test106() throws java.lang.Exception { java.lang.String test = "com.android.jack.optimizations.valuepropagation.test106"; java.lang.String aType = "Lcom/android/jack/optimizations/valuepropagation/test106/jack/A;"; java.lang.String bType = "Lcom/android/jack/optimizations/valuepropagation/test106/jack/B;"; java.lang.String cType = "Lcom/android/jack/optimizations/valuepropagation/test106/jack/C;"; java.lang.String dType = "Lcom/android/jack/optimizations/valuepropagation/test106/jack/D;"; java.lang.String init1 = ("<init>(" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + ")V"; java.lang.String init2 = (("<init>(" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + ")V"; java.lang.String foo = ("foo(" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + ")V"; compileAndValidate(test, defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(init1, dalvik(test, "A.init1.dalvik")).insert(init2, dalvik(test, "A.init2.dalvik")).insert(foo, dalvik(test, "A.foo.dalvik"))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "B.foo.dalvik"))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "C.foo.dalvik"))).insert(dType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "D.foo.dalvik")))); }
public void testAssistantStackFinishToPreviousApp() throws java.lang.Exception { launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF, "true"); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerState.STATE_RESUMED); mAmWmState.assertFocusedActivity("TestActivity should be resumed", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertFrontStack("Fullscreen stack should be on top.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedStack("Fullscreen stack should be focused.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); }


protected static java.lang.String cstString(com.android.jack.dx.dex.code.DalvInsn insn) { com.android.jack.dx.dex.code.CstInsn ci = ((com.android.jack.dx.dex.code.CstInsn) (insn)); com.android.jack.dx.rop.cst.Constant cst = ci.getConstant(); return cst instanceof com.android.jack.dx.rop.cst.CstString ? ((com.android.jack.dx.rop.cst.CstString) (cst)).toQuoted() : cst.toHuman(); }


public void test_setTrafficClass() throws java.lang.Exception { try (java.net.Socket s = new java.net.Socket()) { for (int i = 0; i <= 255; ++i) { s.setTrafficClass(i); assertEquals((i & (~(libcore.java.net.SocketTest.INET_ECN_MASK))), s.getTrafficClass()); } } }

@org.junit.Test public void testDefaultProvisioningConfiguration() throws java.lang.Exception { final java.lang.String iface = "test_wlan0"; final android.net.ip.IpManager ipm = new android.net.ip.IpManager(mContext, iface, mCb, mNMService); android.net.ip.IpManager.ProvisioningConfiguration config = new android.net.ip.IpManager.ProvisioningConfiguration.Builder().withoutIPv4().withoutIpReachabilityMonitor().build(); ipm.startProvisioning(config); verify(mCb, times(1)).setNeighborDiscoveryOffload(true); verify(mCb, timeout(100).times(1)).setFallbackMulticastFilter(false); verify(mCb, never()).onProvisioningFailure(any()); ipm.stop(); verify(mNMService, timeout(100).times(1)).disableIpv6(iface); verify(mNMService, timeout(100).times(1)).clearInterfaceAddresses(iface); }
@android.test.suitebuilder.annotation.LargeTest public void testFlagFExistingE() { int iFlags = PackageManager.INSTALL_EXTERNAL; int rFlags = (PackageManager.INSTALL_FORWARD_LOCK) | (PackageManager.INSTALL_REPLACE_EXISTING); installFromRawResource("install.apk", R.raw.install, iFlags, false, false, (-1), (-1)); installFromRawResource("install.apk", R.raw.install, rFlags, true, false, (-1), (-1)); }

@java.lang.Override public void copy(@javax.annotation.Nonnull com.android.sched.vfs.VFile srcFile, @javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVFile dstFile) throws com.android.sched.util.file.CannotCloseInputException, com.android.sched.util.file.CannotCloseOutputException, com.android.sched.util.file.CannotReadException, com.android.sched.util.file.CannotWriteException, com.android.sched.util.file.WrongPermissionException { if (srcFile instanceof com.android.sched.vfs.DeflateFS.DeflateVFile) { vfs.copy(((com.android.sched.vfs.DeflateFS.DeflateVFile) (srcFile)).getWrappedFile(), dstFile.getWrappedFile()); } else { super.copy(srcFile, dstFile); } }
@java.lang.Override public void setDataProfile(android.telephony.data.DataProfile[] dps, boolean isRoaming, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_DATA_PROFILE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " with data profiles : ")); for (android.telephony.data.DataProfile profile : dps) { riljLog(profile.toString()); } } java.util.ArrayList<android.hardware.radio.V1_0.DataProfileInfo> dpis = new java.util.ArrayList<>(); for (android.telephony.data.DataProfile dp : dps) { dpis.add(com.android.internal.telephony.RIL.convertToHalDataProfile(dp)); } try { radioProxy.setDataProfile(rr.mSerial, dpis, isRoaming); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setDataProfile", e); } } }

@java.lang.Override @java.lang.SuppressWarnings("unchecked") @javax.annotation.CheckForNull public <T extends com.android.sched.marker.Marker> T removeMarker(@javax.annotation.Nonnull java.lang.Class<T> cls) { synchronized(lock) { if ((markers) == null) { return null; } } return ((T) (markers.remove(cls))); }

public boolean requestIcon(java.lang.String bssid, java.lang.String fileName) { if (com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE) { return mSupplicantStaIfaceHal.initiateHs20IconQuery(bssid, fileName); } else { java.lang.String result = doStringCommand(((("REQ_HS20_ICON " + bssid) + " ") + fileName)); return (result != null) && (result.startsWith("OK")); } }
private void dispatchBackgroundPeriodAlarm() { assertTrue("dispatch background period alarm", mAlarmManager.dispatch(SupplicantWifiScannerImpl.BACKGROUND_PERIOD_ALARM_TAG)); mLooper.dispatchAll(); }
private void recordSnapshotLocked(long currentTime) throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = getNetworkStatsUidDetail(); final android.net.NetworkStats xtSnapshot = getNetworkStatsXt(); final android.net.NetworkStats devSnapshot = mNetworkManager.getNetworkStatsSummaryDev(); final android.net.NetworkStats tetherSnapshot = getNetworkStatsTethering(android.net.NetworkStats.STATS_PER_IFACE); xtSnapshot.combineAllValues(tetherSnapshot); devSnapshot.combineAllValues(tetherSnapshot); mDevRecorder.recordSnapshotLocked(devSnapshot, mActiveIfaces, null, currentTime); mXtRecorder.recordSnapshotLocked(xtSnapshot, mActiveIfaces, null, currentTime); com.android.internal.net.VpnInfo[] vpnArray = mConnManager.getAllVpnInfo(); mUidRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mUidTagRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mStatsObservers.updateStats(xtSnapshot, uidSnapshot, new android.util.ArrayMap(mActiveIfaces), new android.util.ArrayMap(mActiveUidIfaces), vpnArray, currentTime); }

@java.lang.Override public com.android.build.gradle.BaseExtension getExtension() { return extension; }
@org.junit.Test public void retroLambdaDefaultMethodsTest026() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_026).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
private void stopObexServerSession() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Pbap Service stopObexServerSession"); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_ACQUIRE_WAKE_LOCK); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_RELEASE_WAKE_LOCK); if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if (((mAdapter) != null) && (mAdapter.isEnabled())) { startSocketListeners(); } setState(BluetoothPbap.STATE_DISCONNECTED); }
private void maybeSendRA(java.net.InetSocketAddress dest) { if ((dest == null) || (!(isSuitableDestination(dest)))) { dest = mAllNodes; } try { synchronized(mLock) { if ((mRaLength) < (android.net.ip.RouterAdvertisementDaemon.MIN_RA_HEADER_SIZE)) { return; } android.system.Os.sendto(mSocket, mRA, 0, mRaLength, 0, dest); } android.util.Log.d(android.net.ip.RouterAdvertisementDaemon.TAG, ("RA sendto " + (dest.getAddress().getHostAddress()))); } catch (android.system.ErrnoException | java.net.SocketException e) { if (isSocketValid()) { android.util.Log.e(android.net.ip.RouterAdvertisementDaemon.TAG, ("sendto error: " + e)); } } }





@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "ab5f9585-433b-4261-bd15-5c7136f6127b") public void testPhotoCapture() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); java.lang.String originalPhotoList = listPhotos(instrumentation); if ((testFramework.getApi()) >= 24) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launchPath(instrumentation, new java.lang.String[]{ "Camera" }); new com.android.devtools.systemimage.uitest.watchers.CameraAccessPermissionsWatcher(device).checkForCondition(); android.support.test.uiautomator.UiObject shutterButton = device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.CAMERA_SHUTTER_BUTTON_RES)); if (shutterButton.waitForExists(3L)) { shutterButton.clickAndWaitForNewWindow(); } java.lang.String newPhotoList = listPhotos(instrumentation); org.junit.Assert.assertFalse("Photo gallery has not been updated", originalPhotoList.equals(newPhotoList)); android.support.test.uiautomator.UiObject photoThumbnail = device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.CAMERA_PHOTO_THUMBNAIL_RES)); if (photoThumbnail.waitForExists(3L)) { photoThumbnail.clickAndWaitForNewWindow(); } android.support.test.uiautomator.UiObject trashCan = device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.CAMERA_PHOTO_DELETE_RES)); if (trashCan.waitForExists(3L)) { trashCan.click(); } device.pressBack(); device.pressHome(); java.lang.String lastPhotoList = listPhotos(instrumentation); org.junit.Assert.assertTrue("New photo was not deleted", originalPhotoList.equals(lastPhotoList)); } }

public static int Shr24And255(int arg) { return (arg >> 24) & 255; }

static void read(java.nio.channels.SocketChannel chan, byte[] data, int length, long timeout) throws com.android.ddmlib.TimeoutException, java.io.IOException { java.nio.ByteBuffer buf = java.nio.ByteBuffer.wrap(data, 0, (length != (-1) ? length : data.length)); int numWaits = 0; while ((buf.position()) != (buf.limit())) { int count; count = chan.read(buf); if (count < 0) { com.android.ddmlib.Log.d("ddms", "read: channel EOF"); throw new java.io.IOException("EOF"); } else if (count == 0) { if ((timeout != 0) && ((numWaits * (com.android.ddmlib.AdbHelper.WAIT_TIME)) > timeout)) { com.android.ddmlib.Log.d("ddms", "read: timeout"); throw new com.android.ddmlib.TimeoutException(); } try { java.lang.Thread.sleep(com.android.ddmlib.AdbHelper.WAIT_TIME); } catch (java.lang.InterruptedException ie) { } numWaits++; } else { numWaits = 0; } } }
public int getSimState(int slotIndex) { int simState = android.telephony.SubscriptionManager.getSimStateForSlotIndex(slotIndex); return simState; }
@java.lang.Override protected void fillRtTestInfos() { rtTestInfos.add(ADVANCEDTEST); rtTestInfos.add(CFGTEST); rtTestInfos.add(FASTPATH); rtTestInfos.add(SIMPLETEST); }


public void testScreenLayout() throws java.lang.Exception { int expectedScreenLayout = computeScreenLayout(); int expectedSize = expectedScreenLayout & (android.content.res.Configuration.SCREENLAYOUT_SIZE_MASK); int expectedLong = expectedScreenLayout & (android.content.res.Configuration.SCREENLAYOUT_LONG_MASK); for (int i = 0; i < (android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS.length); i++) { android.app.Activity activity = startOrientationActivity(android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS[i]); android.content.res.Configuration mConfig = activity.getResources().getConfiguration(); int actualSize = (mConfig.screenLayout) & (android.content.res.Configuration.SCREENLAYOUT_SIZE_MASK); int actualLong = (mConfig.screenLayout) & (android.content.res.Configuration.SCREENLAYOUT_LONG_MASK); assertEquals(((((("Expected screen size value of " + expectedSize) + " but got ") + actualSize) + " for orientation ") + (android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS[i])), expectedSize, actualSize); assertEquals(((((("Expected screen long value of " + expectedLong) + " but got ") + actualLong) + " for orientation ") + (android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS[i])), expectedLong, actualLong); tearDown(); } }
public int uint32() throws java.io.IOException { return int32(); }
@java.lang.Override @javax.annotation.Nonnull void delete(@javax.annotation.Nonnull com.android.sched.vfs.BaseVFile file) throws com.android.sched.util.file.CannotDeleteFileException { vfs.delete(file); }
void loge(java.lang.String s) { if (com.android.internal.telephony.ims.IsimUiccRecords.DBG) android.util.Log.e(com.android.internal.telephony.ims.IsimUiccRecords.LOG_TAG, ("[ISIM] " + s)); }
@java.lang.SuppressWarnings("resource") @javax.annotation.Nonnull private synchronized com.android.jack.library.v0001.OutputJackLibraryImpl.VFSPair getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) throws com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.NotDirectoryException { com.android.jack.library.v0001.OutputJackLibraryImpl.VFSPair currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VPath prefixPath = new com.android.sched.vfs.VPath(fileType.getPrefix(), '/'); com.android.sched.vfs.OutputVFS outputVFS = new com.android.sched.vfs.PrefixedOutputVFS(baseVFS, prefixPath); com.android.sched.vfs.InputVFS inputVFS; try { inputVFS = new com.android.sched.vfs.PrefixedInputVFS(baseVFS, prefixPath); } catch (com.android.sched.util.file.NoSuchFileException e) { throw new java.lang.AssertionError(e); } if ((generateJacklibDigest) && (fileType == (com.android.jack.library.FileType.DEX))) { outputVFS = new com.android.sched.vfs.MessageDigestOutputVFS(outputVFS, com.android.sched.util.config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO)); } currentSectionVFS = new com.android.jack.library.v0001.OutputJackLibraryImpl.VFSPair(inputVFS, outputVFS); sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }
@java.lang.Override public void run() { while (isSocketValid()) { try { final int rval = android.system.Os.recvfrom(mSocket, mSolication, 0, mSolication.length, 0, solicitor); if ((rval < 1) || ((mSolication[0]) != (android.net.ip.RouterAdvertisementDaemon.ICMPV6_ND_ROUTER_SOLICIT))) { continue; } } catch (android.system.ErrnoException | java.net.SocketException e) { if (isSocketValid()) { android.util.Log.e(android.net.ip.RouterAdvertisementDaemon.TAG, ("recvfrom error: " + e)); } continue; } maybeSendRA(solicitor); } }
private static android.renderscript.RenderScript internalCreate(android.content.Context ctx, int sdkVersion, android.renderscript.RenderScript.ContextType ct, int flags) { if (!(android.renderscript.RenderScript.sInitialized)) { android.util.Log.e(android.renderscript.RenderScript.LOG_TAG, "RenderScript.create() called when disabled; someone is likely to crash"); return null; } if ((flags & (~(((android.renderscript.RenderScript.CREATE_FLAG_LOW_LATENCY) | (android.renderscript.RenderScript.CREATE_FLAG_LOW_POWER)) | (android.renderscript.RenderScript.CREATE_FLAG_WAIT_FOR_ATTACH)))) != 0) { throw new android.renderscript.RSIllegalArgumentException("Invalid flags passed."); } android.renderscript.RenderScript rs = new android.renderscript.RenderScript(ctx); rs.mDev = rs.nDeviceCreate(); rs.mContext = rs.nContextCreate(rs.mDev, flags, sdkVersion, ct.mID); rs.mContextType = ct; rs.mContextFlags = flags; rs.mContextSdkVersion = sdkVersion; if ((rs.mContext) == 0) { throw new android.renderscript.RSDriverException("Failed to create RS context."); } final java.lang.String CACHE_PATH = "com.android.renderscript.cache"; java.io.File f = new java.io.File(RenderScriptCacheDir.mCacheDir, CACHE_PATH); java.lang.String mCachePath = f.getAbsolutePath(); f.mkdirs(); rs.nContextSetCacheDir(mCachePath); rs.mMessageThread = new android.renderscript.RenderScript.MessageThread(rs); rs.mMessageThread.start(); return rs; }

public native void bind(java.io.FileDescriptor fd, java.net.SocketAddress address) throws android.system.ErrnoException, java.net.SocketException;

public int getTimeout() { int timeout = getProperty(com.android.jack.server.ConfigFile.TIME_OUT_PROPERTY, java.lang.Integer.valueOf(7200), new com.android.sched.util.codec.IntCodec()).intValue(); if ((timeout < 0) && (timeout != (com.android.jack.server.ConfigFile.TIMEOUT_DISABLED))) { com.android.jack.server.ConfigFile.logger.log(java.util.logging.Level.WARNING, ((("Invalid config value for " + (com.android.jack.server.ConfigFile.TIME_OUT_PROPERTY)) + ": ") + timeout)); timeout = com.android.jack.server.ConfigFile.TIMEOUT_DISABLED; } return timeout; }

private void notifyRouteChange(java.lang.String action, android.net.RouteInfo route) { final int length = mObservers.beginBroadcast(); try { for (int i = 0; i < length; i++) { try { if (action.equals("updated")) { mObservers.getBroadcastItem(i).routeUpdated(route); } else { mObservers.getBroadcastItem(i).routeRemoved(route); } } catch (android.os.RemoteException | java.lang.RuntimeException e) { } } } finally { mObservers.finishBroadcast(); } }
public void fixupLinkProperties(android.net.LinkProperties oldLp) { if (((((mNetwork.clatd) != null) && (mIsRunning)) && ((mNetwork.linkProperties) != null)) && (!(mNetwork.linkProperties.getAllInterfaceNames().contains(mIface)))) { android.util.Slog.d(com.android.server.connectivity.Nat464Xlat.TAG, ("clatd running, updating NAI for " + (mIface))); for (android.net.LinkProperties stacked : oldLp.getStackedLinks()) { if (mIface.equals(stacked.getInterfaceName())) { mNetwork.linkProperties.addStackedLink(stacked); break; } } } }

@java.lang.Override public com.google.gdt.eclipse.login.common.VerificationCodeHolder obtainVerificationCodeFromExternalUserInteraction(java.lang.String title) { com.google.api.client.extensions.java6.auth.oauth2.VerificationCodeReceiver receiver = new com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver(); java.lang.String redirectUrl; try { redirectUrl = receiver.getRedirectUri(); } catch (java.io.IOException e) { logErrorAndDisplayDialog((title == null ? "Google Login" : title), e); return null; } com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl authCodeRequestUrl = new com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl(com.google.api.client.googleapis.auth.oauth2.GoogleOAuthConstants.AUTHORIZATION_SERVER_URL, clientInfo.getId()).setRedirectUri(redirectUrl).setScopes(com.google.gct.login.OAuthScopeRegistry.getScopes()); com.intellij.ide.BrowserUtil.browse(authCodeRequestUrl.build()); java.lang.String verificationCode; try { verificationCode = receiver.waitForCode(); } catch (java.io.IOException e) { logErrorAndDisplayDialog((title == null ? "Google Login" : title), e); return null; } return new com.google.gdt.eclipse.login.common.VerificationCodeHolder(verificationCode, redirectUrl); }
public boolean disable(java.lang.String packageName, boolean persist) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, "disable(): not allowed for non-active and non system user"); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (((isEnabled()) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_DISABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ((("disable(): mBluetooth = " + (mBluetooth)) + " mBinding = ") + (mBinding))); } synchronized(mReceiver) { if (persist) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_OFF); } mEnableExternal = false; sendDisableMsg(); } return true; }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); reset(mContext); reset(mCS); reset(mLog); when(mLog.forSubComponent(anyString())).thenReturn(mLog); mCM = spy(new com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.TestConnectivityManager(mContext, mCS)); mSM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.TestStateMachine(); mUNM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitor(mSM, com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.EVENT_UNM_UPDATE, ((android.net.ConnectivityManager) (mCM)), mLog); }

public void stopOffloadControl() { if ((mOffloadControl) == null) return; try { final android.hardware.tetheroffload.control.V1_0.IOffloadControl.stopOffloadCallback cb = new android.hardware.tetheroffload.control.V1_0.IOffloadControl.stopOffloadCallback() { @java.lang.Override public void onValues(boolean success, java.lang.String errMsg) { if (success) return; android.util.Log.e(com.android.server.connectivity.tethering.OffloadHardwareInterface.TAG, ("stopOffload failed: " + errMsg)); } }; mOffloadControl.stopOffload(cb); } catch (android.os.RemoteException e) { android.util.Log.d(com.android.server.connectivity.tethering.OffloadHardwareInterface.TAG, ("failed to stopOffload: " + e)); } mOffloadControl = null; }
@org.junit.Test public void retroLambdaDefaultMethodsTest004() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_004); }
@org.junit.Test @org.junit.Ignore public void test002c() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackOutput = runTest002(false, "keep-first", errOut, false, false); checkResourceContent(jackOutput, com.android.jack.fileconflict.FileConflictTests.RESOURCE1_LONGPATH, "Res1"); checkResourceContent(jackOutput, com.android.jack.fileconflict.FileConflictTests.RESOURCE2_LONGPATH, "Res2"); checkResourceContent(jackOutput, com.android.jack.fileconflict.FileConflictTests.RESOURCE3_LONGPATH, "Res3"); junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); }
@java.lang.SuppressWarnings("javadoc") public void visitResourceReference(@com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context, @com.android.annotations.Nullable lombok.ast.AstVisitor visitor, @com.android.annotations.NonNull lombok.ast.Node node, @com.android.annotations.NonNull java.lang.String type, @com.android.annotations.NonNull java.lang.String name, boolean isFramework) { }

@org.junit.Test public void buildCapabilities_wpa1Element() { android.net.wifi.ScanResult.InformationElement ie = new android.net.wifi.ScanResult.InformationElement(); ie.id = android.net.wifi.ScanResult.InformationElement.EID_VSA; ie.bytes = new byte[]{ ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (1)), ((byte) (1)), ((byte) (0)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (2)), ((byte) (2)), ((byte) (0)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (4)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (2)), ((byte) (1)), ((byte) (0)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (2)), ((byte) (0)), ((byte) (0)) }; android.net.wifi.ScanResult.InformationElement[] ies = new android.net.wifi.ScanResult.InformationElement[]{ ie }; java.util.BitSet beaconCap = new java.util.BitSet(16); beaconCap.set(4); java.lang.String result = InformationElementUtil.Capabilities.buildCapabilities(ies, beaconCap); assertEquals("[WPA-PSK]", result); }
protected void setDnsForwarders(final android.net.Network network, final android.net.LinkProperties lp) { java.lang.String[] dnsServers = mConfig.defaultIPv4DNS; final java.util.Collection<java.net.InetAddress> dnses = lp.getDnsServers(); if ((dnses != null) && (!(dnses.isEmpty()))) { dnsServers = android.net.NetworkUtils.makeStrings(dnses); } try { mNMService.setDnsForwarders(network, dnsServers); mLocalLog.log(java.lang.String.format("SET DNS forwarders: network=%s dnsServers=[%s]", network, java.util.Arrays.toString(dnsServers))); } catch (java.lang.Exception e) { mLocalLog.log(("ERROR setting DNS forwarders failed, " + e)); transitionTo(mSetDnsForwardersErrorState); } }




@org.junit.Test public void retainedSize() throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump.getTestDump(); com.android.ahat.heapdump.AhatInstance anObject = dump.getDumpedAhatInstance("anObject"); com.android.ahat.heapdump.AhatSnapshot snapshot = dump.getAhatSnapshot(); long size = anObject.getSize(); assertEquals(size, anObject.getTotalRetainedSize()); assertEquals(size, anObject.getRetainedSize(anObject.getHeap())); for (com.android.ahat.heapdump.AhatHeap heap : snapshot.getHeaps()) { if (!(heap.equals(anObject.getHeap()))) { assertEquals(java.lang.String.format("For heap '%s'", heap.getName()), 0, anObject.getRetainedSize(heap)); } } }


@java.lang.Override public void run() { if ((mTraceFileWriter) == null) { return; } while (!(mIsCancelled)) { final java.lang.String frameCount = java.lang.Integer.toString(mTraceFileWriter.getCurrentFrameCount()); double fileSize = mTraceFileWriter.getCurrentFileSize(); fileSize /= 1024 * 1024; final java.lang.String frameSize = java.lang.String.format("%.2g MB", fileSize); org.eclipse.swt.widgets.Display.getDefault().syncExec(new java.lang.Runnable() { @java.lang.Override public void run() { if (mFramesCollectedLabel.isDisposed()) { return; } mFramesCollectedLabel.setText(frameCount); mTraceFileSizeLabel.setText(frameSize); mFramesCollectedLabel.pack(); mTraceFileSizeLabel.pack(); } }); try { java.lang.Thread.sleep(com.android.ide.eclipse.gltrace.GLTraceCollectorDialog.StatusRefreshTask.REFRESH_INTERVAL); } catch (java.lang.InterruptedException e) { return; } } }




public boolean p2pGroupRemove(java.lang.String iface) { if (android.text.TextUtils.isEmpty(iface)) return false; if ((com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.groupRemove(iface); } else { synchronized(com.android.server.wifi.WifiNative.sLock) { return doBooleanCommandNative(((("IFNAME=" + iface) + " P2P_GROUP_REMOVE ") + iface)); } } }





public void test_readLByteBufferJ_Position_As_Long() throws java.lang.Exception { java.nio.ByteBuffer readBuffer = java.nio.ByteBuffer.allocate(org.apache.harmony.tests.java.nio.channels.FileChannelTest.CAPACITY); try { readOnlyFileChannel.read(readBuffer, java.lang.Long.MAX_VALUE); } catch (java.io.IOException expected) { } }


public native long lseek(java.io.FileDescriptor fd, long offset, int whence) throws libcore.io.ErrnoException;

public boolean isProjectTheme() { return (mThemeCombo.getSelectionIndex()) >= (mPlatformThemeCount); }
@org.junit.Test public void testSocketResourceTrackerLimitation() throws java.lang.Exception { java.util.List<IpSecUdpEncapResponse> openUdpEncapSockets = new java.util.ArrayList<IpSecUdpEncapResponse>(); for (int i = 0; i < (com.android.server.IpSecServiceTest.MAX_NUM_ENCAP_SOCKETS); i++) { IpSecUdpEncapResponse newUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(newUdpEncapSocket); if ((IpSecManager.Status.OK) != (newUdpEncapSocket.status)) { break; } openUdpEncapSockets.add(newUdpEncapSocket); } assertTrue((((openUdpEncapSockets.size()) > 0) && ((openUdpEncapSockets.size()) < (com.android.server.IpSecServiceTest.MAX_NUM_ENCAP_SOCKETS)))); IpSecUdpEncapResponse extraUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(extraUdpEncapSocket); assertEquals(IpSecManager.Status.RESOURCE_UNAVAILABLE, extraUdpEncapSocket.status); mIpSecService.closeUdpEncapsulationSocket(openUdpEncapSockets.get(0).resourceId); openUdpEncapSockets.get(0).fileDescriptor.close(); openUdpEncapSockets.remove(0); extraUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(extraUdpEncapSocket); assertEquals(IpSecManager.Status.OK, extraUdpEncapSocket.status); openUdpEncapSockets.add(extraUdpEncapSocket); for (IpSecUdpEncapResponse openSocket : openUdpEncapSockets) { mIpSecService.closeUdpEncapsulationSocket(openSocket.resourceId); openSocket.fileDescriptor.close(); } }
private final void handleAppDiedLocked(com.android.server.am.ProcessRecord app, boolean restarting, boolean allowRestart) { int pid = app.pid; boolean kept = cleanUpApplicationRecordLocked(app, restarting, allowRestart, (-1)); if ((!kept) && (!restarting)) { removeLruProcessLocked(app); if (pid > 0) { com.android.server.am.ProcessList.remove(pid); } } if ((mProfileProc) == app) { clearProfilerLocked(); } boolean hasVisibleActivities = mStackSupervisor.handleAppDiedLocked(app); app.activities.clear(); if ((app.instrumentationClass) != null) { android.util.Slog.w(com.android.server.am.ActivityManagerService.TAG, ((("Crash of app " + (app.processName)) + " running instrumentation ") + (app.instrumentationClass))); android.os.Bundle info = new android.os.Bundle(); info.putString("shortMsg", "Process crashed."); finishInstrumentationLocked(app, Activity.RESULT_CANCELED, info); } if (!restarting) { if (!(mStackSupervisor.resumeTopActivitiesLocked())) { if (hasVisibleActivities) { mStackSupervisor.ensureActivitiesVisibleLocked(null, 0); } } } }

@java.lang.Override public boolean perform() { try { java.lang.Thread.sleep(100); } catch (java.lang.InterruptedException ignored) { } return true; }
static byte $opt$CharToByte(char a) { if (Main.doThrow) throw new java.lang.Error(); return ((byte) (a)); }

public void setImportedLibraries(@javax.annotation.Nonnull java.util.List<java.io.File> importedLibraries) { this.importedLibraries = importedLibraries; }
public java.lang.String toString() { return java.util.Arrays.asList(configs).toString(); }
private void read(java.io.InputStream patchIn) throws java.io.IOException { java.util.List<com.intellij.updater.PatchAction> newActions = new java.util.ArrayList<com.intellij.updater.PatchAction>(); @java.lang.SuppressWarnings("IOResourceOpenedButNotSafelyClosed") java.io.DataInputStream in = new java.io.DataInputStream(patchIn); int size = in.readInt(); while ((size--) > 0) { int key = in.readInt(); com.intellij.updater.PatchAction a; switch (key) { case com.intellij.updater.Patch.CREATE_ACTION_KEY : a = new com.intellij.updater.CreateAction(in); break; case com.intellij.updater.Patch.UPDATE_ACTION_KEY : a = new com.intellij.updater.UpdateAction(in); break; case com.intellij.updater.Patch.UPDATE_ZIP_ACTION_KEY : a = new com.intellij.updater.UpdateZipAction(in); break; case com.intellij.updater.Patch.DELETE_ACTION_KEY : a = new com.intellij.updater.DeleteAction(in); break; case com.intellij.updater.Patch.DELETE_ZIP_ACTION_KEY : a = new com.intellij.updater.DeleteZipAction(in); break; default : throw new java.lang.RuntimeException(("Unknown action type " + key)); } newActions.add(a); } myActions = newActions; }

org.conscrypt.OpenSSLSessionImpl getSessionToReuse(long sslNativePointer, java.lang.String hostname, int port) throws javax.net.ssl.SSLException { org.conscrypt.OpenSSLSessionImpl sessionToReuse = null; if (client_mode) { javax.net.ssl.SSLSession cachedSession = getCachedClientSession(clientSessionContext, hostname, port); if (cachedSession != null) { if (cachedSession instanceof org.conscrypt.OpenSSLSessionImpl) { sessionToReuse = ((org.conscrypt.OpenSSLSessionImpl) (cachedSession)); } else if (cachedSession instanceof org.conscrypt.OpenSSLExtendedSessionImpl) { sessionToReuse = ((org.conscrypt.OpenSSLExtendedSessionImpl) (cachedSession)).getDelegate(); } if (sessionToReuse != null) { org.conscrypt.NativeCrypto.SSL_set_session(sslNativePointer, sessionToReuse.sslSessionNativePointer); } } } return sessionToReuse; }
@java.lang.Override public void getDataCallList(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_DATA_CALL_LIST, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getDataCallList(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getDataCallList", e); } } }


public static java.lang.invoke.CallSite bsmLookupTest9(java.lang.invoke.MethodHandles.Lookup caller, java.lang.String name, java.lang.invoke.MethodType type, java.lang.invoke.MethodHandle staticGetter, java.lang.invoke.MethodHandle staticSetter, java.lang.invoke.MethodHandle fieldGetter, java.lang.invoke.MethodHandle fieldSetter, java.lang.invoke.MethodHandle instanceInvoke, java.lang.invoke.MethodHandle constructor, java.lang.invoke.MethodHandle interfaceInvoke) throws java.lang.Throwable { java.lang.System.out.println((((((((("bsmLookupTest9 [" + staticGetter) + ", ") + staticSetter) + ", ") + fieldGetter) + ", ") + fieldSetter) + "]")); java.lang.System.out.println(((name + " ") + type)); invokecustom.InvokeCustom.checkStaticFieldTest9(staticGetter, staticSetter); invokecustom.InvokeCustom instance = new invokecustom.InvokeCustom(); instance.checkFieldTest9(fieldGetter, fieldSetter); instanceInvoke.invokeExact(instance); invokecustom.InvokeCustom instance2 = ((invokecustom.InvokeCustom) (constructor.invokeExact(3))); interfaceInvoke.invoke(instance2); final java.lang.invoke.MethodHandles.Lookup lookup = java.lang.invoke.MethodHandles.lookup(); final java.lang.invoke.MethodHandle targetMH = lookup.findStatic(lookup.lookupClass(), name, type); return new java.lang.invoke.ConstantCallSite(targetMH.asType(type)); }
public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_fp_mad s = new com.android.rs.test.ScriptC_fp_mad(pRS); pRS.setMessageHandler(mRsMessage); s.invoke_fp_mad_test(0, 0); pRS.finish(); waitForMessage(); pRS.destroy(); }


public void test_getSendBufferSize() throws java.lang.Exception { int portNumber = tests.support.Support_PortManager.getNextPortForUDP(); ds = new java.net.DatagramSocket(portNumber); ds.setSendBufferSize(134); assertTrue("Incorrect buffer size", ((ds.getSendBufferSize()) >= 134)); }

public void setUp() throws java.lang.Exception { super.setUp(); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStack assistantStack = mAmWmState.getAmState().getStackById(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId = assistantStack.mDisplayId; removeStacks(android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }
@java.lang.Override public final boolean visit(TypeDeclaration typeDecl, org.eclipse.jdt.internal.compiler.lookup.BlockScope scope) { if (((typeDecl.binding) == null) || ((typeDecl.binding.constantPoolName()) == null)) { assert false; return false; } createTypes(typeDecl); createMembers(typeDecl); return visit(typeDecl); }



@com.android.annotations.NonNull private byte[] asRawByteArray(int elementCount) { getBuffer().setPosition(mValuesOffset); assert (mType) != (Type.OBJECT); byte[] bytes = new byte[(java.lang.Math.min(elementCount, mLength)) * (mType.getSize())]; getBuffer().read(bytes); return bytes; }
@org.junit.Test public void testLamba022() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA022).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }

private void setValues(java.util.Map<java.lang.String, java.lang.String> values) { mMinor = java.lang.Integer.parseInt(values.get(com.android.sdklib.internal.export.ApkData.PROP_MINOR)); mRelativePath = values.get(com.android.sdklib.internal.export.ApkData.PROP_PROJECT); mMinSdkVersion = java.lang.Integer.parseInt(values.get(com.android.sdklib.internal.export.ApkData.PROP_API)); java.lang.String tmp = values.get(com.android.sdklib.internal.export.ApkData.PROP_GL); if (tmp != null) { mGlVersion = java.lang.Integer.parseInt(tmp); } tmp = values.get(com.android.sdklib.internal.export.ApkData.PROP_ABI); if (tmp != null) { mAbi = tmp; } tmp = values.get(com.android.sdklib.internal.export.ApkData.PROP_SCREENS); if (tmp != null) { mSupportsScreens = new com.android.sdklib.xml.ManifestData.SupportsScreens(tmp); } }
public void compileAidlFile(@com.android.annotations.NonNull java.io.File aidlFile, @com.android.annotations.NonNull java.io.File sourceOutputDir, @com.android.annotations.NonNull java.util.List<java.io.File> importFolders, @com.android.annotations.Nullable com.android.builder.compiling.DependencyFileProcessor dependencyFileProcessor) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { checkNotNull(aidlFile, "aidlFile cannot be null."); checkNotNull(sourceOutputDir, "sourceOutputDir cannot be null."); checkNotNull(importFolders, "importFolders cannot be null."); java.lang.String aidl = mBuildTools.getPath(BuildToolInfo.PathId.AIDL); if ((aidl == null) || (!(new java.io.File(aidl).isFile()))) { throw new java.lang.IllegalStateException("aidl is missing"); } com.android.builder.internal.compiler.AidlProcessor processor = new com.android.builder.internal.compiler.AidlProcessor(aidl, mTarget.getPath(IAndroidTarget.ANDROID_AIDL), importFolders, sourceOutputDir, (dependencyFileProcessor != null ? dependencyFileProcessor : com.android.builder.AndroidBuilder.sNoOpDependencyFileProcessor), mCmdLineRunner); processor.processFile(aidlFile); }
public static final double nextDouble(double value) { if (value == (java.lang.Double.POSITIVE_INFINITY)) { return value; } long bits; if (value == 0) { bits = 0; } else { bits = java.lang.Double.doubleToLongBits(value); } return java.lang.Double.longBitsToDouble((value < 0 ? bits - 1 : bits + 1)); }
public com.android.ide.eclipse.adt.internal.resources.ViewClassInfo.LayoutParamsInfo getLayoutData() { return mLayoutData; }
private static char maybeStripMarkers(java.lang.String symbol, char fallback) { final int length = symbol.length(); if (length == 1) { return symbol.charAt(0); } if (length > 1) { char first = symbol.charAt(0); if (((first == '\u200e') || (first == '\u200f')) || (first == '\u061c')) { return symbol.charAt(1); } } return fallback; }
public void testMinimalSizeDocked() throws java.lang.Exception { testMinimalSize(android.server.cts.DOCKED_STACK_ID); }

@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mDevice = getDevice(); mSourcePackageName = android.wm.cts.CrossAppDragAndDropTests.SOURCE_PACKAGE_NAME; mTargetPackageName = android.wm.cts.CrossAppDragAndDropTests.TARGET_PACKAGE_NAME; cleanupState(); }
protected void forEach(int slot, android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.FieldPacker v, android.renderscript.Script.LaunchOptions sc) { mRS.validate(); mRS.validateObject(ain); mRS.validateObject(aout); if ((ain == null) && (aout == null)) { throw new android.renderscript.RSIllegalArgumentException("At least one of ain or aout is required to be non-null."); } if (sc == null) { forEach(slot, ain, aout, v); return; } long in_id = 0; if (ain != null) { in_id = ain.getID(mRS); } long out_id = 0; if (aout != null) { out_id = aout.getID(mRS); } byte[] params = null; if (v != null) { params = v.getData(); } mRS.nScriptForEachClipped(getID(mRS), slot, in_id, out_id, params, sc.xstart, sc.xend, sc.ystart, sc.yend, sc.zstart, sc.zend); }
@com.android.annotations.NonNull public void proguardFiles(java.lang.Object... proguardFileArray) { proguardFiles.addAll(project.files(proguardFileArray).files); }

@com.android.annotations.NonNull public static com.google.common.collect.ImmutableList<com.android.tools.perflib.heap.Instance> compute(@com.android.annotations.NonNull java.lang.Iterable<? extends com.android.tools.perflib.heap.Instance> roots) { com.android.tools.perflib.heap.analysis.TopologicalSort.TopologicalSortVisitor visitor = new com.android.tools.perflib.heap.analysis.TopologicalSort.TopologicalSortVisitor(); for (com.android.tools.perflib.heap.Instance root : roots) { root.accept(visitor); } com.google.common.collect.ImmutableList<com.android.tools.perflib.heap.Instance> instances = visitor.getOrderedInstances(); Snapshot.SENTINEL_ROOT.setTopologicalOrder(0); int currentIndex = 0; for (com.android.tools.perflib.heap.Instance node : instances) { node.setTopologicalOrder((++currentIndex)); } return instances; }
@org.junit.runners.Parameterized.Parameters(name = "{0}") public static java.lang.Iterable<?> getParams() throws java.lang.Exception { android.content.Context ctx = android.support.test.InstrumentationRegistry.getTargetContext(); int thisApiVersion = android.os.Build.VERSION.SDK_INT; if (thisApiVersion < 19) { android.util.Log.w(com.android.rs.testbackward.RSBackwardCompatibilityTests.TAG, "API version is less than 19, no tests running"); } java.util.List<com.android.rs.testbackward.UnitTest> validUnitTests = new java.util.ArrayList<>(); if (thisApiVersion >= 19) { validUnitTests.add(new com.android.rs.testbackward.UT_alloc(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_array_alloc(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_array_init(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_atomic(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_bitfield(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_bug_char(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_check_dims(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_clamp(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_clamp_relaxed(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_constant(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_convert(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_convert_relaxed(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_copy_test(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_element(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_foreach(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_foreach_bounds(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_foreach_multi(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_fp_mad(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_int4(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_kernel(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_kernel_struct(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_math_agree(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_math_conformance(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_math(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_min(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_noroot(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_primitives(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_refcount(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_rsdebug(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_rstime(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_rstypes(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_sampler(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_static_globals(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_struct_field(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_struct_field_simple(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_struct(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_unsigned(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_vector(ctx)); } if (thisApiVersion >= 23) { validUnitTests.add(new com.android.rs.testbackward.UT_ctxt_default(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_kernel2d(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_kernel2d_oldstyle(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_kernel3d(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_rsdebug_23(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_script_group2_gatherscatter(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_script_group2_nochain(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_script_group2_pointwise(ctx)); } if (thisApiVersion >= 24) { validUnitTests.add(new com.android.rs.testbackward.UT_fp16(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_fp16_globals(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_math_24(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_math_fp16(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_reduce(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_reduce_backward(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_rsdebug_24(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_script_group2_float(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_single_source_alloc(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_single_source_ref_count(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_single_source_script(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_small_struct(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_small_struct_2(ctx)); } if (thisApiVersion >= 26) { validUnitTests.add(new com.android.rs.testbackward.UT_blur_validation(ctx)); } com.android.rs.testbackward.RSBackwardCompatibilityTests.checkDuplicateNames(validUnitTests); return validUnitTests; }
@org.junit.Test public void requestInstall_asyncSuccess() throws java.lang.Exception { configureCallerHasPermission(); android.os.ParcelFileDescriptor parcelFileDescriptor = createFakeParcelFileDescriptor(); byte[] expectedContent = com.android.server.timezone.RulesManagerServiceTest.createArbitraryBytes(1000); configureParcelFileDescriptorReadSuccess(parcelFileDescriptor, expectedContent); com.android.server.timezone.CheckToken token = createArbitraryToken(); byte[] tokenBytes = token.toByteArray(); com.android.server.timezone.RulesManagerServiceTest.TestCallback callback = new com.android.server.timezone.RulesManagerServiceTest.TestCallback(); assertEquals(RulesManager.SUCCESS, mRulesManagerService.requestInstall(parcelFileDescriptor, tokenBytes, callback)); callback.assertNoResultReceived(); verifyNoInstallerCallsMade(); verifyNoPackageTrackerCallsMade(); com.android.timezone.distro.TimeZoneDistro expectedDistro = new com.android.timezone.distro.TimeZoneDistro(expectedContent); configureStageInstallExpectation(expectedDistro, TimeZoneDistroInstaller.INSTALL_SUCCESS); mFakeExecutor.simulateAsyncExecutionOfLastCommand(); verifyStageInstallCalled(expectedDistro); verifyPackageTrackerCalled(token, true); callback.assertResultReceived(Callback.SUCCESS); }
public void getDefaultDownloadableSubscriptionList(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { mController.getDefaultDownloadableSubscriptionList(mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public static void run(@javax.annotation.Nonnull com.android.jack.Options options) throws com.android.jack.IllegalOptionsException, com.android.jack.JackUserException, com.android.sched.scheduler.ProcessException, com.android.sched.util.config.ConfigurationException { boolean assertEnable = false; assert true == (assertEnable = true); if (((options.proguardFlagsFiles) != null) && (!(options.proguardFlagsFiles.isEmpty()))) { if ((options.flags) == null) { options.flags = new com.android.jack.shrob.spec.Flags(); } for (java.io.File proguardFlagsFile : options.proguardFlagsFiles) { try { com.android.jack.shrob.proguard.GrammarActions.parse(proguardFlagsFile.getPath(), ".", options.flags); } catch (RecognitionException e) { throw new com.android.jack.IllegalOptionsException(((("Error while parsing '" + (e.input.getSourceName())) + "':") + (e.line)), e); } } if (options.flags.optimize()) { com.android.jack.Jack.logger.log(java.util.logging.Level.WARNING, "Flag '-dontoptimize' not found: Proguard optimizations are not supported"); } if (options.flags.preverify()) { com.android.jack.Jack.logger.log(java.util.logging.Level.WARNING, "Flag '-dontpreverify' not found: Proguard preverification is not supported"); } options.applyShrobFlags(); } com.android.sched.util.RunnableHooks hooks = new com.android.sched.util.RunnableHooks(); try { options.checkValidity(hooks); com.android.sched.util.config.Config config = options.getConfig(); com.android.sched.util.config.ThreadConfig.setConfig(config); com.android.sched.util.config.ConfigPrinterFactory.getConfigPrinter().printConfig(config); com.android.sched.util.log.Event event = com.android.sched.util.log.TracerFactory.getTracer().start(JackEventType.JACK_RUN); try { if ((options.hasSanityChecks()) != assertEnable) { com.android.jack.Jack.logger.log(java.util.logging.Level.INFO, "Jack assertion status overriden by sanity checks option"); } java.lang.ClassLoader classLoader = com.android.jack.Jack.class.getClassLoader(); classLoader.clearAssertionStatus(); classLoader.setDefaultAssertionStatus(options.hasSanityChecks()); com.android.jack.Jack.logger.log(java.util.logging.Level.INFO, "Jack sanity checks {0}", (options.hasSanityChecks() ? "enabled" : "disabled")); com.android.jack.ir.ast.JSession session = com.android.jack.Jack.getSession(); com.android.jack.Jack.buildSession(options, hooks); if (config.get(Options.GENERATE_JACK_LIBRARY).booleanValue()) { session.setJackOutputLibrary(session.getInputFilter().getOutputJackLibrary()); } com.android.sched.scheduler.Request request = com.android.jack.Jack.createInitialRequest(); request.addFeature(com.android.jack.preprocessor.PreProcessor.class); request.addFeature(com.android.jack.scheduling.feature.Resources.class); com.android.jack.config.id.JavaVersionPropertyId.JavaVersion sourceVersion = config.get(Options.JAVA_SOURCE_VERSION); if ((sourceVersion.compareTo(JavaVersion.JAVA_7)) >= 0) { request.addFeature(com.android.jack.scheduling.feature.SourceVersion7.class); } if (config.get(Options.ENABLE_COMPILED_FILES_STATISTICS).booleanValue()) { request.addFeature(com.android.jack.scheduling.feature.CompiledTypeStats.class); request.addFeature(com.android.jack.statistics.CodeStats.class); } if (options.hasSanityChecks()) { request.addFeature(com.android.jack.transformations.SanityChecks.class); } if ((options.jarjarRulesFile) != null) { request.addFeature(com.android.jack.transformations.Jarjar.class); } if (options.dxLegacy) { request.addFeature(com.android.jack.scheduling.feature.DxLegacy.class); } if ((options.flags) != null) { if (options.flags.shrink()) { request.addFeature(com.android.jack.shrob.shrink.Shrinking.class); } if (options.flags.obfuscate()) { request.addFeature(com.android.jack.shrob.obfuscation.Obfuscation.class); } if (options.flags.printSeeds()) { request.addProduction(com.android.jack.shrob.seed.SeedFile.class); } if (!(options.flags.keepAttribute("EnclosingMethod"))) { request.addFeature(com.android.jack.shrob.obfuscation.annotation.RemoveEnclosingMethod.class); } if (!(options.flags.keepAttribute("InnerClasses"))) { request.addFeature(com.android.jack.shrob.obfuscation.annotation.RemoveEnclosingType.class); } if (!(options.flags.keepAttribute("Signature"))) { request.addFeature(com.android.jack.shrob.obfuscation.annotation.RemoveGenericSignature.class); } if (!(options.flags.keepAttribute("AnnotationDefault"))) { request.addFeature(com.android.jack.shrob.obfuscation.annotation.RemoveAnnotationDefaultValue.class); } if (!(options.flags.keepAttribute("LocalVariableTypeTable"))) { request.addFeature(com.android.jack.shrob.obfuscation.annotation.RemoveLocalVariableGenericSignature.class); } if (!(options.flags.keepAttribute("Exceptions"))) { request.addFeature(com.android.jack.shrob.obfuscation.annotation.RemoveThrownException.class); } if (!(options.flags.keepAttribute("SourceFile"))) { request.addFeature(com.android.jack.shrob.obfuscation.RemoveSourceFile.class); } if (!(options.flags.keepAttribute("LineNumberTable"))) { request.addFeature(com.android.jack.shrob.obfuscation.annotation.RemoveLineNumber.class); } if (!(options.flags.getKeepParameterNames())) { request.addFeature(com.android.jack.shrob.obfuscation.annotation.RemoveParameterName.class); } if ((options.flags.getRenameSourceFileAttribute()) != null) { request.addFeature(com.android.jack.shrob.obfuscation.SourceFileRenaming.class); } if ((options.flags.getAdaptResourceFileContents()) != null) { request.addFeature(com.android.jack.shrob.obfuscation.resource.AdaptResourceFileContent.class); } } if (config.get(MappingPrinter.MAPPING_OUTPUT_ENABLED).booleanValue()) { request.addProduction(com.android.jack.shrob.obfuscation.Mapping.class); } if (config.get(ShrinkStructurePrinter.STRUCTURE_PRINTING).booleanValue()) { request.addProduction(com.android.jack.shrob.shrink.StructurePrinting.class); } if (config.get(MultiDexLegacy.MULTIDEX_LEGACY).booleanValue()) { request.addFeature(com.android.jack.backend.dex.MultiDexLegacy.class); } if (config.get(Options.INCREMENTAL_MODE).booleanValue()) { request.addFeature(com.android.jack.incremental.Incremental.class); } request.addInitialTagsOrMarkers(com.android.jack.Jack.getJavaSourceInitialTagSet()); request.addInitialTagsOrMarkers(com.android.jack.Jack.getJackFormatInitialTagSet()); if (config.get(Options.GENERATE_DEX_IN_LIBRARY).booleanValue()) { request.addProduction(com.android.jack.backend.dex.DexInLibraryProduct.class); } if (((options.out) != null) || ((options.outZip) != null)) { request.addProduction(com.android.jack.backend.dex.DexFileProduct.class); session.addGeneratedFileType(FileType.DEX); } if (config.get(Options.GENERATE_JAYCE_IN_LIBRARY).booleanValue()) { request.addProduction(com.android.jack.backend.jayce.JayceInLibraryProduct.class); } if (config.get(Options.GENERATE_DEPENDENCIES_IN_LIBRARY).booleanValue()) { request.addProduction(com.android.jack.analysis.dependency.DependencyInLibraryProduct.class); } com.android.sched.scheduler.ProductionSet targetProduction = request.getTargetProductions(); com.android.sched.scheduler.FeatureSet features = request.getFeatures(); com.android.sched.scheduler.PlanBuilder<com.android.jack.ir.ast.JSession> planBuilder; try { planBuilder = request.getPlanBuilder(com.android.jack.ir.ast.JSession.class); } catch (com.android.sched.scheduler.IllegalRequestException e) { throw new java.lang.AssertionError(e); } planBuilder.append(com.android.jack.preprocessor.PreProcessorApplier.class); com.android.jack.Jack.fillDexPlan(options, planBuilder); if (targetProduction.contains(com.android.jack.backend.dex.DexFileProduct.class)) { planBuilder.append(com.android.jack.backend.dex.DexFileWriter.class); } if (features.contains(com.android.jack.scheduling.feature.Resources.class)) { if (targetProduction.contains(com.android.jack.backend.dex.DexFileProduct.class)) { planBuilder.append(com.android.jack.backend.ResourceWriter.class); } if (targetProduction.contains(com.android.jack.backend.jayce.JayceInLibraryProduct.class)) { planBuilder.append(com.android.jack.resource.LibraryResourceWriter.class); } } if (targetProduction.contains(com.android.jack.backend.jayce.JayceInLibraryProduct.class)) { planBuilder.append(com.android.jack.meta.LibraryMetaWriter.class); } com.android.sched.scheduler.Plan<com.android.jack.ir.ast.JSession> plan; try { try { plan = request.buildPlan(com.android.jack.ir.ast.JSession.class); } catch (com.android.sched.scheduler.PlanNotFoundException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.scheduler.IllegalRequestException e) { throw new java.lang.AssertionError(e); } } catch (java.lang.UnsupportedOperationException e) { plan = planBuilder.getPlan(); assert (((!(targetProduction.contains(com.android.jack.backend.jayce.JayceInLibraryProduct.class))) || (targetProduction.contains(com.android.jack.backend.dex.DexFileProduct.class))) || ((plan.computeFinalTagsOrMarkers(request.getInitialTags()).contains(com.android.jack.ir.JackFormatIr.class)) && (!(targetProduction.contains(com.android.jack.backend.dex.DexInLibraryProduct.class))))) || ((targetProduction.contains(com.android.jack.backend.dex.DexInLibraryProduct.class)) && (targetProduction.contains(com.android.jack.backend.jayce.JayceInLibraryProduct.class))); } com.android.sched.scheduler.PlanPrinterFactory.getPlanPrinter().printPlan(plan); try { plan.getScheduleInstance().process(session); } finally { try { com.android.jack.library.OutputLibrary jackOutputLibrary = session.getJackOutputLibrary(); if (jackOutputLibrary != null) { jackOutputLibrary.close(); } if ((config.get(Options.GENERATE_DEX_FILE).booleanValue()) && ((config.get(Options.DEX_OUTPUT_CONTAINER_TYPE)) == (com.android.sched.vfs.Container.ZIP))) { config.get(Options.DEX_OUTPUT_ZIP).close(); } java.io.File jackLibraryOutputZip = options.getJackLibraryOutputZip(); if ((com.android.sched.util.config.ThreadConfig.get(Options.INCREMENTAL_MODE).booleanValue()) && (jackLibraryOutputZip != null)) { java.io.File incrementalFolder = options.getIncrementalFolder(); assert incrementalFolder != null; java.util.List<java.io.File> filesToCopy = new java.util.ArrayList<java.io.File>(); com.android.sched.util.log.Event timeToZip = com.android.sched.util.log.TracerFactory.getTracer().start(JackEventType.ZIP_JACK_LIBRARY_IN_INCREMENTAL); try { com.android.jack.Jack.getAllFiles(incrementalFolder, filesToCopy); com.android.jack.Jack.writeZipFile(jackLibraryOutputZip, incrementalFolder, filesToCopy); } finally { timeToZip.end(); } } } catch (com.android.jack.library.LibraryIOException e) { throw new java.lang.AssertionError(e); } catch (java.io.IOException e) { throw new java.lang.AssertionError(e); } } } finally { event.end(); } } catch (com.android.jack.NothingToDoException e1) { } finally { hooks.runHooks(); com.android.sched.util.config.ThreadConfig.unsetConfig(); } }
@org.gradle.model.Unmanaged org.gradle.api.NamedDomainObjectContainer<com.android.build.gradle.internal.dsl.GroupableProductFlavor> getProductFlavors();
public static void setExtensionDefault(com.android.build.gradle.ndk.managed.NdkConfig ndkConfig) { if (!(ndkConfig.getCompileSdkVersion().isEmpty())) { try { int version = java.lang.Integer.parseInt(ndkConfig.getCompileSdkVersion()); ndkConfig.setCompileSdkVersion(("android-" + (ndkConfig.getCompileSdkVersion()))); } catch (java.lang.NumberFormatException ignored) { } } if (ndkConfig.getToolchain().isEmpty()) { ndkConfig.setToolchain(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_TOOLCHAIN); } else { if ((!(ndkConfig.getToolchain().equals("gcc"))) && (!(ndkConfig.getToolchain().equals("clang")))) { throw new org.gradle.api.InvalidUserDataException(java.lang.String.format("Invalid toolchain '%s'. Supported toolchains are 'gcc' and 'clang'.", ndkConfig.getToolchain())); } } if (ndkConfig.getToolchainVersion().isEmpty()) { ndkConfig.setToolchainVersion(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_TOOLCHAIN_VERSION); } ndkConfig.getCFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue("**/*.c"); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue("**/*.cpp"); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue("**/*.cc"); } }); if (ndkConfig.getStl().isEmpty()) { ndkConfig.setStl(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_STL); } else { com.android.build.gradle.ndk.internal.StlConfiguration.checkStl(ndkConfig.getStl()); } }

public static short charToDoubleToShort(char value) { return ((short) ((double) (value))); }

private void scheduleImpl(java.util.TimerTask task, long delay, long period, boolean fixed) { synchronized(impl) { if (impl.cancelled) { throw new java.lang.IllegalStateException("Timer was canceled"); } long when = delay + (java.lang.System.currentTimeMillis()); if (when < 0) { throw new java.lang.IllegalArgumentException(("Illegal delay to start the TimerTask: " + when)); } synchronized(task.lock) { if (task.isScheduled()) { throw new java.lang.IllegalStateException("TimerTask is scheduled already"); } if (task.cancelled) { throw new java.lang.IllegalStateException("TimerTask is canceled"); } task.when = when; task.period = period; task.fixedRate = fixed; } impl.insertTask(task); } }

private static dalvik.system.DexPathList.Element[] makeDexElements(java.util.List<java.io.File> files, java.io.File optimizedDirectory, java.util.List<java.io.IOException> suppressedExceptions) { java.util.ArrayList<dalvik.system.DexPathList.Element> elements = new java.util.ArrayList<dalvik.system.DexPathList.Element>(); for (java.io.File file : files) { java.io.File zip = null; dalvik.system.DexFile dex = null; java.lang.String name = file.getName(); if (file.isDirectory()) { elements.add(new dalvik.system.DexPathList.Element(file, true, null, null)); } else if (file.isFile()) { if (name.endsWith(dalvik.system.DexPathList.DEX_SUFFIX)) { try { dex = dalvik.system.DexPathList.loadDexFile(file, optimizedDirectory); } catch (java.io.IOException ex) { java.lang.System.logE(("Unable to load dex file: " + file), ex); } } else { zip = file; try { dex = dalvik.system.DexPathList.loadDexFile(file, optimizedDirectory); } catch (java.io.IOException suppressed) { suppressedExceptions.add(suppressed); } } } else { java.lang.System.logW(("ClassLoader referenced unknown path: " + file)); } if ((zip != null) || (dex != null)) { elements.add(new dalvik.system.DexPathList.Element(file, false, zip, dex)); } } return elements.toArray(new dalvik.system.DexPathList.Element[elements.size()]); }
@javax.annotation.Nonnull protected static java.io.File getJackFile(@javax.annotation.Nonnull java.lang.String typeName) { return new java.io.File(com.android.jack.experimental.incremental.JackIncremental.jackFilesFolder, (((FileType.JAYCE.getPrefix()) + (java.io.File.separatorChar)) + (new com.android.sched.vfs.VPath((typeName + (com.android.jack.backend.jayce.JayceFileImporter.JAYCE_FILE_EXTENSION)), com.android.jack.experimental.incremental.JackIncremental.fileSeparator).getPathAsString(java.io.File.separatorChar)))); }
public native void fsync(java.io.FileDescriptor fd) throws android.system.ErrnoException;



public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException;



private void updateDeviceState(int eventType, boolean state) { switch (eventType) { case com.android.internal.telephony.DeviceStateMonitor.EVENT_SCREEN_STATE_CHANGED : if ((mIsScreenOn) == state) return; mIsScreenOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_CHARGING_STATE_CHANGED : if ((mIsCharging) == state) return; mIsCharging = state; sendDeviceState(com.android.internal.telephony.CHARGING_STATE, mIsCharging); break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_TETHERING_STATE_CHANGED : if ((mIsTetheringOn) == state) return; mIsTetheringOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_POWER_SAVE_MODE_CHANGED : if ((mIsPowerSaveOn) == state) return; mIsPowerSaveOn = state; sendDeviceState(com.android.internal.telephony.POWER_SAVE_MODE, mIsPowerSaveOn); break; default : return; } if ((mIsLowDataExpected) != (isLowDataExpected())) { mIsLowDataExpected = !(mIsLowDataExpected); sendDeviceState(com.android.internal.telephony.LOW_DATA_EXPECTED, mIsLowDataExpected); } int newFilter = 0; if (!(shouldTurnOffSignalStrength())) { newFilter |= android.hardware.radio.V1_0.IndicationFilter.SIGNAL_STRENGTH; } if (!(shouldTurnOffFullNetworkUpdate())) { newFilter |= android.hardware.radio.V1_0.IndicationFilter.FULL_NETWORK_STATE; } if (!(shouldTurnOffDormancyUpdate())) { newFilter |= android.hardware.radio.V1_0.IndicationFilter.DATA_CALL_DORMANCY_CHANGED; } setUnsolResponseFilter(newFilter, false); }

boolean sendTrackChangeWithId(boolean requesting, @android.annotation.Nullable com.android.bluetooth.avrcp.MediaController mediaController) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ((("sendTrackChangeWithId (" + requesting) + "): controller ") + mediaController)); byte[] track; long qid = android.media.session.MediaSession.QueueItem.UNKNOWN_ID; if (mediaController != null) { android.media.session.PlaybackState state = mediaController.getPlaybackState(); if (state != null) qid = state.getActiveQueueItemId(); } if ((!requesting) && (qid == (mLastTrackIdSent))) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ("not sending duplicate track changed id " + qid)); return false; } track = java.nio.ByteBuffer.allocate(AvrcpConstants.UID_SIZE).putLong(qid).array(); if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ("trackChangedRsp: 0x" + (com.android.bluetooth.Utils.byteArrayToString(track)))); int trackChangedNT = AvrcpConstants.NOTIFICATION_TYPE_CHANGED; if (requesting) trackChangedNT = AvrcpConstants.NOTIFICATION_TYPE_INTERIM; mMediaInterface.trackChangedRsp(trackChangedNT, track); mLastTrackIdSent = qid; return trackChangedNT == (AvrcpConstants.NOTIFICATION_TYPE_CHANGED); }

@javax.annotation.Nonnull private com.android.jack.jayce.MethodNode getNNode(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod loaded) throws com.android.jack.jayce.JayceFormatException, com.android.jack.jayce.JayceVersionException, java.io.IOException { com.android.jack.jayce.MethodNode methodNode = nnode.get(); if ((methodNode == null) || ((methodNode.getLevel()) != (NodeLevel.FULL))) { com.android.jack.jayce.DeclaredTypeNode declaredTypeNode = enclosingClassLoader.getNNode(NodeLevel.FULL); methodNode = declaredTypeNode.getMethodNode(loaded); } return methodNode; }
@java.lang.Override public void sendDeviceState(int stateType, boolean state, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SEND_DEVICE_STATE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " ") + stateType) + ":") + state)); } try { radioProxy.sendDeviceState(rr.mSerial, stateType, state); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendDeviceState", e); } } }
public int ioctlFlags(java.io.FileDescriptor fd, java.lang.String interfaceName) throws android.system.ErrnoException;
@org.junit.Test public void coreToJayceFromFolder() throws java.lang.Exception { com.android.jill.Options options = new com.android.jill.Options(); options.setBinaryFile(new java.io.File(((com.android.jill.JillTestTools.getAndroidTop()) + "/out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes/"))); options.setVerbose(true); options.container = ContainerType.DIR; options.outputDirOrZip = com.android.jill.JillTestTools.createTempDir("core_", "_dir"); new com.android.jill.Jill(options, "0.1").process(options.getBinaryFile()); }
@org.junit.Test @org.junit.Ignore public void test001c() throws java.lang.Exception { java.io.File jackOutput = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); runTest001(jackOutput, "keep-first", errOut, false, false); java.io.File myClass1 = new java.io.File(jackOutput, com.android.jack.fileconflict.FileConflictTests.JACK_FILE_PATH_1); java.io.File myClass2 = new java.io.File(jackOutput, com.android.jack.fileconflict.FileConflictTests.JACK_FILE_PATH_2); java.io.File myClass3 = new java.io.File(jackOutput, com.android.jack.fileconflict.FileConflictTests.JACK_FILE_PATH_3); junit.framework.Assert.assertTrue(myClass1.exists()); junit.framework.Assert.assertTrue(myClass2.exists()); junit.framework.Assert.assertTrue(myClass3.exists()); junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); }
@java.lang.Override protected void onPreExecute() { mBitmap = getBitmap(); mReferenceBitmap = android.holo.cts.BitmapAssets.getBitmap(getApplicationContext(), mBitmapName); final int threshold = 1; mSame = compareTo(mBitmap, mReferenceBitmap, threshold); }


@java.lang.Override public synchronized void onLoadChildren(final java.lang.String parentMediaId, final com.android.bluetooth.a2dpsink.mbs.Result<java.util.List<android.media.browse.MediaBrowser.MediaItem>> result) { if ((mAvrcpCtrlSrvc) == null) { android.util.Log.e(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, "AVRCP not yet connected."); result.sendResult(java.util.Collections.emptyList()); return; } android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ("onLoadChildren parentMediaId=" + parentMediaId)); if (!(mAvrcpCtrlSrvc.getChildren(mA2dpDevice, parentMediaId, 0, 255))) { result.sendResult(java.util.Collections.emptyList()); return; } synchronized(this) { mParentIdToRequestMap.put(parentMediaId, result); } result.detach(); }

public android.system.StructTimeval getsockoptTimeval(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException;

public native void mkfifo(java.lang.String path, int mode) throws android.system.ErrnoException;
public boolean isBinaryFile(@javax.annotation.Nonnull com.android.sched.vfs.InputVFile v) { return v.getName().endsWith(getFileExtension()); }
public static int SubNeg2(int arg1, int arg2) { int temp = -arg1; return (temp - arg2) | (temp - arg2); }
@java.lang.Override public long getTagBits() { long tagBits = com.android.jack.ecj.loader.jast.AnnotationUtils.getTagBits(jDeclaredType); com.android.jack.ir.ast.JClassOrInterface enclosingType = jDeclaredType.getEnclosingType(); if ((enclosingType != null) && (!(isAnonymous()))) { com.android.jack.ecj.loader.jast.JAstBinaryType enclosing = classpathLocation.findType(enclosingType); if (enclosing != null) { if (com.android.jack.ecj.loader.jast.LoaderUtils.isDeprecated(enclosing)) { tagBits |= org.eclipse.jdt.internal.compiler.lookup.ExtraCompilerModifiers.AccDeprecatedImplicitly; } } } return tagBits; }
private static native void nativeDrawVertices(int nCanvas, int mode, int n, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, int nPaint);
static void someStaticMethod(java.lang.Iterable<?> it) { it.iterator(); }

@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) > 0) { debugLog(("dumpsys arguments, skipping normal dumpsys: " + (android.text.TextUtils.join(" ", args)))); if (args[0].startsWith("--proto")) { if (args[0].equals("--proto-java-bin")) { dumpJava(fd); } else { dumpNative(fd, args); } } return; } writer.println("Bluetooth Status"); writer.println((" enabled: " + (isEnabled()))); writer.println((" state: " + (getState()))); writer.println((" address: " + (getAddress()))); writer.println(((" name: " + (getName())) + "\n")); writer.println("Bonded devices:"); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println((((((" " + (device.getAddress())) + " [") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + "] ") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }

public void testOverlay1Content() throws java.lang.Exception { java.io.File project = buildProject("overlay1", BasePlugin.GRADLE_MIN_VERSION); java.io.File drawableOutput = new java.io.File(project, "build/res/all/debug/drawable"); com.android.build.gradle.ManualBuildTest.checkImageColor(drawableOutput, "no_overlay.png", com.android.build.gradle.ManualBuildTest.GREEN); com.android.build.gradle.ManualBuildTest.checkImageColor(drawableOutput, "type_overlay.png", com.android.build.gradle.ManualBuildTest.GREEN); }


private static android.net.NetworkState buildMobileIpv4UpstreamState() { return com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(true, false); }


@org.jetbrains.annotations.NotNull @java.lang.Override public com.intellij.psi.PsiElementVisitor buildVisitor(@org.jetbrains.annotations.NotNull final com.intellij.codeInspection.ProblemsHolder holder, boolean isOnTheFly) { return new com.google.gct.intellij.endpoints.validation.EndpointPsiElementVisitor() { @java.lang.Override public void visitElement(com.intellij.psi.PsiElement element) { if (!(element instanceof com.intellij.psi.PsiAnnotation)) { return; } if (!(isEndpointClass(element))) { return; } com.intellij.psi.PsiAnnotation annotation = ((com.intellij.psi.PsiAnnotation) (element)); if (!(annotation.getQualifiedName().equals(GctConstants.APP_ENGINE_ANNOTATION_API))) { return; } com.intellij.psi.PsiAnnotationParameterList annotationMemberValue = annotation.getParameterList(); if (annotationMemberValue == null) { return; } if ((annotationMemberValue.getAttributes().length) == 0) { return; } java.lang.String nameValueWithQuotes = annotation.findAttributeValue(com.google.gct.intellij.endpoints.validation.ApiNameInspection.API_NAME_ATTRIBUTE).getText(); java.lang.String nameValue = com.google.gct.intellij.endpoints.util.EndpointUtilities.removeBeginningAndEndingQuotes(nameValueWithQuotes); if (!(com.google.gct.intellij.endpoints.validation.ApiNameInspection.API_NAME_PATTERN.matcher(nameValue).matches())) { holder.registerProblem(element, "Invalid api name. The api name must match '[a-z]+[A-Za-z0-9]*'", LocalQuickFix.EMPTY_ARRAY); } } }; }
private void registerUiccCardEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { app.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir != null) { ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } } } if ((mIccRecords) != null) { mIccRecords.registerForLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_LOCKED, null); mIccRecords.registerForNetworkLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_NETWORK_LOCKED, null); } }


void toggleMute() { mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.TOGGLE_MUTE); }
public native void setsockoptByte(java.io.FileDescriptor fd, int level, int option, int value) throws libcore.io.ErrnoException;



public char getMinusSign() { return minusSign; }


@java.lang.Override public void getHardwareConfig(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_HARDWARE_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getHardwareConfig(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getHardwareConfig", e); } } }



private boolean processArchive(java.io.File file) throws java.io.IOException { java.util.zip.ZipFile zip = new java.util.zip.ZipFile(file); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(40000); byte[] buf = new byte[20000]; boolean any = false; java.util.ArrayList<? extends java.util.zip.ZipEntry> entriesList = java.util.Collections.list(zip.entries()); if (sort) { java.util.Collections.sort(entriesList, new java.util.Comparator<java.util.zip.ZipEntry>() { public int compare(java.util.zip.ZipEntry a, java.util.zip.ZipEntry b) { return com.android.dx.cf.direct.ClassPathOpener.compareClassNames(a.getName(), b.getName()); } }); } consumer.onProcessArchiveStart(file); for (java.util.zip.ZipEntry one : entriesList) { if (one.isDirectory()) { continue; } java.lang.String path = one.getName(); if (filter.accept(path)) { java.io.InputStream in = zip.getInputStream(one); baos.reset(); for (; ;) { int amt = in.read(buf); if (amt < 0) { break; } baos.write(buf, 0, amt); } in.close(); byte[] bytes = baos.toByteArray(); any |= consumer.processFileBytes(path, one.getTime(), bytes); } } zip.close(); return any; }

private java.lang.String fileLineInfo(org.w3c.dom.Node node, java.lang.String defaultName) { java.lang.String name = xmlFileName(node, defaultName); int line = com.android.manifmerger.XmlUtils.extractLineNumber(node); if (line <= 0) { return name; } else { return (name + ':') + line; } }
public static native long EVP_MD_CTX_copy(long ctx);
@com.android.annotations.NonNull com.android.build.gradle.internal.ProductFlavorData<com.android.build.gradle.internal.dsl.ProductFlavor> getDefaultConfig();

boolean collectForceStopProviders(java.lang.String name, int appId, boolean doit, boolean evenPersistent, int userId, java.util.ArrayList<com.android.server.am.ContentProviderRecord> result) { boolean didSomething = collectForceStopProvidersLocked(name, appId, doit, evenPersistent, userId, mSingletonByClass, result); if ((!doit) && didSomething) { return true; } if (userId == (android.os.UserHandle.USER_ALL)) { for (int i = 0; i < (mProvidersByClassPerUser.size()); i++) { if (collectForceStopProvidersLocked(name, appId, doit, evenPersistent, userId, mProvidersByClassPerUser.valueAt(i), result)) { if (!doit) { return true; } didSomething = true; } } } else { java.util.HashMap<android.content.ComponentName, com.android.server.am.ContentProviderRecord> items = getProvidersByClass(userId); if (items != null) { didSomething |= collectForceStopProvidersLocked(name, appId, doit, evenPersistent, userId, items, result); } } return didSomething; }
public void setSurfaceTexture(android.graphics.SurfaceTexture surfaceTexture) { if (surfaceTexture == null) { throw new java.lang.NullPointerException("surfaceTexture must not be null"); } if ((mSurface) != null) { mSurface.release(); } mSurface = surfaceTexture; mUpdateSurface = true; invalidateParentIfNeeded(); }
private void createPages() { mAvdManagerPage = new com.android.sdkuilib.internal.repository.AvdManagerPage(mPagesRootComposite, mUpdaterData); if ((java.lang.System.getenv("EXPERIMENTAL")) != null) { mPackagesPage = new com.android.sdkuilib.internal.repository.PackagesPage(mPagesRootComposite, mUpdaterData); } else { mLocalPackagePage = new com.android.sdkuilib.internal.repository.LocalPackagesPage(mPagesRootComposite, mUpdaterData); mRemotePackagesPage = new com.android.sdkuilib.internal.repository.RemotePackagesPage(mPagesRootComposite, mUpdaterData); } }
private void createApk(com.android.apkbuilder.internal.ApkBuilderImpl apkBuilder, java.lang.String configName, java.lang.String resourceFilter, org.apache.tools.ant.types.Path path, java.lang.String debugPackageSuffix) throws com.android.apkbuilder.ApkBuilder.ApkCreationException, java.io.FileNotFoundException { java.lang.String filename; if ((configName != null) && (resourceFilter != null)) { filename = (((mBaseName) + "-") + configName) + ".ap_"; } else { filename = (mBaseName) + ".ap_"; } java.io.FileInputStream resoucePackageZipFile = new java.io.FileInputStream(new java.io.File(mOutFolder, filename)); mZipArchives.add(resoucePackageZipFile); if ((configName != null) && (resourceFilter != null)) { filename = ((mBaseName) + "-") + configName; } else { filename = mBaseName; } if (mSigned) { filename = filename + debugPackageSuffix; } else { filename = filename + "-unsigned.apk"; } if ((configName == null) || (resourceFilter == null)) { if (mSigned) { java.lang.System.out.println(java.lang.String.format("Creating %s and signing it with a debug key...", filename)); } else { java.lang.System.out.println(java.lang.String.format("Creating %s for release...", filename)); } } else { if (mSigned) { java.lang.System.out.println(java.lang.String.format("Creating %1$s (with %2$s) and signing it with a debug key...", filename, resourceFilter)); } else { java.lang.System.out.println(java.lang.String.format("Creating %1$s (with %2$s) for release...", filename, resourceFilter)); } } java.io.File f = new java.io.File(mOutFolder, filename); org.apache.tools.ant.types.Path.PathElement element = path.createPathElement(); element.setLocation(f); apkBuilder.createPackage(f.getAbsoluteFile(), mZipArchives, mArchiveFiles, mJavaResources, mResourcesJars, mNativeLibraries); mZipArchives.remove(resoucePackageZipFile); }
private void writeJavaMethodBody() throws java.io.IOException { if (com.android.jill.frontend.java.AsmHelper.isInterface(currentClass)) { throw new com.android.jill.JillException(((com.android.jill.frontend.java.AsmHelper.isStatic(currentMethod) ? "static" : "default") + " method into interface is not supported")); } sourceInfoWriter.writeDebugBegin(currentClass, startLine); writer.writeKeyword(Token.METHOD_BODY); writer.writeOpen(); writeLocals(); writeBody(); sourceInfoWriter.writeDebugEnd(currentClass, endLine); writer.writeClose(); }
public void test_getNegativePrefix() { java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setNegativePrefix("--"); assertTrue("Incorrect negative prefix", df.getNegativePrefix().equals("--")); }
void disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH_ADMIN permission"); synchronized(this) { mPbapStateMachine.sendMessage(PbapStateMachine.DISCONNECT); } }
public void onUserSwitched(int userId) { mServiceCache.invalidateCache(userId); mPreferredServices.onUserSwitched(userId); }

public void testIsSupported_And_ForName_NormalProvider() throws java.lang.Exception { assertTrue(java.nio.charset.Charset.isSupported("mockCharset10")); assertTrue(java.nio.charset.Charset.isSupported("MockCharset11")); assertTrue(java.nio.charset.Charset.isSupported("MockCharset12")); assertTrue(java.nio.charset.Charset.isSupported("MOCKCharset10")); assertTrue(java.nio.charset.Charset.isSupported("MOCKCharset11")); assertTrue(java.nio.charset.Charset.isSupported("MOCKCharset12")); assertTrue(((java.nio.charset.Charset.forName("mockCharset10")) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset)); assertTrue(((java.nio.charset.Charset.forName("mockCharset11")) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset)); assertTrue(((java.nio.charset.Charset.forName("mockCharset12")) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset)); assertTrue(((java.nio.charset.Charset.forName("mockCharset10")) == (org.apache.harmony.tests.java.nio.charset.CharsetTest.charset2))); java.nio.charset.Charset.forName("mockCharset11"); assertTrue(((java.nio.charset.Charset.forName("mockCharset12")) == (org.apache.harmony.tests.java.nio.charset.CharsetTest.charset2))); }



public void runTest() { if (mUseIntrinsic) { mIntrinsic.forEach(mOutPixelsAllocation); } else { mScript.forEach_copyIn(mInPixelsAllocation, mScratchPixelsAllocation1); mScript.forEach_horz(mScratchPixelsAllocation2); mScript.forEach_vert(mOutPixelsAllocation); } }
static java.lang.Object newInstance() { try { java.lang.Class c = LocalClass3.CC.class; return c.newInstance(); } catch (java.lang.Exception ex) { ex.printStackTrace(); return null; } }

@org.junit.Test public void testCreateTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); }
public void testDeregistration() throws java.lang.Exception { android.telephony.embms.cts.MbmsDownloadStateCallbackTest.TestDSCallback callback = new android.telephony.embms.cts.MbmsDownloadStateCallbackTest.TestDSCallback(android.telephony.mbms.DownloadStateCallback.ALL_UPDATES); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.registerStateCallback(request, mCallbackExecutor, callback); mDownloadSession.unregisterStateCallback(request, callback); mMiddlewareControl.fireOnStateUpdated(null, null, 0); assertNull(callback.waitOnStateUpdated(android.telephony.embms.cts.MbmsDownloadStateCallbackTest.SHORT_TIMEOUT)); mMiddlewareControl.fireOnProgressUpdated(null, null, 0, 0, 0, 0); assertNull(callback.waitOnProgressUpdated(android.telephony.embms.cts.MbmsDownloadStateCallbackTest.SHORT_TIMEOUT)); }


private android.database.Cursor queryCarrierIdForCurrentSubscription(android.net.Uri uri, java.lang.String[] projectionIn) { int subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); if (!(android.text.TextUtils.isEmpty(uri.getLastPathSegment()))) { try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException(("invalid subid in provided uri" + uri)); } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ("queryCarrierIdForSubId: " + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(mCurrentSubscriptionMap.containsKey(subId))) { return new android.database.MatrixCursor(projectionIn, 0); } final android.database.MatrixCursor c = new android.database.MatrixCursor(projectionIn, 1); final android.database.MatrixCursor.RowBuilder row = c.newRow(); for (int i = 0; i < (c.getColumnCount()); i++) { final java.lang.String columnName = c.getColumnName(i); if (CarrierIdentification.CID.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).first); } else if (CarrierIdentification.NAME.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).second); } else { throw new java.lang.IllegalArgumentException(("Invalid column " + (projectionIn[i]))); } } return c; }
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) throws java.lang.Exception { if ((((method.getEnclosingType().isExternal()) || (method.isNative())) || (method.isAbstract())) || (!(filter.accept(this.getClass(), method)))) { return; } com.android.jack.cfg.ControlFlowGraph cfg = method.getMarker(com.android.jack.cfg.ControlFlowGraph.class); assert cfg != null; for (com.android.jack.cfg.BasicBlock bb : cfg.getNodes()) { bb.removeMarker(com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker.class); } }


private void readHeader() throws java.io.IOException { mType = readHalf(getHeaderOffset(android.security.cts.ReadElf.OFFSET_TYPE)); final long shOffset = readWord(getHeaderOffset(android.security.cts.ReadElf.OFFSET_SHOFF)); final int shNumber = readHalf(getHeaderOffset(android.security.cts.ReadElf.OFFSET_SHNUM)); final int shSize = readHalf(getHeaderOffset(android.security.cts.ReadElf.OFFSET_SHENTSIZE)); final int shStrIndex = readHalf(getHeaderOffset(android.security.cts.ReadElf.OFFSET_SHSTRNDX)); readSectionHeaders(shOffset, shNumber, shSize, shStrIndex); final long phOffset = readWord(getHeaderOffset(android.security.cts.ReadElf.OFFSET_PHOFF)); final int phNumber = readHalf(getHeaderOffset(android.security.cts.ReadElf.OFFSET_PHNUM)); final int phSize = readHalf(getHeaderOffset(android.security.cts.ReadElf.OFFSET_PHENTSIZE)); readProgramHeaders(phOffset, phNumber, phSize); }




public void testScrollTo() throws java.lang.Throwable { final android.widget.TextView tv = new android.text.method.cts.TextViewNoIme(mActivity); tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10); runTestOnUiThread(new java.lang.Runnable() { public void run() { mActivity.setContentView(tv); tv.setSingleLine(true); tv.setLines(2); } }); getInstrumentation().waitForIdleSync(); android.text.TextPaint paint = tv.getPaint(); final android.text.Layout layout = tv.getLayout(); runTestOnUiThread(new java.lang.Runnable() { public void run() { tv.setText(android.text.method.cts.TouchTest.LONG_TEXT); } }); getInstrumentation().waitForIdleSync(); final int width = getTextWidth(android.text.method.cts.TouchTest.LONG_TEXT, paint); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, ((width - (tv.getWidth())) - 1), 0); } }); getInstrumentation().waitForIdleSync(); assertEquals(((width - (tv.getWidth())) - 1), tv.getScrollX()); assertEquals(0, tv.getScrollY()); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, (width + 100), 5); } }); getInstrumentation().waitForIdleSync(); assertEquals((width - (tv.getWidth())), tv.getScrollX(), 1.0F); assertEquals(5, tv.getScrollY()); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, (width - 10), 5); } }); getInstrumentation().waitForIdleSync(); assertEquals((width - (tv.getWidth())), tv.getScrollX(), 1.0F); assertEquals(5, tv.getScrollY()); }
@org.junit.Before public void setUp() throws java.lang.Exception { mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("00:01:02:03:04:05"); mHandlerThread = new android.os.HandlerThread("PbapTestHandlerThread"); mHandlerThread.start(); mHandler = new android.os.Handler(mHandlerThread.getLooper()); mBluetoothPbapService = mock(com.android.bluetooth.pbap.BluetoothPbapService.class); doNothing().when(mBluetoothPbapService).checkOrGetPhonebookPermission(any()); mPbapStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(mBluetoothPbapService, mHandlerThread.getLooper(), mTestDevice, mSocket, mBluetoothPbapService, mHandler, com.android.bluetooth.pbap.PbapTest.TEST_NOTIFICATION_ID); }

public void preDexLibrary(@com.android.annotations.NonNull java.io.File inputFile, @com.android.annotations.NonNull java.io.File outFile, @com.android.annotations.NonNull com.android.builder.DexOptions dexOptions) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { checkNotNull(inputFile, "inputFile cannot be null."); checkNotNull(outFile, "outFile cannot be null."); checkNotNull(dexOptions, "dexOptions cannot be null."); java.util.ArrayList<java.lang.String> command = com.google.common.collect.Lists.newArrayList(); java.lang.String dx = mBuildTools.getPath(BuildToolInfo.PathId.DX); if ((dx == null) || (!(new java.io.File(dx).isFile()))) { throw new java.lang.IllegalStateException("dx is missing"); } command.add(dx); if ((dexOptions.getJavaMaxHeapSize()) != null) { command.add(("-JXmx" + (dexOptions.getJavaMaxHeapSize()))); } command.add("--dex"); if (mVerboseExec) { command.add("--verbose"); } if (dexOptions.getJumboMode()) { command.add("--force-jumbo"); } command.add("--output"); command.add(outFile.getAbsolutePath()); command.add(inputFile.getAbsolutePath()); mCmdLineRunner.runCmdLine(command, null); }


@java.lang.Override @javax.annotation.Nonnull public javax.lang.model.type.TypeMirror getTypeMirror() throws com.android.sched.build.SchedAnnotationProcessor.AbortException { return com.android.sched.build.SchedAnnotationProcessor.Items.env.getTypeUtils().getDeclaredType(getTypeElement(), com.android.sched.build.SchedAnnotationProcessor.Items.env.getTypeUtils().getWildcardType(null, null)); }

private static void addFileWithFootersToDropBox(android.os.DropBoxManager db, java.util.HashMap<java.lang.String, java.lang.Long> timestamps, java.lang.String headers, java.lang.String footers, java.lang.String filename, int maxSize, java.lang.String tag) throws java.io.IOException { if ((db == null) || (!(db.isTagEnabled(tag)))) return; java.io.File file = new java.io.File(filename); long fileTime = file.lastModified(); if (fileTime <= 0) return; if ((timestamps.containsKey(filename)) && ((timestamps.get(filename)) == fileTime)) { return; } timestamps.put(filename, fileTime); android.util.Slog.i(com.android.server.BootReceiver.TAG, (((("Copying " + filename) + " to DropBox (") + tag) + ")")); db.addText(tag, ((headers + (android.os.FileUtils.readTextFile(file, maxSize, "[[TRUNCATED]]\n"))) + footers)); }



public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth); }
protected boolean supportsMultiWindowMode() throws com.android.tradefed.device.DeviceNotAvailableException { return (!(hasDeviceFeature("android.hardware.type.watch"))) || (android.server.cts.ActivityManagerTestBase.PRETEND_DEVICE_SUPPORTS_DOCKING); }
private android.app.PendingIntent createTelecomPendingIntent(java.lang.String action, android.net.Uri data, android.os.UserHandle userHandle) { android.content.Intent intent = new android.content.Intent(action, data, mContext, com.android.server.telecom.components.TelecomBroadcastReceiver.class); intent.putExtra(TelecomBroadcastIntentProcessor.EXTRA_USERHANDLE, userHandle); return android.app.PendingIntent.getBroadcast(mContext, 0, intent, 0); }
@java.lang.Override public void queryCallBarring(int cbType, android.os.Message result) { if (com.android.ims.ImsUt.DBG) { log(((("queryCallBarring :: Ut=" + (miUt)) + ", cbType=") + cbType)); } synchronized(mLockObj) { try { int id = miUt.queryCallBarring(cbType); if (id < 0) { sendFailureReport(result, new com.android.ims.ImsReasonInfo(ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, 0)); return; } mPendingCmds.put(java.lang.Integer.valueOf(id), result); } catch (android.os.RemoteException e) { sendFailureReport(result, new com.android.ims.ImsReasonInfo(ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, 0)); } } }
public native libcore.io.StructLinger getsockoptLinger(java.io.FileDescriptor fd, int level, int option) throws libcore.io.ErrnoException;


@java.lang.Override public java.lang.String installRemotePackage(java.lang.String remoteFilePath, boolean reinstall, java.lang.String... extraArgs) throws com.android.ddmlib.InstallException { try { com.android.ddmlib.Device.InstallReceiver receiver = new com.android.ddmlib.Device.InstallReceiver(); java.lang.StringBuilder optionString = new java.lang.StringBuilder(); if (reinstall) { optionString.append("-r "); } if (extraArgs != null) { optionString.append(com.google.common.base.Joiner.on(' ').join(extraArgs)); } java.lang.String cmd = java.lang.String.format("pm install %1$s \"%2$s\"", optionString.toString(), remoteFilePath); executeShellCommand(cmd, receiver, com.android.ddmlib.Device.INSTALL_TIMEOUT_MINUTES, java.util.concurrent.TimeUnit.MINUTES); return receiver.getErrorMessage(); } catch (com.android.ddmlib.TimeoutException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.AdbCommandRejectedException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { throw new com.android.ddmlib.InstallException(e); } catch (java.io.IOException e) { throw new com.android.ddmlib.InstallException(e); } }

static void field(@javax.annotation.Nonnull com.android.jack.shrob.spec.ClassSpecification classSpec, @javax.annotation.CheckForNull com.android.jack.shrob.spec.AnnotationSpecification annotationType, @javax.annotation.CheckForNull java.lang.String typeSig, java.lang.String name, @javax.annotation.Nonnull com.android.jack.shrob.spec.ModifierSpecification modifier) { assert name != null; com.android.jack.shrob.spec.NameSpecification typeSignature = null; if (typeSig != null) { typeSignature = com.android.jack.shrob.proguard.GrammarActions.name(typeSig); } else { assert name.equals("*"); } classSpec.add(new com.android.jack.shrob.spec.FieldSpecification(com.android.jack.shrob.proguard.GrammarActions.name(name), modifier, typeSignature, annotationType)); }

public void run() { com.android.rs.test.Allocation A; com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); pRS.setMessageHandler(mRsMessage); com.android.rs.test.ScriptC_fp16 s = new com.android.rs.test.ScriptC_fp16(pRS); for (int nDims = 1; nDims <= 3; nDims++) { TestHalf(pRS, s, nDims); TestHalf2(pRS, s, nDims); TestHalf3(pRS, s, nDims); TestHalf4(pRS, s, nDims); } s.invoke_fp16_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }

private void dumpToDir(com.android.sched.vfs.VDir srcRootDir, com.android.sched.vfs.VDir destRootDir) throws com.android.sched.util.file.CannotCloseInputException, com.android.sched.util.file.CannotCloseOutputException, com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotReadException, com.android.sched.util.file.CannotWriteException, com.android.sched.util.file.WrongPermissionException { for (com.android.sched.vfs.VElement element : srcRootDir.list()) { java.lang.String elementName = element.getName(); if (element.isVDir()) { com.android.sched.vfs.VDir dir = destRootDir.createVDir(elementName); dumpToDir(((com.android.sched.vfs.VDir) (element)), dir); } else { com.android.sched.vfs.VFile file = destRootDir.createVFile(elementName); try (java.io.InputStream is = ((com.android.sched.vfs.VFile) (element)).getInputStream()) { try (java.io.OutputStream os = file.getOutputStream()) { new com.android.sched.util.stream.LocationByteStreamSucker(is, os, element, file).suck(); } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotCloseOutputException(file, e); } } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotCloseInputException(element, e); } } } }

public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
@android.telephony.ims.internal.stub.ImsRegistrationImplBase.ImsRegistrationTech private int getConnectionType() { synchronized(mLock) { return mConnectionType; } }
public boolean supportsParameter(java.lang.Object parameter) { return true; }


public libcore.io.StructTimeval getsockoptTimeval(java.io.FileDescriptor fd, int level, int option) throws libcore.io.ErrnoException { return os.getsockoptTimeval(fd, level, option); }
@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClass create(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage enclosingPackage, @javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader loader) { assert (signature) != null; assert (sourceInfo) != null; java.lang.String binaryName = com.android.jack.util.NamingTools.getClassBinaryNameFromDescriptor(signature); java.lang.String simpleName = com.android.jack.util.NamingTools.getSimpleClassNameFromBinaryName(binaryName); com.android.jack.ir.sourceinfo.SourceInfo jSourceInfo = sourceInfo.exportAsJast(new com.android.jack.jayce.v0002.io.ExportSession(loader.getLookup(), enclosingPackage.getSession(), com.android.jack.jayce.NodeLevel.STRUCTURE)); com.android.jack.ir.ast.JDefinedClass jClassType = new com.android.jack.ir.ast.JDefinedClass(jSourceInfo, simpleName, modifiers, enclosingPackage, loader); return jClassType; }

@java.lang.Override public void srcToExe(@javax.annotation.Nonnull java.io.File out, boolean zipFile, @javax.annotation.Nonnull java.io.File... sources) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); srcToCommon(args, sources); if (zipFile) { args.add("--output-dex-zip"); } else { args.add("--output-dex"); } args.add(out.getAbsolutePath()); args.addAll(extraJackArgs); if (withDebugInfos) { args.add("-g"); } com.android.jack.test.toolchain.AbstractTestTools.addFile(args, false, sources); com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(outRedirectStream); exec.setOut(errRedirectStream); exec.setVerbose(isVerbose); if (!(exec.run())) { throw new java.lang.RuntimeException("Jack compiler exited with an error"); } }
private void queryFdn() { int serviceClassX; serviceClassX = ((com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_VOICE) + (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_DATA)) + (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_FAX); mCi.queryFacilityLockForApp(CommandsInterface.CB_FACILITY_BA_FD, "", serviceClassX, mAid, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCardApplication.EVENT_QUERY_FACILITY_FDN_DONE)); }
@java.lang.Override public void deleteSmsOnSim(int index, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_DELETE_SMS_ON_SIM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGV) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " index = ") + index)); } try { radioProxy.deleteSmsOnSim(rr.mSerial, index); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "deleteSmsOnSim", e); } } }
public void pauseScan() { android.hardware.wifi.V1_0.WifiStatus status; kilroy(); synchronized(com.android.server.wifi.WifiVendorHal.sLock) { try { if ((mIWifiStaIface) == null) return; if (((mScan) != null) && (!(mScan.paused))) { status = mIWifiStaIface.stopBackgroundScan(mScan.cmdId); if ((status.code) != (android.hardware.wifi.V1_0.WifiStatusCode.SUCCESS)) return; kilroy(); mScan.paused = true; } } catch (android.os.RemoteException e) { handleRemoteException(e); } } }
public void deactivateDataCall(int cid, boolean reasonRadioShutDown, boolean isHandover, android.telephony.data.DataServiceCallback callback) { callback.onDeactivateDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED); }



private static void provideJarEntry(java.util.jar.JarFile jarFile, java.util.jar.JarEntry jarEntry, com.android.apksigner.core.ApkSignerEngine.InspectJarEntryRequest request, byte[] tmpbuf) throws java.io.IOException { com.android.apksigner.core.util.DataSink dataSink = request.getDataSink(); try (java.io.InputStream in = jarFile.getInputStream(jarEntry)) { int chunkSize; while ((chunkSize = in.read(tmpbuf)) > 0) { dataSink.consume(tmpbuf, 0, chunkSize); } request.done(); } }
@com.googlecode.android_scripting.rpc.RpcDeprecated("wifiConnectByConfig") @com.googlecode.android_scripting.rpc.Rpc(description = "Connects to the network with the given configuration") public java.lang.Boolean wifiConnect(@com.googlecode.android_scripting.rpc.RpcParameter(name = "config") org.json.JSONObject config) throws org.json.JSONException { try { wifiConnectByConfig(config); } catch (java.security.GeneralSecurityException e) { java.lang.String msg = "Caught GeneralSecurityException with the provided" + "configuration"; throw new java.lang.RuntimeException(msg); } return true; }
private void addCoverageListener(java.util.List<org.junit.runner.notification.RunListener> list, org.junit.runner.JUnitCore testRunner) { if (getBooleanArgument(com.android.test.runner.AndroidJUnitRunner.ARGUMENT_COVERAGE)) { java.lang.String coverageFilePath = getArguments().getString(com.android.test.runner.AndroidJUnitRunner.ARGUMENT_COVERAGE_PATH); addListener(list, testRunner, new com.android.test.runner.listener.CoverageListener(this, coverageFilePath)); } }
private synchronized void markIfNecessary(@javax.annotation.Nonnull com.android.jack.ir.ast.JNode node, @javax.annotation.Nonnull com.android.jack.shrob.spec.KeepModifier modifier) { com.android.jack.shrob.seed.SeedMarker marker = node.getMarker(com.android.jack.shrob.seed.SeedMarker.class); if (marker == null) { node.addMarker(new com.android.jack.shrob.seed.SeedMarker(modifier)); } else { com.android.jack.shrob.spec.KeepModifier previousModifier = marker.getModifier(); if (previousModifier != modifier) { marker.setModifier(new com.android.jack.shrob.spec.KeepModifier()); } } }
@java.lang.Override @android.annotation.NonNull public android.os.PersistableBundle getConfigForSubId(int subId) { try { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, null); } catch (java.lang.SecurityException e) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_STATE, null); } int phoneId = android.telephony.SubscriptionManager.getPhoneId(subId); android.os.PersistableBundle retConfig = android.telephony.CarrierConfigManager.getDefaultConfig(); if (android.telephony.SubscriptionManager.isValidPhoneId(phoneId)) { android.os.PersistableBundle config = mConfigFromDefaultApp[phoneId]; if (config != null) retConfig.putAll(config); config = mConfigFromCarrierApp[phoneId]; if (config != null) retConfig.putAll(config); } return retConfig; }

public static com.android.builder.profile.Recorder get() { return com.android.builder.profile.ThreadRecorder.recorder.get(); }


@java.lang.Override public long getLastModified(@javax.annotation.Nonnull com.android.sched.vfs.ParentVFile file) { return getNativeFile(file.getPath()).lastModified(); }


private void runAttachTestCmd(com.android.tradefed.device.ITestDevice device, java.lang.String pkg, java.lang.String agentParams) throws java.lang.Exception { java.lang.String attachCmd = ((("cmd activity start -S -W " + agentParams) + " -n ") + pkg) + "/android.jvmti.JvmtiActivity"; java.lang.String attachReply = device.executeShellCommand(attachCmd); if ((attachReply != null) && (!(attachReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(attachReply); } }


public void testCommentAndExtraInSameOrder() throws java.lang.Exception { java.lang.String comment = libcore.java.util.zip.ZipEntryTest.makeString(17, "z"); byte[] extra = libcore.java.util.zip.ZipEntryTest.makeString(11, "a").getBytes(); java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); ze = new java.util.zip.ZipEntry("y"); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); try { assertEquals(comment, zipFile.getEntry("x").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry("x").getExtra())); assertEquals(comment, zipFile.getEntry("y").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry("y").getExtra())); } finally { zipFile.close(); } }
public java.util.jar.Manifest getManifest() throws java.io.IOException { if (closed) { throw new java.lang.IllegalStateException("JarFile has been closed"); } if ((manifest) != null) { return manifest; } try { java.io.InputStream is = super.getInputStream(manifestEntry); if ((verifier) != null) { verifier.addMetaEntry(manifestEntry.getName(), libcore.io.Streams.readFully(is)); is = super.getInputStream(manifestEntry); } try { manifest = new java.util.jar.Manifest(is, ((verifier) != null)); } finally { is.close(); } manifestEntry = null; } catch (java.lang.NullPointerException e) { manifestEntry = null; } return manifest; }
@java.lang.Override protected boolean start() { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "start()"); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED); filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED); filter.addAction(com.android.bluetooth.pbap.BluetoothPbapService.AUTH_RESPONSE_ACTION); filter.addAction(com.android.bluetooth.pbap.BluetoothPbapService.AUTH_CANCELLED_ACTION); mInterrupted = false; com.android.bluetooth.pbap.BluetoothPbapConfig.init(this); mSessionStatusHandler.sendMessage(mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.START_LISTENER)); if ((mContactChangeObserver) == null) { registerReceiver(mPbapReceiver, filter); try { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Registering observer"); } mContactChangeObserver = new com.android.bluetooth.pbap.BluetoothPbapService.BluetoothPbapContentObserver(); getContentResolver().registerContentObserver(com.android.bluetooth.util.DevicePolicyUtils.getEnterprisePhoneUri(this), false, mContactChangeObserver); } catch (android.database.sqlite.SQLiteException e) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("SQLite exception: " + e)); } catch (java.lang.IllegalStateException e) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Illegal state exception, content observer is already registered"); } } return true; }
static long $opt$DoubleToLong(double a) { if (Main.doThrow) throw new java.lang.Error(); return ((long) (a)); }


@org.junit.Test public void long_to_int() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LONG_TO_INT).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }
com.android.ddmlib.SyncService getSyncService() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException;
private void createParameters(@javax.annotation.CheckForNull org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding[] sab, @javax.annotation.Nonnull com.android.jack.ir.sourceinfo.SourceInfo info, @javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method, @javax.annotation.Nonnull java.util.Set<java.lang.String> alreadyNamedVariables) { if (sab != null) { for (int i = 0; i < (sab.length); ++i) { org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding arg = sab[i]; java.lang.String argName = java.lang.String.valueOf(arg.name); if (alreadyNamedVariables.contains(argName)) { argName += "_" + i; } createParameter(info, method, argName, arg.type, getModifier(arg)); alreadyNamedVariables.add(argName); } } }

public void test_gc() { java.lang.Runtime rt = java.lang.Runtime.getRuntime(); java.util.Vector<java.lang.StringBuffer> vec = new java.util.Vector<java.lang.StringBuffer>(); long beforeTest = rt.freeMemory(); while ((rt.freeMemory()) < ((beforeTest * 2) / 3)) { vec.add(new java.lang.StringBuffer(1000)); } long beforeGC = rt.freeMemory(); java.lang.System.gc(); long afterGC = rt.freeMemory(); assertTrue((((("memory was not released after calling System.gc()." + "before gc: ") + beforeGC) + "; after gc: ") + afterGC), (beforeGC < afterGC)); }
private void testPreviewPictureSizesCombinationByCamera(int cameraId) throws java.lang.Exception { initializeMessageLooper(cameraId); mCamera.setPreviewDisplay(getActivity().getSurfaceView().getHolder()); android.hardware.Camera.Parameters parameters = mCamera.getParameters(); android.hardware.cts.CameraTest.PreviewCbForPreviewPictureSizesCombination callback = new android.hardware.cts.CameraTest.PreviewCbForPreviewPictureSizesCombination(); for (android.hardware.Camera.Size previewSize : parameters.getSupportedPreviewSizes()) { for (android.hardware.Camera.Size pictureSize : parameters.getSupportedPictureSizes()) { android.util.Log.v(TAG, (((((((("Test previewSize=(" + (previewSize.width)) + ",") + (previewSize.height)) + ") pictureSize=(") + (pictureSize.width)) + ",") + (pictureSize.height)) + ")")); mPreviewCallbackResult = false; mCamera.setPreviewCallback(callback); callback.expectedPreviewSize = previewSize; parameters.setPreviewSize(previewSize.width, previewSize.height); parameters.setPictureSize(pictureSize.width, pictureSize.height); mCamera.setParameters(parameters); assertEquals(previewSize, mCamera.getParameters().getPreviewSize()); assertEquals(pictureSize, mCamera.getParameters().getPictureSize()); mCamera.startPreview(); waitForPreviewDone(); assertTrue(mPreviewCallbackResult); mCamera.takePicture(mShutterCallback, mRawPictureCallback, mJpegPictureCallback); waitForSnapshotDone(); assertTrue(mJpegPictureCallbackResult); assertNotNull(mJpegData); android.graphics.Bitmap b = android.graphics.BitmapFactory.decodeByteArray(mJpegData, 0, mJpegData.length); assertEquals(pictureSize.width, b.getWidth()); assertEquals(pictureSize.height, b.getHeight()); b.recycle(); b = null; } } terminateMessageLooper(); }


public void startNattKeepalive(com.android.server.connectivity.NetworkAgentInfo nai, int intervalSeconds, android.os.Messenger messenger, android.os.IBinder binder, java.lang.String srcAddrString, int srcPort, java.lang.String dstAddrString, int dstPort) { if (nai == null) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_NETWORK); return; } java.net.InetAddress srcAddress; java.net.InetAddress dstAddress; try { srcAddress = android.net.NetworkUtils.numericToInetAddress(srcAddrString); dstAddress = android.net.NetworkUtils.numericToInetAddress(dstAddrString); } catch (java.lang.IllegalArgumentException e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_IP_ADDRESS); return; } android.net.KeepalivePacketData packet; try { packet = android.net.KeepalivePacketData.nattKeepalivePacket(srcAddress, srcPort, dstAddress, com.android.server.connectivity.NATT_PORT); } catch (android.net.KeepalivePacketData e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, e.error); return; } com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo ki = new com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo(messenger, binder, nai, packet, intervalSeconds); android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, ("Created keepalive: " + (ki.toString()))); mConnectivityServiceHandler.obtainMessage(NetworkAgent.CMD_START_PACKET_KEEPALIVE, ki).sendToTarget(); }
@java.lang.Override protected synchronized boolean stop() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, "stop()"); if (!(mStarted)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "stop() called before start()"); return true; } mStarted = false; unregisterReceiver(mHeadsetReceiver); com.android.bluetooth.hfp.HeadsetStateMachine.destroy(mStateMachine); mStateMachine = null; mStateMachinesThread.quitSafely(); mStateMachinesThread = null; com.android.bluetooth.hfp.HeadsetService.setHeadsetService(null); return true; }


private android.telephony.RadioAccessSpecifier convertRadioAccessSpecifierToRadioHAL(android.telephony.RadioAccessSpecifier ras) { android.hardware.radio.V1_1.RadioAccessSpecifier rasInHalFormat = new android.hardware.radio.V1_1.RadioAccessSpecifier(); rasInHalFormat.radioAccessNetwork = ras.getRadioAccessNetwork(); java.util.List<java.lang.Integer> bands = null; switch (ras.getRadioAccessNetwork()) { case android.telephony.RadioNetworkConstants.RadioAccessNetworks.GERAN : bands = rasInHalFormat.geranBands; break; case android.telephony.RadioNetworkConstants.RadioAccessNetworks.UTRAN : bands = rasInHalFormat.utranBands; break; case android.telephony.RadioNetworkConstants.RadioAccessNetworks.EUTRAN : bands = rasInHalFormat.eutranBands; break; default : android.util.Log.wtf(com.android.internal.telephony.RIL.RILJ_LOG_TAG, (("radioAccessNetwork " + (ras.getRadioAccessNetwork())) + " not supported!")); return null; } if ((ras.getBands()) != null) { for (int band : ras.getBands()) { bands.add(band); } } if ((ras.getChannels()) != null) { for (int channel : ras.getChannels()) { rasInHalFormat.channels.add(channel); } } return rasInHalFormat; }
public static void d(java.lang.String prefix, java.lang.String format, java.lang.Object... args) { if (android.telecom.Log.DEBUG) { android.util.Log.d(android.telecom.Log.TAG, android.telecom.Log.buildMessage(prefix, format, args)); } }
public android.net.wifi.IClientInterface setupDriverForClientMode() { mWificond = mWifiInjector.makeWificond(); if ((mWificond) == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, "Failed to get reference to wificond"); return null; } android.net.wifi.IClientInterface clientInterface = null; try { clientInterface = mWificond.createClientInterface(); } catch (android.os.RemoteException e1) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, "Failed to get IClientInterface due to remote exception"); return null; } if (clientInterface == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, "Could not get IClientInterface instance from wificond"); return null; } android.os.Binder.allowBlocking(clientInterface.asBinder()); mClientInterface = clientInterface; try { mClientInterfaceName = clientInterface.getInterfaceName(); mWificondScanner = mClientInterface.getWifiScannerImpl(); mScanEventHandler = new com.android.server.wifi.WificondControl.ScanEventHandler(); mWificondScanner.subscribeScanEvents(mScanEventHandler); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, "Failed to refresh wificond scanner due to remote exception"); } return clientInterface; }


@javax.annotation.Nonnull private com.android.jack.test.toolchain.AndroidToolchain createCandidateToolchain() { com.android.jack.test.toolchain.AndroidToolchain candidateTestTools = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.AndroidToolchain.class, ignoredCandidateToolchains); candidateTestTools.setSourceLevel(level); candidateTestTools.setWithDebugInfos(withDebugInfos); return candidateTestTools; }
@java.lang.Override public java.io.FileDescriptor socket(int domain, int type, int protocol) throws libcore.io.ErrnoException { return tagSocket(os.socket(domain, type, protocol)); }

@com.android.annotations.NonNull public com.android.build.gradle.internal.dsl.BuildType setProguardFiles(java.lang.Iterable<?> proguardFileIterable) { proguardFiles.clear(); for (java.lang.Object proguardFile : proguardFileIterable) { proguardFiles.add(project.file(proguardFile)); } return this; }
public org.gradle.api.file.FileCollection doCall(java.lang.Object it) { org.gradle.api.file.FileCollection classpath = scope.getGlobalScope().getProject().files(scope.getGlobalScope().getAndroidBuilder().getCompileClasspath(scope.getVariantData().getVariantConfiguration())); if (org.codehaus.groovy.runtime.DefaultGroovyMethods.asBoolean(testedVariantData)) { if ((!(testedVariantData.getType().equals(com.android.build.gradle.tasks.factory.LIBRARY))) || (scope.getVariantData().getType().equals(com.android.build.gradle.tasks.factory.UNIT_TEST))) { classpath = classpath.plus(testedVariantData.javaCompileTask.getClasspath()).plus(testedVariantData.javaCompileTask.getOutputs().getFiles()); } if ((scope.getVariantData().getType().equals(com.android.build.gradle.tasks.factory.UNIT_TEST)) && (testedVariantData.getType().equals(com.android.build.gradle.tasks.factory.LIBRARY))) { classpath = classpath.minus(scope.getGlobalScope().getProject().files(testedVariantData.getVariantConfiguration().getOutput().getJarFile())); } } return classpath; }


private void validateSensitivity(int request, int result) { int sensitivityDelta = request - result; mCollector.expectTrue(((("Sensitivity is invalid for AE manaul control test, request: " + request) + " result: ") + result), ((sensitivityDelta < (android.hardware.camera2.cts.CaptureRequestTest.SENSITIVITY_ERROR_MARGIN)) && (sensitivityDelta >= 0))); }
@java.lang.Override public java.util.Collection<com.android.ide.eclipse.adt.internal.resources.manager.ProjectResourceItem> getResources(com.android.resources.ResourceType type, com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources projectResources) { update(); java.util.HashMap<java.lang.String, com.android.ide.common.rendering.api.ResourceValue> list = mResourceItems.get(type); java.util.ArrayList<com.android.ide.eclipse.adt.internal.resources.manager.ProjectResourceItem> items = new java.util.ArrayList<com.android.ide.eclipse.adt.internal.resources.manager.ProjectResourceItem>(); if (list != null) { java.util.Collection<com.android.ide.common.rendering.api.ResourceValue> values = list.values(); for (com.android.ide.common.rendering.api.ResourceValue res : values) { com.android.ide.eclipse.adt.internal.resources.manager.ProjectResourceItem item = projectResources.findResourceItem(type, res.getName()); if (item == null) { if (type == (com.android.resources.ResourceType.ID)) { item = new com.android.ide.eclipse.adt.internal.resources.manager.IdResourceItem(res.getName(), false); } else { item = new com.android.ide.eclipse.adt.internal.resources.manager.ConfigurableResourceItem(res.getName()); } items.add(item); } item.add(this); } } return items; }
@java.lang.Override public void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.server.BluetoothManagerService.TAG); writer.println("Bluetooth Status"); writer.println((" enabled: " + (mEnable))); writer.println((" state: " + (mState))); writer.println((" address: " + (mAddress))); writer.println(((" name: " + (mName)) + "\n")); writer.flush(); if ((mBluetooth) == null) { writer.println("Bluetooth Service not connected"); } else { android.os.ParcelFileDescriptor pfd = null; try { writer.println("Bonded devices:"); for (android.bluetooth.BluetoothDevice device : mBluetooth.getBondedDevices()) { writer.println((((((" " + (device.getAddress())) + " [") + (com.android.server.BluetoothManagerService.DEVICE_TYPE_NAMES[device.getType()])) + "] ") + (device.getName()))); } writer.flush(); pfd = android.os.ParcelFileDescriptor.dup(fd); mBluetooth.dump(pfd); } catch (android.os.RemoteException re) { writer.println("RemoteException while calling Bluetooth Service"); } catch (java.io.IOException ioe) { writer.println("IOException attempting to dup() fd"); } finally { if (pfd != null) { try { pfd.close(); } catch (java.io.IOException ioe) { writer.println("IOException attempting to close() fd"); } } } } }
private void testWifiConfigurationSaveLoad(android.net.wifi.WifiConfiguration config) { assertTrue(mSupplicantNetwork.saveWifiConfiguration(config)); android.net.wifi.WifiConfiguration loadConfig = new android.net.wifi.WifiConfiguration(); java.util.Map<java.lang.String, java.lang.String> networkExtras = new java.util.HashMap<>(); assertTrue(mSupplicantNetwork.loadWifiConfiguration(loadConfig, networkExtras)); com.android.server.wifi.WifiConfigurationTestUtil.assertConfigurationEqualForSupplicant(config, loadConfig); if ((config.updateIdentifier) != null) { assertEquals(java.lang.Integer.parseInt(config.updateIdentifier), mSupplicantVariables.updateIdentifier); } }

public void removeTypedefClasses() { if ((((classDir) != null) && ((classFiles) != null)) && (!(classFiles.isEmpty()))) { int count = 0; for (java.io.File file : classFiles) { if (!(file.isAbsolute())) { file = new java.io.File(classDir, file.getPath()); } if (file.exists()) { boolean deleted = file.delete(); if (deleted) { count++; } else { com.android.build.gradle.tasks.annotations.Extractor.warning(("Could not delete typedef class " + (file.getPath()))); } } } info((("Deleted " + count) + " typedef annotation classes")); } }
public void registerArtifactType(@com.android.annotations.NonNull java.lang.String name, boolean isTest, int artifactType) { if ((extraArtifactMap.get(name)) != null) { throw new java.lang.IllegalArgumentException("Artifact with name $name already registered."); } extraArtifactMap.put(name, new com.android.build.gradle.internal.model.ArtifactMetaDataImpl(name, isTest, artifactType)); }
@java.lang.Override public int[] getAccessibilityIds() { java.util.List<java.lang.String> results = com.google.common.collect.Lists.newArrayList(queryView("getaccessibilityids").split(" ")); if ((results.size()) == 2) { int[] accessibilityIds = new int[2]; try { accessibilityIds[0] = java.lang.Integer.parseInt(results.get(0)); accessibilityIds[1] = java.lang.Integer.parseInt(results.get(1)); return accessibilityIds; } catch (java.lang.NumberFormatException e) { com.android.chimpchat.core.ChimpView.LOG.log(java.util.logging.Level.SEVERE, ("Error retrieving accesibility ids: " + (e.getMessage()))); } } int[] empty = new int[]{ 0, 0 }; return empty; }
@java.lang.Override public void getSignalStrength(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SIGNAL_STRENGTH, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getSignalStrength(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getSignalStrength", e); } } }


public void testDisplayAvdListOfOneSnapshot() { com.android.sdkmanager.Main main = new com.android.sdkmanager.Main(); main.setLogger(mLog); mAvdManager.createAvd(mAvdFolder, this.getName(), mTarget, null, null, null, false, true, mLog); mLog.clear(); main.displayAvdList(mAvdManager); assertEquals((((((((((("[P Available Android Virtual Devices:\n" + ", P Name: ") + (this.getName())) + "\n") + ", P Path: ") + (mAvdFolder)) + "\n") + ", P Target: Android 0.0 (API level 0)\n") + ", P Skin: HVGA\n") + ", P Snapshot: true\n") + "]"), mLog.toString()); }




static void getInt(java.lang.invoke.MethodHandle m, Main.ValueHolder v, int value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final int got = (v == null) ? ((int) (m.invokeExact())) : ((int) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
@org.junit.Test @org.junit.experimental.categories.Category(com.android.jack.test.category.KnownBugs.class) public void test001d() throws java.lang.Exception { java.io.File jackOutput = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); runTest001(jackOutput, "keep-first", errOut, false, true); java.io.File myClass1 = new java.io.File(jackOutput, com.android.jack.fileconflict.FileConflictTests.JACK_FILE_PATH_1); java.io.File myClass2 = new java.io.File(jackOutput, com.android.jack.fileconflict.FileConflictTests.JACK_FILE_PATH_2); java.io.File myClass3 = new java.io.File(jackOutput, com.android.jack.fileconflict.FileConflictTests.JACK_FILE_PATH_3); junit.framework.Assert.assertTrue(myClass1.exists()); junit.framework.Assert.assertTrue(myClass2.exists()); junit.framework.Assert.assertTrue(myClass3.exists()); java.lang.String errString = errOut.toString(); junit.framework.Assert.assertTrue(errString.contains("Type com.android.jack.fileconflict.test001.jack.MyClass")); junit.framework.Assert.assertTrue(errString.contains("Type com.android.jack.fileconflict.test001.jack.MyClass2")); junit.framework.Assert.assertTrue(errString.contains("Type com.android.jack.fileconflict.test001.jack.MyClass3")); junit.framework.Assert.assertTrue(errString.contains("has already been imported")); }
synchronized void recordScanStart(android.bluetooth.le.ScanSettings settings, boolean filtered, int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan existingScan = getScanFromScannerId(scannerId); if (existingScan != null) { return; } (this.scansStarted)++; startTime = android.os.SystemClock.elapsedRealtime(); com.android.bluetooth.gatt.AppScanStats.LastScan scan = new com.android.bluetooth.gatt.AppScanStats.LastScan(startTime, 0, false, false, filtered, scannerId); if (settings != null) { scan.opportunistic = (settings.getScanMode()) == (android.bluetooth.le.ScanSettings.SCAN_MODE_OPPORTUNISTIC); scan.background = ((settings.getCallbackType()) & (android.bluetooth.le.ScanSettings.CALLBACK_TYPE_FIRST_MATCH)) != 0; } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_START); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); gattService.addScanEvent(scanEvent); if (!(isScanning())) { try { boolean isUnoptimized = !(((scan.filtered) || (scan.background)) || (scan.opportunistic)); mScanStartTime = startTime; batteryStats.noteBleScanStarted(workSource, isUnoptimized); } catch (android.os.RemoteException e) { } } ongoingScans.put(scannerId, scan); }


public static long digestFile(java.io.File file) throws java.io.IOException { if (com.intellij.updater.Utils.isZipFile(file.getName())) { java.util.zip.ZipFile zipFile; try { zipFile = new java.util.zip.ZipFile(file); } catch (java.io.IOException e) { com.intellij.updater.Runner.printStackTrace(e); return com.intellij.updater.Digester.doDigestRegularFile(file); } try { return com.intellij.updater.Digester.doDigestZipFile(zipFile); } finally { zipFile.close(); } } return com.intellij.updater.Digester.doDigestRegularFile(file); }

@org.junit.Test public void testCompile023() throws java.lang.Exception { properties.clear(); properties.put("jack.optimization.enum.switch", "feedback"); java.lang.String packageName = "com.android.jack.switchstatement.test023.jack"; java.lang.String classPrefix = (packageName.replace('.', '_')) + "_"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put("Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum11"), false)); input.put("Switch2", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum2$Enum22"), false)); input.put("Enum1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum11"), false)); input.put("Enum2", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum2$Enum22"), false)); input.put("Enum1$Enum11", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum11"), false)); input.put("Enum2$Enum22", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum2$Enum22"), false)); input.put("SyntheticSwitchmapClass-*", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo((classPrefix + "Enum1$Enum11"), true).specifyInfo((classPrefix + "Enum2$Enum22"), true)); checkCompiledCode(packageName, input); }
synchronized android.bluetooth.BluetoothDevice getCurrentDevice() { return mCurrentDevice; }
protected void onUpdateIccAvailability() { if ((mUiccController) == null) { return; } com.android.internal.telephony.uicc.UiccCardApplication newUiccApplication = getUiccCardApplication(); if ((mUiccApplcation) != newUiccApplication) { if ((mUiccApplcation) != null) { log("Removing stale icc objects."); mUiccApplcation.unregisterForReady(this); if ((mIccRecords) != null) { mIccRecords.unregisterForRecordsLoaded(this); } mIccRecords = null; mUiccApplcation = null; } if (newUiccApplication != null) { log("New card found"); mUiccApplcation = newUiccApplication; mIccRecords = mUiccApplcation.getIccRecords(); if (mPhone.isPhoneTypeGsm()) { mUiccApplcation.registerForReady(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_READY, null); if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_RECORDS_LOADED, null); } } else if (mIsSubscriptionFromRuim) { mUiccApplcation.registerForReady(this, com.android.internal.telephony.ServiceStateTracker.EVENT_RUIM_READY, null); if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.ServiceStateTracker.EVENT_RUIM_RECORDS_LOADED, null); } } } } }
public void testAuthenticateWithPost() throws java.lang.Exception { com.google.mockwebserver.MockResponse pleaseAuthenticate = new com.google.mockwebserver.MockResponse().setResponseCode(401).addHeader("WWW-Authenticate: Basic realm=\"protected area\"").setBody("Please authenticate."); server.enqueue(pleaseAuthenticate); server.enqueue(pleaseAuthenticate); server.enqueue(pleaseAuthenticate); server.enqueue(new com.google.mockwebserver.MockResponse().setBody("Successful auth!")); server.play(); java.net.Authenticator.setDefault(new libcore.java.net.URLConnectionTest.SimpleAuthenticator()); java.net.HttpURLConnection connection = ((java.net.HttpURLConnection) (server.getUrl("/").openConnection())); connection.setDoOutput(true); byte[] requestBody = new byte[]{ 'A', 'B', 'C', 'D' }; java.io.OutputStream outputStream = connection.getOutputStream(); outputStream.write(requestBody); outputStream.close(); assertEquals("Successful auth!", readAscii(connection.getInputStream(), java.lang.Integer.MAX_VALUE)); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); assertContainsNoneMatching(request.getHeaders(), "Authorization: .*"); for (int i = 0; i < 3; i++) { request = server.takeRequest(); assertEquals("POST / HTTP/1.1", request.getRequestLine()); assertContains(request.getHeaders(), ("Authorization: Basic " + (libcore.java.net.URLConnectionTest.SimpleAuthenticator.BASE_64_CREDENTIALS))); assertEquals(java.util.Arrays.toString(requestBody), java.util.Arrays.toString(request.getBody())); } }
synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppConfiguration config, android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "registerApp()"); } if ((mAppConfig) != null) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "registerApp: failed because app configuration already exists. "); return false; } mAppConfig = config; mCallback = callback; return registerAppNative(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null ? null : inQos.toArray()), (outQos == null ? null : outQos.toArray())); }
@java.lang.Override public void setCLIR(int clirMode, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_CLIR, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " clirMode = ") + clirMode)); } try { radioProxy.setClir(rr.mSerial, clirMode); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCLIR", e); } } }
@java.lang.Override public void handleMessage(android.os.Message msg) { synchronized(this) { final long millisLeft = (mStopTimeInFuture) - (android.os.SystemClock.elapsedRealtime()); if (millisLeft <= 0) { onFinish(); } else if (millisLeft < (mCountdownInterval)) { sendMessageDelayed(obtainMessage(android.os.CountDownTimer.MSG), millisLeft); } else { long lastTickStart = android.os.SystemClock.elapsedRealtime(); onTick(millisLeft); long delay = (lastTickStart + (mCountdownInterval)) - (android.os.SystemClock.elapsedRealtime()); while (delay < 0) delay += mCountdownInterval; sendMessageDelayed(obtainMessage(android.os.CountDownTimer.MSG), delay); } } }
public void sendEnvelopeWithStatus(java.lang.String contents, android.os.Message response) { mCi.sendEnvelopeWithStatus(contents, response); }

public void testVFE3() { try { java.lang.Class.forName("dot.junit.opcodes.iget_short.d.T_iget_short_13"); fail("expected a verification exception"); } catch (java.lang.Throwable t) { dot.junit.DxUtil.checkVerifyException(t); } }
public java.lang.String getDisplayVariant(java.util.Locale locale) { if ((variantCode.length()) == 0) { return variantCode; } java.lang.String result = libcore.icu.ICU.getDisplayVariantNative(getIcuLocaleId(), locale.getIcuLocaleId()); if (result == null) { result = libcore.icu.ICU.getDisplayVariantNative(getIcuLocaleId(), java.util.Locale.getDefault().getIcuLocaleId()); } return result; }
public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { synchronized(mProfiles) { mProfiles.remove(profile); } }

@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) { for (com.android.sched.vfs.InputVElement sub : dir.list()) { if ((!(sub.isVDir())) && (isJackFileNameOf(sub.getName(), simpleName))) { try { return new com.android.jack.jayce.JayceClassOrInterfaceLoader(inputJackLibrary, loading, simpleName, ((com.android.sched.vfs.InputVFile) (sub)), lookup, defaultLoadLevel).load(); } catch (java.io.IOException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } catch (com.android.jack.JackFileException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } } } throw new com.android.jack.ir.ast.MissingJTypeLookupException(loading, simpleName); }



private com.android.build.gradle.internal.model.JavaArtifactImpl createUnitTestsJavaArtifact(@com.android.annotations.NonNull com.android.builder.core.VariantType variantType, @com.android.annotations.NonNull BaseVariantData<? extends BaseVariantOutputData> variantData) { com.android.build.gradle.internal.model.ModelBuilder.SourceProviders sourceProviders = com.android.build.gradle.internal.model.ModelBuilder.determineSourceProviders(variantData); com.android.build.gradle.internal.model.DependenciesImpl dependencies = com.android.build.gradle.internal.model.DependenciesImpl.cloneDependencies(variantData, androidBuilder); java.util.List<java.io.File> extraGeneratedSourceFolders = variantData.getExtraGeneratedSourceFolders(); return new com.android.build.gradle.internal.model.JavaArtifactImpl(variantType.getArtifactName(), variantData.assembleVariantTask.getName(), variantData.compileTask.getName(), com.google.common.collect.Sets.newHashSet(variantData.prepareDependenciesTask.getName(), taskManager.createMockableJar.getName()), (extraGeneratedSourceFolders != null ? extraGeneratedSourceFolders : java.util.Collections.<java.io.File>emptyList()), ((variantData.javacTask) != null ? variantData.javacTask.getDestinationDir() : variantData.getScope().getJavaOutputDir()), variantData.getScope().getJavaResourcesDestinationDir(), taskManager.createMockableJar.getOutputFile(), dependencies, sourceProviders.variantSourceProvider, sourceProviders.multiFlavorSourceProvider); }
@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) throws com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotDirectoryException { com.android.sched.vfs.InputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.InputVFS prefixedInputVFS = new com.android.sched.vfs.PrefixedInputVFS(baseVFS, new com.android.sched.vfs.VPath(fileType.getPrefix(), '/')); if (fileType == (com.android.jack.library.FileType.DEX)) { currentSectionVFS = new com.android.sched.vfs.MessageDigestInputVFS(prefixedInputVFS); } else { currentSectionVFS = prefixedInputVFS; } sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }


protected void openDevice(java.lang.String cameraId, android.hardware.camera2.cts.testcases.BlockingStateCallback listener) throws java.lang.Exception { mCamera = android.hardware.camera2.cts.CameraTestUtils.CameraTestUtils.openCamera(mCameraManager, cameraId, listener, mHandler); mCollector.setCameraId(cameraId); mStaticInfo = new android.hardware.camera2.cts.helpers.StaticMetadata(mCameraManager.getCameraCharacteristics(cameraId), android.hardware.camera2.cts.helpers.StaticMetadata.CheckLevel.ASSERT, null); mOrderedPreviewSizes = getSupportedPreviewSizes(cameraId, mCameraManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND); mOrderedVideoSizes = getSupportedVideoSizes(cameraId, mCameraManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND); mOrderedStillSizes = getSupportedStillSizes(cameraId, mCameraManager, null); if (android.hardware.camera2.cts.testcases.Camera2AndroidTestCase.VERBOSE) { android.util.Log.v(android.hardware.camera2.cts.testcases.Camera2AndroidTestCase.TAG, (("Camera " + cameraId) + " is opened")); } }
public void testSinglePass() { java.util.Map<java.lang.String, java.lang.String> emptyMap = java.util.Collections.emptyMap(); final com.android.ddmlib.testrunner.TestIdentifier testId = new com.android.ddmlib.testrunner.TestIdentifier("com.foo.FooTest", "testFoo"); org.easymock.EasyMock.replay(mMockBuild); mResultReporter.invocationStarted(mMockBuild); mResultReporter.testRunStarted(com.android.cts.util.AbiUtils.createId(UnitTests.ABI.getName(), "run"), 1); mResultReporter.testStarted(testId); mResultReporter.testEnded(testId, emptyMap); mResultReporter.testRunEnded(3000, emptyMap); mResultReporter.invocationEnded(1); mResultReporter.putSummary(com.android.cts.tradefed.result.CtsXmlResultReporterTest.SUMMARY_LIST); java.lang.String output = getOutput(); assertTrue(output.contains("<Summary failed=\"0\" notExecuted=\"0\" timeout=\"0\" pass=\"1\" />")); assertTrue(output.contains((("<TestPackage name=\"\" appPackageName=\"run\" abi=\"" + (UnitTests.ABI.getName())) + "\" digest=\"\">"))); assertTrue(output.contains("<TestCase name=\"FooTest\" priority=\"\">")); final java.lang.String testCaseTag = java.lang.String.format("<Test name=\"%s\" result=\"pass\"", testId.getTestName()); assertTrue(output.contains(testCaseTag)); org.easymock.EasyMock.verify(mMockBuild); }
@org.junit.Test public void compileWithAnnotationProcessorNoAuto_classpath() throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorClasses(java.util.Collections.singletonList(com.android.jack.annotation.processor.sample.processors.SourceAnnotationProcessor.class.getName())); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.addToClasspath(processors); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(jackOut); junit.framework.Assert.assertFalse(libOut.containsFileType(FileType.RSC)); libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath("Annotated2Duplicated", '/')); }
public void setMetaDirs(@javax.annotation.Nonnull java.util.List<java.io.File> metaDirs) { metaImport = metaDirs; }
@java.lang.Override public void run() { try { java.io.File output = java.io.File.createTempFile("predex", ".jar"); output.deleteOnExit(); outputFiles[ii] = output; com.android.builder.internal.compiler.PreDexCache.getCache().preDexLibrary(input, output, dexOptions, mBuildToolInfo, false, clr); } catch (java.lang.Exception ignored) { } }

public void testWildcardMatchesWildcardSuffix() { assertTrue(verifier.verifyHostName("b.c.d", "*.b.c.d")); assertTrue(verifier.verifyHostName("imap.google.com", "*.imap.google.com")); }

public java.lang.String getHostExecutionFlags() { return java.lang.String.format("-Xnorelocate -Ximage:%s", getHostCoreImagePath()); }
@java.lang.Override public int getStreamingServices(java.lang.String appName, int subId, java.util.List<java.lang.String> serviceClasses) throws android.os.RemoteException { return 0; }
public com.android.builder.DefaultBuildType initWith(com.android.builder.DefaultBuildType that) { _initWith(that); setDebuggable(that.isDebuggable()); setJniDebugBuild(that.isJniDebugBuild()); setRenderscriptDebugBuild(that.isRenderscriptDebugBuild()); setRenderscriptOptimLevel(that.getRenderscriptOptimLevel()); setPackageNameSuffix(that.getPackageNameSuffix()); setVersionNameSuffix(that.getVersionNameSuffix()); setRunProguard(that.isRunProguard()); setZipAlign(that.isZipAlign()); setSigningConfig(that.getSigningConfig()); return this; }

public void testDuplicateEntries() throws java.lang.Exception { java.lang.String name1 = "test_file_name1"; java.lang.String name2 = "test_file_name2"; java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream(baos); out.putNextEntry(new java.util.zip.ZipEntry(name2)); out.closeEntry(); out.putNextEntry(new java.util.zip.ZipEntry(name1)); out.closeEntry(); out.close(); byte[] buffer = baos.toByteArray(); libcore.java.util.zip.ZipFileTest.replaceBytes(buffer, name2.getBytes(), name1.getBytes()); java.io.File badZip = createTemporaryZipFile(); libcore.java.util.zip.ZipFileTest.writeBytes(badZip, buffer); try { java.util.zip.ZipFile bad = new java.util.zip.ZipFile(badZip); fail(); } catch (java.util.zip.ZipException expected) { } }
long getWhen() { synchronized(lock) { return when; } }



@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressor()) == null) { status = PASS; } else { status = FAIL; } } next(); }
public static int throwOnError(int errorFlag) throws android.hardware.camera2.legacy.LegacyExceptionUtils.BufferQueueAbandonedException { switch (errorFlag) { case android.hardware.camera2.utils.CameraBinderDecorator.NO_ERROR : { return android.hardware.camera2.utils.CameraBinderDecorator.NO_ERROR; } case android.hardware.camera2.utils.CameraBinderDecorator.ENODEV : { throw new android.hardware.camera2.legacy.LegacyExceptionUtils.BufferQueueAbandonedException(); } } if (errorFlag < 0) { throw new java.lang.UnsupportedOperationException(("Unknown error " + errorFlag)); } return errorFlag; }


@java.lang.Override public boolean satisfiedBy(android.net.NetworkSpecifier other) { return equals(other); }
private void loadSamplesForTarget(com.android.sdklib.IAndroidTarget target) { java.lang.String oldChoice = null; if ((mSamplesPaths.size()) > 0) { int selIndex = mSamplesCombo.getSelectionIndex(); if (selIndex > (-1)) { oldChoice = mSamplesCombo.getItem(selIndex); } } mSamplesCombo.removeAll(); mSamplesPaths.clear(); if (target != null) { java.lang.String samplesRootPath = target.getPath(IAndroidTarget.SAMPLES); java.io.File samplesDir = new java.io.File(samplesRootPath); findSamplesManifests(samplesDir, mSamplesPaths); if ((mSamplesPaths.size()) == 0) { mSamplesCombo.add("This target has no samples. Please select another target."); mSamplesCombo.select(0); return; } int selIndex = 0; int i = 0; int n = samplesRootPath.length(); for (java.lang.String path : mSamplesPaths) { if ((path.length()) > n) { path = path.substring(n); if ((path.charAt(0)) == (java.io.File.separatorChar)) { path = path.substring(1); } if (path.endsWith(java.io.File.separator)) { path = path.substring(0, ((path.length()) - 1)); } path = path.replaceAll(java.util.regex.Pattern.quote(java.io.File.separator), " > "); } if ((oldChoice != null) && (oldChoice.equals(path))) { selIndex = i; } mSamplesCombo.add(path); i++; } mSamplesCombo.select(selIndex); } else { mSamplesCombo.add("Please select a target."); mSamplesCombo.select(0); } }
@java.lang.Override public boolean forceRefresh() { if ((mServer) == null) { return false; } if (android.util.NtpTrustedTime.LOGD) android.util.Log.d(android.util.NtpTrustedTime.TAG, "forceRefresh() from cache miss"); final android.net.SntpClient client = new android.net.SntpClient(); if (client.requestTime(mServer, ((int) (mTimeout)))) { mHasCache = true; mCachedNtpTime = client.getNtpTime(); mCachedNtpElapsedRealtime = client.getNtpTimeReference(); mCachedNtpCertainty = (client.getRoundTripTime()) / 2; return true; } else { return false; } }
public void doImport(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.backend.jayce.ImportConflictException, com.android.jack.ir.ast.JPackageLookupException, com.android.jack.ir.ast.JTypeLookupException { for (com.android.jack.library.InputJackLibrary inputJackLibrary : inputJackLibraries) { com.android.sched.vfs.InputRootVDir libraryVDir = inputJackLibrary.getInputVDir(); com.android.jack.backend.jayce.JayceFileImporter.logger.log(java.util.logging.Level.FINE, "Importing {0}", libraryVDir.getLocation().getDescription()); for (com.android.sched.vfs.InputVElement subFile : libraryVDir.list()) { importJayceFile(inputJackLibrary, subFile, session, ""); } } }



@java.lang.Override public void requestIsimAuthentication(java.lang.String nonce, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_ISIM_AUTHENTICATION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " nonce = ") + nonce)); } try { radioProxy.requestIsimAuthentication(rr.mSerial, convertNullToEmptyString(nonce)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "requestIsimAuthentication", e); } } }

private void formatInternal(java.lang.String pattern, libcore.util.ZoneInfo.WallTime wallTime, libcore.util.ZoneInfo zoneInfo) { byte[] bytes = pattern.getBytes(java.nio.charset.StandardCharsets.US_ASCII); if ((bytes.length) == 0) { return; } java.nio.ByteBuffer formatBuffer = java.nio.ByteBuffer.wrap(bytes); while ((formatBuffer.remaining()) > 0) { boolean outputCurrentByte = true; char currentByteAsChar = android.text.format.TimeFormatter.convertToChar(formatBuffer.get(formatBuffer.position())); if (currentByteAsChar == '%') { outputCurrentByte = handleToken(formatBuffer, wallTime, zoneInfo); } if (outputCurrentByte) { currentByteAsChar = android.text.format.TimeFormatter.convertToChar(formatBuffer.get(formatBuffer.position())); outputBuilder.append(currentByteAsChar); } formatBuffer.position(((formatBuffer.position()) + 1)); } }
private static java.util.Locale initDefault(java.util.Locale.Category category) { return java.util.Locale.getInstance(java.lang.System.getProperty(category.languageKey, java.util.Locale.defaultLocale.getLanguage()), java.lang.System.getProperty(category.scriptKey, java.util.Locale.defaultLocale.getScript()), java.lang.System.getProperty(category.countryKey, java.util.Locale.defaultLocale.getCountry()), java.lang.System.getProperty(category.variantKey, java.util.Locale.defaultLocale.getVariant()), null); }
public void addF64(android.support.v8.renderscript.Double3 v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addF64(new android.renderscript.Double3(v.x, v.y, v.z)); return; } addF64(v.x); addF64(v.y); addF64(v.z); }


public android.bluetooth.le.AdvertisingSetParameters.Builder setIncludeTxPower(boolean includeTxPower) { this.includeTxPower = includeTxPower; return this; }
public void test2() throws java.lang.Exception { assertEquals(("" + ((((((((("res/values-cs/plurals3.xml:3: Error: For locale \"cs\" (Czech) the following quantities should also be defined: few, many [MissingQuantity]\n" + " <plurals name=\"draft\">\n") + " ^\n") + "res/values-zh-rCN/plurals3.xml:3: Warning: For language \"zh\" (Chinese) the following quantities are not relevant: one [UnusedQuantity]\n") + " <plurals name=\"draft\">\n") + " ^\n") + "res/values-zh-rCN/plurals3.xml:7: Warning: For language \"zh\" (Chinese) the following quantities are not relevant: one [UnusedQuantity]\n") + " <plurals name=\"title_day_dialog_content\">\n") + " ^\n") + "1 errors, 2 warnings\n")), lintProject("res/values-zh-rCN/plurals3.xml", "res/values-cs/plurals3.xml")); }
private void updateDevicePref() { if ((mThisDevice) != null) { if (android.text.TextUtils.isEmpty(mThisDevice.deviceName)) { mThisDevicePref.setTitle(mThisDevice.deviceAddress); } else { mThisDevicePref.setTitle(mThisDevice.deviceName); } mThisDevicePref.setPersistent(false); mThisDevicePref.setEnabled(true); mThisDevicePref.setSelectable(false); } }

public void test_handshake_failsWithInvalidSCT() throws java.lang.Exception { org.conscrypt.OpenSSLSocketImplTest.TestConnection connection = new org.conscrypt.OpenSSLSocketImplTest.TestConnection(new java.security.cert.X509Certificate[]{ cert, ca }, certKey); connection.clientHooks.ctVerifier = ctVerifier; connection.clientHooks.ctVerificationEnabled = true; connection.serverHooks.sctTLSExtension = org.conscrypt.TestUtils.readTestFile("ct-signed-timestamp-list-invalid"); try { connection.doHandshake(); fail("SSLHandshakeException not thrown"); } catch (java.util.concurrent.ExecutionException e) { assertEquals(javax.net.ssl.SSLHandshakeException.class, e.getCause().getClass()); assertEquals(java.security.cert.CertificateException.class, e.getCause().getCause().getClass()); } }

@java.lang.Override public synchronized void close() throws com.android.jack.library.LibraryIOException { if (((linkedOutputJackLib) == null) && (!(originalVFS.isClosed()))) { try { for (com.android.sched.vfs.InputVFS currentSectionVFS : sectionVFS.values()) { currentSectionVFS.close(); } vfs.close(); } catch (java.io.IOException e) { throw new com.android.jack.library.LibraryIOException(getLocation(), e); } } }
public void execute(java.util.List<java.lang.String> arguments, @com.android.annotations.Nullable java.io.OutputStream stdout, java.lang.String... tasks) { org.gradle.tooling.ProjectConnection connection = getProjectConnection(); try { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add("-i"); args.add("-u"); args.addAll(arguments); connection.newBuild().forTasks(tasks).setStandardOutput(stdout).withArguments(args.toArray(new java.lang.String[args.size()])).run(); } finally { connection.close(); } }
@java.lang.Override protected void _initWith(@com.android.annotations.NonNull com.android.builder.model.BaseConfig that) { super._initWith(that); shrinkResources = that.isShrinkResources(); useJack = that.useJack; }


@java.lang.SuppressWarnings("unchecked") private void initClientModuleCombo() { final java.lang.Module[] modules = com.intellij.openapi.module.ModuleManager.getInstance(myProject).getModules(); for (java.lang.Module module : modules) { final org.jetbrains.android.facet.AndroidFacet facet = org.jetbrains.android.facet.AndroidFacet.getInstance(module); if ((facet != null) && ((com.intellij.openapi.roots.ModuleRootManager.getInstance(module).getContentRoots().length) > 0)) { java.lang.String moduleNameLabel = module.getName(); if ((facet.getManifest()) != null) { final java.lang.String packageName = facet.getManifest().getPackage().getValue(); if (!(com.google.common.base.Strings.isNullOrEmpty(packageName))) { moduleNameLabel += java.lang.String.format(" (%s)", packageName); } } myClientModuleCombo.addItem(new com.android.tools.idea.wizard.ComboBoxItem(module.getName(), moduleNameLabel, 1, 1)); } } }

public void addBuildType(@com.android.annotations.NonNull com.android.build.gradle.internal.dsl.BuildType buildType) { buildType.init(signingConfigs.get(com.android.builder.core.BuilderConstants.DEBUG)); java.lang.String name = buildType.getName(); com.android.build.gradle.internal.VariantManager.checkName(name, "BuildType"); if (productFlavors.containsKey(name)) { throw new java.lang.RuntimeException("BuildType names cannot collide with ProductFlavor names"); } com.android.build.gradle.internal.api.DefaultAndroidSourceSet mainSourceSet = ((com.android.build.gradle.internal.api.DefaultAndroidSourceSet) (extension.getSourceSetsContainer().maybeCreate(name))); com.android.build.gradle.internal.api.DefaultAndroidSourceSet unitTestSourceSet = null; if (variantFactory.hasTestScope()) { unitTestSourceSet = ((com.android.build.gradle.internal.api.DefaultAndroidSourceSet) (extension.getSourceSetsContainer().maybeCreate(com.android.build.gradle.internal.VariantManager.computeSourceSetName(buildType.getName(), com.android.builder.core.VariantType.UNIT_TEST)))); } com.android.build.gradle.internal.BuildTypeData buildTypeData = new com.android.build.gradle.internal.BuildTypeData(buildType, project, mainSourceSet, unitTestSourceSet); project.getTasks().getByName("assemble").dependsOn(buildTypeData.getAssembleTask()); buildTypes.put(name, buildTypeData); }
public int availableProcessors() { return ((int) (Libcore.os.sysconf(_SC_NPROCESSORS_CONF))); }



@com.android.annotations.Nullable @java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getTestInstrumentationRunnerArguments() { return null; }
@org.junit.Test public void test002f() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackOutput = runTest002(true, "keep-first", errOut, false, false); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(jackOutput); checkResourceContent(zipFile, com.android.jack.fileconflict.FileConflictTests.RESOURCE1_LONGPATH, "Res1"); checkResourceContent(zipFile, com.android.jack.fileconflict.FileConflictTests.RESOURCE2_LONGPATH, "Res2"); checkResourceContent(zipFile, com.android.jack.fileconflict.FileConflictTests.RESOURCE3_LONGPATH, "Res3"); junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); }

@javax.annotation.Nonnull private com.android.jack.test.toolchain.AndroidToolchain createReferenceToolchain() { com.android.jack.test.toolchain.AndroidToolchain referenceTestTools = com.android.jack.test.toolchain.AbstractTestTools.getReferenceToolchain(com.android.jack.test.toolchain.AndroidToolchain.class); referenceTestTools.setSourceLevel(level); referenceTestTools.setWithDebugInfos(withDebugInfos); return referenceTestTools; }

private void addListeners(java.util.List<org.junit.runner.notification.RunListener> listeners, org.junit.runner.JUnitCore testRunner, java.io.PrintStream writer) { if (getBooleanArgument(com.android.test.runner.AndroidJUnitRunner.ARGUMENT_SUITE_ASSIGNMENT)) { addListener(listeners, testRunner, new com.android.test.runner.listener.SuiteAssignmentPrinter(writer)); } else { addListener(listeners, testRunner, new org.junit.internal.TextListener(writer)); addListener(listeners, testRunner, new com.android.test.runner.listener.InstrumentationResultPrinter(this)); addDelayListener(listeners, testRunner); addCoverageListener(listeners, testRunner); } }
@java.lang.Override public boolean processMessage(android.os.Message msg) { log(("DeliveringState.processMessage:" + (msg.what))); switch (msg.what) { case com.android.internal.telephony.InboundSmsHandler.EVENT_NEW_SMS : handleNewSms(((android.os.AsyncResult) (msg.obj))); sendMessage(com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_INJECT_SMS : handleInjectSms(((android.os.AsyncResult) (msg.obj))); sendMessage(com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_SMS : com.android.internal.telephony.InboundSmsTracker inboundSmsTracker = ((com.android.internal.telephony.InboundSmsTracker) (msg.obj)); if (processMessagePart(inboundSmsTracker)) { transitionTo(mWaitingState); } else { log(("No broadcast sent on processing EVENT_BROADCAST_SMS in Delivering " + "state. Return to Idle state")); sendMessage(com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE); } return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE : transitionTo(mIdleState); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_RELEASE_WAKELOCK : mWakeLock.release(); if (!(mWakeLock.isHeld())) { loge("mWakeLock released while delivering/broadcasting!"); } return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_COMPLETE : case com.android.internal.telephony.InboundSmsHandler.EVENT_START_ACCEPTING_SMS : default : return NOT_HANDLED; } }
public void test_SSLEngine_getSupportedCipherSuites_names() throws java.lang.Exception { libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create(); javax.net.ssl.SSLEngine e = c.clientContext.createSSLEngine(); java.lang.String[] cipherSuites = e.getSupportedCipherSuites(); libcore.java.security.StandardNames.assertSSLEngineSupportedCipherSuites(cipherSuites); assertNotSame(cipherSuites, e.getSupportedCipherSuites()); c.close(); }
public boolean cancelBondProcess(android.bluetooth.BluetoothDevice device) { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, "cancelBondProcess() - Not allowed for non-active user"); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.cancelBondProcess(device); }
public static libcore.icu.LocaleData get(java.util.Locale locale) { if (locale == null) { locale = java.util.Locale.getDefault(); } java.lang.String localeName = locale.toString(); synchronized(libcore.icu.LocaleData.localeDataCache) { libcore.icu.LocaleData localeData = libcore.icu.LocaleData.localeDataCache.get(localeName); if (localeData != null) { return localeData; } } libcore.icu.LocaleData newLocaleData = libcore.icu.LocaleData.initLocaleData(locale); synchronized(libcore.icu.LocaleData.localeDataCache) { libcore.icu.LocaleData localeData = libcore.icu.LocaleData.localeDataCache.get(localeName); if (localeData != null) { return localeData; } libcore.icu.LocaleData.localeDataCache.put(localeName, newLocaleData); return newLocaleData; } }

private boolean checkListenerPermission(int events, java.lang.String callingPackage, java.lang.String message) { if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_LOCATION)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); } if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_INFO)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK)) != 0) { if (!(com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState(mContext, callingPackage, message))) { return false; } } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_STATE_PERMISSION_MASK)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRECISE_PHONE_STATE, null); } return true; }
public java.lang.String toSafeString() { java.lang.String scheme = getScheme(); java.lang.String ssp = getSchemeSpecificPart(); if (scheme != null) { if (((((scheme.equalsIgnoreCase("tel")) || (scheme.equalsIgnoreCase("sip"))) || (scheme.equalsIgnoreCase("sms"))) || (scheme.equalsIgnoreCase("smsto"))) || (scheme.equalsIgnoreCase("mailto"))) { java.lang.StringBuilder builder = new java.lang.StringBuilder(64); builder.append(scheme); builder.append(':'); if (ssp != null) { for (int i = 0; i < (ssp.length()); i++) { char c = ssp.charAt(i); if (((c == '-') || (c == '@')) || (c == '.')) { builder.append(c); } else { builder.append('x'); } } } return builder.toString(); } } java.lang.StringBuilder builder = new java.lang.StringBuilder(64); if (scheme != null) { builder.append(scheme); builder.append(':'); } if (ssp != null) { builder.append(ssp); } return builder.toString(); }
private static int getPackedSize(java.lang.Object obj) { if (obj instanceof java.lang.Boolean) { return 1; } if (obj instanceof java.lang.Byte) { return 1; } if (obj instanceof java.lang.Short) { return 2; } if (obj instanceof java.lang.Integer) { return 4; } if (obj instanceof java.lang.Long) { return 8; } if (obj instanceof java.lang.Float) { return 4; } if (obj instanceof java.lang.Double) { return 8; } if (obj instanceof android.renderscript.Byte2) { return 2; } if (obj instanceof android.renderscript.Byte3) { return 3; } if (obj instanceof android.renderscript.Byte4) { return 4; } if (obj instanceof android.renderscript.Short2) { return 4; } if (obj instanceof android.renderscript.Short3) { return 6; } if (obj instanceof android.renderscript.Short4) { return 8; } if (obj instanceof android.renderscript.Int2) { return 8; } if (obj instanceof android.renderscript.Int3) { return 12; } if (obj instanceof android.renderscript.Int4) { return 16; } if (obj instanceof android.renderscript.Long2) { return 16; } if (obj instanceof android.renderscript.Long3) { return 24; } if (obj instanceof android.renderscript.Long4) { return 32; } if (obj instanceof android.renderscript.Float2) { return 8; } if (obj instanceof android.renderscript.Float3) { return 12; } if (obj instanceof android.renderscript.Float4) { return 16; } if (obj instanceof android.renderscript.Double2) { return 16; } if (obj instanceof android.renderscript.Double3) { return 24; } if (obj instanceof android.renderscript.Double4) { return 32; } if (obj instanceof android.renderscript.Matrix2f) { return 16; } if (obj instanceof android.renderscript.Matrix3f) { return 36; } if (obj instanceof android.renderscript.Matrix4f) { return 64; } if (obj instanceof android.renderscript.BaseObj) { if ((RenderScript.sPointerSize) == 8) { return 32; } else { return 4; } } return 0; }
public static com.android.hierarchyviewerlib.models.ViewNode parseViewHierarchy(java.io.BufferedReader in, com.android.hierarchyviewerlib.models.Window window) { com.android.hierarchyviewerlib.models.ViewNode currentNode = null; int currentDepth = -1; java.lang.String line; try { while ((line = in.readLine()) != null) { if ("DONE.".equalsIgnoreCase(line)) { break; } int depth = 0; while ((line.charAt(depth)) == ' ') { depth++; } while (depth <= currentDepth) { if (currentNode != null) { currentNode = currentNode.parent; } currentDepth--; } currentNode = new com.android.hierarchyviewerlib.models.ViewNode(window, currentNode, line.substring(depth)); currentDepth = depth; } } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DeviceBridge.TAG, ("Error reading view hierarchy stream: " + (e.getMessage()))); return null; } if (currentNode == null) { return null; } while ((currentNode.parent) != null) { currentNode = currentNode.parent; } return currentNode; }
@java.lang.Override public void run() { java.lang.String label = java.lang.String.format("Change attribute %1$s", actions.get(0).getTitle()); if ((actions.size()) > 1) { label += java.lang.String.format(" (%1$d elements)", actions.size()); } if (mEditor.isEditXmlModelPending()) { logError("Action '%1$s' failed: XML changes pending, document might be corrupt.", label); return; } mEditor.wrapUndoEditXmlModel(label, new java.lang.Runnable() { public void run() { for (com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction a2 : actions) { if (a2 instanceof com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) { gre.callClosure(((com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) (a2)).getClosure(), a2, key, (!isChecked)); } } } }); }

private void onDockChange() { if ((computeCurrentConfig()) && ((mListener) != null)) { mListener.onConfigurationChange(); } }
public android.bluetooth.le.AdvertisingSetParameters.Builder setPrimaryPhy(int primaryPhy) { if ((primaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_1M)) && (primaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_CODED))) { throw new java.lang.IllegalArgumentException(("bad primaryPhy " + primaryPhy)); } this.primaryPhy = primaryPhy; return this; }
static final java.lang.String getMediaDirString() { return (android.mediastress.cts.WorkDir.getTopDirString()) + "test/"; }
public void test_joinGroupLjava_net_SocketAddressLjava_net_NetworkInterface_IPv6() throws java.lang.Exception { test_joinGroupLjava_net_SocketAddressLjava_net_NetworkInterface(org.apache.harmony.tests.java.net.MulticastSocketTest.GOOD_IPv6, org.apache.harmony.tests.java.net.MulticastSocketTest.BAD_IPv6); }
@com.googlecode.android_scripting.rpc.Rpc(description = "Return current WFC Mode if Enabled.") public java.lang.String imsGetWfcMode() { if ((com.android.ims.ImsManager.isWfcEnabledByUser(mContext)) == false) { return TelephonyConstants.WFC_MODE_DISABLED; } return com.googlecode.android_scripting.facade.telephony.TelephonyUtils.getWfcModeString(com.android.ims.ImsManager.getWfcMode(mContext)); }
private void startSocketListener() { if (com.android.bluetooth.opp.BluetoothOppService.D) android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, "start Socket Listeners"); stopListeners(); mServerSocket = com.android.bluetooth.ObexServerSockets.createInsecure(this); com.android.bluetooth.sdp.SdpManager sdpManager = com.android.bluetooth.sdp.SdpManager.getDefaultManager(); if ((sdpManager == null) || ((mServerSocket) == null)) { android.util.Log.e(com.android.bluetooth.opp.BluetoothOppService.TAG, ((("ERROR:serversocket object is NULL sdp manager :" + sdpManager) + " mServerSocket:") + (mServerSocket))); return; } sdpManager.createOppOpsRecord("OBEX Object Push", mServerSocket.getRfcommChannel(), mServerSocket.getL2capPsm(), 258, SdpManager.OPP_FORMAT_ALL); }
public void force(boolean metadata) throws java.io.IOException { checkOpen(); if (((mode) & (O_ACCMODE)) != (O_RDONLY)) { try { if (metadata) { Libcore.os.fsync(fd); } else { Libcore.os.fdatasync(fd); } } catch (libcore.io.ErrnoException errnoException) { throw errnoException.rethrowAsIOException(); } } }

@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface create(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader classOrInterfaceLoader);
private static org.json.JSONObject buildLinkProperties(android.net.LinkProperties data) throws org.json.JSONException { org.json.JSONObject info = new org.json.JSONObject(); info.put("InterfaceName", data.getInterfaceName()); info.put("LinkAddresses", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getLinkAddresses())); info.put("DnsServers", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getDnsServers())); info.put("Domains", data.getDomains()); info.put("Mtu", data.getMtu()); info.put("Routes", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getRoutes())); return info; }



public long beforeHandshake(long context) throws javax.net.ssl.SSLException { long s = org.conscrypt.NativeCrypto.SSL_new(context); java.util.List<java.lang.String> cipherSuites = new java.util.ArrayList<java.lang.String>(); if ((enabledCipherSuites) == null) { cipherSuites.add("RSA-AES128-SHA"); if (pskEnabled) { cipherSuites.add(0, "PSK-AES128-CBC-SHA"); } } else { cipherSuites.addAll(enabledCipherSuites); } org.conscrypt.NativeCrypto.SSL_set_cipher_lists(s, cipherSuites.toArray(new java.lang.String[cipherSuites.size()])); if ((channelIdPrivateKey) != null) { org.conscrypt.NativeCrypto.SSL_set1_tls_channel_id(s, channelIdPrivateKey.getNativeRef()); } return s; }
void removeConfig(java.lang.String name) { mEditMap.remove(name); _seal(); }


public static javax.net.ssl.X509TrustManager getDefaultTrustManager() throws java.security.KeyManagementException { javax.net.ssl.X509TrustManager result = org.conscrypt.SSLParametersImpl.defaultTrustManager; if (result == null) { org.conscrypt.SSLParametersImpl.defaultTrustManager = result = org.conscrypt.SSLParametersImpl.createDefaultTrustManager(); } return result; }
public long getGpsDateTime() { java.lang.String date = mAttributes.get(android.media.ExifInterface.TAG_GPS_DATESTAMP); java.lang.String time = mAttributes.get(android.media.ExifInterface.TAG_GPS_TIMESTAMP); if ((date == null) || (time == null)) return -1; java.lang.String dateTimeString = (date + ' ') + time; java.text.ParsePosition pos = new java.text.ParsePosition(0); try { java.util.Date datetime = android.media.ExifInterface.sFormatter.parse(dateTimeString, pos); if (datetime == null) return -1; return datetime.getTime(); } catch (java.lang.IllegalArgumentException ex) { return -1; } }
@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.CstInsn)) { return false; } com.android.dx.dex.code.CstInsn ci = ((com.android.dx.dex.code.CstInsn) (insn)); int cpi = ci.getIndex(); if (!(unsignedFitsInShort(cpi))) { return false; } com.android.dx.rop.cst.Constant cst = ci.getConstant(); if (!((cst instanceof com.android.dx.rop.cst.CstMethodRef) || (cst instanceof com.android.dx.rop.cst.CstType))) { return false; } com.android.dx.rop.code.RegisterSpecList regs = ci.getRegisters(); return (com.android.dx.dex.code.form.Form35c.wordCount(regs)) >= 0; }




@java.lang.Override public void sendSMSExpectMore(java.lang.String smscPdu, java.lang.String pdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SEND_SMS_EXPECT_MORE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.GsmSmsMessage msg = constructGsmSendSmsRilRequest(smscPdu, pdu); try { radioProxy.sendSMSExpectMore(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_GSM, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendSMSExpectMore", e); } } }



public long getRetainedSize(com.android.ahat.heapdump.AhatHeap heap) { return mRetainedSizes[heap.getIndex()]; }
public static void init(android.preference.PreferenceScreen prefScreen, com.android.phone.SubscriptionInfoHelper subInfoHelper) { android.preference.Preference callForwardingPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_FORWARDING_KEY); callForwardingPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallForwardOptions.class)); android.preference.Preference additionalGsmSettingsPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.ADDITIONAL_GSM_SETTINGS_KEY); additionalGsmSettingsPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsAdditionalCallOptions.class)); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testDontBindWhenNullCarrierPackage() throws android.os.RemoteException { setupResolver(1); java.util.List<android.content.pm.ResolveInfo> info = new java.util.ArrayList<>(); java.util.Set<java.lang.String> features = new java.util.HashSet<>(); features.add(ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); info.add(getResolveInfo(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, true)); when(mMockPM.queryIntentServicesAsUser(any(), anyInt(), anyInt())).thenReturn(info); com.android.internal.telephony.ims.ImsServiceController controller = mock(com.android.internal.telephony.ims.ImsServiceController.class); mTestImsResolver.setImsServiceControllerFactory(( context, componentName) -> { when(controller.getComponentName()).thenReturn(componentName); return controller; }); setConfigCarrierString(0, null); mTestImsResolver.populateCacheAndStartBind(); waitForHandlerAction(mTestImsResolver.getHandler(), com.android.internal.telephony.ims.ImsResolverTest.TEST_TIMEOUT); verify(controller, never()).bind(any()); verify(controller, never()).unbind(); }

public void test2_0SetEnabledGetEnabled() throws java.lang.Exception { if (!(isBassBoostAvailable())) { return; } getBassBoost(0); try { mBassBoost.setEnabled(true); assertTrue("invalid state from getEnabled", mBassBoost.getEnabled()); mBassBoost.setEnabled(false); assertFalse("invalid state to getEnabled", mBassBoost.getEnabled()); } catch (java.lang.IllegalStateException e) { fail("setEnabled() in wrong state"); } finally { releaseBassBoost(); } }
@java.lang.Override public void factoryReset(int subId) { enforceConnectivityInternalPermission(); if (mUserManager.hasUserRestriction(UserManager.DISALLOW_NETWORK_RESET)) { return; } final long identity = android.os.Binder.clearCallingIdentity(); try { if ((android.telephony.SubscriptionManager.isUsableSubIdValue(subId)) && (!(mUserManager.hasUserRestriction(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS)))) { setDataEnabled(subId, true); setNetworkSelectionModeAutomatic(subId); setPreferredNetworkType(subId, Phone.PREFERRED_NT_MODE); mPhone.setDataRoamingEnabled(false); } } finally { android.os.Binder.restoreCallingIdentity(identity); } }

public void disableProfile(java.lang.String cardId, java.lang.String iccid, boolean refresh, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().disableProfile(mContext.getOpPackageName(), cardId, iccid, refresh, new com.android.internal.telephony.euicc.IDisableProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { callback.onComplete(resultCode, null); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling disableProfile", e); throw e.rethrowFromSystemServer(); } }
void stop() { if (com.android.bluetooth.mapclient.MnsService.VDBG) android.util.Log.v(com.android.bluetooth.mapclient.MnsService.TAG, "stop()"); mShutdown = true; if ((com.android.bluetooth.mapclient.MnsService.mServerSockets) != null) { com.android.bluetooth.mapclient.MnsService.mServerSockets.shutdown(false); com.android.bluetooth.mapclient.MnsService.mServerSockets = null; } }
@java.lang.Override public void untag(java.io.FileDescriptor socketDescriptor) throws java.net.SocketException { libcore.dalvik.system.SocketTaggingTest.StatAndDescriptor existing = liveDescriptors.remove(socketDescriptor.getInt$()); android.system.StructStat current = libcore.dalvik.system.SocketTaggingTest.fstat(socketDescriptor); assertEquals(existing.stat.st_dev, current.st_dev); assertEquals(existing.stat.st_ino, current.st_ino); }
@com.android.annotations.NonNull public java.util.Collection<com.android.builder.dependency.JarDependency> getJars() { return mJars; }
public void testGetSimCountryIso() { java.lang.String countryCode = mTelephonyManager.getSimCountryIso(); assertTrue(((("Country code '" + countryCode) + "' did not match ") + (android.telephony.cts.TelephonyManagerTest.ISO_COUNTRY_CODE_PATTERN)), java.util.regex.Pattern.matches(android.telephony.cts.TelephonyManagerTest.ISO_COUNTRY_CODE_PATTERN, countryCode)); }





@java.lang.Override public boolean isRenderscriptDebugBuild() { return renderscriptDebugBuild; }
public static java.nio.channels.SocketChannel open(java.net.InetSocketAddress adbSockAddr, com.android.ddmlib.Device device, int devicePort) throws java.io.IOException { java.nio.channels.SocketChannel adbChan = java.nio.channels.SocketChannel.open(adbSockAddr); try { adbChan.socket().setTcpNoDelay(true); adbChan.configureBlocking(false); com.android.ddmlib.AdbHelper.setDevice(adbChan, device); byte[] req = com.android.ddmlib.AdbHelper.createAdbForwardRequest(null, devicePort); if ((com.android.ddmlib.AdbHelper.write(adbChan, req)) == false) throw new java.io.IOException("failed submitting request to ADB"); com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse(adbChan, false); if (!(resp.okay)) throw new java.io.IOException("connection request rejected"); adbChan.configureBlocking(true); } catch (java.io.IOException ioe) { adbChan.close(); throw ioe; } return adbChan; }
private void assertDomainOne(java.lang.String domain, java.lang.String executable) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.List<android.cts.security.SELinuxHostTest.ProcessDetails> procs = android.cts.security.SELinuxHostTest.ProcessDetails.getProcMap(mDevice).get(domain); java.lang.String msg = (((("Expected 1 process in SELinux domain \"" + domain) + "\"") + " Found \"") + procs) + "\""; assertNotNull(msg, procs); assertEquals(msg, 1, procs.size()); msg = (((((("Expected executable \"" + executable) + "\" in SELinux domain \"") + domain) + "\"") + "Found: \"") + procs) + "\""; assertEquals(msg, executable, procs.get(0).procTitle); }
public void testHashCodeAndEqualsDoesNotPerformNetworkIo() throws java.lang.Exception { final dalvik.system.BlockGuard.Policy oldPolicy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { fail("Blockguard.Policy.onWriteToDisk"); } @java.lang.Override public void onReadFromDisk() { fail("Blockguard.Policy.onReadFromDisk"); } @java.lang.Override public void onNetwork() { fail("Blockguard.Policy.onNetwork"); } @java.lang.Override public void onUnbufferedIO() { fail("Blockguard.Policy.onUnbufferedIO"); } @java.lang.Override public int getPolicyMask() { return 0; } }); try { java.net.URL url = new java.net.URL("http://www.google.com/"); java.net.URL url2 = new java.net.URL("http://www.nest.com/"); url.equals(url2); url2.hashCode(); } finally { dalvik.system.BlockGuard.setThreadPolicy(oldPolicy); } }
public java.io.FileDescriptor dup(java.io.FileDescriptor oldFd) throws libcore.io.ErrnoException;

@org.junit.Test public void retroLambdaDefaultMethodsTest015() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_015).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
private void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo networkAgent, android.net.LinkProperties oldLp) { android.net.LinkProperties newLp = networkAgent.linkProperties; int netId = networkAgent.network.netId; if ((networkAgent.clatd) != null) { networkAgent.clatd.fixupLinkProperties(oldLp); } updateInterfaces(newLp, oldLp, netId, networkAgent.networkCapabilities); updateMtu(newLp, oldLp); updateTcpBufferSizes(networkAgent); updateRoutes(newLp, oldLp, netId); updateDnses(newLp, oldLp, netId); updateClat(newLp, oldLp, networkAgent); if (isDefaultNetwork(networkAgent)) { handleApplyDefaultProxy(newLp.getHttpProxy()); } else { updateProxy(newLp, oldLp, networkAgent); } if (!(java.util.Objects.equals(newLp, oldLp))) { notifyIfacesChangedForNetworkStats(); notifyNetworkCallbacks(networkAgent, ConnectivityManager.CALLBACK_IP_CHANGED); } mKeepaliveTracker.handleCheckKeepalivesStillValid(networkAgent); }
private void conference(java.lang.String callId1, java.lang.String callId2) { android.telecom.Log.d(this, "conference %s, %s", callId1, callId2); android.telecom.Connection connection2 = findConnectionForAction(callId2, "conference"); if (connection2 == (android.telecom.ConnectionService.getNullConnection())) { android.telecom.Log.w(this, "Connection2 missing in conference request %s.", callId2); return; } android.telecom.Connection connection1 = findConnectionForAction(callId1, "conference"); if (connection1 == (android.telecom.ConnectionService.getNullConnection())) { android.telecom.Conference conference1 = findConferenceForAction(callId1, "addConnection"); if (conference1 == (getNullConference())) { android.telecom.Log.w(this, "Connection1 or Conference1 missing in conference request %s.", callId1); } else { conference1.onMerge(connection2); } } else { onConference(connection1, connection2); } }
private void updateFontLabel(org.eclipse.swt.graphics.Font f) { org.eclipse.swt.graphics.FontData[] fd = f.getFontData(); org.eclipse.swt.graphics.FontData primary = fd[0]; java.lang.String description = java.lang.String.format("%1$s", primary.getName()); mFontButton.setText(description); }
public static org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance(byte[] in, java.lang.String encoding) throws java.security.cert.CertificateException { if (!(org.apache.harmony.security.provider.cert.X509CertPathImpl.encodings.contains(encoding))) { throw new java.security.cert.CertificateException("Unsupported encoding"); } try { if (org.apache.harmony.security.provider.cert.X509CertPathImpl.encodingsArr[0].equals(encoding)) { return ((org.apache.harmony.security.provider.cert.X509CertPathImpl) (org.apache.harmony.security.provider.cert.X509CertPathImpl.ASN1.decode(in))); } else { org.apache.harmony.security.pkcs7.ContentInfo ci = ((org.apache.harmony.security.pkcs7.ContentInfo) (ContentInfo.ASN1.decode(in))); org.apache.harmony.security.pkcs7.SignedData sd = ci.getSignedData(); if (sd == null) { throw new java.security.cert.CertificateException("Incorrect PKCS7 encoded form: missing signed data"); } java.util.List<org.apache.harmony.security.x509.Certificate> certs = sd.getCertificates(); if (certs == null) { certs = new java.util.ArrayList<org.apache.harmony.security.x509.Certificate>(); } java.util.List<org.apache.harmony.security.provider.cert.X509CertImpl> result = new java.util.ArrayList<org.apache.harmony.security.provider.cert.X509CertImpl>(); for (org.apache.harmony.security.x509.Certificate cert : certs) { result.add(new org.apache.harmony.security.provider.cert.X509CertImpl(cert)); } return new org.apache.harmony.security.provider.cert.X509CertPathImpl(result, org.apache.harmony.security.provider.cert.X509CertPathImpl.PKCS7, ci.getEncoded()); } } catch (java.io.IOException e) { throw new java.security.cert.CertificateException(("Incorrect encoded form: " + (e.getMessage()))); } }

private boolean implementsInterface(com.google.doclava.ClassInfo cl, java.lang.String iface) { if (cl.qualifiedName().equals(iface)) { return true; } for (com.google.doclava.ClassInfo clImplements : cl.interfaces()) { if (implementsInterface(clImplements, iface)) { return true; } } if (((cl.mSuperclass) != null) && (implementsInterface(cl.mSuperclass, iface))) { return true; } return false; }

public static android.os.ZygoteProcess getProcess() { android.webkit.WebViewZygote.connectToZygoteIfNeeded(); return android.webkit.WebViewZygote.sZygote; }
@javax.annotation.Nonnull com.android.jack.jayce.DeclaredTypeNode getNNode(@javax.annotation.Nonnull com.android.jack.jayce.NodeLevel minimumLevel) throws com.android.jack.library.LibraryFormatException, com.android.jack.library.LibraryIOException { com.android.jack.jayce.DeclaredTypeNode type = nnode.get(); if ((type == null) || (!(type.getLevel().keep(minimumLevel)))) { java.io.InputStream in = null; try { in = new java.io.BufferedInputStream(source.getInputStream()); com.android.jack.jayce.NodeLevel loadLevel = getLevelForLoading(minimumLevel); type = com.android.jack.jayce.JayceReaderFactory.get(inputJackLibrary, in).readType(loadLevel); nnode = new java.lang.ref.SoftReference<com.android.jack.jayce.DeclaredTypeNode>(type); } catch (java.io.IOException e) { throw new com.android.jack.library.LibraryIOException(inputJackLibrary.getLocation(), e); } catch (com.android.jack.jayce.JayceFormatException e) { com.android.jack.jayce.JayceClassOrInterfaceLoader.logger.log(java.util.logging.Level.SEVERE, (("Library " + (inputJackLibrary.getLocation().getDescription())) + " is invalid"), e); throw new com.android.jack.library.LibraryFormatException(inputJackLibrary.getLocation()); } finally { try { if (in != null) { in.close(); } } catch (java.io.IOException e) { com.android.jack.jayce.JayceClassOrInterfaceLoader.logger.log(java.util.logging.Level.WARNING, ("Failed to close input stream on " + (source.getLocation().getDescription())), e); } } tracer.getStatistic(com.android.jack.jayce.JayceClassOrInterfaceLoader.NNODE_RELOAD).add(((loadCount) > 0)); (loadCount)++; } return type; }
@java.lang.Override public void checkValue(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.util.Map<T, U> data) throws com.android.sched.util.codec.CheckingException { codec.checkValue(context, new java.util.ArrayList<java.util.Map.Entry<T, U>>(data.entrySet())); }

public void addImportedLibrary(@javax.annotation.Nonnull com.android.jack.library.InputLibrary source) { importedLibraries.add(source); }

private void showErrorAndFinish(java.lang.String url) { new android.app.AlertDialog.Builder(this).setMessage(getResources().getString(R.string.settings_safetylegal_activity_unreachable, url)).setTitle(R.string.settings_safetylegal_activity_title).setPositiveButton(android.R.string.ok, this).setOnCancelListener(this).setCancelable(true).show(); }
public boolean click(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint mousePos) { int x = getZoomX(); if (x > 0) { if (((mousePos.x) >= x) && ((mousePos.x) <= (x + (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_WIDTH)))) { int y = getZoomY(); if (((mousePos.y) >= y) && ((mousePos.y) <= (y + (3 * (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT))))) { if ((mousePos.y) < (y + (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT))) { zoomIn(); } else if ((mousePos.y) < (y + (2 * (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT)))) { zoomOut(); } else { zoomReset(); } } } return true; } com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreview preview = getPreview(mousePos); if (preview != null) { boolean handled = preview.click((((mousePos.x) - (getX())) - (preview.getX())), (((mousePos.y) - (getY())) - (preview.getY()))); if (handled) { moved(mousePos); return true; } } return false; }

private void init() { final android.os.Messenger messenger = getMessenger(); if (messenger == null) throw new java.lang.RuntimeException("Failed to initialize"); android.os.HandlerThread t = new android.os.HandlerThread("NsdManager"); t.start(); mHandler = new android.net.nsd.NsdManager.ServiceHandler(t.getLooper()); mAsyncChannel.connect(mContext, mHandler, messenger); try { mConnected.await(); } catch (java.lang.InterruptedException e) { android.util.Log.e(android.net.nsd.NsdManager.TAG, "interrupted wait at init"); } }
public void testInstall_withBadlyFormedBundleVersion() throws java.lang.Exception { java.lang.String invalidBundleVersion = "A01.001"; byte[] versionBytes = libcore.tzdata.update2.BundleVersion.getBytes(invalidBundleVersion, libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION, "001"); libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createTimeZoneBundleWithVersionBytes(versionBytes); assertFalse(installer.install(bundle.getBytes())); assertNoContentInstalled(); }
void addSwitchBasicBlock(@javax.annotation.Nonnull com.android.jack.cfg.SwitchBasicBlock block, @javax.annotation.Nonnull java.util.List<com.android.jack.ir.ast.JCaseStatement> cases, @javax.annotation.CheckForNull com.android.jack.ir.ast.JStatement defaultCase) { assert block != null; assert cases != null; blocksToResolve.add(new com.android.jack.cfg.ForwardBranchResolver.SwitchBasicBlockToResolve(block, cases, defaultCase)); }


@java.lang.Override public int getDisplayRule(java.lang.String plmn) { int rule; if ((((mParentApp) != null) && ((mParentApp.getUiccCard()) != null)) && ((mParentApp.getUiccCard().getOperatorBrandOverride()) != null)) { rule = SPN_RULE_SHOW_PLMN; } else if ((android.text.TextUtils.isEmpty(getServiceProviderName())) || ((mSpnDisplayCondition) == (-1))) { rule = SPN_RULE_SHOW_PLMN; } else if (isOnMatchingPlmn(plmn)) { rule = SPN_RULE_SHOW_SPN; if (((mSpnDisplayCondition) & 1) == 1) { rule |= SPN_RULE_SHOW_PLMN; } } else { rule = SPN_RULE_SHOW_PLMN; if (((mSpnDisplayCondition) & 2) == 0) { rule |= SPN_RULE_SHOW_SPN; } } return rule; }


@android.annotation.SystemApi public java.util.List<android.service.carrier.CarrierIdentifier> getAllowedCarriers(int slotIndex) { try { com.android.internal.telephony.ITelephony service = getITelephony(); if (service != null) { return service.getAllowedCarriers(slotIndex); } } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.TelephonyManager.TAG, "Error calling ITelephony#getAllowedCarriers", e); } catch (java.lang.NullPointerException e) { android.util.Log.e(android.telephony.TelephonyManager.TAG, "Error calling ITelephony#getAllowedCarriers", e); } return new java.util.ArrayList<android.service.carrier.CarrierIdentifier>(0); }


private void detachVolume(android.net.Uri uri) { if ((android.os.Binder.getCallingPid()) != (java.lang.Process.myPid())) { throw new java.lang.SecurityException("Opening and closing databases not allowed."); } java.lang.String volume = uri.getPathSegments().get(0); if (com.android.providers.media.MediaProvider.INTERNAL_VOLUME.equals(volume)) { throw new java.lang.UnsupportedOperationException("Deleting the internal volume is not allowed"); } else if (!(com.android.providers.media.MediaProvider.EXTERNAL_VOLUME.equals(volume))) { throw new java.lang.IllegalArgumentException(("There is no volume named " + volume)); } synchronized(mDatabases) { com.android.providers.media.MediaProvider.DatabaseHelper database = mDatabases.get(volume); if (database == null) return; try { java.io.File file = new java.io.File(database.getReadableDatabase().getPath()); file.setLastModified(java.lang.System.currentTimeMillis()); } catch (java.lang.Exception e) { android.util.Log.e(com.android.providers.media.MediaProvider.TAG, "Can't touch database file", e); } mDatabases.remove(volume); database.close(); } getContext().getContentResolver().notifyChange(uri, null); if (com.android.providers.media.MediaProvider.LOCAL_LOGV) android.util.Log.v(com.android.providers.media.MediaProvider.TAG, ("Detached volume: " + volume)); }
public void test_enableDisable() { android.bluetooth.BluetoothAdapter adapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); for (int i = 0; i < 5; i++) { disable(adapter); enable(adapter); } }

public void importProjects(@com.android.annotations.NonNull java.util.List<java.io.File> projectDirs) throws java.io.IOException { mSummary = new com.android.tools.gradle.eclipse.ImportSummary(this); mProjectMap.clear(); mHandledJars.clear(); mWarnings.clear(); mErrors.clear(); mWorkspaceProjects = null; mRootModules = java.util.Collections.emptyList(); mModules = com.google.common.collect.Sets.newHashSet(); for (java.io.File file : projectDirs) { if (file.isFile()) { assert !(file.isDirectory()); file = file.getParentFile(); } guessWorkspace(file); if (com.android.tools.gradle.eclipse.GradleImport.isAdtProjectDir(file)) { guessSdk(file); guessNdk(file); try { com.android.tools.gradle.eclipse.EclipseProject.getProject(this, file); } catch (com.android.tools.gradle.eclipse.GradleImport.ImportException e) { return; } catch (java.lang.Exception e) { reportError(null, file, e.toString(), false); return; } } else { reportError(null, file, ("Not a recognized project: " + file), false); return; } } java.util.Set<com.android.tools.gradle.eclipse.EclipseProject> projects = com.google.common.collect.Sets.newHashSet(mProjectMap.values()); mRootModules = com.android.tools.gradle.eclipse.EclipseProject.performImport(this, projects); for (com.android.tools.gradle.eclipse.ImportModule module : mRootModules) { mModules.add(module); mModules.addAll(module.getAllDependencies()); } }
public void test_parse_with_multiplier() { java.text.DecimalFormat format = ((java.text.DecimalFormat) (java.text.NumberFormat.getNumberInstance(java.util.Locale.ENGLISH))); java.lang.Number result; format.setMultiplier(100); result = format.parse("9223372036854775807", new java.text.ParsePosition(0)); assertEquals(("Wrong result type multiplier 100: " + result), java.lang.Double.class, result.getClass()); assertEquals(("Wrong result for multiplier 100: " + result), 9.223372036854776E16, result.doubleValue()); format.setMultiplier(1000); result = format.parse("9223372036854775807", new java.text.ParsePosition(0)); assertEquals(("Wrong result type multiplier 1000: " + result), java.lang.Double.class, result.getClass()); assertEquals(("Wrong result for multiplier 1000: " + result), 9.223372036854776E15, result.doubleValue()); format.setMultiplier(10000); result = format.parse("9223372036854775807", new java.text.ParsePosition(0)); assertEquals(("Wrong result type multiplier 10000: " + result), java.lang.Double.class, result.getClass()); assertEquals(("Wrong result for multiplier 10000: " + result), 9.223372036854776E14, result.doubleValue()); }
public android.bluetooth.le.PeriodicAdvertisingParameters.Builder setIncludeTxPower(boolean includeTxPower) { this.includeTxPower = includeTxPower; return this; }
@android.test.suitebuilder.annotation.MediumTest public void testSendCallEventNull() throws java.lang.Exception { com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall("650-555-1212", mPhoneAccountA0.getAccountHandle(), mConnectionServiceFixtureA); assertEquals(Call.STATE_ACTIVE, mInCallServiceFixtureX.getCall(ids.mCallId).getState()); mInCallServiceFixtureX.mInCallAdapter.sendCallEvent(ids.mCallId, com.android.server.telecom.tests.BasicCallTests.TEST_EVENT, null); verify(mConnectionServiceFixtureA.getTestDouble(), timeout(com.android.server.telecom.tests.TEST_TIMEOUT)).sendCallEvent(ids.mCallId, com.android.server.telecom.tests.BasicCallTests.TEST_EVENT, null); }
@javax.annotation.Nonnull public static java.io.File getRuntimeEnvironmentRootDir(@javax.annotation.Nonnull java.lang.String rtName) { java.lang.String rtLocationPath = com.android.jack.test.toolchain.AbstractTestTools.testsProperties.getProperty(((com.android.jack.test.toolchain.AbstractTestTools.RUNTIME_LOCATION_PREFIX) + rtName)); if (rtLocationPath == null) { throw new com.android.jack.test.toolchain.TestConfigurationException(((((("Location for runtime '" + rtName) + "' is not specified. Set property '") + (com.android.jack.test.toolchain.AbstractTestTools.RUNTIME_LOCATION_PREFIX)) + rtName) + "'")); } java.io.File rtLocation = new java.io.File(rtLocationPath); if (!(rtLocation.exists())) { throw new com.android.jack.test.toolchain.TestConfigurationException((((("Location for runtime " + rtName) + " does not exist: '") + rtLocationPath) + "'")); } if (!(rtLocation.isDirectory())) { throw new com.android.jack.test.toolchain.TestConfigurationException((((("Location for runtime " + rtName) + " is not a directory: '") + rtLocationPath) + "'")); } return rtLocation; }
private void handleInterfaceServingStateActive(int mode, com.android.server.connectivity.tethering.TetherInterfaceStateMachine who) { if ((mNotifyList.indexOf(who)) < 0) { mNotifyList.add(who); mIPv6TetheringCoordinator.addActiveDownstream(who, mode); } if (mode == (com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED)) { mForwardedDownstreams.add(who); } else { mForwardedDownstreams.remove(who); } }
@javax.annotation.Nonnull public static <T> com.android.sched.util.config.id.DefaultFactoryPropertyId<T> create(@javax.annotation.Nonnull java.lang.String name, @javax.annotation.Nonnull java.lang.String description, @javax.annotation.Nonnull java.lang.Class<T> type) { return new com.android.sched.util.config.id.DefaultFactoryPropertyId<T>(name, description, new com.android.sched.util.codec.DefaultFactorySelector<T>(type)); }

public void testVpn() throws java.lang.Exception { if (!(verifyVpnStatus())) { com.android.devtools.systemimage.uitest.utils.AppManager.installApp(mInstrumentation, "FredVPN.apk"); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, "TestVPN"); mDevice.registerWatcher(com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher.class.getName(), new com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher(mDevice)); mDevice.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.VpnTest.START_VPN_BUTTON_RES)).clickAndWaitForNewWindow(); assertTrue("Failed to find the VPN lock icon after starting VPN!", verifyVpnStatus()); mDevice.removeWatcher(com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher.class.getName()); } com.android.devtools.systemimage.uitest.utils.AppManager.uninstallApp(mInstrumentation, "TestVPN", null); }
public void test_Apia_jumpForwardOverInternationalDateLine_P12_to_M12() { java.time.zone.ZoneRules test = pacificApia(); java.time.Instant instantBefore = java.time.LocalDate.of(1879, 7, 2).atStartOfDay(java.time.ZoneOffset.UTC).toInstant(); java.time.zone.ZoneOffsetTransition trans = test.nextTransition(instantBefore); assertEquals(trans.getDateTimeBefore(), java.time.LocalDateTime.of(1879, 7, 5, 0, 0)); assertEquals(trans.getDateTimeAfter(), java.time.LocalDateTime.of(1879, 7, 4, 0, 0)); assertEquals(trans.isGap(), false); assertEquals(trans.isOverlap(), true); assertEquals(trans.isValidOffset(java.time.ZoneOffset.ofHoursMinutesSeconds((+12), 33, 4)), true); assertEquals(trans.isValidOffset(java.time.ZoneOffset.ofHoursMinutesSeconds((-11), (-26), (-56))), true); assertEquals(trans.getDuration(), java.time.Duration.ofHours((-24))); assertEquals(trans.getInstant(), java.time.LocalDateTime.of(1879, 7, 4, 0, 0).toInstant(java.time.ZoneOffset.ofHoursMinutesSeconds((-11), (-26), (-56)))); java.time.ZonedDateTime zdt = java.time.ZonedDateTime.of(1879, 7, 4, 23, 0, 0, 0, java.time.ZoneId.of("Pacific/Apia")); assertEquals(zdt.plusHours(2).toLocalDateTime(), java.time.LocalDateTime.of(1879, 7, 4, 1, 0, 0)); }
public static synchronized com.android.internal.telephony.uicc.UiccController getInstance(com.android.internal.telephony.PhoneBase phone) { if ((com.android.internal.telephony.uicc.UiccController.mInstance) == null) { com.android.internal.telephony.uicc.UiccController.mInstance = new com.android.internal.telephony.uicc.UiccController(phone); } else if (phone != null) { com.android.internal.telephony.uicc.UiccController.mInstance.setNewPhone(phone); } return com.android.internal.telephony.uicc.UiccController.mInstance; }

private void processLogLines(java.lang.String[] lines) { java.util.List<com.android.ddmuilib.logcat.LogCatMessage> messages = mLogCatMessageParser.processLogLines(lines, mPidToNameMapper); if ((messages.size()) > 0) { for (com.android.ddmuilib.logcat.LogCatMessage m : messages) { mLogMessages.appendMessage(m); } sendMessageReceivedEvent(messages); } }
@org.junit.Test public void testDefaultMethod012() throws java.lang.Exception { run(DEFAULTMETHOD012); }


public static int Shl0(int arg) { return arg << 0; }




protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return mUserQuotaTracker.getUserRecord(this.uid).transform; }
public static short shortToCharToShort(short value) { return ((short) ((char) (value))); }
public void testDiff6() throws java.lang.Exception { java.lang.String reference = "" + ((((((((((("<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n") + " xmlns:tools=\"http://schemas.android.com/tools\"\n") + " package=\"com.example.lib3\">\n") + "\n") + " <activity android:name=\"activityOne\" ") + " android:configChanges=\"locale\">\n") + "\n") + " <intent-filter android:label=\"@string/foo\"/>\n") + "\n") + " </activity>\n") + "</manifest>"); java.lang.String other = "" + (((((((("<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n") + " xmlns:tools=\"http://schemas.android.com/tools\"\n") + " package=\"com.example.lib3\">\n") + "\n") + " <activity android:name=\"activityOne\" ") + " android:configChanges=\"locale\"/>\n") + "\n") + "</manifest>"); com.android.manifmerger.XmlDocument refDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), "testDiff6()"), reference); com.android.manifmerger.XmlDocument otherDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), "testDiff6()"), other); assertFalse(refDocument.getRootNode().getNodeByTypeAndKey(ManifestModel.NodeTypes.ACTIVITY, "com.example.lib3.activityOne").get().compareTo(otherDocument.getRootNode().getNodeByTypeAndKey(ManifestModel.NodeTypes.ACTIVITY, "com.example.lib3.activityOne").get(), mergingReport)); }

public void testInstrumentationNotAllowed() { fail("instrumentating app with different cert should fail"); }

private static int compareBooleans(boolean x, boolean y) { return java.lang.Integer.compare((x ? 1 : 0), (y ? 1 : 0)); }


@java.lang.Override @com.android.annotations.Nullable public java.lang.Boolean getRenderscriptSupportMode() { return mRenderscriptSupportMode; }
public int startSendingOffloadedPacket(int slot, byte[] srcMac, com.android.server.connectivity.KeepalivePacketData keepAlivePacket, int periodInMs) { android.util.Log.d(com.android.server.wifi.WifiVendorHal.TAG, ((("startSendingOffloadedPacket slot=" + slot) + " periodInMs=") + periodInMs)); java.util.ArrayList<java.lang.Byte> data = com.android.server.wifi.util.NativeUtil.byteArrayToArrayList(keepAlivePacket.data); short protocol = ((short) (keepAlivePacket.protocol)); synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return -1; try { android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.startSendingKeepAlivePackets(slot, data, protocol, srcMac, keepAlivePacket.dstMac, periodInMs); if ((status.code) != (android.hardware.wifi.V1_0.WifiStatusCode.SUCCESS)) return -1; return 0; } catch (android.os.RemoteException e) { kilroy(); handleRemoteException(e); return -1; } } }
private static boolean startSystemServer() throws com.android.internal.os.ZygoteInit.MethodAndArgsCaller, java.lang.RuntimeException { long capabilities = com.android.internal.os.ZygoteInit.posixCapabilitiesAsBits(OsConstants.CAP_KILL, OsConstants.CAP_NET_ADMIN, OsConstants.CAP_NET_BIND_SERVICE, OsConstants.CAP_NET_BROADCAST, OsConstants.CAP_NET_RAW, OsConstants.CAP_SYS_MODULE, OsConstants.CAP_SYS_NICE, OsConstants.CAP_SYS_RESOURCE, OsConstants.CAP_SYS_TIME, OsConstants.CAP_SYS_TTY_CONFIG); java.lang.String[] args = new java.lang.String[]{ "--setuid=1000", "--setgid=1000", "--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1032,3001,3002,3003,3006,3007", (("--capabilities=" + capabilities) + ",") + capabilities, "--runtime-init", "--nice-name=system_server", "com.android.server.SystemServer" }; com.android.internal.os.ZygoteConnection.Arguments parsedArgs = null; int pid; try { parsedArgs = new com.android.internal.os.ZygoteConnection.Arguments(args); com.android.internal.os.ZygoteConnection.applyDebuggerSystemProperty(parsedArgs); com.android.internal.os.ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs); pid = com.android.internal.os.Zygote.forkSystemServer(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids, parsedArgs.debugFlags, null, parsedArgs.permittedCapabilities, parsedArgs.effectiveCapabilities); } catch (java.lang.IllegalArgumentException ex) { throw new java.lang.RuntimeException(ex); } if (pid == 0) { com.android.internal.os.ZygoteInit.handleSystemServerProcess(parsedArgs); } return true; }

static void getChar(java.lang.invoke.MethodHandle m, Main.ValueHolder v, char value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final char got; if (v == null) { got = ((char) (m.invokeExact())); } else { got = ((char) (m.invokeExact(v))); } Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
public void switchToSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { mController.switchToSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@javax.annotation.Nonnull private static java.util.Map<com.android.jack.ir.ast.JVariable, com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo> collectDefinitions(@javax.annotation.Nonnull com.android.jack.cfg.ControlFlowGraph cfg) { java.util.Map<com.android.jack.ir.ast.JVariable, com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo> defs = com.google.common.collect.Maps.newIdentityHashMap(); for (com.android.jack.cfg.BasicBlock bb : cfg.getNodes()) { for (com.android.jack.ir.ast.JStatement stmt : bb.getStatements()) { com.android.jack.analysis.DefinitionMarker dm = com.android.jack.util.ThreeAddressCodeFormUtils.getDefinitionMarker(stmt); if (dm != null) { com.android.jack.ir.ast.JVariable variable = dm.getDefinedVariable(); if (!(defs.containsKey(variable))) { defs.put(variable, new com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo()); } defs.get(variable).defs.add(dm); } for (com.android.jack.ir.ast.JVariableRef ref : com.android.jack.util.OptimizationTools.getUsedVariables(stmt)) { com.android.jack.ir.ast.JVariable variable = ref.getTarget(); if (!(defs.containsKey(variable))) { defs.put(variable, new com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo()); } defs.get(variable).refStmts.add(stmt); } } } return defs; }
@org.junit.Test public void testDependency001() throws java.lang.Exception { com.android.jack.test.helper.IncrementalTestHelper ite = new com.android.jack.test.helper.IncrementalTestHelper(com.android.jack.test.toolchain.AbstractTestTools.createTempDir()); ite.setIsApiTest(); ite.addJavaFile("jack.incremental", "A.java", ("package jack.incremental; \n" + (("public class A { \n" + " public static class B { public void m() {} } \n") + " public static void main(String[] args) {new B().m();} } \n"))); ite.incrementalBuildFromFolder(); junit.framework.Assert.assertEquals(2, ite.getJackFiles().size()); ite.addJavaFile("jack.incremental", "A.java", ("package jack.incremental; \n" + ("public class A { \n" + " public static void main(String[] args) {new B().m();} } \n"))); try { ite.incrementalBuildFromFolder(); junit.framework.Assert.fail(); } catch (com.android.jack.frontend.FrontendCompilationException e) { junit.framework.Assert.assertEquals(0, ite.getJackFiles().size()); } }

public static com.android.manifmerger.XmlDocument load(com.android.manifmerger.KeyResolver<java.lang.String> selectors, com.android.manifmerger.PlaceholderHandler.KeyBasedValueResolver<com.android.manifmerger.ManifestMerger2.SystemProperty> systemPropertyResolver, java.lang.String displayName, java.io.File xmlFile) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { java.io.InputStream inputStream = new java.io.BufferedInputStream(new java.io.FileInputStream(xmlFile)); com.android.utils.PositionXmlParser positionXmlParser = new com.android.utils.PositionXmlParser(); org.w3c.dom.Document domDocument = positionXmlParser.parse(inputStream); return domDocument != null ? new com.android.manifmerger.XmlDocument(positionXmlParser, new com.android.manifmerger.XmlLoader.FileSourceLocation(displayName, xmlFile), selectors, systemPropertyResolver, domDocument.getDocumentElement()) : null; }
private com.android.apksig.DefaultApkSignerEngine.OutputApkSigningBlockRequestImpl outputZipSectionsInternal(com.android.apksig.util.DataSource zipEntries, com.android.apksig.util.DataSource zipCentralDirectory, com.android.apksig.util.DataSource zipEocd, boolean apkSigningBlockPaddingSupported) throws java.io.IOException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException { checkNotClosed(); checkV1SigningDoneIfEnabled(); if (!(mV2SigningEnabled)) { return null; } invalidateV2Signature(); com.android.apksig.internal.util.Pair<byte[], java.lang.Integer> result = com.android.apksig.internal.apk.v2.V2SchemeSigner.generateApkSigningBlock(zipEntries, zipCentralDirectory, zipEocd, mV2SignerConfigs, apkSigningBlockPaddingSupported); byte[] apkSigningBlock = result.getFirst(); int padSizeBeforeApkSigningBlock = result.getSecond(); mAddV2SignatureRequest = new com.android.apksig.DefaultApkSignerEngine.OutputApkSigningBlockRequestImpl(apkSigningBlock, padSizeBeforeApkSigningBlock); return mAddV2SignatureRequest; }
void getFolderItemsNowPlaying(byte[] bdaddr, com.android.bluetooth.avrcp.AvrcpCmd.FolderItemsCmd reqObj, com.android.bluetooth.avrcp.MediaController mediaController) { java.util.List<android.media.session.MediaSession.QueueItem> tempItems; java.util.List<android.media.session.MediaSession.QueueItem> mNowPlayingItems = mNowPlayingListManager.getNowPlayingList(); if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.v(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, "getFolderItemsNowPlaying"); if (mNowPlayingItems != null) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.i(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, "sending cached now playing list"); getFolderItemsFilterAttr(bdaddr, reqObj, mNowPlayingItems, AvrcpConstants.BTRC_SCOPE_FILE_SYSTEM, reqObj.mStartItem, reqObj.mEndItem); } else if (mediaController == null) { android.util.Log.e(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, "mediaController = null, sending internal error response"); mMediaInterface.folderItemsRsp(bdaddr, AvrcpConstants.RSP_INTERNAL_ERR, null); } else { mNowPlayingItems = mediaController.getQueue(); if (mNowPlayingItems == null) { android.util.Log.w(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, (("Received Now playing list is null from: " + (mediaController.getPackageName())) + ", sending internal error response")); mMediaInterface.folderItemsRsp(bdaddr, AvrcpConstants.RSP_INTERNAL_ERR, null); } else { mNowPlayingListManager.setNowPlayingList(mNowPlayingItems); getFolderItemsFilterAttr(bdaddr, reqObj, mNowPlayingItems, AvrcpConstants.BTRC_SCOPE_NOW_PLAYING, reqObj.mStartItem, reqObj.mEndItem); } } }
@java.lang.Override public void enter() { android.bluetooth.BluetoothDevice erroneouslyConnectedDevice = getBluetoothAudioConnectedDevice(); if (erroneouslyConnectedDevice != null) { android.telecom.Log.w(com.android.server.telecom.bluetooth.BluetoothRouteManager.LOG_TAG, ("Entering AudioOff state but device %s appears to be connected. " + "Disconnecting."), erroneouslyConnectedDevice); disconnectAudio(); } cleanupStatesForDisconnectedDevices(); }
@org.junit.Test public void testMacAddrTypes() { android.net.MacAddressTest.AddrTypeTestCase[] testcases = new android.net.MacAddressTest.AddrTypeTestCase[]{ android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 0), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5, 6, 7), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNICAST, 160, 176, 192, 208, 224, 240), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_BROADCAST, 255, 255, 255, 255, 255, 255), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 1, 2, 3, 4, 5, 6), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 11, 22, 33, 44, 55, 66), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 33, 33, 170, 187, 204, 221) }; for (android.net.MacAddressTest.AddrTypeTestCase t : testcases) { int got = android.net.MacAddress.macAddressType(t.addr); java.lang.String msg = java.lang.String.format("expected type of %s to be %s, but got %s", java.util.Arrays.toString(t.addr), t.expectedType, got); assertEquals(msg, t.expectedType, got); if (got != (MacAddress.TYPE_UNKNOWN)) { assertEquals(got, android.net.MacAddress.fromBytes(t.addr).addressType()); } } }
public void test_23831() throws java.lang.Exception { byte[] bytes = new byte[]{ ((byte) (245)), ((byte) (169)), ((byte) (234)), ((byte) (33)) }; java.lang.String expected = "\ufffd\ufffd!"; java.nio.charset.CharsetDecoder decoder = java.nio.charset.Charset.forName("UTF-8").newDecoder(); decoder.onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE); assertEquals(expected, decoder.decode(java.nio.ByteBuffer.wrap(bytes)).toString()); assertEquals(expected, new java.lang.String(bytes, "UTF-8")); }
private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { if (callback == null) { throw new java.lang.IllegalArgumentException("null NetworkCallback"); } if ((need == null) && (action != (android.net.ConnectivityManager.REQUEST))) { throw new java.lang.IllegalArgumentException("null NetworkCapabilities"); } final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return request; }
public void testConfigurationUpdatesWhenRotatingWhileDocked() throws java.lang.Exception { setDeviceRotation(0); launchActivityInStack(android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); final android.server.cts.ReportedSizes orientationASizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); setDeviceRotation(1); final android.server.cts.ReportedSizes orientationBSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); android.server.cts.ActivityManagerAppConfigurationTests.assertSizesRotate(orientationASizes, orientationBSizes); }



public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void setLineWidth(float width) { junit.framework.Assert.assertTrue((width >= 0)); mLineWidth = width; }

public vogar.commands.Command build() { vogar.commands.Command.Builder builder = new vogar.commands.Command.Builder(log); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : env.entrySet()) { builder.env(entry.getKey(), entry.getValue()); } builder.args(vmCommand); if (classpathViaProperty) { builder.args(("-Djava.class.path=" + (classpath))); } else { builder.args("-classpath", classpath.toString()); } if (!(bootClasspath.isEmpty())) { builder.args(("-Xbootclasspath/a:" + (bootClasspath))); } if ((userDir) != null) { builder.args(("-Duser.dir=" + (userDir))); } if ((temp) != null) { builder.args(("-Djava.io.tmpdir=" + (temp))); } if ((debugPort) != null) { builder.args((("-Xrunjdwp:transport=dt_socket,address=" + (debugPort)) + ",server=y,suspend=y")); } builder.args(vmArgs); builder.args(mainClass); builder.args(args); builder.tee(output); builder.maxLength(maxLength); return builder.build(); }
private void handshake(java.nio.channels.DatagramChannel tunnel) throws java.lang.Exception { java.nio.ByteBuffer packet = java.nio.ByteBuffer.allocate(1024); packet.put(((byte) (0))).put(mSharedSecret).flip(); for (int i = 0; i < 3; ++i) { packet.position(0); tunnel.write(packet); } packet.clear(); for (int i = 0; i < 50; ++i) { java.lang.Thread.sleep(100); int length = tunnel.read(packet); if ((length > 0) && ((packet.get(0)) == 0)) { configure(new java.lang.String(packet.array(), 1, (length - 1)).trim()); return; } } throw new java.lang.IllegalStateException("Timed out"); }

public void testGoodOverrideFile() throws java.lang.Exception { java.io.RandomAccessFile in = new java.io.RandomAccessFile(libcore.util.ZoneInfoDBTest.DEFAULT_FILE_1, "r"); byte[] content = new byte[((int) (in.length()))]; in.readFully(content); content[6] = '9'; content[7] = '9'; content[8] = '9'; content[9] = '9'; content[10] = 'z'; in.close(); java.lang.String goodFile = libcore.util.ZoneInfoDBTest.makeTemporaryFile(content); try { libcore.util.ZoneInfoDB.TzData data = new libcore.util.ZoneInfoDB.TzData(goodFile, libcore.util.ZoneInfoDBTest.DEFAULT_FILE_1, libcore.util.ZoneInfoDBTest.DEFAULT_FILE_2); assertEquals("9999z", data.getVersion()); assertEquals(java.util.TimeZone.getAvailableIDs().length, data.getAvailableIDs().length); } finally { new java.io.File(goodFile).delete(); } }
@java.lang.Override public com.android.ide.common.rendering.api.ViewInfo getRootView() { return mRootViewInfo; }

@com.android.annotations.NonNull public java.util.Set<java.lang.String> getApplicableFilters(@com.android.annotations.NonNull java.util.Set<java.lang.String> allFilters) { if (!(enable)) { return java.util.Collections.singleton(null); } java.util.Set<java.lang.String> results = (reset) ? com.google.common.collect.Sets.<java.lang.String>newHashSetWithExpectedSize(((allFilters.size()) + 1)) : com.google.common.collect.Sets.newHashSet(allFilters); if ((exclude) != null) { results.removeAll(exclude); } if ((include) != null) { for (java.lang.String inc : include) { if (allFilters.contains(inc)) { results.add(inc); } } } return results; }

@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCatchBlock catchBlock) { super.visit(catchBlock); assert currentStmts.isEmpty(); java.util.List<com.android.jack.ir.ast.JStatement> catchStmts = catchBlock.getStatements(); assert (catchStmts.size()) >= 1; accept(catchStmts.get(0)); assert (cfg) != null; com.android.jack.cfg.CatchBasicBlock catchBasicBlock = new com.android.jack.cfg.CatchBasicBlock(cfg, currentStmts, catchBlock.getCatchTypes(), catchBlock.getCatchVar()); setBlockOfStatement(catchBasicBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(getConcreteStatement(catchBlock)); if (nextStatement != null) { forwardBranchResolver.addForwardBranch(ForwardBranchKind.BRANCH, catchBasicBlock, nextStatement); } accept(catchStmts.subList(1, catchStmts.size())); return false; }
private void handleNetCap(android.net.Network network, android.net.NetworkCapabilities newNc) { if (!(mNetworkMap.containsKey(network))) { return; } if (com.android.server.connectivity.tethering.UpstreamNetworkMonitor.VDBG) { android.util.Log.d(com.android.server.connectivity.tethering.UpstreamNetworkMonitor.TAG, java.lang.String.format("EVENT_ON_CAPABILITIES for %s: %s", network, newNc)); } final android.net.NetworkState prev = mNetworkMap.get(network); mNetworkMap.put(network, new android.net.NetworkState(null, prev.linkProperties, newNc, network, null, null)); notifyTarget(com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_CAPABILITIES, network); }

public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if ((obj == null) || ((getClass()) != (obj.getClass()))) return false; java.text.DateFormatSymbols that = ((java.text.DateFormatSymbols) (obj)); return (((((((((((((((java.util.Arrays.equals(eras, that.eras)) && (java.util.Arrays.equals(months, that.months))) && (java.util.Arrays.equals(shortMonths, that.shortMonths))) && (java.util.Arrays.equals(tinyMonths, that.tinyMonths))) && (java.util.Arrays.equals(weekdays, that.weekdays))) && (java.util.Arrays.equals(shortWeekdays, that.shortWeekdays))) && (java.util.Arrays.equals(tinyWeekdays, that.tinyWeekdays))) && (java.util.Arrays.equals(standAloneMonths, that.standAloneMonths))) && (java.util.Arrays.equals(shortStandAloneMonths, that.shortStandAloneMonths))) && (java.util.Arrays.equals(tinyStandAloneMonths, that.tinyStandAloneMonths))) && (java.util.Arrays.equals(standAloneWeekdays, that.standAloneWeekdays))) && (java.util.Arrays.equals(shortStandAloneWeekdays, that.shortStandAloneWeekdays))) && (java.util.Arrays.equals(tinyStandAloneWeekdays, that.tinyStandAloneWeekdays))) && (java.util.Arrays.equals(ampms, that.ampms))) && (java.util.Arrays.deepEquals(getZoneStringsWrapper(), that.getZoneStringsWrapper()))) && ((((localPatternChars) != null) && (localPatternChars.equals(that.localPatternChars))) || (((localPatternChars) == null) && ((that.localPatternChars) == null))); }

public static final void main(java.lang.String[] argv) { if (((argv.length) == 2) && (argv[1].equals("application"))) { if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, "RuntimeInit: Starting application"); com.android.internal.os.RuntimeInit.redirectLogStreams(); } else { if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, "RuntimeInit: Starting tool"); } com.android.internal.os.RuntimeInit.commonInit(); com.android.internal.os.RuntimeInit.nativeFinishInit(); if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, "Leaving RuntimeInit!"); }
static float $opt$LongToFloat(long a) { if (Main.doThrow) throw new java.lang.Error(); return ((float) (a)); }
private com.android.internal.telephony.RILRequest findAndRemoveRequestFromList(int serial) { com.android.internal.telephony.RILRequest rr = null; synchronized(mRequestList) { rr = mRequestList.get(serial); if (rr != null) { mRequestList.remove(serial); } } return rr; }
@java.lang.Override public void runConformTest(java.lang.String[] srcDescription) { try { java.io.File sourceFolder = buildSourceFolder(srcDescription); java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeList = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(1); excludeList.add(com.android.jack.test.toolchain.JillBasedToolchain.class); java.io.File dexOutDir = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); com.android.jack.test.toolchain.JackBasedToolchain jackToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class, excludeList); jackToolchain.addToClasspath(jackToolchain.getDefaultBootClasspath()); jackToolchain.setSourceLevel(SourceLevel.JAVA_8); jackToolchain.srcToExe(dexOutDir, false, sourceFolder); } catch (java.lang.Exception e) { e.printStackTrace(); junit.framework.Assert.fail(); } }


public static void main(java.lang.String[] args) { Main.InlineVoid(); if ((Main.InlineInt()) != 4) { throw new java.lang.Error(); } if ((Main.InlineWide()) != 8L) { throw new java.lang.Error(); } if ((Main.InlineParameter(42)) != 42) { throw new java.lang.Error(); } if ((Main.InlineWideParameter(4294967297L)) != 4294967297L) { throw new java.lang.Error(); } if ((Main.InlineReferenceParameter(Main.class)) != (Main.class)) { throw new java.lang.Error(); } if ((Main.InlineAdd()) != 8) { throw new java.lang.Error(); } if (((Main.InlineFieldAccess()) != 43) || ((Main.InlineFieldAccess()) != 44)) { throw new java.lang.Error(); } if ((Main.InlineWithControlFlow(true)) != 4) { throw new java.lang.Error(); } if ((Main.InlineWithControlFlow(false)) != 2) { throw new java.lang.Error(); } }

@java.lang.Override public void freeUnderlyingResources() { for (int direction : com.android.server.IpSecService.DIRECTIONS) { int spi = mSpis[direction].getSpi(); try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, direction, mConfig.getLocalAddress(), mConfig.getRemoteAddress(), spi); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ("Failed to delete SA with ID: " + (mResourceId))); } } getResourceTracker().give(); }
void cleanup() { mRegularScanClients.clear(); mBatchClients.clear(); mSuspendedScanClients.clear(); mScanNative.cleanup(); if ((mActivityManager) != null) { mActivityManager.removeOnUidImportanceListener(mUidImportanceListener); } if ((mDm) != null) { mDm.unregisterDisplayListener(mDisplayListener); } if ((mHandler) != null) { mHandler.removeCallbacksAndMessages(null); android.os.Looper looper = mHandler.getLooper(); if (looper != null) { looper.quitSafely(); } mHandler = null; } }

@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, (((" onConnect BluetoothSocket :" + socket) + " \n :device :") + device)); } com.android.bluetooth.BluetoothObexTransport transport = new com.android.bluetooth.BluetoothObexTransport(socket); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.opp.BluetoothOppService.MSG_INCOMING_BTOPP_CONNECTION); msg.obj = transport; msg.sendToTarget(); return true; }

public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeParcelable(networkCapabilities, flags); dest.writeInt(legacyType); dest.writeInt(requestId); dest.writeString(type.name()); }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeInt(mSignalStrength); }

@org.junit.Test public void testCompile021() throws java.lang.Exception { properties.clear(); properties.put("jack.optimization.enum.switch", "feedback"); java.lang.String packageName = "com.android.jack.switchstatement.test021.jack"; java.lang.String classPrefix = (packageName.replace('.', '_')) + "_"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put("Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo("java_lang_Thread$State", true)); checkCompiledCode(packageName, input); }
private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, com.android.rs.test.Int2 javaResult, com.android.rs.test.Int2 rsResult) { final boolean success = ((javaResult.x) == (rsResult.x)) && ((javaResult.y) == (rsResult.y)); java.lang.String status = (success) ? "PASSED" : "FAILED"; if (success && (t != null)) status += " " + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((((((((((((testName + ": java (") + (javaResult.x)) + ", ") + (javaResult.y)) + ")") + ", rs (") + (rsResult.x)) + ", ") + (rsResult.y)) + ")") + ": ") + status)); return success; }
public static void updateThread(android.database.sqlite.SQLiteDatabase db, long thread_id) { if (thread_id < 0) { com.android.providers.telephony.MmsSmsDatabaseHelper.updateAllThreads(db, null, null); return; } db.beginTransaction(); try { int rows = db.delete(MmsSmsProvider.TABLE_THREADS, ("_id = ? AND _id NOT IN" + (" (SELECT thread_id FROM sms " + " UNION SELECT thread_id FROM pdu)")), new java.lang.String[]{ java.lang.String.valueOf(thread_id) }); if (rows > 0) { com.android.providers.telephony.MmsSmsDatabaseHelper.removeUnferencedCanonicalAddresses(db); } else { db.execSQL((((((((((((((((((((((((" UPDATE threads SET message_count = " + (" (SELECT COUNT(sms._id) FROM sms LEFT JOIN threads " + " ON threads._id = ")) + (android.provider.Telephony.Sms.THREAD_ID)) + " WHERE ") + (android.provider.Telephony.Sms.THREAD_ID)) + " = ") + thread_id) + " AND sms.") + (android.provider.Telephony.Sms.TYPE)) + " != 3) + ") + " (SELECT COUNT(pdu._id) FROM pdu LEFT JOIN threads ") + " ON threads._id = ") + (android.provider.Telephony.Mms.THREAD_ID)) + " WHERE ") + (android.provider.Telephony.Mms.THREAD_ID)) + " = ") + thread_id) + " AND (m_type=132 OR m_type=130 OR m_type=128)") + " AND ") + (android.provider.Telephony.Mms.MESSAGE_BOX)) + " != 3) ") + " WHERE threads._id = ") + thread_id) + ";")); db.execSQL(((((((((((((((((((((" UPDATE threads" + (((((" SET" + " date =") + " (SELECT date FROM") + " (SELECT date * 1000 AS date, thread_id FROM pdu") + " UNION SELECT date, thread_id FROM sms)") + " WHERE thread_id = ")) + thread_id) + " ORDER BY date DESC LIMIT 1),") + " snippet =") + " (SELECT snippet FROM") + " (SELECT date * 1000 AS date, sub AS snippet, thread_id FROM pdu") + " UNION SELECT date, body AS snippet, thread_id FROM sms)") + " WHERE thread_id = ") + thread_id) + " ORDER BY date DESC LIMIT 1),") + " snippet_cs =") + " (SELECT snippet_cs FROM") + " (SELECT date * 1000 AS date, sub_cs AS snippet_cs, thread_id FROM pdu") + " UNION SELECT date, 0 AS snippet_cs, thread_id FROM sms)") + " WHERE thread_id = ") + thread_id) + " ORDER BY date DESC LIMIT 1)") + " WHERE threads._id = ") + thread_id) + ";")); java.lang.String query = ((("SELECT thread_id FROM sms WHERE type=" + (Telephony.TextBasedSmsColumns.MESSAGE_TYPE_FAILED)) + " AND thread_id = ") + thread_id) + " LIMIT 1"; int setError = 0; android.database.Cursor c = db.rawQuery(query, null); if (c != null) { try { setError = c.getCount(); } finally { c.close(); } } java.lang.String errorQuery = "SELECT error FROM threads WHERE _id = " + thread_id; c = db.rawQuery(errorQuery, null); if (c != null) { try { if (c.moveToNext()) { int curError = c.getInt(0); if (curError != setError) { db.execSQL(((("UPDATE threads SET error=" + setError) + " WHERE _id = ") + thread_id)); } } } finally { c.close(); } } } db.setTransactionSuccessful(); } catch (java.lang.Throwable ex) { android.util.Log.e(com.android.providers.telephony.MmsSmsDatabaseHelper.TAG, ex.getMessage(), ex); } finally { db.endTransaction(); } }
public void testMinimalSizeDocked() throws java.lang.Exception { if (!(supportsMultiWindowMode())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(android.server.cts.INFO, "Skipping test: no multi-window support"); return; } testMinimalSize(android.server.cts.DOCKED_STACK_ID); }


public void reloadSdk(com.android.sdklib.ISdkLog log) { java.util.ArrayList<com.android.sdklib.IAndroidTarget> list = new java.util.ArrayList<com.android.sdklib.IAndroidTarget>(); com.android.sdklib.SdkManager.loadPlatforms(mOsSdkPath, list, log); com.android.sdklib.SdkManager.loadAddOns(mOsSdkPath, list, log); java.util.Collections.sort(list); setTargets(list.toArray(new com.android.sdklib.IAndroidTarget[list.size()])); initializeSamplePaths(log); }


public void dispose() { }

public void onBluetoothStateChange(boolean on);
public void startTrackingBssids(android.net.wifi.WifiScanner.BssidInfo[] bssidInfos, int apLostThreshold, android.net.wifi.WifiScanner.BssidListener listener) { com.android.internal.util.Preconditions.checkNotNull(listener, "listener cannot be null"); int key = addListener(listener); if (key == (android.net.wifi.WifiScanner.INVALID_KEY)) return; validateChannel(); android.net.wifi.WifiScanner.HotlistSettings settings = new android.net.wifi.WifiScanner.HotlistSettings(); settings.bssidInfos = bssidInfos; settings.apLostThreshold = apLostThreshold; mAsyncChannel.sendMessage(android.net.wifi.WifiScanner.CMD_SET_HOTLIST, 0, key, settings); }
public int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws android.system.ErrnoException, java.io.InterruptedIOException;
@java.lang.Override public void apply() { for (java.lang.Object candidate : toAnnotate) { if (candidate instanceof com.android.jack.ir.ast.Annotable) { com.android.jack.ir.ast.Annotable annotable = ((com.android.jack.ir.ast.Annotable) (candidate)); if ((annotable.getAnnotation(annotation)) == null) { com.android.jack.ir.ast.JAnnotationLiteral literal = new com.android.jack.ir.ast.JAnnotationLiteral(com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN, annotation.getRetentionPolicy(), annotation); annotable.addAnnotation(literal); literal.updateParents(((com.android.jack.ir.ast.JNode) (annotable))); } } } }

void stopScan() { (this.scansStopped)++; isScanning = false; stopTime = java.lang.System.currentTimeMillis(); long currTime = (stopTime) - (startTime); minScanTime = java.lang.Math.min(currTime, minScanTime); maxScanTime = java.lang.Math.max(currTime, maxScanTime); totalScanTime += currTime; lastScans.add(currTime); if ((lastScans.size()) > (com.android.bluetooth.gatt.ContextMap.ScanStats.NUM_SCAN_DURATIONS_KEPT)) { lastScans.remove(0); } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_STOP); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setInitiator(appName); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); synchronized(mScanEvents) { if ((mScanEvents.size()) == (com.android.bluetooth.gatt.ContextMap.NUM_SCAN_EVENTS_KEPT)) mScanEvents.remove(0); mScanEvents.add(scanEvent); } }
public static boolean updateProjects(org.eclipse.jdt.core.IJavaProject[] androidProjects) { try { int projectCount = androidProjects.length; org.eclipse.jdt.core.IClasspathContainer[] containers = new org.eclipse.jdt.core.IClasspathContainer[projectCount]; for (int i = 0; i < projectCount; i++) { containers[i] = com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.allocateLibraryContainer(androidProjects[i]); } org.eclipse.jdt.core.JavaCore.setClasspathContainer(new org.eclipse.core.runtime.Path(com.android.ide.eclipse.adt.AdtConstants.CONTAINER_LIBRARIES), androidProjects, containers, new org.eclipse.core.runtime.NullProgressMonitor()); return true; } catch (org.eclipse.jdt.core.JavaModelException e) { return false; } }
public void close() { android.util.Log.d(android.net.IpSecTransform.TAG, ("Removing Transform with Id " + (mResourceId))); if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { mCloseGuard.close(); return; } try { android.net.IIpSecService svc = getIpSecService(); svc.deleteTransportModeTransform(mResourceId); stopKeepalive(); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } finally { mResourceId = android.net.IpSecManager.INVALID_RESOURCE_ID; mCloseGuard.close(); } }
public int size() { return configs.length; }

@java.lang.Override public void testFailed(com.android.ide.eclipse.adt.internal.launch.junit.runtime.TestFailure status, com.android.ddmlib.testrunner.TestIdentifier test, java.lang.String trace) { }
public abstract java.util.Collection<com.android.ide.eclipse.adt.internal.resources.manager.ProjectResourceItem> getResources(com.android.resources.ResourceType type, com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources projectResources);
public void deviceConnected(final com.android.ddmlib.IDevice device) { if (device.isOnline()) { com.android.hierarchyviewerlib.device.DeviceBridge.setupDeviceForward(device); if (!(com.android.hierarchyviewerlib.device.DeviceBridge.isViewServerRunning(device))) { if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { executeInBackground(new java.lang.Runnable() { public void run() { try { java.lang.Thread.sleep(2000); } catch (java.lang.InterruptedException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, ("Unable to debug device " + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); return; } if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, ("Unable to debug device " + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); } else { loadViewServerInfoAndWindows(device); } } }); return; } } loadViewServerInfoAndWindows(device); } }
public void testReadWrite_NonBlock_Normal() throws java.lang.Exception { byte[] sourceArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; byte[] targetArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; for (int i = 0; i < (sourceArray.length); i++) { sourceArray[i] = ((byte) (i)); } this.channel1.configureBlocking(false); this.channel2.configureBlocking(false); this.channel1.socket().bind(localAddr2); this.channel1.connect(localAddr1); this.channel2.socket().bind(localAddr1); this.channel2.connect(localAddr2); readWriteReadData(this.channel1, sourceArray, this.channel2, targetArray, org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL, "testReadWrite_NonBlock_Normal"); }

public android.graphics.Bitmap getPhoto(int appWidgetId) { android.database.Cursor c = null; android.graphics.Bitmap bitmap = null; try { android.database.sqlite.SQLiteDatabase db = getReadableDatabase(); java.lang.String selection = java.lang.String.format("%s=%d", com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.FIELD_APPWIDGET_ID, appWidgetId); c = db.query(com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.TABLE_PHOTOS, com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.PHOTOS_PROJECTION, selection, null, null, null, null, null); if ((c != null) && (com.cooliris.media.PhotoAppWidgetProvider.LOGD)) { android.util.Log.d(com.cooliris.media.PhotoAppWidgetProvider.TAG, ("getPhoto query count=" + (c.getCount()))); } if ((c != null) && (c.moveToFirst())) { byte[] data = c.getBlob(com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.INDEX_PHOTO_BLOB); if (data != null) { bitmap = android.graphics.BitmapFactory.decodeByteArray(data, 0, data.length); } } } catch (android.database.sqlite.SQLiteException e) { android.util.Log.e(com.cooliris.media.PhotoAppWidgetProvider.TAG, "Could not load photo from database", e); } finally { if (c != null) { c.close(); } } return bitmap; }
@java.lang.Override public java.lang.String installPackage(java.lang.String packageFilePath, boolean reinstall, java.lang.String... extraArgs) throws com.android.ddmlib.InstallException { try { java.lang.String remoteFilePath = syncPackageToDevice(packageFilePath); java.lang.String result = installRemotePackage(remoteFilePath, reinstall, extraArgs); removeRemotePackage(remoteFilePath); return result; } catch (java.io.IOException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.AdbCommandRejectedException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.TimeoutException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.SyncException e) { throw new com.android.ddmlib.InstallException(e); } }

@java.lang.Override public int bulkInsert(android.net.Uri uri, android.content.ContentValues[] values) { int match = com.android.providers.media.MediaProvider.URI_MATCHER.match(uri); if (match == (com.android.providers.media.MediaProvider.VOLUMES)) { return super.bulkInsert(uri, values); } com.android.providers.media.MediaProvider.DatabaseHelper helper = getDatabaseForUri(uri); if (helper == null) { throw new java.lang.UnsupportedOperationException(("Unknown URI: " + uri)); } android.database.sqlite.SQLiteDatabase db = helper.getWritableDatabase(); if (db == null) { throw new java.lang.IllegalStateException(("Couldn't open database for " + uri)); } if ((match == (com.android.providers.media.MediaProvider.AUDIO_PLAYLISTS_ID)) || (match == (com.android.providers.media.MediaProvider.AUDIO_PLAYLISTS_ID_MEMBERS))) { return playlistBulkInsert(db, uri, values); } else if (match == (com.android.providers.media.MediaProvider.MTP_OBJECT_REFERENCES)) { int handle = java.lang.Integer.parseInt(uri.getPathSegments().get(2)); return setObjectReferences(helper, db, handle, values); } db.beginTransaction(); java.util.ArrayList<java.lang.Long> notifyRowIds = new java.util.ArrayList<java.lang.Long>(); int numInserted = 0; try { int len = values.length; for (int i = 0; i < len; i++) { if ((values[i]) != null) { insertInternal(uri, match, values[i], notifyRowIds); } } numInserted = len; db.setTransactionSuccessful(); } finally { db.endTransaction(); } notifyMtp(notifyRowIds); getContext().getContentResolver().notifyChange(uri, null); return numInserted; }

public java.io.FileDescriptor open(java.lang.String path, int flags, int mode) throws libcore.io.ErrnoException { return os.open(path, flags, mode); }
private void queryNewDeviceForInfo(com.android.ddmlib.Device device) { try { device.executeShellCommand(GetPropReceiver.GETPROP_COMMAND, new com.android.ddmlib.GetPropReceiver(device)); queryNewDeviceForMountingPoint(device, IDevice.MNT_EXTERNAL_STORAGE); queryNewDeviceForMountingPoint(device, IDevice.MNT_DATA); queryNewDeviceForMountingPoint(device, IDevice.MNT_ROOT); if (device.isEmulator()) { com.android.ddmlib.EmulatorConsole console = com.android.ddmlib.EmulatorConsole.getConsole(device); if (console != null) { device.setAvdName(console.getAvdName()); console.close(); } } } catch (com.android.ddmlib.TimeoutException e) { com.android.ddmlib.Log.w("DeviceMonitor", java.lang.String.format("Connection timeout getting info for device %s", device.getSerialNumber())); } catch (com.android.ddmlib.AdbCommandRejectedException e) { com.android.ddmlib.Log.w("DeviceMonitor", java.lang.String.format("Adb rejected command to get device %1$s info: %2$s", device.getSerialNumber(), e.getMessage())); } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { com.android.ddmlib.Log.w("DeviceMonitor", java.lang.String.format("Adb shell command took too long returning info for device %s", device.getSerialNumber())); } catch (java.io.IOException e) { com.android.ddmlib.Log.w("DeviceMonitor", java.lang.String.format("IO Error getting info for device %s", device.getSerialNumber())); } }

public int write(java.nio.ByteBuffer src) throws java.io.IOException { ensureOpen(); if (!(writable)) throw new java.nio.channels.NonWritableChannelException(); synchronized(positionLock) { int n = 0; int ti = -1; java.lang.Object traceContext = sun.misc.IoTrace.fileWriteBegin(path); try { begin(); ti = threads.add(); if (!(isOpen())) return 0; do { n = sun.nio.ch.IOUtil.write(fd, src, (-1), nd); } while ((n == (sun.nio.ch.IOStatus.INTERRUPTED)) && (isOpen()) ); return sun.nio.ch.IOStatus.normalize(n); } finally { threads.remove(ti); end((n > 0)); sun.misc.IoTrace.fileWriteEnd(traceContext, (n > 0 ? n : 0)); assert sun.nio.ch.IOStatus.check(n); } } }

public void updatePreferenceIntents(android.support.v7.preference.PreferenceGroup prefs, final java.lang.String acccountType, android.accounts.Account account) { final android.content.pm.PackageManager pm = mFragment.getActivity().getPackageManager(); for (int i = 0; i < (prefs.getPreferenceCount());) { android.support.v7.preference.Preference pref = prefs.getPreference(i); if (pref instanceof android.support.v7.preference.PreferenceGroup) { updatePreferenceIntents(((android.support.v7.preference.PreferenceGroup) (pref)), acccountType, account); } android.content.Intent intent = pref.getIntent(); if (intent != null) { if (intent.getAction().equals(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS)) { pref.setOnPreferenceClickListener(new com.android.settings.accounts.AccountTypePreferenceLoader.FragmentStarter(com.android.settings.location.LocationSettings.class.getName(), R.string.location_settings_title)); } else { android.content.pm.ResolveInfo ri = pm.resolveActivityAsUser(intent, PackageManager.MATCH_DEFAULT_ONLY, mUserHandle.getIdentifier()); if (ri == null) { prefs.removePreference(pref); continue; } intent.putExtra(com.android.settings.accounts.AccountTypePreferenceLoader.ACCOUNT_KEY, account); intent.setFlags(((intent.getFlags()) | (android.content.Intent.FLAG_ACTIVITY_NEW_TASK))); pref.setOnPreferenceClickListener(new android.support.v7.preference.Preference.OnPreferenceClickListener() { @java.lang.Override public boolean onPreferenceClick(android.support.v7.preference.Preference preference) { android.content.Intent prefIntent = preference.getIntent(); if (isSafeIntent(pm, prefIntent, acccountType)) { mFragment.getActivity().startActivityAsUser(prefIntent, mUserHandle); } else { android.util.Log.e(com.android.settings.accounts.AccountTypePreferenceLoader.TAG, (("Refusing to launch authenticator intent because" + "it exploits Settings permissions: ") + prefIntent)); } return true; } }); } } i++; } }
private long startingTask(@javax.annotation.Nonnull com.android.jack.server.ServerInfo info) throws com.android.jack.server.JackHttpServer.ServerClosedException { long id; synchronized(lock) { if (shuttingDown) { throw new com.android.jack.server.JackHttpServer.ServerClosedException(); } id = info.totalLocal; (info.totalLocal)++; if ((info.currentLocal) == 0) { cancelTimer(); } (info.currentLocal)++; if ((info.currentLocal) > (info.maxLocal)) { info.maxLocal = info.currentLocal; } } return id; }
synchronized int getConnectionState(android.bluetooth.BluetoothDevice device) { if ((mCurrentDevice) == null) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } if (!(mCurrentDevice.equals(device))) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } com.android.internal.util.IState currentState = getCurrentState(); if (currentState == (mConnecting)) { return android.bluetooth.BluetoothProfile.STATE_CONNECTING; } else if (currentState instanceof com.android.bluetooth.hfp.HeadsetStateMachine.ConnectedBase) { return android.bluetooth.BluetoothProfile.STATE_CONNECTED; } else if (currentState == (mDisconnecting)) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTING; } android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ("getConnectionState: bad currentState: " + currentState)); return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; }
public static int doubleConditionEqualZero(double d) { return (d > 42.0) != false ? 13 : 54; }
private void handleConfiguredNetworksChanged() { java.util.List<android.net.wifi.WifiConfiguration> wifiConfigurations = mWifiManager.getConfiguredNetworks(); if (wifiConfigurations == null) { return; } mSavedNetworks.clear(); mSavedSsids.clear(); for (int i = 0; i < (wifiConfigurations.size()); i++) { android.net.wifi.WifiConfiguration wifiConfiguration = wifiConfigurations.get(i); if ((((wifiConfiguration.status) != (WifiConfiguration.Status.ENABLED)) || (wifiConfiguration.ephemeral)) || (wifiConfiguration.useExternalScores)) { continue; } if ((wifiConfiguration.hasNoInternetAccess()) || (wifiConfiguration.noInternetAccessExpected)) { continue; } java.lang.String ssid = android.net.wifi.WifiInfo.removeDoubleQuotes(wifiConfiguration.SSID); if (android.text.TextUtils.isEmpty(ssid)) { continue; } mSavedNetworks.put(ssid, wifiConfiguration); mSavedSsids.add(ssid); } mSavedSsidsInLastScan.retainAll(mSavedSsids); }

public void openCameraDevice(int cameraId) throws com.android.cts.verifier.camera.its.ItsException { com.android.cts.verifier.camera.its.Logt.i(com.android.cts.verifier.camera.its.ItsService.TAG, java.lang.String.format("Opening camera %d", cameraId)); java.lang.String[] devices; try { devices = mCameraManager.getCameraIdList(); if ((devices == null) || ((devices.length) == 0)) { throw new com.android.cts.verifier.camera.its.ItsException("No camera devices"); } } catch (android.hardware.camera2.CameraAccessException e) { throw new com.android.cts.verifier.camera.its.ItsException("Failed to get device ID list", e); } try { mCamera = mBlockingCameraManager.openCamera(devices[cameraId], mCameraListener, mCameraHandler); mCameraCharacteristics = mCameraManager.getCameraCharacteristics(devices[cameraId]); android.util.Size maxYuvSize = com.android.cts.verifier.camera.its.ItsUtils.getYuvOutputSizes(mCameraCharacteristics)[0]; int quota = (((maxYuvSize.getWidth()) * (maxYuvSize.getHeight())) * 2) * 3; mSocketQueueQuota = new java.util.concurrent.Semaphore(quota, true); } catch (android.hardware.camera2.CameraAccessException e) { throw new com.android.cts.verifier.camera.its.ItsException("Failed to open camera", e); } catch (com.android.ex.camera2.blocking.BlockingCameraManager.BlockingOpenException e) { throw new com.android.cts.verifier.camera.its.ItsException("Failed to open camera (after blocking)", e); } mSocketRunnableObj.sendResponse("cameraOpened", ""); }


protected void define(com.android.sdkmanager.CommandLineProcessor.Mode mode, boolean mandatory, java.lang.String verb, java.lang.String directObject, java.lang.String shortName, java.lang.String longName, java.lang.String description, java.lang.Object defaultValue) { assert !(mandatory && (mode == (com.android.sdkmanager.CommandLineProcessor.Mode.BOOLEAN))); if (directObject == null) { directObject = com.android.sdkmanager.CommandLineProcessor.NO_VERB_OBJECT; } java.lang.String key = (((verb + "/") + directObject) + "/") + longName; mArguments.put(key, new com.android.sdkmanager.CommandLineProcessor.Arg(mode, mandatory, verb, directObject, shortName, longName, description, defaultValue)); }

private int getDexFlags(android.content.pm.ApplicationInfo info, java.lang.String compilerFilter, com.android.server.pm.dex.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) != 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = (!(info.isForwardLocked())) && (!isProfileGuidedFilter); int profileFlag = (isProfileGuidedFilter) ? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int dexFlags = ((((isPublic ? com.android.server.pm.Installer.DEXOPT_PUBLIC : 0) | (debuggable ? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | profileFlag) | (options.isBootComplete() ? com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE : 0)) | (options.isDexoptIdleBackgroundJob() ? com.android.server.pm.Installer.DEXOPT_IDLE_BACKGROUND_JOB : 0); return adjustDexoptFlags(dexFlags); }
public void skip(int i) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.skip(i); return; } int res = (mPos) + i; if ((res < 0) || (res > (mLen))) { throw new android.support.v8.renderscript.RSIllegalArgumentException(("out of range argument: " + i)); } mPos = res; }
public void fsync(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;
@java.lang.Override public void enter() { turnOnMasterTetherSettings(); simChange.startListening(); mUpstreamNetworkMonitor.start(); mOffloadController.start(); chooseUpstreamType(true); mTryCell = false; }
public int write(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer) throws java.io.InterruptedIOException, libcore.io.ErrnoException;


@java.lang.Override public android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields, long start, long end) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidComplete().getHistory(template, null, uid, set, tag, fields, start, end, mAccessLevel, mCallingUid); } else if (uid == (android.os.Binder.getCallingUid())) { return getUidTagComplete().getHistory(template, null, uid, set, tag, fields, start, end, mAccessLevel, mCallingUid); } else { throw new java.lang.SecurityException((("Calling package " + (mCallingPackage)) + " cannot access tag information from a different uid")); } }
private void exportGradleWrapper(@com.android.annotations.NonNull java.io.File destDir) throws java.io.IOException { if (((mGradleWrapperLocation) != null) && (mGradleWrapperLocation.exists())) { java.io.File gradlewDest = new java.io.File(destDir, "gradlew"); copyDir(new java.io.File(mGradleWrapperLocation, "gradlew"), gradlewDest, null); boolean madeExecutable = gradlewDest.setExecutable(true); if (!madeExecutable) { reportWarning(((com.android.tools.gradle.eclipse.ImportModule) (null)), gradlewDest, "Could not make gradle wrapper script executable"); } copyDir(new java.io.File(mGradleWrapperLocation, "gradlew.bat"), new java.io.File(destDir, "gradlew.bat"), null); copyDir(new java.io.File(mGradleWrapperLocation, "gradle"), new java.io.File(destDir, "gradle"), null); } }
public static int intConditionNotEqualOne(int i) { return (i > 42) == (Main.$inline$true()) ? 13 : 54; }

public java.lang.String[] getIsimImpu() { com.android.internal.telephony.Phone phone = getPhone(getDefaultSubscription()); mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, "Requires READ_PRIVILEGED_PHONE_STATE"); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimImpu(); } else { return null; } }
void putBigEndian(byte[] a, boolean neg) { this.makeValid(); java.math.NativeBN.BN_bin2bn(a, a.length, neg, this.bignum); }
private static void handleHELO(com.android.ddmlib.Client client, java.nio.ByteBuffer data) { int version; int pid; int vmIdentLen; int appNameLen; java.lang.String vmIdent; java.lang.String appName; version = data.getInt(); pid = data.getInt(); vmIdentLen = data.getInt(); appNameLen = data.getInt(); vmIdent = getString(data, vmIdentLen); appName = getString(data, appNameLen); com.android.ddmlib.Log.d("ddm-hello", (((((((("HELO: v=" + version) + ", pid=") + pid) + ", vm='") + vmIdent) + "', app='") + appName) + "'")); com.android.ddmlib.ClientData cd = client.getClientData(); synchronized(cd) { if ((cd.getPid()) == pid) { cd.setVmIdentifier(vmIdent); cd.setClientDescription(appName); cd.isDdmAware(true); } else { com.android.ddmlib.Log.e("ddm-hello", (((("Received pid (" + pid) + ") does not match client pid (") + (cd.getPid())) + ")")); } } client = checkDebuggerPortForAppName(client, appName); if (client != null) { client.update(Client.CHANGE_NAME); } }

public void deleteSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().deleteSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }

@java.lang.Override public boolean processMessage(android.os.Message message) { if (super.processMessage(message)) return true; maybeLogMessage(this, message.what); switch (message.what) { case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_TETHER_REQUESTED : android.util.Log.e(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, "CMD_TETHER_REQUESTED while in local hotspot mode."); break; case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_TETHER_CONNECTION_CHANGED : break; default : return false; } return true; }

private void startApp(com.android.graphics.benchmark.ApkInfo apk) throws IntentFilter.MalformedMimeTypeException, java.io.IOException { android.os.Looper.prepare(); mHandler = new android.os.Handler(); registerReceiver(); mReport.begin(apk.getName()); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, ("Launching " + (apk.getPackageName()))); android.content.Intent intent = android.support.test.InstrumentationRegistry.getContext().getPackageManager().getLaunchIntentForPackage(apk.getPackageName()); for (com.android.graphics.benchmark.ApkInfo.Argument argument : mApk.getArgs()) { intent.putExtra(argument.getKey(), argument.getValue()); } android.support.test.InstrumentationRegistry.getContext().startActivity(intent); mHandler.postDelayed(() -> mHandler.getLooper().quit(), 10000); android.os.Looper.loop(); mReport.end(); }
public static void assertEquals(java.lang.String message, java.lang.Object expected, java.lang.Object actual) { if (actual == null ? expected != null : !(actual.equals(expected))) { junit.framework.Assert.fail(message, ((("expected " + expected) + " but was ") + actual)); } }
public final void testGetLayoutParamsInfo() throws java.lang.Exception { com.android.ide.eclipse.adt.internal.resources.ViewClassInfo.LayoutParamsInfo info1 = _getLayoutParamsInfo(mock_android.view.ViewGroup.LayoutParams.class); assertNotNull(info1); assertNull(info1.getSuperClass()); com.android.ide.eclipse.adt.internal.resources.ViewClassInfo.LayoutParamsInfo info2 = _getLayoutParamsInfo(mock_android.widget.LinearLayout.LayoutParams.class); assertNotNull(info2); assertSame(info1, info2.getSuperClass()); com.android.ide.eclipse.adt.internal.resources.ViewClassInfo.LayoutParamsInfo info3 = _getLayoutParamsInfo(mock_android.widget.TableLayout.LayoutParams.class); assertNotNull(info3); assertNotSame(info1, info3.getSuperClass()); assertNotSame(info2, info3.getSuperClass()); assertSame(info1, info3.getSuperClass().getSuperClass()); }
public void testRunNormalInput() { mProcessHelper = com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockProcessHelper(CommandStatus.SUCCESS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice()); mTest.setRunUtil(createMockRunUtil("which")); try { mTest.run(mMockInvocationListener); } catch (java.lang.IllegalArgumentException e) { fail(); e.printStackTrace(); } catch (com.android.tradefed.device.DeviceNotAvailableException e) { fail(); e.printStackTrace(); } }
public android.net.wifi.WifiConfiguration getMatchingWifiConfig(android.net.wifi.ScanResult scanResult) { if (scanResult == null) { return null; } Pair<com.android.server.wifi.hotspot2.PasspointProvider, com.android.server.wifi.hotspot2.PasspointMatch> matchedProvider = matchProvider(scanResult); if (matchedProvider == null) { return null; } android.net.wifi.WifiConfiguration config = matchedProvider.first.getWifiConfig(); config.SSID = com.android.server.wifi.util.ScanResultUtil.createQuotedSSID(scanResult.SSID); return config; }

@java.lang.Override public void run() { char[] charBuffer = new char[com.android.tradefed.util.ProcessHelper.ReaderThread.BUF_SIZE]; try { while (true) { int readCount = mReader.read(charBuffer, 0, charBuffer.length); if (readCount < 0) { break; } mBuffer.append(charBuffer, 0, readCount); } } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e("%s: %s", getName(), e.toString()); } }
public java.lang.Runnable registerNativeAllocation(java.lang.Object referent, long nativePtr) { if (referent == null) { throw new java.lang.IllegalArgumentException("referent is null"); } if (nativePtr == 0) { throw new java.lang.IllegalArgumentException("nativePtr is null"); } try { libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); } catch (java.lang.OutOfMemoryError oome) { libcore.util.NativeAllocationRegistry.applyFreeFunction(freeFunction, nativePtr); throw oome; } sun.misc.Cleaner cleaner = sun.misc.Cleaner.create(referent, new libcore.util.NativeAllocationRegistry.CleanerThunk(nativePtr)); return new libcore.util.NativeAllocationRegistry.CleanerRunner(cleaner); }


public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mLteRsrpBoost); out.writeInt(mTdScdmaRscp); out.writeInt((isGsm ? 1 : 0)); out.writeInt((mUseOnlyRsrpForLteLevel ? 1 : 0)); }
public long getFreeSpace() { try { libcore.io.StructStatVfs sb = Libcore.os.statvfs(path); return (sb.f_bfree) * (sb.f_bsize); } catch (libcore.io.ErrnoException errnoException) { return 0; } }


@org.junit.Test public void testAdapterOnAutoConnect() { android.bluetooth.BluetoothAdapter inst = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); android.bluetooth.BluetoothDevice device = inst.getRemoteDevice("00:01:02:03:04:05"); com.android.bluetooth.btservice.AdapterService mockAdapterService = mock(com.android.bluetooth.btservice.AdapterService.class); com.android.bluetooth.btservice.ServiceFactory mockServiceFactory = mock(com.android.bluetooth.btservice.ServiceFactory.class); com.android.bluetooth.hfp.HeadsetService mockHeadsetService = mock(com.android.bluetooth.hfp.HeadsetService.class); com.android.bluetooth.a2dp.A2dpService mockA2dpService = mock(com.android.bluetooth.a2dp.A2dpService.class); when(mockAdapterService.getState()).thenReturn(BluetoothAdapter.STATE_ON); when(mockAdapterService.isQuietModeEnabled()).thenReturn(false); when(mockServiceFactory.getHeadsetService()).thenReturn(mockHeadsetService); when(mockServiceFactory.getA2dpService()).thenReturn(mockA2dpService); android.bluetooth.BluetoothDevice[] bondedDevices = new android.bluetooth.BluetoothDevice[1]; bondedDevices[0] = device; when(mockAdapterService.getBondedDevices()).thenReturn(bondedDevices); when(mockHeadsetService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mockA2dpService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mockAdapterService.getMainLooper()).thenReturn(mHandlerThread.getLooper()); when(mockAdapterService.isMock()).thenReturn(true); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mockAdapterService, mockServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_STATE_CHANGED); intent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_ON); injector.onReceive(null, intent); verify(mockHeadsetService, timeout(com.android.bluetooth.btservice.PhonePolicyTest.ASYNC_CALL_TIMEOUT).times(1)).connect(eq(device)); verify(mockA2dpService, timeout(com.android.bluetooth.btservice.PhonePolicyTest.ASYNC_CALL_TIMEOUT).times(1)).connect(eq(device)); }
public boolean p2pFind() { return doBooleanCommand("P2P_FIND"); }

@java.lang.SuppressWarnings("SuspiciousNameCombination") @com.android.annotations.NonNull public com.android.ide.common.rendering.api.HardwareConfig getConfig() { com.android.sdklib.devices.Screen screen = mDevice.getDefaultHardware().getScreen(); int x = screen.getXDimension(); int y = screen.getYDimension(); int width; int height; if (x > y) { if ((mScreenOrientation) == (com.android.resources.ScreenOrientation.LANDSCAPE)) { width = x; height = y; } else { width = y; height = x; } } else { if ((mScreenOrientation) == (com.android.resources.ScreenOrientation.LANDSCAPE)) { width = y; height = x; } else { width = x; height = y; } } if ((mOverrideRenderHeight) != (-1)) { width = mOverrideRenderWidth; } if ((mOverrideRenderHeight) != (-1)) { height = mOverrideRenderHeight; } if ((mMaxRenderWidth) != (-1)) { width = mMaxRenderWidth; } if ((mMaxRenderHeight) != (-1)) { height = mMaxRenderHeight; } return new com.android.ide.common.rendering.api.HardwareConfig(width, height, screen.getPixelDensity(), ((float) (screen.getXdpi())), ((float) (screen.getYdpi())), screen.getSize(), mScreenOrientation, ((mDevice.getDefaultHardware().getButtonType()) == (com.android.sdklib.devices.ButtonType.SOFT))); }
private void initLocalAddressAndPort() { java.net.SocketAddress sa; try { sa = Libcore.os.getsockname(fd); } catch (libcore.io.ErrnoException errnoException) { throw new java.lang.AssertionError(errnoException); } java.net.InetSocketAddress isa = ((java.net.InetSocketAddress) (sa)); localAddress = isa.getAddress(); localPort = isa.getPort(); if ((socket) != null) { socket.socketImpl().initLocalPort(localPort); } }
public void testKeyPairGenerator_GenerateKeyPair_Unencrypted_Success() throws java.lang.Exception { mGenerator.initialize(new android.security.KeyPairGeneratorSpec.Builder(getContext()).setAlias(android.security.AndroidKeyPairGeneratorTest.TEST_ALIAS_1).setSubject(android.security.AndroidKeyPairGeneratorTest.TEST_DN_1).setSerialNumber(android.security.AndroidKeyPairGeneratorTest.TEST_SERIAL_1).setStartDate(android.security.AndroidKeyPairGeneratorTest.NOW).setEndDate(android.security.AndroidKeyPairGeneratorTest.NOW_PLUS_10_YEARS).build()); final java.security.KeyPair pair = mGenerator.generateKeyPair(); assertNotNull("The KeyPair returned should not be null", pair); assertKeyPairCorrect(pair, android.security.AndroidKeyPairGeneratorTest.TEST_ALIAS_1, android.security.AndroidKeyPairGeneratorTest.TEST_DN_1, android.security.AndroidKeyPairGeneratorTest.TEST_SERIAL_1, android.security.AndroidKeyPairGeneratorTest.NOW, android.security.AndroidKeyPairGeneratorTest.NOW_PLUS_10_YEARS); }

private void createToggle(org.eclipse.swt.widgets.Composite parent) { final org.eclipse.swt.widgets.Button b = new org.eclipse.swt.widgets.Button(parent, ((org.eclipse.swt.SWT.TOGGLE) | (org.eclipse.swt.SWT.FLAT))); if ((mUiTooltip) != null) { b.setToolTipText(mUiTooltip); } if ((mImage) != null) { b.setImage(mImage); } if ((mUiLabel) != null) { b.setText(mUiLabel); } b.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { @java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { onSelected(b.getSelection()); } }); }

@java.lang.Override public final int getSize() { return (mLength) * (mType.getSize()); }
public void test_applyPattern() { java.text.DecimalFormat format = new java.text.DecimalFormat("#.#"); assertEquals("Wrong pattern 1", "#0.#", format.toPattern()); format = new java.text.DecimalFormat("#."); assertEquals("Wrong pattern 2", "#0.", format.toPattern()); format = new java.text.DecimalFormat("#"); assertEquals("Wrong pattern 3", "#", format.toPattern()); format = new java.text.DecimalFormat(".#"); assertEquals("Wrong pattern 4", "#.0", format.toPattern()); format = new java.text.DecimalFormat(); format.setMinimumIntegerDigits(0); format.setMinimumFractionDigits(0); format.setMaximumFractionDigits(0); format.applyPattern("00.0#"); assertEquals("Minimum integer digits not set", 2, format.getMinimumIntegerDigits()); assertEquals("Minimum fraction digits not set", 1, format.getMinimumFractionDigits()); assertEquals("Maximum fraction digits not set", 2, format.getMaximumFractionDigits()); try { format.applyPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { format.applyPattern("%#,##,###,####'"); fail(); } catch (java.lang.IllegalArgumentException expected) { } try { format.applyPattern("#.##0.00"); fail(); } catch (java.lang.IllegalArgumentException expected) { } }




private static void doFollowReferencesTestImpl(Main.A root, int stopAfter, int followSet, java.lang.Object asRoot, Main.Verifier v, java.lang.String additionalEnabled) { java.lang.String[] lines = Main.followReferences(0, null, root, stopAfter, followSet, asRoot); v.process(lines, additionalEnabled); }
@javax.annotation.Nonnull private com.android.sched.util.config.cli.TokenIterator.Entry getNext() throws com.android.sched.util.file.CannotReadException, com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotFileException, com.android.sched.util.file.WrongPermissionException, java.util.NoSuchElementException { while (true) { java.io.StreamTokenizer tokenizer = tokenizers.peek(); while (tokenizer != null) { try { if ((tokenizer.nextToken()) != (java.io.StreamTokenizer.TT_EOF)) { if (((allowFileRefInFile) && (!(tokenizer.sval.isEmpty()))) && ((tokenizer.sval.charAt(0)) == (filePrefix))) { pushFileTokenizer(tokenizer.sval.substring(1)); tokenizer = tokenizers.peek(); continue; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(tokenizer.sval, new com.android.sched.util.location.LineLocation(locations.peek(), tokenizer.lineno())); } } } catch (java.io.IOException e) { tokenizers.clear(); tokenizers.push(null); index = args.length; throw new com.android.sched.util.file.CannotReadException(locations.peek()); } tokenizers.pop(); tokenizer = tokenizers.peek(); locations.pop(); } if ((index) >= (args.length)) { throw new java.util.NoSuchElementException(); } if (((allowFileRefInArray) && (!(args[index].isEmpty()))) && ((args[index].charAt(0)) == (filePrefix))) { pushFileTokenizer(args[index].substring(1)); (index)++; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(args[((index)++)], locations.peek()); } } }
static void setFloat(java.lang.invoke.MethodHandle m, Main.ValueHolder v, float value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
public java.lang.String getHexString() { java.lang.String out = "0x"; byte[] ssidbytes = getOctets(); for (int i = 0; i < (octets.size()); i++) { out += java.lang.String.format(java.util.Locale.US, "%02x", ssidbytes[i]); } return out; }

static void inlinedForNull(java.lang.Iterable<?> it) { if (it != null) { it.iterator(); } }
public static boolean isDeveloperOptionsEnabled(android.app.Instrumentation instrumentation) throws android.support.test.uiautomator.UiObjectNotFoundException { return com.android.devtools.systemimage.uitest.utils.SettingsUtil.scrollToItem(instrumentation, "Developer options"); }
@android.test.suitebuilder.annotation.MediumTest public void testUserBluetoothSwitchOff() { com.android.server.telecom.CallAudioRouteStateMachine stateMachine = new com.android.server.telecom.CallAudioRouteStateMachine(mContext, mockCallsManager, mockBluetoothManager, mockWiredHeadsetManager, mockStatusBarNotifier, mAudioServiceFactory, true); when(mockBluetoothManager.isBluetoothAudioConnectedOrPending()).thenReturn(false); when(mockBluetoothManager.isBluetoothAvailable()).thenReturn(true); when(mockAudioManager.isSpeakerphoneOn()).thenReturn(true); android.telecom.CallAudioState initState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, ((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); stateMachine.initialize(initState); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.SWITCH_FOCUS, CallAudioRouteStateMachine.ACTIVE_FOCUS); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.USER_SWITCH_BASELINE_ROUTE); android.telecom.CallAudioState expectedEndState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_EARPIECE, ((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); waitForStateMachineActionCompletion(stateMachine, CallAudioRouteStateMachine.RUN_RUNNABLE); verifyNewSystemCallAudioState(initState, expectedEndState); resetMocks(); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.CONNECT_BLUETOOTH); waitForStateMachineActionCompletion(stateMachine, CallAudioRouteStateMachine.RUN_RUNNABLE); assertEquals(expectedEndState, stateMachine.getCurrentCallAudioState()); }


public static final android.os.Process.ProcessStartResult start(final java.lang.String processClass, final java.lang.String niceName, int uid, int gid, int[] gids, int debugFlags, int mountExternal, int targetSdkVersion, java.lang.String seInfo, java.lang.String abi, java.lang.String instructionSet, java.lang.String appDataDir, java.lang.String invokeWith, java.lang.String[] zygoteArgs) { return android.os.Process.zygoteProcess.start(processClass, niceName, uid, gid, gids, debugFlags, mountExternal, targetSdkVersion, seInfo, abi, instructionSet, appDataDir, invokeWith, zygoteArgs); }
@java.lang.Override public final java.lang.String toString() { com.android.jack.util.DefaultTextOutput out = new com.android.jack.util.DefaultTextOutput(true); com.android.jack.ir.impl.ToStringGenerationVisitor v = new com.android.jack.ir.impl.ToStringGenerationVisitor(out); v.accept(this); return out.toString(); }
private static void assertCdmaDeviceId(java.lang.String deviceId) { if ((deviceId.length()) == 14) { android.telephony.cts.TelephonyManagerTest.assertMeidFormat(deviceId); } else if ((deviceId.length()) == 8) { android.telephony.cts.TelephonyManagerTest.assertHexadecimalEsnFormat(deviceId); } else { fail("device id on CDMA must be 14-digit hex MEID or 8-digit hex ESN."); } }

public boolean updateAdnRecordsInEfByIndex(int efid, java.lang.String newTag, java.lang.String newPhoneNumber, int index, java.lang.String pin2) { if ((phone.getContext().checkCallingOrSelfPermission(android.Manifest.permission.WRITE_CONTACTS)) != (android.content.pm.PackageManager.PERMISSION_GRANTED)) { throw new java.lang.SecurityException("Requires android.permission.WRITE_CONTACTS permission"); } if (com.android.internal.telephony.IccPhoneBookInterfaceManager.DBG) logd(((((((((((("updateAdnRecordsInEfByIndex: efid=" + efid) + " Index=") + index) + " ==> ") + "(") + newTag) + ",") + newPhoneNumber) + ")") + " pin2=") + pin2)); synchronized(mLock) { checkThread(); success = false; android.os.Message response = mBaseHandler.obtainMessage(com.android.internal.telephony.IccPhoneBookInterfaceManager.EVENT_UPDATE_DONE); com.android.internal.telephony.AdnRecord newAdn = new com.android.internal.telephony.AdnRecord(newTag, newPhoneNumber); adnCache.updateAdnByIndex(efid, newAdn, index, pin2, response); try { mLock.wait(); } catch (java.lang.InterruptedException e) { logd("interrupted while trying to update by index"); } } return success; }
protected boolean getLockedRecordsLoaded() { return ((mRecordsToLoad) == 0) && (mLockedRecordsRequested); }
@java.lang.Override public void fchmod(java.io.FileDescriptor fd, int mode) throws libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.fchmod(fd, mode); }





@org.junit.Test public void retroLambdaDefaultMethodsTest024() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_024); }

public int fcntlVoid(java.io.FileDescriptor fd, int cmd) throws android.system.ErrnoException { return os.fcntlVoid(fd, cmd); }
private static void doTestPrimitiveFieldsIntegral() { Main.IntObject intObject = new Main.IntObject(); Main.setTag(intObject, 10000); java.lang.System.out.println(Main.iterateThroughHeapPrimitiveFields(10000)); java.lang.System.out.println(Main.getTag(intObject)); }
public int dexopt(java.lang.String apkPath, int uid, boolean isPublic, java.lang.String pkgName, java.lang.String instructionSet, boolean vmSafeMode, boolean debuggable) { if (!(com.android.server.pm.Installer.isValidInstructionSet(instructionSet))) { android.util.Slog.e(com.android.server.pm.Installer.TAG, ("Invalid instruction set: " + instructionSet)); return -1; } return mInstaller.dexopt(apkPath, uid, isPublic, pkgName, instructionSet, vmSafeMode, debuggable); }

public boolean configureRoaming(com.android.server.wifi.WifiNative.RoamingConfig config) { synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return boolResult(false); try { android.hardware.wifi.V1_0.StaRoamingConfig roamingConfig = new android.hardware.wifi.V1_0.StaRoamingConfig(); if ((config.blacklistBssids) != null) { for (java.lang.String bssid : config.blacklistBssids) { byte[] mac = com.android.server.wifi.util.NativeUtil.macAddressToByteArray(bssid); roamingConfig.bssidBlacklist.add(mac); } } if ((config.whitelistSsids) != null) { for (java.lang.String ssidStr : config.whitelistSsids) { java.lang.String unquotedSsidStr = android.net.wifi.WifiInfo.removeDoubleQuotes(ssidStr); int len = unquotedSsidStr.length(); if (len > 32) { mLog.err("configureRoaming: skip invalid SSID %").r(unquotedSsidStr).flush(); continue; } byte[] ssid = new byte[len]; for (int i = 0; i < len; i++) { ssid[i] = ((byte) (unquotedSsidStr.charAt(i))); } roamingConfig.ssidWhitelist.add(ssid); } } android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.configureRoaming(roamingConfig); if (!(ok(status))) return false; } catch (android.os.RemoteException e) { handleRemoteException(e); return false; } return true; } }
public void getAllProfiles(java.lang.String cardId, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo[]> callback) { try { getIEuiccCardController().getAllProfiles(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetAllProfilesCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo[] profiles) { callback.onComplete(resultCode, profiles); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getAllProfiles", e); throw e.rethrowFromSystemServer(); } }
private void notifyHostEmuDeactivated() { mListener.onHostCardEmulationDeactivated(); }

public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }

public native int poll(android.system.StructPollfd[] fds, int timeoutMs) throws android.system.ErrnoException;
public java.util.List<java.lang.String> getCarrierPackageNamesForIntent(android.content.pm.PackageManager packageManager, android.content.Intent intent) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? null : carrierPrivilegeRules.getCarrierPackageNamesForIntent(packageManager, intent); }
public void testConstructor_NullStartDate_Failure() throws java.lang.Exception { try { new android.security.KeyPairGeneratorSpec(getContext(), android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1, "RSA", 1024, null, android.security.KeyPairGeneratorSpecTest.TEST_DN_1, android.security.KeyPairGeneratorSpecTest.SERIAL_1, null, android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS, 0); fail("Should throw IllegalArgumentException when startDate is null"); } catch (java.lang.IllegalArgumentException success) { } }

private Camera.Size getOptimalPreviewSize(java.util.List<android.hardware.Camera.Size> sizes, int w, int h) { final double ASPECT_TOLERANCE = 0.1; double targetRatio = ((double) (640)) / ((double) (480)); if (sizes == null) return null; android.hardware.Camera.Size optimalSize = null; int minDiff = java.lang.Integer.MAX_VALUE; int curDiff; int targetHeight = h; int targetWidth = w; boolean aspectRatio = true; while (true) { for (android.hardware.Camera.Size size : sizes) { if (aspectRatio) { double ratio = ((double) (size.width)) / (size.height); if ((java.lang.Math.abs((ratio - targetRatio))) > ASPECT_TOLERANCE) { continue; } } curDiff = (java.lang.Math.abs(((size.height) - targetHeight))) + (java.lang.Math.abs(((size.width) - targetWidth))); if (((curDiff < minDiff) && ((size.height) <= targetHeight)) && ((size.width) <= targetWidth)) { optimalSize = size; minDiff = curDiff; } } if (optimalSize == null) { aspectRatio = false; continue; } else { break; } } return optimalSize; }

public void handleMessage(android.os.Message msg) { if ((msg.what) == 0) { mConsuming = false; setEnabled(true); } }
public void registerListener(android.os.storage.StorageEventListener listener) { if (listener == null) { return; } synchronized(mListeners) { mListeners.add(new android.os.storage.StorageManager.ListenerDelegate(listener)); } }
private synchronized void onConnectStateChanged(byte[] address, int state) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ((("onConnectStateChanged(): address=" + (java.util.Arrays.toString(address))) + " state=") + state)); } android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.hid.HidDeviceService.MESSAGE_CONNECT_STATE_CHANGED); msg.obj = address; msg.arg1 = state; mHandler.sendMessage(msg); }
public void setFromFieldPacker(int xoff, int yoff, int component_number, android.renderscript.FieldPacker fp) { setFromFieldPacker(xoff, yoff, 0, component_number, fp); }
@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.OutputVFile createOutputVFile(@javax.annotation.Nonnull com.android.sched.vfs.VPath path) throws com.android.sched.util.file.CannotCreateFileException { java.io.File file = new java.io.File(dir, path.getPathAsString(ZipUtils.ZIP_SEPARATOR)); if ((!(file.getParentFile().mkdirs())) && (!(file.getParentFile().isDirectory()))) { throw new com.android.sched.util.file.CannotCreateFileException(new com.android.sched.util.location.DirectoryLocation(file.getParentFile())); } assert !(path.equals(VPath.ROOT)); java.lang.String newEntryName = path.getPathAsString(ZipUtils.ZIP_SEPARATOR); java.lang.String parentEntryName = zipEntry.getName(); if (!(parentEntryName.isEmpty())) { newEntryName = parentEntryName + newEntryName; } return new com.android.sched.vfs.InputOutputZipVFile(vfs, file, new java.util.zip.ZipEntry(newEntryName)); }
@org.junit.Test @java.lang.Runtime public void test103() throws java.lang.Exception { java.lang.String test = "com.android.jack.optimizations.valuepropagation.test103"; java.lang.String aType = "Lcom/android/jack/optimizations/valuepropagation/test103/jack/A;"; java.lang.String bType = "Lcom/android/jack/optimizations/valuepropagation/test103/jack/B;"; java.lang.String cType = "Lcom/android/jack/optimizations/valuepropagation/test103/jack/C;"; java.lang.String dType = "Lcom/android/jack/optimizations/valuepropagation/test103/jack/D;"; java.lang.String foo = (("foo(" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + ")") + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR); compileAndValidate(test, defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "A.foo.dalvik"))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "B.foo.dalvik"))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "C.foo.dalvik"))).insert(dType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "D.foo.dalvik")))); }

@java.lang.Override protected void engineUpdate(byte[] input, int offset, int len) { org.conscrypt.NativeCrypto.EVP_DigestUpdate(getCtx(), input, offset, len); }
public void test_Constructor() { java.util.Timer t = null; try { t = new java.util.Timer(); tests.api.java.util.TimerTest.TimerTestTask testTask = new tests.api.java.util.TimerTest.TimerTestTask(); t.schedule(testTask, 200); awaitRun(testTask); t.cancel(); } finally { if (t != null) t.cancel(); } }
public android.os.PersistableBundle getCarrierConfig() { android.telephony.CarrierConfigManager carrierConfigManager = mContext.getSystemService(android.telephony.CarrierConfigManager.class); return carrierConfigManager.getConfigForSubId(mSubId); }
@org.junit.Test public void xor_long() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(XOR_LONG).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }
@java.lang.Override public void onSettingsChanged(com.android.sdkuilib.internal.repository.SettingsController controller, com.android.sdkuilib.internal.repository.SettingsController.Settings oldSettings) { if ((mDownloadCache) != null) { if ((controller.getSettings().getUseDownloadCache()) && ((mDownloadCache.getStrategy()) != (DownloadCache.Strategy.FRESH_CACHE))) { mDownloadCache = null; } else if ((!(controller.getSettings().getUseDownloadCache())) && ((mDownloadCache.getStrategy()) != (DownloadCache.Strategy.DIRECT))) { mDownloadCache = null; } } if ((oldSettings.getForceHttp()) != (controller.getSettings().getForceHttp())) { refreshSources(false); } }
@java.lang.SuppressWarnings("MethodNamesDifferingOnlyByCase") public static void main(java.lang.String[] args) { if (((args.length) == 1) && ("%f".equals(args[0]))) { args = com.intellij.idea.Main.NO_ARGS; } com.intellij.idea.Main.setFlags(args); if (com.intellij.idea.Main.isHeadless()) { java.lang.System.setProperty(com.intellij.idea.Main.AWT_HEADLESS, java.lang.Boolean.TRUE.toString()); } else if (java.awt.GraphicsEnvironment.isHeadless()) { com.intellij.idea.Main.showMessage("Startup Error", "Unable to detect graphics environment", true); java.lang.System.exit(com.intellij.idea.Main.NO_GRAPHICS); } else if ((args.length) == 0) { try { com.intellij.idea.Main.installPatch(); } catch (java.lang.Throwable t) { com.intellij.idea.Main.showMessage("Update Failed", t); java.lang.System.exit(com.intellij.idea.Main.UPDATE_FAILED); } } try { com.intellij.ide.Bootstrap.main(args, ((com.intellij.idea.Main.class.getName()) + "Impl"), "start"); } catch (java.lang.Throwable t) { com.intellij.idea.Main.showMessage("Start Failed", t); java.lang.System.exit(com.intellij.idea.Main.STARTUP_EXCEPTION); } }



public static int forkAndSpecialize(int uid, int gid, int[] gids, int debugFlags, int[][] rlimits) { dalvik.system.Zygote.preFork(); int pid = dalvik.system.Zygote.nativeForkAndSpecialize(uid, gid, gids, debugFlags, rlimits); dalvik.system.Zygote.postFork(); return pid; }
public void test_hashCode() { java.text.DecimalFormat df1 = new java.text.DecimalFormat(); java.text.DecimalFormat df2 = ((java.text.DecimalFormat) (df1.clone())); assertTrue("Hash codes of equals object are not equal", ((df2.hashCode()) == (df1.hashCode()))); }
public void test_ConstructorZ() { java.util.Timer t = null; try { t = new java.util.Timer(true); tests.api.java.util.TimerTest.TimerTestTask testTask = new tests.api.java.util.TimerTest.TimerTestTask(); t.schedule(testTask, 200); awaitRun(testTask); t.cancel(); } finally { if (t != null) t.cancel(); } }
@org.junit.Test public void compileWithAnnotationProcessorReuseClassOut() throws java.lang.Exception { java.io.File classesOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getAutoProcessors(); { com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); jack.setAnnotationProcessorPath(processors.getPath()); jack.addResource(classesOut); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); } { com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); jack.setAnnotationProcessorPath(processors.getPath()); jack.addResource(classesOut); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); } com.android.jack.library.InputJackLibrary libOut = com.android.jack.library.JackLibraryFactory.getInputLibrary(new com.android.sched.vfs.DirectFS(new com.android.sched.util.file.Directory(jackOut.getPath(), null, com.android.sched.util.file.FileOrDirectory.Existence.MUST_EXIST, com.android.sched.util.file.FileOrDirectory.Permission.READ, com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE), com.android.sched.util.file.FileOrDirectory.Permission.READ)); libOut.getFile(FileType.RSC, new com.android.sched.vfs.VPath("rscGeneratedFile0", '/')); libOut.getFile(FileType.RSC, new com.android.sched.vfs.VPath("rscGeneratedFile1", '/')); libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath("Annotated2Duplicated", '/')); }
public void setVar(int index, int v) { mRS.nScriptSetVarI(getID(mRS), index, v); }
@org.junit.Test public void testCompile021() throws java.lang.Exception { java.lang.String packageName = "com.android.jack.switchstatement.test021.jack"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); { input.put("Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo("java-lang-Thread$State", true)); } checkCompiledCode(packageName, input); }
public int syncGetSupportedFeatures(com.android.internal.util.AsyncChannel channel) { android.os.Message resultMsg = channel.sendMessageSynchronously(com.android.server.wifi.WifiStateMachine.CMD_GET_SUPPORTED_FEATURES); int supportedFeatureSet = resultMsg.arg1; resultMsg.recycle(); return supportedFeatureSet; }

private void dumpJava(java.io.FileDescriptor fd) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog log = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); log.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dumpProto(log); } try { java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd); java.lang.String protoOutString = android.util.Base64.encodeToString(log.toByteArray(), Base64.DEFAULT); protoOut.write(protoOutString.getBytes(java.nio.charset.StandardCharsets.UTF_8)); protoOut.close(); } catch (java.io.IOException e) { errorLog("Unable to write Java protobuf to file descriptor."); } }
public void test_getNetworkInterface() throws java.io.IOException { java.net.MulticastSocket mss = new java.net.MulticastSocket(0); java.net.NetworkInterface theInterface = mss.getNetworkInterface(); assertTrue(("network interface returned wrong network interface when not set:" + theInterface), theInterface.getInetAddresses().hasMoreElements()); java.net.InetAddress firstAddress = ((java.net.InetAddress) (theInterface.getInetAddresses().nextElement())); assertTrue(firstAddress.isAnyLocalAddress()); mss.setNetworkInterface(networkInterface1); assertEquals("getNetworkInterface did not return interface set by setNeworkInterface", networkInterface1, mss.getNetworkInterface()); mss.setNetworkInterface(loopbackInterface); assertEquals("getNetworkInterface did not return network interface set by second setNetworkInterface call", loopbackInterface, mss.getNetworkInterface()); mss.close(); mss = new java.net.MulticastSocket(0); if ((IPV6networkInterface1) != null) { mss.setNetworkInterface(IPV6networkInterface1); assertEquals("getNetworkInterface did not return interface set by setNeworkInterface", IPV6networkInterface1, mss.getNetworkInterface()); } mss = new java.net.MulticastSocket(0); java.util.Enumeration addresses = networkInterface1.getInetAddresses(); if (addresses.hasMoreElements()) { firstAddress = ((java.net.InetAddress) (addresses.nextElement())); mss.setInterface(firstAddress); assertEquals("getNetworkInterface did not return interface set by setInterface", networkInterface1, mss.getNetworkInterface()); } mss.close(); }
@java.lang.Override public void removeImsFeature(int slotId, int feature) throws android.os.RemoteException { synchronized(mFeatures) { onRemoveImsFeatureInternal(slotId, feature); } }
@javax.annotation.Nonnull private static java.lang.String convertNameToPattern(@javax.annotation.Nonnull java.lang.String name) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (int i = 0; i < (name.length()); i++) { char c = name.charAt(i); switch (c) { case '?' : sb.append("[^/]"); break; case '*' : int j = i + 1; if ((j < (name.length())) && ((name.charAt(j)) == '*')) { sb.append(".*"); i++; } else { sb.append("[^/]*"); } break; case '$' : sb.append("\\$"); break; default : sb.append(c); break; } } return sb.toString(); }



@java.lang.Override void onStop() { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, "onStop"); }
public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_kernel3d s = new com.android.rs.test.ScriptC_kernel3d(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_init_vars(A); s.forEach_root(A, B); s.invoke_verify_root(); s.invoke_kernel_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }
public static boolean containsAttribute(java.util.ArrayList<com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor> attributes, java.lang.String nsUri, com.android.ide.eclipse.adt.internal.resources.AttributeInfo info) { java.lang.String xmlLocalName = info.getName(); for (com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor desc : attributes) { if (desc.getXmlLocalName().equals(xmlLocalName)) { if ((nsUri == (desc.getNamespaceUri())) || ((nsUri != null) && (nsUri.equals(desc.getNamespaceUri())))) { return true; } } } return false; }

@java.lang.Override protected void printFilteredProblem(@javax.annotation.Nonnull com.android.jack.reporting.Reportable.ProblemLevel problemLevel, @javax.annotation.Nonnull java.lang.String message, @javax.annotation.CheckForNull java.lang.String fileName, int startLine, int endLine, int startColumn, int endColumn) { java.lang.StringBuffer messageBuffer = new java.lang.StringBuffer(problemLevel.toString()); messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (fileName != null) { messageBuffer.append(fileName); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (startLine >= 0) { messageBuffer.append(startLine); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (endLine >= 0) { messageBuffer.append(endLine); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (startColumn >= 0) { messageBuffer.append(startColumn); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (endColumn >= 0) { messageBuffer.append(endColumn); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); messageBuffer.append(message); reporterStream.println(messageBuffer.toString()); }

@java.lang.Override public void setUp() throws android.os.RemoteException, android.support.test.uiautomator.UiObjectNotFoundException { getInstrumentation().getUiAutomation().getRootInActiveWindow(); mContext = getInstrumentation().getContext(); mDevice = android.support.test.uiautomator.UiDevice.getInstance(getInstrumentation()); if (!(mDevice.isScreenOn())) { mDevice.wakeUp(); mDevice.wait(android.support.test.uiautomator.Until.hasObject(android.support.test.uiautomator.By.res("android", "glow_pad_view")), 10000); mDevice.swipe(560, 1500, 560, 1000, 40); } mDevice.pressHome(); }

@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if ((com.android.cts.verifier.usb.UsbAccessoryTestActivity.ACTION_USB_PERMISSION.equals(intent.getAction())) || (UsbManager.ACTION_USB_ACCESSORY_ATTACHED.equals(intent.getAction()))) { android.hardware.usb.UsbAccessory accessory = intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY); if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) { openAccessory(accessory); } else { android.util.Log.i(com.android.cts.verifier.usb.UsbAccessoryTestActivity.TAG, "Permission denied..."); } mPermissionRequestPending = false; } }

@org.junit.Before public void setup() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); com.android.server.wifi.aware.WifiAwareHalTest.resetWifiAwareNative(); com.android.server.wifi.HalMockUtils.initHalMockLibrary(); com.android.server.wifi.aware.WifiAwareHalMock.initAwareHalMockLibrary(mDut); com.android.server.wifi.aware.WifiAwareNative.initAwareHandlersNative(com.android.server.wifi.WifiNative.class, WifiNative.sWlan0Index); com.android.server.wifi.HalMockUtils.setHalMockObject(mAwareHalMock); com.android.server.wifi.aware.WifiAwareHalTest.installMockAwareStateManager(mAwareStateManager); }
public static java.lang.String[] checkEnabledProtocols(java.lang.String[] protocols) { if (protocols == null) { throw new java.lang.IllegalArgumentException("protocols == null"); } for (int i = 0; i < (protocols.length); i++) { java.lang.String protocol = protocols[i]; if (protocol == null) { throw new java.lang.IllegalArgumentException((("protocols[" + i) + "] == null")); } if (((!(protocol.equals(org.conscrypt.NativeCrypto.SUPPORTED_PROTOCOL_TLSV1))) && (!(protocol.equals(org.conscrypt.NativeCrypto.SUPPORTED_PROTOCOL_TLSV1_1)))) && (!(protocol.equals(org.conscrypt.NativeCrypto.SUPPORTED_PROTOCOL_TLSV1_2)))) { throw new java.lang.IllegalArgumentException((("protocol " + protocol) + " is not supported")); } } return protocols; }
@java.lang.Override public void handle(com.sun.net.httpserver.HttpExchange exchange) throws java.io.IOException { java.lang.ClassLoader loader = com.android.ahat.StaticHandler.class.getClassLoader(); java.io.InputStream is = loader.getResourceAsStream(mResourceName); if (is == null) { exchange.getResponseHeaders().add("Content-Type", "text/html"); exchange.sendResponseHeaders(404, 0); java.io.PrintStream ps = new java.io.PrintStream(exchange.getResponseBody()); com.android.ahat.HtmlDoc doc = new com.android.ahat.HtmlDoc(ps, com.android.ahat.DocString.text("ahat"), com.android.ahat.DocString.uri("style.css")); doc.big(com.android.ahat.DocString.text("Resource not found.")); doc.close(); } else { exchange.getResponseHeaders().add("Content-Type", mContentType); exchange.sendResponseHeaders(200, 0); java.io.OutputStream os = exchange.getResponseBody(); com.google.common.io.ByteStreams.copy(is, os); os.close(); } }
@java.lang.Override public void libToLib(@javax.annotation.Nonnull java.io.File[] in, @javax.annotation.Nonnull java.io.File out, boolean zipFiles) throws java.lang.Exception { java.util.List<java.lang.String> commandLine = new java.util.ArrayList<java.lang.String>(); libToCommon(commandLine, getClasspathAsString(), in); if (zipFiles) { commandLine.add("--output-jack"); } else { commandLine.add("--output-jack-dir"); } commandLine.add(out.getAbsolutePath()); com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile(commandLine.toArray(new java.lang.String[commandLine.size()])); exec.inheritEnvironment(); exec.setErr(errRedirectStream); exec.setOut(outRedirectStream); exec.setVerbose(isVerbose); if ((exec.run()) != 0) { throw new java.lang.RuntimeException("Jack compiler exited with an error"); } }

private void createTypes(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage enclosingPackage, @javax.annotation.Nonnull com.android.jack.ir.impl.ReferenceMapper refMap, @javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration) { com.android.jack.ir.impl.EcjSourceTypeLoader.createType(refMap, enclosingPackage, typeDeclaration.binding, typeDeclaration, new com.android.sched.util.location.FileLocation(new java.io.File(new java.lang.String(typeDeclaration.compilationResult.fileName)))); if ((typeDeclaration.memberTypes) != null) { for (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration memberType : typeDeclaration.memberTypes) { createTypes(enclosingPackage, refMap, memberType); } } }
@java.lang.Override public void dispose() { synchronized(com.android.internal.telephony.PhoneProxy.lockForRadioTechnologyChange) { super.dispose(); log("dispose"); unregisterForRuimRecordEvents(); mCM.unregisterForAvailable(this); mCM.unregisterForOffOrNotAvailable(this); mCM.unregisterForOn(this); mSST.unregisterForNetworkAttached(this); mCM.unSetOnSuppServiceNotification(this); removeCallbacks(mExitEcmRunnable); mPendingMmis.clear(); mCT.dispose(); mDataConnectionTracker.dispose(); mSST.dispose(); mCdmaSSM.dispose(this); mSMS.dispose(); mRuimPhoneBookInterfaceManager.dispose(); mRuimSmsInterfaceManager.dispose(); mSubInfo.dispose(); mEriManager.dispose(); } }




public void testIsCameraEnabledInPrimaryProfile() throws java.lang.Exception { assertFalse(mDevicePolicyManager.getCameraDisabled(mPrimaryAdminComponent)); assertFalse(mDevicePolicyManager.getCameraDisabled(null)); checkCanOpenCamera(true); }


public void testMigrated() { org.gradle.tooling.GradleConnector connector = org.gradle.tooling.GradleConnector.newConnector(); java.io.File projectDir = new java.io.File(getTestDir(), "migrated"); connector.forProjectDirectory(projectDir); org.gradle.tooling.ProjectConnection connection = connector.connect(); try { com.android.build.gradle.model.AndroidProject model = connection.getModel(com.android.build.gradle.model.AndroidProject.class); assertNotNull("empty model!", model); assertEquals("migrated", model.getName()); assertFalse(model.isLibrary()); com.android.build.gradle.model.ProductFlavorContainer defaultConfig = model.getDefaultConfig(); new com.android.build.gradle.model.AndroidProjectTest.SourceProviderTester(model.getName(), projectDir, "main", defaultConfig.getSourceProvider()).setJavaDir("src").setResourcesDir("src").setAidlDir("src").setRenderscriptDir("src").setResDir("res").setAssetsDir("assets").setManifestFile("AndroidManifest.xml").test(); new com.android.build.gradle.model.AndroidProjectTest.SourceProviderTester(model.getName(), projectDir, "instrumentTest", defaultConfig.getTestSourceProvider()).setJavaDir("tests/java").setResourcesDir("tests/resources").setAidlDir("tests/aidl").setJniDir("tests/jni").setRenderscriptDir("tests/rs").setResDir("tests/res").setAssetsDir("tests/assets").setManifestFile("tests/AndroidManifest.xml").test(); } finally { connection.close(); } }
private int loadInstanceDump() throws java.io.IOException { long id = readId(); int stackId = mInput.readInt(); com.android.tools.perflib.heap.StackTrace stack = mState.getStackTrace(stackId); long classId = readId(); int remaining = mInput.readInt(); com.android.tools.perflib.heap.ClassInstance instance = new com.android.tools.perflib.heap.ClassInstance(id, stack, classId); instance.loadFieldData(mInput, remaining); instance.setHeap(mState.mCurrentHeap); mState.addInstance(id, instance); return ((((mIdSize) + 4) + (mIdSize)) + 4) + remaining; }
public void toggleMethodProfiling() { boolean canStream = mClientData.hasFeature(ClientData.FEATURE_PROFILING_STREAMING); try { if ((mClientData.getMethodProfilingStatus()) == (com.android.ddmlib.ClientData.MethodProfilingStatus.ON)) { if (canStream) { com.android.ddmlib.HandleProfiling.sendMPSE(this); } else { com.android.ddmlib.HandleProfiling.sendMPRE(this); } } else { int bufferSize = ((com.android.ddmlib.DdmPreferences.getProfilerBufferSizeMb()) * 1024) * 1024; if (canStream) { com.android.ddmlib.HandleProfiling.sendMPSS(this, bufferSize, 0); } else { java.lang.String file = ("/sdcard/" + (mClientData.getClientDescription().replaceAll("\\:.*", ""))) + (DdmConstants.DOT_TRACE); com.android.ddmlib.HandleProfiling.sendMPRS(this, file, bufferSize, 0); } } } catch (java.io.IOException e) { com.android.ddmlib.Log.w("ddms", "Toggle method profiling failed"); } }
private void cmdList(java.io.FileDescriptor fd, java.io.PrintWriter pw, java.lang.String[] args) { final java.util.ArrayList<android.net.ConnectivityMetricsEvent> events; synchronized(mLock) { events = new java.util.ArrayList(mBuffer); } if (((args.length) > 1) && (args[1].equals("proto"))) { for (com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent ev : com.android.server.connectivity.IpConnectivityEventBuilder.toProto(events)) { pw.print(ev.toString()); } if ((mNetdListener) != null) { mNetdListener.listAsProtos(pw); } return; } for (android.net.ConnectivityMetricsEvent ev : events) { pw.println(ev.toString()); } if ((mNetdListener) != null) { mNetdListener.list(pw); } }

@java.lang.Override public int compare(com.android.ahat.Site.ObjectsInfo a, com.android.ahat.Site.ObjectsInfo b) { java.lang.String aName = com.android.ahat.AhatSnapshot.getClassName(a.classObj); java.lang.String bName = com.android.ahat.AhatSnapshot.getClassName(b.classObj); return aName.compareTo(bName); }

boolean isMetadataSynced() { if ((getQueue()) != null) { android.media.session.MediaSession.QueueItem currItem = null; for (android.media.session.MediaSession.QueueItem item : getQueue()) { if ((item.getQueueId()) == (getActiveQueueID())) { currItem = item; break; } } if ((currItem == null) || (!(currItem.getDescription().equals(getMetadata().getDescription())))) { if (com.android.bluetooth.avrcp.MediaPlayerWrapper.DEBUG) { android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("Metadata currently out of sync for " + (mPackageName))); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (" └ Current queueItem: " + currItem)); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (" └ Current metadata : " + (getMetadata().getDescription()))); } return false; } } return true; }
public void addObj(android.support.v8.renderscript.BaseObj obj) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { if (obj != null) { mN.addObj(obj.getNObj()); } else { mN.addObj(null); } return; } if (obj != null) { addI32(obj.getID(null)); } else { addI32(0); } }
@org.gradle.model.Unmanaged org.gradle.api.NamedDomainObjectContainer<com.android.build.gradle.internal.dsl.BuildType> getBuildTypes();

public void testClientConfiguredGzipContentEncoding() throws java.lang.Exception { byte[] bodyBytes = gzip("ABCDEFGHIJKLMNOPQRSTUVWXYZ".getBytes("UTF-8")); server.enqueue(new com.google.mockwebserver.MockResponse().setBody(bodyBytes).addHeader("Content-Encoding: gzip").addHeader(("Content-Length: " + (bodyBytes.length)))); server.play(); java.net.URLConnection connection = server.getUrl("/").openConnection(); connection.addRequestProperty("Accept-Encoding", "gzip"); java.io.InputStream gunzippedIn = new java.util.zip.GZIPInputStream(connection.getInputStream()); assertEquals("ABCDEFGHIJKLMNOPQRSTUVWXYZ", readAscii(gunzippedIn, java.lang.Integer.MAX_VALUE)); assertEquals(bodyBytes.length, connection.getContentLength()); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); assertContains(request.getHeaders(), "Accept-Encoding: gzip"); }
@java.lang.Override public java.util.Set<vogar.tasks.Task> installTasks() { java.util.Set<vogar.tasks.Task> result = new java.util.HashSet<vogar.tasks.Task>(); for (java.io.File classpathElement : run.classpath.getElements()) { java.lang.String name = run.basenameOfJar(classpathElement); java.io.File localDex = run.localDexFile(name); result.add(createCreateDexJarTask(run.classpath, classpathElement, name, null, localDex)); } result.add(new vogar.tasks.MkdirTask(run.mkdir, dalvikCache())); return result; }


private static void parseSigners(java.nio.ByteBuffer apkSignatureSchemeV2Block, java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> contentDigestsToVerify, com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result result) throws java.security.NoSuchAlgorithmException { java.nio.ByteBuffer signers; try { signers = com.android.apksig.internal.apk.v2.V2SchemeVerifier.getLengthPrefixedSlice(apkSignatureSchemeV2Block); } catch (com.android.apksig.apk.ApkFormatException e) { result.addError(Issue.V2_SIG_MALFORMED_SIGNERS); return; } if (!(signers.hasRemaining())) { result.addError(Issue.V2_SIG_NO_SIGNERS); return; } java.security.cert.CertificateFactory certFactory; try { certFactory = java.security.cert.CertificateFactory.getInstance("X.509"); } catch (java.security.cert.CertificateException e) { throw new java.lang.RuntimeException("Failed to obtain X.509 CertificateFactory", e); } int signerCount = 0; while (signers.hasRemaining()) { int signerIndex = signerCount; signerCount++; com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result.SignerInfo signerInfo = new com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result.SignerInfo(); signerInfo.index = signerIndex; result.signers.add(signerInfo); try { java.nio.ByteBuffer signer = com.android.apksig.internal.apk.v2.V2SchemeVerifier.getLengthPrefixedSlice(signers); com.android.apksig.internal.apk.v2.V2SchemeVerifier.parseSigner(signer, certFactory, signerInfo, contentDigestsToVerify); } catch (com.android.apksig.apk.ApkFormatException | java.nio.BufferUnderflowException e) { signerInfo.addError(Issue.V2_SIG_MALFORMED_SIGNER); return; } } }
@java.lang.Override protected void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().setBackgroundDrawableResource(R.drawable.class_zero_background); byte[] pdu = getIntent().getByteArrayExtra("pdu"); java.lang.String format = getIntent().getStringExtra("format"); mMessage = android.telephony.SmsMessage.createFromPdu(pdu, format); java.lang.CharSequence messageChars = mMessage.getMessageBody(); java.lang.String message = messageChars.toString(); if (android.text.TextUtils.isEmpty(message)) { finish(); return; } if ((message.length()) < (com.android.mms.ui.ClassZeroActivity.BUFFER_OFFSET)) messageChars = ((com.android.mms.ui.ClassZeroActivity.BUFFER) + message) + (com.android.mms.ui.ClassZeroActivity.BUFFER); long now = android.os.SystemClock.uptimeMillis(); mDialog = new android.app.AlertDialog.Builder(this).setMessage(messageChars).setPositiveButton(R.string.save, mSaveListener).setNegativeButton(android.R.string.cancel, mCancelListener).setCancelable(false).show(); mTimerSet = now + (com.android.mms.ui.ClassZeroActivity.DEFAULT_TIMER); if (icicle != null) { mTimerSet = icicle.getLong(com.android.mms.ui.ClassZeroActivity.TIMER_FIRE, mTimerSet); } }


public void testLibTestDep() { com.android.build.gradle.model.AndroidProjectTest.ProjectData projectData = getModelForProject("libTestDep"); com.android.builder.model.AndroidProject model = projectData.model; java.util.Collection<com.android.builder.model.Variant> variants = model.getVariants(); com.android.builder.model.Variant debugVariant = com.android.build.gradle.model.AndroidProjectTest.getVariant(variants, "debug"); assertNotNull(debugVariant); java.util.Collection<com.android.builder.model.AndroidArtifact> extraAndroidArtifact = debugVariant.getExtraAndroidArtifacts(); com.android.builder.model.AndroidArtifact testArtifact = com.android.build.gradle.model.AndroidProjectTest.getAndroidArtifact(extraAndroidArtifact, com.android.build.gradle.model.ARTIFACT_ANDROID_TEST); assertNotNull(testArtifact); com.android.builder.model.Dependencies testDependencies = testArtifact.getDependencies(); java.util.Collection<java.io.File> jars = testDependencies.getJars(); assertEquals(2, jars.size()); for (java.io.File f : jars) { assertTrue(((f.getName().equals("guava-11.0.2.jar")) || (f.getName().equals("jsr305-1.3.9.jar")))); } }
private void bindAndInitialize() throws android.telephony.mbms.MbmsException { android.telephony.mbms.MbmsUtils.startBinding(mContext, android.telephony.MbmsStreamingManager.MBMS_STREAMING_SERVICE_ACTION, new android.content.ServiceConnection() { @java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsStreamingService streamingService = IMbmsStreamingService.Stub.asInterface(service); int result; try { result = streamingService.initialize(mCallbackToApp, mSubscriptionId); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG, "Service died before initialization"); return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG, "Runtime exception during initialization"); try { mCallbackToApp.error(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); } catch (android.os.RemoteException e1) { } return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { try { mCallbackToApp.error(result, "Error returned during initialization"); } catch (android.os.RemoteException e) { } return; } mService.set(streamingService); } @java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { mService.set(null); } }); }

@com.googlecode.android_scripting.rpc.Rpc(description = "Set Enhanced 4G mode.") public void imsSetEnhanced4gMode(@com.googlecode.android_scripting.rpc.RpcParameter(name = "enable") java.lang.Boolean enable) { com.android.ims.ImsManager.setEnhanced4gLteModeSetting(mContext, enable); }
public void testMergedResourcesByName() throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger(); verifyResourceExists(merger, "drawable/icon", "drawable-ldpi-v4/icon", "drawable/icon2", "drawable/patch", "raw/foo", "layout/main", "layout/layout_ref", "layout/alias_replaced_by_file", "layout/file_replaced_by_alias", "drawable/color_drawable", "drawable/drawable_ref", "color/color", "string/basic_string", "string/xliff_string", "string/xliff_with_carriage_return", "string/styled_string", "style/style", "array/string_array", "attr/dimen_attr", "attr/string_attr", "attr/enum_attr", "attr/flag_attr", "attr/blah", "attr/blah2", "attr/flagAttr", "declare-styleable/declare_styleable", "dimen/dimen", "dimen-sw600dp-v13/offset", "id/item_id", "integer/integer"); }
public int sendto(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetAddress inetAddress, int port) throws java.net.SocketException, libcore.io.ErrnoException;
@java.lang.Override public java.lang.String serialize() { float duration = (timeMs) / 1000.0F; java.lang.String pydict = com.android.monkeyrunner.recorder.actions.PyDictUtilBuilder.newBuilder().addTuple("start", startx, starty).addTuple("end", endx, endy).add("duration", duration).add("steps", steps).build(); return "DRAG|" + pydict; }


@com.android.annotations.Nullable private com.android.builder.model.AndroidProject execute(@com.android.annotations.NonNull java.util.List<java.lang.String> arguments, boolean returnModel, @com.android.annotations.NonNull java.lang.String... tasks) { org.gradle.tooling.ProjectConnection connection = getProjectConnection(); try { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add("-i"); args.add("-u"); args.addAll(arguments); org.gradle.tooling.BuildLauncher launcher = connection.newBuild().forTasks(tasks).withArguments(args.toArray(new java.lang.String[args.size()])); if ((stdout) != null) { launcher.setStandardOutput(stdout); } launcher.run(); if (returnModel) { return connection.getModel(com.android.builder.model.AndroidProject.class); } } finally { connection.close(); } return null; }
public void testRegisterTwiceWithSameSensor() { android.hardware.Sensor sensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER); if (sensor == null) { throw new android.hardware.cts.helpers.SensorNotSupportedException(android.hardware.Sensor.TYPE_ACCELEROMETER); } boolean result = mSensorManager.registerListener(mNullSensorEventListener, sensor, SensorManager.SENSOR_DELAY_NORMAL); assertTrue(result); result = mSensorManager.registerListener(mNullSensorEventListener, sensor, SensorManager.SENSOR_DELAY_NORMAL); assertFalse(result); }
@com.android.annotations.NonNull public java.util.Map<java.lang.String, com.android.builder.model.AndroidProject> getAllModels() { return getAllModels(new com.android.build.gradle.integration.common.fixture.GetAndroidModelAction(), false); }
private void initDevices() { mDeviceList = null; com.android.ide.eclipse.adt.internal.sdk.Sdk sdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent(); if (sdk != null) { com.android.ide.eclipse.adt.internal.sdk.LayoutDeviceManager manager = sdk.getLayoutDeviceManager(); mDeviceList = manager.getCombinedList(); } if (((mDeviceList) != null) && ((mDeviceList.size()) > 0)) { com.android.ide.eclipse.adt.internal.sdk.LayoutDevice first = mDeviceList.get(0); selectDevice(first); java.util.List<com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig> configs = first.getConfigs(); selectDeviceConfig(configs.get(0)); } else { selectDevice(null); } }


static void setDouble(java.lang.invoke.MethodHandle m, Main.ValueHolder v, double value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }

private static synchronized java.security.Key getEncryptKey(java.lang.String algorithm) throws java.lang.Exception { java.security.Key key = libcore.javax.crypto.CipherTest.ENCRYPT_KEYS.get(algorithm); if (key != null) { return key; } algorithm = libcore.javax.crypto.CipherTest.getBaseAlgoritm(algorithm); if (algorithm.equals("RSA")) { java.security.KeyFactory kf = java.security.KeyFactory.getInstance("RSA"); java.security.spec.RSAPrivateKeySpec keySpec = new java.security.spec.RSAPrivateKeySpec(libcore.javax.crypto.CipherTest.RSA_2048_modulus, libcore.javax.crypto.CipherTest.RSA_2048_privateExponent); key = kf.generatePrivate(keySpec); } else { javax.crypto.KeyGenerator kg = javax.crypto.KeyGenerator.getInstance(algorithm); key = kg.generateKey(); } libcore.javax.crypto.CipherTest.ENCRYPT_KEYS.put(algorithm, key); return key; }



private void loadViewServerInfoAndWindows(final com.android.ddmlib.IDevice device) { executeInBackground(new java.lang.Runnable() { public void run() { com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo viewServerInfo = com.android.hierarchyviewerlib.device.DeviceBridge.loadViewServerInfo(device); if (viewServerInfo == null) { return; } com.android.hierarchyviewerlib.device.Window[] windows = com.android.hierarchyviewerlib.device.DeviceBridge.loadWindows(device); com.android.hierarchyviewerlib.ComponentRegistry.getDeviceSelectionModel().addDevice(device, windows); if ((viewServerInfo.protocolVersion) >= 3) { com.android.hierarchyviewerlib.device.WindowUpdater.startListenForWindowChanges(com.android.hierarchyviewerlib.HierarchyViewerDirector.this, device); focusChanged(device); } } }); }



private void updateCarrierIdAndName(int cid, java.lang.String name) { boolean update = false; if (!(com.android.internal.telephony.CarrierIdentifier.equals(name, mCarrierName, true))) { com.android.internal.telephony.CarrierIdentifier.logd(((("[updateCarrierName] from:" + (mCarrierName)) + " to:") + name)); mCarrierName = name; update = true; } if (cid != (mCarrierId)) { com.android.internal.telephony.CarrierIdentifier.logd(((("[updateCarrierId] from:" + (mCarrierId)) + " to:") + cid)); mCarrierId = cid; update = true; } if (update) { mCarrierIdLocalLog.log(((("[updateCarrierIdAndName] cid:" + (mCarrierId)) + " name:") + (mCarrierName))); final android.content.Intent intent = new android.content.Intent(android.telephony.TelephonyManager.ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED); intent.putExtra(TelephonyManager.EXTRA_CARRIER_ID, mCarrierId); intent.putExtra(TelephonyManager.EXTRA_CARRIER_NAME, mCarrierName); intent.putExtra(TelephonyManager.EXTRA_SUBSCRIPTION_ID, mPhone.getSubId()); mContext.sendBroadcast(intent); android.content.ContentValues cv = new android.content.ContentValues(); cv.put(CarrierIdentification.CID, mCarrierId); cv.put(CarrierIdentification.NAME, mCarrierName); mContext.getContentResolver().update(android.net.Uri.withAppendedPath(CarrierIdentification.CONTENT_URI, java.lang.Integer.toString(mPhone.getSubId())), cv, null, null); } }
public void test_EVP_CipherInit_ex_Null_Failure() throws java.lang.Exception { org.apache.harmony.xnet.provider.jsse.OpenSSLCipherContext context = new org.apache.harmony.xnet.provider.jsse.OpenSSLCipherContext(org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CIPHER_CTX_new()); int evpCipher = org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_get_cipherbyname("aes-128-ecb"); try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CipherInit_ex(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL, evpCipher, null, null, true); fail("Null context should throw NullPointerException"); } catch (java.lang.NullPointerException expected) { } try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CipherInit_ex(context.getContext(), org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL, null, null, true); fail("Null evpCipher should throw NullPointerException"); } catch (java.lang.NullPointerException expected) { } }

@java.lang.Override public final int initialize(final android.telephony.mbms.IMbmsStreamingManagerCallback callback, final int subscriptionId) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); callback.asBinder().linkToDeath(new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, subscriptionId); } }, 0); return initialize(new android.telephony.mbms.MbmsStreamingManagerCallback() { @java.lang.Override public void onError(int errorCode, java.lang.String message) { try { callback.error(errorCode, message); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } @java.lang.Override public void onStreamingServicesUpdated(java.util.List<android.telephony.mbms.StreamingServiceInfo> services) { try { callback.streamingServicesUpdated(services); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } @java.lang.Override public void onMiddlewareReady() { try { callback.middlewareReady(); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } }, subscriptionId); }
synchronized void nAllocationRead1D(long id, int off, int mip, int count, java.lang.Object d, int sizeBytes, android.renderscript.Element.DataType dt) { validate(); rsnAllocationRead1D(mContext, id, off, mip, count, d, sizeBytes, dt.mID); }
@java.lang.Override public void onCreate(android.database.sqlite.SQLiteDatabase db) { db.execSQL((((((((((((((((((((((("CREATE TABLE " + (com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE)) + "(_id INTEGER PRIMARY KEY,") + "name TEXT,") + "numeric TEXT,") + "mcc TEXT,") + "mnc TEXT,") + "apn TEXT,") + "user TEXT,") + "server TEXT,") + "password TEXT,") + "proxy TEXT,") + "port TEXT,") + "mmsproxy TEXT,") + "mmsport TEXT,") + "mmsc TEXT,") + "authtype INTEGER,") + "type TEXT,") + "current INTEGER,") + "protocol TEXT,") + "roaming_protocol TEXT,") + "carrier_enabled BOOLEAN,") + "bearer INTEGER);")); initDatabase(db); }
public static native java.lang.String mapLibraryName(java.lang.String nickname);
public native void tcdrain(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;
@java.lang.Override public void getNetworkSelectionMode(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_QUERY_NETWORK_SELECTION_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getNetworkSelectionMode(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getNetworkSelectionMode", e); } } }

@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentStateDisconnected() throws android.os.RemoteException { android.telephony.ims.internal.stub.ImsRegistrationImplBase.Callback mCallback2 = spy(new android.telephony.ims.internal.stub.ImsRegistrationImplBase.Callback()); com.android.ims.ImsReasonInfo info = new com.android.ims.ImsReasonInfo(com.android.ims.ImsReasonInfo.CODE_LOCAL_NETWORK_NO_LTE_COVERAGE, 0); mRegistration.onDeregistered(info); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback).onDeregistered(eq(info)); verify(mCallback2).onDeregistered(eq(info)); }
protected void t_FormatWithField(int count, java.text.Format format, java.lang.Object object, java.lang.String text, java.text.Format.Field field, int begin, int end) { java.lang.StringBuffer buffer = new java.lang.StringBuffer(); java.text.FieldPosition pos = new java.text.FieldPosition(field); format.format(object, buffer, pos); if (text == null) { assertEquals((("Test " + count) + ": incorrect formatted text"), this.text, buffer.toString()); } else { assertEquals((("Test " + count) + ": incorrect formatted text"), text, buffer.toString()); } assertEquals(((("Test " + count) + ": incorrect begin index for field ") + field), begin, pos.getBeginIndex()); assertEquals(((("Test " + count) + ": incorrect end index for field ") + field), end, pos.getEndIndex()); }







protected java.lang.String getEFPath(int efid) { switch (efid) { case EF_SMS : case EF_CST : case EF_RUIM_SPN : return (MF_SIM) + (DF_CDMA); } return getCommonIccEFPath(efid); }


private static void createGradleProperties(@com.android.annotations.NonNull java.io.File location) throws java.io.IOException { com.google.common.io.Files.write(("org.gradle.jvmargs=-Xmx6096m -XX:MaxPermSize=1024m\n" + "org.gradle.daemon=true\n"), new java.io.File(location, "gradle.properties"), java.nio.charset.Charset.defaultCharset()); }


@java.lang.Override public java.lang.String getShortDescription() { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData target = getAndroidTarget(); com.android.ide.eclipse.adt.internal.editors.manifest.descriptors.AndroidManifestDescriptors manifestDescriptors = null; if (target != null) { manifestDescriptors = target.getManifestDescriptors(); } if ((((manifestDescriptors != null) && ((getXmlNode()) != null)) && ((getXmlNode()) instanceof org.w3c.dom.Element)) && (getXmlNode().hasAttributes())) { com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor desc = getDescriptor(); if ((desc != (manifestDescriptors.getManifestElement())) && (desc != (manifestDescriptors.getApplicationElement()))) { org.w3c.dom.Element elem = ((org.w3c.dom.Element) (getXmlNode())); java.lang.String attr = _Element_getAttributeNS(elem, SdkConstants.NS_RESOURCES, AndroidManifestDescriptors.ANDROID_NAME_ATTR); if ((attr == null) || ((attr.length()) == 0)) { attr = _Element_getAttributeNS(elem, SdkConstants.NS_RESOURCES, AndroidManifestDescriptors.ANDROID_LABEL_ATTR); } if ((attr != null) && ((attr.length()) > 0)) { return java.lang.String.format("%1$s (%2$s)", attr, getDescriptor().getUiName()); } } } return java.lang.String.format("%1$s", getDescriptor().getUiName()); }


public int getsockoptInt(java.io.FileDescriptor fd, int level, int option) throws libcore.io.ErrnoException { return os.getsockoptInt(fd, level, option); }

@java.lang.Override public void write(@javax.annotation.Nonnull com.android.sched.vfs.OutputVDir outputVDir) throws com.android.jack.JackIOException { int dexCount = 1; com.android.jack.tools.merger.JackMerger merger = new com.android.jack.tools.merger.JackMerger(createDexFile()); com.android.sched.vfs.OutputVFile outputDex = getOutputDex(outputVDir, (dexCount++)); java.util.List<com.android.sched.vfs.InputVFile> mainDexList = new java.util.ArrayList<com.android.sched.vfs.InputVFile>(); java.util.List<com.android.sched.vfs.InputVFile> anyDexList = new java.util.ArrayList<com.android.sched.vfs.InputVFile>(); fillDexLists(mainDexList, anyDexList); for (com.android.sched.vfs.InputVFile currentDex : mainDexList) { try { mergeDex(merger, currentDex); } catch (com.android.jack.tools.merger.MergeOverflow e) { throw new com.android.jack.JackUserException("Too many classes in main dex. Index overflow while merging dex files", e); } } for (com.android.sched.vfs.InputVFile currentDex : anyDexList) { try { mergeDex(merger, currentDex); } catch (com.android.jack.tools.merger.MergeOverflow e) { finishMerge(merger, outputDex); outputDex = getOutputDex(outputVDir, (dexCount++)); merger = new com.android.jack.tools.merger.JackMerger(createDexFile()); try { mergeDex(merger, currentDex); } catch (com.android.jack.tools.merger.MergeOverflow e1) { throw new java.lang.AssertionError(); } } } finishMerge(merger, outputDex); }
@org.junit.Test public void test002e() throws java.lang.Exception { java.io.File jackOutput; try { jackOutput = runTest002(true, "fail"); junit.framework.Assert.fail(); } catch (com.android.jack.resource.ResourceImportConflictException e) { } }
public java.lang.String StripTelephoneNumber(java.lang.String vCard) { java.lang.String[] attr = vCard.split(java.lang.System.getProperty("line.separator")); java.lang.String Vcard = ""; for (int i = 0; i < (attr.length); i++) { if (attr[i].startsWith("TEL")) { attr[i] = attr[i].replace("(", ""); attr[i] = attr[i].replace(")", ""); attr[i] = attr[i].replace("-", ""); attr[i] = attr[i].replace(" ", ""); } } for (int i = 0; i < (attr.length); i++) { if (!(attr[i].equals(""))) { Vcard = Vcard.concat(((attr[i]) + "\n")); } } if (com.android.bluetooth.pbap.BluetoothPbapVcardManager.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("Vcard with stripped telephone no.: " + Vcard)); return Vcard; }
public static javax.net.ssl.SSLSession wrapSSLSession(org.conscrypt.OpenSSLSessionImpl sslSession) { if ((Build.VERSION.SDK_INT) <= 23) { return sslSession; } else { return new org.conscrypt.OpenSSLExtendedSessionImpl(sslSession); } }
@com.android.annotations.VisibleForTesting(visibility = com.android.annotations.VisibleForTesting.Visibility.PRIVATE) protected void setTargets(@com.android.annotations.NonNull com.android.sdklib.IAndroidTarget[] targets) { assert targets != null; mTargets = targets; }
public com.android.layoutlib.api.LayoutScene createScene(com.android.layoutlib.api.SceneParams params) { if ((mBridge) != null) { return mBridge.createScene(params); } else if ((mLegacyBridge) != null) { return createLegacyScene(params); } return null; }
public void test_replaceAll() { java.util.IdentityHashMap<java.lang.String, java.lang.String> map = new java.util.IdentityHashMap<>(); java.lang.String key1 = "key1"; java.lang.String key2 = "key2"; java.lang.String key3 = "key3"; map.put(key1, "1"); map.put(key2, "2"); map.put(key3, "3"); map.replaceAll(( k, v) -> k + v); assertEquals("key11", map.get(key1)); assertEquals("key22", map.get(key2)); assertEquals("key33", map.get(key3)); assertEquals(3, map.size()); try { map.replaceAll(new java.util.function.BiFunction<java.lang.String, java.lang.String, java.lang.String>() { @java.lang.Override public java.lang.String apply(java.lang.String s, java.lang.String s2) { map.put("key4", "4"); return ""; } }); } catch (java.util.ConcurrentModificationException expected) { } }







@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testBaseIntersectionCast() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_39).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }
@com.android.annotations.Nullable @java.lang.Override public java.io.File getJarJarRuleFile() { return buildType.getJarJarRuleFile(); }

public int enableFirmwareRoaming(int state) { kilroy(); synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return android.hardware.wifi.V1_0.WifiStatusCode.ERROR_NOT_STARTED; kilroy(); try { kilroy(); byte val; switch (state) { case WifiNative.DISABLE_FIRMWARE_ROAMING : val = android.hardware.wifi.V1_0.StaRoamingState.DISABLED; break; case WifiNative.ENABLE_FIRMWARE_ROAMING : val = android.hardware.wifi.V1_0.StaRoamingState.ENABLED; break; default : android.util.Log.e(com.android.server.wifi.WifiVendorHal.TAG, ("enableFirmwareRoaming invalid argument " + state)); return android.hardware.wifi.V1_0.WifiStatusCode.ERROR_INVALID_ARGS; } kilroy(); android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.setRoamingState(val); android.util.Log.d(com.android.server.wifi.WifiVendorHal.TAG, ("setRoamingState returned " + (status.code))); return status.code; } catch (android.os.RemoteException e) { kilroy(); handleRemoteException(e); return android.hardware.wifi.V1_0.WifiStatusCode.ERROR_UNKNOWN; } } }

public void addU32(long v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addU32(v); return; } if ((v < 0) || (v > 4294967295L)) { android.util.Log.e("rs", (("FieldPacker.addU32( " + v) + " )")); throw new java.lang.IllegalArgumentException("Saving value out of range for type"); } align(4); mData[((mPos)++)] = ((byte) (v & 255)); mData[((mPos)++)] = ((byte) ((v >> 8) & 255)); mData[((mPos)++)] = ((byte) ((v >> 16) & 255)); mData[((mPos)++)] = ((byte) ((v >> 24) & 255)); }

private void getPixelValuesFromOutputBuffer(java.nio.ByteBuffer buffer, int x, int y, com.android.cts.videoperf.VideoEncoderDecoderTest.YUVValue result) { result.mY = buffer.get(((y * (mVideoWidth)) + x)); if (isDstSemiPlanar()) { int index = (((mVideoWidth) * (mVideoHeight)) + ((y / 2) * (mVideoWidth))) + ((x / 2) * 2); result.mU = buffer.get(index); result.mV = buffer.get((index + 1)); } else { int vOffset = ((mVideoWidth) * (mVideoHeight)) / 4; int index = (((mVideoWidth) * (mVideoHeight)) + (((y / 2) * (mVideoWidth)) / 2)) + (x / 2); result.mU = buffer.get(index); result.mV = buffer.get((index + vOffset)); } }
public com.android.ide.common.rendering.api.ViewInfo getRootView() { return null; }
final void get(long[] dst, int dstOffset, int longCount) { checkNotFreed(); int byteCount = checkGetBounds(SizeOf.LONG, dst.length, dstOffset, longCount); this.block.peekLongArray(((offset) + (position)), dst, dstOffset, longCount, order.needsSwap); position += byteCount; }
void putBigEndianTwosComplement(byte[] a) { this.makeValid(); java.math.NativeBN.twosComp2bn(a, a.length, this.bignum); }
private javax.crypto.KeyAgreementSpi getSpi() { return getSpi(null); }

static float $opt$CharToFloat(char a) { if (Main.doThrow) throw new java.lang.Error(); return ((float) (a)); }
public void testConnectOverProxy_implicit_http_fails() throws java.lang.Exception { byte[] fileContents = "abcdef 1234567890".getBytes(java.nio.charset.StandardCharsets.UTF_8); java.net.URL fileUrl = addFileEntry(libcore.java.net.FtpURLConnectionTest.FILE_PATH, fileContents); java.net.ProxySelector defaultProxySelector = java.net.ProxySelector.getDefault(); try { libcore.java.net.FtpURLConnectionTest.CountingProxy countingProxy = libcore.java.net.FtpURLConnectionTest.CountingProxy.start(); try { java.net.Proxy proxy = countingProxy.asProxy(); libcore.java.net.FtpURLConnectionTest.SingleProxySelector proxySelector = new libcore.java.net.FtpURLConnectionTest.SingleProxySelector(proxy); java.net.ProxySelector.setDefault(proxySelector); java.net.URLConnection connection = fileUrl.openConnection(); java.io.InputStream inputStream = connection.getInputStream(); java.io.IOException e = proxySelector.getLastException(); assertEquals("FTP connections over HTTP proxy not supported", e.getMessage()); libcore.java.net.FtpURLConnectionTest.assertContents(fileContents, inputStream); } finally { int numConnections = countingProxy.shutdownAndGetConnectionCount(); assertEquals(0, numConnections); } } finally { java.net.ProxySelector.setDefault(defaultProxySelector); } }

@java.lang.Override public com.android.builder.core.DefaultBuildType create(java.lang.String name) { return instantiator.newInstance(com.android.build.gradle.internal.dsl.BuildTypeDsl.class, name, project, instantiator, logger); }
protected void receive_oversize_java_net_DatagramPacket() { final int[] ports = tests.support.Support_PortManager.getNextPortsForUDP(2); final int portNumber = ports[0]; class TestDGRcvOver implements java.lang.Runnable { public void run() { java.net.InetAddress localHost = null; try { localHost = java.net.InetAddress.getLocalHost(); java.lang.Thread.sleep(1000); java.net.DatagramSocket sds = new java.net.DatagramSocket(ports[1]); java.net.DatagramPacket rdp = new java.net.DatagramPacket("0123456789".getBytes(), 10, localHost, portNumber); sds.send(rdp); sds.close(); } catch (java.lang.Exception e) { java.lang.System.err.println(((((("host " + localHost) + " port ") + portNumber) + " failed to send oversize data: ") + e)); e.printStackTrace(); } } } try { new java.lang.Thread(new TestDGRcvOver(), "DGSenderOver").start(); ds = new java.net.DatagramSocket(portNumber); ds.setSoTimeout(6000); byte[] rbuf = new byte[5]; java.net.DatagramPacket rdp = new java.net.DatagramPacket(rbuf, rbuf.length); ds.receive(rdp); ds.close(); assertTrue(("Send/Receive oversize failed to return correct data: " + (new java.lang.String(rbuf, 0, 5))), new java.lang.String(rbuf, 0, 5).equals("01234")); } catch (java.lang.Exception e) { java.lang.System.err.println(("Exception during send test: " + e)); e.printStackTrace(); fail((((("port " + portNumber) + " Exception: ") + e) + " during oversize send test")); } finally { ds.close(); } }

public native void setenv(java.lang.String name, java.lang.String value, boolean overwrite) throws android.system.ErrnoException;
@android.test.suitebuilder.annotation.SmallTest public void testInitializationWithEarpieceAndBluetoothNoHeadset() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, (((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_SPEAKER)) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); initializationTestHelper(expectedState, true); }
@org.junit.Test public void testDefaultMethodReference() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_32).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }
private java.lang.String getNameFromInputVFile(@javax.annotation.Nonnull com.android.jack.library.InputLibrary jackLibrary, @javax.annotation.Nonnull com.android.sched.vfs.InputVFile jppFile) { com.android.sched.util.location.Location loc = jppFile.getLocation(); java.lang.String name; if (loc instanceof com.android.sched.util.location.ZipLocation) { name = ((com.android.sched.util.location.ZipLocation) (jppFile.getLocation())).getEntryName(); if ((jackLibrary.getMajorVersion()) != 0) { name = name.substring(((FileType.JPP.getVPathPrefix().split().iterator().next().length()) + 1)); } else { name = name.substring("JACK-INF/".length()); } } else { name = ((com.android.sched.util.location.FileLocation) (jppFile.getLocation())).getPath(); if ((jackLibrary.getMajorVersion()) != 0) { java.lang.String prefix = (FileType.JPP.getVPathPrefix().split().iterator().next()) + '/'; name = name.substring(((name.lastIndexOf(prefix)) + (prefix.length()))); } else { name = name.substring("JACK-INF/".length()); } } return name; }
public static java.nio.channels.SocketChannel createPassThroughConnection(java.net.InetSocketAddress adbSockAddr, com.android.ddmlib.Device device, int pid) throws java.io.IOException { java.nio.channels.SocketChannel adbChan = java.nio.channels.SocketChannel.open(adbSockAddr); try { adbChan.socket().setTcpNoDelay(true); adbChan.configureBlocking(false); com.android.ddmlib.AdbHelper.setDevice(adbChan, device); byte[] req = com.android.ddmlib.AdbHelper.createJdwpForwardRequest(pid); if ((com.android.ddmlib.AdbHelper.write(adbChan, req)) == false) throw new java.io.IOException("failed submitting request to ADB"); com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse(adbChan, false); if (!(resp.okay)) throw new java.io.IOException(("connection request rejected: " + (resp.message))); adbChan.configureBlocking(true); } catch (java.io.IOException ioe) { adbChan.close(); throw ioe; } return adbChan; }
private void postAndWaitForRunnable(java.lang.Runnable r) throws java.lang.InterruptedException { java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1); mHandler.post(() -> { try { r.run(); } finally { latch.countDown(); } }); latch.await(); }
@org.junit.Test public void aget_wide() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(AGET_WIDE).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }

@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) throws java.lang.Exception { com.android.sched.vfs.VPath filePath = getFilePath(type); com.android.sched.vfs.OutputVFile vFile = outputDir.createOutputVFile(filePath); try { java.io.OutputStream out = new java.io.BufferedOutputStream(vFile.openWrite()); try { com.android.jack.jayce.JayceWriter writer = new com.android.jack.jayce.JayceWriter(out); writer.write(type, ("jack " + (com.android.jack.Jack.getVersionString()))); if (com.android.sched.util.config.ThreadConfig.get(JackIncremental.GENERATE_COMPILER_STATE).booleanValue()) { assert vFile instanceof com.android.sched.vfs.DirectFile; com.android.jack.experimental.incremental.CompilerState csm = com.android.jack.experimental.incremental.JackIncremental.getCompilerState(); assert csm != null; csm.addMappingBetweenJavaFileAndTypeName(type.getSourceInfo().getFileName(), com.android.jack.experimental.incremental.JackIncremental.getFormatter().getName(type)); } } finally { out.close(); } } catch (java.io.IOException e) { throw new com.android.jack.JackFileException((("Could not write Jack file to output '" + vFile) + "'"), e); } }
@java.lang.Override protected void registerTabs() { addFailuresTab(); if (!(getResults().getPackages().isEmpty())) { addTab("Packages", new org.gradle.internal.ErroringAction<org.gradle.api.internal.html.SimpleHtmlWriter>() { @java.lang.Override protected void doExecute(org.gradle.api.internal.html.SimpleHtmlWriter writer) throws java.io.IOException { renderPackages(writer); } }); } addTab("Classes", new org.gradle.internal.ErroringAction<org.gradle.api.internal.html.SimpleHtmlWriter>() { @java.lang.Override public void doExecute(org.gradle.api.internal.html.SimpleHtmlWriter htmlWriter) throws java.io.IOException { renderClasses(htmlWriter); } }); }






public void test_SSL_do_handshake_NULL_SSL() throws java.lang.Exception { try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_do_handshake(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL, null, null, 0, false, null); fail(); } catch (java.lang.NullPointerException expected) { } }
private static native java.lang.String getISO3LanguageNative(java.lang.String languageTag);

private void postCreate() { if ((mUpdaterData) != null) { mTextSdkOsPath.setText(mUpdaterData.getOsSdkRoot()); } mTreeViewer.setContentProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgContentProvider()); mColumnApi.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnApi))); mColumnName.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnName))); mColumnStatus.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnStatus))); mColumnRevision.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnRevision))); org.eclipse.swt.graphics.FontData fontData = mTree.getFont().getFontData()[0]; fontData.setStyle(SWT.ITALIC); mTreeFontItalic = new org.eclipse.swt.graphics.Font(mTree.getDisplay(), fontData); mColorUpdate = new org.eclipse.swt.graphics.Color(mTree.getDisplay(), 255, 255, 204); mColorNew = new org.eclipse.swt.graphics.Color(mTree.getDisplay(), 255, 238, 204); mTree.addDisposeListener(new org.eclipse.swt.events.DisposeListener() { public void widgetDisposed(org.eclipse.swt.events.DisposeEvent e) { mTreeFontItalic.dispose(); mColorUpdate.dispose(); mColorNew.dispose(); mTreeFontItalic = null; mColorUpdate = null; mColorNew = null; } }); }

public void testExecuteQuery() throws java.sql.SQLException { java.lang.String[] queries2 = new java.lang.String[]{ "update zoo set name='Masha', family='cat' where id=;", "insert into hutch (id, animal_id, address) values (1, ?,'Birds-house, 1');", "insert into hutch (id, animal_id, address) values (?, 1, 'Horse-house, 5');", "create view address as select address from hutch where animal_id=?" }; for (int i = 0; i < (queries2.length); i++) { java.sql.PreparedStatement ps = null; try { ps = conn.prepareStatement(queries2[i]); ps.executeQuery(); fail(("SQLException is not thrown for query: " + (queries2[i]))); } catch (java.sql.SQLException sqle) { } finally { try { ps.close(); } catch (java.lang.Exception ee) { } } } java.lang.String query = "select * from zoo where id = ?"; java.sql.PreparedStatement ps = null; try { ps = conn.prepareStatement(query); ps.setInt(1, 1); java.sql.ResultSet rs = ps.executeQuery(); rs.next(); assertEquals(1, rs.getInt(1)); assertEquals("Kesha", rs.getString(2)); assertEquals("parrot", rs.getString(3)); } finally { try { ps.close(); } catch (java.lang.Exception ee) { } } try { ps = conn.prepareStatement(query); ps.setInt(1, 5); java.sql.ResultSet rs = ps.executeQuery(); assertNotNull(rs); assertFalse(rs.next()); } finally { try { ps.close(); } catch (java.lang.Exception ee) { } } }
protected void openDevice(java.lang.String cameraId) throws java.lang.Exception { mCamera = android.hardware.camera2.cts.CameraTestUtils.CameraTestUtils.openCamera(mCameraManager, cameraId, mCameraListener, mHandler); mCollector.setCameraId(cameraId); mStaticInfo = new android.hardware.camera2.cts.helpers.StaticMetadata(mCameraManager.getCameraCharacteristics(cameraId), android.hardware.camera2.cts.helpers.StaticMetadata.CheckLevel.ASSERT, null); mOrderedPreviewSizes = getSupportedPreviewSizes(cameraId, mCameraManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND); mOrderedVideoSizes = getSupportedVideoSizes(cameraId, mCameraManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND); mOrderedStillSizes = getSupportedStillSizes(cameraId, mCameraManager, null); mMinPreviewFrameDurationMap = mStaticInfo.getAvailableMinFrameDurationsForFormatChecked(ImageFormat.YUV_420_888); }





public void link(java.lang.String oldPath, java.lang.String newPath) throws android.system.ErrnoException;
boolean connectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (!(mStateMachine.isConnected())) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: profile not connected"); return false; } if (mStateMachine.isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: audio is already ON"); return false; } mStateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO); return true; }

@java.lang.Override public void onManagerConnected(int status) { android.util.Log.v(com.android.cts.verifier.sensors.helpers.OpenCVLibrary.TAG, ("New Loading status: " + status)); switch (status) { case org.opencv.android.LoaderCallbackInterface.SUCCESS : { com.android.cts.verifier.sensors.helpers.OpenCVLibrary.mLoaded = true; } break; default : { super.onManagerConnected(status); } break; } }


android.net.IpSecConfig buildIpSecConfig() throws java.lang.Exception { android.net.IpSecManager ipSecManager = new android.net.IpSecManager(mIpSecService); when(mMockNetd.ipSecAllocateSpi(anyInt(), anyInt(), anyString(), anyString(), anyInt())).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI2); android.net.IpSecAlgorithm encryptAlgo = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, com.android.server.IpSecServiceTest.CRYPT_KEY); android.net.IpSecAlgorithm authAlgo = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, com.android.server.IpSecServiceTest.AUTH_KEY, ((com.android.server.IpSecServiceTest.AUTH_KEY.length) * 8)); java.net.InetAddress localAddr = java.net.InetAddress.getByAddress(new byte[]{ 127, 0, 0, 1 }); android.net.IpSecManager.SecurityParameterIndex outSpi = ipSecManager.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, localAddr); android.net.IpSecManager.SecurityParameterIndex inSpi = ipSecManager.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_IN, localAddr); android.net.IpSecConfig ipSecConfig = new android.net.IpSecTransform.Builder(mMockContext).setSpi(IpSecTransform.DIRECTION_OUT, outSpi).setSpi(IpSecTransform.DIRECTION_IN, inSpi).setEncryption(IpSecTransform.DIRECTION_OUT, encryptAlgo).setAuthentication(IpSecTransform.DIRECTION_OUT, authAlgo).setEncryption(IpSecTransform.DIRECTION_IN, encryptAlgo).setAuthentication(IpSecTransform.DIRECTION_IN, authAlgo).getIpSecConfig(); return ipSecConfig; }

private static boolean shouldOutputApkEntry(com.android.apksigner.core.ApkSignerEngine apkSigner, java.util.jar.JarFile inFile, java.util.jar.JarEntry inEntry, byte[] tmpbuf) throws java.io.IOException { if (apkSigner == null) { return true; } com.android.apksigner.core.ApkSignerEngine.InputJarEntryInstructions instructions = apkSigner.inputJarEntry(inEntry.getName()); com.android.apksigner.core.ApkSignerEngine.InspectJarEntryRequest inspectEntryRequest = instructions.getInspectJarEntryRequest(); if (inspectEntryRequest != null) { com.android.signapk.SignApk.provideJarEntry(inFile, inEntry, inspectEntryRequest, tmpbuf); } switch (instructions.getOutputPolicy()) { case OUTPUT : return true; case SKIP : case OUTPUT_BY_ENGINE : return false; default : throw new java.lang.RuntimeException(("Unsupported output policy: " + (instructions.getOutputPolicy()))); } }
public static java.lang.String escapeResourceString(java.lang.String s) { int n = s.length(); if (n == 0) { return ""; } java.lang.StringBuilder sb = new java.lang.StringBuilder(((s.length()) * 2)); boolean hasSpace = ((s.charAt(0)) == ' ') || ((s.charAt((n - 1))) == ' '); if (hasSpace) { sb.append('"'); } else if (((s.charAt(0)) == '@') || ((s.charAt(0)) == '?')) { sb.append('\\'); } for (int i = 0; i < n; ++i) { char c = s.charAt(i); switch (c) { case '\'' : if (!hasSpace) { sb.append('\\'); } sb.append(c); break; case '"' : case '\\' : sb.append('\\'); sb.append(c); break; case '<' : sb.append(com.android.SdkConstants.LT_ENTITY); break; case '&' : sb.append(com.android.SdkConstants.AMP_ENTITY); break; case '\n' : sb.append("\\n"); break; case '\t' : sb.append("\\t"); break; default : sb.append(c); break; } } if (hasSpace) { sb.append('"'); } return sb.toString(); }
public android.net.NetworkStats readNetworkStatsDetail(int limitUid, java.lang.String[] limitIfaces, int limitTag, android.net.NetworkStats lastStats) throws java.io.IOException { final android.net.NetworkStats stats = readNetworkStatsDetailInternal(limitUid, limitIfaces, limitTag, lastStats); final android.util.ArrayMap<java.lang.String, java.lang.String> stackedIfaces; synchronized(com.android.internal.net.NetworkStatsFactory.sStackedIfaces) { stackedIfaces = new android.util.ArrayMap(com.android.internal.net.NetworkStatsFactory.sStackedIfaces); } final android.net.NetworkStats adjustments = new android.net.NetworkStats(0, stackedIfaces.size()); android.net.NetworkStats.Entry entry = null; for (int i = 0; i < (stats.size()); i++) { entry = stats.getValues(i, entry); if (((entry.iface) == null) || (!(entry.iface.startsWith(com.android.internal.net.NetworkStatsFactory.CLATD_INTERFACE_PREFIX)))) { continue; } final java.lang.String baseIface = stackedIfaces.get(entry.iface); if (baseIface == null) { continue; } android.net.NetworkStats.Entry adjust = new android.net.NetworkStats.Entry(baseIface, 0, 0, 0, 0, 0, 0, 0L, 0L, 0L, 0L, 0L); adjust.rxBytes -= (entry.rxBytes) + ((entry.rxPackets) * (com.android.internal.net.NetworkStatsFactory.IPV4V6_HEADER_DELTA)); adjust.txBytes -= (entry.txBytes) + ((entry.txPackets) * (com.android.internal.net.NetworkStatsFactory.IPV4V6_HEADER_DELTA)); adjust.rxPackets -= entry.rxPackets; adjust.txPackets -= entry.txPackets; adjustments.combineValues(adjust); entry.rxBytes = (entry.rxPackets) * (com.android.internal.net.NetworkStatsFactory.IPV4V6_HEADER_DELTA); entry.txBytes = (entry.txPackets) * (com.android.internal.net.NetworkStatsFactory.IPV4V6_HEADER_DELTA); entry.rxPackets = 0; entry.txPackets = 0; stats.combineValues(entry); } stats.combineAllValues(adjustments); return stats; }

public void msync(long address, long byteCount, int flags) throws libcore.io.ErrnoException { os.msync(address, byteCount, flags); }
@javax.annotation.Nonnull @java.lang.Override public com.android.jack.ir.ast.JMethodId getMethodId(@javax.annotation.Nonnull java.lang.String name, @javax.annotation.Nonnull java.util.List<? extends com.android.jack.ir.ast.JType> argsType, @javax.annotation.Nonnull com.android.jack.ir.ast.MethodKind kind) throws com.android.jack.lookup.JMethodLookupException { assert !((name.contains("(")) || (name.contains(")"))); loader.ensureMethods(this); for (com.android.jack.ir.ast.JMethod method : methods) { com.android.jack.ir.ast.JMethodId id = method.getMethodId(); if (id.equals(name, argsType)) { return id; } } for (com.android.jack.ir.ast.JInterface jType : getImplements()) { try { return jType.getMethodId(name, argsType, kind); } catch (com.android.jack.lookup.JMethodLookupException e) { } } com.android.jack.ir.ast.JClass superClass = getSuperClass(); if (superClass != null) { try { return superClass.getMethodId(name, argsType, kind); } catch (com.android.jack.lookup.JMethodLookupException e) { } } throw new com.android.jack.lookup.JMethodIdLookupException(this, name, argsType); }

@java.lang.SuppressWarnings("resource") @javax.annotation.Nonnull @java.lang.Override java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVFile file, boolean append) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.WRITE); VFSStatCategory.DIR_WRITE.getCounterStat(getTracer(), infoString).incValue(); java.io.File path = getNativeFile(file.getPath()); try { java.io.OutputStream os = new java.io.FileOutputStream(path, append); assert (os = trackOpenedStream(os, file)) != null; return os; } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.WRITE); throw new com.android.sched.util.ConcurrentIOException(e); } }
public java.util.ArrayList<com.android.sdkuilib.internal.repository.ArchiveInfo> computeUpdates(java.util.Collection<com.android.sdklib.internal.repository.Archive> selectedArchives, com.android.sdklib.internal.repository.SdkSources sources, java.lang.Package[] localPkgs, boolean includeObsoletes) { java.util.ArrayList<com.android.sdkuilib.internal.repository.ArchiveInfo> archives = new java.util.ArrayList<com.android.sdkuilib.internal.repository.ArchiveInfo>(); java.util.ArrayList<java.lang.Package> remotePkgs = new java.util.ArrayList<java.lang.Package>(); com.android.sdklib.internal.repository.SdkSource[] remoteSources = sources.getAllSources(); com.android.sdkuilib.internal.repository.ArchiveInfo[] localArchives = createLocalArchives(localPkgs); if (selectedArchives == null) { selectedArchives = findUpdates(localArchives, remotePkgs, remoteSources, includeObsoletes); } for (com.android.sdklib.internal.repository.Archive a : selectedArchives) { insertArchive(a, archives, selectedArchives, remotePkgs, remoteSources, localArchives, false); } return archives; }
@java.lang.Override public final void accept(com.android.tools.perflib.heap.Visitor visitor) { com.android.tools.perflib.heap.Instance instance = getReferredInstance(); if (instance != null) { instance.accept(visitor); } }

private void persistBluetoothSetting(int value) { Settings.Global.putInt(mContext.getContentResolver(), Settings.Global.BLUETOOTH_ON, value); }
public void getEuiccChallenge(java.lang.String cardId, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccChallenge(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccChallengeCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] challenge) { callback.onComplete(resultCode, challenge); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getEuiccChallenge", e); throw e.rethrowFromSystemServer(); } }
public void addExclusiveThreadTimes(long time) { mExclusiveThreadTimes += time; }
@java.lang.Override public java.io.File call() throws java.lang.Exception { return scope.getPackageApk(); }


private void updateHoverRegion(int x, int y) { x = imageXCoordinate(x); y = imageYCoordinate(y); com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo verticalUpdateRegion = findVerticalPatch(x, y); com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo horizontalUpdateRegion = findHorizontalPatch(x, y); computeHighlightRegions(verticalUpdateRegion, horizontalUpdateRegion); java.awt.Cursor c = getCursor(x, y, verticalUpdateRegion, horizontalUpdateRegion); setCursor(c); }

@com.android.annotations.NonNull public void testProguardFile(java.lang.Object proguardFile) { testProguardFiles.add(project.file(proguardFile)); }
public java.io.FileDescriptor dup(java.io.FileDescriptor oldFd) throws android.system.ErrnoException { return os.dup(oldFd); }


@java.lang.Override public void setSmscAddress(java.lang.String address, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_SMSC_ADDRESS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " address = ") + address)); } try { radioProxy.setSmscAddress(rr.mSerial, convertNullToEmptyString(address)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setSmscAddress", e); } } }



public void test_X509_NAME_hashes() { javax.security.auth.x500.X500Principal name = new javax.security.auth.x500.X500Principal("CN=localhost"); assertEquals((-1372642656), org.apache.harmony.xnet.provider.jsse.NativeCrypto.X509_NAME_hash(name)); assertEquals((-1626170662), org.apache.harmony.xnet.provider.jsse.NativeCrypto.X509_NAME_hash_old(name)); }
public static android.support.v8.renderscript.ScriptIntrinsicConvolve3x3 create(android.support.v8.renderscript.RenderScript rs, android.support.v8.renderscript.Element e) { float[] f = new float[]{ 0, 0, 0, 0, 1, 0, 0, 0, 0 }; if (!(e.isCompatible(android.support.v8.renderscript.Element.U8_4(rs)))) { throw new android.support.v8.renderscript.RSIllegalArgumentException("Unsuported element type."); } long id = rs.nScriptIntrinsicCreate(1, e.getID(rs)); android.support.v8.renderscript.ScriptIntrinsicConvolve3x3 si = new android.support.v8.renderscript.ScriptIntrinsicConvolve3x3(id, rs); si.setCoefficients(f); return si; }
public void bindResponse(int ind_id, boolean ind_status) { if (((mService) != null) && (isEnabled())) { try { mService.bindResponse(ind_id, ind_status); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); if (android.bluetooth.BluetoothHeadset.DBG) android.util.Log.d(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } }


public void seteuid(int euid) throws android.system.ErrnoException;
private boolean start() { java.net.InetSocketAddress socketAddr; try { java.net.InetAddress hostAddr = java.net.InetAddress.getByName(com.android.ddmlib.EmulatorConsole.HOST); socketAddr = new java.net.InetSocketAddress(hostAddr, mPort); } catch (java.net.UnknownHostException e) { return false; } try { mSocketChannel = java.nio.channels.SocketChannel.open(socketAddr); } catch (java.io.IOException e1) { return false; } readLines(); return true; }

protected <T extends com.android.jack.ir.ast.JReferenceType> T getNonArrayType(@javax.annotation.Nonnull java.lang.String signature, @javax.annotation.Nonnull com.android.jack.lookup.JLookup.Adapter<T> adapter) throws com.android.jack.ir.ast.MissingJTypeLookupException { java.util.Map<java.lang.String, T> cache = adapter.getCache(); T type; synchronized(cache) { type = cache.get(signature); if (type == null) { type = findClassOrInterface(signature, adapter); cache.put(signature, type); } } return type; }

@java.lang.Override public boolean checkForCondition() { android.support.test.uiautomator.UiObject androidCling = mDevice.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.ANDROID_WELCOME_CLING_RES)); android.support.test.uiautomator.UiObject launcherCling = mDevice.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.ANDROID_LAUNCHER_WELCOME_CLING_RES)); try { if (androidCling.exists()) { androidCling.click(); return true; } else if (launcherCling.exists()) { launcherCling.click(); return true; } else { return false; } } catch (android.support.test.uiautomator.UiObjectNotFoundException e) { junit.framework.Assert.fail(e.getStackTrace().toString()); return false; } }


private static java.util.jar.JarFile retrieve(final java.net.URL url, final sun.net.www.protocol.jar.URLJarFile.URLJarFileCloseController closeController) throws java.io.IOException { if ((sun.net.www.protocol.jar.URLJarFile.callback) != null) { return sun.net.www.protocol.jar.URLJarFile.callback.retrieve(url); } else { java.util.jar.JarFile result = null; try (final java.io.InputStream in = url.openConnection().getInputStream()) { result = java.security.AccessController.doPrivileged(new java.security.PrivilegedExceptionAction<java.util.jar.JarFile>() { public java.util.jar.JarFile run() throws java.io.IOException { java.nio.file.Path tmpFile = java.nio.file.Files.createTempFile("jar_cache", null); try { java.nio.file.Files.copy(in, tmpFile, java.nio.file.StandardCopyOption.REPLACE_EXISTING); java.util.jar.JarFile jarFile = new sun.net.www.protocol.jar.URLJarFile(tmpFile.toFile(), closeController); tmpFile.toFile().deleteOnExit(); return jarFile; } catch (java.lang.Throwable thr) { try { java.nio.file.Files.delete(tmpFile); } catch (java.io.IOException ioe) { thr.addSuppressed(ioe); } throw thr; } } }); } catch (java.security.PrivilegedActionException pae) { throw ((java.io.IOException) (pae.getException())); } return result; } }

public boolean enable(java.lang.String packageName) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "enable(): not enabling - bluetooth disallowed"); } return false; } if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, "enable(): not allowed for non-active and non system user"); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (((!(isEnabled())) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_ENABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ((((((("enable(" + packageName) + "): mBluetooth =") + (mBluetooth)) + " mBinding = ") + (mBinding)) + " mState = ") + (android.bluetooth.BluetoothAdapter.nameForState(mState)))); } synchronized(mReceiver) { mQuietEnableExternal = false; mEnableExternal = true; sendEnableMsg(false, packageName); } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "enable returning"); } return true; }
private java.util.List<java.security.cert.X509Certificate> checkTrusted(java.security.cert.X509Certificate[] chain, java.lang.String authType, javax.net.ssl.SSLSession session, javax.net.ssl.SSLParameters parameters, boolean clientAuth) throws java.security.cert.CertificateException { final java.lang.String hostname = (session != null) ? session.getPeerHost() : null; if ((session != null) && (parameters != null)) { java.lang.String identificationAlgorithm = parameters.getEndpointIdentificationAlgorithm(); if ((identificationAlgorithm != null) && ("HTTPS".equals(identificationAlgorithm.toUpperCase(java.util.Locale.US)))) { javax.net.ssl.HostnameVerifier verifier = javax.net.ssl.HttpsURLConnection.getDefaultHostnameVerifier(); if (!(verifier.verify(hostname, session))) { throw new java.security.cert.CertificateException("No subjectAltNames on the certificate match"); } } } return checkTrusted(chain, authType, hostname, clientAuth); }
public java.lang.String getMethodName(long classID, long methodID) { org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket packet = new org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket(JDWPCommands.ReferenceTypeCommandSet.CommandSetID, JDWPCommands.ReferenceTypeCommandSet.MethodsCommand); packet.setNextValueAsReferenceTypeID(classID); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = performCommand(packet); int declared = reply.getNextValueAsInt(); long mID; java.lang.String value = null; java.lang.String methodName = ""; for (int i = 0; i < declared; i++) { mID = reply.getNextValueAsMethodID(); methodName = reply.getNextValueAsString(); reply.getNextValueAsString(); reply.getNextValueAsInt(); if (mID == methodID) { value = methodName; break; } } return value; }


void silenceRingers() { for (com.android.server.telecom.Call call : mRingingCalls) { call.silence(); } mRingingCalls.clear(); mRinger.stopRinging(); mRinger.stopCallWaiting(); mCallAudioModeStateMachine.sendMessageWithArgs(CallAudioModeStateMachine.NO_MORE_RINGING_CALLS, makeArgsForModeStateMachine()); }

public synchronized int bindServer() { java.net.InetSocketAddress serverAddress = getSyncServerAddress(); try { logWriter.println(("[SYNC] Binding socket on: " + serverAddress)); serverSocket = new java.net.ServerSocket(serverAddress.getPort(), 0, serverAddress.getAddress()); int localPort = serverSocket.getLocalPort(); logWriter.println((((("[SYNC] Bound socket on: " + serverAddress) + " (local port: ") + localPort) + ")")); return localPort; } catch (java.io.IOException e) { throw new org.apache.harmony.jpda.tests.framework.TestErrorException("[SYNC] Exception in binding for socket sync connection", e); } }
@org.junit.Test public void sub_float() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(SUB_FLOAT).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }
public void test_equals() { java.text.NumberFormat nf1 = java.text.NumberFormat.getInstance(); java.text.NumberFormat nf2 = java.text.NumberFormat.getInstance(); assertTrue("Objects are not equal", nf1.equals(nf2)); assertTrue("THe same Objects are not equal", nf1.equals(nf1)); nf2.setMaximumIntegerDigits(100); assertFalse("Different NumberFormat are equal", nf1.equals(nf2)); nf2.setMaximumIntegerDigits(nf1.getMaximumIntegerDigits()); assertTrue("THe same Objects are not equal", nf1.equals(nf2)); nf1 = java.text.NumberFormat.getIntegerInstance(); nf2 = java.text.NumberFormat.getIntegerInstance(java.util.Locale.CHINA); assertFalse("Different NumberFormat are equal", nf1.equals(nf2)); assertFalse("Object is equal null", nf1.equals(null)); }
private static native boolean native_invert(int native_object, int inverse);



public com.android.ide.eclipse.adt.internal.resources.AttrsXmlParser preload() { org.w3c.dom.Document doc = getDocument(); if (doc == null) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.WARNING, "Failed to find %1$s", mOsAttrsXmlPath); return this; } org.w3c.dom.Node res = doc.getFirstChild(); while (((res != null) && ((res.getNodeType()) != (org.w3c.dom.Node.ELEMENT_NODE))) && (!(res.getNodeName().equals("resources")))) { res = res.getNextSibling(); } if (res == null) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.WARNING, "Failed to find a <resources> node in %1$s", mOsAttrsXmlPath); return this; } parseResources(res); return this; }
static boolean isSuperClassOf(com.android.jack.ir.ast.JDefinedClass possibleSuper, com.android.jack.ir.ast.JDefinedClass type) { com.android.jack.ir.ast.JDefinedClassOrInterface superClass = ((com.android.jack.ir.ast.JDefinedClassOrInterface) (type.getSuperClass())); while (superClass != null) { if (possibleSuper.isSameType(superClass)) { return true; } superClass = ((com.android.jack.ir.ast.JDefinedClassOrInterface) (superClass.getSuperClass())); } return false; }
public void loadLayoutParamsAttributes(com.android.ide.common.resources.platform.ViewClassInfo.LayoutParamsInfo info) { if ((getDocument()) != null) { com.android.ide.common.resources.platform.ViewClassInfo viewLayoutClass = info.getViewLayoutClass(); java.lang.String xmlName = java.lang.String.format("%1$s_%2$s", viewLayoutClass.getShortClassName(), info.getShortClassName()); xmlName = xmlName.replaceFirst("Params$", ""); com.android.ide.common.resources.platform.DeclareStyleableInfo style = mStyleMap.get(xmlName); if (style != null) { java.lang.String definedBy = (viewLayoutClass.getFullClassName()) + (DOT_LAYOUT_PARAMS); com.android.ide.common.resources.platform.AttributeInfo[] attributes = style.getAttributes(); for (com.android.ide.common.resources.platform.AttributeInfo attribute : attributes) { if ((attribute.getDefinedBy()) == null) { attribute.setDefinedBy(definedBy); } } info.setAttributes(attributes); } } }

private java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); return mStateMachine.getDevicesMatchingConnectionStates(states); }

@org.junit.Test public void testApplyWhenNewFileExistsStrict() throws java.lang.Exception { myPatchSpec.setStrict(true); com.intellij.updater.Patch patch = com.intellij.updater.PatchFileCreator.create(myPatchSpec, myFile, com.intellij.updater.TEST_UI); com.intellij.openapi.util.io.FileUtil.writeToFile(new java.io.File(myOlderDir, "newfile.txt"), "hello"); com.intellij.updater.PatchFileCreator.PreparationResult preparationResult = com.intellij.updater.PatchFileCreator.prepareAndValidate(myFile, myOlderDir, com.intellij.updater.TEST_UI); assertEquals(1, preparationResult.validationResults.size()); assertEquals(new com.intellij.updater.ValidationResult(ValidationResult.Kind.CONFLICT, "newfile.txt", ValidationResult.Action.VALIDATE, "Unexpected file", ValidationResult.Option.DELETE), preparationResult.validationResults.get(0)); assertAppliedAndRevertedCorrectly(patch, preparationResult); }

private void sendConnectionStateChange(int profile, android.content.Intent connIntent) { android.bluetooth.BluetoothDevice device = connIntent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); int prevState = connIntent.getIntExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, (-1)); int state = connIntent.getIntExtra(BluetoothProfile.EXTRA_STATE, (-1)); android.util.Log.d(com.android.bluetooth.btservice.AdapterProperties.TAG, ((((((("PROFILE_CONNECTION_STATE_CHANGE: profile=" + profile) + ", device=") + device) + ", ") + prevState) + " -> ") + state)); if (!(com.android.bluetooth.btservice.AdapterProperties.isNormalStateTransition(prevState, state))) { android.util.Log.e(com.android.bluetooth.btservice.AdapterProperties.TAG, ((((((("PROFILE_CONNECTION_STATE_CHANGE: invalid transition for profile=" + profile) + ", device=") + device) + ", ") + prevState) + " -> ") + state)); } sendConnectionStateChange(device, profile, state, prevState); }

private void executeBuild(java.util.List<java.lang.String> arguments, org.gradle.tooling.ProjectConnection connection, java.lang.String[] tasks) { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add("-i"); args.add("-u"); args.addAll(arguments); org.gradle.tooling.BuildLauncher launcher = connection.newBuild().forTasks(tasks).withArguments(args.toArray(new java.lang.String[args.size()])); if (com.android.build.gradle.integration.common.utils.JacocoAgent.isJacocoEnabled()) { launcher.setJvmArguments(com.android.build.gradle.integration.common.utils.JacocoAgent.getJvmArg()); } if ((stdout) != null) { launcher.setStandardOutput(stdout); } launcher.run(); }
private void bindAndInitialize() throws android.telephony.mbms.MbmsException { android.telephony.mbms.MbmsUtils.startBinding(mContext, android.telephony.MbmsDownloadManager.MBMS_DOWNLOAD_SERVICE_ACTION, new android.content.ServiceConnection() { @java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = IMbmsDownloadService.Stub.asInterface(service); int result; try { result = downloadService.initialize(mSubscriptionId, mCallback); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG, "Service died before initialization"); return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG, "Runtime exception during initialization"); mCallback.error(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { mCallback.error(result, "Error returned during initialization"); return; } mService.set(downloadService); } @java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { mService.set(null); } }); }




@java.lang.Override protected boolean engineVerify(byte[] sigBytes) throws java.security.SignatureException { if ((key) == null) { throw new java.security.SignatureException("Need RSA public key"); } if (inputIsTooLong) { return false; } byte[] paddedBuffer = new byte[inputBuffer.length]; byte[] outputBuffer = new byte[inputBuffer.length]; try { int paddedSize = org.apache.harmony.xnet.provider.jsse.NativeCrypto.RSA_public_decrypt(sigBytes.length, sigBytes, paddedBuffer, key.getPkeyContext(), NativeCrypto.RSA_NO_PADDING); paddedSize--; java.lang.System.arraycopy(paddedBuffer, 1, paddedBuffer, 0, paddedSize); final int size; try { size = org.apache.harmony.xnet.provider.jsse.NativeCrypto.RSA_padding_check_PKCS1_type_1(outputBuffer, outputBuffer.length, paddedBuffer, paddedSize, inputBuffer.length); } catch (java.lang.Exception e) { return false; } boolean matches = size == (inputOffset); for (int i = 0; i < size; i++) { if ((inputBuffer[i]) != (outputBuffer[i])) { matches = false; } } return matches; } catch (java.lang.Exception ex) { throw new java.security.SignatureException(ex); } finally { inputOffset = 0; } }

@com.googlecode.android_scripting.rpc.Rpc(description = "Forget a wifi network with priority") public void wifiForgetNetwork(@com.googlecode.android_scripting.rpc.RpcParameter(name = "wifiSSID") java.lang.Integer newtorkId) { com.googlecode.android_scripting.facade.wifi.WifiManagerFacade.WifiActionListener listener = new com.googlecode.android_scripting.facade.wifi.WifiManagerFacade.WifiActionListener(mEventFacade, "ForgetNetwork"); mWifi.forget(newtorkId, listener); }

public com.android.ahat.Site add(int stackId, int stackDepth, java.util.Iterator<com.android.tools.perflib.heap.StackFrame> path, com.android.tools.perflib.heap.Instance inst) { mObjects.add(inst); java.lang.String heap = inst.getHeap().getName(); mSizesByHeap.put(heap, ((getSize(heap)) + (inst.getSize()))); java.util.Map<com.android.tools.perflib.heap.ClassObj, com.android.ahat.Site.ObjectsInfo> classToObjectsInfo = mObjectsInfoMap.get(inst.getHeap()); if (classToObjectsInfo == null) { classToObjectsInfo = new java.util.HashMap<com.android.tools.perflib.heap.ClassObj, com.android.ahat.Site.ObjectsInfo>(); mObjectsInfoMap.put(inst.getHeap(), classToObjectsInfo); } com.android.ahat.Site.ObjectsInfo info = classToObjectsInfo.get(inst.getClassObj()); if (info == null) { info = new com.android.ahat.Site.ObjectsInfo(inst.getHeap(), inst.getClassObj(), 0, 0); mObjectsInfos.add(info); classToObjectsInfo.put(inst.getClassObj(), info); } (info.numInstances)++; info.numBytes += inst.getSize(); if (path.hasNext()) { java.lang.String next = path.next().toString(); com.android.ahat.Site child = mChildren.get(next); if (child == null) { child = new com.android.ahat.Site(this, next, stackId, (stackDepth + 1)); mChildren.put(next, child); } return child.add(stackId, (stackDepth + 1), path, inst); } else { return this; } }


private static void printReferences(com.android.ahat.Doc doc, com.android.tools.perflib.heap.Instance inst) { doc.section("Objects with References to this Object"); if (inst.getHardReferences().isEmpty()) { doc.println(com.android.ahat.DocString.text("(none)")); } else { doc.table(new com.android.ahat.Column("Object")); for (com.android.tools.perflib.heap.Instance ref : inst.getHardReferences()) { doc.row(com.android.ahat.Value.render(ref)); } doc.end(); } if ((inst.getSoftReferences()) != null) { doc.section("Objects with Soft References to this Object"); doc.table(new com.android.ahat.Column("Object")); for (com.android.tools.perflib.heap.Instance ref : inst.getSoftReferences()) { doc.row(com.android.ahat.Value.render(inst)); } doc.end(); } }


@java.lang.Override public void endTraceSeed(@javax.annotation.Nonnull com.android.jack.ir.ast.JField field) { composedStatus.pop(); }

@android.annotation.Nullable public android.telephony.euicc.EuiccInfo getEuiccInfo() { if (!(isEnabled())) { return null; } try { return mController.getEuiccInfo(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JThrowStatement throwStmt) { super.visit(throwStmt); assert (cfg) != null; com.android.jack.cfg.ThrowBasicBlock throwBlock = new com.android.jack.cfg.ThrowBasicBlock(cfg, currentStmts); setBlockOfStatement(throwBlock); setExceptionEdges(throwBlock, throwStmt); return false; }

public java.lang.Object[] getElements(java.lang.Object inputElement) { if (inputElement instanceof com.android.hierarchyviewerlib.models.DeviceSelectionModel) { return model.getDevices(); } return new java.lang.Object[0]; }




@org.junit.Test public void testMethodRef006() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(METHODREF006).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }
com.android.internal.telephony.cat.Menu getMainMenu(int slotId) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("StkAppService, getMainMenu, sim id: " + slotId)); if (((slotId >= 0) && (slotId < (mSimCount))) && ((mStkContext[slotId].mMainCmd) != null)) { return mStkContext[slotId].mMainCmd.getMenu(); } else { return null; } }
public static android.net.MacAddress getRandomAddress() { return android.net.MacAddress.getRandomAddress(android.net.MacAddress.BASE_ANDROID_MAC, new java.util.Random()); }
@java.lang.Override public void setUp() { resetLatch(); mLocalSocket = null; mLocalSockName = null; mLastRecvBuf = null; mExited = false; mReceiver = new android.net.util.BlockingSocketReader() { @java.lang.Override protected java.io.FileDescriptor createSocket() { java.io.FileDescriptor s = null; try { s = android.system.Os.socket(android.net.util.AF_INET6, android.net.util.SOCK_DGRAM, android.net.util.IPPROTO_UDP); android.system.Os.bind(s, android.net.util.BlockingSocketReaderTest.LOOPBACK6, 0); mLocalSockName = ((java.net.InetSocketAddress) (android.system.Os.getsockname(s))); android.system.Os.setsockoptTimeval(s, android.net.util.SOL_SOCKET, android.net.util.SO_SNDTIMEO, android.net.util.BlockingSocketReaderTest.TIMEO); } catch (android.system.ErrnoException | java.net.SocketException e) { closeSocket(s); fail(); return null; } mLocalSocket = s; return s; } @java.lang.Override protected void handlePacket(byte[] recvbuf, int length) { mLastRecvBuf = java.util.Arrays.copyOf(recvbuf, length); mLatch.countDown(); } @java.lang.Override protected void onExit() { mExited = true; mLatch.countDown(); } }; }




static java.lang.String[] getAlgorithms(java.lang.String propertyName) { java.lang.String property = java.security.AccessController.doPrivileged(((java.security.PrivilegedAction<java.lang.String>) (() -> java.security.Security.getProperty(propertyName)))); java.lang.String[] algorithmsInProperty = null; if ((property != null) && (!(property.isEmpty()))) { if (((property.charAt(0)) == '"') && ((property.charAt(((property.length()) - 1))) == '"')) { property = property.substring(1, ((property.length()) - 1)); } algorithmsInProperty = property.split(","); for (int i = 0; i < (algorithmsInProperty.length); i++) { algorithmsInProperty[i] = algorithmsInProperty[i].trim(); } } if (algorithmsInProperty == null) { algorithmsInProperty = new java.lang.String[0]; } return algorithmsInProperty; }


void connectionStateChanged(android.bluetooth.BluetoothDevice device, int newState, int prevState) { if ((prevState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (newState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.AUDIO_CONNECTABLE_STATES).size()) > 1) { mNativeInterface.configureInbandRingingEnabledUsingBsir(false); } } if ((prevState != (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) && (newState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED))) { if ((getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.AUDIO_CONNECTABLE_STATES).size()) <= 1) { mNativeInterface.configureInbandRingingEnabledUsingBsir(true); } } }



public void testBug15081434() throws java.lang.Exception { java.text.DecimalFormat df = ((java.text.DecimalFormat) (java.text.NumberFormat.getCurrencyInstance(java.util.Locale.US))); try { df.parse(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.applyLocalizedPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.applyPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.applyPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.format(null, new java.lang.StringBuffer(), new java.text.FieldPosition(0)); fail(); } catch (java.lang.IllegalArgumentException expected) { } try { df.parse(null, new java.text.ParsePosition(0)); fail(); } catch (java.lang.NullPointerException expected) { } df.setDecimalFormatSymbols(null); try { df.setCurrency(null); fail(); } catch (java.lang.NullPointerException expected) { } df.setNegativePrefix(null); df.setNegativeSuffix(null); df.setPositivePrefix(null); df.setPositiveSuffix(null); try { df.setRoundingMode(null); fail(); } catch (java.lang.NullPointerException expected) { } }

@java.lang.Override public void iccOpenLogicalChannel(java.lang.String aid, int p2, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SIM_OPEN_CHANNEL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { if (android.os.Build.IS_DEBUGGABLE) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " aid = ") + aid) + " p2 = ") + p2)); } else { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } } try { radioProxy.iccOpenLogicalChannel(rr.mSerial, convertNullToEmptyString(aid), p2); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "iccOpenLogicalChannel", e); } } }
void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { mStateMachine.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); }

@javax.annotation.Nonnull private static java.util.Properties loadLibraryProperties(@javax.annotation.Nonnull com.android.sched.vfs.InputVFS vfs) throws com.android.jack.library.NotJackLibraryException { java.util.Properties libraryProperties = new java.util.Properties(); try { com.android.sched.vfs.InputVFile libProp = vfs.getRootInputVDir().getInputVFile(JackLibrary.LIBRARY_PROPERTIES_VPATH); java.io.InputStream inputStream = null; try { inputStream = libProp.getInputStream(); libraryProperties.load(inputStream); } finally { if (inputStream != null) { try { inputStream.close(); } catch (java.io.IOException e) { com.android.jack.library.JackLibraryFactory.logger.log(java.util.logging.Level.WARNING, "Failed to close ''{0}''", libProp.getLocation().getDescription()); } } } } catch (java.io.IOException e) { throw new com.android.jack.library.NotJackLibraryException(vfs.getLocation()); } return libraryProperties; }
public java.net.SocketAddress getpeername(java.io.FileDescriptor fd) throws libcore.io.ErrnoException { return os.getpeername(fd); }

@java.lang.Override public void touch(int x, int y, com.android.monkeyrunner.adb.TouchPressType type) { try { switch (type) { case DOWN : manager.touchDown(x, y); break; case UP : manager.touchUp(x, y); break; case DOWN_AND_UP : manager.tap(x, y); break; } } catch (java.io.IOException e) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log(java.util.logging.Level.SEVERE, ((((("Error sending touch event: " + x) + " ") + y) + " ") + type), e); } }

@java.lang.Override public void deleteTransportModeTransform(int resourceId) throws android.os.RemoteException { synchronized(mTransformRecords) { com.android.server.IpSecService.TransformRecord record; record = mTransformRecords.get(resourceId); if (record == null) { throw new java.lang.IllegalArgumentException((("Transform " + resourceId) + " is not available to be deleted")); } if (((record.pid) != (android.os.Binder.getCallingPid())) || ((record.uid) != (android.os.Binder.getCallingUid()))) { throw new java.lang.SecurityException("Only the owner of an IpSec Transform may delete it!"); } record.releaseResources(); mTransformRecords.remove(resourceId); record.nullifyRecord(); } }
public static void main() { try { LocalClass3.CC.newInstance(); java.lang.System.out.println("LocalClass3 succeeded"); } catch (java.lang.Exception ex) { java.lang.System.err.println("Got unexpected LocalClass3 failure"); ex.printStackTrace(); } }

@java.lang.Override public void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "onCreate"); requestWindowFeature(Window.FEATURE_NO_TITLE); setContentView(R.layout.stk_menu_list); mInstance = this; mTitleTextView = ((android.widget.TextView) (findViewById(R.id.title_text))); mTitleIconView = ((android.widget.ImageView) (findViewById(R.id.title_icon))); mProgressView = ((android.widget.ProgressBar) (findViewById(R.id.progress_bar))); mContext = getBaseContext(); mAcceptUsersInput = true; getListView().setOnCreateContextMenuListener(this); initFromIntent(getIntent()); }
@java.lang.Override @javax.annotation.Nonnull public void setProperty(@javax.annotation.Nonnull java.lang.String arg0, @javax.annotation.Nonnull java.lang.String arg1) throws com.android.jack.api.v01.ConfigurationException { }






@java.lang.Override public void onInputBufferAvailable(android.media.MediaCodec codec, int index) { fail(((codec + " onInputBufferAvailable ") + index)); }

public boolean avoidBadWifi() { return mAvoidBadWifiTracker.currentValue(); }
public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_kernel_struct s = new com.android.rs.test.ScriptC_kernel_struct(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_init_vars(A); s.forEach_root(A, B); s.invoke_verify_root(); s.invoke_kernel_struct_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }
public void onIfaceAdded(int type, java.lang.String name) { kilroy(); android.util.Log.d(com.android.server.wifi.WifiVendorHal.TAG, ((("onIfaceAdded " + type) + ", name: ") + name)); }
public void projectRenamed(org.eclipse.core.resources.IProject project, org.eclipse.core.runtime.IPath from) { com.android.ide.eclipse.adt.internal.sdk.ProjectState renamedState = com.android.ide.eclipse.adt.internal.sdk.Sdk.getProjectState(project); if (renamedState.isLibrary()) { disposeLibraryProject(from.lastSegment()); synchronized(com.android.ide.eclipse.adt.internal.sdk.Sdk.sLock) { for (com.android.ide.eclipse.adt.internal.sdk.ProjectState projectState : com.android.ide.eclipse.adt.internal.sdk.Sdk.sProjectStateMap.values()) { if ((projectState != renamedState) && (projectState.isMissingLibraries())) { org.eclipse.core.runtime.IPath oldRelativePath = com.android.ide.eclipse.adt.internal.sdk.Sdk.makeRelativeTo(from, projectState.getProject().getFullPath()); org.eclipse.core.runtime.IPath newRelativePath = com.android.ide.eclipse.adt.internal.sdk.Sdk.makeRelativeTo(project.getFullPath(), projectState.getProject().getFullPath()); com.android.ide.eclipse.adt.internal.sdk.ProjectState.LibraryState libState = projectState.updateLibrary(oldRelativePath.toString(), newRelativePath.toString(), renamedState); if (libState != null) { com.android.ide.eclipse.adt.internal.sdk.Sdk.LinkLibraryBundle bundle = new com.android.ide.eclipse.adt.internal.sdk.Sdk.LinkLibraryBundle(); bundle.mProject = projectState.getProject(); bundle.mLibraryProjects = new org.eclipse.core.resources.IProject[]{ libState.getProjectState().getProject() }; bundle.mCleanupCPE = false; startActionBundle(bundle); } } } } } }